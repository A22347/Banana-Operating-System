
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 17 98 00 00       	call   c0009837 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 e5 f4 01 00       	call   c001f50a <_init>
c0000025:	c3                   	ret    
c0000026:	bb b6 ff 01 c0       	mov    ebx,0xc001ffb6
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb c4 ff 01 c0    	cmp    ebx,0xc001ffc4
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 2b 02 c0       	mov    eax,0xc0022bf8
c0000049:	3d f8 2b 02 c0       	cmp    eax,0xc0022bf8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 2b 02 c0       	push   0xc0022bf8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 2b 02 c0       	mov    eax,0xc0022bf8
c0000075:	2d f8 2b 02 c0       	sub    eax,0xc0022bf8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 2b 02 c0       	push   0xc0022bf8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 80 2d 02 c0 00 	cmp    BYTE PTR ds:0xc0022d80,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb cc ff 01 c0       	mov    ebx,0xc001ffcc
c00000bb:	81 eb c8 ff 01 c0    	sub    ebx,0xc001ffc8
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be c8 ff 01 c0       	mov    esi,0xc001ffc8
c00000ca:	a1 84 2d 02 c0       	mov    eax,ds:0xc0022d84
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 84 2d 02 c0       	mov    ds:0xc0022d84,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 84 2d 02 c0       	mov    eax,ds:0xc0022d84
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 2b 02 c0       	push   0xc0022bf8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 80 2d 02 c0 01 	mov    BYTE PTR ds:0xc0022d80,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 88 2d 02 c0       	push   0xc0022d88
c000012c:	68 f8 2b 02 c0       	push   0xc0022bf8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 38 4c 01 00       	call   c0014f08 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 28 c0 00 00       	call   c000c310 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 16 4c 01 00       	call   c0014f08 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 d7 50 01 00       	call   c00153e8 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 1a 57 01 00       	call   c0015a34 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 d0 31 02 c0 	lgdtd  ds:0xc00231d0
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 7c 83 00 00       	jmp    c000871e <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax

c00003a4 <memcmp>:
c00003a4:	56                   	push   esi
c00003a5:	53                   	push   ebx
c00003a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003b2:	85 f6                	test   esi,esi
c00003b4:	74 1d                	je     c00003d3 <memcmp+0x2f>
c00003b6:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b8:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003bb:	38 cb                	cmp    bl,cl
c00003bd:	75 19                	jne    c00003d8 <memcmp+0x34>
c00003bf:	01 c6                	add    esi,eax
c00003c1:	eb 0a                	jmp    c00003cd <memcmp+0x29>
c00003c3:	90                   	nop
c00003c4:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c6:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003c9:	38 d9                	cmp    cl,bl
c00003cb:	75 0b                	jne    c00003d8 <memcmp+0x34>
c00003cd:	40                   	inc    eax
c00003ce:	42                   	inc    edx
c00003cf:	39 f0                	cmp    eax,esi
c00003d1:	75 f1                	jne    c00003c4 <memcmp+0x20>
c00003d3:	31 c0                	xor    eax,eax
c00003d5:	5b                   	pop    ebx
c00003d6:	5e                   	pop    esi
c00003d7:	c3                   	ret    
c00003d8:	0f b6 c1             	movzx  eax,cl
c00003db:	29 d8                	sub    eax,ebx
c00003dd:	5b                   	pop    ebx
c00003de:	5e                   	pop    esi
c00003df:	c3                   	ret    

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 80 00 00 00    	jae    c0000478 <memmove+0x98>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	74 74                	je     c0000470 <memmove+0x90>
c00003fc:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003ff:	8d 75 04             	lea    esi,[ebp+0x4]
c0000402:	39 cd                	cmp    ebp,ecx
c0000404:	0f 93 c1             	setae  cl
c0000407:	39 f3                	cmp    ebx,esi
c0000409:	0f 93 c0             	setae  al
c000040c:	89 c6                	mov    esi,eax
c000040e:	09 ce                	or     esi,ecx
c0000410:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000413:	89 f0                	mov    eax,esi
c0000415:	83 f9 0c             	cmp    ecx,0xc
c0000418:	0f 97 c1             	seta   cl
c000041b:	84 c8                	test   al,cl
c000041d:	74 75                	je     c0000494 <memmove+0xb4>
c000041f:	89 e9                	mov    ecx,ebp
c0000421:	09 d9                	or     ecx,ebx
c0000423:	83 e1 03             	and    ecx,0x3
c0000426:	75 6c                	jne    c0000494 <memmove+0xb4>
c0000428:	89 d7                	mov    edi,edx
c000042a:	89 d9                	mov    ecx,ebx
c000042c:	83 e7 fc             	and    edi,0xfffffffc
c000042f:	89 ee                	mov    esi,ebp
c0000431:	01 df                	add    edi,ebx
c0000433:	90                   	nop
c0000434:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000436:	83 c6 04             	add    esi,0x4
c0000439:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000043c:	83 c1 04             	add    ecx,0x4
c000043f:	39 f9                	cmp    ecx,edi
c0000441:	75 f1                	jne    c0000434 <memmove+0x54>
c0000443:	89 d1                	mov    ecx,edx
c0000445:	89 d7                	mov    edi,edx
c0000447:	83 e1 fc             	and    ecx,0xfffffffc
c000044a:	29 cf                	sub    edi,ecx
c000044c:	01 cb                	add    ebx,ecx
c000044e:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000452:	39 ca                	cmp    edx,ecx
c0000454:	74 1a                	je     c0000470 <memmove+0x90>
c0000456:	8a 03                	mov    al,BYTE PTR [ebx]
c0000458:	83 ff 01             	cmp    edi,0x1
c000045b:	88 06                	mov    BYTE PTR [esi],al
c000045d:	74 11                	je     c0000470 <memmove+0x90>
c000045f:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000462:	83 ff 02             	cmp    edi,0x2
c0000465:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000468:	74 06                	je     c0000470 <memmove+0x90>
c000046a:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c000046d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000470:	5b                   	pop    ebx
c0000471:	89 e8                	mov    eax,ebp
c0000473:	5e                   	pop    esi
c0000474:	5f                   	pop    edi
c0000475:	5d                   	pop    ebp
c0000476:	c3                   	ret    
c0000477:	90                   	nop
c0000478:	76 f6                	jbe    c0000470 <memmove+0x90>
c000047a:	85 d2                	test   edx,edx
c000047c:	74 f2                	je     c0000470 <memmove+0x90>
c000047e:	4b                   	dec    ebx
c000047f:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000482:	66 90                	xchg   ax,ax
c0000484:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000487:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000048a:	4a                   	dec    edx
c000048b:	75 f7                	jne    c0000484 <memmove+0xa4>
c000048d:	5b                   	pop    ebx
c000048e:	89 e8                	mov    eax,ebp
c0000490:	5e                   	pop    esi
c0000491:	5f                   	pop    edi
c0000492:	5d                   	pop    ebp
c0000493:	c3                   	ret    
c0000494:	01 ea                	add    edx,ebp
c0000496:	89 e9                	mov    ecx,ebp
c0000498:	8a 03                	mov    al,BYTE PTR [ebx]
c000049a:	41                   	inc    ecx
c000049b:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000049e:	43                   	inc    ebx
c000049f:	39 d1                	cmp    ecx,edx
c00004a1:	75 f5                	jne    c0000498 <memmove+0xb8>
c00004a3:	eb cb                	jmp    c0000470 <memmove+0x90>
c00004a5:	8d 76 00             	lea    esi,[esi+0x0]

c00004a8 <memset>:
c00004a8:	57                   	push   edi
c00004a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00004ad:	85 c9                	test   ecx,ecx
c00004af:	74 0b                	je     c00004bc <memset+0x14>
c00004b1:	fc                   	cld    
c00004b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00004b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00004ba:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00004bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00004c0:	5f                   	pop    edi
c00004c1:	c3                   	ret    
c00004c2:	66 90                	xchg   ax,ax

c00004c4 <strlen>:
c00004c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00004c8:	31 c0                	xor    eax,eax
c00004ca:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00004cd:	74 09                	je     c00004d8 <strlen+0x14>
c00004cf:	90                   	nop
c00004d0:	40                   	inc    eax
c00004d1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00004d5:	75 f9                	jne    c00004d0 <strlen+0xc>
c00004d7:	c3                   	ret    
c00004d8:	c3                   	ret    
c00004d9:	8d 76 00             	lea    esi,[esi+0x0]

c00004dc <strpbrk>:
c00004dc:	57                   	push   edi
c00004dd:	56                   	push   esi
c00004de:	53                   	push   ebx
c00004df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004e3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00004e7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00004e9:	84 db                	test   bl,bl
c00004eb:	74 21                	je     c000050e <strpbrk+0x32>
c00004ed:	8a 07                	mov    al,BYTE PTR [edi]
c00004ef:	84 c0                	test   al,al
c00004f1:	74 14                	je     c0000507 <strpbrk+0x2b>
c00004f3:	38 d8                	cmp    al,bl
c00004f5:	74 19                	je     c0000510 <strpbrk+0x34>
c00004f7:	89 fa                	mov    edx,edi
c00004f9:	eb 05                	jmp    c0000500 <strpbrk+0x24>
c00004fb:	90                   	nop
c00004fc:	38 d9                	cmp    cl,bl
c00004fe:	74 10                	je     c0000510 <strpbrk+0x34>
c0000500:	42                   	inc    edx
c0000501:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000503:	84 c9                	test   cl,cl
c0000505:	75 f5                	jne    c00004fc <strpbrk+0x20>
c0000507:	46                   	inc    esi
c0000508:	8a 1e                	mov    bl,BYTE PTR [esi]
c000050a:	84 db                	test   bl,bl
c000050c:	75 e1                	jne    c00004ef <strpbrk+0x13>
c000050e:	31 f6                	xor    esi,esi
c0000510:	89 f0                	mov    eax,esi
c0000512:	5b                   	pop    ebx
c0000513:	5e                   	pop    esi
c0000514:	5f                   	pop    edi
c0000515:	c3                   	ret    
c0000516:	66 90                	xchg   ax,ax

c0000518 <strtok>:
c0000518:	56                   	push   esi
c0000519:	53                   	push   ebx
c000051a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000051e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000522:	85 db                	test   ebx,ebx
c0000524:	75 07                	jne    c000052d <strtok+0x15>
c0000526:	eb 2c                	jmp    c0000554 <strtok+0x3c>
c0000528:	43                   	inc    ebx
c0000529:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000052d:	56                   	push   esi
c000052e:	53                   	push   ebx
c000052f:	e8 a8 ff ff ff       	call   c00004dc <strpbrk>
c0000534:	5a                   	pop    edx
c0000535:	a3 a0 2d 02 c0       	mov    ds:0xc0022da0,eax
c000053a:	59                   	pop    ecx
c000053b:	39 d8                	cmp    eax,ebx
c000053d:	74 e9                	je     c0000528 <strtok+0x10>
c000053f:	85 c0                	test   eax,eax
c0000541:	74 1b                	je     c000055e <strtok+0x46>
c0000543:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000546:	8d 50 01             	lea    edx,[eax+0x1]
c0000549:	89 d8                	mov    eax,ebx
c000054b:	89 15 a0 2d 02 c0    	mov    DWORD PTR ds:0xc0022da0,edx
c0000551:	5b                   	pop    ebx
c0000552:	5e                   	pop    esi
c0000553:	c3                   	ret    
c0000554:	8b 1d a0 2d 02 c0    	mov    ebx,DWORD PTR ds:0xc0022da0
c000055a:	85 db                	test   ebx,ebx
c000055c:	75 cf                	jne    c000052d <strtok+0x15>
c000055e:	31 c0                	xor    eax,eax
c0000560:	5b                   	pop    ebx
c0000561:	5e                   	pop    esi
c0000562:	c3                   	ret    
c0000563:	90                   	nop

c0000564 <strcpy>:
c0000564:	53                   	push   ebx
c0000565:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000056d:	89 c3                	mov    ebx,eax
c000056f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000571:	84 d2                	test   dl,dl
c0000573:	74 0d                	je     c0000582 <strcpy+0x1e>
c0000575:	8d 76 00             	lea    esi,[esi+0x0]
c0000578:	88 13                	mov    BYTE PTR [ebx],dl
c000057a:	41                   	inc    ecx
c000057b:	43                   	inc    ebx
c000057c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000057e:	84 d2                	test   dl,dl
c0000580:	75 f6                	jne    c0000578 <strcpy+0x14>
c0000582:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000585:	5b                   	pop    ebx
c0000586:	c3                   	ret    
c0000587:	90                   	nop

c0000588 <strncpy>:
c0000588:	55                   	push   ebp
c0000589:	57                   	push   edi
c000058a:	56                   	push   esi
c000058b:	53                   	push   ebx
c000058c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000590:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000594:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000598:	85 c0                	test   eax,eax
c000059a:	74 39                	je     c00005d5 <strncpy+0x4d>
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	8d 48 ff             	lea    ecx,[eax-0x1]
c00005a1:	8d 55 01             	lea    edx,[ebp+0x1]
c00005a4:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00005a7:	84 db                	test   bl,bl
c00005a9:	74 31                	je     c00005dc <strncpy+0x54>
c00005ab:	85 c9                	test   ecx,ecx
c00005ad:	74 26                	je     c00005d5 <strncpy+0x4d>
c00005af:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c00005b2:	8d 48 fe             	lea    ecx,[eax-0x2]
c00005b5:	8d 55 02             	lea    edx,[ebp+0x2]
c00005b8:	8d 46 02             	lea    eax,[esi+0x2]
c00005bb:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c00005be:	84 db                	test   bl,bl
c00005c0:	75 0f                	jne    c00005d1 <strncpy+0x49>
c00005c2:	eb 18                	jmp    c00005dc <strncpy+0x54>
c00005c4:	40                   	inc    eax
c00005c5:	42                   	inc    edx
c00005c6:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00005c9:	49                   	dec    ecx
c00005ca:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00005cd:	84 db                	test   bl,bl
c00005cf:	74 0b                	je     c00005dc <strncpy+0x54>
c00005d1:	85 c9                	test   ecx,ecx
c00005d3:	75 ef                	jne    c00005c4 <strncpy+0x3c>
c00005d5:	5b                   	pop    ebx
c00005d6:	89 e8                	mov    eax,ebp
c00005d8:	5e                   	pop    esi
c00005d9:	5f                   	pop    edi
c00005da:	5d                   	pop    ebp
c00005db:	c3                   	ret    
c00005dc:	85 c9                	test   ecx,ecx
c00005de:	74 f5                	je     c00005d5 <strncpy+0x4d>
c00005e0:	fc                   	cld    
c00005e1:	31 c0                	xor    eax,eax
c00005e3:	89 d7                	mov    edi,edx
c00005e5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00005e7:	89 e8                	mov    eax,ebp
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	5f                   	pop    edi
c00005ec:	5d                   	pop    ebp
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strcmp>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00005f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00005fa:	8a 16                	mov    dl,BYTE PTR [esi]
c00005fc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00005ff:	38 d1                	cmp    cl,dl
c0000601:	75 1d                	jne    c0000620 <strcmp+0x30>
c0000603:	84 c9                	test   cl,cl
c0000605:	74 21                	je     c0000628 <strcmp+0x38>
c0000607:	b8 01 00 00 00       	mov    eax,0x1
c000060c:	eb 07                	jmp    c0000615 <strcmp+0x25>
c000060e:	66 90                	xchg   ax,ax
c0000610:	40                   	inc    eax
c0000611:	84 d2                	test   dl,dl
c0000613:	74 13                	je     c0000628 <strcmp+0x38>
c0000615:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000618:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c000061c:	38 ca                	cmp    dl,cl
c000061e:	74 f0                	je     c0000610 <strcmp+0x20>
c0000620:	0f b6 c2             	movzx  eax,dl
c0000623:	5b                   	pop    ebx
c0000624:	29 c8                	sub    eax,ecx
c0000626:	5e                   	pop    esi
c0000627:	c3                   	ret    
c0000628:	31 c0                	xor    eax,eax
c000062a:	5b                   	pop    ebx
c000062b:	5e                   	pop    esi
c000062c:	c3                   	ret    
c000062d:	8d 76 00             	lea    esi,[esi+0x0]

c0000630 <strchr>:
c0000630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000634:	8a 10                	mov    dl,BYTE PTR [eax]
c0000636:	84 d2                	test   dl,dl
c0000638:	74 15                	je     c000064f <strchr+0x1f>
c000063a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000063e:	38 ca                	cmp    dl,cl
c0000640:	75 06                	jne    c0000648 <strchr+0x18>
c0000642:	eb 0e                	jmp    c0000652 <strchr+0x22>
c0000644:	38 ca                	cmp    dl,cl
c0000646:	74 09                	je     c0000651 <strchr+0x21>
c0000648:	40                   	inc    eax
c0000649:	8a 10                	mov    dl,BYTE PTR [eax]
c000064b:	84 d2                	test   dl,dl
c000064d:	75 f5                	jne    c0000644 <strchr+0x14>
c000064f:	31 c0                	xor    eax,eax
c0000651:	c3                   	ret    
c0000652:	c3                   	ret    
c0000653:	90                   	nop

c0000654 <strncmp>:
c0000654:	57                   	push   edi
c0000655:	56                   	push   esi
c0000656:	53                   	push   ebx
c0000657:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000065b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000065f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000663:	85 ff                	test   edi,edi
c0000665:	74 28                	je     c000068f <strncmp+0x3b>
c0000667:	8a 16                	mov    dl,BYTE PTR [esi]
c0000669:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000066c:	38 d1                	cmp    cl,dl
c000066e:	75 28                	jne    c0000698 <strncmp+0x44>
c0000670:	8d 46 01             	lea    eax,[esi+0x1]
c0000673:	84 c9                	test   cl,cl
c0000675:	74 18                	je     c000068f <strncmp+0x3b>
c0000677:	01 fe                	add    esi,edi
c0000679:	eb 0f                	jmp    c000068a <strncmp+0x36>
c000067b:	90                   	nop
c000067c:	8a 10                	mov    dl,BYTE PTR [eax]
c000067e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000681:	38 ca                	cmp    dl,cl
c0000683:	75 13                	jne    c0000698 <strncmp+0x44>
c0000685:	40                   	inc    eax
c0000686:	84 d2                	test   dl,dl
c0000688:	74 05                	je     c000068f <strncmp+0x3b>
c000068a:	43                   	inc    ebx
c000068b:	39 c6                	cmp    esi,eax
c000068d:	75 ed                	jne    c000067c <strncmp+0x28>
c000068f:	5b                   	pop    ebx
c0000690:	31 c0                	xor    eax,eax
c0000692:	5e                   	pop    esi
c0000693:	5f                   	pop    edi
c0000694:	c3                   	ret    
c0000695:	8d 76 00             	lea    esi,[esi+0x0]
c0000698:	5b                   	pop    ebx
c0000699:	0f b6 c2             	movzx  eax,dl
c000069c:	5e                   	pop    esi
c000069d:	29 c8                	sub    eax,ecx
c000069f:	5f                   	pop    edi
c00006a0:	c3                   	ret    
c00006a1:	8d 76 00             	lea    esi,[esi+0x0]

c00006a4 <strcat>:
c00006a4:	56                   	push   esi
c00006a5:	53                   	push   ebx
c00006a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006aa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006ae:	89 c3                	mov    ebx,eax
c00006b0:	eb 04                	jmp    c00006b6 <strcat+0x12>
c00006b2:	66 90                	xchg   ax,ax
c00006b4:	89 d3                	mov    ebx,edx
c00006b6:	8d 53 01             	lea    edx,[ebx+0x1]
c00006b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00006bd:	75 f5                	jne    c00006b4 <strcat+0x10>
c00006bf:	31 d2                	xor    edx,edx
c00006c1:	8d 76 00             	lea    esi,[esi+0x0]
c00006c4:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00006c7:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00006ca:	42                   	inc    edx
c00006cb:	84 c9                	test   cl,cl
c00006cd:	75 f5                	jne    c00006c4 <strcat+0x20>
c00006cf:	5b                   	pop    ebx
c00006d0:	5e                   	pop    esi
c00006d1:	c3                   	ret    
c00006d2:	66 90                	xchg   ax,ax

c00006d4 <strncat>:
c00006d4:	56                   	push   esi
c00006d5:	53                   	push   ebx
c00006d6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006e2:	85 f6                	test   esi,esi
c00006e4:	74 1e                	je     c0000704 <strncat+0x30>
c00006e6:	89 c2                	mov    edx,eax
c00006e8:	42                   	inc    edx
c00006e9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00006ed:	75 f9                	jne    c00006e8 <strncat+0x14>
c00006ef:	01 ce                	add    esi,ecx
c00006f1:	eb 06                	jmp    c00006f9 <strncat+0x25>
c00006f3:	90                   	nop
c00006f4:	39 f1                	cmp    ecx,esi
c00006f6:	74 10                	je     c0000708 <strncat+0x34>
c00006f8:	42                   	inc    edx
c00006f9:	41                   	inc    ecx
c00006fa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006fd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000700:	84 db                	test   bl,bl
c0000702:	75 f0                	jne    c00006f4 <strncat+0x20>
c0000704:	5b                   	pop    ebx
c0000705:	5e                   	pop    esi
c0000706:	c3                   	ret    
c0000707:	90                   	nop
c0000708:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000070b:	5b                   	pop    ebx
c000070c:	5e                   	pop    esi
c000070d:	c3                   	ret    
c000070e:	66 90                	xchg   ax,ax

c0000710 <strstr>:
c0000710:	57                   	push   edi
c0000711:	56                   	push   esi
c0000712:	53                   	push   ebx
c0000713:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000717:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000071b:	57                   	push   edi
c000071c:	e8 a3 fd ff ff       	call   c00004c4 <strlen>
c0000721:	59                   	pop    ecx
c0000722:	85 c0                	test   eax,eax
c0000724:	74 2a                	je     c0000750 <strstr+0x40>
c0000726:	89 c6                	mov    esi,eax
c0000728:	eb 12                	jmp    c000073c <strstr+0x2c>
c000072a:	66 90                	xchg   ax,ax
c000072c:	56                   	push   esi
c000072d:	57                   	push   edi
c000072e:	53                   	push   ebx
c000072f:	e8 70 fc ff ff       	call   c00003a4 <memcmp>
c0000734:	83 c4 0c             	add    esp,0xc
c0000737:	85 c0                	test   eax,eax
c0000739:	74 15                	je     c0000750 <strstr+0x40>
c000073b:	43                   	inc    ebx
c000073c:	53                   	push   ebx
c000073d:	e8 82 fd ff ff       	call   c00004c4 <strlen>
c0000742:	5a                   	pop    edx
c0000743:	39 f0                	cmp    eax,esi
c0000745:	73 e5                	jae    c000072c <strstr+0x1c>
c0000747:	5b                   	pop    ebx
c0000748:	31 c0                	xor    eax,eax
c000074a:	5e                   	pop    esi
c000074b:	5f                   	pop    edi
c000074c:	c3                   	ret    
c000074d:	8d 76 00             	lea    esi,[esi+0x0]
c0000750:	89 d8                	mov    eax,ebx
c0000752:	5b                   	pop    ebx
c0000753:	5e                   	pop    esi
c0000754:	5f                   	pop    edi
c0000755:	c3                   	ret    
c0000756:	66 90                	xchg   ax,ax

c0000758 <toupper>:
c0000758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000075c:	0f b6 d0             	movzx  edx,al
c000075f:	f6 82 e0 ff 01 c0 02 	test   BYTE PTR [edx-0x3ffe0020],0x2
c0000766:	74 03                	je     c000076b <toupper+0x13>
c0000768:	83 e8 20             	sub    eax,0x20
c000076b:	c3                   	ret    

c000076c <tolower>:
c000076c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000770:	0f b6 d0             	movzx  edx,al
c0000773:	f6 82 e0 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe0020],0x1
c000077a:	74 03                	je     c000077f <tolower+0x13>
c000077c:	83 c0 20             	add    eax,0x20
c000077f:	c3                   	ret    

c0000780 <simple_strtoul>:
c0000780:	55                   	push   ebp
c0000781:	57                   	push   edi
c0000782:	56                   	push   esi
c0000783:	53                   	push   ebx
c0000784:	83 ec 08             	sub    esp,0x8
c0000787:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000078b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000078f:	90                   	nop
c0000790:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000793:	f6 82 e0 ff 01 c0 08 	test   BYTE PTR [edx-0x3ffe0020],0x8
c000079a:	75 05                	jne    c00007a1 <simple_strtoul+0x21>
c000079c:	80 fa 09             	cmp    dl,0x9
c000079f:	75 03                	jne    c00007a4 <simple_strtoul+0x24>
c00007a1:	41                   	inc    ecx
c00007a2:	eb ec                	jmp    c0000790 <simple_strtoul+0x10>
c00007a4:	80 fa 2d             	cmp    dl,0x2d
c00007a7:	0f 84 1b 01 00 00    	je     c00008c8 <simple_strtoul+0x148>
c00007ad:	80 fa 2b             	cmp    dl,0x2b
c00007b0:	0f 84 c2 00 00 00    	je     c0000878 <simple_strtoul+0xf8>
c00007b6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00007be:	85 f6                	test   esi,esi
c00007c0:	0f 85 c3 00 00 00    	jne    c0000889 <simple_strtoul+0x109>
c00007c6:	8a 11                	mov    dl,BYTE PTR [ecx]
c00007c8:	80 fa 30             	cmp    dl,0x30
c00007cb:	0f 84 47 01 00 00    	je     c0000918 <simple_strtoul+0x198>
c00007d1:	be 0a 00 00 00       	mov    esi,0xa
c00007d6:	84 d2                	test   dl,dl
c00007d8:	0f 84 6f 01 00 00    	je     c000094d <simple_strtoul+0x1cd>
c00007de:	31 ed                	xor    ebp,ebp
c00007e0:	31 ff                	xor    edi,edi
c00007e2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00007e9:	eb 2b                	jmp    c0000816 <simple_strtoul+0x96>
c00007eb:	90                   	nop
c00007ec:	83 eb 30             	sub    ebx,0x30
c00007ef:	39 f3                	cmp    ebx,esi
c00007f1:	73 4d                	jae    c0000840 <simple_strtoul+0xc0>
c00007f3:	31 d2                	xor    edx,edx
c00007f5:	89 d8                	mov    eax,ebx
c00007f7:	f7 d0                	not    eax
c00007f9:	f7 f6                	div    esi
c00007fb:	39 f8                	cmp    eax,edi
c00007fd:	0f 82 b1 00 00 00    	jb     c00008b4 <simple_strtoul+0x134>
c0000803:	0f af fe             	imul   edi,esi
c0000806:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000080d:	01 df                	add    edi,ebx
c000080f:	41                   	inc    ecx
c0000810:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 2a                	je     c0000840 <simple_strtoul+0xc0>
c0000816:	0f b6 da             	movzx  ebx,dl
c0000819:	f6 83 e0 ff 01 c0 04 	test   BYTE PTR [ebx-0x3ffe0020],0x4
c0000820:	75 ca                	jne    c00007ec <simple_strtoul+0x6c>
c0000822:	0f be d2             	movsx  edx,dl
c0000825:	52                   	push   edx
c0000826:	e8 2d ff ff ff       	call   c0000758 <toupper>
c000082b:	5b                   	pop    ebx
c000082c:	0f b6 d0             	movzx  edx,al
c000082f:	f6 82 e0 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe0020],0x1
c0000836:	74 08                	je     c0000840 <simple_strtoul+0xc0>
c0000838:	8d 58 c9             	lea    ebx,[eax-0x37]
c000083b:	39 f3                	cmp    ebx,esi
c000083d:	72 b4                	jb     c00007f3 <simple_strtoul+0x73>
c000083f:	90                   	nop
c0000840:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000844:	85 c0                	test   eax,eax
c0000846:	74 14                	je     c000085c <simple_strtoul+0xdc>
c0000848:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000084b:	09 f8                	or     eax,edi
c000084d:	75 71                	jne    c00008c0 <simple_strtoul+0x140>
c000084f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000853:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000857:	31 ff                	xor    edi,edi
c0000859:	89 30                	mov    DWORD PTR [eax],esi
c000085b:	90                   	nop
c000085c:	4d                   	dec    ebp
c000085d:	75 05                	jne    c0000864 <simple_strtoul+0xe4>
c000085f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000864:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000869:	75 02                	jne    c000086d <simple_strtoul+0xed>
c000086b:	f7 df                	neg    edi
c000086d:	83 c4 08             	add    esp,0x8
c0000870:	89 f8                	mov    eax,edi
c0000872:	5b                   	pop    ebx
c0000873:	5e                   	pop    esi
c0000874:	5f                   	pop    edi
c0000875:	5d                   	pop    ebp
c0000876:	c3                   	ret    
c0000877:	90                   	nop
c0000878:	41                   	inc    ecx
c0000879:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000881:	85 f6                	test   esi,esi
c0000883:	0f 84 3d ff ff ff    	je     c00007c6 <simple_strtoul+0x46>
c0000889:	8d 46 fe             	lea    eax,[esi-0x2]
c000088c:	83 f8 22             	cmp    eax,0x22
c000088f:	77 6a                	ja     c00008fb <simple_strtoul+0x17b>
c0000891:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000893:	83 fe 08             	cmp    esi,0x8
c0000896:	0f 84 a2 00 00 00    	je     c000093e <simple_strtoul+0x1be>
c000089c:	83 fe 10             	cmp    esi,0x10
c000089f:	0f 85 31 ff ff ff    	jne    c00007d6 <simple_strtoul+0x56>
c00008a5:	80 fa 30             	cmp    dl,0x30
c00008a8:	74 2c                	je     c00008d6 <simple_strtoul+0x156>
c00008aa:	be 10 00 00 00       	mov    esi,0x10
c00008af:	e9 22 ff ff ff       	jmp    c00007d6 <simple_strtoul+0x56>
c00008b4:	bd 01 00 00 00       	mov    ebp,0x1
c00008b9:	31 ff                	xor    edi,edi
c00008bb:	e9 4f ff ff ff       	jmp    c000080f <simple_strtoul+0x8f>
c00008c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00008c4:	89 08                	mov    DWORD PTR [eax],ecx
c00008c6:	eb 94                	jmp    c000085c <simple_strtoul+0xdc>
c00008c8:	41                   	inc    ecx
c00008c9:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008d1:	e9 e8 fe ff ff       	jmp    c00007be <simple_strtoul+0x3e>
c00008d6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008da:	88 04 24             	mov    BYTE PTR [esp],al
c00008dd:	50                   	push   eax
c00008de:	e8 89 fe ff ff       	call   c000076c <tolower>
c00008e3:	5e                   	pop    esi
c00008e4:	83 f8 78             	cmp    eax,0x78
c00008e7:	0f 84 84 00 00 00    	je     c0000971 <simple_strtoul+0x1f1>
c00008ed:	41                   	inc    ecx
c00008ee:	be 10 00 00 00       	mov    esi,0x10
c00008f3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c00008f6:	e9 db fe ff ff       	jmp    c00007d6 <simple_strtoul+0x56>
c00008fb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00008ff:	85 ff                	test   edi,edi
c0000901:	74 5c                	je     c000095f <simple_strtoul+0x1df>
c0000903:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000907:	85 c9                	test   ecx,ecx
c0000909:	75 4e                	jne    c0000959 <simple_strtoul+0x1d9>
c000090b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000911:	31 ff                	xor    edi,edi
c0000913:	e9 4c ff ff ff       	jmp    c0000864 <simple_strtoul+0xe4>
c0000918:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000091c:	88 04 24             	mov    BYTE PTR [esp],al
c000091f:	50                   	push   eax
c0000920:	e8 47 fe ff ff       	call   c000076c <tolower>
c0000925:	5d                   	pop    ebp
c0000926:	83 f8 78             	cmp    eax,0x78
c0000929:	74 3b                	je     c0000966 <simple_strtoul+0x1e6>
c000092b:	41                   	inc    ecx
c000092c:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000092f:	80 fa 30             	cmp    dl,0x30
c0000932:	74 13                	je     c0000947 <simple_strtoul+0x1c7>
c0000934:	be 08 00 00 00       	mov    esi,0x8
c0000939:	e9 98 fe ff ff       	jmp    c00007d6 <simple_strtoul+0x56>
c000093e:	80 fa 30             	cmp    dl,0x30
c0000941:	0f 85 8f fe ff ff    	jne    c00007d6 <simple_strtoul+0x56>
c0000947:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c000094a:	41                   	inc    ecx
c000094b:	eb e7                	jmp    c0000934 <simple_strtoul+0x1b4>
c000094d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000951:	85 d2                	test   edx,edx
c0000953:	74 0a                	je     c000095f <simple_strtoul+0x1df>
c0000955:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000959:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000095d:	89 30                	mov    DWORD PTR [eax],esi
c000095f:	31 ff                	xor    edi,edi
c0000961:	e9 fe fe ff ff       	jmp    c0000864 <simple_strtoul+0xe4>
c0000966:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000969:	83 c1 02             	add    ecx,0x2
c000096c:	e9 34 ff ff ff       	jmp    c00008a5 <simple_strtoul+0x125>
c0000971:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000974:	be 10 00 00 00       	mov    esi,0x10
c0000979:	83 c1 02             	add    ecx,0x2
c000097c:	e9 55 fe ff ff       	jmp    c00007d6 <simple_strtoul+0x56>

c0000981 <largebin_index>:
c0000981:	89 c2                	mov    edx,eax
c0000983:	c1 ea 08             	shr    edx,0x8
c0000986:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000098c:	77 10                	ja     c000099e <largebin_index+0x1d>
c000098e:	0f bd d2             	bsr    edx,edx
c0000991:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000994:	d3 e8                	shr    eax,cl
c0000996:	83 e0 03             	and    eax,0x3
c0000999:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099d:	c3                   	ret    
c000099e:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a3:	c3                   	ret    

c00009a4 <malloc_init_state>:
c00009a4:	53                   	push   ebx
c00009a5:	8d 50 34             	lea    edx,[eax+0x34]
c00009a8:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009ae:	89 d1                	mov    ecx,edx
c00009b0:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b3:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b6:	83 c2 08             	add    edx,0x8
c00009b9:	39 da                	cmp    edx,ebx
c00009bb:	75 f3                	jne    c00009b0 <malloc_init_state+0xc>
c00009bd:	8b 10                	mov    edx,DWORD PTR [eax]
c00009bf:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c9:	83 e2 03             	and    edx,0x3
c00009cc:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d6:	83 ca 48             	or     edx,0x48
c00009d9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ed:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f4:	89 10                	mov    DWORD PTR [eax],edx
c00009f6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a03:	5b                   	pop    ebx
c0000a04:	c3                   	ret    

c0000a05 <malloc_consolidate>:
c0000a05:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a07:	85 d2                	test   edx,edx
c0000a09:	0f 84 d8 00 00 00    	je     c0000ae7 <malloc_consolidate+0xe2>
c0000a0f:	55                   	push   ebp
c0000a10:	83 e2 fd             	and    edx,0xfffffffd
c0000a13:	57                   	push   edi
c0000a14:	89 c5                	mov    ebp,eax
c0000a16:	56                   	push   esi
c0000a17:	8d 78 34             	lea    edi,[eax+0x34]
c0000a1a:	53                   	push   ebx
c0000a1b:	83 ec 10             	sub    esp,0x10
c0000a1e:	89 10                	mov    DWORD PTR [eax],edx
c0000a20:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a24:	c1 ea 03             	shr    edx,0x3
c0000a27:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a2b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a32:	85 d2                	test   edx,edx
c0000a34:	0f 84 98 00 00 00    	je     c0000ad2 <malloc_consolidate+0xcd>
c0000a3a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a41:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a44:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a4b:	89 f9                	mov    ecx,edi
c0000a4d:	83 e1 fe             	and    ecx,0xfffffffe
c0000a50:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a53:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a56:	83 e3 fc             	and    ebx,0xfffffffc
c0000a59:	83 e7 01             	and    edi,0x1
c0000a5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5f:	75 14                	jne    c0000a75 <malloc_consolidate+0x70>
c0000a61:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a63:	29 fa                	sub    edx,edi
c0000a65:	01 f9                	add    ecx,edi
c0000a67:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a6a:	89 fb                	mov    ebx,edi
c0000a6c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a72:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a75:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a78:	74 40                	je     c0000aba <malloc_consolidate+0xb5>
c0000a7a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a80:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a84:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a87:	83 e7 01             	and    edi,0x1
c0000a8a:	75 0e                	jne    c0000a9a <malloc_consolidate+0x95>
c0000a8c:	01 d9                	add    ecx,ebx
c0000a8e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a91:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a97:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a9a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9d:	89 ce                	mov    esi,ecx
c0000a9f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000aa2:	83 ce 01             	or     esi,0x1
c0000aa5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa8:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aab:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000aae:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000ab2:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab5:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab8:	eb 0c                	jmp    c0000ac6 <malloc_consolidate+0xc1>
c0000aba:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000abd:	83 c9 01             	or     ecx,0x1
c0000ac0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac3:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000aca:	85 d2                	test   edx,edx
c0000acc:	0f 85 6f ff ff ff    	jne    c0000a41 <malloc_consolidate+0x3c>
c0000ad2:	83 c5 04             	add    ebp,0x4
c0000ad5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad9:	0f 85 50 ff ff ff    	jne    c0000a2f <malloc_consolidate+0x2a>
c0000adf:	83 c4 10             	add    esp,0x10
c0000ae2:	5b                   	pop    ebx
c0000ae3:	5e                   	pop    esi
c0000ae4:	5f                   	pop    edi
c0000ae5:	5d                   	pop    ebp
c0000ae6:	c3                   	ret    
c0000ae7:	e9 b8 fe ff ff       	jmp    c00009a4 <malloc_init_state>

c0000aec <dlfree>:
c0000aec:	57                   	push   edi
c0000aed:	56                   	push   esi
c0000aee:	53                   	push   ebx
c0000aef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af3:	85 db                	test   ebx,ebx
c0000af5:	0f 84 e2 00 00 00    	je     c0000bdd <dlfree+0xf1>
c0000afb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afe:	8b 0d c0 2d 02 c0    	mov    ecx,DWORD PTR ds:0xc0022dc0
c0000b04:	89 f0                	mov    eax,esi
c0000b06:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b09:	83 e0 fc             	and    eax,0xfffffffc
c0000b0c:	39 c1                	cmp    ecx,eax
c0000b0e:	72 24                	jb     c0000b34 <dlfree+0x48>
c0000b10:	83 c9 03             	or     ecx,0x3
c0000b13:	c1 e8 03             	shr    eax,0x3
c0000b16:	89 0d c0 2d 02 c0    	mov    DWORD PTR ds:0xc0022dc0,ecx
c0000b1c:	83 e8 02             	sub    eax,0x2
c0000b1f:	8b 0c 85 c4 2d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd23c]
c0000b26:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b28:	89 14 85 c4 2d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd23c],edx
c0000b2f:	e9 a9 00 00 00       	jmp    c0000bdd <dlfree+0xf1>
c0000b34:	83 e6 02             	and    esi,0x2
c0000b37:	0f 85 a0 00 00 00    	jne    c0000bdd <dlfree+0xf1>
c0000b3d:	83 c9 01             	or     ecx,0x1
c0000b40:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b43:	89 0d c0 2d 02 c0    	mov    DWORD PTR ds:0xc0022dc0,ecx
c0000b49:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b4c:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b53:	75 13                	jne    c0000b68 <dlfree+0x7c>
c0000b55:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b58:	29 da                	sub    edx,ebx
c0000b5a:	01 d8                	add    eax,ebx
c0000b5c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b62:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b65:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b68:	39 35 ec 2d 02 c0    	cmp    DWORD PTR ds:0xc0022dec,esi
c0000b6e:	74 40                	je     c0000bb0 <dlfree+0xc4>
c0000b70:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b74:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b77:	80 e3 01             	and    bl,0x1
c0000b7a:	75 0e                	jne    c0000b8a <dlfree+0x9e>
c0000b7c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b82:	01 c8                	add    eax,ecx
c0000b84:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b87:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b8a:	8b 0d fc 2d 02 c0    	mov    ecx,DWORD PTR ds:0xc0022dfc
c0000b90:	c7 42 0c f4 2d 02 c0 	mov    DWORD PTR [edx+0xc],0xc0022df4
c0000b97:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b9a:	89 15 fc 2d 02 c0    	mov    DWORD PTR ds:0xc0022dfc,edx
c0000ba0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba3:	89 c1                	mov    ecx,eax
c0000ba5:	83 c9 01             	or     ecx,0x1
c0000ba8:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bab:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bae:	eb 10                	jmp    c0000bc0 <dlfree+0xd4>
c0000bb0:	01 c8                	add    eax,ecx
c0000bb2:	89 c1                	mov    ecx,eax
c0000bb4:	83 c9 01             	or     ecx,0x1
c0000bb7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bba:	89 15 ec 2d 02 c0    	mov    DWORD PTR ds:0xc0022dec,edx
c0000bc0:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc5:	76 16                	jbe    c0000bdd <dlfree+0xf1>
c0000bc7:	f6 05 c0 2d 02 c0 02 	test   BYTE PTR ds:0xc0022dc0,0x2
c0000bce:	74 0d                	je     c0000bdd <dlfree+0xf1>
c0000bd0:	5b                   	pop    ebx
c0000bd1:	b8 c0 2d 02 c0       	mov    eax,0xc0022dc0
c0000bd6:	5e                   	pop    esi
c0000bd7:	5f                   	pop    edi
c0000bd8:	e9 28 fe ff ff       	jmp    c0000a05 <malloc_consolidate>
c0000bdd:	5b                   	pop    ebx
c0000bde:	5e                   	pop    esi
c0000bdf:	5f                   	pop    edi
c0000be0:	c3                   	ret    

c0000be1 <sYSMALLOc>:
c0000be1:	55                   	push   ebp
c0000be2:	57                   	push   edi
c0000be3:	56                   	push   esi
c0000be4:	53                   	push   ebx
c0000be5:	89 d3                	mov    ebx,edx
c0000be7:	83 ec 2c             	sub    esp,0x2c
c0000bea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000bee:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bf4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000bf7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000bfa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bfe:	74 1f                	je     c0000c1f <sYSMALLOc+0x3e>
c0000c00:	89 d8                	mov    eax,ebx
c0000c02:	e8 fe fd ff ff       	call   c0000a05 <malloc_consolidate>
c0000c07:	83 ec 0c             	sub    esp,0xc
c0000c0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c0e:	83 e8 07             	sub    eax,0x7
c0000c11:	50                   	push   eax
c0000c12:	e8 30 02 00 00       	call   c0000e47 <dlmalloc>
c0000c17:	83 c4 10             	add    esp,0x10
c0000c1a:	e9 20 02 00 00       	jmp    c0000e3f <sYSMALLOc+0x25e>
c0000c1f:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c22:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c28:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c2b:	83 e0 fc             	and    eax,0xfffffffc
c0000c2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c36:	83 c0 10             	add    eax,0x10
c0000c39:	01 c1                	add    ecx,eax
c0000c3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c3f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c46:	74 04                	je     c0000c4c <sYSMALLOc+0x6b>
c0000c48:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c4c:	f7 da                	neg    edx
c0000c4e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c52:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c56:	21 d1                	and    ecx,edx
c0000c58:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c5c:	7f 07                	jg     c0000c65 <sYSMALLOc+0x84>
c0000c5e:	31 c0                	xor    eax,eax
c0000c60:	e9 da 01 00 00       	jmp    c0000e3f <sYSMALLOc+0x25e>
c0000c65:	83 ec 0c             	sub    esp,0xc
c0000c68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c6c:	e8 d7 89 00 00       	call   c0009648 <sbrk>
c0000c71:	83 c4 10             	add    esp,0x10
c0000c74:	89 c6                	mov    esi,eax
c0000c76:	83 f8 ff             	cmp    eax,0xffffffff
c0000c79:	74 e3                	je     c0000c5e <sYSMALLOc+0x7d>
c0000c7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c7f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c83:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c86:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c8c:	39 f1                	cmp    ecx,esi
c0000c8e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c94:	75 13                	jne    c0000ca9 <sYSMALLOc+0xc8>
c0000c96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c9a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000c9e:	83 c8 01             	or     eax,0x1
c0000ca1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ca4:	e9 3e 01 00 00       	jmp    c0000de7 <sYSMALLOc+0x206>
c0000ca9:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000caf:	88 d0                	mov    al,dl
c0000cb1:	83 e0 01             	and    eax,0x1
c0000cb4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cb9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cbd:	0f 95 c0             	setne  al
c0000cc0:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cc4:	39 f1                	cmp    ecx,esi
c0000cc6:	76 12                	jbe    c0000cda <sYSMALLOc+0xf9>
c0000cc8:	84 c0                	test   al,al
c0000cca:	74 0e                	je     c0000cda <sYSMALLOc+0xf9>
c0000ccc:	83 e2 fe             	and    edx,0xfffffffe
c0000ccf:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cd5:	e9 83 00 00 00       	jmp    c0000d5d <sYSMALLOc+0x17c>
c0000cda:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000cdf:	74 7c                	je     c0000d5d <sYSMALLOc+0x17c>
c0000ce1:	84 c0                	test   al,al
c0000ce3:	74 0c                	je     c0000cf1 <sYSMALLOc+0x110>
c0000ce5:	89 f0                	mov    eax,esi
c0000ce7:	29 c8                	sub    eax,ecx
c0000ce9:	01 e8                	add    eax,ebp
c0000ceb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cf1:	89 f2                	mov    edx,esi
c0000cf3:	83 e2 07             	and    edx,0x7
c0000cf6:	74 0c                	je     c0000d04 <sYSMALLOc+0x123>
c0000cf8:	b8 08 00 00 00       	mov    eax,0x8
c0000cfd:	29 d0                	sub    eax,edx
c0000cff:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d02:	eb 04                	jmp    c0000d08 <sYSMALLOc+0x127>
c0000d04:	89 f5                	mov    ebp,esi
c0000d06:	31 c0                	xor    eax,eax
c0000d08:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d0c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d14:	01 c1                	add    ecx,eax
c0000d16:	83 ec 0c             	sub    esp,0xc
c0000d19:	01 f1                	add    ecx,esi
c0000d1b:	01 ca                	add    edx,ecx
c0000d1d:	29 c8                	sub    eax,ecx
c0000d1f:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d23:	01 c2                	add    edx,eax
c0000d25:	52                   	push   edx
c0000d26:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d2a:	e8 19 89 00 00       	call   c0009648 <sbrk>
c0000d2f:	83 c4 10             	add    esp,0x10
c0000d32:	83 f8 ff             	cmp    eax,0xffffffff
c0000d35:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d39:	75 0f                	jne    c0000d4a <sYSMALLOc+0x169>
c0000d3b:	83 ec 0c             	sub    esp,0xc
c0000d3e:	6a 00                	push   0x0
c0000d40:	e8 03 89 00 00       	call   c0009648 <sbrk>
c0000d45:	83 c4 10             	add    esp,0x10
c0000d48:	eb 30                	jmp    c0000d7a <sYSMALLOc+0x199>
c0000d4a:	39 c6                	cmp    esi,eax
c0000d4c:	76 33                	jbe    c0000d81 <sYSMALLOc+0x1a0>
c0000d4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d52:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d59:	01 f0                	add    eax,esi
c0000d5b:	eb 1d                	jmp    c0000d7a <sYSMALLOc+0x199>
c0000d5d:	83 ec 0c             	sub    esp,0xc
c0000d60:	89 f5                	mov    ebp,esi
c0000d62:	6a 00                	push   0x0
c0000d64:	e8 df 88 00 00       	call   c0009648 <sbrk>
c0000d69:	89 c2                	mov    edx,eax
c0000d6b:	29 f2                	sub    edx,esi
c0000d6d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d71:	83 c4 10             	add    esp,0x10
c0000d74:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d7a:	31 d2                	xor    edx,edx
c0000d7c:	83 f8 ff             	cmp    eax,0xffffffff
c0000d7f:	74 66                	je     c0000de7 <sYSMALLOc+0x206>
c0000d81:	29 e8                	sub    eax,ebp
c0000d83:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d86:	01 d0                	add    eax,edx
c0000d88:	83 c8 01             	or     eax,0x1
c0000d8b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d8e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d94:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d99:	74 4c                	je     c0000de7 <sYSMALLOc+0x206>
c0000d9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d9f:	83 e8 0c             	sub    eax,0xc
c0000da2:	83 e0 f8             	and    eax,0xfffffff8
c0000da5:	89 c2                	mov    edx,eax
c0000da7:	83 ca 01             	or     edx,0x1
c0000daa:	83 f8 0f             	cmp    eax,0xf
c0000dad:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000db0:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000db8:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dc0:	76 25                	jbe    c0000de7 <sYSMALLOc+0x206>
c0000dc2:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dc8:	83 ec 0c             	sub    esp,0xc
c0000dcb:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000dd5:	83 c7 08             	add    edi,0x8
c0000dd8:	57                   	push   edi
c0000dd9:	e8 0e fd ff ff       	call   c0000aec <dlfree>
c0000dde:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000ded:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df3:	73 06                	jae    c0000dfb <sYSMALLOc+0x21a>
c0000df5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000dfb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e01:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e07:	73 06                	jae    c0000e0f <sYSMALLOc+0x22e>
c0000e09:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e0f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e12:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e15:	83 e2 fc             	and    edx,0xfffffffc
c0000e18:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e1c:	0f 82 3c fe ff ff    	jb     c0000c5e <sYSMALLOc+0x7d>
c0000e22:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e26:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e29:	29 fa                	sub    edx,edi
c0000e2b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2e:	83 ca 01             	or     edx,0x1
c0000e31:	89 fb                	mov    ebx,edi
c0000e33:	83 c0 08             	add    eax,0x8
c0000e36:	83 cb 01             	or     ebx,0x1
c0000e39:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e3c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e3f:	83 c4 2c             	add    esp,0x2c
c0000e42:	5b                   	pop    ebx
c0000e43:	5e                   	pop    esi
c0000e44:	5f                   	pop    edi
c0000e45:	5d                   	pop    ebp
c0000e46:	c3                   	ret    

c0000e47 <dlmalloc>:
c0000e47:	55                   	push   ebp
c0000e48:	57                   	push   edi
c0000e49:	56                   	push   esi
c0000e4a:	53                   	push   ebx
c0000e4b:	83 ec 1c             	sub    esp,0x1c
c0000e4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e52:	83 f8 df             	cmp    eax,0xffffffdf
c0000e55:	0f 87 70 03 00 00    	ja     c00011cb <dlmalloc+0x384>
c0000e5b:	83 c0 0b             	add    eax,0xb
c0000e5e:	be 10 00 00 00       	mov    esi,0x10
c0000e63:	83 f8 0f             	cmp    eax,0xf
c0000e66:	76 05                	jbe    c0000e6d <dlmalloc+0x26>
c0000e68:	83 e0 f8             	and    eax,0xfffffff8
c0000e6b:	89 c6                	mov    esi,eax
c0000e6d:	8b 3d c0 2d 02 c0    	mov    edi,DWORD PTR ds:0xc0022dc0
c0000e73:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e79:	75 17                	jne    c0000e92 <dlmalloc+0x4b>
c0000e7b:	85 ff                	test   edi,edi
c0000e7d:	0f 85 05 03 00 00    	jne    c0001188 <dlmalloc+0x341>
c0000e83:	b8 c0 2d 02 c0       	mov    eax,0xc0022dc0
c0000e88:	e8 78 fb ff ff       	call   c0000a05 <malloc_consolidate>
c0000e8d:	e9 f6 02 00 00       	jmp    c0001188 <dlmalloc+0x341>
c0000e92:	39 f7                	cmp    edi,esi
c0000e94:	72 1f                	jb     c0000eb5 <dlmalloc+0x6e>
c0000e96:	89 f2                	mov    edx,esi
c0000e98:	c1 ea 03             	shr    edx,0x3
c0000e9b:	83 ea 02             	sub    edx,0x2
c0000e9e:	8b 04 95 c4 2d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd23c]
c0000ea5:	85 c0                	test   eax,eax
c0000ea7:	74 0c                	je     c0000eb5 <dlmalloc+0x6e>
c0000ea9:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000eac:	89 0c 95 c4 2d 02 c0 	mov    DWORD PTR [edx*4-0x3ffdd23c],ecx
c0000eb3:	eb 30                	jmp    c0000ee5 <dlmalloc+0x9e>
c0000eb5:	89 f0                	mov    eax,esi
c0000eb7:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000ebd:	77 2e                	ja     c0000eed <dlmalloc+0xa6>
c0000ebf:	c1 e8 03             	shr    eax,0x3
c0000ec2:	8d 14 c5 f4 2d 02 c0 	lea    edx,[eax*8-0x3ffdd20c]
c0000ec9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ecd:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ed0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed3:	39 c3                	cmp    ebx,eax
c0000ed5:	74 2e                	je     c0000f05 <dlmalloc+0xbe>
c0000ed7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000eda:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000edf:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ee2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee5:	83 c0 08             	add    eax,0x8
c0000ee8:	e9 e0 02 00 00       	jmp    c00011cd <dlmalloc+0x386>
c0000eed:	e8 8f fa ff ff       	call   c0000981 <largebin_index>
c0000ef2:	83 e7 02             	and    edi,0x2
c0000ef5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef9:	74 0a                	je     c0000f05 <dlmalloc+0xbe>
c0000efb:	b8 c0 2d 02 c0       	mov    eax,0xc0022dc0
c0000f00:	e8 00 fb ff ff       	call   c0000a05 <malloc_consolidate>
c0000f05:	8d 46 10             	lea    eax,[esi+0x10]
c0000f08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f0c:	8b 1d 00 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022e00
c0000f12:	81 fb f4 2d 02 c0    	cmp    ebx,0xc0022df4
c0000f18:	0f 84 13 01 00 00    	je     c0001031 <dlmalloc+0x1ea>
c0000f1e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f21:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f24:	83 e7 fc             	and    edi,0xfffffffc
c0000f27:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2d:	77 4c                	ja     c0000f7b <dlmalloc+0x134>
c0000f2f:	3d f4 2d 02 c0       	cmp    eax,0xc0022df4
c0000f34:	75 45                	jne    c0000f7b <dlmalloc+0x134>
c0000f36:	39 1d f0 2d 02 c0    	cmp    DWORD PTR ds:0xc0022df0,ebx
c0000f3c:	75 3d                	jne    c0000f7b <dlmalloc+0x134>
c0000f3e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f42:	73 37                	jae    c0000f7b <dlmalloc+0x134>
c0000f44:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f47:	89 fa                	mov    edx,edi
c0000f49:	a3 fc 2d 02 c0       	mov    ds:0xc0022dfc,eax
c0000f4e:	a3 00 2e 02 c0       	mov    ds:0xc0022e00,eax
c0000f53:	a3 f0 2d 02 c0       	mov    ds:0xc0022df0,eax
c0000f58:	29 f2                	sub    edx,esi
c0000f5a:	c7 40 08 f4 2d 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022df4
c0000f61:	c7 40 0c f4 2d 02 c0 	mov    DWORD PTR [eax+0xc],0xc0022df4
c0000f68:	83 ce 01             	or     esi,0x1
c0000f6b:	89 d1                	mov    ecx,edx
c0000f6d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f70:	83 c9 01             	or     ecx,0x1
c0000f73:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f76:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f79:	eb 15                	jmp    c0000f90 <dlmalloc+0x149>
c0000f7b:	a3 00 2e 02 c0       	mov    ds:0xc0022e00,eax
c0000f80:	39 fe                	cmp    esi,edi
c0000f82:	c7 40 08 f4 2d 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022df4
c0000f89:	75 0d                	jne    c0000f98 <dlmalloc+0x151>
c0000f8b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f90:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f93:	e9 35 02 00 00       	jmp    c00011cd <dlmalloc+0x386>
c0000f98:	89 f8                	mov    eax,edi
c0000f9a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000fa0:	77 19                	ja     c0000fbb <dlmalloc+0x174>
c0000fa2:	c1 e8 03             	shr    eax,0x3
c0000fa5:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fa8:	83 c2 0d             	add    edx,0xd
c0000fab:	8d 2c 95 b8 2d 02 c0 	lea    ebp,[edx*4-0x3ffdd248]
c0000fb2:	8b 14 95 c0 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd240]
c0000fb9:	eb 46                	jmp    c0001001 <dlmalloc+0x1ba>
c0000fbb:	e8 c1 f9 ff ff       	call   c0000981 <largebin_index>
c0000fc0:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc3:	83 c2 0d             	add    edx,0xd
c0000fc6:	8d 0c 95 c0 2d 02 c0 	lea    ecx,[edx*4-0x3ffdd240]
c0000fcd:	8b 14 95 c0 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd240]
c0000fd4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fdb:	89 d5                	mov    ebp,edx
c0000fdd:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fe1:	74 1e                	je     c0001001 <dlmalloc+0x1ba>
c0000fe3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000fe9:	77 12                	ja     c0000ffd <dlmalloc+0x1b6>
c0000feb:	83 cf 01             	or     edi,0x1
c0000fee:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000ff1:	76 05                	jbe    c0000ff8 <dlmalloc+0x1b1>
c0000ff3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff6:	eb f6                	jmp    c0000fee <dlmalloc+0x1a7>
c0000ff8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ffb:	eb 04                	jmp    c0001001 <dlmalloc+0x1ba>
c0000ffd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001001:	89 c7                	mov    edi,eax
c0001003:	88 c1                	mov    cl,al
c0001005:	c1 ff 05             	sar    edi,0x5
c0001008:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000100c:	bf 01 00 00 00       	mov    edi,0x1
c0001011:	d3 e7                	shl    edi,cl
c0001013:	89 f8                	mov    eax,edi
c0001015:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001019:	09 04 bd f4 30 02 c0 	or     DWORD PTR [edi*4-0x3ffdcf0c],eax
c0001020:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001023:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001026:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001029:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000102c:	e9 db fe ff ff       	jmp    c0000f0c <dlmalloc+0xc5>
c0001031:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001037:	76 78                	jbe    c00010b1 <dlmalloc+0x26a>
c0001039:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103d:	8d 04 c5 f4 2d 02 c0 	lea    eax,[eax*8-0x3ffdd20c]
c0001044:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001047:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000104a:	39 ca                	cmp    edx,ecx
c000104c:	74 63                	je     c00010b1 <dlmalloc+0x26a>
c000104e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001051:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001054:	83 e3 fc             	and    ebx,0xfffffffc
c0001057:	39 de                	cmp    esi,ebx
c0001059:	77 52                	ja     c00010ad <dlmalloc+0x266>
c000105b:	89 df                	mov    edi,ebx
c000105d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001060:	29 f7                	sub    edi,esi
c0001062:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001065:	01 d3                	add    ebx,edx
c0001067:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000106a:	83 ff 0f             	cmp    edi,0xf
c000106d:	8d 42 08             	lea    eax,[edx+0x8]
c0001070:	77 09                	ja     c000107b <dlmalloc+0x234>
c0001072:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001076:	e9 52 01 00 00       	jmp    c00011cd <dlmalloc+0x386>
c000107b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000107e:	83 ce 01             	or     esi,0x1
c0001081:	89 0d fc 2d 02 c0    	mov    DWORD PTR ds:0xc0022dfc,ecx
c0001087:	89 0d 00 2e 02 c0    	mov    DWORD PTR ds:0xc0022e00,ecx
c000108d:	c7 41 08 f4 2d 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0022df4
c0001094:	c7 41 0c f4 2d 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0022df4
c000109b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000109e:	89 fa                	mov    edx,edi
c00010a0:	83 ca 01             	or     edx,0x1
c00010a3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a6:	89 3b                	mov    DWORD PTR [ebx],edi
c00010a8:	e9 20 01 00 00       	jmp    c00011cd <dlmalloc+0x386>
c00010ad:	89 c2                	mov    edx,eax
c00010af:	eb 99                	jmp    c000104a <dlmalloc+0x203>
c00010b1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b5:	b8 01 00 00 00       	mov    eax,0x1
c00010ba:	41                   	inc    ecx
c00010bb:	89 cb                	mov    ebx,ecx
c00010bd:	8d 14 cd ec 2d 02 c0 	lea    edx,[ecx*8-0x3ffdd214]
c00010c4:	c1 eb 05             	shr    ebx,0x5
c00010c7:	d3 e0                	shl    eax,cl
c00010c9:	8b 3c 9d f4 30 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcf0c]
c00010d0:	39 f8                	cmp    eax,edi
c00010d2:	77 04                	ja     c00010d8 <dlmalloc+0x291>
c00010d4:	85 c0                	test   eax,eax
c00010d6:	75 26                	jne    c00010fe <dlmalloc+0x2b7>
c00010d8:	43                   	inc    ebx
c00010d9:	83 fb 02             	cmp    ebx,0x2
c00010dc:	0f 87 a6 00 00 00    	ja     c0001188 <dlmalloc+0x341>
c00010e2:	8b 3c 9d f4 30 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcf0c]
c00010e9:	85 ff                	test   edi,edi
c00010eb:	74 eb                	je     c00010d8 <dlmalloc+0x291>
c00010ed:	89 d8                	mov    eax,ebx
c00010ef:	c1 e0 06             	shl    eax,0x6
c00010f2:	8d 14 85 ec 2d 02 c0 	lea    edx,[eax*4-0x3ffdd214]
c00010f9:	b8 01 00 00 00       	mov    eax,0x1
c00010fe:	85 f8                	test   eax,edi
c0001100:	75 07                	jne    c0001109 <dlmalloc+0x2c2>
c0001102:	83 c2 08             	add    edx,0x8
c0001105:	01 c0                	add    eax,eax
c0001107:	eb f5                	jmp    c00010fe <dlmalloc+0x2b7>
c0001109:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000110c:	39 ca                	cmp    edx,ecx
c000110e:	75 14                	jne    c0001124 <dlmalloc+0x2dd>
c0001110:	89 c1                	mov    ecx,eax
c0001112:	83 c2 08             	add    edx,0x8
c0001115:	f7 d1                	not    ecx
c0001117:	01 c0                	add    eax,eax
c0001119:	21 cf                	and    edi,ecx
c000111b:	89 3c 9d f4 30 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcf0c],edi
c0001122:	eb ac                	jmp    c00010d0 <dlmalloc+0x289>
c0001124:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001127:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000112a:	83 e0 fc             	and    eax,0xfffffffc
c000112d:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001130:	89 c3                	mov    ebx,eax
c0001132:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001135:	29 f3                	sub    ebx,esi
c0001137:	8d 14 01             	lea    edx,[ecx+eax*1]
c000113a:	83 fb 0f             	cmp    ebx,0xf
c000113d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001140:	77 09                	ja     c000114b <dlmalloc+0x304>
c0001142:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001146:	e9 82 00 00 00       	jmp    c00011cd <dlmalloc+0x386>
c000114b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000114e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001154:	89 3d fc 2d 02 c0    	mov    DWORD PTR ds:0xc0022dfc,edi
c000115a:	89 3d 00 2e 02 c0    	mov    DWORD PTR ds:0xc0022e00,edi
c0001160:	c7 47 08 f4 2d 02 c0 	mov    DWORD PTR [edi+0x8],0xc0022df4
c0001167:	c7 47 0c f4 2d 02 c0 	mov    DWORD PTR [edi+0xc],0xc0022df4
c000116e:	77 06                	ja     c0001176 <dlmalloc+0x32f>
c0001170:	89 3d f0 2d 02 c0    	mov    DWORD PTR ds:0xc0022df0,edi
c0001176:	83 ce 01             	or     esi,0x1
c0001179:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000117c:	89 d9                	mov    ecx,ebx
c000117e:	83 c9 01             	or     ecx,0x1
c0001181:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001184:	89 1a                	mov    DWORD PTR [edx],ebx
c0001186:	eb 45                	jmp    c00011cd <dlmalloc+0x386>
c0001188:	a1 ec 2d 02 c0       	mov    eax,ds:0xc0022dec
c000118d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001190:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001193:	83 e2 fc             	and    edx,0xfffffffc
c0001196:	39 d1                	cmp    ecx,edx
c0001198:	77 1e                	ja     c00011b8 <dlmalloc+0x371>
c000119a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119d:	89 f3                	mov    ebx,esi
c000119f:	89 0d ec 2d 02 c0    	mov    DWORD PTR ds:0xc0022dec,ecx
c00011a5:	83 cb 01             	or     ebx,0x1
c00011a8:	29 f2                	sub    edx,esi
c00011aa:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011ad:	83 ca 01             	or     edx,0x1
c00011b0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b3:	e9 2d fd ff ff       	jmp    c0000ee5 <dlmalloc+0x9e>
c00011b8:	83 c4 1c             	add    esp,0x1c
c00011bb:	89 f0                	mov    eax,esi
c00011bd:	5b                   	pop    ebx
c00011be:	ba c0 2d 02 c0       	mov    edx,0xc0022dc0
c00011c3:	5e                   	pop    esi
c00011c4:	5f                   	pop    edi
c00011c5:	5d                   	pop    ebp
c00011c6:	e9 16 fa ff ff       	jmp    c0000be1 <sYSMALLOc>
c00011cb:	31 c0                	xor    eax,eax
c00011cd:	83 c4 1c             	add    esp,0x1c
c00011d0:	5b                   	pop    ebx
c00011d1:	5e                   	pop    esi
c00011d2:	5f                   	pop    edi
c00011d3:	5d                   	pop    ebp
c00011d4:	c3                   	ret    

c00011d5 <iALLOc>:
c00011d5:	55                   	push   ebp
c00011d6:	89 c5                	mov    ebp,eax
c00011d8:	57                   	push   edi
c00011d9:	56                   	push   esi
c00011da:	53                   	push   ebx
c00011db:	83 ec 2c             	sub    esp,0x2c
c00011de:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011e2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011ea:	83 3d c0 2d 02 c0 00 	cmp    DWORD PTR ds:0xc0022dc0,0x0
c00011f1:	75 12                	jne    c0001205 <iALLOc+0x30>
c00011f3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011f7:	b8 c0 2d 02 c0       	mov    eax,0xc0022dc0
c00011fc:	e8 04 f8 ff ff       	call   c0000a05 <malloc_consolidate>
c0001201:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001205:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000120a:	74 12                	je     c000121e <iALLOc+0x49>
c000120c:	85 ed                	test   ebp,ebp
c000120e:	0f 84 64 01 00 00    	je     c0001378 <iALLOc+0x1a3>
c0001214:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000121c:	eb 33                	jmp    c0001251 <iALLOc+0x7c>
c000121e:	85 ed                	test   ebp,ebp
c0001220:	75 14                	jne    c0001236 <iALLOc+0x61>
c0001222:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000122a:	83 c4 2c             	add    esp,0x2c
c000122d:	5b                   	pop    ebx
c000122e:	5e                   	pop    esi
c000122f:	5f                   	pop    edi
c0001230:	5d                   	pop    ebp
c0001231:	e9 11 fc ff ff       	jmp    c0000e47 <dlmalloc>
c0001236:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001245:	83 f8 0f             	cmp    eax,0xf
c0001248:	76 07                	jbe    c0001251 <iALLOc+0x7c>
c000124a:	83 e0 f8             	and    eax,0xfffffff8
c000124d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001251:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001256:	75 09                	jne    c0001261 <iALLOc+0x8c>
c0001258:	89 d0                	mov    eax,edx
c000125a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125d:	31 f6                	xor    esi,esi
c000125f:	eb 3b                	jmp    c000129c <iALLOc+0xc7>
c0001261:	8b 02                	mov    eax,DWORD PTR [edx]
c0001263:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000126b:	83 c0 0b             	add    eax,0xb
c000126e:	83 f8 0f             	cmp    eax,0xf
c0001271:	76 07                	jbe    c000127a <iALLOc+0xa5>
c0001273:	83 e0 f8             	and    eax,0xfffffff8
c0001276:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000127a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000127e:	0f af f5             	imul   esi,ebp
c0001281:	eb 25                	jmp    c00012a8 <iALLOc+0xd3>
c0001283:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001285:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001288:	bb 10 00 00 00       	mov    ebx,0x10
c000128d:	83 f9 0f             	cmp    ecx,0xf
c0001290:	76 05                	jbe    c0001297 <iALLOc+0xc2>
c0001292:	83 e1 f8             	and    ecx,0xfffffff8
c0001295:	89 cb                	mov    ebx,ecx
c0001297:	01 de                	add    esi,ebx
c0001299:	83 c0 04             	add    eax,0x4
c000129c:	39 c7                	cmp    edi,eax
c000129e:	75 e3                	jne    c0001283 <iALLOc+0xae>
c00012a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012ac:	8b 1d 14 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023114
c00012b2:	83 ec 0c             	sub    esp,0xc
c00012b5:	c7 05 14 31 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023114,0x0
c00012bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c3:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c7:	50                   	push   eax
c00012c8:	e8 7a fb ff ff       	call   c0000e47 <dlmalloc>
c00012cd:	83 c4 10             	add    esp,0x10
c00012d0:	89 1d 14 31 02 c0    	mov    DWORD PTR ds:0xc0023114,ebx
c00012d6:	85 c0                	test   eax,eax
c00012d8:	0f 84 92 00 00 00    	je     c0001370 <iALLOc+0x19b>
c00012de:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012e1:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e4:	83 e3 fc             	and    ebx,0xfffffffc
c00012e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012eb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012f0:	74 1e                	je     c0001310 <iALLOc+0x13b>
c00012f2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f6:	89 d9                	mov    ecx,ebx
c00012f8:	52                   	push   edx
c00012f9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012fd:	83 e9 04             	sub    ecx,0x4
c0001300:	51                   	push   ecx
c0001301:	6a 00                	push   0x0
c0001303:	50                   	push   eax
c0001304:	e8 9f f1 ff ff       	call   c00004a8 <memset>
c0001309:	83 c4 10             	add    esp,0x10
c000130c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001310:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001315:	75 14                	jne    c000132b <iALLOc+0x156>
c0001317:	8d 04 37             	lea    eax,[edi+esi*1]
c000131a:	29 f3                	sub    ebx,esi
c000131c:	8d 48 08             	lea    ecx,[eax+0x8]
c000131f:	83 cb 01             	or     ebx,0x1
c0001322:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001326:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001329:	89 f3                	mov    ebx,esi
c000132b:	31 c0                	xor    eax,eax
c000132d:	4d                   	dec    ebp
c000132e:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001331:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001335:	39 c5                	cmp    ebp,eax
c0001337:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000133a:	74 2c                	je     c0001368 <iALLOc+0x193>
c000133c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001340:	85 c9                	test   ecx,ecx
c0001342:	75 15                	jne    c0001359 <iALLOc+0x184>
c0001344:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001347:	8d 71 0b             	lea    esi,[ecx+0xb]
c000134a:	b9 10 00 00 00       	mov    ecx,0x10
c000134f:	83 fe 0f             	cmp    esi,0xf
c0001352:	76 05                	jbe    c0001359 <iALLOc+0x184>
c0001354:	83 e6 f8             	and    esi,0xfffffff8
c0001357:	89 f1                	mov    ecx,esi
c0001359:	89 ce                	mov    esi,ecx
c000135b:	29 cb                	sub    ebx,ecx
c000135d:	83 ce 01             	or     esi,0x1
c0001360:	40                   	inc    eax
c0001361:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001364:	01 cf                	add    edi,ecx
c0001366:	eb c6                	jmp    c000132e <iALLOc+0x159>
c0001368:	83 cb 01             	or     ebx,0x1
c000136b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000136e:	eb 08                	jmp    c0001378 <iALLOc+0x1a3>
c0001370:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001378:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000137c:	83 c4 2c             	add    esp,0x2c
c000137f:	5b                   	pop    ebx
c0001380:	5e                   	pop    esi
c0001381:	5f                   	pop    edi
c0001382:	5d                   	pop    ebp
c0001383:	c3                   	ret    

c0001384 <dlrealloc>:
c0001384:	55                   	push   ebp
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 1c             	sub    esp,0x1c
c000138b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000138f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001393:	85 db                	test   ebx,ebx
c0001395:	75 10                	jne    c00013a7 <dlrealloc+0x23>
c0001397:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000139b:	83 c4 1c             	add    esp,0x1c
c000139e:	5b                   	pop    ebx
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 a0 fa ff ff       	jmp    c0000e47 <dlmalloc>
c00013a7:	83 f8 df             	cmp    eax,0xffffffdf
c00013aa:	76 07                	jbe    c00013b3 <dlrealloc+0x2f>
c00013ac:	31 db                	xor    ebx,ebx
c00013ae:	e9 6a 01 00 00       	jmp    c000151d <dlrealloc+0x199>
c00013b3:	83 c0 0b             	add    eax,0xb
c00013b6:	bd 10 00 00 00       	mov    ebp,0x10
c00013bb:	83 f8 0f             	cmp    eax,0xf
c00013be:	76 05                	jbe    c00013c5 <dlrealloc+0x41>
c00013c0:	83 e0 f8             	and    eax,0xfffffff8
c00013c3:	89 c5                	mov    ebp,eax
c00013c5:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013c8:	8d 7b f8             	lea    edi,[ebx-0x8]
c00013cb:	89 c6                	mov    esi,eax
c00013cd:	83 e6 fc             	and    esi,0xfffffffc
c00013d0:	a8 02                	test   al,0x2
c00013d2:	75 d8                	jne    c00013ac <dlrealloc+0x28>
c00013d4:	39 f5                	cmp    ebp,esi
c00013d6:	0f 86 04 01 00 00    	jbe    c00014e0 <dlrealloc+0x15c>
c00013dc:	8d 14 37             	lea    edx,[edi+esi*1]
c00013df:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013e2:	39 15 ec 2d 02 c0    	cmp    DWORD PTR ds:0xc0022dec,edx
c00013e8:	75 33                	jne    c000141d <dlrealloc+0x99>
c00013ea:	83 e1 fc             	and    ecx,0xfffffffc
c00013ed:	01 f1                	add    ecx,esi
c00013ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f3:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00013f6:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013fa:	77 49                	ja     c0001445 <dlrealloc+0xc1>
c00013fc:	01 ef                	add    edi,ebp
c00013fe:	83 e0 01             	and    eax,0x1
c0001401:	09 e8                	or     eax,ebp
c0001403:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001406:	89 3d ec 2d 02 c0    	mov    DWORD PTR ds:0xc0022dec,edi
c000140c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001410:	29 e8                	sub    eax,ebp
c0001412:	83 c8 01             	or     eax,0x1
c0001415:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001418:	e9 00 01 00 00       	jmp    c000151d <dlrealloc+0x199>
c000141d:	89 c8                	mov    eax,ecx
c000141f:	83 e0 fe             	and    eax,0xfffffffe
c0001422:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001427:	75 1c                	jne    c0001445 <dlrealloc+0xc1>
c0001429:	83 e1 fc             	and    ecx,0xfffffffc
c000142c:	01 f1                	add    ecx,esi
c000142e:	39 cd                	cmp    ebp,ecx
c0001430:	77 13                	ja     c0001445 <dlrealloc+0xc1>
c0001432:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001435:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001438:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000143b:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000143e:	89 ce                	mov    esi,ecx
c0001440:	e9 9b 00 00 00       	jmp    c00014e0 <dlrealloc+0x15c>
c0001445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001449:	8d 45 f9             	lea    eax,[ebp-0x7]
c000144c:	83 ec 0c             	sub    esp,0xc
c000144f:	50                   	push   eax
c0001450:	e8 f2 f9 ff ff       	call   c0000e47 <dlmalloc>
c0001455:	83 c4 10             	add    esp,0x10
c0001458:	85 c0                	test   eax,eax
c000145a:	0f 84 4c ff ff ff    	je     c00013ac <dlrealloc+0x28>
c0001460:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001463:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001467:	39 ca                	cmp    edx,ecx
c0001469:	75 0a                	jne    c0001475 <dlrealloc+0xf1>
c000146b:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000146e:	83 e0 fc             	and    eax,0xfffffffc
c0001471:	01 c6                	add    esi,eax
c0001473:	eb 6b                	jmp    c00014e0 <dlrealloc+0x15c>
c0001475:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001478:	83 f9 27             	cmp    ecx,0x27
c000147b:	76 08                	jbe    c0001485 <dlrealloc+0x101>
c000147d:	89 de                	mov    esi,ebx
c000147f:	89 c7                	mov    edi,eax
c0001481:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001483:	eb 43                	jmp    c00014c8 <dlrealloc+0x144>
c0001485:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001487:	83 f9 13             	cmp    ecx,0x13
c000148a:	89 10                	mov    DWORD PTR [eax],edx
c000148c:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000148f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001492:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001495:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001498:	76 2e                	jbe    c00014c8 <dlrealloc+0x144>
c000149a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000149d:	83 f9 1b             	cmp    ecx,0x1b
c00014a0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00014a3:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00014a6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00014a9:	76 1d                	jbe    c00014c8 <dlrealloc+0x144>
c00014ab:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00014ae:	83 f9 23             	cmp    ecx,0x23
c00014b1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00014b4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00014b7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00014ba:	76 0c                	jbe    c00014c8 <dlrealloc+0x144>
c00014bc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00014bf:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00014c2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00014c5:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00014c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014cc:	83 ec 0c             	sub    esp,0xc
c00014cf:	53                   	push   ebx
c00014d0:	e8 17 f6 ff ff       	call   c0000aec <dlfree>
c00014d5:	83 c4 10             	add    esp,0x10
c00014d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014dc:	89 c3                	mov    ebx,eax
c00014de:	eb 3d                	jmp    c000151d <dlrealloc+0x199>
c00014e0:	89 f2                	mov    edx,esi
c00014e2:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014e5:	29 ea                	sub    edx,ebp
c00014e7:	83 e1 01             	and    ecx,0x1
c00014ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00014ed:	83 fa 0f             	cmp    edx,0xf
c00014f0:	77 0b                	ja     c00014fd <dlrealloc+0x179>
c00014f2:	09 ce                	or     esi,ecx
c00014f4:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00014f7:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00014fb:	eb 20                	jmp    c000151d <dlrealloc+0x199>
c00014fd:	01 ef                	add    edi,ebp
c00014ff:	83 ec 0c             	sub    esp,0xc
c0001502:	09 cd                	or     ebp,ecx
c0001504:	83 ca 01             	or     edx,0x1
c0001507:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000150a:	83 c7 08             	add    edi,0x8
c000150d:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001510:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001514:	57                   	push   edi
c0001515:	e8 d2 f5 ff ff       	call   c0000aec <dlfree>
c000151a:	83 c4 10             	add    esp,0x10
c000151d:	83 c4 1c             	add    esp,0x1c
c0001520:	89 d8                	mov    eax,ebx
c0001522:	5b                   	pop    ebx
c0001523:	5e                   	pop    esi
c0001524:	5f                   	pop    edi
c0001525:	5d                   	pop    ebp
c0001526:	c3                   	ret    

c0001527 <dlmemalign>:
c0001527:	55                   	push   ebp
c0001528:	57                   	push   edi
c0001529:	56                   	push   esi
c000152a:	53                   	push   ebx
c000152b:	83 ec 0c             	sub    esp,0xc
c000152e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001532:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001536:	83 fa 08             	cmp    edx,0x8
c0001539:	77 10                	ja     c000154b <dlmemalign+0x24>
c000153b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000153f:	83 c4 0c             	add    esp,0xc
c0001542:	5b                   	pop    ebx
c0001543:	5e                   	pop    esi
c0001544:	5f                   	pop    edi
c0001545:	5d                   	pop    ebp
c0001546:	e9 fc f8 ff ff       	jmp    c0000e47 <dlmalloc>
c000154b:	bf 10 00 00 00       	mov    edi,0x10
c0001550:	83 fa 0f             	cmp    edx,0xf
c0001553:	76 13                	jbe    c0001568 <dlmemalign+0x41>
c0001555:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001558:	85 d1                	test   ecx,edx
c000155a:	75 04                	jne    c0001560 <dlmemalign+0x39>
c000155c:	89 d7                	mov    edi,edx
c000155e:	eb 08                	jmp    c0001568 <dlmemalign+0x41>
c0001560:	39 d7                	cmp    edi,edx
c0001562:	73 04                	jae    c0001568 <dlmemalign+0x41>
c0001564:	01 ff                	add    edi,edi
c0001566:	eb f8                	jmp    c0001560 <dlmemalign+0x39>
c0001568:	83 f8 df             	cmp    eax,0xffffffdf
c000156b:	76 07                	jbe    c0001574 <dlmemalign+0x4d>
c000156d:	31 c0                	xor    eax,eax
c000156f:	e9 ce 00 00 00       	jmp    c0001642 <dlmemalign+0x11b>
c0001574:	83 c0 0b             	add    eax,0xb
c0001577:	bd 10 00 00 00       	mov    ebp,0x10
c000157c:	83 f8 0f             	cmp    eax,0xf
c000157f:	76 05                	jbe    c0001586 <dlmemalign+0x5f>
c0001581:	83 e0 f8             	and    eax,0xfffffff8
c0001584:	89 c5                	mov    ebp,eax
c0001586:	83 ec 0c             	sub    esp,0xc
c0001589:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000158d:	50                   	push   eax
c000158e:	e8 b4 f8 ff ff       	call   c0000e47 <dlmalloc>
c0001593:	83 c4 10             	add    esp,0x10
c0001596:	89 c1                	mov    ecx,eax
c0001598:	85 c0                	test   eax,eax
c000159a:	74 d1                	je     c000156d <dlmemalign+0x46>
c000159c:	31 d2                	xor    edx,edx
c000159e:	8d 70 f8             	lea    esi,[eax-0x8]
c00015a1:	f7 f7                	div    edi
c00015a3:	85 d2                	test   edx,edx
c00015a5:	74 62                	je     c0001609 <dlmemalign+0xe2>
c00015a7:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015ab:	89 f8                	mov    eax,edi
c00015ad:	f7 d8                	neg    eax
c00015af:	21 c3                	and    ebx,eax
c00015b1:	83 eb 08             	sub    ebx,0x8
c00015b4:	89 d8                	mov    eax,ebx
c00015b6:	29 f0                	sub    eax,esi
c00015b8:	83 f8 0f             	cmp    eax,0xf
c00015bb:	77 02                	ja     c00015bf <dlmemalign+0x98>
c00015bd:	01 fb                	add    ebx,edi
c00015bf:	89 d8                	mov    eax,ebx
c00015c1:	29 f0                	sub    eax,esi
c00015c3:	89 c6                	mov    esi,eax
c00015c5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015c8:	89 c2                	mov    edx,eax
c00015ca:	83 e2 fc             	and    edx,0xfffffffc
c00015cd:	29 f2                	sub    edx,esi
c00015cf:	a8 02                	test   al,0x2
c00015d1:	74 10                	je     c00015e3 <dlmemalign+0xbc>
c00015d3:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015d6:	83 ca 02             	or     edx,0x2
c00015d9:	8d 43 08             	lea    eax,[ebx+0x8]
c00015dc:	89 33                	mov    DWORD PTR [ebx],esi
c00015de:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015e1:	eb 5f                	jmp    c0001642 <dlmemalign+0x11b>
c00015e3:	83 ec 0c             	sub    esp,0xc
c00015e6:	89 d0                	mov    eax,edx
c00015e8:	83 c8 01             	or     eax,0x1
c00015eb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00015ee:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00015f3:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015f6:	83 e0 01             	and    eax,0x1
c00015f9:	09 f0                	or     eax,esi
c00015fb:	89 de                	mov    esi,ebx
c00015fd:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001600:	51                   	push   ecx
c0001601:	e8 e6 f4 ff ff       	call   c0000aec <dlfree>
c0001606:	83 c4 10             	add    esp,0x10
c0001609:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000160c:	a8 02                	test   al,0x2
c000160e:	75 2f                	jne    c000163f <dlmemalign+0x118>
c0001610:	83 e0 fc             	and    eax,0xfffffffc
c0001613:	8d 55 10             	lea    edx,[ebp+0x10]
c0001616:	39 c2                	cmp    edx,eax
c0001618:	73 25                	jae    c000163f <dlmemalign+0x118>
c000161a:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000161d:	83 ec 0c             	sub    esp,0xc
c0001620:	29 e8                	sub    eax,ebp
c0001622:	83 c2 08             	add    edx,0x8
c0001625:	83 c8 01             	or     eax,0x1
c0001628:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000162b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000162e:	83 e0 01             	and    eax,0x1
c0001631:	09 c5                	or     ebp,eax
c0001633:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001636:	52                   	push   edx
c0001637:	e8 b0 f4 ff ff       	call   c0000aec <dlfree>
c000163c:	83 c4 10             	add    esp,0x10
c000163f:	8d 46 08             	lea    eax,[esi+0x8]
c0001642:	83 c4 0c             	add    esp,0xc
c0001645:	5b                   	pop    ebx
c0001646:	5e                   	pop    esi
c0001647:	5f                   	pop    edi
c0001648:	5d                   	pop    ebp
c0001649:	c3                   	ret    

c000164a <dlcalloc>:
c000164a:	53                   	push   ebx
c000164b:	83 ec 14             	sub    esp,0x14
c000164e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001652:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001657:	50                   	push   eax
c0001658:	e8 ea f7 ff ff       	call   c0000e47 <dlmalloc>
c000165d:	83 c4 10             	add    esp,0x10
c0001660:	89 c3                	mov    ebx,eax
c0001662:	85 c0                	test   eax,eax
c0001664:	74 77                	je     c00016dd <dlcalloc+0x93>
c0001666:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001669:	89 d0                	mov    eax,edx
c000166b:	83 e0 fc             	and    eax,0xfffffffc
c000166e:	80 e2 02             	and    dl,0x2
c0001671:	75 5a                	jne    c00016cd <dlcalloc+0x83>
c0001673:	83 e8 04             	sub    eax,0x4
c0001676:	83 f8 27             	cmp    eax,0x27
c0001679:	76 03                	jbe    c000167e <dlcalloc+0x34>
c000167b:	51                   	push   ecx
c000167c:	eb 53                	jmp    c00016d1 <dlcalloc+0x87>
c000167e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001684:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000168b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001692:	83 f8 13             	cmp    eax,0x13
c0001695:	76 46                	jbe    c00016dd <dlcalloc+0x93>
c0001697:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000169e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016a5:	83 f8 1b             	cmp    eax,0x1b
c00016a8:	76 33                	jbe    c00016dd <dlcalloc+0x93>
c00016aa:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016b1:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016b8:	83 f8 23             	cmp    eax,0x23
c00016bb:	76 20                	jbe    c00016dd <dlcalloc+0x93>
c00016bd:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016c4:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016cb:	eb 10                	jmp    c00016dd <dlcalloc+0x93>
c00016cd:	83 e8 08             	sub    eax,0x8
c00016d0:	52                   	push   edx
c00016d1:	50                   	push   eax
c00016d2:	6a 00                	push   0x0
c00016d4:	53                   	push   ebx
c00016d5:	e8 ce ed ff ff       	call   c00004a8 <memset>
c00016da:	83 c4 10             	add    esp,0x10
c00016dd:	89 d8                	mov    eax,ebx
c00016df:	83 c4 08             	add    esp,0x8
c00016e2:	5b                   	pop    ebx
c00016e3:	c3                   	ret    

c00016e4 <dlcfree>:
c00016e4:	e9 03 f4 ff ff       	jmp    c0000aec <dlfree>

c00016e9 <dlindependent_calloc>:
c00016e9:	83 ec 28             	sub    esp,0x28
c00016ec:	b9 03 00 00 00       	mov    ecx,0x3
c00016f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00016f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00016f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00016fd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001701:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001705:	e8 cb fa ff ff       	call   c00011d5 <iALLOc>
c000170a:	83 c4 2c             	add    esp,0x2c
c000170d:	c3                   	ret    

c000170e <dlindependent_comalloc>:
c000170e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001716:	31 c9                	xor    ecx,ecx
c0001718:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000171c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001720:	e9 b0 fa ff ff       	jmp    c00011d5 <iALLOc>

c0001725 <dlvalloc>:
c0001725:	83 ec 0c             	sub    esp,0xc
c0001728:	83 3d c0 2d 02 c0 00 	cmp    DWORD PTR ds:0xc0022dc0,0x0
c000172f:	75 0a                	jne    c000173b <dlvalloc+0x16>
c0001731:	b8 c0 2d 02 c0       	mov    eax,0xc0022dc0
c0001736:	e8 ca f2 ff ff       	call   c0000a05 <malloc_consolidate>
c000173b:	50                   	push   eax
c000173c:	50                   	push   eax
c000173d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001741:	ff 35 1c 31 02 c0    	push   DWORD PTR ds:0xc002311c
c0001747:	e8 db fd ff ff       	call   c0001527 <dlmemalign>
c000174c:	83 c4 1c             	add    esp,0x1c
c000174f:	c3                   	ret    

c0001750 <dlpvalloc>:
c0001750:	83 ec 0c             	sub    esp,0xc
c0001753:	83 3d c0 2d 02 c0 00 	cmp    DWORD PTR ds:0xc0022dc0,0x0
c000175a:	75 0a                	jne    c0001766 <dlpvalloc+0x16>
c000175c:	b8 c0 2d 02 c0       	mov    eax,0xc0022dc0
c0001761:	e8 9f f2 ff ff       	call   c0000a05 <malloc_consolidate>
c0001766:	a1 1c 31 02 c0       	mov    eax,ds:0xc002311c
c000176b:	89 c1                	mov    ecx,eax
c000176d:	52                   	push   edx
c000176e:	f7 d9                	neg    ecx
c0001770:	52                   	push   edx
c0001771:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001775:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001779:	21 ca                	and    edx,ecx
c000177b:	52                   	push   edx
c000177c:	50                   	push   eax
c000177d:	e8 a5 fd ff ff       	call   c0001527 <dlmemalign>
c0001782:	83 c4 1c             	add    esp,0x1c
c0001785:	c3                   	ret    

c0001786 <dlmalloc_trim>:
c0001786:	b8 c0 2d 02 c0       	mov    eax,0xc0022dc0
c000178b:	e8 75 f2 ff ff       	call   c0000a05 <malloc_consolidate>
c0001790:	31 c0                	xor    eax,eax
c0001792:	c3                   	ret    

c0001793 <dlmalloc_usable_size>:
c0001793:	53                   	push   ebx
c0001794:	31 c0                	xor    eax,eax
c0001796:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000179a:	85 c9                	test   ecx,ecx
c000179c:	74 24                	je     c00017c2 <dlmalloc_usable_size+0x2f>
c000179e:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017a1:	f6 c2 02             	test   dl,0x2
c00017a4:	74 08                	je     c00017ae <dlmalloc_usable_size+0x1b>
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	8d 42 f8             	lea    eax,[edx-0x8]
c00017ac:	eb 14                	jmp    c00017c2 <dlmalloc_usable_size+0x2f>
c00017ae:	89 d3                	mov    ebx,edx
c00017b0:	31 c0                	xor    eax,eax
c00017b2:	83 e3 fe             	and    ebx,0xfffffffe
c00017b5:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017ba:	74 06                	je     c00017c2 <dlmalloc_usable_size+0x2f>
c00017bc:	83 e2 fc             	and    edx,0xfffffffc
c00017bf:	8d 42 fc             	lea    eax,[edx-0x4]
c00017c2:	5b                   	pop    ebx
c00017c3:	c3                   	ret    

c00017c4 <dlmallinfo>:
c00017c4:	55                   	push   ebp
c00017c5:	57                   	push   edi
c00017c6:	56                   	push   esi
c00017c7:	53                   	push   ebx
c00017c8:	83 ec 08             	sub    esp,0x8
c00017cb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017cf:	83 3d ec 2d 02 c0 00 	cmp    DWORD PTR ds:0xc0022dec,0x0
c00017d6:	75 0a                	jne    c00017e2 <dlmallinfo+0x1e>
c00017d8:	b8 c0 2d 02 c0       	mov    eax,0xc0022dc0
c00017dd:	e8 23 f2 ff ff       	call   c0000a05 <malloc_consolidate>
c00017e2:	a1 ec 2d 02 c0       	mov    eax,ds:0xc0022dec
c00017e7:	31 ed                	xor    ebp,ebp
c00017e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00017ec:	31 c9                	xor    ecx,ecx
c00017ee:	83 e0 fc             	and    eax,0xfffffffc
c00017f1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00017f5:	31 c0                	xor    eax,eax
c00017f7:	8b 14 85 c4 2d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd23c]
c00017fe:	85 d2                	test   edx,edx
c0001800:	74 0e                	je     c0001810 <dlmallinfo+0x4c>
c0001802:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001805:	45                   	inc    ebp
c0001806:	83 e6 fc             	and    esi,0xfffffffc
c0001809:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000180c:	01 f1                	add    ecx,esi
c000180e:	eb ee                	jmp    c00017fe <dlmallinfo+0x3a>
c0001810:	40                   	inc    eax
c0001811:	83 f8 0a             	cmp    eax,0xa
c0001814:	75 e1                	jne    c00017f7 <dlmallinfo+0x33>
c0001816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000181a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001821:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001824:	b8 f4 2d 02 c0       	mov    eax,0xc0022df4
c0001829:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000182c:	39 f0                	cmp    eax,esi
c000182e:	74 10                	je     c0001840 <dlmallinfo+0x7c>
c0001830:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001833:	ff 04 24             	inc    DWORD PTR [esp]
c0001836:	83 e7 fc             	and    edi,0xfffffffc
c0001839:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000183c:	01 fa                	add    edx,edi
c000183e:	eb ec                	jmp    c000182c <dlmallinfo+0x68>
c0001840:	83 c0 08             	add    eax,0x8
c0001843:	3d ec 30 02 c0       	cmp    eax,0xc00230ec
c0001848:	75 df                	jne    c0001829 <dlmallinfo+0x65>
c000184a:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000184d:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001850:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001853:	a1 28 31 02 c0       	mov    eax,ds:0xc0023128
c0001858:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000185b:	89 03                	mov    DWORD PTR [ebx],eax
c000185d:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001860:	8b 35 10 31 02 c0    	mov    esi,DWORD PTR ds:0xc0023110
c0001866:	29 d0                	sub    eax,edx
c0001868:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000186b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000186e:	8b 35 24 31 02 c0    	mov    esi,DWORD PTR ds:0xc0023124
c0001874:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001878:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000187b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000187e:	8b 35 34 31 02 c0    	mov    esi,DWORD PTR ds:0xc0023134
c0001884:	89 d8                	mov    eax,ebx
c0001886:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001889:	83 c4 08             	add    esp,0x8
c000188c:	5b                   	pop    ebx
c000188d:	5e                   	pop    esi
c000188e:	5f                   	pop    edi
c000188f:	5d                   	pop    ebp
c0001890:	c2 04 00             	ret    0x4

c0001893 <dlmalloc_stats>:
c0001893:	83 ec 30             	sub    esp,0x30
c0001896:	8d 44 24 08          	lea    eax,[esp+0x8]
c000189a:	50                   	push   eax
c000189b:	e8 24 ff ff ff       	call   c00017c4 <dlmallinfo>
c00018a0:	83 c4 30             	add    esp,0x30
c00018a3:	c3                   	ret    

c00018a4 <dlmallopt>:
c00018a4:	56                   	push   esi
c00018a5:	b8 c0 2d 02 c0       	mov    eax,0xc0022dc0
c00018aa:	53                   	push   ebx
c00018ab:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018b3:	e8 4d f1 ff ff       	call   c0000a05 <malloc_consolidate>
c00018b8:	8d 46 04             	lea    eax,[esi+0x4]
c00018bb:	83 f8 05             	cmp    eax,0x5
c00018be:	77 67                	ja     c0001927 <dlmallopt+0x83>
c00018c0:	ff 24 85 e4 00 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdff1c]
c00018c7:	83 fb 50             	cmp    ebx,0x50
c00018ca:	77 5b                	ja     c0001927 <dlmallopt+0x83>
c00018cc:	ba 08 00 00 00       	mov    edx,0x8
c00018d1:	85 db                	test   ebx,ebx
c00018d3:	74 12                	je     c00018e7 <dlmallopt+0x43>
c00018d5:	83 c3 0b             	add    ebx,0xb
c00018d8:	ba 10 00 00 00       	mov    edx,0x10
c00018dd:	83 fb 0f             	cmp    ebx,0xf
c00018e0:	76 05                	jbe    c00018e7 <dlmallopt+0x43>
c00018e2:	89 da                	mov    edx,ebx
c00018e4:	83 e2 f8             	and    edx,0xfffffff8
c00018e7:	a1 c0 2d 02 c0       	mov    eax,ds:0xc0022dc0
c00018ec:	83 e0 03             	and    eax,0x3
c00018ef:	09 d0                	or     eax,edx
c00018f1:	a3 c0 2d 02 c0       	mov    ds:0xc0022dc0,eax
c00018f6:	eb 31                	jmp    c0001929 <dlmallopt+0x85>
c00018f8:	89 1d 04 31 02 c0    	mov    DWORD PTR ds:0xc0023104,ebx
c00018fe:	eb 06                	jmp    c0001906 <dlmallopt+0x62>
c0001900:	89 1d 08 31 02 c0    	mov    DWORD PTR ds:0xc0023108,ebx
c0001906:	be 01 00 00 00       	mov    esi,0x1
c000190b:	eb 1c                	jmp    c0001929 <dlmallopt+0x85>
c000190d:	89 1d 0c 31 02 c0    	mov    DWORD PTR ds:0xc002310c,ebx
c0001913:	eb f1                	jmp    c0001906 <dlmallopt+0x62>
c0001915:	31 f6                	xor    esi,esi
c0001917:	85 db                	test   ebx,ebx
c0001919:	75 0e                	jne    c0001929 <dlmallopt+0x85>
c000191b:	c7 05 14 31 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023114,0x0
c0001925:	eb df                	jmp    c0001906 <dlmallopt+0x62>
c0001927:	31 f6                	xor    esi,esi
c0001929:	89 f0                	mov    eax,esi
c000192b:	5b                   	pop    ebx
c000192c:	5e                   	pop    esi
c000192d:	c3                   	ret    

c000192e <disk_status>:
c000192e:	31 c0                	xor    eax,eax
c0001930:	c3                   	ret    

c0001931 <disk_initialize>:
c0001931:	31 c0                	xor    eax,eax
c0001933:	c3                   	ret    

c0001934 <disk_read>:
c0001934:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001939:	0f b6 04 85 60 68 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd97a0]
c0001941:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001945:	e9 ae 82 01 00       	jmp    c0019bf8 <fatWrapperReadDisk>

c000194a <disk_write>:
c000194a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000194f:	0f b6 04 85 60 68 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd97a0]
c0001957:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000195b:	e9 e0 82 01 00       	jmp    c0019c40 <fatWrapperWriteDisk>

c0001960 <disk_ioctl>:
c0001960:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001965:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001969:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000196e:	0f b6 04 85 60 68 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd97a0]
c0001976:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000197a:	e9 09 83 01 00       	jmp    c0019c88 <fatWrapperIoctl>

c000197f <ld_word>:
c000197f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001983:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001986:	c1 e2 08             	shl    edx,0x8
c0001989:	09 d0                	or     eax,edx
c000198b:	c3                   	ret    

c000198c <ld_dword>:
c000198c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001990:	89 d1                	mov    ecx,edx
c0001992:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001996:	c1 e1 08             	shl    ecx,0x8
c0001999:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000199c:	09 ca                	or     edx,ecx
c000199e:	c1 e2 08             	shl    edx,0x8
c00019a1:	09 d0                	or     eax,edx
c00019a3:	c3                   	ret    

c00019a4 <ld_qword>:
c00019a4:	57                   	push   edi
c00019a5:	56                   	push   esi
c00019a6:	53                   	push   ebx
c00019a7:	31 db                	xor    ebx,ebx
c00019a9:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019ac:	89 df                	mov    edi,ebx
c00019ae:	89 ce                	mov    esi,ecx
c00019b0:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019b4:	0f a4 f7 08          	shld   edi,esi,0x8
c00019b8:	c1 e6 08             	shl    esi,0x8
c00019bb:	09 f2                	or     edx,esi
c00019bd:	89 d6                	mov    esi,edx
c00019bf:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019c3:	0f a4 f7 08          	shld   edi,esi,0x8
c00019c7:	c1 e6 08             	shl    esi,0x8
c00019ca:	09 f2                	or     edx,esi
c00019cc:	89 d6                	mov    esi,edx
c00019ce:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019d2:	0f a4 f7 08          	shld   edi,esi,0x8
c00019d6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019d9:	c1 e6 08             	shl    esi,0x8
c00019dc:	89 fb                	mov    ebx,edi
c00019de:	09 f2                	or     edx,esi
c00019e0:	89 d1                	mov    ecx,edx
c00019e2:	0f a4 cb 08          	shld   ebx,ecx,0x8
c00019e6:	c1 e1 08             	shl    ecx,0x8
c00019e9:	89 da                	mov    edx,ebx
c00019eb:	09 c8                	or     eax,ecx
c00019ed:	5b                   	pop    ebx
c00019ee:	5e                   	pop    esi
c00019ef:	5f                   	pop    edi
c00019f0:	c3                   	ret    

c00019f1 <st_word>:
c00019f1:	66 89 10             	mov    WORD PTR [eax],dx
c00019f4:	c3                   	ret    

c00019f5 <st_dword>:
c00019f5:	89 10                	mov    DWORD PTR [eax],edx
c00019f7:	c3                   	ret    

c00019f8 <st_qword>:
c00019f8:	89 10                	mov    DWORD PTR [eax],edx
c00019fa:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00019fd:	c3                   	ret    

c00019fe <mem_cpy>:
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 10                	je     c0001a12 <mem_cpy+0x14>
c0001a02:	57                   	push   edi
c0001a03:	01 c1                	add    ecx,eax
c0001a05:	56                   	push   esi
c0001a06:	89 c7                	mov    edi,eax
c0001a08:	89 d6                	mov    esi,edx
c0001a0a:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a0b:	39 f9                	cmp    ecx,edi
c0001a0d:	75 fb                	jne    c0001a0a <mem_cpy+0xc>
c0001a0f:	5e                   	pop    esi
c0001a10:	5f                   	pop    edi
c0001a11:	c3                   	ret    
c0001a12:	c3                   	ret    

c0001a13 <mem_set>:
c0001a13:	01 c1                	add    ecx,eax
c0001a15:	40                   	inc    eax
c0001a16:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a19:	39 c8                	cmp    eax,ecx
c0001a1b:	75 f8                	jne    c0001a15 <mem_set+0x2>
c0001a1d:	c3                   	ret    

c0001a1e <mem_cmp>:
c0001a1e:	57                   	push   edi
c0001a1f:	56                   	push   esi
c0001a20:	89 c6                	mov    esi,eax
c0001a22:	53                   	push   ebx
c0001a23:	46                   	inc    esi
c0001a24:	42                   	inc    edx
c0001a25:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a29:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a2d:	29 fb                	sub    ebx,edi
c0001a2f:	89 cf                	mov    edi,ecx
c0001a31:	29 f7                	sub    edi,esi
c0001a33:	01 c7                	add    edi,eax
c0001a35:	74 04                	je     c0001a3b <mem_cmp+0x1d>
c0001a37:	85 db                	test   ebx,ebx
c0001a39:	74 e8                	je     c0001a23 <mem_cmp+0x5>
c0001a3b:	89 d8                	mov    eax,ebx
c0001a3d:	5b                   	pop    ebx
c0001a3e:	5e                   	pop    esi
c0001a3f:	5f                   	pop    edi
c0001a40:	c3                   	ret    

c0001a41 <chk_chr>:
c0001a41:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a44:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a47:	74 07                	je     c0001a50 <chk_chr+0xf>
c0001a49:	39 d1                	cmp    ecx,edx
c0001a4b:	74 03                	je     c0001a50 <chk_chr+0xf>
c0001a4d:	40                   	inc    eax
c0001a4e:	eb f1                	jmp    c0001a41 <chk_chr>
c0001a50:	89 c8                	mov    eax,ecx
c0001a52:	c3                   	ret    

c0001a53 <dbc_1st>:
c0001a53:	31 c0                	xor    eax,eax
c0001a55:	c3                   	ret    

c0001a56 <dbc_2nd>:
c0001a56:	31 c0                	xor    eax,eax
c0001a58:	c3                   	ret    

c0001a59 <tchar2uni>:
c0001a59:	57                   	push   edi
c0001a5a:	89 c7                	mov    edi,eax
c0001a5c:	56                   	push   esi
c0001a5d:	53                   	push   ebx
c0001a5e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a60:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a62:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a65:	84 c9                	test   cl,cl
c0001a67:	78 0a                	js     c0001a73 <tchar2uni+0x1a>
c0001a69:	0f b6 d1             	movzx  edx,cl
c0001a6c:	89 f3                	mov    ebx,esi
c0001a6e:	e9 9f 00 00 00       	jmp    c0001b12 <tchar2uni+0xb9>
c0001a73:	88 ca                	mov    dl,cl
c0001a75:	83 e2 e0             	and    edx,0xffffffe0
c0001a78:	80 fa c0             	cmp    dl,0xc0
c0001a7b:	75 0c                	jne    c0001a89 <tchar2uni+0x30>
c0001a7d:	89 ca                	mov    edx,ecx
c0001a7f:	b9 01 00 00 00       	mov    ecx,0x1
c0001a84:	83 e2 1f             	and    edx,0x1f
c0001a87:	eb 2e                	jmp    c0001ab7 <tchar2uni+0x5e>
c0001a89:	88 ca                	mov    dl,cl
c0001a8b:	83 e2 f0             	and    edx,0xfffffff0
c0001a8e:	80 fa e0             	cmp    dl,0xe0
c0001a91:	75 0c                	jne    c0001a9f <tchar2uni+0x46>
c0001a93:	89 ca                	mov    edx,ecx
c0001a95:	b9 02 00 00 00       	mov    ecx,0x2
c0001a9a:	83 e2 0f             	and    edx,0xf
c0001a9d:	eb 18                	jmp    c0001ab7 <tchar2uni+0x5e>
c0001a9f:	88 ca                	mov    dl,cl
c0001aa1:	83 e2 f8             	and    edx,0xfffffff8
c0001aa4:	88 d0                	mov    al,dl
c0001aa6:	83 ca ff             	or     edx,0xffffffff
c0001aa9:	3c f0                	cmp    al,0xf0
c0001aab:	75 6c                	jne    c0001b19 <tchar2uni+0xc0>
c0001aad:	89 ca                	mov    edx,ecx
c0001aaf:	b9 03 00 00 00       	mov    ecx,0x3
c0001ab4:	83 e2 07             	and    edx,0x7
c0001ab7:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001abb:	46                   	inc    esi
c0001abc:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001abf:	88 c8                	mov    al,cl
c0001ac1:	83 e0 c0             	and    eax,0xffffffc0
c0001ac4:	3c 80                	cmp    al,0x80
c0001ac6:	75 4e                	jne    c0001b16 <tchar2uni+0xbd>
c0001ac8:	c1 e2 06             	shl    edx,0x6
c0001acb:	83 e1 3f             	and    ecx,0x3f
c0001ace:	09 ca                	or     edx,ecx
c0001ad0:	39 de                	cmp    esi,ebx
c0001ad2:	75 e7                	jne    c0001abb <tchar2uni+0x62>
c0001ad4:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ad7:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001add:	77 37                	ja     c0001b16 <tchar2uni+0xbd>
c0001adf:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001ae5:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001aeb:	76 29                	jbe    c0001b16 <tchar2uni+0xbd>
c0001aed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001af3:	76 1d                	jbe    c0001b12 <tchar2uni+0xb9>
c0001af5:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001afb:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b01:	c1 e1 06             	shl    ecx,0x6
c0001b04:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b0a:	09 ca                	or     edx,ecx
c0001b0c:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b12:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b14:	eb 03                	jmp    c0001b19 <tchar2uni+0xc0>
c0001b16:	83 ca ff             	or     edx,0xffffffff
c0001b19:	5b                   	pop    ebx
c0001b1a:	89 d0                	mov    eax,edx
c0001b1c:	5e                   	pop    esi
c0001b1d:	5f                   	pop    edi
c0001b1e:	c3                   	ret    

c0001b1f <put_utf>:
c0001b1f:	53                   	push   ebx
c0001b20:	83 f8 7f             	cmp    eax,0x7f
c0001b23:	89 c3                	mov    ebx,eax
c0001b25:	b0 00                	mov    al,0x0
c0001b27:	77 11                	ja     c0001b3a <put_utf+0x1b>
c0001b29:	85 c9                	test   ecx,ecx
c0001b2b:	0f 84 e5 00 00 00    	je     c0001c16 <put_utf+0xf7>
c0001b31:	88 1a                	mov    BYTE PTR [edx],bl
c0001b33:	b0 01                	mov    al,0x1
c0001b35:	e9 dc 00 00 00       	jmp    c0001c16 <put_utf+0xf7>
c0001b3a:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b40:	77 23                	ja     c0001b65 <put_utf+0x46>
c0001b42:	83 f9 01             	cmp    ecx,0x1
c0001b45:	0f 86 cb 00 00 00    	jbe    c0001c16 <put_utf+0xf7>
c0001b4b:	89 d8                	mov    eax,ebx
c0001b4d:	83 e3 3f             	and    ebx,0x3f
c0001b50:	c1 e8 06             	shr    eax,0x6
c0001b53:	83 cb 80             	or     ebx,0xffffff80
c0001b56:	83 c8 c0             	or     eax,0xffffffc0
c0001b59:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b5c:	88 02                	mov    BYTE PTR [edx],al
c0001b5e:	b0 02                	mov    al,0x2
c0001b60:	e9 b1 00 00 00       	jmp    c0001c16 <put_utf+0xf7>
c0001b65:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b6b:	77 40                	ja     c0001bad <put_utf+0x8e>
c0001b6d:	83 f9 02             	cmp    ecx,0x2
c0001b70:	0f 86 a0 00 00 00    	jbe    c0001c16 <put_utf+0xf7>
c0001b76:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b7c:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b82:	0f 86 8e 00 00 00    	jbe    c0001c16 <put_utf+0xf7>
c0001b88:	89 d8                	mov    eax,ebx
c0001b8a:	c1 e8 0c             	shr    eax,0xc
c0001b8d:	83 c8 e0             	or     eax,0xffffffe0
c0001b90:	88 02                	mov    BYTE PTR [edx],al
c0001b92:	89 d8                	mov    eax,ebx
c0001b94:	83 e3 3f             	and    ebx,0x3f
c0001b97:	c1 e8 06             	shr    eax,0x6
c0001b9a:	83 cb 80             	or     ebx,0xffffff80
c0001b9d:	83 e0 3f             	and    eax,0x3f
c0001ba0:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ba3:	83 c8 80             	or     eax,0xffffff80
c0001ba6:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ba9:	b0 03                	mov    al,0x3
c0001bab:	eb 69                	jmp    c0001c16 <put_utf+0xf7>
c0001bad:	83 f9 03             	cmp    ecx,0x3
c0001bb0:	76 64                	jbe    c0001c16 <put_utf+0xf7>
c0001bb2:	89 d9                	mov    ecx,ebx
c0001bb4:	0f b7 c3             	movzx  eax,bx
c0001bb7:	66 31 c9             	xor    cx,cx
c0001bba:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bc0:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001bc6:	c1 e9 06             	shr    ecx,0x6
c0001bc9:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001bcf:	77 43                	ja     c0001c14 <put_utf+0xf5>
c0001bd1:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001bd7:	77 3b                	ja     c0001c14 <put_utf+0xf5>
c0001bd9:	09 cb                	or     ebx,ecx
c0001bdb:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001be1:	89 d8                	mov    eax,ebx
c0001be3:	c1 e8 12             	shr    eax,0x12
c0001be6:	83 c8 f0             	or     eax,0xfffffff0
c0001be9:	88 02                	mov    BYTE PTR [edx],al
c0001beb:	89 d8                	mov    eax,ebx
c0001bed:	c1 e8 0c             	shr    eax,0xc
c0001bf0:	83 e0 3f             	and    eax,0x3f
c0001bf3:	83 c8 80             	or     eax,0xffffff80
c0001bf6:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bf9:	89 d8                	mov    eax,ebx
c0001bfb:	83 e3 3f             	and    ebx,0x3f
c0001bfe:	c1 e8 06             	shr    eax,0x6
c0001c01:	83 cb 80             	or     ebx,0xffffff80
c0001c04:	83 e0 3f             	and    eax,0x3f
c0001c07:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c0a:	83 c8 80             	or     eax,0xffffff80
c0001c0d:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c10:	b0 04                	mov    al,0x4
c0001c12:	eb 02                	jmp    c0001c16 <put_utf+0xf7>
c0001c14:	31 c0                	xor    eax,eax
c0001c16:	5b                   	pop    ebx
c0001c17:	c3                   	ret    

c0001c18 <clst2sect>:
c0001c18:	89 c1                	mov    ecx,eax
c0001c1a:	83 ea 02             	sub    edx,0x2
c0001c1d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c20:	83 e8 02             	sub    eax,0x2
c0001c23:	39 d0                	cmp    eax,edx
c0001c25:	76 0d                	jbe    c0001c34 <clst2sect+0x1c>
c0001c27:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c2b:	f7 e2                	mul    edx
c0001c2d:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c30:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c33:	c3                   	ret    
c0001c34:	31 c0                	xor    eax,eax
c0001c36:	31 d2                	xor    edx,edx
c0001c38:	c3                   	ret    

c0001c39 <clmt_clust>:
c0001c39:	57                   	push   edi
c0001c3a:	89 cf                	mov    edi,ecx
c0001c3c:	56                   	push   esi
c0001c3d:	89 d6                	mov    esi,edx
c0001c3f:	53                   	push   ebx
c0001c40:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c44:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c47:	89 f2                	mov    edx,esi
c0001c49:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c4b:	c1 ef 09             	shr    edi,0x9
c0001c4e:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c52:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c55:	89 f9                	mov    ecx,edi
c0001c57:	31 ff                	xor    edi,edi
c0001c59:	57                   	push   edi
c0001c5a:	56                   	push   esi
c0001c5b:	51                   	push   ecx
c0001c5c:	52                   	push   edx
c0001c5d:	e8 8e d6 01 00       	call   c001f2f0 <__udivdi3>
c0001c62:	83 c4 10             	add    esp,0x10
c0001c65:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c67:	85 d2                	test   edx,edx
c0001c69:	74 10                	je     c0001c7b <clmt_clust+0x42>
c0001c6b:	39 d0                	cmp    eax,edx
c0001c6d:	72 07                	jb     c0001c76 <clmt_clust+0x3d>
c0001c6f:	29 d0                	sub    eax,edx
c0001c71:	83 c3 08             	add    ebx,0x8
c0001c74:	eb ef                	jmp    c0001c65 <clmt_clust+0x2c>
c0001c76:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c79:	89 c2                	mov    edx,eax
c0001c7b:	5b                   	pop    ebx
c0001c7c:	89 d0                	mov    eax,edx
c0001c7e:	5e                   	pop    esi
c0001c7f:	5f                   	pop    edi
c0001c80:	c3                   	ret    

c0001c81 <pick_lfn>:
c0001c81:	55                   	push   ebp
c0001c82:	57                   	push   edi
c0001c83:	56                   	push   esi
c0001c84:	89 d6                	mov    esi,edx
c0001c86:	53                   	push   ebx
c0001c87:	89 c3                	mov    ebx,eax
c0001c89:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001c8c:	e8 ee fc ff ff       	call   c000197f <ld_word>
c0001c91:	66 85 c0             	test   ax,ax
c0001c94:	74 04                	je     c0001c9a <pick_lfn+0x19>
c0001c96:	31 c0                	xor    eax,eax
c0001c98:	eb 5c                	jmp    c0001cf6 <pick_lfn+0x75>
c0001c9a:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001c9d:	bd 01 00 00 00       	mov    ebp,0x1
c0001ca2:	83 e1 bf             	and    ecx,0xffffffbf
c0001ca5:	31 ff                	xor    edi,edi
c0001ca7:	49                   	dec    ecx
c0001ca8:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cab:	0f b6 87 00 02 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdfe00]
c0001cb2:	01 f0                	add    eax,esi
c0001cb4:	e8 c6 fc ff ff       	call   c000197f <ld_word>
c0001cb9:	66 85 ed             	test   bp,bp
c0001cbc:	74 11                	je     c0001ccf <pick_lfn+0x4e>
c0001cbe:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cc4:	77 d0                	ja     c0001c96 <pick_lfn+0x15>
c0001cc6:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001cca:	89 c5                	mov    ebp,eax
c0001ccc:	41                   	inc    ecx
c0001ccd:	eb 04                	jmp    c0001cd3 <pick_lfn+0x52>
c0001ccf:	66 40                	inc    ax
c0001cd1:	75 c3                	jne    c0001c96 <pick_lfn+0x15>
c0001cd3:	47                   	inc    edi
c0001cd4:	83 ff 0d             	cmp    edi,0xd
c0001cd7:	75 d2                	jne    c0001cab <pick_lfn+0x2a>
c0001cd9:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001cdc:	74 13                	je     c0001cf1 <pick_lfn+0x70>
c0001cde:	66 85 ed             	test   bp,bp
c0001ce1:	74 0e                	je     c0001cf1 <pick_lfn+0x70>
c0001ce3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ce9:	77 ab                	ja     c0001c96 <pick_lfn+0x15>
c0001ceb:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001cf1:	b8 01 00 00 00       	mov    eax,0x1
c0001cf6:	5b                   	pop    ebx
c0001cf7:	5e                   	pop    esi
c0001cf8:	5f                   	pop    edi
c0001cf9:	5d                   	pop    ebp
c0001cfa:	c3                   	ret    

c0001cfb <put_lfn>:
c0001cfb:	55                   	push   ebp
c0001cfc:	31 ed                	xor    ebp,ebp
c0001cfe:	57                   	push   edi
c0001cff:	89 d7                	mov    edi,edx
c0001d01:	56                   	push   esi
c0001d02:	31 f6                	xor    esi,esi
c0001d04:	53                   	push   ebx
c0001d05:	83 ec 08             	sub    esp,0x8
c0001d08:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d0b:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d13:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d19:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d1c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d1f:	31 d2                	xor    edx,edx
c0001d21:	e8 cb fc ff ff       	call   c00019f1 <st_word>
c0001d26:	0f b6 d9             	movzx  ebx,cl
c0001d29:	4b                   	dec    ebx
c0001d2a:	6b db 0d             	imul   ebx,ebx,0xd
c0001d2d:	66 83 fe ff          	cmp    si,0xffff
c0001d31:	74 08                	je     c0001d3b <put_lfn+0x40>
c0001d33:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d36:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d3a:	43                   	inc    ebx
c0001d3b:	0f b6 85 00 02 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdfe00]
c0001d42:	0f b7 d6             	movzx  edx,si
c0001d45:	01 f8                	add    eax,edi
c0001d47:	e8 a5 fc ff ff       	call   c00019f1 <st_word>
c0001d4c:	66 85 f6             	test   si,si
c0001d4f:	75 03                	jne    c0001d54 <put_lfn+0x59>
c0001d51:	83 ce ff             	or     esi,0xffffffff
c0001d54:	45                   	inc    ebp
c0001d55:	83 fd 0d             	cmp    ebp,0xd
c0001d58:	75 d3                	jne    c0001d2d <put_lfn+0x32>
c0001d5a:	66 46                	inc    si
c0001d5c:	74 0a                	je     c0001d68 <put_lfn+0x6d>
c0001d5e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d61:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d66:	75 09                	jne    c0001d71 <put_lfn+0x76>
c0001d68:	88 c8                	mov    al,cl
c0001d6a:	83 c8 40             	or     eax,0x40
c0001d6d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d75:	88 07                	mov    BYTE PTR [edi],al
c0001d77:	83 c4 08             	add    esp,0x8
c0001d7a:	5b                   	pop    ebx
c0001d7b:	5e                   	pop    esi
c0001d7c:	5f                   	pop    edi
c0001d7d:	5d                   	pop    ebp
c0001d7e:	c3                   	ret    

c0001d7f <gen_numname>:
c0001d7f:	57                   	push   edi
c0001d80:	89 cf                	mov    edi,ecx
c0001d82:	56                   	push   esi
c0001d83:	b9 0b 00 00 00       	mov    ecx,0xb
c0001d88:	53                   	push   ebx
c0001d89:	89 c6                	mov    esi,eax
c0001d8b:	83 ec 10             	sub    esp,0x10
c0001d8e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001d92:	e8 67 fc ff ff       	call   c00019fe <mem_cpy>
c0001d97:	83 fb 05             	cmp    ebx,0x5
c0001d9a:	76 2d                	jbe    c0001dc9 <gen_numname+0x4a>
c0001d9c:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001d9f:	66 85 c0             	test   ax,ax
c0001da2:	74 25                	je     c0001dc9 <gen_numname+0x4a>
c0001da4:	83 c7 02             	add    edi,0x2
c0001da7:	ba 10 00 00 00       	mov    edx,0x10
c0001dac:	01 db                	add    ebx,ebx
c0001dae:	89 c1                	mov    ecx,eax
c0001db0:	66 d1 e8             	shr    ax,1
c0001db3:	83 e1 01             	and    ecx,0x1
c0001db6:	01 cb                	add    ebx,ecx
c0001db8:	0f ba e3 10          	bt     ebx,0x10
c0001dbc:	73 06                	jae    c0001dc4 <gen_numname+0x45>
c0001dbe:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001dc4:	4a                   	dec    edx
c0001dc5:	75 e5                	jne    c0001dac <gen_numname+0x2d>
c0001dc7:	eb d3                	jmp    c0001d9c <gen_numname+0x1d>
c0001dc9:	b8 07 00 00 00       	mov    eax,0x7
c0001dce:	88 d9                	mov    cl,bl
c0001dd0:	83 e1 0f             	and    ecx,0xf
c0001dd3:	8d 51 30             	lea    edx,[ecx+0x30]
c0001dd6:	80 fa 39             	cmp    dl,0x39
c0001dd9:	76 03                	jbe    c0001dde <gen_numname+0x5f>
c0001ddb:	8d 51 37             	lea    edx,[ecx+0x37]
c0001dde:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001de1:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001de5:	89 da                	mov    edx,ebx
c0001de7:	c1 ea 04             	shr    edx,0x4
c0001dea:	83 fb 0f             	cmp    ebx,0xf
c0001ded:	76 06                	jbe    c0001df5 <gen_numname+0x76>
c0001def:	89 c8                	mov    eax,ecx
c0001df1:	89 d3                	mov    ebx,edx
c0001df3:	eb d9                	jmp    c0001dce <gen_numname+0x4f>
c0001df5:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001dfa:	31 d2                	xor    edx,edx
c0001dfc:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001dff:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e02:	39 ca                	cmp    edx,ecx
c0001e04:	73 18                	jae    c0001e1e <gen_numname+0x9f>
c0001e06:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e09:	3c 20                	cmp    al,0x20
c0001e0b:	74 11                	je     c0001e1e <gen_numname+0x9f>
c0001e0d:	e8 41 fc ff ff       	call   c0001a53 <dbc_1st>
c0001e12:	85 c0                	test   eax,eax
c0001e14:	74 05                	je     c0001e1b <gen_numname+0x9c>
c0001e16:	39 d3                	cmp    ebx,edx
c0001e18:	74 04                	je     c0001e1e <gen_numname+0x9f>
c0001e1a:	42                   	inc    edx
c0001e1b:	42                   	inc    edx
c0001e1c:	eb e1                	jmp    c0001dff <gen_numname+0x80>
c0001e1e:	b0 20                	mov    al,0x20
c0001e20:	83 f9 07             	cmp    ecx,0x7
c0001e23:	77 05                	ja     c0001e2a <gen_numname+0xab>
c0001e25:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e29:	41                   	inc    ecx
c0001e2a:	42                   	inc    edx
c0001e2b:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e2f:	83 fa 07             	cmp    edx,0x7
c0001e32:	76 ea                	jbe    c0001e1e <gen_numname+0x9f>
c0001e34:	83 c4 10             	add    esp,0x10
c0001e37:	5b                   	pop    ebx
c0001e38:	5e                   	pop    esi
c0001e39:	5f                   	pop    edi
c0001e3a:	c3                   	ret    

c0001e3b <sum_sfn>:
c0001e3b:	31 c9                	xor    ecx,ecx
c0001e3d:	31 d2                	xor    edx,edx
c0001e3f:	d0 ca                	ror    dl,1
c0001e41:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e44:	41                   	inc    ecx
c0001e45:	83 f9 0b             	cmp    ecx,0xb
c0001e48:	75 f5                	jne    c0001e3f <sum_sfn+0x4>
c0001e4a:	88 d0                	mov    al,dl
c0001e4c:	c3                   	ret    

c0001e4d <xdir_sum>:
c0001e4d:	56                   	push   esi
c0001e4e:	31 c9                	xor    ecx,ecx
c0001e50:	53                   	push   ebx
c0001e51:	31 d2                	xor    edx,edx
c0001e53:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e57:	43                   	inc    ebx
c0001e58:	c1 e3 05             	shl    ebx,0x5
c0001e5b:	83 fa 02             	cmp    edx,0x2
c0001e5e:	74 0b                	je     c0001e6b <xdir_sum+0x1e>
c0001e60:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e64:	66 d1 c9             	ror    cx,1
c0001e67:	01 f1                	add    ecx,esi
c0001e69:	eb 05                	jmp    c0001e70 <xdir_sum+0x23>
c0001e6b:	ba 03 00 00 00       	mov    edx,0x3
c0001e70:	42                   	inc    edx
c0001e71:	39 d3                	cmp    ebx,edx
c0001e73:	77 e6                	ja     c0001e5b <xdir_sum+0xe>
c0001e75:	89 c8                	mov    eax,ecx
c0001e77:	5b                   	pop    ebx
c0001e78:	5e                   	pop    esi
c0001e79:	c3                   	ret    

c0001e7a <xsum32>:
c0001e7a:	d1 ca                	ror    edx,1
c0001e7c:	0f b6 c0             	movzx  eax,al
c0001e7f:	01 d0                	add    eax,edx
c0001e81:	c3                   	ret    

c0001e82 <get_xfileinfo>:
c0001e82:	55                   	push   ebp
c0001e83:	31 c9                	xor    ecx,ecx
c0001e85:	57                   	push   edi
c0001e86:	bd 40 00 00 00       	mov    ebp,0x40
c0001e8b:	56                   	push   esi
c0001e8c:	31 ff                	xor    edi,edi
c0001e8e:	53                   	push   ebx
c0001e8f:	89 c6                	mov    esi,eax
c0001e91:	83 ec 0c             	sub    esp,0xc
c0001e94:	89 d3                	mov    ebx,edx
c0001e96:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001e9d:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001ea1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001ea4:	76 6d                	jbe    c0001f13 <get_xfileinfo+0x91>
c0001ea6:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001eac:	76 0b                	jbe    c0001eb9 <get_xfileinfo+0x37>
c0001eae:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001eb2:	bf 01 00 00 00       	mov    edi,0x1
c0001eb7:	eb 63                	jmp    c0001f1c <get_xfileinfo+0x9a>
c0001eb9:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001ebf:	75 03                	jne    c0001ec4 <get_xfileinfo+0x42>
c0001ec1:	83 c5 02             	add    ebp,0x2
c0001ec4:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001ec7:	83 c5 02             	add    ebp,0x2
c0001eca:	e8 b0 fa ff ff       	call   c000197f <ld_word>
c0001ecf:	ff 04 24             	inc    DWORD PTR [esp]
c0001ed2:	66 85 c9             	test   cx,cx
c0001ed5:	75 0d                	jne    c0001ee4 <get_xfileinfo+0x62>
c0001ed7:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001edd:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001ee2:	76 2b                	jbe    c0001f0f <get_xfileinfo+0x8d>
c0001ee4:	c1 e1 10             	shl    ecx,0x10
c0001ee7:	ba ff 00 00 00       	mov    edx,0xff
c0001eec:	0f b7 c0             	movzx  eax,ax
c0001eef:	29 fa                	sub    edx,edi
c0001ef1:	09 c8                	or     eax,ecx
c0001ef3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001ef7:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001efb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001eff:	e8 1b fc ff ff       	call   c0001b1f <put_utf>
c0001f04:	84 c0                	test   al,al
c0001f06:	74 a6                	je     c0001eae <get_xfileinfo+0x2c>
c0001f08:	0f b6 c0             	movzx  eax,al
c0001f0b:	01 c7                	add    edi,eax
c0001f0d:	31 c0                	xor    eax,eax
c0001f0f:	89 c1                	mov    ecx,eax
c0001f11:	eb 8a                	jmp    c0001e9d <get_xfileinfo+0x1b>
c0001f13:	85 ff                	test   edi,edi
c0001f15:	74 97                	je     c0001eae <get_xfileinfo+0x2c>
c0001f17:	66 85 c9             	test   cx,cx
c0001f1a:	75 92                	jne    c0001eae <get_xfileinfo+0x2c>
c0001f1c:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f21:	31 c0                	xor    eax,eax
c0001f23:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f27:	31 d2                	xor    edx,edx
c0001f29:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f2c:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f2f:	80 e1 10             	and    cl,0x10
c0001f32:	75 08                	jne    c0001f3c <get_xfileinfo+0xba>
c0001f34:	8d 46 38             	lea    eax,[esi+0x38]
c0001f37:	e8 68 fa ff ff       	call   c00019a4 <ld_qword>
c0001f3c:	89 03                	mov    DWORD PTR [ebx],eax
c0001f3e:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f41:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f44:	e8 36 fa ff ff       	call   c000197f <ld_word>
c0001f49:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f4d:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f50:	e8 2a fa ff ff       	call   c000197f <ld_word>
c0001f55:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f59:	83 c4 0c             	add    esp,0xc
c0001f5c:	5b                   	pop    ebx
c0001f5d:	5e                   	pop    esi
c0001f5e:	5f                   	pop    edi
c0001f5f:	5d                   	pop    ebp
c0001f60:	c3                   	ret    

c0001f61 <get_ldnumber>:
c0001f61:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f63:	85 d2                	test   edx,edx
c0001f65:	74 14                	je     c0001f7b <get_ldnumber+0x1a>
c0001f67:	56                   	push   esi
c0001f68:	53                   	push   ebx
c0001f69:	89 d3                	mov    ebx,edx
c0001f6b:	43                   	inc    ebx
c0001f6c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f6f:	80 f9 1f             	cmp    cl,0x1f
c0001f72:	76 0d                	jbe    c0001f81 <get_ldnumber+0x20>
c0001f74:	80 f9 3a             	cmp    cl,0x3a
c0001f77:	75 f2                	jne    c0001f6b <get_ldnumber+0xa>
c0001f79:	eb 0a                	jmp    c0001f85 <get_ldnumber+0x24>
c0001f7b:	83 c9 ff             	or     ecx,0xffffffff
c0001f7e:	89 c8                	mov    eax,ecx
c0001f80:	c3                   	ret    
c0001f81:	31 c9                	xor    ecx,ecx
c0001f83:	eb 24                	jmp    c0001fa9 <get_ldnumber+0x48>
c0001f85:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001f88:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001f8b:	80 f9 09             	cmp    cl,0x9
c0001f8e:	77 16                	ja     c0001fa6 <get_ldnumber+0x45>
c0001f90:	83 c2 02             	add    edx,0x2
c0001f93:	83 c9 ff             	or     ecx,0xffffffff
c0001f96:	39 d3                	cmp    ebx,edx
c0001f98:	75 0f                	jne    c0001fa9 <get_ldnumber+0x48>
c0001f9a:	89 f2                	mov    edx,esi
c0001f9c:	89 18                	mov    DWORD PTR [eax],ebx
c0001f9e:	0f be ca             	movsx  ecx,dl
c0001fa1:	83 e9 30             	sub    ecx,0x30
c0001fa4:	eb 03                	jmp    c0001fa9 <get_ldnumber+0x48>
c0001fa6:	83 c9 ff             	or     ecx,0xffffffff
c0001fa9:	89 c8                	mov    eax,ecx
c0001fab:	5b                   	pop    ebx
c0001fac:	5e                   	pop    esi
c0001fad:	c3                   	ret    

c0001fae <crc32>:
c0001fae:	56                   	push   esi
c0001faf:	89 d6                	mov    esi,edx
c0001fb1:	53                   	push   ebx
c0001fb2:	b2 01                	mov    dl,0x1
c0001fb4:	bb 08 00 00 00       	mov    ebx,0x8
c0001fb9:	89 f1                	mov    ecx,esi
c0001fbb:	84 d1                	test   cl,dl
c0001fbd:	0f 95 c1             	setne  cl
c0001fc0:	0f b6 c9             	movzx  ecx,cl
c0001fc3:	31 c1                	xor    ecx,eax
c0001fc5:	89 c8                	mov    eax,ecx
c0001fc7:	d1 e8                	shr    eax,1
c0001fc9:	80 e1 01             	and    cl,0x1
c0001fcc:	74 05                	je     c0001fd3 <crc32+0x25>
c0001fce:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fd3:	d1 e2                	shl    edx,1
c0001fd5:	4b                   	dec    ebx
c0001fd6:	75 e1                	jne    c0001fb9 <crc32+0xb>
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	c3                   	ret    

c0001fdb <test_gpt_header>:
c0001fdb:	55                   	push   ebp
c0001fdc:	b9 10 00 00 00       	mov    ecx,0x10
c0001fe1:	57                   	push   edi
c0001fe2:	ba 00 01 02 c0       	mov    edx,0xc0020100
c0001fe7:	56                   	push   esi
c0001fe8:	31 ff                	xor    edi,edi
c0001fea:	53                   	push   ebx
c0001feb:	89 c3                	mov    ebx,eax
c0001fed:	e8 2c fa ff ff       	call   c0001a1e <mem_cmp>
c0001ff2:	85 c0                	test   eax,eax
c0001ff4:	75 55                	jne    c000204b <test_gpt_header+0x70>
c0001ff6:	89 c7                	mov    edi,eax
c0001ff8:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c0001ffd:	83 ce ff             	or     esi,0xffffffff
c0002000:	31 d2                	xor    edx,edx
c0002002:	83 fd 03             	cmp    ebp,0x3
c0002005:	76 05                	jbe    c000200c <test_gpt_header+0x31>
c0002007:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000200c:	89 f0                	mov    eax,esi
c000200e:	45                   	inc    ebp
c000200f:	e8 9a ff ff ff       	call   c0001fae <crc32>
c0002014:	83 fd 4c             	cmp    ebp,0x4c
c0002017:	89 c6                	mov    esi,eax
c0002019:	75 e5                	jne    c0002000 <test_gpt_header+0x25>
c000201b:	8d 43 10             	lea    eax,[ebx+0x10]
c000201e:	f7 d6                	not    esi
c0002020:	e8 67 f9 ff ff       	call   c000198c <ld_dword>
c0002025:	39 c6                	cmp    esi,eax
c0002027:	75 22                	jne    c000204b <test_gpt_header+0x70>
c0002029:	8d 43 54             	lea    eax,[ebx+0x54]
c000202c:	e8 5b f9 ff ff       	call   c000198c <ld_dword>
c0002031:	83 c0 80             	add    eax,0xffffff80
c0002034:	75 15                	jne    c000204b <test_gpt_header+0x70>
c0002036:	8d 43 50             	lea    eax,[ebx+0x50]
c0002039:	e8 4e f9 ff ff       	call   c000198c <ld_dword>
c000203e:	3d 80 00 00 00       	cmp    eax,0x80
c0002043:	0f 96 c0             	setbe  al
c0002046:	0f b6 c0             	movzx  eax,al
c0002049:	89 c7                	mov    edi,eax
c000204b:	5b                   	pop    ebx
c000204c:	89 f8                	mov    eax,edi
c000204e:	5e                   	pop    esi
c000204f:	5f                   	pop    edi
c0002050:	5d                   	pop    ebp
c0002051:	c3                   	ret    

c0002052 <make_rand>:
c0002052:	56                   	push   esi
c0002053:	85 c0                	test   eax,eax
c0002055:	53                   	push   ebx
c0002056:	75 05                	jne    c000205d <make_rand+0xb>
c0002058:	b8 01 00 00 00       	mov    eax,0x1
c000205d:	01 d1                	add    ecx,edx
c000205f:	bb 08 00 00 00       	mov    ebx,0x8
c0002064:	89 c6                	mov    esi,eax
c0002066:	d1 e8                	shr    eax,1
c0002068:	83 e6 01             	and    esi,0x1
c000206b:	85 f6                	test   esi,esi
c000206d:	74 05                	je     c0002074 <make_rand+0x22>
c000206f:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002074:	4b                   	dec    ebx
c0002075:	75 ed                	jne    c0002064 <make_rand+0x12>
c0002077:	42                   	inc    edx
c0002078:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000207b:	39 ca                	cmp    edx,ecx
c000207d:	75 e0                	jne    c000205f <make_rand+0xd>
c000207f:	5b                   	pop    ebx
c0002080:	5e                   	pop    esi
c0002081:	c3                   	ret    

c0002082 <validate>:
c0002082:	56                   	push   esi
c0002083:	53                   	push   ebx
c0002084:	89 d6                	mov    esi,edx
c0002086:	51                   	push   ecx
c0002087:	85 c0                	test   eax,eax
c0002089:	75 09                	jne    c0002094 <validate+0x12>
c000208b:	b8 09 00 00 00       	mov    eax,0x9
c0002090:	31 c9                	xor    ecx,ecx
c0002092:	eb 2f                	jmp    c00020c3 <validate+0x41>
c0002094:	89 c3                	mov    ebx,eax
c0002096:	8b 00                	mov    eax,DWORD PTR [eax]
c0002098:	85 c0                	test   eax,eax
c000209a:	74 ef                	je     c000208b <validate+0x9>
c000209c:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000209f:	74 ea                	je     c000208b <validate+0x9>
c00020a1:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020a5:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020a9:	75 e0                	jne    c000208b <validate+0x9>
c00020ab:	83 ec 0c             	sub    esp,0xc
c00020ae:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020b2:	50                   	push   eax
c00020b3:	e8 76 f8 ff ff       	call   c000192e <disk_status>
c00020b8:	83 c4 10             	add    esp,0x10
c00020bb:	a8 01                	test   al,0x1
c00020bd:	75 cc                	jne    c000208b <validate+0x9>
c00020bf:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020c1:	31 c0                	xor    eax,eax
c00020c3:	89 0e                	mov    DWORD PTR [esi],ecx
c00020c5:	5a                   	pop    edx
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	c3                   	ret    

c00020c9 <sync_window>:
c00020c9:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020cd:	0f 84 85 00 00 00    	je     c0002158 <sync_window+0x8f>
c00020d3:	55                   	push   ebp
c00020d4:	8d 68 54             	lea    ebp,[eax+0x54]
c00020d7:	57                   	push   edi
c00020d8:	56                   	push   esi
c00020d9:	53                   	push   ebx
c00020da:	89 c3                	mov    ebx,eax
c00020dc:	83 ec 28             	sub    esp,0x28
c00020df:	6a 01                	push   0x1
c00020e1:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00020e4:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00020e7:	55                   	push   ebp
c00020e8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020ec:	50                   	push   eax
c00020ed:	e8 58 f8 ff ff       	call   c000194a <disk_write>
c00020f2:	83 c4 20             	add    esp,0x20
c00020f5:	ba 01 00 00 00       	mov    edx,0x1
c00020fa:	85 c0                	test   eax,eax
c00020fc:	75 50                	jne    c000214e <sync_window+0x85>
c00020fe:	31 ff                	xor    edi,edi
c0002100:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002103:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002107:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000210b:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000210e:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002111:	89 c6                	mov    esi,eax
c0002113:	89 d7                	mov    edi,edx
c0002115:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002118:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000211c:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000211f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002123:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002127:	73 23                	jae    c000214c <sync_window+0x83>
c0002129:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000212d:	75 1d                	jne    c000214c <sync_window+0x83>
c000212f:	83 ec 0c             	sub    esp,0xc
c0002132:	6a 01                	push   0x1
c0002134:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002138:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000213c:	52                   	push   edx
c000213d:	50                   	push   eax
c000213e:	55                   	push   ebp
c000213f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002143:	50                   	push   eax
c0002144:	e8 01 f8 ff ff       	call   c000194a <disk_write>
c0002149:	83 c4 20             	add    esp,0x20
c000214c:	31 d2                	xor    edx,edx
c000214e:	83 c4 1c             	add    esp,0x1c
c0002151:	89 d0                	mov    eax,edx
c0002153:	5b                   	pop    ebx
c0002154:	5e                   	pop    esi
c0002155:	5f                   	pop    edi
c0002156:	5d                   	pop    ebp
c0002157:	c3                   	ret    
c0002158:	31 d2                	xor    edx,edx
c000215a:	89 d0                	mov    eax,edx
c000215c:	c3                   	ret    

c000215d <move_window>:
c000215d:	56                   	push   esi
c000215e:	53                   	push   ebx
c000215f:	89 c3                	mov    ebx,eax
c0002161:	83 ec 14             	sub    esp,0x14
c0002164:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002167:	75 07                	jne    c0002170 <move_window+0x13>
c0002169:	31 f6                	xor    esi,esi
c000216b:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000216e:	74 59                	je     c00021c9 <move_window+0x6c>
c0002170:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002174:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002178:	89 d8                	mov    eax,ebx
c000217a:	e8 4a ff ff ff       	call   c00020c9 <sync_window>
c000217f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002183:	89 c6                	mov    esi,eax
c0002185:	85 c0                	test   eax,eax
c0002187:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000218b:	75 3c                	jne    c00021c9 <move_window+0x6c>
c000218d:	83 ec 0c             	sub    esp,0xc
c0002190:	8d 43 54             	lea    eax,[ebx+0x54]
c0002193:	6a 01                	push   0x1
c0002195:	51                   	push   ecx
c0002196:	52                   	push   edx
c0002197:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000219b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000219f:	50                   	push   eax
c00021a0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021a4:	50                   	push   eax
c00021a5:	e8 8a f7 ff ff       	call   c0001934 <disk_read>
c00021aa:	83 c4 20             	add    esp,0x20
c00021ad:	85 c0                	test   eax,eax
c00021af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021b7:	74 0a                	je     c00021c3 <move_window+0x66>
c00021b9:	83 ca ff             	or     edx,0xffffffff
c00021bc:	be 01 00 00 00       	mov    esi,0x1
c00021c1:	89 d1                	mov    ecx,edx
c00021c3:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021c6:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021c9:	89 f0                	mov    eax,esi
c00021cb:	83 c4 14             	add    esp,0x14
c00021ce:	5b                   	pop    ebx
c00021cf:	5e                   	pop    esi
c00021d0:	c3                   	ret    

c00021d1 <check_fs>:
c00021d1:	53                   	push   ebx
c00021d2:	89 c3                	mov    ebx,eax
c00021d4:	83 ec 08             	sub    esp,0x8
c00021d7:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021db:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021e2:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00021e9:	e8 6f ff ff ff       	call   c000215d <move_window>
c00021ee:	ba 04 00 00 00       	mov    edx,0x4
c00021f3:	85 c0                	test   eax,eax
c00021f5:	0f 85 89 00 00 00    	jne    c0002284 <check_fs+0xb3>
c00021fb:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002201:	e8 79 f7 ff ff       	call   c000197f <ld_word>
c0002206:	ba 03 00 00 00       	mov    edx,0x3
c000220b:	66 3d 55 aa          	cmp    ax,0xaa55
c000220f:	75 73                	jne    c0002284 <check_fs+0xb3>
c0002211:	ba 20 02 02 c0       	mov    edx,0xc0020220
c0002216:	8d 43 54             	lea    eax,[ebx+0x54]
c0002219:	b9 0b 00 00 00       	mov    ecx,0xb
c000221e:	e8 fb f7 ff ff       	call   c0001a1e <mem_cmp>
c0002223:	ba 01 00 00 00       	mov    edx,0x1
c0002228:	85 c0                	test   eax,eax
c000222a:	74 58                	je     c0002284 <check_fs+0xb3>
c000222c:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000222f:	8d 50 18             	lea    edx,[eax+0x18]
c0002232:	80 fa 01             	cmp    dl,0x1
c0002235:	76 09                	jbe    c0002240 <check_fs+0x6f>
c0002237:	ba 02 00 00 00       	mov    edx,0x2
c000223c:	3c eb                	cmp    al,0xeb
c000223e:	75 44                	jne    c0002284 <check_fs+0xb3>
c0002240:	ba 38 22 02 c0       	mov    edx,0xc0022238
c0002245:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000224b:	b9 03 00 00 00       	mov    ecx,0x3
c0002250:	e8 c9 f7 ff ff       	call   c0001a1e <mem_cmp>
c0002255:	31 d2                	xor    edx,edx
c0002257:	85 c0                	test   eax,eax
c0002259:	74 29                	je     c0002284 <check_fs+0xb3>
c000225b:	ba 2c 02 02 c0       	mov    edx,0xc002022c
c0002260:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002266:	b9 05 00 00 00       	mov    ecx,0x5
c000226b:	e8 ae f7 ff ff       	call   c0001a1e <mem_cmp>
c0002270:	31 d2                	xor    edx,edx
c0002272:	85 c0                	test   eax,eax
c0002274:	74 0e                	je     c0002284 <check_fs+0xb3>
c0002276:	31 d2                	xor    edx,edx
c0002278:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000227f:	0f 95 c2             	setne  dl
c0002282:	01 d2                	add    edx,edx
c0002284:	89 d0                	mov    eax,edx
c0002286:	83 c4 08             	add    esp,0x8
c0002289:	5b                   	pop    ebx
c000228a:	c3                   	ret    

c000228b <find_volume>:
c000228b:	55                   	push   ebp
c000228c:	31 c9                	xor    ecx,ecx
c000228e:	57                   	push   edi
c000228f:	56                   	push   esi
c0002290:	89 d6                	mov    esi,edx
c0002292:	53                   	push   ebx
c0002293:	31 d2                	xor    edx,edx
c0002295:	83 ec 3c             	sub    esp,0x3c
c0002298:	89 c3                	mov    ebx,eax
c000229a:	e8 32 ff ff ff       	call   c00021d1 <check_fs>
c000229f:	83 f8 02             	cmp    eax,0x2
c00022a2:	74 0e                	je     c00022b2 <find_volume+0x27>
c00022a4:	0f 87 5d 01 00 00    	ja     c0002407 <find_volume+0x17c>
c00022aa:	85 f6                	test   esi,esi
c00022ac:	0f 84 55 01 00 00    	je     c0002407 <find_volume+0x17c>
c00022b2:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022b9:	0f 85 dd 00 00 00    	jne    c000239c <find_volume+0x111>
c00022bf:	31 c9                	xor    ecx,ecx
c00022c1:	ba 01 00 00 00       	mov    edx,0x1
c00022c6:	89 d8                	mov    eax,ebx
c00022c8:	e8 90 fe ff ff       	call   c000215d <move_window>
c00022cd:	85 c0                	test   eax,eax
c00022cf:	74 0a                	je     c00022db <find_volume+0x50>
c00022d1:	b8 04 00 00 00       	mov    eax,0x4
c00022d6:	e9 2c 01 00 00       	jmp    c0002407 <find_volume+0x17c>
c00022db:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022de:	89 e8                	mov    eax,ebp
c00022e0:	e8 f6 fc ff ff       	call   c0001fdb <test_gpt_header>
c00022e5:	85 c0                	test   eax,eax
c00022e7:	75 0a                	jne    c00022f3 <find_volume+0x68>
c00022e9:	b8 03 00 00 00       	mov    eax,0x3
c00022ee:	e9 14 01 00 00       	jmp    c0002407 <find_volume+0x17c>
c00022f3:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00022f9:	e8 8e f6 ff ff       	call   c000198c <ld_dword>
c00022fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002302:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002308:	e8 97 f6 ff ff       	call   c00019a4 <ld_qword>
c000230d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002315:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002319:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000231d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002325:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002329:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000232d:	74 ba                	je     c00022e9 <find_volume+0x5e>
c000232f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002333:	31 c9                	xor    ecx,ecx
c0002335:	c1 e7 07             	shl    edi,0x7
c0002338:	89 d8                	mov    eax,ebx
c000233a:	89 fa                	mov    edx,edi
c000233c:	c1 ea 09             	shr    edx,0x9
c000233f:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002343:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002347:	e8 11 fe ff ff       	call   c000215d <move_window>
c000234c:	85 c0                	test   eax,eax
c000234e:	75 81                	jne    c00022d1 <find_volume+0x46>
c0002350:	81 e7 80 01 00 00    	and    edi,0x180
c0002356:	b9 10 00 00 00       	mov    ecx,0x10
c000235b:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000235f:	ba 10 02 02 c0       	mov    edx,0xc0020210
c0002364:	e8 b5 f6 ff ff       	call   c0001a1e <mem_cmp>
c0002369:	85 c0                	test   eax,eax
c000236b:	75 29                	jne    c0002396 <find_volume+0x10b>
c000236d:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002371:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002375:	e8 2a f6 ff ff       	call   c00019a4 <ld_qword>
c000237a:	89 d1                	mov    ecx,edx
c000237c:	89 c2                	mov    edx,eax
c000237e:	89 d8                	mov    eax,ebx
c0002380:	e8 4c fe ff ff       	call   c00021d1 <check_fs>
c0002385:	85 f6                	test   esi,esi
c0002387:	75 07                	jne    c0002390 <find_volume+0x105>
c0002389:	83 f8 01             	cmp    eax,0x1
c000238c:	77 08                	ja     c0002396 <find_volume+0x10b>
c000238e:	eb 77                	jmp    c0002407 <find_volume+0x17c>
c0002390:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002394:	74 71                	je     c0002407 <find_volume+0x17c>
c0002396:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000239a:	eb 89                	jmp    c0002325 <find_volume+0x9a>
c000239c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023a0:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023a6:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023b0:	89 cd                	mov    ebp,ecx
c00023b2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023b6:	89 f8                	mov    eax,edi
c00023b8:	83 c7 10             	add    edi,0x10
c00023bb:	e8 cc f5 ff ff       	call   c000198c <ld_dword>
c00023c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023c4:	89 01                	mov    DWORD PTR [ecx],eax
c00023c6:	83 c1 04             	add    ecx,0x4
c00023c9:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023cd:	75 e3                	jne    c00023b2 <find_volume+0x127>
c00023cf:	31 ff                	xor    edi,edi
c00023d1:	85 f6                	test   esi,esi
c00023d3:	74 03                	je     c00023d8 <find_volume+0x14d>
c00023d5:	8d 7e ff             	lea    edi,[esi-0x1]
c00023d8:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023dc:	85 d2                	test   edx,edx
c00023de:	74 14                	je     c00023f4 <find_volume+0x169>
c00023e0:	31 c9                	xor    ecx,ecx
c00023e2:	89 d8                	mov    eax,ebx
c00023e4:	e8 e8 fd ff ff       	call   c00021d1 <check_fs>
c00023e9:	83 f8 01             	cmp    eax,0x1
c00023ec:	76 19                	jbe    c0002407 <find_volume+0x17c>
c00023ee:	85 f6                	test   esi,esi
c00023f0:	74 0f                	je     c0002401 <find_volume+0x176>
c00023f2:	eb 13                	jmp    c0002407 <find_volume+0x17c>
c00023f4:	85 f6                	test   esi,esi
c00023f6:	0f 85 ed fe ff ff    	jne    c00022e9 <find_volume+0x5e>
c00023fc:	b8 03 00 00 00       	mov    eax,0x3
c0002401:	47                   	inc    edi
c0002402:	83 ff 03             	cmp    edi,0x3
c0002405:	76 d1                	jbe    c00023d8 <find_volume+0x14d>
c0002407:	83 c4 3c             	add    esp,0x3c
c000240a:	5b                   	pop    ebx
c000240b:	5e                   	pop    esi
c000240c:	5f                   	pop    edi
c000240d:	5d                   	pop    ebp
c000240e:	c3                   	ret    

c000240f <mount_volume>:
c000240f:	55                   	push   ebp
c0002410:	57                   	push   edi
c0002411:	89 cf                	mov    edi,ecx
c0002413:	56                   	push   esi
c0002414:	53                   	push   ebx
c0002415:	bb 0b 00 00 00       	mov    ebx,0xb
c000241a:	83 ec 3c             	sub    esp,0x3c
c000241d:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002423:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002427:	e8 35 fb ff ff       	call   c0001f61 <get_ldnumber>
c000242c:	85 c0                	test   eax,eax
c000242e:	0f 88 3a 05 00 00    	js     c000296e <mount_volume+0x55f>
c0002434:	8b 2c 85 60 31 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdcea0]
c000243b:	89 c6                	mov    esi,eax
c000243d:	bb 0c 00 00 00       	mov    ebx,0xc
c0002442:	85 ed                	test   ebp,ebp
c0002444:	0f 84 24 05 00 00    	je     c000296e <mount_volume+0x55f>
c000244a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000244e:	83 e7 fe             	and    edi,0xfffffffe
c0002451:	89 2a                	mov    DWORD PTR [edx],ebp
c0002453:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002457:	74 32                	je     c000248b <mount_volume+0x7c>
c0002459:	83 ec 0c             	sub    esp,0xc
c000245c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002460:	50                   	push   eax
c0002461:	e8 c8 f4 ff ff       	call   c000192e <disk_status>
c0002466:	83 c4 10             	add    esp,0x10
c0002469:	a8 01                	test   al,0x1
c000246b:	75 1e                	jne    c000248b <mount_volume+0x7c>
c000246d:	31 db                	xor    ebx,ebx
c000246f:	89 f9                	mov    ecx,edi
c0002471:	84 c9                	test   cl,cl
c0002473:	0f 84 f5 04 00 00    	je     c000296e <mount_volume+0x55f>
c0002479:	a8 04                	test   al,0x4
c000247b:	0f 84 ed 04 00 00    	je     c000296e <mount_volume+0x55f>
c0002481:	bb 0a 00 00 00       	mov    ebx,0xa
c0002486:	e9 e3 04 00 00       	jmp    c000296e <mount_volume+0x55f>
c000248b:	83 ec 0c             	sub    esp,0xc
c000248e:	89 f0                	mov    eax,esi
c0002490:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002494:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002497:	0f b6 f0             	movzx  esi,al
c000249a:	bb 03 00 00 00       	mov    ebx,0x3
c000249f:	56                   	push   esi
c00024a0:	e8 8c f4 ff ff       	call   c0001931 <disk_initialize>
c00024a5:	83 c4 10             	add    esp,0x10
c00024a8:	a8 01                	test   al,0x1
c00024aa:	0f 85 be 04 00 00    	jne    c000296e <mount_volume+0x55f>
c00024b0:	89 f9                	mov    ecx,edi
c00024b2:	84 c9                	test   cl,cl
c00024b4:	74 04                	je     c00024ba <mount_volume+0xab>
c00024b6:	a8 04                	test   al,0x4
c00024b8:	75 c7                	jne    c0002481 <mount_volume+0x72>
c00024ba:	31 d2                	xor    edx,edx
c00024bc:	89 e8                	mov    eax,ebp
c00024be:	e8 c8 fd ff ff       	call   c000228b <find_volume>
c00024c3:	83 f8 04             	cmp    eax,0x4
c00024c6:	75 0a                	jne    c00024d2 <mount_volume+0xc3>
c00024c8:	bb 01 00 00 00       	mov    ebx,0x1
c00024cd:	e9 9c 04 00 00       	jmp    c000296e <mount_volume+0x55f>
c00024d2:	83 f8 01             	cmp    eax,0x1
c00024d5:	76 0a                	jbe    c00024e1 <mount_volume+0xd2>
c00024d7:	bb 0d 00 00 00       	mov    ebx,0xd
c00024dc:	e9 8d 04 00 00       	jmp    c000296e <mount_volume+0x55f>
c00024e1:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00024e4:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00024e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00024ef:	75 17                	jne    c0002508 <mount_volume+0xf9>
c00024f1:	b8 0b 00 00 00       	mov    eax,0xb
c00024f6:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00024fb:	75 da                	jne    c00024d7 <mount_volume+0xc8>
c00024fd:	40                   	inc    eax
c00024fe:	83 f8 40             	cmp    eax,0x40
c0002501:	75 f3                	jne    c00024f6 <mount_volume+0xe7>
c0002503:	e9 5a 02 00 00       	jmp    c0002762 <mount_volume+0x353>
c0002508:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000250b:	e8 6f f4 ff ff       	call   c000197f <ld_word>
c0002510:	66 3d 00 02          	cmp    ax,0x200
c0002514:	75 c1                	jne    c00024d7 <mount_volume+0xc8>
c0002516:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002519:	e8 61 f4 ff ff       	call   c000197f <ld_word>
c000251e:	0f b7 c0             	movzx  eax,ax
c0002521:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002525:	85 c0                	test   eax,eax
c0002527:	75 0c                	jne    c0002535 <mount_volume+0x126>
c0002529:	8d 45 78             	lea    eax,[ebp+0x78]
c000252c:	e8 5b f4 ff ff       	call   c000198c <ld_dword>
c0002531:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002539:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000253c:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000253f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002543:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002546:	48                   	dec    eax
c0002547:	3c 01                	cmp    al,0x1
c0002549:	77 8c                	ja     c00024d7 <mount_volume+0xc8>
c000254b:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000254f:	89 c3                	mov    ebx,eax
c0002551:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002555:	66 85 c0             	test   ax,ax
c0002558:	0f 84 79 ff ff ff    	je     c00024d7 <mount_volume+0xc8>
c000255e:	8d 40 ff             	lea    eax,[eax-0x1]
c0002561:	85 d8                	test   eax,ebx
c0002563:	0f 85 6e ff ff ff    	jne    c00024d7 <mount_volume+0xc8>
c0002569:	8d 45 65             	lea    eax,[ebp+0x65]
c000256c:	e8 0e f4 ff ff       	call   c000197f <ld_word>
c0002571:	89 c7                	mov    edi,eax
c0002573:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002577:	a8 0f                	test   al,0xf
c0002579:	0f 85 58 ff ff ff    	jne    c00024d7 <mount_volume+0xc8>
c000257f:	8d 45 67             	lea    eax,[ebp+0x67]
c0002582:	e8 f8 f3 ff ff       	call   c000197f <ld_word>
c0002587:	0f b7 f0             	movzx  esi,ax
c000258a:	85 f6                	test   esi,esi
c000258c:	75 0a                	jne    c0002598 <mount_volume+0x189>
c000258e:	8d 45 74             	lea    eax,[ebp+0x74]
c0002591:	e8 f6 f3 ff ff       	call   c000198c <ld_dword>
c0002596:	89 c6                	mov    esi,eax
c0002598:	8d 45 62             	lea    eax,[ebp+0x62]
c000259b:	e8 df f3 ff ff       	call   c000197f <ld_word>
c00025a0:	66 85 c0             	test   ax,ax
c00025a3:	0f 84 2e ff ff ff    	je     c00024d7 <mount_volume+0xc8>
c00025a9:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025ae:	0f b7 c8             	movzx  ecx,ax
c00025b1:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025ba:	89 fa                	mov    edx,edi
c00025bc:	66 c1 ea 04          	shr    dx,0x4
c00025c0:	0f b7 d2             	movzx  edx,dx
c00025c3:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025c7:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025ce:	39 c6                	cmp    esi,eax
c00025d0:	0f 82 01 ff ff ff    	jb     c00024d7 <mount_volume+0xc8>
c00025d6:	29 c6                	sub    esi,eax
c00025d8:	31 d2                	xor    edx,edx
c00025da:	89 f0                	mov    eax,esi
c00025dc:	f7 f3                	div    ebx
c00025de:	39 de                	cmp    esi,ebx
c00025e0:	0f 82 f1 fe ff ff    	jb     c00024d7 <mount_volume+0xc8>
c00025e6:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025eb:	0f 87 e6 fe ff ff    	ja     c00024d7 <mount_volume+0xc8>
c00025f1:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00025f6:	0f 86 63 03 00 00    	jbe    c000295f <mount_volume+0x550>
c00025fc:	bb 03 00 00 00       	mov    ebx,0x3
c0002601:	8d 70 02             	lea    esi,[eax+0x2]
c0002604:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002608:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000260c:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000260f:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002612:	31 d2                	xor    edx,edx
c0002614:	89 c8                	mov    eax,ecx
c0002616:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002619:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000261d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002621:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002625:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002629:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000262c:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000262f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002633:	31 d2                	xor    edx,edx
c0002635:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002639:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000263d:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002640:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002643:	83 fb 03             	cmp    ebx,0x3
c0002646:	75 2b                	jne    c0002673 <mount_volume+0x264>
c0002648:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000264b:	e8 2f f3 ff ff       	call   c000197f <ld_word>
c0002650:	66 09 c7             	or     di,ax
c0002653:	0f 85 7e fe ff ff    	jne    c00024d7 <mount_volume+0xc8>
c0002659:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000265f:	c1 e6 02             	shl    esi,0x2
c0002662:	e8 25 f3 ff ff       	call   c000198c <ld_dword>
c0002667:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000266e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002671:	eb 30                	jmp    c00026a3 <mount_volume+0x294>
c0002673:	66 85 ff             	test   di,di
c0002676:	0f 84 5b fe ff ff    	je     c00024d7 <mount_volume+0xc8>
c000267c:	31 d2                	xor    edx,edx
c000267e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002682:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002686:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000268a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000268d:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002690:	83 fb 02             	cmp    ebx,0x2
c0002693:	75 04                	jne    c0002699 <mount_volume+0x28a>
c0002695:	01 f6                	add    esi,esi
c0002697:	eb 0a                	jmp    c00026a3 <mount_volume+0x294>
c0002699:	8d 04 76             	lea    eax,[esi+esi*2]
c000269c:	83 e6 01             	and    esi,0x1
c000269f:	d1 e8                	shr    eax,1
c00026a1:	01 c6                	add    esi,eax
c00026a3:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026a9:	c1 ee 09             	shr    esi,0x9
c00026ac:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026b0:	0f 87 21 fe ff ff    	ja     c00024d7 <mount_volume+0xc8>
c00026b6:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026bd:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026c4:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026c8:	83 fb 03             	cmp    ebx,0x3
c00026cb:	75 7a                	jne    c0002747 <mount_volume+0x338>
c00026cd:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026d3:	e8 a7 f2 ff ff       	call   c000197f <ld_word>
c00026d8:	66 48                	dec    ax
c00026da:	75 6b                	jne    c0002747 <mount_volume+0x338>
c00026dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026e4:	83 c2 01             	add    edx,0x1
c00026e7:	89 e8                	mov    eax,ebp
c00026e9:	83 d1 00             	adc    ecx,0x0
c00026ec:	e8 6c fa ff ff       	call   c000215d <move_window>
c00026f1:	85 c0                	test   eax,eax
c00026f3:	75 52                	jne    c0002747 <mount_volume+0x338>
c00026f5:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00026f9:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00026ff:	e8 7b f2 ff ff       	call   c000197f <ld_word>
c0002704:	66 3d 55 aa          	cmp    ax,0xaa55
c0002708:	75 3d                	jne    c0002747 <mount_volume+0x338>
c000270a:	8d 45 54             	lea    eax,[ebp+0x54]
c000270d:	e8 7a f2 ff ff       	call   c000198c <ld_dword>
c0002712:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002717:	75 2e                	jne    c0002747 <mount_volume+0x338>
c0002719:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000271f:	e8 68 f2 ff ff       	call   c000198c <ld_dword>
c0002724:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002729:	75 1c                	jne    c0002747 <mount_volume+0x338>
c000272b:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002731:	e8 56 f2 ff ff       	call   c000198c <ld_dword>
c0002736:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002739:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000273f:	e8 48 f2 ff ff       	call   c000198c <ld_dword>
c0002744:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002747:	66 a1 40 31 02 c0    	mov    ax,ds:0xc0023140
c000274d:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002750:	40                   	inc    eax
c0002751:	31 db                	xor    ebx,ebx
c0002753:	66 a3 40 31 02 c0    	mov    ds:0xc0023140,ax
c0002759:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000275d:	e9 0c 02 00 00       	jmp    c000296e <mount_volume+0x55f>
c0002762:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002768:	e8 12 f2 ff ff       	call   c000197f <ld_word>
c000276d:	66 3d 00 01          	cmp    ax,0x100
c0002771:	0f 85 60 fd ff ff    	jne    c00024d7 <mount_volume+0xc8>
c0002777:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000277e:	0f 85 53 fd ff ff    	jne    c00024d7 <mount_volume+0xc8>
c0002784:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000278a:	e8 15 f2 ff ff       	call   c00019a4 <ld_qword>
c000278f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002793:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002797:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000279d:	e8 ea f1 ff ff       	call   c000198c <ld_dword>
c00027a2:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027a5:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027ab:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ae:	fe c8                	dec    al
c00027b0:	0f 85 21 fd ff ff    	jne    c00024d7 <mount_volume+0xc8>
c00027b6:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027bd:	bb 01 00 00 00       	mov    ebx,0x1
c00027c2:	d3 e3                	shl    ebx,cl
c00027c4:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027c8:	66 85 db             	test   bx,bx
c00027cb:	0f 84 06 fd ff ff    	je     c00024d7 <mount_volume+0xc8>
c00027d1:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027d7:	e8 b0 f1 ff ff       	call   c000198c <ld_dword>
c00027dc:	89 c6                	mov    esi,eax
c00027de:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027e3:	0f 87 ee fc ff ff    	ja     c00024d7 <mount_volume+0xc8>
c00027e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027ed:	8d 40 02             	lea    eax,[eax+0x2]
c00027f0:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027f3:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00027f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027fa:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027fd:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002803:	e8 84 f1 ff ff       	call   c000198c <ld_dword>
c0002808:	31 d2                	xor    edx,edx
c000280a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000280e:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002812:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002816:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000281a:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281d:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002820:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002826:	e8 61 f1 ff ff       	call   c000198c <ld_dword>
c000282b:	31 d2                	xor    edx,edx
c000282d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002831:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002835:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002839:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000283c:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000283f:	0f b7 c3             	movzx  eax,bx
c0002842:	31 d2                	xor    edx,edx
c0002844:	0f af f0             	imul   esi,eax
c0002847:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000284b:	89 f0                	mov    eax,esi
c000284d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002851:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002855:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002859:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000285d:	39 c1                	cmp    ecx,eax
c000285f:	89 df                	mov    edi,ebx
c0002861:	19 d7                	sbb    edi,edx
c0002863:	0f 82 6e fc ff ff    	jb     c00024d7 <mount_volume+0xc8>
c0002869:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000286f:	31 db                	xor    ebx,ebx
c0002871:	e8 16 f1 ff ff       	call   c000198c <ld_dword>
c0002876:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000287d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002880:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002888:	85 db                	test   ebx,ebx
c000288a:	75 39                	jne    c00028c5 <mount_volume+0x4b6>
c000288c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002890:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002894:	0f 86 3d fc ff ff    	jbe    c00024d7 <mount_volume+0xc8>
c000289a:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000289d:	31 ff                	xor    edi,edi
c000289f:	89 e8                	mov    eax,ebp
c00028a1:	e8 72 f3 ff ff       	call   c0001c18 <clst2sect>
c00028a6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028aa:	01 c6                	add    esi,eax
c00028ac:	89 e8                	mov    eax,ebp
c00028ae:	11 d7                	adc    edi,edx
c00028b0:	89 f2                	mov    edx,esi
c00028b2:	89 f9                	mov    ecx,edi
c00028b4:	e8 a4 f8 ff ff       	call   c000215d <move_window>
c00028b9:	85 c0                	test   eax,eax
c00028bb:	0f 85 07 fc ff ff    	jne    c00024c8 <mount_volume+0xb9>
c00028c1:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028c5:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028ca:	74 0b                	je     c00028d7 <mount_volume+0x4c8>
c00028cc:	83 c3 20             	add    ebx,0x20
c00028cf:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028d5:	eb b1                	jmp    c0002888 <mount_volume+0x479>
c00028d7:	8d 75 54             	lea    esi,[ebp+0x54]
c00028da:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028de:	e8 a9 f0 ff ff       	call   c000198c <ld_dword>
c00028e3:	89 c3                	mov    ebx,eax
c00028e5:	83 f8 01             	cmp    eax,0x1
c00028e8:	0f 86 e9 fb ff ff    	jbe    c00024d7 <mount_volume+0xc8>
c00028ee:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00028f1:	0f 86 e0 fb ff ff    	jbe    c00024d7 <mount_volume+0xc8>
c00028f7:	8d 53 fe             	lea    edx,[ebx-0x2]
c00028fa:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00028fe:	0f af c2             	imul   eax,edx
c0002901:	31 d2                	xor    edx,edx
c0002903:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002906:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002909:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000290c:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c000290f:	31 c9                	xor    ecx,ecx
c0002911:	89 da                	mov    edx,ebx
c0002913:	89 e8                	mov    eax,ebp
c0002915:	c1 ea 07             	shr    edx,0x7
c0002918:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000291b:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c000291e:	e8 3a f8 ff ff       	call   c000215d <move_window>
c0002923:	85 c0                	test   eax,eax
c0002925:	0f 85 9d fb ff ff    	jne    c00024c8 <mount_volume+0xb9>
c000292b:	89 d8                	mov    eax,ebx
c000292d:	83 e0 7f             	and    eax,0x7f
c0002930:	8d 04 86             	lea    eax,[esi+eax*4]
c0002933:	e8 54 f0 ff ff       	call   c000198c <ld_dword>
c0002938:	83 f8 ff             	cmp    eax,0xffffffff
c000293b:	74 0a                	je     c0002947 <mount_volume+0x538>
c000293d:	43                   	inc    ebx
c000293e:	39 d8                	cmp    eax,ebx
c0002940:	74 cd                	je     c000290f <mount_volume+0x500>
c0002942:	e9 90 fb ff ff       	jmp    c00024d7 <mount_volume+0xc8>
c0002947:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000294e:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002955:	bb 04 00 00 00       	mov    ebx,0x4
c000295a:	e9 e8 fd ff ff       	jmp    c0002747 <mount_volume+0x338>
c000295f:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002964:	19 db                	sbb    ebx,ebx
c0002966:	83 c3 02             	add    ebx,0x2
c0002969:	e9 93 fc ff ff       	jmp    c0002601 <mount_volume+0x1f2>
c000296e:	83 c4 3c             	add    esp,0x3c
c0002971:	89 d8                	mov    eax,ebx
c0002973:	5b                   	pop    ebx
c0002974:	5e                   	pop    esi
c0002975:	5f                   	pop    edi
c0002976:	5d                   	pop    ebp
c0002977:	c3                   	ret    

c0002978 <find_bitmap>:
c0002978:	55                   	push   ebp
c0002979:	57                   	push   edi
c000297a:	89 c7                	mov    edi,eax
c000297c:	56                   	push   esi
c000297d:	8d 72 fe             	lea    esi,[edx-0x2]
c0002980:	53                   	push   ebx
c0002981:	83 ec 1c             	sub    esp,0x1c
c0002984:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002987:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000298b:	83 e8 02             	sub    eax,0x2
c000298e:	39 f0                	cmp    eax,esi
c0002990:	77 02                	ja     c0002994 <find_bitmap+0x1c>
c0002992:	31 f6                	xor    esi,esi
c0002994:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002998:	89 f3                	mov    ebx,esi
c000299a:	31 ed                	xor    ebp,ebp
c000299c:	31 c9                	xor    ecx,ecx
c000299e:	89 da                	mov    edx,ebx
c00029a0:	89 f8                	mov    eax,edi
c00029a2:	c1 ea 0c             	shr    edx,0xc
c00029a5:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029a8:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029ab:	e8 ad f7 ff ff       	call   c000215d <move_window>
c00029b0:	85 c0                	test   eax,eax
c00029b2:	75 68                	jne    c0002a1c <find_bitmap+0xa4>
c00029b4:	89 da                	mov    edx,ebx
c00029b6:	89 d9                	mov    ecx,ebx
c00029b8:	c1 ea 03             	shr    edx,0x3
c00029bb:	83 e1 07             	and    ecx,0x7
c00029be:	b8 01 00 00 00       	mov    eax,0x1
c00029c3:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029c9:	d3 e0                	shl    eax,cl
c00029cb:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029ce:	83 e9 02             	sub    ecx,0x2
c00029d1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029d5:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029d9:	43                   	inc    ebx
c00029da:	21 c1                	and    ecx,eax
c00029dc:	d1 e0                	shl    eax,1
c00029de:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029e2:	77 09                	ja     c00029ed <find_bitmap+0x75>
c00029e4:	31 db                	xor    ebx,ebx
c00029e6:	ba 00 02 00 00       	mov    edx,0x200
c00029eb:	31 c0                	xor    eax,eax
c00029ed:	84 c9                	test   cl,cl
c00029ef:	75 10                	jne    c0002a01 <find_bitmap+0x89>
c00029f1:	45                   	inc    ebp
c00029f2:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00029f6:	75 0f                	jne    c0002a07 <find_bitmap+0x8f>
c00029f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00029fc:	83 c0 02             	add    eax,0x2
c00029ff:	eb 22                	jmp    c0002a23 <find_bitmap+0xab>
c0002a01:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a05:	31 ed                	xor    ebp,ebp
c0002a07:	39 de                	cmp    esi,ebx
c0002a09:	74 16                	je     c0002a21 <find_bitmap+0xa9>
c0002a0b:	84 c0                	test   al,al
c0002a0d:	75 c6                	jne    c00029d5 <find_bitmap+0x5d>
c0002a0f:	42                   	inc    edx
c0002a10:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a16:	77 84                	ja     c000299c <find_bitmap+0x24>
c0002a18:	b0 01                	mov    al,0x1
c0002a1a:	eb b9                	jmp    c00029d5 <find_bitmap+0x5d>
c0002a1c:	83 c8 ff             	or     eax,0xffffffff
c0002a1f:	eb 02                	jmp    c0002a23 <find_bitmap+0xab>
c0002a21:	31 c0                	xor    eax,eax
c0002a23:	83 c4 1c             	add    esp,0x1c
c0002a26:	5b                   	pop    ebx
c0002a27:	5e                   	pop    esi
c0002a28:	5f                   	pop    edi
c0002a29:	5d                   	pop    ebp
c0002a2a:	c3                   	ret    

c0002a2b <change_bitmap>:
c0002a2b:	55                   	push   ebp
c0002a2c:	89 cd                	mov    ebp,ecx
c0002a2e:	57                   	push   edi
c0002a2f:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a32:	56                   	push   esi
c0002a33:	89 c7                	mov    edi,eax
c0002a35:	53                   	push   ebx
c0002a36:	89 c8                	mov    eax,ecx
c0002a38:	83 ec 1c             	sub    esp,0x1c
c0002a3b:	31 d2                	xor    edx,edx
c0002a3d:	89 ce                	mov    esi,ecx
c0002a3f:	c1 e8 0c             	shr    eax,0xc
c0002a42:	bb 01 00 00 00       	mov    ebx,0x1
c0002a47:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a4a:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a4d:	c1 ee 03             	shr    esi,0x3
c0002a50:	83 e1 07             	and    ecx,0x7
c0002a53:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a59:	d3 e3                	shl    ebx,cl
c0002a5b:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a5f:	89 c1                	mov    ecx,eax
c0002a61:	89 d3                	mov    ebx,edx
c0002a63:	83 c1 01             	add    ecx,0x1
c0002a66:	83 d3 00             	adc    ebx,0x0
c0002a69:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a6d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a71:	89 d1                	mov    ecx,edx
c0002a73:	89 c2                	mov    edx,eax
c0002a75:	89 f8                	mov    eax,edi
c0002a77:	e8 e1 f6 ff ff       	call   c000215d <move_window>
c0002a7c:	89 c1                	mov    ecx,eax
c0002a7e:	85 c0                	test   eax,eax
c0002a80:	75 48                	jne    c0002aca <change_bitmap+0x9f>
c0002a82:	31 d2                	xor    edx,edx
c0002a84:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002a88:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002a8c:	0f 95 c2             	setne  dl
c0002a8f:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002a93:	74 3c                	je     c0002ad1 <change_bitmap+0xa6>
c0002a95:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002a99:	4d                   	dec    ebp
c0002a9a:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002a9e:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002aa2:	74 32                	je     c0002ad6 <change_bitmap+0xab>
c0002aa4:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002aa8:	75 d8                	jne    c0002a82 <change_bitmap+0x57>
c0002aaa:	8d 46 01             	lea    eax,[esi+0x1]
c0002aad:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ab2:	89 c3                	mov    ebx,eax
c0002ab4:	31 f6                	xor    esi,esi
c0002ab6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002abe:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ac4:	74 99                	je     c0002a5f <change_bitmap+0x34>
c0002ac6:	89 de                	mov    esi,ebx
c0002ac8:	eb b8                	jmp    c0002a82 <change_bitmap+0x57>
c0002aca:	b9 01 00 00 00       	mov    ecx,0x1
c0002acf:	eb 05                	jmp    c0002ad6 <change_bitmap+0xab>
c0002ad1:	b9 02 00 00 00       	mov    ecx,0x2
c0002ad6:	83 c4 1c             	add    esp,0x1c
c0002ad9:	89 c8                	mov    eax,ecx
c0002adb:	5b                   	pop    ebx
c0002adc:	5e                   	pop    esi
c0002add:	5f                   	pop    edi
c0002ade:	5d                   	pop    ebp
c0002adf:	c3                   	ret    

c0002ae0 <put_fat>:
c0002ae0:	83 fa 01             	cmp    edx,0x1
c0002ae3:	0f 86 7b 01 00 00    	jbe    c0002c64 <put_fat+0x184>
c0002ae9:	55                   	push   ebp
c0002aea:	57                   	push   edi
c0002aeb:	89 cf                	mov    edi,ecx
c0002aed:	56                   	push   esi
c0002aee:	b9 02 00 00 00       	mov    ecx,0x2
c0002af3:	53                   	push   ebx
c0002af4:	89 c6                	mov    esi,eax
c0002af6:	83 ec 1c             	sub    esp,0x1c
c0002af9:	89 d3                	mov    ebx,edx
c0002afb:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002afe:	0f 86 68 01 00 00    	jbe    c0002c6c <put_fat+0x18c>
c0002b04:	8a 00                	mov    al,BYTE PTR [eax]
c0002b06:	3c 02                	cmp    al,0x2
c0002b08:	0f 84 c7 00 00 00    	je     c0002bd5 <put_fat+0xf5>
c0002b0e:	77 09                	ja     c0002b19 <put_fat+0x39>
c0002b10:	fe c8                	dec    al
c0002b12:	74 17                	je     c0002b2b <put_fat+0x4b>
c0002b14:	e9 53 01 00 00       	jmp    c0002c6c <put_fat+0x18c>
c0002b19:	b9 02 00 00 00       	mov    ecx,0x2
c0002b1e:	3c 04                	cmp    al,0x4
c0002b20:	0f 86 e1 00 00 00    	jbe    c0002c07 <put_fat+0x127>
c0002b26:	e9 41 01 00 00       	jmp    c0002c6c <put_fat+0x18c>
c0002b2b:	89 d5                	mov    ebp,edx
c0002b2d:	31 c9                	xor    ecx,ecx
c0002b2f:	d1 ed                	shr    ebp,1
c0002b31:	89 f0                	mov    eax,esi
c0002b33:	01 d5                	add    ebp,edx
c0002b35:	89 ea                	mov    edx,ebp
c0002b37:	c1 ea 09             	shr    edx,0x9
c0002b3a:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b3d:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b40:	e8 18 f6 ff ff       	call   c000215d <move_window>
c0002b45:	89 c1                	mov    ecx,eax
c0002b47:	85 c0                	test   eax,eax
c0002b49:	0f 85 1d 01 00 00    	jne    c0002c6c <put_fat+0x18c>
c0002b4f:	8d 46 54             	lea    eax,[esi+0x54]
c0002b52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b56:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b59:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b63:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b67:	89 f8                	mov    eax,edi
c0002b69:	83 e3 01             	and    ebx,0x1
c0002b6c:	74 0d                	je     c0002b7b <put_fat+0x9b>
c0002b6e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b71:	89 fa                	mov    edx,edi
c0002b73:	83 e0 0f             	and    eax,0xf
c0002b76:	c1 e2 04             	shl    edx,0x4
c0002b79:	09 d0                	or     eax,edx
c0002b7b:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b82:	31 c9                	xor    ecx,ecx
c0002b84:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b88:	c1 ea 09             	shr    edx,0x9
c0002b8b:	89 f0                	mov    eax,esi
c0002b8d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b90:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b93:	e8 c5 f5 ff ff       	call   c000215d <move_window>
c0002b98:	89 c1                	mov    ecx,eax
c0002b9a:	85 c0                	test   eax,eax
c0002b9c:	0f 85 ca 00 00 00    	jne    c0002c6c <put_fat+0x18c>
c0002ba2:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002ba6:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bac:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bb0:	85 db                	test   ebx,ebx
c0002bb2:	74 07                	je     c0002bbb <put_fat+0xdb>
c0002bb4:	c1 ef 04             	shr    edi,0x4
c0002bb7:	89 fa                	mov    edx,edi
c0002bb9:	eb 0e                	jmp    c0002bc9 <put_fat+0xe9>
c0002bbb:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bbe:	c1 ef 08             	shr    edi,0x8
c0002bc1:	83 e2 f0             	and    edx,0xfffffff0
c0002bc4:	83 e7 0f             	and    edi,0xf
c0002bc7:	09 fa                	or     edx,edi
c0002bc9:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002bcc:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bd0:	e9 97 00 00 00       	jmp    c0002c6c <put_fat+0x18c>
c0002bd5:	31 c9                	xor    ecx,ecx
c0002bd7:	c1 ea 08             	shr    edx,0x8
c0002bda:	89 f0                	mov    eax,esi
c0002bdc:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bdf:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002be2:	e8 76 f5 ff ff       	call   c000215d <move_window>
c0002be7:	89 c1                	mov    ecx,eax
c0002be9:	85 c0                	test   eax,eax
c0002beb:	75 7f                	jne    c0002c6c <put_fat+0x18c>
c0002bed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bf1:	01 db                	add    ebx,ebx
c0002bf3:	0f b7 d7             	movzx  edx,di
c0002bf6:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002bfc:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c00:	e8 ec ed ff ff       	call   c00019f1 <st_word>
c0002c05:	eb 53                	jmp    c0002c5a <put_fat+0x17a>
c0002c07:	31 c9                	xor    ecx,ecx
c0002c09:	c1 ea 07             	shr    edx,0x7
c0002c0c:	89 f0                	mov    eax,esi
c0002c0e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c11:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c14:	e8 44 f5 ff ff       	call   c000215d <move_window>
c0002c19:	89 c1                	mov    ecx,eax
c0002c1b:	85 c0                	test   eax,eax
c0002c1d:	75 4d                	jne    c0002c6c <put_fat+0x18c>
c0002c1f:	c1 e3 02             	shl    ebx,0x2
c0002c22:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c28:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c2b:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c2f:	74 1c                	je     c0002c4d <put_fat+0x16d>
c0002c31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c35:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c3b:	89 d8                	mov    eax,ebx
c0002c3d:	e8 4a ed ff ff       	call   c000198c <ld_dword>
c0002c42:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c46:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c4b:	09 c7                	or     edi,eax
c0002c4d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c51:	89 fa                	mov    edx,edi
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	e8 9b ed ff ff       	call   c00019f5 <st_dword>
c0002c5a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c5e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c62:	eb 08                	jmp    c0002c6c <put_fat+0x18c>
c0002c64:	b9 02 00 00 00       	mov    ecx,0x2
c0002c69:	89 c8                	mov    eax,ecx
c0002c6b:	c3                   	ret    
c0002c6c:	83 c4 1c             	add    esp,0x1c
c0002c6f:	89 c8                	mov    eax,ecx
c0002c71:	5b                   	pop    ebx
c0002c72:	5e                   	pop    esi
c0002c73:	5f                   	pop    edi
c0002c74:	5d                   	pop    ebp
c0002c75:	c3                   	ret    

c0002c76 <fill_last_frag>:
c0002c76:	57                   	push   edi
c0002c77:	89 cf                	mov    edi,ecx
c0002c79:	56                   	push   esi
c0002c7a:	89 d6                	mov    esi,edx
c0002c7c:	53                   	push   ebx
c0002c7d:	89 c3                	mov    ebx,eax
c0002c7f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c82:	85 c0                	test   eax,eax
c0002c84:	74 21                	je     c0002ca7 <fill_last_frag+0x31>
c0002c86:	89 f9                	mov    ecx,edi
c0002c88:	83 f8 01             	cmp    eax,0x1
c0002c8b:	76 05                	jbe    c0002c92 <fill_last_frag+0x1c>
c0002c8d:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002c90:	29 c1                	sub    ecx,eax
c0002c92:	8d 56 01             	lea    edx,[esi+0x1]
c0002c95:	29 c2                	sub    edx,eax
c0002c97:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002c99:	e8 42 fe ff ff       	call   c0002ae0 <put_fat>
c0002c9e:	85 c0                	test   eax,eax
c0002ca0:	75 05                	jne    c0002ca7 <fill_last_frag+0x31>
c0002ca2:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002ca5:	eb d8                	jmp    c0002c7f <fill_last_frag+0x9>
c0002ca7:	5b                   	pop    ebx
c0002ca8:	5e                   	pop    esi
c0002ca9:	5f                   	pop    edi
c0002caa:	c3                   	ret    

c0002cab <fill_first_frag>:
c0002cab:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002caf:	75 2d                	jne    c0002cde <fill_first_frag+0x33>
c0002cb1:	57                   	push   edi
c0002cb2:	56                   	push   esi
c0002cb3:	53                   	push   ebx
c0002cb4:	89 c3                	mov    ebx,eax
c0002cb6:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cb9:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002cbc:	01 d7                	add    edi,edx
c0002cbe:	39 fa                	cmp    edx,edi
c0002cc0:	74 14                	je     c0002cd6 <fill_first_frag+0x2b>
c0002cc2:	8d 72 01             	lea    esi,[edx+0x1]
c0002cc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cc7:	89 f1                	mov    ecx,esi
c0002cc9:	e8 12 fe ff ff       	call   c0002ae0 <put_fat>
c0002cce:	89 f2                	mov    edx,esi
c0002cd0:	85 c0                	test   eax,eax
c0002cd2:	74 ea                	je     c0002cbe <fill_first_frag+0x13>
c0002cd4:	eb 0b                	jmp    c0002ce1 <fill_first_frag+0x36>
c0002cd6:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002cda:	31 c0                	xor    eax,eax
c0002cdc:	eb 03                	jmp    c0002ce1 <fill_first_frag+0x36>
c0002cde:	31 c0                	xor    eax,eax
c0002ce0:	c3                   	ret    
c0002ce1:	5b                   	pop    ebx
c0002ce2:	5e                   	pop    esi
c0002ce3:	5f                   	pop    edi
c0002ce4:	c3                   	ret    

c0002ce5 <get_fat>:
c0002ce5:	83 fa 01             	cmp    edx,0x1
c0002ce8:	0f 86 db 01 00 00    	jbe    c0002ec9 <get_fat+0x1e4>
c0002cee:	55                   	push   ebp
c0002cef:	b9 01 00 00 00       	mov    ecx,0x1
c0002cf4:	57                   	push   edi
c0002cf5:	56                   	push   esi
c0002cf6:	53                   	push   ebx
c0002cf7:	83 ec 1c             	sub    esp,0x1c
c0002cfa:	8b 38                	mov    edi,DWORD PTR [eax]
c0002cfc:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002cff:	0f 86 cc 01 00 00    	jbe    c0002ed1 <get_fat+0x1ec>
c0002d05:	89 c3                	mov    ebx,eax
c0002d07:	89 d6                	mov    esi,edx
c0002d09:	8a 07                	mov    al,BYTE PTR [edi]
c0002d0b:	3c 02                	cmp    al,0x2
c0002d0d:	0f 84 99 00 00 00    	je     c0002dac <get_fat+0xc7>
c0002d13:	77 09                	ja     c0002d1e <get_fat+0x39>
c0002d15:	fe c8                	dec    al
c0002d17:	74 1a                	je     c0002d33 <get_fat+0x4e>
c0002d19:	e9 b3 01 00 00       	jmp    c0002ed1 <get_fat+0x1ec>
c0002d1e:	3c 03                	cmp    al,0x3
c0002d20:	0f 84 b5 00 00 00    	je     c0002ddb <get_fat+0xf6>
c0002d26:	3c 04                	cmp    al,0x4
c0002d28:	0f 84 e3 00 00 00    	je     c0002e11 <get_fat+0x12c>
c0002d2e:	e9 9e 01 00 00       	jmp    c0002ed1 <get_fat+0x1ec>
c0002d33:	89 d3                	mov    ebx,edx
c0002d35:	31 c9                	xor    ecx,ecx
c0002d37:	d1 eb                	shr    ebx,1
c0002d39:	89 f8                	mov    eax,edi
c0002d3b:	01 d3                	add    ebx,edx
c0002d3d:	89 da                	mov    edx,ebx
c0002d3f:	c1 ea 09             	shr    edx,0x9
c0002d42:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d45:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d48:	e8 10 f4 ff ff       	call   c000215d <move_window>
c0002d4d:	85 c0                	test   eax,eax
c0002d4f:	74 08                	je     c0002d59 <get_fat+0x74>
c0002d51:	83 c9 ff             	or     ecx,0xffffffff
c0002d54:	e9 78 01 00 00       	jmp    c0002ed1 <get_fat+0x1ec>
c0002d59:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d5c:	31 c9                	xor    ecx,ecx
c0002d5e:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d64:	89 ea                	mov    edx,ebp
c0002d66:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d6a:	c1 ea 09             	shr    edx,0x9
c0002d6d:	89 f8                	mov    eax,edi
c0002d6f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d72:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d75:	e8 e3 f3 ff ff       	call   c000215d <move_window>
c0002d7a:	85 c0                	test   eax,eax
c0002d7c:	75 d3                	jne    c0002d51 <get_fat+0x6c>
c0002d7e:	0f b6 c3             	movzx  eax,bl
c0002d81:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d87:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002d8c:	c1 e3 08             	shl    ebx,0x8
c0002d8f:	09 c3                	or     ebx,eax
c0002d91:	89 d9                	mov    ecx,ebx
c0002d93:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002d99:	83 e6 01             	and    esi,0x1
c0002d9c:	0f 84 2f 01 00 00    	je     c0002ed1 <get_fat+0x1ec>
c0002da2:	89 d9                	mov    ecx,ebx
c0002da4:	c1 e9 04             	shr    ecx,0x4
c0002da7:	e9 25 01 00 00       	jmp    c0002ed1 <get_fat+0x1ec>
c0002dac:	31 c9                	xor    ecx,ecx
c0002dae:	c1 ea 08             	shr    edx,0x8
c0002db1:	89 f8                	mov    eax,edi
c0002db3:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002db6:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002db9:	e8 9f f3 ff ff       	call   c000215d <move_window>
c0002dbe:	85 c0                	test   eax,eax
c0002dc0:	75 8f                	jne    c0002d51 <get_fat+0x6c>
c0002dc2:	01 f6                	add    esi,esi
c0002dc4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002dca:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002dce:	e8 ac eb ff ff       	call   c000197f <ld_word>
c0002dd3:	0f b7 c8             	movzx  ecx,ax
c0002dd6:	e9 f6 00 00 00       	jmp    c0002ed1 <get_fat+0x1ec>
c0002ddb:	31 c9                	xor    ecx,ecx
c0002ddd:	c1 ea 07             	shr    edx,0x7
c0002de0:	89 f8                	mov    eax,edi
c0002de2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002de5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002de8:	e8 70 f3 ff ff       	call   c000215d <move_window>
c0002ded:	85 c0                	test   eax,eax
c0002def:	0f 85 5c ff ff ff    	jne    c0002d51 <get_fat+0x6c>
c0002df5:	c1 e6 02             	shl    esi,0x2
c0002df8:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002dfe:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e02:	e8 85 eb ff ff       	call   c000198c <ld_dword>
c0002e07:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e0c:	e9 b4 00 00 00       	jmp    c0002ec5 <get_fat+0x1e0>
c0002e11:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e14:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e17:	89 d1                	mov    ecx,edx
c0002e19:	09 c1                	or     ecx,eax
c0002e1b:	74 06                	je     c0002e23 <get_fat+0x13e>
c0002e1d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e21:	75 0f                	jne    c0002e32 <get_fat+0x14d>
c0002e23:	b9 01 00 00 00       	mov    ecx,0x1
c0002e28:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e2c:	0f 85 9f 00 00 00    	jne    c0002ed1 <get_fat+0x1ec>
c0002e32:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e36:	89 f5                	mov    ebp,esi
c0002e38:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e3d:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e40:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e43:	80 f9 02             	cmp    cl,0x2
c0002e46:	75 35                	jne    c0002e7d <get_fat+0x198>
c0002e48:	83 c0 ff             	add    eax,0xffffffff
c0002e4b:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e50:	83 d2 ff             	adc    edx,0xffffffff
c0002e53:	31 db                	xor    ebx,ebx
c0002e55:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e59:	53                   	push   ebx
c0002e5a:	c1 ea 09             	shr    edx,0x9
c0002e5d:	51                   	push   ecx
c0002e5e:	52                   	push   edx
c0002e5f:	50                   	push   eax
c0002e60:	e8 8b c4 01 00       	call   c001f2f0 <__udivdi3>
c0002e65:	83 c4 10             	add    esp,0x10
c0002e68:	b9 01 00 00 00       	mov    ecx,0x1
c0002e6d:	39 c5                	cmp    ebp,eax
c0002e6f:	77 60                	ja     c0002ed1 <get_fat+0x1ec>
c0002e71:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e76:	74 59                	je     c0002ed1 <get_fat+0x1ec>
c0002e78:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e7b:	eb 54                	jmp    c0002ed1 <get_fat+0x1ec>
c0002e7d:	80 f9 03             	cmp    cl,0x3
c0002e80:	75 05                	jne    c0002e87 <get_fat+0x1a2>
c0002e82:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002e85:	77 f1                	ja     c0002e78 <get_fat+0x193>
c0002e87:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e8c:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002e90:	75 3f                	jne    c0002ed1 <get_fat+0x1ec>
c0002e92:	31 c9                	xor    ecx,ecx
c0002e94:	89 f2                	mov    edx,esi
c0002e96:	89 f8                	mov    eax,edi
c0002e98:	c1 ea 07             	shr    edx,0x7
c0002e9b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e9e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ea1:	e8 b7 f2 ff ff       	call   c000215d <move_window>
c0002ea6:	85 c0                	test   eax,eax
c0002ea8:	0f 85 a3 fe ff ff    	jne    c0002d51 <get_fat+0x6c>
c0002eae:	c1 e6 02             	shl    esi,0x2
c0002eb1:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002eb7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ebb:	e8 cc ea ff ff       	call   c000198c <ld_dword>
c0002ec0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ec5:	89 c1                	mov    ecx,eax
c0002ec7:	eb 08                	jmp    c0002ed1 <get_fat+0x1ec>
c0002ec9:	b9 01 00 00 00       	mov    ecx,0x1
c0002ece:	89 c8                	mov    eax,ecx
c0002ed0:	c3                   	ret    
c0002ed1:	83 c4 1c             	add    esp,0x1c
c0002ed4:	89 c8                	mov    eax,ecx
c0002ed6:	5b                   	pop    ebx
c0002ed7:	5e                   	pop    esi
c0002ed8:	5f                   	pop    edi
c0002ed9:	5d                   	pop    ebp
c0002eda:	c3                   	ret    

c0002edb <dir_sdi>:
c0002edb:	55                   	push   ebp
c0002edc:	57                   	push   edi
c0002edd:	56                   	push   esi
c0002ede:	53                   	push   ebx
c0002edf:	89 c3                	mov    ebx,eax
c0002ee1:	83 ec 1c             	sub    esp,0x1c
c0002ee4:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ee6:	31 c0                	xor    eax,eax
c0002ee8:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002eeb:	0f 94 c0             	sete   al
c0002eee:	48                   	dec    eax
c0002eef:	25 00 00 20 f0       	and    eax,0xf0200000
c0002ef4:	05 00 00 00 10       	add    eax,0x10000000
c0002ef9:	39 d0                	cmp    eax,edx
c0002efb:	77 0a                	ja     c0002f07 <dir_sdi+0x2c>
c0002efd:	b8 02 00 00 00       	mov    eax,0x2
c0002f02:	e9 c4 00 00 00       	jmp    c0002fcb <dir_sdi+0xf0>
c0002f07:	89 d6                	mov    esi,edx
c0002f09:	f6 c2 1f             	test   dl,0x1f
c0002f0c:	75 ef                	jne    c0002efd <dir_sdi+0x22>
c0002f0e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f11:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f14:	85 c9                	test   ecx,ecx
c0002f16:	75 2d                	jne    c0002f45 <dir_sdi+0x6a>
c0002f18:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f1b:	77 1b                	ja     c0002f38 <dir_sdi+0x5d>
c0002f1d:	89 f2                	mov    edx,esi
c0002f1f:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f23:	c1 ea 05             	shr    edx,0x5
c0002f26:	39 c2                	cmp    edx,eax
c0002f28:	73 d3                	jae    c0002efd <dir_sdi+0x22>
c0002f2a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f2d:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f30:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f33:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f36:	eb 4b                	jmp    c0002f83 <dir_sdi+0xa8>
c0002f38:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f3b:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f3f:	85 c0                	test   eax,eax
c0002f41:	74 da                	je     c0002f1d <dir_sdi+0x42>
c0002f43:	89 c1                	mov    ecx,eax
c0002f45:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f49:	c1 e5 09             	shl    ebp,0x9
c0002f4c:	89 ca                	mov    edx,ecx
c0002f4e:	39 ee                	cmp    esi,ebp
c0002f50:	72 1c                	jb     c0002f6e <dir_sdi+0x93>
c0002f52:	89 d8                	mov    eax,ebx
c0002f54:	e8 8c fd ff ff       	call   c0002ce5 <get_fat>
c0002f59:	89 c1                	mov    ecx,eax
c0002f5b:	83 f8 ff             	cmp    eax,0xffffffff
c0002f5e:	74 66                	je     c0002fc6 <dir_sdi+0xeb>
c0002f60:	83 f8 01             	cmp    eax,0x1
c0002f63:	76 98                	jbe    c0002efd <dir_sdi+0x22>
c0002f65:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f68:	76 93                	jbe    c0002efd <dir_sdi+0x22>
c0002f6a:	29 ee                	sub    esi,ebp
c0002f6c:	eb de                	jmp    c0002f4c <dir_sdi+0x71>
c0002f6e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f72:	89 f8                	mov    eax,edi
c0002f74:	e8 9f ec ff ff       	call   c0001c18 <clst2sect>
c0002f79:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f7d:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f80:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f83:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002f86:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002f89:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002f8c:	89 d1                	mov    ecx,edx
c0002f8e:	09 c1                	or     ecx,eax
c0002f90:	0f 84 67 ff ff ff    	je     c0002efd <dir_sdi+0x22>
c0002f96:	89 f1                	mov    ecx,esi
c0002f98:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002fa0:	c1 e9 09             	shr    ecx,0x9
c0002fa3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fa7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fab:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002faf:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fb2:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fb8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fbb:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fbf:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fc2:	31 c0                	xor    eax,eax
c0002fc4:	eb 05                	jmp    c0002fcb <dir_sdi+0xf0>
c0002fc6:	b8 01 00 00 00       	mov    eax,0x1
c0002fcb:	83 c4 1c             	add    esp,0x1c
c0002fce:	5b                   	pop    ebx
c0002fcf:	5e                   	pop    esi
c0002fd0:	5f                   	pop    edi
c0002fd1:	5d                   	pop    ebp
c0002fd2:	c3                   	ret    

c0002fd3 <create_chain>:
c0002fd3:	55                   	push   ebp
c0002fd4:	89 c5                	mov    ebp,eax
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	85 d2                	test   edx,edx
c0002fde:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002fe2:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fe4:	75 0e                	jne    c0002ff4 <create_chain+0x21>
c0002fe6:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0002fe9:	85 ff                	test   edi,edi
c0002feb:	74 39                	je     c0003026 <create_chain+0x53>
c0002fed:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0002ff0:	77 39                	ja     c000302b <create_chain+0x58>
c0002ff2:	eb 32                	jmp    c0003026 <create_chain+0x53>
c0002ff4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ff8:	e8 e8 fc ff ff       	call   c0002ce5 <get_fat>
c0002ffd:	89 c3                	mov    ebx,eax
c0002fff:	83 f8 01             	cmp    eax,0x1
c0003002:	77 0a                	ja     c000300e <create_chain+0x3b>
c0003004:	bb 01 00 00 00       	mov    ebx,0x1
c0003009:	e9 ba 01 00 00       	jmp    c00031c8 <create_chain+0x1f5>
c000300e:	83 f8 ff             	cmp    eax,0xffffffff
c0003011:	0f 84 62 01 00 00    	je     c0003179 <create_chain+0x1a6>
c0003017:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c000301a:	0f 87 a8 01 00 00    	ja     c00031c8 <create_chain+0x1f5>
c0003020:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003024:	eb 05                	jmp    c000302b <create_chain+0x58>
c0003026:	bf 01 00 00 00       	mov    edi,0x1
c000302b:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000302f:	75 07                	jne    c0003038 <create_chain+0x65>
c0003031:	31 db                	xor    ebx,ebx
c0003033:	e9 90 01 00 00       	jmp    c00031c8 <create_chain+0x1f5>
c0003038:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000303b:	75 74                	jne    c00030b1 <create_chain+0xde>
c000303d:	b9 01 00 00 00       	mov    ecx,0x1
c0003042:	89 fa                	mov    edx,edi
c0003044:	89 f0                	mov    eax,esi
c0003046:	e8 2d f9 ff ff       	call   c0002978 <find_bitmap>
c000304b:	89 c3                	mov    ebx,eax
c000304d:	8d 40 ff             	lea    eax,[eax-0x1]
c0003050:	83 f8 fd             	cmp    eax,0xfffffffd
c0003053:	0f 87 6f 01 00 00    	ja     c00031c8 <create_chain+0x1f5>
c0003059:	83 ec 0c             	sub    esp,0xc
c000305c:	b9 01 00 00 00       	mov    ecx,0x1
c0003061:	6a 01                	push   0x1
c0003063:	89 da                	mov    edx,ebx
c0003065:	89 f0                	mov    eax,esi
c0003067:	e8 bf f9 ff ff       	call   c0002a2b <change_bitmap>
c000306c:	83 c4 10             	add    esp,0x10
c000306f:	83 f8 02             	cmp    eax,0x2
c0003072:	74 90                	je     c0003004 <create_chain+0x31>
c0003074:	83 f8 01             	cmp    eax,0x1
c0003077:	0f 84 fc 00 00 00    	je     c0003179 <create_chain+0x1a6>
c000307d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003082:	75 09                	jne    c000308d <create_chain+0xba>
c0003084:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003088:	e9 0c 01 00 00       	jmp    c0003199 <create_chain+0x1c6>
c000308d:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003091:	0f 85 e7 00 00 00    	jne    c000317e <create_chain+0x1ab>
c0003097:	8d 57 01             	lea    edx,[edi+0x1]
c000309a:	39 da                	cmp    edx,ebx
c000309c:	0f 84 f7 00 00 00    	je     c0003199 <create_chain+0x1c6>
c00030a2:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030a5:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030a9:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030ac:	e9 cd 00 00 00       	jmp    c000317e <create_chain+0x1ab>
c00030b1:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030b5:	75 41                	jne    c00030f8 <create_chain+0x125>
c00030b7:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030ba:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030bd:	77 05                	ja     c00030c4 <create_chain+0xf1>
c00030bf:	bb 02 00 00 00       	mov    ebx,0x2
c00030c4:	89 da                	mov    edx,ebx
c00030c6:	89 e8                	mov    eax,ebp
c00030c8:	e8 18 fc ff ff       	call   c0002ce5 <get_fat>
c00030cd:	83 f8 01             	cmp    eax,0x1
c00030d0:	0f 84 2e ff ff ff    	je     c0003004 <create_chain+0x31>
c00030d6:	83 f8 ff             	cmp    eax,0xffffffff
c00030d9:	0f 84 9a 00 00 00    	je     c0003179 <create_chain+0x1a6>
c00030df:	85 c0                	test   eax,eax
c00030e1:	74 11                	je     c00030f4 <create_chain+0x121>
c00030e3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00030e6:	83 f8 01             	cmp    eax,0x1
c00030e9:	76 0d                	jbe    c00030f8 <create_chain+0x125>
c00030eb:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030ee:	76 08                	jbe    c00030f8 <create_chain+0x125>
c00030f0:	89 c7                	mov    edi,eax
c00030f2:	eb 04                	jmp    c00030f8 <create_chain+0x125>
c00030f4:	85 db                	test   ebx,ebx
c00030f6:	75 38                	jne    c0003130 <create_chain+0x15d>
c00030f8:	89 fb                	mov    ebx,edi
c00030fa:	43                   	inc    ebx
c00030fb:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030fe:	77 0e                	ja     c000310e <create_chain+0x13b>
c0003100:	83 ff 01             	cmp    edi,0x1
c0003103:	0f 86 28 ff ff ff    	jbe    c0003031 <create_chain+0x5e>
c0003109:	bb 02 00 00 00       	mov    ebx,0x2
c000310e:	89 da                	mov    edx,ebx
c0003110:	89 e8                	mov    eax,ebp
c0003112:	e8 ce fb ff ff       	call   c0002ce5 <get_fat>
c0003117:	85 c0                	test   eax,eax
c0003119:	74 15                	je     c0003130 <create_chain+0x15d>
c000311b:	83 f8 01             	cmp    eax,0x1
c000311e:	0f 84 e0 fe ff ff    	je     c0003004 <create_chain+0x31>
c0003124:	40                   	inc    eax
c0003125:	74 52                	je     c0003179 <create_chain+0x1a6>
c0003127:	39 fb                	cmp    ebx,edi
c0003129:	75 cf                	jne    c00030fa <create_chain+0x127>
c000312b:	e9 01 ff ff ff       	jmp    c0003031 <create_chain+0x5e>
c0003130:	83 c9 ff             	or     ecx,0xffffffff
c0003133:	89 da                	mov    edx,ebx
c0003135:	89 f0                	mov    eax,esi
c0003137:	e8 a4 f9 ff ff       	call   c0002ae0 <put_fat>
c000313c:	85 c0                	test   eax,eax
c000313e:	75 32                	jne    c0003172 <create_chain+0x19f>
c0003140:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003145:	74 11                	je     c0003158 <create_chain+0x185>
c0003147:	89 d9                	mov    ecx,ebx
c0003149:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000314d:	89 f0                	mov    eax,esi
c000314f:	e8 8c f9 ff ff       	call   c0002ae0 <put_fat>
c0003154:	85 c0                	test   eax,eax
c0003156:	75 1a                	jne    c0003172 <create_chain+0x19f>
c0003158:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000315b:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315e:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003161:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003164:	39 d0                	cmp    eax,edx
c0003166:	77 04                	ja     c000316c <create_chain+0x199>
c0003168:	48                   	dec    eax
c0003169:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000316c:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003170:	eb 56                	jmp    c00031c8 <create_chain+0x1f5>
c0003172:	48                   	dec    eax
c0003173:	0f 85 8b fe ff ff    	jne    c0003004 <create_chain+0x31>
c0003179:	83 cb ff             	or     ebx,0xffffffff
c000317c:	eb 4a                	jmp    c00031c8 <create_chain+0x1f5>
c000317e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003182:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003185:	41                   	inc    ecx
c0003186:	39 d9                	cmp    ecx,ebx
c0003188:	75 19                	jne    c00031a3 <create_chain+0x1d0>
c000318a:	b9 02 00 00 00       	mov    ecx,0x2
c000318f:	85 d2                	test   edx,edx
c0003191:	74 03                	je     c0003196 <create_chain+0x1c3>
c0003193:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003196:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003199:	85 c0                	test   eax,eax
c000319b:	0f 85 63 fe ff ff    	jne    c0003004 <create_chain+0x31>
c00031a1:	eb b5                	jmp    c0003158 <create_chain+0x185>
c00031a3:	85 d2                	test   edx,edx
c00031a5:	75 07                	jne    c00031ae <create_chain+0x1db>
c00031a7:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031ae:	89 d9                	mov    ecx,ebx
c00031b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031b4:	89 e8                	mov    eax,ebp
c00031b6:	e8 bb fa ff ff       	call   c0002c76 <fill_last_frag>
c00031bb:	85 c0                	test   eax,eax
c00031bd:	75 b3                	jne    c0003172 <create_chain+0x19f>
c00031bf:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031c6:	eb 90                	jmp    c0003158 <create_chain+0x185>
c00031c8:	83 c4 1c             	add    esp,0x1c
c00031cb:	89 d8                	mov    eax,ebx
c00031cd:	5b                   	pop    ebx
c00031ce:	5e                   	pop    esi
c00031cf:	5f                   	pop    edi
c00031d0:	5d                   	pop    ebp
c00031d1:	c3                   	ret    

c00031d2 <remove_chain>:
c00031d2:	55                   	push   ebp
c00031d3:	57                   	push   edi
c00031d4:	56                   	push   esi
c00031d5:	53                   	push   ebx
c00031d6:	83 ec 1c             	sub    esp,0x1c
c00031d9:	83 fa 01             	cmp    edx,0x1
c00031dc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031e0:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031e2:	77 0a                	ja     c00031ee <remove_chain+0x1c>
c00031e4:	b8 02 00 00 00       	mov    eax,0x2
c00031e9:	e9 24 01 00 00       	jmp    c0003312 <remove_chain+0x140>
c00031ee:	89 d6                	mov    esi,edx
c00031f0:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00031f3:	76 ef                	jbe    c00031e4 <remove_chain+0x12>
c00031f5:	89 c7                	mov    edi,eax
c00031f7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00031fc:	75 06                	jne    c0003204 <remove_chain+0x32>
c00031fe:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003202:	eb 54                	jmp    c0003258 <remove_chain+0x86>
c0003204:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003207:	75 06                	jne    c000320f <remove_chain+0x3d>
c0003209:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000320d:	74 ef                	je     c00031fe <remove_chain+0x2c>
c000320f:	83 c9 ff             	or     ecx,0xffffffff
c0003212:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003216:	89 d8                	mov    eax,ebx
c0003218:	e8 c3 f8 ff ff       	call   c0002ae0 <put_fat>
c000321d:	85 c0                	test   eax,eax
c000321f:	74 dd                	je     c00031fe <remove_chain+0x2c>
c0003221:	e9 ec 00 00 00       	jmp    c0003312 <remove_chain+0x140>
c0003226:	83 f8 01             	cmp    eax,0x1
c0003229:	74 b9                	je     c00031e4 <remove_chain+0x12>
c000322b:	83 f8 ff             	cmp    eax,0xffffffff
c000322e:	74 6d                	je     c000329d <remove_chain+0xcb>
c0003230:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003233:	75 6f                	jne    c00032a4 <remove_chain+0xd2>
c0003235:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003238:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000323b:	8d 51 fe             	lea    edx,[ecx-0x2]
c000323e:	39 d0                	cmp    eax,edx
c0003240:	73 08                	jae    c000324a <remove_chain+0x78>
c0003242:	40                   	inc    eax
c0003243:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003247:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000324a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000324d:	39 e9                	cmp    ecx,ebp
c000324f:	75 64                	jne    c00032b5 <remove_chain+0xe3>
c0003251:	89 ee                	mov    esi,ebp
c0003253:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003256:	76 0f                	jbe    c0003267 <remove_chain+0x95>
c0003258:	89 f2                	mov    edx,esi
c000325a:	89 f8                	mov    eax,edi
c000325c:	e8 84 fa ff ff       	call   c0002ce5 <get_fat>
c0003261:	89 c5                	mov    ebp,eax
c0003263:	85 c0                	test   eax,eax
c0003265:	75 bf                	jne    c0003226 <remove_chain+0x54>
c0003267:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000326a:	0f 85 a0 00 00 00    	jne    c0003310 <remove_chain+0x13e>
c0003270:	eb 6c                	jmp    c00032de <remove_chain+0x10c>
c0003272:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003275:	84 c0                	test   al,al
c0003277:	75 7d                	jne    c00032f6 <remove_chain+0x124>
c0003279:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000327c:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003280:	0f 84 86 00 00 00    	je     c000330c <remove_chain+0x13a>
c0003286:	89 da                	mov    edx,ebx
c0003288:	89 f8                	mov    eax,edi
c000328a:	e8 56 fa ff ff       	call   c0002ce5 <get_fat>
c000328f:	83 f8 01             	cmp    eax,0x1
c0003292:	0f 86 4c ff ff ff    	jbe    c00031e4 <remove_chain+0x12>
c0003298:	83 f8 ff             	cmp    eax,0xffffffff
c000329b:	75 4e                	jne    c00032eb <remove_chain+0x119>
c000329d:	b8 01 00 00 00       	mov    eax,0x1
c00032a2:	eb 6e                	jmp    c0003312 <remove_chain+0x140>
c00032a4:	31 c9                	xor    ecx,ecx
c00032a6:	89 f2                	mov    edx,esi
c00032a8:	89 d8                	mov    eax,ebx
c00032aa:	e8 31 f8 ff ff       	call   c0002ae0 <put_fat>
c00032af:	85 c0                	test   eax,eax
c00032b1:	74 82                	je     c0003235 <remove_chain+0x63>
c00032b3:	eb 5d                	jmp    c0003312 <remove_chain+0x140>
c00032b5:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032b8:	75 1b                	jne    c00032d5 <remove_chain+0x103>
c00032ba:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032be:	89 d8                	mov    eax,ebx
c00032c0:	83 ec 0c             	sub    esp,0xc
c00032c3:	6a 00                	push   0x0
c00032c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032c9:	e8 5d f7 ff ff       	call   c0002a2b <change_bitmap>
c00032ce:	83 c4 10             	add    esp,0x10
c00032d1:	85 c0                	test   eax,eax
c00032d3:	75 3d                	jne    c0003312 <remove_chain+0x140>
c00032d5:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032d9:	e9 73 ff ff ff       	jmp    c0003251 <remove_chain+0x7f>
c00032de:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032e3:	75 8d                	jne    c0003272 <remove_chain+0xa0>
c00032e5:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00032e9:	eb 25                	jmp    c0003310 <remove_chain+0x13e>
c00032eb:	8d 53 01             	lea    edx,[ebx+0x1]
c00032ee:	89 c3                	mov    ebx,eax
c00032f0:	39 c2                	cmp    edx,eax
c00032f2:	74 88                	je     c000327c <remove_chain+0xaa>
c00032f4:	eb 1a                	jmp    c0003310 <remove_chain+0x13e>
c00032f6:	3c 03                	cmp    al,0x3
c00032f8:	75 16                	jne    c0003310 <remove_chain+0x13e>
c00032fa:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00032fd:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003301:	77 0d                	ja     c0003310 <remove_chain+0x13e>
c0003303:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003306:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000330a:	72 04                	jb     c0003310 <remove_chain+0x13e>
c000330c:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c0003310:	31 c0                	xor    eax,eax
c0003312:	83 c4 1c             	add    esp,0x1c
c0003315:	5b                   	pop    ebx
c0003316:	5e                   	pop    esi
c0003317:	5f                   	pop    edi
c0003318:	5d                   	pop    ebp
c0003319:	c3                   	ret    

c000331a <dir_clear>:
c000331a:	55                   	push   ebp
c000331b:	57                   	push   edi
c000331c:	56                   	push   esi
c000331d:	89 c6                	mov    esi,eax
c000331f:	53                   	push   ebx
c0003320:	83 ec 1c             	sub    esp,0x1c
c0003323:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003327:	e8 9d ed ff ff       	call   c00020c9 <sync_window>
c000332c:	85 c0                	test   eax,eax
c000332e:	0f 85 de 00 00 00    	jne    c0003412 <dir_clear+0xf8>
c0003334:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003338:	89 f0                	mov    eax,esi
c000333a:	8d 6e 54             	lea    ebp,[esi+0x54]
c000333d:	e8 d6 e8 ff ff       	call   c0001c18 <clst2sect>
c0003342:	b9 00 02 00 00       	mov    ecx,0x200
c0003347:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000334b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000334f:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003352:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003355:	89 e8                	mov    eax,ebp
c0003357:	31 d2                	xor    edx,edx
c0003359:	e8 b5 e6 ff ff       	call   c0001a13 <mem_set>
c000335e:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003362:	c1 e3 09             	shl    ebx,0x9
c0003365:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000336b:	76 1f                	jbe    c000338c <dir_clear+0x72>
c000336d:	bb 00 80 00 00       	mov    ebx,0x8000
c0003372:	eb 18                	jmp    c000338c <dir_clear+0x72>
c0003374:	83 ec 0c             	sub    esp,0xc
c0003377:	53                   	push   ebx
c0003378:	e8 6b 50 00 00       	call   c00083e8 <ff_memalloc>
c000337d:	83 c4 10             	add    esp,0x10
c0003380:	89 c7                	mov    edi,eax
c0003382:	85 c0                	test   eax,eax
c0003384:	0f 85 8f 00 00 00    	jne    c0003419 <dir_clear+0xff>
c000338a:	d1 eb                	shr    ebx,1
c000338c:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003392:	77 e0                	ja     c0003374 <dir_clear+0x5a>
c0003394:	31 db                	xor    ebx,ebx
c0003396:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000339a:	39 d8                	cmp    eax,ebx
c000339c:	76 66                	jbe    c0003404 <dir_clear+0xea>
c000339e:	83 ec 0c             	sub    esp,0xc
c00033a1:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033a5:	6a 01                	push   0x1
c00033a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033af:	55                   	push   ebp
c00033b0:	50                   	push   eax
c00033b1:	e8 94 e5 ff ff       	call   c000194a <disk_write>
c00033b6:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033bb:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033c0:	83 c4 20             	add    esp,0x20
c00033c3:	85 c0                	test   eax,eax
c00033c5:	75 3d                	jne    c0003404 <dir_clear+0xea>
c00033c7:	43                   	inc    ebx
c00033c8:	eb cc                	jmp    c0003396 <dir_clear+0x7c>
c00033ca:	83 ec 0c             	sub    esp,0xc
c00033cd:	31 d2                	xor    edx,edx
c00033cf:	55                   	push   ebp
c00033d0:	89 d8                	mov    eax,ebx
c00033d2:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033d6:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033da:	52                   	push   edx
c00033db:	50                   	push   eax
c00033dc:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033e0:	57                   	push   edi
c00033e1:	50                   	push   eax
c00033e2:	e8 63 e5 ff ff       	call   c000194a <disk_write>
c00033e7:	83 c4 20             	add    esp,0x20
c00033ea:	85 c0                	test   eax,eax
c00033ec:	75 0a                	jne    c00033f8 <dir_clear+0xde>
c00033ee:	01 eb                	add    ebx,ebp
c00033f0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033f4:	39 d8                	cmp    eax,ebx
c00033f6:	77 d2                	ja     c00033ca <dir_clear+0xb0>
c00033f8:	83 ec 0c             	sub    esp,0xc
c00033fb:	57                   	push   edi
c00033fc:	e8 ff 4f 00 00       	call   c0008400 <ff_memfree>
c0003401:	83 c4 10             	add    esp,0x10
c0003404:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003408:	39 d8                	cmp    eax,ebx
c000340a:	0f 95 c0             	setne  al
c000340d:	0f b6 c0             	movzx  eax,al
c0003410:	eb 19                	jmp    c000342b <dir_clear+0x111>
c0003412:	b8 01 00 00 00       	mov    eax,0x1
c0003417:	eb 12                	jmp    c000342b <dir_clear+0x111>
c0003419:	89 d9                	mov    ecx,ebx
c000341b:	31 d2                	xor    edx,edx
c000341d:	c1 eb 09             	shr    ebx,0x9
c0003420:	e8 ee e5 ff ff       	call   c0001a13 <mem_set>
c0003425:	89 dd                	mov    ebp,ebx
c0003427:	31 db                	xor    ebx,ebx
c0003429:	eb c5                	jmp    c00033f0 <dir_clear+0xd6>
c000342b:	83 c4 1c             	add    esp,0x1c
c000342e:	5b                   	pop    ebx
c000342f:	5e                   	pop    esi
c0003430:	5f                   	pop    edi
c0003431:	5d                   	pop    ebp
c0003432:	c3                   	ret    

c0003433 <dir_next>:
c0003433:	55                   	push   ebp
c0003434:	57                   	push   edi
c0003435:	56                   	push   esi
c0003436:	53                   	push   ebx
c0003437:	89 c3                	mov    ebx,eax
c0003439:	83 ec 1c             	sub    esp,0x1c
c000343c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000343e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003442:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003445:	8d 78 20             	lea    edi,[eax+0x20]
c0003448:	31 c0                	xor    eax,eax
c000344a:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000344e:	0f 94 c0             	sete   al
c0003451:	48                   	dec    eax
c0003452:	25 00 00 20 f0       	and    eax,0xf0200000
c0003457:	05 00 00 00 10       	add    eax,0x10000000
c000345c:	39 f8                	cmp    eax,edi
c000345e:	77 0e                	ja     c000346e <dir_next+0x3b>
c0003460:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003467:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000346e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003471:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003474:	b8 04 00 00 00       	mov    eax,0x4
c0003479:	89 ce                	mov    esi,ecx
c000347b:	09 d6                	or     esi,edx
c000347d:	0f 84 da 00 00 00    	je     c000355d <dir_next+0x12a>
c0003483:	89 f8                	mov    eax,edi
c0003485:	25 ff 01 00 00       	and    eax,0x1ff
c000348a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000348e:	0f 85 b9 00 00 00    	jne    c000354d <dir_next+0x11a>
c0003494:	83 c2 01             	add    edx,0x1
c0003497:	83 d1 00             	adc    ecx,0x0
c000349a:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000349d:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034a0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034a3:	85 d2                	test   edx,edx
c00034a5:	75 29                	jne    c00034d0 <dir_next+0x9d>
c00034a7:	89 fa                	mov    edx,edi
c00034a9:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034ad:	c1 ea 05             	shr    edx,0x5
c00034b0:	39 c2                	cmp    edx,eax
c00034b2:	0f 82 95 00 00 00    	jb     c000354d <dir_next+0x11a>
c00034b8:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034bf:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034c6:	b8 04 00 00 00       	mov    eax,0x4
c00034cb:	e9 8d 00 00 00       	jmp    c000355d <dir_next+0x12a>
c00034d0:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034d4:	89 f9                	mov    ecx,edi
c00034d6:	48                   	dec    eax
c00034d7:	c1 e9 09             	shr    ecx,0x9
c00034da:	85 c8                	test   eax,ecx
c00034dc:	75 6f                	jne    c000354d <dir_next+0x11a>
c00034de:	89 d8                	mov    eax,ebx
c00034e0:	e8 00 f8 ff ff       	call   c0002ce5 <get_fat>
c00034e5:	89 c6                	mov    esi,eax
c00034e7:	83 f8 01             	cmp    eax,0x1
c00034ea:	77 07                	ja     c00034f3 <dir_next+0xc0>
c00034ec:	b8 02 00 00 00       	mov    eax,0x2
c00034f1:	eb 6a                	jmp    c000355d <dir_next+0x12a>
c00034f3:	83 f8 ff             	cmp    eax,0xffffffff
c00034f6:	75 07                	jne    c00034ff <dir_next+0xcc>
c00034f8:	b8 01 00 00 00       	mov    eax,0x1
c00034fd:	eb 5e                	jmp    c000355d <dir_next+0x12a>
c00034ff:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003502:	77 37                	ja     c000353b <dir_next+0x108>
c0003504:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003509:	74 ad                	je     c00034b8 <dir_next+0x85>
c000350b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000350e:	89 d8                	mov    eax,ebx
c0003510:	e8 be fa ff ff       	call   c0002fd3 <create_chain>
c0003515:	89 c6                	mov    esi,eax
c0003517:	b8 07 00 00 00       	mov    eax,0x7
c000351c:	85 f6                	test   esi,esi
c000351e:	74 3d                	je     c000355d <dir_next+0x12a>
c0003520:	83 fe 01             	cmp    esi,0x1
c0003523:	74 c7                	je     c00034ec <dir_next+0xb9>
c0003525:	83 fe ff             	cmp    esi,0xffffffff
c0003528:	74 ce                	je     c00034f8 <dir_next+0xc5>
c000352a:	89 f2                	mov    edx,esi
c000352c:	89 e8                	mov    eax,ebp
c000352e:	e8 e7 fd ff ff       	call   c000331a <dir_clear>
c0003533:	85 c0                	test   eax,eax
c0003535:	75 c1                	jne    c00034f8 <dir_next+0xc5>
c0003537:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000353b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000353e:	89 f2                	mov    edx,esi
c0003540:	89 e8                	mov    eax,ebp
c0003542:	e8 d1 e6 ff ff       	call   c0001c18 <clst2sect>
c0003547:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000354a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000354d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003551:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003554:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003558:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000355b:	31 c0                	xor    eax,eax
c000355d:	83 c4 1c             	add    esp,0x1c
c0003560:	5b                   	pop    ebx
c0003561:	5e                   	pop    esi
c0003562:	5f                   	pop    edi
c0003563:	5d                   	pop    ebp
c0003564:	c3                   	ret    

c0003565 <load_xdir>:
c0003565:	55                   	push   ebp
c0003566:	57                   	push   edi
c0003567:	56                   	push   esi
c0003568:	89 c6                	mov    esi,eax
c000356a:	53                   	push   ebx
c000356b:	83 ec 1c             	sub    esp,0x1c
c000356e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003570:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003573:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003576:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003579:	e8 df eb ff ff       	call   c000215d <move_window>
c000357e:	89 c3                	mov    ebx,eax
c0003580:	85 c0                	test   eax,eax
c0003582:	0f 85 0c 01 00 00    	jne    c0003694 <load_xdir+0x12f>
c0003588:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000358b:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000358e:	0f 85 fb 00 00 00    	jne    c000368f <load_xdir+0x12a>
c0003594:	89 f8                	mov    eax,edi
c0003596:	b9 20 00 00 00       	mov    ecx,0x20
c000359b:	e8 5e e4 ff ff       	call   c00019fe <mem_cpy>
c00035a0:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035a4:	40                   	inc    eax
c00035a5:	c1 e0 05             	shl    eax,0x5
c00035a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035ac:	83 e8 60             	sub    eax,0x60
c00035af:	3d 00 02 00 00       	cmp    eax,0x200
c00035b4:	0f 87 d5 00 00 00    	ja     c000368f <load_xdir+0x12a>
c00035ba:	31 d2                	xor    edx,edx
c00035bc:	89 f0                	mov    eax,esi
c00035be:	e8 70 fe ff ff       	call   c0003433 <dir_next>
c00035c3:	89 c3                	mov    ebx,eax
c00035c5:	83 f8 04             	cmp    eax,0x4
c00035c8:	0f 84 c1 00 00 00    	je     c000368f <load_xdir+0x12a>
c00035ce:	85 c0                	test   eax,eax
c00035d0:	0f 85 be 00 00 00    	jne    c0003694 <load_xdir+0x12f>
c00035d6:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035d9:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035dc:	8b 06                	mov    eax,DWORD PTR [esi]
c00035de:	e8 7a eb ff ff       	call   c000215d <move_window>
c00035e3:	89 c3                	mov    ebx,eax
c00035e5:	85 c0                	test   eax,eax
c00035e7:	0f 85 a7 00 00 00    	jne    c0003694 <load_xdir+0x12f>
c00035ed:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035f0:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00035f3:	0f 85 96 00 00 00    	jne    c000368f <load_xdir+0x12a>
c00035f9:	8d 47 20             	lea    eax,[edi+0x20]
c00035fc:	b9 20 00 00 00       	mov    ecx,0x20
c0003601:	e8 f8 e3 ff ff       	call   c00019fe <mem_cpy>
c0003606:	31 d2                	xor    edx,edx
c0003608:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000360c:	b9 0f 00 00 00       	mov    ecx,0xf
c0003611:	83 c0 2c             	add    eax,0x2c
c0003614:	f7 f1                	div    ecx
c0003616:	c1 e0 05             	shl    eax,0x5
c0003619:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000361d:	77 70                	ja     c000368f <load_xdir+0x12a>
c000361f:	bd 40 00 00 00       	mov    ebp,0x40
c0003624:	31 d2                	xor    edx,edx
c0003626:	89 f0                	mov    eax,esi
c0003628:	e8 06 fe ff ff       	call   c0003433 <dir_next>
c000362d:	89 c3                	mov    ebx,eax
c000362f:	83 f8 04             	cmp    eax,0x4
c0003632:	74 5b                	je     c000368f <load_xdir+0x12a>
c0003634:	85 c0                	test   eax,eax
c0003636:	75 5c                	jne    c0003694 <load_xdir+0x12f>
c0003638:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000363b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000363e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003640:	e8 18 eb ff ff       	call   c000215d <move_window>
c0003645:	89 c3                	mov    ebx,eax
c0003647:	85 c0                	test   eax,eax
c0003649:	75 49                	jne    c0003694 <load_xdir+0x12f>
c000364b:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000364e:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003651:	75 3c                	jne    c000368f <load_xdir+0x12a>
c0003653:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003659:	77 0d                	ja     c0003668 <load_xdir+0x103>
c000365b:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000365e:	b9 20 00 00 00       	mov    ecx,0x20
c0003663:	e8 96 e3 ff ff       	call   c00019fe <mem_cpy>
c0003668:	83 c5 20             	add    ebp,0x20
c000366b:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000366f:	77 b3                	ja     c0003624 <load_xdir+0xbf>
c0003671:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003677:	77 1b                	ja     c0003694 <load_xdir+0x12f>
c0003679:	89 f8                	mov    eax,edi
c000367b:	e8 cd e7 ff ff       	call   c0001e4d <xdir_sum>
c0003680:	89 c1                	mov    ecx,eax
c0003682:	8d 47 02             	lea    eax,[edi+0x2]
c0003685:	e8 f5 e2 ff ff       	call   c000197f <ld_word>
c000368a:	66 39 c1             	cmp    cx,ax
c000368d:	74 05                	je     c0003694 <load_xdir+0x12f>
c000368f:	bb 02 00 00 00       	mov    ebx,0x2
c0003694:	83 c4 1c             	add    esp,0x1c
c0003697:	89 d8                	mov    eax,ebx
c0003699:	5b                   	pop    ebx
c000369a:	5e                   	pop    esi
c000369b:	5f                   	pop    edi
c000369c:	5d                   	pop    ebp
c000369d:	c3                   	ret    

c000369e <load_obj_xdir>:
c000369e:	53                   	push   ebx
c000369f:	89 c3                	mov    ebx,eax
c00036a1:	83 ec 08             	sub    esp,0x8
c00036a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00036a6:	89 03                	mov    DWORD PTR [ebx],eax
c00036a8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036ae:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036b1:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036b4:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036b7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036be:	30 c0                	xor    al,al
c00036c0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036c7:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036ca:	89 d8                	mov    eax,ebx
c00036cc:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036cf:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036d2:	e8 04 f8 ff ff       	call   c0002edb <dir_sdi>
c00036d7:	85 c0                	test   eax,eax
c00036d9:	75 0b                	jne    c00036e6 <load_obj_xdir+0x48>
c00036db:	89 d8                	mov    eax,ebx
c00036dd:	83 c4 08             	add    esp,0x8
c00036e0:	5b                   	pop    ebx
c00036e1:	e9 7f fe ff ff       	jmp    c0003565 <load_xdir>
c00036e6:	83 c4 08             	add    esp,0x8
c00036e9:	5b                   	pop    ebx
c00036ea:	c3                   	ret    

c00036eb <dir_read>:
c00036eb:	55                   	push   ebp
c00036ec:	bd 04 00 00 00       	mov    ebp,0x4
c00036f1:	57                   	push   edi
c00036f2:	56                   	push   esi
c00036f3:	be ff ff ff ff       	mov    esi,0xffffffff
c00036f8:	53                   	push   ebx
c00036f9:	89 c3                	mov    ebx,eax
c00036fb:	83 ec 1c             	sub    esp,0x1c
c00036fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003702:	8b 38                	mov    edi,DWORD PTR [eax]
c0003704:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003709:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000370c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000370f:	89 c8                	mov    eax,ecx
c0003711:	09 d0                	or     eax,edx
c0003713:	0f 84 25 01 00 00    	je     c000383e <dir_read+0x153>
c0003719:	89 f8                	mov    eax,edi
c000371b:	e8 3d ea ff ff       	call   c000215d <move_window>
c0003720:	89 c5                	mov    ebp,eax
c0003722:	85 c0                	test   eax,eax
c0003724:	0f 85 23 01 00 00    	jne    c000384d <dir_read+0x162>
c000372a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000372d:	8a 0a                	mov    cl,BYTE PTR [edx]
c000372f:	84 c9                	test   cl,cl
c0003731:	0f 84 11 01 00 00    	je     c0003848 <dir_read+0x15d>
c0003737:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000373a:	75 48                	jne    c0003784 <dir_read+0x99>
c000373c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003741:	74 10                	je     c0003753 <dir_read+0x68>
c0003743:	80 f9 83             	cmp    cl,0x83
c0003746:	0f 85 dd 00 00 00    	jne    c0003829 <dir_read+0x13e>
c000374c:	31 ed                	xor    ebp,ebp
c000374e:	e9 08 01 00 00       	jmp    c000385b <dir_read+0x170>
c0003753:	80 f9 85             	cmp    cl,0x85
c0003756:	0f 85 cd 00 00 00    	jne    c0003829 <dir_read+0x13e>
c000375c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000375f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003762:	89 d8                	mov    eax,ebx
c0003764:	e8 fc fd ff ff       	call   c0003565 <load_xdir>
c0003769:	89 c5                	mov    ebp,eax
c000376b:	85 c0                	test   eax,eax
c000376d:	0f 85 da 00 00 00    	jne    c000384d <dir_read+0x162>
c0003773:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003776:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003779:	83 e0 3f             	and    eax,0x3f
c000377c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000377f:	e9 d7 00 00 00       	jmp    c000385b <dir_read+0x170>
c0003784:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003787:	83 e0 3f             	and    eax,0x3f
c000378a:	80 f9 2e             	cmp    cl,0x2e
c000378d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003791:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003794:	0f 84 8a 00 00 00    	je     c0003824 <dir_read+0x139>
c000379a:	80 f9 e5             	cmp    cl,0xe5
c000379d:	0f 84 81 00 00 00    	je     c0003824 <dir_read+0x139>
c00037a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037a7:	83 e0 1f             	and    eax,0x1f
c00037aa:	83 f8 08             	cmp    eax,0x8
c00037ad:	0f 94 c0             	sete   al
c00037b0:	0f b6 c0             	movzx  eax,al
c00037b3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037b7:	75 6b                	jne    c0003824 <dir_read+0x139>
c00037b9:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037be:	75 44                	jne    c0003804 <dir_read+0x119>
c00037c0:	f6 c1 40             	test   cl,0x40
c00037c3:	74 12                	je     c00037d7 <dir_read+0xec>
c00037c5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037c8:	83 e1 bf             	and    ecx,0xffffffbf
c00037cb:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037cf:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037d2:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037d5:	eb 06                	jmp    c00037dd <dir_read+0xf2>
c00037d7:	89 f0                	mov    eax,esi
c00037d9:	38 c8                	cmp    al,cl
c00037db:	75 47                	jne    c0003824 <dir_read+0x139>
c00037dd:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037e1:	be ff ff ff ff       	mov    esi,0xffffffff
c00037e6:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00037e9:	75 3e                	jne    c0003829 <dir_read+0x13e>
c00037eb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00037ef:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00037f2:	e8 8a e4 ff ff       	call   c0001c81 <pick_lfn>
c00037f7:	85 c0                	test   eax,eax
c00037f9:	74 2e                	je     c0003829 <dir_read+0x13e>
c00037fb:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00037ff:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003802:	eb 25                	jmp    c0003829 <dir_read+0x13e>
c0003804:	89 f0                	mov    eax,esi
c0003806:	84 c0                	test   al,al
c0003808:	75 11                	jne    c000381b <dir_read+0x130>
c000380a:	89 d0                	mov    eax,edx
c000380c:	e8 2a e6 ff ff       	call   c0001e3b <sum_sfn>
c0003811:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003815:	0f 84 31 ff ff ff    	je     c000374c <dir_read+0x61>
c000381b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003822:	eb 37                	jmp    c000385b <dir_read+0x170>
c0003824:	be ff ff ff ff       	mov    esi,0xffffffff
c0003829:	31 d2                	xor    edx,edx
c000382b:	89 d8                	mov    eax,ebx
c000382d:	e8 01 fc ff ff       	call   c0003433 <dir_next>
c0003832:	89 c5                	mov    ebp,eax
c0003834:	85 c0                	test   eax,eax
c0003836:	0f 84 cd fe ff ff    	je     c0003709 <dir_read+0x1e>
c000383c:	eb 0f                	jmp    c000384d <dir_read+0x162>
c000383e:	85 ed                	test   ebp,ebp
c0003840:	0f 84 06 ff ff ff    	je     c000374c <dir_read+0x61>
c0003846:	eb 05                	jmp    c000384d <dir_read+0x162>
c0003848:	bd 04 00 00 00       	mov    ebp,0x4
c000384d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003854:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000385b:	83 c4 1c             	add    esp,0x1c
c000385e:	89 e8                	mov    eax,ebp
c0003860:	5b                   	pop    ebx
c0003861:	5e                   	pop    esi
c0003862:	5f                   	pop    edi
c0003863:	5d                   	pop    ebp
c0003864:	c3                   	ret    

c0003865 <dir_alloc>:
c0003865:	55                   	push   ebp
c0003866:	89 d5                	mov    ebp,edx
c0003868:	57                   	push   edi
c0003869:	31 d2                	xor    edx,edx
c000386b:	56                   	push   esi
c000386c:	53                   	push   ebx
c000386d:	89 c3                	mov    ebx,eax
c000386f:	83 ec 0c             	sub    esp,0xc
c0003872:	8b 38                	mov    edi,DWORD PTR [eax]
c0003874:	e8 62 f6 ff ff       	call   c0002edb <dir_sdi>
c0003879:	85 c0                	test   eax,eax
c000387b:	75 4e                	jne    c00038cb <dir_alloc+0x66>
c000387d:	31 f6                	xor    esi,esi
c000387f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003882:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003885:	89 f8                	mov    eax,edi
c0003887:	e8 d1 e8 ff ff       	call   c000215d <move_window>
c000388c:	85 c0                	test   eax,eax
c000388e:	75 3b                	jne    c00038cb <dir_alloc+0x66>
c0003890:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003893:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003896:	8a 12                	mov    dl,BYTE PTR [edx]
c0003898:	75 07                	jne    c00038a1 <dir_alloc+0x3c>
c000389a:	f7 d2                	not    edx
c000389c:	c0 ea 07             	shr    dl,0x7
c000389f:	eb 0d                	jmp    c00038ae <dir_alloc+0x49>
c00038a1:	84 d2                	test   dl,dl
c00038a3:	0f 94 c1             	sete   cl
c00038a6:	80 fa e5             	cmp    dl,0xe5
c00038a9:	0f 94 c2             	sete   dl
c00038ac:	09 ca                	or     edx,ecx
c00038ae:	84 d2                	test   dl,dl
c00038b0:	74 07                	je     c00038b9 <dir_alloc+0x54>
c00038b2:	46                   	inc    esi
c00038b3:	39 ee                	cmp    esi,ebp
c00038b5:	75 04                	jne    c00038bb <dir_alloc+0x56>
c00038b7:	eb 1c                	jmp    c00038d5 <dir_alloc+0x70>
c00038b9:	31 f6                	xor    esi,esi
c00038bb:	ba 01 00 00 00       	mov    edx,0x1
c00038c0:	89 d8                	mov    eax,ebx
c00038c2:	e8 6c fb ff ff       	call   c0003433 <dir_next>
c00038c7:	85 c0                	test   eax,eax
c00038c9:	74 b4                	je     c000387f <dir_alloc+0x1a>
c00038cb:	83 f8 04             	cmp    eax,0x4
c00038ce:	75 05                	jne    c00038d5 <dir_alloc+0x70>
c00038d0:	b8 07 00 00 00       	mov    eax,0x7
c00038d5:	83 c4 0c             	add    esp,0xc
c00038d8:	5b                   	pop    ebx
c00038d9:	5e                   	pop    esi
c00038da:	5f                   	pop    edi
c00038db:	5d                   	pop    ebp
c00038dc:	c3                   	ret    

c00038dd <store_xdir>:
c00038dd:	55                   	push   ebp
c00038de:	57                   	push   edi
c00038df:	89 c7                	mov    edi,eax
c00038e1:	56                   	push   esi
c00038e2:	53                   	push   ebx
c00038e3:	83 ec 0c             	sub    esp,0xc
c00038e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038e8:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00038eb:	89 e8                	mov    eax,ebp
c00038ed:	e8 5b e5 ff ff       	call   c0001e4d <xdir_sum>
c00038f2:	0f b7 d0             	movzx  edx,ax
c00038f5:	8d 45 02             	lea    eax,[ebp+0x2]
c00038f8:	e8 f4 e0 ff ff       	call   c00019f1 <st_word>
c00038fd:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003901:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003904:	89 f8                	mov    eax,edi
c0003906:	e8 d0 f5 ff ff       	call   c0002edb <dir_sdi>
c000390b:	89 c6                	mov    esi,eax
c000390d:	85 f6                	test   esi,esi
c000390f:	75 3d                	jne    c000394e <store_xdir+0x71>
c0003911:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003914:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003917:	8b 07                	mov    eax,DWORD PTR [edi]
c0003919:	e8 3f e8 ff ff       	call   c000215d <move_window>
c000391e:	89 c6                	mov    esi,eax
c0003920:	85 c0                	test   eax,eax
c0003922:	75 2a                	jne    c000394e <store_xdir+0x71>
c0003924:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003927:	b9 20 00 00 00       	mov    ecx,0x20
c000392c:	89 ea                	mov    edx,ebp
c000392e:	e8 cb e0 ff ff       	call   c00019fe <mem_cpy>
c0003933:	8b 07                	mov    eax,DWORD PTR [edi]
c0003935:	85 db                	test   ebx,ebx
c0003937:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000393b:	74 11                	je     c000394e <store_xdir+0x71>
c000393d:	31 d2                	xor    edx,edx
c000393f:	89 f8                	mov    eax,edi
c0003941:	83 c5 20             	add    ebp,0x20
c0003944:	e8 ea fa ff ff       	call   c0003433 <dir_next>
c0003949:	4b                   	dec    ebx
c000394a:	89 c6                	mov    esi,eax
c000394c:	eb bf                	jmp    c000390d <store_xdir+0x30>
c000394e:	89 f0                	mov    eax,esi
c0003950:	83 fe 02             	cmp    esi,0x2
c0003953:	76 05                	jbe    c000395a <store_xdir+0x7d>
c0003955:	b8 02 00 00 00       	mov    eax,0x2
c000395a:	83 c4 0c             	add    esp,0xc
c000395d:	5b                   	pop    ebx
c000395e:	5e                   	pop    esi
c000395f:	5f                   	pop    edi
c0003960:	5d                   	pop    ebp
c0003961:	c3                   	ret    

c0003962 <dir_remove>:
c0003962:	57                   	push   edi
c0003963:	56                   	push   esi
c0003964:	53                   	push   ebx
c0003965:	89 c3                	mov    ebx,eax
c0003967:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000396a:	8b 30                	mov    esi,DWORD PTR [eax]
c000396c:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c000396f:	83 fa ff             	cmp    edx,0xffffffff
c0003972:	74 09                	je     c000397d <dir_remove+0x1b>
c0003974:	e8 62 f5 ff ff       	call   c0002edb <dir_sdi>
c0003979:	85 c0                	test   eax,eax
c000397b:	75 41                	jne    c00039be <dir_remove+0x5c>
c000397d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003980:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003983:	89 f0                	mov    eax,esi
c0003985:	e8 d3 e7 ff ff       	call   c000215d <move_window>
c000398a:	85 c0                	test   eax,eax
c000398c:	75 26                	jne    c00039b4 <dir_remove+0x52>
c000398e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003991:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003994:	75 05                	jne    c000399b <dir_remove+0x39>
c0003996:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003999:	eb 03                	jmp    c000399e <dir_remove+0x3c>
c000399b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000399e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039a2:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039a5:	73 17                	jae    c00039be <dir_remove+0x5c>
c00039a7:	31 d2                	xor    edx,edx
c00039a9:	89 d8                	mov    eax,ebx
c00039ab:	e8 83 fa ff ff       	call   c0003433 <dir_next>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 c9                	je     c000397d <dir_remove+0x1b>
c00039b4:	83 f8 04             	cmp    eax,0x4
c00039b7:	75 05                	jne    c00039be <dir_remove+0x5c>
c00039b9:	b8 02 00 00 00       	mov    eax,0x2
c00039be:	5b                   	pop    ebx
c00039bf:	5e                   	pop    esi
c00039c0:	5f                   	pop    edi
c00039c1:	c3                   	ret    

c00039c2 <create_name>:
c00039c2:	55                   	push   ebp
c00039c3:	89 d5                	mov    ebp,edx
c00039c5:	57                   	push   edi
c00039c6:	89 c7                	mov    edi,eax
c00039c8:	56                   	push   esi
c00039c9:	31 f6                	xor    esi,esi
c00039cb:	53                   	push   ebx
c00039cc:	83 ec 3c             	sub    esp,0x3c
c00039cf:	8b 02                	mov    eax,DWORD PTR [edx]
c00039d1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039d5:	8b 07                	mov    eax,DWORD PTR [edi]
c00039d7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00039de:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039e2:	e8 72 e0 ff ff       	call   c0001a59 <tchar2uni>
c00039e7:	89 c3                	mov    ebx,eax
c00039e9:	83 f8 ff             	cmp    eax,0xffffffff
c00039ec:	75 0a                	jne    c00039f8 <create_name+0x36>
c00039ee:	b8 06 00 00 00       	mov    eax,0x6
c00039f3:	e9 9e 02 00 00       	jmp    c0003c96 <create_name+0x2d4>
c00039f8:	3d ff ff 00 00       	cmp    eax,0xffff
c00039fd:	76 0c                	jbe    c0003a0b <create_name+0x49>
c00039ff:	c1 e8 10             	shr    eax,0x10
c0003a02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a06:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a0a:	46                   	inc    esi
c0003a0b:	66 83 fb 1f          	cmp    bx,0x1f
c0003a0f:	76 4f                	jbe    c0003a60 <create_name+0x9e>
c0003a11:	66 83 fb 5c          	cmp    bx,0x5c
c0003a15:	74 35                	je     c0003a4c <create_name+0x8a>
c0003a17:	66 83 fb 2f          	cmp    bx,0x2f
c0003a1b:	74 2f                	je     c0003a4c <create_name+0x8a>
c0003a1d:	66 83 fb 7f          	cmp    bx,0x7f
c0003a21:	77 11                	ja     c0003a34 <create_name+0x72>
c0003a23:	0f b7 d3             	movzx  edx,bx
c0003a26:	b8 32 02 02 c0       	mov    eax,0xc0020232
c0003a2b:	e8 11 e0 ff ff       	call   c0001a41 <chk_chr>
c0003a30:	85 c0                	test   eax,eax
c0003a32:	75 ba                	jne    c00039ee <create_name+0x2c>
c0003a34:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a3a:	77 b2                	ja     c00039ee <create_name+0x2c>
c0003a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a40:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a44:	46                   	inc    esi
c0003a45:	eb 97                	jmp    c00039de <create_name+0x1c>
c0003a47:	40                   	inc    eax
c0003a48:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a50:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a52:	80 fa 2f             	cmp    dl,0x2f
c0003a55:	74 f0                	je     c0003a47 <create_name+0x85>
c0003a57:	80 fa 5c             	cmp    dl,0x5c
c0003a5a:	74 eb                	je     c0003a47 <create_name+0x85>
c0003a5c:	31 db                	xor    ebx,ebx
c0003a5e:	eb 02                	jmp    c0003a62 <create_name+0xa0>
c0003a60:	b3 04                	mov    bl,0x4
c0003a62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a66:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a69:	85 f6                	test   esi,esi
c0003a6b:	74 18                	je     c0003a85 <create_name+0xc3>
c0003a6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a71:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a76:	66 83 f8 20          	cmp    ax,0x20
c0003a7a:	74 06                	je     c0003a82 <create_name+0xc0>
c0003a7c:	66 83 f8 2e          	cmp    ax,0x2e
c0003a80:	75 03                	jne    c0003a85 <create_name+0xc3>
c0003a82:	4e                   	dec    esi
c0003a83:	eb e4                	jmp    c0003a69 <create_name+0xa7>
c0003a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a89:	31 ed                	xor    ebp,ebp
c0003a8b:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003a91:	85 f6                	test   esi,esi
c0003a93:	0f 84 55 ff ff ff    	je     c00039ee <create_name+0x2c>
c0003a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a9d:	8d 55 01             	lea    edx,[ebp+0x1]
c0003aa0:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003aa4:	66 83 f8 20          	cmp    ax,0x20
c0003aa8:	75 04                	jne    c0003aae <create_name+0xec>
c0003aaa:	89 d5                	mov    ebp,edx
c0003aac:	eb eb                	jmp    c0003a99 <create_name+0xd7>
c0003aae:	85 ed                	test   ebp,ebp
c0003ab0:	75 06                	jne    c0003ab8 <create_name+0xf6>
c0003ab2:	66 83 f8 2e          	cmp    ax,0x2e
c0003ab6:	75 08                	jne    c0003ac0 <create_name+0xfe>
c0003ab8:	83 cb 03             	or     ebx,0x3
c0003abb:	eb 03                	jmp    c0003ac0 <create_name+0xfe>
c0003abd:	4e                   	dec    esi
c0003abe:	74 0c                	je     c0003acc <create_name+0x10a>
c0003ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ac4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003aca:	75 f1                	jne    c0003abd <create_name+0xfb>
c0003acc:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ad1:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ad4:	ba 20 00 00 00       	mov    edx,0x20
c0003ad9:	e8 35 df ff ff       	call   c0001a13 <mem_set>
c0003ade:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003ae6:	31 c9                	xor    ecx,ecx
c0003ae8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003aed:	8d 45 01             	lea    eax,[ebp+0x1]
c0003af0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003af8:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003afc:	66 85 ed             	test   bp,bp
c0003aff:	0f 84 30 01 00 00    	je     c0003c35 <create_name+0x273>
c0003b05:	66 83 fd 20          	cmp    bp,0x20
c0003b09:	74 10                	je     c0003b1b <create_name+0x159>
c0003b0b:	66 83 fd 2e          	cmp    bp,0x2e
c0003b0f:	75 13                	jne    c0003b24 <create_name+0x162>
c0003b11:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b15:	0f 84 6b 01 00 00    	je     c0003c86 <create_name+0x2c4>
c0003b1b:	83 cb 03             	or     ebx,0x3
c0003b1e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003b22:	eb c9                	jmp    c0003aed <create_name+0x12b>
c0003b24:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003b28:	73 0b                	jae    c0003b35 <create_name+0x173>
c0003b2a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b2e:	75 47                	jne    c0003b77 <create_name+0x1b5>
c0003b30:	e9 51 01 00 00       	jmp    c0003c86 <create_name+0x2c4>
c0003b35:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003b3a:	75 10                	jne    c0003b4c <create_name+0x18a>
c0003b3c:	83 cb 03             	or     ebx,0x3
c0003b3f:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b47:	e9 e9 00 00 00       	jmp    c0003c35 <create_name+0x273>
c0003b4c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b50:	74 0d                	je     c0003b5f <create_name+0x19d>
c0003b52:	83 cb 03             	or     ebx,0x3
c0003b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b59:	0f 87 d6 00 00 00    	ja     c0003c35 <create_name+0x273>
c0003b5f:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003b64:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003b68:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b70:	b9 08 00 00 00       	mov    ecx,0x8
c0003b75:	eb a7                	jmp    c0003b1e <create_name+0x15c>
c0003b77:	66 83 fd 7f          	cmp    bp,0x7f
c0003b7b:	76 68                	jbe    c0003be5 <create_name+0x223>
c0003b7d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b81:	88 da                	mov    dl,bl
c0003b83:	83 ca 02             	or     edx,0x2
c0003b86:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003b8a:	50                   	push   eax
c0003b8b:	50                   	push   eax
c0003b8c:	68 b5 01 00 00       	push   0x1b5
c0003b91:	55                   	push   ebp
c0003b92:	e8 81 48 00 00       	call   c0008418 <ff_uni2oem>
c0003b97:	83 c4 10             	add    esp,0x10
c0003b9a:	89 c5                	mov    ebp,eax
c0003b9c:	a8 80                	test   al,0x80
c0003b9e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003ba2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ba6:	74 0c                	je     c0003bb4 <create_name+0x1f2>
c0003ba8:	83 e5 7f             	and    ebp,0x7f
c0003bab:	0f b6 ad 80 01 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdfe80]
c0003bb2:	eb 2a                	jmp    c0003bde <create_name+0x21c>
c0003bb4:	66 3d ff 00          	cmp    ax,0xff
c0003bb8:	76 24                	jbe    c0003bde <create_name+0x21c>
c0003bba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bbe:	48                   	dec    eax
c0003bbf:	39 c8                	cmp    eax,ecx
c0003bc1:	77 0c                	ja     c0003bcf <create_name+0x20d>
c0003bc3:	83 cb 03             	or     ebx,0x3
c0003bc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003bca:	e9 4f ff ff ff       	jmp    c0003b1e <create_name+0x15c>
c0003bcf:	89 e8                	mov    eax,ebp
c0003bd1:	88 d3                	mov    bl,dl
c0003bd3:	66 c1 e8 08          	shr    ax,0x8
c0003bd7:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bdb:	41                   	inc    ecx
c0003bdc:	eb 4b                	jmp    c0003c29 <create_name+0x267>
c0003bde:	88 d3                	mov    bl,dl
c0003be0:	66 85 ed             	test   bp,bp
c0003be3:	74 19                	je     c0003bfe <create_name+0x23c>
c0003be5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003be9:	0f b7 d5             	movzx  edx,bp
c0003bec:	b8 3b 02 02 c0       	mov    eax,0xc002023b
c0003bf1:	e8 4b de ff ff       	call   c0001a41 <chk_chr>
c0003bf6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003bfa:	85 c0                	test   eax,eax
c0003bfc:	74 0a                	je     c0003c08 <create_name+0x246>
c0003bfe:	83 cb 03             	or     ebx,0x3
c0003c01:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c06:	eb 21                	jmp    c0003c29 <create_name+0x267>
c0003c08:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c0b:	66 83 f8 19          	cmp    ax,0x19
c0003c0f:	77 07                	ja     c0003c18 <create_name+0x256>
c0003c11:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c16:	eb 11                	jmp    c0003c29 <create_name+0x267>
c0003c18:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c1b:	66 83 f8 19          	cmp    ax,0x19
c0003c1f:	77 08                	ja     c0003c29 <create_name+0x267>
c0003c21:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003c26:	83 ed 20             	sub    ebp,0x20
c0003c29:	89 e8                	mov    eax,ebp
c0003c2b:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c2f:	41                   	inc    ecx
c0003c30:	e9 e9 fe ff ff       	jmp    c0003b1e <create_name+0x15c>
c0003c35:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c39:	75 04                	jne    c0003c3f <create_name+0x27d>
c0003c3b:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c3f:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003c44:	75 05                	jne    c0003c4b <create_name+0x289>
c0003c46:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c4b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c4f:	83 e0 0c             	and    eax,0xc
c0003c52:	3c 0c                	cmp    al,0xc
c0003c54:	74 0b                	je     c0003c61 <create_name+0x29f>
c0003c56:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c5a:	83 e0 03             	and    eax,0x3
c0003c5d:	3c 03                	cmp    al,0x3
c0003c5f:	75 05                	jne    c0003c66 <create_name+0x2a4>
c0003c61:	83 cb 02             	or     ebx,0x2
c0003c64:	eb 19                	jmp    c0003c7f <create_name+0x2bd>
c0003c66:	f6 c3 02             	test   bl,0x2
c0003c69:	75 14                	jne    c0003c7f <create_name+0x2bd>
c0003c6b:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003c70:	74 03                	je     c0003c75 <create_name+0x2b3>
c0003c72:	83 cb 10             	or     ebx,0x10
c0003c75:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003c7a:	74 03                	je     c0003c7f <create_name+0x2bd>
c0003c7c:	83 cb 08             	or     ebx,0x8
c0003c7f:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c82:	31 c0                	xor    eax,eax
c0003c84:	eb 10                	jmp    c0003c96 <create_name+0x2d4>
c0003c86:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c8b:	0f 85 ce fe ff ff    	jne    c0003b5f <create_name+0x19d>
c0003c91:	e9 a6 fe ff ff       	jmp    c0003b3c <create_name+0x17a>
c0003c96:	83 c4 3c             	add    esp,0x3c
c0003c99:	5b                   	pop    ebx
c0003c9a:	5e                   	pop    esi
c0003c9b:	5f                   	pop    edi
c0003c9c:	5d                   	pop    ebp
c0003c9d:	c3                   	ret    

c0003c9e <xname_sum>:
c0003c9e:	56                   	push   esi
c0003c9f:	53                   	push   ebx
c0003ca0:	89 c6                	mov    esi,eax
c0003ca2:	51                   	push   ecx
c0003ca3:	31 db                	xor    ebx,ebx
c0003ca5:	83 c6 02             	add    esi,0x2
c0003ca8:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003cac:	66 85 c0             	test   ax,ax
c0003caf:	74 1f                	je     c0003cd0 <xname_sum+0x32>
c0003cb1:	83 ec 0c             	sub    esp,0xc
c0003cb4:	66 d1 cb             	ror    bx,1
c0003cb7:	50                   	push   eax
c0003cb8:	e8 67 48 00 00       	call   c0008524 <ff_wtoupper>
c0003cbd:	83 c4 10             	add    esp,0x10
c0003cc0:	0f b6 d0             	movzx  edx,al
c0003cc3:	66 c1 e8 08          	shr    ax,0x8
c0003cc7:	01 d3                	add    ebx,edx
c0003cc9:	66 d1 cb             	ror    bx,1
c0003ccc:	01 c3                	add    ebx,eax
c0003cce:	eb d5                	jmp    c0003ca5 <xname_sum+0x7>
c0003cd0:	89 d8                	mov    eax,ebx
c0003cd2:	5a                   	pop    edx
c0003cd3:	5b                   	pop    ebx
c0003cd4:	5e                   	pop    esi
c0003cd5:	c3                   	ret    

c0003cd6 <create_xdir>:
c0003cd6:	55                   	push   ebp
c0003cd7:	b9 40 00 00 00       	mov    ecx,0x40
c0003cdc:	57                   	push   edi
c0003cdd:	bd 01 00 00 00       	mov    ebp,0x1
c0003ce2:	56                   	push   esi
c0003ce3:	31 ff                	xor    edi,edi
c0003ce5:	53                   	push   ebx
c0003ce6:	be 40 00 00 00       	mov    esi,0x40
c0003ceb:	89 c3                	mov    ebx,eax
c0003ced:	83 ec 1c             	sub    esp,0x1c
c0003cf0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003cf4:	31 d2                	xor    edx,edx
c0003cf6:	e8 18 dd ff ff       	call   c0001a13 <mem_set>
c0003cfb:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003cfe:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d02:	31 c9                	xor    ecx,ecx
c0003d04:	8d 46 01             	lea    eax,[esi+0x1]
c0003d07:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d0b:	83 c6 02             	add    esi,0x2
c0003d0e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d12:	66 85 ed             	test   bp,bp
c0003d15:	74 12                	je     c0003d29 <create_xdir+0x53>
c0003d17:	0f b6 c1             	movzx  eax,cl
c0003d1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d1e:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d22:	66 83 fd 01          	cmp    bp,0x1
c0003d26:	80 d9 ff             	sbb    cl,0xff
c0003d29:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d2c:	0f b7 d5             	movzx  edx,bp
c0003d2f:	83 c6 02             	add    esi,0x2
c0003d32:	e8 ba dc ff ff       	call   c00019f1 <st_word>
c0003d37:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d3d:	75 d3                	jne    c0003d12 <create_xdir+0x3c>
c0003d3f:	8d 47 01             	lea    eax,[edi+0x1]
c0003d42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d46:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d4a:	0f b6 c1             	movzx  eax,cl
c0003d4d:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d52:	74 07                	je     c0003d5b <create_xdir+0x85>
c0003d54:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d59:	eb a9                	jmp    c0003d04 <create_xdir+0x2e>
c0003d5b:	8d 47 02             	lea    eax,[edi+0x2]
c0003d5e:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d61:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d64:	89 d0                	mov    eax,edx
c0003d66:	e8 33 ff ff ff       	call   c0003c9e <xname_sum>
c0003d6b:	83 c4 1c             	add    esp,0x1c
c0003d6e:	0f b7 d0             	movzx  edx,ax
c0003d71:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d74:	5b                   	pop    ebx
c0003d75:	5e                   	pop    esi
c0003d76:	5f                   	pop    edi
c0003d77:	5d                   	pop    ebp
c0003d78:	e9 74 dc ff ff       	jmp    c00019f1 <st_word>

c0003d7d <cmp_lfn>:
c0003d7d:	55                   	push   ebp
c0003d7e:	57                   	push   edi
c0003d7f:	89 d7                	mov    edi,edx
c0003d81:	56                   	push   esi
c0003d82:	53                   	push   ebx
c0003d83:	83 ec 1c             	sub    esp,0x1c
c0003d86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003d8d:	e8 ed db ff ff       	call   c000197f <ld_word>
c0003d92:	66 85 c0             	test   ax,ax
c0003d95:	74 07                	je     c0003d9e <cmp_lfn+0x21>
c0003d97:	31 c0                	xor    eax,eax
c0003d99:	e9 9a 00 00 00       	jmp    c0003e38 <cmp_lfn+0xbb>
c0003d9e:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003da0:	bd 01 00 00 00       	mov    ebp,0x1
c0003da5:	83 e3 3f             	and    ebx,0x3f
c0003da8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003db0:	4b                   	dec    ebx
c0003db1:	6b db 0d             	imul   ebx,ebx,0xd
c0003db4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003db8:	0f b6 80 00 02 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfe00]
c0003dbf:	01 f8                	add    eax,edi
c0003dc1:	e8 b9 db ff ff       	call   c000197f <ld_word>
c0003dc6:	66 85 ed             	test   bp,bp
c0003dc9:	89 c6                	mov    esi,eax
c0003dcb:	74 3c                	je     c0003e09 <cmp_lfn+0x8c>
c0003dcd:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003dd3:	77 c2                	ja     c0003d97 <cmp_lfn+0x1a>
c0003dd5:	83 ec 0c             	sub    esp,0xc
c0003dd8:	0f b7 c0             	movzx  eax,ax
c0003ddb:	50                   	push   eax
c0003ddc:	e8 43 47 00 00       	call   c0008524 <ff_wtoupper>
c0003de1:	89 c5                	mov    ebp,eax
c0003de3:	8d 43 01             	lea    eax,[ebx+0x1]
c0003de6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003dea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003dee:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003df2:	89 04 24             	mov    DWORD PTR [esp],eax
c0003df5:	e8 2a 47 00 00       	call   c0008524 <ff_wtoupper>
c0003dfa:	83 c4 10             	add    esp,0x10
c0003dfd:	39 c5                	cmp    ebp,eax
c0003dff:	75 96                	jne    c0003d97 <cmp_lfn+0x1a>
c0003e01:	89 f5                	mov    ebp,esi
c0003e03:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e07:	eb 04                	jmp    c0003e0d <cmp_lfn+0x90>
c0003e09:	66 46                	inc    si
c0003e0b:	75 8a                	jne    c0003d97 <cmp_lfn+0x1a>
c0003e0d:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e11:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e16:	75 9c                	jne    c0003db4 <cmp_lfn+0x37>
c0003e18:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e1b:	74 16                	je     c0003e33 <cmp_lfn+0xb6>
c0003e1d:	66 85 ed             	test   bp,bp
c0003e20:	74 11                	je     c0003e33 <cmp_lfn+0xb6>
c0003e22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e26:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e2b:	0f 94 c0             	sete   al
c0003e2e:	0f b6 c0             	movzx  eax,al
c0003e31:	eb 05                	jmp    c0003e38 <cmp_lfn+0xbb>
c0003e33:	b8 01 00 00 00       	mov    eax,0x1
c0003e38:	83 c4 1c             	add    esp,0x1c
c0003e3b:	5b                   	pop    ebx
c0003e3c:	5e                   	pop    esi
c0003e3d:	5f                   	pop    edi
c0003e3e:	5d                   	pop    ebp
c0003e3f:	c3                   	ret    

c0003e40 <dir_find>:
c0003e40:	55                   	push   ebp
c0003e41:	31 d2                	xor    edx,edx
c0003e43:	57                   	push   edi
c0003e44:	56                   	push   esi
c0003e45:	53                   	push   ebx
c0003e46:	89 c3                	mov    ebx,eax
c0003e48:	83 ec 1c             	sub    esp,0x1c
c0003e4b:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e4d:	e8 89 f0 ff ff       	call   c0002edb <dir_sdi>
c0003e52:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e55:	85 c0                	test   eax,eax
c0003e57:	0f 85 9e 01 00 00    	jne    c0003ffb <dir_find+0x1bb>
c0003e5d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e60:	0f 85 8d 00 00 00    	jne    c0003ef3 <dir_find+0xb3>
c0003e66:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e69:	e8 30 fe ff ff       	call   c0003c9e <xname_sum>
c0003e6e:	89 c7                	mov    edi,eax
c0003e70:	31 d2                	xor    edx,edx
c0003e72:	89 d8                	mov    eax,ebx
c0003e74:	e8 72 f8 ff ff       	call   c00036eb <dir_read>
c0003e79:	85 c0                	test   eax,eax
c0003e7b:	0f 85 5e 01 00 00    	jne    c0003fdf <dir_find+0x19f>
c0003e81:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003e84:	8d 41 24             	lea    eax,[ecx+0x24]
c0003e87:	e8 f3 da ff ff       	call   c000197f <ld_word>
c0003e8c:	66 39 f8             	cmp    ax,di
c0003e8f:	75 df                	jne    c0003e70 <dir_find+0x30>
c0003e91:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003e94:	31 ed                	xor    ebp,ebp
c0003e96:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003e9a:	ba 40 00 00 00       	mov    edx,0x40
c0003e9f:	89 e9                	mov    ecx,ebp
c0003ea1:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003ea5:	0f 84 42 01 00 00    	je     c0003fed <dir_find+0x1ad>
c0003eab:	f6 c2 1f             	test   dl,0x1f
c0003eae:	75 03                	jne    c0003eb3 <dir_find+0x73>
c0003eb0:	83 c2 02             	add    edx,0x2
c0003eb3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003eb7:	89 d0                	mov    eax,edx
c0003eb9:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ebc:	e8 be da ff ff       	call   c000197f <ld_word>
c0003ec1:	83 ec 0c             	sub    esp,0xc
c0003ec4:	0f b7 c0             	movzx  eax,ax
c0003ec7:	50                   	push   eax
c0003ec8:	e8 57 46 00 00       	call   c0008524 <ff_wtoupper>
c0003ecd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ed1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ed4:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003ed8:	89 04 24             	mov    DWORD PTR [esp],eax
c0003edb:	e8 44 46 00 00       	call   c0008524 <ff_wtoupper>
c0003ee0:	83 c4 10             	add    esp,0x10
c0003ee3:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003ee7:	75 87                	jne    c0003e70 <dir_find+0x30>
c0003ee9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003eed:	45                   	inc    ebp
c0003eee:	83 c2 02             	add    edx,0x2
c0003ef1:	eb ac                	jmp    c0003e9f <dir_find+0x5f>
c0003ef3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003efa:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003eff:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f04:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f07:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f0a:	89 f0                	mov    eax,esi
c0003f0c:	e8 4c e2 ff ff       	call   c000215d <move_window>
c0003f11:	85 c0                	test   eax,eax
c0003f13:	0f 85 c6 00 00 00    	jne    c0003fdf <dir_find+0x19f>
c0003f19:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f1c:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f1f:	84 c9                	test   cl,cl
c0003f21:	0f 84 bd 00 00 00    	je     c0003fe4 <dir_find+0x1a4>
c0003f27:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f2a:	88 d0                	mov    al,dl
c0003f2c:	83 e0 3f             	and    eax,0x3f
c0003f2f:	80 f9 e5             	cmp    cl,0xe5
c0003f32:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f35:	0f 84 87 00 00 00    	je     c0003fc2 <dir_find+0x182>
c0003f3b:	80 e2 08             	and    dl,0x8
c0003f3e:	74 06                	je     c0003f46 <dir_find+0x106>
c0003f40:	3c 0f                	cmp    al,0xf
c0003f42:	75 7e                	jne    c0003fc2 <dir_find+0x182>
c0003f44:	eb 04                	jmp    c0003f4a <dir_find+0x10a>
c0003f46:	3c 0f                	cmp    al,0xf
c0003f48:	75 4c                	jne    c0003f96 <dir_find+0x156>
c0003f4a:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f4e:	75 7e                	jne    c0003fce <dir_find+0x18e>
c0003f50:	f6 c1 40             	test   cl,0x40
c0003f53:	74 12                	je     c0003f67 <dir_find+0x127>
c0003f55:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f58:	83 e1 bf             	and    ecx,0xffffffbf
c0003f5b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f5f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f62:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f65:	eb 06                	jmp    c0003f6d <dir_find+0x12d>
c0003f67:	89 f8                	mov    eax,edi
c0003f69:	38 c8                	cmp    al,cl
c0003f6b:	75 5c                	jne    c0003fc9 <dir_find+0x189>
c0003f6d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f71:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f76:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f79:	75 53                	jne    c0003fce <dir_find+0x18e>
c0003f7b:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0003f7f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f82:	89 ea                	mov    edx,ebp
c0003f84:	e8 f4 fd ff ff       	call   c0003d7d <cmp_lfn>
c0003f89:	85 c0                	test   eax,eax
c0003f8b:	74 41                	je     c0003fce <dir_find+0x18e>
c0003f8d:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0003f91:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003f94:	eb 38                	jmp    c0003fce <dir_find+0x18e>
c0003f96:	89 f8                	mov    eax,edi
c0003f98:	84 c0                	test   al,al
c0003f9a:	75 0d                	jne    c0003fa9 <dir_find+0x169>
c0003f9c:	89 e8                	mov    eax,ebp
c0003f9e:	e8 98 de ff ff       	call   c0001e3b <sum_sfn>
c0003fa3:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003fa7:	74 52                	je     c0003ffb <dir_find+0x1bb>
c0003fa9:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003fad:	75 13                	jne    c0003fc2 <dir_find+0x182>
c0003faf:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fb2:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fb7:	89 e8                	mov    eax,ebp
c0003fb9:	e8 60 da ff ff       	call   c0001a1e <mem_cmp>
c0003fbe:	85 c0                	test   eax,eax
c0003fc0:	74 39                	je     c0003ffb <dir_find+0x1bb>
c0003fc2:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fc9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fce:	31 d2                	xor    edx,edx
c0003fd0:	89 d8                	mov    eax,ebx
c0003fd2:	e8 5c f4 ff ff       	call   c0003433 <dir_next>
c0003fd7:	85 c0                	test   eax,eax
c0003fd9:	0f 84 25 ff ff ff    	je     c0003f04 <dir_find+0xc4>
c0003fdf:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fe2:	eb 17                	jmp    c0003ffb <dir_find+0x1bb>
c0003fe4:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0003feb:	eb 0e                	jmp    c0003ffb <dir_find+0x1bb>
c0003fed:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ff0:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0003ff5:	0f 85 75 fe ff ff    	jne    c0003e70 <dir_find+0x30>
c0003ffb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0003ffe:	83 c4 1c             	add    esp,0x1c
c0004001:	5b                   	pop    ebx
c0004002:	5e                   	pop    esi
c0004003:	5f                   	pop    edi
c0004004:	5d                   	pop    ebp
c0004005:	c3                   	ret    

c0004006 <dir_register>:
c0004006:	55                   	push   ebp
c0004007:	57                   	push   edi
c0004008:	56                   	push   esi
c0004009:	be 06 00 00 00       	mov    esi,0x6
c000400e:	53                   	push   ebx
c000400f:	83 ec 6c             	sub    esp,0x6c
c0004012:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004016:	0f 85 62 02 00 00    	jne    c000427e <dir_register+0x278>
c000401c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000401e:	31 ff                	xor    edi,edi
c0004020:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004023:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004028:	74 03                	je     c000402d <dir_register+0x27>
c000402a:	47                   	inc    edi
c000402b:	eb f6                	jmp    c0004023 <dir_register+0x1d>
c000402d:	89 c3                	mov    ebx,eax
c000402f:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004033:	0f 85 e1 00 00 00    	jne    c000411a <dir_register+0x114>
c0004039:	83 c7 0e             	add    edi,0xe
c000403c:	b9 0f 00 00 00       	mov    ecx,0xf
c0004041:	89 f8                	mov    eax,edi
c0004043:	31 d2                	xor    edx,edx
c0004045:	f7 f1                	div    ecx
c0004047:	8d 50 02             	lea    edx,[eax+0x2]
c000404a:	89 c7                	mov    edi,eax
c000404c:	89 d8                	mov    eax,ebx
c000404e:	e8 12 f8 ff ff       	call   c0003865 <dir_alloc>
c0004053:	89 c6                	mov    esi,eax
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 21 02 00 00    	jne    c000427e <dir_register+0x278>
c000405d:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004063:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004066:	c1 e7 05             	shl    edi,0x5
c0004069:	29 f8                	sub    eax,edi
c000406b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000406e:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004071:	a8 04                	test   al,0x4
c0004073:	0f 84 91 00 00 00    	je     c000410a <dir_register+0x104>
c0004079:	83 e0 fb             	and    eax,0xfffffffb
c000407c:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000407f:	89 d8                	mov    eax,ebx
c0004081:	e8 25 ec ff ff       	call   c0002cab <fill_first_frag>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 85 ee 01 00 00    	jne    c000427c <dir_register+0x276>
c000408e:	83 c9 ff             	or     ecx,0xffffffff
c0004091:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004094:	89 d8                	mov    eax,ebx
c0004096:	e8 db eb ff ff       	call   c0002c76 <fill_last_frag>
c000409b:	85 c0                	test   eax,eax
c000409d:	0f 85 d9 01 00 00    	jne    c000427c <dir_register+0x276>
c00040a3:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00040a7:	74 61                	je     c000410a <dir_register+0x104>
c00040a9:	89 da                	mov    edx,ebx
c00040ab:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040af:	e8 ea f5 ff ff       	call   c000369e <load_obj_xdir>
c00040b4:	85 c0                	test   eax,eax
c00040b6:	0f 85 c0 01 00 00    	jne    c000427c <dir_register+0x276>
c00040bc:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040c0:	31 c9                	xor    ecx,ecx
c00040c2:	c1 e2 09             	shl    edx,0x9
c00040c5:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040c8:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040cb:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040ce:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040d1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040d4:	83 c0 38             	add    eax,0x38
c00040d7:	e8 1c d9 ff ff       	call   c00019f8 <st_qword>
c00040dc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040df:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040e2:	83 c0 28             	add    eax,0x28
c00040e5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00040e8:	e8 0b d9 ff ff       	call   c00019f8 <st_qword>
c00040ed:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040f0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00040f3:	83 c8 01             	or     eax,0x1
c00040f6:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00040f9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040fd:	e8 db f7 ff ff       	call   c00038dd <store_xdir>
c0004102:	85 c0                	test   eax,eax
c0004104:	0f 85 72 01 00 00    	jne    c000427c <dir_register+0x276>
c000410a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000410d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004110:	e8 c1 fb ff ff       	call   c0003cd6 <create_xdir>
c0004115:	e9 64 01 00 00       	jmp    c000427e <dir_register+0x278>
c000411a:	8d 40 3c             	lea    eax,[eax+0x3c]
c000411d:	b9 0c 00 00 00       	mov    ecx,0xc
c0004122:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004126:	89 c2                	mov    edx,eax
c0004128:	8d 44 24 14          	lea    eax,[esp+0x14]
c000412c:	e8 cd d8 ff ff       	call   c00019fe <mem_cpy>
c0004131:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004136:	74 58                	je     c0004190 <dir_register+0x18a>
c0004138:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000413c:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004144:	83 ec 0c             	sub    esp,0xc
c0004147:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000414a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000414e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004152:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004156:	e8 24 dc ff ff       	call   c0001d7f <gen_numname>
c000415b:	89 d8                	mov    eax,ebx
c000415d:	e8 de fc ff ff       	call   c0003e40 <dir_find>
c0004162:	83 c4 10             	add    esp,0x10
c0004165:	89 c6                	mov    esi,eax
c0004167:	85 c0                	test   eax,eax
c0004169:	75 15                	jne    c0004180 <dir_register+0x17a>
c000416b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000416f:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004174:	75 ce                	jne    c0004144 <dir_register+0x13e>
c0004176:	be 07 00 00 00       	mov    esi,0x7
c000417b:	e9 fe 00 00 00       	jmp    c000427e <dir_register+0x278>
c0004180:	83 f8 04             	cmp    eax,0x4
c0004183:	0f 85 f5 00 00 00    	jne    c000427e <dir_register+0x278>
c0004189:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000418d:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004190:	b9 01 00 00 00       	mov    ecx,0x1
c0004195:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000419a:	74 0f                	je     c00041ab <dir_register+0x1a5>
c000419c:	b9 0d 00 00 00       	mov    ecx,0xd
c00041a1:	8d 47 0c             	lea    eax,[edi+0xc]
c00041a4:	31 d2                	xor    edx,edx
c00041a6:	f7 f1                	div    ecx
c00041a8:	8d 48 01             	lea    ecx,[eax+0x1]
c00041ab:	89 ca                	mov    edx,ecx
c00041ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b1:	89 d8                	mov    eax,ebx
c00041b3:	e8 ad f6 ff ff       	call   c0003865 <dir_alloc>
c00041b8:	89 c6                	mov    esi,eax
c00041ba:	85 c0                	test   eax,eax
c00041bc:	0f 85 bc 00 00 00    	jne    c000427e <dir_register+0x278>
c00041c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041c6:	49                   	dec    ecx
c00041c7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041cb:	74 6a                	je     c0004237 <dir_register+0x231>
c00041cd:	89 c8                	mov    eax,ecx
c00041cf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041d2:	c1 e0 05             	shl    eax,0x5
c00041d5:	29 c2                	sub    edx,eax
c00041d7:	89 d8                	mov    eax,ebx
c00041d9:	e8 fd ec ff ff       	call   c0002edb <dir_sdi>
c00041de:	89 c6                	mov    esi,eax
c00041e0:	85 c0                	test   eax,eax
c00041e2:	0f 85 96 00 00 00    	jne    c000427e <dir_register+0x278>
c00041e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00041ec:	e8 4a dc ff ff       	call   c0001e3b <sum_sfn>
c00041f1:	0f b6 f8             	movzx  edi,al
c00041f4:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041f7:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041fa:	89 e8                	mov    eax,ebp
c00041fc:	e8 5c df ff ff       	call   c000215d <move_window>
c0004201:	89 c6                	mov    esi,eax
c0004203:	85 c0                	test   eax,eax
c0004205:	75 77                	jne    c000427e <dir_register+0x278>
c0004207:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000420c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000420f:	83 ec 0c             	sub    esp,0xc
c0004212:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004215:	57                   	push   edi
c0004216:	e8 e0 da ff ff       	call   c0001cfb <put_lfn>
c000421b:	31 d2                	xor    edx,edx
c000421d:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004221:	89 d8                	mov    eax,ebx
c0004223:	e8 0b f2 ff ff       	call   c0003433 <dir_next>
c0004228:	83 c4 10             	add    esp,0x10
c000422b:	89 c6                	mov    esi,eax
c000422d:	85 c0                	test   eax,eax
c000422f:	75 4d                	jne    c000427e <dir_register+0x278>
c0004231:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004235:	75 bd                	jne    c00041f4 <dir_register+0x1ee>
c0004237:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000423a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000423d:	89 e8                	mov    eax,ebp
c000423f:	e8 19 df ff ff       	call   c000215d <move_window>
c0004244:	89 c6                	mov    esi,eax
c0004246:	85 c0                	test   eax,eax
c0004248:	75 34                	jne    c000427e <dir_register+0x278>
c000424a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000424d:	b9 20 00 00 00       	mov    ecx,0x20
c0004252:	31 d2                	xor    edx,edx
c0004254:	e8 ba d7 ff ff       	call   c0001a13 <mem_set>
c0004259:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000425c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004260:	b9 0b 00 00 00       	mov    ecx,0xb
c0004265:	e8 94 d7 ff ff       	call   c00019fe <mem_cpy>
c000426a:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000426d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004270:	83 e0 18             	and    eax,0x18
c0004273:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004276:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000427a:	eb 02                	jmp    c000427e <dir_register+0x278>
c000427c:	89 c6                	mov    esi,eax
c000427e:	83 c4 6c             	add    esp,0x6c
c0004281:	89 f0                	mov    eax,esi
c0004283:	5b                   	pop    ebx
c0004284:	5e                   	pop    esi
c0004285:	5f                   	pop    edi
c0004286:	5d                   	pop    ebp
c0004287:	c3                   	ret    

c0004288 <sync_fs>:
c0004288:	56                   	push   esi
c0004289:	53                   	push   ebx
c000428a:	53                   	push   ebx
c000428b:	89 c3                	mov    ebx,eax
c000428d:	e8 37 de ff ff       	call   c00020c9 <sync_window>
c0004292:	85 c0                	test   eax,eax
c0004294:	0f 85 b1 00 00 00    	jne    c000434b <sync_fs+0xc3>
c000429a:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000429d:	0f 85 8e 00 00 00    	jne    c0004331 <sync_fs+0xa9>
c00042a3:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00042a7:	0f 85 84 00 00 00    	jne    c0004331 <sync_fs+0xa9>
c00042ad:	b9 00 02 00 00       	mov    ecx,0x200
c00042b2:	8d 73 54             	lea    esi,[ebx+0x54]
c00042b5:	31 d2                	xor    edx,edx
c00042b7:	89 f0                	mov    eax,esi
c00042b9:	e8 55 d7 ff ff       	call   c0001a13 <mem_set>
c00042be:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042c4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042c9:	e8 23 d7 ff ff       	call   c00019f1 <st_word>
c00042ce:	ba 52 52 61 41       	mov    edx,0x41615252
c00042d3:	89 f0                	mov    eax,esi
c00042d5:	e8 1b d7 ff ff       	call   c00019f5 <st_dword>
c00042da:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042e0:	ba 72 72 41 61       	mov    edx,0x61417272
c00042e5:	e8 0b d7 ff ff       	call   c00019f5 <st_dword>
c00042ea:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042ed:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00042f3:	e8 fd d6 ff ff       	call   c00019f5 <st_dword>
c00042f8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00042fb:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004301:	e8 ef d6 ff ff       	call   c00019f5 <st_dword>
c0004306:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004309:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000430c:	83 c0 01             	add    eax,0x1
c000430f:	83 d2 00             	adc    edx,0x0
c0004312:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004315:	83 ec 0c             	sub    esp,0xc
c0004318:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000431b:	6a 01                	push   0x1
c000431d:	52                   	push   edx
c000431e:	50                   	push   eax
c000431f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004323:	56                   	push   esi
c0004324:	50                   	push   eax
c0004325:	e8 20 d6 ff ff       	call   c000194a <disk_write>
c000432a:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000432e:	83 c4 20             	add    esp,0x20
c0004331:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004335:	51                   	push   ecx
c0004336:	6a 00                	push   0x0
c0004338:	6a 00                	push   0x0
c000433a:	50                   	push   eax
c000433b:	e8 20 d6 ff ff       	call   c0001960 <disk_ioctl>
c0004340:	83 c4 10             	add    esp,0x10
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 95 c0             	setne  al
c0004348:	0f b6 c0             	movzx  eax,al
c000434b:	5a                   	pop    edx
c000434c:	5b                   	pop    ebx
c000434d:	5e                   	pop    esi
c000434e:	c3                   	ret    

c000434f <create_partition>:
c000434f:	55                   	push   ebp
c0004350:	0f b6 c0             	movzx  eax,al
c0004353:	57                   	push   edi
c0004354:	56                   	push   esi
c0004355:	53                   	push   ebx
c0004356:	83 ec 60             	sub    esp,0x60
c0004359:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000435d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004361:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004365:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004369:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000436d:	50                   	push   eax
c000436e:	6a 01                	push   0x1
c0004370:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004374:	e8 e7 d5 ff ff       	call   c0001960 <disk_ioctl>
c0004379:	83 c4 10             	add    esp,0x10
c000437c:	85 c0                	test   eax,eax
c000437e:	74 0a                	je     c000438a <create_partition+0x3b>
c0004380:	b8 01 00 00 00       	mov    eax,0x1
c0004385:	e9 67 05 00 00       	jmp    c00048f1 <create_partition+0x5a2>
c000438a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000438e:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004392:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004396:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000439a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000439f:	0f 86 ed 03 00 00    	jbe    c0004792 <create_partition+0x443>
c00043a5:	83 c0 df             	add    eax,0xffffffdf
c00043a8:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043b0:	83 d2 ff             	adc    edx,0xffffffff
c00043b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043b7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043c3:	83 c0 bd             	add    eax,0xffffffbd
c00043c6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043cd:	83 d2 ff             	adc    edx,0xffffffff
c00043d0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043d4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043d8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043e0:	be 22 00 00 00       	mov    esi,0x22
c00043e5:	31 ff                	xor    edi,edi
c00043e7:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00043ef:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00043f7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00043ff:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004403:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004409:	75 0e                	jne    c0004419 <create_partition+0xca>
c000440b:	b9 00 02 00 00       	mov    ecx,0x200
c0004410:	31 d2                	xor    edx,edx
c0004412:	89 d8                	mov    eax,ebx
c0004414:	e8 fa d5 ff ff       	call   c0001a13 <mem_set>
c0004419:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000441d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004425:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004428:	0f 84 23 01 00 00    	je     c0004551 <create_partition+0x202>
c000442e:	89 f0                	mov    eax,esi
c0004430:	89 fa                	mov    edx,edi
c0004432:	05 ff 07 00 00       	add    eax,0x7ff
c0004437:	83 d2 00             	adc    edx,0x0
c000443a:	89 c1                	mov    ecx,eax
c000443c:	89 d7                	mov    edi,edx
c000443e:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004444:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004448:	89 ce                	mov    esi,ecx
c000444a:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000444e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004452:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004456:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004459:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000445d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004460:	b8 64 00 00 00       	mov    eax,0x64
c0004465:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004468:	b8 00 00 00 00       	mov    eax,0x0
c000446d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004471:	72 41                	jb     c00044b4 <create_partition+0x165>
c0004473:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004477:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000447b:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000447f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004484:	01 c1                	add    ecx,eax
c0004486:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000448a:	f7 24 24             	mul    DWORD PTR [esp]
c000448d:	6a 00                	push   0x0
c000448f:	01 ca                	add    edx,ecx
c0004491:	6a 64                	push   0x64
c0004493:	52                   	push   edx
c0004494:	50                   	push   eax
c0004495:	e8 56 ae 01 00       	call   c001f2f0 <__udivdi3>
c000449a:	83 c4 10             	add    esp,0x10
c000449d:	05 ff 07 00 00       	add    eax,0x7ff
c00044a2:	83 d2 00             	adc    edx,0x0
c00044a5:	89 c1                	mov    ecx,eax
c00044a7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ab:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044b1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044b4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044b7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044bb:	01 f0                	add    eax,esi
c00044bd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044c1:	11 fa                	adc    edx,edi
c00044c3:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044c7:	19 d1                	sbb    ecx,edx
c00044c9:	73 2e                	jae    c00044f9 <create_partition+0x1aa>
c00044cb:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044cf:	89 f8                	mov    eax,edi
c00044d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044d8:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044dc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044e4:	73 6b                	jae    c0004551 <create_partition+0x202>
c00044e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00044ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00044ee:	29 f0                	sub    eax,esi
c00044f0:	19 fa                	sbb    edx,edi
c00044f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00044f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044fd:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004500:	74 4f                	je     c0004551 <create_partition+0x202>
c0004502:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004505:	b9 10 00 00 00       	mov    ecx,0x10
c000450a:	ba 10 02 02 c0       	mov    edx,0xc0020210
c000450f:	e8 ea d4 ff ff       	call   c00019fe <mem_cpy>
c0004514:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004518:	b9 10 00 00 00       	mov    ecx,0x10
c000451d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004521:	e8 2c db ff ff       	call   c0002052 <make_rand>
c0004526:	89 f2                	mov    edx,esi
c0004528:	89 f9                	mov    ecx,edi
c000452a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000452e:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004532:	e8 c1 d4 ff ff       	call   c00019f8 <st_qword>
c0004537:	03 34 24             	add    esi,DWORD PTR [esp]
c000453a:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000453e:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004542:	89 f2                	mov    edx,esi
c0004544:	89 f9                	mov    ecx,edi
c0004546:	83 c2 ff             	add    edx,0xffffffff
c0004549:	83 d1 ff             	adc    ecx,0xffffffff
c000454c:	e8 a7 d4 ff ff       	call   c00019f8 <st_qword>
c0004551:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004555:	83 e8 80             	sub    eax,0xffffff80
c0004558:	89 c5                	mov    ebp,eax
c000455a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000455e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004564:	75 6b                	jne    c00045d1 <create_partition+0x282>
c0004566:	45                   	inc    ebp
c0004567:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000456b:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004570:	e8 39 da ff ff       	call   c0001fae <crc32>
c0004575:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000457b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000457f:	75 e5                	jne    c0004566 <create_partition+0x217>
c0004581:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004585:	31 d2                	xor    edx,edx
c0004587:	83 ec 0c             	sub    esp,0xc
c000458a:	c1 ed 09             	shr    ebp,0x9
c000458d:	6a 01                	push   0x1
c000458f:	8d 45 02             	lea    eax,[ebp+0x2]
c0004592:	52                   	push   edx
c0004593:	50                   	push   eax
c0004594:	53                   	push   ebx
c0004595:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004599:	e8 ac d3 ff ff       	call   c000194a <disk_write>
c000459e:	83 c4 20             	add    esp,0x20
c00045a1:	85 c0                	test   eax,eax
c00045a3:	0f 85 d7 fd ff ff    	jne    c0004380 <create_partition+0x31>
c00045a9:	83 ec 0c             	sub    esp,0xc
c00045ac:	31 d2                	xor    edx,edx
c00045ae:	6a 01                	push   0x1
c00045b0:	89 e8                	mov    eax,ebp
c00045b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045b6:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045ba:	52                   	push   edx
c00045bb:	50                   	push   eax
c00045bc:	53                   	push   ebx
c00045bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045c1:	e8 84 d3 ff ff       	call   c000194a <disk_write>
c00045c6:	83 c4 20             	add    esp,0x20
c00045c9:	85 c0                	test   eax,eax
c00045cb:	0f 85 af fd ff ff    	jne    c0004380 <create_partition+0x31>
c00045d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045d5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045d9:	3d 00 40 00 00       	cmp    eax,0x4000
c00045de:	74 0d                	je     c00045ed <create_partition+0x29e>
c00045e0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00045e4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045e8:	e9 12 fe ff ff       	jmp    c00043ff <create_partition+0xb0>
c00045ed:	31 d2                	xor    edx,edx
c00045ef:	b9 00 02 00 00       	mov    ecx,0x200
c00045f4:	89 d8                	mov    eax,ebx
c00045f6:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00045f9:	e8 15 d4 ff ff       	call   c0001a13 <mem_set>
c00045fe:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004601:	b9 10 00 00 00       	mov    ecx,0x10
c0004606:	ba 00 01 02 c0       	mov    edx,0xc0020100
c000460b:	89 d8                	mov    eax,ebx
c000460d:	e8 ec d3 ff ff       	call   c00019fe <mem_cpy>
c0004612:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004616:	8d 43 58             	lea    eax,[ebx+0x58]
c0004619:	f7 d2                	not    edx
c000461b:	e8 d5 d3 ff ff       	call   c00019f5 <st_dword>
c0004620:	8d 43 18             	lea    eax,[ebx+0x18]
c0004623:	31 c9                	xor    ecx,ecx
c0004625:	89 04 24             	mov    DWORD PTR [esp],eax
c0004628:	ba 01 00 00 00       	mov    edx,0x1
c000462d:	e8 c6 d3 ff ff       	call   c00019f8 <st_qword>
c0004632:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004636:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000463a:	83 c2 ff             	add    edx,0xffffffff
c000463d:	89 e8                	mov    eax,ebp
c000463f:	83 d1 ff             	adc    ecx,0xffffffff
c0004642:	e8 b1 d3 ff ff       	call   c00019f8 <st_qword>
c0004647:	31 c9                	xor    ecx,ecx
c0004649:	8d 43 28             	lea    eax,[ebx+0x28]
c000464c:	ba 22 00 00 00       	mov    edx,0x22
c0004651:	e8 a2 d3 ff ff       	call   c00019f8 <st_qword>
c0004656:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000465a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000465e:	83 c2 de             	add    edx,0xffffffde
c0004661:	8d 43 30             	lea    eax,[ebx+0x30]
c0004664:	83 d1 ff             	adc    ecx,0xffffffff
c0004667:	31 f6                	xor    esi,esi
c0004669:	e8 8a d3 ff ff       	call   c00019f8 <st_qword>
c000466e:	8d 43 54             	lea    eax,[ebx+0x54]
c0004671:	ba 80 00 00 00       	mov    edx,0x80
c0004676:	e8 7a d3 ff ff       	call   c00019f5 <st_dword>
c000467b:	8d 43 50             	lea    eax,[ebx+0x50]
c000467e:	ba 80 00 00 00       	mov    edx,0x80
c0004683:	e8 6d d3 ff ff       	call   c00019f5 <st_dword>
c0004688:	ba 02 00 00 00       	mov    edx,0x2
c000468d:	89 f8                	mov    eax,edi
c000468f:	e8 61 d3 ff ff       	call   c00019f5 <st_dword>
c0004694:	8d 53 38             	lea    edx,[ebx+0x38]
c0004697:	b9 10 00 00 00       	mov    ecx,0x10
c000469c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046a0:	e8 ad d9 ff ff       	call   c0002052 <make_rand>
c00046a5:	83 c8 ff             	or     eax,0xffffffff
c00046a8:	46                   	inc    esi
c00046a9:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00046ae:	e8 fb d8 ff ff       	call   c0001fae <crc32>
c00046b3:	83 fe 5c             	cmp    esi,0x5c
c00046b6:	75 f0                	jne    c00046a8 <create_partition+0x359>
c00046b8:	f7 d0                	not    eax
c00046ba:	8d 73 10             	lea    esi,[ebx+0x10]
c00046bd:	89 c2                	mov    edx,eax
c00046bf:	89 f0                	mov    eax,esi
c00046c1:	e8 2f d3 ff ff       	call   c00019f5 <st_dword>
c00046c6:	83 ec 0c             	sub    esp,0xc
c00046c9:	6a 01                	push   0x1
c00046cb:	6a 00                	push   0x0
c00046cd:	6a 01                	push   0x1
c00046cf:	53                   	push   ebx
c00046d0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046d4:	e8 71 d2 ff ff       	call   c000194a <disk_write>
c00046d9:	83 c4 20             	add    esp,0x20
c00046dc:	85 c0                	test   eax,eax
c00046de:	0f 85 9c fc ff ff    	jne    c0004380 <create_partition+0x31>
c00046e4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046e8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046ec:	83 c2 ff             	add    edx,0xffffffff
c00046ef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00046f2:	83 d1 ff             	adc    ecx,0xffffffff
c00046f5:	e8 fe d2 ff ff       	call   c00019f8 <st_qword>
c00046fa:	ba 01 00 00 00       	mov    edx,0x1
c00046ff:	31 c9                	xor    ecx,ecx
c0004701:	89 e8                	mov    eax,ebp
c0004703:	e8 f0 d2 ff ff       	call   c00019f8 <st_qword>
c0004708:	89 f8                	mov    eax,edi
c000470a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000470e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004712:	31 ff                	xor    edi,edi
c0004714:	e8 df d2 ff ff       	call   c00019f8 <st_qword>
c0004719:	89 f0                	mov    eax,esi
c000471b:	31 d2                	xor    edx,edx
c000471d:	e8 d3 d2 ff ff       	call   c00019f5 <st_dword>
c0004722:	83 c8 ff             	or     eax,0xffffffff
c0004725:	47                   	inc    edi
c0004726:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000472b:	e8 7e d8 ff ff       	call   c0001fae <crc32>
c0004730:	83 ff 5c             	cmp    edi,0x5c
c0004733:	75 f0                	jne    c0004725 <create_partition+0x3d6>
c0004735:	f7 d0                	not    eax
c0004737:	89 c2                	mov    edx,eax
c0004739:	89 f0                	mov    eax,esi
c000473b:	e8 b5 d2 ff ff       	call   c00019f5 <st_dword>
c0004740:	83 ec 0c             	sub    esp,0xc
c0004743:	6a 01                	push   0x1
c0004745:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004749:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000474d:	83 c0 ff             	add    eax,0xffffffff
c0004750:	83 d2 ff             	adc    edx,0xffffffff
c0004753:	52                   	push   edx
c0004754:	50                   	push   eax
c0004755:	53                   	push   ebx
c0004756:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000475a:	e8 eb d1 ff ff       	call   c000194a <disk_write>
c000475f:	83 c4 20             	add    esp,0x20
c0004762:	85 c0                	test   eax,eax
c0004764:	0f 85 16 fc ff ff    	jne    c0004380 <create_partition+0x31>
c000476a:	31 d2                	xor    edx,edx
c000476c:	89 d8                	mov    eax,ebx
c000476e:	b9 00 02 00 00       	mov    ecx,0x200
c0004773:	e8 9b d2 ff ff       	call   c0001a13 <mem_set>
c0004778:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000477e:	b9 10 00 00 00       	mov    ecx,0x10
c0004783:	ba 10 01 02 c0       	mov    edx,0xc0020110
c0004788:	e8 71 d2 ff ff       	call   c00019fe <mem_cpy>
c000478d:	e9 21 01 00 00       	jmp    c00048b3 <create_partition+0x564>
c0004792:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004796:	b9 05 00 00 00       	mov    ecx,0x5
c000479b:	89 04 24             	mov    DWORD PTR [esp],eax
c000479e:	bf 08 00 00 00       	mov    edi,0x8
c00047a3:	89 f8                	mov    eax,edi
c00047a5:	31 d2                	xor    edx,edx
c00047a7:	0f b6 f0             	movzx  esi,al
c00047aa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047ad:	f7 f6                	div    esi
c00047af:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047b4:	76 0a                	jbe    c00047c0 <create_partition+0x471>
c00047b6:	d1 e7                	shl    edi,1
c00047b8:	49                   	dec    ecx
c00047b9:	75 e8                	jne    c00047a3 <create_partition+0x454>
c00047bb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00047c0:	b9 00 02 00 00       	mov    ecx,0x200
c00047c5:	31 d2                	xor    edx,edx
c00047c7:	89 d8                	mov    eax,ebx
c00047c9:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00047cf:	e8 3f d2 ff ff       	call   c0001a13 <mem_set>
c00047d4:	b9 64 00 00 00       	mov    ecx,0x64
c00047d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047dc:	31 d2                	xor    edx,edx
c00047de:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00047e6:	f7 f1                	div    ecx
c00047e8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00047ed:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047f1:	89 f8                	mov    eax,edi
c00047f3:	0f b6 c0             	movzx  eax,al
c00047f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00047fa:	e9 80 00 00 00       	jmp    c000487f <create_partition+0x530>
c00047ff:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004802:	29 cf                	sub    edi,ecx
c0004804:	89 ca                	mov    edx,ecx
c0004806:	89 f0                	mov    eax,esi
c0004808:	bd 3f 00 00 00       	mov    ebp,0x3f
c000480d:	e8 e3 d1 ff ff       	call   c00019f5 <st_dword>
c0004812:	8d 46 04             	lea    eax,[esi+0x4]
c0004815:	89 fa                	mov    edx,edi
c0004817:	83 c6 10             	add    esi,0x10
c000481a:	e8 d6 d1 ff ff       	call   c00019f5 <st_dword>
c000481f:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004823:	31 d2                	xor    edx,edx
c0004825:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004828:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000482c:	89 c8                	mov    eax,ecx
c000482e:	01 f9                	add    ecx,edi
c0004830:	f7 f5                	div    ebp
c0004832:	89 d5                	mov    ebp,edx
c0004834:	31 d2                	xor    edx,edx
c0004836:	45                   	inc    ebp
c0004837:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000483b:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000483e:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004841:	89 c2                	mov    edx,eax
c0004843:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004846:	c1 ea 02             	shr    edx,0x2
c0004849:	83 e2 c0             	and    edx,0xffffffc0
c000484c:	09 ea                	or     edx,ebp
c000484e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004853:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004856:	31 d2                	xor    edx,edx
c0004858:	f7 f5                	div    ebp
c000485a:	89 d7                	mov    edi,edx
c000485c:	31 d2                	xor    edx,edx
c000485e:	47                   	inc    edi
c000485f:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004863:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004866:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004869:	89 c5                	mov    ebp,eax
c000486b:	c1 ed 02             	shr    ebp,0x2
c000486e:	83 e5 c0             	and    ebp,0xffffffc0
c0004871:	09 ef                	or     edi,ebp
c0004873:	89 fa                	mov    edx,edi
c0004875:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004878:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000487d:	74 34                	je     c00048b3 <create_partition+0x564>
c000487f:	85 c9                	test   ecx,ecx
c0004881:	74 30                	je     c00048b3 <create_partition+0x564>
c0004883:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004886:	76 2b                	jbe    c00048b3 <create_partition+0x564>
c0004888:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000488c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004890:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004893:	83 ff 64             	cmp    edi,0x64
c0004896:	76 4b                	jbe    c00048e3 <create_partition+0x594>
c0004898:	89 f8                	mov    eax,edi
c000489a:	01 c8                	add    eax,ecx
c000489c:	0f 82 5d ff ff ff    	jb     c00047ff <create_partition+0x4b0>
c00048a2:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048a5:	0f 87 54 ff ff ff    	ja     c00047ff <create_partition+0x4b0>
c00048ab:	85 ff                	test   edi,edi
c00048ad:	0f 85 51 ff ff ff    	jne    c0004804 <create_partition+0x4b5>
c00048b3:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048b9:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048be:	e8 2e d1 ff ff       	call   c00019f1 <st_word>
c00048c3:	83 ec 0c             	sub    esp,0xc
c00048c6:	6a 01                	push   0x1
c00048c8:	6a 00                	push   0x0
c00048ca:	6a 00                	push   0x0
c00048cc:	53                   	push   ebx
c00048cd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048d1:	e8 74 d0 ff ff       	call   c000194a <disk_write>
c00048d6:	83 c4 20             	add    esp,0x20
c00048d9:	85 c0                	test   eax,eax
c00048db:	0f 95 c0             	setne  al
c00048de:	0f b6 c0             	movzx  eax,al
c00048e1:	eb 0e                	jmp    c00048f1 <create_partition+0x5a2>
c00048e3:	74 07                	je     c00048ec <create_partition+0x59d>
c00048e5:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00048ea:	eb ac                	jmp    c0004898 <create_partition+0x549>
c00048ec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048ef:	eb a7                	jmp    c0004898 <create_partition+0x549>
c00048f1:	83 c4 5c             	add    esp,0x5c
c00048f4:	5b                   	pop    ebx
c00048f5:	5e                   	pop    esi
c00048f6:	5f                   	pop    edi
c00048f7:	5d                   	pop    ebp
c00048f8:	c3                   	ret    

c00048f9 <get_fileinfo>:
c00048f9:	55                   	push   ebp
c00048fa:	57                   	push   edi
c00048fb:	56                   	push   esi
c00048fc:	53                   	push   ebx
c00048fd:	83 ec 1c             	sub    esp,0x1c
c0004900:	8b 30                	mov    esi,DWORD PTR [eax]
c0004902:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004906:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000490a:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000490d:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004910:	0f 84 dc 01 00 00    	je     c0004af2 <get_fileinfo+0x1f9>
c0004916:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004919:	75 0f                	jne    c000492a <get_fileinfo+0x31>
c000491b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000491e:	83 c4 1c             	add    esp,0x1c
c0004921:	5b                   	pop    ebx
c0004922:	5e                   	pop    esi
c0004923:	5f                   	pop    edi
c0004924:	5d                   	pop    ebp
c0004925:	e9 58 d5 ff ff       	jmp    c0001e82 <get_xfileinfo>
c000492a:	89 d3                	mov    ebx,edx
c000492c:	89 c6                	mov    esi,eax
c000492e:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004932:	74 6a                	je     c000499e <get_fileinfo+0xa5>
c0004934:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000493c:	31 ed                	xor    ebp,ebp
c000493e:	31 ff                	xor    edi,edi
c0004940:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004944:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004948:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000494b:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000494f:	66 85 d2             	test   dx,dx
c0004952:	74 3e                	je     c0004992 <get_fileinfo+0x99>
c0004954:	66 85 ed             	test   bp,bp
c0004957:	75 0c                	jne    c0004965 <get_fileinfo+0x6c>
c0004959:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000495f:	66 3d ff 07          	cmp    ax,0x7ff
c0004963:	76 22                	jbe    c0004987 <get_fileinfo+0x8e>
c0004965:	b9 ff 00 00 00       	mov    ecx,0xff
c000496a:	89 e8                	mov    eax,ebp
c000496c:	29 f9                	sub    ecx,edi
c000496e:	c1 e0 10             	shl    eax,0x10
c0004971:	09 d0                	or     eax,edx
c0004973:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004977:	e8 a3 d1 ff ff       	call   c0001b1f <put_utf>
c000497c:	84 c0                	test   al,al
c000497e:	74 10                	je     c0004990 <get_fileinfo+0x97>
c0004980:	0f b6 c0             	movzx  eax,al
c0004983:	31 d2                	xor    edx,edx
c0004985:	01 c7                	add    edi,eax
c0004987:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c000498c:	89 d5                	mov    ebp,edx
c000498e:	eb b0                	jmp    c0004940 <get_fileinfo+0x47>
c0004990:	31 ff                	xor    edi,edi
c0004992:	66 85 ed             	test   bp,bp
c0004995:	74 02                	je     c0004999 <get_fileinfo+0xa0>
c0004997:	31 ff                	xor    edi,edi
c0004999:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000499e:	31 ff                	xor    edi,edi
c00049a0:	31 c9                	xor    ecx,ecx
c00049a2:	83 f9 0a             	cmp    ecx,0xa
c00049a5:	0f 87 ad 00 00 00    	ja     c0004a58 <get_fileinfo+0x15f>
c00049ab:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049ae:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049b1:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049b5:	66 83 fa 20          	cmp    dx,0x20
c00049b9:	0f 84 92 00 00 00    	je     c0004a51 <get_fileinfo+0x158>
c00049bf:	66 83 fa 05          	cmp    dx,0x5
c00049c3:	75 05                	jne    c00049ca <get_fileinfo+0xd1>
c00049c5:	ba e5 00 00 00       	mov    edx,0xe5
c00049ca:	83 ff 0b             	cmp    edi,0xb
c00049cd:	77 0b                	ja     c00049da <get_fileinfo+0xe1>
c00049cf:	83 fd 09             	cmp    ebp,0x9
c00049d2:	75 06                	jne    c00049da <get_fileinfo+0xe1>
c00049d4:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049d9:	47                   	inc    edi
c00049da:	0f b7 c2             	movzx  eax,dx
c00049dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049e1:	e8 6d d0 ff ff       	call   c0001a53 <dbc_1st>
c00049e6:	85 c0                	test   eax,eax
c00049e8:	74 2f                	je     c0004a19 <get_fileinfo+0x120>
c00049ea:	83 fd 08             	cmp    ebp,0x8
c00049ed:	74 2a                	je     c0004a19 <get_fileinfo+0x120>
c00049ef:	83 fd 0b             	cmp    ebp,0xb
c00049f2:	74 25                	je     c0004a19 <get_fileinfo+0x120>
c00049f4:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049f7:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00049fb:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00049ff:	e8 52 d0 ff ff       	call   c0001a56 <dbc_2nd>
c0004a04:	85 c0                	test   eax,eax
c0004a06:	74 11                	je     c0004a19 <get_fileinfo+0x120>
c0004a08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a0c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a11:	c1 e2 08             	shl    edx,0x8
c0004a14:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a17:	09 c2                	or     edx,eax
c0004a19:	0f b7 d2             	movzx  edx,dx
c0004a1c:	50                   	push   eax
c0004a1d:	50                   	push   eax
c0004a1e:	68 b5 01 00 00       	push   0x1b5
c0004a23:	52                   	push   edx
c0004a24:	e8 87 3a 00 00       	call   c00084b0 <ff_oem2uni>
c0004a29:	83 c4 10             	add    esp,0x10
c0004a2c:	66 85 c0             	test   ax,ax
c0004a2f:	75 04                	jne    c0004a35 <get_fileinfo+0x13c>
c0004a31:	31 ff                	xor    edi,edi
c0004a33:	eb 23                	jmp    c0004a58 <get_fileinfo+0x15f>
c0004a35:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a3a:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a3e:	29 f9                	sub    ecx,edi
c0004a40:	0f b7 c0             	movzx  eax,ax
c0004a43:	e8 d7 d0 ff ff       	call   c0001b1f <put_utf>
c0004a48:	84 c0                	test   al,al
c0004a4a:	74 e5                	je     c0004a31 <get_fileinfo+0x138>
c0004a4c:	0f b6 c0             	movzx  eax,al
c0004a4f:	01 c7                	add    edi,eax
c0004a51:	89 e9                	mov    ecx,ebp
c0004a53:	e9 4a ff ff ff       	jmp    c00049a2 <get_fileinfo+0xa9>
c0004a58:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a5d:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a61:	75 54                	jne    c0004ab7 <get_fileinfo+0x1be>
c0004a63:	85 ff                	test   edi,edi
c0004a65:	75 0b                	jne    c0004a72 <get_fileinfo+0x179>
c0004a67:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a6b:	ba 01 00 00 00       	mov    edx,0x1
c0004a70:	eb 33                	jmp    c0004aa5 <get_fileinfo+0x1ac>
c0004a72:	b1 08                	mov    cl,0x8
c0004a74:	31 d2                	xor    edx,edx
c0004a76:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a7c:	84 c0                	test   al,al
c0004a7e:	74 25                	je     c0004aa5 <get_fileinfo+0x1ac>
c0004a80:	66 83 f8 2e          	cmp    ax,0x2e
c0004a84:	74 16                	je     c0004a9c <get_fileinfo+0x1a3>
c0004a86:	8d 78 bf             	lea    edi,[eax-0x41]
c0004a89:	66 83 ff 19          	cmp    di,0x19
c0004a8d:	77 0f                	ja     c0004a9e <get_fileinfo+0x1a5>
c0004a8f:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004a92:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004a95:	74 07                	je     c0004a9e <get_fileinfo+0x1a5>
c0004a97:	83 c0 20             	add    eax,0x20
c0004a9a:	eb 02                	jmp    c0004a9e <get_fileinfo+0x1a5>
c0004a9c:	b1 10                	mov    cl,0x10
c0004a9e:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004aa2:	42                   	inc    edx
c0004aa3:	eb d1                	jmp    c0004a76 <get_fileinfo+0x17d>
c0004aa5:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004aaa:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aad:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ab1:	75 04                	jne    c0004ab7 <get_fileinfo+0x1be>
c0004ab3:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ab7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aba:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004abd:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004ac0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac3:	83 c0 1c             	add    eax,0x1c
c0004ac6:	e8 c1 ce ff ff       	call   c000198c <ld_dword>
c0004acb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ad2:	89 03                	mov    DWORD PTR [ebx],eax
c0004ad4:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad7:	83 c0 16             	add    eax,0x16
c0004ada:	e8 a0 ce ff ff       	call   c000197f <ld_word>
c0004adf:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004ae3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae6:	83 c0 18             	add    eax,0x18
c0004ae9:	e8 91 ce ff ff       	call   c000197f <ld_word>
c0004aee:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004af2:	83 c4 1c             	add    esp,0x1c
c0004af5:	5b                   	pop    ebx
c0004af6:	5e                   	pop    esi
c0004af7:	5f                   	pop    edi
c0004af8:	5d                   	pop    ebp
c0004af9:	c3                   	ret    

c0004afa <ld_clust.isra.0>:
c0004afa:	56                   	push   esi
c0004afb:	89 c6                	mov    esi,eax
c0004afd:	53                   	push   ebx
c0004afe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b01:	89 d3                	mov    ebx,edx
c0004b03:	e8 77 ce ff ff       	call   c000197f <ld_word>
c0004b08:	0f b7 c8             	movzx  ecx,ax
c0004b0b:	89 f0                	mov    eax,esi
c0004b0d:	3c 03                	cmp    al,0x3
c0004b0f:	75 0d                	jne    c0004b1e <ld_clust.isra.0+0x24>
c0004b11:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b14:	e8 66 ce ff ff       	call   c000197f <ld_word>
c0004b19:	c1 e0 10             	shl    eax,0x10
c0004b1c:	09 c1                	or     ecx,eax
c0004b1e:	89 c8                	mov    eax,ecx
c0004b20:	5b                   	pop    ebx
c0004b21:	5e                   	pop    esi
c0004b22:	c3                   	ret    

c0004b23 <st_clust.isra.1>:
c0004b23:	56                   	push   esi
c0004b24:	89 c6                	mov    esi,eax
c0004b26:	53                   	push   ebx
c0004b27:	89 d3                	mov    ebx,edx
c0004b29:	0f b7 d1             	movzx  edx,cx
c0004b2c:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b2f:	e8 bd ce ff ff       	call   c00019f1 <st_word>
c0004b34:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b37:	75 0f                	jne    c0004b48 <st_clust.isra.1+0x25>
c0004b39:	c1 e9 10             	shr    ecx,0x10
c0004b3c:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b3f:	89 ca                	mov    edx,ecx
c0004b41:	5b                   	pop    ebx
c0004b42:	5e                   	pop    esi
c0004b43:	e9 a9 ce ff ff       	jmp    c00019f1 <st_word>
c0004b48:	5b                   	pop    ebx
c0004b49:	5e                   	pop    esi
c0004b4a:	c3                   	ret    

c0004b4b <init_alloc_info.isra.2>:
c0004b4b:	56                   	push   esi
c0004b4c:	53                   	push   ebx
c0004b4d:	89 c6                	mov    esi,eax
c0004b4f:	89 d3                	mov    ebx,edx
c0004b51:	51                   	push   ecx
c0004b52:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b54:	83 c0 34             	add    eax,0x34
c0004b57:	e8 30 ce ff ff       	call   c000198c <ld_dword>
c0004b5c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b5f:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b61:	83 c0 38             	add    eax,0x38
c0004b64:	e8 3b ce ff ff       	call   c00019a4 <ld_qword>
c0004b69:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b6c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b6f:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b71:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b74:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b7b:	83 e0 02             	and    eax,0x2
c0004b7e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b81:	5b                   	pop    ebx
c0004b82:	5b                   	pop    ebx
c0004b83:	5e                   	pop    esi
c0004b84:	c3                   	ret    

c0004b85 <follow_path>:
c0004b85:	56                   	push   esi
c0004b86:	53                   	push   ebx
c0004b87:	89 c3                	mov    ebx,eax
c0004b89:	83 ec 14             	sub    esp,0x14
c0004b8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004b90:	8b 30                	mov    esi,DWORD PTR [eax]
c0004b92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b96:	8a 10                	mov    dl,BYTE PTR [eax]
c0004b98:	80 fa 5c             	cmp    dl,0x5c
c0004b9b:	75 07                	jne    c0004ba4 <follow_path+0x1f>
c0004b9d:	40                   	inc    eax
c0004b9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ba2:	eb ee                	jmp    c0004b92 <follow_path+0xd>
c0004ba4:	80 fa 2f             	cmp    dl,0x2f
c0004ba7:	74 f4                	je     c0004b9d <follow_path+0x18>
c0004ba9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bb7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bba:	77 52                	ja     c0004c0e <follow_path+0x89>
c0004bbc:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bc0:	31 d2                	xor    edx,edx
c0004bc2:	89 d8                	mov    eax,ebx
c0004bc4:	e8 12 e3 ff ff       	call   c0002edb <dir_sdi>
c0004bc9:	eb 7c                	jmp    c0004c47 <follow_path+0xc2>
c0004bcb:	89 d8                	mov    eax,ebx
c0004bcd:	e8 6e f2 ff ff       	call   c0003e40 <dir_find>
c0004bd2:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004bd5:	85 c0                	test   eax,eax
c0004bd7:	75 46                	jne    c0004c1f <follow_path+0x9a>
c0004bd9:	80 e2 04             	and    dl,0x4
c0004bdc:	75 69                	jne    c0004c47 <follow_path+0xc2>
c0004bde:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004be2:	74 5e                	je     c0004c42 <follow_path+0xbd>
c0004be4:	8a 06                	mov    al,BYTE PTR [esi]
c0004be6:	3c 04                	cmp    al,0x4
c0004be8:	75 41                	jne    c0004c2b <follow_path+0xa6>
c0004bea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004bed:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004bf1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004bf4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004bf7:	30 c0                	xor    al,al
c0004bf9:	09 d0                	or     eax,edx
c0004bfb:	89 da                	mov    edx,ebx
c0004bfd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c00:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c03:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c06:	8d 46 10             	lea    eax,[esi+0x10]
c0004c09:	e8 3d ff ff ff       	call   c0004b4b <init_alloc_info.isra.2>
c0004c0e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c12:	89 d8                	mov    eax,ebx
c0004c14:	e8 a9 ed ff ff       	call   c00039c2 <create_name>
c0004c19:	85 c0                	test   eax,eax
c0004c1b:	74 ae                	je     c0004bcb <follow_path+0x46>
c0004c1d:	eb 28                	jmp    c0004c47 <follow_path+0xc2>
c0004c1f:	83 f8 04             	cmp    eax,0x4
c0004c22:	75 23                	jne    c0004c47 <follow_path+0xc2>
c0004c24:	80 e2 04             	and    dl,0x4
c0004c27:	74 19                	je     c0004c42 <follow_path+0xbd>
c0004c29:	eb 1c                	jmp    c0004c47 <follow_path+0xc2>
c0004c2b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c2e:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c34:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c38:	e8 bd fe ff ff       	call   c0004afa <ld_clust.isra.0>
c0004c3d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c40:	eb cc                	jmp    c0004c0e <follow_path+0x89>
c0004c42:	b8 05 00 00 00       	mov    eax,0x5
c0004c47:	83 c4 14             	add    esp,0x14
c0004c4a:	5b                   	pop    ebx
c0004c4b:	5e                   	pop    esi
c0004c4c:	c3                   	ret    

c0004c4d <f_mount>:
c0004c4d:	53                   	push   ebx
c0004c4e:	83 ec 18             	sub    esp,0x18
c0004c51:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c55:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c5d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c61:	e8 fb d2 ff ff       	call   c0001f61 <get_ldnumber>
c0004c66:	89 c2                	mov    edx,eax
c0004c68:	b8 0b 00 00 00       	mov    eax,0xb
c0004c6d:	85 d2                	test   edx,edx
c0004c6f:	78 39                	js     c0004caa <f_mount+0x5d>
c0004c71:	8b 04 95 60 31 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcea0]
c0004c78:	85 c0                	test   eax,eax
c0004c7a:	74 03                	je     c0004c7f <f_mount+0x32>
c0004c7c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c83:	85 c0                	test   eax,eax
c0004c85:	74 03                	je     c0004c8a <f_mount+0x3d>
c0004c87:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c8e:	89 04 95 60 31 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcea0],eax
c0004c95:	31 c0                	xor    eax,eax
c0004c97:	84 db                	test   bl,bl
c0004c99:	74 0f                	je     c0004caa <f_mount+0x5d>
c0004c9b:	31 c9                	xor    ecx,ecx
c0004c9d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ca1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ca5:	e8 65 d7 ff ff       	call   c000240f <mount_volume>
c0004caa:	83 c4 18             	add    esp,0x18
c0004cad:	5b                   	pop    ebx
c0004cae:	c3                   	ret    

c0004caf <f_open>:
c0004caf:	55                   	push   ebp
c0004cb0:	bd 09 00 00 00       	mov    ebp,0x9
c0004cb5:	57                   	push   edi
c0004cb6:	56                   	push   esi
c0004cb7:	53                   	push   ebx
c0004cb8:	83 ec 7c             	sub    esp,0x7c
c0004cbb:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cc2:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004cc9:	85 db                	test   ebx,ebx
c0004ccb:	0f 84 10 04 00 00    	je     c00050e1 <f_open+0x432>
c0004cd1:	89 fe                	mov    esi,edi
c0004cd3:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cd7:	83 e6 3f             	and    esi,0x3f
c0004cda:	89 f0                	mov    eax,esi
c0004cdc:	0f b6 c8             	movzx  ecx,al
c0004cdf:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ce6:	e8 24 d7 ff ff       	call   c000240f <mount_volume>
c0004ceb:	89 c5                	mov    ebp,eax
c0004ced:	85 c0                	test   eax,eax
c0004cef:	0f 85 e6 03 00 00    	jne    c00050db <f_open+0x42c>
c0004cf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004cf9:	bd 11 00 00 00       	mov    ebp,0x11
c0004cfe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d02:	83 ec 0c             	sub    esp,0xc
c0004d05:	68 60 04 00 00       	push   0x460
c0004d0a:	e8 d9 36 00 00       	call   c00083e8 <ff_memalloc>
c0004d0f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d13:	83 c4 10             	add    esp,0x10
c0004d16:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d1b:	0f 84 c0 03 00 00    	je     c00050e1 <f_open+0x432>
c0004d21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d25:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d29:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d2f:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d32:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d35:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d3c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d40:	e8 40 fe ff ff       	call   c0004b85 <follow_path>
c0004d45:	89 c5                	mov    ebp,eax
c0004d47:	85 c0                	test   eax,eax
c0004d49:	75 0c                	jne    c0004d57 <f_open+0xa8>
c0004d4b:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d50:	79 05                	jns    c0004d57 <f_open+0xa8>
c0004d52:	bd 06 00 00 00       	mov    ebp,0x6
c0004d57:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d5d:	0f 84 84 01 00 00    	je     c0004ee7 <f_open+0x238>
c0004d63:	85 ed                	test   ebp,ebp
c0004d65:	74 20                	je     c0004d87 <f_open+0xd8>
c0004d67:	83 fd 04             	cmp    ebp,0x4
c0004d6a:	0f 85 58 03 00 00    	jne    c00050c8 <f_open+0x419>
c0004d70:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d74:	83 ce 08             	or     esi,0x8
c0004d77:	e8 8a f2 ff ff       	call   c0004006 <dir_register>
c0004d7c:	89 c5                	mov    ebp,eax
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	74 2f                	je     c0004db1 <f_open+0x102>
c0004d82:	e9 41 03 00 00       	jmp    c00050c8 <f_open+0x419>
c0004d87:	bd 07 00 00 00       	mov    ebp,0x7
c0004d8c:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004d91:	0f 85 31 03 00 00    	jne    c00050c8 <f_open+0x419>
c0004d97:	bd 08 00 00 00       	mov    ebp,0x8
c0004d9c:	f7 c7 04 00 00 00    	test   edi,0x4
c0004da2:	0f 85 20 03 00 00    	jne    c00050c8 <f_open+0x419>
c0004da8:	83 e7 08             	and    edi,0x8
c0004dab:	0f 84 65 01 00 00    	je     c0004f16 <f_open+0x267>
c0004db1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004db5:	8a 02                	mov    al,BYTE PTR [edx]
c0004db7:	3c 04                	cmp    al,0x4
c0004db9:	0f 85 97 00 00 00    	jne    c0004e56 <f_open+0x1a7>
c0004dbf:	8d 42 10             	lea    eax,[edx+0x10]
c0004dc2:	89 13                	mov    DWORD PTR [ebx],edx
c0004dc4:	89 da                	mov    edx,ebx
c0004dc6:	e8 80 fd ff ff       	call   c0004b4b <init_alloc_info.isra.2>
c0004dcb:	31 d2                	xor    edx,edx
c0004dcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dd1:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004dd6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004dd9:	83 c0 02             	add    eax,0x2
c0004ddc:	e8 32 cc ff ff       	call   c0001a13 <mem_set>
c0004de1:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004de6:	31 d2                	xor    edx,edx
c0004de8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004def:	83 c0 26             	add    eax,0x26
c0004df2:	e8 1c cc ff ff       	call   c0001a13 <mem_set>
c0004df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dfb:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004dfe:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e07:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e0a:	83 c0 08             	add    eax,0x8
c0004e0d:	e8 e3 cb ff ff       	call   c00019f5 <st_dword>
c0004e12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e19:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e1d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e21:	e8 b7 ea ff ff       	call   c00038dd <store_xdir>
c0004e26:	89 c5                	mov    ebp,eax
c0004e28:	85 c0                	test   eax,eax
c0004e2a:	0f 85 98 02 00 00    	jne    c00050c8 <f_open+0x419>
c0004e30:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e33:	85 d2                	test   edx,edx
c0004e35:	0f 84 db 00 00 00    	je     c0004f16 <f_open+0x267>
c0004e3b:	31 c9                	xor    ecx,ecx
c0004e3d:	89 d8                	mov    eax,ebx
c0004e3f:	e8 8e e3 ff ff       	call   c00031d2 <remove_chain>
c0004e44:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e48:	89 c5                	mov    ebp,eax
c0004e4a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e4d:	48                   	dec    eax
c0004e4e:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e51:	e9 b8 00 00 00       	jmp    c0004f0e <f_open+0x25f>
c0004e56:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e5a:	89 ea                	mov    edx,ebp
c0004e5c:	e8 99 fc ff ff       	call   c0004afa <ld_clust.isra.0>
c0004e61:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e66:	89 c7                	mov    edi,eax
c0004e68:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e6b:	e8 85 cb ff ff       	call   c00019f5 <st_dword>
c0004e70:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e74:	31 c9                	xor    ecx,ecx
c0004e76:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7e:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e82:	e8 9c fc ff ff       	call   c0004b23 <st_clust.isra.1>
c0004e87:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e8b:	31 d2                	xor    edx,edx
c0004e8d:	83 c0 1c             	add    eax,0x1c
c0004e90:	e8 60 cb ff ff       	call   c00019f5 <st_dword>
c0004e95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e99:	85 ff                	test   edi,edi
c0004e9b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e9f:	74 75                	je     c0004f16 <f_open+0x267>
c0004ea1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea5:	31 c9                	xor    ecx,ecx
c0004ea7:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004eaa:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ead:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004eb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004eb5:	89 fa                	mov    edx,edi
c0004eb7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ebb:	e8 12 e3 ff ff       	call   c00031d2 <remove_chain>
c0004ec0:	89 c5                	mov    ebp,eax
c0004ec2:	85 c0                	test   eax,eax
c0004ec4:	0f 85 fe 01 00 00    	jne    c00050c8 <f_open+0x419>
c0004eca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004ece:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004ed2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed6:	4f                   	dec    edi
c0004ed7:	e8 81 d2 ff ff       	call   c000215d <move_window>
c0004edc:	89 c5                	mov    ebp,eax
c0004ede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee2:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004ee5:	eb 27                	jmp    c0004f0e <f_open+0x25f>
c0004ee7:	85 ed                	test   ebp,ebp
c0004ee9:	0f 85 d9 01 00 00    	jne    c00050c8 <f_open+0x419>
c0004eef:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004ef3:	bd 04 00 00 00       	mov    ebp,0x4
c0004ef8:	a8 10                	test   al,0x10
c0004efa:	0f 85 c8 01 00 00    	jne    c00050c8 <f_open+0x419>
c0004f00:	83 e7 02             	and    edi,0x2
c0004f03:	74 11                	je     c0004f16 <f_open+0x267>
c0004f05:	bd 07 00 00 00       	mov    ebp,0x7
c0004f0a:	a8 01                	test   al,0x1
c0004f0c:	eb 02                	jmp    c0004f10 <f_open+0x261>
c0004f0e:	85 ed                	test   ebp,ebp
c0004f10:	0f 85 b2 01 00 00    	jne    c00050c8 <f_open+0x419>
c0004f16:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f1c:	74 03                	je     c0004f21 <f_open+0x272>
c0004f1e:	83 ce 40             	or     esi,0x40
c0004f21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f25:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f28:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f2b:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f2e:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f31:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f35:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f38:	8a 02                	mov    al,BYTE PTR [edx]
c0004f3a:	3c 04                	cmp    al,0x4
c0004f3c:	75 2a                	jne    c0004f68 <f_open+0x2b9>
c0004f3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f42:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f4e:	30 c0                	xor    al,al
c0004f50:	09 c8                	or     eax,ecx
c0004f52:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f55:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f59:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f5c:	8d 42 10             	lea    eax,[edx+0x10]
c0004f5f:	89 da                	mov    edx,ebx
c0004f61:	e8 e5 fb ff ff       	call   c0004b4b <init_alloc_info.isra.2>
c0004f66:	eb 1c                	jmp    c0004f84 <f_open+0x2d5>
c0004f68:	89 fa                	mov    edx,edi
c0004f6a:	e8 8b fb ff ff       	call   c0004afa <ld_clust.isra.0>
c0004f6f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f72:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f75:	e8 12 ca ff ff       	call   c000198c <ld_dword>
c0004f7a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f81:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004f84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f88:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004f8f:	89 03                	mov    DWORD PTR [ebx],eax
c0004f91:	31 d2                	xor    edx,edx
c0004f93:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004f97:	b9 00 02 00 00       	mov    ecx,0x200
c0004f9c:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004fa0:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fa4:	89 f0                	mov    eax,esi
c0004fa6:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004fad:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fb0:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fb7:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fba:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fc1:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fc8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fcc:	e8 42 ca ff ff       	call   c0001a13 <mem_set>
c0004fd1:	83 e6 20             	and    esi,0x20
c0004fd4:	75 07                	jne    c0004fdd <f_open+0x32e>
c0004fd6:	31 ed                	xor    ebp,ebp
c0004fd8:	e9 eb 00 00 00       	jmp    c00050c8 <f_open+0x419>
c0004fdd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004fe0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004fe3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004fe7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004feb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fef:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0004ff3:	74 e1                	je     c0004fd6 <f_open+0x327>
c0004ff5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004ff9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ffd:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005000:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500a:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000500e:	31 ff                	xor    edi,edi
c0005010:	c1 e5 09             	shl    ebp,0x9
c0005013:	89 ee                	mov    esi,ebp
c0005015:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005019:	89 f8                	mov    eax,edi
c000501b:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000501f:	73 22                	jae    c0005043 <f_open+0x394>
c0005021:	89 d8                	mov    eax,ebx
c0005023:	e8 bd dc ff ff       	call   c0002ce5 <get_fat>
c0005028:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000502c:	89 c2                	mov    edx,eax
c000502e:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005032:	83 f8 01             	cmp    eax,0x1
c0005035:	76 10                	jbe    c0005047 <f_open+0x398>
c0005037:	83 f8 ff             	cmp    eax,0xffffffff
c000503a:	75 d9                	jne    c0005015 <f_open+0x366>
c000503c:	bd 01 00 00 00       	mov    ebp,0x1
c0005041:	eb 09                	jmp    c000504c <f_open+0x39d>
c0005043:	31 ed                	xor    ebp,ebp
c0005045:	eb 05                	jmp    c000504c <f_open+0x39d>
c0005047:	bd 02 00 00 00       	mov    ebp,0x2
c000504c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000504f:	85 ed                	test   ebp,ebp
c0005051:	75 75                	jne    c00050c8 <f_open+0x419>
c0005053:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005057:	25 ff 01 00 00       	and    eax,0x1ff
c000505c:	0f 84 74 ff ff ff    	je     c0004fd6 <f_open+0x327>
c0005062:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005066:	bd 02 00 00 00       	mov    ebp,0x2
c000506b:	89 c8                	mov    eax,ecx
c000506d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005071:	e8 a2 cb ff ff       	call   c0001c18 <clst2sect>
c0005076:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000507a:	89 d7                	mov    edi,edx
c000507c:	09 c7                	or     edi,eax
c000507e:	74 48                	je     c00050c8 <f_open+0x419>
c0005080:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005084:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005088:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005090:	0f ac fe 09          	shrd   esi,edi,0x9
c0005094:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005098:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000509c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000509f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00050a3:	83 ec 0c             	sub    esp,0xc
c00050a6:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050a9:	6a 01                	push   0x1
c00050ab:	52                   	push   edx
c00050ac:	50                   	push   eax
c00050ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050b1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050b5:	50                   	push   eax
c00050b6:	e8 79 c8 ff ff       	call   c0001934 <disk_read>
c00050bb:	83 c4 20             	add    esp,0x20
c00050be:	85 c0                	test   eax,eax
c00050c0:	0f 95 c0             	setne  al
c00050c3:	0f b6 c0             	movzx  eax,al
c00050c6:	89 c5                	mov    ebp,eax
c00050c8:	83 ec 0c             	sub    esp,0xc
c00050cb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050cf:	e8 2c 33 00 00       	call   c0008400 <ff_memfree>
c00050d4:	83 c4 10             	add    esp,0x10
c00050d7:	85 ed                	test   ebp,ebp
c00050d9:	74 06                	je     c00050e1 <f_open+0x432>
c00050db:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050e1:	83 c4 7c             	add    esp,0x7c
c00050e4:	89 e8                	mov    eax,ebp
c00050e6:	5b                   	pop    ebx
c00050e7:	5e                   	pop    esi
c00050e8:	5f                   	pop    edi
c00050e9:	5d                   	pop    ebp
c00050ea:	c3                   	ret    

c00050eb <f_read>:
c00050eb:	55                   	push   ebp
c00050ec:	57                   	push   edi
c00050ed:	56                   	push   esi
c00050ee:	53                   	push   ebx
c00050ef:	83 ec 2c             	sub    esp,0x2c
c00050f2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00050f6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00050fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005100:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005104:	89 d8                	mov    eax,ebx
c0005106:	e8 77 cf ff ff       	call   c0002082 <validate>
c000510b:	89 c5                	mov    ebp,eax
c000510d:	85 c0                	test   eax,eax
c000510f:	0f 85 4c 02 00 00    	jne    c0005361 <f_read+0x276>
c0005115:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005119:	85 ed                	test   ebp,ebp
c000511b:	0f 85 40 02 00 00    	jne    c0005361 <f_read+0x276>
c0005121:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005125:	0f 84 31 02 00 00    	je     c000535c <f_read+0x271>
c000512b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000512e:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005131:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005134:	bf 00 00 00 00       	mov    edi,0x0
c0005139:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000513c:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005140:	89 d1                	mov    ecx,edx
c0005142:	19 f9                	sbb    ecx,edi
c0005144:	0f 83 cf 00 00 00    	jae    c0005219 <f_read+0x12e>
c000514a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000514e:	e9 c6 00 00 00       	jmp    c0005219 <f_read+0x12e>
c0005153:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005156:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005159:	89 d0                	mov    eax,edx
c000515b:	25 ff 01 00 00       	and    eax,0x1ff
c0005160:	0f 85 c9 01 00 00    	jne    c000532f <f_read+0x244>
c0005166:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516a:	89 d6                	mov    esi,edx
c000516c:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005170:	89 cf                	mov    edi,ecx
c0005172:	48                   	dec    eax
c0005173:	0f ac fe 09          	shrd   esi,edi,0x9
c0005177:	21 f0                	and    eax,esi
c0005179:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000517d:	0f 84 a6 00 00 00    	je     c0005229 <f_read+0x13e>
c0005183:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005187:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000518a:	89 c8                	mov    eax,ecx
c000518c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000518f:	e8 84 ca ff ff       	call   c0001c18 <clst2sect>
c0005194:	89 d7                	mov    edi,edx
c0005196:	09 c7                	or     edi,eax
c0005198:	0f 84 b4 00 00 00    	je     c0005252 <f_read+0x167>
c000519e:	31 ff                	xor    edi,edi
c00051a0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00051a4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051a7:	01 c6                	add    esi,eax
c00051a9:	11 d7                	adc    edi,edx
c00051ab:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051b3:	0f 86 fd 00 00 00    	jbe    c00052b6 <f_read+0x1cb>
c00051b9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051c1:	c1 e8 09             	shr    eax,0x9
c00051c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00051c7:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051cb:	03 14 24             	add    edx,DWORD PTR [esp]
c00051ce:	39 c2                	cmp    edx,eax
c00051d0:	76 07                	jbe    c00051d9 <f_read+0xee>
c00051d2:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00051d9:	83 ec 0c             	sub    esp,0xc
c00051dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051e0:	57                   	push   edi
c00051e1:	56                   	push   esi
c00051e2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00051e6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051ea:	50                   	push   eax
c00051eb:	e8 44 c7 ff ff       	call   c0001934 <disk_read>
c00051f0:	83 c4 20             	add    esp,0x20
c00051f3:	85 c0                	test   eax,eax
c00051f5:	75 6e                	jne    c0005265 <f_read+0x17a>
c00051f7:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00051fb:	78 7e                	js     c000527b <f_read+0x190>
c00051fd:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005200:	c1 e6 09             	shl    esi,0x9
c0005203:	31 ff                	xor    edi,edi
c0005205:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005209:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000520d:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005211:	01 30                	add    DWORD PTR [eax],esi
c0005213:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005216:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005219:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000521e:	0f 85 2f ff ff ff    	jne    c0005153 <f_read+0x68>
c0005224:	e9 38 01 00 00       	jmp    c0005361 <f_read+0x276>
c0005229:	89 c8                	mov    eax,ecx
c000522b:	09 d0                	or     eax,edx
c000522d:	75 05                	jne    c0005234 <f_read+0x149>
c000522f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005232:	eb 19                	jmp    c000524d <f_read+0x162>
c0005234:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005238:	74 09                	je     c0005243 <f_read+0x158>
c000523a:	89 d8                	mov    eax,ebx
c000523c:	e8 f8 c9 ff ff       	call   c0001c39 <clmt_clust>
c0005241:	eb 0a                	jmp    c000524d <f_read+0x162>
c0005243:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005246:	89 d8                	mov    eax,ebx
c0005248:	e8 98 da ff ff       	call   c0002ce5 <get_fat>
c000524d:	83 f8 01             	cmp    eax,0x1
c0005250:	77 0e                	ja     c0005260 <f_read+0x175>
c0005252:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005256:	bd 02 00 00 00       	mov    ebp,0x2
c000525b:	e9 01 01 00 00       	jmp    c0005361 <f_read+0x276>
c0005260:	83 f8 ff             	cmp    eax,0xffffffff
c0005263:	75 0e                	jne    c0005273 <f_read+0x188>
c0005265:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005269:	bd 01 00 00 00       	mov    ebp,0x1
c000526e:	e9 ee 00 00 00       	jmp    c0005361 <f_read+0x276>
c0005273:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005276:	e9 08 ff ff ff       	jmp    c0005183 <f_read+0x98>
c000527b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000527e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005281:	29 f0                	sub    eax,esi
c0005283:	19 fa                	sbb    edx,edi
c0005285:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005288:	89 d7                	mov    edi,edx
c000528a:	ba 00 00 00 00       	mov    edx,0x0
c000528f:	89 f9                	mov    ecx,edi
c0005291:	19 d1                	sbb    ecx,edx
c0005293:	0f 83 64 ff ff ff    	jae    c00051fd <f_read+0x112>
c0005299:	89 c7                	mov    edi,eax
c000529b:	8d 53 50             	lea    edx,[ebx+0x50]
c000529e:	c1 e7 09             	shl    edi,0x9
c00052a1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00052a5:	b9 00 02 00 00       	mov    ecx,0x200
c00052aa:	01 f8                	add    eax,edi
c00052ac:	e8 4d c7 ff ff       	call   c00019fe <mem_cpy>
c00052b1:	e9 47 ff ff ff       	jmp    c00051fd <f_read+0x112>
c00052b6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052b9:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00052bf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052c3:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052c7:	75 05                	jne    c00052ce <f_read+0x1e3>
c00052c9:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052cc:	74 5b                	je     c0005329 <f_read+0x23e>
c00052ce:	8d 43 50             	lea    eax,[ebx+0x50]
c00052d1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052d9:	79 2a                	jns    c0005305 <f_read+0x21a>
c00052db:	83 ec 0c             	sub    esp,0xc
c00052de:	6a 01                	push   0x1
c00052e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00052ec:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052f0:	50                   	push   eax
c00052f1:	e8 54 c6 ff ff       	call   c000194a <disk_write>
c00052f6:	83 c4 20             	add    esp,0x20
c00052f9:	85 c0                	test   eax,eax
c00052fb:	0f 85 64 ff ff ff    	jne    c0005265 <f_read+0x17a>
c0005301:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005305:	83 ec 0c             	sub    esp,0xc
c0005308:	6a 01                	push   0x1
c000530a:	57                   	push   edi
c000530b:	56                   	push   esi
c000530c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005310:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005314:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005318:	50                   	push   eax
c0005319:	e8 16 c6 ff ff       	call   c0001934 <disk_read>
c000531e:	83 c4 20             	add    esp,0x20
c0005321:	85 c0                	test   eax,eax
c0005323:	0f 85 3c ff ff ff    	jne    c0005265 <f_read+0x17a>
c0005329:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000532c:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000532f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005332:	ba 00 02 00 00       	mov    edx,0x200
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005340:	29 c2                	sub    edx,eax
c0005342:	39 d6                	cmp    esi,edx
c0005344:	76 02                	jbe    c0005348 <f_read+0x25d>
c0005346:	89 d6                	mov    esi,edx
c0005348:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000534c:	89 f1                	mov    ecx,esi
c000534e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005352:	e8 a7 c6 ff ff       	call   c00019fe <mem_cpy>
c0005357:	e9 a7 fe ff ff       	jmp    c0005203 <f_read+0x118>
c000535c:	bd 07 00 00 00       	mov    ebp,0x7
c0005361:	83 c4 2c             	add    esp,0x2c
c0005364:	89 e8                	mov    eax,ebp
c0005366:	5b                   	pop    ebx
c0005367:	5e                   	pop    esi
c0005368:	5f                   	pop    edi
c0005369:	5d                   	pop    ebp
c000536a:	c3                   	ret    

c000536b <f_write>:
c000536b:	55                   	push   ebp
c000536c:	57                   	push   edi
c000536d:	56                   	push   esi
c000536e:	53                   	push   ebx
c000536f:	83 ec 2c             	sub    esp,0x2c
c0005372:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005376:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000537a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005380:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005384:	89 d8                	mov    eax,ebx
c0005386:	e8 f7 cc ff ff       	call   c0002082 <validate>
c000538b:	89 c5                	mov    ebp,eax
c000538d:	85 c0                	test   eax,eax
c000538f:	0f 85 86 02 00 00    	jne    c000561b <f_write+0x2b0>
c0005395:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005399:	85 ed                	test   ebp,ebp
c000539b:	0f 85 7a 02 00 00    	jne    c000561b <f_write+0x2b0>
c00053a1:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053a5:	0f 84 6b 02 00 00    	je     c0005616 <f_write+0x2ab>
c00053ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053af:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053b2:	0f 84 43 01 00 00    	je     c00054fb <f_write+0x190>
c00053b8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053bb:	89 c1                	mov    ecx,eax
c00053bd:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053c1:	0f 83 34 01 00 00    	jae    c00054fb <f_write+0x190>
c00053c7:	f7 d0                	not    eax
c00053c9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053cd:	e9 29 01 00 00       	jmp    c00054fb <f_write+0x190>
c00053d2:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053d5:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053d8:	89 d0                	mov    eax,edx
c00053da:	25 ff 01 00 00       	and    eax,0x1ff
c00053df:	0f 85 00 02 00 00    	jne    c00055e5 <f_write+0x27a>
c00053e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e9:	89 d6                	mov    esi,edx
c00053eb:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00053ef:	89 cf                	mov    edi,ecx
c00053f1:	48                   	dec    eax
c00053f2:	0f ac fe 09          	shrd   esi,edi,0x9
c00053f6:	21 f0                	and    eax,esi
c00053f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053fc:	0f 84 06 01 00 00    	je     c0005508 <f_write+0x19d>
c0005402:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005406:	0f 88 6e 01 00 00    	js     c000557a <f_write+0x20f>
c000540c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005410:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005413:	89 c8                	mov    eax,ecx
c0005415:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005419:	e8 fa c7 ff ff       	call   c0001c18 <clst2sect>
c000541e:	89 d1                	mov    ecx,edx
c0005420:	09 c1                	or     ecx,eax
c0005422:	0f 84 1c 01 00 00    	je     c0005544 <f_write+0x1d9>
c0005428:	31 ff                	xor    edi,edi
c000542a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000542e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005432:	01 c6                	add    esi,eax
c0005434:	11 d7                	adc    edi,edx
c0005436:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000543e:	0f 86 63 01 00 00    	jbe    c00055a7 <f_write+0x23c>
c0005444:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000544c:	c1 e8 09             	shr    eax,0x9
c000544f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005453:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005457:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000545b:	39 c2                	cmp    edx,eax
c000545d:	76 08                	jbe    c0005467 <f_write+0xfc>
c000545f:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005463:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005467:	83 ec 0c             	sub    esp,0xc
c000546a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000546e:	57                   	push   edi
c000546f:	56                   	push   esi
c0005470:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005474:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005478:	50                   	push   eax
c0005479:	e8 cc c4 ff ff       	call   c000194a <disk_write>
c000547e:	83 c4 20             	add    esp,0x20
c0005481:	85 c0                	test   eax,eax
c0005483:	0f 85 ce 00 00 00    	jne    c0005557 <f_write+0x1ec>
c0005489:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000548c:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000548f:	29 f0                	sub    eax,esi
c0005491:	19 fa                	sbb    edx,edi
c0005493:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005497:	89 d7                	mov    edi,edx
c0005499:	ba 00 00 00 00       	mov    edx,0x0
c000549e:	89 f9                	mov    ecx,edi
c00054a0:	19 d1                	sbb    ecx,edx
c00054a2:	73 1c                	jae    c00054c0 <f_write+0x155>
c00054a4:	89 c7                	mov    edi,eax
c00054a6:	b9 00 02 00 00       	mov    ecx,0x200
c00054ab:	c1 e7 09             	shl    edi,0x9
c00054ae:	8d 43 50             	lea    eax,[ebx+0x50]
c00054b1:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054b5:	89 fa                	mov    edx,edi
c00054b7:	e8 42 c5 ff ff       	call   c00019fe <mem_cpy>
c00054bc:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054c0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054c4:	c1 e6 09             	shl    esi,0x9
c00054c7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054cb:	31 ff                	xor    edi,edi
c00054cd:	01 30                	add    DWORD PTR [eax],esi
c00054cf:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054d3:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054d7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054da:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054dd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054e0:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054e3:	89 c1                	mov    ecx,eax
c00054e5:	39 f2                	cmp    edx,esi
c00054e7:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00054ea:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00054ed:	19 f9                	sbb    ecx,edi
c00054ef:	73 04                	jae    c00054f5 <f_write+0x18a>
c00054f1:	89 f2                	mov    edx,esi
c00054f3:	89 f8                	mov    eax,edi
c00054f5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00054f8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 cc fe ff ff    	jne    c00053d2 <f_write+0x67>
c0005506:	eb 2e                	jmp    c0005536 <f_write+0x1cb>
c0005508:	89 c8                	mov    eax,ecx
c000550a:	09 d0                	or     eax,edx
c000550c:	75 0b                	jne    c0005519 <f_write+0x1ae>
c000550e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005511:	31 d2                	xor    edx,edx
c0005513:	85 c0                	test   eax,eax
c0005515:	75 28                	jne    c000553f <f_write+0x1d4>
c0005517:	eb 12                	jmp    c000552b <f_write+0x1c0>
c0005519:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551d:	74 09                	je     c0005528 <f_write+0x1bd>
c000551f:	89 d8                	mov    eax,ebx
c0005521:	e8 13 c7 ff ff       	call   c0001c39 <clmt_clust>
c0005526:	eb 0a                	jmp    c0005532 <f_write+0x1c7>
c0005528:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000552b:	89 d8                	mov    eax,ebx
c000552d:	e8 a1 da ff ff       	call   c0002fd3 <create_chain>
c0005532:	85 c0                	test   eax,eax
c0005534:	75 09                	jne    c000553f <f_write+0x1d4>
c0005536:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000553a:	e9 dc 00 00 00       	jmp    c000561b <f_write+0x2b0>
c000553f:	83 f8 01             	cmp    eax,0x1
c0005542:	75 0e                	jne    c0005552 <f_write+0x1e7>
c0005544:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005548:	bd 02 00 00 00       	mov    ebp,0x2
c000554d:	e9 c9 00 00 00       	jmp    c000561b <f_write+0x2b0>
c0005552:	83 f8 ff             	cmp    eax,0xffffffff
c0005555:	75 0e                	jne    c0005565 <f_write+0x1fa>
c0005557:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000555b:	bd 01 00 00 00       	mov    ebp,0x1
c0005560:	e9 b6 00 00 00       	jmp    c000561b <f_write+0x2b0>
c0005565:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005568:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000556c:	0f 85 90 fe ff ff    	jne    c0005402 <f_write+0x97>
c0005572:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005575:	e9 88 fe ff ff       	jmp    c0005402 <f_write+0x97>
c000557a:	83 ec 0c             	sub    esp,0xc
c000557d:	8d 43 50             	lea    eax,[ebx+0x50]
c0005580:	6a 01                	push   0x1
c0005582:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005585:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005588:	50                   	push   eax
c0005589:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000558d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005591:	50                   	push   eax
c0005592:	e8 b3 c3 ff ff       	call   c000194a <disk_write>
c0005597:	83 c4 20             	add    esp,0x20
c000559a:	85 c0                	test   eax,eax
c000559c:	75 b9                	jne    c0005557 <f_write+0x1ec>
c000559e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055a2:	e9 65 fe ff ff       	jmp    c000540c <f_write+0xa1>
c00055a7:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055aa:	75 05                	jne    c00055b1 <f_write+0x246>
c00055ac:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055af:	74 2e                	je     c00055df <f_write+0x274>
c00055b1:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055b4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055b7:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055ba:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055bd:	73 20                	jae    c00055df <f_write+0x274>
c00055bf:	83 ec 0c             	sub    esp,0xc
c00055c2:	8d 43 50             	lea    eax,[ebx+0x50]
c00055c5:	6a 01                	push   0x1
c00055c7:	57                   	push   edi
c00055c8:	56                   	push   esi
c00055c9:	50                   	push   eax
c00055ca:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055ce:	50                   	push   eax
c00055cf:	e8 60 c3 ff ff       	call   c0001934 <disk_read>
c00055d4:	83 c4 20             	add    esp,0x20
c00055d7:	85 c0                	test   eax,eax
c00055d9:	0f 85 78 ff ff ff    	jne    c0005557 <f_write+0x1ec>
c00055df:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055e2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055e5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055e8:	ba 00 02 00 00       	mov    edx,0x200
c00055ed:	25 ff 01 00 00       	and    eax,0x1ff
c00055f2:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055f6:	29 c2                	sub    edx,eax
c00055f8:	39 d6                	cmp    esi,edx
c00055fa:	76 02                	jbe    c00055fe <f_write+0x293>
c00055fc:	89 d6                	mov    esi,edx
c00055fe:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005602:	89 f1                	mov    ecx,esi
c0005604:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005608:	e8 f1 c3 ff ff       	call   c00019fe <mem_cpy>
c000560d:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005611:	e9 b1 fe ff ff       	jmp    c00054c7 <f_write+0x15c>
c0005616:	bd 07 00 00 00       	mov    ebp,0x7
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 e8                	mov    eax,ebp
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_sync>:
c0005625:	56                   	push   esi
c0005626:	53                   	push   ebx
c0005627:	83 ec 64             	sub    esp,0x64
c000562a:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000562e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005632:	89 d8                	mov    eax,ebx
c0005634:	e8 49 ca ff ff       	call   c0002082 <validate>
c0005639:	85 c0                	test   eax,eax
c000563b:	0f 85 ba 01 00 00    	jne    c00057fb <f_sync+0x1d6>
c0005641:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005644:	f6 c2 40             	test   dl,0x40
c0005647:	0f 84 ae 01 00 00    	je     c00057fb <f_sync+0x1d6>
c000564d:	84 d2                	test   dl,dl
c000564f:	79 33                	jns    c0005684 <f_sync+0x5f>
c0005651:	83 ec 0c             	sub    esp,0xc
c0005654:	8d 43 50             	lea    eax,[ebx+0x50]
c0005657:	6a 01                	push   0x1
c0005659:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000565c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000565f:	50                   	push   eax
c0005660:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005664:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005668:	50                   	push   eax
c0005669:	e8 dc c2 ff ff       	call   c000194a <disk_write>
c000566e:	83 c4 20             	add    esp,0x20
c0005671:	89 c2                	mov    edx,eax
c0005673:	b8 01 00 00 00       	mov    eax,0x1
c0005678:	85 d2                	test   edx,edx
c000567a:	0f 85 7b 01 00 00    	jne    c00057fb <f_sync+0x1d6>
c0005680:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005688:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000568b:	0f 85 11 01 00 00    	jne    c00057a2 <f_sync+0x17d>
c0005691:	89 d8                	mov    eax,ebx
c0005693:	e8 13 d6 ff ff       	call   c0002cab <fill_first_frag>
c0005698:	85 c0                	test   eax,eax
c000569a:	0f 85 5b 01 00 00    	jne    c00057fb <f_sync+0x1d6>
c00056a0:	83 c9 ff             	or     ecx,0xffffffff
c00056a3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056a6:	89 d8                	mov    eax,ebx
c00056a8:	e8 c9 d5 ff ff       	call   c0002c76 <fill_last_frag>
c00056ad:	85 c0                	test   eax,eax
c00056af:	0f 85 46 01 00 00    	jne    c00057fb <f_sync+0x1d6>
c00056b5:	83 ec 0c             	sub    esp,0xc
c00056b8:	68 60 04 00 00       	push   0x460
c00056bd:	e8 26 2d 00 00       	call   c00083e8 <ff_memalloc>
c00056c2:	83 c4 10             	add    esp,0x10
c00056c5:	89 c6                	mov    esi,eax
c00056c7:	b8 11 00 00 00       	mov    eax,0x11
c00056cc:	85 f6                	test   esi,esi
c00056ce:	0f 84 27 01 00 00    	je     c00057fb <f_sync+0x1d6>
c00056d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056d8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056de:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056e1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00056e4:	89 da                	mov    edx,ebx
c00056e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00056ea:	e8 af df ff ff       	call   c000369e <load_obj_xdir>
c00056ef:	85 c0                	test   eax,eax
c00056f1:	0f 85 95 00 00 00    	jne    c000578c <f_sync+0x167>
c00056f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056fb:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00056fe:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005702:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005705:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005708:	83 ca 01             	or     edx,0x1
c000570b:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000570e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005711:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005714:	83 c0 34             	add    eax,0x34
c0005717:	e8 d9 c2 ff ff       	call   c00019f5 <st_dword>
c000571c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005720:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005723:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005726:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005729:	83 c0 38             	add    eax,0x38
c000572c:	e8 c7 c2 ff ff       	call   c00019f8 <st_qword>
c0005731:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000573b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000573e:	83 c0 28             	add    eax,0x28
c0005741:	e8 b2 c2 ff ff       	call   c00019f8 <st_qword>
c0005746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000574a:	ba 00 00 21 50       	mov    edx,0x50210000
c000574f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005752:	83 c0 0c             	add    eax,0xc
c0005755:	e8 9b c2 ff ff       	call   c00019f5 <st_dword>
c000575a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000575e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005761:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005765:	31 d2                	xor    edx,edx
c0005767:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000576a:	83 c0 10             	add    eax,0x10
c000576d:	e8 83 c2 ff ff       	call   c00019f5 <st_dword>
c0005772:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005776:	e8 62 e1 ff ff       	call   c00038dd <store_xdir>
c000577b:	85 c0                	test   eax,eax
c000577d:	75 0d                	jne    c000578c <f_sync+0x167>
c000577f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005783:	e8 00 eb ff ff       	call   c0004288 <sync_fs>
c0005788:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000578c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005790:	83 ec 0c             	sub    esp,0xc
c0005793:	56                   	push   esi
c0005794:	e8 67 2c 00 00       	call   c0008400 <ff_memfree>
c0005799:	83 c4 10             	add    esp,0x10
c000579c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057a0:	eb 59                	jmp    c00057fb <f_sync+0x1d6>
c00057a2:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057a5:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057a8:	e8 b0 c9 ff ff       	call   c000215d <move_window>
c00057ad:	85 c0                	test   eax,eax
c00057af:	75 4a                	jne    c00057fb <f_sync+0x1d6>
c00057b1:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057b4:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057b8:	89 f2                	mov    edx,esi
c00057ba:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057bf:	e8 5f f3 ff ff       	call   c0004b23 <st_clust.isra.1>
c00057c4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057c7:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057ca:	e8 26 c2 ff ff       	call   c00019f5 <st_dword>
c00057cf:	8d 46 16             	lea    eax,[esi+0x16]
c00057d2:	ba 00 00 21 50       	mov    edx,0x50210000
c00057d7:	e8 19 c2 ff ff       	call   c00019f5 <st_dword>
c00057dc:	8d 46 12             	lea    eax,[esi+0x12]
c00057df:	31 d2                	xor    edx,edx
c00057e1:	e8 0b c2 ff ff       	call   c00019f1 <st_word>
c00057e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ea:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00057ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f2:	e8 91 ea ff ff       	call   c0004288 <sync_fs>
c00057f7:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00057fb:	83 c4 64             	add    esp,0x64
c00057fe:	5b                   	pop    ebx
c00057ff:	5e                   	pop    esi
c0005800:	c3                   	ret    

c0005801 <f_close>:
c0005801:	53                   	push   ebx
c0005802:	83 ec 24             	sub    esp,0x24
c0005805:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005809:	53                   	push   ebx
c000580a:	e8 16 fe ff ff       	call   c0005625 <f_sync>
c000580f:	83 c4 10             	add    esp,0x10
c0005812:	85 c0                	test   eax,eax
c0005814:	75 15                	jne    c000582b <f_close+0x2a>
c0005816:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000581a:	89 d8                	mov    eax,ebx
c000581c:	e8 61 c8 ff ff       	call   c0002082 <validate>
c0005821:	85 c0                	test   eax,eax
c0005823:	75 06                	jne    c000582b <f_close+0x2a>
c0005825:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000582b:	83 c4 18             	add    esp,0x18
c000582e:	5b                   	pop    ebx
c000582f:	c3                   	ret    

c0005830 <f_lseek>:
c0005830:	55                   	push   ebp
c0005831:	57                   	push   edi
c0005832:	56                   	push   esi
c0005833:	53                   	push   ebx
c0005834:	83 ec 3c             	sub    esp,0x3c
c0005837:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000583b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000583f:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005843:	89 04 24             	mov    DWORD PTR [esp],eax
c0005846:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000584a:	89 d8                	mov    eax,ebx
c000584c:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005850:	e8 2d c8 ff ff       	call   c0002082 <validate>
c0005855:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005859:	85 c0                	test   eax,eax
c000585b:	0f 85 7a 04 00 00    	jne    c0005cdb <f_lseek+0x4ab>
c0005861:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005865:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005869:	85 c0                	test   eax,eax
c000586b:	0f 85 6a 04 00 00    	jne    c0005cdb <f_lseek+0x4ab>
c0005871:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005875:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005878:	74 0c                	je     c0005886 <f_lseek+0x56>
c000587a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000587d:	85 c0                	test   eax,eax
c000587f:	75 1f                	jne    c00058a0 <f_lseek+0x70>
c0005881:	e9 b5 01 00 00       	jmp    c0005a3b <f_lseek+0x20b>
c0005886:	83 c9 ff             	or     ecx,0xffffffff
c0005889:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000588c:	89 d8                	mov    eax,ebx
c000588e:	e8 e3 d3 ff ff       	call   c0002c76 <fill_last_frag>
c0005893:	85 c0                	test   eax,eax
c0005895:	74 e3                	je     c000587a <f_lseek+0x4a>
c0005897:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000589b:	e9 3b 04 00 00       	jmp    c0005cdb <f_lseek+0x4ab>
c00058a0:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058a5:	0f 85 ac 00 00 00    	jne    c0005957 <f_lseek+0x127>
c00058ab:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058af:	0f 85 a2 00 00 00    	jne    c0005957 <f_lseek+0x127>
c00058b5:	8d 78 04             	lea    edi,[eax+0x4]
c00058b8:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00058bd:	be 02 00 00 00       	mov    esi,0x2
c00058c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058c6:	85 ed                	test   ebp,ebp
c00058c8:	74 73                	je     c000593d <f_lseek+0x10d>
c00058ca:	89 e9                	mov    ecx,ebp
c00058cc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058d3:	ff 04 24             	inc    DWORD PTR [esp]
c00058d6:	89 ca                	mov    edx,ecx
c00058d8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058dc:	89 d8                	mov    eax,ebx
c00058de:	e8 02 d4 ff ff       	call   c0002ce5 <get_fat>
c00058e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00058e7:	83 f8 01             	cmp    eax,0x1
c00058ea:	77 11                	ja     c00058fd <f_lseek+0xcd>
c00058ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00058f0:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00058f8:	e9 de 03 00 00       	jmp    c0005cdb <f_lseek+0x4ab>
c00058fd:	83 f8 ff             	cmp    eax,0xffffffff
c0005900:	75 11                	jne    c0005913 <f_lseek+0xe3>
c0005902:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005906:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000590e:	e9 c8 03 00 00       	jmp    c0005cdb <f_lseek+0x4ab>
c0005913:	8d 51 01             	lea    edx,[ecx+0x1]
c0005916:	89 c1                	mov    ecx,eax
c0005918:	39 c2                	cmp    edx,eax
c000591a:	74 b7                	je     c00058d3 <f_lseek+0xa3>
c000591c:	83 c6 02             	add    esi,0x2
c000591f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005923:	72 0b                	jb     c0005930 <f_lseek+0x100>
c0005925:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005928:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c000592b:	89 0f                	mov    DWORD PTR [edi],ecx
c000592d:	83 c7 08             	add    edi,0x8
c0005930:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005934:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005937:	76 04                	jbe    c000593d <f_lseek+0x10d>
c0005939:	89 c5                	mov    ebp,eax
c000593b:	eb 8d                	jmp    c00058ca <f_lseek+0x9a>
c000593d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005940:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005944:	89 30                	mov    DWORD PTR [eax],esi
c0005946:	0f 87 87 03 00 00    	ja     c0005cd3 <f_lseek+0x4a3>
c000594c:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005952:	e9 84 03 00 00       	jmp    c0005cdb <f_lseek+0x4ab>
c0005957:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000595a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000595d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005961:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005965:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005969:	39 04 24             	cmp    DWORD PTR [esp],eax
c000596c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005970:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005974:	73 0f                	jae    c0005985 <f_lseek+0x155>
c0005976:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005979:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000597d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005981:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005985:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000598d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005990:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005993:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005997:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000599b:	0f 84 3a 03 00 00    	je     c0005cdb <f_lseek+0x4ab>
c00059a1:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00059a5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00059a9:	83 c6 ff             	add    esi,0xffffffff
c00059ac:	89 d8                	mov    eax,ebx
c00059ae:	83 d7 ff             	adc    edi,0xffffffff
c00059b1:	89 f2                	mov    edx,esi
c00059b3:	89 f9                	mov    ecx,edi
c00059b5:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00059b9:	89 34 24             	mov    DWORD PTR [esp],esi
c00059bc:	e8 78 c2 ff ff       	call   c0001c39 <clmt_clust>
c00059c1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00059c5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00059c8:	89 c2                	mov    edx,eax
c00059ca:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059ce:	89 c8                	mov    eax,ecx
c00059d0:	e8 43 c2 ff ff       	call   c0001c18 <clst2sect>
c00059d5:	89 d7                	mov    edi,edx
c00059d7:	09 c7                	or     edi,eax
c00059d9:	0f 84 0d ff ff ff    	je     c00058ec <f_lseek+0xbc>
c00059df:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00059e3:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00059e9:	0f 84 ec 02 00 00    	je     c0005cdb <f_lseek+0x4ab>
c00059ef:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00059f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059f7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00059fa:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c00059fe:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a02:	4d                   	dec    ebp
c0005a03:	31 ff                	xor    edi,edi
c0005a05:	21 ee                	and    esi,ebp
c0005a07:	01 c6                	add    esi,eax
c0005a09:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a0c:	11 d7                	adc    edi,edx
c0005a0e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a11:	39 fa                	cmp    edx,edi
c0005a13:	75 08                	jne    c0005a1d <f_lseek+0x1ed>
c0005a15:	39 f0                	cmp    eax,esi
c0005a17:	0f 84 be 02 00 00    	je     c0005cdb <f_lseek+0x4ab>
c0005a1d:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005a20:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005a24:	0f 89 80 02 00 00    	jns    c0005caa <f_lseek+0x47a>
c0005a2a:	83 ec 0c             	sub    esp,0xc
c0005a2d:	6a 01                	push   0x1
c0005a2f:	52                   	push   edx
c0005a30:	50                   	push   eax
c0005a31:	55                   	push   ebp
c0005a32:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a36:	e9 5a 02 00 00       	jmp    c0005c95 <f_lseek+0x465>
c0005a3b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a3f:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a42:	74 16                	je     c0005a5a <f_lseek+0x22a>
c0005a44:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a49:	76 0f                	jbe    c0005a5a <f_lseek+0x22a>
c0005a4b:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a52:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a5a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a5d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a60:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a63:	89 c7                	mov    edi,eax
c0005a65:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a69:	73 0d                	jae    c0005a78 <f_lseek+0x248>
c0005a6b:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a6f:	75 07                	jne    c0005a78 <f_lseek+0x248>
c0005a71:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a78:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a7b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a7e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a82:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005a89:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005a90:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005a93:	75 09                	jne    c0005a9e <f_lseek+0x26e>
c0005a95:	31 f6                	xor    esi,esi
c0005a97:	31 ff                	xor    edi,edi
c0005a99:	e9 af 01 00 00       	jmp    c0005c4d <f_lseek+0x41d>
c0005a9e:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005aa2:	89 d7                	mov    edi,edx
c0005aa4:	c1 e1 09             	shl    ecx,0x9
c0005aa7:	09 c7                	or     edi,eax
c0005aa9:	89 cd                	mov    ebp,ecx
c0005aab:	74 6d                	je     c0005b1a <f_lseek+0x2ea>
c0005aad:	83 c0 ff             	add    eax,0xffffffff
c0005ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ab4:	83 d2 ff             	adc    edx,0xffffffff
c0005ab7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005aba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005abe:	83 c0 ff             	add    eax,0xffffffff
c0005ac1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ac5:	83 d2 ff             	adc    edx,0xffffffff
c0005ac8:	31 ff                	xor    edi,edi
c0005aca:	57                   	push   edi
c0005acb:	51                   	push   ecx
c0005acc:	52                   	push   edx
c0005acd:	50                   	push   eax
c0005ace:	e8 1d 98 01 00       	call   c001f2f0 <__udivdi3>
c0005ad3:	83 c4 10             	add    esp,0x10
c0005ad6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ada:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005ade:	57                   	push   edi
c0005adf:	55                   	push   ebp
c0005ae0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005ae4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005ae8:	e8 03 98 01 00       	call   c001f2f0 <__udivdi3>
c0005aed:	83 c4 10             	add    esp,0x10
c0005af0:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005af4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005af8:	19 d1                	sbb    ecx,edx
c0005afa:	72 1e                	jb     c0005b1a <f_lseek+0x2ea>
c0005afc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b00:	89 e9                	mov    ecx,ebp
c0005b02:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b05:	f7 d9                	neg    ecx
c0005b07:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b0a:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b0e:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b11:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b14:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b18:	eb 28                	jmp    c0005b42 <f_lseek+0x312>
c0005b1a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b1d:	85 c0                	test   eax,eax
c0005b1f:	75 1e                	jne    c0005b3f <f_lseek+0x30f>
c0005b21:	31 d2                	xor    edx,edx
c0005b23:	89 d8                	mov    eax,ebx
c0005b25:	e8 a9 d4 ff ff       	call   c0002fd3 <create_chain>
c0005b2a:	83 f8 01             	cmp    eax,0x1
c0005b2d:	0f 84 b9 fd ff ff    	je     c00058ec <f_lseek+0xbc>
c0005b33:	83 f8 ff             	cmp    eax,0xffffffff
c0005b36:	0f 84 c6 fd ff ff    	je     c0005902 <f_lseek+0xd2>
c0005b3c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b3f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b42:	85 c0                	test   eax,eax
c0005b44:	0f 84 4b ff ff ff    	je     c0005a95 <f_lseek+0x265>
c0005b4a:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005b4e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005b56:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b59:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b5d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b60:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b63:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b67:	0f 83 9d 00 00 00    	jae    c0005c0a <f_lseek+0x3da>
c0005b6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b71:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b75:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b78:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b7c:	01 f2                	add    edx,esi
c0005b7e:	11 f9                	adc    ecx,edi
c0005b80:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005b84:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005b88:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005b8b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005b8e:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005b91:	f6 c1 02             	test   cl,0x2
c0005b94:	74 35                	je     c0005bcb <f_lseek+0x39b>
c0005b96:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005b9a:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005b9d:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005ba0:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005ba4:	73 16                	jae    c0005bbc <f_lseek+0x38c>
c0005ba6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005baa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005bae:	88 ca                	mov    dl,cl
c0005bb0:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005bb3:	83 ca 40             	or     edx,0x40
c0005bb6:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005bb9:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005bbc:	89 c2                	mov    edx,eax
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 0e d4 ff ff       	call   c0002fd3 <create_chain>
c0005bc5:	85 c0                	test   eax,eax
c0005bc7:	75 0b                	jne    c0005bd4 <f_lseek+0x3a4>
c0005bc9:	eb 30                	jmp    c0005bfb <f_lseek+0x3cb>
c0005bcb:	89 c2                	mov    edx,eax
c0005bcd:	89 d8                	mov    eax,ebx
c0005bcf:	e8 11 d1 ff ff       	call   c0002ce5 <get_fat>
c0005bd4:	83 f8 ff             	cmp    eax,0xffffffff
c0005bd7:	0f 84 25 fd ff ff    	je     c0005902 <f_lseek+0xd2>
c0005bdd:	83 f8 01             	cmp    eax,0x1
c0005be0:	0f 86 06 fd ff ff    	jbe    c00058ec <f_lseek+0xbc>
c0005be6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bea:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bed:	0f 86 f9 fc ff ff    	jbe    c00058ec <f_lseek+0xbc>
c0005bf3:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bf6:	e9 5b ff ff ff       	jmp    c0005b56 <f_lseek+0x326>
c0005bfb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c02:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c0a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c0d:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c11:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c14:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c17:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c1a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c20:	0f 84 6f fe ff ff    	je     c0005a95 <f_lseek+0x265>
c0005c26:	89 c2                	mov    edx,eax
c0005c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c2c:	e8 e7 bf ff ff       	call   c0001c18 <clst2sect>
c0005c31:	89 d7                	mov    edi,edx
c0005c33:	09 c7                	or     edi,eax
c0005c35:	0f 84 b1 fc ff ff    	je     c00058ec <f_lseek+0xbc>
c0005c3b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c3f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c42:	0f ac fe 09          	shrd   esi,edi,0x9
c0005c46:	c1 ef 09             	shr    edi,0x9
c0005c49:	01 c6                	add    esi,eax
c0005c4b:	11 d7                	adc    edi,edx
c0005c4d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c50:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c53:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c56:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c59:	19 d1                	sbb    ecx,edx
c0005c5b:	73 0a                	jae    c0005c67 <f_lseek+0x437>
c0005c5d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c60:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c63:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c67:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c6c:	74 6d                	je     c0005cdb <f_lseek+0x4ab>
c0005c6e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c71:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c74:	39 fa                	cmp    edx,edi
c0005c76:	75 04                	jne    c0005c7c <f_lseek+0x44c>
c0005c78:	39 f0                	cmp    eax,esi
c0005c7a:	74 5f                	je     c0005cdb <f_lseek+0x4ab>
c0005c7c:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c7f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c83:	79 25                	jns    c0005caa <f_lseek+0x47a>
c0005c85:	83 ec 0c             	sub    esp,0xc
c0005c88:	6a 01                	push   0x1
c0005c8a:	52                   	push   edx
c0005c8b:	50                   	push   eax
c0005c8c:	55                   	push   ebp
c0005c8d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005c91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005c95:	50                   	push   eax
c0005c96:	e8 af bc ff ff       	call   c000194a <disk_write>
c0005c9b:	83 c4 20             	add    esp,0x20
c0005c9e:	85 c0                	test   eax,eax
c0005ca0:	0f 85 5c fc ff ff    	jne    c0005902 <f_lseek+0xd2>
c0005ca6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005caa:	83 ec 0c             	sub    esp,0xc
c0005cad:	6a 01                	push   0x1
c0005caf:	57                   	push   edi
c0005cb0:	56                   	push   esi
c0005cb1:	55                   	push   ebp
c0005cb2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cb6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cba:	50                   	push   eax
c0005cbb:	e8 74 bc ff ff       	call   c0001934 <disk_read>
c0005cc0:	83 c4 20             	add    esp,0x20
c0005cc3:	85 c0                	test   eax,eax
c0005cc5:	0f 85 37 fc ff ff    	jne    c0005902 <f_lseek+0xd2>
c0005ccb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005cce:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005cd1:	eb 08                	jmp    c0005cdb <f_lseek+0x4ab>
c0005cd3:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005cdb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005cdf:	83 c4 3c             	add    esp,0x3c
c0005ce2:	5b                   	pop    ebx
c0005ce3:	5e                   	pop    esi
c0005ce4:	5f                   	pop    edi
c0005ce5:	5d                   	pop    ebp
c0005ce6:	c3                   	ret    

c0005ce7 <f_opendir>:
c0005ce7:	56                   	push   esi
c0005ce8:	b8 09 00 00 00       	mov    eax,0x9
c0005ced:	53                   	push   ebx
c0005cee:	83 ec 24             	sub    esp,0x24
c0005cf1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005cf5:	85 db                	test   ebx,ebx
c0005cf7:	0f 84 e6 00 00 00    	je     c0005de3 <f_opendir+0xfc>
c0005cfd:	31 c9                	xor    ecx,ecx
c0005cff:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d03:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d07:	e8 03 c7 ff ff       	call   c000240f <mount_volume>
c0005d0c:	85 c0                	test   eax,eax
c0005d0e:	0f 85 c9 00 00 00    	jne    c0005ddd <f_opendir+0xf6>
c0005d14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d18:	83 ec 0c             	sub    esp,0xc
c0005d1b:	89 03                	mov    DWORD PTR [ebx],eax
c0005d1d:	68 60 04 00 00       	push   0x460
c0005d22:	e8 c1 26 00 00       	call   c00083e8 <ff_memalloc>
c0005d27:	83 c4 10             	add    esp,0x10
c0005d2a:	89 c6                	mov    esi,eax
c0005d2c:	b8 11 00 00 00       	mov    eax,0x11
c0005d31:	85 f6                	test   esi,esi
c0005d33:	0f 84 aa 00 00 00    	je     c0005de3 <f_opendir+0xfc>
c0005d39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d3d:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d43:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005d46:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005d49:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005d4d:	89 d8                	mov    eax,ebx
c0005d4f:	e8 31 ee ff ff       	call   c0004b85 <follow_path>
c0005d54:	85 c0                	test   eax,eax
c0005d56:	75 61                	jne    c0005db9 <f_opendir+0xd2>
c0005d58:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d5c:	78 46                	js     c0005da4 <f_opendir+0xbd>
c0005d5e:	b8 05 00 00 00       	mov    eax,0x5
c0005d63:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d67:	74 50                	je     c0005db9 <f_opendir+0xd2>
c0005d69:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d6d:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d6f:	3c 04                	cmp    al,0x4
c0005d71:	75 26                	jne    c0005d99 <f_opendir+0xb2>
c0005d73:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d76:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d79:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d7c:	30 d2                	xor    dl,dl
c0005d7e:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d82:	09 c2                	or     edx,eax
c0005d84:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005d87:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005d8a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005d8d:	89 da                	mov    edx,ebx
c0005d8f:	8d 41 10             	lea    eax,[ecx+0x10]
c0005d92:	e8 b4 ed ff ff       	call   c0004b4b <init_alloc_info.isra.2>
c0005d97:	eb 0b                	jmp    c0005da4 <f_opendir+0xbd>
c0005d99:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005d9c:	e8 59 ed ff ff       	call   c0004afa <ld_clust.isra.0>
c0005da1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005da4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005da8:	31 d2                	xor    edx,edx
c0005daa:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005dae:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005db2:	89 d8                	mov    eax,ebx
c0005db4:	e8 22 d1 ff ff       	call   c0002edb <dir_sdi>
c0005db9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dbd:	83 ec 0c             	sub    esp,0xc
c0005dc0:	56                   	push   esi
c0005dc1:	e8 3a 26 00 00       	call   c0008400 <ff_memfree>
c0005dc6:	83 c4 10             	add    esp,0x10
c0005dc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dcd:	83 f8 04             	cmp    eax,0x4
c0005dd0:	74 06                	je     c0005dd8 <f_opendir+0xf1>
c0005dd2:	85 c0                	test   eax,eax
c0005dd4:	74 0d                	je     c0005de3 <f_opendir+0xfc>
c0005dd6:	eb 05                	jmp    c0005ddd <f_opendir+0xf6>
c0005dd8:	b8 05 00 00 00       	mov    eax,0x5
c0005ddd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005de3:	83 c4 24             	add    esp,0x24
c0005de6:	5b                   	pop    ebx
c0005de7:	5e                   	pop    esi
c0005de8:	c3                   	ret    

c0005de9 <f_closedir>:
c0005de9:	53                   	push   ebx
c0005dea:	83 ec 18             	sub    esp,0x18
c0005ded:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005df1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005df5:	89 d8                	mov    eax,ebx
c0005df7:	e8 86 c2 ff ff       	call   c0002082 <validate>
c0005dfc:	85 c0                	test   eax,eax
c0005dfe:	75 06                	jne    c0005e06 <f_closedir+0x1d>
c0005e00:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e06:	83 c4 18             	add    esp,0x18
c0005e09:	5b                   	pop    ebx
c0005e0a:	c3                   	ret    

c0005e0b <f_readdir>:
c0005e0b:	57                   	push   edi
c0005e0c:	56                   	push   esi
c0005e0d:	53                   	push   ebx
c0005e0e:	83 ec 20             	sub    esp,0x20
c0005e11:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e15:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e19:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e1d:	89 d8                	mov    eax,ebx
c0005e1f:	e8 5e c2 ff ff       	call   c0002082 <validate>
c0005e24:	85 c0                	test   eax,eax
c0005e26:	75 77                	jne    c0005e9f <f_readdir+0x94>
c0005e28:	85 ff                	test   edi,edi
c0005e2a:	75 0b                	jne    c0005e37 <f_readdir+0x2c>
c0005e2c:	31 d2                	xor    edx,edx
c0005e2e:	89 d8                	mov    eax,ebx
c0005e30:	e8 a6 d0 ff ff       	call   c0002edb <dir_sdi>
c0005e35:	eb 68                	jmp    c0005e9f <f_readdir+0x94>
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	68 60 04 00 00       	push   0x460
c0005e3f:	e8 a4 25 00 00       	call   c00083e8 <ff_memalloc>
c0005e44:	83 c4 10             	add    esp,0x10
c0005e47:	89 c6                	mov    esi,eax
c0005e49:	b8 11 00 00 00       	mov    eax,0x11
c0005e4e:	85 f6                	test   esi,esi
c0005e50:	74 4d                	je     c0005e9f <f_readdir+0x94>
c0005e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e56:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e5c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e5f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e62:	31 d2                	xor    edx,edx
c0005e64:	89 d8                	mov    eax,ebx
c0005e66:	e8 80 d8 ff ff       	call   c00036eb <dir_read>
c0005e6b:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e70:	75 19                	jne    c0005e8b <f_readdir+0x80>
c0005e72:	89 fa                	mov    edx,edi
c0005e74:	89 d8                	mov    eax,ebx
c0005e76:	e8 7e ea ff ff       	call   c00048f9 <get_fileinfo>
c0005e7b:	31 d2                	xor    edx,edx
c0005e7d:	89 d8                	mov    eax,ebx
c0005e7f:	e8 af d5 ff ff       	call   c0003433 <dir_next>
c0005e84:	83 f8 04             	cmp    eax,0x4
c0005e87:	75 02                	jne    c0005e8b <f_readdir+0x80>
c0005e89:	31 c0                	xor    eax,eax
c0005e8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e8f:	83 ec 0c             	sub    esp,0xc
c0005e92:	56                   	push   esi
c0005e93:	e8 68 25 00 00       	call   c0008400 <ff_memfree>
c0005e98:	83 c4 10             	add    esp,0x10
c0005e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e9f:	83 c4 20             	add    esp,0x20
c0005ea2:	5b                   	pop    ebx
c0005ea3:	5e                   	pop    esi
c0005ea4:	5f                   	pop    edi
c0005ea5:	c3                   	ret    

c0005ea6 <f_stat>:
c0005ea6:	57                   	push   edi
c0005ea7:	31 c9                	xor    ecx,ecx
c0005ea9:	56                   	push   esi
c0005eaa:	53                   	push   ebx
c0005eab:	83 ec 50             	sub    esp,0x50
c0005eae:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005eb2:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005eb6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005eba:	e8 50 c5 ff ff       	call   c000240f <mount_volume>
c0005ebf:	89 c3                	mov    ebx,eax
c0005ec1:	85 c0                	test   eax,eax
c0005ec3:	75 67                	jne    c0005f2c <f_stat+0x86>
c0005ec5:	83 ec 0c             	sub    esp,0xc
c0005ec8:	bb 11 00 00 00       	mov    ebx,0x11
c0005ecd:	68 60 04 00 00       	push   0x460
c0005ed2:	e8 11 25 00 00       	call   c00083e8 <ff_memalloc>
c0005ed7:	83 c4 10             	add    esp,0x10
c0005eda:	89 c6                	mov    esi,eax
c0005edc:	85 c0                	test   eax,eax
c0005ede:	74 4c                	je     c0005f2c <f_stat+0x86>
c0005ee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ee4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eea:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005eed:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ef0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005ef4:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005ef8:	e8 88 ec ff ff       	call   c0004b85 <follow_path>
c0005efd:	89 c3                	mov    ebx,eax
c0005eff:	85 c0                	test   eax,eax
c0005f01:	75 1d                	jne    c0005f20 <f_stat+0x7a>
c0005f03:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f08:	78 11                	js     c0005f1b <f_stat+0x75>
c0005f0a:	85 ff                	test   edi,edi
c0005f0c:	74 12                	je     c0005f20 <f_stat+0x7a>
c0005f0e:	89 fa                	mov    edx,edi
c0005f10:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f14:	e8 e0 e9 ff ff       	call   c00048f9 <get_fileinfo>
c0005f19:	eb 05                	jmp    c0005f20 <f_stat+0x7a>
c0005f1b:	bb 06 00 00 00       	mov    ebx,0x6
c0005f20:	83 ec 0c             	sub    esp,0xc
c0005f23:	56                   	push   esi
c0005f24:	e8 d7 24 00 00       	call   c0008400 <ff_memfree>
c0005f29:	83 c4 10             	add    esp,0x10
c0005f2c:	83 c4 50             	add    esp,0x50
c0005f2f:	89 d8                	mov    eax,ebx
c0005f31:	5b                   	pop    ebx
c0005f32:	5e                   	pop    esi
c0005f33:	5f                   	pop    edi
c0005f34:	c3                   	ret    

c0005f35 <f_getfree>:
c0005f35:	55                   	push   ebp
c0005f36:	31 c9                	xor    ecx,ecx
c0005f38:	57                   	push   edi
c0005f39:	56                   	push   esi
c0005f3a:	53                   	push   ebx
c0005f3b:	83 ec 5c             	sub    esp,0x5c
c0005f3e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f42:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005f46:	e8 c4 c4 ff ff       	call   c000240f <mount_volume>
c0005f4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f4f:	85 c0                	test   eax,eax
c0005f51:	0f 85 9d 01 00 00    	jne    c00060f4 <f_getfree+0x1bf>
c0005f57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f5b:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f5f:	89 02                	mov    DWORD PTR [edx],eax
c0005f61:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005f64:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f67:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005f6a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005f6e:	39 f2                	cmp    edx,esi
c0005f70:	77 0b                	ja     c0005f7d <f_getfree+0x48>
c0005f72:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f76:	89 10                	mov    DWORD PTR [eax],edx
c0005f78:	e9 77 01 00 00       	jmp    c00060f4 <f_getfree+0x1bf>
c0005f7d:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f7f:	80 fa 01             	cmp    dl,0x1
c0005f82:	75 3a                	jne    c0005fbe <f_getfree+0x89>
c0005f84:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005f88:	be 02 00 00 00       	mov    esi,0x2
c0005f8d:	31 db                	xor    ebx,ebx
c0005f8f:	89 f2                	mov    edx,esi
c0005f91:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005f95:	e8 4b cd ff ff       	call   c0002ce5 <get_fat>
c0005f9a:	83 f8 ff             	cmp    eax,0xffffffff
c0005f9d:	0f 84 28 01 00 00    	je     c00060cb <f_getfree+0x196>
c0005fa3:	83 f8 01             	cmp    eax,0x1
c0005fa6:	0f 84 29 01 00 00    	je     c00060d5 <f_getfree+0x1a0>
c0005fac:	83 d3 00             	adc    ebx,0x0
c0005faf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fb3:	46                   	inc    esi
c0005fb4:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005fb7:	77 d6                	ja     c0005f8f <f_getfree+0x5a>
c0005fb9:	e9 25 01 00 00       	jmp    c00060e3 <f_getfree+0x1ae>
c0005fbe:	80 fa 04             	cmp    dl,0x4
c0005fc1:	0f 85 88 00 00 00    	jne    c000604f <f_getfree+0x11a>
c0005fc7:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005fca:	31 ed                	xor    ebp,ebp
c0005fcc:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005fcf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005fd3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005fd7:	31 db                	xor    ebx,ebx
c0005fd9:	85 ed                	test   ebp,ebp
c0005fdb:	75 3f                	jne    c000601c <f_getfree+0xe7>
c0005fdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fe1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005fe5:	83 c0 01             	add    eax,0x1
c0005fe8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005fec:	83 d2 00             	adc    edx,0x0
c0005fef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005ff3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005ff7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ffb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005fff:	e8 59 c1 ff ff       	call   c000215d <move_window>
c0006004:	85 c0                	test   eax,eax
c0006006:	0f 85 d3 00 00 00    	jne    c00060df <f_getfree+0x1aa>
c000600c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006010:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006014:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006018:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000601c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006020:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006023:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006027:	89 cf                	mov    edi,ecx
c0006029:	85 f6                	test   esi,esi
c000602b:	74 12                	je     c000603f <f_getfree+0x10a>
c000602d:	88 c1                	mov    cl,al
c000602f:	83 e1 01             	and    ecx,0x1
c0006032:	80 f9 01             	cmp    cl,0x1
c0006035:	83 d3 00             	adc    ebx,0x0
c0006038:	d0 e8                	shr    al,1
c000603a:	4e                   	dec    esi
c000603b:	39 fe                	cmp    esi,edi
c000603d:	75 ea                	jne    c0006029 <f_getfree+0xf4>
c000603f:	45                   	inc    ebp
c0006040:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006046:	85 f6                	test   esi,esi
c0006048:	75 8f                	jne    c0005fd9 <f_getfree+0xa4>
c000604a:	e9 94 00 00 00       	jmp    c00060e3 <f_getfree+0x1ae>
c000604f:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006052:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006055:	31 f6                	xor    esi,esi
c0006057:	31 db                	xor    ebx,ebx
c0006059:	85 f6                	test   esi,esi
c000605b:	75 1b                	jne    c0006078 <f_getfree+0x143>
c000605d:	89 d7                	mov    edi,edx
c000605f:	89 cd                	mov    ebp,ecx
c0006061:	83 c7 01             	add    edi,0x1
c0006064:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006068:	83 d5 00             	adc    ebp,0x0
c000606b:	e8 ed c0 ff ff       	call   c000215d <move_window>
c0006070:	85 c0                	test   eax,eax
c0006072:	75 6b                	jne    c00060df <f_getfree+0x1aa>
c0006074:	89 fa                	mov    edx,edi
c0006076:	89 e9                	mov    ecx,ebp
c0006078:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006080:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006084:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006087:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000608b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000608f:	75 11                	jne    c00060a2 <f_getfree+0x16d>
c0006091:	e8 e9 b8 ff ff       	call   c000197f <ld_word>
c0006096:	66 83 f8 01          	cmp    ax,0x1
c000609a:	83 d3 00             	adc    ebx,0x0
c000609d:	83 c6 02             	add    esi,0x2
c00060a0:	eb 13                	jmp    c00060b5 <f_getfree+0x180>
c00060a2:	e8 e5 b8 ff ff       	call   c000198c <ld_dword>
c00060a7:	25 ff ff ff 0f       	and    eax,0xfffffff
c00060ac:	83 f8 01             	cmp    eax,0x1
c00060af:	83 d3 00             	adc    ebx,0x0
c00060b2:	83 c6 04             	add    esi,0x4
c00060b5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00060bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00060bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00060c3:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00060c7:	75 90                	jne    c0006059 <f_getfree+0x124>
c00060c9:	eb 18                	jmp    c00060e3 <f_getfree+0x1ae>
c00060cb:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00060d3:	eb 0e                	jmp    c00060e3 <f_getfree+0x1ae>
c00060d5:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00060dd:	eb 04                	jmp    c00060e3 <f_getfree+0x1ae>
c00060df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060e3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00060e7:	89 18                	mov    DWORD PTR [eax],ebx
c00060e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ed:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00060f0:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00060f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060f8:	83 c4 5c             	add    esp,0x5c
c00060fb:	5b                   	pop    ebx
c00060fc:	5e                   	pop    esi
c00060fd:	5f                   	pop    edi
c00060fe:	5d                   	pop    ebp
c00060ff:	c3                   	ret    

c0006100 <f_truncate>:
c0006100:	56                   	push   esi
c0006101:	53                   	push   ebx
c0006102:	83 ec 14             	sub    esp,0x14
c0006105:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006109:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000610d:	89 d8                	mov    eax,ebx
c000610f:	e8 6e bf ff ff       	call   c0002082 <validate>
c0006114:	89 c6                	mov    esi,eax
c0006116:	85 c0                	test   eax,eax
c0006118:	0f 85 d2 00 00 00    	jne    c00061f0 <f_truncate+0xf0>
c000611e:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006122:	85 f6                	test   esi,esi
c0006124:	0f 85 c6 00 00 00    	jne    c00061f0 <f_truncate+0xf0>
c000612a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000612e:	0f 84 b7 00 00 00    	je     c00061eb <f_truncate+0xeb>
c0006134:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006137:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000613a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000613d:	89 d1                	mov    ecx,edx
c000613f:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006142:	0f 83 a8 00 00 00    	jae    c00061f0 <f_truncate+0xf0>
c0006148:	09 c2                	or     edx,eax
c000614a:	75 15                	jne    c0006161 <f_truncate+0x61>
c000614c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	89 d8                	mov    eax,ebx
c0006153:	e8 7a d0 ff ff       	call   c00031d2 <remove_chain>
c0006158:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000615f:	eb 35                	jmp    c0006196 <f_truncate+0x96>
c0006161:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006164:	89 d8                	mov    eax,ebx
c0006166:	e8 7a cb ff ff       	call   c0002ce5 <get_fat>
c000616b:	89 c2                	mov    edx,eax
c000616d:	b8 01 00 00 00       	mov    eax,0x1
c0006172:	83 fa ff             	cmp    edx,0xffffffff
c0006175:	74 1f                	je     c0006196 <f_truncate+0x96>
c0006177:	b8 02 00 00 00       	mov    eax,0x2
c000617c:	83 fa 01             	cmp    edx,0x1
c000617f:	74 15                	je     c0006196 <f_truncate+0x96>
c0006181:	31 c0                	xor    eax,eax
c0006183:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006187:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000618a:	76 0a                	jbe    c0006196 <f_truncate+0x96>
c000618c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000618f:	89 d8                	mov    eax,ebx
c0006191:	e8 3c d0 ff ff       	call   c00031d2 <remove_chain>
c0006196:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006199:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000619c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000619f:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00061a2:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00061a5:	83 ca 40             	or     edx,0x40
c00061a8:	85 c0                	test   eax,eax
c00061aa:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00061ad:	75 35                	jne    c00061e4 <f_truncate+0xe4>
c00061af:	84 d2                	test   dl,dl
c00061b1:	79 3d                	jns    c00061f0 <f_truncate+0xf0>
c00061b3:	83 ec 0c             	sub    esp,0xc
c00061b6:	8d 43 50             	lea    eax,[ebx+0x50]
c00061b9:	6a 01                	push   0x1
c00061bb:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00061be:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00061c1:	50                   	push   eax
c00061c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00061c6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00061ca:	50                   	push   eax
c00061cb:	e8 7a b7 ff ff       	call   c000194a <disk_write>
c00061d0:	83 c4 20             	add    esp,0x20
c00061d3:	85 c0                	test   eax,eax
c00061d5:	75 08                	jne    c00061df <f_truncate+0xdf>
c00061d7:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061db:	31 f6                	xor    esi,esi
c00061dd:	eb 11                	jmp    c00061f0 <f_truncate+0xf0>
c00061df:	b8 01 00 00 00       	mov    eax,0x1
c00061e4:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00061e7:	89 c6                	mov    esi,eax
c00061e9:	eb 05                	jmp    c00061f0 <f_truncate+0xf0>
c00061eb:	be 07 00 00 00       	mov    esi,0x7
c00061f0:	89 f0                	mov    eax,esi
c00061f2:	83 c4 14             	add    esp,0x14
c00061f5:	5b                   	pop    ebx
c00061f6:	5e                   	pop    esi
c00061f7:	c3                   	ret    

c00061f8 <f_unlink>:
c00061f8:	56                   	push   esi
c00061f9:	b9 02 00 00 00       	mov    ecx,0x2
c00061fe:	53                   	push   ebx
c00061ff:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006205:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006209:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006210:	e8 fa c1 ff ff       	call   c000240f <mount_volume>
c0006215:	85 c0                	test   eax,eax
c0006217:	0f 85 55 01 00 00    	jne    c0006372 <f_unlink+0x17a>
c000621d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006221:	83 ec 0c             	sub    esp,0xc
c0006224:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006228:	68 60 04 00 00       	push   0x460
c000622d:	e8 b6 21 00 00       	call   c00083e8 <ff_memalloc>
c0006232:	83 c4 10             	add    esp,0x10
c0006235:	89 c3                	mov    ebx,eax
c0006237:	b8 11 00 00 00       	mov    eax,0x11
c000623c:	85 db                	test   ebx,ebx
c000623e:	0f 84 2e 01 00 00    	je     c0006372 <f_unlink+0x17a>
c0006244:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006248:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000624e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006251:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006254:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000625b:	8d 44 24 48          	lea    eax,[esp+0x48]
c000625f:	e8 21 e9 ff ff       	call   c0004b85 <follow_path>
c0006264:	85 c0                	test   eax,eax
c0006266:	0f 85 f2 00 00 00    	jne    c000635e <f_unlink+0x166>
c000626c:	b8 06 00 00 00       	mov    eax,0x6
c0006271:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006279:	0f 88 df 00 00 00    	js     c000635e <f_unlink+0x166>
c000627f:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006284:	74 0a                	je     c0006290 <f_unlink+0x98>
c0006286:	b8 07 00 00 00       	mov    eax,0x7
c000628b:	e9 ce 00 00 00       	jmp    c000635e <f_unlink+0x166>
c0006290:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006294:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006298:	8a 02                	mov    al,BYTE PTR [edx]
c000629a:	3c 04                	cmp    al,0x4
c000629c:	75 12                	jne    c00062b0 <f_unlink+0xb8>
c000629e:	8d 42 10             	lea    eax,[edx+0x10]
c00062a1:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062a5:	e8 a1 e8 ff ff       	call   c0004b4b <init_alloc_info.isra.2>
c00062aa:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00062ae:	eb 0e                	jmp    c00062be <f_unlink+0xc6>
c00062b0:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00062b7:	e8 3e e8 ff ff       	call   c0004afa <ld_clust.isra.0>
c00062bc:	89 c6                	mov    esi,eax
c00062be:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00062c3:	75 12                	jne    c00062d7 <f_unlink+0xdf>
c00062c5:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062c9:	e8 94 d6 ff ff       	call   c0003962 <dir_remove>
c00062ce:	85 c0                	test   eax,eax
c00062d0:	74 6c                	je     c000633e <f_unlink+0x146>
c00062d2:	e9 87 00 00 00       	jmp    c000635e <f_unlink+0x166>
c00062d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062db:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062e2:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00062e9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00062ec:	75 21                	jne    c000630f <f_unlink+0x117>
c00062ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00062f2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00062f6:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00062fd:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006304:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006308:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000630f:	31 d2                	xor    edx,edx
c0006311:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006318:	e8 be cb ff ff       	call   c0002edb <dir_sdi>
c000631d:	85 c0                	test   eax,eax
c000631f:	75 3d                	jne    c000635e <f_unlink+0x166>
c0006321:	31 d2                	xor    edx,edx
c0006323:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000632a:	e8 bc d3 ff ff       	call   c00036eb <dir_read>
c000632f:	85 c0                	test   eax,eax
c0006331:	0f 84 4f ff ff ff    	je     c0006286 <f_unlink+0x8e>
c0006337:	83 f8 04             	cmp    eax,0x4
c000633a:	75 22                	jne    c000635e <f_unlink+0x166>
c000633c:	eb 87                	jmp    c00062c5 <f_unlink+0xcd>
c000633e:	85 f6                	test   esi,esi
c0006340:	75 0b                	jne    c000634d <f_unlink+0x155>
c0006342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006346:	e8 3d df ff ff       	call   c0004288 <sync_fs>
c000634b:	eb 11                	jmp    c000635e <f_unlink+0x166>
c000634d:	31 c9                	xor    ecx,ecx
c000634f:	89 f2                	mov    edx,esi
c0006351:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006355:	e8 78 ce ff ff       	call   c00031d2 <remove_chain>
c000635a:	85 c0                	test   eax,eax
c000635c:	74 e4                	je     c0006342 <f_unlink+0x14a>
c000635e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006362:	83 ec 0c             	sub    esp,0xc
c0006365:	53                   	push   ebx
c0006366:	e8 95 20 00 00       	call   c0008400 <ff_memfree>
c000636b:	83 c4 10             	add    esp,0x10
c000636e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006372:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006378:	5b                   	pop    ebx
c0006379:	5e                   	pop    esi
c000637a:	c3                   	ret    

c000637b <f_mkdir>:
c000637b:	57                   	push   edi
c000637c:	b9 02 00 00 00       	mov    ecx,0x2
c0006381:	56                   	push   esi
c0006382:	53                   	push   ebx
c0006383:	83 c4 80             	add    esp,0xffffff80
c0006386:	8d 54 24 08          	lea    edx,[esp+0x8]
c000638a:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006391:	e8 79 c0 ff ff       	call   c000240f <mount_volume>
c0006396:	89 c3                	mov    ebx,eax
c0006398:	85 c0                	test   eax,eax
c000639a:	0f 85 fe 01 00 00    	jne    c000659e <f_mkdir+0x223>
c00063a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063a4:	bb 11 00 00 00       	mov    ebx,0x11
c00063a9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00063ad:	83 ec 0c             	sub    esp,0xc
c00063b0:	68 60 04 00 00       	push   0x460
c00063b5:	e8 2e 20 00 00       	call   c00083e8 <ff_memalloc>
c00063ba:	83 c4 10             	add    esp,0x10
c00063bd:	89 c7                	mov    edi,eax
c00063bf:	85 c0                	test   eax,eax
c00063c1:	0f 84 d7 01 00 00    	je     c000659e <f_mkdir+0x223>
c00063c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063cb:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00063d1:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00063d4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00063d7:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063de:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063e2:	e8 9e e7 ff ff       	call   c0004b85 <follow_path>
c00063e7:	89 c3                	mov    ebx,eax
c00063e9:	85 c0                	test   eax,eax
c00063eb:	74 3e                	je     c000642b <f_mkdir+0xb0>
c00063ed:	83 f8 04             	cmp    eax,0x4
c00063f0:	75 3e                	jne    c0006430 <f_mkdir+0xb5>
c00063f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063f6:	31 d2                	xor    edx,edx
c00063f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006400:	e8 ce cb ff ff       	call   c0002fd3 <create_chain>
c0006405:	89 c6                	mov    esi,eax
c0006407:	85 c0                	test   eax,eax
c0006409:	74 0c                	je     c0006417 <f_mkdir+0x9c>
c000640b:	bb 02 00 00 00       	mov    ebx,0x2
c0006410:	83 f8 01             	cmp    eax,0x1
c0006413:	74 07                	je     c000641c <f_mkdir+0xa1>
c0006415:	eb 2a                	jmp    c0006441 <f_mkdir+0xc6>
c0006417:	bb 07 00 00 00       	mov    ebx,0x7
c000641c:	31 c9                	xor    ecx,ecx
c000641e:	89 f2                	mov    edx,esi
c0006420:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006424:	e8 a9 cd ff ff       	call   c00031d2 <remove_chain>
c0006429:	eb 05                	jmp    c0006430 <f_mkdir+0xb5>
c000642b:	bb 08 00 00 00       	mov    ebx,0x8
c0006430:	83 ec 0c             	sub    esp,0xc
c0006433:	57                   	push   edi
c0006434:	e8 c7 1f 00 00       	call   c0008400 <ff_memfree>
c0006439:	83 c4 10             	add    esp,0x10
c000643c:	e9 5d 01 00 00       	jmp    c000659e <f_mkdir+0x223>
c0006441:	bb 01 00 00 00       	mov    ebx,0x1
c0006446:	83 f8 ff             	cmp    eax,0xffffffff
c0006449:	74 d1                	je     c000641c <f_mkdir+0xa1>
c000644b:	89 f2                	mov    edx,esi
c000644d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006451:	e8 c4 ce ff ff       	call   c000331a <dir_clear>
c0006456:	89 c3                	mov    ebx,eax
c0006458:	85 c0                	test   eax,eax
c000645a:	75 c0                	jne    c000641c <f_mkdir+0xa1>
c000645c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006460:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006463:	74 69                	je     c00064ce <f_mkdir+0x153>
c0006465:	b9 0b 00 00 00       	mov    ecx,0xb
c000646a:	83 c0 54             	add    eax,0x54
c000646d:	ba 20 00 00 00       	mov    edx,0x20
c0006472:	e8 9c b5 ff ff       	call   c0001a13 <mem_set>
c0006477:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000647b:	ba 00 00 21 50       	mov    edx,0x50210000
c0006480:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006484:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006488:	83 c0 6a             	add    eax,0x6a
c000648b:	e8 65 b5 ff ff       	call   c00019f5 <st_dword>
c0006490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006494:	89 f1                	mov    ecx,esi
c0006496:	8d 50 54             	lea    edx,[eax+0x54]
c0006499:	e8 85 e6 ff ff       	call   c0004b23 <st_clust.isra.1>
c000649e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064a2:	b9 20 00 00 00       	mov    ecx,0x20
c00064a7:	8d 50 54             	lea    edx,[eax+0x54]
c00064aa:	83 c0 74             	add    eax,0x74
c00064ad:	e8 4c b5 ff ff       	call   c00019fe <mem_cpy>
c00064b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b6:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00064ba:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00064be:	8d 50 74             	lea    edx,[eax+0x74]
c00064c1:	e8 5d e6 ff ff       	call   c0004b23 <st_clust.isra.1>
c00064c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064ca:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00064ce:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064d2:	e8 2f db ff ff       	call   c0004006 <dir_register>
c00064d7:	89 c3                	mov    ebx,eax
c00064d9:	85 c0                	test   eax,eax
c00064db:	0f 85 3b ff ff ff    	jne    c000641c <f_mkdir+0xa1>
c00064e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064e8:	75 74                	jne    c000655e <f_mkdir+0x1e3>
c00064ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064ed:	ba 00 00 21 50       	mov    edx,0x50210000
c00064f2:	83 c0 0c             	add    eax,0xc
c00064f5:	e8 fb b4 ff ff       	call   c00019f5 <st_dword>
c00064fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064fe:	89 f2                	mov    edx,esi
c0006500:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006503:	83 c0 34             	add    eax,0x34
c0006506:	e8 ea b4 ff ff       	call   c00019f5 <st_dword>
c000650b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650f:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006513:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006516:	c1 e2 09             	shl    edx,0x9
c0006519:	83 c0 38             	add    eax,0x38
c000651c:	e8 d4 b4 ff ff       	call   c00019f5 <st_dword>
c0006521:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006525:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006529:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000652c:	c1 e2 09             	shl    edx,0x9
c000652f:	83 c0 28             	add    eax,0x28
c0006532:	e8 be b4 ff ff       	call   c00019f5 <st_dword>
c0006537:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000653b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000653e:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006542:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006545:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006549:	8d 44 24 34          	lea    eax,[esp+0x34]
c000654d:	e8 8b d3 ff ff       	call   c00038dd <store_xdir>
c0006552:	89 c3                	mov    ebx,eax
c0006554:	85 c0                	test   eax,eax
c0006556:	0f 85 d4 fe ff ff    	jne    c0006430 <f_mkdir+0xb5>
c000655c:	eb 30                	jmp    c000658e <f_mkdir+0x213>
c000655e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006562:	ba 00 00 21 50       	mov    edx,0x50210000
c0006567:	83 c0 16             	add    eax,0x16
c000656a:	e8 86 b4 ff ff       	call   c00019f5 <st_dword>
c000656f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006573:	89 f1                	mov    ecx,esi
c0006575:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006579:	e8 a5 e5 ff ff       	call   c0004b23 <st_clust.isra.1>
c000657e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006582:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006586:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000658a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000658e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006592:	e8 f1 dc ff ff       	call   c0004288 <sync_fs>
c0006597:	89 c3                	mov    ebx,eax
c0006599:	e9 92 fe ff ff       	jmp    c0006430 <f_mkdir+0xb5>
c000659e:	83 ec 80             	sub    esp,0xffffff80
c00065a1:	89 d8                	mov    eax,ebx
c00065a3:	5b                   	pop    ebx
c00065a4:	5e                   	pop    esi
c00065a5:	5f                   	pop    edi
c00065a6:	c3                   	ret    

c00065a7 <f_rename>:
c00065a7:	55                   	push   ebp
c00065a8:	57                   	push   edi
c00065a9:	56                   	push   esi
c00065aa:	53                   	push   ebx
c00065ab:	81 ec fc 00 00 00    	sub    esp,0xfc
c00065b1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00065b8:	e8 a4 b9 ff ff       	call   c0001f61 <get_ldnumber>
c00065bd:	b9 02 00 00 00       	mov    ecx,0x2
c00065c2:	8d 54 24 14          	lea    edx,[esp+0x14]
c00065c6:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00065cd:	e8 3d be ff ff       	call   c000240f <mount_volume>
c00065d2:	85 c0                	test   eax,eax
c00065d4:	0f 85 b5 02 00 00    	jne    c000688f <f_rename+0x2e8>
c00065da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065de:	83 ec 0c             	sub    esp,0xc
c00065e1:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00065e5:	68 60 04 00 00       	push   0x460
c00065ea:	e8 f9 1d 00 00       	call   c00083e8 <ff_memalloc>
c00065ef:	83 c4 10             	add    esp,0x10
c00065f2:	89 c3                	mov    ebx,eax
c00065f4:	b8 11 00 00 00       	mov    eax,0x11
c00065f9:	85 db                	test   ebx,ebx
c00065fb:	0f 84 8e 02 00 00    	je     c000688f <f_rename+0x2e8>
c0006601:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006605:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000660b:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000660e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006611:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006618:	8d 44 24 58          	lea    eax,[esp+0x58]
c000661c:	e8 64 e5 ff ff       	call   c0004b85 <follow_path>
c0006621:	85 c0                	test   eax,eax
c0006623:	0f 85 52 02 00 00    	jne    c000687b <f_rename+0x2d4>
c0006629:	b8 06 00 00 00       	mov    eax,0x6
c000662e:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006636:	0f 85 3f 02 00 00    	jne    c000687b <f_rename+0x2d4>
c000663c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006640:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006643:	0f 85 05 01 00 00    	jne    c000674e <f_rename+0x1a7>
c0006649:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000664c:	b9 40 00 00 00       	mov    ecx,0x40
c0006651:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006655:	e8 a4 b3 ff ff       	call   c00019fe <mem_cpy>
c000665a:	b9 4c 00 00 00       	mov    ecx,0x4c
c000665f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006663:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000666a:	e8 8f b3 ff ff       	call   c00019fe <mem_cpy>
c000666f:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006676:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000667d:	e8 03 e5 ff ff       	call   c0004b85 <follow_path>
c0006682:	85 c0                	test   eax,eax
c0006684:	75 29                	jne    c00066af <f_rename+0x108>
c0006686:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000668a:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006691:	74 0a                	je     c000669d <f_rename+0xf6>
c0006693:	b8 08 00 00 00       	mov    eax,0x8
c0006698:	e9 de 01 00 00       	jmp    c000687b <f_rename+0x2d4>
c000669d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00066a4:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00066ab:	75 e6                	jne    c0006693 <f_rename+0xec>
c00066ad:	eb 09                	jmp    c00066b8 <f_rename+0x111>
c00066af:	83 f8 04             	cmp    eax,0x4
c00066b2:	0f 85 c3 01 00 00    	jne    c000687b <f_rename+0x2d4>
c00066b8:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066bf:	e8 42 d9 ff ff       	call   c0004006 <dir_register>
c00066c4:	85 c0                	test   eax,eax
c00066c6:	0f 85 af 01 00 00    	jne    c000687b <f_rename+0x2d4>
c00066cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d0:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00066d3:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00066d6:	89 c5                	mov    ebp,eax
c00066d8:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066db:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066df:	8d 46 24             	lea    eax,[esi+0x24]
c00066e2:	e8 98 b2 ff ff       	call   c000197f <ld_word>
c00066e7:	b9 40 00 00 00       	mov    ecx,0x40
c00066ec:	89 c7                	mov    edi,eax
c00066ee:	8d 54 24 18          	lea    edx,[esp+0x18]
c00066f2:	89 f0                	mov    eax,esi
c00066f4:	e8 05 b3 ff ff       	call   c00019fe <mem_cpy>
c00066f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066fd:	89 e9                	mov    ecx,ebp
c00066ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006702:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006705:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006709:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006710:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006713:	0f b7 d7             	movzx  edx,di
c0006716:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006719:	83 c0 24             	add    eax,0x24
c000671c:	e8 d0 b2 ff ff       	call   c00019f1 <st_word>
c0006721:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006725:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006728:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000672b:	a8 10                	test   al,0x10
c000672d:	75 06                	jne    c0006735 <f_rename+0x18e>
c000672f:	83 c8 20             	or     eax,0x20
c0006732:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006735:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000673c:	e8 9c d1 ff ff       	call   c00038dd <store_xdir>
c0006741:	85 c0                	test   eax,eax
c0006743:	0f 84 1c 01 00 00    	je     c0006865 <f_rename+0x2be>
c0006749:	e9 2d 01 00 00       	jmp    c000687b <f_rename+0x2d4>
c000674e:	b9 20 00 00 00       	mov    ecx,0x20
c0006753:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000675a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000675e:	e8 9b b2 ff ff       	call   c00019fe <mem_cpy>
c0006763:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006768:	8d 54 24 58          	lea    edx,[esp+0x58]
c000676c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006773:	e8 86 b2 ff ff       	call   c00019fe <mem_cpy>
c0006778:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000677f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006786:	e8 fa e3 ff ff       	call   c0004b85 <follow_path>
c000678b:	85 c0                	test   eax,eax
c000678d:	75 27                	jne    c00067b6 <f_rename+0x20f>
c000678f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006793:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000679a:	0f 85 f3 fe ff ff    	jne    c0006693 <f_rename+0xec>
c00067a0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00067a7:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00067ae:	0f 85 df fe ff ff    	jne    c0006693 <f_rename+0xec>
c00067b4:	eb 09                	jmp    c00067bf <f_rename+0x218>
c00067b6:	83 f8 04             	cmp    eax,0x4
c00067b9:	0f 85 bc 00 00 00    	jne    c000687b <f_rename+0x2d4>
c00067bf:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067c6:	e8 3b d8 ff ff       	call   c0004006 <dir_register>
c00067cb:	85 c0                	test   eax,eax
c00067cd:	0f 85 a8 00 00 00    	jne    c000687b <f_rename+0x2d4>
c00067d3:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00067da:	b9 13 00 00 00       	mov    ecx,0x13
c00067df:	8d 46 0d             	lea    eax,[esi+0xd]
c00067e2:	8d 54 24 25          	lea    edx,[esp+0x25]
c00067e6:	e8 13 b2 ff ff       	call   c00019fe <mem_cpy>
c00067eb:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00067ef:	a8 10                	test   al,0x10
c00067f1:	75 03                	jne    c00067f6 <f_rename+0x24f>
c00067f3:	83 c8 20             	or     eax,0x20
c00067f6:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00067f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067fd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006801:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006805:	74 5e                	je     c0006865 <f_rename+0x2be>
c0006807:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000680e:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006812:	74 51                	je     c0006865 <f_rename+0x2be>
c0006814:	89 f2                	mov    edx,esi
c0006816:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000681a:	8a 07                	mov    al,BYTE PTR [edi]
c000681c:	e8 d9 e2 ff ff       	call   c0004afa <ld_clust.isra.0>
c0006821:	89 c2                	mov    edx,eax
c0006823:	89 f8                	mov    eax,edi
c0006825:	e8 ee b3 ff ff       	call   c0001c18 <clst2sect>
c000682a:	89 c6                	mov    esi,eax
c000682c:	89 d1                	mov    ecx,edx
c000682e:	b8 02 00 00 00       	mov    eax,0x2
c0006833:	09 f2                	or     edx,esi
c0006835:	74 44                	je     c000687b <f_rename+0x2d4>
c0006837:	89 f2                	mov    edx,esi
c0006839:	89 f8                	mov    eax,edi
c000683b:	e8 1d b9 ff ff       	call   c000215d <move_window>
c0006840:	85 c0                	test   eax,eax
c0006842:	75 37                	jne    c000687b <f_rename+0x2d4>
c0006844:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006848:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000684c:	75 17                	jne    c0006865 <f_rename+0x2be>
c000684e:	8d 50 74             	lea    edx,[eax+0x74]
c0006851:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006858:	e8 c6 e2 ff ff       	call   c0004b23 <st_clust.isra.1>
c000685d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006861:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006865:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006869:	e8 f4 d0 ff ff       	call   c0003962 <dir_remove>
c000686e:	85 c0                	test   eax,eax
c0006870:	75 09                	jne    c000687b <f_rename+0x2d4>
c0006872:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006876:	e8 0d da ff ff       	call   c0004288 <sync_fs>
c000687b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000687f:	83 ec 0c             	sub    esp,0xc
c0006882:	53                   	push   ebx
c0006883:	e8 78 1b 00 00       	call   c0008400 <ff_memfree>
c0006888:	83 c4 10             	add    esp,0x10
c000688b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000688f:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006895:	5b                   	pop    ebx
c0006896:	5e                   	pop    esi
c0006897:	5f                   	pop    edi
c0006898:	5d                   	pop    ebp
c0006899:	c3                   	ret    

c000689a <f_chmod>:
c000689a:	57                   	push   edi
c000689b:	b9 02 00 00 00       	mov    ecx,0x2
c00068a0:	56                   	push   esi
c00068a1:	53                   	push   ebx
c00068a2:	83 ec 60             	sub    esp,0x60
c00068a5:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00068a9:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00068ad:	8d 54 24 10          	lea    edx,[esp+0x10]
c00068b1:	8d 44 24 70          	lea    eax,[esp+0x70]
c00068b5:	e8 55 bb ff ff       	call   c000240f <mount_volume>
c00068ba:	85 c0                	test   eax,eax
c00068bc:	0f 85 af 00 00 00    	jne    c0006971 <f_chmod+0xd7>
c00068c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068c6:	83 ec 0c             	sub    esp,0xc
c00068c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00068cd:	68 60 04 00 00       	push   0x460
c00068d2:	e8 11 1b 00 00       	call   c00083e8 <ff_memalloc>
c00068d7:	83 c4 10             	add    esp,0x10
c00068da:	89 c6                	mov    esi,eax
c00068dc:	b8 11 00 00 00       	mov    eax,0x11
c00068e1:	85 f6                	test   esi,esi
c00068e3:	0f 84 88 00 00 00    	je     c0006971 <f_chmod+0xd7>
c00068e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068ed:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00068f3:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00068f6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f9:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00068fd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006901:	e8 7f e2 ff ff       	call   c0004b85 <follow_path>
c0006906:	85 c0                	test   eax,eax
c0006908:	75 53                	jne    c000695d <f_chmod+0xc3>
c000690a:	b8 06 00 00 00       	mov    eax,0x6
c000690f:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006914:	75 47                	jne    c000695d <f_chmod+0xc3>
c0006916:	89 f9                	mov    ecx,edi
c0006918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000691c:	83 e1 27             	and    ecx,0x27
c000691f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006922:	75 1d                	jne    c0006941 <f_chmod+0xa7>
c0006924:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006927:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000692a:	21 cb                	and    ebx,ecx
c000692c:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000692f:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006932:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006936:	e8 a2 cf ff ff       	call   c00038dd <store_xdir>
c000693b:	85 c0                	test   eax,eax
c000693d:	75 1e                	jne    c000695d <f_chmod+0xc3>
c000693f:	eb 13                	jmp    c0006954 <f_chmod+0xba>
c0006941:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006945:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006948:	21 cb                	and    ebx,ecx
c000694a:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c000694d:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006950:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006958:	e8 2b d9 ff ff       	call   c0004288 <sync_fs>
c000695d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006961:	83 ec 0c             	sub    esp,0xc
c0006964:	56                   	push   esi
c0006965:	e8 96 1a 00 00       	call   c0008400 <ff_memfree>
c000696a:	83 c4 10             	add    esp,0x10
c000696d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006971:	83 c4 60             	add    esp,0x60
c0006974:	5b                   	pop    ebx
c0006975:	5e                   	pop    esi
c0006976:	5f                   	pop    edi
c0006977:	c3                   	ret    

c0006978 <f_utime>:
c0006978:	56                   	push   esi
c0006979:	b9 02 00 00 00       	mov    ecx,0x2
c000697e:	53                   	push   ebx
c000697f:	83 ec 64             	sub    esp,0x64
c0006982:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006986:	8d 54 24 10          	lea    edx,[esp+0x10]
c000698a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000698e:	e8 7c ba ff ff       	call   c000240f <mount_volume>
c0006993:	85 c0                	test   eax,eax
c0006995:	0f 85 b5 00 00 00    	jne    c0006a50 <f_utime+0xd8>
c000699b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000699f:	83 ec 0c             	sub    esp,0xc
c00069a2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069a6:	68 60 04 00 00       	push   0x460
c00069ab:	e8 38 1a 00 00       	call   c00083e8 <ff_memalloc>
c00069b0:	83 c4 10             	add    esp,0x10
c00069b3:	89 c3                	mov    ebx,eax
c00069b5:	b8 11 00 00 00       	mov    eax,0x11
c00069ba:	85 db                	test   ebx,ebx
c00069bc:	0f 84 8e 00 00 00    	je     c0006a50 <f_utime+0xd8>
c00069c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069c6:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00069cc:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00069cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069d2:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069da:	e8 a6 e1 ff ff       	call   c0004b85 <follow_path>
c00069df:	85 c0                	test   eax,eax
c00069e1:	75 59                	jne    c0006a3c <f_utime+0xc4>
c00069e3:	b8 06 00 00 00       	mov    eax,0x6
c00069e8:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069ed:	75 4d                	jne    c0006a3c <f_utime+0xc4>
c00069ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069f3:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c00069f7:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c00069fb:	c1 e2 10             	shl    edx,0x10
c00069fe:	09 ca                	or     edx,ecx
c0006a00:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a03:	75 1a                	jne    c0006a1f <f_utime+0xa7>
c0006a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a08:	83 c0 0c             	add    eax,0xc
c0006a0b:	e8 e5 af ff ff       	call   c00019f5 <st_dword>
c0006a10:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a14:	e8 c4 ce ff ff       	call   c00038dd <store_xdir>
c0006a19:	85 c0                	test   eax,eax
c0006a1b:	75 1f                	jne    c0006a3c <f_utime+0xc4>
c0006a1d:	eb 14                	jmp    c0006a33 <f_utime+0xbb>
c0006a1f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a23:	83 c0 16             	add    eax,0x16
c0006a26:	e8 ca af ff ff       	call   c00019f5 <st_dword>
c0006a2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a2f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a37:	e8 4c d8 ff ff       	call   c0004288 <sync_fs>
c0006a3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a40:	83 ec 0c             	sub    esp,0xc
c0006a43:	53                   	push   ebx
c0006a44:	e8 b7 19 00 00       	call   c0008400 <ff_memfree>
c0006a49:	83 c4 10             	add    esp,0x10
c0006a4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a50:	83 c4 64             	add    esp,0x64
c0006a53:	5b                   	pop    ebx
c0006a54:	5e                   	pop    esi
c0006a55:	c3                   	ret    

c0006a56 <f_getlabel>:
c0006a56:	55                   	push   ebp
c0006a57:	31 c9                	xor    ecx,ecx
c0006a59:	57                   	push   edi
c0006a5a:	56                   	push   esi
c0006a5b:	53                   	push   ebx
c0006a5c:	83 ec 6c             	sub    esp,0x6c
c0006a5f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a63:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a6a:	e8 a0 b9 ff ff       	call   c000240f <mount_volume>
c0006a6f:	89 c6                	mov    esi,eax
c0006a71:	85 c0                	test   eax,eax
c0006a73:	0f 85 c1 01 00 00    	jne    c0006c3a <f_getlabel+0x1e4>
c0006a79:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a81:	0f 84 5f 01 00 00    	je     c0006be6 <f_getlabel+0x190>
c0006a87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a8b:	31 d2                	xor    edx,edx
c0006a8d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006a91:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006a99:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a9d:	e8 39 c4 ff ff       	call   c0002edb <dir_sdi>
c0006aa2:	85 c0                	test   eax,eax
c0006aa4:	0f 85 2d 01 00 00    	jne    c0006bd7 <f_getlabel+0x181>
c0006aaa:	ba 01 00 00 00       	mov    edx,0x1
c0006aaf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ab3:	e8 33 cc ff ff       	call   c00036eb <dir_read>
c0006ab8:	85 c0                	test   eax,eax
c0006aba:	0f 85 17 01 00 00    	jne    c0006bd7 <f_getlabel+0x181>
c0006ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ac7:	74 09                	je     c0006ad2 <f_getlabel+0x7c>
c0006ac9:	31 db                	xor    ebx,ebx
c0006acb:	31 c9                	xor    ecx,ecx
c0006acd:	e9 c8 00 00 00       	jmp    c0006b9a <f_getlabel+0x144>
c0006ad2:	31 ed                	xor    ebp,ebp
c0006ad4:	31 db                	xor    ebx,ebx
c0006ad6:	31 ff                	xor    edi,edi
c0006ad8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006adc:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006ae0:	39 fa                	cmp    edx,edi
c0006ae2:	76 4b                	jbe    c0006b2f <f_getlabel+0xd9>
c0006ae4:	47                   	inc    edi
c0006ae5:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006ae8:	01 d0                	add    eax,edx
c0006aea:	e8 90 ae ff ff       	call   c000197f <ld_word>
c0006aef:	66 85 ed             	test   bp,bp
c0006af2:	75 0d                	jne    c0006b01 <f_getlabel+0xab>
c0006af4:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006afa:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006aff:	76 28                	jbe    c0006b29 <f_getlabel+0xd3>
c0006b01:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b08:	89 e9                	mov    ecx,ebp
c0006b0a:	01 da                	add    edx,ebx
c0006b0c:	c1 e1 10             	shl    ecx,0x10
c0006b0f:	0f b7 c0             	movzx  eax,ax
c0006b12:	09 c8                	or     eax,ecx
c0006b14:	b9 04 00 00 00       	mov    ecx,0x4
c0006b19:	e8 01 b0 ff ff       	call   c0001b1f <put_utf>
c0006b1e:	84 c0                	test   al,al
c0006b20:	74 0b                	je     c0006b2d <f_getlabel+0xd7>
c0006b22:	0f b6 c0             	movzx  eax,al
c0006b25:	01 c3                	add    ebx,eax
c0006b27:	31 c0                	xor    eax,eax
c0006b29:	89 c5                	mov    ebp,eax
c0006b2b:	eb ab                	jmp    c0006ad8 <f_getlabel+0x82>
c0006b2d:	31 db                	xor    ebx,ebx
c0006b2f:	66 85 ed             	test   bp,bp
c0006b32:	74 02                	je     c0006b36 <f_getlabel+0xe0>
c0006b34:	31 db                	xor    ebx,ebx
c0006b36:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b3d:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006b41:	e9 a0 00 00 00       	jmp    c0006be6 <f_getlabel+0x190>
c0006b46:	83 ff 0b             	cmp    edi,0xb
c0006b49:	74 11                	je     c0006b5c <f_getlabel+0x106>
c0006b4b:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b54:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b57:	c1 e0 08             	shl    eax,0x8
c0006b5a:	09 c2                	or     edx,eax
c0006b5c:	0f b7 d2             	movzx  edx,dx
c0006b5f:	50                   	push   eax
c0006b60:	50                   	push   eax
c0006b61:	68 b5 01 00 00       	push   0x1b5
c0006b66:	52                   	push   edx
c0006b67:	e8 44 19 00 00       	call   c00084b0 <ff_oem2uni>
c0006b6c:	83 c4 10             	add    esp,0x10
c0006b6f:	66 85 c0             	test   ax,ax
c0006b72:	74 46                	je     c0006bba <f_getlabel+0x164>
c0006b74:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b7b:	0f b7 c0             	movzx  eax,ax
c0006b7e:	01 da                	add    edx,ebx
c0006b80:	b9 04 00 00 00       	mov    ecx,0x4
c0006b85:	e8 95 af ff ff       	call   c0001b1f <put_utf>
c0006b8a:	84 c0                	test   al,al
c0006b8c:	74 2c                	je     c0006bba <f_getlabel+0x164>
c0006b8e:	0f b6 c0             	movzx  eax,al
c0006b91:	01 c3                	add    ebx,eax
c0006b93:	83 ff 0b             	cmp    edi,0xb
c0006b96:	74 24                	je     c0006bbc <f_getlabel+0x166>
c0006b98:	89 f9                	mov    ecx,edi
c0006b9a:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006b9e:	8d 79 01             	lea    edi,[ecx+0x1]
c0006ba1:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006ba6:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006bab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006baf:	e8 9f ae ff ff       	call   c0001a53 <dbc_1st>
c0006bb4:	85 c0                	test   eax,eax
c0006bb6:	74 a4                	je     c0006b5c <f_getlabel+0x106>
c0006bb8:	eb 8c                	jmp    c0006b46 <f_getlabel+0xf0>
c0006bba:	31 db                	xor    ebx,ebx
c0006bbc:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006bc3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006bc6:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006bcd:	74 17                	je     c0006be6 <f_getlabel+0x190>
c0006bcf:	4b                   	dec    ebx
c0006bd0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006bd3:	74 ee                	je     c0006bc3 <f_getlabel+0x16d>
c0006bd5:	eb 0f                	jmp    c0006be6 <f_getlabel+0x190>
c0006bd7:	83 f8 04             	cmp    eax,0x4
c0006bda:	75 5c                	jne    c0006c38 <f_getlabel+0x1e2>
c0006bdc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006be3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006be6:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006bee:	74 4a                	je     c0006c3a <f_getlabel+0x1e4>
c0006bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bf4:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006bf7:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006bfa:	e8 5e b5 ff ff       	call   c000215d <move_window>
c0006bff:	89 c6                	mov    esi,eax
c0006c01:	85 c0                	test   eax,eax
c0006c03:	75 35                	jne    c0006c3a <f_getlabel+0x1e4>
c0006c05:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c09:	b8 43 00 00 00       	mov    eax,0x43
c0006c0e:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c10:	80 f9 03             	cmp    cl,0x3
c0006c13:	74 0f                	je     c0006c24 <f_getlabel+0x1ce>
c0006c15:	31 c0                	xor    eax,eax
c0006c17:	80 f9 04             	cmp    cl,0x4
c0006c1a:	0f 94 c0             	sete   al
c0006c1d:	48                   	dec    eax
c0006c1e:	83 e0 c3             	and    eax,0xffffffc3
c0006c21:	83 c0 64             	add    eax,0x64
c0006c24:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006c28:	e8 5f ad ff ff       	call   c000198c <ld_dword>
c0006c2d:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c34:	89 07                	mov    DWORD PTR [edi],eax
c0006c36:	eb 02                	jmp    c0006c3a <f_getlabel+0x1e4>
c0006c38:	89 c6                	mov    esi,eax
c0006c3a:	83 c4 6c             	add    esp,0x6c
c0006c3d:	89 f0                	mov    eax,esi
c0006c3f:	5b                   	pop    ebx
c0006c40:	5e                   	pop    esi
c0006c41:	5f                   	pop    edi
c0006c42:	5d                   	pop    ebp
c0006c43:	c3                   	ret    

c0006c44 <f_setlabel>:
c0006c44:	56                   	push   esi
c0006c45:	b9 02 00 00 00       	mov    ecx,0x2
c0006c4a:	53                   	push   ebx
c0006c4b:	83 ec 74             	sub    esp,0x74
c0006c4e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c52:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c59:	e8 b1 b7 ff ff       	call   c000240f <mount_volume>
c0006c5e:	89 c6                	mov    esi,eax
c0006c60:	85 c0                	test   eax,eax
c0006c62:	0f 85 41 02 00 00    	jne    c0006ea9 <f_setlabel+0x265>
c0006c68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c6f:	0f 85 8e 00 00 00    	jne    c0006d03 <f_setlabel+0xbf>
c0006c75:	b9 16 00 00 00       	mov    ecx,0x16
c0006c7a:	31 d2                	xor    edx,edx
c0006c7c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c80:	31 db                	xor    ebx,ebx
c0006c82:	e8 8c ad ff ff       	call   c0001a13 <mem_set>
c0006c87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006c8e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006c91:	0f 86 0a 01 00 00    	jbe    c0006da1 <f_setlabel+0x15d>
c0006c97:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c9e:	e8 b6 ad ff ff       	call   c0001a59 <tchar2uni>
c0006ca3:	89 c6                	mov    esi,eax
c0006ca5:	3d ff ff 00 00       	cmp    eax,0xffff
c0006caa:	76 2a                	jbe    c0006cd6 <f_setlabel+0x92>
c0006cac:	83 f8 ff             	cmp    eax,0xffffffff
c0006caf:	74 05                	je     c0006cb6 <f_setlabel+0x72>
c0006cb1:	83 fb 09             	cmp    ebx,0x9
c0006cb4:	76 0a                	jbe    c0006cc0 <f_setlabel+0x7c>
c0006cb6:	be 06 00 00 00       	mov    esi,0x6
c0006cbb:	e9 e9 01 00 00       	jmp    c0006ea9 <f_setlabel+0x265>
c0006cc0:	89 c2                	mov    edx,eax
c0006cc2:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cc6:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cc9:	c1 ea 10             	shr    edx,0x10
c0006ccc:	01 c8                	add    eax,ecx
c0006cce:	43                   	inc    ebx
c0006ccf:	e8 1d ad ff ff       	call   c00019f1 <st_word>
c0006cd4:	eb 04                	jmp    c0006cda <f_setlabel+0x96>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	74 dc                	je     c0006cb6 <f_setlabel+0x72>
c0006cda:	89 f2                	mov    edx,esi
c0006cdc:	b8 57 01 02 c0       	mov    eax,0xc0020157
c0006ce1:	e8 5b ad ff ff       	call   c0001a41 <chk_chr>
c0006ce6:	85 c0                	test   eax,eax
c0006ce8:	75 cc                	jne    c0006cb6 <f_setlabel+0x72>
c0006cea:	83 fb 0a             	cmp    ebx,0xa
c0006ced:	77 c7                	ja     c0006cb6 <f_setlabel+0x72>
c0006cef:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cf2:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cf6:	0f b7 d6             	movzx  edx,si
c0006cf9:	01 c8                	add    eax,ecx
c0006cfb:	43                   	inc    ebx
c0006cfc:	e8 f0 ac ff ff       	call   c00019f1 <st_word>
c0006d01:	eb 84                	jmp    c0006c87 <f_setlabel+0x43>
c0006d03:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d08:	ba 20 00 00 00       	mov    edx,0x20
c0006d0d:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d11:	31 db                	xor    ebx,ebx
c0006d13:	e8 fb ac ff ff       	call   c0001a13 <mem_set>
c0006d18:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d1f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d22:	76 60                	jbe    c0006d84 <f_setlabel+0x140>
c0006d24:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d2b:	e8 29 ad ff ff       	call   c0001a59 <tchar2uni>
c0006d30:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d35:	0f 87 7b ff ff ff    	ja     c0006cb6 <f_setlabel+0x72>
c0006d3b:	83 ec 0c             	sub    esp,0xc
c0006d3e:	50                   	push   eax
c0006d3f:	e8 e0 17 00 00       	call   c0008524 <ff_wtoupper>
c0006d44:	5a                   	pop    edx
c0006d45:	59                   	pop    ecx
c0006d46:	68 b5 01 00 00       	push   0x1b5
c0006d4b:	50                   	push   eax
c0006d4c:	e8 c7 16 00 00       	call   c0008418 <ff_uni2oem>
c0006d51:	83 c4 10             	add    esp,0x10
c0006d54:	89 c6                	mov    esi,eax
c0006d56:	66 85 c0             	test   ax,ax
c0006d59:	0f 84 57 ff ff ff    	je     c0006cb6 <f_setlabel+0x72>
c0006d5f:	0f b7 d0             	movzx  edx,ax
c0006d62:	b8 50 01 02 c0       	mov    eax,0xc0020150
c0006d67:	e8 d5 ac ff ff       	call   c0001a41 <chk_chr>
c0006d6c:	85 c0                	test   eax,eax
c0006d6e:	0f 85 42 ff ff ff    	jne    c0006cb6 <f_setlabel+0x72>
c0006d74:	66 81 fe ff 00       	cmp    si,0xff
c0006d79:	0f 87 14 01 00 00    	ja     c0006e93 <f_setlabel+0x24f>
c0006d7f:	e9 fa 00 00 00       	jmp    c0006e7e <f_setlabel+0x23a>
c0006d84:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006d89:	0f 84 27 ff ff ff    	je     c0006cb6 <f_setlabel+0x72>
c0006d8f:	85 db                	test   ebx,ebx
c0006d91:	74 0e                	je     c0006da1 <f_setlabel+0x15d>
c0006d93:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006d96:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006d9b:	75 04                	jne    c0006da1 <f_setlabel+0x15d>
c0006d9d:	89 c3                	mov    ebx,eax
c0006d9f:	eb ee                	jmp    c0006d8f <f_setlabel+0x14b>
c0006da1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006da5:	31 d2                	xor    edx,edx
c0006da7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006dab:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006db3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006db7:	e8 1f c1 ff ff       	call   c0002edb <dir_sdi>
c0006dbc:	89 c6                	mov    esi,eax
c0006dbe:	85 c0                	test   eax,eax
c0006dc0:	0f 85 e3 00 00 00    	jne    c0006ea9 <f_setlabel+0x265>
c0006dc6:	ba 01 00 00 00       	mov    edx,0x1
c0006dcb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dcf:	e8 17 c9 ff ff       	call   c00036eb <dir_read>
c0006dd4:	85 c0                	test   eax,eax
c0006dd6:	75 21                	jne    c0006df9 <f_setlabel+0x1b5>
c0006dd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ddc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006de0:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006de3:	74 5d                	je     c0006e42 <f_setlabel+0x1fe>
c0006de5:	85 db                	test   ebx,ebx
c0006de7:	74 0b                	je     c0006df4 <f_setlabel+0x1b0>
c0006de9:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dee:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006df2:	eb 70                	jmp    c0006e64 <f_setlabel+0x220>
c0006df4:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006df7:	eb 70                	jmp    c0006e69 <f_setlabel+0x225>
c0006df9:	83 f8 04             	cmp    eax,0x4
c0006dfc:	75 7c                	jne    c0006e7a <f_setlabel+0x236>
c0006dfe:	85 db                	test   ebx,ebx
c0006e00:	0f 84 a3 00 00 00    	je     c0006ea9 <f_setlabel+0x265>
c0006e06:	ba 01 00 00 00       	mov    edx,0x1
c0006e0b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e0f:	e8 51 ca ff ff       	call   c0003865 <dir_alloc>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	85 c0                	test   eax,eax
c0006e18:	0f 85 8b 00 00 00    	jne    c0006ea9 <f_setlabel+0x265>
c0006e1e:	31 d2                	xor    edx,edx
c0006e20:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e24:	b9 20 00 00 00       	mov    ecx,0x20
c0006e29:	e8 e5 ab ff ff       	call   c0001a13 <mem_set>
c0006e2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e32:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e35:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e39:	75 18                	jne    c0006e53 <f_setlabel+0x20f>
c0006e3b:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e3e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e42:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e45:	b9 16 00 00 00       	mov    ecx,0x16
c0006e4a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e4e:	83 c0 02             	add    eax,0x2
c0006e51:	eb 9b                	jmp    c0006dee <f_setlabel+0x1aa>
c0006e53:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e57:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e5c:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e60:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e64:	e8 95 ab ff ff       	call   c00019fe <mem_cpy>
c0006e69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e6d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e75:	e8 0e d4 ff ff       	call   c0004288 <sync_fs>
c0006e7a:	89 c6                	mov    esi,eax
c0006e7c:	eb 2b                	jmp    c0006ea9 <f_setlabel+0x265>
c0006e7e:	83 fb 0a             	cmp    ebx,0xa
c0006e81:	0f 87 2f fe ff ff    	ja     c0006cb6 <f_setlabel+0x72>
c0006e87:	89 f0                	mov    eax,esi
c0006e89:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e8d:	43                   	inc    ebx
c0006e8e:	e9 85 fe ff ff       	jmp    c0006d18 <f_setlabel+0xd4>
c0006e93:	83 fb 09             	cmp    ebx,0x9
c0006e96:	0f 87 1a fe ff ff    	ja     c0006cb6 <f_setlabel+0x72>
c0006e9c:	89 f0                	mov    eax,esi
c0006e9e:	66 c1 e8 08          	shr    ax,0x8
c0006ea2:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006ea6:	43                   	inc    ebx
c0006ea7:	eb de                	jmp    c0006e87 <f_setlabel+0x243>
c0006ea9:	89 f0                	mov    eax,esi
c0006eab:	83 c4 74             	add    esp,0x74
c0006eae:	5b                   	pop    ebx
c0006eaf:	5e                   	pop    esi
c0006eb0:	c3                   	ret    

c0006eb1 <f_expand>:
c0006eb1:	55                   	push   ebp
c0006eb2:	57                   	push   edi
c0006eb3:	56                   	push   esi
c0006eb4:	53                   	push   ebx
c0006eb5:	83 ec 3c             	sub    esp,0x3c
c0006eb8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0006ebc:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0006ec0:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0006ec4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006ec8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006ecc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed0:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0006ed4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006ed8:	89 d8                	mov    eax,ebx
c0006eda:	e8 a3 b1 ff ff       	call   c0002082 <validate>
c0006edf:	89 c5                	mov    ebp,eax
c0006ee1:	85 c0                	test   eax,eax
c0006ee3:	0f 85 f4 01 00 00    	jne    c00070dd <f_expand+0x22c>
c0006ee9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006eed:	85 ed                	test   ebp,ebp
c0006eef:	0f 85 e8 01 00 00    	jne    c00070dd <f_expand+0x22c>
c0006ef5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ef9:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006efd:	75 0a                	jne    c0006f09 <f_expand+0x58>
c0006eff:	bd 07 00 00 00       	mov    ebp,0x7
c0006f04:	e9 d4 01 00 00       	jmp    c00070dd <f_expand+0x22c>
c0006f09:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0006f0c:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c0006f0f:	75 ee                	jne    c0006eff <f_expand+0x4e>
c0006f11:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006f15:	74 e8                	je     c0006eff <f_expand+0x4e>
c0006f17:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0006f1b:	8a 0e                	mov    cl,BYTE PTR [esi]
c0006f1d:	80 f9 04             	cmp    cl,0x4
c0006f20:	74 07                	je     c0006f29 <f_expand+0x78>
c0006f22:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006f27:	77 d6                	ja     c0006eff <f_expand+0x4e>
c0006f29:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0006f2d:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0006f31:	c1 e0 09             	shl    eax,0x9
c0006f34:	8d 50 ff             	lea    edx,[eax-0x1]
c0006f37:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0006f3b:	0f 95 c2             	setne  dl
c0006f3e:	0f b6 d2             	movzx  edx,dl
c0006f41:	89 d7                	mov    edi,edx
c0006f43:	31 d2                	xor    edx,edx
c0006f45:	52                   	push   edx
c0006f46:	50                   	push   eax
c0006f47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0006f4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0006f4f:	e8 9c 83 01 00       	call   c001f2f0 <__udivdi3>
c0006f54:	83 c4 10             	add    esp,0x10
c0006f57:	01 f8                	add    eax,edi
c0006f59:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0006f5d:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0006f60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006f64:	83 ff 01             	cmp    edi,0x1
c0006f67:	76 05                	jbe    c0006f6e <f_expand+0xbd>
c0006f69:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0006f6c:	77 05                	ja     c0006f73 <f_expand+0xc2>
c0006f6e:	bf 02 00 00 00       	mov    edi,0x2
c0006f73:	80 f9 04             	cmp    cl,0x4
c0006f76:	75 19                	jne    c0006f91 <f_expand+0xe0>
c0006f78:	89 f0                	mov    eax,esi
c0006f7a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006f7e:	89 fa                	mov    edx,edi
c0006f80:	e8 f3 b9 ff ff       	call   c0002978 <find_bitmap>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	85 c0                	test   eax,eax
c0006f89:	0f 84 70 ff ff ff    	je     c0006eff <f_expand+0x4e>
c0006f8f:	eb 7f                	jmp    c0007010 <f_expand+0x15f>
c0006f91:	89 fe                	mov    esi,edi
c0006f93:	89 f9                	mov    ecx,edi
c0006f95:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0006f9d:	89 ca                	mov    edx,ecx
c0006f9f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006fa3:	89 d8                	mov    eax,ebx
c0006fa5:	e8 3b bd ff ff       	call   c0002ce5 <get_fat>
c0006faa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006fb2:	41                   	inc    ecx
c0006fb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006fb7:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0006fba:	77 05                	ja     c0006fc1 <f_expand+0x110>
c0006fbc:	b9 02 00 00 00       	mov    ecx,0x2
c0006fc1:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0006fc6:	74 3e                	je     c0007006 <f_expand+0x155>
c0006fc8:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0006fcd:	75 0a                	jne    c0006fd9 <f_expand+0x128>
c0006fcf:	bd 01 00 00 00       	mov    ebp,0x1
c0006fd4:	e9 04 01 00 00       	jmp    c00070dd <f_expand+0x22c>
c0006fd9:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0006fde:	75 13                	jne    c0006ff3 <f_expand+0x142>
c0006fe0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006fe4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006fe8:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c0006fec:	75 0f                	jne    c0006ffd <f_expand+0x14c>
c0006fee:	e9 ce 00 00 00       	jmp    c00070c1 <f_expand+0x210>
c0006ff3:	89 ce                	mov    esi,ecx
c0006ff5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0006ffd:	39 f9                	cmp    ecx,edi
c0006fff:	75 9c                	jne    c0006f9d <f_expand+0xec>
c0007001:	e9 f9 fe ff ff       	jmp    c0006eff <f_expand+0x4e>
c0007006:	bd 02 00 00 00       	mov    ebp,0x2
c000700b:	e9 cd 00 00 00       	jmp    c00070dd <f_expand+0x22c>
c0007010:	83 f8 ff             	cmp    eax,0xffffffff
c0007013:	74 ba                	je     c0006fcf <f_expand+0x11e>
c0007015:	8d 7e ff             	lea    edi,[esi-0x1]
c0007018:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000701c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007020:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007025:	74 51                	je     c0007078 <f_expand+0x1c7>
c0007027:	83 ec 0c             	sub    esp,0xc
c000702a:	89 f2                	mov    edx,esi
c000702c:	6a 01                	push   0x1
c000702e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007032:	e8 f4 b9 ff ff       	call   c0002a2b <change_bitmap>
c0007037:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000703b:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000703f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0007043:	83 c4 10             	add    esp,0x10
c0007046:	85 c0                	test   eax,eax
c0007048:	74 2e                	je     c0007078 <f_expand+0x1c7>
c000704a:	eb 71                	jmp    c00070bd <f_expand+0x20c>
c000704c:	83 c9 ff             	or     ecx,0xffffffff
c000704f:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007054:	74 03                	je     c0007059 <f_expand+0x1a8>
c0007056:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007059:	89 fa                	mov    edx,edi
c000705b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000705f:	e8 7c ba ff ff       	call   c0002ae0 <put_fat>
c0007064:	85 c0                	test   eax,eax
c0007066:	75 55                	jne    c00070bd <f_expand+0x20c>
c0007068:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000706c:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0007070:	47                   	inc    edi
c0007071:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007076:	75 d4                	jne    c000704c <f_expand+0x19b>
c0007078:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000707c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007080:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007085:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007088:	74 53                	je     c00070dd <f_expand+0x22c>
c000708a:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c000708d:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0007091:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007095:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007099:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000709d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00070a0:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00070a3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00070a6:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00070a9:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00070ac:	39 ca                	cmp    edx,ecx
c00070ae:	77 2d                	ja     c00070dd <f_expand+0x22c>
c00070b0:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c00070b4:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00070b8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00070bb:	eb 20                	jmp    c00070dd <f_expand+0x22c>
c00070bd:	89 c5                	mov    ebp,eax
c00070bf:	eb 1c                	jmp    c00070dd <f_expand+0x22c>
c00070c1:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00070c6:	74 0c                	je     c00070d4 <f_expand+0x223>
c00070c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070cc:	89 f7                	mov    edi,esi
c00070ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00070d2:	eb 9d                	jmp    c0007071 <f_expand+0x1c0>
c00070d4:	8d 46 ff             	lea    eax,[esi-0x1]
c00070d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00070db:	eb 9b                	jmp    c0007078 <f_expand+0x1c7>
c00070dd:	83 c4 3c             	add    esp,0x3c
c00070e0:	89 e8                	mov    eax,ebp
c00070e2:	5b                   	pop    ebx
c00070e3:	5e                   	pop    esi
c00070e4:	5f                   	pop    edi
c00070e5:	5d                   	pop    ebp
c00070e6:	c3                   	ret    

c00070e7 <f_forward>:
c00070e7:	55                   	push   ebp
c00070e8:	57                   	push   edi
c00070e9:	56                   	push   esi
c00070ea:	53                   	push   ebx
c00070eb:	83 ec 2c             	sub    esp,0x2c
c00070ee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00070f2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070f6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00070fc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007100:	89 d8                	mov    eax,ebx
c0007102:	e8 7b af ff ff       	call   c0002082 <validate>
c0007107:	89 c5                	mov    ebp,eax
c0007109:	85 c0                	test   eax,eax
c000710b:	0f 85 aa 01 00 00    	jne    c00072bb <f_forward+0x1d4>
c0007111:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007115:	85 ed                	test   ebp,ebp
c0007117:	0f 85 9e 01 00 00    	jne    c00072bb <f_forward+0x1d4>
c000711d:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007121:	0f 84 8f 01 00 00    	je     c00072b6 <f_forward+0x1cf>
c0007127:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000712a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000712d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0007130:	bf 00 00 00 00       	mov    edi,0x0
c0007135:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007138:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000713c:	89 d1                	mov    ecx,edx
c000713e:	19 f9                	sbb    ecx,edi
c0007140:	0f 83 cf 00 00 00    	jae    c0007215 <f_forward+0x12e>
c0007146:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000714a:	e9 c6 00 00 00       	jmp    c0007215 <f_forward+0x12e>
c000714f:	50                   	push   eax
c0007150:	50                   	push   eax
c0007151:	6a 00                	push   0x0
c0007153:	6a 00                	push   0x0
c0007155:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007159:	83 c4 10             	add    esp,0x10
c000715c:	85 c0                	test   eax,eax
c000715e:	0f 84 57 01 00 00    	je     c00072bb <f_forward+0x1d4>
c0007164:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007167:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000716b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000716e:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007172:	89 d7                	mov    edi,edx
c0007174:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007177:	89 c6                	mov    esi,eax
c0007179:	0f ac fe 09          	shrd   esi,edi,0x9
c000717d:	21 ce                	and    esi,ecx
c000717f:	89 c1                	mov    ecx,eax
c0007181:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007187:	0f 84 98 00 00 00    	je     c0007225 <f_forward+0x13e>
c000718d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007191:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007194:	89 c8                	mov    eax,ecx
c0007196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000719a:	e8 79 aa ff ff       	call   c0001c18 <clst2sect>
c000719f:	89 d7                	mov    edi,edx
c00071a1:	09 c7                	or     edi,eax
c00071a3:	0f 84 9e 00 00 00    	je     c0007247 <f_forward+0x160>
c00071a9:	31 ff                	xor    edi,edi
c00071ab:	8d 4b 50             	lea    ecx,[ebx+0x50]
c00071ae:	01 c6                	add    esi,eax
c00071b0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00071b4:	11 d7                	adc    edi,edx
c00071b6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00071b9:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00071bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00071c0:	39 fa                	cmp    edx,edi
c00071c2:	0f 85 a2 00 00 00    	jne    c000726a <f_forward+0x183>
c00071c8:	39 f0                	cmp    eax,esi
c00071ca:	0f 85 9a 00 00 00    	jne    c000726a <f_forward+0x183>
c00071d0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d3:	ba 00 02 00 00       	mov    edx,0x200
c00071d8:	25 ff 01 00 00       	and    eax,0x1ff
c00071dd:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00071e1:	29 c2                	sub    edx,eax
c00071e3:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00071e6:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00071e9:	39 d1                	cmp    ecx,edx
c00071eb:	76 02                	jbe    c00071ef <f_forward+0x108>
c00071ed:	89 d1                	mov    ecx,edx
c00071ef:	8d 73 50             	lea    esi,[ebx+0x50]
c00071f2:	52                   	push   edx
c00071f3:	01 c6                	add    esi,eax
c00071f5:	52                   	push   edx
c00071f6:	51                   	push   ecx
c00071f7:	56                   	push   esi
c00071f8:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071fc:	83 c4 10             	add    esp,0x10
c00071ff:	85 c0                	test   eax,eax
c0007201:	74 44                	je     c0007247 <f_forward+0x160>
c0007203:	31 ff                	xor    edi,edi
c0007205:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007208:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000720b:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000720f:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007213:	01 07                	add    DWORD PTR [edi],eax
c0007215:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000721a:	0f 85 2f ff ff ff    	jne    c000714f <f_forward+0x68>
c0007220:	e9 96 00 00 00       	jmp    c00072bb <f_forward+0x1d4>
c0007225:	85 f6                	test   esi,esi
c0007227:	0f 85 60 ff ff ff    	jne    c000718d <f_forward+0xa6>
c000722d:	89 d7                	mov    edi,edx
c000722f:	09 c7                	or     edi,eax
c0007231:	75 05                	jne    c0007238 <f_forward+0x151>
c0007233:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007236:	eb 0a                	jmp    c0007242 <f_forward+0x15b>
c0007238:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000723b:	89 d8                	mov    eax,ebx
c000723d:	e8 a3 ba ff ff       	call   c0002ce5 <get_fat>
c0007242:	83 f8 01             	cmp    eax,0x1
c0007245:	77 0b                	ja     c0007252 <f_forward+0x16b>
c0007247:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000724b:	bd 02 00 00 00       	mov    ebp,0x2
c0007250:	eb 69                	jmp    c00072bb <f_forward+0x1d4>
c0007252:	83 f8 ff             	cmp    eax,0xffffffff
c0007255:	75 0b                	jne    c0007262 <f_forward+0x17b>
c0007257:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000725b:	bd 01 00 00 00       	mov    ebp,0x1
c0007260:	eb 59                	jmp    c00072bb <f_forward+0x1d4>
c0007262:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007265:	e9 23 ff ff ff       	jmp    c000718d <f_forward+0xa6>
c000726a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000726e:	79 20                	jns    c0007290 <f_forward+0x1a9>
c0007270:	83 ec 0c             	sub    esp,0xc
c0007273:	6a 01                	push   0x1
c0007275:	52                   	push   edx
c0007276:	50                   	push   eax
c0007277:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000727b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000727f:	50                   	push   eax
c0007280:	e8 c5 a6 ff ff       	call   c000194a <disk_write>
c0007285:	83 c4 20             	add    esp,0x20
c0007288:	85 c0                	test   eax,eax
c000728a:	75 cb                	jne    c0007257 <f_forward+0x170>
c000728c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007290:	83 ec 0c             	sub    esp,0xc
c0007293:	6a 01                	push   0x1
c0007295:	57                   	push   edi
c0007296:	56                   	push   esi
c0007297:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000729b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000729f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00072a3:	50                   	push   eax
c00072a4:	e8 8b a6 ff ff       	call   c0001934 <disk_read>
c00072a9:	83 c4 20             	add    esp,0x20
c00072ac:	85 c0                	test   eax,eax
c00072ae:	0f 84 1c ff ff ff    	je     c00071d0 <f_forward+0xe9>
c00072b4:	eb a1                	jmp    c0007257 <f_forward+0x170>
c00072b6:	bd 07 00 00 00       	mov    ebp,0x7
c00072bb:	83 c4 2c             	add    esp,0x2c
c00072be:	89 e8                	mov    eax,ebp
c00072c0:	5b                   	pop    ebx
c00072c1:	5e                   	pop    esi
c00072c2:	5f                   	pop    edi
c00072c3:	5d                   	pop    ebp
c00072c4:	c3                   	ret    

c00072c5 <f_mkfs>:
c00072c5:	55                   	push   ebp
c00072c6:	57                   	push   edi
c00072c7:	56                   	push   esi
c00072c8:	53                   	push   ebx
c00072c9:	bb 0b 00 00 00       	mov    ebx,0xb
c00072ce:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00072d4:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00072db:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00072e2:	e8 7a ac ff ff       	call   c0001f61 <get_ldnumber>
c00072e7:	85 c0                	test   eax,eax
c00072e9:	0f 88 ec 10 00 00    	js     c00083db <f_mkfs+0x1116>
c00072ef:	8b 14 85 60 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcea0]
c00072f6:	85 d2                	test   edx,edx
c00072f8:	74 03                	je     c00072fd <f_mkfs+0x38>
c00072fa:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00072fd:	85 f6                	test   esi,esi
c00072ff:	75 05                	jne    c0007306 <f_mkfs+0x41>
c0007301:	be 40 01 02 c0       	mov    esi,0xc0020140
c0007306:	83 ec 0c             	sub    esp,0xc
c0007309:	0f b6 c0             	movzx  eax,al
c000730c:	bb 03 00 00 00       	mov    ebx,0x3
c0007311:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007315:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007319:	e8 13 a6 ff ff       	call   c0001931 <disk_initialize>
c000731e:	83 c4 10             	add    esp,0x10
c0007321:	a8 01                	test   al,0x1
c0007323:	0f 85 b2 10 00 00    	jne    c00083db <f_mkfs+0x1116>
c0007329:	bb 0a 00 00 00       	mov    ebx,0xa
c000732e:	a8 04                	test   al,0x4
c0007330:	0f 85 a5 10 00 00    	jne    c00083db <f_mkfs+0x1116>
c0007336:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007339:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000733d:	85 c0                	test   eax,eax
c000733f:	75 20                	jne    c0007361 <f_mkfs+0x9c>
c0007341:	51                   	push   ecx
c0007342:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007346:	50                   	push   eax
c0007347:	6a 03                	push   0x3
c0007349:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734d:	e8 0e a6 ff ff       	call   c0001960 <disk_ioctl>
c0007352:	83 c4 10             	add    esp,0x10
c0007355:	85 c0                	test   eax,eax
c0007357:	74 08                	je     c0007361 <f_mkfs+0x9c>
c0007359:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007361:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007365:	8d 42 ff             	lea    eax,[edx-0x1]
c0007368:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000736d:	77 04                	ja     c0007373 <f_mkfs+0xae>
c000736f:	85 c2                	test   edx,eax
c0007371:	74 08                	je     c000737b <f_mkfs+0xb6>
c0007373:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000737b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000737e:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007382:	48                   	dec    eax
c0007383:	3c 01                	cmp    al,0x1
c0007385:	76 05                	jbe    c000738c <f_mkfs+0xc7>
c0007387:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c000738c:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000738f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007393:	48                   	dec    eax
c0007394:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007399:	77 07                	ja     c00073a2 <f_mkfs+0xdd>
c000739b:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00073a0:	74 08                	je     c00073aa <f_mkfs+0xe5>
c00073a2:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00073aa:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00073ad:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c00073b3:	77 07                	ja     c00073bc <f_mkfs+0xf7>
c00073b5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00073b8:	85 d8                	test   eax,ebx
c00073ba:	74 02                	je     c00073be <f_mkfs+0xf9>
c00073bc:	31 db                	xor    ebx,ebx
c00073be:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00073c9:	77 0a                	ja     c00073d5 <f_mkfs+0x110>
c00073cb:	bb 11 00 00 00       	mov    ebx,0x11
c00073d0:	e9 06 10 00 00       	jmp    c00083db <f_mkfs+0x1116>
c00073d5:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00073dc:	8b 36                	mov    esi,DWORD PTR [esi]
c00073de:	85 ed                	test   ebp,ebp
c00073e0:	75 1e                	jne    c0007400 <f_mkfs+0x13b>
c00073e2:	83 ec 0c             	sub    esp,0xc
c00073e5:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00073ec:	25 00 fe ff ff       	and    eax,0xfffffe00
c00073f1:	50                   	push   eax
c00073f2:	e8 f1 0f 00 00       	call   c00083e8 <ff_memalloc>
c00073f7:	83 c4 10             	add    esp,0x10
c00073fa:	89 c5                	mov    ebp,eax
c00073fc:	85 c0                	test   eax,eax
c00073fe:	74 cb                	je     c00073cb <f_mkfs+0x106>
c0007400:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007408:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007410:	52                   	push   edx
c0007411:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007415:	50                   	push   eax
c0007416:	6a 01                	push   0x1
c0007418:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000741c:	e8 3f a5 ff ff       	call   c0001960 <disk_ioctl>
c0007421:	83 c4 10             	add    esp,0x10
c0007424:	85 c0                	test   eax,eax
c0007426:	0f 85 4a 0f 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c000742c:	89 f1                	mov    ecx,esi
c000742e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007436:	83 e1 0f             	and    ecx,0xf
c0007439:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007441:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007445:	83 e6 08             	and    esi,0x8
c0007448:	75 56                	jne    c00074a0 <f_mkfs+0x1db>
c000744a:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000744e:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007452:	83 ff 00             	cmp    edi,0x0
c0007455:	76 20                	jbe    c0007477 <f_mkfs+0x1b2>
c0007457:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c000745c:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007464:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000746a:	83 d7 ff             	adc    edi,0xffffffff
c000746d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007471:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007475:	eb 21                	jmp    c0007498 <f_mkfs+0x1d3>
c0007477:	ba 3f 00 00 00       	mov    edx,0x3f
c000747c:	39 f2                	cmp    edx,esi
c000747e:	19 f8                	sbb    eax,edi
c0007480:	73 1e                	jae    c00074a0 <f_mkfs+0x1db>
c0007482:	83 c6 c1             	add    esi,0xffffffc1
c0007485:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000748d:	83 d7 ff             	adc    edi,0xffffffff
c0007490:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007494:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007498:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074a0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00074a4:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00074a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00074ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00074af:	31 c0                	xor    eax,eax
c00074b1:	ba 7f 00 00 00       	mov    edx,0x7f
c00074b6:	89 c7                	mov    edi,eax
c00074b8:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00074bb:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00074bf:	0f 83 c5 0a 00 00    	jae    c0007f8a <f_mkfs+0xcc5>
c00074c5:	89 df                	mov    edi,ebx
c00074c7:	c1 ef 09             	shr    edi,0x9
c00074ca:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00074ce:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00074d5:	c1 ef 09             	shr    edi,0x9
c00074d8:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00074dd:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00074e1:	74 29                	je     c000750c <f_mkfs+0x247>
c00074e3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00074e9:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00074ee:	0f 97 c2             	seta   dl
c00074f1:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00074f4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00074f8:	0f 92 c0             	setb   al
c00074fb:	08 c2                	or     dl,al
c00074fd:	75 5b                	jne    c000755a <f_mkfs+0x295>
c00074ff:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007503:	83 e0 07             	and    eax,0x7
c0007506:	3c 04                	cmp    al,0x4
c0007508:	74 50                	je     c000755a <f_mkfs+0x295>
c000750a:	eb 1b                	jmp    c0007527 <f_mkfs+0x262>
c000750c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007511:	0f 87 73 0a 00 00    	ja     c0007f8a <f_mkfs+0xcc5>
c0007517:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000751d:	76 08                	jbe    c0007527 <f_mkfs+0x262>
c000751f:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007527:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000752b:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000752f:	83 e0 01             	and    eax,0x1
c0007532:	80 e1 02             	and    cl,0x2
c0007535:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007539:	74 0d                	je     c0007548 <f_mkfs+0x283>
c000753b:	84 c0                	test   al,al
c000753d:	0f 84 53 09 00 00    	je     c0007e96 <f_mkfs+0xbd1>
c0007543:	e9 12 08 00 00       	jmp    c0007d5a <f_mkfs+0xa95>
c0007548:	bb 13 00 00 00       	mov    ebx,0x13
c000754d:	84 c0                	test   al,al
c000754f:	0f 85 05 08 00 00    	jne    c0007d5a <f_mkfs+0xa95>
c0007555:	e9 39 0e 00 00       	jmp    c0008393 <f_mkfs+0x10ce>
c000755a:	31 c0                	xor    eax,eax
c000755c:	ba ff 0f 00 00       	mov    edx,0xfff
c0007561:	89 c7                	mov    edi,eax
c0007563:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007566:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756a:	0f 83 1a 0a 00 00    	jae    c0007f8a <f_mkfs+0xcc5>
c0007570:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007576:	77 39                	ja     c00075b1 <f_mkfs+0x2ec>
c0007578:	ba ff ff 07 00       	mov    edx,0x7ffff
c000757d:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007585:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007588:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000758c:	73 08                	jae    c0007596 <f_mkfs+0x2d1>
c000758e:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007596:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000759b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000759e:	b8 00 00 00 00       	mov    eax,0x0
c00075a3:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a7:	73 08                	jae    c00075b1 <f_mkfs+0x2ec>
c00075a9:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00075b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075b9:	83 c0 20             	add    eax,0x20
c00075bc:	83 d2 00             	adc    edx,0x0
c00075bf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00075c3:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00075c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075cb:	31 d2                	xor    edx,edx
c00075cd:	31 ff                	xor    edi,edi
c00075cf:	52                   	push   edx
c00075d0:	89 fb                	mov    ebx,edi
c00075d2:	50                   	push   eax
c00075d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00075d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00075db:	e8 10 7d 01 00       	call   c001f2f0 <__udivdi3>
c00075e0:	83 c4 10             	add    esp,0x10
c00075e3:	c1 e0 02             	shl    eax,0x2
c00075e6:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00075ea:	05 07 02 00 00       	add    eax,0x207
c00075ef:	89 f1                	mov    ecx,esi
c00075f1:	c1 e8 09             	shr    eax,0x9
c00075f4:	83 c1 ff             	add    ecx,0xffffffff
c00075f7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00075fb:	83 d3 ff             	adc    ebx,0xffffffff
c00075fe:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007602:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007606:	31 d2                	xor    edx,edx
c0007608:	01 c8                	add    eax,ecx
c000760a:	11 da                	adc    edx,ebx
c000760c:	89 c1                	mov    ecx,eax
c000760e:	f7 de                	neg    esi
c0007610:	89 d0                	mov    eax,edx
c0007612:	83 d7 00             	adc    edi,0x0
c0007615:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007619:	f7 df                	neg    edi
c000761b:	21 f1                	and    ecx,esi
c000761d:	21 f8                	and    eax,edi
c000761f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007623:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007627:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000762b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000762f:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007633:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007636:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c000763a:	0f ac d0 01          	shrd   eax,edx,0x1
c000763e:	89 df                	mov    edi,ebx
c0007640:	d1 ea                	shr    edx,1
c0007642:	39 c1                	cmp    ecx,eax
c0007644:	19 d7                	sbb    edi,edx
c0007646:	0f 83 3e 09 00 00    	jae    c0007f8a <f_mkfs+0xcc5>
c000764c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007650:	31 d2                	xor    edx,edx
c0007652:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007656:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000765a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000765e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007661:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007665:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007669:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c000766d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007671:	83 f8 0f             	cmp    eax,0xf
c0007674:	0f 86 10 09 00 00    	jbe    c0007f8a <f_mkfs+0xcc5>
c000767a:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007682:	0f 87 02 09 00 00    	ja     c0007f8a <f_mkfs+0xcc5>
c0007688:	31 d2                	xor    edx,edx
c000768a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000768e:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007696:	83 c0 07             	add    eax,0x7
c0007699:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00076a1:	c1 e8 03             	shr    eax,0x3
c00076a4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00076ab:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00076af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076b3:	c1 e0 09             	shl    eax,0x9
c00076b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076ba:	48                   	dec    eax
c00076bb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076bf:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00076c3:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00076c7:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076cb:	31 d2                	xor    edx,edx
c00076cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00076d1:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00076d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076dc:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00076e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00076e5:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00076e9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00076ed:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00076f1:	31 ff                	xor    edi,edi
c00076f3:	31 f6                	xor    esi,esi
c00076f5:	31 db                	xor    ebx,ebx
c00076f7:	85 ff                	test   edi,edi
c00076f9:	74 05                	je     c0007700 <f_mkfs+0x43b>
c00076fb:	4f                   	dec    edi
c00076fc:	74 44                	je     c0007742 <f_mkfs+0x47d>
c00076fe:	eb 4f                	jmp    c000774f <f_mkfs+0x48a>
c0007700:	83 ec 0c             	sub    esp,0xc
c0007703:	0f b7 c3             	movzx  eax,bx
c0007706:	50                   	push   eax
c0007707:	e8 18 0e 00 00       	call   c0008524 <ff_wtoupper>
c000770c:	83 c4 10             	add    esp,0x10
c000770f:	89 c1                	mov    ecx,eax
c0007711:	8d 53 01             	lea    edx,[ebx+0x1]
c0007714:	66 39 c3             	cmp    bx,ax
c0007717:	75 3e                	jne    c0007757 <f_mkfs+0x492>
c0007719:	be 01 00 00 00       	mov    esi,0x1
c000771e:	89 df                	mov    edi,ebx
c0007720:	66 01 f7             	add    di,si
c0007723:	75 07                	jne    c000772c <f_mkfs+0x467>
c0007725:	83 fe 7f             	cmp    esi,0x7f
c0007728:	77 31                	ja     c000775b <f_mkfs+0x496>
c000772a:	eb 16                	jmp    c0007742 <f_mkfs+0x47d>
c000772c:	83 ec 0c             	sub    esp,0xc
c000772f:	0f b7 ff             	movzx  edi,di
c0007732:	57                   	push   edi
c0007733:	e8 ec 0d 00 00       	call   c0008524 <ff_wtoupper>
c0007738:	83 c4 10             	add    esp,0x10
c000773b:	39 c7                	cmp    edi,eax
c000773d:	75 e6                	jne    c0007725 <f_mkfs+0x460>
c000773f:	46                   	inc    esi
c0007740:	eb dc                	jmp    c000771e <f_mkfs+0x459>
c0007742:	31 c0                	xor    eax,eax
c0007744:	89 d9                	mov    ecx,ebx
c0007746:	4e                   	dec    esi
c0007747:	0f 95 c0             	setne  al
c000774a:	43                   	inc    ebx
c000774b:	89 c7                	mov    edi,eax
c000774d:	eb 14                	jmp    c0007763 <f_mkfs+0x49e>
c000774f:	89 f1                	mov    ecx,esi
c0007751:	01 f3                	add    ebx,esi
c0007753:	31 ff                	xor    edi,edi
c0007755:	eb 0c                	jmp    c0007763 <f_mkfs+0x49e>
c0007757:	89 d3                	mov    ebx,edx
c0007759:	eb 08                	jmp    c0007763 <f_mkfs+0x49e>
c000775b:	bf 02 00 00 00       	mov    edi,0x2
c0007760:	83 c9 ff             	or     ecx,0xffffffff
c0007763:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007767:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000776a:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000776e:	0f b6 c1             	movzx  eax,cl
c0007771:	e8 04 a7 ff ff       	call   c0001e7a <xsum32>
c0007776:	66 c1 e9 08          	shr    cx,0x8
c000777a:	89 c2                	mov    edx,eax
c000777c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000777f:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007783:	0f b7 c1             	movzx  eax,cx
c0007786:	e8 ef a6 ff ff       	call   c0001e7a <xsum32>
c000778b:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007790:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007794:	66 85 db             	test   bx,bx
c0007797:	74 1f                	je     c00077b8 <f_mkfs+0x4f3>
c0007799:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000779c:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00077a3:	83 c0 02             	add    eax,0x2
c00077a6:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00077ac:	39 c2                	cmp    edx,eax
c00077ae:	74 08                	je     c00077b8 <f_mkfs+0x4f3>
c00077b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00077b3:	e9 3f ff ff ff       	jmp    c00076f7 <f_mkfs+0x432>
c00077b8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077bb:	83 ec 0c             	sub    esp,0xc
c00077be:	05 01 02 00 00       	add    eax,0x201
c00077c3:	c1 e8 09             	shr    eax,0x9
c00077c6:	50                   	push   eax
c00077c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00077cb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077cf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077d3:	55                   	push   ebp
c00077d4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077d8:	e8 6d a1 ff ff       	call   c000194a <disk_write>
c00077dd:	83 c4 20             	add    esp,0x20
c00077e0:	85 c0                	test   eax,eax
c00077e2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00077e5:	0f 85 8b 0b 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c00077eb:	89 d0                	mov    eax,edx
c00077ed:	31 d2                	xor    edx,edx
c00077ef:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00077f3:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00077f7:	66 85 db             	test   bx,bx
c00077fa:	74 04                	je     c0007800 <f_mkfs+0x53b>
c00077fc:	31 c0                	xor    eax,eax
c00077fe:	eb b0                	jmp    c00077b0 <f_mkfs+0x4eb>
c0007800:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007804:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007808:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000780c:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007812:	31 d2                	xor    edx,edx
c0007814:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000781f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007823:	c1 eb 09             	shr    ebx,0x9
c0007826:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000782d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007831:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007835:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007839:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000783d:	8d 70 01             	lea    esi,[eax+0x1]
c0007840:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007844:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007848:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c000784f:	31 d2                	xor    edx,edx
c0007851:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007856:	89 04 24             	mov    DWORD PTR [esp],eax
c0007859:	89 c1                	mov    ecx,eax
c000785b:	89 e8                	mov    eax,ebp
c000785d:	e8 b1 a1 ff ff       	call   c0001a13 <mem_set>
c0007862:	31 c0                	xor    eax,eax
c0007864:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007867:	76 10                	jbe    c0007879 <f_mkfs+0x5b4>
c0007869:	83 fe 07             	cmp    esi,0x7
c000786c:	76 0b                	jbe    c0007879 <f_mkfs+0x5b4>
c000786e:	40                   	inc    eax
c000786f:	83 ee 08             	sub    esi,0x8
c0007872:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007877:	eb eb                	jmp    c0007864 <f_mkfs+0x59f>
c0007879:	b2 01                	mov    dl,0x1
c000787b:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000787f:	85 f6                	test   esi,esi
c0007881:	74 0c                	je     c000788f <f_mkfs+0x5ca>
c0007883:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007886:	76 07                	jbe    c000788f <f_mkfs+0x5ca>
c0007888:	08 11                	or     BYTE PTR [ecx],dl
c000788a:	4e                   	dec    esi
c000788b:	d1 e2                	shl    edx,1
c000788d:	eb f0                	jmp    c000787f <f_mkfs+0x5ba>
c000788f:	89 df                	mov    edi,ebx
c0007891:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007895:	76 04                	jbe    c000789b <f_mkfs+0x5d6>
c0007897:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000789b:	83 ec 0c             	sub    esp,0xc
c000789e:	57                   	push   edi
c000789f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00078a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00078a7:	55                   	push   ebp
c00078a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078ac:	e8 99 a0 ff ff       	call   c000194a <disk_write>
c00078b1:	83 c4 20             	add    esp,0x20
c00078b4:	85 c0                	test   eax,eax
c00078b6:	0f 85 ba 0a 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c00078bc:	31 d2                	xor    edx,edx
c00078be:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c00078c2:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c00078c6:	29 fb                	sub    ebx,edi
c00078c8:	0f 85 7a ff ff ff    	jne    c0007848 <f_mkfs+0x583>
c00078ce:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00078d2:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00078da:	31 f6                	xor    esi,esi
c00078dc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078e0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00078e3:	31 d2                	xor    edx,edx
c00078e5:	89 e8                	mov    eax,ebp
c00078e7:	e8 27 a1 ff ff       	call   c0001a13 <mem_set>
c00078ec:	31 c9                	xor    ecx,ecx
c00078ee:	85 db                	test   ebx,ebx
c00078f0:	75 40                	jne    c0007932 <f_mkfs+0x66d>
c00078f2:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00078f7:	89 e8                	mov    eax,ebp
c00078f9:	bb 02 00 00 00       	mov    ebx,0x2
c00078fe:	e8 f2 a0 ff ff       	call   c00019f5 <st_dword>
c0007903:	8d 45 04             	lea    eax,[ebp+0x4]
c0007906:	83 ca ff             	or     edx,0xffffffff
c0007909:	e8 e7 a0 ff ff       	call   c00019f5 <st_dword>
c000790e:	b9 08 00 00 00       	mov    ecx,0x8
c0007913:	eb 1d                	jmp    c0007932 <f_mkfs+0x66d>
c0007915:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007918:	76 3b                	jbe    c0007955 <f_mkfs+0x690>
c000791a:	43                   	inc    ebx
c000791b:	83 fe 01             	cmp    esi,0x1
c000791e:	89 da                	mov    edx,ebx
c0007920:	77 03                	ja     c0007925 <f_mkfs+0x660>
c0007922:	83 ca ff             	or     edx,0xffffffff
c0007925:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007929:	4e                   	dec    esi
c000792a:	e8 c6 a0 ff ff       	call   c00019f5 <st_dword>
c000792f:	83 c1 04             	add    ecx,0x4
c0007932:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007936:	85 f6                	test   esi,esi
c0007938:	75 db                	jne    c0007915 <f_mkfs+0x650>
c000793a:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000793f:	77 14                	ja     c0007955 <f_mkfs+0x690>
c0007941:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007945:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c000794c:	85 f6                	test   esi,esi
c000794e:	74 05                	je     c0007955 <f_mkfs+0x690>
c0007950:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007953:	77 dd                	ja     c0007932 <f_mkfs+0x66d>
c0007955:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007959:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000795d:	39 cf                	cmp    edi,ecx
c000795f:	76 02                	jbe    c0007963 <f_mkfs+0x69e>
c0007961:	89 cf                	mov    edi,ecx
c0007963:	83 ec 0c             	sub    esp,0xc
c0007966:	57                   	push   edi
c0007967:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000796b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000796f:	55                   	push   ebp
c0007970:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007974:	e8 d1 9f ff ff       	call   c000194a <disk_write>
c0007979:	83 c4 20             	add    esp,0x20
c000797c:	85 c0                	test   eax,eax
c000797e:	0f 85 f2 09 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007984:	31 d2                	xor    edx,edx
c0007986:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c000798a:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c000798e:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007992:	0f 85 48 ff ff ff    	jne    c00078e0 <f_mkfs+0x61b>
c0007998:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000799b:	31 d2                	xor    edx,edx
c000799d:	89 e8                	mov    eax,ebp
c000799f:	31 ff                	xor    edi,edi
c00079a1:	e8 6d a0 ff ff       	call   c0001a13 <mem_set>
c00079a6:	8d 45 34             	lea    eax,[ebp+0x34]
c00079a9:	ba 02 00 00 00       	mov    edx,0x2
c00079ae:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c00079b2:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c00079b6:	e8 3a a0 ff ff       	call   c00019f5 <st_dword>
c00079bb:	8d 45 38             	lea    eax,[ebp+0x38]
c00079be:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00079c2:	e8 2e a0 ff ff       	call   c00019f5 <st_dword>
c00079c7:	8d 45 44             	lea    eax,[ebp+0x44]
c00079ca:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00079ce:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c00079d2:	e8 1e a0 ff ff       	call   c00019f5 <st_dword>
c00079d7:	8d 45 54             	lea    eax,[ebp+0x54]
c00079da:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00079de:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00079e2:	83 c2 02             	add    edx,0x2
c00079e5:	e8 0b a0 ff ff       	call   c00019f5 <st_dword>
c00079ea:	8d 45 58             	lea    eax,[ebp+0x58]
c00079ed:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00079f1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00079f5:	e8 fb 9f ff ff       	call   c00019f5 <st_dword>
c00079fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079fe:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a03:	89 c6                	mov    esi,eax
c0007a05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a09:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a0d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a10:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a14:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a17:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a1b:	39 cb                	cmp    ebx,ecx
c0007a1d:	76 02                	jbe    c0007a21 <f_mkfs+0x75c>
c0007a1f:	89 cb                	mov    ebx,ecx
c0007a21:	83 ec 0c             	sub    esp,0xc
c0007a24:	53                   	push   ebx
c0007a25:	57                   	push   edi
c0007a26:	56                   	push   esi
c0007a27:	55                   	push   ebp
c0007a28:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a2c:	e8 19 9f ff ff       	call   c000194a <disk_write>
c0007a31:	83 c4 20             	add    esp,0x20
c0007a34:	85 c0                	test   eax,eax
c0007a36:	0f 85 3a 09 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007a3c:	31 d2                	xor    edx,edx
c0007a3e:	b9 00 02 00 00       	mov    ecx,0x200
c0007a43:	89 e8                	mov    eax,ebp
c0007a45:	e8 c9 9f ff ff       	call   c0001a13 <mem_set>
c0007a4a:	31 d2                	xor    edx,edx
c0007a4c:	01 de                	add    esi,ebx
c0007a4e:	11 d7                	adc    edi,edx
c0007a50:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007a53:	75 bf                	jne    c0007a14 <f_mkfs+0x74f>
c0007a55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007a59:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007a5d:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007a65:	b9 00 02 00 00       	mov    ecx,0x200
c0007a6a:	31 d2                	xor    edx,edx
c0007a6c:	89 e8                	mov    eax,ebp
c0007a6e:	e8 a0 9f ff ff       	call   c0001a13 <mem_set>
c0007a73:	b9 0b 00 00 00       	mov    ecx,0xb
c0007a78:	ba 20 02 02 c0       	mov    edx,0xc0020220
c0007a7d:	89 e8                	mov    eax,ebp
c0007a7f:	e8 7a 9f ff ff       	call   c00019fe <mem_cpy>
c0007a84:	8d 45 40             	lea    eax,[ebp+0x40]
c0007a87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007a8b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007a8f:	e8 64 9f ff ff       	call   c00019f8 <st_qword>
c0007a94:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007a98:	8d 45 48             	lea    eax,[ebp+0x48]
c0007a9b:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007a9f:	e8 54 9f ff ff       	call   c00019f8 <st_qword>
c0007aa4:	8d 45 50             	lea    eax,[ebp+0x50]
c0007aa7:	ba 20 00 00 00       	mov    edx,0x20
c0007aac:	e8 44 9f ff ff       	call   c00019f5 <st_dword>
c0007ab1:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007ab5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007ab9:	e8 37 9f ff ff       	call   c00019f5 <st_dword>
c0007abe:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007ac2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ac6:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007aca:	e8 26 9f ff ff       	call   c00019f5 <st_dword>
c0007acf:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007ad2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ad6:	e8 1a 9f ff ff       	call   c00019f5 <st_dword>
c0007adb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007adf:	8d 50 02             	lea    edx,[eax+0x2]
c0007ae2:	8d 45 60             	lea    eax,[ebp+0x60]
c0007ae5:	e8 0b 9f ff ff       	call   c00019f5 <st_dword>
c0007aea:	8d 45 64             	lea    eax,[ebp+0x64]
c0007aed:	ba 00 00 21 50       	mov    edx,0x50210000
c0007af2:	e8 fe 9e ff ff       	call   c00019f5 <st_dword>
c0007af7:	8d 45 68             	lea    eax,[ebp+0x68]
c0007afa:	ba 00 01 00 00       	mov    edx,0x100
c0007aff:	e8 ed 9e ff ff       	call   c00019f1 <st_word>
c0007b04:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b08:	b8 0a 00 00 00       	mov    eax,0xa
c0007b0d:	48                   	dec    eax
c0007b0e:	74 05                	je     c0007b15 <f_mkfs+0x850>
c0007b10:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b13:	eb f8                	jmp    c0007b0d <f_mkfs+0x848>
c0007b15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b19:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b21:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b25:	74 05                	je     c0007b2c <f_mkfs+0x867>
c0007b27:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b2a:	eb f5                	jmp    c0007b21 <f_mkfs+0x85c>
c0007b2c:	8d 45 78             	lea    eax,[ebp+0x78]
c0007b2f:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007b34:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007b3a:	31 db                	xor    ebx,ebx
c0007b3c:	e8 b0 9e ff ff       	call   c00019f1 <st_word>
c0007b41:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007b47:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007b4c:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b4f:	e8 9d 9e ff ff       	call   c00019f1 <st_word>
c0007b54:	31 c9                	xor    ecx,ecx
c0007b56:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007b59:	83 f8 01             	cmp    eax,0x1
c0007b5c:	76 13                	jbe    c0007b71 <f_mkfs+0x8ac>
c0007b5e:	83 f9 70             	cmp    ecx,0x70
c0007b61:	74 0e                	je     c0007b71 <f_mkfs+0x8ac>
c0007b63:	89 da                	mov    edx,ebx
c0007b65:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007b6a:	e8 0b a3 ff ff       	call   c0001e7a <xsum32>
c0007b6f:	89 c3                	mov    ebx,eax
c0007b71:	41                   	inc    ecx
c0007b72:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b78:	75 dc                	jne    c0007b56 <f_mkfs+0x891>
c0007b7a:	89 f0                	mov    eax,esi
c0007b7c:	89 fa                	mov    edx,edi
c0007b7e:	83 c0 01             	add    eax,0x1
c0007b81:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007b85:	83 d2 00             	adc    edx,0x0
c0007b88:	83 ec 0c             	sub    esp,0xc
c0007b8b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007b8f:	6a 01                	push   0x1
c0007b91:	57                   	push   edi
c0007b92:	56                   	push   esi
c0007b93:	55                   	push   ebp
c0007b94:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b98:	e8 ad 9d ff ff       	call   c000194a <disk_write>
c0007b9d:	83 c4 20             	add    esp,0x20
c0007ba0:	85 c0                	test   eax,eax
c0007ba2:	0f 85 ce 07 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007ba8:	31 d2                	xor    edx,edx
c0007baa:	b9 00 02 00 00       	mov    ecx,0x200
c0007baf:	89 e8                	mov    eax,ebp
c0007bb1:	e8 5d 9e ff ff       	call   c0001a13 <mem_set>
c0007bb6:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bbe:	e8 2e 9e ff ff       	call   c00019f1 <st_word>
c0007bc3:	89 f0                	mov    eax,esi
c0007bc5:	89 fa                	mov    edx,edi
c0007bc7:	83 c0 09             	add    eax,0x9
c0007bca:	83 d2 00             	adc    edx,0x0
c0007bcd:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bd0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007bd4:	31 c9                	xor    ecx,ecx
c0007bd6:	41                   	inc    ecx
c0007bd7:	89 da                	mov    edx,ebx
c0007bd9:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007bde:	e8 97 a2 ff ff       	call   c0001e7a <xsum32>
c0007be3:	89 c3                	mov    ebx,eax
c0007be5:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007beb:	75 e9                	jne    c0007bd6 <f_mkfs+0x911>
c0007bed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bf1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007bf5:	83 c0 01             	add    eax,0x1
c0007bf8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007bfc:	83 d2 00             	adc    edx,0x0
c0007bff:	83 ec 0c             	sub    esp,0xc
c0007c02:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c06:	6a 01                	push   0x1
c0007c08:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c10:	55                   	push   ebp
c0007c11:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c15:	e8 30 9d ff ff       	call   c000194a <disk_write>
c0007c1a:	83 c4 20             	add    esp,0x20
c0007c1d:	85 c0                	test   eax,eax
c0007c1f:	0f 85 51 07 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007c25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c29:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c2d:	75 09                	jne    c0007c38 <f_mkfs+0x973>
c0007c2f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c32:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007c36:	74 12                	je     c0007c4a <f_mkfs+0x985>
c0007c38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c3c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007c40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007c48:	eb 8a                	jmp    c0007bd4 <f_mkfs+0x90f>
c0007c4a:	31 d2                	xor    edx,edx
c0007c4c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c51:	89 e8                	mov    eax,ebp
c0007c53:	e8 bb 9d ff ff       	call   c0001a13 <mem_set>
c0007c58:	83 c6 0b             	add    esi,0xb
c0007c5b:	83 d7 00             	adc    edi,0x0
c0007c5e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007c62:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007c66:	31 c9                	xor    ecx,ecx
c0007c68:	41                   	inc    ecx
c0007c69:	89 da                	mov    edx,ebx
c0007c6b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c70:	e8 05 a2 ff ff       	call   c0001e7a <xsum32>
c0007c75:	89 c3                	mov    ebx,eax
c0007c77:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c7d:	75 e9                	jne    c0007c68 <f_mkfs+0x9a3>
c0007c7f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007c82:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007c86:	83 c6 01             	add    esi,0x1
c0007c89:	83 d7 00             	adc    edi,0x0
c0007c8c:	83 ec 0c             	sub    esp,0xc
c0007c8f:	6a 01                	push   0x1
c0007c91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007c95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007c99:	55                   	push   ebp
c0007c9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c9e:	e8 a7 9c ff ff       	call   c000194a <disk_write>
c0007ca3:	83 c4 20             	add    esp,0x20
c0007ca6:	85 c0                	test   eax,eax
c0007ca8:	0f 85 c8 06 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007cae:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007cb2:	75 06                	jne    c0007cba <f_mkfs+0x9f5>
c0007cb4:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007cb8:	74 09                	je     c0007cc3 <f_mkfs+0x9fe>
c0007cba:	89 34 24             	mov    DWORD PTR [esp],esi
c0007cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007cc1:	eb a3                	jmp    c0007c66 <f_mkfs+0x9a1>
c0007cc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007cc7:	89 da                	mov    edx,ebx
c0007cc9:	01 e8                	add    eax,ebp
c0007ccb:	e8 25 9d ff ff       	call   c00019f5 <st_dword>
c0007cd0:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007cd5:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007cdd:	75 e4                	jne    c0007cc3 <f_mkfs+0x9fe>
c0007cdf:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ce2:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ce6:	83 c6 02             	add    esi,0x2
c0007ce9:	83 d7 00             	adc    edi,0x0
c0007cec:	83 ec 0c             	sub    esp,0xc
c0007cef:	6a 01                	push   0x1
c0007cf1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007cf5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007cf9:	55                   	push   ebp
c0007cfa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cfe:	e8 47 9c ff ff       	call   c000194a <disk_write>
c0007d03:	83 c4 20             	add    esp,0x20
c0007d06:	85 c0                	test   eax,eax
c0007d08:	0f 85 68 06 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007d0e:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d13:	74 0d                	je     c0007d22 <f_mkfs+0xa5d>
c0007d15:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d1d:	e9 43 fd ff ff       	jmp    c0007a65 <f_mkfs+0x7a0>
c0007d22:	b1 07                	mov    cl,0x7
c0007d24:	e9 e3 05 00 00       	jmp    c000830c <f_mkfs+0x1047>
c0007d29:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007d2e:	0f 85 4f 02 00 00    	jne    c0007f83 <f_mkfs+0xcbe>
c0007d34:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d39:	0f 86 22 02 00 00    	jbe    c0007f61 <f_mkfs+0xc9c>
c0007d3f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d44:	0f 85 81 06 00 00    	jne    c00083cb <f_mkfs+0x1106>
c0007d4a:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d51:	83 f8 40             	cmp    eax,0x40
c0007d54:	0f 87 51 06 00 00    	ja     c00083ab <f_mkfs+0x10e6>
c0007d5a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d5e:	85 ff                	test   edi,edi
c0007d60:	75 1c                	jne    c0007d7e <f_mkfs+0xab9>
c0007d62:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d65:	ba 20 01 02 c0       	mov    edx,0xc0020120
c0007d6a:	c1 e9 0c             	shr    ecx,0xc
c0007d6d:	bf 01 00 00 00       	mov    edi,0x1
c0007d72:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d75:	66 85 c0             	test   ax,ax
c0007d78:	0f 85 95 01 00 00    	jne    c0007f13 <f_mkfs+0xc4e>
c0007d7e:	31 d2                	xor    edx,edx
c0007d80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d83:	f7 f7                	div    edi
c0007d85:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d8a:	0f 86 95 01 00 00    	jbe    c0007f25 <f_mkfs+0xc60>
c0007d90:	83 c0 02             	add    eax,0x2
c0007d93:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007d98:	01 c0                	add    eax,eax
c0007d9a:	05 ff 01 00 00       	add    eax,0x1ff
c0007d9f:	be 01 00 00 00       	mov    esi,0x1
c0007da4:	c1 e8 09             	shr    eax,0x9
c0007da7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007dab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007daf:	c1 e0 05             	shl    eax,0x5
c0007db2:	c1 e8 09             	shr    eax,0x9
c0007db5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007db9:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007dbe:	31 d2                	xor    edx,edx
c0007dc0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007dc4:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007dc8:	89 f0                	mov    eax,esi
c0007dca:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007dce:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007dd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007dd6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007dda:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007dde:	31 d2                	xor    edx,edx
c0007de0:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007de5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007de9:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ded:	31 db                	xor    ebx,ebx
c0007def:	01 c8                	add    eax,ecx
c0007df1:	11 da                	adc    edx,ebx
c0007df3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007df7:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007dfb:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007dff:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e03:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e07:	f7 da                	neg    edx
c0007e09:	21 d1                	and    ecx,edx
c0007e0b:	29 d9                	sub    ecx,ebx
c0007e0d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e12:	0f 85 20 01 00 00    	jne    c0007f38 <f_mkfs+0xc73>
c0007e18:	31 db                	xor    ebx,ebx
c0007e1a:	01 ce                	add    esi,ecx
c0007e1c:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e20:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e24:	31 d2                	xor    edx,edx
c0007e26:	89 f8                	mov    eax,edi
c0007e28:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e2c:	c1 e0 04             	shl    eax,0x4
c0007e2f:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007e33:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007e37:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007e3b:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007e3f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007e42:	19 d3                	sbb    ebx,edx
c0007e44:	0f 82 40 01 00 00    	jb     c0007f8a <f_mkfs+0xcc5>
c0007e4a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e4d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007e51:	89 c8                	mov    eax,ecx
c0007e53:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007e58:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007e5c:	29 f0                	sub    eax,esi
c0007e5e:	29 d0                	sub    eax,edx
c0007e60:	31 d2                	xor    edx,edx
c0007e62:	f7 f7                	div    edi
c0007e64:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e69:	89 c3                	mov    ebx,eax
c0007e6b:	0f 85 b8 fe ff ff    	jne    c0007d29 <f_mkfs+0xa64>
c0007e71:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007e76:	0f 87 1d 01 00 00    	ja     c0007f99 <f_mkfs+0xcd4>
c0007e7c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e81:	0f 85 03 01 00 00    	jne    c0007f8a <f_mkfs+0xcc5>
c0007e87:	83 ff 01             	cmp    edi,0x1
c0007e8a:	0f 86 fa 00 00 00    	jbe    c0007f8a <f_mkfs+0xcc5>
c0007e90:	d1 ef                	shr    edi,1
c0007e92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007e96:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007e9a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e9d:	85 db                	test   ebx,ebx
c0007e9f:	75 2d                	jne    c0007ece <f_mkfs+0xc09>
c0007ea1:	89 cb                	mov    ebx,ecx
c0007ea3:	ba 30 01 02 c0       	mov    edx,0xc0020130
c0007ea8:	c1 eb 11             	shr    ebx,0x11
c0007eab:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007eb3:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007eb6:	66 85 c0             	test   ax,ax
c0007eb9:	74 11                	je     c0007ecc <f_mkfs+0xc07>
c0007ebb:	83 c2 02             	add    edx,0x2
c0007ebe:	39 d8                	cmp    eax,ebx
c0007ec0:	77 0a                	ja     c0007ecc <f_mkfs+0xc07>
c0007ec2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007ec6:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007eca:	eb e7                	jmp    c0007eb3 <f_mkfs+0xbee>
c0007ecc:	31 db                	xor    ebx,ebx
c0007ece:	31 d2                	xor    edx,edx
c0007ed0:	89 c8                	mov    eax,ecx
c0007ed2:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007ed6:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007edd:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007ee2:	c1 ea 09             	shr    edx,0x9
c0007ee5:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007eea:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007eee:	0f 87 96 00 00 00    	ja     c0007f8a <f_mkfs+0xcc5>
c0007ef4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007ef8:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f00:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f04:	be 20 00 00 00       	mov    esi,0x20
c0007f09:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f0e:	e9 a6 fe ff ff       	jmp    c0007db9 <f_mkfs+0xaf4>
c0007f13:	83 c2 02             	add    edx,0x2
c0007f16:	39 c8                	cmp    eax,ecx
c0007f18:	0f 87 60 fe ff ff    	ja     c0007d7e <f_mkfs+0xab9>
c0007f1e:	01 ff                	add    edi,edi
c0007f20:	e9 4d fe ff ff       	jmp    c0007d72 <f_mkfs+0xaad>
c0007f25:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f28:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f2d:	40                   	inc    eax
c0007f2e:	d1 e8                	shr    eax,1
c0007f30:	83 c0 03             	add    eax,0x3
c0007f33:	e9 62 fe ff ff       	jmp    c0007d9a <f_mkfs+0xad5>
c0007f38:	31 d2                	xor    edx,edx
c0007f3a:	89 c8                	mov    eax,ecx
c0007f3c:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007f40:	85 d2                	test   edx,edx
c0007f42:	74 0c                	je     c0007f50 <f_mkfs+0xc8b>
c0007f44:	49                   	dec    ecx
c0007f45:	46                   	inc    esi
c0007f46:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007f4b:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007f50:	89 c8                	mov    eax,ecx
c0007f52:	31 d2                	xor    edx,edx
c0007f54:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007f58:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007f5c:	e9 c3 fe ff ff       	jmp    c0007e24 <f_mkfs+0xb5f>
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	77 31                	ja     c0007f99 <f_mkfs+0xcd4>
c0007f68:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f6d:	75 1b                	jne    c0007f8a <f_mkfs+0xcc5>
c0007f6f:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f76:	3d 80 00 00 00       	cmp    eax,0x80
c0007f7b:	0f 86 d9 fd ff ff    	jbe    c0007d5a <f_mkfs+0xa95>
c0007f81:	eb 07                	jmp    c0007f8a <f_mkfs+0xcc5>
c0007f83:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f88:	76 0a                	jbe    c0007f94 <f_mkfs+0xccf>
c0007f8a:	bb 0e 00 00 00       	mov    ebx,0xe
c0007f8f:	e9 ff 03 00 00       	jmp    c0008393 <f_mkfs+0x10ce>
c0007f94:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f99:	31 d2                	xor    edx,edx
c0007f9b:	b9 00 02 00 00       	mov    ecx,0x200
c0007fa0:	89 e8                	mov    eax,ebp
c0007fa2:	e8 6c 9a ff ff       	call   c0001a13 <mem_set>
c0007fa7:	b9 0b 00 00 00       	mov    ecx,0xb
c0007fac:	ba 42 02 02 c0       	mov    edx,0xc0020242
c0007fb1:	89 e8                	mov    eax,ebp
c0007fb3:	e8 46 9a ff ff       	call   c00019fe <mem_cpy>
c0007fb8:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007fbb:	ba 00 02 00 00       	mov    edx,0x200
c0007fc0:	e8 2c 9a ff ff       	call   c00019f1 <st_word>
c0007fc5:	89 f8                	mov    eax,edi
c0007fc7:	0f b7 d6             	movzx  edx,si
c0007fca:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007fcd:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007fd0:	e8 1c 9a ff ff       	call   c00019f1 <st_word>
c0007fd5:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007fd9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fde:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007fe1:	75 08                	jne    c0007feb <f_mkfs+0xd26>
c0007fe3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007feb:	8d 45 11             	lea    eax,[ebp+0x11]
c0007fee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007ff2:	e8 fa 99 ff ff       	call   c00019f1 <st_word>
c0007ff7:	b8 ff ff 00 00       	mov    eax,0xffff
c0007ffc:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008000:	39 d0                	cmp    eax,edx
c0008002:	b8 00 00 00 00       	mov    eax,0x0
c0008007:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000800b:	72 0a                	jb     c0008017 <f_mkfs+0xd52>
c000800d:	8d 45 13             	lea    eax,[ebp+0x13]
c0008010:	e8 dc 99 ff ff       	call   c00019f1 <st_word>
c0008015:	eb 08                	jmp    c000801f <f_mkfs+0xd5a>
c0008017:	8d 45 20             	lea    eax,[ebp+0x20]
c000801a:	e8 d6 99 ff ff       	call   c00019f5 <st_dword>
c000801f:	8d 45 18             	lea    eax,[ebp+0x18]
c0008022:	ba 3f 00 00 00       	mov    edx,0x3f
c0008027:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000802b:	e8 c1 99 ff ff       	call   c00019f1 <st_word>
c0008030:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0008033:	ba ff 00 00 00       	mov    edx,0xff
c0008038:	e8 b4 99 ff ff       	call   c00019f1 <st_word>
c000803d:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0008040:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008044:	e8 ac 99 ff ff       	call   c00019f5 <st_dword>
c0008049:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000804e:	75 57                	jne    c00080a7 <f_mkfs+0xde2>
c0008050:	8d 45 43             	lea    eax,[ebp+0x43]
c0008053:	ba 00 00 21 50       	mov    edx,0x50210000
c0008058:	e8 98 99 ff ff       	call   c00019f5 <st_dword>
c000805d:	8d 45 24             	lea    eax,[ebp+0x24]
c0008060:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008064:	e8 8c 99 ff ff       	call   c00019f5 <st_dword>
c0008069:	8d 45 2c             	lea    eax,[ebp+0x2c]
c000806c:	ba 02 00 00 00       	mov    edx,0x2
c0008071:	e8 7f 99 ff ff       	call   c00019f5 <st_dword>
c0008076:	8d 45 30             	lea    eax,[ebp+0x30]
c0008079:	ba 01 00 00 00       	mov    edx,0x1
c000807e:	e8 6e 99 ff ff       	call   c00019f1 <st_word>
c0008083:	8d 45 32             	lea    eax,[ebp+0x32]
c0008086:	ba 06 00 00 00       	mov    edx,0x6
c000808b:	e8 61 99 ff ff       	call   c00019f1 <st_word>
c0008090:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008094:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008098:	8d 45 47             	lea    eax,[ebp+0x47]
c000809b:	b9 13 00 00 00       	mov    ecx,0x13
c00080a0:	ba 4e 02 02 c0       	mov    edx,0xc002024e
c00080a5:	eb 2f                	jmp    c00080d6 <f_mkfs+0xe11>
c00080a7:	8d 45 27             	lea    eax,[ebp+0x27]
c00080aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00080af:	e8 41 99 ff ff       	call   c00019f5 <st_dword>
c00080b4:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c00080b9:	8d 45 16             	lea    eax,[ebp+0x16]
c00080bc:	e8 30 99 ff ff       	call   c00019f1 <st_word>
c00080c1:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00080c5:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00080c9:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00080cc:	b9 13 00 00 00       	mov    ecx,0x13
c00080d1:	ba 62 02 02 c0       	mov    edx,0xc0020262
c00080d6:	e8 23 99 ff ff       	call   c00019fe <mem_cpy>
c00080db:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00080e1:	ba 55 aa 00 00       	mov    edx,0xaa55
c00080e6:	89 f0                	mov    eax,esi
c00080e8:	e8 04 99 ff ff       	call   c00019f1 <st_word>
c00080ed:	83 ec 0c             	sub    esp,0xc
c00080f0:	6a 01                	push   0x1
c00080f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00080f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00080fa:	55                   	push   ebp
c00080fb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080ff:	e8 46 98 ff ff       	call   c000194a <disk_write>
c0008104:	83 c4 20             	add    esp,0x20
c0008107:	85 c0                	test   eax,eax
c0008109:	0f 85 67 02 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c000810f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008114:	0f 85 b7 00 00 00    	jne    c00081d1 <f_mkfs+0xf0c>
c000811a:	83 ec 0c             	sub    esp,0xc
c000811d:	6a 01                	push   0x1
c000811f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008123:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008127:	83 c0 06             	add    eax,0x6
c000812a:	83 d2 00             	adc    edx,0x0
c000812d:	52                   	push   edx
c000812e:	50                   	push   eax
c000812f:	55                   	push   ebp
c0008130:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008134:	e8 11 98 ff ff       	call   c000194a <disk_write>
c0008139:	83 c4 20             	add    esp,0x20
c000813c:	b9 00 02 00 00       	mov    ecx,0x200
c0008141:	31 d2                	xor    edx,edx
c0008143:	89 e8                	mov    eax,ebp
c0008145:	e8 c9 98 ff ff       	call   c0001a13 <mem_set>
c000814a:	ba 52 52 61 41       	mov    edx,0x41615252
c000814f:	89 e8                	mov    eax,ebp
c0008151:	e8 9f 98 ff ff       	call   c00019f5 <st_dword>
c0008156:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c000815c:	ba 72 72 41 61       	mov    edx,0x61417272
c0008161:	e8 8f 98 ff ff       	call   c00019f5 <st_dword>
c0008166:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008169:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000816f:	e8 81 98 ff ff       	call   c00019f5 <st_dword>
c0008174:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000817a:	ba 02 00 00 00       	mov    edx,0x2
c000817f:	e8 71 98 ff ff       	call   c00019f5 <st_dword>
c0008184:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008189:	89 f0                	mov    eax,esi
c000818b:	e8 61 98 ff ff       	call   c00019f1 <st_word>
c0008190:	83 ec 0c             	sub    esp,0xc
c0008193:	6a 01                	push   0x1
c0008195:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008199:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000819d:	83 c0 07             	add    eax,0x7
c00081a0:	83 d2 00             	adc    edx,0x0
c00081a3:	52                   	push   edx
c00081a4:	50                   	push   eax
c00081a5:	55                   	push   ebp
c00081a6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081aa:	e8 9b 97 ff ff       	call   c000194a <disk_write>
c00081af:	83 c4 14             	add    esp,0x14
c00081b2:	6a 01                	push   0x1
c00081b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081b8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	83 d2 00             	adc    edx,0x0
c00081c2:	52                   	push   edx
c00081c3:	50                   	push   eax
c00081c4:	55                   	push   ebp
c00081c5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081c9:	e8 7c 97 ff ff       	call   c000194a <disk_write>
c00081ce:	83 c4 20             	add    esp,0x20
c00081d1:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00081d8:	31 d2                	xor    edx,edx
c00081da:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00081e0:	31 db                	xor    ebx,ebx
c00081e2:	89 e8                	mov    eax,ebp
c00081e4:	e8 2a 98 ff ff       	call   c0001a13 <mem_set>
c00081e9:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00081ee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00081f5:	0f 94 c3             	sete   bl
c00081f8:	4b                   	dec    ebx
c00081f9:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00081ff:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008205:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000820a:	75 21                	jne    c000822d <f_mkfs+0xf68>
c000820c:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008211:	89 e8                	mov    eax,ebp
c0008213:	e8 dd 97 ff ff       	call   c00019f5 <st_dword>
c0008218:	8d 45 04             	lea    eax,[ebp+0x4]
c000821b:	83 ca ff             	or     edx,0xffffffff
c000821e:	e8 d2 97 ff ff       	call   c00019f5 <st_dword>
c0008223:	8d 45 08             	lea    eax,[ebp+0x8]
c0008226:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000822b:	eb 04                	jmp    c0008231 <f_mkfs+0xf6c>
c000822d:	89 da                	mov    edx,ebx
c000822f:	89 e8                	mov    eax,ebp
c0008231:	e8 bf 97 ff ff       	call   c00019f5 <st_dword>
c0008236:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000823a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000823e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008242:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008246:	39 ce                	cmp    esi,ecx
c0008248:	76 02                	jbe    c000824c <f_mkfs+0xf87>
c000824a:	89 ce                	mov    esi,ecx
c000824c:	83 ec 0c             	sub    esp,0xc
c000824f:	56                   	push   esi
c0008250:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008254:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008258:	55                   	push   ebp
c0008259:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000825d:	e8 e8 96 ff ff       	call   c000194a <disk_write>
c0008262:	83 c4 20             	add    esp,0x20
c0008265:	85 c0                	test   eax,eax
c0008267:	0f 85 09 01 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c000826d:	31 d2                	xor    edx,edx
c000826f:	b9 00 02 00 00       	mov    ecx,0x200
c0008274:	89 e8                	mov    eax,ebp
c0008276:	e8 98 97 ff ff       	call   c0001a13 <mem_set>
c000827b:	31 d2                	xor    edx,edx
c000827d:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008281:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008285:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008289:	75 b3                	jne    c000823e <f_mkfs+0xf79>
c000828b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000828e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008295:	40                   	inc    eax
c0008296:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000829a:	0f 87 65 ff ff ff    	ja     c0008205 <f_mkfs+0xf40>
c00082a0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082a5:	74 04                	je     c00082ab <f_mkfs+0xfe6>
c00082a7:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00082ab:	89 fb                	mov    ebx,edi
c00082ad:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00082b1:	76 04                	jbe    c00082b7 <f_mkfs+0xff2>
c00082b3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082b7:	83 ec 0c             	sub    esp,0xc
c00082ba:	53                   	push   ebx
c00082bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c3:	55                   	push   ebp
c00082c4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082c8:	e8 7d 96 ff ff       	call   c000194a <disk_write>
c00082cd:	83 c4 20             	add    esp,0x20
c00082d0:	85 c0                	test   eax,eax
c00082d2:	0f 85 9e 00 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c00082d8:	31 d2                	xor    edx,edx
c00082da:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00082de:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082e2:	29 df                	sub    edi,ebx
c00082e4:	75 c5                	jne    c00082ab <f_mkfs+0xfe6>
c00082e6:	b1 0c                	mov    cl,0xc
c00082e8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082ed:	74 1d                	je     c000830c <f_mkfs+0x1047>
c00082ef:	b8 ff ff 00 00       	mov    eax,0xffff
c00082f4:	b1 06                	mov    cl,0x6
c00082f6:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00082fa:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00082fe:	72 0c                	jb     c000830c <f_mkfs+0x1047>
c0008300:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008305:	0f 94 c1             	sete   cl
c0008308:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000830c:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008311:	75 4c                	jne    c000835f <f_mkfs+0x109a>
c0008313:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008317:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000831b:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008322:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008329:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008334:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000833f:	0f b6 c9             	movzx  ecx,cl
c0008342:	83 ec 0c             	sub    esp,0xc
c0008345:	55                   	push   ebp
c0008346:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c000834d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008351:	e8 f9 bf ff ff       	call   c000434f <create_partition>
c0008356:	83 c4 10             	add    esp,0x10
c0008359:	89 c3                	mov    ebx,eax
c000835b:	85 c0                	test   eax,eax
c000835d:	75 34                	jne    c0008393 <f_mkfs+0x10ce>
c000835f:	31 db                	xor    ebx,ebx
c0008361:	50                   	push   eax
c0008362:	6a 00                	push   0x0
c0008364:	6a 00                	push   0x0
c0008366:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000836a:	e8 f1 95 ff ff       	call   c0001960 <disk_ioctl>
c000836f:	83 c4 10             	add    esp,0x10
c0008372:	85 c0                	test   eax,eax
c0008374:	74 1d                	je     c0008393 <f_mkfs+0x10ce>
c0008376:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000837e:	75 0c                	jne    c000838c <f_mkfs+0x10c7>
c0008380:	83 ec 0c             	sub    esp,0xc
c0008383:	55                   	push   ebp
c0008384:	e8 77 00 00 00       	call   c0008400 <ff_memfree>
c0008389:	83 c4 10             	add    esp,0x10
c000838c:	bb 01 00 00 00       	mov    ebx,0x1
c0008391:	eb 48                	jmp    c00083db <f_mkfs+0x1116>
c0008393:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000839b:	75 3e                	jne    c00083db <f_mkfs+0x1116>
c000839d:	83 ec 0c             	sub    esp,0xc
c00083a0:	55                   	push   ebp
c00083a1:	e8 5a 00 00 00       	call   c0008400 <ff_memfree>
c00083a6:	83 c4 10             	add    esp,0x10
c00083a9:	eb 30                	jmp    c00083db <f_mkfs+0x1116>
c00083ab:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00083b0:	0f 85 eb fa ff ff    	jne    c0007ea1 <f_mkfs+0xbdc>
c00083b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00083ba:	81 ff 80 00 00 00    	cmp    edi,0x80
c00083c0:	0f 86 b8 f9 ff ff    	jbe    c0007d7e <f_mkfs+0xab9>
c00083c6:	e9 bf fb ff ff       	jmp    c0007f8a <f_mkfs+0xcc5>
c00083cb:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00083d0:	0f 85 c0 fa ff ff    	jne    c0007e96 <f_mkfs+0xbd1>
c00083d6:	e9 af fb ff ff       	jmp    c0007f8a <f_mkfs+0xcc5>
c00083db:	81 c4 9c 00 00 00    	add    esp,0x9c
c00083e1:	89 d8                	mov    eax,ebx
c00083e3:	5b                   	pop    ebx
c00083e4:	5e                   	pop    esi
c00083e5:	5f                   	pop    edi
c00083e6:	5d                   	pop    ebp
c00083e7:	c3                   	ret    

c00083e8 <ff_memalloc>:
c00083e8:	83 ec 0c             	sub    esp,0xc
c00083eb:	83 ec 0c             	sub    esp,0xc
c00083ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00083f2:	e8 7a 13 00 00       	call   c0009771 <malloc>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	83 c4 0c             	add    esp,0xc
c00083fd:	c3                   	ret    
c00083fe:	66 90                	xchg   ax,ax

c0008400 <ff_memfree>:
c0008400:	83 ec 0c             	sub    esp,0xc
c0008403:	83 ec 0c             	sub    esp,0xc
c0008406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000840a:	e8 72 13 00 00       	call   c0009781 <free>
c000840f:	83 c4 10             	add    esp,0x10
c0008412:	90                   	nop
c0008413:	83 c4 0c             	add    esp,0xc
c0008416:	c3                   	ret    
c0008417:	90                   	nop

c0008418 <ff_uni2oem>:
c0008418:	83 ec 14             	sub    esp,0x14
c000841b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000841f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008423:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000842a:	c7 44 24 0c 80 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020580
c0008432:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008437:	77 0b                	ja     c0008444 <ff_uni2oem+0x2c>
c0008439:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000843d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008442:	eb 60                	jmp    c00084a4 <ff_uni2oem+0x8c>
c0008444:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c000844c:	77 56                	ja     c00084a4 <ff_uni2oem+0x8c>
c000844e:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008454:	75 4e                	jne    c00084a4 <ff_uni2oem+0x8c>
c0008456:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000845d:	eb 0d                	jmp    c000846c <ff_uni2oem+0x54>
c000845f:	90                   	nop
c0008460:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008465:	40                   	inc    eax
c0008466:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000846b:	90                   	nop
c000846c:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008472:	77 1c                	ja     c0008490 <ff_uni2oem+0x78>
c0008474:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008479:	01 c0                	add    eax,eax
c000847b:	89 c2                	mov    edx,eax
c000847d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008481:	01 d0                	add    eax,edx
c0008483:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008486:	0f b7 c0             	movzx  eax,ax
c0008489:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000848d:	75 d1                	jne    c0008460 <ff_uni2oem+0x48>
c000848f:	90                   	nop
c0008490:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008495:	83 e8 80             	sub    eax,0xffffff80
c0008498:	25 ff 00 00 00       	and    eax,0xff
c000849d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084a2:	66 90                	xchg   ax,ax
c00084a4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084a9:	83 c4 14             	add    esp,0x14
c00084ac:	c3                   	ret    
c00084ad:	8d 76 00             	lea    esi,[esi+0x0]

c00084b0 <ff_oem2uni>:
c00084b0:	83 ec 18             	sub    esp,0x18
c00084b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00084b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084bb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00084c0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084c4:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00084cb:	c7 44 24 10 80 05 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020580
c00084d3:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00084d9:	77 0d                	ja     c00084e8 <ff_oem2uni+0x38>
c00084db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00084df:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00084e4:	eb 32                	jmp    c0008518 <ff_oem2uni+0x68>
c00084e6:	66 90                	xchg   ax,ax
c00084e8:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084ee:	75 28                	jne    c0008518 <ff_oem2uni+0x68>
c00084f0:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00084f7:	77 1f                	ja     c0008518 <ff_oem2uni+0x68>
c00084f9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00084fe:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008503:	01 c0                	add    eax,eax
c0008505:	89 c2                	mov    edx,eax
c0008507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000850b:	01 d0                	add    eax,edx
c000850d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008510:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008515:	8d 76 00             	lea    esi,[esi+0x0]
c0008518:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000851d:	83 c4 18             	add    esp,0x18
c0008520:	c3                   	ret    
c0008521:	8d 76 00             	lea    esi,[esi+0x0]

c0008524 <ff_wtoupper>:
c0008524:	83 ec 10             	sub    esp,0x10
c0008527:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000852f:	0f 87 4f 01 00 00    	ja     c0008684 <ff_wtoupper+0x160>
c0008535:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008539:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000853e:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008545:	77 09                	ja     c0008550 <ff_wtoupper+0x2c>
c0008547:	b8 80 03 02 c0       	mov    eax,0xc0020380
c000854c:	eb 0a                	jmp    c0008558 <ff_wtoupper+0x34>
c000854e:	66 90                	xchg   ax,ax
c0008550:	b8 c0 02 02 c0       	mov    eax,0xc00202c0
c0008555:	8d 76 00             	lea    esi,[esi+0x0]
c0008558:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000855c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008560:	8d 50 02             	lea    edx,[eax+0x2]
c0008563:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008567:	66 8b 00             	mov    ax,WORD PTR [eax]
c000856a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000856f:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008575:	0f 84 fd 00 00 00    	je     c0008678 <ff_wtoupper+0x154>
c000857b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008580:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008585:	0f 82 ed 00 00 00    	jb     c0008678 <ff_wtoupper+0x154>
c000858b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000858f:	8d 50 02             	lea    edx,[eax+0x2]
c0008592:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008596:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008599:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000859e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085a3:	66 c1 e8 08          	shr    ax,0x8
c00085a7:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00085ac:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00085b3:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00085b8:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c00085bd:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00085c2:	01 ca                	add    edx,ecx
c00085c4:	39 d0                	cmp    eax,edx
c00085c6:	0f 8d 8c 00 00 00    	jge    c0008658 <ff_wtoupper+0x134>
c00085cc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085d1:	83 f8 08             	cmp    eax,0x8
c00085d4:	0f 87 9a 00 00 00    	ja     c0008674 <ff_wtoupper+0x150>
c00085da:	8b 04 85 80 02 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfd80]
c00085e1:	ff e0                	jmp    eax
c00085e3:	90                   	nop
c00085e4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00085e9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00085ee:	29 c2                	sub    edx,eax
c00085f0:	89 d0                	mov    eax,edx
c00085f2:	01 c0                	add    eax,eax
c00085f4:	89 c2                	mov    edx,eax
c00085f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085fa:	01 d0                	add    eax,edx
c00085fc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085ff:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008604:	eb 4e                	jmp    c0008654 <ff_wtoupper+0x130>
c0008606:	66 90                	xchg   ax,ax
c0008608:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000860d:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008611:	83 e0 01             	and    eax,0x1
c0008614:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008619:	eb 39                	jmp    c0008654 <ff_wtoupper+0x130>
c000861b:	90                   	nop
c000861c:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008622:	eb 30                	jmp    c0008654 <ff_wtoupper+0x130>
c0008624:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000862a:	eb 28                	jmp    c0008654 <ff_wtoupper+0x130>
c000862c:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008632:	eb 20                	jmp    c0008654 <ff_wtoupper+0x130>
c0008634:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000863a:	eb 18                	jmp    c0008654 <ff_wtoupper+0x130>
c000863c:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008642:	eb 10                	jmp    c0008654 <ff_wtoupper+0x130>
c0008644:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000864a:	eb 08                	jmp    c0008654 <ff_wtoupper+0x130>
c000864c:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008653:	90                   	nop
c0008654:	eb 1e                	jmp    c0008674 <ff_wtoupper+0x150>
c0008656:	66 90                	xchg   ax,ax
c0008658:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000865e:	0f 85 f8 fe ff ff    	jne    c000855c <ff_wtoupper+0x38>
c0008664:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008669:	01 c0                	add    eax,eax
c000866b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000866f:	e9 e8 fe ff ff       	jmp    c000855c <ff_wtoupper+0x38>
c0008674:	90                   	nop
c0008675:	8d 76 00             	lea    esi,[esi+0x0]
c0008678:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000867d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008681:	8d 76 00             	lea    esi,[esi+0x0]
c0008684:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008688:	83 c4 10             	add    esp,0x10
c000868b:	c3                   	ret    

c000868c <CPU::current()>:
c000868c:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c0008691:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008697:	c3                   	ret    

c0008698 <operator new(unsigned long)>:
c0008698:	e9 d4 10 00 00       	jmp    c0009771 <malloc>

c000869d <operator delete(void*)>:
c000869d:	e9 ef 10 00 00       	jmp    c0009791 <rfree>

c00086a2 <disableIRQs()>:
c00086a2:	fa                   	cli    
c00086a3:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c00086a9:	c3                   	ret    

c00086aa <enableIRQs()>:
c00086aa:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c00086af:	48                   	dec    eax
c00086b0:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c00086b5:	75 01                	jne    c00086b8 <enableIRQs()+0xe>
c00086b7:	fb                   	sti    
c00086b8:	c3                   	ret    

c00086b9 <lockScheduler()>:
c00086b9:	fa                   	cli    
c00086ba:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c00086c0:	c3                   	ret    

c00086c1 <unlockScheduler()>:
c00086c1:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c00086c6:	48                   	dec    eax
c00086c7:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c00086cc:	75 01                	jne    c00086cf <unlockScheduler()+0xe>
c00086ce:	fb                   	sti    
c00086cf:	c3                   	ret    

c00086d0 <lockStuff()>:
c00086d0:	fa                   	cli    
c00086d1:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c00086d7:	ff 05 a4 66 02 c0    	inc    DWORD PTR ds:0xc00266a4
c00086dd:	c3                   	ret    

c00086de <unlockStuff()>:
c00086de:	83 ec 0c             	sub    esp,0xc
c00086e1:	a1 a4 66 02 c0       	mov    eax,ds:0xc00266a4
c00086e6:	48                   	dec    eax
c00086e7:	a3 a4 66 02 c0       	mov    ds:0xc00266a4,eax
c00086ec:	75 18                	jne    c0008706 <unlockStuff()+0x28>
c00086ee:	83 3d a0 66 02 c0 00 	cmp    DWORD PTR ds:0xc00266a0,0x0
c00086f5:	74 0f                	je     c0008706 <unlockStuff()+0x28>
c00086f7:	c7 05 a0 66 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00266a0,0x0
c0008701:	e8 4e cf 00 00       	call   c0015654 <schedule()>
c0008706:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c000870b:	48                   	dec    eax
c000870c:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c0008711:	75 01                	jne    c0008714 <unlockStuff()+0x36>
c0008713:	fb                   	sti    
c0008714:	83 c4 0c             	add    esp,0xc
c0008717:	c3                   	ret    

c0008718 <Virt::getAKernelVAS()>:
c0008718:	a1 b4 32 02 c0       	mov    eax,ds:0xc00232b4
c000871d:	c3                   	ret    

c000871e <__not_memcpy>:
c000871e:	57                   	push   edi
c000871f:	56                   	push   esi
c0008720:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008724:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008728:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000872c:	89 c7                	mov    edi,eax
c000872e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008730:	5e                   	pop    esi
c0008731:	5f                   	pop    edi
c0008732:	c3                   	ret    
c0008733:	90                   	nop

c0008734 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008734:	83 ec 0c             	sub    esp,0xc
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	68 80 06 02 c0       	push   0xc0020680
c000873f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008743:	e8 a8 7e ff ff       	call   c00005f0 <strcmp>
c0008748:	83 c4 10             	add    esp,0x10
c000874b:	85 c0                	test   eax,eax
c000874d:	0f 94 c0             	sete   al
c0008750:	84 c0                	test   al,al
c0008752:	74 0c                	je     c0008760 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008754:	b8 c8 31 02 c0       	mov    eax,0xc00231c8
c0008759:	e9 ea 00 00 00       	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000875e:	66 90                	xchg   ax,ax
c0008760:	83 ec 08             	sub    esp,0x8
c0008763:	68 89 06 02 c0       	push   0xc0020689
c0008768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000876c:	e8 7f 7e ff ff       	call   c00005f0 <strcmp>
c0008771:	83 c4 10             	add    esp,0x10
c0008774:	85 c0                	test   eax,eax
c0008776:	0f 94 c0             	sete   al
c0008779:	84 c0                	test   al,al
c000877b:	74 0b                	je     c0008788 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c000877d:	b8 f0 f2 01 c0       	mov    eax,0xc001f2f0
c0008782:	e9 c1 00 00 00       	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008787:	90                   	nop
c0008788:	83 ec 08             	sub    esp,0x8
c000878b:	68 93 06 02 c0       	push   0xc0020693
c0008790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008794:	e8 57 7e ff ff       	call   c00005f0 <strcmp>
c0008799:	83 c4 10             	add    esp,0x10
c000879c:	85 c0                	test   eax,eax
c000879e:	0f 94 c0             	sete   al
c00087a1:	84 c0                	test   al,al
c00087a3:	74 0b                	je     c00087b0 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c00087a5:	b8 24 f0 01 c0       	mov    eax,0xc001f024
c00087aa:	e9 99 00 00 00       	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00087af:	90                   	nop
c00087b0:	83 ec 08             	sub    esp,0x8
c00087b3:	68 9c 06 02 c0       	push   0xc002069c
c00087b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087bc:	e8 2f 7e ff ff       	call   c00005f0 <strcmp>
c00087c1:	83 c4 10             	add    esp,0x10
c00087c4:	85 c0                	test   eax,eax
c00087c6:	0f 94 c0             	sete   al
c00087c9:	84 c0                	test   al,al
c00087cb:	74 07                	je     c00087d4 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00087cd:	b8 f0 f3 01 c0       	mov    eax,0xc001f3f0
c00087d2:	eb 74                	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00087d4:	83 ec 08             	sub    esp,0x8
c00087d7:	68 a6 06 02 c0       	push   0xc00206a6
c00087dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087e0:	e8 0b 7e ff ff       	call   c00005f0 <strcmp>
c00087e5:	83 c4 10             	add    esp,0x10
c00087e8:	85 c0                	test   eax,eax
c00087ea:	0f 94 c0             	sete   al
c00087ed:	84 c0                	test   al,al
c00087ef:	74 07                	je     c00087f8 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00087f1:	b8 70 f1 01 c0       	mov    eax,0xc001f170
c00087f6:	eb 50                	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00087f8:	83 ec 08             	sub    esp,0x8
c00087fb:	68 af 06 02 c0       	push   0xc00206af
c0008800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008804:	e8 e7 7d ff ff       	call   c00005f0 <strcmp>
c0008809:	83 c4 10             	add    esp,0x10
c000880c:	85 c0                	test   eax,eax
c000880e:	0f 94 c0             	sete   al
c0008811:	84 c0                	test   al,al
c0008813:	74 07                	je     c000881c <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0008815:	b8 cc 31 02 c0       	mov    eax,0xc00231cc
c000881a:	eb 2c                	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000881c:	83 ec 08             	sub    esp,0x8
c000881f:	68 bc 06 02 c0       	push   0xc00206bc
c0008824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008828:	e8 c3 7d ff ff       	call   c00005f0 <strcmp>
c000882d:	83 c4 10             	add    esp,0x10
c0008830:	85 c0                	test   eax,eax
c0008832:	0f 94 c0             	sete   al
c0008835:	84 c0                	test   al,al
c0008837:	74 07                	je     c0008840 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008839:	b8 cd 31 02 c0       	mov    eax,0xc00231cd
c000883e:	eb 08                	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008840:	b8 00 00 00 00       	mov    eax,0x0
c0008845:	8d 76 00             	lea    esi,[esi+0x0]
c0008848:	83 c4 0c             	add    esp,0xc
c000884b:	c3                   	ret    

c000884c <Computer::close(int, int, void*)>:
c000884c:	57                   	push   edi
c000884d:	56                   	push   esi
c000884e:	53                   	push   ebx
c000884f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008853:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008857:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000885b:	83 ec 0c             	sub    esp,0xc
c000885e:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008864:	e8 d3 51 00 00       	call   c000da3c <Device::closeAll()>
c0008869:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000886f:	83 c4 10             	add    esp,0x10
c0008872:	8b 10                	mov    edx,DWORD PTR [eax]
c0008874:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008878:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008880:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008884:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008888:	5b                   	pop    ebx
c0008889:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000888c:	5e                   	pop    esi
c000888d:	5f                   	pop    edi
c000888e:	ff e0                	jmp    eax

c0008890 <Krnl::firstTask()>:
c0008890:	53                   	push   ebx
c0008891:	83 ec 14             	sub    esp,0x14
c0008894:	fb                   	sti    
c0008895:	68 c9 06 02 c0       	push   0xc00206c9
c000889a:	e8 2c 0f 00 00       	call   c00097cb <Krnl::setBootMessage(char const*)>
c000889f:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c00088a6:	e8 c6 0e 00 00       	call   c0009771 <malloc>
c00088ab:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00088b2:	89 c3                	mov    ebx,eax
c00088b4:	ff 35 d0 66 02 c0    	push   DWORD PTR ds:0xc00266d0
c00088ba:	68 e2 06 02 c0       	push   0xc00206e2
c00088bf:	6a 01                	push   0x1
c00088c1:	50                   	push   eax
c00088c2:	e8 69 c9 00 00       	call   c0015230 <Process::Process(bool, char const*, Process*, char**)>
c00088c7:	83 c4 20             	add    esp,0x20
c00088ca:	68 ff 00 00 00       	push   0xff
c00088cf:	6a 00                	push   0x0
c00088d1:	68 c9 91 00 c0       	push   0xc00091c9
c00088d6:	53                   	push   ebx
c00088d7:	e8 5c cb 00 00       	call   c0015438 <Process::createThread(void (*)(void*), void*, int)>
c00088dc:	6a 7a                	push   0x7a
c00088de:	6a 00                	push   0x0
c00088e0:	68 7c 5e 01 c0       	push   0xc0015e7c
c00088e5:	ff 35 d0 66 02 c0    	push   DWORD PTR ds:0xc00266d0
c00088eb:	e8 48 cb 00 00       	call   c0015438 <Process::createThread(void (*)(void*), void*, int)>
c00088f0:	83 c4 14             	add    esp,0x14
c00088f3:	a3 88 66 02 c0       	mov    ds:0xc0026688,eax
c00088f8:	68 e0 07 02 c0       	push   0xc00207e0
c00088fd:	c6 05 cd 31 02 c0 01 	mov    BYTE PTR ds:0xc00231cd,0x1
c0008904:	e8 c2 0e 00 00       	call   c00097cb <Krnl::setBootMessage(char const*)>
c0008909:	e8 49 d9 00 00       	call   c0016257 <Vm::initialise8086()>
c000890e:	e8 7f 3f 00 00       	call   c000c892 <Fs::initVFS()>
c0008913:	c7 04 24 ef 06 02 c0 	mov    DWORD PTR [esp],0xc00206ef
c000891a:	e8 ac 0e 00 00       	call   c00097cb <Krnl::setBootMessage(char const*)>
c000891f:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c0008924:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000892a:	8b 10                	mov    edx,DWORD PTR [eax]
c000892c:	6a 00                	push   0x0
c000892e:	6a 00                	push   0x0
c0008930:	6a 00                	push   0x0
c0008932:	50                   	push   eax
c0008933:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008936:	83 c4 14             	add    esp,0x14
c0008939:	68 e0 07 02 c0       	push   0xc00207e0
c000893e:	e8 88 0e 00 00       	call   c00097cb <Krnl::setBootMessage(char const*)>
c0008943:	e8 86 b1 00 00       	call   c0013ace <Sys::loadSyscalls()>
c0008948:	e8 7b 97 00 00       	call   c00120c8 <Krnl::loadSystemEnv()>
c000894d:	e8 b9 9b 00 00       	call   c001250b <Krnl::setupPowerManager()>
c0008952:	83 c4 0c             	add    esp,0xc
c0008955:	6a 3a                	push   0x3a
c0008957:	68 09 07 02 c0       	push   0xc0020709
c000895c:	68 12 07 02 c0       	push   0xc0020712
c0008961:	e8 cf a0 00 00       	call   c0012a35 <Reg::readIntWithDefault(char*, char*, int)>
c0008966:	89 04 24             	mov    DWORD PTR [esp],eax
c0008969:	e8 26 4a 00 00       	call   c000d394 <User::loadClockSettings(int)>
c000896e:	c7 04 24 04 08 02 c0 	mov    DWORD PTR [esp],0xc0020804
c0008975:	e8 51 0e 00 00       	call   c00097cb <Krnl::setBootMessage(char const*)>
c000897a:	58                   	pop    eax
c000897b:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c0008980:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008986:	e8 af 50 00 00       	call   c000da3a <Device::loadDriversForAll()>
c000898b:	c7 04 24 1a 07 02 c0 	mov    DWORD PTR [esp],0xc002071a
c0008992:	e8 34 0e 00 00       	call   c00097cb <Krnl::setBootMessage(char const*)>
c0008997:	e8 b2 92 00 00       	call   c0011c4e <Krnl::startCPUs()>
c000899c:	c7 04 24 34 07 02 c0 	mov    DWORD PTR [esp],0xc0020734
c00089a3:	e8 23 0e 00 00       	call   c00097cb <Krnl::setBootMessage(char const*)>
c00089a8:	5a                   	pop    edx
c00089a9:	8b 1d c8 31 02 c0    	mov    ebx,DWORD PTR ds:0xc00231c8
c00089af:	59                   	pop    ecx
c00089b0:	6a 01                	push   0x1
c00089b2:	68 45 07 02 c0       	push   0xc0020745
c00089b7:	e8 ba c2 00 00       	call   c0014c76 <Thr::loadDLL(char const*, bool)>
c00089bc:	5a                   	pop    edx
c00089bd:	59                   	pop    ecx
c00089be:	53                   	push   ebx
c00089bf:	50                   	push   eax
c00089c0:	e8 e2 c4 00 00       	call   c0014ea7 <Thr::executeDLL(unsigned long, void*)>
c00089c5:	83 c4 10             	add    esp,0x10
c00089c8:	83 ec 0c             	sub    esp,0xc
c00089cb:	6a 02                	push   0x2
c00089cd:	e8 7a ce 00 00       	call   c001584c <blockTask(TaskState)>
c00089d2:	83 c4 10             	add    esp,0x10
c00089d5:	eb f1                	jmp    c00089c8 <Krnl::firstTask()+0x138>
c00089d7:	90                   	nop

c00089d8 <Computer::Computer()>:
c00089d8:	83 ec 0c             	sub    esp,0xc
c00089db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089df:	83 ec 08             	sub    esp,0x8
c00089e2:	68 61 07 02 c0       	push   0xc0020761
c00089e7:	50                   	push   eax
c00089e8:	e8 c9 50 00 00       	call   c000dab6 <Device::Device(char const*)>
c00089ed:	83 c4 10             	add    esp,0x10
c00089f0:	ba 50 08 02 c0       	mov    edx,0xc0020850
c00089f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f9:	89 10                	mov    DWORD PTR [eax],edx
c00089fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ff:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008a17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a1b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008a21:	83 ca 04             	or     edx,0x4
c0008a24:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a2e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008a34:	0f b6 d0             	movzx  edx,al
c0008a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a3b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a46:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008a4c:	0f b6 d0             	movzx  edx,al
c0008a4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a53:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a5c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008a62:	8d 50 01             	lea    edx,[eax+0x1]
c0008a65:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008a69:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008a6f:	0f b6 d0             	movzx  edx,al
c0008a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a76:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008a7a:	83 e1 3f             	and    ecx,0x3f
c0008a7d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008a81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a85:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008a8b:	0f b6 d0             	movzx  edx,al
c0008a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a92:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a9d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008aa3:	0f b6 d0             	movzx  edx,al
c0008aa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008aaa:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ab3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ab9:	8d 50 01             	lea    edx,[eax+0x1]
c0008abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ac0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ac6:	0f b6 d0             	movzx  edx,al
c0008ac9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008acd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008ad1:	83 e1 3f             	and    ecx,0x3f
c0008ad4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008adc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ae2:	0f b6 d0             	movzx  edx,al
c0008ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ae9:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008af4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008afa:	0f b6 d0             	movzx  edx,al
c0008afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b01:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b0a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008b10:	8d 50 01             	lea    edx,[eax+0x1]
c0008b13:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008b17:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008b1d:	0f b6 d0             	movzx  edx,al
c0008b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b24:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008b28:	83 e1 3f             	and    ecx,0x3f
c0008b2b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008b2f:	90                   	nop
c0008b30:	83 c4 0c             	add    esp,0xc
c0008b33:	c3                   	ret    

c0008b34 <Computer::setBootMessage(char const*)>:
c0008b34:	c3                   	ret    
c0008b35:	90                   	nop

c0008b36 <Computer::detectFeatures()>:
c0008b36:	55                   	push   ebp
c0008b37:	57                   	push   edi
c0008b38:	56                   	push   esi
c0008b39:	53                   	push   ebx
c0008b3a:	83 ec 1c             	sub    esp,0x1c
c0008b3d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008b41:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008b4b:	e8 c9 76 ff ff       	call   c0000219 <detectCPUID>
c0008b50:	85 c0                	test   eax,eax
c0008b52:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008b58:	0f 95 c2             	setne  dl
c0008b5b:	83 e0 fd             	and    eax,0xfffffffd
c0008b5e:	d1 e2                	shl    edx,1
c0008b60:	09 d0                	or     eax,edx
c0008b62:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008b68:	a8 02                	test   al,0x2
c0008b6a:	75 46                	jne    c0008bb2 <Computer::detectFeatures()+0x7c>
c0008b6c:	f6 05 e1 31 02 c0 04 	test   BYTE PTR ds:0xc00231e1,0x4
c0008b73:	74 07                	je     c0008b7c <Computer::detectFeatures()+0x46>
c0008b75:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008b7c:	e8 35 64 01 00       	call   c001efb6 <x87Detect>
c0008b81:	83 e0 01             	and    eax,0x1
c0008b84:	c1 e0 04             	shl    eax,0x4
c0008b87:	88 c2                	mov    dl,al
c0008b89:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008b8f:	83 e0 ef             	and    eax,0xffffffef
c0008b92:	09 d0                	or     eax,edx
c0008b94:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008b9a:	a8 10                	test   al,0x10
c0008b9c:	0f 85 2a 01 00 00    	jne    c0008ccc <Computer::detectFeatures()+0x196>
c0008ba2:	84 c0                	test   al,al
c0008ba4:	0f 88 45 01 00 00    	js     c0008cef <Computer::detectFeatures()+0x1b9>
c0008baa:	83 c4 1c             	add    esp,0x1c
c0008bad:	5b                   	pop    ebx
c0008bae:	5e                   	pop    esi
c0008baf:	5f                   	pop    edi
c0008bb0:	5d                   	pop    ebp
c0008bb1:	c3                   	ret    
c0008bb2:	83 ec 0c             	sub    esp,0xc
c0008bb5:	6a 20                	push   0x20
c0008bb7:	e8 1c 84 00 00       	call   c0010fd8 <CPU::cpuidCheckEDX(unsigned int)>
c0008bbc:	83 e0 01             	and    eax,0x1
c0008bbf:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008bc6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008bcc:	83 e0 f7             	and    eax,0xfffffff7
c0008bcf:	09 d0                	or     eax,edx
c0008bd1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008bd7:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008bde:	e8 f5 83 00 00       	call   c0010fd8 <CPU::cpuidCheckEDX(unsigned int)>
c0008be3:	83 e0 01             	and    eax,0x1
c0008be6:	88 c2                	mov    dl,al
c0008be8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008bee:	83 e0 fe             	and    eax,0xfffffffe
c0008bf1:	09 d0                	or     eax,edx
c0008bf3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008bf9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008c00:	e8 d3 83 00 00       	call   c0010fd8 <CPU::cpuidCheckEDX(unsigned int)>
c0008c05:	c1 e0 07             	shl    eax,0x7
c0008c08:	88 c2                	mov    dl,al
c0008c0a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008c10:	83 e0 7f             	and    eax,0x7f
c0008c13:	09 d0                	or     eax,edx
c0008c15:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008c1b:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008c22:	e8 b1 83 00 00       	call   c0010fd8 <CPU::cpuidCheckEDX(unsigned int)>
c0008c27:	83 c4 10             	add    esp,0x10
c0008c2a:	83 e0 01             	and    eax,0x1
c0008c2d:	c1 e0 05             	shl    eax,0x5
c0008c30:	88 c2                	mov    dl,al
c0008c32:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008c38:	83 e0 df             	and    eax,0xffffffdf
c0008c3b:	09 d0                	or     eax,edx
c0008c3d:	f7 05 e0 31 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00231e0,0x401
c0008c47:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008c4d:	0f 84 c2 00 00 00    	je     c0008d15 <Computer::detectFeatures()+0x1df>
c0008c53:	83 e0 fe             	and    eax,0xfffffffe
c0008c56:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008c5c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008c62:	88 c2                	mov    dl,al
c0008c64:	83 e2 09             	and    edx,0x9
c0008c67:	fe ca                	dec    dl
c0008c69:	75 09                	jne    c0008c74 <Computer::detectFeatures()+0x13e>
c0008c6b:	83 e0 fe             	and    eax,0xfffffffe
c0008c6e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008c74:	83 ec 0c             	sub    esp,0xc
c0008c77:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008c7b:	50                   	push   eax
c0008c7c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008c80:	55                   	push   ebp
c0008c81:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008c85:	57                   	push   edi
c0008c86:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008c8a:	56                   	push   esi
c0008c8b:	68 00 00 00 80       	push   0x80000000
c0008c90:	e8 bf 82 00 00       	call   c0010f54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008c95:	83 c4 20             	add    esp,0x20
c0008c98:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008c9f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008ca3:	0f 86 c3 fe ff ff    	jbe    c0008b6c <Computer::detectFeatures()+0x36>
c0008ca9:	83 ec 0c             	sub    esp,0xc
c0008cac:	50                   	push   eax
c0008cad:	55                   	push   ebp
c0008cae:	57                   	push   edi
c0008caf:	56                   	push   esi
c0008cb0:	68 01 00 00 80       	push   0x80000001
c0008cb5:	e8 9a 82 00 00       	call   c0010f54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008cba:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008cc4:	83 c4 20             	add    esp,0x20
c0008cc7:	e9 a0 fe ff ff       	jmp    c0008b6c <Computer::detectFeatures()+0x36>
c0008ccc:	e8 9f 62 01 00       	call   c001ef70 <absolutelyNoChanceInHell>
c0008cd1:	88 c2                	mov    dl,al
c0008cd3:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008cd9:	c1 e2 07             	shl    edx,0x7
c0008cdc:	83 e0 7f             	and    eax,0x7f
c0008cdf:	09 d0                	or     eax,edx
c0008ce1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ce7:	84 c0                	test   al,al
c0008ce9:	0f 89 bb fe ff ff    	jns    c0008baa <Computer::detectFeatures()+0x74>
c0008cef:	e8 fc 5f 01 00       	call   c001ecf0 <avxDetect>
c0008cf4:	83 e0 01             	and    eax,0x1
c0008cf7:	c1 e0 05             	shl    eax,0x5
c0008cfa:	88 c2                	mov    dl,al
c0008cfc:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008d02:	83 e0 df             	and    eax,0xffffffdf
c0008d05:	09 d0                	or     eax,edx
c0008d07:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008d0d:	83 c4 1c             	add    esp,0x1c
c0008d10:	5b                   	pop    ebx
c0008d11:	5e                   	pop    esi
c0008d12:	5f                   	pop    edi
c0008d13:	5d                   	pop    ebp
c0008d14:	c3                   	ret    
c0008d15:	83 ec 0c             	sub    esp,0xc
c0008d18:	68 00 02 00 00       	push   0x200
c0008d1d:	e8 b6 82 00 00       	call   c0010fd8 <CPU::cpuidCheckEDX(unsigned int)>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	83 e0 01             	and    eax,0x1
c0008d28:	88 c2                	mov    dl,al
c0008d2a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d30:	83 e0 fe             	and    eax,0xfffffffe
c0008d33:	09 d0                	or     eax,edx
c0008d35:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d3b:	e9 1c ff ff ff       	jmp    c0008c5c <Computer::detectFeatures()+0x126>

c0008d40 <Computer::displayFeatures()>:
c0008d40:	c3                   	ret    
c0008d41:	90                   	nop

c0008d42 <Computer::rdmsr(unsigned int)>:
c0008d42:	83 ec 0c             	sub    esp,0xc
c0008d45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d49:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008d50:	74 0a                	je     c0008d5c <Computer::rdmsr(unsigned int)+0x1a>
c0008d52:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008d56:	0f 32                	rdmsr  
c0008d58:	83 c4 0c             	add    esp,0xc
c0008d5b:	c3                   	ret    
c0008d5c:	83 ec 0c             	sub    esp,0xc
c0008d5f:	68 6a 07 02 c0       	push   0xc002076a
c0008d64:	e8 68 94 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c0008d69:	83 c4 10             	add    esp,0x10
c0008d6c:	eb e4                	jmp    c0008d52 <Computer::rdmsr(unsigned int)+0x10>

c0008d6e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008d6e:	57                   	push   edi
c0008d6f:	56                   	push   esi
c0008d70:	52                   	push   edx
c0008d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d75:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008d79:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008d7d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008d84:	74 0e                	je     c0008d94 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008d86:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008d8a:	89 f0                	mov    eax,esi
c0008d8c:	89 fa                	mov    edx,edi
c0008d8e:	0f 30                	wrmsr  
c0008d90:	58                   	pop    eax
c0008d91:	5e                   	pop    esi
c0008d92:	5f                   	pop    edi
c0008d93:	c3                   	ret    
c0008d94:	83 ec 0c             	sub    esp,0xc
c0008d97:	68 70 07 02 c0       	push   0xc0020770
c0008d9c:	e8 30 94 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c0008da1:	83 c4 10             	add    esp,0x10
c0008da4:	eb e0                	jmp    c0008d86 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008da6 <Computer::shutdown()>:
c0008da6:	83 ec 0c             	sub    esp,0xc
c0008da9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008dad:	8b 10                	mov    edx,DWORD PTR [eax]
c0008daf:	6a 00                	push   0x0
c0008db1:	6a 00                	push   0x0
c0008db3:	6a 00                	push   0x0
c0008db5:	50                   	push   eax
c0008db6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008db9:	83 c4 1c             	add    esp,0x1c
c0008dbc:	c3                   	ret    
c0008dbd:	90                   	nop

c0008dbe <Computer::restart()>:
c0008dbe:	83 ec 0c             	sub    esp,0xc
c0008dc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008dc5:	8b 10                	mov    edx,DWORD PTR [eax]
c0008dc7:	6a 00                	push   0x0
c0008dc9:	6a 00                	push   0x0
c0008dcb:	6a 01                	push   0x1
c0008dcd:	50                   	push   eax
c0008dce:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008dd1:	83 c4 1c             	add    esp,0x1c
c0008dd4:	c3                   	ret    
c0008dd5:	90                   	nop

c0008dd6 <Computer::sleep()>:
c0008dd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dda:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008de0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008de4:	e9 67 7c 00 00       	jmp    c0010a50 <ACPI::sleep()>
c0008de9:	90                   	nop

c0008dea <Computer::nmiEnabled()>:
c0008dea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dee:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008df4:	c3                   	ret    
c0008df5:	90                   	nop

c0008df6 <Computer::readCMOS(unsigned char)>:
c0008df6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dfa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008e01:	19 c0                	sbb    eax,eax
c0008e03:	83 e0 80             	and    eax,0xffffff80
c0008e06:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008e0a:	e6 70                	out    0x70,al
c0008e0c:	e4 71                	in     al,0x71
c0008e0e:	c3                   	ret    
c0008e0f:	90                   	nop

c0008e10 <Computer::enableNMI(bool)>:
c0008e10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008e14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e18:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0008e1e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0008e26:	eb ce                	jmp    c0008df6 <Computer::readCMOS(unsigned char)>

c0008e28 <Computer::open(int, int, void*)>:
c0008e28:	56                   	push   esi
c0008e29:	53                   	push   ebx
c0008e2a:	83 ec 10             	sub    esp,0x10
c0008e2d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008e31:	f6 05 e0 31 02 c0 04 	test   BYTE PTR ds:0xc00231e0,0x4
c0008e38:	68 76 07 02 c0       	push   0xc0020776
c0008e3d:	0f 94 05 00 2b 02 c0 	sete   BYTE PTR ds:0xc0022b00
c0008e44:	e8 82 09 00 00       	call   c00097cb <Krnl::setBootMessage(char const*)>
c0008e49:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0008e50:	e8 1c 09 00 00       	call   c0009771 <malloc>
c0008e55:	89 04 24             	mov    DWORD PTR [esp],eax
c0008e58:	89 c6                	mov    esi,eax
c0008e5a:	e8 95 77 00 00       	call   c00105f4 <ACPI::ACPI()>
c0008e5f:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c0008e65:	58                   	pop    eax
c0008e66:	5a                   	pop    edx
c0008e67:	56                   	push   esi
c0008e68:	53                   	push   ebx
c0008e69:	e8 b0 4a 00 00       	call   c000d91e <Device::addChild(Device*)>
c0008e6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008e71:	e8 c0 fc ff ff       	call   c0008b36 <Computer::detectFeatures()>
c0008e76:	59                   	pop    ecx
c0008e77:	5e                   	pop    esi
c0008e78:	6a 01                	push   0x1
c0008e7a:	53                   	push   ebx
c0008e7b:	e8 90 ff ff ff       	call   c0008e10 <Computer::enableNMI(bool)>
c0008e80:	c7 04 24 1a 07 02 c0 	mov    DWORD PTR [esp],0xc002071a
c0008e87:	e8 3f 09 00 00       	call   c00097cb <Krnl::setBootMessage(char const*)>
c0008e8c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0008e93:	e8 d9 08 00 00       	call   c0009771 <malloc>
c0008e98:	89 04 24             	mov    DWORD PTR [esp],eax
c0008e9b:	89 c6                	mov    esi,eax
c0008e9d:	e8 ee 81 00 00       	call   c0011090 <CPU::CPU()>
c0008ea2:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0008ea8:	58                   	pop    eax
c0008ea9:	5a                   	pop    edx
c0008eaa:	56                   	push   esi
c0008eab:	53                   	push   ebx
c0008eac:	e8 6d 4a 00 00       	call   c000d91e <Device::addChild(Device*)>
c0008eb1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0008eb7:	8b 10                	mov    edx,DWORD PTR [eax]
c0008eb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008ebd:	6a 00                	push   0x0
c0008ebf:	6a 00                	push   0x0
c0008ec1:	50                   	push   eax
c0008ec2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008ec5:	83 c4 14             	add    esp,0x14
c0008ec8:	68 24 08 02 c0       	push   0xc0020824
c0008ecd:	e8 f9 08 00 00       	call   c00097cb <Krnl::setBootMessage(char const*)>
c0008ed2:	e8 08 f4 00 00       	call   c00182df <Hal::initialiseCoprocessor()>
c0008ed7:	c7 04 24 8e 07 02 c0 	mov    DWORD PTR [esp],0xc002078e
c0008ede:	e8 e8 08 00 00       	call   c00097cb <Krnl::setBootMessage(char const*)>
c0008ee3:	c7 04 24 90 88 00 c0 	mov    DWORD PTR [esp],0xc0008890
c0008eea:	e8 5d c6 00 00       	call   c001554c <setupMultitasking(void (*)())>
c0008eef:	83 c4 14             	add    esp,0x14
c0008ef2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0008ef7:	5b                   	pop    ebx
c0008ef8:	5e                   	pop    esi
c0008ef9:	c3                   	ret    

c0008efa <Computer::disableNMI()>:
c0008efa:	6a 00                	push   0x0
c0008efc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0008f00:	e8 0b ff ff ff       	call   c0008e10 <Computer::enableNMI(bool)>
c0008f05:	58                   	pop    eax
c0008f06:	5a                   	pop    edx
c0008f07:	c3                   	ret    

c0008f08 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0008f08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f0c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008f13:	19 c0                	sbb    eax,eax
c0008f15:	83 e0 80             	and    eax,0xffffff80
c0008f18:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008f1c:	e6 70                	out    0x70,al
c0008f1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008f22:	e6 71                	out    0x71,al
c0008f24:	c3                   	ret    
c0008f25:	90                   	nop

c0008f26 <Computer::handleNMI()>:
c0008f26:	56                   	push   esi
c0008f27:	53                   	push   ebx
c0008f28:	83 ec 10             	sub    esp,0x10
c0008f2b:	e4 92                	in     al,0x92
c0008f2d:	89 c6                	mov    esi,eax
c0008f2f:	e4 61                	in     al,0x61
c0008f31:	68 a9 07 02 c0       	push   0xc00207a9
c0008f36:	88 c3                	mov    bl,al
c0008f38:	e8 be 35 00 00       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	83 e6 10             	and    esi,0x10
c0008f43:	75 0d                	jne    c0008f52 <Computer::handleNMI()+0x2c>
c0008f45:	f6 c3 40             	test   bl,0x40
c0008f48:	75 1d                	jne    c0008f67 <Computer::handleNMI()+0x41>
c0008f4a:	84 db                	test   bl,bl
c0008f4c:	78 2d                	js     c0008f7b <Computer::handleNMI()+0x55>
c0008f4e:	58                   	pop    eax
c0008f4f:	5b                   	pop    ebx
c0008f50:	5e                   	pop    esi
c0008f51:	c3                   	ret    
c0008f52:	83 ec 0c             	sub    esp,0xc
c0008f55:	68 ba 07 02 c0       	push   0xc00207ba
c0008f5a:	e8 72 92 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c0008f5f:	83 c4 10             	add    esp,0x10
c0008f62:	f6 c3 40             	test   bl,0x40
c0008f65:	74 e3                	je     c0008f4a <Computer::handleNMI()+0x24>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	68 c7 07 02 c0       	push   0xc00207c7
c0008f6f:	e8 5d 92 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c0008f74:	83 c4 10             	add    esp,0x10
c0008f77:	84 db                	test   bl,bl
c0008f79:	79 d3                	jns    c0008f4e <Computer::handleNMI()+0x28>
c0008f7b:	c7 44 24 10 d1 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc00207d1
c0008f83:	5a                   	pop    edx
c0008f84:	5b                   	pop    ebx
c0008f85:	5e                   	pop    esi
c0008f86:	e9 46 92 00 00       	jmp    c00121d1 <Krnl::panic(char const*)>
c0008f8b:	90                   	nop

c0008f8c <Computer::setDiskActivityLight(int, bool)>:
c0008f8c:	56                   	push   esi
c0008f8d:	53                   	push   ebx
c0008f8e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008f92:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0008f97:	77 1b                	ja     c0008fb4 <Computer::setDiskActivityLight(int, bool)+0x28>
c0008f99:	e4 92                	in     al,0x92
c0008f9b:	bb 40 00 00 00       	mov    ebx,0x40
c0008fa0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0008fa4:	89 da                	mov    edx,ebx
c0008fa6:	d3 e2                	shl    edx,cl
c0008fa8:	89 f1                	mov    ecx,esi
c0008faa:	f7 d2                	not    edx
c0008fac:	d3 e3                	shl    ebx,cl
c0008fae:	21 d0                	and    eax,edx
c0008fb0:	09 d8                	or     eax,ebx
c0008fb2:	e6 92                	out    0x92,al
c0008fb4:	5b                   	pop    ebx
c0008fb5:	5e                   	pop    esi
c0008fb6:	c3                   	ret    
c0008fb7:	90                   	nop

c0008fb8 <GDTEntry::setBase(unsigned int)>:
c0008fb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008fbc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008fc0:	89 c1                	mov    ecx,eax
c0008fc2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0008fc6:	c1 e9 10             	shr    ecx,0x10
c0008fc9:	c1 e8 18             	shr    eax,0x18
c0008fcc:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0008fcf:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0008fd2:	c3                   	ret    
c0008fd3:	90                   	nop

c0008fd4 <GDTEntry::setLimit(unsigned int)>:
c0008fd4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0008fd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008fdc:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0008fdf:	66 89 01             	mov    WORD PTR [ecx],ax
c0008fe2:	83 e2 f0             	and    edx,0xfffffff0
c0008fe5:	c1 e8 10             	shr    eax,0x10
c0008fe8:	83 e0 0f             	and    eax,0xf
c0008feb:	09 d0                	or     eax,edx
c0008fed:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0008ff0:	c3                   	ret    
c0008ff1:	90                   	nop

c0008ff2 <GDT::GDT()>:
c0008ff2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008ffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009000:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009006:	90                   	nop
c0009007:	c3                   	ret    

c0009008 <GDT::addEntry(GDTEntry)>:
c0009008:	53                   	push   ebx
c0009009:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000900d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009011:	8b 02                	mov    eax,DWORD PTR [edx]
c0009013:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009017:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000901b:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000901f:	8d 48 01             	lea    ecx,[eax+0x1]
c0009022:	c1 e0 03             	shl    eax,0x3
c0009025:	89 0a                	mov    DWORD PTR [edx],ecx
c0009027:	5b                   	pop    ebx
c0009028:	c3                   	ret    
c0009029:	90                   	nop

c000902a <GDT::getNumberOfEntries()>:
c000902a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000902e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009030:	c3                   	ret    
c0009031:	90                   	nop

c0009032 <GDT::flush()>:
c0009032:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009036:	8b 10                	mov    edx,DWORD PTR [eax]
c0009038:	83 c0 04             	add    eax,0x4
c000903b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0009042:	a3 d2 31 02 c0       	mov    ds:0xc00231d2,eax
c0009047:	66 89 15 d0 31 02 c0 	mov    WORD PTR ds:0xc00231d0,dx
c000904e:	e9 2a 73 ff ff       	jmp    c000037d <loadGDT>
c0009053:	90                   	nop

c0009054 <GDT::setup()>:
c0009054:	57                   	push   edi
c0009055:	56                   	push   esi
c0009056:	53                   	push   ebx
c0009057:	83 ec 40             	sub    esp,0x40
c000905a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000905e:	6a 00                	push   0x0
c0009060:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0009064:	56                   	push   esi
c0009065:	e8 4e ff ff ff       	call   c0008fb8 <GDTEntry::setBase(unsigned int)>
c000906a:	6a 00                	push   0x0
c000906c:	56                   	push   esi
c000906d:	e8 62 ff ff ff       	call   c0008fd4 <GDTEntry::setLimit(unsigned int)>
c0009072:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c000907a:	6a 00                	push   0x0
c000907c:	8d 74 24 44          	lea    esi,[esp+0x44]
c0009080:	56                   	push   esi
c0009081:	e8 32 ff ff ff       	call   c0008fb8 <GDTEntry::setBase(unsigned int)>
c0009086:	68 ff ff ff 00       	push   0xffffff
c000908b:	56                   	push   esi
c000908c:	e8 43 ff ff ff       	call   c0008fd4 <GDTEntry::setLimit(unsigned int)>
c0009091:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0009095:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000909a:	0d 00 9a c0 00       	or     eax,0xc09a00
c000909f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00090a3:	83 c4 20             	add    esp,0x20
c00090a6:	6a 00                	push   0x0
c00090a8:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00090ac:	56                   	push   esi
c00090ad:	e8 06 ff ff ff       	call   c0008fb8 <GDTEntry::setBase(unsigned int)>
c00090b2:	68 ff ff ff 00       	push   0xffffff
c00090b7:	56                   	push   esi
c00090b8:	e8 17 ff ff ff       	call   c0008fd4 <GDTEntry::setLimit(unsigned int)>
c00090bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00090c1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00090c5:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00090c9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00090cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090d1:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00090d6:	0d 00 92 c0 00       	or     eax,0xc09200
c00090db:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00090df:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00090e3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00090e7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090eb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090f3:	89 fa                	mov    edx,edi
c00090f5:	80 cc 60             	or     ah,0x60
c00090f8:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c00090fe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009102:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0009106:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000910a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000910e:	80 cc 60             	or     ah,0x60
c0009111:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009115:	89 f8                	mov    eax,edi
c0009117:	25 ff ff 00 ff       	and    eax,0xff00ffff
c000911c:	09 d0                	or     eax,edx
c000911e:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0009122:	89 c7                	mov    edi,eax
c0009124:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009128:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000912c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009130:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009134:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c000913a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000913e:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0009143:	09 d0                	or     eax,edx
c0009145:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009149:	83 c4 0c             	add    esp,0xc
c000914c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009150:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009154:	53                   	push   ebx
c0009155:	e8 ae fe ff ff       	call   c0009008 <GDT::addEntry(GDTEntry)>
c000915a:	83 c4 0c             	add    esp,0xc
c000915d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009161:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009165:	53                   	push   ebx
c0009166:	e8 9d fe ff ff       	call   c0009008 <GDT::addEntry(GDTEntry)>
c000916b:	83 c4 0c             	add    esp,0xc
c000916e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0009172:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0009176:	53                   	push   ebx
c0009177:	e8 8c fe ff ff       	call   c0009008 <GDT::addEntry(GDTEntry)>
c000917c:	83 c4 0c             	add    esp,0xc
c000917f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009183:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009187:	53                   	push   ebx
c0009188:	e8 7b fe ff ff       	call   c0009008 <GDT::addEntry(GDTEntry)>
c000918d:	83 c4 0c             	add    esp,0xc
c0009190:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009194:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009198:	53                   	push   ebx
c0009199:	e8 6a fe ff ff       	call   c0009008 <GDT::addEntry(GDTEntry)>
c000919e:	83 c4 0c             	add    esp,0xc
c00091a1:	57                   	push   edi
c00091a2:	56                   	push   esi
c00091a3:	53                   	push   ebx
c00091a4:	e8 5f fe ff ff       	call   c0009008 <GDT::addEntry(GDTEntry)>
c00091a9:	83 c4 0c             	add    esp,0xc
c00091ac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00091b0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00091b4:	53                   	push   ebx
c00091b5:	e8 4e fe ff ff       	call   c0009008 <GDT::addEntry(GDTEntry)>
c00091ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00091bd:	e8 70 fe ff ff       	call   c0009032 <GDT::flush()>
c00091c2:	83 c4 50             	add    esp,0x50
c00091c5:	5b                   	pop    ebx
c00091c6:	5e                   	pop    esi
c00091c7:	5f                   	pop    edi
c00091c8:	c3                   	ret    

c00091c9 <idleFunction(void*)>:
c00091c9:	83 ec 0c             	sub    esp,0xc
c00091cc:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c00091d1:	48                   	dec    eax
c00091d2:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c00091d7:	75 01                	jne    c00091da <idleFunction(void*)+0x11>
c00091d9:	fb                   	sti    
c00091da:	f4                   	hlt    
c00091db:	e8 92 63 01 00       	call   c001f572 <idleCommon()>
c00091e0:	eb f8                	jmp    c00091da <idleFunction(void*)+0x11>
c00091e2:	66 90                	xchg   ax,ax

c00091e4 <IDTEntry::IDTEntry(bool)>:
c00091e4:	83 ec 04             	sub    esp,0x4
c00091e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00091eb:	88 04 24             	mov    BYTE PTR [esp],al
c00091ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00091f2:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00091f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00091fc:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009200:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009204:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009207:	83 e2 f0             	and    edx,0xfffffff0
c000920a:	83 ca 0e             	or     edx,0xe
c000920d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009210:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009214:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009217:	83 e2 ef             	and    edx,0xffffffef
c000921a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000921d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009221:	74 05                	je     c0009228 <IDTEntry::IDTEntry(bool)+0x44>
c0009223:	b2 03                	mov    dl,0x3
c0009225:	eb 05                	jmp    c000922c <IDTEntry::IDTEntry(bool)+0x48>
c0009227:	90                   	nop
c0009228:	b2 00                	mov    dl,0x0
c000922a:	66 90                	xchg   ax,ax
c000922c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009230:	83 e2 03             	and    edx,0x3
c0009233:	88 d1                	mov    cl,dl
c0009235:	c1 e1 05             	shl    ecx,0x5
c0009238:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000923b:	83 e2 9f             	and    edx,0xffffff9f
c000923e:	09 ca                	or     edx,ecx
c0009240:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009243:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009247:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000924a:	83 ca 80             	or     edx,0xffffff80
c000924d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009250:	90                   	nop
c0009251:	83 c4 04             	add    esp,0x4
c0009254:	c3                   	ret    
c0009255:	90                   	nop

c0009256 <IDTEntry::setOffset(unsigned int)>:
c0009256:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000925a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000925e:	66 89 02             	mov    WORD PTR [edx],ax
c0009261:	c1 e8 10             	shr    eax,0x10
c0009264:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0009268:	c3                   	ret    
c0009269:	90                   	nop
c000926a:	66 90                	xchg   ax,ax

c000926c <IDT::IDT()>:
c000926c:	90                   	nop
c000926d:	c3                   	ret    

c000926e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000926e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009272:	83 c0 30             	add    eax,0x30
c0009275:	c3                   	ret    

c0009276 <IDT::addEntry(IDTEntry, int)>:
c0009276:	53                   	push   ebx
c0009277:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000927b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000927f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009283:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009287:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000928a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000928e:	5b                   	pop    ebx
c000928f:	c3                   	ret    

c0009290 <IDT::addEntry(int, void (*)(), bool)>:
c0009290:	53                   	push   ebx
c0009291:	83 ec 10             	sub    esp,0x10
c0009294:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0009299:	50                   	push   eax
c000929a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000929e:	53                   	push   ebx
c000929f:	e8 40 ff ff ff       	call   c00091e4 <IDTEntry::IDTEntry(bool)>
c00092a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00092a8:	53                   	push   ebx
c00092a9:	e8 a8 ff ff ff       	call   c0009256 <IDTEntry::setOffset(unsigned int)>
c00092ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00092b2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00092b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00092ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00092be:	e8 b3 ff ff ff       	call   c0009276 <IDT::addEntry(IDTEntry, int)>
c00092c3:	83 c4 30             	add    esp,0x30
c00092c6:	5b                   	pop    ebx
c00092c7:	c3                   	ret    

c00092c8 <IDT::flush()>:
c00092c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092cc:	66 c7 05 d8 31 02 c0 ff 07 	mov    WORD PTR ds:0xc00231d8,0x7ff
c00092d5:	a3 da 31 02 c0       	mov    ds:0xc00231da,eax
c00092da:	0f 01 1d d8 31 02 c0 	lidtd  ds:0xc00231d8
c00092e1:	c3                   	ret    

c00092e2 <IDT::setup()>:
c00092e2:	57                   	push   edi
c00092e3:	56                   	push   esi
c00092e4:	53                   	push   ebx
c00092e5:	83 ec 10             	sub    esp,0x10
c00092e8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00092ec:	6a 00                	push   0x0
c00092ee:	68 80 ed 01 c0       	push   0xc001ed80
c00092f3:	6a 00                	push   0x0
c00092f5:	53                   	push   ebx
c00092f6:	e8 95 ff ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00092fb:	6a 00                	push   0x0
c00092fd:	68 90 ed 01 c0       	push   0xc001ed90
c0009302:	6a 01                	push   0x1
c0009304:	53                   	push   ebx
c0009305:	e8 86 ff ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000930a:	83 c4 20             	add    esp,0x20
c000930d:	6a 00                	push   0x0
c000930f:	68 9a ed 01 c0       	push   0xc001ed9a
c0009314:	6a 02                	push   0x2
c0009316:	53                   	push   ebx
c0009317:	e8 74 ff ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000931c:	6a 00                	push   0x0
c000931e:	68 a4 ed 01 c0       	push   0xc001eda4
c0009323:	6a 03                	push   0x3
c0009325:	53                   	push   ebx
c0009326:	e8 65 ff ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000932b:	83 c4 20             	add    esp,0x20
c000932e:	6a 00                	push   0x0
c0009330:	68 ae ed 01 c0       	push   0xc001edae
c0009335:	6a 04                	push   0x4
c0009337:	53                   	push   ebx
c0009338:	e8 53 ff ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000933d:	6a 00                	push   0x0
c000933f:	68 b8 ed 01 c0       	push   0xc001edb8
c0009344:	6a 05                	push   0x5
c0009346:	53                   	push   ebx
c0009347:	e8 44 ff ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000934c:	83 c4 20             	add    esp,0x20
c000934f:	6a 00                	push   0x0
c0009351:	68 c2 ed 01 c0       	push   0xc001edc2
c0009356:	6a 06                	push   0x6
c0009358:	53                   	push   ebx
c0009359:	e8 32 ff ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000935e:	6a 00                	push   0x0
c0009360:	68 cc ed 01 c0       	push   0xc001edcc
c0009365:	6a 07                	push   0x7
c0009367:	53                   	push   ebx
c0009368:	e8 23 ff ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000936d:	83 c4 20             	add    esp,0x20
c0009370:	6a 00                	push   0x0
c0009372:	68 d6 ed 01 c0       	push   0xc001edd6
c0009377:	6a 08                	push   0x8
c0009379:	53                   	push   ebx
c000937a:	e8 11 ff ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000937f:	6a 00                	push   0x0
c0009381:	68 de ed 01 c0       	push   0xc001edde
c0009386:	6a 09                	push   0x9
c0009388:	53                   	push   ebx
c0009389:	e8 02 ff ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000938e:	83 c4 20             	add    esp,0x20
c0009391:	6a 00                	push   0x0
c0009393:	68 e8 ed 01 c0       	push   0xc001ede8
c0009398:	6a 0a                	push   0xa
c000939a:	53                   	push   ebx
c000939b:	e8 f0 fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00093a0:	6a 00                	push   0x0
c00093a2:	68 f0 ed 01 c0       	push   0xc001edf0
c00093a7:	6a 0b                	push   0xb
c00093a9:	53                   	push   ebx
c00093aa:	e8 e1 fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00093af:	83 c4 20             	add    esp,0x20
c00093b2:	6a 00                	push   0x0
c00093b4:	68 f8 ed 01 c0       	push   0xc001edf8
c00093b9:	6a 0c                	push   0xc
c00093bb:	53                   	push   ebx
c00093bc:	e8 cf fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00093c1:	6a 00                	push   0x0
c00093c3:	68 00 ee 01 c0       	push   0xc001ee00
c00093c8:	6a 0d                	push   0xd
c00093ca:	53                   	push   ebx
c00093cb:	e8 c0 fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00093d0:	83 c4 20             	add    esp,0x20
c00093d3:	6a 00                	push   0x0
c00093d5:	68 08 ee 01 c0       	push   0xc001ee08
c00093da:	6a 0e                	push   0xe
c00093dc:	53                   	push   ebx
c00093dd:	e8 ae fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00093e2:	6a 00                	push   0x0
c00093e4:	68 10 ee 01 c0       	push   0xc001ee10
c00093e9:	6a 0f                	push   0xf
c00093eb:	53                   	push   ebx
c00093ec:	e8 9f fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00093f1:	83 c4 20             	add    esp,0x20
c00093f4:	6a 00                	push   0x0
c00093f6:	68 1a ee 01 c0       	push   0xc001ee1a
c00093fb:	6a 10                	push   0x10
c00093fd:	53                   	push   ebx
c00093fe:	e8 8d fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c0009403:	6a 00                	push   0x0
c0009405:	68 24 ee 01 c0       	push   0xc001ee24
c000940a:	6a 11                	push   0x11
c000940c:	53                   	push   ebx
c000940d:	e8 7e fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c0009412:	83 c4 20             	add    esp,0x20
c0009415:	6a 00                	push   0x0
c0009417:	68 2e ee 01 c0       	push   0xc001ee2e
c000941c:	6a 12                	push   0x12
c000941e:	53                   	push   ebx
c000941f:	e8 6c fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c0009424:	6a 01                	push   0x1
c0009426:	68 c8 ee 01 c0       	push   0xc001eec8
c000942b:	6a 60                	push   0x60
c000942d:	53                   	push   ebx
c000942e:	e8 5d fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c0009433:	83 c4 20             	add    esp,0x20
c0009436:	6a 00                	push   0x0
c0009438:	68 cf ee 01 c0       	push   0xc001eecf
c000943d:	6a 20                	push   0x20
c000943f:	53                   	push   ebx
c0009440:	e8 4b fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c0009445:	6a 00                	push   0x0
c0009447:	68 ba ee 01 c0       	push   0xc001eeba
c000944c:	6a 21                	push   0x21
c000944e:	53                   	push   ebx
c000944f:	e8 3c fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c0009454:	83 c4 20             	add    esp,0x20
c0009457:	6a 00                	push   0x0
c0009459:	68 c1 ee 01 c0       	push   0xc001eec1
c000945e:	6a 22                	push   0x22
c0009460:	53                   	push   ebx
c0009461:	e8 2a fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c0009466:	6a 00                	push   0x0
c0009468:	68 38 ee 01 c0       	push   0xc001ee38
c000946d:	6a 23                	push   0x23
c000946f:	53                   	push   ebx
c0009470:	e8 1b fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c0009475:	83 c4 20             	add    esp,0x20
c0009478:	6a 00                	push   0x0
c000947a:	68 42 ee 01 c0       	push   0xc001ee42
c000947f:	6a 24                	push   0x24
c0009481:	53                   	push   ebx
c0009482:	e8 09 fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c0009487:	6a 00                	push   0x0
c0009489:	68 4c ee 01 c0       	push   0xc001ee4c
c000948e:	6a 25                	push   0x25
c0009490:	53                   	push   ebx
c0009491:	e8 fa fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c0009496:	83 c4 20             	add    esp,0x20
c0009499:	6a 00                	push   0x0
c000949b:	68 56 ee 01 c0       	push   0xc001ee56
c00094a0:	6a 26                	push   0x26
c00094a2:	53                   	push   ebx
c00094a3:	e8 e8 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00094a8:	6a 00                	push   0x0
c00094aa:	68 60 ee 01 c0       	push   0xc001ee60
c00094af:	6a 27                	push   0x27
c00094b1:	53                   	push   ebx
c00094b2:	e8 d9 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00094b7:	83 c4 20             	add    esp,0x20
c00094ba:	6a 00                	push   0x0
c00094bc:	68 6a ee 01 c0       	push   0xc001ee6a
c00094c1:	6a 28                	push   0x28
c00094c3:	53                   	push   ebx
c00094c4:	e8 c7 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00094c9:	6a 00                	push   0x0
c00094cb:	68 74 ee 01 c0       	push   0xc001ee74
c00094d0:	6a 29                	push   0x29
c00094d2:	53                   	push   ebx
c00094d3:	e8 b8 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00094d8:	83 c4 20             	add    esp,0x20
c00094db:	6a 00                	push   0x0
c00094dd:	68 7e ee 01 c0       	push   0xc001ee7e
c00094e2:	6a 2a                	push   0x2a
c00094e4:	53                   	push   ebx
c00094e5:	e8 a6 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00094ea:	6a 00                	push   0x0
c00094ec:	68 88 ee 01 c0       	push   0xc001ee88
c00094f1:	6a 2b                	push   0x2b
c00094f3:	53                   	push   ebx
c00094f4:	e8 97 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00094f9:	83 c4 20             	add    esp,0x20
c00094fc:	6a 00                	push   0x0
c00094fe:	68 92 ee 01 c0       	push   0xc001ee92
c0009503:	6a 2c                	push   0x2c
c0009505:	53                   	push   ebx
c0009506:	e8 85 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000950b:	6a 00                	push   0x0
c000950d:	68 9c ee 01 c0       	push   0xc001ee9c
c0009512:	6a 2d                	push   0x2d
c0009514:	53                   	push   ebx
c0009515:	e8 76 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000951a:	83 c4 20             	add    esp,0x20
c000951d:	6a 00                	push   0x0
c000951f:	68 a6 ee 01 c0       	push   0xc001eea6
c0009524:	6a 2e                	push   0x2e
c0009526:	53                   	push   ebx
c0009527:	e8 64 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000952c:	6a 00                	push   0x0
c000952e:	68 b0 ee 01 c0       	push   0xc001eeb0
c0009533:	6a 2f                	push   0x2f
c0009535:	53                   	push   ebx
c0009536:	e8 55 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000953b:	83 c4 20             	add    esp,0x20
c000953e:	6a 00                	push   0x0
c0009540:	68 06 ef 01 c0       	push   0xc001ef06
c0009545:	6a 30                	push   0x30
c0009547:	53                   	push   ebx
c0009548:	e8 43 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000954d:	6a 00                	push   0x0
c000954f:	68 10 ef 01 c0       	push   0xc001ef10
c0009554:	6a 31                	push   0x31
c0009556:	53                   	push   ebx
c0009557:	e8 34 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000955c:	83 c4 20             	add    esp,0x20
c000955f:	6a 00                	push   0x0
c0009561:	68 1a ef 01 c0       	push   0xc001ef1a
c0009566:	6a 32                	push   0x32
c0009568:	53                   	push   ebx
c0009569:	e8 22 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000956e:	6a 00                	push   0x0
c0009570:	68 24 ef 01 c0       	push   0xc001ef24
c0009575:	6a 33                	push   0x33
c0009577:	53                   	push   ebx
c0009578:	e8 13 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000957d:	83 c4 20             	add    esp,0x20
c0009580:	6a 00                	push   0x0
c0009582:	68 2e ef 01 c0       	push   0xc001ef2e
c0009587:	6a 34                	push   0x34
c0009589:	53                   	push   ebx
c000958a:	e8 01 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000958f:	6a 00                	push   0x0
c0009591:	68 38 ef 01 c0       	push   0xc001ef38
c0009596:	6a 35                	push   0x35
c0009598:	53                   	push   ebx
c0009599:	e8 f2 fc ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000959e:	83 c4 20             	add    esp,0x20
c00095a1:	6a 00                	push   0x0
c00095a3:	68 42 ef 01 c0       	push   0xc001ef42
c00095a8:	6a 36                	push   0x36
c00095aa:	53                   	push   ebx
c00095ab:	e8 e0 fc ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00095b0:	6a 00                	push   0x0
c00095b2:	68 4c ef 01 c0       	push   0xc001ef4c
c00095b7:	6a 37                	push   0x37
c00095b9:	53                   	push   ebx
c00095ba:	e8 d1 fc ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00095bf:	83 c4 1c             	add    esp,0x1c
c00095c2:	6a 03                	push   0x3
c00095c4:	6a 02                	push   0x2
c00095c6:	ff 35 b4 32 02 c0    	push   DWORD PTR ds:0xc00232b4
c00095cc:	e8 1f 24 00 00       	call   c000b9f0 <VAS::allocatePages(int, int)>
c00095d1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00095d8:	89 c6                	mov    esi,eax
c00095da:	e8 92 01 00 00       	call   c0009771 <malloc>
c00095df:	81 c6 00 20 00 00    	add    esi,0x2000
c00095e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00095e8:	89 c7                	mov    edi,eax
c00095ea:	e8 ed 15 00 00       	call   c000abdc <TSS::TSS()>
c00095ef:	83 c4 0c             	add    esp,0xc
c00095f2:	68 d6 ed 01 c0       	push   0xc001edd6
c00095f7:	56                   	push   esi
c00095f8:	57                   	push   edi
c00095f9:	e8 22 16 00 00       	call   c000ac20 <TSS::setup(unsigned long, unsigned long)>
c00095fe:	89 c6                	mov    esi,eax
c0009600:	58                   	pop    eax
c0009601:	5a                   	pop    edx
c0009602:	6a 00                	push   0x0
c0009604:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009608:	50                   	push   eax
c0009609:	e8 d6 fb ff ff       	call   c00091e4 <IDTEntry::IDTEntry(bool)>
c000960e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009612:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0009617:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000961e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009624:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009628:	80 ce 05             	or     dh,0x5
c000962b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000962e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009632:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009636:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0009639:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000963c:	e8 87 fc ff ff       	call   c00092c8 <IDT::flush()>
c0009641:	83 c4 20             	add    esp,0x20
c0009644:	5b                   	pop    ebx
c0009645:	5e                   	pop    esi
c0009646:	5f                   	pop    edi
c0009647:	c3                   	ret    

c0009648 <sbrk>:
c0009648:	55                   	push   ebp
c0009649:	57                   	push   edi
c000964a:	56                   	push   esi
c000964b:	53                   	push   ebx
c000964c:	83 ec 1c             	sub    esp,0x1c
c000964f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009653:	85 c0                	test   eax,eax
c0009655:	74 5f                	je     c00096b6 <sbrk+0x6e>
c0009657:	78 64                	js     c00096bd <sbrk+0x75>
c0009659:	8b 15 8c 29 02 c0    	mov    edx,DWORD PTR ds:0xc002298c
c000965f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009663:	05 ff 0f 00 00       	add    eax,0xfff
c0009668:	89 c5                	mov    ebp,eax
c000966a:	78 69                	js     c00096d5 <sbrk+0x8d>
c000966c:	c1 fd 0c             	sar    ebp,0xc
c000966f:	bb 00 00 00 00       	mov    ebx,0x0
c0009674:	8b 35 b4 32 02 c0    	mov    esi,DWORD PTR ds:0xc00232b4
c000967a:	8b 3d 8c 29 02 c0    	mov    edi,DWORD PTR ds:0xc002298c
c0009680:	e8 b3 04 00 00       	call   c0009b38 <Phys::allocatePage()>
c0009685:	68 01 04 00 00       	push   0x401
c000968a:	57                   	push   edi
c000968b:	50                   	push   eax
c000968c:	56                   	push   esi
c000968d:	e8 5a 22 00 00       	call   c000b8ec <VAS::mapPage(unsigned long, unsigned long, int)>
c0009692:	81 05 8c 29 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002298c,0x1000
c000969c:	43                   	inc    ebx
c000969d:	83 c4 10             	add    esp,0x10
c00096a0:	39 dd                	cmp    ebp,ebx
c00096a2:	75 d0                	jne    c0009674 <sbrk+0x2c>
c00096a4:	0f 20 d8             	mov    eax,cr3
c00096a7:	0f 22 d8             	mov    cr3,eax
c00096aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00096ae:	83 c4 1c             	add    esp,0x1c
c00096b1:	5b                   	pop    ebx
c00096b2:	5e                   	pop    esi
c00096b3:	5f                   	pop    edi
c00096b4:	5d                   	pop    ebp
c00096b5:	c3                   	ret    
c00096b6:	a1 8c 29 02 c0       	mov    eax,ds:0xc002298c
c00096bb:	eb f1                	jmp    c00096ae <sbrk+0x66>
c00096bd:	83 ec 08             	sub    esp,0x8
c00096c0:	50                   	push   eax
c00096c1:	68 74 08 02 c0       	push   0xc0020874
c00096c6:	e8 30 2e 00 00       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c00096cb:	83 c4 10             	add    esp,0x10
c00096ce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00096d3:	eb d9                	jmp    c00096ae <sbrk+0x66>
c00096d5:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c00096db:	eb 8f                	jmp    c000966c <sbrk+0x24>

c00096dd <mmap>:
c00096dd:	83 ec 18             	sub    esp,0x18
c00096e0:	68 a4 08 02 c0       	push   0xc00208a4
c00096e5:	e8 e7 8a 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c00096ea:	b8 00 00 00 00       	mov    eax,0x0
c00096ef:	83 c4 1c             	add    esp,0x1c
c00096f2:	c3                   	ret    

c00096f3 <munmap>:
c00096f3:	83 ec 18             	sub    esp,0x18
c00096f6:	68 a9 08 02 c0       	push   0xc00208a9
c00096fb:	e8 d1 8a 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c0009700:	b8 00 00 00 00       	mov    eax,0x0
c0009705:	83 c4 1c             	add    esp,0x1c
c0009708:	c3                   	ret    

c0009709 <liballoc_lock()>:
c0009709:	fa                   	cli    
c000970a:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c0009710:	b8 00 00 00 00       	mov    eax,0x0
c0009715:	c3                   	ret    

c0009716 <liballoc_unlock()>:
c0009716:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c000971b:	48                   	dec    eax
c000971c:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c0009721:	75 01                	jne    c0009724 <liballoc_unlock()+0xe>
c0009723:	fb                   	sti    
c0009724:	b8 00 00 00 00       	mov    eax,0x0
c0009729:	c3                   	ret    

c000972a <liballoc_alloc(int)>:
c000972a:	83 ec 10             	sub    esp,0x10
c000972d:	6a 01                	push   0x1
c000972f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009733:	ff 35 b4 32 02 c0    	push   DWORD PTR ds:0xc00232b4
c0009739:	e8 b2 22 00 00       	call   c000b9f0 <VAS::allocatePages(int, int)>
c000973e:	83 c4 1c             	add    esp,0x1c
c0009741:	c3                   	ret    

c0009742 <liballoc_free(void*, int)>:
c0009742:	83 ec 14             	sub    esp,0x14
c0009745:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009749:	ff 35 b4 32 02 c0    	push   DWORD PTR ds:0xc00232b4
c000974f:	e8 5c 1f 00 00       	call   c000b6b0 <VAS::freeAllocatedPages(unsigned long)>
c0009754:	b8 00 00 00 00       	mov    eax,0x0
c0009759:	83 c4 1c             	add    esp,0x1c
c000975c:	c3                   	ret    

c000975d <realloc>:
c000975d:	83 ec 14             	sub    esp,0x14
c0009760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009768:	e8 17 7c ff ff       	call   c0001384 <dlrealloc>
c000976d:	83 c4 1c             	add    esp,0x1c
c0009770:	c3                   	ret    

c0009771 <malloc>:
c0009771:	83 ec 18             	sub    esp,0x18
c0009774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009778:	e8 ca 76 ff ff       	call   c0000e47 <dlmalloc>
c000977d:	83 c4 1c             	add    esp,0x1c
c0009780:	c3                   	ret    

c0009781 <free>:
c0009781:	83 ec 18             	sub    esp,0x18
c0009784:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009788:	e8 5f 73 ff ff       	call   c0000aec <dlfree>
c000978d:	83 c4 1c             	add    esp,0x1c
c0009790:	c3                   	ret    

c0009791 <rfree>:
c0009791:	83 ec 18             	sub    esp,0x18
c0009794:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009798:	e8 4f 73 ff ff       	call   c0000aec <dlfree>
c000979d:	83 c4 1c             	add    esp,0x1c
c00097a0:	c3                   	ret    

c00097a1 <calloc>:
c00097a1:	56                   	push   esi
c00097a2:	53                   	push   ebx
c00097a3:	83 ec 10             	sub    esp,0x10
c00097a6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00097aa:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00097af:	53                   	push   ebx
c00097b0:	e8 bc ff ff ff       	call   c0009771 <malloc>
c00097b5:	89 c6                	mov    esi,eax
c00097b7:	83 c4 0c             	add    esp,0xc
c00097ba:	53                   	push   ebx
c00097bb:	6a 00                	push   0x0
c00097bd:	50                   	push   eax
c00097be:	e8 e5 6c ff ff       	call   c00004a8 <memset>
c00097c3:	89 f0                	mov    eax,esi
c00097c5:	83 c4 14             	add    esp,0x14
c00097c8:	5b                   	pop    ebx
c00097c9:	5e                   	pop    esi
c00097ca:	c3                   	ret    

c00097cb <Krnl::setBootMessage(char const*)>:
c00097cb:	57                   	push   edi
c00097cc:	56                   	push   esi
c00097cd:	53                   	push   ebx
c00097ce:	81 ec a4 00 00 00    	sub    esp,0xa4
c00097d4:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c00097db:	68 9e 00 00 00       	push   0x9e
c00097e0:	6a 00                	push   0x0
c00097e2:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00097e6:	56                   	push   esi
c00097e7:	e8 bc 6c ff ff       	call   c00004a8 <memset>
c00097ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00097ef:	e8 d0 6c ff ff       	call   c00004c4 <strlen>
c00097f4:	ba 50 00 00 00       	mov    edx,0x50
c00097f9:	83 c4 10             	add    esp,0x10
c00097fc:	29 c2                	sub    edx,eax
c00097fe:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009802:	d1 ea                	shr    edx,1
c0009804:	84 c0                	test   al,al
c0009806:	74 19                	je     c0009821 <Krnl::setBootMessage(char const*)+0x56>
c0009808:	01 d2                	add    edx,edx
c000980a:	43                   	inc    ebx
c000980b:	01 f2                	add    edx,esi
c000980d:	80 cc 0f             	or     ah,0xf
c0009810:	83 c2 02             	add    edx,0x2
c0009813:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009817:	43                   	inc    ebx
c0009818:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000981d:	84 c0                	test   al,al
c000981f:	75 ec                	jne    c000980d <Krnl::setBootMessage(char const*)+0x42>
c0009821:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009826:	b9 9e 00 00 00       	mov    ecx,0x9e
c000982b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000982d:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009833:	5b                   	pop    ebx
c0009834:	5e                   	pop    esi
c0009835:	5f                   	pop    edi
c0009836:	c3                   	ret    

c0009837 <kernel_main>:
c0009837:	55                   	push   ebp
c0009838:	57                   	push   edi
c0009839:	bf f9 03 00 00       	mov    edi,0x3f9
c000983e:	56                   	push   esi
c000983f:	89 fa                	mov    edx,edi
c0009841:	53                   	push   ebx
c0009842:	31 f6                	xor    esi,esi
c0009844:	83 ec 38             	sub    esp,0x38
c0009847:	a1 00 05 00 00       	mov    eax,ds:0x500
c000984c:	a3 e0 31 02 c0       	mov    ds:0xc00231e0,eax
c0009851:	89 f0                	mov    eax,esi
c0009853:	ee                   	out    dx,al
c0009854:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009859:	b0 80                	mov    al,0x80
c000985b:	89 da                	mov    edx,ebx
c000985d:	ee                   	out    dx,al
c000985e:	b1 03                	mov    cl,0x3
c0009860:	ba f8 03 00 00       	mov    edx,0x3f8
c0009865:	88 c8                	mov    al,cl
c0009867:	ee                   	out    dx,al
c0009868:	89 f0                	mov    eax,esi
c000986a:	89 fa                	mov    edx,edi
c000986c:	ee                   	out    dx,al
c000986d:	88 c8                	mov    al,cl
c000986f:	89 da                	mov    edx,ebx
c0009871:	ee                   	out    dx,al
c0009872:	b0 c7                	mov    al,0xc7
c0009874:	ba fa 03 00 00       	mov    edx,0x3fa
c0009879:	ee                   	out    dx,al
c000987a:	b0 0b                	mov    al,0xb
c000987c:	ba fc 03 00 00       	mov    edx,0x3fc
c0009881:	ee                   	out    dx,al
c0009882:	68 b0 08 02 c0       	push   0xc00208b0
c0009887:	e8 6f 2c 00 00       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c000988c:	0f be 05 a0 29 02 c0 	movsx  eax,BYTE PTR ds:0xc00229a0
c0009893:	83 c4 10             	add    esp,0x10
c0009896:	84 c0                	test   al,al
c0009898:	74 5c                	je     c00098f6 <kernel_main+0xbf>
c000989a:	31 db                	xor    ebx,ebx
c000989c:	bd 0a 00 00 00       	mov    ebp,0xa
c00098a1:	bf 05 00 00 00       	mov    edi,0x5
c00098a6:	31 f6                	xor    esi,esi
c00098a8:	eb 14                	jmp    c00098be <kernel_main+0x87>
c00098aa:	47                   	inc    edi
c00098ab:	bd 0a 00 00 00       	mov    ebp,0xa
c00098b0:	31 f6                	xor    esi,esi
c00098b2:	43                   	inc    ebx
c00098b3:	0f be 83 a0 29 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdd660]
c00098ba:	84 c0                	test   al,al
c00098bc:	74 38                	je     c00098f6 <kernel_main+0xbf>
c00098be:	80 be d6 29 02 c0 db 	cmp    BYTE PTR [esi-0x3ffdd62a],0xdb
c00098c5:	0f 84 97 00 00 00    	je     c0009962 <kernel_main+0x12b>
c00098cb:	3c 0d                	cmp    al,0xd
c00098cd:	74 e3                	je     c00098b2 <kernel_main+0x7b>
c00098cf:	3c 0a                	cmp    al,0xa
c00098d1:	74 d7                	je     c00098aa <kernel_main+0x73>
c00098d3:	83 ec 0c             	sub    esp,0xc
c00098d6:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00098da:	57                   	push   edi
c00098db:	43                   	inc    ebx
c00098dc:	52                   	push   edx
c00098dd:	46                   	inc    esi
c00098de:	6a 00                	push   0x0
c00098e0:	6a 0e                	push   0xe
c00098e2:	50                   	push   eax
c00098e3:	e8 14 f7 00 00       	call   c0018ffc <Hal::consoleWriteCharacter(char, int, int, int, int)>
c00098e8:	83 c4 20             	add    esp,0x20
c00098eb:	0f be 83 a0 29 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdd660]
c00098f2:	84 c0                	test   al,al
c00098f4:	75 c8                	jne    c00098be <kernel_main+0x87>
c00098f6:	83 ec 0c             	sub    esp,0xc
c00098f9:	a1 24 05 00 00       	mov    eax,ds:0x524
c00098fe:	05 ff 0f 00 00       	add    eax,0xfff
c0009903:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009908:	50                   	push   eax
c0009909:	e8 7b 03 00 00       	call   c0009c89 <Phys::physicalMemorySetup(unsigned int)>
c000990e:	e8 45 1b 00 00       	call   c000b458 <Virt::virtualMemorySetup()>
c0009913:	58                   	pop    eax
c0009914:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0009918:	53                   	push   ebx
c0009919:	e8 fa 26 00 00       	call   c000c018 <VAS::VAS()>
c000991e:	89 1d b4 32 02 c0    	mov    DWORD PTR ds:0xc00232b4,ebx
c0009924:	e8 f7 66 ff ff       	call   c0000020 <callGlobalConstructors>
c0009929:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c0009930:	e8 3c fe ff ff       	call   c0009771 <malloc>
c0009935:	89 04 24             	mov    DWORD PTR [esp],eax
c0009938:	89 c6                	mov    esi,eax
c000993a:	e8 99 f0 ff ff       	call   c00089d8 <Computer::Computer()>
c000993f:	6a 00                	push   0x0
c0009941:	89 35 c8 31 02 c0    	mov    DWORD PTR ds:0xc00231c8,esi
c0009947:	6a 00                	push   0x0
c0009949:	6a 00                	push   0x0
c000994b:	56                   	push   esi
c000994c:	e8 d7 f4 ff ff       	call   c0008e28 <Computer::open(int, int, void*)>
c0009951:	83 c4 14             	add    esp,0x14
c0009954:	53                   	push   ebx
c0009955:	e8 2e 1e 00 00       	call   c000b788 <VAS::~VAS()>
c000995a:	83 c4 3c             	add    esp,0x3c
c000995d:	5b                   	pop    ebx
c000995e:	5e                   	pop    esi
c000995f:	5f                   	pop    edi
c0009960:	5d                   	pop    ebp
c0009961:	c3                   	ret    
c0009962:	0f b6 96 d5 29 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdd62b]
c0009969:	83 e2 fe             	and    edx,0xfffffffe
c000996c:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009972:	0f 85 53 ff ff ff    	jne    c00098cb <kernel_main+0x94>
c0009978:	45                   	inc    ebp
c0009979:	e9 4d ff ff ff       	jmp    c00098cb <kernel_main+0x94>

c000997e <Phys::allocateDMA(unsigned long)>:
c000997e:	55                   	push   ebp
c000997f:	31 ed                	xor    ebp,ebp
c0009981:	57                   	push   edi
c0009982:	56                   	push   esi
c0009983:	53                   	push   ebx
c0009984:	31 db                	xor    ebx,ebx
c0009986:	83 ec 1c             	sub    esp,0x1c
c0009989:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000998d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009995:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000999b:	31 c0                	xor    eax,eax
c000999d:	c1 ef 0c             	shr    edi,0xc
c00099a0:	eb 19                	jmp    c00099bb <Phys::allocateDMA(unsigned long)+0x3d>
c00099a2:	85 c0                	test   eax,eax
c00099a4:	75 06                	jne    c00099ac <Phys::allocateDMA(unsigned long)+0x2e>
c00099a6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00099aa:	89 dd                	mov    ebp,ebx
c00099ac:	8d 70 01             	lea    esi,[eax+0x1]
c00099af:	39 f7                	cmp    edi,esi
c00099b1:	74 33                	je     c00099e6 <Phys::allocateDMA(unsigned long)+0x68>
c00099b3:	89 f0                	mov    eax,esi
c00099b5:	43                   	inc    ebx
c00099b6:	83 fb 0f             	cmp    ebx,0xf
c00099b9:	7f 11                	jg     c00099cc <Phys::allocateDMA(unsigned long)+0x4e>
c00099bb:	80 bb fc 31 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdce04],0x0
c00099c2:	74 de                	je     c00099a2 <Phys::allocateDMA(unsigned long)+0x24>
c00099c4:	31 c0                	xor    eax,eax
c00099c6:	43                   	inc    ebx
c00099c7:	83 fb 0f             	cmp    ebx,0xf
c00099ca:	7e ef                	jle    c00099bb <Phys::allocateDMA(unsigned long)+0x3d>
c00099cc:	83 ec 0c             	sub    esp,0xc
c00099cf:	68 c8 08 02 c0       	push   0xc00208c8
c00099d4:	e8 f8 87 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c00099d9:	83 c4 10             	add    esp,0x10
c00099dc:	31 c0                	xor    eax,eax
c00099de:	83 c4 1c             	add    esp,0x1c
c00099e1:	5b                   	pop    ebx
c00099e2:	5e                   	pop    esi
c00099e3:	5f                   	pop    edi
c00099e4:	5d                   	pop    ebp
c00099e5:	c3                   	ret    
c00099e6:	89 e9                	mov    ecx,ebp
c00099e8:	c1 f9 04             	sar    ecx,0x4
c00099eb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00099ef:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c00099f3:	89 ca                	mov    edx,ecx
c00099f5:	4a                   	dec    edx
c00099f6:	79 03                	jns    c00099fb <Phys::allocateDMA(unsigned long)+0x7d>
c00099f8:	8d 51 0e             	lea    edx,[ecx+0xe]
c00099fb:	c1 fa 04             	sar    edx,0x4
c00099fe:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0009a02:	74 08                	je     c0009a0c <Phys::allocateDMA(unsigned long)+0x8e>
c0009a04:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009a08:	31 c0                	xor    eax,eax
c0009a0a:	eb ba                	jmp    c00099c6 <Phys::allocateDMA(unsigned long)+0x48>
c0009a0c:	85 f6                	test   esi,esi
c0009a0e:	74 15                	je     c0009a25 <Phys::allocateDMA(unsigned long)+0xa7>
c0009a10:	8d 95 fc 31 02 c0    	lea    edx,[ebp-0x3ffdce04]
c0009a16:	8d 84 05 fd 31 02 c0 	lea    eax,[ebp+eax*1-0x3ffdce03]
c0009a1d:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009a20:	42                   	inc    edx
c0009a21:	39 d0                	cmp    eax,edx
c0009a23:	75 f8                	jne    c0009a1d <Phys::allocateDMA(unsigned long)+0x9f>
c0009a25:	01 3d f4 31 02 c0    	add    DWORD PTR ds:0xc00231f4,edi
c0009a2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a2f:	85 c0                	test   eax,eax
c0009a31:	74 17                	je     c0009a4a <Phys::allocateDMA(unsigned long)+0xcc>
c0009a33:	83 ec 0c             	sub    esp,0xc
c0009a36:	68 c8 08 02 c0       	push   0xc00208c8
c0009a3b:	e8 91 87 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c0009a40:	83 c4 10             	add    esp,0x10
c0009a43:	89 f0                	mov    eax,esi
c0009a45:	e9 6b ff ff ff       	jmp    c00099b5 <Phys::allocateDMA(unsigned long)+0x37>
c0009a4a:	c1 e5 0c             	shl    ebp,0xc
c0009a4d:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0009a53:	eb 89                	jmp    c00099de <Phys::allocateDMA(unsigned long)+0x60>

c0009a55 <Phys::freeDMA(unsigned long, unsigned long)>:
c0009a55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a59:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0009a5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a63:	c1 ea 0c             	shr    edx,0xc
c0009a66:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0009a6b:	29 15 f4 31 02 c0    	sub    DWORD PTR ds:0xc00231f4,edx
c0009a71:	c1 e8 0c             	shr    eax,0xc
c0009a74:	85 d2                	test   edx,edx
c0009a76:	74 0f                	je     c0009a87 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0009a78:	05 fc 31 02 c0       	add    eax,0xc00231fc
c0009a7d:	01 c2                	add    edx,eax
c0009a7f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009a82:	40                   	inc    eax
c0009a83:	39 d0                	cmp    eax,edx
c0009a85:	75 f8                	jne    c0009a7f <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0009a87:	c3                   	ret    

c0009a88 <Phys::setPageState(unsigned long, bool)>:
c0009a88:	56                   	push   esi
c0009a89:	ba 01 00 00 00       	mov    edx,0x1
c0009a8e:	53                   	push   ebx
c0009a8f:	8b 35 e4 2a 02 c0    	mov    esi,DWORD PTR ds:0xc0022ae4
c0009a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009a99:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009a9d:	89 c8                	mov    eax,ecx
c0009a9f:	83 e1 07             	and    ecx,0x7
c0009aa2:	c1 e8 03             	shr    eax,0x3
c0009aa5:	d3 e3                	shl    ebx,cl
c0009aa7:	01 c6                	add    esi,eax
c0009aa9:	d3 e2                	shl    edx,cl
c0009aab:	f7 d2                	not    edx
c0009aad:	20 16                	and    BYTE PTR [esi],dl
c0009aaf:	03 05 e4 2a 02 c0    	add    eax,DWORD PTR ds:0xc0022ae4
c0009ab5:	08 18                	or     BYTE PTR [eax],bl
c0009ab7:	5b                   	pop    ebx
c0009ab8:	5e                   	pop    esi
c0009ab9:	c3                   	ret    

c0009aba <Phys::getPageState(unsigned long)>:
c0009aba:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009abe:	8b 15 e4 2a 02 c0    	mov    edx,DWORD PTR ds:0xc0022ae4
c0009ac4:	89 c8                	mov    eax,ecx
c0009ac6:	83 e1 07             	and    ecx,0x7
c0009ac9:	c1 e8 03             	shr    eax,0x3
c0009acc:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0009ad0:	d3 f8                	sar    eax,cl
c0009ad2:	83 e0 01             	and    eax,0x1
c0009ad5:	c3                   	ret    

c0009ad6 <Phys::freePage(unsigned long)>:
c0009ad6:	53                   	push   ebx
c0009ad7:	83 ec 08             	sub    esp,0x8
c0009ada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ade:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0009ae4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0009aea:	76 3a                	jbe    c0009b26 <Phys::freePage(unsigned long)+0x50>
c0009aec:	c1 e8 0c             	shr    eax,0xc
c0009aef:	50                   	push   eax
c0009af0:	89 c3                	mov    ebx,eax
c0009af2:	e8 c3 ff ff ff       	call   c0009aba <Phys::getPageState(unsigned long)>
c0009af7:	5a                   	pop    edx
c0009af8:	84 c0                	test   al,al
c0009afa:	74 19                	je     c0009b15 <Phys::freePage(unsigned long)+0x3f>
c0009afc:	83 ec 08             	sub    esp,0x8
c0009aff:	ff 0d f4 31 02 c0    	dec    DWORD PTR ds:0xc00231f4
c0009b05:	6a 00                	push   0x0
c0009b07:	53                   	push   ebx
c0009b08:	e8 7b ff ff ff       	call   c0009a88 <Phys::setPageState(unsigned long, bool)>
c0009b0d:	83 c4 10             	add    esp,0x10
c0009b10:	83 c4 08             	add    esp,0x8
c0009b13:	5b                   	pop    ebx
c0009b14:	c3                   	ret    
c0009b15:	c7 44 24 10 6d 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc002096d
c0009b1d:	83 c4 08             	add    esp,0x8
c0009b20:	5b                   	pop    ebx
c0009b21:	e9 ab 86 00 00       	jmp    c00121d1 <Krnl::panic(char const*)>
c0009b26:	68 00 10 00 00       	push   0x1000
c0009b2b:	50                   	push   eax
c0009b2c:	e8 24 ff ff ff       	call   c0009a55 <Phys::freeDMA(unsigned long, unsigned long)>
c0009b31:	59                   	pop    ecx
c0009b32:	5b                   	pop    ebx
c0009b33:	83 c4 08             	add    esp,0x8
c0009b36:	5b                   	pop    ebx
c0009b37:	c3                   	ret    

c0009b38 <Phys::allocatePage()>:
c0009b38:	56                   	push   esi
c0009b39:	53                   	push   ebx
c0009b3a:	83 ec 14             	sub    esp,0x14
c0009b3d:	8b 35 e8 31 02 c0    	mov    esi,DWORD PTR ds:0xc00231e8
c0009b43:	89 f3                	mov    ebx,esi
c0009b45:	eb 0a                	jmp    c0009b51 <Phys::allocatePage()+0x19>
c0009b47:	89 1d e8 31 02 c0    	mov    DWORD PTR ds:0xc00231e8,ebx
c0009b4d:	39 de                	cmp    esi,ebx
c0009b4f:	74 24                	je     c0009b75 <Phys::allocatePage()+0x3d>
c0009b51:	53                   	push   ebx
c0009b52:	e8 63 ff ff ff       	call   c0009aba <Phys::getPageState(unsigned long)>
c0009b57:	5a                   	pop    edx
c0009b58:	84 c0                	test   al,al
c0009b5a:	74 5e                	je     c0009bba <Phys::allocatePage()+0x82>
c0009b5c:	43                   	inc    ebx
c0009b5d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009b63:	75 e2                	jne    c0009b47 <Phys::allocatePage()+0xf>
c0009b65:	31 db                	xor    ebx,ebx
c0009b67:	c7 05 e8 31 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00231e8,0x0
c0009b71:	39 de                	cmp    esi,ebx
c0009b73:	75 dc                	jne    c0009b51 <Phys::allocatePage()+0x19>
c0009b75:	83 ec 0c             	sub    esp,0xc
c0009b78:	80 35 0c 32 02 c0 01 	xor    BYTE PTR ds:0xc002320c,0x1
c0009b7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009b84:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009b87:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0009b8d:	e8 a0 26 00 00       	call   c000c232 <VAS::scanForEviction()>
c0009b92:	83 c4 10             	add    esp,0x10
c0009b95:	85 c0                	test   eax,eax
c0009b97:	75 3f                	jne    c0009bd8 <Phys::allocatePage()+0xa0>
c0009b99:	83 ec 0c             	sub    esp,0xc
c0009b9c:	68 f0 08 02 c0       	push   0xc00208f0
c0009ba1:	e8 2b 86 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c0009ba6:	83 c4 10             	add    esp,0x10
c0009ba9:	8b 1d e8 31 02 c0    	mov    ebx,DWORD PTR ds:0xc00231e8
c0009baf:	53                   	push   ebx
c0009bb0:	e8 05 ff ff ff       	call   c0009aba <Phys::getPageState(unsigned long)>
c0009bb5:	5a                   	pop    edx
c0009bb6:	84 c0                	test   al,al
c0009bb8:	75 a2                	jne    c0009b5c <Phys::allocatePage()+0x24>
c0009bba:	6a 01                	push   0x1
c0009bbc:	53                   	push   ebx
c0009bbd:	e8 c6 fe ff ff       	call   c0009a88 <Phys::setPageState(unsigned long, bool)>
c0009bc2:	a1 e8 31 02 c0       	mov    eax,ds:0xc00231e8
c0009bc7:	5a                   	pop    edx
c0009bc8:	ff 05 f4 31 02 c0    	inc    DWORD PTR ds:0xc00231f4
c0009bce:	c1 e0 0c             	shl    eax,0xc
c0009bd1:	59                   	pop    ecx
c0009bd2:	83 c4 14             	add    esp,0x14
c0009bd5:	5b                   	pop    ebx
c0009bd6:	5e                   	pop    esi
c0009bd7:	c3                   	ret    
c0009bd8:	83 ec 08             	sub    esp,0x8
c0009bdb:	89 c2                	mov    edx,eax
c0009bdd:	6a 01                	push   0x1
c0009bdf:	c1 ea 0c             	shr    edx,0xc
c0009be2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009be6:	52                   	push   edx
c0009be7:	e8 9c fe ff ff       	call   c0009a88 <Phys::setPageState(unsigned long, bool)>
c0009bec:	83 c4 10             	add    esp,0x10
c0009bef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bf3:	eb dd                	jmp    c0009bd2 <Phys::allocatePage()+0x9a>

c0009bf5 <Phys::allocateContiguousPages(int)>:
c0009bf5:	57                   	push   edi
c0009bf6:	56                   	push   esi
c0009bf7:	53                   	push   ebx
c0009bf8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009bfc:	fa                   	cli    
c0009bfd:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c0009c03:	31 db                	xor    ebx,ebx
c0009c05:	85 db                	test   ebx,ebx
c0009c07:	75 11                	jne    c0009c1a <Phys::allocateContiguousPages(int)+0x25>
c0009c09:	e8 2a ff ff ff       	call   c0009b38 <Phys::allocatePage()>
c0009c0e:	83 fe 01             	cmp    esi,0x1
c0009c11:	89 c7                	mov    edi,eax
c0009c13:	74 21                	je     c0009c36 <Phys::allocateContiguousPages(int)+0x41>
c0009c15:	bb 01 00 00 00       	mov    ebx,0x1
c0009c1a:	e8 19 ff ff ff       	call   c0009b38 <Phys::allocatePage()>
c0009c1f:	89 da                	mov    edx,ebx
c0009c21:	c1 e2 0c             	shl    edx,0xc
c0009c24:	01 fa                	add    edx,edi
c0009c26:	39 c2                	cmp    edx,eax
c0009c28:	74 20                	je     c0009c4a <Phys::allocateContiguousPages(int)+0x55>
c0009c2a:	bb 01 00 00 00       	mov    ebx,0x1
c0009c2f:	89 c7                	mov    edi,eax
c0009c31:	83 fe 01             	cmp    esi,0x1
c0009c34:	75 e4                	jne    c0009c1a <Phys::allocateContiguousPages(int)+0x25>
c0009c36:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c0009c3b:	48                   	dec    eax
c0009c3c:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c0009c41:	75 01                	jne    c0009c44 <Phys::allocateContiguousPages(int)+0x4f>
c0009c43:	fb                   	sti    
c0009c44:	89 f8                	mov    eax,edi
c0009c46:	5b                   	pop    ebx
c0009c47:	5e                   	pop    esi
c0009c48:	5f                   	pop    edi
c0009c49:	c3                   	ret    
c0009c4a:	43                   	inc    ebx
c0009c4b:	39 f3                	cmp    ebx,esi
c0009c4d:	75 b6                	jne    c0009c05 <Phys::allocateContiguousPages(int)+0x10>
c0009c4f:	eb e5                	jmp    c0009c36 <Phys::allocateContiguousPages(int)+0x41>

c0009c51 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0009c51:	56                   	push   esi
c0009c52:	53                   	push   ebx
c0009c53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009c57:	39 1d ec 31 02 c0    	cmp    DWORD PTR ds:0xc00231ec,ebx
c0009c5d:	73 06                	jae    c0009c65 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0009c5f:	89 1d ec 31 02 c0    	mov    DWORD PTR ds:0xc00231ec,ebx
c0009c65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c69:	c1 eb 0c             	shr    ebx,0xc
c0009c6c:	c1 e8 0c             	shr    eax,0xc
c0009c6f:	39 d8                	cmp    eax,ebx
c0009c71:	73 13                	jae    c0009c86 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0009c73:	6a 00                	push   0x0
c0009c75:	8d 70 01             	lea    esi,[eax+0x1]
c0009c78:	50                   	push   eax
c0009c79:	e8 0a fe ff ff       	call   c0009a88 <Phys::setPageState(unsigned long, bool)>
c0009c7e:	5a                   	pop    edx
c0009c7f:	89 f0                	mov    eax,esi
c0009c81:	59                   	pop    ecx
c0009c82:	39 f3                	cmp    ebx,esi
c0009c84:	75 ed                	jne    c0009c73 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0009c86:	5b                   	pop    ebx
c0009c87:	5e                   	pop    esi
c0009c88:	c3                   	ret    

c0009c89 <Phys::physicalMemorySetup(unsigned int)>:
c0009c89:	55                   	push   ebp
c0009c8a:	57                   	push   edi
c0009c8b:	56                   	push   esi
c0009c8c:	53                   	push   ebx
c0009c8d:	31 db                	xor    ebx,ebx
c0009c8f:	83 ec 40             	sub    esp,0x40
c0009c92:	6a 10                	push   0x10
c0009c94:	6a 00                	push   0x0
c0009c96:	68 fc 31 02 c0       	push   0xc00231fc
c0009c9b:	e8 08 68 ff ff       	call   c00004a8 <memset>
c0009ca0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009ca4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ca9:	05 00 10 00 00       	add    eax,0x1000
c0009cae:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009cb2:	5a                   	pop    edx
c0009cb3:	59                   	pop    ecx
c0009cb4:	50                   	push   eax
c0009cb5:	68 83 09 02 c0       	push   0xc0020983
c0009cba:	e8 3c 28 00 00       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0009cbf:	83 c4 10             	add    esp,0x10
c0009cc2:	83 ec 08             	sub    esp,0x8
c0009cc5:	6a 01                	push   0x1
c0009cc7:	53                   	push   ebx
c0009cc8:	43                   	inc    ebx
c0009cc9:	e8 ba fd ff ff       	call   c0009a88 <Phys::setPageState(unsigned long, bool)>
c0009cce:	83 c4 10             	add    esp,0x10
c0009cd1:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009cd7:	75 e9                	jne    c0009cc2 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0009cd9:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0009ce0:	66 85 c0             	test   ax,ax
c0009ce3:	0f 84 8e 01 00 00    	je     c0009e77 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c0009ce9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ced:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009cf5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009cf9:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0009cfe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009d02:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0a:	eb 15                	jmp    c0009d21 <Phys::physicalMemorySetup(unsigned int)+0x98>
c0009d0c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009d10:	83 c3 18             	add    ebx,0x18
c0009d13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009d17:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009d1b:	0f 84 66 01 00 00    	je     c0009e87 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c0009d21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009d24:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0009d27:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0009d2a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d2e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d32:	8b 33                	mov    esi,DWORD PTR [ebx]
c0009d34:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0009d37:	01 f0                	add    eax,esi
c0009d39:	55                   	push   ebp
c0009d3a:	11 fa                	adc    edx,edi
c0009d3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009d40:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009d44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009d48:	56                   	push   esi
c0009d49:	68 20 09 02 c0       	push   0xc0020920
c0009d4e:	e8 a8 27 00 00       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0009d53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d57:	83 c4 10             	add    esp,0x10
c0009d5a:	09 f8                	or     eax,edi
c0009d5c:	0f 85 25 01 00 00    	jne    c0009e87 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c0009d62:	4d                   	dec    ebp
c0009d63:	75 a7                	jne    c0009d0c <Phys::physicalMemorySetup(unsigned int)+0x83>
c0009d65:	ba 00 00 08 00       	mov    edx,0x80000
c0009d6a:	89 c1                	mov    ecx,eax
c0009d6c:	39 f2                	cmp    edx,esi
c0009d6e:	19 f9                	sbb    ecx,edi
c0009d70:	0f 82 a7 00 00 00    	jb     c0009e1d <Phys::physicalMemorySetup(unsigned int)+0x194>
c0009d76:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0009d7a:	89 c1                	mov    ecx,eax
c0009d7c:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0009d80:	0f 83 97 00 00 00    	jae    c0009e1d <Phys::physicalMemorySetup(unsigned int)+0x194>
c0009d86:	ba 00 00 0a 00       	mov    edx,0xa0000
c0009d8b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d8f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0009d93:	39 fa                	cmp    edx,edi
c0009d95:	19 e8                	sbb    eax,ebp
c0009d97:	0f 82 9a 01 00 00    	jb     c0009f37 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0009d9d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009da1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0009da5:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0009dab:	ba ff 1f 00 00       	mov    edx,0x1fff
c0009db0:	83 d5 ff             	adc    ebp,0xffffffff
c0009db3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0009db7:	31 c0                	xor    eax,eax
c0009db9:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0009dbd:	39 fa                	cmp    edx,edi
c0009dbf:	89 c1                	mov    ecx,eax
c0009dc1:	19 e9                	sbb    ecx,ebp
c0009dc3:	0f 83 43 ff ff ff    	jae    c0009d0c <Phys::physicalMemorySetup(unsigned int)+0x83>
c0009dc9:	be 00 00 08 00       	mov    esi,0x80000
c0009dce:	51                   	push   ecx
c0009dcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0009dd3:	57                   	push   edi
c0009dd4:	56                   	push   esi
c0009dd5:	68 44 09 02 c0       	push   0xc0020944
c0009dda:	e8 1c 27 00 00       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0009ddf:	5d                   	pop    ebp
c0009de0:	58                   	pop    eax
c0009de1:	57                   	push   edi
c0009de2:	56                   	push   esi
c0009de3:	e8 69 fe ff ff       	call   c0009c51 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0009de8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009dec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009df0:	83 c4 0c             	add    esp,0xc
c0009df3:	0f ac d0 0c          	shrd   eax,edx,0xc
c0009df7:	03 05 f8 31 02 c0    	add    eax,DWORD PTR ds:0xc00231f8
c0009dfd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009e04:	a3 f8 31 02 c0       	mov    ds:0xc00231f8,eax
c0009e09:	52                   	push   edx
c0009e0a:	50                   	push   eax
c0009e0b:	68 a9 09 02 c0       	push   0xc00209a9
c0009e10:	e8 e6 26 00 00       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	e9 ef fe ff ff       	jmp    c0009d0c <Phys::physicalMemorySetup(unsigned int)+0x83>
c0009e1d:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0009e21:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009e25:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009e29:	39 ea                	cmp    edx,ebp
c0009e2b:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0009e2f:	0f 82 d7 fe ff ff    	jb     c0009d0c <Phys::physicalMemorySetup(unsigned int)+0x83>
c0009e35:	ba ff 1f 00 00       	mov    edx,0x1fff
c0009e3a:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0009e3e:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0009e42:	0f 83 c4 fe ff ff    	jae    c0009d0c <Phys::physicalMemorySetup(unsigned int)+0x83>
c0009e48:	39 ee                	cmp    esi,ebp
c0009e4a:	89 f8                	mov    eax,edi
c0009e4c:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0009e50:	0f 83 78 ff ff ff    	jae    c0009dce <Phys::physicalMemorySetup(unsigned int)+0x145>
c0009e56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009e5e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009e62:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009e66:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0009e6a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e6e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009e72:	e9 57 ff ff ff       	jmp    c0009dce <Phys::physicalMemorySetup(unsigned int)+0x145>
c0009e77:	83 ec 0c             	sub    esp,0xc
c0009e7a:	68 9b 09 02 c0       	push   0xc002099b
c0009e7f:	e8 4d 83 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c0009e84:	83 c4 10             	add    esp,0x10
c0009e87:	83 ec 08             	sub    esp,0x8
c0009e8a:	bb 60 00 00 00       	mov    ebx,0x60
c0009e8f:	6a 00                	push   0x0
c0009e91:	6a 06                	push   0x6
c0009e93:	e8 f0 fb ff ff       	call   c0009a88 <Phys::setPageState(unsigned long, bool)>
c0009e98:	58                   	pop    eax
c0009e99:	5a                   	pop    edx
c0009e9a:	6a 00                	push   0x0
c0009e9c:	6a 07                	push   0x7
c0009e9e:	e8 e5 fb ff ff       	call   c0009a88 <Phys::setPageState(unsigned long, bool)>
c0009ea3:	83 05 f8 31 02 c0 02 	add    DWORD PTR ds:0xc00231f8,0x2
c0009eaa:	83 c4 10             	add    esp,0x10
c0009ead:	83 ec 08             	sub    esp,0x8
c0009eb0:	6a 00                	push   0x0
c0009eb2:	53                   	push   ebx
c0009eb3:	43                   	inc    ebx
c0009eb4:	e8 cf fb ff ff       	call   c0009a88 <Phys::setPageState(unsigned long, bool)>
c0009eb9:	83 c4 10             	add    esp,0x10
c0009ebc:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0009ec2:	75 e9                	jne    c0009ead <Phys::physicalMemorySetup(unsigned int)+0x224>
c0009ec4:	a1 f8 31 02 c0       	mov    eax,ds:0xc00231f8
c0009ec9:	bb 40 01 00 00       	mov    ebx,0x140
c0009ece:	83 c0 20             	add    eax,0x20
c0009ed1:	a3 f8 31 02 c0       	mov    ds:0xc00231f8,eax
c0009ed6:	eb 22                	jmp    c0009efa <Phys::physicalMemorySetup(unsigned int)+0x271>
c0009ed8:	83 ec 08             	sub    esp,0x8
c0009edb:	6a 00                	push   0x0
c0009edd:	53                   	push   ebx
c0009ede:	43                   	inc    ebx
c0009edf:	e8 a4 fb ff ff       	call   c0009a88 <Phys::setPageState(unsigned long, bool)>
c0009ee4:	a1 f8 31 02 c0       	mov    eax,ds:0xc00231f8
c0009ee9:	83 c4 10             	add    esp,0x10
c0009eec:	40                   	inc    eax
c0009eed:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0009ef3:	a3 f8 31 02 c0       	mov    ds:0xc00231f8,eax
c0009ef8:	74 07                	je     c0009f01 <Phys::physicalMemorySetup(unsigned int)+0x278>
c0009efa:	3d ff 03 00 00       	cmp    eax,0x3ff
c0009eff:	7e d7                	jle    c0009ed8 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c0009f01:	bb d0 01 00 00       	mov    ebx,0x1d0
c0009f06:	3d ff 07 00 00       	cmp    eax,0x7ff
c0009f0b:	7f 22                	jg     c0009f2f <Phys::physicalMemorySetup(unsigned int)+0x2a6>
c0009f0d:	83 ec 08             	sub    esp,0x8
c0009f10:	6a 00                	push   0x0
c0009f12:	53                   	push   ebx
c0009f13:	43                   	inc    ebx
c0009f14:	e8 6f fb ff ff       	call   c0009a88 <Phys::setPageState(unsigned long, bool)>
c0009f19:	a1 f8 31 02 c0       	mov    eax,ds:0xc00231f8
c0009f1e:	83 c4 10             	add    esp,0x10
c0009f21:	40                   	inc    eax
c0009f22:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0009f28:	a3 f8 31 02 c0       	mov    ds:0xc00231f8,eax
c0009f2d:	75 d7                	jne    c0009f06 <Phys::physicalMemorySetup(unsigned int)+0x27d>
c0009f2f:	83 c4 3c             	add    esp,0x3c
c0009f32:	5b                   	pop    ebx
c0009f33:	5e                   	pop    esi
c0009f34:	5f                   	pop    edi
c0009f35:	5d                   	pop    ebp
c0009f36:	c3                   	ret    
c0009f37:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0009f3f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009f47:	e9 51 fe ff ff       	jmp    c0009d9d <Phys::physicalMemorySetup(unsigned int)+0x114>

c0009f4c <Pipe::isAtty()>:
c0009f4c:	31 c0                	xor    eax,eax
c0009f4e:	c3                   	ret    
c0009f4f:	90                   	nop

c0009f50 <Pipe::~Pipe()>:
c0009f50:	83 ec 0c             	sub    esp,0xc
c0009f53:	ba 08 0a 02 c0       	mov    edx,0xc0020a08
c0009f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f5c:	89 10                	mov    DWORD PTR [eax],edx
c0009f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f62:	83 ec 0c             	sub    esp,0xc
c0009f65:	50                   	push   eax
c0009f66:	e8 cd 10 00 00       	call   c000b038 <UnixFile::~UnixFile()>
c0009f6b:	83 c4 10             	add    esp,0x10
c0009f6e:	90                   	nop
c0009f6f:	83 c4 0c             	add    esp,0xc
c0009f72:	c3                   	ret    
c0009f73:	90                   	nop

c0009f74 <Pipe::~Pipe()>:
c0009f74:	83 ec 0c             	sub    esp,0xc
c0009f77:	83 ec 0c             	sub    esp,0xc
c0009f7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f7e:	e8 cd ff ff ff       	call   c0009f50 <Pipe::~Pipe()>
c0009f83:	83 c4 10             	add    esp,0x10
c0009f86:	83 ec 08             	sub    esp,0x8
c0009f89:	6a 20                	push   0x20
c0009f8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f8f:	e8 86 24 00 00       	call   c000c41a <operator delete(void*, unsigned long)>
c0009f94:	83 c4 10             	add    esp,0x10
c0009f97:	83 c4 0c             	add    esp,0xc
c0009f9a:	c3                   	ret    
c0009f9b:	90                   	nop

c0009f9c <Pipe::write(unsigned long long, void*, int*)>:
c0009f9c:	55                   	push   ebp
c0009f9d:	57                   	push   edi
c0009f9e:	56                   	push   esi
c0009f9f:	53                   	push   ebx
c0009fa0:	83 ec 1c             	sub    esp,0x1c
c0009fa3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009fa7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009fab:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0009fae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009fb2:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fb5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009fb9:	89 d8                	mov    eax,ebx
c0009fbb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0009fbe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009fc2:	89 d6                	mov    esi,edx
c0009fc4:	89 d7                	mov    edi,edx
c0009fc6:	c1 ff 1f             	sar    edi,0x1f
c0009fc9:	03 34 24             	add    esi,DWORD PTR [esp]
c0009fcc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0009fd0:	c1 f8 1f             	sar    eax,0x1f
c0009fd3:	39 f3                	cmp    ebx,esi
c0009fd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009fd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009fdd:	19 f8                	sbb    eax,edi
c0009fdf:	b8 01 00 00 00       	mov    eax,0x1
c0009fe4:	72 6e                	jb     c000a054 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0009fe6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009fe9:	01 d0                	add    eax,edx
c0009feb:	99                   	cdq    
c0009fec:	f7 fb                	idiv   ebx
c0009fee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ff2:	29 d3                	sub    ebx,edx
c0009ff4:	89 d7                	mov    edi,edx
c0009ff6:	89 de                	mov    esi,ebx
c0009ff8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009ffb:	c1 fb 1f             	sar    ebx,0x1f
c0009ffe:	39 f2                	cmp    edx,esi
c000a000:	19 d8                	sbb    eax,ebx
c000a002:	b8 00 00 00 00       	mov    eax,0x0
c000a007:	72 04                	jb     c000a00d <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a009:	89 d0                	mov    eax,edx
c000a00b:	29 f0                	sub    eax,esi
c000a00d:	89 d3                	mov    ebx,edx
c000a00f:	29 c3                	sub    ebx,eax
c000a011:	74 0b                	je     c000a01e <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a013:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a016:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a01a:	89 d9                	mov    ecx,ebx
c000a01c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a01e:	85 c0                	test   eax,eax
c000a020:	74 0d                	je     c000a02f <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a022:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a026:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a029:	89 de                	mov    esi,ebx
c000a02b:	89 c1                	mov    ecx,eax
c000a02d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a02f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a032:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a037:	75 10                	jne    c000a049 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a039:	83 ec 0c             	sub    esp,0xc
c000a03c:	68 c5 09 02 c0       	push   0xc00209c5
c000a041:	e8 8b 81 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c000a046:	83 c4 10             	add    esp,0x10
c000a049:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a04d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a050:	89 08                	mov    DWORD PTR [eax],ecx
c000a052:	31 c0                	xor    eax,eax
c000a054:	83 c4 1c             	add    esp,0x1c
c000a057:	5b                   	pop    ebx
c000a058:	5e                   	pop    esi
c000a059:	5f                   	pop    edi
c000a05a:	5d                   	pop    ebp
c000a05b:	c3                   	ret    

c000a05c <Pipe::read(unsigned long long, void*, int*)>:
c000a05c:	55                   	push   ebp
c000a05d:	57                   	push   edi
c000a05e:	56                   	push   esi
c000a05f:	53                   	push   ebx
c000a060:	83 ec 1c             	sub    esp,0x1c
c000a063:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a067:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a06b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a06f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a072:	89 c8                	mov    eax,ecx
c000a074:	99                   	cdq    
c000a075:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a079:	74 24                	je     c000a09f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a07b:	39 f9                	cmp    ecx,edi
c000a07d:	89 d1                	mov    ecx,edx
c000a07f:	19 f1                	sbb    ecx,esi
c000a081:	73 1c                	jae    c000a09f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a083:	fa                   	cli    
c000a084:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c000a08a:	e8 c5 b5 00 00       	call   c0015654 <schedule()>
c000a08f:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c000a094:	48                   	dec    eax
c000a095:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c000a09a:	75 d3                	jne    c000a06f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a09c:	fb                   	sti    
c000a09d:	eb d0                	jmp    c000a06f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a09f:	39 f8                	cmp    eax,edi
c000a0a1:	89 d1                	mov    ecx,edx
c000a0a3:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a0a6:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a0aa:	19 f1                	sbb    ecx,esi
c000a0ac:	73 07                	jae    c000a0b5 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a0ae:	89 04 24             	mov    DWORD PTR [esp],eax
c000a0b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a0b5:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a0b8:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a0bb:	29 f7                	sub    edi,esi
c000a0bd:	89 f8                	mov    eax,edi
c000a0bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a0c3:	99                   	cdq    
c000a0c4:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a0c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a0cb:	19 d0                	sbb    eax,edx
c000a0cd:	73 07                	jae    c000a0d6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a0cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a0d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a0d6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a0d9:	89 ea                	mov    edx,ebp
c000a0db:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a0df:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a0e4:	74 0d                	je     c000a0f3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a0e6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a0e9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a0ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a0f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a0f3:	85 d2                	test   edx,edx
c000a0f5:	74 11                	je     c000a108 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a0f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a0fb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a0fe:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a102:	89 d1                	mov    ecx,edx
c000a104:	89 c7                	mov    edi,eax
c000a106:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a108:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a10b:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a10e:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a111:	99                   	cdq    
c000a112:	89 f7                	mov    edi,esi
c000a114:	03 04 24             	add    eax,DWORD PTR [esp]
c000a117:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a11b:	c1 ff 1f             	sar    edi,0x1f
c000a11e:	57                   	push   edi
c000a11f:	56                   	push   esi
c000a120:	52                   	push   edx
c000a121:	50                   	push   eax
c000a122:	e8 c9 52 01 00       	call   c001f3f0 <__umoddi3>
c000a127:	83 c4 10             	add    esp,0x10
c000a12a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a12d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a132:	75 10                	jne    c000a144 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a134:	83 ec 0c             	sub    esp,0xc
c000a137:	68 e2 09 02 c0       	push   0xc00209e2
c000a13c:	e8 90 80 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c000a141:	83 c4 10             	add    esp,0x10
c000a144:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a148:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a14b:	89 10                	mov    DWORD PTR [eax],edx
c000a14d:	83 c4 1c             	add    esp,0x1c
c000a150:	31 c0                	xor    eax,eax
c000a152:	5b                   	pop    ebx
c000a153:	5e                   	pop    esi
c000a154:	5f                   	pop    edi
c000a155:	5d                   	pop    ebp
c000a156:	c3                   	ret    
c000a157:	90                   	nop

c000a158 <Pipe::Pipe(int)>:
c000a158:	83 ec 0c             	sub    esp,0xc
c000a15b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a15f:	83 ec 08             	sub    esp,0x8
c000a162:	6a 00                	push   0x0
c000a164:	50                   	push   eax
c000a165:	e8 ec 0c 00 00       	call   c000ae56 <UnixFile::UnixFile(int)>
c000a16a:	83 c4 10             	add    esp,0x10
c000a16d:	ba 08 0a 02 c0       	mov    edx,0xc0020a08
c000a172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a176:	89 10                	mov    DWORD PTR [eax],edx
c000a178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a17c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a180:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a187:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a18e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a192:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a199:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a19d:	83 ec 0c             	sub    esp,0xc
c000a1a0:	50                   	push   eax
c000a1a1:	e8 cb f5 ff ff       	call   c0009771 <malloc>
c000a1a6:	83 c4 10             	add    esp,0x10
c000a1a9:	89 c2                	mov    edx,eax
c000a1ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1af:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a1b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1b6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a1ba:	90                   	nop
c000a1bb:	83 c4 0c             	add    esp,0xc
c000a1be:	c3                   	ret    
c000a1bf:	90                   	nop

c000a1c0 <VgaText::isAtty()>:
c000a1c0:	b0 01                	mov    al,0x1
c000a1c2:	c3                   	ret    
c000a1c3:	90                   	nop

c000a1c4 <VgaText::~VgaText()>:
c000a1c4:	83 ec 0c             	sub    esp,0xc
c000a1c7:	ba 90 0a 02 c0       	mov    edx,0xc0020a90
c000a1cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1d0:	89 10                	mov    DWORD PTR [eax],edx
c000a1d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1d6:	83 ec 0c             	sub    esp,0xc
c000a1d9:	50                   	push   eax
c000a1da:	e8 59 0e 00 00       	call   c000b038 <UnixFile::~UnixFile()>
c000a1df:	83 c4 10             	add    esp,0x10
c000a1e2:	90                   	nop
c000a1e3:	83 c4 0c             	add    esp,0xc
c000a1e6:	c3                   	ret    
c000a1e7:	90                   	nop

c000a1e8 <VgaText::~VgaText()>:
c000a1e8:	83 ec 0c             	sub    esp,0xc
c000a1eb:	83 ec 0c             	sub    esp,0xc
c000a1ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1f2:	e8 cd ff ff ff       	call   c000a1c4 <VgaText::~VgaText()>
c000a1f7:	83 c4 10             	add    esp,0x10
c000a1fa:	83 ec 08             	sub    esp,0x8
c000a1fd:	68 34 01 00 00       	push   0x134
c000a202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a206:	e8 0f 22 00 00       	call   c000c41a <operator delete(void*, unsigned long)>
c000a20b:	83 c4 10             	add    esp,0x10
c000a20e:	83 c4 0c             	add    esp,0xc
c000a211:	c3                   	ret    

c000a212 <VgaText::read(unsigned long long, void*, int*)>:
c000a212:	83 ec 10             	sub    esp,0x10
c000a215:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a219:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a21d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a221:	e8 eb 44 00 00       	call   c000e711 <readKeyboard(VgaText*, char*, unsigned long)>
c000a226:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a22a:	89 02                	mov    DWORD PTR [edx],eax
c000a22c:	31 c0                	xor    eax,eax
c000a22e:	83 c4 1c             	add    esp,0x1c
c000a231:	c3                   	ret    

c000a232 <setTerminalScrollLock(bool)>:
c000a232:	c3                   	ret    

c000a233 <doTerminalCycle()>:
c000a233:	c3                   	ret    

c000a234 <addToTerminalCycle(VgaText*)>:
c000a234:	c3                   	ret    

c000a235 <scrollTerminalScrollLock(int)>:
c000a235:	c3                   	ret    

c000a236 <VgaText::updateTitle()>:
c000a236:	c3                   	ret    
c000a237:	90                   	nop

c000a238 <VgaText::load()>:
c000a238:	c3                   	ret    
c000a239:	90                   	nop

c000a23a <VgaText::updateCursor()>:
c000a23a:	83 ec 14             	sub    esp,0x14
c000a23d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a241:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000a244:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000a247:	e8 14 ee 00 00       	call   c0019060 <Hal::consoleCursorUpdate(int, int)>
c000a24c:	83 c4 1c             	add    esp,0x1c
c000a24f:	c3                   	ret    

c000a250 <VgaText::doANSI_SGR(int)>:
c000a250:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a258:	85 d2                	test   edx,edx
c000a25a:	75 0b                	jne    c000a267 <VgaText::doANSI_SGR(int)+0x17>
c000a25c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a25f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a262:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a265:	eb 59                	jmp    c000a2c0 <VgaText::doANSI_SGR(int)+0x70>
c000a267:	83 fa 07             	cmp    edx,0x7
c000a26a:	75 0b                	jne    c000a277 <VgaText::doANSI_SGR(int)+0x27>
c000a26c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a26f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a272:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a275:	eb 49                	jmp    c000a2c0 <VgaText::doANSI_SGR(int)+0x70>
c000a277:	83 fa 1b             	cmp    edx,0x1b
c000a27a:	74 e0                	je     c000a25c <VgaText::doANSI_SGR(int)+0xc>
c000a27c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a27f:	83 f9 07             	cmp    ecx,0x7
c000a282:	77 09                	ja     c000a28d <VgaText::doANSI_SGR(int)+0x3d>
c000a284:	8b 14 8d 20 2b 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd4e0]
c000a28b:	eb 20                	jmp    c000a2ad <VgaText::doANSI_SGR(int)+0x5d>
c000a28d:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a290:	83 f9 07             	cmp    ecx,0x7
c000a293:	77 09                	ja     c000a29e <VgaText::doANSI_SGR(int)+0x4e>
c000a295:	8b 14 8d 20 2b 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd4e0]
c000a29c:	eb 22                	jmp    c000a2c0 <VgaText::doANSI_SGR(int)+0x70>
c000a29e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a2a1:	83 f9 07             	cmp    ecx,0x7
c000a2a4:	77 0b                	ja     c000a2b1 <VgaText::doANSI_SGR(int)+0x61>
c000a2a6:	8b 14 95 d8 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd628]
c000a2ad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a2b0:	c3                   	ret    
c000a2b1:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a2b4:	83 f9 07             	cmp    ecx,0x7
c000a2b7:	77 0a                	ja     c000a2c3 <VgaText::doANSI_SGR(int)+0x73>
c000a2b9:	8b 14 95 b0 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd650]
c000a2c0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a2c3:	c3                   	ret    

c000a2c4 <VgaText::setDefaultBgColour(VgaColour)>:
c000a2c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a2c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a2cc:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a2cf:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a2d2:	c3                   	ret    
c000a2d3:	90                   	nop

c000a2d4 <VgaText::setDefaultFgColour(VgaColour)>:
c000a2d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a2d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a2dc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a2df:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a2e2:	c3                   	ret    
c000a2e3:	90                   	nop

c000a2e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a2e4:	53                   	push   ebx
c000a2e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a2e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a2ed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a2f1:	51                   	push   ecx
c000a2f2:	e8 cd ff ff ff       	call   c000a2c4 <VgaText::setDefaultBgColour(VgaColour)>
c000a2f7:	58                   	pop    eax
c000a2f8:	5a                   	pop    edx
c000a2f9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a2fd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a301:	5b                   	pop    ebx
c000a302:	eb d0                	jmp    c000a2d4 <VgaText::setDefaultFgColour(VgaColour)>

c000a304 <VgaText::setTitleTextColour(VgaColour)>:
c000a304:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a308:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a30c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a30f:	c3                   	ret    

c000a310 <VgaText::setTitleColour(VgaColour)>:
c000a310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a314:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a318:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a31b:	c3                   	ret    

c000a31c <VgaText::setTitle(char*)>:
c000a31c:	c3                   	ret    
c000a31d:	90                   	nop

c000a31e <VgaText::combineColours(unsigned char, unsigned char)>:
c000a31e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a322:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a327:	83 e0 0f             	and    eax,0xf
c000a32a:	c1 e2 04             	shl    edx,0x4
c000a32d:	09 d0                	or     eax,edx
c000a32f:	c3                   	ret    

c000a330 <VgaText::scrollScreen()>:
c000a330:	55                   	push   ebp
c000a331:	b9 01 00 00 00       	mov    ecx,0x1
c000a336:	57                   	push   edi
c000a337:	56                   	push   esi
c000a338:	53                   	push   ebx
c000a339:	83 ec 0c             	sub    esp,0xc
c000a33c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a340:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a346:	31 ff                	xor    edi,edi
c000a348:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a34b:	83 f9 18             	cmp    ecx,0x18
c000a34e:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000a351:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000a358:	75 27                	jne    c000a381 <VgaText::scrollScreen()+0x51>
c000a35a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000a35d:	01 f5                	add    ebp,esi
c000a35f:	f7 c7 01 00 00 00    	test   edi,0x1
c000a365:	74 16                	je     c000a37d <VgaText::scrollScreen()+0x4d>
c000a367:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a36b:	50                   	push   eax
c000a36c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a370:	50                   	push   eax
c000a371:	e8 a8 ff ff ff       	call   c000a31e <VgaText::combineColours(unsigned char, unsigned char)>
c000a376:	5a                   	pop    edx
c000a377:	5a                   	pop    edx
c000a378:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000a37b:	eb 04                	jmp    c000a381 <VgaText::scrollScreen()+0x51>
c000a37d:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000a381:	47                   	inc    edi
c000a382:	46                   	inc    esi
c000a383:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000a389:	75 bd                	jne    c000a348 <VgaText::scrollScreen()+0x18>
c000a38b:	41                   	inc    ecx
c000a38c:	83 f9 19             	cmp    ecx,0x19
c000a38f:	75 af                	jne    c000a340 <VgaText::scrollScreen()+0x10>
c000a391:	39 1d 14 32 02 c0    	cmp    DWORD PTR ds:0xc0023214,ebx
c000a397:	75 1f                	jne    c000a3b8 <VgaText::scrollScreen()+0x88>
c000a399:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a39d:	74 05                	je     c000a3a4 <VgaText::scrollScreen()+0x74>
c000a39f:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000a3a2:	eb 14                	jmp    c000a3b8 <VgaText::scrollScreen()+0x88>
c000a3a4:	50                   	push   eax
c000a3a5:	50                   	push   eax
c000a3a6:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a3aa:	50                   	push   eax
c000a3ab:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a3af:	50                   	push   eax
c000a3b0:	e8 3f eb 00 00       	call   c0018ef4 <Hal::consoleScroll(int, int)>
c000a3b5:	83 c4 10             	add    esp,0x10
c000a3b8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a3bc:	83 c4 0c             	add    esp,0xc
c000a3bf:	5b                   	pop    ebx
c000a3c0:	5e                   	pop    esi
c000a3c1:	5f                   	pop    edi
c000a3c2:	5d                   	pop    ebp
c000a3c3:	e9 72 fe ff ff       	jmp    c000a23a <VgaText::updateCursor()>

c000a3c8 <VgaText::combineCharAndColour(char, unsigned char)>:
c000a3c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000a3cd:	c1 e0 08             	shl    eax,0x8
c000a3d0:	89 c2                	mov    edx,eax
c000a3d2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000a3d7:	09 d0                	or     eax,edx
c000a3d9:	c3                   	ret    

c000a3da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000a3da:	55                   	push   ebp
c000a3db:	57                   	push   edi
c000a3dc:	56                   	push   esi
c000a3dd:	53                   	push   ebx
c000a3de:	83 ec 1c             	sub    esp,0x1c
c000a3e1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a3e5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a3e9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a3ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a3f1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000a3f5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000a3f9:	0f b6 c3             	movzx  eax,bl
c000a3fc:	50                   	push   eax
c000a3fd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c000a402:	50                   	push   eax
c000a403:	e8 16 ff ff ff       	call   c000a31e <VgaText::combineColours(unsigned char, unsigned char)>
c000a408:	5a                   	pop    edx
c000a409:	0f b6 c0             	movzx  eax,al
c000a40c:	59                   	pop    ecx
c000a40d:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c000a412:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a416:	50                   	push   eax
c000a417:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a41b:	e8 a8 ff ff ff       	call   c000a3c8 <VgaText::combineCharAndColour(char, unsigned char)>
c000a420:	5a                   	pop    edx
c000a421:	66 6b d7 50          	imul   dx,di,0x50
c000a425:	59                   	pop    ecx
c000a426:	01 f2                	add    edx,esi
c000a428:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000a42b:	0f b7 d2             	movzx  edx,dx
c000a42e:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000a432:	39 2d 14 32 02 c0    	cmp    DWORD PTR ds:0xc0023214,ebp
c000a438:	75 28                	jne    c000a462 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c000a43a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a43e:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000a442:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000a446:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c000a44a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a44e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a452:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a456:	83 c4 1c             	add    esp,0x1c
c000a459:	5b                   	pop    ebx
c000a45a:	5e                   	pop    esi
c000a45b:	5f                   	pop    edi
c000a45c:	5d                   	pop    ebp
c000a45d:	e9 9a eb 00 00       	jmp    c0018ffc <Hal::consoleWriteCharacter(char, int, int, int, int)>
c000a462:	83 c4 1c             	add    esp,0x1c
c000a465:	5b                   	pop    ebx
c000a466:	5e                   	pop    esi
c000a467:	5f                   	pop    edi
c000a468:	5d                   	pop    ebp
c000a469:	c3                   	ret    

c000a46a <VgaText::getCursorX()>:
c000a46a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a46e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000a471:	c3                   	ret    

c000a472 <VgaText::getCursorY()>:
c000a472:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a476:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000a479:	c3                   	ret    

c000a47a <VgaText::setCursor(int, int)>:
c000a47a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a47e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a482:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000a485:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a489:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a48c:	e9 a9 fd ff ff       	jmp    c000a23a <VgaText::updateCursor()>

c000a491 <setActiveTerminal(VgaText*)>:
c000a491:	53                   	push   ebx
c000a492:	83 ec 08             	sub    esp,0x8
c000a495:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a499:	85 db                	test   ebx,ebx
c000a49b:	75 11                	jne    c000a4ae <setActiveTerminal(VgaText*)+0x1d>
c000a49d:	c7 44 24 10 1c 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020a1c
c000a4a5:	83 c4 08             	add    esp,0x8
c000a4a8:	5b                   	pop    ebx
c000a4a9:	e9 23 7d 00 00       	jmp    c00121d1 <Krnl::panic(char const*)>
c000a4ae:	a1 14 32 02 c0       	mov    eax,ds:0xc0023214
c000a4b3:	85 c0                	test   eax,eax
c000a4b5:	74 0c                	je     c000a4c3 <setActiveTerminal(VgaText*)+0x32>
c000a4b7:	83 ec 0c             	sub    esp,0xc
c000a4ba:	50                   	push   eax
c000a4bb:	e8 7a fd ff ff       	call   c000a23a <VgaText::updateCursor()>
c000a4c0:	83 c4 10             	add    esp,0x10
c000a4c3:	89 1d 14 32 02 c0    	mov    DWORD PTR ds:0xc0023214,ebx
c000a4c9:	50                   	push   eax
c000a4ca:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a4cd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a4d0:	53                   	push   ebx
c000a4d1:	e8 a4 ff ff ff       	call   c000a47a <VgaText::setCursor(int, int)>
c000a4d6:	83 c4 18             	add    esp,0x18
c000a4d9:	5b                   	pop    ebx
c000a4da:	c3                   	ret    
c000a4db:	90                   	nop

c000a4dc <VgaText::clearScreen()>:
c000a4dc:	57                   	push   edi
c000a4dd:	56                   	push   esi
c000a4de:	31 f6                	xor    esi,esi
c000a4e0:	53                   	push   ebx
c000a4e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a4e5:	52                   	push   edx
c000a4e6:	6a 00                	push   0x0
c000a4e8:	6a 00                	push   0x0
c000a4ea:	53                   	push   ebx
c000a4eb:	e8 8a ff ff ff       	call   c000a47a <VgaText::setCursor(int, int)>
c000a4f0:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000a4f7:	83 c4 10             	add    esp,0x10
c000a4fa:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000a4fd:	7e 20                	jle    c000a51f <VgaText::clearScreen()+0x43>
c000a4ff:	31 ff                	xor    edi,edi
c000a501:	50                   	push   eax
c000a502:	50                   	push   eax
c000a503:	56                   	push   esi
c000a504:	57                   	push   edi
c000a505:	47                   	inc    edi
c000a506:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a509:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a50c:	6a 20                	push   0x20
c000a50e:	53                   	push   ebx
c000a50f:	e8 c6 fe ff ff       	call   c000a3da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a514:	83 c4 20             	add    esp,0x20
c000a517:	83 ff 50             	cmp    edi,0x50
c000a51a:	75 e5                	jne    c000a501 <VgaText::clearScreen()+0x25>
c000a51c:	46                   	inc    esi
c000a51d:	eb db                	jmp    c000a4fa <VgaText::clearScreen()+0x1e>
c000a51f:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000a526:	5b                   	pop    ebx
c000a527:	5e                   	pop    esi
c000a528:	5f                   	pop    edi
c000a529:	c3                   	ret    

c000a52a <VgaText::setCursorX(int)>:
c000a52a:	83 ec 10             	sub    esp,0x10
c000a52d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a531:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000a534:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a538:	50                   	push   eax
c000a539:	e8 3c ff ff ff       	call   c000a47a <VgaText::setCursor(int, int)>
c000a53e:	83 c4 1c             	add    esp,0x1c
c000a541:	c3                   	ret    

c000a542 <VgaText::setCursorY(int)>:
c000a542:	83 ec 10             	sub    esp,0x10
c000a545:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a549:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a54d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000a550:	50                   	push   eax
c000a551:	e8 24 ff ff ff       	call   c000a47a <VgaText::setCursor(int, int)>
c000a556:	83 c4 1c             	add    esp,0x1c
c000a559:	c3                   	ret    

c000a55a <VgaText::incrementCursor(bool)>:
c000a55a:	56                   	push   esi
c000a55b:	53                   	push   ebx
c000a55c:	51                   	push   ecx
c000a55d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a561:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a565:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a568:	40                   	inc    eax
c000a569:	83 f8 50             	cmp    eax,0x50
c000a56c:	74 05                	je     c000a573 <VgaText::incrementCursor(bool)+0x19>
c000a56e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000a571:	eb 24                	jmp    c000a597 <VgaText::incrementCursor(bool)+0x3d>
c000a573:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a576:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a57d:	8d 50 01             	lea    edx,[eax+0x1]
c000a580:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a583:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a586:	75 0f                	jne    c000a597 <VgaText::incrementCursor(bool)+0x3d>
c000a588:	83 ec 0c             	sub    esp,0xc
c000a58b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a58e:	53                   	push   ebx
c000a58f:	e8 9c fd ff ff       	call   c000a330 <VgaText::scrollScreen()>
c000a594:	83 c4 10             	add    esp,0x10
c000a597:	89 f0                	mov    eax,esi
c000a599:	84 c0                	test   al,al
c000a59b:	74 0c                	je     c000a5a9 <VgaText::incrementCursor(bool)+0x4f>
c000a59d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a5a1:	5a                   	pop    edx
c000a5a2:	5b                   	pop    ebx
c000a5a3:	5e                   	pop    esi
c000a5a4:	e9 91 fc ff ff       	jmp    c000a23a <VgaText::updateCursor()>
c000a5a9:	58                   	pop    eax
c000a5aa:	5b                   	pop    ebx
c000a5ab:	5e                   	pop    esi
c000a5ac:	c3                   	ret    
c000a5ad:	90                   	nop

c000a5ae <VgaText::decrementCursor(bool)>:
c000a5ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a5b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a5b6:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000a5b9:	85 c0                	test   eax,eax
c000a5bb:	74 04                	je     c000a5c1 <VgaText::decrementCursor(bool)+0x13>
c000a5bd:	48                   	dec    eax
c000a5be:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000a5c1:	84 c9                	test   cl,cl
c000a5c3:	74 09                	je     c000a5ce <VgaText::decrementCursor(bool)+0x20>
c000a5c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5c9:	e9 6c fc ff ff       	jmp    c000a23a <VgaText::updateCursor()>
c000a5ce:	c3                   	ret    
c000a5cf:	90                   	nop

c000a5d0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000a5d0:	53                   	push   ebx
c000a5d1:	83 ec 08             	sub    esp,0x8
c000a5d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a5d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a5dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a5e0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a5e4:	3c 07                	cmp    al,0x7
c000a5e6:	75 21                	jne    c000a609 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000a5e8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a5f0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000a5f8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c000a600:	83 c4 08             	add    esp,0x8
c000a603:	5b                   	pop    ebx
c000a604:	e9 32 2d 00 00       	jmp    c000d33b <Krnl::beep(int, int, bool)>
c000a609:	3c 0d                	cmp    al,0xd
c000a60b:	75 09                	jne    c000a616 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c000a60d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a614:	eb 2c                	jmp    c000a642 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000a616:	3c 0a                	cmp    al,0xa
c000a618:	75 31                	jne    c000a64b <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000a61a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a61d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a624:	8d 50 01             	lea    edx,[eax+0x1]
c000a627:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a62a:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a62d:	75 0f                	jne    c000a63e <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c000a62f:	83 ec 0c             	sub    esp,0xc
c000a632:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a635:	53                   	push   ebx
c000a636:	e8 f5 fc ff ff       	call   c000a330 <VgaText::scrollScreen()>
c000a63b:	83 c4 10             	add    esp,0x10
c000a63e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a642:	83 c4 08             	add    esp,0x8
c000a645:	5b                   	pop    ebx
c000a646:	e9 ef fb ff ff       	jmp    c000a23a <VgaText::updateCursor()>
c000a64b:	3c 08                	cmp    al,0x8
c000a64d:	75 25                	jne    c000a674 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c000a64f:	50                   	push   eax
c000a650:	50                   	push   eax
c000a651:	6a 01                	push   0x1
c000a653:	53                   	push   ebx
c000a654:	e8 55 ff ff ff       	call   c000a5ae <VgaText::decrementCursor(bool)>
c000a659:	5a                   	pop    edx
c000a65a:	59                   	pop    ecx
c000a65b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a65e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a661:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a664:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a667:	6a 20                	push   0x20
c000a669:	53                   	push   ebx
c000a66a:	e8 6b fd ff ff       	call   c000a3da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a66f:	83 c4 28             	add    esp,0x28
c000a672:	5b                   	pop    ebx
c000a673:	c3                   	ret    
c000a674:	83 ec 08             	sub    esp,0x8
c000a677:	0f be c0             	movsx  eax,al
c000a67a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a67d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a680:	51                   	push   ecx
c000a681:	52                   	push   edx
c000a682:	50                   	push   eax
c000a683:	53                   	push   ebx
c000a684:	e8 51 fd ff ff       	call   c000a3da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a689:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000a68d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000a695:	83 c4 28             	add    esp,0x28
c000a698:	5b                   	pop    ebx
c000a699:	e9 bc fe ff ff       	jmp    c000a55a <VgaText::incrementCursor(bool)>

c000a69e <VgaText::putchar(char)>:
c000a69e:	56                   	push   esi
c000a69f:	53                   	push   ebx
c000a6a0:	83 ec 14             	sub    esp,0x14
c000a6a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a6a7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a6ab:	3c 5b                	cmp    al,0x5b
c000a6ad:	75 18                	jne    c000a6c7 <VgaText::putchar(char)+0x29>
c000a6af:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000a6b3:	74 1f                	je     c000a6d4 <VgaText::putchar(char)+0x36>
c000a6b5:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000a6bb:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000a6c2:	e9 bd 00 00 00       	jmp    c000a784 <VgaText::putchar(char)+0xe6>
c000a6c7:	3c 1b                	cmp    al,0x1b
c000a6c9:	75 09                	jne    c000a6d4 <VgaText::putchar(char)+0x36>
c000a6cb:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000a6cf:	e9 b0 00 00 00       	jmp    c000a784 <VgaText::putchar(char)+0xe6>
c000a6d4:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000a6d7:	84 c9                	test   cl,cl
c000a6d9:	0f 84 92 00 00 00    	je     c000a771 <VgaText::putchar(char)+0xd3>
c000a6df:	8d 50 c0             	lea    edx,[eax-0x40]
c000a6e2:	80 fa 3e             	cmp    dl,0x3e
c000a6e5:	77 76                	ja     c000a75d <VgaText::putchar(char)+0xbf>
c000a6e7:	3c 6d                	cmp    al,0x6d
c000a6e9:	75 47                	jne    c000a732 <VgaText::putchar(char)+0x94>
c000a6eb:	31 f6                	xor    esi,esi
c000a6ed:	31 d2                	xor    edx,edx
c000a6ef:	31 c0                	xor    eax,eax
c000a6f1:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000a6f4:	7e 2d                	jle    c000a723 <VgaText::putchar(char)+0x85>
c000a6f6:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000a6fb:	80 fa 3b             	cmp    dl,0x3b
c000a6fe:	75 17                	jne    c000a717 <VgaText::putchar(char)+0x79>
c000a700:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000a704:	50                   	push   eax
c000a705:	53                   	push   ebx
c000a706:	e8 45 fb ff ff       	call   c000a250 <VgaText::doANSI_SGR(int)>
c000a70b:	59                   	pop    ecx
c000a70c:	31 d2                	xor    edx,edx
c000a70e:	58                   	pop    eax
c000a70f:	31 c0                	xor    eax,eax
c000a711:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000a715:	eb 09                	jmp    c000a720 <VgaText::putchar(char)+0x82>
c000a717:	6b c0 0a             	imul   eax,eax,0xa
c000a71a:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000a71e:	88 ca                	mov    dl,cl
c000a720:	46                   	inc    esi
c000a721:	eb ce                	jmp    c000a6f1 <VgaText::putchar(char)+0x53>
c000a723:	84 d2                	test   dl,dl
c000a725:	74 2e                	je     c000a755 <VgaText::putchar(char)+0xb7>
c000a727:	50                   	push   eax
c000a728:	53                   	push   ebx
c000a729:	e8 22 fb ff ff       	call   c000a250 <VgaText::doANSI_SGR(int)>
c000a72e:	58                   	pop    eax
c000a72f:	5a                   	pop    edx
c000a730:	eb 23                	jmp    c000a755 <VgaText::putchar(char)+0xb7>
c000a732:	3c 4a                	cmp    al,0x4a
c000a734:	75 1f                	jne    c000a755 <VgaText::putchar(char)+0xb7>
c000a736:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000a73a:	75 19                	jne    c000a755 <VgaText::putchar(char)+0xb7>
c000a73c:	83 ec 0c             	sub    esp,0xc
c000a73f:	53                   	push   ebx
c000a740:	e8 97 fd ff ff       	call   c000a4dc <VgaText::clearScreen()>
c000a745:	83 c4 0c             	add    esp,0xc
c000a748:	6a 00                	push   0x0
c000a74a:	6a 00                	push   0x0
c000a74c:	53                   	push   ebx
c000a74d:	e8 28 fd ff ff       	call   c000a47a <VgaText::setCursor(int, int)>
c000a752:	83 c4 10             	add    esp,0x10
c000a755:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000a75b:	eb 27                	jmp    c000a784 <VgaText::putchar(char)+0xe6>
c000a75d:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000a760:	83 fa 0e             	cmp    edx,0xe
c000a763:	7f 1f                	jg     c000a784 <VgaText::putchar(char)+0xe6>
c000a765:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a768:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000a76b:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000a76f:	eb 13                	jmp    c000a784 <VgaText::putchar(char)+0xe6>
c000a771:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a774:	0f be c0             	movsx  eax,al
c000a777:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a77a:	50                   	push   eax
c000a77b:	53                   	push   ebx
c000a77c:	e8 4f fe ff ff       	call   c000a5d0 <VgaText::putchar(char, VgaColour, VgaColour)>
c000a781:	83 c4 10             	add    esp,0x10
c000a784:	83 c4 14             	add    esp,0x14
c000a787:	5b                   	pop    ebx
c000a788:	5e                   	pop    esi
c000a789:	c3                   	ret    

c000a78a <VgaText::putx(unsigned int)>:
c000a78a:	57                   	push   edi
c000a78b:	b9 11 00 00 00       	mov    ecx,0x11
c000a790:	56                   	push   esi
c000a791:	be 2a 0a 02 c0       	mov    esi,0xc0020a2a
c000a796:	53                   	push   ebx
c000a797:	83 ec 20             	sub    esp,0x20
c000a79a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000a79e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000a7a2:	fc                   	cld    
c000a7a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a7a5:	be 08 00 00 00       	mov    esi,0x8
c000a7aa:	50                   	push   eax
c000a7ab:	50                   	push   eax
c000a7ac:	89 d8                	mov    eax,ebx
c000a7ae:	c1 e3 04             	shl    ebx,0x4
c000a7b1:	c1 e8 1c             	shr    eax,0x1c
c000a7b4:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000a7b9:	50                   	push   eax
c000a7ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a7be:	e8 db fe ff ff       	call   c000a69e <VgaText::putchar(char)>
c000a7c3:	83 c4 10             	add    esp,0x10
c000a7c6:	4e                   	dec    esi
c000a7c7:	75 e1                	jne    c000a7aa <VgaText::putx(unsigned int)+0x20>
c000a7c9:	83 c4 20             	add    esp,0x20
c000a7cc:	5b                   	pop    ebx
c000a7cd:	5e                   	pop    esi
c000a7ce:	5f                   	pop    edi
c000a7cf:	c3                   	ret    

c000a7d0 <VgaText::puts(char const*)>:
c000a7d0:	53                   	push   ebx
c000a7d1:	83 ec 08             	sub    esp,0x8
c000a7d4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a7d8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a7db:	84 c0                	test   al,al
c000a7dd:	74 12                	je     c000a7f1 <VgaText::puts(char const*)+0x21>
c000a7df:	43                   	inc    ebx
c000a7e0:	51                   	push   ecx
c000a7e1:	51                   	push   ecx
c000a7e2:	50                   	push   eax
c000a7e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7e7:	e8 b2 fe ff ff       	call   c000a69e <VgaText::putchar(char)>
c000a7ec:	83 c4 10             	add    esp,0x10
c000a7ef:	eb e7                	jmp    c000a7d8 <VgaText::puts(char const*)+0x8>
c000a7f1:	83 c4 08             	add    esp,0x8
c000a7f4:	5b                   	pop    ebx
c000a7f5:	c3                   	ret    

c000a7f6 <VgaText::write(unsigned long long, void*, int*)>:
c000a7f6:	55                   	push   ebp
c000a7f7:	57                   	push   edi
c000a7f8:	56                   	push   esi
c000a7f9:	53                   	push   ebx
c000a7fa:	83 ec 0c             	sub    esp,0xc
c000a7fd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a801:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000a805:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a809:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000a810:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000a813:	39 eb                	cmp    ebx,ebp
c000a815:	74 13                	je     c000a82a <VgaText::write(unsigned long long, void*, int*)+0x34>
c000a817:	43                   	inc    ebx
c000a818:	50                   	push   eax
c000a819:	50                   	push   eax
c000a81a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000a81e:	50                   	push   eax
c000a81f:	56                   	push   esi
c000a820:	e8 79 fe ff ff       	call   c000a69e <VgaText::putchar(char)>
c000a825:	83 c4 10             	add    esp,0x10
c000a828:	eb e9                	jmp    c000a813 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000a82a:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000a831:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a835:	89 38                	mov    DWORD PTR [eax],edi
c000a837:	83 c4 0c             	add    esp,0xc
c000a83a:	31 c0                	xor    eax,eax
c000a83c:	5b                   	pop    ebx
c000a83d:	5e                   	pop    esi
c000a83e:	5f                   	pop    edi
c000a83f:	5d                   	pop    ebp
c000a840:	c3                   	ret    
c000a841:	90                   	nop

c000a842 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000a842:	55                   	push   ebp
c000a843:	57                   	push   edi
c000a844:	56                   	push   esi
c000a845:	53                   	push   ebx
c000a846:	83 ec 0c             	sub    esp,0xc
c000a849:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a84d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000a852:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000a859:	50                   	push   eax
c000a85a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000a85f:	50                   	push   eax
c000a860:	e8 b9 fa ff ff       	call   c000a31e <VgaText::combineColours(unsigned char, unsigned char)>
c000a865:	5a                   	pop    edx
c000a866:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000a86b:	59                   	pop    ecx
c000a86c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000a86f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000a873:	0f b7 f6             	movzx  esi,si
c000a876:	0f b6 e8             	movzx  ebp,al
c000a879:	01 f6                	add    esi,esi
c000a87b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a87e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000a881:	84 c0                	test   al,al
c000a883:	0f 84 ef 00 00 00    	je     c000a978 <VgaText::puts(char const*, VgaColour, VgaColour)+0x136>
c000a889:	3c 0d                	cmp    al,0xd
c000a88b:	75 0c                	jne    c000a899 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c000a88d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a894:	e9 d9 00 00 00       	jmp    c000a972 <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c000a899:	3c 0a                	cmp    al,0xa
c000a89b:	75 45                	jne    c000a8e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c000a89d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a8a0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a8a7:	8d 48 01             	lea    ecx,[eax+0x1]
c000a8aa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000a8ad:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000a8b0:	75 0f                	jne    c000a8c1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7f>
c000a8b2:	83 ec 0c             	sub    esp,0xc
c000a8b5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a8b8:	53                   	push   ebx
c000a8b9:	e8 72 fa ff ff       	call   c000a330 <VgaText::scrollScreen()>
c000a8be:	83 c4 10             	add    esp,0x10
c000a8c1:	83 ec 0c             	sub    esp,0xc
c000a8c4:	53                   	push   ebx
c000a8c5:	e8 70 f9 ff ff       	call   c000a23a <VgaText::updateCursor()>
c000a8ca:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000a8cf:	83 c4 10             	add    esp,0x10
c000a8d2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000a8d5:	0f b7 f6             	movzx  esi,si
c000a8d8:	01 f6                	add    esi,esi
c000a8da:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a8dd:	e9 90 00 00 00       	jmp    c000a972 <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c000a8e2:	3c 08                	cmp    al,0x8
c000a8e4:	75 35                	jne    c000a91b <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c000a8e6:	51                   	push   ecx
c000a8e7:	51                   	push   ecx
c000a8e8:	6a 01                	push   0x1
c000a8ea:	53                   	push   ebx
c000a8eb:	e8 be fc ff ff       	call   c000a5ae <VgaText::decrementCursor(bool)>
c000a8f0:	5e                   	pop    esi
c000a8f1:	58                   	pop    eax
c000a8f2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a8f5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a8f8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a8fb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a8fe:	6a 20                	push   0x20
c000a900:	53                   	push   ebx
c000a901:	e8 d4 fa ff ff       	call   c000a3da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a906:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000a90b:	83 c4 20             	add    esp,0x20
c000a90e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000a911:	0f b7 f6             	movzx  esi,si
c000a914:	01 f6                	add    esi,esi
c000a916:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a919:	eb 57                	jmp    c000a972 <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c000a91b:	52                   	push   edx
c000a91c:	52                   	push   edx
c000a91d:	55                   	push   ebp
c000a91e:	50                   	push   eax
c000a91f:	e8 a4 fa ff ff       	call   c000a3c8 <VgaText::combineCharAndColour(char, unsigned char)>
c000a924:	83 c4 10             	add    esp,0x10
c000a927:	66 89 06             	mov    WORD PTR [esi],ax
c000a92a:	39 1d 14 32 02 c0    	cmp    DWORD PTR ds:0xc0023214,ebx
c000a930:	75 1d                	jne    c000a94f <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c000a932:	83 ec 0c             	sub    esp,0xc
c000a935:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a938:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a93b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000a93f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000a943:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000a946:	50                   	push   eax
c000a947:	e8 b0 e6 00 00       	call   c0018ffc <Hal::consoleWriteCharacter(char, int, int, int, int)>
c000a94c:	83 c4 20             	add    esp,0x20
c000a94f:	83 c6 02             	add    esi,0x2
c000a952:	50                   	push   eax
c000a953:	50                   	push   eax
c000a954:	6a 00                	push   0x0
c000a956:	53                   	push   ebx
c000a957:	e8 fe fb ff ff       	call   c000a55a <VgaText::incrementCursor(bool)>
c000a95c:	83 c4 10             	add    esp,0x10
c000a95f:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000a963:	75 0d                	jne    c000a972 <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c000a965:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000a96a:	0f b7 f6             	movzx  esi,si
c000a96d:	01 f6                	add    esi,esi
c000a96f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a972:	47                   	inc    edi
c000a973:	e9 06 ff ff ff       	jmp    c000a87e <VgaText::puts(char const*, VgaColour, VgaColour)+0x3c>
c000a978:	83 ec 0c             	sub    esp,0xc
c000a97b:	53                   	push   ebx
c000a97c:	e8 b9 f8 ff ff       	call   c000a23a <VgaText::updateCursor()>
c000a981:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000a988:	83 c4 1c             	add    esp,0x1c
c000a98b:	5b                   	pop    ebx
c000a98c:	5e                   	pop    esi
c000a98d:	5f                   	pop    edi
c000a98e:	5d                   	pop    ebp
c000a98f:	c3                   	ret    

c000a990 <VgaText::VgaText(char const*)>:
c000a990:	56                   	push   esi
c000a991:	53                   	push   ebx
c000a992:	83 ec 04             	sub    esp,0x4
c000a995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a999:	83 ec 08             	sub    esp,0x8
c000a99c:	6a 00                	push   0x0
c000a99e:	50                   	push   eax
c000a99f:	e8 b2 04 00 00       	call   c000ae56 <UnixFile::UnixFile(int)>
c000a9a4:	83 c4 10             	add    esp,0x10
c000a9a7:	ba 90 0a 02 c0       	mov    edx,0xc0020a90
c000a9ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9b0:	89 10                	mov    DWORD PTR [eax],edx
c000a9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9b6:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000a9bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9c1:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000a9c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9cc:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000a9d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9d4:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000a9d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9dc:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000a9e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9e7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000a9ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9f2:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000a9f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9fd:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000aa04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa08:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c000aa0f:	83 ec 0c             	sub    esp,0xc
c000aa12:	6a 01                	push   0x1
c000aa14:	e8 80 08 00 00       	call   c000b299 <Virt::allocateKernelVirtualPages(int)>
c000aa19:	83 c4 10             	add    esp,0x10
c000aa1c:	89 c2                	mov    edx,eax
c000aa1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa22:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aa25:	8b 1d b4 32 02 c0    	mov    ebx,DWORD PTR ds:0xc00232b4
c000aa2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa2f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000aa32:	89 c6                	mov    esi,eax
c000aa34:	e8 ff f0 ff ff       	call   c0009b38 <Phys::allocatePage()>
c000aa39:	68 05 0c 00 00       	push   0xc05
c000aa3e:	56                   	push   esi
c000aa3f:	50                   	push   eax
c000aa40:	53                   	push   ebx
c000aa41:	e8 a6 0e 00 00       	call   c000b8ec <VAS::mapPage(unsigned long, unsigned long, int)>
c000aa46:	83 c4 10             	add    esp,0x10
c000aa49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa4d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000aa50:	83 ec 04             	sub    esp,0x4
c000aa53:	68 a0 0f 00 00       	push   0xfa0
c000aa58:	6a 00                	push   0x0
c000aa5a:	50                   	push   eax
c000aa5b:	e8 48 5a ff ff       	call   c00004a8 <memset>
c000aa60:	83 c4 10             	add    esp,0x10
c000aa63:	83 ec 04             	sub    esp,0x4
c000aa66:	6a 00                	push   0x0
c000aa68:	6a 07                	push   0x7
c000aa6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa6e:	e8 71 f8 ff ff       	call   c000a2e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	83 ec 04             	sub    esp,0x4
c000aa79:	6a 00                	push   0x0
c000aa7b:	6a 00                	push   0x0
c000aa7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa81:	e8 f4 f9 ff ff       	call   c000a47a <VgaText::setCursor(int, int)>
c000aa86:	83 c4 10             	add    esp,0x10
c000aa89:	83 ec 0c             	sub    esp,0xc
c000aa8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa90:	e8 47 fa ff ff       	call   c000a4dc <VgaText::clearScreen()>
c000aa95:	83 c4 10             	add    esp,0x10
c000aa98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9c:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000aaa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaa4:	05 82 00 00 00       	add    eax,0x82
c000aaa9:	83 ec 04             	sub    esp,0x4
c000aaac:	6a 30                	push   0x30
c000aaae:	6a 00                	push   0x0
c000aab0:	50                   	push   eax
c000aab1:	e8 f2 59 ff ff       	call   c00004a8 <memset>
c000aab6:	83 c4 10             	add    esp,0x10
c000aab9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aabd:	05 b2 00 00 00       	add    eax,0xb2
c000aac2:	83 ec 04             	sub    esp,0x4
c000aac5:	68 80 00 00 00       	push   0x80
c000aaca:	6a 00                	push   0x0
c000aacc:	50                   	push   eax
c000aacd:	e8 d6 59 ff ff       	call   c00004a8 <memset>
c000aad2:	83 c4 10             	add    esp,0x10
c000aad5:	90                   	nop
c000aad6:	83 c4 04             	add    esp,0x4
c000aad9:	5b                   	pop    ebx
c000aada:	5e                   	pop    esi
c000aadb:	c3                   	ret    

c000aadc <VgaText::receiveKey(unsigned char)>:
c000aadc:	57                   	push   edi
c000aadd:	56                   	push   esi
c000aade:	53                   	push   ebx
c000aadf:	83 ec 10             	sub    esp,0x10
c000aae2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000aae6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000aaea:	84 db                	test   bl,bl
c000aaec:	0f 84 ba 00 00 00    	je     c000abac <VgaText::receiveKey(unsigned char)+0xd0>
c000aaf2:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c000aaf8:	80 fb 08             	cmp    bl,0x8
c000aafb:	75 2c                	jne    c000ab29 <VgaText::receiveKey(unsigned char)+0x4d>
c000aafd:	83 ec 0c             	sub    esp,0xc
c000ab00:	57                   	push   edi
c000ab01:	e8 be 59 ff ff       	call   c00004c4 <strlen>
c000ab06:	83 c4 10             	add    esp,0x10
c000ab09:	85 c0                	test   eax,eax
c000ab0b:	74 41                	je     c000ab4e <VgaText::receiveKey(unsigned char)+0x72>
c000ab0d:	50                   	push   eax
c000ab0e:	50                   	push   eax
c000ab0f:	6a 08                	push   0x8
c000ab11:	56                   	push   esi
c000ab12:	e8 87 fb ff ff       	call   c000a69e <VgaText::putchar(char)>
c000ab17:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ab1a:	e8 a5 59 ff ff       	call   c00004c4 <strlen>
c000ab1f:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c000ab27:	eb 22                	jmp    c000ab4b <VgaText::receiveKey(unsigned char)+0x6f>
c000ab29:	0f be c3             	movsx  eax,bl
c000ab2c:	52                   	push   edx
c000ab2d:	52                   	push   edx
c000ab2e:	50                   	push   eax
c000ab2f:	56                   	push   esi
c000ab30:	e8 69 fb ff ff       	call   c000a69e <VgaText::putchar(char)>
c000ab35:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000ab39:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ab3e:	59                   	pop    ecx
c000ab3f:	58                   	pop    eax
c000ab40:	8d 44 24 16          	lea    eax,[esp+0x16]
c000ab44:	50                   	push   eax
c000ab45:	57                   	push   edi
c000ab46:	e8 59 5b ff ff       	call   c00006a4 <strcat>
c000ab4b:	83 c4 10             	add    esp,0x10
c000ab4e:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000ab55:	75 05                	jne    c000ab5c <VgaText::receiveKey(unsigned char)+0x80>
c000ab57:	80 fb 0a             	cmp    bl,0xa
c000ab5a:	75 50                	jne    c000abac <VgaText::receiveKey(unsigned char)+0xd0>
c000ab5c:	83 ec 0c             	sub    esp,0xc
c000ab5f:	81 c6 b2 00 00 00    	add    esi,0xb2
c000ab65:	56                   	push   esi
c000ab66:	e8 59 59 ff ff       	call   c00004c4 <strlen>
c000ab6b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ab6e:	89 c3                	mov    ebx,eax
c000ab70:	e8 4f 59 ff ff       	call   c00004c4 <strlen>
c000ab75:	83 c4 10             	add    esp,0x10
c000ab78:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c000ab7c:	3d 80 00 00 00       	cmp    eax,0x80
c000ab81:	76 10                	jbe    c000ab93 <VgaText::receiveKey(unsigned char)+0xb7>
c000ab83:	83 ec 0c             	sub    esp,0xc
c000ab86:	68 3b 0a 02 c0       	push   0xc0020a3b
c000ab8b:	e8 41 76 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c000ab90:	83 c4 10             	add    esp,0x10
c000ab93:	50                   	push   eax
c000ab94:	50                   	push   eax
c000ab95:	57                   	push   edi
c000ab96:	56                   	push   esi
c000ab97:	e8 08 5b ff ff       	call   c00006a4 <strcat>
c000ab9c:	83 c4 0c             	add    esp,0xc
c000ab9f:	6a 30                	push   0x30
c000aba1:	6a 00                	push   0x0
c000aba3:	57                   	push   edi
c000aba4:	e8 ff 58 ff ff       	call   c00004a8 <memset>
c000aba9:	83 c4 10             	add    esp,0x10
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	5b                   	pop    ebx
c000abb0:	5e                   	pop    esi
c000abb1:	5f                   	pop    edi
c000abb2:	c3                   	ret    
c000abb3:	90                   	nop

c000abb4 <VgaText::doUpdate()>:
c000abb4:	c3                   	ret    

c000abb5 <newTerminal(char*)>:
c000abb5:	83 ec 28             	sub    esp,0x28
c000abb8:	68 34 01 00 00       	push   0x134
c000abbd:	e8 af eb ff ff       	call   c0009771 <malloc>
c000abc2:	5a                   	pop    edx
c000abc3:	59                   	pop    ecx
c000abc4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000abc8:	50                   	push   eax
c000abc9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000abcd:	e8 be fd ff ff       	call   c000a990 <VgaText::VgaText(char const*)>
c000abd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000abd6:	83 c4 2c             	add    esp,0x2c
c000abd9:	c3                   	ret    
c000abda:	66 90                	xchg   ax,ax

c000abdc <TSS::TSS()>:
c000abdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abe0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000abe7:	90                   	nop
c000abe8:	c3                   	ret    
c000abe9:	90                   	nop
c000abea:	66 90                	xchg   ax,ax

c000abec <TSS::setESP(unsigned long)>:
c000abec:	55                   	push   ebp
c000abed:	89 e5                	mov    ebp,esp
c000abef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000abf2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000abf5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000abf8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000abfb:	90                   	nop
c000abfc:	5d                   	pop    ebp
c000abfd:	c3                   	ret    
c000abfe:	66 90                	xchg   ax,ax

c000ac00 <TSS::flush()>:
c000ac00:	55                   	push   ebp
c000ac01:	89 e5                	mov    ebp,esp
c000ac03:	83 ec 10             	sub    esp,0x10
c000ac06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac09:	8b 00                	mov    eax,DWORD PTR [eax]
c000ac0b:	83 c8 03             	or     eax,0x3
c000ac0e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000ac12:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000ac16:	66 89 d0             	mov    ax,dx
c000ac19:	0f 00 d8             	ltr    ax
c000ac1c:	90                   	nop
c000ac1d:	c9                   	leave  
c000ac1e:	c3                   	ret    
c000ac1f:	90                   	nop

c000ac20 <TSS::setup(unsigned long, unsigned long)>:
c000ac20:	55                   	push   ebp
c000ac21:	89 e5                	mov    ebp,esp
c000ac23:	83 ec 18             	sub    esp,0x18
c000ac26:	83 ec 0c             	sub    esp,0xc
c000ac29:	6a 68                	push   0x68
c000ac2b:	e8 41 eb ff ff       	call   c0009771 <malloc>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	89 c2                	mov    edx,eax
c000ac35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac38:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ac3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ac41:	83 ec 04             	sub    esp,0x4
c000ac44:	6a 68                	push   0x68
c000ac46:	6a 00                	push   0x0
c000ac48:	50                   	push   eax
c000ac49:	e8 5a 58 ff ff       	call   c00004a8 <memset>
c000ac4e:	83 c4 10             	add    esp,0x10
c000ac51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ac57:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000ac5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ac63:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000ac69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ac6f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ac72:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ac75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ac7b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000ac81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ac87:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000ac8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ac93:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000ac99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ac9f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000aca5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aca8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000acab:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000acb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000acb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000acb7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000acbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000acc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000acc3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000acc6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000acc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000accc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000accf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000acd2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000acd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000acd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000acdb:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000ace2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ace5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ace8:	0f 20 da             	mov    edx,cr3
c000aceb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000acee:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000acf1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000acf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000acf7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000acfa:	83 ec 08             	sub    esp,0x8
c000acfd:	50                   	push   eax
c000acfe:	8d 45 ec             	lea    eax,[ebp-0x14]
c000ad01:	50                   	push   eax
c000ad02:	e8 b1 e2 ff ff       	call   c0008fb8 <GDTEntry::setBase(unsigned int)>
c000ad07:	83 c4 10             	add    esp,0x10
c000ad0a:	83 ec 08             	sub    esp,0x8
c000ad0d:	6a 68                	push   0x68
c000ad0f:	8d 45 ec             	lea    eax,[ebp-0x14]
c000ad12:	50                   	push   eax
c000ad13:	e8 bc e2 ff ff       	call   c0008fd4 <GDTEntry::setLimit(unsigned int)>
c000ad18:	83 c4 10             	add    esp,0x10
c000ad1b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000ad1f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000ad22:	83 e0 0f             	and    eax,0xf
c000ad25:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000ad28:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000ad2b:	83 c8 40             	or     eax,0x40
c000ad2e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000ad31:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000ad36:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ad3c:	05 78 01 00 00       	add    eax,0x178
c000ad41:	83 ec 04             	sub    esp,0x4
c000ad44:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ad47:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000ad4a:	50                   	push   eax
c000ad4b:	e8 b8 e2 ff ff       	call   c0009008 <GDT::addEntry(GDTEntry)>
c000ad50:	83 c4 10             	add    esp,0x10
c000ad53:	89 c2                	mov    edx,eax
c000ad55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad58:	89 10                	mov    DWORD PTR [eax],edx
c000ad5a:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000ad5f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ad65:	05 78 01 00 00       	add    eax,0x178
c000ad6a:	83 ec 0c             	sub    esp,0xc
c000ad6d:	50                   	push   eax
c000ad6e:	e8 bf e2 ff ff       	call   c0009032 <GDT::flush()>
c000ad73:	83 c4 10             	add    esp,0x10
c000ad76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad79:	8b 00                	mov    eax,DWORD PTR [eax]
c000ad7b:	c9                   	leave  
c000ad7c:	c3                   	ret    
c000ad7d:	90                   	nop

c000ad7e <ReservedFilename::read(unsigned long long, void*, int*)>:
c000ad7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ad86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad89:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000ad8e:	75 08                	jne    c000ad98 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000ad90:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000ad96:	eb 38                	jmp    c000add0 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000ad98:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000ad9d:	75 17                	jne    c000adb6 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000ad9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ada4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ada7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000adad:	8b 10                	mov    edx,DWORD PTR [eax]
c000adaf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adb3:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000adb6:	89 c1                	mov    ecx,eax
c000adb8:	83 e1 fd             	and    ecx,0xfffffffd
c000adbb:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000adc1:	74 cd                	je     c000ad90 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000adc3:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000adc8:	83 e0 ef             	and    eax,0xffffffef
c000adcb:	83 f8 08             	cmp    eax,0x8
c000adce:	76 c0                	jbe    c000ad90 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000add0:	31 c0                	xor    eax,eax
c000add2:	c3                   	ret    
c000add3:	90                   	nop

c000add4 <ReservedFilename::isAtty()>:
c000add4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000add8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000addb:	31 c0                	xor    eax,eax
c000addd:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000ade3:	74 09                	je     c000adee <ReservedFilename::isAtty()+0x1a>
c000ade5:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000adeb:	0f 94 c0             	sete   al
c000adee:	c3                   	ret    
c000adef:	90                   	nop

c000adf0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000adf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000adf4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000adf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000adfb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000adff:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000ae04:	75 08                	jne    c000ae0e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000ae06:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000ae0c:	eb 3d                	jmp    c000ae4b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000ae0e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000ae13:	75 17                	jne    c000ae2c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000ae15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ae1a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ae1d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000ae23:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae25:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ae29:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000ae2c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000ae31:	75 04                	jne    c000ae37 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000ae33:	89 0a                	mov    DWORD PTR [edx],ecx
c000ae35:	eb 14                	jmp    c000ae4b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000ae37:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000ae3c:	74 c8                	je     c000ae06 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000ae3e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000ae43:	83 e0 ef             	and    eax,0xffffffef
c000ae46:	83 f8 08             	cmp    eax,0x8
c000ae49:	76 bb                	jbe    c000ae06 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000ae4b:	31 c0                	xor    eax,eax
c000ae4d:	c3                   	ret    

c000ae4e <UnixFile::getFileDescriptor()>:
c000ae4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ae55:	c3                   	ret    

c000ae56 <UnixFile::UnixFile(int)>:
c000ae56:	53                   	push   ebx
c000ae57:	83 ec 28             	sub    esp,0x28
c000ae5a:	ba 58 0b 02 c0       	mov    edx,0xc0020b58
c000ae5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae63:	89 10                	mov    DWORD PTR [eax],edx
c000ae65:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000ae6d:	0f 8f 8c 01 00 00    	jg     c000afff <UnixFile::UnixFile(int)+0x1a9>
c000ae73:	a1 60 2b 02 c0       	mov    eax,ds:0xc0022b60
c000ae78:	8d 50 01             	lea    edx,[eax+0x1]
c000ae7b:	89 15 60 2b 02 c0    	mov    DWORD PTR ds:0xc0022b60,edx
c000ae81:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ae85:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ae88:	83 ec 08             	sub    esp,0x8
c000ae8b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ae8f:	68 98 32 02 c0       	push   0xc0023298
c000ae94:	e8 3f 47 01 00       	call   c001f5d8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000ae99:	83 c4 10             	add    esp,0x10
c000ae9c:	a0 94 32 02 c0       	mov    al,ds:0xc0023294
c000aea1:	83 f0 01             	xor    eax,0x1
c000aea4:	84 c0                	test   al,al
c000aea6:	0f 84 54 01 00 00    	je     c000b000 <UnixFile::UnixFile(int)+0x1aa>
c000aeac:	c6 05 94 32 02 c0 01 	mov    BYTE PTR ds:0xc0023294,0x1
c000aeb3:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000aebb:	83 ec 0c             	sub    esp,0xc
c000aebe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aec2:	e8 aa e8 ff ff       	call   c0009771 <malloc>
c000aec7:	83 c4 10             	add    esp,0x10
c000aeca:	89 c3                	mov    ebx,eax
c000aecc:	83 ec 08             	sub    esp,0x8
c000aecf:	68 03 ff ff 0f       	push   0xfffff03
c000aed4:	53                   	push   ebx
c000aed5:	e8 2c 01 00 00       	call   c000b006 <ReservedFilename::ReservedFilename(int)>
c000aeda:	83 c4 10             	add    esp,0x10
c000aedd:	89 1d 8c 32 02 c0    	mov    DWORD PTR ds:0xc002328c,ebx
c000aee3:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000aeeb:	83 ec 0c             	sub    esp,0xc
c000aeee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aef2:	e8 7a e8 ff ff       	call   c0009771 <malloc>
c000aef7:	83 c4 10             	add    esp,0x10
c000aefa:	89 c3                	mov    ebx,eax
c000aefc:	83 ec 08             	sub    esp,0x8
c000aeff:	68 01 ff ff 0f       	push   0xfffff01
c000af04:	53                   	push   ebx
c000af05:	e8 fc 00 00 00       	call   c000b006 <ReservedFilename::ReservedFilename(int)>
c000af0a:	83 c4 10             	add    esp,0x10
c000af0d:	89 1d 90 32 02 c0    	mov    DWORD PTR ds:0xc0023290,ebx
c000af13:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000af1b:	83 ec 0c             	sub    esp,0xc
c000af1e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000af22:	e8 4a e8 ff ff       	call   c0009771 <malloc>
c000af27:	83 c4 10             	add    esp,0x10
c000af2a:	89 c3                	mov    ebx,eax
c000af2c:	83 ec 08             	sub    esp,0x8
c000af2f:	68 00 ff ff 0f       	push   0xfffff00
c000af34:	53                   	push   ebx
c000af35:	e8 cc 00 00 00       	call   c000b006 <ReservedFilename::ReservedFilename(int)>
c000af3a:	83 c4 10             	add    esp,0x10
c000af3d:	89 1d 84 32 02 c0    	mov    DWORD PTR ds:0xc0023284,ebx
c000af43:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000af4b:	83 ec 0c             	sub    esp,0xc
c000af4e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000af52:	e8 1a e8 ff ff       	call   c0009771 <malloc>
c000af57:	83 c4 10             	add    esp,0x10
c000af5a:	89 c3                	mov    ebx,eax
c000af5c:	83 ec 08             	sub    esp,0x8
c000af5f:	68 02 ff ff 0f       	push   0xfffff02
c000af64:	53                   	push   ebx
c000af65:	e8 9c 00 00 00       	call   c000b006 <ReservedFilename::ReservedFilename(int)>
c000af6a:	83 c4 10             	add    esp,0x10
c000af6d:	89 1d 88 32 02 c0    	mov    DWORD PTR ds:0xc0023288,ebx
c000af73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000af7b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000af80:	7f 7e                	jg     c000b000 <UnixFile::UnixFile(int)+0x1aa>
c000af82:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000af8a:	83 ec 0c             	sub    esp,0xc
c000af8d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000af91:	e8 db e7 ff ff       	call   c0009771 <malloc>
c000af96:	83 c4 10             	add    esp,0x10
c000af99:	89 c3                	mov    ebx,eax
c000af9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000af9f:	05 10 ff ff 0f       	add    eax,0xfffff10
c000afa4:	83 ec 08             	sub    esp,0x8
c000afa7:	50                   	push   eax
c000afa8:	53                   	push   ebx
c000afa9:	e8 58 00 00 00       	call   c000b006 <ReservedFilename::ReservedFilename(int)>
c000afae:	83 c4 10             	add    esp,0x10
c000afb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000afb5:	89 1c 85 60 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcda0],ebx
c000afbc:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000afc4:	83 ec 0c             	sub    esp,0xc
c000afc7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afcb:	e8 a1 e7 ff ff       	call   c0009771 <malloc>
c000afd0:	83 c4 10             	add    esp,0x10
c000afd3:	89 c3                	mov    ebx,eax
c000afd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000afd9:	05 20 ff ff 0f       	add    eax,0xfffff20
c000afde:	83 ec 08             	sub    esp,0x8
c000afe1:	50                   	push   eax
c000afe2:	53                   	push   ebx
c000afe3:	e8 1e 00 00 00       	call   c000b006 <ReservedFilename::ReservedFilename(int)>
c000afe8:	83 c4 10             	add    esp,0x10
c000afeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000afef:	89 1c 85 20 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcde0],ebx
c000aff6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000affa:	e9 7c ff ff ff       	jmp    c000af7b <UnixFile::UnixFile(int)+0x125>
c000afff:	90                   	nop
c000b000:	83 c4 28             	add    esp,0x28
c000b003:	5b                   	pop    ebx
c000b004:	c3                   	ret    
c000b005:	90                   	nop

c000b006 <ReservedFilename::ReservedFilename(int)>:
c000b006:	83 ec 0c             	sub    esp,0xc
c000b009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b00d:	83 ec 08             	sub    esp,0x8
c000b010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b014:	50                   	push   eax
c000b015:	e8 3c fe ff ff       	call   c000ae56 <UnixFile::UnixFile(int)>
c000b01a:	83 c4 10             	add    esp,0x10
c000b01d:	ba 74 0b 02 c0       	mov    edx,0xc0020b74
c000b022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b026:	89 10                	mov    DWORD PTR [eax],edx
c000b028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b02c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b030:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b033:	90                   	nop
c000b034:	83 c4 0c             	add    esp,0xc
c000b037:	c3                   	ret    

c000b038 <UnixFile::~UnixFile()>:
c000b038:	83 ec 1c             	sub    esp,0x1c
c000b03b:	ba 58 0b 02 c0       	mov    edx,0xc0020b58
c000b040:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b044:	89 10                	mov    DWORD PTR [eax],edx
c000b046:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b04a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b04d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b052:	7f 73                	jg     c000b0c7 <UnixFile::~UnixFile()+0x8f>
c000b054:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b05c:	83 ec 0c             	sub    esp,0xc
c000b05f:	68 98 32 02 c0       	push   0xc0023298
c000b064:	e8 43 46 01 00       	call   c001f6ac <LinkedList<UnixFile>::getFirstElement()>
c000b069:	83 c4 10             	add    esp,0x10
c000b06c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b070:	83 ec 0c             	sub    esp,0xc
c000b073:	68 98 32 02 c0       	push   0xc0023298
c000b078:	e8 37 46 01 00       	call   c001f6b4 <LinkedList<UnixFile>::removeFirst()>
c000b07d:	83 c4 10             	add    esp,0x10
c000b080:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b084:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b088:	74 40                	je     c000b0ca <UnixFile::~UnixFile()+0x92>
c000b08a:	83 ec 08             	sub    esp,0x8
c000b08d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b091:	68 98 32 02 c0       	push   0xc0023298
c000b096:	e8 3d 45 01 00       	call   c001f5d8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b09b:	83 c4 10             	add    esp,0x10
c000b09e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0a2:	8d 50 01             	lea    edx,[eax+0x1]
c000b0a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b0a9:	3d 88 13 00 00       	cmp    eax,0x1388
c000b0ae:	0f 94 c0             	sete   al
c000b0b1:	84 c0                	test   al,al
c000b0b3:	74 a7                	je     c000b05c <UnixFile::~UnixFile()+0x24>
c000b0b5:	83 ec 0c             	sub    esp,0xc
c000b0b8:	68 30 0b 02 c0       	push   0xc0020b30
c000b0bd:	e8 0f 71 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c000b0c2:	83 c4 10             	add    esp,0x10
c000b0c5:	eb 95                	jmp    c000b05c <UnixFile::~UnixFile()+0x24>
c000b0c7:	90                   	nop
c000b0c8:	eb 01                	jmp    c000b0cb <UnixFile::~UnixFile()+0x93>
c000b0ca:	90                   	nop
c000b0cb:	90                   	nop
c000b0cc:	83 c4 1c             	add    esp,0x1c
c000b0cf:	c3                   	ret    

c000b0d0 <UnixFile::~UnixFile()>:
c000b0d0:	83 ec 0c             	sub    esp,0xc
c000b0d3:	83 ec 0c             	sub    esp,0xc
c000b0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0da:	e8 59 ff ff ff       	call   c000b038 <UnixFile::~UnixFile()>
c000b0df:	83 c4 10             	add    esp,0x10
c000b0e2:	83 ec 08             	sub    esp,0x8
c000b0e5:	6a 0c                	push   0xc
c000b0e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0eb:	e8 2a 13 00 00       	call   c000c41a <operator delete(void*, unsigned long)>
c000b0f0:	83 c4 10             	add    esp,0x10
c000b0f3:	83 c4 0c             	add    esp,0xc
c000b0f6:	c3                   	ret    
c000b0f7:	90                   	nop

c000b0f8 <ReservedFilename::~ReservedFilename()>:
c000b0f8:	83 ec 0c             	sub    esp,0xc
c000b0fb:	ba 74 0b 02 c0       	mov    edx,0xc0020b74
c000b100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b104:	89 10                	mov    DWORD PTR [eax],edx
c000b106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b10a:	83 ec 0c             	sub    esp,0xc
c000b10d:	50                   	push   eax
c000b10e:	e8 25 ff ff ff       	call   c000b038 <UnixFile::~UnixFile()>
c000b113:	83 c4 10             	add    esp,0x10
c000b116:	90                   	nop
c000b117:	83 c4 0c             	add    esp,0xc
c000b11a:	c3                   	ret    
c000b11b:	90                   	nop

c000b11c <ReservedFilename::~ReservedFilename()>:
c000b11c:	83 ec 0c             	sub    esp,0xc
c000b11f:	83 ec 0c             	sub    esp,0xc
c000b122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b126:	e8 cd ff ff ff       	call   c000b0f8 <ReservedFilename::~ReservedFilename()>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	83 ec 08             	sub    esp,0x8
c000b131:	6a 0c                	push   0xc
c000b133:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b137:	e8 de 12 00 00       	call   c000c41a <operator delete(void*, unsigned long)>
c000b13c:	83 c4 10             	add    esp,0x10
c000b13f:	83 c4 0c             	add    esp,0xc
c000b142:	c3                   	ret    

c000b143 <getFromFileDescriptor(int)>:
c000b143:	53                   	push   ebx
c000b144:	83 ec 08             	sub    esp,0x8
c000b147:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b14b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b151:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b157:	7f 2c                	jg     c000b185 <getFromFileDescriptor(int)+0x42>
c000b159:	83 ec 0c             	sub    esp,0xc
c000b15c:	68 98 32 02 c0       	push   0xc0023298
c000b161:	e8 46 45 01 00       	call   c001f6ac <LinkedList<UnixFile>::getFirstElement()>
c000b166:	83 c4 10             	add    esp,0x10
c000b169:	85 c0                	test   eax,eax
c000b16b:	75 04                	jne    c000b171 <getFromFileDescriptor(int)+0x2e>
c000b16d:	31 c0                	xor    eax,eax
c000b16f:	eb 6e                	jmp    c000b1df <getFromFileDescriptor(int)+0x9c>
c000b171:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b174:	74 69                	je     c000b1df <getFromFileDescriptor(int)+0x9c>
c000b176:	52                   	push   edx
c000b177:	52                   	push   edx
c000b178:	50                   	push   eax
c000b179:	68 98 32 02 c0       	push   0xc0023298
c000b17e:	e8 d3 45 01 00       	call   c001f756 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b183:	eb e1                	jmp    c000b166 <getFromFileDescriptor(int)+0x23>
c000b185:	a1 8c 32 02 c0       	mov    eax,ds:0xc002328c
c000b18a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b190:	74 4d                	je     c000b1df <getFromFileDescriptor(int)+0x9c>
c000b192:	a1 90 32 02 c0       	mov    eax,ds:0xc0023290
c000b197:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b19d:	74 40                	je     c000b1df <getFromFileDescriptor(int)+0x9c>
c000b19f:	a1 88 32 02 c0       	mov    eax,ds:0xc0023288
c000b1a4:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b1aa:	74 33                	je     c000b1df <getFromFileDescriptor(int)+0x9c>
c000b1ac:	a1 84 32 02 c0       	mov    eax,ds:0xc0023284
c000b1b1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b1b7:	74 26                	je     c000b1df <getFromFileDescriptor(int)+0x9c>
c000b1b9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b1bf:	83 f8 08             	cmp    eax,0x8
c000b1c2:	77 09                	ja     c000b1cd <getFromFileDescriptor(int)+0x8a>
c000b1c4:	8b 04 85 60 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcda0]
c000b1cb:	eb 12                	jmp    c000b1df <getFromFileDescriptor(int)+0x9c>
c000b1cd:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b1d3:	83 fb 08             	cmp    ebx,0x8
c000b1d6:	77 95                	ja     c000b16d <getFromFileDescriptor(int)+0x2a>
c000b1d8:	8b 04 9d 20 32 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdcde0]
c000b1df:	83 c4 08             	add    esp,0x8
c000b1e2:	5b                   	pop    ebx
c000b1e3:	c3                   	ret    

c000b1e4 <__static_initialization_and_destruction_0(int, int)>:
c000b1e4:	83 ec 0c             	sub    esp,0xc
c000b1e7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b1ec:	75 34                	jne    c000b222 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b1ee:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b1f6:	75 2a                	jne    c000b222 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b1f8:	83 ec 0c             	sub    esp,0xc
c000b1fb:	68 98 32 02 c0       	push   0xc0023298
c000b200:	e8 91 43 01 00       	call   c001f596 <LinkedList<UnixFile>::LinkedList()>
c000b205:	83 c4 10             	add    esp,0x10
c000b208:	83 ec 04             	sub    esp,0x4
c000b20b:	68 88 29 02 c0       	push   0xc0022988
c000b210:	68 98 32 02 c0       	push   0xc0023298
c000b215:	68 94 f5 01 c0       	push   0xc001f594
c000b21a:	e8 ab 11 00 00       	call   c000c3ca <__cxa_atexit>
c000b21f:	83 c4 10             	add    esp,0x10
c000b222:	90                   	nop
c000b223:	83 c4 0c             	add    esp,0xc
c000b226:	c3                   	ret    

c000b227 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b227:	83 ec 0c             	sub    esp,0xc
c000b22a:	83 ec 08             	sub    esp,0x8
c000b22d:	68 ff ff 00 00       	push   0xffff
c000b232:	6a 01                	push   0x1
c000b234:	e8 ab ff ff ff       	call   c000b1e4 <__static_initialization_and_destruction_0(int, int)>
c000b239:	83 c4 10             	add    esp,0x10
c000b23c:	83 c4 0c             	add    esp,0xc
c000b23f:	c3                   	ret    

c000b240 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b240:	53                   	push   ebx
c000b241:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b245:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b249:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b24f:	89 c8                	mov    eax,ecx
c000b251:	d1 e8                	shr    eax,1
c000b253:	03 05 68 2b 02 c0    	add    eax,DWORD PTR ds:0xc0022b68
c000b259:	83 e1 01             	and    ecx,0x1
c000b25c:	8a 10                	mov    dl,BYTE PTR [eax]
c000b25e:	75 09                	jne    c000b269 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b260:	83 e2 f0             	and    edx,0xfffffff0
c000b263:	09 da                	or     edx,ebx
c000b265:	88 10                	mov    BYTE PTR [eax],dl
c000b267:	5b                   	pop    ebx
c000b268:	c3                   	ret    
c000b269:	c1 e3 04             	shl    ebx,0x4
c000b26c:	83 e2 0f             	and    edx,0xf
c000b26f:	09 da                	or     edx,ebx
c000b271:	88 10                	mov    BYTE PTR [eax],dl
c000b273:	5b                   	pop    ebx
c000b274:	c3                   	ret    

c000b275 <Virt::getPageState(unsigned long)>:
c000b275:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b279:	8b 0d 68 2b 02 c0    	mov    ecx,DWORD PTR ds:0xc0022b68
c000b27f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b285:	89 d0                	mov    eax,edx
c000b287:	d1 e8                	shr    eax,1
c000b289:	83 e2 01             	and    edx,0x1
c000b28c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b28f:	75 04                	jne    c000b295 <Virt::getPageState(unsigned long)+0x20>
c000b291:	83 e0 0f             	and    eax,0xf
c000b294:	c3                   	ret    
c000b295:	c0 e8 04             	shr    al,0x4
c000b298:	c3                   	ret    

c000b299 <Virt::allocateKernelVirtualPages(int)>:
c000b299:	55                   	push   ebp
c000b29a:	31 ed                	xor    ebp,ebp
c000b29c:	57                   	push   edi
c000b29d:	56                   	push   esi
c000b29e:	53                   	push   ebx
c000b29f:	31 db                	xor    ebx,ebx
c000b2a1:	83 ec 1c             	sub    esp,0x1c
c000b2a4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b2a8:	8b 3d 64 2b 02 c0    	mov    edi,DWORD PTR ds:0xc0022b64
c000b2ae:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b2b3:	57                   	push   edi
c000b2b4:	e8 bc ff ff ff       	call   c000b275 <Virt::getPageState(unsigned long)>
c000b2b9:	5a                   	pop    edx
c000b2ba:	84 c0                	test   al,al
c000b2bc:	75 3a                	jne    c000b2f8 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b2be:	85 db                	test   ebx,ebx
c000b2c0:	75 02                	jne    c000b2c4 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b2c2:	89 fd                	mov    ebp,edi
c000b2c4:	43                   	inc    ebx
c000b2c5:	39 f3                	cmp    ebx,esi
c000b2c7:	74 5a                	je     c000b323 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000b2c9:	47                   	inc    edi
c000b2ca:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b2d0:	76 31                	jbe    c000b303 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000b2d2:	c7 05 64 2b 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022b64,0xc8000
c000b2dc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000b2e1:	75 28                	jne    c000b30b <Virt::allocateKernelVirtualPages(int)+0x72>
c000b2e3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000b2e8:	bf 00 80 0c 00       	mov    edi,0xc8000
c000b2ed:	57                   	push   edi
c000b2ee:	e8 82 ff ff ff       	call   c000b275 <Virt::getPageState(unsigned long)>
c000b2f3:	5a                   	pop    edx
c000b2f4:	84 c0                	test   al,al
c000b2f6:	74 c6                	je     c000b2be <Virt::allocateKernelVirtualPages(int)+0x25>
c000b2f8:	31 db                	xor    ebx,ebx
c000b2fa:	47                   	inc    edi
c000b2fb:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b301:	77 cf                	ja     c000b2d2 <Virt::allocateKernelVirtualPages(int)+0x39>
c000b303:	89 3d 64 2b 02 c0    	mov    DWORD PTR ds:0xc0022b64,edi
c000b309:	eb a8                	jmp    c000b2b3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b30b:	83 ec 0c             	sub    esp,0xc
c000b30e:	68 88 0b 02 c0       	push   0xc0020b88
c000b313:	e8 b9 6e 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c000b318:	8b 3d 64 2b 02 c0    	mov    edi,DWORD PTR ds:0xc0022b64
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	eb 90                	jmp    c000b2b3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b323:	89 2d 64 2b 02 c0    	mov    DWORD PTR ds:0xc0022b64,ebp
c000b329:	4b                   	dec    ebx
c000b32a:	74 5f                	je     c000b38b <Virt::allocateKernelVirtualPages(int)+0xf2>
c000b32c:	85 f6                	test   esi,esi
c000b32e:	74 3d                	je     c000b36d <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b330:	89 e8                	mov    eax,ebp
c000b332:	31 db                	xor    ebx,ebx
c000b334:	8d 7e ff             	lea    edi,[esi-0x1]
c000b337:	eb 14                	jmp    c000b34d <Virt::allocateKernelVirtualPages(int)+0xb4>
c000b339:	6a 01                	push   0x1
c000b33b:	43                   	inc    ebx
c000b33c:	50                   	push   eax
c000b33d:	e8 fe fe ff ff       	call   c000b240 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b342:	58                   	pop    eax
c000b343:	39 f3                	cmp    ebx,esi
c000b345:	5a                   	pop    edx
c000b346:	74 25                	je     c000b36d <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b348:	a1 64 2b 02 c0       	mov    eax,ds:0xc0022b64
c000b34d:	8d 50 01             	lea    edx,[eax+0x1]
c000b350:	85 db                	test   ebx,ebx
c000b352:	89 15 64 2b 02 c0    	mov    DWORD PTR ds:0xc0022b64,edx
c000b358:	74 20                	je     c000b37a <Virt::allocateKernelVirtualPages(int)+0xe1>
c000b35a:	39 df                	cmp    edi,ebx
c000b35c:	75 db                	jne    c000b339 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000b35e:	6a 03                	push   0x3
c000b360:	43                   	inc    ebx
c000b361:	50                   	push   eax
c000b362:	e8 d9 fe ff ff       	call   c000b240 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b367:	59                   	pop    ecx
c000b368:	39 f3                	cmp    ebx,esi
c000b36a:	58                   	pop    eax
c000b36b:	75 db                	jne    c000b348 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b36d:	83 c4 1c             	add    esp,0x1c
c000b370:	89 e8                	mov    eax,ebp
c000b372:	5b                   	pop    ebx
c000b373:	c1 e0 0c             	shl    eax,0xc
c000b376:	5e                   	pop    esi
c000b377:	5f                   	pop    edi
c000b378:	5d                   	pop    ebp
c000b379:	c3                   	ret    
c000b37a:	6a 02                	push   0x2
c000b37c:	bb 01 00 00 00       	mov    ebx,0x1
c000b381:	50                   	push   eax
c000b382:	e8 b9 fe ff ff       	call   c000b240 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b387:	58                   	pop    eax
c000b388:	5a                   	pop    edx
c000b389:	eb bd                	jmp    c000b348 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b38b:	6a 04                	push   0x4
c000b38d:	8d 45 01             	lea    eax,[ebp+0x1]
c000b390:	55                   	push   ebp
c000b391:	a3 64 2b 02 c0       	mov    ds:0xc0022b64,eax
c000b396:	e8 a5 fe ff ff       	call   c000b240 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b39b:	59                   	pop    ecx
c000b39c:	89 e8                	mov    eax,ebp
c000b39e:	5b                   	pop    ebx
c000b39f:	c1 e0 0c             	shl    eax,0xc
c000b3a2:	83 c4 1c             	add    esp,0x1c
c000b3a5:	5b                   	pop    ebx
c000b3a6:	5e                   	pop    esi
c000b3a7:	5f                   	pop    edi
c000b3a8:	5d                   	pop    ebp
c000b3a9:	c3                   	ret    

c000b3aa <Virt::freeSwapfilePage(unsigned long)>:
c000b3aa:	53                   	push   ebx
c000b3ab:	8b 15 b0 32 02 c0    	mov    edx,DWORD PTR ds:0xc00232b0
c000b3b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b3b5:	b8 01 00 00 00       	mov    eax,0x1
c000b3ba:	89 cb                	mov    ebx,ecx
c000b3bc:	d3 e0                	shl    eax,cl
c000b3be:	c1 eb 05             	shr    ebx,0x5
c000b3c1:	f7 d0                	not    eax
c000b3c3:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000b3c6:	5b                   	pop    ebx
c000b3c7:	c3                   	ret    

c000b3c8 <Virt::swapIDToSector(unsigned long)>:
c000b3c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3cc:	0f af 05 6c 2b 02 c0 	imul   eax,DWORD PTR ds:0xc0022b6c
c000b3d3:	03 05 74 2b 02 c0    	add    eax,DWORD PTR ds:0xc0022b74
c000b3d9:	c3                   	ret    

c000b3da <Virt::allocateSwapfilePage()>:
c000b3da:	55                   	push   ebp
c000b3db:	31 d2                	xor    edx,edx
c000b3dd:	57                   	push   edi
c000b3de:	56                   	push   esi
c000b3df:	53                   	push   ebx
c000b3e0:	83 ec 0c             	sub    esp,0xc
c000b3e3:	8b 0d 6c 2b 02 c0    	mov    ecx,DWORD PTR ds:0xc0022b6c
c000b3e9:	a1 70 2b 02 c0       	mov    eax,ds:0xc0022b70
c000b3ee:	f7 f1                	div    ecx
c000b3f0:	39 0d 70 2b 02 c0    	cmp    DWORD PTR ds:0xc0022b70,ecx
c000b3f6:	72 2d                	jb     c000b425 <Virt::allocateSwapfilePage()+0x4b>
c000b3f8:	8b 35 b0 32 02 c0    	mov    esi,DWORD PTR ds:0xc00232b0
c000b3fe:	8b 16                	mov    edx,DWORD PTR [esi]
c000b400:	f6 c2 01             	test   dl,0x1
c000b403:	74 3c                	je     c000b441 <Virt::allocateSwapfilePage()+0x67>
c000b405:	31 c9                	xor    ecx,ecx
c000b407:	bf 01 00 00 00       	mov    edi,0x1
c000b40c:	eb 12                	jmp    c000b420 <Virt::allocateSwapfilePage()+0x46>
c000b40e:	89 fd                	mov    ebp,edi
c000b410:	89 ca                	mov    edx,ecx
c000b412:	d3 e5                	shl    ebp,cl
c000b414:	c1 ea 05             	shr    edx,0x5
c000b417:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000b41a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b41c:	85 ea                	test   edx,ebp
c000b41e:	74 2a                	je     c000b44a <Virt::allocateSwapfilePage()+0x70>
c000b420:	41                   	inc    ecx
c000b421:	39 c8                	cmp    eax,ecx
c000b423:	77 e9                	ja     c000b40e <Virt::allocateSwapfilePage()+0x34>
c000b425:	83 ec 0c             	sub    esp,0xc
c000b428:	68 ef 0c 02 c0       	push   0xc0020cef
c000b42d:	e8 9f 6d 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c000b432:	83 c4 10             	add    esp,0x10
c000b435:	31 c9                	xor    ecx,ecx
c000b437:	83 c4 0c             	add    esp,0xc
c000b43a:	89 c8                	mov    eax,ecx
c000b43c:	5b                   	pop    ebx
c000b43d:	5e                   	pop    esi
c000b43e:	5f                   	pop    edi
c000b43f:	5d                   	pop    ebp
c000b440:	c3                   	ret    
c000b441:	89 f3                	mov    ebx,esi
c000b443:	bd 01 00 00 00       	mov    ebp,0x1
c000b448:	31 c9                	xor    ecx,ecx
c000b44a:	09 ea                	or     edx,ebp
c000b44c:	89 c8                	mov    eax,ecx
c000b44e:	89 13                	mov    DWORD PTR [ebx],edx
c000b450:	83 c4 0c             	add    esp,0xc
c000b453:	5b                   	pop    ebx
c000b454:	5e                   	pop    esi
c000b455:	5f                   	pop    edi
c000b456:	5d                   	pop    ebp
c000b457:	c3                   	ret    

c000b458 <Virt::virtualMemorySetup()>:
c000b458:	53                   	push   ebx
c000b459:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b45e:	6a 0f                	push   0xf
c000b460:	53                   	push   ebx
c000b461:	43                   	inc    ebx
c000b462:	e8 d9 fd ff ff       	call   c000b240 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b467:	58                   	pop    eax
c000b468:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b46e:	5a                   	pop    edx
c000b46f:	75 ed                	jne    c000b45e <Virt::virtualMemorySetup()+0x6>
c000b471:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b476:	6a 00                	push   0x0
c000b478:	53                   	push   ebx
c000b479:	43                   	inc    ebx
c000b47a:	e8 c1 fd ff ff       	call   c000b240 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b47f:	59                   	pop    ecx
c000b480:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b486:	58                   	pop    eax
c000b487:	75 ed                	jne    c000b476 <Virt::virtualMemorySetup()+0x1e>
c000b489:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000b48e:	6a 0f                	push   0xf
c000b490:	53                   	push   ebx
c000b491:	43                   	inc    ebx
c000b492:	e8 a9 fd ff ff       	call   c000b240 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b497:	58                   	pop    eax
c000b498:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000b49e:	5a                   	pop    edx
c000b49f:	75 ed                	jne    c000b48e <Virt::virtualMemorySetup()+0x36>
c000b4a1:	5b                   	pop    ebx
c000b4a2:	c3                   	ret    

c000b4a3 <Virt::setupPageSwapping(int)>:
c000b4a3:	53                   	push   ebx
c000b4a4:	83 ec 0c             	sub    esp,0xc
c000b4a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b4ab:	a1 48 57 02 c0       	mov    eax,ds:0xc0025748
c000b4b0:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b4b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000b4b8:	53                   	push   ebx
c000b4b9:	c1 e3 0b             	shl    ebx,0xb
c000b4bc:	68 06 0d 02 c0       	push   0xc0020d06
c000b4c1:	50                   	push   eax
c000b4c2:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000b4c5:	89 1d 70 2b 02 c0    	mov    DWORD PTR ds:0xc0022b70,ebx
c000b4cb:	c6 05 78 2b 02 c0 43 	mov    BYTE PTR ds:0xc0022b78,0x43
c000b4d2:	c1 eb 08             	shr    ebx,0x8
c000b4d5:	a3 74 2b 02 c0       	mov    ds:0xc0022b74,eax
c000b4da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b4dd:	c7 05 6c 2b 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0022b6c,0x8
c000b4e7:	e8 85 e2 ff ff       	call   c0009771 <malloc>
c000b4ec:	83 c4 0c             	add    esp,0xc
c000b4ef:	89 c1                	mov    ecx,eax
c000b4f1:	a3 b0 32 02 c0       	mov    ds:0xc00232b0,eax
c000b4f6:	31 d2                	xor    edx,edx
c000b4f8:	a1 70 2b 02 c0       	mov    eax,ds:0xc0022b70
c000b4fd:	f7 35 6c 2b 02 c0    	div    DWORD PTR ds:0xc0022b6c
c000b503:	c1 e8 05             	shr    eax,0x5
c000b506:	50                   	push   eax
c000b507:	6a 00                	push   0x0
c000b509:	51                   	push   ecx
c000b50a:	e8 99 4f ff ff       	call   c00004a8 <memset>
c000b50f:	83 c4 18             	add    esp,0x18
c000b512:	5b                   	pop    ebx
c000b513:	c3                   	ret    

c000b514 <VAS::VAS(VAS*)>:
c000b514:	83 ec 0c             	sub    esp,0xc
c000b517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b51b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b526:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b52d:	83 ec 0c             	sub    esp,0xc
c000b530:	68 a8 0b 02 c0       	push   0xc0020ba8
c000b535:	e8 97 6c 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c000b53a:	83 c4 10             	add    esp,0x10
c000b53d:	90                   	nop
c000b53e:	83 c4 0c             	add    esp,0xc
c000b541:	c3                   	ret    

c000b542 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000b542:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b546:	89 c2                	mov    edx,eax
c000b548:	c1 e8 0a             	shr    eax,0xa
c000b54b:	c1 ea 16             	shr    edx,0x16
c000b54e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000b553:	19 c9                	sbb    ecx,ecx
c000b555:	c1 e2 0c             	shl    edx,0xc
c000b558:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000b55e:	25 fc 0f 00 00       	and    eax,0xffc
c000b563:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000b56a:	01 d0                	add    eax,edx
c000b56c:	c3                   	ret    
c000b56d:	90                   	nop

c000b56e <VAS::getPageTableEntry(unsigned long)>:
c000b56e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b572:	89 ca                	mov    edx,ecx
c000b574:	c1 e9 0a             	shr    ecx,0xa
c000b577:	c1 ea 16             	shr    edx,0x16
c000b57a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000b580:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000b586:	c1 e0 0c             	shl    eax,0xc
c000b589:	8d 04 08             	lea    eax,[eax+ecx*1]
c000b58c:	c3                   	ret    

c000b58d <Virt::freeKernelVirtualPages(unsigned long)>:
c000b58d:	57                   	push   edi
c000b58e:	56                   	push   esi
c000b58f:	be 01 00 00 00       	mov    esi,0x1
c000b594:	53                   	push   ebx
c000b595:	83 ec 10             	sub    esp,0x10
c000b598:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b59c:	c1 eb 0c             	shr    ebx,0xc
c000b59f:	eb 3f                	jmp    c000b5e0 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000b5a1:	83 ec 08             	sub    esp,0x8
c000b5a4:	57                   	push   edi
c000b5a5:	ff 35 b4 32 02 c0    	push   DWORD PTR ds:0xc00232b4
c000b5ab:	e8 be ff ff ff       	call   c000b56e <VAS::getPageTableEntry(unsigned long)>
c000b5b0:	83 c4 10             	add    esp,0x10
c000b5b3:	8b 00                	mov    eax,DWORD PTR [eax]
c000b5b5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000b5b9:	f6 c4 04             	test   ah,0x4
c000b5bc:	75 5f                	jne    c000b61d <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000b5be:	80 fa 04             	cmp    dl,0x4
c000b5c1:	74 78                	je     c000b63b <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000b5c3:	80 fa 02             	cmp    dl,0x2
c000b5c6:	0f 84 88 00 00 00    	je     c000b654 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000b5cc:	80 fa 03             	cmp    dl,0x3
c000b5cf:	0f 84 ad 00 00 00    	je     c000b682 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000b5d5:	fe ca                	dec    dl
c000b5d7:	0f 84 92 00 00 00    	je     c000b66f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000b5dd:	43                   	inc    ebx
c000b5de:	31 f6                	xor    esi,esi
c000b5e0:	53                   	push   ebx
c000b5e1:	89 df                	mov    edi,ebx
c000b5e3:	e8 8d fc ff ff       	call   c000b275 <Virt::getPageState(unsigned long)>
c000b5e8:	c1 e7 0c             	shl    edi,0xc
c000b5eb:	59                   	pop    ecx
c000b5ec:	84 c0                	test   al,al
c000b5ee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000b5f2:	75 ad                	jne    c000b5a1 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000b5f4:	83 ec 0c             	sub    esp,0xc
c000b5f7:	68 1d 0d 02 c0       	push   0xc0020d1d
c000b5fc:	e8 d0 6b 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c000b601:	58                   	pop    eax
c000b602:	5a                   	pop    edx
c000b603:	57                   	push   edi
c000b604:	ff 35 b4 32 02 c0    	push   DWORD PTR ds:0xc00232b4
c000b60a:	e8 5f ff ff ff       	call   c000b56e <VAS::getPageTableEntry(unsigned long)>
c000b60f:	83 c4 10             	add    esp,0x10
c000b612:	8b 00                	mov    eax,DWORD PTR [eax]
c000b614:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000b618:	f6 c4 04             	test   ah,0x4
c000b61b:	74 c0                	je     c000b5dd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000b61d:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000b621:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b626:	83 ec 0c             	sub    esp,0xc
c000b629:	50                   	push   eax
c000b62a:	e8 a7 e4 ff ff       	call   c0009ad6 <Phys::freePage(unsigned long)>
c000b62f:	83 c4 10             	add    esp,0x10
c000b632:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000b636:	80 fa 04             	cmp    dl,0x4
c000b639:	75 88                	jne    c000b5c3 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000b63b:	89 f0                	mov    eax,esi
c000b63d:	84 c0                	test   al,al
c000b63f:	75 47                	jne    c000b688 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000b641:	c7 44 24 20 cc 0b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020bcc
c000b649:	83 c4 10             	add    esp,0x10
c000b64c:	5b                   	pop    ebx
c000b64d:	5e                   	pop    esi
c000b64e:	5f                   	pop    edi
c000b64f:	e9 7d 6b 00 00       	jmp    c00121d1 <Krnl::panic(char const*)>
c000b654:	89 f0                	mov    eax,esi
c000b656:	84 c0                	test   al,al
c000b658:	75 15                	jne    c000b66f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000b65a:	83 ec 0c             	sub    esp,0xc
c000b65d:	68 39 0d 02 c0       	push   0xc0020d39
c000b662:	e8 6a 6b 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c000b667:	83 c4 10             	add    esp,0x10
c000b66a:	e9 6e ff ff ff       	jmp    c000b5dd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000b66f:	83 ec 08             	sub    esp,0x8
c000b672:	6a 00                	push   0x0
c000b674:	53                   	push   ebx
c000b675:	e8 c6 fb ff ff       	call   c000b240 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b67a:	83 c4 10             	add    esp,0x10
c000b67d:	e9 5b ff ff ff       	jmp    c000b5dd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000b682:	89 f0                	mov    eax,esi
c000b684:	84 c0                	test   al,al
c000b686:	75 15                	jne    c000b69d <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000b688:	83 ec 08             	sub    esp,0x8
c000b68b:	6a 00                	push   0x0
c000b68d:	53                   	push   ebx
c000b68e:	e8 ad fb ff ff       	call   c000b240 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b693:	83 c4 10             	add    esp,0x10
c000b696:	83 c4 10             	add    esp,0x10
c000b699:	5b                   	pop    ebx
c000b69a:	5e                   	pop    esi
c000b69b:	5f                   	pop    edi
c000b69c:	c3                   	ret    
c000b69d:	c7 44 24 20 55 0d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020d55
c000b6a5:	83 c4 10             	add    esp,0x10
c000b6a8:	5b                   	pop    ebx
c000b6a9:	5e                   	pop    esi
c000b6aa:	5f                   	pop    edi
c000b6ab:	e9 21 6b 00 00       	jmp    c00121d1 <Krnl::panic(char const*)>

c000b6b0 <VAS::freeAllocatedPages(unsigned long)>:
c000b6b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b6b8:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000b6bc:	74 09                	je     c000b6c7 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000b6be:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b6c2:	e9 c6 fe ff ff       	jmp    c000b58d <Virt::freeKernelVirtualPages(unsigned long)>
c000b6c7:	c7 44 24 04 f0 0b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020bf0
c000b6cf:	e9 27 0e 00 00       	jmp    c000c4fb <Dbg::kprintf(char const*, ...)>

c000b6d4 <VAS::virtualToPhysical(unsigned long)>:
c000b6d4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b6d8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b6dc:	e8 8d fe ff ff       	call   c000b56e <VAS::getPageTableEntry(unsigned long)>
c000b6e1:	5a                   	pop    edx
c000b6e2:	8b 00                	mov    eax,DWORD PTR [eax]
c000b6e4:	59                   	pop    ecx
c000b6e5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b6ea:	c3                   	ret    
c000b6eb:	90                   	nop

c000b6ec <VAS::reflagRange(unsigned long, int, int, int)>:
c000b6ec:	55                   	push   ebp
c000b6ed:	57                   	push   edi
c000b6ee:	56                   	push   esi
c000b6ef:	53                   	push   ebx
c000b6f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b6f4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000b6f8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b6fc:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000b700:	85 db                	test   ebx,ebx
c000b702:	7e 22                	jle    c000b726 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000b704:	c1 e3 0c             	shl    ebx,0xc
c000b707:	01 f3                	add    ebx,esi
c000b709:	56                   	push   esi
c000b70a:	81 c6 00 10 00 00    	add    esi,0x1000
c000b710:	55                   	push   ebp
c000b711:	e8 58 fe ff ff       	call   c000b56e <VAS::getPageTableEntry(unsigned long)>
c000b716:	5a                   	pop    edx
c000b717:	59                   	pop    ecx
c000b718:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b71a:	21 f9                	and    ecx,edi
c000b71c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000b720:	39 f3                	cmp    ebx,esi
c000b722:	89 08                	mov    DWORD PTR [eax],ecx
c000b724:	75 e3                	jne    c000b709 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000b726:	5b                   	pop    ebx
c000b727:	5e                   	pop    esi
c000b728:	5f                   	pop    edi
c000b729:	5d                   	pop    ebp
c000b72a:	c3                   	ret    
c000b72b:	90                   	nop

c000b72c <VAS::setToWriteCombining(unsigned long, int)>:
c000b72c:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000b731:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b737:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c000b73e:	75 01                	jne    c000b741 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000b740:	c3                   	ret    
c000b741:	68 80 00 00 00       	push   0x80
c000b746:	6a ff                	push   0xffffffff
c000b748:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b74c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b750:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b754:	e8 93 ff ff ff       	call   c000b6ec <VAS::reflagRange(unsigned long, int, int, int)>
c000b759:	83 c4 14             	add    esp,0x14
c000b75c:	c3                   	ret    
c000b75d:	90                   	nop

c000b75e <VAS::mapOtherVASIn(bool, VAS*)>:
c000b75e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000b763:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b767:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000b76a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b76e:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000b771:	19 c0                	sbb    eax,eax
c000b773:	83 ca 03             	or     edx,0x3
c000b776:	83 e0 fc             	and    eax,0xfffffffc
c000b779:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000b780:	0f 20 d8             	mov    eax,cr3
c000b783:	0f 22 d8             	mov    cr3,eax
c000b786:	c3                   	ret    
c000b787:	90                   	nop

c000b788 <VAS::~VAS()>:
c000b788:	83 ec 2c             	sub    esp,0x2c
c000b78b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b793:	fa                   	cli    
c000b794:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c000b799:	40                   	inc    eax
c000b79a:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c000b79f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000b7a4:	8b 00                	mov    eax,DWORD PTR [eax]
c000b7a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b7a9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000b7af:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b7b3:	6a 01                	push   0x1
c000b7b5:	50                   	push   eax
c000b7b6:	e8 a3 ff ff ff       	call   c000b75e <VAS::mapOtherVASIn(bool, VAS*)>
c000b7bb:	83 c4 0c             	add    esp,0xc
c000b7be:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b7c6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000b7ce:	0f 8f d4 00 00 00    	jg     c000b8a8 <VAS::~VAS()+0x120>
c000b7d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7d8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b7db:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b7df:	c1 e2 02             	shl    edx,0x2
c000b7e2:	01 d0                	add    eax,edx
c000b7e4:	8b 00                	mov    eax,DWORD PTR [eax]
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7ee:	83 e0 01             	and    eax,0x1
c000b7f1:	0f 84 a8 00 00 00    	je     c000b89f <VAS::~VAS()+0x117>
c000b7f7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b7ff:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000b807:	7f 72                	jg     c000b87b <VAS::~VAS()+0xf3>
c000b809:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b80d:	c1 e0 0a             	shl    eax,0xa
c000b810:	89 c2                	mov    edx,eax
c000b812:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b816:	01 d0                	add    eax,edx
c000b818:	c1 e0 0c             	shl    eax,0xc
c000b81b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b81f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000b824:	8b 00                	mov    eax,DWORD PTR [eax]
c000b826:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b829:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000b82f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b833:	6a 01                	push   0x1
c000b835:	50                   	push   eax
c000b836:	e8 07 fd ff ff       	call   c000b542 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000b83b:	83 c4 0c             	add    esp,0xc
c000b83e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b842:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b846:	8b 00                	mov    eax,DWORD PTR [eax]
c000b848:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b84c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b850:	25 01 04 00 00       	and    eax,0x401
c000b855:	3d 01 04 00 00       	cmp    eax,0x401
c000b85a:	75 19                	jne    c000b875 <VAS::~VAS()+0xed>
c000b85c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b860:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b865:	83 ec 0c             	sub    esp,0xc
c000b868:	50                   	push   eax
c000b869:	e8 68 e2 ff ff       	call   c0009ad6 <Phys::freePage(unsigned long)>
c000b86e:	83 c4 10             	add    esp,0x10
c000b871:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b875:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b879:	eb 84                	jmp    c000b7ff <VAS::~VAS()+0x77>
c000b87b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b87f:	25 00 04 00 00       	and    eax,0x400
c000b884:	74 19                	je     c000b89f <VAS::~VAS()+0x117>
c000b886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b88a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b88f:	83 ec 0c             	sub    esp,0xc
c000b892:	50                   	push   eax
c000b893:	e8 3e e2 ff ff       	call   c0009ad6 <Phys::freePage(unsigned long)>
c000b898:	83 c4 10             	add    esp,0x10
c000b89b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b89f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000b8a3:	e9 1e ff ff ff       	jmp    c000b7c6 <VAS::~VAS()+0x3e>
c000b8a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b8af:	83 ec 0c             	sub    esp,0xc
c000b8b2:	50                   	push   eax
c000b8b3:	e8 d5 fc ff ff       	call   c000b58d <Virt::freeKernelVirtualPages(unsigned long)>
c000b8b8:	83 c4 10             	add    esp,0x10
c000b8bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8bf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b8c2:	83 ec 0c             	sub    esp,0xc
c000b8c5:	50                   	push   eax
c000b8c6:	e8 0b e2 ff ff       	call   c0009ad6 <Phys::freePage(unsigned long)>
c000b8cb:	83 c4 10             	add    esp,0x10
c000b8ce:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b8d2:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c000b8d7:	48                   	dec    eax
c000b8d8:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c000b8dd:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c000b8e2:	85 c0                	test   eax,eax
c000b8e4:	75 01                	jne    c000b8e7 <VAS::~VAS()+0x15f>
c000b8e6:	fb                   	sti    
c000b8e7:	90                   	nop
c000b8e8:	83 c4 2c             	add    esp,0x2c
c000b8eb:	c3                   	ret    

c000b8ec <VAS::mapPage(unsigned long, unsigned long, int)>:
c000b8ec:	55                   	push   ebp
c000b8ed:	57                   	push   edi
c000b8ee:	56                   	push   esi
c000b8ef:	53                   	push   ebx
c000b8f0:	83 ec 1c             	sub    esp,0x1c
c000b8f3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b8f7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000b8fb:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000b901:	77 0b                	ja     c000b90e <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000b903:	0f 20 d8             	mov    eax,cr3
c000b906:	0f 20 d8             	mov    eax,cr3
c000b909:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000b90c:	75 47                	jne    c000b955 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000b90e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b912:	09 d8                	or     eax,ebx
c000b914:	a9 ff 0f 00 00       	test   eax,0xfff
c000b919:	75 57                	jne    c000b972 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c000b91b:	89 de                	mov    esi,ebx
c000b91d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b920:	c1 ee 16             	shr    esi,0x16
c000b923:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000b92a:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000b92e:	74 54                	je     c000b984 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000b930:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b934:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000b93a:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000b93e:	c1 e6 0c             	shl    esi,0xc
c000b941:	c1 eb 0a             	shr    ebx,0xa
c000b944:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000b94a:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000b94d:	83 c4 1c             	add    esp,0x1c
c000b950:	5b                   	pop    ebx
c000b951:	5e                   	pop    esi
c000b952:	5f                   	pop    edi
c000b953:	5d                   	pop    ebp
c000b954:	c3                   	ret    
c000b955:	83 ec 0c             	sub    esp,0xc
c000b958:	68 14 0c 02 c0       	push   0xc0020c14
c000b95d:	e8 99 0b 00 00       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c000b962:	83 c4 10             	add    esp,0x10
c000b965:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b969:	09 d8                	or     eax,ebx
c000b96b:	a9 ff 0f 00 00       	test   eax,0xfff
c000b970:	74 a9                	je     c000b91b <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000b972:	83 ec 0c             	sub    esp,0xc
c000b975:	68 7c 0c 02 c0       	push   0xc0020c7c
c000b97a:	e8 52 68 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c000b97f:	83 c4 10             	add    esp,0x10
c000b982:	eb 97                	jmp    c000b91b <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000b984:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b988:	e8 ab e1 ff ff       	call   c0009b38 <Phys::allocatePage()>
c000b98d:	83 ec 0c             	sub    esp,0xc
c000b990:	89 c5                	mov    ebp,eax
c000b992:	8b 0d b4 32 02 c0    	mov    ecx,DWORD PTR ds:0xc00232b4
c000b998:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b99c:	6a 01                	push   0x1
c000b99e:	e8 f6 f8 ff ff       	call   c000b299 <Virt::allocateKernelVirtualPages(int)>
c000b9a3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000b9aa:	6a 01                	push   0x1
c000b9ac:	50                   	push   eax
c000b9ad:	55                   	push   ebp
c000b9ae:	81 cd 07 04 00 00    	or     ebp,0x407
c000b9b4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000b9b8:	51                   	push   ecx
c000b9b9:	e8 26 02 00 00       	call   c000bbe4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b9be:	83 c4 1c             	add    esp,0x1c
c000b9c1:	68 00 10 00 00       	push   0x1000
c000b9c6:	6a 00                	push   0x0
c000b9c8:	50                   	push   eax
c000b9c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9cd:	e8 d6 4a ff ff       	call   c00004a8 <memset>
c000b9d2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000b9d6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000b9d9:	e8 af fb ff ff       	call   c000b58d <Virt::freeKernelVirtualPages(unsigned long)>
c000b9de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b9e2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b9e5:	83 c4 10             	add    esp,0x10
c000b9e8:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000b9eb:	e9 40 ff ff ff       	jmp    c000b930 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000b9f0 <VAS::allocatePages(int, int)>:
c000b9f0:	55                   	push   ebp
c000b9f1:	57                   	push   edi
c000b9f2:	56                   	push   esi
c000b9f3:	53                   	push   ebx
c000b9f4:	83 ec 1c             	sub    esp,0x1c
c000b9f7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000b9fb:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000ba00:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ba06:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000ba0c:	83 e0 01             	and    eax,0x1
c000ba0f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000ba13:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ba17:	0f 85 cc 00 00 00    	jne    c000bae9 <VAS::allocatePages(int, int)+0xf9>
c000ba1d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000ba20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ba24:	85 c0                	test   eax,eax
c000ba26:	0f 84 a1 00 00 00    	je     c000bacd <VAS::allocatePages(int, int)+0xdd>
c000ba2c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ba30:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ba34:	c1 e6 0c             	shl    esi,0xc
c000ba37:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000ba3b:	85 c0                	test   eax,eax
c000ba3d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000ba40:	7e 33                	jle    c000ba75 <VAS::allocatePages(int, int)+0x85>
c000ba42:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000ba46:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ba4a:	81 cd 00 04 00 00    	or     ebp,0x400
c000ba50:	e8 e3 e0 ff ff       	call   c0009b38 <Phys::allocatePage()>
c000ba55:	55                   	push   ebp
c000ba56:	53                   	push   ebx
c000ba57:	50                   	push   eax
c000ba58:	57                   	push   edi
c000ba59:	e8 8e fe ff ff       	call   c000b8ec <VAS::mapPage(unsigned long, unsigned long, int)>
c000ba5e:	83 c4 10             	add    esp,0x10
c000ba61:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ba66:	74 03                	je     c000ba6b <VAS::allocatePages(int, int)+0x7b>
c000ba68:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ba6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ba71:	39 de                	cmp    esi,ebx
c000ba73:	75 db                	jne    c000ba50 <VAS::allocatePages(int, int)+0x60>
c000ba75:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ba7a:	75 12                	jne    c000ba8e <VAS::allocatePages(int, int)+0x9e>
c000ba7c:	0f 20 d8             	mov    eax,cr3
c000ba7f:	0f 22 d8             	mov    cr3,eax
c000ba82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ba86:	83 c4 1c             	add    esp,0x1c
c000ba89:	5b                   	pop    ebx
c000ba8a:	5e                   	pop    esi
c000ba8b:	5f                   	pop    edi
c000ba8c:	5d                   	pop    ebp
c000ba8d:	c3                   	ret    
c000ba8e:	c1 ee 0a             	shr    esi,0xa
c000ba91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ba95:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000ba9b:	c1 eb 0a             	shr    ebx,0xa
c000ba9e:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000baa4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000baaa:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bab0:	39 c3                	cmp    ebx,eax
c000bab2:	77 ce                	ja     c000ba82 <VAS::allocatePages(int, int)+0x92>
c000bab4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bab7:	81 c3 00 10 00 00    	add    ebx,0x1000
c000babd:	39 d8                	cmp    eax,ebx
c000babf:	73 f3                	jae    c000bab4 <VAS::allocatePages(int, int)+0xc4>
c000bac1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bac5:	83 c4 1c             	add    esp,0x1c
c000bac8:	5b                   	pop    ebx
c000bac9:	5e                   	pop    esi
c000baca:	5f                   	pop    edi
c000bacb:	5d                   	pop    ebp
c000bacc:	c3                   	ret    
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	68 a0 0c 02 c0       	push   0xc0020ca0
c000bad5:	e8 f7 66 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c000bada:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000badd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bae1:	83 c4 10             	add    esp,0x10
c000bae4:	e9 43 ff ff ff       	jmp    c000ba2c <VAS::allocatePages(int, int)+0x3c>
c000bae9:	83 ec 0c             	sub    esp,0xc
c000baec:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000baf0:	e8 a4 f7 ff ff       	call   c000b299 <Virt::allocateKernelVirtualPages(int)>
c000baf5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000baf9:	83 c4 10             	add    esp,0x10
c000bafc:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000bb01:	0f 87 9b 00 00 00    	ja     c000bba2 <VAS::allocatePages(int, int)+0x1b2>
c000bb07:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bb0b:	85 d2                	test   edx,edx
c000bb0d:	7e 3c                	jle    c000bb4b <VAS::allocatePages(int, int)+0x15b>
c000bb0f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bb13:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bb17:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bb1b:	c1 e5 0c             	shl    ebp,0xc
c000bb1e:	81 ce 00 04 00 00    	or     esi,0x400
c000bb24:	01 dd                	add    ebp,ebx
c000bb26:	e8 0d e0 ff ff       	call   c0009b38 <Phys::allocatePage()>
c000bb2b:	56                   	push   esi
c000bb2c:	53                   	push   ebx
c000bb2d:	50                   	push   eax
c000bb2e:	57                   	push   edi
c000bb2f:	e8 b8 fd ff ff       	call   c000b8ec <VAS::mapPage(unsigned long, unsigned long, int)>
c000bb34:	83 c4 10             	add    esp,0x10
c000bb37:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bb3c:	74 03                	je     c000bb41 <VAS::allocatePages(int, int)+0x151>
c000bb3e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb41:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bb47:	39 dd                	cmp    ebp,ebx
c000bb49:	75 db                	jne    c000bb26 <VAS::allocatePages(int, int)+0x136>
c000bb4b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bb50:	0f 84 26 ff ff ff    	je     c000ba7c <VAS::allocatePages(int, int)+0x8c>
c000bb56:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb5a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bb5e:	89 d3                	mov    ebx,edx
c000bb60:	c1 e0 0c             	shl    eax,0xc
c000bb63:	c1 eb 0a             	shr    ebx,0xa
c000bb66:	01 d0                	add    eax,edx
c000bb68:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bb6e:	c1 e8 0a             	shr    eax,0xa
c000bb71:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bb77:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bb7c:	2d 00 00 40 00       	sub    eax,0x400000
c000bb81:	39 c3                	cmp    ebx,eax
c000bb83:	0f 87 f9 fe ff ff    	ja     c000ba82 <VAS::allocatePages(int, int)+0x92>
c000bb89:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb8c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bb92:	39 d8                	cmp    eax,ebx
c000bb94:	73 f3                	jae    c000bb89 <VAS::allocatePages(int, int)+0x199>
c000bb96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb9a:	83 c4 1c             	add    esp,0x1c
c000bb9d:	5b                   	pop    ebx
c000bb9e:	5e                   	pop    esi
c000bb9f:	5f                   	pop    edi
c000bba0:	5d                   	pop    ebp
c000bba1:	c3                   	ret    
c000bba2:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000bba7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bbad:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c000bbb4:	0f 84 4d ff ff ff    	je     c000bb07 <VAS::allocatePages(int, int)+0x117>
c000bbba:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000bbc2:	e9 40 ff ff ff       	jmp    c000bb07 <VAS::allocatePages(int, int)+0x117>
c000bbc7:	90                   	nop

c000bbc8 <VAS::setCPUSpecific(unsigned long)>:
c000bbc8:	83 ec 0c             	sub    esp,0xc
c000bbcb:	6a 05                	push   0x5
c000bbcd:	68 00 00 40 c2       	push   0xc2400000
c000bbd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbda:	e8 0d fd ff ff       	call   c000b8ec <VAS::mapPage(unsigned long, unsigned long, int)>
c000bbdf:	83 c4 1c             	add    esp,0x1c
c000bbe2:	c3                   	ret    
c000bbe3:	90                   	nop

c000bbe4 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000bbe4:	55                   	push   ebp
c000bbe5:	57                   	push   edi
c000bbe6:	56                   	push   esi
c000bbe7:	53                   	push   ebx
c000bbe8:	83 ec 1c             	sub    esp,0x1c
c000bbeb:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000bbf0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bbf4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bbfa:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bbfe:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000bc04:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000bc08:	83 e0 01             	and    eax,0x1
c000bc0b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000bc0f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bc13:	85 c0                	test   eax,eax
c000bc15:	7e 39                	jle    c000bc50 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000bc17:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bc1b:	89 f3                	mov    ebx,esi
c000bc1d:	c1 e0 0c             	shl    eax,0xc
c000bc20:	01 f0                	add    eax,esi
c000bc22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc26:	55                   	push   ebp
c000bc27:	53                   	push   ebx
c000bc28:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bc2c:	29 f0                	sub    eax,esi
c000bc2e:	01 d8                	add    eax,ebx
c000bc30:	50                   	push   eax
c000bc31:	57                   	push   edi
c000bc32:	e8 b5 fc ff ff       	call   c000b8ec <VAS::mapPage(unsigned long, unsigned long, int)>
c000bc37:	83 c4 10             	add    esp,0x10
c000bc3a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bc3f:	74 03                	je     c000bc44 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000bc41:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bc44:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bc4a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000bc4e:	75 d6                	jne    c000bc26 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000bc50:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bc55:	75 10                	jne    c000bc67 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000bc57:	0f 20 d8             	mov    eax,cr3
c000bc5a:	0f 22 d8             	mov    cr3,eax
c000bc5d:	83 c4 1c             	add    esp,0x1c
c000bc60:	89 f0                	mov    eax,esi
c000bc62:	5b                   	pop    ebx
c000bc63:	5e                   	pop    esi
c000bc64:	5f                   	pop    edi
c000bc65:	5d                   	pop    ebp
c000bc66:	c3                   	ret    
c000bc67:	89 f3                	mov    ebx,esi
c000bc69:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bc6d:	c1 eb 0a             	shr    ebx,0xa
c000bc70:	c1 e0 0c             	shl    eax,0xc
c000bc73:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bc79:	01 f0                	add    eax,esi
c000bc7b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bc81:	c1 e8 0a             	shr    eax,0xa
c000bc84:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bc89:	2d 00 00 40 00       	sub    eax,0x400000
c000bc8e:	39 c3                	cmp    ebx,eax
c000bc90:	77 cb                	ja     c000bc5d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000bc92:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bc95:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bc9b:	39 d8                	cmp    eax,ebx
c000bc9d:	73 f3                	jae    c000bc92 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000bc9f:	83 c4 1c             	add    esp,0x1c
c000bca2:	89 f0                	mov    eax,esi
c000bca4:	5b                   	pop    ebx
c000bca5:	5e                   	pop    esi
c000bca6:	5f                   	pop    edi
c000bca7:	5d                   	pop    ebp
c000bca8:	c3                   	ret    
c000bca9:	90                   	nop

c000bcaa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000bcaa:	55                   	push   ebp
c000bcab:	57                   	push   edi
c000bcac:	56                   	push   esi
c000bcad:	53                   	push   ebx
c000bcae:	83 ec 1c             	sub    esp,0x1c
c000bcb1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcb5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bcb9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000bcbd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000bcc1:	a9 ff 0f 00 00       	test   eax,0xfff
c000bcc6:	75 4a                	jne    c000bd12 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000bcc8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000bccc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bccf:	c1 eb 16             	shr    ebx,0x16
c000bcd2:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000bcd9:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000bcdd:	74 4d                	je     c000bd2c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000bcdf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bce3:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000bce7:	c1 e8 0a             	shr    eax,0xa
c000bcea:	80 fa 01             	cmp    dl,0x1
c000bced:	19 d2                	sbb    edx,edx
c000bcef:	c1 e3 0c             	shl    ebx,0xc
c000bcf2:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000bcf6:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000bcfc:	25 fc 0f 00 00       	and    eax,0xffc
c000bd01:	01 d8                	add    eax,ebx
c000bd03:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000bd0a:	83 c4 1c             	add    esp,0x1c
c000bd0d:	5b                   	pop    ebx
c000bd0e:	5e                   	pop    esi
c000bd0f:	5f                   	pop    edi
c000bd10:	5d                   	pop    ebp
c000bd11:	c3                   	ret    
c000bd12:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bd16:	83 ec 0c             	sub    esp,0xc
c000bd19:	68 cc 0c 02 c0       	push   0xc0020ccc
c000bd1e:	e8 ae 64 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c000bd23:	83 c4 10             	add    esp,0x10
c000bd26:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bd2a:	eb 9c                	jmp    c000bcc8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000bd2c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd30:	e8 03 de ff ff       	call   c0009b38 <Phys::allocatePage()>
c000bd35:	83 ec 0c             	sub    esp,0xc
c000bd38:	89 c5                	mov    ebp,eax
c000bd3a:	8b 0d b4 32 02 c0    	mov    ecx,DWORD PTR ds:0xc00232b4
c000bd40:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000bd44:	6a 01                	push   0x1
c000bd46:	e8 4e f5 ff ff       	call   c000b299 <Virt::allocateKernelVirtualPages(int)>
c000bd4b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000bd52:	6a 01                	push   0x1
c000bd54:	50                   	push   eax
c000bd55:	55                   	push   ebp
c000bd56:	81 cd 07 04 00 00    	or     ebp,0x407
c000bd5c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000bd60:	51                   	push   ecx
c000bd61:	e8 7e fe ff ff       	call   c000bbe4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000bd66:	83 c4 1c             	add    esp,0x1c
c000bd69:	68 00 10 00 00       	push   0x1000
c000bd6e:	6a 00                	push   0x0
c000bd70:	50                   	push   eax
c000bd71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd75:	e8 2e 47 ff ff       	call   c00004a8 <memset>
c000bd7a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000bd7e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000bd81:	e8 07 f8 ff ff       	call   c000b58d <Virt::freeKernelVirtualPages(unsigned long)>
c000bd86:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bd89:	83 c4 10             	add    esp,0x10
c000bd8c:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000bd8f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd93:	e9 47 ff ff ff       	jmp    c000bcdf <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000bd98 <VAS::VAS(bool)>:
c000bd98:	53                   	push   ebx
c000bd99:	83 ec 28             	sub    esp,0x28
c000bd9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bda0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000bda4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bda8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bdaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bdb3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bdba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bdbe:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000bdc2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000bdc5:	e8 6e dd ff ff       	call   c0009b38 <Phys::allocatePage()>
c000bdca:	89 c2                	mov    edx,eax
c000bdcc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bdd0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000bdd3:	8b 1d b4 32 02 c0    	mov    ebx,DWORD PTR ds:0xc00232b4
c000bdd9:	83 ec 0c             	sub    esp,0xc
c000bddc:	6a 01                	push   0x1
c000bdde:	e8 b6 f4 ff ff       	call   c000b299 <Virt::allocateKernelVirtualPages(int)>
c000bde3:	83 c4 10             	add    esp,0x10
c000bde6:	89 c2                	mov    edx,eax
c000bde8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bdec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bdef:	83 ec 0c             	sub    esp,0xc
c000bdf2:	6a 03                	push   0x3
c000bdf4:	6a 01                	push   0x1
c000bdf6:	52                   	push   edx
c000bdf7:	50                   	push   eax
c000bdf8:	53                   	push   ebx
c000bdf9:	e8 e6 fd ff ff       	call   c000bbe4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000bdfe:	83 c4 20             	add    esp,0x20
c000be01:	89 c2                	mov    edx,eax
c000be03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000be07:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000be0a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000be12:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000be1a:	7f 1c                	jg     c000be38 <VAS::VAS(bool)+0xa0>
c000be1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000be20:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000be23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be27:	c1 e2 02             	shl    edx,0x2
c000be2a:	01 d0                	add    eax,edx
c000be2c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000be32:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000be36:	eb da                	jmp    c000be12 <VAS::VAS(bool)+0x7a>
c000be38:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000be40:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000be48:	7f 7a                	jg     c000bec4 <VAS::VAS(bool)+0x12c>
c000be4a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be4e:	2d 00 02 00 00       	sub    eax,0x200
c000be53:	c1 e0 0c             	shl    eax,0xc
c000be56:	83 c8 03             	or     eax,0x3
c000be59:	89 c2                	mov    edx,eax
c000be5b:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000be60:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000be66:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000be6c:	83 e0 10             	and    eax,0x10
c000be6f:	84 c0                	test   al,al
c000be71:	74 07                	je     c000be7a <VAS::VAS(bool)+0xe2>
c000be73:	b8 00 01 00 00       	mov    eax,0x100
c000be78:	eb 05                	jmp    c000be7f <VAS::VAS(bool)+0xe7>
c000be7a:	b8 00 00 00 00       	mov    eax,0x0
c000be7f:	09 d0                	or     eax,edx
c000be81:	89 c1                	mov    ecx,eax
c000be83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000be87:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000be8a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000be8e:	c1 e2 02             	shl    edx,0x2
c000be91:	01 d0                	add    eax,edx
c000be93:	89 ca                	mov    edx,ecx
c000be95:	89 10                	mov    DWORD PTR [eax],edx
c000be97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be9b:	2d 40 03 00 00       	sub    eax,0x340
c000bea0:	83 f8 7f             	cmp    eax,0x7f
c000bea3:	77 16                	ja     c000bebb <VAS::VAS(bool)+0x123>
c000bea5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bea9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000beac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000beb0:	c1 e2 02             	shl    edx,0x2
c000beb3:	01 d0                	add    eax,edx
c000beb5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000bebb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bebf:	e9 7c ff ff ff       	jmp    c000be40 <VAS::VAS(bool)+0xa8>
c000bec4:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000bec9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000becf:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000bed5:	83 e0 10             	and    eax,0x10
c000bed8:	84 c0                	test   al,al
c000beda:	74 07                	je     c000bee3 <VAS::VAS(bool)+0x14b>
c000bedc:	b8 03 41 00 00       	mov    eax,0x4103
c000bee1:	eb 05                	jmp    c000bee8 <VAS::VAS(bool)+0x150>
c000bee3:	b8 03 40 00 00       	mov    eax,0x4003
c000bee8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000beec:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000beef:	81 c2 20 0c 00 00    	add    edx,0xc20
c000bef5:	89 02                	mov    DWORD PTR [edx],eax
c000bef7:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000befc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bf02:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000bf08:	83 ec 08             	sub    esp,0x8
c000bf0b:	50                   	push   eax
c000bf0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bf10:	e8 b3 fc ff ff       	call   c000bbc8 <VAS::setCPUSpecific(unsigned long)>
c000bf15:	83 c4 10             	add    esp,0x10
c000bf18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf1c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000bf1f:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000bf24:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bf2a:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000bf30:	83 e0 10             	and    eax,0x10
c000bf33:	84 c0                	test   al,al
c000bf35:	74 07                	je     c000bf3e <VAS::VAS(bool)+0x1a6>
c000bf37:	b8 00 01 00 00       	mov    eax,0x100
c000bf3c:	eb 05                	jmp    c000bf43 <VAS::VAS(bool)+0x1ab>
c000bf3e:	b8 00 00 00 00       	mov    eax,0x0
c000bf43:	09 c2                	or     edx,eax
c000bf45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf49:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf4c:	05 fc 0f 00 00       	add    eax,0xffc
c000bf51:	83 ca 03             	or     edx,0x3
c000bf54:	89 10                	mov    DWORD PTR [eax],edx
c000bf56:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000bf5b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bf61:	83 ec 0c             	sub    esp,0xc
c000bf64:	50                   	push   eax
c000bf65:	e8 48 1c 00 00       	call   c000dbb2 <Device::getName()>
c000bf6a:	83 c4 10             	add    esp,0x10
c000bf6d:	83 ec 08             	sub    esp,0x8
c000bf70:	68 6f 0d 02 c0       	push   0xc0020d6f
c000bf75:	50                   	push   eax
c000bf76:	e8 75 46 ff ff       	call   c00005f0 <strcmp>
c000bf7b:	83 c4 10             	add    esp,0x10
c000bf7e:	85 c0                	test   eax,eax
c000bf80:	0f 94 c0             	sete   al
c000bf83:	84 c0                	test   al,al
c000bf85:	0f 84 87 00 00 00    	je     c000c012 <VAS::VAS(bool)+0x27a>
c000bf8b:	fa                   	cli    
c000bf8c:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c000bf91:	40                   	inc    eax
c000bf92:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c000bf97:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000bf9c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bfa2:	05 7c 09 00 00       	add    eax,0x97c
c000bfa7:	83 ec 0c             	sub    esp,0xc
c000bfaa:	50                   	push   eax
c000bfab:	e8 be d2 ff ff       	call   c000926e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000bfb0:	83 c4 10             	add    esp,0x10
c000bfb3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bfb8:	89 c3                	mov    ebx,eax
c000bfba:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000bfbf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bfc5:	05 7c 09 00 00       	add    eax,0x97c
c000bfca:	83 ec 0c             	sub    esp,0xc
c000bfcd:	50                   	push   eax
c000bfce:	e8 9b d2 ff ff       	call   c000926e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000bfd3:	83 c4 10             	add    esp,0x10
c000bfd6:	83 ec 08             	sub    esp,0x8
c000bfd9:	50                   	push   eax
c000bfda:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bfde:	e8 8b f5 ff ff       	call   c000b56e <VAS::getPageTableEntry(unsigned long)>
c000bfe3:	83 c4 10             	add    esp,0x10
c000bfe6:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfe8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bfed:	6a 11                	push   0x11
c000bfef:	53                   	push   ebx
c000bff0:	50                   	push   eax
c000bff1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bff5:	e8 f2 f8 ff ff       	call   c000b8ec <VAS::mapPage(unsigned long, unsigned long, int)>
c000bffa:	83 c4 10             	add    esp,0x10
c000bffd:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c000c002:	48                   	dec    eax
c000c003:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c000c008:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c000c00d:	85 c0                	test   eax,eax
c000c00f:	75 01                	jne    c000c012 <VAS::VAS(bool)+0x27a>
c000c011:	fb                   	sti    
c000c012:	90                   	nop
c000c013:	83 c4 28             	add    esp,0x28
c000c016:	5b                   	pop    ebx
c000c017:	c3                   	ret    

c000c018 <VAS::VAS()>:
c000c018:	53                   	push   ebx
c000c019:	83 ec 18             	sub    esp,0x18
c000c01c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c020:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c027:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c02b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c036:	a3 b4 32 02 c0       	mov    ds:0xc00232b4,eax
c000c03b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c03f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000c043:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c047:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000c04a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c04e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000c055:	c7 44 24 0c 14 00 00 00 	mov    DWORD PTR [esp+0xc],0x14
c000c05d:	83 ec 0c             	sub    esp,0xc
c000c060:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c064:	e8 08 d7 ff ff       	call   c0009771 <malloc>
c000c069:	83 c4 10             	add    esp,0x10
c000c06c:	89 c3                	mov    ebx,eax
c000c06e:	83 ec 08             	sub    esp,0x8
c000c071:	6a 01                	push   0x1
c000c073:	53                   	push   ebx
c000c074:	e8 1f fd ff ff       	call   c000bd98 <VAS::VAS(bool)>
c000c079:	83 c4 10             	add    esp,0x10
c000c07c:	89 1d ac 32 02 c0    	mov    DWORD PTR ds:0xc00232ac,ebx
c000c082:	90                   	nop
c000c083:	83 c4 18             	add    esp,0x18
c000c086:	5b                   	pop    ebx
c000c087:	c3                   	ret    

c000c088 <VAS::evict(unsigned long)>:
c000c088:	55                   	push   ebp
c000c089:	57                   	push   edi
c000c08a:	56                   	push   esi
c000c08b:	53                   	push   ebx
c000c08c:	83 ec 1c             	sub    esp,0x1c
c000c08f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c093:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c097:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c09b:	e8 3a f3 ff ff       	call   c000b3da <Virt::allocateSwapfilePage()>
c000c0a0:	89 c7                	mov    edi,eax
c000c0a2:	a1 6c 2b 02 c0       	mov    eax,ds:0xc0022b6c
c000c0a7:	85 c0                	test   eax,eax
c000c0a9:	7e 3d                	jle    c000c0e8 <VAS::evict(unsigned long)+0x60>
c000c0ab:	89 ee                	mov    esi,ebp
c000c0ad:	31 db                	xor    ebx,ebx
c000c0af:	83 ec 0c             	sub    esp,0xc
c000c0b2:	57                   	push   edi
c000c0b3:	e8 10 f3 ff ff       	call   c000b3c8 <Virt::swapIDToSector(unsigned long)>
c000c0b8:	89 34 24             	mov    DWORD PTR [esp],esi
c000c0bb:	01 d8                	add    eax,ebx
c000c0bd:	6a 01                	push   0x1
c000c0bf:	31 d2                	xor    edx,edx
c000c0c1:	43                   	inc    ebx
c000c0c2:	52                   	push   edx
c000c0c3:	81 c6 00 02 00 00    	add    esi,0x200
c000c0c9:	50                   	push   eax
c000c0ca:	0f be 05 78 2b 02 c0 	movsx  eax,BYTE PTR ds:0xc0022b78
c000c0d1:	ff 34 85 3c 56 02 c0 	push   DWORD PTR [eax*4-0x3ffda9c4]
c000c0d8:	e8 2d 2b 00 00       	call   c000ec0a <LogicalDisk::write(unsigned long long, int, void*)>
c000c0dd:	83 c4 20             	add    esp,0x20
c000c0e0:	39 1d 6c 2b 02 c0    	cmp    DWORD PTR ds:0xc0022b6c,ebx
c000c0e6:	7f c7                	jg     c000c0af <VAS::evict(unsigned long)+0x27>
c000c0e8:	83 ec 08             	sub    esp,0x8
c000c0eb:	c1 e7 0b             	shl    edi,0xb
c000c0ee:	55                   	push   ebp
c000c0ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c0f3:	e8 76 f4 ff ff       	call   c000b56e <VAS::getPageTableEntry(unsigned long)>
c000c0f8:	8b 10                	mov    edx,DWORD PTR [eax]
c000c0fa:	89 d1                	mov    ecx,edx
c000c0fc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c102:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000c108:	09 cf                	or     edi,ecx
c000c10a:	89 38                	mov    DWORD PTR [eax],edi
c000c10c:	89 14 24             	mov    DWORD PTR [esp],edx
c000c10f:	ff 05 a8 32 02 c0    	inc    DWORD PTR ds:0xc00232a8
c000c115:	e8 bc d9 ff ff       	call   c0009ad6 <Phys::freePage(unsigned long)>
c000c11a:	0f 20 d8             	mov    eax,cr3
c000c11d:	0f 22 d8             	mov    cr3,eax
c000c120:	a1 a4 32 02 c0       	mov    eax,ds:0xc00232a4
c000c125:	c7 44 24 40 7d 0d 02 c0 	mov    DWORD PTR [esp+0x40],0xc0020d7d
c000c12d:	8d 50 01             	lea    edx,[eax+0x1]
c000c130:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c134:	89 15 a4 32 02 c0    	mov    DWORD PTR ds:0xc00232a4,edx
c000c13a:	83 c4 2c             	add    esp,0x2c
c000c13d:	5b                   	pop    ebx
c000c13e:	5e                   	pop    esi
c000c13f:	5f                   	pop    edi
c000c140:	5d                   	pop    ebp
c000c141:	e9 b5 03 00 00       	jmp    c000c4fb <Dbg::kprintf(char const*, ...)>

c000c146 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c146:	55                   	push   ebp
c000c147:	57                   	push   edi
c000c148:	56                   	push   esi
c000c149:	53                   	push   ebx
c000c14a:	83 ec 14             	sub    esp,0x14
c000c14d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000c151:	53                   	push   ebx
c000c152:	68 8e 0d 02 c0       	push   0xc0020d8e
c000c157:	e8 9f 03 00 00       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c000c15c:	83 c4 10             	add    esp,0x10
c000c15f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c165:	74 20                	je     c000c187 <VAS::tryLoadBackOffDisk(unsigned long)+0x41>
c000c167:	83 ec 08             	sub    esp,0x8
c000c16a:	53                   	push   ebx
c000c16b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c16f:	e8 fa f3 ff ff       	call   c000b56e <VAS::getPageTableEntry(unsigned long)>
c000c174:	83 c4 10             	add    esp,0x10
c000c177:	89 c6                	mov    esi,eax
c000c179:	85 c0                	test   eax,eax
c000c17b:	74 0a                	je     c000c187 <VAS::tryLoadBackOffDisk(unsigned long)+0x41>
c000c17d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000c17f:	f7 c5 01 00 00 00    	test   ebp,0x1
c000c185:	74 0a                	je     c000c191 <VAS::tryLoadBackOffDisk(unsigned long)+0x4b>
c000c187:	31 c0                	xor    eax,eax
c000c189:	83 c4 0c             	add    esp,0xc
c000c18c:	5b                   	pop    ebx
c000c18d:	5e                   	pop    esi
c000c18e:	5f                   	pop    edi
c000c18f:	5d                   	pop    ebp
c000c190:	c3                   	ret    
c000c191:	e8 a2 d9 ff ff       	call   c0009b38 <Phys::allocatePage()>
c000c196:	c1 ed 0b             	shr    ebp,0xb
c000c199:	8b 16                	mov    edx,DWORD PTR [esi]
c000c19b:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c1a1:	09 c2                	or     edx,eax
c000c1a3:	81 ca 01 08 00 00    	or     edx,0x801
c000c1a9:	89 16                	mov    DWORD PTR [esi],edx
c000c1ab:	8b 0d 6c 2b 02 c0    	mov    ecx,DWORD PTR ds:0xc0022b6c
c000c1b1:	85 c9                	test   ecx,ecx
c000c1b3:	7e 3d                	jle    c000c1f2 <VAS::tryLoadBackOffDisk(unsigned long)+0xac>
c000c1b5:	89 df                	mov    edi,ebx
c000c1b7:	31 f6                	xor    esi,esi
c000c1b9:	83 ec 0c             	sub    esp,0xc
c000c1bc:	55                   	push   ebp
c000c1bd:	e8 06 f2 ff ff       	call   c000b3c8 <Virt::swapIDToSector(unsigned long)>
c000c1c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c1c5:	01 f0                	add    eax,esi
c000c1c7:	6a 01                	push   0x1
c000c1c9:	31 d2                	xor    edx,edx
c000c1cb:	46                   	inc    esi
c000c1cc:	52                   	push   edx
c000c1cd:	81 c7 00 02 00 00    	add    edi,0x200
c000c1d3:	50                   	push   eax
c000c1d4:	0f be 05 78 2b 02 c0 	movsx  eax,BYTE PTR ds:0xc0022b78
c000c1db:	ff 34 85 3c 56 02 c0 	push   DWORD PTR [eax*4-0x3ffda9c4]
c000c1e2:	e8 b7 29 00 00       	call   c000eb9e <LogicalDisk::read(unsigned long long, int, void*)>
c000c1e7:	83 c4 20             	add    esp,0x20
c000c1ea:	39 35 6c 2b 02 c0    	cmp    DWORD PTR ds:0xc0022b6c,esi
c000c1f0:	7f c7                	jg     c000c1b9 <VAS::tryLoadBackOffDisk(unsigned long)+0x73>
c000c1f2:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c000c1f7:	48                   	dec    eax
c000c1f8:	52                   	push   edx
c000c1f9:	a3 a8 32 02 c0       	mov    ds:0xc00232a8,eax
c000c1fe:	50                   	push   eax
c000c1ff:	53                   	push   ebx
c000c200:	68 a1 0d 02 c0       	push   0xc0020da1
c000c205:	e8 f1 02 00 00       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c000c20a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c20d:	e8 98 f1 ff ff       	call   c000b3aa <Virt::freeSwapfilePage(unsigned long)>
c000c212:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c000c217:	83 c4 10             	add    esp,0x10
c000c21a:	48                   	dec    eax
c000c21b:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c000c220:	85 c0                	test   eax,eax
c000c222:	75 01                	jne    c000c225 <VAS::tryLoadBackOffDisk(unsigned long)+0xdf>
c000c224:	fb                   	sti    
c000c225:	0f 20 d8             	mov    eax,cr3
c000c228:	0f 22 d8             	mov    cr3,eax
c000c22b:	b0 01                	mov    al,0x1
c000c22d:	e9 57 ff ff ff       	jmp    c000c189 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>

c000c232 <VAS::scanForEviction()>:
c000c232:	57                   	push   edi
c000c233:	31 ff                	xor    edi,edi
c000c235:	56                   	push   esi
c000c236:	53                   	push   ebx
c000c237:	83 ec 10             	sub    esp,0x10
c000c23a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c23e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c241:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c247:	75 0e                	jne    c000c257 <VAS::scanForEviction()+0x25>
c000c249:	89 da                	mov    edx,ebx
c000c24b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c24e:	c1 ea 16             	shr    edx,0x16
c000c251:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c255:	74 4e                	je     c000c2a5 <VAS::scanForEviction()+0x73>
c000c257:	53                   	push   ebx
c000c258:	56                   	push   esi
c000c259:	e8 10 f3 ff ff       	call   c000b56e <VAS::getPageTableEntry(unsigned long)>
c000c25e:	5a                   	pop    edx
c000c25f:	8b 10                	mov    edx,DWORD PTR [eax]
c000c261:	59                   	pop    ecx
c000c262:	89 d1                	mov    ecx,edx
c000c264:	81 e1 01 08 00 00    	and    ecx,0x801
c000c26a:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c270:	74 3e                	je     c000c2b0 <VAS::scanForEviction()+0x7e>
c000c272:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c278:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c27e:	76 2b                	jbe    c000c2ab <VAS::scanForEviction()+0x79>
c000c280:	47                   	inc    edi
c000c281:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c288:	83 ff 03             	cmp    edi,0x3
c000c28b:	74 32                	je     c000c2bf <VAS::scanForEviction()+0x8d>
c000c28d:	31 db                	xor    ebx,ebx
c000c28f:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c295:	75 c0                	jne    c000c257 <VAS::scanForEviction()+0x25>
c000c297:	89 da                	mov    edx,ebx
c000c299:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c29c:	c1 ea 16             	shr    edx,0x16
c000c29f:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c2a3:	75 b2                	jne    c000c257 <VAS::scanForEviction()+0x25>
c000c2a5:	81 c3 00 00 40 00    	add    ebx,0x400000
c000c2ab:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000c2ae:	eb 91                	jmp    c000c241 <VAS::scanForEviction()+0xf>
c000c2b0:	f6 c2 20             	test   dl,0x20
c000c2b3:	74 13                	je     c000c2c8 <VAS::scanForEviction()+0x96>
c000c2b5:	83 e2 df             	and    edx,0xffffffdf
c000c2b8:	89 10                	mov    DWORD PTR [eax],edx
c000c2ba:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c2bd:	eb b3                	jmp    c000c272 <VAS::scanForEviction()+0x40>
c000c2bf:	83 c4 10             	add    esp,0x10
c000c2c2:	31 c0                	xor    eax,eax
c000c2c4:	5b                   	pop    ebx
c000c2c5:	5e                   	pop    esi
c000c2c6:	5f                   	pop    edi
c000c2c7:	c3                   	ret    
c000c2c8:	83 ec 08             	sub    esp,0x8
c000c2cb:	89 d0                	mov    eax,edx
c000c2cd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c2d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c2d6:	53                   	push   ebx
c000c2d7:	68 b6 0d 02 c0       	push   0xc0020db6
c000c2dc:	e8 1a 02 00 00       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c000c2e1:	58                   	pop    eax
c000c2e2:	5a                   	pop    edx
c000c2e3:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c2e6:	56                   	push   esi
c000c2e7:	e8 9c fd ff ff       	call   c000c088 <VAS::evict(unsigned long)>
c000c2ec:	59                   	pop    ecx
c000c2ed:	5b                   	pop    ebx
c000c2ee:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c2f1:	68 ca 0d 02 c0       	push   0xc0020dca
c000c2f6:	e8 00 02 00 00       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c000c2fb:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000c302:	83 c4 10             	add    esp,0x10
c000c305:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c309:	83 c4 10             	add    esp,0x10
c000c30c:	5b                   	pop    ebx
c000c30d:	5e                   	pop    esi
c000c30e:	5f                   	pop    edi
c000c30f:	c3                   	ret    

c000c310 <mapVASFirstTime>:
c000c310:	55                   	push   ebp
c000c311:	57                   	push   edi
c000c312:	56                   	push   esi
c000c313:	53                   	push   ebx
c000c314:	83 ec 0c             	sub    esp,0xc
c000c317:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c31c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000c31f:	4a                   	dec    edx
c000c320:	0f 84 8c 00 00 00    	je     c000c3b2 <mapVASFirstTime+0xa2>
c000c326:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000c329:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000c32c:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000c331:	c1 e5 15             	shl    ebp,0x15
c000c334:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000c339:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000c33f:	29 eb                	sub    ebx,ebp
c000c341:	29 ef                	sub    edi,ebp
c000c343:	e8 f0 d7 ff ff       	call   c0009b38 <Phys::allocatePage()>
c000c348:	83 ec 0c             	sub    esp,0xc
c000c34b:	68 03 04 00 00       	push   0x403
c000c350:	6a 01                	push   0x1
c000c352:	53                   	push   ebx
c000c353:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c359:	50                   	push   eax
c000c35a:	56                   	push   esi
c000c35b:	e8 84 f8 ff ff       	call   c000bbe4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c360:	83 c4 20             	add    esp,0x20
c000c363:	39 fb                	cmp    ebx,edi
c000c365:	75 dc                	jne    c000c343 <mapVASFirstTime+0x33>
c000c367:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000c36c:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000c371:	29 eb                	sub    ebx,ebp
c000c373:	29 ef                	sub    edi,ebp
c000c375:	e8 be d7 ff ff       	call   c0009b38 <Phys::allocatePage()>
c000c37a:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c37e:	19 d2                	sbb    edx,edx
c000c380:	83 ec 0c             	sub    esp,0xc
c000c383:	83 e2 04             	and    edx,0x4
c000c386:	81 c2 03 04 00 00    	add    edx,0x403
c000c38c:	52                   	push   edx
c000c38d:	6a 01                	push   0x1
c000c38f:	53                   	push   ebx
c000c390:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c396:	50                   	push   eax
c000c397:	56                   	push   esi
c000c398:	e8 47 f8 ff ff       	call   c000bbe4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c39d:	83 c4 20             	add    esp,0x20
c000c3a0:	39 df                	cmp    edi,ebx
c000c3a2:	75 d1                	jne    c000c375 <mapVASFirstTime+0x65>
c000c3a4:	0f 20 d8             	mov    eax,cr3
c000c3a7:	0f 22 d8             	mov    cr3,eax
c000c3aa:	83 c4 0c             	add    esp,0xc
c000c3ad:	5b                   	pop    ebx
c000c3ae:	5e                   	pop    esi
c000c3af:	5f                   	pop    edi
c000c3b0:	5d                   	pop    ebp
c000c3b1:	c3                   	ret    
c000c3b2:	83 ec 0c             	sub    esp,0xc
c000c3b5:	68 dd 0d 02 c0       	push   0xc0020ddd
c000c3ba:	e8 3c 01 00 00       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c000c3bf:	83 c4 10             	add    esp,0x10
c000c3c2:	83 c4 0c             	add    esp,0xc
c000c3c5:	5b                   	pop    ebx
c000c3c6:	5e                   	pop    esi
c000c3c7:	5f                   	pop    edi
c000c3c8:	5d                   	pop    ebp
c000c3c9:	c3                   	ret    

c000c3ca <__cxa_atexit>:
c000c3ca:	31 c0                	xor    eax,eax
c000c3cc:	c3                   	ret    

c000c3cd <__cxa_finalize>:
c000c3cd:	c3                   	ret    

c000c3ce <__stack_chk_fail>:
c000c3ce:	55                   	push   ebp
c000c3cf:	89 e5                	mov    ebp,esp
c000c3d1:	83 ec 10             	sub    esp,0x10
c000c3d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c3d7:	68 f6 0d 02 c0       	push   0xc0020df6
c000c3dc:	e8 1a 01 00 00       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c000c3e1:	58                   	pop    eax
c000c3e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c3e5:	5a                   	pop    edx
c000c3e6:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c3e9:	68 f6 0d 02 c0       	push   0xc0020df6
c000c3ee:	e8 08 01 00 00       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c000c3f3:	c7 04 24 fe 0d 02 c0 	mov    DWORD PTR [esp],0xc0020dfe
c000c3fa:	e8 d2 5d 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c000c3ff:	83 c4 10             	add    esp,0x10
c000c402:	c9                   	leave  
c000c403:	c3                   	ret    

c000c404 <__cxa_pure_virtual>:
c000c404:	83 ec 18             	sub    esp,0x18
c000c407:	68 16 0e 02 c0       	push   0xc0020e16
c000c40c:	e8 c0 5d 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c000c411:	83 c4 1c             	add    esp,0x1c
c000c414:	c3                   	ret    

c000c415 <operator new[](unsigned long)>:
c000c415:	e9 57 d3 ff ff       	jmp    c0009771 <malloc>

c000c41a <operator delete(void*, unsigned long)>:
c000c41a:	e9 72 d3 ff ff       	jmp    c0009791 <rfree>

c000c41f <operator delete[](void*)>:
c000c41f:	e9 6d d3 ff ff       	jmp    c0009791 <rfree>

c000c424 <operator delete[](void*, unsigned long)>:
c000c424:	e9 68 d3 ff ff       	jmp    c0009791 <rfree>

c000c429 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000c429:	55                   	push   ebp
c000c42a:	b9 11 00 00 00       	mov    ecx,0x11
c000c42f:	57                   	push   edi
c000c430:	56                   	push   esi
c000c431:	be 2a 0a 02 c0       	mov    esi,0xc0020a2a
c000c436:	53                   	push   ebx
c000c437:	83 ec 20             	sub    esp,0x20
c000c43a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c43e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000c442:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000c446:	fc                   	cld    
c000c447:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c449:	89 ee                	mov    esi,ebp
c000c44b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c44f:	eb 02                	jmp    c000c453 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000c451:	89 c6                	mov    esi,eax
c000c453:	31 d2                	xor    edx,edx
c000c455:	41                   	inc    ecx
c000c456:	89 f0                	mov    eax,esi
c000c458:	f7 f3                	div    ebx
c000c45a:	39 de                	cmp    esi,ebx
c000c45c:	73 f3                	jae    c000c451 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000c45e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000c461:	eb 02                	jmp    c000c465 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000c463:	89 c5                	mov    ebp,eax
c000c465:	31 d2                	xor    edx,edx
c000c467:	49                   	dec    ecx
c000c468:	89 e8                	mov    eax,ebp
c000c46a:	f7 f3                	div    ebx
c000c46c:	39 dd                	cmp    ebp,ebx
c000c46e:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000c472:	88 11                	mov    BYTE PTR [ecx],dl
c000c474:	73 ed                	jae    c000c463 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000c476:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c47a:	83 c4 20             	add    esp,0x20
c000c47d:	5b                   	pop    ebx
c000c47e:	5e                   	pop    esi
c000c47f:	5f                   	pop    edi
c000c480:	5d                   	pop    ebp
c000c481:	c3                   	ret    

c000c482 <Dbg::logc(char)>:
c000c482:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c486:	f6 05 e0 31 02 c0 10 	test   BYTE PTR ds:0xc00231e0,0x10
c000c48d:	75 12                	jne    c000c4a1 <Dbg::logc(char)+0x1f>
c000c48f:	ba fd 03 00 00       	mov    edx,0x3fd
c000c494:	ec                   	in     al,dx
c000c495:	a8 20                	test   al,0x20
c000c497:	74 fb                	je     c000c494 <Dbg::logc(char)+0x12>
c000c499:	ba f8 03 00 00       	mov    edx,0x3f8
c000c49e:	88 c8                	mov    al,cl
c000c4a0:	ee                   	out    dx,al
c000c4a1:	c3                   	ret    

c000c4a2 <Dbg::logs(char*)>:
c000c4a2:	53                   	push   ebx
c000c4a3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000c4a7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000c4aa:	84 c0                	test   al,al
c000c4ac:	74 0f                	je     c000c4bd <Dbg::logs(char*)+0x1b>
c000c4ae:	50                   	push   eax
c000c4af:	43                   	inc    ebx
c000c4b0:	e8 cd ff ff ff       	call   c000c482 <Dbg::logc(char)>
c000c4b5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000c4b8:	5a                   	pop    edx
c000c4b9:	84 c0                	test   al,al
c000c4bb:	75 f1                	jne    c000c4ae <Dbg::logs(char*)+0xc>
c000c4bd:	5b                   	pop    ebx
c000c4be:	c3                   	ret    

c000c4bf <Dbg::logWriteInt(unsigned int)>:
c000c4bf:	83 ec 10             	sub    esp,0x10
c000c4c2:	6a 0a                	push   0xa
c000c4c4:	8d 44 24 08          	lea    eax,[esp+0x8]
c000c4c8:	50                   	push   eax
c000c4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4cd:	e8 57 ff ff ff       	call   c000c429 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000c4d2:	50                   	push   eax
c000c4d3:	e8 ca ff ff ff       	call   c000c4a2 <Dbg::logs(char*)>
c000c4d8:	83 c4 20             	add    esp,0x20
c000c4db:	c3                   	ret    

c000c4dc <Dbg::logWriteIntBase(unsigned int, int)>:
c000c4dc:	83 ec 10             	sub    esp,0x10
c000c4df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c4e3:	8d 44 24 08          	lea    eax,[esp+0x8]
c000c4e7:	50                   	push   eax
c000c4e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4ec:	e8 38 ff ff ff       	call   c000c429 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000c4f1:	50                   	push   eax
c000c4f2:	e8 ab ff ff ff       	call   c000c4a2 <Dbg::logs(char*)>
c000c4f7:	83 c4 20             	add    esp,0x20
c000c4fa:	c3                   	ret    

c000c4fb <Dbg::kprintf(char const*, ...)>:
c000c4fb:	55                   	push   ebp
c000c4fc:	57                   	push   edi
c000c4fd:	56                   	push   esi
c000c4fe:	53                   	push   ebx
c000c4ff:	83 ec 0c             	sub    esp,0xc
c000c502:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c506:	f6 05 e0 31 02 c0 10 	test   BYTE PTR ds:0xc00231e0,0x10
c000c50d:	74 08                	je     c000c517 <Dbg::kprintf(char const*, ...)+0x1c>
c000c50f:	83 c4 0c             	add    esp,0xc
c000c512:	5b                   	pop    ebx
c000c513:	5e                   	pop    esi
c000c514:	5f                   	pop    edi
c000c515:	5d                   	pop    ebp
c000c516:	c3                   	ret    
c000c517:	8d 44 24 24          	lea    eax,[esp+0x24]
c000c51b:	31 db                	xor    ebx,ebx
c000c51d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c521:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000c524:	84 c0                	test   al,al
c000c526:	74 e7                	je     c000c50f <Dbg::kprintf(char const*, ...)+0x14>
c000c528:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c52b:	3c 25                	cmp    al,0x25
c000c52d:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000c530:	75 44                	jne    c000c576 <Dbg::kprintf(char const*, ...)+0x7b>
c000c532:	83 c3 02             	add    ebx,0x2
c000c535:	8a 07                	mov    al,BYTE PTR [edi]
c000c537:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000c53a:	83 e8 25             	sub    eax,0x25
c000c53d:	3c 53                	cmp    al,0x53
c000c53f:	0f 87 c9 00 00 00    	ja     c000c60e <Dbg::kprintf(char const*, ...)+0x113>
c000c545:	0f b6 c0             	movzx  eax,al
c000c548:	ff 24 85 2c 0e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf1d4]
c000c54f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c553:	89 c8                	mov    eax,ecx
c000c555:	83 c1 04             	add    ecx,0x4
c000c558:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000c55c:	ff 30                	push   DWORD PTR [eax]
c000c55e:	e8 5c ff ff ff       	call   c000c4bf <Dbg::logWriteInt(unsigned int)>
c000c563:	5f                   	pop    edi
c000c564:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000c568:	84 c0                	test   al,al
c000c56a:	74 a3                	je     c000c50f <Dbg::kprintf(char const*, ...)+0x14>
c000c56c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c56f:	3c 25                	cmp    al,0x25
c000c571:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000c574:	74 bc                	je     c000c532 <Dbg::kprintf(char const*, ...)+0x37>
c000c576:	50                   	push   eax
c000c577:	89 eb                	mov    ebx,ebp
c000c579:	e8 04 ff ff ff       	call   c000c482 <Dbg::logc(char)>
c000c57e:	89 fd                	mov    ebp,edi
c000c580:	58                   	pop    eax
c000c581:	eb e1                	jmp    c000c564 <Dbg::kprintf(char const*, ...)+0x69>
c000c583:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c587:	89 c8                	mov    eax,ecx
c000c589:	83 c1 04             	add    ecx,0x4
c000c58c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000c590:	ff 30                	push   DWORD PTR [eax]
c000c592:	e8 0b ff ff ff       	call   c000c4a2 <Dbg::logs(char*)>
c000c597:	58                   	pop    eax
c000c598:	eb ca                	jmp    c000c564 <Dbg::kprintf(char const*, ...)+0x69>
c000c59a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c59e:	89 d0                	mov    eax,edx
c000c5a0:	83 c2 04             	add    edx,0x4
c000c5a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c5a7:	ff 30                	push   DWORD PTR [eax]
c000c5a9:	e8 11 ff ff ff       	call   c000c4bf <Dbg::logWriteInt(unsigned int)>
c000c5ae:	58                   	pop    eax
c000c5af:	eb b3                	jmp    c000c564 <Dbg::kprintf(char const*, ...)+0x69>
c000c5b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c5b5:	89 d0                	mov    eax,edx
c000c5b7:	83 c2 04             	add    edx,0x4
c000c5ba:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000c5bd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c5c1:	50                   	push   eax
c000c5c2:	e8 bb fe ff ff       	call   c000c482 <Dbg::logc(char)>
c000c5c7:	58                   	pop    eax
c000c5c8:	eb 9a                	jmp    c000c564 <Dbg::kprintf(char const*, ...)+0x69>
c000c5ca:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c5ce:	89 c8                	mov    eax,ecx
c000c5d0:	83 c1 04             	add    ecx,0x4
c000c5d3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000c5d7:	6a 10                	push   0x10
c000c5d9:	ff 30                	push   DWORD PTR [eax]
c000c5db:	e8 fc fe ff ff       	call   c000c4dc <Dbg::logWriteIntBase(unsigned int, int)>
c000c5e0:	59                   	pop    ecx
c000c5e1:	5f                   	pop    edi
c000c5e2:	eb 80                	jmp    c000c564 <Dbg::kprintf(char const*, ...)+0x69>
c000c5e4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c5e8:	89 d0                	mov    eax,edx
c000c5ea:	83 c2 08             	add    edx,0x8
c000c5ed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c5f1:	6a 10                	push   0x10
c000c5f3:	ff 30                	push   DWORD PTR [eax]
c000c5f5:	e8 e2 fe ff ff       	call   c000c4dc <Dbg::logWriteIntBase(unsigned int, int)>
c000c5fa:	58                   	pop    eax
c000c5fb:	5a                   	pop    edx
c000c5fc:	e9 63 ff ff ff       	jmp    c000c564 <Dbg::kprintf(char const*, ...)+0x69>
c000c601:	6a 25                	push   0x25
c000c603:	e8 7a fe ff ff       	call   c000c482 <Dbg::logc(char)>
c000c608:	58                   	pop    eax
c000c609:	e9 56 ff ff ff       	jmp    c000c564 <Dbg::kprintf(char const*, ...)+0x69>
c000c60e:	6a 25                	push   0x25
c000c610:	e8 6d fe ff ff       	call   c000c482 <Dbg::logc(char)>
c000c615:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000c618:	50                   	push   eax
c000c619:	e8 64 fe ff ff       	call   c000c482 <Dbg::logc(char)>
c000c61e:	5a                   	pop    edx
c000c61f:	59                   	pop    ecx
c000c620:	e9 3f ff ff ff       	jmp    c000c564 <Dbg::kprintf(char const*, ...)+0x69>
c000c625:	90                   	nop

c000c626 <File::read(unsigned long long, void*, int*)>:
c000c626:	53                   	push   ebx
c000c627:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c62b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c62f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000c636:	3c 19                	cmp    al,0x19
c000c638:	77 35                	ja     c000c66f <File::read(unsigned long long, void*, int*)+0x49>
c000c63a:	8b 04 85 40 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda8c0]
c000c641:	85 c0                	test   eax,eax
c000c643:	74 2a                	je     c000c66f <File::read(unsigned long long, void*, int*)+0x49>
c000c645:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000c64b:	85 c0                	test   eax,eax
c000c64d:	74 20                	je     c000c66f <File::read(unsigned long long, void*, int*)+0x49>
c000c64f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c653:	74 21                	je     c000c676 <File::read(unsigned long long, void*, int*)+0x50>
c000c655:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c657:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c65b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000c661:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c665:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c669:	5b                   	pop    ebx
c000c66a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000c66d:	ff e0                	jmp    eax
c000c66f:	b8 0b 00 00 00       	mov    eax,0xb
c000c674:	eb 05                	jmp    c000c67b <File::read(unsigned long long, void*, int*)+0x55>
c000c676:	b8 05 00 00 00       	mov    eax,0x5
c000c67b:	5b                   	pop    ebx
c000c67c:	c3                   	ret    
c000c67d:	90                   	nop

c000c67e <File::write(unsigned long long, void*, int*)>:
c000c67e:	53                   	push   ebx
c000c67f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c683:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c687:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000c68e:	3c 19                	cmp    al,0x19
c000c690:	77 35                	ja     c000c6c7 <File::write(unsigned long long, void*, int*)+0x49>
c000c692:	8b 04 85 40 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda8c0]
c000c699:	85 c0                	test   eax,eax
c000c69b:	74 2a                	je     c000c6c7 <File::write(unsigned long long, void*, int*)+0x49>
c000c69d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000c6a3:	85 c0                	test   eax,eax
c000c6a5:	74 20                	je     c000c6c7 <File::write(unsigned long long, void*, int*)+0x49>
c000c6a7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c6ab:	74 21                	je     c000c6ce <File::write(unsigned long long, void*, int*)+0x50>
c000c6ad:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c6af:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c6b3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000c6b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6c1:	5b                   	pop    ebx
c000c6c2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000c6c5:	ff e0                	jmp    eax
c000c6c7:	b8 0b 00 00 00       	mov    eax,0xb
c000c6cc:	eb 05                	jmp    c000c6d3 <File::write(unsigned long long, void*, int*)+0x55>
c000c6ce:	b8 05 00 00 00       	mov    eax,0x5
c000c6d3:	5b                   	pop    ebx
c000c6d4:	c3                   	ret    
c000c6d5:	90                   	nop

c000c6d6 <Directory::read(unsigned long long, void*, int*)>:
c000c6d6:	53                   	push   ebx
c000c6d7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c6db:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c6df:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000c6e6:	3c 19                	cmp    al,0x19
c000c6e8:	77 35                	ja     c000c71f <Directory::read(unsigned long long, void*, int*)+0x49>
c000c6ea:	8b 04 85 40 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda8c0]
c000c6f1:	85 c0                	test   eax,eax
c000c6f3:	74 2a                	je     c000c71f <Directory::read(unsigned long long, void*, int*)+0x49>
c000c6f5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000c6fb:	85 c0                	test   eax,eax
c000c6fd:	74 20                	je     c000c71f <Directory::read(unsigned long long, void*, int*)+0x49>
c000c6ff:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c703:	74 21                	je     c000c726 <Directory::read(unsigned long long, void*, int*)+0x50>
c000c705:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c707:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c70b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000c711:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c715:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c719:	5b                   	pop    ebx
c000c71a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000c71d:	ff e0                	jmp    eax
c000c71f:	b8 0b 00 00 00       	mov    eax,0xb
c000c724:	eb 05                	jmp    c000c72b <Directory::read(unsigned long long, void*, int*)+0x55>
c000c726:	b8 05 00 00 00       	mov    eax,0x5
c000c72b:	5b                   	pop    ebx
c000c72c:	c3                   	ret    
c000c72d:	90                   	nop

c000c72e <Directory::write(unsigned long long, void*, int*)>:
c000c72e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c732:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000c739:	b8 0b 00 00 00       	mov    eax,0xb
c000c73e:	80 fa 19             	cmp    dl,0x19
c000c741:	77 18                	ja     c000c75b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000c743:	8b 14 95 40 57 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda8c0]
c000c74a:	85 d2                	test   edx,edx
c000c74c:	74 0d                	je     c000c75b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000c74e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000c755:	19 c0                	sbb    eax,eax
c000c757:	83 e0 0a             	and    eax,0xa
c000c75a:	40                   	inc    eax
c000c75b:	c3                   	ret    

c000c75c <File::isAtty()>:
c000c75c:	31 c0                	xor    eax,eax
c000c75e:	c3                   	ret    
c000c75f:	90                   	nop

c000c760 <Directory::isAtty()>:
c000c760:	31 c0                	xor    eax,eax
c000c762:	c3                   	ret    
c000c763:	90                   	nop

c000c764 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000c764:	b8 0a 00 00 00       	mov    eax,0xa
c000c769:	c3                   	ret    

c000c76a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000c76a:	b8 0a 00 00 00       	mov    eax,0xa
c000c76f:	c3                   	ret    

c000c770 <Filesystem::allocateSwapfile(char const*, int)>:
c000c770:	31 c0                	xor    eax,eax
c000c772:	31 d2                	xor    edx,edx
c000c774:	c3                   	ret    
c000c775:	90                   	nop

c000c776 <File::~File()>:
c000c776:	83 ec 0c             	sub    esp,0xc
c000c779:	ba ec 0f 02 c0       	mov    edx,0xc0020fec
c000c77e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c782:	89 10                	mov    DWORD PTR [eax],edx
c000c784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c788:	83 ec 0c             	sub    esp,0xc
c000c78b:	50                   	push   eax
c000c78c:	e8 a7 e8 ff ff       	call   c000b038 <UnixFile::~UnixFile()>
c000c791:	83 c4 10             	add    esp,0x10
c000c794:	90                   	nop
c000c795:	83 c4 0c             	add    esp,0xc
c000c798:	c3                   	ret    
c000c799:	90                   	nop

c000c79a <File::~File()>:
c000c79a:	83 ec 0c             	sub    esp,0xc
c000c79d:	83 ec 0c             	sub    esp,0xc
c000c7a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7a4:	e8 cd ff ff ff       	call   c000c776 <File::~File()>
c000c7a9:	83 c4 10             	add    esp,0x10
c000c7ac:	83 ec 08             	sub    esp,0x8
c000c7af:	68 14 01 00 00       	push   0x114
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	e8 5d fc ff ff       	call   c000c41a <operator delete(void*, unsigned long)>
c000c7bd:	83 c4 10             	add    esp,0x10
c000c7c0:	83 c4 0c             	add    esp,0xc
c000c7c3:	c3                   	ret    

c000c7c4 <Directory::~Directory()>:
c000c7c4:	83 ec 0c             	sub    esp,0xc
c000c7c7:	ba 08 10 02 c0       	mov    edx,0xc0021008
c000c7cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7d0:	89 10                	mov    DWORD PTR [eax],edx
c000c7d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7d6:	83 ec 0c             	sub    esp,0xc
c000c7d9:	50                   	push   eax
c000c7da:	e8 59 e8 ff ff       	call   c000b038 <UnixFile::~UnixFile()>
c000c7df:	83 c4 10             	add    esp,0x10
c000c7e2:	90                   	nop
c000c7e3:	83 c4 0c             	add    esp,0xc
c000c7e6:	c3                   	ret    
c000c7e7:	90                   	nop

c000c7e8 <Directory::~Directory()>:
c000c7e8:	83 ec 0c             	sub    esp,0xc
c000c7eb:	83 ec 0c             	sub    esp,0xc
c000c7ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7f2:	e8 cd ff ff ff       	call   c000c7c4 <Directory::~Directory()>
c000c7f7:	83 c4 10             	add    esp,0x10
c000c7fa:	83 ec 08             	sub    esp,0x8
c000c7fd:	68 14 01 00 00       	push   0x114
c000c802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c806:	e8 0f fc ff ff       	call   c000c41a <operator delete(void*, unsigned long)>
c000c80b:	83 c4 10             	add    esp,0x10
c000c80e:	83 c4 0c             	add    esp,0xc
c000c811:	c3                   	ret    

c000c812 <Filesystem::Filesystem()>:
c000c812:	ba 84 0f 02 c0       	mov    edx,0xc0020f84
c000c817:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c81b:	89 10                	mov    DWORD PTR [eax],edx
c000c81d:	8b 15 b8 32 02 c0    	mov    edx,DWORD PTR ds:0xc00232b8
c000c823:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c827:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000c82a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c82e:	a3 b8 32 02 c0       	mov    ds:0xc00232b8,eax
c000c833:	90                   	nop
c000c834:	c3                   	ret    
c000c835:	90                   	nop

c000c836 <Filesystem::~Filesystem()>:
c000c836:	ba 84 0f 02 c0       	mov    edx,0xc0020f84
c000c83b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c83f:	89 10                	mov    DWORD PTR [eax],edx
c000c841:	90                   	nop
c000c842:	c3                   	ret    
c000c843:	90                   	nop

c000c844 <Filesystem::~Filesystem()>:
c000c844:	83 ec 0c             	sub    esp,0xc
c000c847:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c84b:	e8 e6 ff ff ff       	call   c000c836 <Filesystem::~Filesystem()>
c000c850:	83 c4 04             	add    esp,0x4
c000c853:	83 ec 08             	sub    esp,0x8
c000c856:	6a 08                	push   0x8
c000c858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c85c:	e8 b9 fb ff ff       	call   c000c41a <operator delete(void*, unsigned long)>
c000c861:	83 c4 10             	add    esp,0x10
c000c864:	83 c4 0c             	add    esp,0xc
c000c867:	c3                   	ret    

c000c868 <Fs::getcwd(Process*, char*, int)>:
c000c868:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c86c:	31 c0                	xor    eax,eax
c000c86e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c871:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000c875:	7d 15                	jge    c000c88c <Fs::getcwd(Process*, char*, int)+0x24>
c000c877:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c87b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000c882:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000c885:	84 c9                	test   cl,cl
c000c887:	74 06                	je     c000c88f <Fs::getcwd(Process*, char*, int)+0x27>
c000c889:	40                   	inc    eax
c000c88a:	eb e2                	jmp    c000c86e <Fs::getcwd(Process*, char*, int)+0x6>
c000c88c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000c88f:	31 c0                	xor    eax,eax
c000c891:	c3                   	ret    

c000c892 <Fs::initVFS()>:
c000c892:	83 ec 18             	sub    esp,0x18
c000c895:	6a 08                	push   0x8
c000c897:	e8 d5 ce ff ff       	call   c0009771 <malloc>
c000c89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000c89f:	e8 f4 d4 00 00       	call   c0019d98 <FAT::FAT()>
c000c8a4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000c8ab:	e8 c1 ce ff ff       	call   c0009771 <malloc>
c000c8b0:	89 04 24             	mov    DWORD PTR [esp],eax
c000c8b3:	e8 70 e7 00 00       	call   c001b028 <ISO9660::ISO9660()>
c000c8b8:	83 c4 1c             	add    esp,0x1c
c000c8bb:	c3                   	ret    

c000c8bc <Fs::standardiseFiles(char*, char const*, char const*)>:
c000c8bc:	55                   	push   ebp
c000c8bd:	57                   	push   edi
c000c8be:	56                   	push   esi
c000c8bf:	53                   	push   ebx
c000c8c0:	81 ec 10 04 00 00    	sub    esp,0x410
c000c8c6:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000c8cd:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000c8d4:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000c8db:	68 00 04 00 00       	push   0x400
c000c8e0:	6a 00                	push   0x0
c000c8e2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000c8e6:	56                   	push   esi
c000c8e7:	e8 bc 3b ff ff       	call   c00004a8 <memset>
c000c8ec:	83 c4 10             	add    esp,0x10
c000c8ef:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000c8f3:	75 0b                	jne    c000c900 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000c8f5:	50                   	push   eax
c000c8f6:	50                   	push   eax
c000c8f7:	57                   	push   edi
c000c8f8:	56                   	push   esi
c000c8f9:	e8 66 3c ff ff       	call   c0000564 <strcpy>
c000c8fe:	eb 41                	jmp    c000c941 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000c900:	8a 07                	mov    al,BYTE PTR [edi]
c000c902:	3c 5c                	cmp    al,0x5c
c000c904:	74 04                	je     c000c90a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000c906:	3c 2f                	cmp    al,0x2f
c000c908:	75 18                	jne    c000c922 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000c90a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000c90d:	3c 60                	cmp    al,0x60
c000c90f:	7e 03                	jle    c000c914 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000c911:	83 e8 20             	sub    eax,0x20
c000c914:	88 04 24             	mov    BYTE PTR [esp],al
c000c917:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000c91e:	50                   	push   eax
c000c91f:	50                   	push   eax
c000c920:	eb 18                	jmp    c000c93a <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000c922:	50                   	push   eax
c000c923:	50                   	push   eax
c000c924:	55                   	push   ebp
c000c925:	56                   	push   esi
c000c926:	e8 39 3c ff ff       	call   c0000564 <strcpy>
c000c92b:	5a                   	pop    edx
c000c92c:	59                   	pop    ecx
c000c92d:	68 a3 1d 02 c0       	push   0xc0021da3
c000c932:	56                   	push   esi
c000c933:	e8 6c 3d ff ff       	call   c00006a4 <strcat>
c000c938:	5d                   	pop    ebp
c000c939:	58                   	pop    eax
c000c93a:	57                   	push   edi
c000c93b:	56                   	push   esi
c000c93c:	e8 63 3d ff ff       	call   c00006a4 <strcat>
c000c941:	83 c4 10             	add    esp,0x10
c000c944:	8a 04 24             	mov    al,BYTE PTR [esp]
c000c947:	3c 60                	cmp    al,0x60
c000c949:	7e 03                	jle    c000c94e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000c94b:	83 e8 20             	sub    eax,0x20
c000c94e:	88 04 24             	mov    BYTE PTR [esp],al
c000c951:	88 03                	mov    BYTE PTR [ebx],al
c000c953:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000c95a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000c960:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000c964:	bf 03 00 00 00       	mov    edi,0x3
c000c969:	b8 03 00 00 00       	mov    eax,0x3
c000c96e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000c971:	84 d2                	test   dl,dl
c000c973:	0f 84 91 00 00 00    	je     c000ca0a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000c979:	8d 4f 01             	lea    ecx,[edi+0x1]
c000c97c:	80 fa 5c             	cmp    dl,0x5c
c000c97f:	74 05                	je     c000c986 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000c981:	80 fa 2f             	cmp    dl,0x2f
c000c984:	75 12                	jne    c000c998 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000c986:	89 c5                	mov    ebp,eax
c000c988:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000c98d:	74 09                	je     c000c998 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000c98f:	40                   	inc    eax
c000c990:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000c994:	89 cf                	mov    edi,ecx
c000c996:	eb d6                	jmp    c000c96e <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000c998:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000c99d:	75 5b                	jne    c000c9fa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000c99f:	80 fa 2e             	cmp    dl,0x2e
c000c9a2:	75 56                	jne    c000c9fa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000c9a4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000c9a8:	74 19                	je     c000c9c3 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000c9aa:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000c9af:	74 53                	je     c000ca04 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000c9b1:	89 f9                	mov    ecx,edi
c000c9b3:	41                   	inc    ecx
c000c9b4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000c9b7:	80 fa 2f             	cmp    dl,0x2f
c000c9ba:	74 f7                	je     c000c9b3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000c9bc:	80 fa 5c             	cmp    dl,0x5c
c000c9bf:	74 f2                	je     c000c9b3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000c9c1:	eb d1                	jmp    c000c994 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000c9c3:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000c9c8:	74 3a                	je     c000ca04 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000c9ca:	83 f8 03             	cmp    eax,0x3
c000c9cd:	74 c5                	je     c000c994 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000c9cf:	41                   	inc    ecx
c000c9d0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000c9d3:	80 fa 2f             	cmp    dl,0x2f
c000c9d6:	74 f7                	je     c000c9cf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000c9d8:	80 fa 5c             	cmp    dl,0x5c
c000c9db:	74 f2                	je     c000c9cf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000c9dd:	48                   	dec    eax
c000c9de:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000c9e2:	75 06                	jne    c000c9ea <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000c9e4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000c9e8:	eb f3                	jmp    c000c9dd <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000c9ea:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000c9ee:	74 07                	je     c000c9f7 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000c9f0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000c9f4:	48                   	dec    eax
c000c9f5:	eb f3                	jmp    c000c9ea <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000c9f7:	40                   	inc    eax
c000c9f8:	eb 9a                	jmp    c000c994 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000c9fa:	80 fa 2f             	cmp    dl,0x2f
c000c9fd:	74 95                	je     c000c994 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000c9ff:	80 fa 5c             	cmp    dl,0x5c
c000ca02:	74 90                	je     c000c994 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ca04:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000ca07:	40                   	inc    eax
c000ca08:	eb 8a                	jmp    c000c994 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ca0a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ca0e:	83 ec 0c             	sub    esp,0xc
c000ca11:	53                   	push   ebx
c000ca12:	e8 ad 3a ff ff       	call   c00004c4 <strlen>
c000ca17:	83 c4 10             	add    esp,0x10
c000ca1a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ca1f:	75 26                	jne    c000ca47 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000ca21:	83 ec 0c             	sub    esp,0xc
c000ca24:	53                   	push   ebx
c000ca25:	e8 9a 3a ff ff       	call   c00004c4 <strlen>
c000ca2a:	83 c4 10             	add    esp,0x10
c000ca2d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ca32:	74 26                	je     c000ca5a <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000ca34:	83 ec 0c             	sub    esp,0xc
c000ca37:	53                   	push   ebx
c000ca38:	e8 87 3a ff ff       	call   c00004c4 <strlen>
c000ca3d:	83 c4 10             	add    esp,0x10
c000ca40:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ca45:	eb c7                	jmp    c000ca0e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000ca47:	83 ec 0c             	sub    esp,0xc
c000ca4a:	53                   	push   ebx
c000ca4b:	e8 74 3a ff ff       	call   c00004c4 <strlen>
c000ca50:	83 c4 10             	add    esp,0x10
c000ca53:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ca58:	74 c7                	je     c000ca21 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000ca5a:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ca60:	5b                   	pop    ebx
c000ca61:	5e                   	pop    esi
c000ca62:	5f                   	pop    edi
c000ca63:	5d                   	pop    ebp
c000ca64:	c3                   	ret    
c000ca65:	90                   	nop

c000ca66 <File::File(char const*, Process*)>:
c000ca66:	83 ec 0c             	sub    esp,0xc
c000ca69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca6d:	83 ec 08             	sub    esp,0x8
c000ca70:	6a 00                	push   0x0
c000ca72:	50                   	push   eax
c000ca73:	e8 de e3 ff ff       	call   c000ae56 <UnixFile::UnixFile(int)>
c000ca78:	83 c4 10             	add    esp,0x10
c000ca7b:	ba ec 0f 02 c0       	mov    edx,0xc0020fec
c000ca80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca84:	89 10                	mov    DWORD PTR [eax],edx
c000ca86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ca8a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000ca90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca94:	83 c0 0d             	add    eax,0xd
c000ca97:	83 ec 04             	sub    esp,0x4
c000ca9a:	52                   	push   edx
c000ca9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca9f:	50                   	push   eax
c000caa0:	e8 17 fe ff ff       	call   c000c8bc <Fs::standardiseFiles(char*, char const*, char const*)>
c000caa5:	83 c4 10             	add    esp,0x10
c000caa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caac:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000caaf:	8d 50 bf             	lea    edx,[eax-0x41]
c000cab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cab6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000cabc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cac0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000cac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cac8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000cace:	0f b6 c0             	movzx  eax,al
c000cad1:	8b 04 85 40 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda8c0]
c000cad8:	85 c0                	test   eax,eax
c000cada:	74 3e                	je     c000cb1a <File::File(char const*, Process*)+0xb4>
c000cadc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000cae6:	0f b6 c0             	movzx  eax,al
c000cae9:	8b 04 85 40 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda8c0]
c000caf0:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000caf6:	85 c0                	test   eax,eax
c000caf8:	75 20                	jne    c000cb1a <File::File(char const*, Process*)+0xb4>
c000cafa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cafe:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000cb04:	0f b6 c0             	movzx  eax,al
c000cb07:	8b 04 85 40 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda8c0]
c000cb0e:	83 ec 0c             	sub    esp,0xc
c000cb11:	50                   	push   eax
c000cb12:	e8 c5 1f 00 00       	call   c000eadc <LogicalDisk::mount()>
c000cb17:	83 c4 10             	add    esp,0x10
c000cb1a:	90                   	nop
c000cb1b:	83 c4 0c             	add    esp,0xc
c000cb1e:	c3                   	ret    
c000cb1f:	90                   	nop

c000cb20 <File::open(FileOpenMode)>:
c000cb20:	53                   	push   ebx
c000cb21:	b8 0b 00 00 00       	mov    eax,0xb
c000cb26:	83 ec 08             	sub    esp,0x8
c000cb29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb2d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000cb34:	80 fa 19             	cmp    dl,0x19
c000cb37:	77 40                	ja     c000cb79 <File::open(FileOpenMode)+0x59>
c000cb39:	8b 14 95 40 57 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda8c0]
c000cb40:	85 d2                	test   edx,edx
c000cb42:	74 35                	je     c000cb79 <File::open(FileOpenMode)+0x59>
c000cb44:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000cb4a:	85 d2                	test   edx,edx
c000cb4c:	74 2b                	je     c000cb79 <File::open(FileOpenMode)+0x59>
c000cb4e:	b8 06 00 00 00       	mov    eax,0x6
c000cb53:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000cb57:	75 20                	jne    c000cb79 <File::open(FileOpenMode)+0x59>
c000cb59:	8b 02                	mov    eax,DWORD PTR [edx]
c000cb5b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000cb61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb65:	51                   	push   ecx
c000cb66:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000cb69:	51                   	push   ecx
c000cb6a:	52                   	push   edx
c000cb6b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000cb6e:	83 c4 10             	add    esp,0x10
c000cb71:	85 c0                	test   eax,eax
c000cb73:	75 04                	jne    c000cb79 <File::open(FileOpenMode)+0x59>
c000cb75:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000cb79:	83 c4 08             	add    esp,0x8
c000cb7c:	5b                   	pop    ebx
c000cb7d:	c3                   	ret    

c000cb7e <File::close()>:
c000cb7e:	53                   	push   ebx
c000cb7f:	b8 0b 00 00 00       	mov    eax,0xb
c000cb84:	83 ec 08             	sub    esp,0x8
c000cb87:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cb8b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000cb92:	80 fa 19             	cmp    dl,0x19
c000cb95:	77 41                	ja     c000cbd8 <File::close()+0x5a>
c000cb97:	8b 1c 95 40 57 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffda8c0]
c000cb9e:	85 db                	test   ebx,ebx
c000cba0:	74 36                	je     c000cbd8 <File::close()+0x5a>
c000cba2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000cba9:	74 2d                	je     c000cbd8 <File::close()+0x5a>
c000cbab:	b8 05 00 00 00       	mov    eax,0x5
c000cbb0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000cbb4:	74 22                	je     c000cbd8 <File::close()+0x5a>
c000cbb6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000cbba:	8b 04 95 40 57 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda8c0]
c000cbc1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cbc7:	53                   	push   ebx
c000cbc8:	53                   	push   ebx
c000cbc9:	8b 10                	mov    edx,DWORD PTR [eax]
c000cbcb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000cbd1:	50                   	push   eax
c000cbd2:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000cbd5:	83 c4 10             	add    esp,0x10
c000cbd8:	83 c4 08             	add    esp,0x8
c000cbdb:	5b                   	pop    ebx
c000cbdc:	c3                   	ret    
c000cbdd:	90                   	nop

c000cbde <File::seek(unsigned long long)>:
c000cbde:	56                   	push   esi
c000cbdf:	53                   	push   ebx
c000cbe0:	b8 0b 00 00 00       	mov    eax,0xb
c000cbe5:	51                   	push   ecx
c000cbe6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cbea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cbee:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000cbf5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cbf9:	80 fa 19             	cmp    dl,0x19
c000cbfc:	77 31                	ja     c000cc2f <File::seek(unsigned long long)+0x51>
c000cbfe:	8b 14 95 40 57 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda8c0]
c000cc05:	85 d2                	test   edx,edx
c000cc07:	74 26                	je     c000cc2f <File::seek(unsigned long long)+0x51>
c000cc09:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000cc0f:	85 d2                	test   edx,edx
c000cc11:	74 1c                	je     c000cc2f <File::seek(unsigned long long)+0x51>
c000cc13:	b8 05 00 00 00       	mov    eax,0x5
c000cc18:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000cc1c:	74 11                	je     c000cc2f <File::seek(unsigned long long)+0x51>
c000cc1e:	8b 02                	mov    eax,DWORD PTR [edx]
c000cc20:	53                   	push   ebx
c000cc21:	51                   	push   ecx
c000cc22:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000cc28:	52                   	push   edx
c000cc29:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000cc2c:	83 c4 10             	add    esp,0x10
c000cc2f:	5a                   	pop    edx
c000cc30:	5b                   	pop    ebx
c000cc31:	5e                   	pop    esi
c000cc32:	c3                   	ret    
c000cc33:	90                   	nop

c000cc34 <File::tell(unsigned long long*)>:
c000cc34:	83 ec 0c             	sub    esp,0xc
c000cc37:	b8 0b 00 00 00       	mov    eax,0xb
c000cc3c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cc40:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000cc47:	80 fa 19             	cmp    dl,0x19
c000cc4a:	77 34                	ja     c000cc80 <File::tell(unsigned long long*)+0x4c>
c000cc4c:	8b 14 95 40 57 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda8c0]
c000cc53:	85 d2                	test   edx,edx
c000cc55:	74 29                	je     c000cc80 <File::tell(unsigned long long*)+0x4c>
c000cc57:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000cc5d:	85 d2                	test   edx,edx
c000cc5f:	74 1f                	je     c000cc80 <File::tell(unsigned long long*)+0x4c>
c000cc61:	b8 05 00 00 00       	mov    eax,0x5
c000cc66:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000cc6a:	74 14                	je     c000cc80 <File::tell(unsigned long long*)+0x4c>
c000cc6c:	50                   	push   eax
c000cc6d:	8b 02                	mov    eax,DWORD PTR [edx]
c000cc6f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cc73:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000cc79:	52                   	push   edx
c000cc7a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000cc7d:	83 c4 10             	add    esp,0x10
c000cc80:	83 c4 0c             	add    esp,0xc
c000cc83:	c3                   	ret    

c000cc84 <File::rewind()>:
c000cc84:	83 ec 10             	sub    esp,0x10
c000cc87:	6a 00                	push   0x0
c000cc89:	6a 00                	push   0x0
c000cc8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc8f:	e8 4a ff ff ff       	call   c000cbde <File::seek(unsigned long long)>
c000cc94:	83 c4 1c             	add    esp,0x1c
c000cc97:	c3                   	ret    

c000cc98 <File::unlink()>:
c000cc98:	83 ec 0c             	sub    esp,0xc
c000cc9b:	b8 0b 00 00 00       	mov    eax,0xb
c000cca0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cca4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ccab:	80 f9 19             	cmp    cl,0x19
c000ccae:	77 2f                	ja     c000ccdf <File::unlink()+0x47>
c000ccb0:	8b 0c 8d 40 57 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffda8c0]
c000ccb7:	85 c9                	test   ecx,ecx
c000ccb9:	74 24                	je     c000ccdf <File::unlink()+0x47>
c000ccbb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ccc1:	85 c9                	test   ecx,ecx
c000ccc3:	74 1a                	je     c000ccdf <File::unlink()+0x47>
c000ccc5:	b8 06 00 00 00       	mov    eax,0x6
c000ccca:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ccce:	75 0f                	jne    c000ccdf <File::unlink()+0x47>
c000ccd0:	83 c2 0d             	add    edx,0xd
c000ccd3:	50                   	push   eax
c000ccd4:	50                   	push   eax
c000ccd5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ccd7:	52                   	push   edx
c000ccd8:	51                   	push   ecx
c000ccd9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ccdc:	83 c4 10             	add    esp,0x10
c000ccdf:	83 c4 0c             	add    esp,0xc
c000cce2:	c3                   	ret    
c000cce3:	90                   	nop

c000cce4 <File::rename(char const*)>:
c000cce4:	83 ec 0c             	sub    esp,0xc
c000cce7:	b8 0b 00 00 00       	mov    eax,0xb
c000ccec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccf0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ccf7:	80 f9 19             	cmp    cl,0x19
c000ccfa:	77 32                	ja     c000cd2e <File::rename(char const*)+0x4a>
c000ccfc:	8b 0c 8d 40 57 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffda8c0]
c000cd03:	85 c9                	test   ecx,ecx
c000cd05:	74 27                	je     c000cd2e <File::rename(char const*)+0x4a>
c000cd07:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000cd0d:	85 c9                	test   ecx,ecx
c000cd0f:	74 1d                	je     c000cd2e <File::rename(char const*)+0x4a>
c000cd11:	b8 06 00 00 00       	mov    eax,0x6
c000cd16:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cd1a:	75 12                	jne    c000cd2e <File::rename(char const*)+0x4a>
c000cd1c:	83 c2 0d             	add    edx,0xd
c000cd1f:	50                   	push   eax
c000cd20:	8b 01                	mov    eax,DWORD PTR [ecx]
c000cd22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd26:	52                   	push   edx
c000cd27:	51                   	push   ecx
c000cd28:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000cd2b:	83 c4 10             	add    esp,0x10
c000cd2e:	83 c4 0c             	add    esp,0xc
c000cd31:	c3                   	ret    

c000cd32 <File::chfatattr(unsigned char, unsigned char)>:
c000cd32:	57                   	push   edi
c000cd33:	b8 0b 00 00 00       	mov    eax,0xb
c000cd38:	56                   	push   esi
c000cd39:	53                   	push   ebx
c000cd3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cd3e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cd42:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000cd49:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000cd4d:	80 f9 19             	cmp    cl,0x19
c000cd50:	77 37                	ja     c000cd89 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000cd52:	8b 0c 8d 40 57 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffda8c0]
c000cd59:	85 c9                	test   ecx,ecx
c000cd5b:	74 2c                	je     c000cd89 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000cd5d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000cd63:	85 c9                	test   ecx,ecx
c000cd65:	74 22                	je     c000cd89 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000cd67:	b8 06 00 00 00       	mov    eax,0x6
c000cd6c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cd70:	75 17                	jne    c000cd89 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000cd72:	8b 39                	mov    edi,DWORD PTR [ecx]
c000cd74:	89 f0                	mov    eax,esi
c000cd76:	83 c2 0d             	add    edx,0xd
c000cd79:	0f b6 f0             	movzx  esi,al
c000cd7c:	0f b6 db             	movzx  ebx,bl
c000cd7f:	56                   	push   esi
c000cd80:	53                   	push   ebx
c000cd81:	52                   	push   edx
c000cd82:	51                   	push   ecx
c000cd83:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000cd86:	83 c4 10             	add    esp,0x10
c000cd89:	5b                   	pop    ebx
c000cd8a:	5e                   	pop    esi
c000cd8b:	5f                   	pop    edi
c000cd8c:	c3                   	ret    
c000cd8d:	90                   	nop

c000cd8e <File::exists()>:
c000cd8e:	83 ec 0c             	sub    esp,0xc
c000cd91:	31 c0                	xor    eax,eax
c000cd93:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cd97:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000cd9e:	80 f9 19             	cmp    cl,0x19
c000cda1:	77 24                	ja     c000cdc7 <File::exists()+0x39>
c000cda3:	8b 0c 8d 40 57 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffda8c0]
c000cdaa:	85 c9                	test   ecx,ecx
c000cdac:	74 19                	je     c000cdc7 <File::exists()+0x39>
c000cdae:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000cdb4:	85 c9                	test   ecx,ecx
c000cdb6:	74 0f                	je     c000cdc7 <File::exists()+0x39>
c000cdb8:	83 c2 0d             	add    edx,0xd
c000cdbb:	50                   	push   eax
c000cdbc:	50                   	push   eax
c000cdbd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000cdbf:	52                   	push   edx
c000cdc0:	51                   	push   ecx
c000cdc1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000cdc4:	83 c4 10             	add    esp,0x10
c000cdc7:	83 c4 0c             	add    esp,0xc
c000cdca:	c3                   	ret    
c000cdcb:	90                   	nop

c000cdcc <File::stat(unsigned long long*, bool*)>:
c000cdcc:	56                   	push   esi
c000cdcd:	53                   	push   ebx
c000cdce:	50                   	push   eax
c000cdcf:	b8 0b 00 00 00       	mov    eax,0xb
c000cdd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cdd8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cddc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000cde3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cde7:	80 f9 19             	cmp    cl,0x19
c000cdea:	77 3d                	ja     c000ce29 <File::stat(unsigned long long*, bool*)+0x5d>
c000cdec:	8b 0c 8d 40 57 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffda8c0]
c000cdf3:	85 c9                	test   ecx,ecx
c000cdf5:	74 32                	je     c000ce29 <File::stat(unsigned long long*, bool*)+0x5d>
c000cdf7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000cdfd:	85 c9                	test   ecx,ecx
c000cdff:	74 28                	je     c000ce29 <File::stat(unsigned long long*, bool*)+0x5d>
c000ce01:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ce03:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ce07:	74 13                	je     c000ce1c <File::stat(unsigned long long*, bool*)+0x50>
c000ce09:	83 ec 04             	sub    esp,0x4
c000ce0c:	56                   	push   esi
c000ce0d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000ce13:	51                   	push   ecx
c000ce14:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ce17:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000ce1a:	eb 0a                	jmp    c000ce26 <File::stat(unsigned long long*, bool*)+0x5a>
c000ce1c:	53                   	push   ebx
c000ce1d:	83 c2 0d             	add    edx,0xd
c000ce20:	56                   	push   esi
c000ce21:	52                   	push   edx
c000ce22:	51                   	push   ecx
c000ce23:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000ce26:	83 c4 10             	add    esp,0x10
c000ce29:	5a                   	pop    edx
c000ce2a:	5b                   	pop    ebx
c000ce2b:	5e                   	pop    esi
c000ce2c:	c3                   	ret    

c000ce2d <Fs::setcwd(Process*, char*)>:
c000ce2d:	55                   	push   ebp
c000ce2e:	57                   	push   edi
c000ce2f:	56                   	push   esi
c000ce30:	53                   	push   ebx
c000ce31:	81 ec 20 02 00 00    	sub    esp,0x220
c000ce37:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000ce3e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000ce44:	57                   	push   edi
c000ce45:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000ce4c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000ce50:	56                   	push   esi
c000ce51:	e8 66 fa ff ff       	call   c000c8bc <Fs::standardiseFiles(char*, char const*, char const*)>
c000ce56:	89 34 24             	mov    DWORD PTR [esp],esi
c000ce59:	e8 66 36 ff ff       	call   c00004c4 <strlen>
c000ce5e:	83 c4 10             	add    esp,0x10
c000ce61:	83 f8 02             	cmp    eax,0x2
c000ce64:	77 15                	ja     c000ce7b <Fs::setcwd(Process*, char*)+0x4e>
c000ce66:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000ce6b:	83 eb 41             	sub    ebx,0x41
c000ce6e:	8b 04 9d 40 57 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda8c0]
c000ce75:	85 c0                	test   eax,eax
c000ce77:	75 1c                	jne    c000ce95 <Fs::setcwd(Process*, char*)+0x68>
c000ce79:	eb 2f                	jmp    c000ceaa <Fs::setcwd(Process*, char*)+0x7d>
c000ce7b:	83 ec 0c             	sub    esp,0xc
c000ce7e:	56                   	push   esi
c000ce7f:	e8 40 36 ff ff       	call   c00004c4 <strlen>
c000ce84:	83 c4 10             	add    esp,0x10
c000ce87:	83 f8 03             	cmp    eax,0x3
c000ce8a:	75 57                	jne    c000cee3 <Fs::setcwd(Process*, char*)+0xb6>
c000ce8c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000ce91:	75 50                	jne    c000cee3 <Fs::setcwd(Process*, char*)+0xb6>
c000ce93:	eb d1                	jmp    c000ce66 <Fs::setcwd(Process*, char*)+0x39>
c000ce95:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000ce9c:	75 0c                	jne    c000ceaa <Fs::setcwd(Process*, char*)+0x7d>
c000ce9e:	83 ec 0c             	sub    esp,0xc
c000cea1:	50                   	push   eax
c000cea2:	e8 35 1c 00 00       	call   c000eadc <LogicalDisk::mount()>
c000cea7:	83 c4 10             	add    esp,0x10
c000ceaa:	b8 03 00 00 00       	mov    eax,0x3
c000ceaf:	83 fb 19             	cmp    ebx,0x19
c000ceb2:	0f 87 c6 00 00 00    	ja     c000cf7e <Fs::setcwd(Process*, char*)+0x151>
c000ceb8:	8b 14 9d 40 57 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffda8c0]
c000cebf:	b8 05 00 00 00       	mov    eax,0x5
c000cec4:	85 d2                	test   edx,edx
c000cec6:	0f 84 b2 00 00 00    	je     c000cf7e <Fs::setcwd(Process*, char*)+0x151>
c000cecc:	b8 06 00 00 00       	mov    eax,0x6
c000ced1:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000ced8:	0f 85 92 00 00 00    	jne    c000cf70 <Fs::setcwd(Process*, char*)+0x143>
c000cede:	e9 9b 00 00 00       	jmp    c000cf7e <Fs::setcwd(Process*, char*)+0x151>
c000cee3:	83 ec 0c             	sub    esp,0xc
c000cee6:	68 14 01 00 00       	push   0x114
c000ceeb:	e8 81 c8 ff ff       	call   c0009771 <malloc>
c000cef0:	83 c4 0c             	add    esp,0xc
c000cef3:	89 c3                	mov    ebx,eax
c000cef5:	55                   	push   ebp
c000cef6:	56                   	push   esi
c000cef7:	50                   	push   eax
c000cef8:	e8 69 fb ff ff       	call   c000ca66 <File::File(char const*, Process*)>
c000cefd:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000cf02:	83 c4 0c             	add    esp,0xc
c000cf05:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000cf09:	50                   	push   eax
c000cf0a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000cf0e:	50                   	push   eax
c000cf0f:	53                   	push   ebx
c000cf10:	e8 b7 fe ff ff       	call   c000cdcc <File::stat(unsigned long long*, bool*)>
c000cf15:	83 c4 10             	add    esp,0x10
c000cf18:	83 f8 02             	cmp    eax,0x2
c000cf1b:	74 04                	je     c000cf21 <Fs::setcwd(Process*, char*)+0xf4>
c000cf1d:	85 c0                	test   eax,eax
c000cf1f:	74 1c                	je     c000cf3d <Fs::setcwd(Process*, char*)+0x110>
c000cf21:	b8 01 00 00 00       	mov    eax,0x1
c000cf26:	85 db                	test   ebx,ebx
c000cf28:	74 54                	je     c000cf7e <Fs::setcwd(Process*, char*)+0x151>
c000cf2a:	83 ec 0c             	sub    esp,0xc
c000cf2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cf2f:	53                   	push   ebx
c000cf30:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000cf33:	83 c4 10             	add    esp,0x10
c000cf36:	b8 01 00 00 00       	mov    eax,0x1
c000cf3b:	eb 41                	jmp    c000cf7e <Fs::setcwd(Process*, char*)+0x151>
c000cf3d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000cf42:	75 1c                	jne    c000cf60 <Fs::setcwd(Process*, char*)+0x133>
c000cf44:	b8 02 00 00 00       	mov    eax,0x2
c000cf49:	85 db                	test   ebx,ebx
c000cf4b:	74 31                	je     c000cf7e <Fs::setcwd(Process*, char*)+0x151>
c000cf4d:	83 ec 0c             	sub    esp,0xc
c000cf50:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cf52:	53                   	push   ebx
c000cf53:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000cf56:	83 c4 10             	add    esp,0x10
c000cf59:	b8 02 00 00 00       	mov    eax,0x2
c000cf5e:	eb 1e                	jmp    c000cf7e <Fs::setcwd(Process*, char*)+0x151>
c000cf60:	85 db                	test   ebx,ebx
c000cf62:	74 0c                	je     c000cf70 <Fs::setcwd(Process*, char*)+0x143>
c000cf64:	83 ec 0c             	sub    esp,0xc
c000cf67:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cf69:	53                   	push   ebx
c000cf6a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000cf6d:	83 c4 10             	add    esp,0x10
c000cf70:	50                   	push   eax
c000cf71:	50                   	push   eax
c000cf72:	56                   	push   esi
c000cf73:	57                   	push   edi
c000cf74:	e8 eb 35 ff ff       	call   c0000564 <strcpy>
c000cf79:	83 c4 10             	add    esp,0x10
c000cf7c:	31 c0                	xor    eax,eax
c000cf7e:	81 c4 1c 02 00 00    	add    esp,0x21c
c000cf84:	5b                   	pop    ebx
c000cf85:	5e                   	pop    esi
c000cf86:	5f                   	pop    edi
c000cf87:	5d                   	pop    ebp
c000cf88:	c3                   	ret    
c000cf89:	90                   	nop

c000cf8a <Directory::Directory(char const*, Process*)>:
c000cf8a:	83 ec 0c             	sub    esp,0xc
c000cf8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf91:	83 ec 08             	sub    esp,0x8
c000cf94:	6a 00                	push   0x0
c000cf96:	50                   	push   eax
c000cf97:	e8 ba de ff ff       	call   c000ae56 <UnixFile::UnixFile(int)>
c000cf9c:	83 c4 10             	add    esp,0x10
c000cf9f:	ba 08 10 02 c0       	mov    edx,0xc0021008
c000cfa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfa8:	89 10                	mov    DWORD PTR [eax],edx
c000cfaa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cfae:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000cfb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfb8:	83 c0 0d             	add    eax,0xd
c000cfbb:	83 ec 04             	sub    esp,0x4
c000cfbe:	52                   	push   edx
c000cfbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfc3:	50                   	push   eax
c000cfc4:	e8 f3 f8 ff ff       	call   c000c8bc <Fs::standardiseFiles(char*, char const*, char const*)>
c000cfc9:	83 c4 10             	add    esp,0x10
c000cfcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000cfd3:	8d 50 bf             	lea    edx,[eax-0x41]
c000cfd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfda:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000cfe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfe4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000cfe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfec:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000cff2:	0f b6 c0             	movzx  eax,al
c000cff5:	8b 04 85 40 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda8c0]
c000cffc:	85 c0                	test   eax,eax
c000cffe:	74 3e                	je     c000d03e <Directory::Directory(char const*, Process*)+0xb4>
c000d000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d004:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d00a:	0f b6 c0             	movzx  eax,al
c000d00d:	8b 04 85 40 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda8c0]
c000d014:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d01a:	85 c0                	test   eax,eax
c000d01c:	75 20                	jne    c000d03e <Directory::Directory(char const*, Process*)+0xb4>
c000d01e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d022:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d028:	0f b6 c0             	movzx  eax,al
c000d02b:	8b 04 85 40 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda8c0]
c000d032:	83 ec 0c             	sub    esp,0xc
c000d035:	50                   	push   eax
c000d036:	e8 a1 1a 00 00       	call   c000eadc <LogicalDisk::mount()>
c000d03b:	83 c4 10             	add    esp,0x10
c000d03e:	90                   	nop
c000d03f:	83 c4 0c             	add    esp,0xc
c000d042:	c3                   	ret    
c000d043:	90                   	nop

c000d044 <Directory::open()>:
c000d044:	53                   	push   ebx
c000d045:	b8 0b 00 00 00       	mov    eax,0xb
c000d04a:	83 ec 08             	sub    esp,0x8
c000d04d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d051:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d058:	80 fa 19             	cmp    dl,0x19
c000d05b:	77 3d                	ja     c000d09a <Directory::open()+0x56>
c000d05d:	8b 14 95 40 57 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda8c0]
c000d064:	85 d2                	test   edx,edx
c000d066:	74 32                	je     c000d09a <Directory::open()+0x56>
c000d068:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d06e:	85 d2                	test   edx,edx
c000d070:	74 28                	je     c000d09a <Directory::open()+0x56>
c000d072:	b8 06 00 00 00       	mov    eax,0x6
c000d077:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d07b:	75 1d                	jne    c000d09a <Directory::open()+0x56>
c000d07d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d083:	50                   	push   eax
c000d084:	8b 02                	mov    eax,DWORD PTR [edx]
c000d086:	51                   	push   ecx
c000d087:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d08a:	51                   	push   ecx
c000d08b:	52                   	push   edx
c000d08c:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d08f:	83 c4 10             	add    esp,0x10
c000d092:	85 c0                	test   eax,eax
c000d094:	75 04                	jne    c000d09a <Directory::open()+0x56>
c000d096:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d09a:	83 c4 08             	add    esp,0x8
c000d09d:	5b                   	pop    ebx
c000d09e:	c3                   	ret    
c000d09f:	90                   	nop

c000d0a0 <Directory::close()>:
c000d0a0:	53                   	push   ebx
c000d0a1:	b8 0b 00 00 00       	mov    eax,0xb
c000d0a6:	83 ec 08             	sub    esp,0x8
c000d0a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d0ad:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d0b4:	80 fa 19             	cmp    dl,0x19
c000d0b7:	77 41                	ja     c000d0fa <Directory::close()+0x5a>
c000d0b9:	8b 1c 95 40 57 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffda8c0]
c000d0c0:	85 db                	test   ebx,ebx
c000d0c2:	74 36                	je     c000d0fa <Directory::close()+0x5a>
c000d0c4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d0cb:	74 2d                	je     c000d0fa <Directory::close()+0x5a>
c000d0cd:	b8 05 00 00 00       	mov    eax,0x5
c000d0d2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d0d6:	74 22                	je     c000d0fa <Directory::close()+0x5a>
c000d0d8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d0dc:	8b 04 95 40 57 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda8c0]
c000d0e3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d0e9:	53                   	push   ebx
c000d0ea:	53                   	push   ebx
c000d0eb:	8b 10                	mov    edx,DWORD PTR [eax]
c000d0ed:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d0f3:	50                   	push   eax
c000d0f4:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d0f7:	83 c4 10             	add    esp,0x10
c000d0fa:	83 c4 08             	add    esp,0x8
c000d0fd:	5b                   	pop    ebx
c000d0fe:	c3                   	ret    
c000d0ff:	90                   	nop

c000d100 <Directory::unlink()>:
c000d100:	83 ec 0c             	sub    esp,0xc
c000d103:	b8 0b 00 00 00       	mov    eax,0xb
c000d108:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d10c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d113:	80 f9 19             	cmp    cl,0x19
c000d116:	77 2f                	ja     c000d147 <Directory::unlink()+0x47>
c000d118:	8b 0c 8d 40 57 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffda8c0]
c000d11f:	85 c9                	test   ecx,ecx
c000d121:	74 24                	je     c000d147 <Directory::unlink()+0x47>
c000d123:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d129:	85 c9                	test   ecx,ecx
c000d12b:	74 1a                	je     c000d147 <Directory::unlink()+0x47>
c000d12d:	b8 06 00 00 00       	mov    eax,0x6
c000d132:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d136:	75 0f                	jne    c000d147 <Directory::unlink()+0x47>
c000d138:	83 c2 0d             	add    edx,0xd
c000d13b:	50                   	push   eax
c000d13c:	50                   	push   eax
c000d13d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d13f:	52                   	push   edx
c000d140:	51                   	push   ecx
c000d141:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d144:	83 c4 10             	add    esp,0x10
c000d147:	83 c4 0c             	add    esp,0xc
c000d14a:	c3                   	ret    
c000d14b:	90                   	nop

c000d14c <Directory::rename(char const*)>:
c000d14c:	83 ec 0c             	sub    esp,0xc
c000d14f:	b8 0b 00 00 00       	mov    eax,0xb
c000d154:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d158:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d15f:	80 f9 19             	cmp    cl,0x19
c000d162:	77 32                	ja     c000d196 <Directory::rename(char const*)+0x4a>
c000d164:	8b 0c 8d 40 57 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffda8c0]
c000d16b:	85 c9                	test   ecx,ecx
c000d16d:	74 27                	je     c000d196 <Directory::rename(char const*)+0x4a>
c000d16f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d175:	85 c9                	test   ecx,ecx
c000d177:	74 1d                	je     c000d196 <Directory::rename(char const*)+0x4a>
c000d179:	b8 06 00 00 00       	mov    eax,0x6
c000d17e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d182:	75 12                	jne    c000d196 <Directory::rename(char const*)+0x4a>
c000d184:	83 c2 0d             	add    edx,0xd
c000d187:	50                   	push   eax
c000d188:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d18a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d18e:	52                   	push   edx
c000d18f:	51                   	push   ecx
c000d190:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d193:	83 c4 10             	add    esp,0x10
c000d196:	83 c4 0c             	add    esp,0xc
c000d199:	c3                   	ret    

c000d19a <Directory::exists()>:
c000d19a:	83 ec 0c             	sub    esp,0xc
c000d19d:	31 c0                	xor    eax,eax
c000d19f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d1a3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d1aa:	80 f9 19             	cmp    cl,0x19
c000d1ad:	77 24                	ja     c000d1d3 <Directory::exists()+0x39>
c000d1af:	8b 0c 8d 40 57 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffda8c0]
c000d1b6:	85 c9                	test   ecx,ecx
c000d1b8:	74 19                	je     c000d1d3 <Directory::exists()+0x39>
c000d1ba:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d1c0:	85 c9                	test   ecx,ecx
c000d1c2:	74 0f                	je     c000d1d3 <Directory::exists()+0x39>
c000d1c4:	83 c2 0d             	add    edx,0xd
c000d1c7:	50                   	push   eax
c000d1c8:	50                   	push   eax
c000d1c9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d1cb:	52                   	push   edx
c000d1cc:	51                   	push   ecx
c000d1cd:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d1d0:	83 c4 10             	add    esp,0x10
c000d1d3:	83 c4 0c             	add    esp,0xc
c000d1d6:	c3                   	ret    
c000d1d7:	90                   	nop

c000d1d8 <Directory::read(dirent*)>:
c000d1d8:	83 ec 1c             	sub    esp,0x1c
c000d1db:	b8 0b 00 00 00       	mov    eax,0xb
c000d1e0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d1e4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d1eb:	80 fa 19             	cmp    dl,0x19
c000d1ee:	77 30                	ja     c000d220 <Directory::read(dirent*)+0x48>
c000d1f0:	8b 14 95 40 57 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda8c0]
c000d1f7:	85 d2                	test   edx,edx
c000d1f9:	74 25                	je     c000d220 <Directory::read(dirent*)+0x48>
c000d1fb:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d202:	74 1c                	je     c000d220 <Directory::read(dirent*)+0x48>
c000d204:	83 ec 0c             	sub    esp,0xc
c000d207:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d209:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d20d:	52                   	push   edx
c000d20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d212:	6a 00                	push   0x0
c000d214:	68 10 01 00 00       	push   0x110
c000d219:	51                   	push   ecx
c000d21a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d21d:	83 c4 20             	add    esp,0x20
c000d220:	83 c4 1c             	add    esp,0x1c
c000d223:	c3                   	ret    

c000d224 <Directory::create()>:
c000d224:	83 ec 0c             	sub    esp,0xc
c000d227:	b8 0b 00 00 00       	mov    eax,0xb
c000d22c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d230:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d237:	80 f9 19             	cmp    cl,0x19
c000d23a:	77 2f                	ja     c000d26b <Directory::create()+0x47>
c000d23c:	8b 0c 8d 40 57 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffda8c0]
c000d243:	85 c9                	test   ecx,ecx
c000d245:	74 24                	je     c000d26b <Directory::create()+0x47>
c000d247:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d24d:	85 c9                	test   ecx,ecx
c000d24f:	74 1a                	je     c000d26b <Directory::create()+0x47>
c000d251:	b8 06 00 00 00       	mov    eax,0x6
c000d256:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d25a:	75 0f                	jne    c000d26b <Directory::create()+0x47>
c000d25c:	83 c2 0d             	add    edx,0xd
c000d25f:	50                   	push   eax
c000d260:	50                   	push   eax
c000d261:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d263:	52                   	push   edx
c000d264:	51                   	push   ecx
c000d265:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000d268:	83 c4 10             	add    esp,0x10
c000d26b:	83 c4 0c             	add    esp,0xc
c000d26e:	c3                   	ret    
c000d26f:	90                   	nop

c000d270 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000d270:	b8 0a 00 00 00       	mov    eax,0xa
c000d275:	c3                   	ret    
c000d276:	66 90                	xchg   ax,ax

c000d278 <Bus::Bus(char const*)>:
c000d278:	83 ec 0c             	sub    esp,0xc
c000d27b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d27f:	83 ec 08             	sub    esp,0x8
c000d282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d286:	50                   	push   eax
c000d287:	e8 2a 08 00 00       	call   c000dab6 <Device::Device(char const*)>
c000d28c:	83 c4 10             	add    esp,0x10
c000d28f:	ba 24 10 02 c0       	mov    edx,0xc0021024
c000d294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d298:	89 10                	mov    DWORD PTR [eax],edx
c000d29a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d29e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d2a8:	90                   	nop
c000d2a9:	83 c4 0c             	add    esp,0xc
c000d2ac:	c3                   	ret    
c000d2ad:	90                   	nop
c000d2ae:	66 90                	xchg   ax,ax

c000d2b0 <Bus::~Bus()>:
c000d2b0:	83 ec 0c             	sub    esp,0xc
c000d2b3:	ba 24 10 02 c0       	mov    edx,0xc0021024
c000d2b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2bc:	89 10                	mov    DWORD PTR [eax],edx
c000d2be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2c2:	83 ec 0c             	sub    esp,0xc
c000d2c5:	50                   	push   eax
c000d2c6:	e8 55 05 00 00       	call   c000d820 <Device::~Device()>
c000d2cb:	83 c4 10             	add    esp,0x10
c000d2ce:	90                   	nop
c000d2cf:	83 c4 0c             	add    esp,0xc
c000d2d2:	c3                   	ret    
c000d2d3:	90                   	nop

c000d2d4 <Bus::~Bus()>:
c000d2d4:	83 ec 0c             	sub    esp,0xc
c000d2d7:	83 ec 0c             	sub    esp,0xc
c000d2da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2de:	e8 cd ff ff ff       	call   c000d2b0 <Bus::~Bus()>
c000d2e3:	83 c4 10             	add    esp,0x10
c000d2e6:	83 ec 08             	sub    esp,0x8
c000d2e9:	68 58 01 00 00       	push   0x158
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	e8 23 f1 ff ff       	call   c000c41a <operator delete(void*, unsigned long)>
c000d2f7:	83 c4 10             	add    esp,0x10
c000d2fa:	83 c4 0c             	add    esp,0xc
c000d2fd:	c3                   	ret    

c000d2fe <beepThread(void*)>:
c000d2fe:	83 ec 0c             	sub    esp,0xc
c000d301:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c000d306:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d30a:	48                   	dec    eax
c000d30b:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c000d310:	75 01                	jne    c000d313 <beepThread(void*)+0x15>
c000d312:	fb                   	sti    
c000d313:	83 ec 0c             	sub    esp,0xc
c000d316:	6b c2 0a             	imul   eax,edx,0xa
c000d319:	50                   	push   eax
c000d31a:	e8 2d 86 00 00       	call   c001594c <milliTenthSleep(unsigned int)>
c000d31f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000d326:	e8 30 b2 00 00       	call   c001855b <Hal::makeBeep(int)>
c000d32b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000d333:	83 c4 1c             	add    esp,0x1c
c000d336:	e9 11 85 00 00       	jmp    c001584c <blockTask(TaskState)>

c000d33b <Krnl::beep(int, int, bool)>:
c000d33b:	56                   	push   esi
c000d33c:	53                   	push   ebx
c000d33d:	83 ec 10             	sub    esp,0x10
c000d340:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d344:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d348:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d34c:	e8 0a b2 00 00       	call   c001855b <Hal::makeBeep(int)>
c000d351:	83 c4 10             	add    esp,0x10
c000d354:	89 f0                	mov    eax,esi
c000d356:	84 c0                	test   al,al
c000d358:	74 1e                	je     c000d378 <Krnl::beep(int, int, bool)+0x3d>
c000d35a:	83 ec 0c             	sub    esp,0xc
c000d35d:	6b db 0a             	imul   ebx,ebx,0xa
c000d360:	53                   	push   ebx
c000d361:	e8 e6 85 00 00       	call   c001594c <milliTenthSleep(unsigned int)>
c000d366:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000d36e:	83 c4 14             	add    esp,0x14
c000d371:	5b                   	pop    ebx
c000d372:	5e                   	pop    esi
c000d373:	e9 e3 b1 00 00       	jmp    c001855b <Hal::makeBeep(int)>
c000d378:	68 e6 00 00 00       	push   0xe6
c000d37d:	53                   	push   ebx
c000d37e:	68 fe d2 00 c0       	push   0xc000d2fe
c000d383:	ff 35 d0 66 02 c0    	push   DWORD PTR ds:0xc00266d0
c000d389:	e8 aa 80 00 00       	call   c0015438 <Process::createThread(void (*)(void*), void*, int)>
c000d38e:	83 c4 14             	add    esp,0x14
c000d391:	5b                   	pop    ebx
c000d392:	5e                   	pop    esi
c000d393:	c3                   	ret    

c000d394 <User::loadClockSettings(int)>:
c000d394:	53                   	push   ebx
c000d395:	83 ec 14             	sub    esp,0x14
c000d398:	68 14 01 00 00       	push   0x114
c000d39d:	e8 cf c3 ff ff       	call   c0009771 <malloc>
c000d3a2:	83 c4 0c             	add    esp,0xc
c000d3a5:	89 c3                	mov    ebx,eax
c000d3a7:	ff 35 d0 66 02 c0    	push   DWORD PTR ds:0xc00266d0
c000d3ad:	68 48 10 02 c0       	push   0xc0021048
c000d3b2:	50                   	push   eax
c000d3b3:	e8 ae f6 ff ff       	call   c000ca66 <File::File(char const*, Process*)>
c000d3b8:	58                   	pop    eax
c000d3b9:	5a                   	pop    edx
c000d3ba:	6a 01                	push   0x1
c000d3bc:	53                   	push   ebx
c000d3bd:	e8 5e f7 ff ff       	call   c000cb20 <File::open(FileOpenMode)>
c000d3c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3c5:	e8 b4 f7 ff ff       	call   c000cb7e <File::close()>
c000d3ca:	83 c4 10             	add    esp,0x10
c000d3cd:	85 db                	test   ebx,ebx
c000d3cf:	74 0f                	je     c000d3e0 <User::loadClockSettings(int)+0x4c>
c000d3d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3d3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d3d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d3da:	83 c4 08             	add    esp,0x8
c000d3dd:	5b                   	pop    ebx
c000d3de:	ff e0                	jmp    eax
c000d3e0:	83 c4 08             	add    esp,0x8
c000d3e3:	5b                   	pop    ebx
c000d3e4:	c3                   	ret    
c000d3e5:	90                   	nop

c000d3e6 <Clock::Clock(char const*)>:
c000d3e6:	83 ec 0c             	sub    esp,0xc
c000d3e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ed:	83 ec 08             	sub    esp,0x8
c000d3f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3f4:	50                   	push   eax
c000d3f5:	e8 bc 06 00 00       	call   c000dab6 <Device::Device(char const*)>
c000d3fa:	83 c4 10             	add    esp,0x10
c000d3fd:	ba 70 10 02 c0       	mov    edx,0xc0021070
c000d402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d406:	89 10                	mov    DWORD PTR [eax],edx
c000d408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d40c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000d416:	90                   	nop
c000d417:	83 c4 0c             	add    esp,0xc
c000d41a:	c3                   	ret    
c000d41b:	90                   	nop

c000d41c <Clock::~Clock()>:
c000d41c:	83 ec 0c             	sub    esp,0xc
c000d41f:	ba 70 10 02 c0       	mov    edx,0xc0021070
c000d424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d428:	89 10                	mov    DWORD PTR [eax],edx
c000d42a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d42e:	83 ec 0c             	sub    esp,0xc
c000d431:	50                   	push   eax
c000d432:	e8 e9 03 00 00       	call   c000d820 <Device::~Device()>
c000d437:	83 c4 10             	add    esp,0x10
c000d43a:	90                   	nop
c000d43b:	83 c4 0c             	add    esp,0xc
c000d43e:	c3                   	ret    
c000d43f:	90                   	nop

c000d440 <Clock::~Clock()>:
c000d440:	83 ec 0c             	sub    esp,0xc
c000d443:	83 ec 0c             	sub    esp,0xc
c000d446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d44a:	e8 cd ff ff ff       	call   c000d41c <Clock::~Clock()>
c000d44f:	83 c4 10             	add    esp,0x10
c000d452:	83 ec 08             	sub    esp,0x8
c000d455:	68 58 01 00 00       	push   0x158
c000d45a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d45e:	e8 b7 ef ff ff       	call   c000c41a <operator delete(void*, unsigned long)>
c000d463:	83 c4 10             	add    esp,0x10
c000d466:	83 c4 0c             	add    esp,0xc
c000d469:	c3                   	ret    

c000d46a <Clock::timeInSecondsLocal()>:
c000d46a:	53                   	push   ebx
c000d46b:	83 ec 14             	sub    esp,0x14
c000d46e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d472:	8b 10                	mov    edx,DWORD PTR [eax]
c000d474:	50                   	push   eax
c000d475:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d478:	0f b6 0d bc 32 02 c0 	movzx  ecx,BYTE PTR ds:0xc00232bc
c000d47f:	03 0d c0 32 02 c0    	add    ecx,DWORD PTR ds:0xc00232c0
c000d485:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000d48b:	89 cb                	mov    ebx,ecx
c000d48d:	c1 fb 1f             	sar    ebx,0x1f
c000d490:	01 c8                	add    eax,ecx
c000d492:	11 da                	adc    edx,ebx
c000d494:	83 c4 10             	add    esp,0x10
c000d497:	31 c9                	xor    ecx,ecx
c000d499:	80 3d bd 32 02 c0 00 	cmp    BYTE PTR ds:0xc00232bd,0x0
c000d4a0:	74 05                	je     c000d4a7 <Clock::timeInSecondsLocal()+0x3d>
c000d4a2:	b9 08 07 00 00       	mov    ecx,0x708
c000d4a7:	31 db                	xor    ebx,ebx
c000d4a9:	01 c8                	add    eax,ecx
c000d4ab:	11 da                	adc    edx,ebx
c000d4ad:	83 c4 08             	add    esp,0x8
c000d4b0:	5b                   	pop    ebx
c000d4b1:	c3                   	ret    

c000d4b2 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000d4b2:	57                   	push   edi
c000d4b3:	56                   	push   esi
c000d4b4:	53                   	push   ebx
c000d4b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d4b9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d4bd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d4bf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000d4c3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000d4c6:	0f b6 05 bc 32 02 c0 	movzx  eax,BYTE PTR ds:0xc00232bc
c000d4cd:	03 05 c0 32 02 c0    	add    eax,DWORD PTR ds:0xc00232c0
c000d4d3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000d4d9:	99                   	cdq    
c000d4da:	29 c6                	sub    esi,eax
c000d4dc:	19 d7                	sbb    edi,edx
c000d4de:	89 f0                	mov    eax,esi
c000d4e0:	89 fa                	mov    edx,edi
c000d4e2:	31 f6                	xor    esi,esi
c000d4e4:	80 3d bd 32 02 c0 00 	cmp    BYTE PTR ds:0xc00232bd,0x0
c000d4eb:	74 05                	je     c000d4f2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000d4ed:	be 08 07 00 00       	mov    esi,0x708
c000d4f2:	31 ff                	xor    edi,edi
c000d4f4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000d4f8:	29 f0                	sub    eax,esi
c000d4fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d4fe:	19 fa                	sbb    edx,edi
c000d500:	89 d8                	mov    eax,ebx
c000d502:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d506:	5b                   	pop    ebx
c000d507:	5e                   	pop    esi
c000d508:	5f                   	pop    edi
c000d509:	ff e0                	jmp    eax

c000d50b <datetimeToSeconds(datetime_t)>:
c000d50b:	55                   	push   ebp
c000d50c:	57                   	push   edi
c000d50d:	56                   	push   esi
c000d50e:	53                   	push   ebx
c000d50f:	83 ec 14             	sub    esp,0x14
c000d512:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d516:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d51a:	89 d3                	mov    ebx,edx
c000d51c:	0f b6 c6             	movzx  eax,dh
c000d51f:	c1 eb 10             	shr    ebx,0x10
c000d522:	48                   	dec    eax
c000d523:	66 81 eb 6c 07       	sub    bx,0x76c
c000d528:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000d52c:	0f b6 f5             	movzx  esi,ch
c000d52f:	89 cf                	mov    edi,ecx
c000d531:	6b f6 3c             	imul   esi,esi,0x3c
c000d534:	c1 ef 10             	shr    edi,0x10
c000d537:	0f b6 c9             	movzx  ecx,cl
c000d53a:	89 f8                	mov    eax,edi
c000d53c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000d542:	0f b6 f8             	movzx  edi,al
c000d545:	0f b6 d2             	movzx  edx,dl
c000d548:	01 fe                	add    esi,edi
c000d54a:	01 f1                	add    ecx,esi
c000d54c:	0f b7 f3             	movzx  esi,bx
c000d54f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000d553:	c1 f9 1f             	sar    ecx,0x1f
c000d556:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000d55b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d55f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000d564:	8b 0c 8d c0 10 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdef40]
c000d56b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000d56f:	76 29                	jbe    c000d59a <datetimeToSeconds(datetime_t)+0x8f>
c000d571:	f6 c3 03             	test   bl,0x3
c000d574:	75 24                	jne    c000d59a <datetimeToSeconds(datetime_t)+0x8f>
c000d576:	31 d2                	xor    edx,edx
c000d578:	bf 64 00 00 00       	mov    edi,0x64
c000d57d:	89 d8                	mov    eax,ebx
c000d57f:	66 f7 f7             	div    di
c000d582:	66 85 d2             	test   dx,dx
c000d585:	75 12                	jne    c000d599 <datetimeToSeconds(datetime_t)+0x8e>
c000d587:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000d58d:	bf 90 01 00 00       	mov    edi,0x190
c000d592:	99                   	cdq    
c000d593:	f7 ff                	idiv   edi
c000d595:	85 d2                	test   edx,edx
c000d597:	75 01                	jne    c000d59a <datetimeToSeconds(datetime_t)+0x8f>
c000d599:	41                   	inc    ecx
c000d59a:	66 83 fb 46          	cmp    bx,0x46
c000d59e:	76 45                	jbe    c000d5e5 <datetimeToSeconds(datetime_t)+0xda>
c000d5a0:	bb 46 00 00 00       	mov    ebx,0x46
c000d5a5:	bf 64 00 00 00       	mov    edi,0x64
c000d5aa:	bd 90 01 00 00       	mov    ebp,0x190
c000d5af:	b8 6d 01 00 00       	mov    eax,0x16d
c000d5b4:	f6 c3 03             	test   bl,0x3
c000d5b7:	75 23                	jne    c000d5dc <datetimeToSeconds(datetime_t)+0xd1>
c000d5b9:	89 d8                	mov    eax,ebx
c000d5bb:	99                   	cdq    
c000d5bc:	f7 ff                	idiv   edi
c000d5be:	b8 6e 01 00 00       	mov    eax,0x16e
c000d5c3:	85 d2                	test   edx,edx
c000d5c5:	75 15                	jne    c000d5dc <datetimeToSeconds(datetime_t)+0xd1>
c000d5c7:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000d5cd:	99                   	cdq    
c000d5ce:	f7 fd                	idiv   ebp
c000d5d0:	83 fa 01             	cmp    edx,0x1
c000d5d3:	19 c0                	sbb    eax,eax
c000d5d5:	f7 d0                	not    eax
c000d5d7:	05 6e 01 00 00       	add    eax,0x16e
c000d5dc:	01 c1                	add    ecx,eax
c000d5de:	43                   	inc    ebx
c000d5df:	39 f3                	cmp    ebx,esi
c000d5e1:	7c cc                	jl     c000d5af <datetimeToSeconds(datetime_t)+0xa4>
c000d5e3:	eb 35                	jmp    c000d61a <datetimeToSeconds(datetime_t)+0x10f>
c000d5e5:	74 33                	je     c000d61a <datetimeToSeconds(datetime_t)+0x10f>
c000d5e7:	b8 45 00 00 00       	mov    eax,0x45
c000d5ec:	89 c2                	mov    edx,eax
c000d5ee:	83 e2 03             	and    edx,0x3
c000d5f1:	39 f0                	cmp    eax,esi
c000d5f3:	7e 0f                	jle    c000d604 <datetimeToSeconds(datetime_t)+0xf9>
c000d5f5:	83 fa 01             	cmp    edx,0x1
c000d5f8:	19 d2                	sbb    edx,edx
c000d5fa:	48                   	dec    eax
c000d5fb:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000d602:	eb e8                	jmp    c000d5ec <datetimeToSeconds(datetime_t)+0xe1>
c000d604:	b8 6d 01 00 00       	mov    eax,0x16d
c000d609:	85 d2                	test   edx,edx
c000d60b:	75 0b                	jne    c000d618 <datetimeToSeconds(datetime_t)+0x10d>
c000d60d:	66 83 fb 01          	cmp    bx,0x1
c000d611:	19 c0                	sbb    eax,eax
c000d613:	05 6e 01 00 00       	add    eax,0x16e
c000d618:	29 c1                	sub    ecx,eax
c000d61a:	b8 80 51 01 00       	mov    eax,0x15180
c000d61f:	f7 e9                	imul   ecx
c000d621:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000d625:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000d629:	83 c4 14             	add    esp,0x14
c000d62c:	5b                   	pop    ebx
c000d62d:	5e                   	pop    esi
c000d62e:	5f                   	pop    edi
c000d62f:	5d                   	pop    ebp
c000d630:	c3                   	ret    
c000d631:	90                   	nop

c000d632 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000d632:	57                   	push   edi
c000d633:	56                   	push   esi
c000d634:	53                   	push   ebx
c000d635:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d639:	8b 06                	mov    eax,DWORD PTR [esi]
c000d63b:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000d63e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d642:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d646:	e8 c0 fe ff ff       	call   c000d50b <datetimeToSeconds(datetime_t)>
c000d64b:	59                   	pop    ecx
c000d64c:	0f b6 0d bc 32 02 c0 	movzx  ecx,BYTE PTR ds:0xc00232bc
c000d653:	5b                   	pop    ebx
c000d654:	03 0d c0 32 02 c0    	add    ecx,DWORD PTR ds:0xc00232c0
c000d65a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000d660:	89 cb                	mov    ebx,ecx
c000d662:	c1 fb 1f             	sar    ebx,0x1f
c000d665:	29 c8                	sub    eax,ecx
c000d667:	19 da                	sbb    edx,ebx
c000d669:	31 c9                	xor    ecx,ecx
c000d66b:	80 3d bd 32 02 c0 00 	cmp    BYTE PTR ds:0xc00232bd,0x0
c000d672:	74 05                	je     c000d679 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000d674:	b9 08 07 00 00       	mov    ecx,0x708
c000d679:	31 db                	xor    ebx,ebx
c000d67b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000d67f:	29 c8                	sub    eax,ecx
c000d681:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d685:	19 da                	sbb    edx,ebx
c000d687:	89 f8                	mov    eax,edi
c000d689:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d68d:	5b                   	pop    ebx
c000d68e:	5e                   	pop    esi
c000d68f:	5f                   	pop    edi
c000d690:	ff e0                	jmp    eax

c000d692 <secondsToDatetime(unsigned long long)>:
c000d692:	55                   	push   ebp
c000d693:	57                   	push   edi
c000d694:	56                   	push   esi
c000d695:	53                   	push   ebx
c000d696:	83 ec 1c             	sub    esp,0x1c
c000d699:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d69d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d6a1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d6a5:	6a 00                	push   0x0
c000d6a7:	68 80 51 01 00       	push   0x15180
c000d6ac:	55                   	push   ebp
c000d6ad:	57                   	push   edi
c000d6ae:	e8 3d 1c 01 00       	call   c001f2f0 <__udivdi3>
c000d6b3:	83 c4 10             	add    esp,0x10
c000d6b6:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000d6bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6c0:	6a 00                	push   0x0
c000d6c2:	68 80 51 01 00       	push   0x15180
c000d6c7:	55                   	push   ebp
c000d6c8:	57                   	push   edi
c000d6c9:	bf 10 0e 00 00       	mov    edi,0xe10
c000d6ce:	e8 1d 1d 01 00       	call   c001f3f0 <__umoddi3>
c000d6d3:	83 c4 10             	add    esp,0x10
c000d6d6:	99                   	cdq    
c000d6d7:	f7 ff                	idiv   edi
c000d6d9:	bf 3c 00 00 00       	mov    edi,0x3c
c000d6de:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000d6e1:	89 d0                	mov    eax,edx
c000d6e3:	99                   	cdq    
c000d6e4:	f7 ff                	idiv   edi
c000d6e6:	85 db                	test   ebx,ebx
c000d6e8:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000d6eb:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000d6ee:	79 11                	jns    c000d701 <secondsToDatetime(unsigned long long)+0x6f>
c000d6f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d6f4:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000d6fa:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000d6ff:	eb 07                	jmp    c000d708 <secondsToDatetime(unsigned long long)+0x76>
c000d701:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000d706:	89 d8                	mov    eax,ebx
c000d708:	bf b4 05 00 00       	mov    edi,0x5b4
c000d70d:	99                   	cdq    
c000d70e:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000d713:	f7 f9                	idiv   ecx
c000d715:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000d71a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d71e:	31 d2                	xor    edx,edx
c000d720:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000d728:	01 c3                	add    ebx,eax
c000d72a:	89 d8                	mov    eax,ebx
c000d72c:	f7 f1                	div    ecx
c000d72e:	31 d2                	xor    edx,edx
c000d730:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000d733:	89 d8                	mov    eax,ebx
c000d735:	f7 f7                	div    edi
c000d737:	31 d2                	xor    edx,edx
c000d739:	29 c1                	sub    ecx,eax
c000d73b:	89 d8                	mov    eax,ebx
c000d73d:	f7 f5                	div    ebp
c000d73f:	bd 6d 01 00 00       	mov    ebp,0x16d
c000d744:	29 c1                	sub    ecx,eax
c000d746:	31 d2                	xor    edx,edx
c000d748:	89 c8                	mov    eax,ecx
c000d74a:	f7 f5                	div    ebp
c000d74c:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000d751:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d755:	31 d2                	xor    edx,edx
c000d757:	89 c8                	mov    eax,ecx
c000d759:	f7 f5                	div    ebp
c000d75b:	31 d2                	xor    edx,edx
c000d75d:	01 c3                	add    ebx,eax
c000d75f:	89 c8                	mov    eax,ecx
c000d761:	f7 f7                	div    edi
c000d763:	bf 99 00 00 00       	mov    edi,0x99
c000d768:	29 c3                	sub    ebx,eax
c000d76a:	31 d2                	xor    edx,edx
c000d76c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000d774:	29 c3                	sub    ebx,eax
c000d776:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d779:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000d77c:	bb 05 00 00 00       	mov    ebx,0x5
c000d781:	83 c1 02             	add    ecx,0x2
c000d784:	89 c8                	mov    eax,ecx
c000d786:	f7 f7                	div    edi
c000d788:	31 d2                	xor    edx,edx
c000d78a:	89 c7                	mov    edi,eax
c000d78c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000d792:	83 c0 02             	add    eax,0x2
c000d795:	f7 f3                	div    ebx
c000d797:	89 eb                	mov    ebx,ebp
c000d799:	29 c3                	sub    ebx,eax
c000d79b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000d7a1:	88 1e                	mov    BYTE PTR [esi],bl
c000d7a3:	19 c0                	sbb    eax,eax
c000d7a5:	31 d2                	xor    edx,edx
c000d7a7:	83 e0 0c             	and    eax,0xc
c000d7aa:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000d7ae:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000d7b6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000d7ba:	83 f9 01             	cmp    ecx,0x1
c000d7bd:	0f 96 c2             	setbe  dl
c000d7c0:	41                   	inc    ecx
c000d7c1:	01 d0                	add    eax,edx
c000d7c3:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000d7c6:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000d7ca:	83 c4 1c             	add    esp,0x1c
c000d7cd:	89 f0                	mov    eax,esi
c000d7cf:	5b                   	pop    ebx
c000d7d0:	5e                   	pop    esi
c000d7d1:	5f                   	pop    edi
c000d7d2:	5d                   	pop    ebp
c000d7d3:	c2 04 00             	ret    0x4

c000d7d6 <Clock::timeInDatetimeLocal()>:
c000d7d6:	53                   	push   ebx
c000d7d7:	83 ec 14             	sub    esp,0x14
c000d7da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000d7de:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d7e2:	e8 83 fc ff ff       	call   c000d46a <Clock::timeInSecondsLocal()>
c000d7e7:	83 c4 0c             	add    esp,0xc
c000d7ea:	52                   	push   edx
c000d7eb:	50                   	push   eax
c000d7ec:	53                   	push   ebx
c000d7ed:	e8 a0 fe ff ff       	call   c000d692 <secondsToDatetime(unsigned long long)>
c000d7f2:	89 d8                	mov    eax,ebx
c000d7f4:	83 c4 14             	add    esp,0x14
c000d7f7:	5b                   	pop    ebx
c000d7f8:	c2 04 00             	ret    0x4
c000d7fb:	90                   	nop

c000d7fc <Device::hibernate()>:
c000d7fc:	c3                   	ret    
c000d7fd:	90                   	nop

c000d7fe <Device::wake()>:
c000d7fe:	c3                   	ret    
c000d7ff:	90                   	nop

c000d800 <Device::detect()>:
c000d800:	c3                   	ret    
c000d801:	90                   	nop

c000d802 <Device::disableLegacy()>:
c000d802:	c3                   	ret    
c000d803:	90                   	nop

c000d804 <Device::powerSaving(PowerSavingLevel)>:
c000d804:	c3                   	ret    
c000d805:	90                   	nop

c000d806 <DriverlessDevice::close(int, int, void*)>:
c000d806:	31 c0                	xor    eax,eax
c000d808:	c3                   	ret    
c000d809:	90                   	nop

c000d80a <DriverlessDevice::detect()>:
c000d80a:	c3                   	ret    
c000d80b:	90                   	nop

c000d80c <DriverlessDevice::open(int, int, void*)>:
c000d80c:	83 ec 18             	sub    esp,0x18
c000d80f:	68 f0 10 02 c0       	push   0xc00210f0
c000d814:	e8 b8 49 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c000d819:	83 c8 ff             	or     eax,0xffffffff
c000d81c:	83 c4 1c             	add    esp,0x1c
c000d81f:	c3                   	ret    

c000d820 <Device::~Device()>:
c000d820:	ba 50 11 02 c0       	mov    edx,0xc0021150
c000d825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d829:	89 10                	mov    DWORD PTR [eax],edx
c000d82b:	90                   	nop
c000d82c:	c3                   	ret    
c000d82d:	90                   	nop

c000d82e <Device::~Device()>:
c000d82e:	83 ec 0c             	sub    esp,0xc
c000d831:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d835:	e8 e6 ff ff ff       	call   c000d820 <Device::~Device()>
c000d83a:	83 c4 04             	add    esp,0x4
c000d83d:	83 ec 08             	sub    esp,0x8
c000d840:	68 58 01 00 00       	push   0x158
c000d845:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d849:	e8 cc eb ff ff       	call   c000c41a <operator delete(void*, unsigned long)>
c000d84e:	83 c4 10             	add    esp,0x10
c000d851:	83 c4 0c             	add    esp,0xc
c000d854:	c3                   	ret    
c000d855:	90                   	nop

c000d856 <Device::findAndLoadDriver()>:
c000d856:	c7 44 24 04 0e 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc002110e
c000d85e:	e9 98 ec ff ff       	jmp    c000c4fb <Dbg::kprintf(char const*, ...)>
c000d863:	90                   	nop

c000d864 <Device::preOpenPCI(PCIDeviceInfo)>:
c000d864:	57                   	push   edi
c000d865:	b9 09 00 00 00       	mov    ecx,0x9
c000d86a:	56                   	push   esi
c000d86b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000d86f:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d873:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000d87d:	81 c7 18 01 00 00    	add    edi,0x118
c000d883:	fc                   	cld    
c000d884:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d886:	5e                   	pop    esi
c000d887:	5f                   	pop    edi
c000d888:	c3                   	ret    
c000d889:	90                   	nop

c000d88a <Device::preOpenACPI(void*, char*, char*)>:
c000d88a:	57                   	push   edi
c000d88b:	b9 1e 00 00 00       	mov    ecx,0x1e
c000d890:	56                   	push   esi
c000d891:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d895:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d899:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000d8a3:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000d8a9:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000d8af:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d8b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d8b5:	b9 0e 00 00 00       	mov    ecx,0xe
c000d8ba:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000d8c0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d8c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d8c6:	5e                   	pop    esi
c000d8c7:	5f                   	pop    edi
c000d8c8:	c3                   	ret    
c000d8c9:	90                   	nop

c000d8ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000d8ca:	53                   	push   ebx
c000d8cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d8cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d8d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d8d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d8db:	0f b6 c0             	movzx  eax,al
c000d8de:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000d8e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d8e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d8ea:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000d8ee:	5b                   	pop    ebx
c000d8ef:	e9 a4 05 00 00       	jmp    c000de98 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000d8f4 <Device::getParent()>:
c000d8f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d8f8:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000d8fe:	c3                   	ret    
c000d8ff:	90                   	nop

c000d900 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d900:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d904:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d908:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000d90d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000d911:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d915:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d919:	e9 d9 06 00 00       	jmp    c000dff7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000d91e <Device::addChild(Device*)>:
c000d91e:	53                   	push   ebx
c000d91f:	83 ec 08             	sub    esp,0x8
c000d922:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d926:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d92a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000d930:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000d936:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d938:	85 d2                	test   edx,edx
c000d93a:	74 04                	je     c000d940 <Device::addChild(Device*)+0x22>
c000d93c:	89 d3                	mov    ebx,edx
c000d93e:	eb f6                	jmp    c000d936 <Device::addChild(Device*)+0x18>
c000d940:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000d943:	83 ec 0c             	sub    esp,0xc
c000d946:	6a 08                	push   0x8
c000d948:	e8 24 be ff ff       	call   c0009771 <malloc>
c000d94d:	89 03                	mov    DWORD PTR [ebx],eax
c000d94f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000d955:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000d95c:	83 c4 18             	add    esp,0x18
c000d95f:	5b                   	pop    ebx
c000d960:	c3                   	ret    
c000d961:	90                   	nop

c000d962 <Device::removeAllChildren()>:
c000d962:	56                   	push   esi
c000d963:	53                   	push   ebx
c000d964:	52                   	push   edx
c000d965:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d969:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000d96f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d972:	74 17                	je     c000d98b <Device::removeAllChildren()+0x29>
c000d974:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000d977:	85 c0                	test   eax,eax
c000d979:	74 0c                	je     c000d987 <Device::removeAllChildren()+0x25>
c000d97b:	83 ec 0c             	sub    esp,0xc
c000d97e:	8b 10                	mov    edx,DWORD PTR [eax]
c000d980:	50                   	push   eax
c000d981:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000d984:	83 c4 10             	add    esp,0x10
c000d987:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000d989:	eb e4                	jmp    c000d96f <Device::removeAllChildren()+0xd>
c000d98b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000d991:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000d997:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000d99d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000d9a4:	58                   	pop    eax
c000d9a5:	5b                   	pop    ebx
c000d9a6:	5e                   	pop    esi
c000d9a7:	c3                   	ret    

c000d9a8 <Device::hibernateAll()>:
c000d9a8:	53                   	push   ebx
c000d9a9:	83 ec 14             	sub    esp,0x14
c000d9ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000d9b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d9b2:	53                   	push   ebx
c000d9b3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d9b6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000d9bc:	83 c4 10             	add    esp,0x10
c000d9bf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d9c2:	74 0f                	je     c000d9d3 <Device::hibernateAll()+0x2b>
c000d9c4:	83 ec 0c             	sub    esp,0xc
c000d9c7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000d9ca:	e8 d9 ff ff ff       	call   c000d9a8 <Device::hibernateAll()>
c000d9cf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000d9d1:	eb e9                	jmp    c000d9bc <Device::hibernateAll()+0x14>
c000d9d3:	83 c4 08             	add    esp,0x8
c000d9d6:	5b                   	pop    ebx
c000d9d7:	c3                   	ret    

c000d9d8 <Device::wakeAll()>:
c000d9d8:	53                   	push   ebx
c000d9d9:	83 ec 14             	sub    esp,0x14
c000d9dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000d9e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d9e2:	53                   	push   ebx
c000d9e3:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000d9e6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000d9ec:	83 c4 10             	add    esp,0x10
c000d9ef:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d9f2:	74 0f                	je     c000da03 <Device::wakeAll()+0x2b>
c000d9f4:	83 ec 0c             	sub    esp,0xc
c000d9f7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000d9fa:	e8 d9 ff ff ff       	call   c000d9d8 <Device::wakeAll()>
c000d9ff:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000da01:	eb e9                	jmp    c000d9ec <Device::wakeAll()+0x14>
c000da03:	83 c4 08             	add    esp,0x8
c000da06:	5b                   	pop    ebx
c000da07:	c3                   	ret    

c000da08 <Device::detectAll()>:
c000da08:	53                   	push   ebx
c000da09:	83 ec 14             	sub    esp,0x14
c000da0c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000da10:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da12:	53                   	push   ebx
c000da13:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000da16:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000da1c:	83 c4 10             	add    esp,0x10
c000da1f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000da22:	74 0f                	je     c000da33 <Device::detectAll()+0x2b>
c000da24:	83 ec 0c             	sub    esp,0xc
c000da27:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000da2a:	e8 d9 ff ff ff       	call   c000da08 <Device::detectAll()>
c000da2f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000da31:	eb e9                	jmp    c000da1c <Device::detectAll()+0x14>
c000da33:	83 c4 08             	add    esp,0x8
c000da36:	5b                   	pop    ebx
c000da37:	c3                   	ret    

c000da38 <Device::disableLegacyAll()>:
c000da38:	c3                   	ret    
c000da39:	90                   	nop

c000da3a <Device::loadDriversForAll()>:
c000da3a:	c3                   	ret    
c000da3b:	90                   	nop

c000da3c <Device::closeAll()>:
c000da3c:	53                   	push   ebx
c000da3d:	83 ec 08             	sub    esp,0x8
c000da40:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000da44:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da46:	6a 00                	push   0x0
c000da48:	6a 00                	push   0x0
c000da4a:	6a 00                	push   0x0
c000da4c:	53                   	push   ebx
c000da4d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000da50:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000da56:	83 c4 10             	add    esp,0x10
c000da59:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000da5c:	74 0f                	je     c000da6d <Device::closeAll()+0x31>
c000da5e:	83 ec 0c             	sub    esp,0xc
c000da61:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000da64:	e8 d3 ff ff ff       	call   c000da3c <Device::closeAll()>
c000da69:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000da6b:	eb e9                	jmp    c000da56 <Device::closeAll()+0x1a>
c000da6d:	83 c4 08             	add    esp,0x8
c000da70:	5b                   	pop    ebx
c000da71:	c3                   	ret    

c000da72 <Device::powerSavingAll(PowerSavingLevel)>:
c000da72:	56                   	push   esi
c000da73:	53                   	push   ebx
c000da74:	83 ec 0c             	sub    esp,0xc
c000da77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da7b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000da7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da81:	56                   	push   esi
c000da82:	53                   	push   ebx
c000da83:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000da86:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000da8c:	83 c4 10             	add    esp,0x10
c000da8f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000da92:	74 0f                	je     c000daa3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000da94:	52                   	push   edx
c000da95:	52                   	push   edx
c000da96:	56                   	push   esi
c000da97:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000da9a:	e8 d3 ff ff ff       	call   c000da72 <Device::powerSavingAll(PowerSavingLevel)>
c000da9f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000daa1:	eb e9                	jmp    c000da8c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000daa3:	58                   	pop    eax
c000daa4:	5b                   	pop    ebx
c000daa5:	5e                   	pop    esi
c000daa6:	c3                   	ret    
c000daa7:	90                   	nop

c000daa8 <Device::setName(char const*)>:
c000daa8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000dab0:	e9 af 2a ff ff       	jmp    c0000564 <strcpy>
c000dab5:	90                   	nop

c000dab6 <Device::Device(char const*)>:
c000dab6:	83 ec 1c             	sub    esp,0x1c
c000dab9:	ba 50 11 02 c0       	mov    edx,0xc0021150
c000dabe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dac2:	89 10                	mov    DWORD PTR [eax],edx
c000dac4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dac8:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000dad2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dad6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000dae0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000daee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daf2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000dafc:	83 ec 08             	sub    esp,0x8
c000daff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db07:	e8 9c ff ff ff       	call   c000daa8 <Device::setName(char const*)>
c000db0c:	83 c4 10             	add    esp,0x10
c000db0f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000db17:	83 ec 0c             	sub    esp,0xc
c000db1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db1e:	e8 4e bc ff ff       	call   c0009771 <malloc>
c000db23:	83 c4 10             	add    esp,0x10
c000db26:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000db2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000db33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000db37:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000db3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db41:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000db47:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000db4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db51:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000db57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000db5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db62:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000db69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db6d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000db74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db78:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000db82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db86:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000db90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db94:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000db9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dba2:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000dbac:	90                   	nop
c000dbad:	83 c4 1c             	add    esp,0x1c
c000dbb0:	c3                   	ret    
c000dbb1:	90                   	nop

c000dbb2 <Device::getName()>:
c000dbb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dbb6:	05 d0 00 00 00       	add    eax,0xd0
c000dbbb:	c3                   	ret    

c000dbbc <DriverlessDevice::DriverlessDevice(char const*)>:
c000dbbc:	83 ec 0c             	sub    esp,0xc
c000dbbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbc3:	83 ec 08             	sub    esp,0x8
c000dbc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbca:	50                   	push   eax
c000dbcb:	e8 e6 fe ff ff       	call   c000dab6 <Device::Device(char const*)>
c000dbd0:	83 c4 10             	add    esp,0x10
c000dbd3:	ba 7c 11 02 c0       	mov    edx,0xc002117c
c000dbd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbdc:	89 10                	mov    DWORD PTR [eax],edx
c000dbde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbe2:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000dbec:	90                   	nop
c000dbed:	83 c4 0c             	add    esp,0xc
c000dbf0:	c3                   	ret    
c000dbf1:	90                   	nop

c000dbf2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000dbf2:	57                   	push   edi
c000dbf3:	56                   	push   esi
c000dbf4:	53                   	push   ebx
c000dbf5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dbf9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000dbfd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000dc01:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000dc07:	75 0c                	jne    c000dc15 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000dc09:	52                   	push   edx
c000dc0a:	52                   	push   edx
c000dc0b:	53                   	push   ebx
c000dc0c:	56                   	push   esi
c000dc0d:	e8 90 1b 01 00       	call   c001f7a2 <LinkedList<Device>::addElement(Device*)>
c000dc12:	83 c4 10             	add    esp,0x10
c000dc15:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dc1b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dc1e:	74 12                	je     c000dc32 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000dc20:	50                   	push   eax
c000dc21:	57                   	push   edi
c000dc22:	56                   	push   esi
c000dc23:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc26:	e8 c7 ff ff ff       	call   c000dbf2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000dc2b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dc2d:	83 c4 10             	add    esp,0x10
c000dc30:	eb e9                	jmp    c000dc1b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000dc32:	5b                   	pop    ebx
c000dc33:	5e                   	pop    esi
c000dc34:	5f                   	pop    edi
c000dc35:	c3                   	ret    

c000dc36 <getDevicesOfType(DeviceType)>:
c000dc36:	53                   	push   ebx
c000dc37:	83 ec 14             	sub    esp,0x14
c000dc3a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dc3e:	53                   	push   ebx
c000dc3f:	e8 3a 1c 01 00       	call   c001f87e <LinkedList<Device>::LinkedList()>
c000dc44:	83 c4 0c             	add    esp,0xc
c000dc47:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc4b:	53                   	push   ebx
c000dc4c:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c000dc52:	e8 9b ff ff ff       	call   c000dbf2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000dc57:	89 d8                	mov    eax,ebx
c000dc59:	83 c4 18             	add    esp,0x18
c000dc5c:	5b                   	pop    ebx
c000dc5d:	c2 04 00             	ret    0x4

c000dc60 <HardDiskController::HardDiskController(char const*)>:
c000dc60:	83 ec 0c             	sub    esp,0xc
c000dc63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc67:	83 ec 08             	sub    esp,0x8
c000dc6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc6e:	50                   	push   eax
c000dc6f:	e8 42 fe ff ff       	call   c000dab6 <Device::Device(char const*)>
c000dc74:	83 c4 10             	add    esp,0x10
c000dc77:	ba a8 11 02 c0       	mov    edx,0xc00211a8
c000dc7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc80:	89 10                	mov    DWORD PTR [eax],edx
c000dc82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc86:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000dc90:	90                   	nop
c000dc91:	83 c4 0c             	add    esp,0xc
c000dc94:	c3                   	ret    
c000dc95:	90                   	nop
c000dc96:	66 90                	xchg   ax,ax

c000dc98 <HardDiskController::~HardDiskController()>:
c000dc98:	83 ec 0c             	sub    esp,0xc
c000dc9b:	ba a8 11 02 c0       	mov    edx,0xc00211a8
c000dca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dca4:	89 10                	mov    DWORD PTR [eax],edx
c000dca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcaa:	83 ec 0c             	sub    esp,0xc
c000dcad:	50                   	push   eax
c000dcae:	e8 6d fb ff ff       	call   c000d820 <Device::~Device()>
c000dcb3:	83 c4 10             	add    esp,0x10
c000dcb6:	90                   	nop
c000dcb7:	83 c4 0c             	add    esp,0xc
c000dcba:	c3                   	ret    
c000dcbb:	90                   	nop

c000dcbc <HardDiskController::~HardDiskController()>:
c000dcbc:	83 ec 0c             	sub    esp,0xc
c000dcbf:	83 ec 0c             	sub    esp,0xc
c000dcc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcc6:	e8 cd ff ff ff       	call   c000dc98 <HardDiskController::~HardDiskController()>
c000dccb:	83 c4 10             	add    esp,0x10
c000dcce:	83 ec 08             	sub    esp,0x8
c000dcd1:	68 58 01 00 00       	push   0x158
c000dcd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcda:	e8 3b e7 ff ff       	call   c000c41a <operator delete(void*, unsigned long)>
c000dcdf:	83 c4 10             	add    esp,0x10
c000dce2:	83 c4 0c             	add    esp,0xc
c000dce5:	c3                   	ret    

c000dce6 <PhysicalDisk::eject()>:
c000dce6:	83 c8 ff             	or     eax,0xffffffff
c000dce9:	c3                   	ret    

c000dcea <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000dcea:	83 ec 0c             	sub    esp,0xc
c000dced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcf1:	83 ec 08             	sub    esp,0x8
c000dcf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcf8:	50                   	push   eax
c000dcf9:	e8 b8 fd ff ff       	call   c000dab6 <Device::Device(char const*)>
c000dcfe:	83 c4 10             	add    esp,0x10
c000dd01:	ba d4 11 02 c0       	mov    edx,0xc00211d4
c000dd06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd0a:	89 10                	mov    DWORD PTR [eax],edx
c000dd0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd10:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dd17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd1b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000dd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd26:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000dd30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd34:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dd38:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000dd3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd42:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000dd4c:	90                   	nop
c000dd4d:	83 c4 0c             	add    esp,0xc
c000dd50:	c3                   	ret    
c000dd51:	90                   	nop

c000dd52 <PhysicalDisk::startCache()>:
c000dd52:	56                   	push   esi
c000dd53:	53                   	push   ebx
c000dd54:	83 ec 10             	sub    esp,0x10
c000dd57:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dd5b:	6a 44                	push   0x44
c000dd5d:	e8 0f ba ff ff       	call   c0009771 <malloc>
c000dd62:	89 c6                	mov    esi,eax
c000dd64:	58                   	pop    eax
c000dd65:	5a                   	pop    edx
c000dd66:	53                   	push   ebx
c000dd67:	56                   	push   esi
c000dd68:	e8 87 15 00 00       	call   c000f2f4 <VCache::VCache(PhysicalDisk*)>
c000dd6d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000dd73:	83 c4 14             	add    esp,0x14
c000dd76:	5b                   	pop    ebx
c000dd77:	5e                   	pop    esi
c000dd78:	c3                   	ret    
c000dd79:	90                   	nop

c000dd7a <PhysicalDisk::~PhysicalDisk()>:
c000dd7a:	83 ec 0c             	sub    esp,0xc
c000dd7d:	ba d4 11 02 c0       	mov    edx,0xc00211d4
c000dd82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd86:	89 10                	mov    DWORD PTR [eax],edx
c000dd88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd8c:	83 ec 0c             	sub    esp,0xc
c000dd8f:	50                   	push   eax
c000dd90:	e8 8b fa ff ff       	call   c000d820 <Device::~Device()>
c000dd95:	83 c4 10             	add    esp,0x10
c000dd98:	90                   	nop
c000dd99:	83 c4 0c             	add    esp,0xc
c000dd9c:	c3                   	ret    
c000dd9d:	90                   	nop

c000dd9e <PhysicalDisk::~PhysicalDisk()>:
c000dd9e:	83 ec 0c             	sub    esp,0xc
c000dda1:	83 ec 0c             	sub    esp,0xc
c000dda4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dda8:	e8 cd ff ff ff       	call   c000dd7a <PhysicalDisk::~PhysicalDisk()>
c000ddad:	83 c4 10             	add    esp,0x10
c000ddb0:	83 ec 08             	sub    esp,0x8
c000ddb3:	68 6c 01 00 00       	push   0x16c
c000ddb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddbc:	e8 59 e6 ff ff       	call   c000c41a <operator delete(void*, unsigned long)>
c000ddc1:	83 c4 10             	add    esp,0x10
c000ddc4:	83 c4 0c             	add    esp,0xc
c000ddc7:	c3                   	ret    

c000ddc8 <int_handler>:
c000ddc8:	55                   	push   ebp
c000ddc9:	57                   	push   edi
c000ddca:	56                   	push   esi
c000ddcb:	53                   	push   ebx
c000ddcc:	83 ec 0c             	sub    esp,0xc
c000ddcf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ddd3:	80 3d 64 5c 02 c0 00 	cmp    BYTE PTR ds:0xc0025c64,0x0
c000ddda:	74 0b                	je     c000dde7 <int_handler+0x1f>
c000dddc:	fa                   	cli    
c000dddd:	f4                   	hlt    
c000ddde:	80 3d 64 5c 02 c0 00 	cmp    BYTE PTR ds:0xc0025c64,0x0
c000dde5:	75 f5                	jne    c000dddc <int_handler+0x14>
c000dde7:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000ddea:	8d 46 e0             	lea    eax,[esi-0x20]
c000dded:	83 f8 17             	cmp    eax,0x17
c000ddf0:	76 3e                	jbe    c000de30 <int_handler+0x68>
c000ddf2:	c1 e6 04             	shl    esi,0x4
c000ddf5:	31 db                	xor    ebx,ebx
c000ddf7:	8d ae e0 42 02 c0    	lea    ebp,[esi-0x3ffdbd20]
c000ddfd:	81 c6 e0 32 02 c0    	add    esi,0xc00232e0
c000de03:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000de07:	85 c0                	test   eax,eax
c000de09:	74 13                	je     c000de1e <int_handler+0x56>
c000de0b:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000de0e:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000de12:	74 2a                	je     c000de3e <int_handler+0x76>
c000de14:	83 ec 08             	sub    esp,0x8
c000de17:	52                   	push   edx
c000de18:	57                   	push   edi
c000de19:	ff d0                	call   eax
c000de1b:	83 c4 10             	add    esp,0x10
c000de1e:	43                   	inc    ebx
c000de1f:	83 fb 04             	cmp    ebx,0x4
c000de22:	75 df                	jne    c000de03 <int_handler+0x3b>
c000de24:	83 c4 0c             	add    esp,0xc
c000de27:	31 c0                	xor    eax,eax
c000de29:	5b                   	pop    ebx
c000de2a:	31 d2                	xor    edx,edx
c000de2c:	5e                   	pop    esi
c000de2d:	5f                   	pop    edi
c000de2e:	5d                   	pop    ebp
c000de2f:	c3                   	ret    
c000de30:	83 ec 0c             	sub    esp,0xc
c000de33:	50                   	push   eax
c000de34:	e8 5f a7 00 00       	call   c0018598 <Hal::endOfInterrupt(int)>
c000de39:	83 c4 10             	add    esp,0x10
c000de3c:	eb b4                	jmp    c000ddf2 <int_handler+0x2a>
c000de3e:	83 ec 08             	sub    esp,0x8
c000de41:	52                   	push   edx
c000de42:	57                   	push   edi
c000de43:	ff d0                	call   eax
c000de45:	83 c4 10             	add    esp,0x10
c000de48:	83 c4 0c             	add    esp,0xc
c000de4b:	5b                   	pop    ebx
c000de4c:	5e                   	pop    esi
c000de4d:	5f                   	pop    edi
c000de4e:	5d                   	pop    ebp
c000de4f:	c3                   	ret    

c000de50 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000de50:	56                   	push   esi
c000de51:	31 c0                	xor    eax,eax
c000de53:	53                   	push   ebx
c000de54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000de58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000de5c:	89 ca                	mov    edx,ecx
c000de5e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000de62:	c1 e2 04             	shl    edx,0x4
c000de65:	83 bc 82 e0 42 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdbd20],0x0
c000de6d:	74 15                	je     c000de84 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000de6f:	40                   	inc    eax
c000de70:	83 f8 04             	cmp    eax,0x4
c000de73:	75 f0                	jne    c000de65 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000de75:	c7 44 24 0c 04 12 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021204
c000de7d:	5b                   	pop    ebx
c000de7e:	5e                   	pop    esi
c000de7f:	e9 4d 43 00 00       	jmp    c00121d1 <Krnl::panic(char const*)>
c000de84:	8d 04 88             	lea    eax,[eax+ecx*4]
c000de87:	89 1c 85 e0 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbd20],ebx
c000de8e:	89 34 85 e0 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcd20],esi
c000de95:	5b                   	pop    ebx
c000de96:	5e                   	pop    esi
c000de97:	c3                   	ret    

c000de98 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000de98:	57                   	push   edi
c000de99:	8b 15 c8 31 02 c0    	mov    edx,DWORD PTR ds:0xc00231c8
c000de9f:	56                   	push   esi
c000dea0:	53                   	push   ebx
c000dea1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dea5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dea9:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000deb0:	74 55                	je     c000df07 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6f>
c000deb2:	89 c7                	mov    edi,eax
c000deb4:	84 c0                	test   al,al
c000deb6:	74 1e                	je     c000ded6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c000deb8:	83 fe 0f             	cmp    esi,0xf
c000debb:	0f 8f cc 00 00 00    	jg     c000df8d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf5>
c000dec1:	0f b6 b6 80 2b 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd480]
c000dec8:	66 8b bc 36 80 5a 02 c0 	mov    di,WORD PTR [esi+esi*1-0x3ffda580]
c000ded0:	66 d1 ef             	shr    di,1
c000ded3:	83 e7 01             	and    edi,0x1
c000ded6:	83 ec 08             	sub    esp,0x8
c000ded9:	31 db                	xor    ebx,ebx
c000dedb:	ff 35 00 71 02 c0    	push   DWORD PTR ds:0xc0027100
c000dee1:	68 11 12 02 c0       	push   0xc0021211
c000dee6:	e8 10 e6 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c000deeb:	83 c4 10             	add    esp,0x10
c000deee:	a1 00 71 02 c0       	mov    eax,ds:0xc0027100
c000def3:	85 c0                	test   eax,eax
c000def5:	7f 51                	jg     c000df48 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb0>
c000def7:	83 ec 0c             	sub    esp,0xc
c000defa:	68 28 12 02 c0       	push   0xc0021228
c000deff:	e8 cd 42 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c000df04:	83 c4 10             	add    esp,0x10
c000df07:	8d 4e 20             	lea    ecx,[esi+0x20]
c000df0a:	31 d2                	xor    edx,edx
c000df0c:	89 c8                	mov    eax,ecx
c000df0e:	c1 e0 04             	shl    eax,0x4
c000df11:	8b 9c 90 e0 42 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdbd20]
c000df18:	85 db                	test   ebx,ebx
c000df1a:	0f 84 84 00 00 00    	je     c000dfa4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10c>
c000df20:	42                   	inc    edx
c000df21:	83 fa 04             	cmp    edx,0x4
c000df24:	75 eb                	jne    c000df11 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c000df26:	83 ec 0c             	sub    esp,0xc
c000df29:	68 7c 12 02 c0       	push   0xc002127c
c000df2e:	e8 9e 42 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c000df33:	83 c4 10             	add    esp,0x10
c000df36:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000df3b:	5b                   	pop    ebx
c000df3c:	5e                   	pop    esi
c000df3d:	5f                   	pop    edi
c000df3e:	c3                   	ret    
c000df3f:	43                   	inc    ebx
c000df40:	39 1d 00 71 02 c0    	cmp    DWORD PTR ds:0xc0027100,ebx
c000df46:	7e af                	jle    c000def7 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c000df48:	83 ec 08             	sub    esp,0x8
c000df4b:	56                   	push   esi
c000df4c:	ff 34 9d 20 71 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8ee0]
c000df53:	e8 9c 08 01 00       	call   c001e7f4 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000df58:	83 c4 10             	add    esp,0x10
c000df5b:	84 c0                	test   al,al
c000df5d:	74 e0                	je     c000df3f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa7>
c000df5f:	50                   	push   eax
c000df60:	89 f8                	mov    eax,edi
c000df62:	0f b6 f8             	movzx  edi,al
c000df65:	8d 46 20             	lea    eax,[esi+0x20]
c000df68:	57                   	push   edi
c000df69:	0f b6 c0             	movzx  eax,al
c000df6c:	6a 00                	push   0x0
c000df6e:	50                   	push   eax
c000df6f:	89 f0                	mov    eax,esi
c000df71:	6a 00                	push   0x0
c000df73:	0f b6 c0             	movzx  eax,al
c000df76:	6a 00                	push   0x0
c000df78:	50                   	push   eax
c000df79:	ff 34 9d 20 71 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8ee0]
c000df80:	e8 d9 09 01 00       	call   c001e95e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000df85:	83 c4 20             	add    esp,0x20
c000df88:	e9 7a ff ff ff       	jmp    c000df07 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6f>
c000df8d:	83 ec 0c             	sub    esp,0xc
c000df90:	31 ff                	xor    edi,edi
c000df92:	68 44 12 02 c0       	push   0xc0021244
c000df97:	e8 35 42 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c000df9c:	83 c4 10             	add    esp,0x10
c000df9f:	e9 32 ff ff ff       	jmp    c000ded6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c000dfa4:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000dfa7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dfab:	89 14 85 e0 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbd20],edx
c000dfb2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dfb6:	5b                   	pop    ebx
c000dfb7:	89 14 85 e0 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcd20],edx
c000dfbe:	89 f0                	mov    eax,esi
c000dfc0:	5e                   	pop    esi
c000dfc1:	5f                   	pop    edi
c000dfc2:	c3                   	ret    

c000dfc3 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000dfc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dfc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dfcb:	c1 e0 04             	shl    eax,0x4
c000dfce:	8d 50 10             	lea    edx,[eax+0x10]
c000dfd1:	39 88 e0 42 02 c0    	cmp    DWORD PTR [eax-0x3ffdbd20],ecx
c000dfd7:	74 08                	je     c000dfe1 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000dfd9:	83 c0 04             	add    eax,0x4
c000dfdc:	39 d0                	cmp    eax,edx
c000dfde:	75 f1                	jne    c000dfd1 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000dfe0:	c3                   	ret    
c000dfe1:	c7 80 e0 42 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbd20],0x0
c000dfeb:	c7 80 e0 32 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdcd20],0x0
c000dff5:	eb e2                	jmp    c000dfd9 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000dff7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000dff7:	53                   	push   ebx
c000dff8:	83 ec 08             	sub    esp,0x8
c000dffb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dfff:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e004:	74 0e                	je     c000e014 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e006:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000e00b:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c000e012:	75 37                	jne    c000e04b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000e014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e018:	83 c0 20             	add    eax,0x20
c000e01b:	c1 e0 04             	shl    eax,0x4
c000e01e:	8d 50 10             	lea    edx,[eax+0x10]
c000e021:	39 98 e0 42 02 c0    	cmp    DWORD PTR [eax-0x3ffdbd20],ebx
c000e027:	74 0c                	je     c000e035 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000e029:	83 c0 04             	add    eax,0x4
c000e02c:	39 d0                	cmp    eax,edx
c000e02e:	75 f1                	jne    c000e021 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000e030:	83 c4 08             	add    esp,0x8
c000e033:	5b                   	pop    ebx
c000e034:	c3                   	ret    
c000e035:	c7 80 e0 42 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbd20],0x0
c000e03f:	c7 80 e0 32 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdcd20],0x0
c000e049:	eb de                	jmp    c000e029 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000e04b:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000e050:	7f 11                	jg     c000e063 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000e052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e056:	0f b6 80 80 2b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd480]
c000e05d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e061:	eb b1                	jmp    c000e014 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e063:	83 ec 0c             	sub    esp,0xc
c000e066:	68 35 12 02 c0       	push   0xc0021235
c000e06b:	e8 61 41 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c000e070:	83 c4 10             	add    esp,0x10
c000e073:	eb 9f                	jmp    c000e014 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000e075 <setupINTS()>:
c000e075:	31 c0                	xor    eax,eax
c000e077:	c7 80 e0 42 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbd20],0x0
c000e081:	c7 80 e0 32 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdcd20],0x0
c000e08b:	c7 80 e4 42 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbd1c],0x0
c000e095:	c7 80 e4 32 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdcd1c],0x0
c000e09f:	c7 80 e8 42 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbd18],0x0
c000e0a9:	c7 80 e8 32 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdcd18],0x0
c000e0b3:	c7 80 ec 42 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbd14],0x0
c000e0bd:	c7 80 ec 32 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdcd14],0x0
c000e0c7:	83 c0 10             	add    eax,0x10
c000e0ca:	3d 00 10 00 00       	cmp    eax,0x1000
c000e0cf:	75 a6                	jne    c000e077 <setupINTS()+0x2>
c000e0d1:	c3                   	ret    

c000e0d2 <convertLegacyIRQNumber(int)>:
c000e0d2:	83 ec 0c             	sub    esp,0xc
c000e0d5:	8b 15 c8 31 02 c0    	mov    edx,DWORD PTR ds:0xc00231c8
c000e0db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0df:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000e0e6:	74 0c                	je     c000e0f4 <convertLegacyIRQNumber(int)+0x22>
c000e0e8:	83 f8 0f             	cmp    eax,0xf
c000e0eb:	7f 0b                	jg     c000e0f8 <convertLegacyIRQNumber(int)+0x26>
c000e0ed:	0f b6 80 80 2b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd480]
c000e0f4:	83 c4 0c             	add    esp,0xc
c000e0f7:	c3                   	ret    
c000e0f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0fc:	83 ec 0c             	sub    esp,0xc
c000e0ff:	68 44 12 02 c0       	push   0xc0021244
c000e104:	e8 c8 40 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c000e109:	83 c4 10             	add    esp,0x10
c000e10c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e110:	83 c4 0c             	add    esp,0xc
c000e113:	c3                   	ret    

c000e114 <startGUI(void*)>:
c000e114:	55                   	push   ebp
c000e115:	89 e5                	mov    ebp,esp
c000e117:	53                   	push   ebx
c000e118:	83 ec 04             	sub    esp,0x4
c000e11b:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c000e120:	48                   	dec    eax
c000e121:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c000e126:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c000e12b:	85 c0                	test   eax,eax
c000e12d:	75 01                	jne    c000e130 <startGUI(void*)+0x1c>
c000e12f:	fb                   	sti    
c000e130:	8b 1d c8 31 02 c0    	mov    ebx,DWORD PTR ds:0xc00231c8
c000e136:	83 ec 08             	sub    esp,0x8
c000e139:	6a 01                	push   0x1
c000e13b:	68 a1 12 02 c0       	push   0xc00212a1
c000e140:	e8 31 6b 00 00       	call   c0014c76 <Thr::loadDLL(char const*, bool)>
c000e145:	83 c4 10             	add    esp,0x10
c000e148:	83 ec 08             	sub    esp,0x8
c000e14b:	53                   	push   ebx
c000e14c:	50                   	push   eax
c000e14d:	e8 55 6d 00 00       	call   c0014ea7 <Thr::executeDLL(unsigned long, void*)>
c000e152:	83 c4 10             	add    esp,0x10
c000e155:	8b 1d c8 31 02 c0    	mov    ebx,DWORD PTR ds:0xc00231c8
c000e15b:	83 ec 08             	sub    esp,0x8
c000e15e:	6a 01                	push   0x1
c000e160:	68 bb 12 02 c0       	push   0xc00212bb
c000e165:	e8 0c 6b 00 00       	call   c0014c76 <Thr::loadDLL(char const*, bool)>
c000e16a:	83 c4 10             	add    esp,0x10
c000e16d:	83 ec 08             	sub    esp,0x8
c000e170:	53                   	push   ebx
c000e171:	50                   	push   eax
c000e172:	e8 30 6d 00 00       	call   c0014ea7 <Thr::executeDLL(unsigned long, void*)>
c000e177:	83 c4 10             	add    esp,0x10
c000e17a:	90                   	nop
c000e17b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000e17e:	c9                   	leave  
c000e17f:	c3                   	ret    

c000e180 <startGUIVESA(void*)>:
c000e180:	55                   	push   ebp
c000e181:	89 e5                	mov    ebp,esp
c000e183:	53                   	push   ebx
c000e184:	83 ec 04             	sub    esp,0x4
c000e187:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c000e18c:	48                   	dec    eax
c000e18d:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c000e192:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c000e197:	85 c0                	test   eax,eax
c000e199:	75 01                	jne    c000e19c <startGUIVESA(void*)+0x1c>
c000e19b:	fb                   	sti    
c000e19c:	8b 1d c8 31 02 c0    	mov    ebx,DWORD PTR ds:0xc00231c8
c000e1a2:	83 ec 08             	sub    esp,0x8
c000e1a5:	6a 01                	push   0x1
c000e1a7:	68 d9 12 02 c0       	push   0xc00212d9
c000e1ac:	e8 c5 6a 00 00       	call   c0014c76 <Thr::loadDLL(char const*, bool)>
c000e1b1:	83 c4 10             	add    esp,0x10
c000e1b4:	83 ec 08             	sub    esp,0x8
c000e1b7:	53                   	push   ebx
c000e1b8:	50                   	push   eax
c000e1b9:	e8 e9 6c 00 00       	call   c0014ea7 <Thr::executeDLL(unsigned long, void*)>
c000e1be:	83 c4 10             	add    esp,0x10
c000e1c1:	8b 1d c8 31 02 c0    	mov    ebx,DWORD PTR ds:0xc00231c8
c000e1c7:	83 ec 08             	sub    esp,0x8
c000e1ca:	6a 01                	push   0x1
c000e1cc:	68 bb 12 02 c0       	push   0xc00212bb
c000e1d1:	e8 a0 6a 00 00       	call   c0014c76 <Thr::loadDLL(char const*, bool)>
c000e1d6:	83 c4 10             	add    esp,0x10
c000e1d9:	83 ec 08             	sub    esp,0x8
c000e1dc:	53                   	push   ebx
c000e1dd:	50                   	push   eax
c000e1de:	e8 c4 6c 00 00       	call   c0014ea7 <Thr::executeDLL(unsigned long, void*)>
c000e1e3:	83 c4 10             	add    esp,0x10
c000e1e6:	90                   	nop
c000e1e7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000e1ea:	c9                   	leave  
c000e1eb:	c3                   	ret    

c000e1ec <sendKeyToTerminal(unsigned char)>:
c000e1ec:	55                   	push   ebp
c000e1ed:	89 e5                	mov    ebp,esp
c000e1ef:	83 ec 28             	sub    esp,0x28
c000e1f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e1f5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000e1f8:	a1 14 32 02 c0       	mov    eax,ds:0xc0023214
c000e1fd:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000e201:	83 ec 08             	sub    esp,0x8
c000e204:	52                   	push   edx
c000e205:	50                   	push   eax
c000e206:	e8 d1 c8 ff ff       	call   c000aadc <VgaText::receiveKey(unsigned char)>
c000e20b:	83 c4 10             	add    esp,0x10
c000e20e:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000e212:	0f 85 8f 00 00 00    	jne    c000e2a7 <sendKeyToTerminal(unsigned char)+0xbb>
c000e218:	fa                   	cli    
c000e219:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c000e21e:	40                   	inc    eax
c000e21f:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c000e224:	a1 a4 66 02 c0       	mov    eax,ds:0xc00266a4
c000e229:	40                   	inc    eax
c000e22a:	a3 a4 66 02 c0       	mov    ds:0xc00266a4,eax
c000e22f:	a1 e0 52 02 c0       	mov    eax,ds:0xc00252e0
c000e234:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000e237:	c7 05 e0 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00252e0,0x0
c000e241:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000e245:	74 1f                	je     c000e266 <sendKeyToTerminal(unsigned char)+0x7a>
c000e247:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000e24a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000e24d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000e250:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000e253:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000e256:	83 ec 0c             	sub    esp,0xc
c000e259:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000e25c:	e8 af 78 00 00       	call   c0015b10 <unblockTask(ThreadControlBlock*)>
c000e261:	83 c4 10             	add    esp,0x10
c000e264:	eb db                	jmp    c000e241 <sendKeyToTerminal(unsigned char)+0x55>
c000e266:	a1 a4 66 02 c0       	mov    eax,ds:0xc00266a4
c000e26b:	48                   	dec    eax
c000e26c:	a3 a4 66 02 c0       	mov    ds:0xc00266a4,eax
c000e271:	a1 a4 66 02 c0       	mov    eax,ds:0xc00266a4
c000e276:	85 c0                	test   eax,eax
c000e278:	75 18                	jne    c000e292 <sendKeyToTerminal(unsigned char)+0xa6>
c000e27a:	a1 a0 66 02 c0       	mov    eax,ds:0xc00266a0
c000e27f:	85 c0                	test   eax,eax
c000e281:	74 0f                	je     c000e292 <sendKeyToTerminal(unsigned char)+0xa6>
c000e283:	c7 05 a0 66 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00266a0,0x0
c000e28d:	e8 c2 73 00 00       	call   c0015654 <schedule()>
c000e292:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c000e297:	48                   	dec    eax
c000e298:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c000e29d:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c000e2a2:	85 c0                	test   eax,eax
c000e2a4:	75 01                	jne    c000e2a7 <sendKeyToTerminal(unsigned char)+0xbb>
c000e2a6:	fb                   	sti    
c000e2a7:	90                   	nop
c000e2a8:	c9                   	leave  
c000e2a9:	c3                   	ret    

c000e2aa <sendKeyboardToken(KeyboardToken)>:
c000e2aa:	55                   	push   ebp
c000e2ab:	89 e5                	mov    ebp,esp
c000e2ad:	83 ec 18             	sub    esp,0x18
c000e2b0:	e8 e1 41 00 00       	call   c0012496 <Krnl::userIOReceived()>
c000e2b5:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000e2b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e2bb:	0f b7 c0             	movzx  eax,ax
c000e2be:	83 f2 01             	xor    edx,0x1
c000e2c1:	88 90 00 53 02 c0    	mov    BYTE PTR [eax-0x3ffdad00],dl
c000e2c7:	a1 e8 52 02 c0       	mov    eax,ds:0xc00252e8
c000e2cc:	85 c0                	test   eax,eax
c000e2ce:	74 24                	je     c000e2f4 <sendKeyboardToken(KeyboardToken)+0x4a>
c000e2d0:	8b 0d e8 52 02 c0    	mov    ecx,DWORD PTR ds:0xc00252e8
c000e2d6:	83 ec 04             	sub    esp,0x4
c000e2d9:	68 00 53 02 c0       	push   0xc0025300
c000e2de:	83 ec 08             	sub    esp,0x8
c000e2e1:	89 e2                	mov    edx,esp
c000e2e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e2e6:	89 02                	mov    DWORD PTR [edx],eax
c000e2e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000e2eb:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000e2ef:	ff d1                	call   ecx
c000e2f1:	83 c4 10             	add    esp,0x10
c000e2f4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000e2f8:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000e2fb:	a0 08 57 02 c0       	mov    al,ds:0xc0025708
c000e300:	38 c2                	cmp    dl,al
c000e302:	74 1c                	je     c000e320 <sendKeyboardToken(KeyboardToken)+0x76>
c000e304:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000e307:	a2 08 57 02 c0       	mov    ds:0xc0025708,al
c000e30c:	a0 08 57 02 c0       	mov    al,ds:0xc0025708
c000e311:	0f b6 c0             	movzx  eax,al
c000e314:	83 ec 0c             	sub    esp,0xc
c000e317:	50                   	push   eax
c000e318:	e8 15 bf ff ff       	call   c000a232 <setTerminalScrollLock(bool)>
c000e31d:	83 c4 10             	add    esp,0x10
c000e320:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000e323:	84 c0                	test   al,al
c000e325:	0f 84 ae 00 00 00    	je     c000e3d9 <sendKeyboardToken(KeyboardToken)+0x12f>
c000e32b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e32e:	66 3d 10 03          	cmp    ax,0x310
c000e332:	75 06                	jne    c000e33a <sendKeyboardToken(KeyboardToken)+0x90>
c000e334:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000e33a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e33d:	66 3d 11 03          	cmp    ax,0x311
c000e341:	75 06                	jne    c000e349 <sendKeyboardToken(KeyboardToken)+0x9f>
c000e343:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000e349:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e34c:	66 3d 12 03          	cmp    ax,0x312
c000e350:	75 06                	jne    c000e358 <sendKeyboardToken(KeyboardToken)+0xae>
c000e352:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000e358:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e35b:	66 3d 13 03          	cmp    ax,0x313
c000e35f:	75 06                	jne    c000e367 <sendKeyboardToken(KeyboardToken)+0xbd>
c000e361:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000e367:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e36a:	66 3d 14 03          	cmp    ax,0x314
c000e36e:	75 06                	jne    c000e376 <sendKeyboardToken(KeyboardToken)+0xcc>
c000e370:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000e376:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e379:	66 3d 15 03          	cmp    ax,0x315
c000e37d:	75 06                	jne    c000e385 <sendKeyboardToken(KeyboardToken)+0xdb>
c000e37f:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000e385:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e388:	66 3d 16 03          	cmp    ax,0x316
c000e38c:	75 06                	jne    c000e394 <sendKeyboardToken(KeyboardToken)+0xea>
c000e38e:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000e394:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e397:	66 3d 17 03          	cmp    ax,0x317
c000e39b:	75 06                	jne    c000e3a3 <sendKeyboardToken(KeyboardToken)+0xf9>
c000e39d:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000e3a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e3a6:	66 3d 18 03          	cmp    ax,0x318
c000e3aa:	75 06                	jne    c000e3b2 <sendKeyboardToken(KeyboardToken)+0x108>
c000e3ac:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000e3b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e3b5:	66 3d 19 03          	cmp    ax,0x319
c000e3b9:	75 06                	jne    c000e3c1 <sendKeyboardToken(KeyboardToken)+0x117>
c000e3bb:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000e3c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e3c4:	66 3d 1a 03          	cmp    ax,0x31a
c000e3c8:	0f 85 c9 00 00 00    	jne    c000e497 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000e3ce:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000e3d4:	e9 be 00 00 00       	jmp    c000e497 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000e3d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e3dc:	66 3d 10 03          	cmp    ax,0x310
c000e3e0:	75 0a                	jne    c000e3ec <sendKeyboardToken(KeyboardToken)+0x142>
c000e3e2:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000e3e8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e3ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e3ef:	66 3d 11 03          	cmp    ax,0x311
c000e3f3:	75 0a                	jne    c000e3ff <sendKeyboardToken(KeyboardToken)+0x155>
c000e3f5:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000e3fb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e3ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e402:	66 3d 12 03          	cmp    ax,0x312
c000e406:	75 0a                	jne    c000e412 <sendKeyboardToken(KeyboardToken)+0x168>
c000e408:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000e40e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e415:	66 3d 13 03          	cmp    ax,0x313
c000e419:	75 0a                	jne    c000e425 <sendKeyboardToken(KeyboardToken)+0x17b>
c000e41b:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000e421:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e425:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e428:	66 3d 14 03          	cmp    ax,0x314
c000e42c:	75 0a                	jne    c000e438 <sendKeyboardToken(KeyboardToken)+0x18e>
c000e42e:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000e434:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e438:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e43b:	66 3d 15 03          	cmp    ax,0x315
c000e43f:	75 0a                	jne    c000e44b <sendKeyboardToken(KeyboardToken)+0x1a1>
c000e441:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000e447:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e44b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e44e:	66 3d 16 03          	cmp    ax,0x316
c000e452:	75 0a                	jne    c000e45e <sendKeyboardToken(KeyboardToken)+0x1b4>
c000e454:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000e45a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e45e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e461:	66 3d 17 03          	cmp    ax,0x317
c000e465:	75 0a                	jne    c000e471 <sendKeyboardToken(KeyboardToken)+0x1c7>
c000e467:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000e46d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e471:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e474:	66 3d 18 03          	cmp    ax,0x318
c000e478:	75 0a                	jne    c000e484 <sendKeyboardToken(KeyboardToken)+0x1da>
c000e47a:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000e480:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e484:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e487:	66 3d 19 03          	cmp    ax,0x319
c000e48b:	75 0a                	jne    c000e497 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000e48d:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000e493:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e497:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e49a:	66 3d 00 02          	cmp    ax,0x200
c000e49e:	75 2c                	jne    c000e4cc <sendKeyboardToken(KeyboardToken)+0x222>
c000e4a0:	a0 00 57 02 c0       	mov    al,ds:0xc0025700
c000e4a5:	83 f0 01             	xor    eax,0x1
c000e4a8:	84 c0                	test   al,al
c000e4aa:	74 20                	je     c000e4cc <sendKeyboardToken(KeyboardToken)+0x222>
c000e4ac:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c000e4b1:	6a 01                	push   0x1
c000e4b3:	6a 00                	push   0x0
c000e4b5:	68 14 e1 00 c0       	push   0xc000e114
c000e4ba:	50                   	push   eax
c000e4bb:	e8 78 6f 00 00       	call   c0015438 <Process::createThread(void (*)(void*), void*, int)>
c000e4c0:	83 c4 10             	add    esp,0x10
c000e4c3:	c6 05 00 57 02 c0 01 	mov    BYTE PTR ds:0xc0025700,0x1
c000e4ca:	eb 33                	jmp    c000e4ff <sendKeyboardToken(KeyboardToken)+0x255>
c000e4cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e4cf:	66 3d 01 02          	cmp    ax,0x201
c000e4d3:	75 2a                	jne    c000e4ff <sendKeyboardToken(KeyboardToken)+0x255>
c000e4d5:	a0 00 57 02 c0       	mov    al,ds:0xc0025700
c000e4da:	83 f0 01             	xor    eax,0x1
c000e4dd:	84 c0                	test   al,al
c000e4df:	74 1e                	je     c000e4ff <sendKeyboardToken(KeyboardToken)+0x255>
c000e4e1:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c000e4e6:	6a 01                	push   0x1
c000e4e8:	6a 00                	push   0x0
c000e4ea:	68 80 e1 00 c0       	push   0xc000e180
c000e4ef:	50                   	push   eax
c000e4f0:	e8 43 6f 00 00       	call   c0015438 <Process::createThread(void (*)(void*), void*, int)>
c000e4f5:	83 c4 10             	add    esp,0x10
c000e4f8:	c6 05 00 57 02 c0 01 	mov    BYTE PTR ds:0xc0025700,0x1
c000e4ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e502:	66 3d 1d 03          	cmp    ax,0x31d
c000e506:	75 06                	jne    c000e50e <sendKeyboardToken(KeyboardToken)+0x264>
c000e508:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000e50e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e511:	66 3d 1c 03          	cmp    ax,0x31c
c000e515:	75 06                	jne    c000e51d <sendKeyboardToken(KeyboardToken)+0x273>
c000e517:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000e51d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e520:	66 3d 1b 03          	cmp    ax,0x31b
c000e524:	75 06                	jne    c000e52c <sendKeyboardToken(KeyboardToken)+0x282>
c000e526:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000e52c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e52f:	66 3d 1e 03          	cmp    ax,0x31e
c000e533:	75 06                	jne    c000e53b <sendKeyboardToken(KeyboardToken)+0x291>
c000e535:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000e53b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e53e:	66 3d 1f 03          	cmp    ax,0x31f
c000e542:	75 06                	jne    c000e54a <sendKeyboardToken(KeyboardToken)+0x2a0>
c000e544:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000e54a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e54d:	66 3d 1a 03          	cmp    ax,0x31a
c000e551:	75 06                	jne    c000e559 <sendKeyboardToken(KeyboardToken)+0x2af>
c000e553:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000e559:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000e55d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000e560:	83 f0 01             	xor    eax,0x1
c000e563:	84 c0                	test   al,al
c000e565:	74 77                	je     c000e5de <sendKeyboardToken(KeyboardToken)+0x334>
c000e567:	a0 01 54 02 c0       	mov    al,ds:0xc0025401
c000e56c:	84 c0                	test   al,al
c000e56e:	74 41                	je     c000e5b1 <sendKeyboardToken(KeyboardToken)+0x307>
c000e570:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000e574:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000e578:	74 2b                	je     c000e5a5 <sendKeyboardToken(KeyboardToken)+0x2fb>
c000e57a:	8b 15 04 57 02 c0    	mov    edx,DWORD PTR ds:0xc0025704
c000e580:	89 d0                	mov    eax,edx
c000e582:	c1 e0 02             	shl    eax,0x2
c000e585:	01 d0                	add    eax,edx
c000e587:	01 c0                	add    eax,eax
c000e589:	a3 04 57 02 c0       	mov    ds:0xc0025704,eax
c000e58e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e591:	0f b7 c0             	movzx  eax,ax
c000e594:	8d 50 d0             	lea    edx,[eax-0x30]
c000e597:	a1 04 57 02 c0       	mov    eax,ds:0xc0025704
c000e59c:	01 d0                	add    eax,edx
c000e59e:	a3 04 57 02 c0       	mov    ds:0xc0025704,eax
c000e5a3:	eb 6d                	jmp    c000e612 <sendKeyboardToken(KeyboardToken)+0x368>
c000e5a5:	c7 05 04 57 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025704,0x0
c000e5af:	eb 61                	jmp    c000e612 <sendKeyboardToken(KeyboardToken)+0x368>
c000e5b1:	a1 04 57 02 c0       	mov    eax,ds:0xc0025704
c000e5b6:	85 c0                	test   eax,eax
c000e5b8:	74 18                	je     c000e5d2 <sendKeyboardToken(KeyboardToken)+0x328>
c000e5ba:	a1 04 57 02 c0       	mov    eax,ds:0xc0025704
c000e5bf:	0f b6 c0             	movzx  eax,al
c000e5c2:	83 ec 0c             	sub    esp,0xc
c000e5c5:	50                   	push   eax
c000e5c6:	e8 21 fc ff ff       	call   c000e1ec <sendKeyToTerminal(unsigned char)>
c000e5cb:	83 c4 10             	add    esp,0x10
c000e5ce:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000e5d2:	c7 05 04 57 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025704,0x0
c000e5dc:	eb 34                	jmp    c000e612 <sendKeyboardToken(KeyboardToken)+0x368>
c000e5de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e5e1:	66 3d 01 01          	cmp    ax,0x101
c000e5e5:	75 2b                	jne    c000e612 <sendKeyboardToken(KeyboardToken)+0x368>
c000e5e7:	a1 04 57 02 c0       	mov    eax,ds:0xc0025704
c000e5ec:	85 c0                	test   eax,eax
c000e5ee:	74 18                	je     c000e608 <sendKeyboardToken(KeyboardToken)+0x35e>
c000e5f0:	a1 04 57 02 c0       	mov    eax,ds:0xc0025704
c000e5f5:	0f b6 c0             	movzx  eax,al
c000e5f8:	83 ec 0c             	sub    esp,0xc
c000e5fb:	50                   	push   eax
c000e5fc:	e8 eb fb ff ff       	call   c000e1ec <sendKeyToTerminal(unsigned char)>
c000e601:	83 c4 10             	add    esp,0x10
c000e604:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000e608:	c7 05 04 57 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025704,0x0
c000e612:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000e615:	83 f0 01             	xor    eax,0x1
c000e618:	84 c0                	test   al,al
c000e61a:	74 4c                	je     c000e668 <sendKeyboardToken(KeyboardToken)+0x3be>
c000e61c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000e61f:	83 f0 01             	xor    eax,0x1
c000e622:	84 c0                	test   al,al
c000e624:	74 42                	je     c000e668 <sendKeyboardToken(KeyboardToken)+0x3be>
c000e626:	a0 00 54 02 c0       	mov    al,ds:0xc0025400
c000e62b:	83 f0 01             	xor    eax,0x1
c000e62e:	84 c0                	test   al,al
c000e630:	74 36                	je     c000e668 <sendKeyboardToken(KeyboardToken)+0x3be>
c000e632:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e635:	66 83 f8 1f          	cmp    ax,0x1f
c000e639:	76 09                	jbe    c000e644 <sendKeyboardToken(KeyboardToken)+0x39a>
c000e63b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e63e:	66 83 f8 7e          	cmp    ax,0x7e
c000e642:	76 12                	jbe    c000e656 <sendKeyboardToken(KeyboardToken)+0x3ac>
c000e644:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e647:	66 83 f8 0a          	cmp    ax,0xa
c000e64b:	74 09                	je     c000e656 <sendKeyboardToken(KeyboardToken)+0x3ac>
c000e64d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e650:	66 83 f8 08          	cmp    ax,0x8
c000e654:	75 12                	jne    c000e668 <sendKeyboardToken(KeyboardToken)+0x3be>
c000e656:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e659:	0f b6 c0             	movzx  eax,al
c000e65c:	83 ec 0c             	sub    esp,0xc
c000e65f:	50                   	push   eax
c000e660:	e8 87 fb ff ff       	call   c000e1ec <sendKeyToTerminal(unsigned char)>
c000e665:	83 c4 10             	add    esp,0x10
c000e668:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000e66b:	83 f0 01             	xor    eax,0x1
c000e66e:	84 c0                	test   al,al
c000e670:	74 4f                	je     c000e6c1 <sendKeyboardToken(KeyboardToken)+0x417>
c000e672:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000e675:	83 f0 01             	xor    eax,0x1
c000e678:	84 c0                	test   al,al
c000e67a:	74 45                	je     c000e6c1 <sendKeyboardToken(KeyboardToken)+0x417>
c000e67c:	a0 00 54 02 c0       	mov    al,ds:0xc0025400
c000e681:	84 c0                	test   al,al
c000e683:	74 3c                	je     c000e6c1 <sendKeyboardToken(KeyboardToken)+0x417>
c000e685:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e688:	66 83 f8 3f          	cmp    ax,0x3f
c000e68c:	76 33                	jbe    c000e6c1 <sendKeyboardToken(KeyboardToken)+0x417>
c000e68e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e691:	66 83 f8 7f          	cmp    ax,0x7f
c000e695:	77 2a                	ja     c000e6c1 <sendKeyboardToken(KeyboardToken)+0x417>
c000e697:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e69a:	88 c2                	mov    dl,al
c000e69c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e69f:	66 83 f8 5f          	cmp    ax,0x5f
c000e6a3:	76 04                	jbe    c000e6a9 <sendKeyboardToken(KeyboardToken)+0x3ff>
c000e6a5:	b0 20                	mov    al,0x20
c000e6a7:	eb 02                	jmp    c000e6ab <sendKeyboardToken(KeyboardToken)+0x401>
c000e6a9:	b0 00                	mov    al,0x0
c000e6ab:	29 c2                	sub    edx,eax
c000e6ad:	88 d0                	mov    al,dl
c000e6af:	83 e8 40             	sub    eax,0x40
c000e6b2:	0f b6 c0             	movzx  eax,al
c000e6b5:	83 ec 0c             	sub    esp,0xc
c000e6b8:	50                   	push   eax
c000e6b9:	e8 2e fb ff ff       	call   c000e1ec <sendKeyToTerminal(unsigned char)>
c000e6be:	83 c4 10             	add    esp,0x10
c000e6c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e6c4:	66 3d 00 03          	cmp    ax,0x300
c000e6c8:	75 0f                	jne    c000e6d9 <sendKeyboardToken(KeyboardToken)+0x42f>
c000e6ca:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000e6cd:	83 f0 01             	xor    eax,0x1
c000e6d0:	84 c0                	test   al,al
c000e6d2:	74 05                	je     c000e6d9 <sendKeyboardToken(KeyboardToken)+0x42f>
c000e6d4:	e8 5a bb ff ff       	call   c000a233 <doTerminalCycle()>
c000e6d9:	90                   	nop
c000e6da:	c9                   	leave  
c000e6db:	c3                   	ret    

c000e6dc <clearInternalKeybuffer(VgaText*)>:
c000e6dc:	55                   	push   ebp
c000e6dd:	89 e5                	mov    ebp,esp
c000e6df:	83 ec 08             	sub    esp,0x8
c000e6e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e6e5:	05 b2 00 00 00       	add    eax,0xb2
c000e6ea:	83 ec 0c             	sub    esp,0xc
c000e6ed:	50                   	push   eax
c000e6ee:	e8 d1 1d ff ff       	call   c00004c4 <strlen>
c000e6f3:	83 c4 10             	add    esp,0x10
c000e6f6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000e6f9:	81 c2 b2 00 00 00    	add    edx,0xb2
c000e6ff:	83 ec 04             	sub    esp,0x4
c000e702:	50                   	push   eax
c000e703:	6a 00                	push   0x0
c000e705:	52                   	push   edx
c000e706:	e8 9d 1d ff ff       	call   c00004a8 <memset>
c000e70b:	83 c4 10             	add    esp,0x10
c000e70e:	90                   	nop
c000e70f:	c9                   	leave  
c000e710:	c3                   	ret    

c000e711 <readKeyboard(VgaText*, char*, unsigned long)>:
c000e711:	55                   	push   ebp
c000e712:	89 e5                	mov    ebp,esp
c000e714:	83 ec 18             	sub    esp,0x18
c000e717:	a1 e8 52 02 c0       	mov    eax,ds:0xc00252e8
c000e71c:	85 c0                	test   eax,eax
c000e71e:	74 2a                	je     c000e74a <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000e720:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000e726:	8b 0d e8 52 02 c0    	mov    ecx,DWORD PTR ds:0xc00252e8
c000e72c:	83 ec 04             	sub    esp,0x4
c000e72f:	68 00 53 02 c0       	push   0xc0025300
c000e734:	83 ec 08             	sub    esp,0x8
c000e737:	89 e2                	mov    edx,esp
c000e739:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000e73c:	89 02                	mov    DWORD PTR [edx],eax
c000e73e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000e741:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000e745:	ff d1                	call   ecx
c000e747:	83 c4 10             	add    esp,0x10
c000e74a:	fb                   	sti    
c000e74b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000e752:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000e756:	0f 84 a1 00 00 00    	je     c000e7fd <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000e75c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e75f:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000e765:	84 c0                	test   al,al
c000e767:	75 28                	jne    c000e791 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000e769:	fa                   	cli    
c000e76a:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c000e76f:	40                   	inc    eax
c000e770:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c000e775:	e8 da 6e 00 00       	call   c0015654 <schedule()>
c000e77a:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c000e77f:	48                   	dec    eax
c000e780:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c000e785:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c000e78a:	85 c0                	test   eax,eax
c000e78c:	75 ce                	jne    c000e75c <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000e78e:	fb                   	sti    
c000e78f:	eb cb                	jmp    c000e75c <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000e791:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000e794:	8d 50 01             	lea    edx,[eax+0x1]
c000e797:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000e79a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000e79d:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000e7a3:	88 10                	mov    BYTE PTR [eax],dl
c000e7a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e7a8:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000e7ae:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000e7b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e7b4:	05 b2 00 00 00       	add    eax,0xb2
c000e7b9:	83 ec 0c             	sub    esp,0xc
c000e7bc:	50                   	push   eax
c000e7bd:	e8 02 1d ff ff       	call   c00004c4 <strlen>
c000e7c2:	83 c4 10             	add    esp,0x10
c000e7c5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000e7c8:	81 c2 b2 00 00 00    	add    edx,0xb2
c000e7ce:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e7d1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000e7d4:	81 c2 b2 00 00 00    	add    edx,0xb2
c000e7da:	83 ec 04             	sub    esp,0x4
c000e7dd:	50                   	push   eax
c000e7de:	51                   	push   ecx
c000e7df:	52                   	push   edx
c000e7e0:	e8 fb 1b ff ff       	call   c00003e0 <memmove>
c000e7e5:	83 c4 10             	add    esp,0x10
c000e7e8:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000e7eb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000e7ee:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000e7f2:	0f 85 5a ff ff ff    	jne    c000e752 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000e7f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000e7fb:	eb 03                	jmp    c000e800 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000e7fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000e800:	c9                   	leave  
c000e801:	c3                   	ret    

c000e802 <Keyboard::Keyboard(char const*)>:
c000e802:	83 ec 0c             	sub    esp,0xc
c000e805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e809:	83 ec 08             	sub    esp,0x8
c000e80c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e810:	50                   	push   eax
c000e811:	e8 a0 f2 ff ff       	call   c000dab6 <Device::Device(char const*)>
c000e816:	83 c4 10             	add    esp,0x10
c000e819:	ba fc 12 02 c0       	mov    edx,0xc00212fc
c000e81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e822:	89 10                	mov    DWORD PTR [eax],edx
c000e824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e828:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000e832:	c6 05 e4 52 02 c0 01 	mov    BYTE PTR ds:0xc00252e4,0x1
c000e839:	90                   	nop
c000e83a:	83 c4 0c             	add    esp,0xc
c000e83d:	c3                   	ret    

c000e83e <Keyboard::~Keyboard()>:
c000e83e:	83 ec 0c             	sub    esp,0xc
c000e841:	ba fc 12 02 c0       	mov    edx,0xc00212fc
c000e846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84a:	89 10                	mov    DWORD PTR [eax],edx
c000e84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e850:	83 ec 0c             	sub    esp,0xc
c000e853:	50                   	push   eax
c000e854:	e8 c7 ef ff ff       	call   c000d820 <Device::~Device()>
c000e859:	83 c4 10             	add    esp,0x10
c000e85c:	90                   	nop
c000e85d:	83 c4 0c             	add    esp,0xc
c000e860:	c3                   	ret    
c000e861:	90                   	nop

c000e862 <Keyboard::~Keyboard()>:
c000e862:	83 ec 0c             	sub    esp,0xc
c000e865:	83 ec 0c             	sub    esp,0xc
c000e868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e86c:	e8 cd ff ff ff       	call   c000e83e <Keyboard::~Keyboard()>
c000e871:	83 c4 10             	add    esp,0x10
c000e874:	83 ec 08             	sub    esp,0x8
c000e877:	68 5c 01 00 00       	push   0x15c
c000e87c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e880:	e8 95 db ff ff       	call   c000c41a <operator delete(void*, unsigned long)>
c000e885:	83 c4 10             	add    esp,0x10
c000e888:	83 c4 0c             	add    esp,0xc
c000e88b:	c3                   	ret    

c000e88c <LogicalDisk::close(int, int, void*)>:
c000e88c:	83 c8 ff             	or     eax,0xffffffff
c000e88f:	c3                   	ret    

c000e890 <LogicalDisk::~LogicalDisk()>:
c000e890:	83 ec 0c             	sub    esp,0xc
c000e893:	ba 74 13 02 c0       	mov    edx,0xc0021374
c000e898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89c:	89 10                	mov    DWORD PTR [eax],edx
c000e89e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a2:	83 ec 0c             	sub    esp,0xc
c000e8a5:	50                   	push   eax
c000e8a6:	e8 75 ef ff ff       	call   c000d820 <Device::~Device()>
c000e8ab:	83 c4 10             	add    esp,0x10
c000e8ae:	90                   	nop
c000e8af:	83 c4 0c             	add    esp,0xc
c000e8b2:	c3                   	ret    
c000e8b3:	90                   	nop

c000e8b4 <LogicalDisk::~LogicalDisk()>:
c000e8b4:	83 ec 0c             	sub    esp,0xc
c000e8b7:	83 ec 0c             	sub    esp,0xc
c000e8ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8be:	e8 cd ff ff ff       	call   c000e890 <LogicalDisk::~LogicalDisk()>
c000e8c3:	83 c4 10             	add    esp,0x10
c000e8c6:	83 ec 08             	sub    esp,0x8
c000e8c9:	68 74 01 00 00       	push   0x174
c000e8ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8d2:	e8 43 db ff ff       	call   c000c41a <operator delete(void*, unsigned long)>
c000e8d7:	83 c4 10             	add    esp,0x10
c000e8da:	83 c4 0c             	add    esp,0xc
c000e8dd:	c3                   	ret    

c000e8de <LogicalDisk::open(int, int, void*)>:
c000e8de:	83 ec 18             	sub    esp,0x18
c000e8e1:	68 28 13 02 c0       	push   0xc0021328
c000e8e6:	e8 e6 38 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c000e8eb:	83 c8 ff             	or     eax,0xffffffff
c000e8ee:	83 c4 1c             	add    esp,0x1c
c000e8f1:	c3                   	ret    

c000e8f2 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000e8f2:	53                   	push   ebx
c000e8f3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e8f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e8ff:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000e905:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000e90b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000e911:	77 10                	ja     c000e923 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000e913:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000e919:	89 d3                	mov    ebx,edx
c000e91b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000e921:	72 05                	jb     c000e928 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000e923:	83 c8 ff             	or     eax,0xffffffff
c000e926:	89 c2                	mov    edx,eax
c000e928:	5b                   	pop    ebx
c000e929:	c3                   	ret    

c000e92a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000e92a:	56                   	push   esi
c000e92b:	83 c8 ff             	or     eax,0xffffffff
c000e92e:	53                   	push   ebx
c000e92f:	89 c2                	mov    edx,eax
c000e931:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e935:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e939:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e93d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000e943:	77 27                	ja     c000e96c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000e945:	89 d8                	mov    eax,ebx
c000e947:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000e94d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000e953:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e958:	89 c2                	mov    edx,eax
c000e95a:	73 10                	jae    c000e96c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000e95c:	89 c8                	mov    eax,ecx
c000e95e:	89 da                	mov    edx,ebx
c000e960:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000e966:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000e96c:	5b                   	pop    ebx
c000e96d:	5e                   	pop    esi
c000e96e:	c3                   	ret    
c000e96f:	90                   	nop

c000e970 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000e970:	83 ec 1c             	sub    esp,0x1c
c000e973:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e977:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e97b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e97f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e983:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e987:	89 04 24             	mov    DWORD PTR [esp],eax
c000e98a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e98e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e992:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e996:	83 ec 08             	sub    esp,0x8
c000e999:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e99d:	50                   	push   eax
c000e99e:	e8 13 f1 ff ff       	call   c000dab6 <Device::Device(char const*)>
c000e9a3:	83 c4 10             	add    esp,0x10
c000e9a6:	ba 74 13 02 c0       	mov    edx,0xc0021374
c000e9ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9af:	89 10                	mov    DWORD PTR [eax],edx
c000e9b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9b5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e9bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9c0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e9c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9cb:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000e9d5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e9d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e9e1:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000e9e7:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000e9ed:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e9f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e9f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e9f8:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000e9fe:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ea04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea08:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea0c:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000ea12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea16:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ea20:	90                   	nop
c000ea21:	83 c4 1c             	add    esp,0x1c
c000ea24:	c3                   	ret    
c000ea25:	90                   	nop

c000ea26 <LogicalDisk::assignDriveLetter()>:
c000ea26:	55                   	push   ebp
c000ea27:	57                   	push   edi
c000ea28:	56                   	push   esi
c000ea29:	53                   	push   ebx
c000ea2a:	83 ec 14             	sub    esp,0x14
c000ea2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea31:	8b 3d 20 57 02 c0    	mov    edi,DWORD PTR ds:0xc0025720
c000ea37:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000ea3d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ea41:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000ea47:	8b 3d 24 57 02 c0    	mov    edi,DWORD PTR ds:0xc0025724
c000ea4d:	3c 01                	cmp    al,0x1
c000ea4f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ea53:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ea57:	19 c0                	sbb    eax,eax
c000ea59:	83 e0 02             	and    eax,0x2
c000ea5c:	83 c0 41             	add    eax,0x41
c000ea5f:	0f be e8             	movsx  ebp,al
c000ea62:	3c 43                	cmp    al,0x43
c000ea64:	75 10                	jne    c000ea76 <LogicalDisk::assignDriveLetter()+0x50>
c000ea66:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000ea6d:	75 5d                	jne    c000eacc <LogicalDisk::assignDriveLetter()+0xa6>
c000ea6f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000ea74:	75 56                	jne    c000eacc <LogicalDisk::assignDriveLetter()+0xa6>
c000ea76:	8d 75 bf             	lea    esi,[ebp-0x41]
c000ea79:	ba 01 00 00 00       	mov    edx,0x1
c000ea7e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ea82:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000ea86:	d3 e2                	shl    edx,cl
c000ea88:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea8c:	89 d7                	mov    edi,edx
c000ea8e:	89 d6                	mov    esi,edx
c000ea90:	c1 ff 1f             	sar    edi,0x1f
c000ea93:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000ea97:	21 f9                	and    ecx,edi
c000ea99:	09 d1                	or     ecx,edx
c000ea9b:	75 2f                	jne    c000eacc <LogicalDisk::assignDriveLetter()+0xa6>
c000ea9d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000eaa1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eaa5:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000eaab:	09 f2                	or     edx,esi
c000eaad:	89 15 20 57 02 c0    	mov    DWORD PTR ds:0xc0025720,edx
c000eab3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eab7:	09 fa                	or     edx,edi
c000eab9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000eabd:	89 15 24 57 02 c0    	mov    DWORD PTR ds:0xc0025724,edx
c000eac3:	89 1c bd 40 57 02 c0 	mov    DWORD PTR [edi*4-0x3ffda8c0],ebx
c000eaca:	eb 08                	jmp    c000ead4 <LogicalDisk::assignDriveLetter()+0xae>
c000eacc:	45                   	inc    ebp
c000eacd:	40                   	inc    eax
c000eace:	3c 5b                	cmp    al,0x5b
c000ead0:	75 90                	jne    c000ea62 <LogicalDisk::assignDriveLetter()+0x3c>
c000ead2:	31 c0                	xor    eax,eax
c000ead4:	83 c4 14             	add    esp,0x14
c000ead7:	5b                   	pop    ebx
c000ead8:	5e                   	pop    esi
c000ead9:	5f                   	pop    edi
c000eada:	5d                   	pop    ebp
c000eadb:	c3                   	ret    

c000eadc <LogicalDisk::mount()>:
c000eadc:	56                   	push   esi
c000eadd:	53                   	push   ebx
c000eade:	53                   	push   ebx
c000eadf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eae3:	8b 1d b8 32 02 c0    	mov    ebx,DWORD PTR ds:0xc00232b8
c000eae9:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000eaf3:	85 db                	test   ebx,ebx
c000eaf5:	74 27                	je     c000eb1e <LogicalDisk::mount()+0x42>
c000eaf7:	51                   	push   ecx
c000eaf8:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000eaff:	8b 13                	mov    edx,DWORD PTR [ebx]
c000eb01:	83 e8 41             	sub    eax,0x41
c000eb04:	50                   	push   eax
c000eb05:	56                   	push   esi
c000eb06:	53                   	push   ebx
c000eb07:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000eb0a:	83 c4 10             	add    esp,0x10
c000eb0d:	84 c0                	test   al,al
c000eb0f:	74 08                	je     c000eb19 <LogicalDisk::mount()+0x3d>
c000eb11:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000eb17:	eb 07                	jmp    c000eb20 <LogicalDisk::mount()+0x44>
c000eb19:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000eb1c:	eb d5                	jmp    c000eaf3 <LogicalDisk::mount()+0x17>
c000eb1e:	31 c0                	xor    eax,eax
c000eb20:	5a                   	pop    edx
c000eb21:	5b                   	pop    ebx
c000eb22:	5e                   	pop    esi
c000eb23:	c3                   	ret    

c000eb24 <LogicalDisk::unmount()>:
c000eb24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb28:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000eb32:	c3                   	ret    
c000eb33:	90                   	nop

c000eb34 <LogicalDisk::eject()>:
c000eb34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb38:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000eb3e:	8b 10                	mov    edx,DWORD PTR [eax]
c000eb40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000eb44:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000eb47:	90                   	nop

c000eb48 <LogicalDisk::unassignDriveLetter()>:
c000eb48:	57                   	push   edi
c000eb49:	56                   	push   esi
c000eb4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb4e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000eb55:	84 c9                	test   cl,cl
c000eb57:	75 0f                	jne    c000eb68 <LogicalDisk::unassignDriveLetter()+0x20>
c000eb59:	c7 44 24 0c 4c 13 02 c0 	mov    DWORD PTR [esp+0xc],0xc002134c
c000eb61:	5e                   	pop    esi
c000eb62:	5f                   	pop    edi
c000eb63:	e9 69 36 00 00       	jmp    c00121d1 <Krnl::panic(char const*)>
c000eb68:	83 e9 41             	sub    ecx,0x41
c000eb6b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000eb72:	b8 01 00 00 00       	mov    eax,0x1
c000eb77:	c7 04 8d 40 57 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffda8c0],0x0
c000eb82:	d3 e0                	shl    eax,cl
c000eb84:	89 c7                	mov    edi,eax
c000eb86:	f7 d0                	not    eax
c000eb88:	c1 ff 1f             	sar    edi,0x1f
c000eb8b:	21 05 20 57 02 c0    	and    DWORD PTR ds:0xc0025720,eax
c000eb91:	89 fe                	mov    esi,edi
c000eb93:	f7 d6                	not    esi
c000eb95:	21 35 24 57 02 c0    	and    DWORD PTR ds:0xc0025724,esi
c000eb9b:	5e                   	pop    esi
c000eb9c:	5f                   	pop    edi
c000eb9d:	c3                   	ret    

c000eb9e <LogicalDisk::read(unsigned long long, int, void*)>:
c000eb9e:	57                   	push   edi
c000eb9f:	56                   	push   esi
c000eba0:	53                   	push   ebx
c000eba1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000eba5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eba9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ebad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ebb1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ebb7:	77 41                	ja     c000ebfa <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000ebb9:	99                   	cdq    
c000ebba:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ebc0:	01 c8                	add    eax,ecx
c000ebc2:	11 da                	adc    edx,ebx
c000ebc4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ebca:	19 d7                	sbb    edi,edx
c000ebcc:	72 33                	jb     c000ec01 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000ebce:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ebd4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ebda:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ebde:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ebe2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ebe8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ebee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ebf2:	5b                   	pop    ebx
c000ebf3:	5e                   	pop    esi
c000ebf4:	5f                   	pop    edi
c000ebf5:	e9 34 0a 00 00       	jmp    c000f62e <VCache::read(unsigned long long, int, void*)>
c000ebfa:	b8 05 00 00 00       	mov    eax,0x5
c000ebff:	eb 05                	jmp    c000ec06 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000ec01:	b8 07 00 00 00       	mov    eax,0x7
c000ec06:	5b                   	pop    ebx
c000ec07:	5e                   	pop    esi
c000ec08:	5f                   	pop    edi
c000ec09:	c3                   	ret    

c000ec0a <LogicalDisk::write(unsigned long long, int, void*)>:
c000ec0a:	57                   	push   edi
c000ec0b:	56                   	push   esi
c000ec0c:	53                   	push   ebx
c000ec0d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ec11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ec15:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ec19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ec1d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ec23:	77 41                	ja     c000ec66 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ec25:	99                   	cdq    
c000ec26:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ec2c:	01 c8                	add    eax,ecx
c000ec2e:	11 da                	adc    edx,ebx
c000ec30:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ec36:	19 d7                	sbb    edi,edx
c000ec38:	72 33                	jb     c000ec6d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000ec3a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ec40:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ec46:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ec4a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ec4e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ec54:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ec5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec5e:	5b                   	pop    ebx
c000ec5f:	5e                   	pop    esi
c000ec60:	5f                   	pop    edi
c000ec61:	e9 ce 08 00 00       	jmp    c000f534 <VCache::write(unsigned long long, int, void*)>
c000ec66:	b8 05 00 00 00       	mov    eax,0x5
c000ec6b:	eb 05                	jmp    c000ec72 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ec6d:	b8 07 00 00 00       	mov    eax,0x7
c000ec72:	5b                   	pop    ebx
c000ec73:	5e                   	pop    esi
c000ec74:	5f                   	pop    edi
c000ec75:	c3                   	ret    
c000ec76:	66 90                	xchg   ax,ax

c000ec78 <Mouse::Mouse(char const*)>:
c000ec78:	83 ec 0c             	sub    esp,0xc
c000ec7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec7f:	83 ec 08             	sub    esp,0x8
c000ec82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec86:	50                   	push   eax
c000ec87:	e8 2a ee ff ff       	call   c000dab6 <Device::Device(char const*)>
c000ec8c:	83 c4 10             	add    esp,0x10
c000ec8f:	ba a0 13 02 c0       	mov    edx,0xc00213a0
c000ec94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec98:	89 10                	mov    DWORD PTR [eax],edx
c000ec9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec9e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000eca8:	90                   	nop
c000eca9:	83 c4 0c             	add    esp,0xc
c000ecac:	c3                   	ret    
c000ecad:	90                   	nop
c000ecae:	66 90                	xchg   ax,ax

c000ecb0 <Mouse::~Mouse()>:
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	ba a0 13 02 c0       	mov    edx,0xc00213a0
c000ecb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecbc:	89 10                	mov    DWORD PTR [eax],edx
c000ecbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecc2:	83 ec 0c             	sub    esp,0xc
c000ecc5:	50                   	push   eax
c000ecc6:	e8 55 eb ff ff       	call   c000d820 <Device::~Device()>
c000eccb:	83 c4 10             	add    esp,0x10
c000ecce:	90                   	nop
c000eccf:	83 c4 0c             	add    esp,0xc
c000ecd2:	c3                   	ret    
c000ecd3:	90                   	nop

c000ecd4 <Mouse::~Mouse()>:
c000ecd4:	83 ec 0c             	sub    esp,0xc
c000ecd7:	83 ec 0c             	sub    esp,0xc
c000ecda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ecde:	e8 cd ff ff ff       	call   c000ecb0 <Mouse::~Mouse()>
c000ece3:	83 c4 10             	add    esp,0x10
c000ece6:	83 ec 08             	sub    esp,0x8
c000ece9:	68 58 01 00 00       	push   0x158
c000ecee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ecf2:	e8 23 d7 ff ff       	call   c000c41a <operator delete(void*, unsigned long)>
c000ecf7:	83 c4 10             	add    esp,0x10
c000ecfa:	83 c4 0c             	add    esp,0xc
c000ecfd:	c3                   	ret    

c000ecfe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ecfe:	55                   	push   ebp
c000ecff:	57                   	push   edi
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	81 ec 28 01 00 00    	sub    esp,0x128
c000ed08:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000ed0f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000ed16:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000ed1d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000ed24:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ed28:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ed2c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ed33:	e8 7a ee ff ff       	call   c000dbb2 <Device::getName()>
c000ed38:	5a                   	pop    edx
c000ed39:	59                   	pop    ecx
c000ed3a:	50                   	push   eax
c000ed3b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ed3f:	55                   	push   ebp
c000ed40:	e8 1f 18 ff ff       	call   c0000564 <strcpy>
c000ed45:	5b                   	pop    ebx
c000ed46:	58                   	pop    eax
c000ed47:	68 c4 13 02 c0       	push   0xc00213c4
c000ed4c:	55                   	push   ebp
c000ed4d:	e8 52 19 ff ff       	call   c00006a4 <strcat>
c000ed52:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000ed59:	e8 13 aa ff ff       	call   c0009771 <malloc>
c000ed5e:	83 c4 0c             	add    esp,0xc
c000ed61:	89 c3                	mov    ebx,eax
c000ed63:	57                   	push   edi
c000ed64:	56                   	push   esi
c000ed65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed6d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ed74:	55                   	push   ebp
c000ed75:	50                   	push   eax
c000ed76:	e8 f5 fb ff ff       	call   c000e970 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ed7b:	83 c4 14             	add    esp,0x14
c000ed7e:	53                   	push   ebx
c000ed7f:	e8 a2 fc ff ff       	call   c000ea26 <LogicalDisk::assignDriveLetter()>
c000ed84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ed87:	e8 50 fd ff ff       	call   c000eadc <LogicalDisk::mount()>
c000ed8c:	58                   	pop    eax
c000ed8d:	5a                   	pop    edx
c000ed8e:	53                   	push   ebx
c000ed8f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ed96:	e8 83 eb ff ff       	call   c000d91e <Device::addChild(Device*)>
c000ed9b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000eda1:	5b                   	pop    ebx
c000eda2:	5e                   	pop    esi
c000eda3:	5f                   	pop    edi
c000eda4:	5d                   	pop    ebp
c000eda5:	c3                   	ret    

c000eda6 <createPartitionsForDisk(PhysicalDisk*)>:
c000eda6:	55                   	push   ebp
c000eda7:	57                   	push   edi
c000eda8:	56                   	push   esi
c000eda9:	53                   	push   ebx
c000edaa:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000edb0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000edb7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000edbd:	3d 00 02 00 00       	cmp    eax,0x200
c000edc2:	74 27                	je     c000edeb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000edc4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000edca:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000edd0:	83 ec 10             	sub    esp,0x10
c000edd3:	0f a4 f7 0a          	shld   edi,esi,0xa
c000edd7:	99                   	cdq    
c000edd8:	c1 e6 0a             	shl    esi,0xa
c000eddb:	52                   	push   edx
c000eddc:	89 fd                	mov    ebp,edi
c000edde:	50                   	push   eax
c000eddf:	55                   	push   ebp
c000ede0:	56                   	push   esi
c000ede1:	e8 0a 05 01 00       	call   c001f2f0 <__udivdi3>
c000ede6:	e9 b1 00 00 00       	jmp    c000ee9c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000edeb:	83 ec 0c             	sub    esp,0xc
c000edee:	8b 03                	mov    eax,DWORD PTR [ebx]
c000edf0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000edf4:	56                   	push   esi
c000edf5:	6a 01                	push   0x1
c000edf7:	6a 00                	push   0x0
c000edf9:	6a 00                	push   0x0
c000edfb:	53                   	push   ebx
c000edfc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000edff:	83 c4 20             	add    esp,0x20
c000ee02:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ee0a:	75 0a                	jne    c000ee16 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ee0c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ee14:	74 2c                	je     c000ee42 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ee16:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ee1c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ee22:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ee28:	83 ec 10             	sub    esp,0x10
c000ee2b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ee2f:	89 f7                	mov    edi,esi
c000ee31:	c1 e0 0a             	shl    eax,0xa
c000ee34:	c1 ff 1f             	sar    edi,0x1f
c000ee37:	57                   	push   edi
c000ee38:	56                   	push   esi
c000ee39:	52                   	push   edx
c000ee3a:	50                   	push   eax
c000ee3b:	e8 b0 04 01 00       	call   c001f2f0 <__udivdi3>
c000ee40:	eb 5a                	jmp    c000ee9c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ee42:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ee49:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000ee50:	83 e1 7f             	and    ecx,0x7f
c000ee53:	83 e0 7f             	and    eax,0x7f
c000ee56:	01 c1                	add    ecx,eax
c000ee58:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000ee5f:	83 e0 7f             	and    eax,0x7f
c000ee62:	01 c1                	add    ecx,eax
c000ee64:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ee6b:	83 e0 7f             	and    eax,0x7f
c000ee6e:	00 c1                	add    cl,al
c000ee70:	74 41                	je     c000eeb3 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000ee72:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ee78:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ee7e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ee84:	83 ec 10             	sub    esp,0x10
c000ee87:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ee8b:	89 f7                	mov    edi,esi
c000ee8d:	c1 e0 0a             	shl    eax,0xa
c000ee90:	c1 ff 1f             	sar    edi,0x1f
c000ee93:	57                   	push   edi
c000ee94:	56                   	push   esi
c000ee95:	52                   	push   edx
c000ee96:	50                   	push   eax
c000ee97:	e8 54 04 01 00       	call   c001f2f0 <__udivdi3>
c000ee9c:	83 c4 14             	add    esp,0x14
c000ee9f:	52                   	push   edx
c000eea0:	50                   	push   eax
c000eea1:	6a 00                	push   0x0
c000eea3:	6a 00                	push   0x0
c000eea5:	53                   	push   ebx
c000eea6:	e8 53 fe ff ff       	call   c000ecfe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000eeab:	83 c4 20             	add    esp,0x20
c000eeae:	e9 79 01 00 00       	jmp    c000f02c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000eeb3:	89 f0                	mov    eax,esi
c000eeb5:	31 f6                	xor    esi,esi
c000eeb7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000eebe:	75 02                	jne    c000eec2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000eec0:	89 f1                	mov    ecx,esi
c000eec2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000eec9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000eed0:	c1 e2 08             	shl    edx,0x8
c000eed3:	c1 e7 10             	shl    edi,0x10
c000eed6:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000eede:	09 fa                	or     edx,edi
c000eee0:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000eee8:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000eeef:	83 c0 10             	add    eax,0x10
c000eef2:	09 fa                	or     edx,edi
c000eef4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000eefb:	c1 e7 18             	shl    edi,0x18
c000eefe:	09 fa                	or     edx,edi
c000ef00:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000ef07:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000ef0b:	c1 e7 10             	shl    edi,0x10
c000ef0e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000ef15:	c1 e2 08             	shl    edx,0x8
c000ef18:	09 fa                	or     edx,edi
c000ef1a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000ef21:	09 fa                	or     edx,edi
c000ef23:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000ef2a:	c1 e7 18             	shl    edi,0x18
c000ef2d:	09 fa                	or     edx,edi
c000ef2f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000ef33:	46                   	inc    esi
c000ef34:	83 fe 04             	cmp    esi,0x4
c000ef37:	0f 85 7a ff ff ff    	jne    c000eeb7 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000ef3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef41:	83 f0 01             	xor    eax,0x1
c000ef44:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ef48:	75 57                	jne    c000efa1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ef4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef4e:	83 f0 01             	xor    eax,0x1
c000ef51:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000ef55:	75 4a                	jne    c000efa1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ef57:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000ef5b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000ef63:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ef6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef71:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ef77:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ef7d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ef81:	89 f7                	mov    edi,esi
c000ef83:	c1 e0 0a             	shl    eax,0xa
c000ef86:	c1 ff 1f             	sar    edi,0x1f
c000ef89:	57                   	push   edi
c000ef8a:	56                   	push   esi
c000ef8b:	52                   	push   edx
c000ef8c:	50                   	push   eax
c000ef8d:	e8 5e 03 01 00       	call   c001f2f0 <__udivdi3>
c000ef92:	83 c4 10             	add    esp,0x10
c000ef95:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ef99:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000ef9d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000efa1:	84 c9                	test   cl,cl
c000efa3:	74 53                	je     c000eff8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000efa5:	0f b6 c9             	movzx  ecx,cl
c000efa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000efb0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000efb4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000efb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000efbc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000efc0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000efc4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000efc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000efcc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000efd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efd4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000efd8:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000efdc:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000efe0:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000efe4:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000efe8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000efec:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000eff0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000eff4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000eff8:	31 ed                	xor    ebp,ebp
c000effa:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000effe:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000f002:	89 f8                	mov    eax,edi
c000f004:	09 f0                	or     eax,esi
c000f006:	74 1e                	je     c000f026 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000f008:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000f00c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000f010:	89 d1                	mov    ecx,edx
c000f012:	09 c1                	or     ecx,eax
c000f014:	74 10                	je     c000f026 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000f016:	83 ec 0c             	sub    esp,0xc
c000f019:	57                   	push   edi
c000f01a:	56                   	push   esi
c000f01b:	52                   	push   edx
c000f01c:	50                   	push   eax
c000f01d:	53                   	push   ebx
c000f01e:	e8 db fc ff ff       	call   c000ecfe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000f023:	83 c4 20             	add    esp,0x20
c000f026:	45                   	inc    ebp
c000f027:	83 fd 04             	cmp    ebp,0x4
c000f02a:	75 ce                	jne    c000effa <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000f02c:	81 c4 5c 02 00 00    	add    esp,0x25c
c000f032:	5b                   	pop    ebx
c000f033:	5e                   	pop    esi
c000f034:	5f                   	pop    edi
c000f035:	5d                   	pop    ebp
c000f036:	c3                   	ret    
c000f037:	90                   	nop

c000f038 <Serial::Serial(char const*)>:
c000f038:	83 ec 0c             	sub    esp,0xc
c000f03b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f03f:	83 ec 08             	sub    esp,0x8
c000f042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f046:	50                   	push   eax
c000f047:	e8 6a ea ff ff       	call   c000dab6 <Device::Device(char const*)>
c000f04c:	83 c4 10             	add    esp,0x10
c000f04f:	ba d8 13 02 c0       	mov    edx,0xc00213d8
c000f054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f058:	89 10                	mov    DWORD PTR [eax],edx
c000f05a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f05e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000f068:	90                   	nop
c000f069:	83 c4 0c             	add    esp,0xc
c000f06c:	c3                   	ret    
c000f06d:	90                   	nop
c000f06e:	66 90                	xchg   ax,ax

c000f070 <Serial::~Serial()>:
c000f070:	83 ec 0c             	sub    esp,0xc
c000f073:	ba d8 13 02 c0       	mov    edx,0xc00213d8
c000f078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f07c:	89 10                	mov    DWORD PTR [eax],edx
c000f07e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f082:	83 ec 0c             	sub    esp,0xc
c000f085:	50                   	push   eax
c000f086:	e8 95 e7 ff ff       	call   c000d820 <Device::~Device()>
c000f08b:	83 c4 10             	add    esp,0x10
c000f08e:	90                   	nop
c000f08f:	83 c4 0c             	add    esp,0xc
c000f092:	c3                   	ret    
c000f093:	90                   	nop

c000f094 <Serial::~Serial()>:
c000f094:	83 ec 0c             	sub    esp,0xc
c000f097:	83 ec 0c             	sub    esp,0xc
c000f09a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f09e:	e8 cd ff ff ff       	call   c000f070 <Serial::~Serial()>
c000f0a3:	83 c4 10             	add    esp,0x10
c000f0a6:	83 ec 08             	sub    esp,0x8
c000f0a9:	68 58 01 00 00       	push   0x158
c000f0ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0b2:	e8 63 d3 ff ff       	call   c000c41a <operator delete(void*, unsigned long)>
c000f0b7:	83 c4 10             	add    esp,0x10
c000f0ba:	83 c4 0c             	add    esp,0xc
c000f0bd:	c3                   	ret    
c000f0be:	66 90                	xchg   ax,ax

c000f0c0 <Timer::Timer(char const*)>:
c000f0c0:	83 ec 0c             	sub    esp,0xc
c000f0c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0c7:	83 ec 08             	sub    esp,0x8
c000f0ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0ce:	50                   	push   eax
c000f0cf:	e8 e2 e9 ff ff       	call   c000dab6 <Device::Device(char const*)>
c000f0d4:	83 c4 10             	add    esp,0x10
c000f0d7:	ba 1c 14 02 c0       	mov    edx,0xc002141c
c000f0dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0e0:	89 10                	mov    DWORD PTR [eax],edx
c000f0e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0e6:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000f0f0:	90                   	nop
c000f0f1:	83 c4 0c             	add    esp,0xc
c000f0f4:	c3                   	ret    
c000f0f5:	90                   	nop
c000f0f6:	66 90                	xchg   ax,ax

c000f0f8 <Timer::~Timer()>:
c000f0f8:	83 ec 0c             	sub    esp,0xc
c000f0fb:	ba 1c 14 02 c0       	mov    edx,0xc002141c
c000f100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f104:	89 10                	mov    DWORD PTR [eax],edx
c000f106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f10a:	83 ec 0c             	sub    esp,0xc
c000f10d:	50                   	push   eax
c000f10e:	e8 0d e7 ff ff       	call   c000d820 <Device::~Device()>
c000f113:	83 c4 10             	add    esp,0x10
c000f116:	90                   	nop
c000f117:	83 c4 0c             	add    esp,0xc
c000f11a:	c3                   	ret    
c000f11b:	90                   	nop

c000f11c <Timer::~Timer()>:
c000f11c:	83 ec 0c             	sub    esp,0xc
c000f11f:	83 ec 0c             	sub    esp,0xc
c000f122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f126:	e8 cd ff ff ff       	call   c000f0f8 <Timer::~Timer()>
c000f12b:	83 c4 10             	add    esp,0x10
c000f12e:	83 ec 08             	sub    esp,0x8
c000f131:	68 5c 01 00 00       	push   0x15c
c000f136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f13a:	e8 db d2 ff ff       	call   c000c41a <operator delete(void*, unsigned long)>
c000f13f:	83 c4 10             	add    esp,0x10
c000f142:	83 c4 0c             	add    esp,0xc
c000f145:	c3                   	ret    

c000f146 <Timer::read()>:
c000f146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f14a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000f150:	c3                   	ret    

c000f151 <setupTimer(int)>:
c000f151:	53                   	push   ebx
c000f152:	83 ec 14             	sub    esp,0x14
c000f155:	68 5c 01 00 00       	push   0x15c
c000f15a:	e8 12 a6 ff ff       	call   c0009771 <malloc>
c000f15f:	89 04 24             	mov    DWORD PTR [esp],eax
c000f162:	89 c3                	mov    ebx,eax
c000f164:	e8 03 fb 00 00       	call   c001ec6c <PIT::PIT()>
c000f169:	58                   	pop    eax
c000f16a:	5a                   	pop    edx
c000f16b:	53                   	push   ebx
c000f16c:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c000f172:	e8 a7 e7 ff ff       	call   c000d91e <Device::addChild(Device*)>
c000f177:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f179:	6a 00                	push   0x0
c000f17b:	6a 00                	push   0x0
c000f17d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f181:	53                   	push   ebx
c000f182:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f185:	89 d8                	mov    eax,ebx
c000f187:	83 c4 28             	add    esp,0x28
c000f18a:	5b                   	pop    ebx
c000f18b:	c3                   	ret    

c000f18c <timerHandler(unsigned int)>:
c000f18c:	56                   	push   esi
c000f18d:	53                   	push   ebx
c000f18e:	51                   	push   ecx
c000f18f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f193:	01 05 ac 57 02 c0    	add    DWORD PTR ds:0xc00257ac,eax
c000f199:	80 3d cd 31 02 c0 00 	cmp    BYTE PTR ds:0xc00231cd,0x0
c000f1a0:	0f 84 4a 01 00 00    	je     c000f2f0 <timerHandler(unsigned int)+0x164>
c000f1a6:	fa                   	cli    
c000f1a7:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c000f1ad:	83 ec 0c             	sub    esp,0xc
c000f1b0:	ff 05 a4 66 02 c0    	inc    DWORD PTR ds:0xc00266a4
c000f1b6:	68 b8 66 02 c0       	push   0xc00266b8
c000f1bb:	e8 00 07 01 00       	call   c001f8c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000f1c0:	83 c4 10             	add    esp,0x10
c000f1c3:	84 c0                	test   al,al
c000f1c5:	0f 85 a1 00 00 00    	jne    c000f26c <timerHandler(unsigned int)+0xe0>
c000f1cb:	83 ec 0c             	sub    esp,0xc
c000f1ce:	68 b8 66 02 c0       	push   0xc00266b8
c000f1d3:	e8 04 07 01 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000f1d8:	83 c4 10             	add    esp,0x10
c000f1db:	89 c6                	mov    esi,eax
c000f1dd:	8d 76 00             	lea    esi,[esi+0x0]
c000f1e0:	83 ec 0c             	sub    esp,0xc
c000f1e3:	68 b8 66 02 c0       	push   0xc00266b8
c000f1e8:	e8 ef 06 01 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000f1ed:	c7 04 24 b8 66 02 c0 	mov    DWORD PTR [esp],0xc00266b8
c000f1f4:	89 c3                	mov    ebx,eax
c000f1f6:	e8 e9 06 01 00       	call   c001f8e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000f1fb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000f1fe:	83 c4 10             	add    esp,0x10
c000f201:	3b 05 ac 57 02 c0    	cmp    eax,DWORD PTR ds:0xc00257ac
c000f207:	77 23                	ja     c000f22c <timerHandler(unsigned int)+0xa0>
c000f209:	83 ec 0c             	sub    esp,0xc
c000f20c:	53                   	push   ebx
c000f20d:	e8 fe 68 00 00       	call   c0015b10 <unblockTask(ThreadControlBlock*)>
c000f212:	83 c4 10             	add    esp,0x10
c000f215:	39 de                	cmp    esi,ebx
c000f217:	75 27                	jne    c000f240 <timerHandler(unsigned int)+0xb4>
c000f219:	83 ec 0c             	sub    esp,0xc
c000f21c:	68 b8 66 02 c0       	push   0xc00266b8
c000f221:	e8 b6 06 01 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000f226:	89 c6                	mov    esi,eax
c000f228:	eb 12                	jmp    c000f23c <timerHandler(unsigned int)+0xb0>
c000f22a:	66 90                	xchg   ax,ax
c000f22c:	52                   	push   edx
c000f22d:	52                   	push   edx
c000f22e:	53                   	push   ebx
c000f22f:	68 b8 66 02 c0       	push   0xc00266b8
c000f234:	e8 63 07 01 00       	call   c001f99c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000f239:	8d 76 00             	lea    esi,[esi+0x0]
c000f23c:	83 c4 10             	add    esp,0x10
c000f23f:	90                   	nop
c000f240:	83 ec 0c             	sub    esp,0xc
c000f243:	68 b8 66 02 c0       	push   0xc00266b8
c000f248:	e8 73 06 01 00       	call   c001f8c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000f24d:	83 c4 10             	add    esp,0x10
c000f250:	84 c0                	test   al,al
c000f252:	75 18                	jne    c000f26c <timerHandler(unsigned int)+0xe0>
c000f254:	83 ec 0c             	sub    esp,0xc
c000f257:	68 b8 66 02 c0       	push   0xc00266b8
c000f25c:	e8 7b 06 01 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000f261:	83 c4 10             	add    esp,0x10
c000f264:	39 f0                	cmp    eax,esi
c000f266:	0f 85 74 ff ff ff    	jne    c000f1e0 <timerHandler(unsigned int)+0x54>
c000f26c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f271:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000f275:	74 41                	je     c000f2b8 <timerHandler(unsigned int)+0x12c>
c000f277:	80 3d cc 31 02 c0 00 	cmp    BYTE PTR ds:0xc00231cc,0x0
c000f27e:	74 38                	je     c000f2b8 <timerHandler(unsigned int)+0x12c>
c000f280:	fa                   	cli    
c000f281:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c000f287:	a1 ac 57 02 c0       	mov    eax,ds:0xc00257ac
c000f28c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000f292:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000f295:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000f29b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000f29e:	72 08                	jb     c000f2a8 <timerHandler(unsigned int)+0x11c>
c000f2a0:	e8 af 63 00 00       	call   c0015654 <schedule()>
c000f2a5:	8d 76 00             	lea    esi,[esi+0x0]
c000f2a8:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c000f2ad:	48                   	dec    eax
c000f2ae:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c000f2b3:	75 03                	jne    c000f2b8 <timerHandler(unsigned int)+0x12c>
c000f2b5:	fb                   	sti    
c000f2b6:	66 90                	xchg   ax,ax
c000f2b8:	a1 a4 66 02 c0       	mov    eax,ds:0xc00266a4
c000f2bd:	48                   	dec    eax
c000f2be:	a3 a4 66 02 c0       	mov    ds:0xc00266a4,eax
c000f2c3:	75 1b                	jne    c000f2e0 <timerHandler(unsigned int)+0x154>
c000f2c5:	83 3d a0 66 02 c0 00 	cmp    DWORD PTR ds:0xc00266a0,0x0
c000f2cc:	74 12                	je     c000f2e0 <timerHandler(unsigned int)+0x154>
c000f2ce:	c7 05 a0 66 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00266a0,0x0
c000f2d8:	e8 77 63 00 00       	call   c0015654 <schedule()>
c000f2dd:	8d 76 00             	lea    esi,[esi+0x0]
c000f2e0:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c000f2e5:	48                   	dec    eax
c000f2e6:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c000f2eb:	75 03                	jne    c000f2f0 <timerHandler(unsigned int)+0x164>
c000f2ed:	fb                   	sti    
c000f2ee:	66 90                	xchg   ax,ax
c000f2f0:	58                   	pop    eax
c000f2f1:	5b                   	pop    ebx
c000f2f2:	5e                   	pop    esi
c000f2f3:	c3                   	ret    

c000f2f4 <VCache::VCache(PhysicalDisk*)>:
c000f2f4:	53                   	push   ebx
c000f2f5:	83 ec 18             	sub    esp,0x18
c000f2f8:	ba 4c 14 02 c0       	mov    edx,0xc002144c
c000f2fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f301:	89 10                	mov    DWORD PTR [eax],edx
c000f303:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f307:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000f30e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f312:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000f319:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f31d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000f324:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000f32b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f32f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000f336:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000f33d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f341:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000f348:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f34c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000f350:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f354:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000f35b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000f362:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f366:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000f36a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f36e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000f372:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f376:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000f37a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f37e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000f385:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000f38d:	83 ec 0c             	sub    esp,0xc
c000f390:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f394:	e8 d8 a3 ff ff       	call   c0009771 <malloc>
c000f399:	83 c4 10             	add    esp,0x10
c000f39c:	89 c3                	mov    ebx,eax
c000f39e:	83 ec 0c             	sub    esp,0xc
c000f3a1:	53                   	push   ebx
c000f3a2:	e8 7d 60 00 00       	call   c0015424 <Mutex::Mutex()>
c000f3a7:	83 c4 10             	add    esp,0x10
c000f3aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f3ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000f3b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f3b5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f3b9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000f3bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f3c0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000f3c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f3cb:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000f3d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f3d5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f3d8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f3dc:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000f3e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f3e8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f3ec:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000f3ef:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000f3f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f3f6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000f3fa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f3fe:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000f404:	05 00 01 00 00       	add    eax,0x100
c000f409:	c1 e0 04             	shl    eax,0x4
c000f40c:	83 ec 0c             	sub    esp,0xc
c000f40f:	50                   	push   eax
c000f410:	e8 5c a3 ff ff       	call   c0009771 <malloc>
c000f415:	83 c4 10             	add    esp,0x10
c000f418:	89 c2                	mov    edx,eax
c000f41a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f41e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f421:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f425:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000f42c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f430:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000f434:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f438:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000f43e:	c1 e0 06             	shl    eax,0x6
c000f441:	83 ec 0c             	sub    esp,0xc
c000f444:	50                   	push   eax
c000f445:	e8 27 a3 ff ff       	call   c0009771 <malloc>
c000f44a:	83 c4 10             	add    esp,0x10
c000f44d:	89 c2                	mov    edx,eax
c000f44f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f453:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000f456:	90                   	nop
c000f457:	83 c4 18             	add    esp,0x18
c000f45a:	5b                   	pop    ebx
c000f45b:	c3                   	ret    

c000f45c <VCache::invalidateReadBuffer()>:
c000f45c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f460:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000f466:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000f46a:	c3                   	ret    
c000f46b:	90                   	nop

c000f46c <VCache::writeWriteBuffer()>:
c000f46c:	53                   	push   ebx
c000f46d:	83 ec 08             	sub    esp,0x8
c000f470:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f474:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000f478:	74 1e                	je     c000f498 <VCache::writeWriteBuffer()+0x2c>
c000f47a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f47d:	83 ec 0c             	sub    esp,0xc
c000f480:	8b 10                	mov    edx,DWORD PTR [eax]
c000f482:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f485:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f488:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f48b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f48e:	50                   	push   eax
c000f48f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000f492:	83 c4 20             	add    esp,0x20
c000f495:	8d 76 00             	lea    esi,[esi+0x0]
c000f498:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000f49f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000f4a6:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000f4aa:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000f4b1:	83 c4 08             	add    esp,0x8
c000f4b4:	5b                   	pop    ebx
c000f4b5:	c3                   	ret    
c000f4b6:	66 90                	xchg   ax,ax

c000f4b8 <VCache::~VCache()>:
c000f4b8:	83 ec 0c             	sub    esp,0xc
c000f4bb:	ba 4c 14 02 c0       	mov    edx,0xc002144c
c000f4c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4c4:	89 10                	mov    DWORD PTR [eax],edx
c000f4c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4ca:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000f4cd:	84 c0                	test   al,al
c000f4cf:	74 0f                	je     c000f4e0 <VCache::~VCache()+0x28>
c000f4d1:	83 ec 0c             	sub    esp,0xc
c000f4d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4d8:	e8 8f ff ff ff       	call   c000f46c <VCache::writeWriteBuffer()>
c000f4dd:	83 c4 10             	add    esp,0x10
c000f4e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4e4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f4e7:	83 ec 0c             	sub    esp,0xc
c000f4ea:	50                   	push   eax
c000f4eb:	e8 91 a2 ff ff       	call   c0009781 <free>
c000f4f0:	83 c4 10             	add    esp,0x10
c000f4f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4f7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f4fa:	83 ec 0c             	sub    esp,0xc
c000f4fd:	50                   	push   eax
c000f4fe:	e8 7e a2 ff ff       	call   c0009781 <free>
c000f503:	83 c4 10             	add    esp,0x10
c000f506:	90                   	nop
c000f507:	83 c4 0c             	add    esp,0xc
c000f50a:	c3                   	ret    
c000f50b:	90                   	nop

c000f50c <VCache::~VCache()>:
c000f50c:	83 ec 0c             	sub    esp,0xc
c000f50f:	83 ec 0c             	sub    esp,0xc
c000f512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f516:	e8 9d ff ff ff       	call   c000f4b8 <VCache::~VCache()>
c000f51b:	83 c4 10             	add    esp,0x10
c000f51e:	83 ec 08             	sub    esp,0x8
c000f521:	6a 44                	push   0x44
c000f523:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f527:	e8 ee ce ff ff       	call   c000c41a <operator delete(void*, unsigned long)>
c000f52c:	83 c4 10             	add    esp,0x10
c000f52f:	83 c4 0c             	add    esp,0xc
c000f532:	c3                   	ret    
c000f533:	90                   	nop

c000f534 <VCache::write(unsigned long long, int, void*)>:
c000f534:	55                   	push   ebp
c000f535:	31 c0                	xor    eax,eax
c000f537:	57                   	push   edi
c000f538:	56                   	push   esi
c000f539:	53                   	push   ebx
c000f53a:	83 ec 0c             	sub    esp,0xc
c000f53d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f541:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000f545:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000f549:	8d 76 00             	lea    esi,[esi+0x0]
c000f54c:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c000f550:	7d 1a                	jge    c000f56c <VCache::write(unsigned long long, int, void*)+0x38>
c000f552:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000f555:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000f55b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f55f:	0f af c8             	imul   ecx,eax
c000f562:	01 ca                	add    edx,ecx
c000f564:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f566:	40                   	inc    eax
c000f567:	eb e3                	jmp    c000f54c <VCache::write(unsigned long long, int, void*)+0x18>
c000f569:	8d 76 00             	lea    esi,[esi+0x0]
c000f56c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000f570:	74 0a                	je     c000f57c <VCache::write(unsigned long long, int, void*)+0x48>
c000f572:	53                   	push   ebx
c000f573:	e8 e4 fe ff ff       	call   c000f45c <VCache::invalidateReadBuffer()>
c000f578:	58                   	pop    eax
c000f579:	8d 76 00             	lea    esi,[esi+0x0]
c000f57c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000f580:	74 5e                	je     c000f5e0 <VCache::write(unsigned long long, int, void*)+0xac>
c000f582:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000f585:	89 e8                	mov    eax,ebp
c000f587:	99                   	cdq    
c000f588:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000f58b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000f58e:	89 c1                	mov    ecx,eax
c000f590:	89 d0                	mov    eax,edx
c000f592:	31 f1                	xor    ecx,esi
c000f594:	31 f8                	xor    eax,edi
c000f596:	09 c1                	or     ecx,eax
c000f598:	75 3a                	jne    c000f5d4 <VCache::write(unsigned long long, int, void*)+0xa0>
c000f59a:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000f59f:	75 33                	jne    c000f5d4 <VCache::write(unsigned long long, int, void*)+0xa0>
c000f5a1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f5a4:	89 ef                	mov    edi,ebp
c000f5a6:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000f5ac:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000f5b0:	0f af f9             	imul   edi,ecx
c000f5b3:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000f5b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f5b8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000f5bb:	40                   	inc    eax
c000f5bc:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000f5bf:	83 f8 40             	cmp    eax,0x40
c000f5c2:	75 60                	jne    c000f624 <VCache::write(unsigned long long, int, void*)+0xf0>
c000f5c4:	83 ec 0c             	sub    esp,0xc
c000f5c7:	53                   	push   ebx
c000f5c8:	e8 9f fe ff ff       	call   c000f46c <VCache::writeWriteBuffer()>
c000f5cd:	83 c4 10             	add    esp,0x10
c000f5d0:	eb 52                	jmp    c000f624 <VCache::write(unsigned long long, int, void*)+0xf0>
c000f5d2:	66 90                	xchg   ax,ax
c000f5d4:	83 ec 0c             	sub    esp,0xc
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 8f fe ff ff       	call   c000f46c <VCache::writeWriteBuffer()>
c000f5dd:	83 c4 10             	add    esp,0x10
c000f5e0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f5e3:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c000f5e8:	7f 22                	jg     c000f60c <VCache::write(unsigned long long, int, void*)+0xd8>
c000f5ea:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000f5ed:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000f5f0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f5f4:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000f5f8:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000f5fb:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000f5fe:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000f604:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000f608:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f60a:	eb 18                	jmp    c000f624 <VCache::write(unsigned long long, int, void*)+0xf0>
c000f60c:	83 ec 0c             	sub    esp,0xc
c000f60f:	8b 10                	mov    edx,DWORD PTR [eax]
c000f611:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f615:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f619:	57                   	push   edi
c000f61a:	56                   	push   esi
c000f61b:	50                   	push   eax
c000f61c:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000f61f:	83 c4 20             	add    esp,0x20
c000f622:	66 90                	xchg   ax,ax
c000f624:	83 c4 0c             	add    esp,0xc
c000f627:	31 c0                	xor    eax,eax
c000f629:	5b                   	pop    ebx
c000f62a:	5e                   	pop    esi
c000f62b:	5f                   	pop    edi
c000f62c:	5d                   	pop    ebp
c000f62d:	c3                   	ret    

c000f62e <VCache::read(unsigned long long, int, void*)>:
c000f62e:	55                   	push   ebp
c000f62f:	31 c0                	xor    eax,eax
c000f631:	57                   	push   edi
c000f632:	56                   	push   esi
c000f633:	53                   	push   ebx
c000f634:	83 ec 1c             	sub    esp,0x1c
c000f637:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000f63b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000f63f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000f643:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000f647:	90                   	nop
c000f648:	39 e8                	cmp    eax,ebp
c000f64a:	7d 18                	jge    c000f664 <VCache::read(unsigned long long, int, void*)+0x36>
c000f64c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000f64f:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000f655:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f659:	0f af c8             	imul   ecx,eax
c000f65c:	01 ca                	add    edx,ecx
c000f65e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f660:	40                   	inc    eax
c000f661:	eb e5                	jmp    c000f648 <VCache::read(unsigned long long, int, void*)+0x1a>
c000f663:	90                   	nop
c000f664:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000f668:	74 0e                	je     c000f678 <VCache::read(unsigned long long, int, void*)+0x4a>
c000f66a:	83 ec 0c             	sub    esp,0xc
c000f66d:	53                   	push   ebx
c000f66e:	e8 f9 fd ff ff       	call   c000f46c <VCache::writeWriteBuffer()>
c000f673:	83 c4 10             	add    esp,0x10
c000f676:	66 90                	xchg   ax,ax
c000f678:	83 fd 01             	cmp    ebp,0x1
c000f67b:	0f 85 87 00 00 00    	jne    c000f708 <VCache::read(unsigned long long, int, void*)+0xda>
c000f681:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f684:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f688:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000f68f:	75 77                	jne    c000f708 <VCache::read(unsigned long long, int, void*)+0xda>
c000f691:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000f694:	89 e9                	mov    ecx,ebp
c000f696:	f7 d9                	neg    ecx
c000f698:	89 c8                	mov    eax,ecx
c000f69a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f69e:	c1 f8 1f             	sar    eax,0x1f
c000f6a1:	21 f1                	and    ecx,esi
c000f6a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f6a7:	89 c8                	mov    eax,ecx
c000f6a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f6ad:	21 f9                	and    ecx,edi
c000f6af:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000f6b3:	89 ca                	mov    edx,ecx
c000f6b5:	74 0d                	je     c000f6c4 <VCache::read(unsigned long long, int, void*)+0x96>
c000f6b7:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000f6ba:	75 08                	jne    c000f6c4 <VCache::read(unsigned long long, int, void*)+0x96>
c000f6bc:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000f6bf:	74 27                	je     c000f6e8 <VCache::read(unsigned long long, int, void*)+0xba>
c000f6c1:	8d 76 00             	lea    esi,[esi+0x0]
c000f6c4:	83 ec 0c             	sub    esp,0xc
c000f6c7:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000f6cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f6cf:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000f6d2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000f6d5:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000f6d7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f6da:	55                   	push   ebp
c000f6db:	52                   	push   edx
c000f6dc:	50                   	push   eax
c000f6dd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f6e1:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000f6e4:	83 c4 20             	add    esp,0x20
c000f6e7:	90                   	nop
c000f6e8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f6eb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000f6ef:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000f6f5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000f6f8:	48                   	dec    eax
c000f6f9:	21 c6                	and    esi,eax
c000f6fb:	0f af f1             	imul   esi,ecx
c000f6fe:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000f701:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f703:	eb 23                	jmp    c000f728 <VCache::read(unsigned long long, int, void*)+0xfa>
c000f705:	8d 76 00             	lea    esi,[esi+0x0]
c000f708:	83 ec 0c             	sub    esp,0xc
c000f70b:	53                   	push   ebx
c000f70c:	e8 4b fd ff ff       	call   c000f45c <VCache::invalidateReadBuffer()>
c000f711:	5a                   	pop    edx
c000f712:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f715:	8b 10                	mov    edx,DWORD PTR [eax]
c000f717:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f71b:	55                   	push   ebp
c000f71c:	57                   	push   edi
c000f71d:	56                   	push   esi
c000f71e:	50                   	push   eax
c000f71f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000f722:	83 c4 20             	add    esp,0x20
c000f725:	8d 76 00             	lea    esi,[esi+0x0]
c000f728:	83 c4 1c             	add    esp,0x1c
c000f72b:	31 c0                	xor    eax,eax
c000f72d:	5b                   	pop    ebx
c000f72e:	5e                   	pop    esi
c000f72f:	5f                   	pop    edi
c000f730:	5d                   	pop    ebp
c000f731:	c3                   	ret    

c000f732 <Video::putrect(int, int, int, int, unsigned int)>:
c000f732:	55                   	push   ebp
c000f733:	57                   	push   edi
c000f734:	56                   	push   esi
c000f735:	53                   	push   ebx
c000f736:	83 ec 1c             	sub    esp,0x1c
c000f739:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000f73d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f741:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000f745:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000f749:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000f74d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f751:	01 df                	add    edi,ebx
c000f753:	39 fb                	cmp    ebx,edi
c000f755:	7d 1f                	jge    c000f776 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000f757:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000f75b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000f75f:	7d 12                	jge    c000f773 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000f761:	8b 16                	mov    edx,DWORD PTR [esi]
c000f763:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000f767:	53                   	push   ebx
c000f768:	55                   	push   ebp
c000f769:	45                   	inc    ebp
c000f76a:	56                   	push   esi
c000f76b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000f76e:	83 c4 10             	add    esp,0x10
c000f771:	eb e8                	jmp    c000f75b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000f773:	43                   	inc    ebx
c000f774:	eb dd                	jmp    c000f753 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000f776:	83 c4 1c             	add    esp,0x1c
c000f779:	5b                   	pop    ebx
c000f77a:	5e                   	pop    esi
c000f77b:	5f                   	pop    edi
c000f77c:	5d                   	pop    ebp
c000f77d:	c3                   	ret    

c000f77e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000f77e:	55                   	push   ebp
c000f77f:	57                   	push   edi
c000f780:	31 ff                	xor    edi,edi
c000f782:	56                   	push   esi
c000f783:	53                   	push   ebx
c000f784:	83 ec 1c             	sub    esp,0x1c
c000f787:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000f78b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000f78f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000f796:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000f79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f79f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000f7a3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f7a7:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000f7aa:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f7ae:	01 f9                	add    ecx,edi
c000f7b0:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000f7b4:	7d 2f                	jge    c000f7e5 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000f7b6:	31 f6                	xor    esi,esi
c000f7b8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000f7bc:	01 f2                	add    edx,esi
c000f7be:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000f7c2:	7d 1a                	jge    c000f7de <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000f7c4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f7c7:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000f7ca:	46                   	inc    esi
c000f7cb:	51                   	push   ecx
c000f7cc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000f7d0:	52                   	push   edx
c000f7d1:	55                   	push   ebp
c000f7d2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f7d5:	83 c4 10             	add    esp,0x10
c000f7d8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f7dc:	eb da                	jmp    c000f7b8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000f7de:	47                   	inc    edi
c000f7df:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000f7e3:	eb c5                	jmp    c000f7aa <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000f7e5:	83 c4 1c             	add    esp,0x1c
c000f7e8:	5b                   	pop    ebx
c000f7e9:	5e                   	pop    esi
c000f7ea:	5f                   	pop    edi
c000f7eb:	5d                   	pop    ebp
c000f7ec:	c3                   	ret    
c000f7ed:	90                   	nop

c000f7ee <Video::blit(unsigned int*, int, int, int, int)>:
c000f7ee:	55                   	push   ebp
c000f7ef:	57                   	push   edi
c000f7f0:	56                   	push   esi
c000f7f1:	53                   	push   ebx
c000f7f2:	83 ec 1c             	sub    esp,0x1c
c000f7f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f7f9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000f7fd:	85 c0                	test   eax,eax
c000f7ff:	79 02                	jns    c000f803 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000f801:	31 c0                	xor    eax,eax
c000f803:	c1 e0 02             	shl    eax,0x2
c000f806:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000f80a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f80e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f812:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000f816:	39 d8                	cmp    eax,ebx
c000f818:	7e 49                	jle    c000f863 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000f81a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000f820:	7c 41                	jl     c000f863 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000f822:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000f826:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000f82a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f82e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000f832:	39 f9                	cmp    ecx,edi
c000f834:	7e 22                	jle    c000f858 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000f836:	83 c5 04             	add    ebp,0x4
c000f839:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000f83f:	7c 14                	jl     c000f855 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000f841:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000f843:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000f846:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000f84a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000f84e:	56                   	push   esi
c000f84f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000f852:	83 c4 10             	add    esp,0x10
c000f855:	47                   	inc    edi
c000f856:	eb d2                	jmp    c000f82a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000f858:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f85c:	43                   	inc    ebx
c000f85d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f861:	eb ab                	jmp    c000f80e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000f863:	83 c4 1c             	add    esp,0x1c
c000f866:	5b                   	pop    ebx
c000f867:	5e                   	pop    esi
c000f868:	5f                   	pop    edi
c000f869:	5d                   	pop    ebp
c000f86a:	c3                   	ret    
c000f86b:	90                   	nop

c000f86c <Video::clearScreen(unsigned int)>:
c000f86c:	57                   	push   edi
c000f86d:	56                   	push   esi
c000f86e:	53                   	push   ebx
c000f86f:	31 db                	xor    ebx,ebx
c000f871:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f875:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000f87b:	7e 1f                	jle    c000f89c <Video::clearScreen(unsigned int)+0x30>
c000f87d:	31 ff                	xor    edi,edi
c000f87f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000f885:	7e 12                	jle    c000f899 <Video::clearScreen(unsigned int)+0x2d>
c000f887:	8b 06                	mov    eax,DWORD PTR [esi]
c000f889:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f88d:	53                   	push   ebx
c000f88e:	57                   	push   edi
c000f88f:	47                   	inc    edi
c000f890:	56                   	push   esi
c000f891:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f894:	83 c4 10             	add    esp,0x10
c000f897:	eb e6                	jmp    c000f87f <Video::clearScreen(unsigned int)+0x13>
c000f899:	43                   	inc    ebx
c000f89a:	eb d9                	jmp    c000f875 <Video::clearScreen(unsigned int)+0x9>
c000f89c:	5b                   	pop    ebx
c000f89d:	5e                   	pop    esi
c000f89e:	5f                   	pop    edi
c000f89f:	c3                   	ret    

c000f8a0 <Video::putpixel(int, int, unsigned int)>:
c000f8a0:	c7 44 24 04 54 14 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021454
c000f8a8:	e9 24 29 00 00       	jmp    c00121d1 <Krnl::panic(char const*)>
c000f8ad:	90                   	nop

c000f8ae <Video::Video(char const*)>:
c000f8ae:	83 ec 0c             	sub    esp,0xc
c000f8b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8b5:	83 ec 08             	sub    esp,0x8
c000f8b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8bc:	50                   	push   eax
c000f8bd:	e8 f4 e1 ff ff       	call   c000dab6 <Device::Device(char const*)>
c000f8c2:	83 c4 10             	add    esp,0x10
c000f8c5:	ba c4 14 02 c0       	mov    edx,0xc00214c4
c000f8ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8ce:	89 10                	mov    DWORD PTR [eax],edx
c000f8d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8d4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000f8de:	90                   	nop
c000f8df:	83 c4 0c             	add    esp,0xc
c000f8e2:	c3                   	ret    
c000f8e3:	90                   	nop

c000f8e4 <Video::~Video()>:
c000f8e4:	83 ec 0c             	sub    esp,0xc
c000f8e7:	ba c4 14 02 c0       	mov    edx,0xc00214c4
c000f8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8f0:	89 10                	mov    DWORD PTR [eax],edx
c000f8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8f6:	83 ec 0c             	sub    esp,0xc
c000f8f9:	50                   	push   eax
c000f8fa:	e8 21 df ff ff       	call   c000d820 <Device::~Device()>
c000f8ff:	83 c4 10             	add    esp,0x10
c000f902:	90                   	nop
c000f903:	83 c4 0c             	add    esp,0xc
c000f906:	c3                   	ret    
c000f907:	90                   	nop

c000f908 <Video::~Video()>:
c000f908:	83 ec 0c             	sub    esp,0xc
c000f90b:	83 ec 0c             	sub    esp,0xc
c000f90e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f912:	e8 cd ff ff ff       	call   c000f8e4 <Video::~Video()>
c000f917:	83 c4 10             	add    esp,0x10
c000f91a:	83 ec 08             	sub    esp,0x8
c000f91d:	68 64 01 00 00       	push   0x164
c000f922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f926:	e8 ef ca ff ff       	call   c000c41a <operator delete(void*, unsigned long)>
c000f92b:	83 c4 10             	add    esp,0x10
c000f92e:	83 c4 0c             	add    esp,0xc
c000f931:	c3                   	ret    

c000f932 <Video::isMonochrome()>:
c000f932:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f936:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000f93c:	c3                   	ret    
c000f93d:	90                   	nop

c000f93e <Video::getWidth()>:
c000f93e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f942:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000f948:	c3                   	ret    
c000f949:	90                   	nop

c000f94a <Video::getHeight()>:
c000f94a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f94e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000f954:	c3                   	ret    
c000f955:	90                   	nop

c000f956 <Video::drawCursor(int, int, unsigned char*, int)>:
c000f956:	55                   	push   ebp
c000f957:	57                   	push   edi
c000f958:	56                   	push   esi
c000f959:	53                   	push   ebx
c000f95a:	83 ec 2c             	sub    esp,0x2c
c000f95d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f961:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000f965:	83 f8 01             	cmp    eax,0x1
c000f968:	19 c9                	sbb    ecx,ecx
c000f96a:	31 db                	xor    ebx,ebx
c000f96c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f970:	89 cd                	mov    ebp,ecx
c000f972:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000f97a:	f7 d5                	not    ebp
c000f97c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000f982:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f986:	01 d8                	add    eax,ebx
c000f988:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f98c:	56                   	push   esi
c000f98d:	e8 b8 ff ff ff       	call   c000f94a <Video::getHeight()>
c000f992:	59                   	pop    ecx
c000f993:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000f997:	7e 70                	jle    c000fa09 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000f999:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f99d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000f9a1:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000f9a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f9a8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f9ac:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000f9b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f9b7:	89 f8                	mov    eax,edi
c000f9b9:	83 c0 20             	add    eax,0x20
c000f9bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f9c0:	56                   	push   esi
c000f9c1:	e8 78 ff ff ff       	call   c000f93e <Video::getWidth()>
c000f9c6:	5a                   	pop    edx
c000f9c7:	39 c7                	cmp    edi,eax
c000f9c9:	7d 34                	jge    c000f9ff <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000f9cb:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000f9d0:	74 05                	je     c000f9d7 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000f9d2:	8b 06                	mov    eax,DWORD PTR [esi]
c000f9d4:	55                   	push   ebp
c000f9d5:	eb 0d                	jmp    c000f9e4 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000f9d7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000f9dc:	74 12                	je     c000f9f0 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000f9de:	8b 06                	mov    eax,DWORD PTR [esi]
c000f9e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f9e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f9e8:	57                   	push   edi
c000f9e9:	56                   	push   esi
c000f9ea:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f9ed:	83 c4 10             	add    esp,0x10
c000f9f0:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000f9f4:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000f9f8:	47                   	inc    edi
c000f9f9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000f9fd:	75 c1                	jne    c000f9c0 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000f9ff:	43                   	inc    ebx
c000fa00:	83 fb 20             	cmp    ebx,0x20
c000fa03:	0f 85 79 ff ff ff    	jne    c000f982 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000fa09:	83 c4 2c             	add    esp,0x2c
c000fa0c:	5b                   	pop    ebx
c000fa0d:	5e                   	pop    esi
c000fa0e:	5f                   	pop    edi
c000fa0f:	5d                   	pop    ebp
c000fa10:	c3                   	ret    
c000fa11:	90                   	nop

c000fa12 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000fa12:	55                   	push   ebp
c000fa13:	57                   	push   edi
c000fa14:	56                   	push   esi
c000fa15:	53                   	push   ebx
c000fa16:	83 ec 28             	sub    esp,0x28
c000fa19:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000fa1d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000fa21:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000fa25:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000fa29:	c1 e6 08             	shl    esi,0x8
c000fa2c:	01 c6                	add    esi,eax
c000fa2e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000fa32:	c1 e0 08             	shl    eax,0x8
c000fa35:	01 d0                	add    eax,edx
c000fa37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa3f:	0f af c6             	imul   eax,esi
c000fa42:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000fa49:	50                   	push   eax
c000fa4a:	e8 22 9d ff ff       	call   c0009771 <malloc>
c000fa4f:	83 c4 10             	add    esp,0x10
c000fa52:	89 c7                	mov    edi,eax
c000fa54:	85 c0                	test   eax,eax
c000fa56:	75 10                	jne    c000fa68 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000fa58:	83 ec 0c             	sub    esp,0xc
c000fa5b:	68 75 14 02 c0       	push   0xc0021475
c000fa60:	e8 6c 27 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c000fa65:	83 c4 10             	add    esp,0x10
c000fa68:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000fa6b:	ba 12 00 00 00       	mov    edx,0x12
c000fa70:	84 c0                	test   al,al
c000fa72:	74 11                	je     c000fa85 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000fa74:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000fa78:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000fa7c:	c1 fa 03             	sar    edx,0x3
c000fa7f:	0f af d1             	imul   edx,ecx
c000fa82:	83 c2 12             	add    edx,0x12
c000fa85:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000fa89:	74 04                	je     c000fa8f <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000fa8b:	85 f6                	test   esi,esi
c000fa8d:	75 12                	jne    c000faa1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000fa8f:	83 ec 0c             	sub    esp,0xc
c000fa92:	68 85 14 02 c0       	push   0xc0021485
c000fa97:	e8 5f ca ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c000fa9c:	e9 b8 00 00 00       	jmp    c000fb59 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000faa1:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000faa5:	80 f9 02             	cmp    cl,0x2
c000faa8:	0f 85 96 00 00 00    	jne    c000fb44 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000faae:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000fab3:	75 0e                	jne    c000fac3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000fab5:	84 c0                	test   al,al
c000fab7:	75 0a                	jne    c000fac3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000fab9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000fabc:	83 e8 18             	sub    eax,0x18
c000fabf:	a8 f7                	test   al,0xf7
c000fac1:	74 0a                	je     c000facd <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000fac3:	83 ec 0c             	sub    esp,0xc
c000fac6:	68 9a 14 02 c0       	push   0xc002149a
c000facb:	eb 7f                	jmp    c000fb4c <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000facd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fad5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000fadd:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000fae1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fae9:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000faed:	75 0c                	jne    c000fafb <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000faef:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000faf4:	c1 e0 18             	shl    eax,0x18
c000faf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fafb:	45                   	inc    ebp
c000fafc:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000fb01:	c1 e1 10             	shl    ecx,0x10
c000fb04:	89 c8                	mov    eax,ecx
c000fb06:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000fb0b:	c1 e1 08             	shl    ecx,0x8
c000fb0e:	09 c1                	or     ecx,eax
c000fb10:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000fb14:	09 c1                	or     ecx,eax
c000fb16:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000fb1a:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000fb1e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000fb22:	c1 f8 03             	sar    eax,0x3
c000fb25:	01 c2                	add    edx,eax
c000fb27:	89 e8                	mov    eax,ebp
c000fb29:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000fb2d:	39 c6                	cmp    esi,eax
c000fb2f:	7f b0                	jg     c000fae1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000fb31:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000fb35:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fb39:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000fb3c:	7e 22                	jle    c000fb60 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000fb3e:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000fb42:	eb 99                	jmp    c000fadd <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000fb44:	50                   	push   eax
c000fb45:	50                   	push   eax
c000fb46:	51                   	push   ecx
c000fb47:	68 a8 14 02 c0       	push   0xc00214a8
c000fb4c:	e8 aa c9 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c000fb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fb54:	e8 28 9c ff ff       	call   c0009781 <free>
c000fb59:	83 c4 10             	add    esp,0x10
c000fb5c:	31 ff                	xor    edi,edi
c000fb5e:	eb 0f                	jmp    c000fb6f <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000fb60:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000fb64:	89 30                	mov    DWORD PTR [eax],esi
c000fb66:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb6a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000fb6d:	89 30                	mov    DWORD PTR [eax],esi
c000fb6f:	83 c4 1c             	add    esp,0x1c
c000fb72:	89 f8                	mov    eax,edi
c000fb74:	5b                   	pop    ebx
c000fb75:	5e                   	pop    esi
c000fb76:	5f                   	pop    edi
c000fb77:	5d                   	pop    ebp
c000fb78:	c3                   	ret    
c000fb79:	90                   	nop

c000fb7a <Video::putTGA(int, int, unsigned char*, int)>:
c000fb7a:	55                   	push   ebp
c000fb7b:	57                   	push   edi
c000fb7c:	56                   	push   esi
c000fb7d:	53                   	push   ebx
c000fb7e:	83 ec 28             	sub    esp,0x28
c000fb81:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000fb85:	8d 44 24 18          	lea    eax,[esp+0x18]
c000fb89:	50                   	push   eax
c000fb8a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000fb8e:	50                   	push   eax
c000fb8f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000fb93:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000fb97:	56                   	push   esi
c000fb98:	e8 75 fe ff ff       	call   c000fa12 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000fb9d:	83 c4 20             	add    esp,0x20
c000fba0:	85 c0                	test   eax,eax
c000fba2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000fba6:	74 35                	je     c000fbdd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000fba8:	89 c7                	mov    edi,eax
c000fbaa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000fbae:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000fbb2:	39 d8                	cmp    eax,ebx
c000fbb4:	7e 27                	jle    c000fbdd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000fbb6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000fbba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fbbe:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fbc2:	39 e8                	cmp    eax,ebp
c000fbc4:	7e 14                	jle    c000fbda <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000fbc6:	8b 06                	mov    eax,DWORD PTR [esi]
c000fbc8:	83 c7 04             	add    edi,0x4
c000fbcb:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000fbce:	53                   	push   ebx
c000fbcf:	55                   	push   ebp
c000fbd0:	45                   	inc    ebp
c000fbd1:	56                   	push   esi
c000fbd2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fbd5:	83 c4 10             	add    esp,0x10
c000fbd8:	eb e0                	jmp    c000fbba <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000fbda:	43                   	inc    ebx
c000fbdb:	eb cd                	jmp    c000fbaa <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000fbdd:	83 c4 1c             	add    esp,0x1c
c000fbe0:	5b                   	pop    ebx
c000fbe1:	5e                   	pop    esi
c000fbe2:	5f                   	pop    edi
c000fbe3:	5d                   	pop    ebp
c000fbe4:	c3                   	ret    
c000fbe5:	66 90                	xchg   ax,ax
c000fbe7:	90                   	nop

c000fbe8 <ACPI::close(int, int, void*)>:
c000fbe8:	83 ec 1c             	sub    esp,0x1c
c000fbeb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000fbf3:	74 0b                	je     c000fc00 <ACPI::close(int, int, void*)+0x18>
c000fbf5:	b8 00 00 00 00       	mov    eax,0x0
c000fbfa:	e9 99 00 00 00       	jmp    c000fc98 <ACPI::close(int, int, void*)+0xb0>
c000fbff:	90                   	nop
c000fc00:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000fc05:	75 29                	jne    c000fc30 <ACPI::close(int, int, void*)+0x48>
c000fc07:	a1 c8 57 02 c0       	mov    eax,ds:0xc00257c8
c000fc0c:	85 c0                	test   eax,eax
c000fc0e:	74 08                	je     c000fc18 <ACPI::close(int, int, void*)+0x30>
c000fc10:	a1 c8 57 02 c0       	mov    eax,ds:0xc00257c8
c000fc15:	ff d0                	call   eax
c000fc17:	90                   	nop
c000fc18:	83 ec 0c             	sub    esp,0xc
c000fc1b:	68 04 15 02 c0       	push   0xc0021504
c000fc20:	e8 ac 25 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c000fc25:	83 c4 10             	add    esp,0x10
c000fc28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fc2d:	eb 69                	jmp    c000fc98 <ACPI::close(int, int, void*)+0xb0>
c000fc2f:	90                   	nop
c000fc30:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000fc35:	75 59                	jne    c000fc90 <ACPI::close(int, int, void*)+0xa8>
c000fc37:	a1 c4 57 02 c0       	mov    eax,ds:0xc00257c4
c000fc3c:	85 c0                	test   eax,eax
c000fc3e:	74 08                	je     c000fc48 <ACPI::close(int, int, void*)+0x60>
c000fc40:	a1 c4 57 02 c0       	mov    eax,ds:0xc00257c4
c000fc45:	ff d0                	call   eax
c000fc47:	90                   	nop
c000fc48:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000fc4d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc50:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fc55:	83 e0 02             	and    eax,0x2
c000fc58:	74 1e                	je     c000fc78 <ACPI::close(int, int, void*)+0x90>
c000fc5a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000fc61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc65:	89 c2                	mov    edx,eax
c000fc67:	ec                   	in     al,dx
c000fc68:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000fc6c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000fc70:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fc74:	eb da                	jmp    c000fc50 <ACPI::close(int, int, void*)+0x68>
c000fc76:	66 90                	xchg   ax,ax
c000fc78:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000fc7f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000fc84:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000fc88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fc8c:	ee                   	out    dx,al
c000fc8d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc90:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fc95:	8d 76 00             	lea    esi,[esi+0x0]
c000fc98:	83 c4 1c             	add    esp,0x1c
c000fc9b:	c3                   	ret    

c000fc9c <findRSDP()>:
c000fc9c:	83 ec 1c             	sub    esp,0x1c
c000fc9f:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000fca4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000fcaa:	83 e0 04             	and    eax,0x4
c000fcad:	84 c0                	test   al,al
c000fcaf:	75 07                	jne    c000fcb8 <findRSDP()+0x1c>
c000fcb1:	b8 00 00 00 00       	mov    eax,0x0
c000fcb6:	eb 70                	jmp    c000fd28 <findRSDP()+0x8c>
c000fcb8:	a1 f8 31 02 c0       	mov    eax,ds:0xc00231f8
c000fcbd:	3d ff 07 00 00       	cmp    eax,0x7ff
c000fcc2:	7f 1c                	jg     c000fce0 <findRSDP()+0x44>
c000fcc4:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000fcc9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000fccf:	83 e2 fb             	and    edx,0xfffffffb
c000fcd2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000fcd8:	b8 00 00 00 00       	mov    eax,0x0
c000fcdd:	eb 49                	jmp    c000fd28 <findRSDP()+0x8c>
c000fcdf:	90                   	nop
c000fce0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000fce8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000fcf0:	77 2e                	ja     c000fd20 <findRSDP()+0x84>
c000fcf2:	83 ec 04             	sub    esp,0x4
c000fcf5:	6a 08                	push   0x8
c000fcf7:	68 9f 15 02 c0       	push   0xc002159f
c000fcfc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd00:	e8 9f 06 ff ff       	call   c00003a4 <memcmp>
c000fd05:	83 c4 10             	add    esp,0x10
c000fd08:	85 c0                	test   eax,eax
c000fd0a:	0f 94 c0             	sete   al
c000fd0d:	84 c0                	test   al,al
c000fd0f:	74 07                	je     c000fd18 <findRSDP()+0x7c>
c000fd11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd15:	eb 11                	jmp    c000fd28 <findRSDP()+0x8c>
c000fd17:	90                   	nop
c000fd18:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000fd1d:	eb c9                	jmp    c000fce8 <findRSDP()+0x4c>
c000fd1f:	90                   	nop
c000fd20:	b8 00 00 00 00       	mov    eax,0x0
c000fd25:	8d 76 00             	lea    esi,[esi+0x0]
c000fd28:	83 c4 1c             	add    esp,0x1c
c000fd2b:	c3                   	ret    

c000fd2c <loadACPITables(unsigned char*)>:
c000fd2c:	57                   	push   edi
c000fd2d:	56                   	push   esi
c000fd2e:	53                   	push   ebx
c000fd2f:	83 ec 60             	sub    esp,0x60
c000fd32:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000fd37:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000fd3d:	83 e0 04             	and    eax,0x4
c000fd40:	84 c0                	test   al,al
c000fd42:	0f 84 3c 02 00 00    	je     c000ff84 <loadACPITables(unsigned char*)+0x258>
c000fd48:	a0 e0 59 02 c0       	mov    al,ds:0xc00259e0
c000fd4d:	84 c0                	test   al,al
c000fd4f:	74 77                	je     c000fdc8 <loadACPITables(unsigned char*)+0x9c>
c000fd51:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000fd55:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000fd59:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000fd5d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd60:	83 e8 24             	sub    eax,0x24
c000fd63:	c1 e8 03             	shr    eax,0x3
c000fd66:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000fd6a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000fd72:	66 90                	xchg   ax,ax
c000fd74:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000fd78:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000fd7c:	0f 8d b6 00 00 00    	jge    c000fe38 <loadACPITables(unsigned char*)+0x10c>
c000fd82:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000fd86:	83 c0 24             	add    eax,0x24
c000fd89:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000fd8d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000fd91:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000fd95:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000fd99:	c1 e0 03             	shl    eax,0x3
c000fd9c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000fda0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000fda4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000fda7:	8b 00                	mov    eax,DWORD PTR [eax]
c000fda9:	89 c1                	mov    ecx,eax
c000fdab:	a1 cc 57 02 c0       	mov    eax,ds:0xc00257cc
c000fdb0:	8d 50 01             	lea    edx,[eax+0x1]
c000fdb3:	89 15 cc 57 02 c0    	mov    DWORD PTR ds:0xc00257cc,edx
c000fdb9:	89 ca                	mov    edx,ecx
c000fdbb:	89 14 c5 e4 57 02 c0 	mov    DWORD PTR [eax*8-0x3ffda81c],edx
c000fdc2:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000fdc6:	eb ac                	jmp    c000fd74 <loadACPITables(unsigned char*)+0x48>
c000fdc8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000fdcc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000fdd0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fdd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdd7:	83 e8 24             	sub    eax,0x24
c000fdda:	c1 e8 02             	shr    eax,0x2
c000fddd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000fde1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000fde9:	8d 76 00             	lea    esi,[esi+0x0]
c000fdec:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000fdf0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000fdf4:	7d 42                	jge    c000fe38 <loadACPITables(unsigned char*)+0x10c>
c000fdf6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000fdfa:	83 c0 24             	add    eax,0x24
c000fdfd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000fe01:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000fe05:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fe09:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000fe0d:	c1 e0 02             	shl    eax,0x2
c000fe10:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000fe14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fe18:	8b 08                	mov    ecx,DWORD PTR [eax]
c000fe1a:	a1 cc 57 02 c0       	mov    eax,ds:0xc00257cc
c000fe1f:	8d 50 01             	lea    edx,[eax+0x1]
c000fe22:	89 15 cc 57 02 c0    	mov    DWORD PTR ds:0xc00257cc,edx
c000fe28:	89 ca                	mov    edx,ecx
c000fe2a:	89 14 c5 e4 57 02 c0 	mov    DWORD PTR [eax*8-0x3ffda81c],edx
c000fe31:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000fe35:	eb b5                	jmp    c000fdec <loadACPITables(unsigned char*)+0xc0>
c000fe37:	90                   	nop
c000fe38:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000fe40:	a1 cc 57 02 c0       	mov    eax,ds:0xc00257cc
c000fe45:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000fe49:	0f 8d 39 01 00 00    	jge    c000ff88 <loadACPITables(unsigned char*)+0x25c>
c000fe4f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000fe53:	8b 04 c5 e4 57 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffda81c]
c000fe5a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000fe5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe62:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fe66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe6a:	25 ff 0f 00 00       	and    eax,0xfff
c000fe6f:	89 c6                	mov    esi,eax
c000fe71:	8b 1d b4 32 02 c0    	mov    ebx,DWORD PTR ds:0xc00232b4
c000fe77:	83 ec 0c             	sub    esp,0xc
c000fe7a:	6a 01                	push   0x1
c000fe7c:	e8 18 b4 ff ff       	call   c000b299 <Virt::allocateKernelVirtualPages(int)>
c000fe81:	83 c4 10             	add    esp,0x10
c000fe84:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fe88:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000fe8e:	83 ec 0c             	sub    esp,0xc
c000fe91:	6a 01                	push   0x1
c000fe93:	6a 01                	push   0x1
c000fe95:	50                   	push   eax
c000fe96:	52                   	push   edx
c000fe97:	53                   	push   ebx
c000fe98:	e8 47 bd ff ff       	call   c000bbe4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000fe9d:	83 c4 20             	add    esp,0x20
c000fea0:	09 f0                	or     eax,esi
c000fea2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000fea6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000feaa:	c1 e0 03             	shl    eax,0x3
c000fead:	05 e0 57 02 c0       	add    eax,0xc00257e0
c000feb2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000feb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000feba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000febe:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000fec6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000feca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fece:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fed2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fed6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000feda:	89 c6                	mov    esi,eax
c000fedc:	89 d7                	mov    edi,edx
c000fede:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fee0:	89 c8                	mov    eax,ecx
c000fee2:	89 fa                	mov    edx,edi
c000fee4:	89 f3                	mov    ebx,esi
c000fee6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000feea:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000feee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fef2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fef6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fef9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fefd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff01:	05 00 10 00 00       	add    eax,0x1000
c000ff06:	c1 e8 0c             	shr    eax,0xc
c000ff09:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ff0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff11:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ff15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff19:	25 ff 0f 00 00       	and    eax,0xfff
c000ff1e:	89 c6                	mov    esi,eax
c000ff20:	8b 1d b4 32 02 c0    	mov    ebx,DWORD PTR ds:0xc00232b4
c000ff26:	83 ec 0c             	sub    esp,0xc
c000ff29:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ff2d:	e8 67 b3 ff ff       	call   c000b299 <Virt::allocateKernelVirtualPages(int)>
c000ff32:	83 c4 10             	add    esp,0x10
c000ff35:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ff39:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ff3f:	83 ec 0c             	sub    esp,0xc
c000ff42:	6a 01                	push   0x1
c000ff44:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ff48:	50                   	push   eax
c000ff49:	52                   	push   edx
c000ff4a:	53                   	push   ebx
c000ff4b:	e8 94 bc ff ff       	call   c000bbe4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ff50:	83 c4 20             	add    esp,0x20
c000ff53:	09 f0                	or     eax,esi
c000ff55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ff59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff5d:	83 ec 0c             	sub    esp,0xc
c000ff60:	50                   	push   eax
c000ff61:	e8 27 b6 ff ff       	call   c000b58d <Virt::freeKernelVirtualPages(unsigned long)>
c000ff66:	83 c4 10             	add    esp,0x10
c000ff69:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ff6d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ff71:	89 14 c5 e4 57 02 c0 	mov    DWORD PTR [eax*8-0x3ffda81c],edx
c000ff78:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000ff7c:	e9 bf fe ff ff       	jmp    c000fe40 <loadACPITables(unsigned char*)+0x114>
c000ff81:	8d 76 00             	lea    esi,[esi+0x0]
c000ff84:	90                   	nop
c000ff85:	8d 76 00             	lea    esi,[esi+0x0]
c000ff88:	83 c4 60             	add    esp,0x60
c000ff8b:	5b                   	pop    ebx
c000ff8c:	5e                   	pop    esi
c000ff8d:	5f                   	pop    edi
c000ff8e:	c3                   	ret    
c000ff8f:	90                   	nop

c000ff90 <findRSDT(unsigned char*)>:
c000ff90:	57                   	push   edi
c000ff91:	56                   	push   esi
c000ff92:	53                   	push   ebx
c000ff93:	83 ec 50             	sub    esp,0x50
c000ff96:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000ff9b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000ffa1:	83 e0 04             	and    eax,0x4
c000ffa4:	84 c0                	test   al,al
c000ffa6:	75 0c                	jne    c000ffb4 <findRSDT(unsigned char*)+0x24>
c000ffa8:	b8 00 00 00 00       	mov    eax,0x0
c000ffad:	e9 26 01 00 00       	jmp    c00100d8 <findRSDT(unsigned char*)+0x148>
c000ffb2:	66 90                	xchg   ax,ax
c000ffb4:	89 e0                	mov    eax,esp
c000ffb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ffba:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ffbe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ffc2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000ffca:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ffce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ffd2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ffd6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ffda:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ffde:	89 c6                	mov    esi,eax
c000ffe0:	89 d7                	mov    edi,edx
c000ffe2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffe4:	89 c8                	mov    eax,ecx
c000ffe6:	89 fa                	mov    edx,edi
c000ffe8:	89 f3                	mov    ebx,esi
c000ffea:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000ffee:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000fff2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000fff6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fffa:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000fffe:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0010006:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001000a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001000e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0010012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010016:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001001a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001001e:	25 ff 0f 00 00       	and    eax,0xfff
c0010023:	89 c6                	mov    esi,eax
c0010025:	8b 1d b4 32 02 c0    	mov    ebx,DWORD PTR ds:0xc00232b4
c001002b:	83 ec 0c             	sub    esp,0xc
c001002e:	6a 02                	push   0x2
c0010030:	e8 64 b2 ff ff       	call   c000b299 <Virt::allocateKernelVirtualPages(int)>
c0010035:	83 c4 10             	add    esp,0x10
c0010038:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001003c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0010042:	83 ec 0c             	sub    esp,0xc
c0010045:	6a 01                	push   0x1
c0010047:	6a 02                	push   0x2
c0010049:	50                   	push   eax
c001004a:	52                   	push   edx
c001004b:	53                   	push   ebx
c001004c:	e8 93 bb ff ff       	call   c000bbe4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0010051:	83 c4 20             	add    esp,0x20
c0010054:	09 f0                	or     eax,esi
c0010056:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001005a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001005e:	25 ff 0f 00 00       	and    eax,0xfff
c0010063:	89 c6                	mov    esi,eax
c0010065:	8b 1d b4 32 02 c0    	mov    ebx,DWORD PTR ds:0xc00232b4
c001006b:	83 ec 0c             	sub    esp,0xc
c001006e:	6a 02                	push   0x2
c0010070:	e8 24 b2 ff ff       	call   c000b299 <Virt::allocateKernelVirtualPages(int)>
c0010075:	83 c4 10             	add    esp,0x10
c0010078:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001007c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0010082:	83 ec 0c             	sub    esp,0xc
c0010085:	6a 01                	push   0x1
c0010087:	6a 02                	push   0x2
c0010089:	50                   	push   eax
c001008a:	52                   	push   edx
c001008b:	53                   	push   ebx
c001008c:	e8 53 bb ff ff       	call   c000bbe4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0010091:	83 c4 20             	add    esp,0x20
c0010094:	09 f0                	or     eax,esi
c0010096:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001009a:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c001009f:	75 13                	jne    c00100b4 <findRSDT(unsigned char*)+0x124>
c00100a1:	c6 05 e0 59 02 c0 00 	mov    BYTE PTR ds:0xc00259e0,0x0
c00100a8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00100ac:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00100b0:	eb 22                	jmp    c00100d4 <findRSDT(unsigned char*)+0x144>
c00100b2:	66 90                	xchg   ax,ax
c00100b4:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00100b9:	75 11                	jne    c00100cc <findRSDT(unsigned char*)+0x13c>
c00100bb:	c6 05 e0 59 02 c0 01 	mov    BYTE PTR ds:0xc00259e0,0x1
c00100c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00100c6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00100ca:	eb 08                	jmp    c00100d4 <findRSDT(unsigned char*)+0x144>
c00100cc:	b8 00 00 00 00       	mov    eax,0x0
c00100d1:	eb 05                	jmp    c00100d8 <findRSDT(unsigned char*)+0x148>
c00100d3:	90                   	nop
c00100d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00100d8:	83 c4 50             	add    esp,0x50
c00100db:	5b                   	pop    ebx
c00100dc:	5e                   	pop    esi
c00100dd:	5f                   	pop    edi
c00100de:	c3                   	ret    
c00100df:	90                   	nop

c00100e0 <findDataTable(unsigned char*, char*)>:
c00100e0:	83 ec 1c             	sub    esp,0x1c
c00100e3:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c00100e8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00100ee:	83 e0 04             	and    eax,0x4
c00100f1:	84 c0                	test   al,al
c00100f3:	75 07                	jne    c00100fc <findDataTable(unsigned char*, char*)+0x1c>
c00100f5:	b8 00 00 00 00       	mov    eax,0x0
c00100fa:	eb 58                	jmp    c0010154 <findDataTable(unsigned char*, char*)+0x74>
c00100fc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010104:	a1 cc 57 02 c0       	mov    eax,ds:0xc00257cc
c0010109:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001010d:	7d 3d                	jge    c001014c <findDataTable(unsigned char*, char*)+0x6c>
c001010f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010113:	c1 e0 03             	shl    eax,0x3
c0010116:	05 e0 57 02 c0       	add    eax,0xc00257e0
c001011b:	83 ec 04             	sub    esp,0x4
c001011e:	6a 04                	push   0x4
c0010120:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010124:	50                   	push   eax
c0010125:	e8 7a 02 ff ff       	call   c00003a4 <memcmp>
c001012a:	83 c4 10             	add    esp,0x10
c001012d:	85 c0                	test   eax,eax
c001012f:	0f 94 c0             	sete   al
c0010132:	84 c0                	test   al,al
c0010134:	74 0e                	je     c0010144 <findDataTable(unsigned char*, char*)+0x64>
c0010136:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001013a:	8b 04 c5 e4 57 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffda81c]
c0010141:	eb 11                	jmp    c0010154 <findDataTable(unsigned char*, char*)+0x74>
c0010143:	90                   	nop
c0010144:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010148:	eb ba                	jmp    c0010104 <findDataTable(unsigned char*, char*)+0x24>
c001014a:	66 90                	xchg   ax,ax
c001014c:	b8 00 00 00 00       	mov    eax,0x0
c0010151:	8d 76 00             	lea    esi,[esi+0x0]
c0010154:	83 c4 1c             	add    esp,0x1c
c0010157:	c3                   	ret    

c0010158 <scanMADT()>:
c0010158:	53                   	push   ebx
c0010159:	83 ec 38             	sub    esp,0x38
c001015c:	a1 e0 31 02 c0       	mov    eax,ds:0xc00231e0
c0010161:	25 00 04 00 00       	and    eax,0x400
c0010166:	74 14                	je     c001017c <scanMADT()+0x24>
c0010168:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c001016d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0010173:	83 e2 fb             	and    edx,0xfffffffb
c0010176:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001017c:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c0010181:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010187:	83 e0 04             	and    eax,0x4
c001018a:	84 c0                	test   al,al
c001018c:	0f 84 52 04 00 00    	je     c00105e4 <scanMADT()+0x48c>
c0010192:	e8 05 fb ff ff       	call   c000fc9c <findRSDP()>
c0010197:	a3 ec 59 02 c0       	mov    ds:0xc00259ec,eax
c001019c:	a1 ec 59 02 c0       	mov    eax,ds:0xc00259ec
c00101a1:	85 c0                	test   eax,eax
c00101a3:	75 1b                	jne    c00101c0 <scanMADT()+0x68>
c00101a5:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c00101aa:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00101b0:	83 e2 fb             	and    edx,0xfffffffb
c00101b3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00101b9:	e9 2e 04 00 00       	jmp    c00105ec <scanMADT()+0x494>
c00101be:	66 90                	xchg   ax,ax
c00101c0:	a1 ec 59 02 c0       	mov    eax,ds:0xc00259ec
c00101c5:	83 ec 0c             	sub    esp,0xc
c00101c8:	50                   	push   eax
c00101c9:	e8 c2 fd ff ff       	call   c000ff90 <findRSDT(unsigned char*)>
c00101ce:	83 c4 10             	add    esp,0x10
c00101d1:	a3 e8 59 02 c0       	mov    ds:0xc00259e8,eax
c00101d6:	a1 e8 59 02 c0       	mov    eax,ds:0xc00259e8
c00101db:	85 c0                	test   eax,eax
c00101dd:	75 19                	jne    c00101f8 <scanMADT()+0xa0>
c00101df:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c00101e4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00101ea:	83 e2 fb             	and    edx,0xfffffffb
c00101ed:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00101f3:	e9 f4 03 00 00       	jmp    c00105ec <scanMADT()+0x494>
c00101f8:	a1 e8 59 02 c0       	mov    eax,ds:0xc00259e8
c00101fd:	83 ec 0c             	sub    esp,0xc
c0010200:	50                   	push   eax
c0010201:	e8 26 fb ff ff       	call   c000fd2c <loadACPITables(unsigned char*)>
c0010206:	83 c4 10             	add    esp,0x10
c0010209:	a1 e8 59 02 c0       	mov    eax,ds:0xc00259e8
c001020e:	83 ec 08             	sub    esp,0x8
c0010211:	68 a8 15 02 c0       	push   0xc00215a8
c0010216:	50                   	push   eax
c0010217:	e8 c4 fe ff ff       	call   c00100e0 <findDataTable(unsigned char*, char*)>
c001021c:	83 c4 10             	add    esp,0x10
c001021f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010223:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0010228:	75 1a                	jne    c0010244 <scanMADT()+0xec>
c001022a:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c001022f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0010235:	83 e2 fe             	and    edx,0xfffffffe
c0010238:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001023e:	e9 a9 03 00 00       	jmp    c00105ec <scanMADT()+0x494>
c0010243:	90                   	nop
c0010244:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001024c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010250:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010253:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0010257:	0f 87 8f 03 00 00    	ja     c00105ec <scanMADT()+0x494>
c001025d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0010265:	0f 87 81 03 00 00    	ja     c00105ec <scanMADT()+0x494>
c001026b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001026f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0010273:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010277:	8d 50 01             	lea    edx,[eax+0x1]
c001027a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001027e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010282:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0010286:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001028a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001028e:	8d 50 01             	lea    edx,[eax+0x1]
c0010291:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010295:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010299:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001029d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00102a1:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00102a6:	0f 86 3c 03 00 00    	jbe    c00105e8 <scanMADT()+0x490>
c00102ac:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00102b1:	75 59                	jne    c001030c <scanMADT()+0x1b4>
c00102b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00102b7:	8d 50 01             	lea    edx,[eax+0x1]
c00102ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00102be:	8a 15 e0 5b 02 c0    	mov    dl,BYTE PTR ds:0xc0025be0
c00102c4:	0f b6 d2             	movzx  edx,dl
c00102c7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00102cb:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00102cf:	88 82 20 5c 02 c0    	mov    BYTE PTR [edx-0x3ffda3e0],al
c00102d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00102d9:	8d 50 01             	lea    edx,[eax+0x1]
c00102dc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00102e0:	8a 15 e0 5b 02 c0    	mov    dl,BYTE PTR ds:0xc0025be0
c00102e6:	8d 4a 01             	lea    ecx,[edx+0x1]
c00102e9:	88 0d e0 5b 02 c0    	mov    BYTE PTR ds:0xc0025be0,cl
c00102ef:	0f b6 d2             	movzx  edx,dl
c00102f2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00102f6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00102fa:	88 82 00 5c 02 c0    	mov    BYTE PTR [edx-0x3ffda400],al
c0010300:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0010305:	e9 c6 02 00 00       	jmp    c00105d0 <scanMADT()+0x478>
c001030a:	66 90                	xchg   ax,ax
c001030c:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0010311:	0f 85 15 01 00 00    	jne    c001042c <scanMADT()+0x2d4>
c0010317:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001031b:	8d 50 01             	lea    edx,[eax+0x1]
c001031e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010322:	8a 15 a0 5a 02 c0    	mov    dl,BYTE PTR ds:0xc0025aa0
c0010328:	0f b6 d2             	movzx  edx,dl
c001032b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001032f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0010333:	88 82 c0 5a 02 c0    	mov    BYTE PTR [edx-0x3ffda540],al
c0010339:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001033d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010341:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010345:	01 d0                	add    eax,edx
c0010347:	83 c0 2c             	add    eax,0x2c
c001034a:	8a 00                	mov    al,BYTE PTR [eax]
c001034c:	0f b6 d0             	movzx  edx,al
c001034f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010353:	8d 48 01             	lea    ecx,[eax+0x1]
c0010356:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001035a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001035e:	0f b6 c0             	movzx  eax,al
c0010361:	c1 e0 08             	shl    eax,0x8
c0010364:	89 d1                	mov    ecx,edx
c0010366:	09 c1                	or     ecx,eax
c0010368:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001036c:	8d 50 02             	lea    edx,[eax+0x2]
c001036f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010373:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0010377:	0f b6 c0             	movzx  eax,al
c001037a:	c1 e0 10             	shl    eax,0x10
c001037d:	09 c1                	or     ecx,eax
c001037f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010383:	8d 50 03             	lea    edx,[eax+0x3]
c0010386:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001038a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001038e:	0f b6 c0             	movzx  eax,al
c0010391:	c1 e0 18             	shl    eax,0x18
c0010394:	09 c1                	or     ecx,eax
c0010396:	89 ca                	mov    edx,ecx
c0010398:	a0 a0 5a 02 c0       	mov    al,ds:0xc0025aa0
c001039d:	0f b6 c0             	movzx  eax,al
c00103a0:	89 14 85 e0 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda520],edx
c00103a7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00103ac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00103b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00103b4:	01 d0                	add    eax,edx
c00103b6:	83 c0 2c             	add    eax,0x2c
c00103b9:	8a 00                	mov    al,BYTE PTR [eax]
c00103bb:	0f b6 d0             	movzx  edx,al
c00103be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00103c2:	8d 48 01             	lea    ecx,[eax+0x1]
c00103c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103c9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00103cd:	0f b6 c0             	movzx  eax,al
c00103d0:	c1 e0 08             	shl    eax,0x8
c00103d3:	89 d1                	mov    ecx,edx
c00103d5:	09 c1                	or     ecx,eax
c00103d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00103db:	8d 50 02             	lea    edx,[eax+0x2]
c00103de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103e2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00103e6:	0f b6 c0             	movzx  eax,al
c00103e9:	c1 e0 10             	shl    eax,0x10
c00103ec:	09 c1                	or     ecx,eax
c00103ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00103f2:	8d 50 03             	lea    edx,[eax+0x3]
c00103f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103f9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00103fd:	0f b6 c0             	movzx  eax,al
c0010400:	c1 e0 18             	shl    eax,0x18
c0010403:	09 c1                	or     ecx,eax
c0010405:	89 ca                	mov    edx,ecx
c0010407:	a0 a0 5a 02 c0       	mov    al,ds:0xc0025aa0
c001040c:	0f b6 c0             	movzx  eax,al
c001040f:	89 14 85 60 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda4a0],edx
c0010416:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001041b:	a0 a0 5a 02 c0       	mov    al,ds:0xc0025aa0
c0010420:	40                   	inc    eax
c0010421:	a2 a0 5a 02 c0       	mov    ds:0xc0025aa0,al
c0010426:	e9 a5 01 00 00       	jmp    c00105d0 <scanMADT()+0x478>
c001042b:	90                   	nop
c001042c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0010431:	0f 85 e9 00 00 00    	jne    c0010520 <scanMADT()+0x3c8>
c0010437:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001043b:	8d 50 01             	lea    edx,[eax+0x1]
c001043e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010442:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010446:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001044a:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001044e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010452:	8d 50 01             	lea    edx,[eax+0x1]
c0010455:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010459:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001045d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0010461:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0010465:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010469:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001046d:	01 d0                	add    eax,edx
c001046f:	83 c0 2c             	add    eax,0x2c
c0010472:	8a 00                	mov    al,BYTE PTR [eax]
c0010474:	0f b6 d0             	movzx  edx,al
c0010477:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001047b:	8d 48 01             	lea    ecx,[eax+0x1]
c001047e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010482:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0010486:	0f b6 c0             	movzx  eax,al
c0010489:	c1 e0 08             	shl    eax,0x8
c001048c:	89 d1                	mov    ecx,edx
c001048e:	09 c1                	or     ecx,eax
c0010490:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010494:	8d 50 02             	lea    edx,[eax+0x2]
c0010497:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001049b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001049f:	0f b6 c0             	movzx  eax,al
c00104a2:	c1 e0 10             	shl    eax,0x10
c00104a5:	09 c1                	or     ecx,eax
c00104a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00104ab:	8d 50 03             	lea    edx,[eax+0x3]
c00104ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00104b2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00104b6:	0f b6 c0             	movzx  eax,al
c00104b9:	c1 e0 18             	shl    eax,0x18
c00104bc:	09 c8                	or     eax,ecx
c00104be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00104c2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00104c7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00104cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00104cf:	01 d0                	add    eax,edx
c00104d1:	83 c0 2c             	add    eax,0x2c
c00104d4:	8a 00                	mov    al,BYTE PTR [eax]
c00104d6:	0f b6 c0             	movzx  eax,al
c00104d9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00104dd:	8d 4a 01             	lea    ecx,[edx+0x1]
c00104e0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00104e4:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00104e8:	0f b6 d2             	movzx  edx,dl
c00104eb:	c1 e2 08             	shl    edx,0x8
c00104ee:	09 d0                	or     eax,edx
c00104f0:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00104f5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00104fa:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00104ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010503:	88 90 80 2b 02 c0    	mov    BYTE PTR [eax-0x3ffdd480],dl
c0010509:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001050e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0010513:	66 89 84 12 80 5a 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffda580],ax
c001051b:	e9 b0 00 00 00       	jmp    c00105d0 <scanMADT()+0x478>
c0010520:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0010525:	0f 85 99 00 00 00    	jne    c00105c4 <scanMADT()+0x46c>
c001052b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001052f:	8d 50 01             	lea    edx,[eax+0x1]
c0010532:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010536:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001053a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001053e:	0f b6 c0             	movzx  eax,al
c0010541:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010545:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010549:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001054d:	01 d0                	add    eax,edx
c001054f:	83 c0 2c             	add    eax,0x2c
c0010552:	8a 00                	mov    al,BYTE PTR [eax]
c0010554:	0f b6 d0             	movzx  edx,al
c0010557:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001055b:	8d 48 01             	lea    ecx,[eax+0x1]
c001055e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010562:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0010566:	0f b6 c0             	movzx  eax,al
c0010569:	c1 e0 08             	shl    eax,0x8
c001056c:	09 d0                	or     eax,edx
c001056e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010572:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0010577:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001057b:	8d 50 01             	lea    edx,[eax+0x1]
c001057e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010582:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010586:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001058a:	0f b6 c0             	movzx  eax,al
c001058d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010595:	c1 e0 08             	shl    eax,0x8
c0010598:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001059c:	89 c1                	mov    ecx,eax
c001059e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00105a2:	c1 e0 18             	shl    eax,0x18
c00105a5:	89 c3                	mov    ebx,eax
c00105a7:	a1 f0 59 02 c0       	mov    eax,ds:0xc00259f0
c00105ac:	8d 50 01             	lea    edx,[eax+0x1]
c00105af:	89 15 f0 59 02 c0    	mov    DWORD PTR ds:0xc00259f0,edx
c00105b5:	09 d9                	or     ecx,ebx
c00105b7:	89 ca                	mov    edx,ecx
c00105b9:	89 14 85 00 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda600],edx
c00105c0:	eb 0e                	jmp    c00105d0 <scanMADT()+0x478>
c00105c2:	66 90                	xchg   ax,ax
c00105c4:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00105c9:	75 05                	jne    c00105d0 <scanMADT()+0x478>
c00105cb:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00105d0:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00105d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00105d9:	01 d0                	add    eax,edx
c00105db:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00105df:	e9 68 fc ff ff       	jmp    c001024c <scanMADT()+0xf4>
c00105e4:	90                   	nop
c00105e5:	eb 05                	jmp    c00105ec <scanMADT()+0x494>
c00105e7:	90                   	nop
c00105e8:	90                   	nop
c00105e9:	8d 76 00             	lea    esi,[esi+0x0]
c00105ec:	83 c4 38             	add    esp,0x38
c00105ef:	5b                   	pop    ebx
c00105f0:	c3                   	ret    
c00105f1:	90                   	nop
c00105f2:	66 90                	xchg   ax,ax

c00105f4 <ACPI::ACPI()>:
c00105f4:	83 ec 0c             	sub    esp,0xc
c00105f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105fb:	83 ec 08             	sub    esp,0x8
c00105fe:	68 ad 15 02 c0       	push   0xc00215ad
c0010603:	50                   	push   eax
c0010604:	e8 ad d4 ff ff       	call   c000dab6 <Device::Device(char const*)>
c0010609:	83 c4 10             	add    esp,0x10
c001060c:	ba e4 16 02 c0       	mov    edx,0xc00216e4
c0010611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010615:	89 10                	mov    DWORD PTR [eax],edx
c0010617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001061b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0010622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010626:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010634:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001063e:	e8 15 fb ff ff       	call   c0010158 <scanMADT()>
c0010643:	90                   	nop
c0010644:	83 c4 0c             	add    esp,0xc
c0010647:	c3                   	ret    

c0010648 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0010648:	83 ec 2c             	sub    esp,0x2c
c001064b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001064f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010653:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010657:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001065b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0010660:	88 d0                	mov    al,dl
c0010662:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0010666:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001066b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0010673:	90                   	nop
c0010674:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010678:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001067e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0010682:	0f 8d 9c 00 00 00    	jge    c0010724 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0010688:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001068c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010690:	83 c2 2a             	add    edx,0x2a
c0010693:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0010697:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001069c:	75 7a                	jne    c0010718 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001069e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00106a2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00106a6:	83 c2 2a             	add    edx,0x2a
c00106a9:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00106ad:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00106b1:	75 65                	jne    c0010718 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c00106b3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00106b8:	74 3a                	je     c00106f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c00106ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00106be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00106c2:	83 c2 2a             	add    edx,0x2a
c00106c5:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00106c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00106cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00106d0:	39 c2                	cmp    edx,eax
c00106d2:	74 10                	je     c00106e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c00106d4:	83 ec 0c             	sub    esp,0xc
c00106d7:	68 28 15 02 c0       	push   0xc0021528
c00106dc:	e8 f0 1a 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c00106e1:	83 c4 10             	add    esp,0x10
c00106e4:	83 ec 0c             	sub    esp,0xc
c00106e7:	68 b2 15 02 c0       	push   0xc00215b2
c00106ec:	e8 e0 1a 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c00106f1:	83 c4 10             	add    esp,0x10
c00106f4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00106f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00106fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010700:	83 c2 2a             	add    edx,0x2a
c0010703:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0010707:	8b 02                	mov    eax,DWORD PTR [edx]
c0010709:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001070c:	89 01                	mov    DWORD PTR [ecx],eax
c001070e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0010711:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0010716:	66 90                	xchg   ax,ax
c0010718:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001071c:	e9 53 ff ff ff       	jmp    c0010674 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0010721:	8d 76 00             	lea    esi,[esi+0x0]
c0010724:	90                   	nop
c0010725:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010729:	83 c4 2c             	add    esp,0x2c
c001072c:	c2 04 00             	ret    0x4
c001072f:	90                   	nop

c0010730 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0010730:	83 ec 1c             	sub    esp,0x1c
c0010733:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010737:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001073b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001073f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0010744:	88 c8                	mov    al,cl
c0010746:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001074a:	88 d0                	mov    al,dl
c001074c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0010750:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010754:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001075a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001075e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0010761:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0010765:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0010769:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001076d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0010773:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010777:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001077a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001077e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0010783:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010787:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001078d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0010791:	8d 48 01             	lea    ecx,[eax+0x1]
c0010794:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010798:	83 c2 2a             	add    edx,0x2a
c001079b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001079f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107a3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00107a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107ad:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00107b0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00107b4:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00107b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107bc:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00107c2:	8d 50 01             	lea    edx,[eax+0x1]
c00107c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107c9:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00107cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107d3:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00107d9:	3d 00 02 00 00       	cmp    eax,0x200
c00107de:	75 10                	jne    c00107f0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00107e0:	83 ec 0c             	sub    esp,0xc
c00107e3:	68 c1 15 02 c0       	push   0xc00215c1
c00107e8:	e8 e4 19 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c00107ed:	83 c4 10             	add    esp,0x10
c00107f0:	90                   	nop
c00107f1:	83 c4 1c             	add    esp,0x1c
c00107f4:	c3                   	ret    
c00107f5:	90                   	nop
c00107f6:	66 90                	xchg   ax,ax

c00107f8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00107f8:	b8 00 00 00 00       	mov    eax,0x0
c00107fd:	c3                   	ret    
c00107fe:	66 90                	xchg   ax,ax

c0010800 <ACPI::detectPCI()>:
c0010800:	53                   	push   ebx
c0010801:	83 ec 28             	sub    esp,0x28
c0010804:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010809:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c001080e:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c0010813:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010819:	83 e0 04             	and    eax,0x4
c001081c:	84 c0                	test   al,al
c001081e:	74 2c                	je     c001084c <ACPI::detectPCI()+0x4c>
c0010820:	a1 e8 59 02 c0       	mov    eax,ds:0xc00259e8
c0010825:	83 ec 08             	sub    esp,0x8
c0010828:	68 de 15 02 c0       	push   0xc00215de
c001082d:	50                   	push   eax
c001082e:	e8 ad f8 ff ff       	call   c00100e0 <findDataTable(unsigned char*, char*)>
c0010833:	83 c4 10             	add    esp,0x10
c0010836:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001083a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001083f:	74 0b                	je     c001084c <ACPI::detectPCI()+0x4c>
c0010841:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0010846:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001084b:	90                   	nop
c001084c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0010854:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010858:	8a 00                	mov    al,BYTE PTR [eax]
c001085a:	3c 01                	cmp    al,0x1
c001085c:	75 0e                	jne    c001086c <ACPI::detectPCI()+0x6c>
c001085e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0010863:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0010868:	eb 2a                	jmp    c0010894 <ACPI::detectPCI()+0x94>
c001086a:	66 90                	xchg   ax,ax
c001086c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010870:	8a 00                	mov    al,BYTE PTR [eax]
c0010872:	3c 02                	cmp    al,0x2
c0010874:	75 1e                	jne    c0010894 <ACPI::detectPCI()+0x94>
c0010876:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001087b:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0010880:	74 12                	je     c0010894 <ACPI::detectPCI()+0x94>
c0010882:	83 ec 0c             	sub    esp,0xc
c0010885:	68 58 15 02 c0       	push   0xc0021558
c001088a:	e8 42 19 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c001088f:	83 c4 10             	add    esp,0x10
c0010892:	66 90                	xchg   ax,ax
c0010894:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0010898:	83 f0 01             	xor    eax,0x1
c001089b:	84 c0                	test   al,al
c001089d:	74 41                	je     c00108e0 <ACPI::detectPCI()+0xe0>
c001089f:	e8 ac f8 fe ff       	call   c0000150 <manualPCIProbe>
c00108a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00108a8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00108ad:	75 0d                	jne    c00108bc <ACPI::detectPCI()+0xbc>
c00108af:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00108b4:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c00108b9:	eb 25                	jmp    c00108e0 <ACPI::detectPCI()+0xe0>
c00108bb:	90                   	nop
c00108bc:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c00108c1:	75 1d                	jne    c00108e0 <ACPI::detectPCI()+0xe0>
c00108c3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00108c8:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00108cd:	74 11                	je     c00108e0 <ACPI::detectPCI()+0xe0>
c00108cf:	83 ec 0c             	sub    esp,0xc
c00108d2:	68 58 15 02 c0       	push   0xc0021558
c00108d7:	e8 f5 18 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c00108dc:	83 c4 10             	add    esp,0x10
c00108df:	90                   	nop
c00108e0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00108e5:	0f 84 85 00 00 00    	je     c0010970 <ACPI::detectPCI()+0x170>
c00108eb:	83 ec 0c             	sub    esp,0xc
c00108ee:	68 e3 15 02 c0       	push   0xc00215e3
c00108f3:	e8 d3 8e ff ff       	call   c00097cb <Krnl::setBootMessage(char const*)>
c00108f8:	83 c4 10             	add    esp,0x10
c00108fb:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0010903:	83 ec 0c             	sub    esp,0xc
c0010906:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001090a:	e8 62 8e ff ff       	call   c0009771 <malloc>
c001090f:	83 c4 10             	add    esp,0x10
c0010912:	89 c3                	mov    ebx,eax
c0010914:	83 ec 0c             	sub    esp,0xc
c0010917:	53                   	push   ebx
c0010918:	e8 35 ad 00 00       	call   c001b652 <PCI::PCI()>
c001091d:	83 c4 10             	add    esp,0x10
c0010920:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010924:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010928:	83 ec 08             	sub    esp,0x8
c001092b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001092f:	50                   	push   eax
c0010930:	e8 e9 cf ff ff       	call   c000d91e <Device::addChild(Device*)>
c0010935:	83 c4 10             	add    esp,0x10
c0010938:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001093c:	8b 00                	mov    eax,DWORD PTR [eax]
c001093e:	83 c0 08             	add    eax,0x8
c0010941:	8b 00                	mov    eax,DWORD PTR [eax]
c0010943:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0010948:	74 0a                	je     c0010954 <ACPI::detectPCI()+0x154>
c001094a:	ba 01 00 00 00       	mov    edx,0x1
c001094f:	eb 0b                	jmp    c001095c <ACPI::detectPCI()+0x15c>
c0010951:	8d 76 00             	lea    esi,[esi+0x0]
c0010954:	ba 02 00 00 00       	mov    edx,0x2
c0010959:	8d 76 00             	lea    esi,[esi+0x0]
c001095c:	6a 00                	push   0x0
c001095e:	6a 00                	push   0x0
c0010960:	52                   	push   edx
c0010961:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010965:	ff d0                	call   eax
c0010967:	83 c4 10             	add    esp,0x10
c001096a:	e9 91 00 00 00       	jmp    c0010a00 <ACPI::detectPCI()+0x200>
c001096f:	90                   	nop
c0010970:	83 ec 0c             	sub    esp,0xc
c0010973:	68 fb 15 02 c0       	push   0xc00215fb
c0010978:	e8 4e 8e ff ff       	call   c00097cb <Krnl::setBootMessage(char const*)>
c001097d:	83 c4 10             	add    esp,0x10
c0010980:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0010987:	83 ec 0c             	sub    esp,0xc
c001098a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001098e:	e8 de 8d ff ff       	call   c0009771 <malloc>
c0010993:	83 c4 10             	add    esp,0x10
c0010996:	89 c3                	mov    ebx,eax
c0010998:	83 ec 0c             	sub    esp,0xc
c001099b:	53                   	push   ebx
c001099c:	e8 d7 b7 00 00       	call   c001c178 <IDE::IDE()>
c00109a1:	83 c4 10             	add    esp,0x10
c00109a4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00109a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00109ac:	83 ec 08             	sub    esp,0x8
c00109af:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00109b3:	50                   	push   eax
c00109b4:	e8 65 cf ff ff       	call   c000d91e <Device::addChild(Device*)>
c00109b9:	83 c4 10             	add    esp,0x10
c00109bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109c0:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c00109ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109ce:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c00109d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109db:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c00109e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00109ea:	83 c0 08             	add    eax,0x8
c00109ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00109ef:	6a 00                	push   0x0
c00109f1:	6a 00                	push   0x0
c00109f3:	6a 00                	push   0x0
c00109f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00109f9:	ff d0                	call   eax
c00109fb:	83 c4 10             	add    esp,0x10
c00109fe:	66 90                	xchg   ax,ax
c0010a00:	90                   	nop
c0010a01:	83 c4 28             	add    esp,0x28
c0010a04:	5b                   	pop    ebx
c0010a05:	c3                   	ret    
c0010a06:	66 90                	xchg   ax,ax

c0010a08 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0010a08:	83 ec 1c             	sub    esp,0x1c
c0010a0b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a0f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010a12:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0010a16:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c0010a1b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0010a20:	83 ec 08             	sub    esp,0x8
c0010a23:	52                   	push   edx
c0010a24:	50                   	push   eax
c0010a25:	e8 cc 83 ff ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0010a2a:	83 c4 10             	add    esp,0x10
c0010a2d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0010a31:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c0010a36:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0010a3b:	83 ec 04             	sub    esp,0x4
c0010a3e:	6a 01                	push   0x1
c0010a40:	52                   	push   edx
c0010a41:	50                   	push   eax
c0010a42:	e8 c1 84 ff ff       	call   c0008f08 <Computer::writeCMOS(unsigned char, unsigned char)>
c0010a47:	83 c4 10             	add    esp,0x10
c0010a4a:	90                   	nop
c0010a4b:	83 c4 1c             	add    esp,0x1c
c0010a4e:	c3                   	ret    
c0010a4f:	90                   	nop

c0010a50 <ACPI::sleep()>:
c0010a50:	83 ec 0c             	sub    esp,0xc
c0010a53:	a1 c0 57 02 c0       	mov    eax,ds:0xc00257c0
c0010a58:	85 c0                	test   eax,eax
c0010a5a:	74 08                	je     c0010a64 <ACPI::sleep()+0x14>
c0010a5c:	a1 c0 57 02 c0       	mov    eax,ds:0xc00257c0
c0010a61:	ff d0                	call   eax
c0010a63:	90                   	nop
c0010a64:	90                   	nop
c0010a65:	83 c4 0c             	add    esp,0xc
c0010a68:	c3                   	ret    
c0010a69:	90                   	nop
c0010a6a:	66 90                	xchg   ax,ax

c0010a6c <ACPI::open(int, int, void*)>:
c0010a6c:	57                   	push   edi
c0010a6d:	56                   	push   esi
c0010a6e:	53                   	push   ebx
c0010a6f:	81 ec 70 01 00 00    	sub    esp,0x170
c0010a75:	83 ec 0c             	sub    esp,0xc
c0010a78:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0010a7f:	e8 7c fd ff ff       	call   c0010800 <ACPI::detectPCI()>
c0010a84:	83 c4 10             	add    esp,0x10
c0010a87:	83 ec 0c             	sub    esp,0xc
c0010a8a:	68 80 15 02 c0       	push   0xc0021580
c0010a8f:	e8 37 8d ff ff       	call   c00097cb <Krnl::setBootMessage(char const*)>
c0010a94:	83 c4 10             	add    esp,0x10
c0010a97:	83 ec 0c             	sub    esp,0xc
c0010a9a:	68 10 16 02 c0       	push   0xc0021610
c0010a9f:	e8 5b 37 00 00       	call   c00141ff <Thr::loadKernelSymbolTable(char const*)>
c0010aa4:	83 c4 10             	add    esp,0x10
c0010aa7:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c0010aaf:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c0010aba:	83 ec 0c             	sub    esp,0xc
c0010abd:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0010ac4:	e8 a8 8c ff ff       	call   c0009771 <malloc>
c0010ac9:	83 c4 10             	add    esp,0x10
c0010acc:	89 c3                	mov    ebx,eax
c0010ace:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c0010ad3:	83 ec 04             	sub    esp,0x4
c0010ad6:	50                   	push   eax
c0010ad7:	68 2e 16 02 c0       	push   0xc002162e
c0010adc:	53                   	push   ebx
c0010add:	e8 84 bf ff ff       	call   c000ca66 <File::File(char const*, Process*)>
c0010ae2:	83 c4 10             	add    esp,0x10
c0010ae5:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0010aec:	83 ec 08             	sub    esp,0x8
c0010aef:	6a 01                	push   0x1
c0010af1:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0010af8:	e8 23 c0 ff ff       	call   c000cb20 <File::open(FileOpenMode)>
c0010afd:	83 c4 10             	add    esp,0x10
c0010b00:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0010b07:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0010b0f:	75 17                	jne    c0010b28 <ACPI::open(int, int, void*)+0xbc>
c0010b11:	83 ec 0c             	sub    esp,0xc
c0010b14:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0010b1b:	e8 5e c0 ff ff       	call   c000cb7e <File::close()>
c0010b20:	83 c4 10             	add    esp,0x10
c0010b23:	eb 0b                	jmp    c0010b30 <ACPI::open(int, int, void*)+0xc4>
c0010b25:	8d 76 00             	lea    esi,[esi+0x0]
c0010b28:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0010b30:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0010b38:	74 1e                	je     c0010b58 <ACPI::open(int, int, void*)+0xec>
c0010b3a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0010b41:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b43:	83 c0 08             	add    eax,0x8
c0010b46:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b48:	83 ec 0c             	sub    esp,0xc
c0010b4b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0010b52:	ff d0                	call   eax
c0010b54:	83 c4 10             	add    esp,0x10
c0010b57:	90                   	nop
c0010b58:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0010b5f:	83 f0 01             	xor    eax,0x1
c0010b62:	84 c0                	test   al,al
c0010b64:	74 42                	je     c0010ba8 <ACPI::open(int, int, void*)+0x13c>
c0010b66:	83 ec 0c             	sub    esp,0xc
c0010b69:	68 4c 16 02 c0       	push   0xc002164c
c0010b6e:	e8 58 8c ff ff       	call   c00097cb <Krnl::setBootMessage(char const*)>
c0010b73:	83 c4 10             	add    esp,0x10
c0010b76:	83 ec 04             	sub    esp,0x4
c0010b79:	6a 0c                	push   0xc
c0010b7b:	68 67 16 02 c0       	push   0xc0021667
c0010b80:	68 78 16 02 c0       	push   0xc0021678
c0010b85:	e8 ab 1e 00 00       	call   c0012a35 <Reg::readIntWithDefault(char*, char*, int)>
c0010b8a:	83 c4 10             	add    esp,0x10
c0010b8d:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0010b94:	83 ec 0c             	sub    esp,0xc
c0010b97:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0010b9e:	e8 00 a9 ff ff       	call   c000b4a3 <Virt::setupPageSwapping(int)>
c0010ba3:	83 c4 10             	add    esp,0x10
c0010ba6:	66 90                	xchg   ax,ax
c0010ba8:	83 ec 0c             	sub    esp,0xc
c0010bab:	68 ef 06 02 c0       	push   0xc00206ef
c0010bb0:	e8 16 8c ff ff       	call   c00097cb <Krnl::setBootMessage(char const*)>
c0010bb5:	83 c4 10             	add    esp,0x10
c0010bb8:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0010bbf:	83 ec 08             	sub    esp,0x8
c0010bc2:	6a 12                	push   0x12
c0010bc4:	50                   	push   eax
c0010bc5:	e8 6c d0 ff ff       	call   c000dc36 <getDevicesOfType(DeviceType)>
c0010bca:	83 c4 0c             	add    esp,0xc
c0010bcd:	8d 76 00             	lea    esi,[esi+0x0]
c0010bd0:	83 ec 0c             	sub    esp,0xc
c0010bd3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0010bda:	50                   	push   eax
c0010bdb:	e8 ec ee 00 00       	call   c001facc <LinkedList<Device>::isEmpty()>
c0010be0:	83 c4 10             	add    esp,0x10
c0010be3:	83 f0 01             	xor    eax,0x1
c0010be6:	84 c0                	test   al,al
c0010be8:	0f 84 46 01 00 00    	je     c0010d34 <ACPI::open(int, int, void*)+0x2c8>
c0010bee:	83 ec 0c             	sub    esp,0xc
c0010bf1:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0010bf8:	50                   	push   eax
c0010bf9:	e8 ea ee 00 00       	call   c001fae8 <LinkedList<Device>::getFirstElement()>
c0010bfe:	83 c4 10             	add    esp,0x10
c0010c01:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0010c08:	83 ec 0c             	sub    esp,0xc
c0010c0b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0010c12:	50                   	push   eax
c0010c13:	e8 d8 ee 00 00       	call   c001faf0 <LinkedList<Device>::removeFirst()>
c0010c18:	83 c4 10             	add    esp,0x10
c0010c1b:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0010c22:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0010c29:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0010c30:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010c34:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0010c3a:	ba 09 00 00 00       	mov    edx,0x9
c0010c3f:	fc                   	cld    
c0010c40:	89 c7                	mov    edi,eax
c0010c42:	89 de                	mov    esi,ebx
c0010c44:	89 d1                	mov    ecx,edx
c0010c46:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010c48:	83 ec 08             	sub    esp,0x8
c0010c4b:	8d 44 24 38          	lea    eax,[esp+0x38]
c0010c4f:	50                   	push   eax
c0010c50:	83 ec 24             	sub    esp,0x24
c0010c53:	89 e0                	mov    eax,esp
c0010c55:	89 c3                	mov    ebx,eax
c0010c57:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0010c5b:	ba 09 00 00 00       	mov    edx,0x9
c0010c60:	89 df                	mov    edi,ebx
c0010c62:	89 c6                	mov    esi,eax
c0010c64:	89 d1                	mov    ecx,edx
c0010c66:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010c68:	e8 c3 ae 00 00       	call   c001bb30 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0010c6d:	83 c4 30             	add    esp,0x30
c0010c70:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0010c77:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0010c7f:	0f 84 4b ff ff ff    	je     c0010bd0 <ACPI::open(int, int, void*)+0x164>
c0010c85:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0010c90:	83 ec 0c             	sub    esp,0xc
c0010c93:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010c9a:	e8 d2 8a ff ff       	call   c0009771 <malloc>
c0010c9f:	83 c4 10             	add    esp,0x10
c0010ca2:	89 c3                	mov    ebx,eax
c0010ca4:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c0010ca9:	83 ec 04             	sub    esp,0x4
c0010cac:	50                   	push   eax
c0010cad:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0010cb4:	53                   	push   ebx
c0010cb5:	e8 ac bd ff ff       	call   c000ca66 <File::File(char const*, Process*)>
c0010cba:	83 c4 10             	add    esp,0x10
c0010cbd:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0010cc4:	83 ec 0c             	sub    esp,0xc
c0010cc7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0010cce:	e8 bb c0 ff ff       	call   c000cd8e <File::exists()>
c0010cd3:	83 c4 10             	add    esp,0x10
c0010cd6:	84 c0                	test   al,al
c0010cd8:	74 2a                	je     c0010d04 <ACPI::open(int, int, void*)+0x298>
c0010cda:	83 ec 08             	sub    esp,0x8
c0010cdd:	6a 01                	push   0x1
c0010cdf:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0010ce6:	e8 8b 3f 00 00       	call   c0014c76 <Thr::loadDLL(char const*, bool)>
c0010ceb:	83 c4 10             	add    esp,0x10
c0010cee:	83 ec 08             	sub    esp,0x8
c0010cf1:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0010cf8:	50                   	push   eax
c0010cf9:	e8 a9 41 00 00       	call   c0014ea7 <Thr::executeDLL(unsigned long, void*)>
c0010cfe:	83 c4 10             	add    esp,0x10
c0010d01:	8d 76 00             	lea    esi,[esi+0x0]
c0010d04:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0010d0c:	0f 84 be fe ff ff    	je     c0010bd0 <ACPI::open(int, int, void*)+0x164>
c0010d12:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0010d19:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d1b:	83 c0 08             	add    eax,0x8
c0010d1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d20:	83 ec 0c             	sub    esp,0xc
c0010d23:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0010d2a:	ff d0                	call   eax
c0010d2c:	83 c4 10             	add    esp,0x10
c0010d2f:	e9 9c fe ff ff       	jmp    c0010bd0 <ACPI::open(int, int, void*)+0x164>
c0010d34:	83 ec 0c             	sub    esp,0xc
c0010d37:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0010d3e:	50                   	push   eax
c0010d3f:	e8 84 ed 00 00       	call   c001fac8 <LinkedList<Device>::~LinkedList()>
c0010d44:	83 c4 10             	add    esp,0x10
c0010d47:	8b 1d c8 31 02 c0    	mov    ebx,DWORD PTR ds:0xc00231c8
c0010d4d:	83 ec 08             	sub    esp,0x8
c0010d50:	6a 01                	push   0x1
c0010d52:	68 7f 16 02 c0       	push   0xc002167f
c0010d57:	e8 1a 3f 00 00       	call   c0014c76 <Thr::loadDLL(char const*, bool)>
c0010d5c:	83 c4 10             	add    esp,0x10
c0010d5f:	83 ec 08             	sub    esp,0x8
c0010d62:	53                   	push   ebx
c0010d63:	50                   	push   eax
c0010d64:	e8 3e 41 00 00       	call   c0014ea7 <Thr::executeDLL(unsigned long, void*)>
c0010d69:	83 c4 10             	add    esp,0x10
c0010d6c:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c0010d71:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010d77:	83 e0 04             	and    eax,0x4
c0010d7a:	84 c0                	test   al,al
c0010d7c:	0f 84 16 01 00 00    	je     c0010e98 <ACPI::open(int, int, void*)+0x42c>
c0010d82:	83 ec 0c             	sub    esp,0xc
c0010d85:	68 9c 16 02 c0       	push   0xc002169c
c0010d8a:	e8 3c 8a ff ff       	call   c00097cb <Krnl::setBootMessage(char const*)>
c0010d8f:	83 c4 10             	add    esp,0x10
c0010d92:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0010d9d:	83 ec 0c             	sub    esp,0xc
c0010da0:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0010da7:	e8 c5 89 ff ff       	call   c0009771 <malloc>
c0010dac:	83 c4 10             	add    esp,0x10
c0010daf:	89 c3                	mov    ebx,eax
c0010db1:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c0010db6:	83 ec 04             	sub    esp,0x4
c0010db9:	50                   	push   eax
c0010dba:	68 b9 16 02 c0       	push   0xc00216b9
c0010dbf:	53                   	push   ebx
c0010dc0:	e8 a1 bc ff ff       	call   c000ca66 <File::File(char const*, Process*)>
c0010dc5:	83 c4 10             	add    esp,0x10
c0010dc8:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0010dcf:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0010dd7:	74 1b                	je     c0010df4 <ACPI::open(int, int, void*)+0x388>
c0010dd9:	83 ec 0c             	sub    esp,0xc
c0010ddc:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0010de3:	e8 a6 bf ff ff       	call   c000cd8e <File::exists()>
c0010de8:	83 c4 10             	add    esp,0x10
c0010deb:	84 c0                	test   al,al
c0010ded:	74 05                	je     c0010df4 <ACPI::open(int, int, void*)+0x388>
c0010def:	b0 01                	mov    al,0x1
c0010df1:	eb 05                	jmp    c0010df8 <ACPI::open(int, int, void*)+0x38c>
c0010df3:	90                   	nop
c0010df4:	b0 00                	mov    al,0x0
c0010df6:	66 90                	xchg   ax,ax
c0010df8:	84 c0                	test   al,al
c0010dfa:	74 28                	je     c0010e24 <ACPI::open(int, int, void*)+0x3b8>
c0010dfc:	83 ec 08             	sub    esp,0x8
c0010dff:	6a 01                	push   0x1
c0010e01:	68 b9 16 02 c0       	push   0xc00216b9
c0010e06:	e8 6b 3e 00 00       	call   c0014c76 <Thr::loadDLL(char const*, bool)>
c0010e0b:	83 c4 10             	add    esp,0x10
c0010e0e:	83 ec 08             	sub    esp,0x8
c0010e11:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0010e18:	50                   	push   eax
c0010e19:	e8 89 40 00 00       	call   c0014ea7 <Thr::executeDLL(unsigned long, void*)>
c0010e1e:	83 c4 10             	add    esp,0x10
c0010e21:	8d 76 00             	lea    esi,[esi+0x0]
c0010e24:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0010e2c:	74 2a                	je     c0010e58 <ACPI::open(int, int, void*)+0x3ec>
c0010e2e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0010e36:	74 20                	je     c0010e58 <ACPI::open(int, int, void*)+0x3ec>
c0010e38:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0010e3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e41:	83 c0 08             	add    eax,0x8
c0010e44:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e46:	83 ec 0c             	sub    esp,0xc
c0010e49:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0010e50:	ff d0                	call   eax
c0010e52:	83 c4 10             	add    esp,0x10
c0010e55:	8d 76 00             	lea    esi,[esi+0x0]
c0010e58:	a1 e8 59 02 c0       	mov    eax,ds:0xc00259e8
c0010e5d:	83 ec 08             	sub    esp,0x8
c0010e60:	68 d6 16 02 c0       	push   0xc00216d6
c0010e65:	50                   	push   eax
c0010e66:	e8 75 f2 ff ff       	call   c00100e0 <findDataTable(unsigned char*, char*)>
c0010e6b:	83 c4 10             	add    esp,0x10
c0010e6e:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0010e75:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0010e7d:	74 19                	je     c0010e98 <ACPI::open(int, int, void*)+0x42c>
c0010e7f:	83 ec 08             	sub    esp,0x8
c0010e82:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0010e89:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0010e90:	e8 73 fb ff ff       	call   c0010a08 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0010e95:	83 c4 10             	add    esp,0x10
c0010e98:	b8 00 00 00 00       	mov    eax,0x0
c0010e9d:	81 c4 70 01 00 00    	add    esp,0x170
c0010ea3:	5b                   	pop    ebx
c0010ea4:	5e                   	pop    esi
c0010ea5:	5f                   	pop    edi
c0010ea6:	c3                   	ret    
c0010ea7:	90                   	nop

c0010ea8 <CPU::close(int, int, void*)>:
c0010ea8:	31 c0                	xor    eax,eax
c0010eaa:	c3                   	ret    
c0010eab:	90                   	nop

c0010eac <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0010eac:	60                   	pusha  
c0010ead:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010eb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010eb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010eb9:	9c                   	pushf  
c0010eba:	fa                   	cli    
c0010ebb:	0f 09                	wbinvd 
c0010ebd:	0f 30                	wrmsr  
c0010ebf:	9d                   	popf   
c0010ec0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010ec4:	89 02                	mov    DWORD PTR [edx],eax
c0010ec6:	61                   	popa   
c0010ec7:	c3                   	ret    

c0010ec8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0010ec8:	60                   	pusha  
c0010ec9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010ecd:	9c                   	pushf  
c0010ece:	fa                   	cli    
c0010ecf:	0f 09                	wbinvd 
c0010ed1:	31 c0                	xor    eax,eax
c0010ed3:	31 d2                	xor    edx,edx
c0010ed5:	0f 32                	rdmsr  
c0010ed7:	9d                   	popf   
c0010ed8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010edc:	89 02                	mov    DWORD PTR [edx],eax
c0010ede:	61                   	popa   
c0010edf:	c3                   	ret    

c0010ee0 <CPU::AMD_K6_writeback(int, int, int)>:
c0010ee0:	56                   	push   esi
c0010ee1:	53                   	push   ebx
c0010ee2:	83 ec 10             	sub    esp,0x10
c0010ee5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ee9:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0010eee:	75 5d                	jne    c0010f4d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010ef0:	83 f8 08             	cmp    eax,0x8
c0010ef3:	75 09                	jne    c0010efe <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0010ef5:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0010efa:	7e 13                	jle    c0010f0f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010efc:	eb 30                	jmp    c0010f2e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010efe:	83 f8 06             	cmp    eax,0x6
c0010f01:	7c 4a                	jl     c0010f4d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010f03:	83 f8 07             	cmp    eax,0x7
c0010f06:	7e 07                	jle    c0010f0f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010f08:	83 f8 09             	cmp    eax,0x9
c0010f0b:	74 21                	je     c0010f2e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010f0d:	eb 3e                	jmp    c0010f4d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010f0f:	89 e6                	mov    esi,esp
c0010f11:	8b 1d ec 31 02 c0    	mov    ebx,DWORD PTR ds:0xc00231ec
c0010f17:	56                   	push   esi
c0010f18:	c1 eb 15             	shr    ebx,0x15
c0010f1b:	68 82 00 00 c0       	push   0xc0000082
c0010f20:	83 e3 7e             	and    ebx,0x7e
c0010f23:	e8 a0 ff ff ff       	call   c0010ec8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010f28:	56                   	push   esi
c0010f29:	6a 00                	push   0x0
c0010f2b:	53                   	push   ebx
c0010f2c:	eb 12                	jmp    c0010f40 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0010f2e:	89 e3                	mov    ebx,esp
c0010f30:	53                   	push   ebx
c0010f31:	68 82 00 00 c0       	push   0xc0000082
c0010f36:	e8 8d ff ff ff       	call   c0010ec8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010f3b:	53                   	push   ebx
c0010f3c:	6a 00                	push   0x0
c0010f3e:	6a 00                	push   0x0
c0010f40:	68 82 00 00 c0       	push   0xc0000082
c0010f45:	e8 62 ff ff ff       	call   c0010eac <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0010f4a:	83 c4 18             	add    esp,0x18
c0010f4d:	83 c4 10             	add    esp,0x10
c0010f50:	5b                   	pop    ebx
c0010f51:	5e                   	pop    esi
c0010f52:	c3                   	ret    
c0010f53:	90                   	nop

c0010f54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0010f54:	55                   	push   ebp
c0010f55:	57                   	push   edi
c0010f56:	56                   	push   esi
c0010f57:	53                   	push   ebx
c0010f58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010f5c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010f60:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010f64:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0010f68:	39 05 90 2b 02 c0    	cmp    DWORD PTR ds:0xc0022b90,eax
c0010f6e:	75 23                	jne    c0010f93 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0010f70:	a1 4c 5c 02 c0       	mov    eax,ds:0xc0025c4c
c0010f75:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010f79:	89 06                	mov    DWORD PTR [esi],eax
c0010f7b:	a1 48 5c 02 c0       	mov    eax,ds:0xc0025c48
c0010f80:	89 07                	mov    DWORD PTR [edi],eax
c0010f82:	a1 44 5c 02 c0       	mov    eax,ds:0xc0025c44
c0010f87:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010f8a:	a1 40 5c 02 c0       	mov    eax,ds:0xc0025c40
c0010f8f:	89 02                	mov    DWORD PTR [edx],eax
c0010f91:	eb 3f                	jmp    c0010fd2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0010f93:	31 c9                	xor    ecx,ecx
c0010f95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010f99:	0f a2                	cpuid  
c0010f9b:	89 06                	mov    DWORD PTR [esi],eax
c0010f9d:	89 1f                	mov    DWORD PTR [edi],ebx
c0010f9f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010fa3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0010fa6:	89 10                	mov    DWORD PTR [eax],edx
c0010fa8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010fac:	a3 90 2b 02 c0       	mov    ds:0xc0022b90,eax
c0010fb1:	8b 06                	mov    eax,DWORD PTR [esi]
c0010fb3:	a3 4c 5c 02 c0       	mov    ds:0xc0025c4c,eax
c0010fb8:	8b 07                	mov    eax,DWORD PTR [edi]
c0010fba:	a3 48 5c 02 c0       	mov    ds:0xc0025c48,eax
c0010fbf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010fc2:	a3 44 5c 02 c0       	mov    ds:0xc0025c44,eax
c0010fc7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010fcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fcd:	a3 40 5c 02 c0       	mov    ds:0xc0025c40,eax
c0010fd2:	5b                   	pop    ebx
c0010fd3:	5e                   	pop    esi
c0010fd4:	5f                   	pop    edi
c0010fd5:	5d                   	pop    ebp
c0010fd6:	c3                   	ret    
c0010fd7:	90                   	nop

c0010fd8 <CPU::cpuidCheckEDX(unsigned int)>:
c0010fd8:	83 ec 10             	sub    esp,0x10
c0010fdb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010fdf:	50                   	push   eax
c0010fe0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010fe4:	50                   	push   eax
c0010fe5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010fe9:	50                   	push   eax
c0010fea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010fee:	50                   	push   eax
c0010fef:	6a 01                	push   0x1
c0010ff1:	e8 5e ff ff ff       	call   c0010f54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010ff6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010ffa:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0010ffe:	0f 95 c0             	setne  al
c0011001:	83 c4 24             	add    esp,0x24
c0011004:	c3                   	ret    
c0011005:	90                   	nop

c0011006 <CPU::cpuidCheckECX(unsigned int)>:
c0011006:	83 ec 10             	sub    esp,0x10
c0011009:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001100d:	50                   	push   eax
c001100e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011012:	50                   	push   eax
c0011013:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011017:	50                   	push   eax
c0011018:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001101c:	50                   	push   eax
c001101d:	6a 01                	push   0x1
c001101f:	e8 30 ff ff ff       	call   c0010f54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011024:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011028:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001102c:	0f 95 c0             	setne  al
c001102f:	83 c4 24             	add    esp,0x24
c0011032:	c3                   	ret    
c0011033:	90                   	nop

c0011034 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0011034:	83 ec 10             	sub    esp,0x10
c0011037:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001103b:	50                   	push   eax
c001103c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011040:	50                   	push   eax
c0011041:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011045:	50                   	push   eax
c0011046:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001104a:	50                   	push   eax
c001104b:	6a 07                	push   0x7
c001104d:	e8 02 ff ff ff       	call   c0010f54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011052:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011056:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001105a:	0f 95 c0             	setne  al
c001105d:	83 c4 24             	add    esp,0x24
c0011060:	c3                   	ret    
c0011061:	90                   	nop

c0011062 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0011062:	83 ec 10             	sub    esp,0x10
c0011065:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011069:	50                   	push   eax
c001106a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001106e:	50                   	push   eax
c001106f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011073:	50                   	push   eax
c0011074:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011078:	50                   	push   eax
c0011079:	6a 07                	push   0x7
c001107b:	e8 d4 fe ff ff       	call   c0010f54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011080:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011084:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0011088:	0f 95 c0             	setne  al
c001108b:	83 c4 24             	add    esp,0x24
c001108e:	c3                   	ret    
c001108f:	90                   	nop

c0011090 <CPU::CPU()>:
c0011090:	83 ec 0c             	sub    esp,0xc
c0011093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011097:	83 ec 08             	sub    esp,0x8
c001109a:	68 f9 17 02 c0       	push   0xc00217f9
c001109f:	50                   	push   eax
c00110a0:	e8 11 ca ff ff       	call   c000dab6 <Device::Device(char const*)>
c00110a5:	83 c4 10             	add    esp,0x10
c00110a8:	ba 80 18 02 c0       	mov    edx,0xc0021880
c00110ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b1:	89 10                	mov    DWORD PTR [eax],edx
c00110b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b7:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00110c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c5:	05 78 01 00 00       	add    eax,0x178
c00110ca:	83 ec 0c             	sub    esp,0xc
c00110cd:	50                   	push   eax
c00110ce:	e8 1f 7f ff ff       	call   c0008ff2 <GDT::GDT()>
c00110d3:	83 c4 10             	add    esp,0x10
c00110d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110da:	05 7c 09 00 00       	add    eax,0x97c
c00110df:	83 ec 0c             	sub    esp,0xc
c00110e2:	50                   	push   eax
c00110e3:	e8 84 81 ff ff       	call   c000926c <IDT::IDT()>
c00110e8:	83 c4 10             	add    esp,0x10
c00110eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ef:	05 7c 11 00 00       	add    eax,0x117c
c00110f4:	83 ec 0c             	sub    esp,0xc
c00110f7:	50                   	push   eax
c00110f8:	e8 df 9a ff ff       	call   c000abdc <TSS::TSS()>
c00110fd:	83 c4 10             	add    esp,0x10
c0011100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011104:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001110b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001110f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0011119:	90                   	nop
c001111a:	83 c4 0c             	add    esp,0xc
c001111d:	c3                   	ret    

c001111e <CPU::displayFeatures()>:
c001111e:	c3                   	ret    
c001111f:	90                   	nop

c0011120 <CPU::detectFeatures()>:
c0011120:	55                   	push   ebp
c0011121:	57                   	push   edi
c0011122:	56                   	push   esi
c0011123:	53                   	push   ebx
c0011124:	83 ec 30             	sub    esp,0x30
c0011127:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001112b:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0011135:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001113c:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0011142:	6a 0d                	push   0xd
c0011144:	6a 00                	push   0x0
c0011146:	55                   	push   ebp
c0011147:	e8 5c f3 fe ff       	call   c00004a8 <memset>
c001114c:	83 c4 10             	add    esp,0x10
c001114f:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c0011154:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c001115b:	0f 84 e8 05 00 00    	je     c0011749 <CPU::detectFeatures()+0x629>
c0011161:	83 ec 0c             	sub    esp,0xc
c0011164:	89 ef                	mov    edi,ebp
c0011166:	6a 10                	push   0x10
c0011168:	e8 6b fe ff ff       	call   c0010fd8 <CPU::cpuidCheckEDX(unsigned int)>
c001116d:	83 e0 01             	and    eax,0x1
c0011170:	8d 14 00             	lea    edx,[eax+eax*1]
c0011173:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0011179:	83 e0 fd             	and    eax,0xfffffffd
c001117c:	09 d0                	or     eax,edx
c001117e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0011184:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001118b:	e8 48 fe ff ff       	call   c0010fd8 <CPU::cpuidCheckEDX(unsigned int)>
c0011190:	83 e0 01             	and    eax,0x1
c0011193:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001119a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00111a0:	83 e0 fb             	and    eax,0xfffffffb
c00111a3:	09 d0                	or     eax,edx
c00111a5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00111ab:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00111b2:	e8 21 fe ff ff       	call   c0010fd8 <CPU::cpuidCheckEDX(unsigned int)>
c00111b7:	83 e0 01             	and    eax,0x1
c00111ba:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00111c1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00111c7:	83 e0 f7             	and    eax,0xfffffff7
c00111ca:	09 d0                	or     eax,edx
c00111cc:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00111d2:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00111d9:	e8 fa fd ff ff       	call   c0010fd8 <CPU::cpuidCheckEDX(unsigned int)>
c00111de:	83 e0 01             	and    eax,0x1
c00111e1:	c1 e0 04             	shl    eax,0x4
c00111e4:	88 c2                	mov    dl,al
c00111e6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00111ec:	83 e0 ef             	and    eax,0xffffffef
c00111ef:	09 d0                	or     eax,edx
c00111f1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00111f7:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00111fe:	e8 d5 fd ff ff       	call   c0010fd8 <CPU::cpuidCheckEDX(unsigned int)>
c0011203:	83 e0 01             	and    eax,0x1
c0011206:	c1 e0 05             	shl    eax,0x5
c0011209:	88 c2                	mov    dl,al
c001120b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0011211:	83 e0 df             	and    eax,0xffffffdf
c0011214:	09 d0                	or     eax,edx
c0011216:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001121c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0011223:	e8 b0 fd ff ff       	call   c0010fd8 <CPU::cpuidCheckEDX(unsigned int)>
c0011228:	83 e0 01             	and    eax,0x1
c001122b:	8d 14 00             	lea    edx,[eax+eax*1]
c001122e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0011234:	83 e0 fd             	and    eax,0xfffffffd
c0011237:	09 d0                	or     eax,edx
c0011239:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001123f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0011246:	e8 8d fd ff ff       	call   c0010fd8 <CPU::cpuidCheckEDX(unsigned int)>
c001124b:	83 e0 01             	and    eax,0x1
c001124e:	c1 e0 06             	shl    eax,0x6
c0011251:	88 c2                	mov    dl,al
c0011253:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0011259:	83 e0 bf             	and    eax,0xffffffbf
c001125c:	09 d0                	or     eax,edx
c001125e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0011264:	58                   	pop    eax
c0011265:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011269:	50                   	push   eax
c001126a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001126e:	50                   	push   eax
c001126f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0011273:	56                   	push   esi
c0011274:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011278:	50                   	push   eax
c0011279:	6a 00                	push   0x0
c001127b:	e8 d4 fc ff ff       	call   c0010f54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011280:	b8 04 00 00 00       	mov    eax,0x4
c0011285:	89 c1                	mov    ecx,eax
c0011287:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011289:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001128f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0011293:	89 c1                	mov    ecx,eax
c0011295:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011297:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001129d:	8d 74 24 38          	lea    esi,[esp+0x38]
c00112a1:	89 c1                	mov    ecx,eax
c00112a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00112a5:	83 c4 18             	add    esp,0x18
c00112a8:	68 08 17 02 c0       	push   0xc0021708
c00112ad:	55                   	push   ebp
c00112ae:	e8 3d f3 fe ff       	call   c00005f0 <strcmp>
c00112b3:	83 c4 10             	add    esp,0x10
c00112b6:	85 c0                	test   eax,eax
c00112b8:	75 0f                	jne    c00112c9 <CPU::detectFeatures()+0x1a9>
c00112ba:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00112c4:	e9 22 02 00 00       	jmp    c00114eb <CPU::detectFeatures()+0x3cb>
c00112c9:	50                   	push   eax
c00112ca:	50                   	push   eax
c00112cb:	68 15 17 02 c0       	push   0xc0021715
c00112d0:	55                   	push   ebp
c00112d1:	e8 1a f3 fe ff       	call   c00005f0 <strcmp>
c00112d6:	83 c4 10             	add    esp,0x10
c00112d9:	85 c0                	test   eax,eax
c00112db:	74 dd                	je     c00112ba <CPU::detectFeatures()+0x19a>
c00112dd:	50                   	push   eax
c00112de:	50                   	push   eax
c00112df:	68 22 17 02 c0       	push   0xc0021722
c00112e4:	55                   	push   ebp
c00112e5:	e8 06 f3 fe ff       	call   c00005f0 <strcmp>
c00112ea:	83 c4 10             	add    esp,0x10
c00112ed:	85 c0                	test   eax,eax
c00112ef:	74 2a                	je     c001131b <CPU::detectFeatures()+0x1fb>
c00112f1:	50                   	push   eax
c00112f2:	50                   	push   eax
c00112f3:	68 2f 17 02 c0       	push   0xc002172f
c00112f8:	55                   	push   ebp
c00112f9:	e8 f2 f2 fe ff       	call   c00005f0 <strcmp>
c00112fe:	83 c4 10             	add    esp,0x10
c0011301:	85 c0                	test   eax,eax
c0011303:	74 16                	je     c001131b <CPU::detectFeatures()+0x1fb>
c0011305:	50                   	push   eax
c0011306:	50                   	push   eax
c0011307:	68 3c 17 02 c0       	push   0xc002173c
c001130c:	55                   	push   ebp
c001130d:	e8 de f2 fe ff       	call   c00005f0 <strcmp>
c0011312:	83 c4 10             	add    esp,0x10
c0011315:	85 c0                	test   eax,eax
c0011317:	74 48                	je     c0011361 <CPU::detectFeatures()+0x241>
c0011319:	eb 0f                	jmp    c001132a <CPU::detectFeatures()+0x20a>
c001131b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0011325:	e9 c1 01 00 00       	jmp    c00114eb <CPU::detectFeatures()+0x3cb>
c001132a:	50                   	push   eax
c001132b:	50                   	push   eax
c001132c:	68 49 17 02 c0       	push   0xc0021749
c0011331:	55                   	push   ebp
c0011332:	e8 b9 f2 fe ff       	call   c00005f0 <strcmp>
c0011337:	83 c4 10             	add    esp,0x10
c001133a:	85 c0                	test   eax,eax
c001133c:	74 23                	je     c0011361 <CPU::detectFeatures()+0x241>
c001133e:	57                   	push   edi
c001133f:	57                   	push   edi
c0011340:	68 56 17 02 c0       	push   0xc0021756
c0011345:	55                   	push   ebp
c0011346:	e8 a5 f2 fe ff       	call   c00005f0 <strcmp>
c001134b:	83 c4 10             	add    esp,0x10
c001134e:	85 c0                	test   eax,eax
c0011350:	75 1e                	jne    c0011370 <CPU::detectFeatures()+0x250>
c0011352:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001135c:	e9 8a 01 00 00       	jmp    c00114eb <CPU::detectFeatures()+0x3cb>
c0011361:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001136b:	e9 7b 01 00 00       	jmp    c00114eb <CPU::detectFeatures()+0x3cb>
c0011370:	56                   	push   esi
c0011371:	56                   	push   esi
c0011372:	68 63 17 02 c0       	push   0xc0021763
c0011377:	55                   	push   ebp
c0011378:	e8 73 f2 fe ff       	call   c00005f0 <strcmp>
c001137d:	83 c4 10             	add    esp,0x10
c0011380:	85 c0                	test   eax,eax
c0011382:	75 0f                	jne    c0011393 <CPU::detectFeatures()+0x273>
c0011384:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001138e:	e9 58 01 00 00       	jmp    c00114eb <CPU::detectFeatures()+0x3cb>
c0011393:	51                   	push   ecx
c0011394:	51                   	push   ecx
c0011395:	68 22 17 02 c0       	push   0xc0021722
c001139a:	55                   	push   ebp
c001139b:	e8 50 f2 fe ff       	call   c00005f0 <strcmp>
c00113a0:	83 c4 10             	add    esp,0x10
c00113a3:	85 c0                	test   eax,eax
c00113a5:	75 0f                	jne    c00113b6 <CPU::detectFeatures()+0x296>
c00113a7:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00113b1:	e9 35 01 00 00       	jmp    c00114eb <CPU::detectFeatures()+0x3cb>
c00113b6:	52                   	push   edx
c00113b7:	52                   	push   edx
c00113b8:	68 70 17 02 c0       	push   0xc0021770
c00113bd:	55                   	push   ebp
c00113be:	e8 2d f2 fe ff       	call   c00005f0 <strcmp>
c00113c3:	83 c4 10             	add    esp,0x10
c00113c6:	85 c0                	test   eax,eax
c00113c8:	75 0f                	jne    c00113d9 <CPU::detectFeatures()+0x2b9>
c00113ca:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00113d4:	e9 12 01 00 00       	jmp    c00114eb <CPU::detectFeatures()+0x3cb>
c00113d9:	50                   	push   eax
c00113da:	50                   	push   eax
c00113db:	68 7d 17 02 c0       	push   0xc002177d
c00113e0:	55                   	push   ebp
c00113e1:	e8 0a f2 fe ff       	call   c00005f0 <strcmp>
c00113e6:	83 c4 10             	add    esp,0x10
c00113e9:	85 c0                	test   eax,eax
c00113eb:	75 0f                	jne    c00113fc <CPU::detectFeatures()+0x2dc>
c00113ed:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00113f7:	e9 ef 00 00 00       	jmp    c00114eb <CPU::detectFeatures()+0x3cb>
c00113fc:	50                   	push   eax
c00113fd:	50                   	push   eax
c00113fe:	68 8a 17 02 c0       	push   0xc002178a
c0011403:	55                   	push   ebp
c0011404:	e8 e7 f1 fe ff       	call   c00005f0 <strcmp>
c0011409:	83 c4 10             	add    esp,0x10
c001140c:	85 c0                	test   eax,eax
c001140e:	75 0f                	jne    c001141f <CPU::detectFeatures()+0x2ff>
c0011410:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001141a:	e9 cc 00 00 00       	jmp    c00114eb <CPU::detectFeatures()+0x3cb>
c001141f:	50                   	push   eax
c0011420:	50                   	push   eax
c0011421:	68 97 17 02 c0       	push   0xc0021797
c0011426:	55                   	push   ebp
c0011427:	e8 c4 f1 fe ff       	call   c00005f0 <strcmp>
c001142c:	83 c4 10             	add    esp,0x10
c001142f:	85 c0                	test   eax,eax
c0011431:	75 0f                	jne    c0011442 <CPU::detectFeatures()+0x322>
c0011433:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001143d:	e9 a9 00 00 00       	jmp    c00114eb <CPU::detectFeatures()+0x3cb>
c0011442:	50                   	push   eax
c0011443:	50                   	push   eax
c0011444:	68 a4 17 02 c0       	push   0xc00217a4
c0011449:	55                   	push   ebp
c001144a:	e8 a1 f1 fe ff       	call   c00005f0 <strcmp>
c001144f:	83 c4 10             	add    esp,0x10
c0011452:	85 c0                	test   eax,eax
c0011454:	75 0f                	jne    c0011465 <CPU::detectFeatures()+0x345>
c0011456:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0011460:	e9 86 00 00 00       	jmp    c00114eb <CPU::detectFeatures()+0x3cb>
c0011465:	50                   	push   eax
c0011466:	50                   	push   eax
c0011467:	68 b1 17 02 c0       	push   0xc00217b1
c001146c:	55                   	push   ebp
c001146d:	e8 7e f1 fe ff       	call   c00005f0 <strcmp>
c0011472:	83 c4 10             	add    esp,0x10
c0011475:	85 c0                	test   eax,eax
c0011477:	75 0c                	jne    c0011485 <CPU::detectFeatures()+0x365>
c0011479:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0011483:	eb 66                	jmp    c00114eb <CPU::detectFeatures()+0x3cb>
c0011485:	50                   	push   eax
c0011486:	50                   	push   eax
c0011487:	68 be 17 02 c0       	push   0xc00217be
c001148c:	55                   	push   ebp
c001148d:	e8 5e f1 fe ff       	call   c00005f0 <strcmp>
c0011492:	83 c4 10             	add    esp,0x10
c0011495:	85 c0                	test   eax,eax
c0011497:	75 0c                	jne    c00114a5 <CPU::detectFeatures()+0x385>
c0011499:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00114a3:	eb 46                	jmp    c00114eb <CPU::detectFeatures()+0x3cb>
c00114a5:	57                   	push   edi
c00114a6:	57                   	push   edi
c00114a7:	68 cb 17 02 c0       	push   0xc00217cb
c00114ac:	55                   	push   ebp
c00114ad:	e8 3e f1 fe ff       	call   c00005f0 <strcmp>
c00114b2:	83 c4 10             	add    esp,0x10
c00114b5:	85 c0                	test   eax,eax
c00114b7:	74 e0                	je     c0011499 <CPU::detectFeatures()+0x379>
c00114b9:	56                   	push   esi
c00114ba:	56                   	push   esi
c00114bb:	68 d8 17 02 c0       	push   0xc00217d8
c00114c0:	55                   	push   ebp
c00114c1:	e8 2a f1 fe ff       	call   c00005f0 <strcmp>
c00114c6:	83 c4 10             	add    esp,0x10
c00114c9:	85 c0                	test   eax,eax
c00114cb:	74 cc                	je     c0011499 <CPU::detectFeatures()+0x379>
c00114cd:	51                   	push   ecx
c00114ce:	51                   	push   ecx
c00114cf:	68 e5 17 02 c0       	push   0xc00217e5
c00114d4:	55                   	push   ebp
c00114d5:	e8 16 f1 fe ff       	call   c00005f0 <strcmp>
c00114da:	83 c4 10             	add    esp,0x10
c00114dd:	85 c0                	test   eax,eax
c00114df:	74 b8                	je     c0011499 <CPU::detectFeatures()+0x379>
c00114e1:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00114eb:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00114f0:	0f 86 be 00 00 00    	jbe    c00115b4 <CPU::detectFeatures()+0x494>
c00114f6:	83 ec 0c             	sub    esp,0xc
c00114f9:	68 80 00 00 00       	push   0x80
c00114fe:	e8 31 fb ff ff       	call   c0011034 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0011503:	83 e0 01             	and    eax,0x1
c0011506:	c1 e0 06             	shl    eax,0x6
c0011509:	88 c2                	mov    dl,al
c001150b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0011511:	83 e0 bf             	and    eax,0xffffffbf
c0011514:	09 d0                	or     eax,edx
c0011516:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001151c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0011523:	e8 0c fb ff ff       	call   c0011034 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0011528:	83 e0 01             	and    eax,0x1
c001152b:	c1 e0 04             	shl    eax,0x4
c001152e:	88 c2                	mov    dl,al
c0011530:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0011536:	83 e0 ef             	and    eax,0xffffffef
c0011539:	09 d0                	or     eax,edx
c001153b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0011541:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0011548:	e8 e7 fa ff ff       	call   c0011034 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001154d:	c1 e0 07             	shl    eax,0x7
c0011550:	88 c2                	mov    dl,al
c0011552:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0011558:	83 e0 7f             	and    eax,0x7f
c001155b:	09 d0                	or     eax,edx
c001155d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0011563:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001156a:	e8 f3 fa ff ff       	call   c0011062 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001156f:	83 e0 01             	and    eax,0x1
c0011572:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0011579:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001157f:	83 e0 f7             	and    eax,0xfffffff7
c0011582:	09 d0                	or     eax,edx
c0011584:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001158a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0011591:	e8 cc fa ff ff       	call   c0011062 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0011596:	83 c4 10             	add    esp,0x10
c0011599:	83 e0 01             	and    eax,0x1
c001159c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00115a3:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00115a9:	83 e0 fb             	and    eax,0xfffffffb
c00115ac:	09 d0                	or     eax,edx
c00115ae:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00115b4:	83 ec 0c             	sub    esp,0xc
c00115b7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00115bb:	50                   	push   eax
c00115bc:	8d 44 24 28          	lea    eax,[esp+0x28]
c00115c0:	50                   	push   eax
c00115c1:	8d 74 24 28          	lea    esi,[esp+0x28]
c00115c5:	56                   	push   esi
c00115c6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00115ca:	50                   	push   eax
c00115cb:	6a 01                	push   0x1
c00115cd:	e8 82 f9 ff ff       	call   c0010f54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00115d2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00115d6:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00115dc:	88 ca                	mov    dl,cl
c00115de:	83 e0 f0             	and    eax,0xfffffff0
c00115e1:	83 e2 0f             	and    edx,0xf
c00115e4:	09 d0                	or     eax,edx
c00115e6:	88 ca                	mov    dl,cl
c00115e8:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00115ee:	c0 ea 04             	shr    dl,0x4
c00115f1:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00115f5:	0f b6 c2             	movzx  eax,dl
c00115f8:	83 c4 20             	add    esp,0x20
c00115fb:	c1 e0 06             	shl    eax,0x6
c00115fe:	89 c7                	mov    edi,eax
c0011600:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0011606:	66 25 3f c0          	and    ax,0xc03f
c001160a:	09 f8                	or     eax,edi
c001160c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0011613:	89 c8                	mov    eax,ecx
c0011615:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c001161c:	c1 e8 08             	shr    eax,0x8
c001161f:	83 e5 3f             	and    ebp,0x3f
c0011622:	83 e0 0f             	and    eax,0xf
c0011625:	89 c7                	mov    edi,eax
c0011627:	c1 e7 06             	shl    edi,0x6
c001162a:	09 ef                	or     edi,ebp
c001162c:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0011633:	89 fa                	mov    edx,edi
c0011635:	83 e5 c0             	and    ebp,0xffffffc0
c0011638:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001163e:	88 c2                	mov    dl,al
c0011640:	c0 ea 02             	shr    dl,0x2
c0011643:	89 d7                	mov    edi,edx
c0011645:	09 ef                	or     edi,ebp
c0011647:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001164d:	89 fa                	mov    edx,edi
c001164f:	83 e5 cf             	and    ebp,0xffffffcf
c0011652:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0011658:	89 cf                	mov    edi,ecx
c001165a:	c1 ef 0c             	shr    edi,0xc
c001165d:	83 e7 03             	and    edi,0x3
c0011660:	c1 e7 04             	shl    edi,0x4
c0011663:	09 ef                	or     edi,ebp
c0011665:	3c 06                	cmp    al,0x6
c0011667:	89 fa                	mov    edx,edi
c0011669:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001166f:	74 04                	je     c0011675 <CPU::detectFeatures()+0x555>
c0011671:	3c 0f                	cmp    al,0xf
c0011673:	75 5c                	jne    c00116d1 <CPU::detectFeatures()+0x5b1>
c0011675:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011679:	89 cf                	mov    edi,ecx
c001167b:	c1 ef 10             	shr    edi,0x10
c001167e:	c1 e7 04             	shl    edi,0x4
c0011681:	09 fa                	or     edx,edi
c0011683:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0011689:	0f b6 d2             	movzx  edx,dl
c001168c:	66 81 e7 3f c0       	and    di,0xc03f
c0011691:	c1 e2 06             	shl    edx,0x6
c0011694:	09 fa                	or     edx,edi
c0011696:	3c 0f                	cmp    al,0xf
c0011698:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001169f:	75 30                	jne    c00116d1 <CPU::detectFeatures()+0x5b1>
c00116a1:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00116a7:	c1 e9 14             	shr    ecx,0x14
c00116aa:	83 e0 3f             	and    eax,0x3f
c00116ad:	83 c1 0f             	add    ecx,0xf
c00116b0:	88 ca                	mov    dl,cl
c00116b2:	c0 e9 02             	shr    cl,0x2
c00116b5:	c1 e2 06             	shl    edx,0x6
c00116b8:	09 d0                	or     eax,edx
c00116ba:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00116c0:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00116c6:	83 e0 c0             	and    eax,0xffffffc0
c00116c9:	09 c1                	or     ecx,eax
c00116cb:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00116d1:	83 ec 0c             	sub    esp,0xc
c00116d4:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c00116db:	8d 44 24 28          	lea    eax,[esp+0x28]
c00116df:	50                   	push   eax
c00116e0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00116e4:	55                   	push   ebp
c00116e5:	56                   	push   esi
c00116e6:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00116ea:	57                   	push   edi
c00116eb:	68 00 00 00 80       	push   0x80000000
c00116f0:	e8 5f f8 ff ff       	call   c0010f54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00116f5:	83 c4 20             	add    esp,0x20
c00116f8:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0011700:	76 22                	jbe    c0011724 <CPU::detectFeatures()+0x604>
c0011702:	83 ec 0c             	sub    esp,0xc
c0011705:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011709:	50                   	push   eax
c001170a:	55                   	push   ebp
c001170b:	56                   	push   esi
c001170c:	57                   	push   edi
c001170d:	68 01 00 00 80       	push   0x80000001
c0011712:	e8 3d f8 ff ff       	call   c0010f54 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011717:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0011721:	83 c4 20             	add    esp,0x20
c0011724:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001172a:	8d 50 ff             	lea    edx,[eax-0x1]
c001172d:	83 fa 03             	cmp    edx,0x3
c0011730:	76 7e                	jbe    c00117b0 <CPU::detectFeatures()+0x690>
c0011732:	83 f8 06             	cmp    eax,0x6
c0011735:	74 79                	je     c00117b0 <CPU::detectFeatures()+0x690>
c0011737:	52                   	push   edx
c0011738:	52                   	push   edx
c0011739:	68 f1 17 02 c0       	push   0xc00217f1
c001173e:	53                   	push   ebx
c001173f:	e8 64 c3 ff ff       	call   c000daa8 <Device::setName(char const*)>
c0011744:	83 c4 10             	add    esp,0x10
c0011747:	eb 67                	jmp    c00117b0 <CPU::detectFeatures()+0x690>
c0011749:	50                   	push   eax
c001174a:	50                   	push   eax
c001174b:	68 56 17 02 c0       	push   0xc0021756
c0011750:	55                   	push   ebp
c0011751:	e8 0e ee fe ff       	call   c0000564 <strcpy>
c0011756:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0011760:	e8 7e ea fe ff       	call   c00001e3 <is486>
c0011765:	83 c4 10             	add    esp,0x10
c0011768:	85 c0                	test   eax,eax
c001176a:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0011770:	74 1d                	je     c001178f <CPU::detectFeatures()+0x66f>
c0011772:	83 c8 07             	or     eax,0x7
c0011775:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001177b:	0f 20 c0             	mov    eax,cr0
c001177e:	83 e0 14             	and    eax,0x14
c0011781:	83 f8 04             	cmp    eax,0x4
c0011784:	75 0e                	jne    c0011794 <CPU::detectFeatures()+0x674>
c0011786:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c001178d:	eb 21                	jmp    c00117b0 <CPU::detectFeatures()+0x690>
c001178f:	83 e0 f8             	and    eax,0xfffffff8
c0011792:	eb e1                	jmp    c0011775 <CPU::detectFeatures()+0x655>
c0011794:	e8 25 ea fe ff       	call   c00001be <hasLegacyFPU>
c0011799:	83 e0 01             	and    eax,0x1
c001179c:	8d 14 00             	lea    edx,[eax+eax*1]
c001179f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00117a5:	83 e0 fd             	and    eax,0xfffffffd
c00117a8:	09 d0                	or     eax,edx
c00117aa:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00117b0:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c00117b7:	74 0e                	je     c00117c7 <CPU::detectFeatures()+0x6a7>
c00117b9:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c00117be:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c00117c5:	eb 20                	jmp    c00117e7 <CPU::detectFeatures()+0x6c7>
c00117c7:	e8 f2 e9 fe ff       	call   c00001be <hasLegacyFPU>
c00117cc:	83 e0 01             	and    eax,0x1
c00117cf:	8d 14 00             	lea    edx,[eax+eax*1]
c00117d2:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00117d8:	83 e0 fd             	and    eax,0xfffffffd
c00117db:	09 d0                	or     eax,edx
c00117dd:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00117e3:	a8 02                	test   al,0x2
c00117e5:	75 d2                	jne    c00117b9 <CPU::detectFeatures()+0x699>
c00117e7:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c00117ee:	83 c4 2c             	add    esp,0x2c
c00117f1:	5b                   	pop    ebx
c00117f2:	5e                   	pop    esi
c00117f3:	5f                   	pop    edi
c00117f4:	5d                   	pop    ebp
c00117f5:	c3                   	ret    

c00117f6 <CPU::setupSMEP()>:
c00117f6:	0f 20 e0             	mov    eax,cr4
c00117f9:	0d 00 00 10 00       	or     eax,0x100000
c00117fe:	0f 22 e0             	mov    cr4,eax
c0011801:	c3                   	ret    

c0011802 <CPU::setupUMIP()>:
c0011802:	0f 20 e0             	mov    eax,cr4
c0011805:	80 cc 08             	or     ah,0x8
c0011808:	0f 22 e0             	mov    cr4,eax
c001180b:	c3                   	ret    

c001180c <CPU::setupTSC()>:
c001180c:	0f 20 e0             	mov    eax,cr4
c001180f:	83 c8 04             	or     eax,0x4
c0011812:	0f 22 e0             	mov    cr4,eax
c0011815:	c3                   	ret    

c0011816 <CPU::setupLargePages()>:
c0011816:	0f 20 e0             	mov    eax,cr4
c0011819:	83 c8 10             	or     eax,0x10
c001181c:	0f 22 e0             	mov    cr4,eax
c001181f:	c3                   	ret    

c0011820 <CPU::setupPAT()>:
c0011820:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c0011825:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001182c:	74 2c                	je     c001185a <CPU::setupPAT()+0x3a>
c001182e:	53                   	push   ebx
c001182f:	83 ec 10             	sub    esp,0x10
c0011832:	68 77 02 00 00       	push   0x277
c0011837:	50                   	push   eax
c0011838:	e8 05 75 ff ff       	call   c0008d42 <Computer::rdmsr(unsigned int)>
c001183d:	83 e2 f8             	and    edx,0xfffffff8
c0011840:	83 ca 01             	or     edx,0x1
c0011843:	52                   	push   edx
c0011844:	50                   	push   eax
c0011845:	68 77 02 00 00       	push   0x277
c001184a:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c0011850:	e8 19 75 ff ff       	call   c0008d6e <Computer::wrmsr(unsigned int, unsigned long long)>
c0011855:	83 c4 28             	add    esp,0x28
c0011858:	5b                   	pop    ebx
c0011859:	c3                   	ret    
c001185a:	c3                   	ret    
c001185b:	90                   	nop

c001185c <CPU::setupMTRR()>:
c001185c:	c3                   	ret    
c001185d:	90                   	nop

c001185e <CPU::setupGlobalPages()>:
c001185e:	0f 20 e0             	mov    eax,cr4
c0011861:	0c 80                	or     al,0x80
c0011863:	0f 22 e0             	mov    cr4,eax
c0011866:	c3                   	ret    
c0011867:	90                   	nop

c0011868 <CPU::allowUsermodeDataAccess()>:
c0011868:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001186c:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0011873:	74 03                	je     c0011878 <CPU::allowUsermodeDataAccess()+0x10>
c0011875:	0f 01 cb             	stac   
c0011878:	c3                   	ret    
c0011879:	90                   	nop

c001187a <CPU::prohibitUsermodeDataAccess()>:
c001187a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001187e:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0011885:	74 03                	je     c001188a <CPU::prohibitUsermodeDataAccess()+0x10>
c0011887:	0f 01 ca             	clac   
c001188a:	c3                   	ret    
c001188b:	90                   	nop

c001188c <CPU::setupSMAP()>:
c001188c:	0f 20 e0             	mov    eax,cr4
c001188f:	0d 00 00 20 00       	or     eax,0x200000
c0011894:	0f 22 e0             	mov    cr4,eax
c0011897:	eb e1                	jmp    c001187a <CPU::prohibitUsermodeDataAccess()>
c0011899:	90                   	nop

c001189a <CPU::setupFeatures()>:
c001189a:	53                   	push   ebx
c001189b:	83 ec 08             	sub    esp,0x8
c001189e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118a2:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c00118a9:	74 18                	je     c00118c3 <CPU::setupFeatures()+0x29>
c00118ab:	83 ec 0c             	sub    esp,0xc
c00118ae:	68 fd 17 02 c0       	push   0xc00217fd
c00118b3:	e8 43 ac ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c00118b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118bb:	e8 42 ff ff ff       	call   c0011802 <CPU::setupUMIP()>
c00118c0:	83 c4 10             	add    esp,0x10
c00118c3:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c00118ca:	74 18                	je     c00118e4 <CPU::setupFeatures()+0x4a>
c00118cc:	83 ec 0c             	sub    esp,0xc
c00118cf:	68 07 18 02 c0       	push   0xc0021807
c00118d4:	e8 22 ac ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c00118d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118dc:	e8 2b ff ff ff       	call   c001180c <CPU::setupTSC()>
c00118e1:	83 c4 10             	add    esp,0x10
c00118e4:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c00118eb:	74 18                	je     c0011905 <CPU::setupFeatures()+0x6b>
c00118ed:	83 ec 0c             	sub    esp,0xc
c00118f0:	68 10 18 02 c0       	push   0xc0021810
c00118f5:	e8 01 ac ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c00118fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118fd:	e8 14 ff ff ff       	call   c0011816 <CPU::setupLargePages()>
c0011902:	83 c4 10             	add    esp,0x10
c0011905:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001190c:	74 18                	je     c0011926 <CPU::setupFeatures()+0x8c>
c001190e:	83 ec 0c             	sub    esp,0xc
c0011911:	68 19 18 02 c0       	push   0xc0021819
c0011916:	e8 e0 ab ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c001191b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001191e:	e8 3b ff ff ff       	call   c001185e <CPU::setupGlobalPages()>
c0011923:	83 c4 10             	add    esp,0x10
c0011926:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001192d:	74 18                	je     c0011947 <CPU::setupFeatures()+0xad>
c001192f:	83 ec 0c             	sub    esp,0xc
c0011932:	68 2b 18 02 c0       	push   0xc002182b
c0011937:	e8 bf ab ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c001193c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001193f:	e8 dc fe ff ff       	call   c0011820 <CPU::setupPAT()>
c0011944:	83 c4 10             	add    esp,0x10
c0011947:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001194e:	74 11                	je     c0011961 <CPU::setupFeatures()+0xc7>
c0011950:	c7 44 24 10 34 18 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021834
c0011958:	83 c4 08             	add    esp,0x8
c001195b:	5b                   	pop    ebx
c001195c:	e9 9a ab ff ff       	jmp    c000c4fb <Dbg::kprintf(char const*, ...)>
c0011961:	83 c4 08             	add    esp,0x8
c0011964:	5b                   	pop    ebx
c0011965:	c3                   	ret    

c0011966 <CPU::open(int, int, void*)>:
c0011966:	57                   	push   edi
c0011967:	56                   	push   esi
c0011968:	53                   	push   ebx
c0011969:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001196d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011971:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0011977:	83 ec 0c             	sub    esp,0xc
c001197a:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0011980:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0011986:	50                   	push   eax
c0011987:	e8 c8 76 ff ff       	call   c0009054 <GDT::setup()>
c001198c:	83 c4 0c             	add    esp,0xc
c001198f:	6a 00                	push   0x0
c0011991:	68 ef be ad de       	push   0xdeadbeef
c0011996:	57                   	push   edi
c0011997:	e8 84 92 ff ff       	call   c000ac20 <TSS::setup(unsigned long, unsigned long)>
c001199c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001199f:	e8 5c 92 ff ff       	call   c000ac00 <TSS::flush()>
c00119a4:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00119aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00119ad:	e8 30 79 ff ff       	call   c00092e2 <IDT::setup()>
c00119b2:	b8 00 04 00 00       	mov    eax,0x400
c00119b7:	0f 23 f8             	mov    db7,eax
c00119ba:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00119c4:	e8 6f 81 ff ff       	call   c0009b38 <Phys::allocatePage()>
c00119c9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00119cf:	89 30                	mov    DWORD PTR [eax],esi
c00119d1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00119d7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00119da:	58                   	pop    eax
c00119db:	5a                   	pop    edx
c00119dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00119e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00119e6:	e8 dd a1 ff ff       	call   c000bbc8 <VAS::setCPUSpecific(unsigned long)>
c00119eb:	c7 04 24 3e 18 02 c0 	mov    DWORD PTR [esp],0xc002183e
c00119f2:	e8 d4 7d ff ff       	call   c00097cb <Krnl::setBootMessage(char const*)>
c00119f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119fa:	e8 21 f7 ff ff       	call   c0011120 <CPU::detectFeatures()>
c00119ff:	c7 04 24 61 18 02 c0 	mov    DWORD PTR [esp],0xc0021861
c0011a06:	e8 c0 7d ff ff       	call   c00097cb <Krnl::setBootMessage(char const*)>
c0011a0b:	e8 82 69 00 00       	call   c0018392 <Hal::initialise()>
c0011a10:	a1 e0 31 02 c0       	mov    eax,ds:0xc00231e0
c0011a15:	83 e0 10             	and    eax,0x10
c0011a18:	83 f8 01             	cmp    eax,0x1
c0011a1b:	19 c0                	sbb    eax,eax
c0011a1d:	83 e0 46             	and    eax,0x46
c0011a20:	83 c0 1e             	add    eax,0x1e
c0011a23:	89 04 24             	mov    DWORD PTR [esp],eax
c0011a26:	e8 26 d7 ff ff       	call   c000f151 <setupTimer(int)>
c0011a2b:	83 c4 10             	add    esp,0x10
c0011a2e:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0011a34:	f6 05 e0 31 02 c0 20 	test   BYTE PTR ds:0xc00231e0,0x20
c0011a3b:	74 0c                	je     c0011a49 <CPU::open(int, int, void*)+0xe3>
c0011a3d:	83 ec 0c             	sub    esp,0xc
c0011a40:	53                   	push   ebx
c0011a41:	e8 54 fe ff ff       	call   c001189a <CPU::setupFeatures()>
c0011a46:	83 c4 10             	add    esp,0x10
c0011a49:	5b                   	pop    ebx
c0011a4a:	31 c0                	xor    eax,eax
c0011a4c:	5e                   	pop    esi
c0011a4d:	5f                   	pop    edi
c0011a4e:	c3                   	ret    
c0011a4f:	90                   	nop

c0011a50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0011a50:	57                   	push   edi
c0011a51:	56                   	push   esi
c0011a52:	53                   	push   ebx
c0011a53:	51                   	push   ecx
c0011a54:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011a58:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0011a5b:	0f 02 c0             	lar    eax,ax
c0011a5e:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0011a61:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011a65:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0011a68:	88 ca                	mov    dl,cl
c0011a6a:	c0 ea 06             	shr    dl,0x6
c0011a6d:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0011a71:	89 ca                	mov    edx,ecx
c0011a73:	66 c1 ea 03          	shr    dx,0x3
c0011a77:	83 e2 07             	and    edx,0x7
c0011a7a:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0011a7f:	88 17                	mov    BYTE PTR [edi],dl
c0011a81:	0f 84 a6 01 00 00    	je     c0011c2d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0011a87:	83 e1 07             	and    ecx,0x7
c0011a8a:	80 f9 04             	cmp    cl,0x4
c0011a8d:	0f 84 98 00 00 00    	je     c0011b2b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0011a93:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0011a98:	0f 95 c0             	setne  al
c0011a9b:	80 f9 05             	cmp    cl,0x5
c0011a9e:	0f 95 c2             	setne  dl
c0011aa1:	08 c2                	or     dl,al
c0011aa3:	74 79                	je     c0011b1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0011aa5:	84 c9                	test   cl,cl
c0011aa7:	75 05                	jne    c0011aae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0011aa9:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0011aac:	eb 3c                	jmp    c0011aea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0011aae:	80 f9 01             	cmp    cl,0x1
c0011ab1:	75 05                	jne    c0011ab8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0011ab3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011ab6:	eb 32                	jmp    c0011aea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0011ab8:	80 f9 02             	cmp    cl,0x2
c0011abb:	75 05                	jne    c0011ac2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0011abd:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011ac0:	eb 28                	jmp    c0011aea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0011ac2:	31 c0                	xor    eax,eax
c0011ac4:	80 f9 03             	cmp    cl,0x3
c0011ac7:	75 05                	jne    c0011ace <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0011ac9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011acc:	eb 1c                	jmp    c0011aea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0011ace:	80 f9 05             	cmp    cl,0x5
c0011ad1:	75 05                	jne    c0011ad8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0011ad3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0011ad6:	eb 12                	jmp    c0011aea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0011ad8:	80 f9 06             	cmp    cl,0x6
c0011adb:	75 05                	jne    c0011ae2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0011add:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011ae0:	eb 08                	jmp    c0011aea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0011ae2:	80 f9 07             	cmp    cl,0x7
c0011ae5:	75 03                	jne    c0011aea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0011ae7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0011aea:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0011aef:	75 10                	jne    c0011b01 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0011af1:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0011af5:	b9 03 00 00 00       	mov    ecx,0x3
c0011afa:	01 d0                	add    eax,edx
c0011afc:	e9 37 01 00 00       	jmp    c0011c38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0011b01:	b9 02 00 00 00       	mov    ecx,0x2
c0011b06:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0011b0b:	0f 85 27 01 00 00    	jne    c0011c38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0011b11:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0011b14:	b9 06 00 00 00       	mov    ecx,0x6
c0011b19:	e9 1a 01 00 00       	jmp    c0011c38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0011b1e:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0011b21:	b9 06 00 00 00       	mov    ecx,0x6
c0011b26:	e9 0f 01 00 00       	jmp    c0011c3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0011b2b:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0011b2e:	88 ca                	mov    dl,cl
c0011b30:	c0 ea 06             	shr    dl,0x6
c0011b33:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0011b37:	89 ca                	mov    edx,ecx
c0011b39:	66 c1 ea 03          	shr    dx,0x3
c0011b3d:	83 e2 07             	and    edx,0x7
c0011b40:	80 e1 07             	and    cl,0x7
c0011b43:	75 05                	jne    c0011b4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0011b45:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0011b48:	eb 4c                	jmp    c0011b96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0011b4a:	80 f9 01             	cmp    cl,0x1
c0011b4d:	75 05                	jne    c0011b54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0011b4f:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0011b52:	eb 42                	jmp    c0011b96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0011b54:	80 f9 02             	cmp    cl,0x2
c0011b57:	75 05                	jne    c0011b5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0011b59:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011b5c:	eb 38                	jmp    c0011b96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0011b5e:	80 f9 03             	cmp    cl,0x3
c0011b61:	75 05                	jne    c0011b68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0011b63:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0011b66:	eb 2e                	jmp    c0011b96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0011b68:	80 f9 04             	cmp    cl,0x4
c0011b6b:	75 12                	jne    c0011b7f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0011b6d:	f6 c4 60             	test   ah,0x60
c0011b70:	75 08                	jne    c0011b7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0011b72:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0011b75:	8d 78 14             	lea    edi,[eax+0x14]
c0011b78:	eb 1c                	jmp    c0011b96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0011b7a:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0011b7d:	eb 17                	jmp    c0011b96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0011b7f:	80 f9 05             	cmp    cl,0x5
c0011b82:	75 05                	jne    c0011b89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0011b84:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0011b87:	eb 0d                	jmp    c0011b96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0011b89:	80 f9 06             	cmp    cl,0x6
c0011b8c:	75 05                	jne    c0011b93 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0011b8e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0011b91:	eb 03                	jmp    c0011b96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0011b93:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0011b96:	84 d2                	test   dl,dl
c0011b98:	75 05                	jne    c0011b9f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0011b9a:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0011b9d:	eb 3c                	jmp    c0011bdb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0011b9f:	80 fa 01             	cmp    dl,0x1
c0011ba2:	75 05                	jne    c0011ba9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0011ba4:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011ba7:	eb 32                	jmp    c0011bdb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0011ba9:	80 fa 02             	cmp    dl,0x2
c0011bac:	75 05                	jne    c0011bb3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0011bae:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011bb1:	eb 28                	jmp    c0011bdb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0011bb3:	80 fa 03             	cmp    dl,0x3
c0011bb6:	75 05                	jne    c0011bbd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0011bb8:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011bbb:	eb 1e                	jmp    c0011bdb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0011bbd:	31 c0                	xor    eax,eax
c0011bbf:	80 fa 04             	cmp    dl,0x4
c0011bc2:	74 17                	je     c0011bdb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0011bc4:	80 fa 05             	cmp    dl,0x5
c0011bc7:	75 05                	jne    c0011bce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0011bc9:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0011bcc:	eb 0d                	jmp    c0011bdb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0011bce:	80 fa 06             	cmp    dl,0x6
c0011bd1:	75 05                	jne    c0011bd8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0011bd3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011bd6:	eb 03                	jmp    c0011bdb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0011bd8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0011bdb:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0011be0:	0f 94 c2             	sete   dl
c0011be3:	80 f9 05             	cmp    cl,0x5
c0011be6:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0011bea:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0011bef:	d3 e0                	shl    eax,cl
c0011bf1:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0011bf5:	74 0a                	je     c0011c01 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0011bf7:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0011bfa:	b9 07 00 00 00       	mov    ecx,0x7
c0011bff:	eb 37                	jmp    c0011c38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0011c01:	01 f8                	add    eax,edi
c0011c03:	b9 03 00 00 00       	mov    ecx,0x3
c0011c08:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0011c0d:	74 2b                	je     c0011c3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0011c0f:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0011c14:	75 0d                	jne    c0011c23 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0011c16:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0011c1a:	01 c8                	add    eax,ecx
c0011c1c:	b9 04 00 00 00       	mov    ecx,0x4
c0011c21:	eb 17                	jmp    c0011c3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0011c23:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0011c26:	b9 07 00 00 00       	mov    ecx,0x7
c0011c2b:	eb 0d                	jmp    c0011c3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0011c2d:	b9 02 00 00 00       	mov    ecx,0x2
c0011c32:	b2 01                	mov    dl,0x1
c0011c34:	31 c0                	xor    eax,eax
c0011c36:	eb 02                	jmp    c0011c3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0011c38:	31 d2                	xor    edx,edx
c0011c3a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011c3e:	89 0b                	mov    DWORD PTR [ebx],ecx
c0011c40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0011c44:	88 11                	mov    BYTE PTR [ecx],dl
c0011c46:	5a                   	pop    edx
c0011c47:	5b                   	pop    ebx
c0011c48:	5e                   	pop    esi
c0011c49:	5f                   	pop    edi
c0011c4a:	c3                   	ret    

c0011c4b <Krnl::smpEntry()>:
c0011c4b:	eb fe                	jmp    c0011c4b <Krnl::smpEntry()>

c0011c4d <Krnl::startCPU(int)>:
c0011c4d:	c3                   	ret    

c0011c4e <Krnl::startCPUs()>:
c0011c4e:	c3                   	ret    
c0011c4f:	90                   	nop

c0011c50 <EnvVarContainer::getEnv(char const*)>:
c0011c50:	57                   	push   edi
c0011c51:	56                   	push   esi
c0011c52:	53                   	push   ebx
c0011c53:	31 db                	xor    ebx,ebx
c0011c55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c59:	39 1e                	cmp    DWORD PTR [esi],ebx
c0011c5b:	7e 2b                	jle    c0011c88 <EnvVarContainer::getEnv(char const*)+0x38>
c0011c5d:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0011c64:	50                   	push   eax
c0011c65:	50                   	push   eax
c0011c66:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011c69:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0011c6c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011c70:	e8 7b e9 fe ff       	call   c00005f0 <strcmp>
c0011c75:	83 c4 10             	add    esp,0x10
c0011c78:	85 c0                	test   eax,eax
c0011c7a:	75 09                	jne    c0011c85 <EnvVarContainer::getEnv(char const*)+0x35>
c0011c7c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011c7f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0011c83:	eb 05                	jmp    c0011c8a <EnvVarContainer::getEnv(char const*)+0x3a>
c0011c85:	43                   	inc    ebx
c0011c86:	eb d1                	jmp    c0011c59 <EnvVarContainer::getEnv(char const*)+0x9>
c0011c88:	31 c0                	xor    eax,eax
c0011c8a:	5b                   	pop    ebx
c0011c8b:	5e                   	pop    esi
c0011c8c:	5f                   	pop    edi
c0011c8d:	c3                   	ret    

c0011c8e <EnvVarContainer::setEnv(char const*, char const*)>:
c0011c8e:	55                   	push   ebp
c0011c8f:	57                   	push   edi
c0011c90:	56                   	push   esi
c0011c91:	53                   	push   ebx
c0011c92:	83 ec 28             	sub    esp,0x28
c0011c95:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011c99:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0011c9d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0011ca1:	56                   	push   esi
c0011ca2:	e8 1d e8 fe ff       	call   c00004c4 <strlen>
c0011ca7:	40                   	inc    eax
c0011ca8:	89 04 24             	mov    DWORD PTR [esp],eax
c0011cab:	e8 c1 7a ff ff       	call   c0009771 <malloc>
c0011cb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011cb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011cb7:	e8 08 e8 fe ff       	call   c00004c4 <strlen>
c0011cbc:	40                   	inc    eax
c0011cbd:	89 04 24             	mov    DWORD PTR [esp],eax
c0011cc0:	e8 ac 7a ff ff       	call   c0009771 <malloc>
c0011cc5:	89 34 24             	mov    DWORD PTR [esp],esi
c0011cc8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011ccc:	e8 f3 e7 fe ff       	call   c00004c4 <strlen>
c0011cd1:	83 c4 0c             	add    esp,0xc
c0011cd4:	40                   	inc    eax
c0011cd5:	50                   	push   eax
c0011cd6:	6a 00                	push   0x0
c0011cd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cdc:	e8 c7 e7 fe ff       	call   c00004a8 <memset>
c0011ce1:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ce4:	e8 db e7 fe ff       	call   c00004c4 <strlen>
c0011ce9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011ced:	8d 48 01             	lea    ecx,[eax+0x1]
c0011cf0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011cf2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011cf5:	89 de                	mov    esi,ebx
c0011cf7:	e8 c8 e7 fe ff       	call   c00004c4 <strlen>
c0011cfc:	83 c4 0c             	add    esp,0xc
c0011cff:	40                   	inc    eax
c0011d00:	50                   	push   eax
c0011d01:	6a 00                	push   0x0
c0011d03:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011d07:	e8 9c e7 fe ff       	call   c00004a8 <memset>
c0011d0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011d0f:	e8 b0 e7 fe ff       	call   c00004c4 <strlen>
c0011d14:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0011d18:	8d 48 01             	lea    ecx,[eax+0x1]
c0011d1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011d1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011d20:	40                   	inc    eax
c0011d21:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011d24:	c1 e0 03             	shl    eax,0x3
c0011d27:	5a                   	pop    edx
c0011d28:	59                   	pop    ecx
c0011d29:	50                   	push   eax
c0011d2a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0011d2d:	e8 2b 7a ff ff       	call   c000975d <realloc>
c0011d32:	8d 74 24 18          	lea    esi,[esp+0x18]
c0011d36:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011d39:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011d3c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011d40:	b9 08 00 00 00       	mov    ecx,0x8
c0011d45:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011d47:	83 c4 2c             	add    esp,0x2c
c0011d4a:	5b                   	pop    ebx
c0011d4b:	5e                   	pop    esi
c0011d4c:	5f                   	pop    edi
c0011d4d:	5d                   	pop    ebp
c0011d4e:	c3                   	ret    
c0011d4f:	90                   	nop

c0011d50 <EnvVarContainer::deleteEnv(char const*)>:
c0011d50:	c3                   	ret    
c0011d51:	90                   	nop

c0011d52 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0011d52:	55                   	push   ebp
c0011d53:	57                   	push   edi
c0011d54:	56                   	push   esi
c0011d55:	53                   	push   ebx
c0011d56:	81 ec 38 01 00 00    	sub    esp,0x138
c0011d5c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0011d63:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0011d6a:	68 14 01 00 00       	push   0x114
c0011d6f:	e8 fd 79 ff ff       	call   c0009771 <malloc>
c0011d74:	83 c4 0c             	add    esp,0xc
c0011d77:	89 c3                	mov    ebx,eax
c0011d79:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011d7c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0011d83:	50                   	push   eax
c0011d84:	e8 dd ac ff ff       	call   c000ca66 <File::File(char const*, Process*)>
c0011d89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011d8c:	e8 fd af ff ff       	call   c000cd8e <File::exists()>
c0011d91:	83 c4 10             	add    esp,0x10
c0011d94:	84 c0                	test   al,al
c0011d96:	75 31                	jne    c0011dc9 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0011d98:	50                   	push   eax
c0011d99:	50                   	push   eax
c0011d9a:	6a 12                	push   0x12
c0011d9c:	53                   	push   ebx
c0011d9d:	e8 7e ad ff ff       	call   c000cb20 <File::open(FileOpenMode)>
c0011da2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011da4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0011da7:	89 34 24             	mov    DWORD PTR [esp],esi
c0011daa:	e8 15 e7 fe ff       	call   c00004c4 <strlen>
c0011daf:	5a                   	pop    edx
c0011db0:	31 d2                	xor    edx,edx
c0011db2:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0011db6:	51                   	push   ecx
c0011db7:	56                   	push   esi
c0011db8:	52                   	push   edx
c0011db9:	50                   	push   eax
c0011dba:	53                   	push   ebx
c0011dbb:	ff d7                	call   edi
c0011dbd:	83 c4 14             	add    esp,0x14
c0011dc0:	53                   	push   ebx
c0011dc1:	e8 b8 ad ff ff       	call   c000cb7e <File::close()>
c0011dc6:	83 c4 10             	add    esp,0x10
c0011dc9:	56                   	push   esi
c0011dca:	31 f6                	xor    esi,esi
c0011dcc:	68 00 01 00 00       	push   0x100
c0011dd1:	6a 00                	push   0x0
c0011dd3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011dd7:	50                   	push   eax
c0011dd8:	e8 cb e6 fe ff       	call   c00004a8 <memset>
c0011ddd:	5f                   	pop    edi
c0011dde:	58                   	pop    eax
c0011ddf:	6a 01                	push   0x1
c0011de1:	53                   	push   ebx
c0011de2:	e8 39 ad ff ff       	call   c000cb20 <File::open(FileOpenMode)>
c0011de7:	83 c4 10             	add    esp,0x10
c0011dea:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011df2:	83 ec 0c             	sub    esp,0xc
c0011df5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011df7:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0011dfb:	51                   	push   ecx
c0011dfc:	8d 54 24 23          	lea    edx,[esp+0x23]
c0011e00:	52                   	push   edx
c0011e01:	6a 00                	push   0x0
c0011e03:	6a 01                	push   0x1
c0011e05:	53                   	push   ebx
c0011e06:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011e09:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0011e0d:	83 c4 20             	add    esp,0x20
c0011e10:	3c 0d                	cmp    al,0xd
c0011e12:	0f 84 09 01 00 00    	je     c0011f21 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0011e18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0011e1d:	0f 84 ef 00 00 00    	je     c0011f12 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0011e23:	3c 0a                	cmp    al,0xa
c0011e25:	74 13                	je     c0011e3a <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0011e27:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011e2c:	74 0c                	je     c0011e3a <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0011e2e:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011e34:	0f 8e d8 00 00 00    	jle    c0011f12 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0011e3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011e3e:	83 ec 0c             	sub    esp,0xc
c0011e41:	8d 78 01             	lea    edi,[eax+0x1]
c0011e44:	57                   	push   edi
c0011e45:	e8 27 79 ff ff       	call   c0009771 <malloc>
c0011e4a:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0011e4e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011e52:	8d 56 04             	lea    edx,[esi+0x4]
c0011e55:	89 14 24             	mov    DWORD PTR [esp],edx
c0011e58:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0011e5c:	e8 10 79 ff ff       	call   c0009771 <malloc>
c0011e61:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011e65:	83 c4 0c             	add    esp,0xc
c0011e68:	57                   	push   edi
c0011e69:	6a 00                	push   0x0
c0011e6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011e6f:	e8 34 e6 fe ff       	call   c00004a8 <memset>
c0011e74:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011e78:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011e7c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e80:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011e82:	83 c4 0c             	add    esp,0xc
c0011e85:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011e89:	52                   	push   edx
c0011e8a:	6a 00                	push   0x0
c0011e8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011e90:	e8 13 e6 fe ff       	call   c00004a8 <memset>
c0011e95:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011e99:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0011e9d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ea0:	e8 1f e6 fe ff       	call   c00004c4 <strlen>
c0011ea5:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0011ea9:	89 c1                	mov    ecx,eax
c0011eab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011ead:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011eb0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0011eb3:	40                   	inc    eax
c0011eb4:	83 c4 10             	add    esp,0x10
c0011eb7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011eba:	85 d2                	test   edx,edx
c0011ebc:	75 0c                	jne    c0011eca <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0011ebe:	83 ec 0c             	sub    esp,0xc
c0011ec1:	6a 08                	push   0x8
c0011ec3:	e8 a9 78 ff ff       	call   c0009771 <malloc>
c0011ec8:	eb 0c                	jmp    c0011ed6 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0011eca:	c1 e0 03             	shl    eax,0x3
c0011ecd:	51                   	push   ecx
c0011ece:	51                   	push   ecx
c0011ecf:	50                   	push   eax
c0011ed0:	52                   	push   edx
c0011ed1:	e8 87 78 ff ff       	call   c000975d <realloc>
c0011ed6:	83 c4 10             	add    esp,0x10
c0011ed9:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011edc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011edf:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0011ee2:	8d 74 24 18          	lea    esi,[esp+0x18]
c0011ee6:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011eea:	b9 08 00 00 00       	mov    ecx,0x8
c0011eef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011ef1:	31 f6                	xor    esi,esi
c0011ef3:	50                   	push   eax
c0011ef4:	68 00 01 00 00       	push   0x100
c0011ef9:	6a 00                	push   0x0
c0011efb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011eff:	50                   	push   eax
c0011f00:	e8 a3 e5 fe ff       	call   c00004a8 <memset>
c0011f05:	83 c4 10             	add    esp,0x10
c0011f08:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011f10:	eb 0f                	jmp    c0011f21 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0011f12:	3c 3d                	cmp    al,0x3d
c0011f14:	74 07                	je     c0011f1d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0011f16:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0011f1a:	46                   	inc    esi
c0011f1b:	eb 04                	jmp    c0011f21 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0011f1d:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0011f21:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011f26:	0f 85 c6 fe ff ff    	jne    c0011df2 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0011f2c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011f32:	5b                   	pop    ebx
c0011f33:	5e                   	pop    esi
c0011f34:	5f                   	pop    edi
c0011f35:	5d                   	pop    ebp
c0011f36:	c3                   	ret    
c0011f37:	90                   	nop

c0011f38 <EnvVarContainer::__loadSystem()>:
c0011f38:	83 ec 10             	sub    esp,0x10
c0011f3b:	68 a0 2b 02 c0       	push   0xc0022ba0
c0011f40:	68 a4 18 02 c0       	push   0xc00218a4
c0011f45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f49:	e8 04 fe ff ff       	call   c0011d52 <EnvVarContainer::loadFrom(char const*, char const*)>
c0011f4e:	83 c4 1c             	add    esp,0x1c
c0011f51:	c3                   	ret    

c0011f52 <EnvVarContainer::__loadUser()>:
c0011f52:	c3                   	ret    
c0011f53:	90                   	nop

c0011f54 <EnvVarContainer::EnvVarContainer(Process*)>:
c0011f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f58:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011f5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011f66:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011f69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f6d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f74:	90                   	nop
c0011f75:	c3                   	ret    

c0011f76 <EnvVarContainer::~EnvVarContainer()>:
c0011f76:	83 ec 0c             	sub    esp,0xc
c0011f79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011f80:	85 c0                	test   eax,eax
c0011f82:	74 1d                	je     c0011fa1 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f88:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f8a:	85 c0                	test   eax,eax
c0011f8c:	74 13                	je     c0011fa1 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011f8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011f95:	83 ec 0c             	sub    esp,0xc
c0011f98:	50                   	push   eax
c0011f99:	e8 e3 77 ff ff       	call   c0009781 <free>
c0011f9e:	83 c4 10             	add    esp,0x10
c0011fa1:	90                   	nop
c0011fa2:	83 c4 0c             	add    esp,0xc
c0011fa5:	c3                   	ret    

c0011fa6 <Krnl::getEnv(Process*, char const*)>:
c0011fa6:	53                   	push   ebx
c0011fa7:	83 ec 08             	sub    esp,0x8
c0011faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011fb2:	39 05 d0 66 02 c0    	cmp    DWORD PTR ds:0xc00266d0,eax
c0011fb8:	74 04                	je     c0011fbe <Krnl::getEnv(Process*, char const*)+0x18>
c0011fba:	85 c0                	test   eax,eax
c0011fbc:	75 0b                	jne    c0011fc9 <Krnl::getEnv(Process*, char const*)+0x23>
c0011fbe:	a1 54 5c 02 c0       	mov    eax,ds:0xc0025c54
c0011fc3:	85 c0                	test   eax,eax
c0011fc5:	75 19                	jne    c0011fe0 <Krnl::getEnv(Process*, char const*)+0x3a>
c0011fc7:	eb 27                	jmp    c0011ff0 <Krnl::getEnv(Process*, char const*)+0x4a>
c0011fc9:	52                   	push   edx
c0011fca:	52                   	push   edx
c0011fcb:	53                   	push   ebx
c0011fcc:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0011fd2:	e8 79 fc ff ff       	call   c0011c50 <EnvVarContainer::getEnv(char const*)>
c0011fd7:	83 c4 10             	add    esp,0x10
c0011fda:	85 c0                	test   eax,eax
c0011fdc:	75 28                	jne    c0012006 <Krnl::getEnv(Process*, char const*)+0x60>
c0011fde:	eb de                	jmp    c0011fbe <Krnl::getEnv(Process*, char const*)+0x18>
c0011fe0:	52                   	push   edx
c0011fe1:	52                   	push   edx
c0011fe2:	53                   	push   ebx
c0011fe3:	50                   	push   eax
c0011fe4:	e8 67 fc ff ff       	call   c0011c50 <EnvVarContainer::getEnv(char const*)>
c0011fe9:	83 c4 10             	add    esp,0x10
c0011fec:	85 c0                	test   eax,eax
c0011fee:	75 16                	jne    c0012006 <Krnl::getEnv(Process*, char const*)+0x60>
c0011ff0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011ff4:	a1 58 5c 02 c0       	mov    eax,ds:0xc0025c58
c0011ff9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011ffd:	83 c4 08             	add    esp,0x8
c0012000:	5b                   	pop    ebx
c0012001:	e9 4a fc ff ff       	jmp    c0011c50 <EnvVarContainer::getEnv(char const*)>
c0012006:	83 c4 08             	add    esp,0x8
c0012009:	5b                   	pop    ebx
c001200a:	c3                   	ret    

c001200b <Krnl::setEnvSystem(char const*, char const*)>:
c001200b:	83 ec 10             	sub    esp,0x10
c001200e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012012:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012016:	ff 35 58 5c 02 c0    	push   DWORD PTR ds:0xc0025c58
c001201c:	e8 6d fc ff ff       	call   c0011c8e <EnvVarContainer::setEnv(char const*, char const*)>
c0012021:	83 c4 1c             	add    esp,0x1c
c0012024:	c3                   	ret    

c0012025 <Krnl::setEnvUser(char const*, char const*)>:
c0012025:	a1 54 5c 02 c0       	mov    eax,ds:0xc0025c54
c001202a:	85 c0                	test   eax,eax
c001202c:	74 15                	je     c0012043 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001202e:	83 ec 10             	sub    esp,0x10
c0012031:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012035:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012039:	50                   	push   eax
c001203a:	e8 4f fc ff ff       	call   c0011c8e <EnvVarContainer::setEnv(char const*, char const*)>
c001203f:	83 c4 1c             	add    esp,0x1c
c0012042:	c3                   	ret    
c0012043:	c3                   	ret    

c0012044 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0012044:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012048:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001204e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012052:	e9 37 fc ff ff       	jmp    c0011c8e <EnvVarContainer::setEnv(char const*, char const*)>

c0012057 <Krnl::deleteEnvSystem(char const*)>:
c0012057:	c3                   	ret    

c0012058 <Krnl::deleteEnvUser(char const*)>:
c0012058:	c3                   	ret    

c0012059 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0012059:	c3                   	ret    

c001205a <Krnl::newProcessEnv(Process*)>:
c001205a:	83 ec 28             	sub    esp,0x28
c001205d:	6a 0c                	push   0xc
c001205f:	e8 0d 77 ff ff       	call   c0009771 <malloc>
c0012064:	5a                   	pop    edx
c0012065:	59                   	pop    ecx
c0012066:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001206a:	50                   	push   eax
c001206b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001206f:	e8 e0 fe ff ff       	call   c0011f54 <EnvVarContainer::EnvVarContainer(Process*)>
c0012074:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012078:	83 c4 2c             	add    esp,0x2c
c001207b:	c3                   	ret    

c001207c <Krnl::copyProcessEnv(Process*, Process*)>:
c001207c:	57                   	push   edi
c001207d:	56                   	push   esi
c001207e:	53                   	push   ebx
c001207f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012083:	83 ec 0c             	sub    esp,0xc
c0012086:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001208c:	6a 0c                	push   0xc
c001208e:	e8 de 76 ff ff       	call   c0009771 <malloc>
c0012093:	89 c3                	mov    ebx,eax
c0012095:	58                   	pop    eax
c0012096:	5a                   	pop    edx
c0012097:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001209b:	53                   	push   ebx
c001209c:	e8 b3 fe ff ff       	call   c0011f54 <EnvVarContainer::EnvVarContainer(Process*)>
c00120a1:	8b 07                	mov    eax,DWORD PTR [edi]
c00120a3:	89 03                	mov    DWORD PTR [ebx],eax
c00120a5:	c1 e0 03             	shl    eax,0x3
c00120a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00120ab:	e8 c1 76 ff ff       	call   c0009771 <malloc>
c00120b0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00120b3:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00120b5:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00120b8:	c1 e1 03             	shl    ecx,0x3
c00120bb:	89 c7                	mov    edi,eax
c00120bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00120bf:	83 c4 10             	add    esp,0x10
c00120c2:	89 d8                	mov    eax,ebx
c00120c4:	5b                   	pop    ebx
c00120c5:	5e                   	pop    esi
c00120c6:	5f                   	pop    edi
c00120c7:	c3                   	ret    

c00120c8 <Krnl::loadSystemEnv()>:
c00120c8:	53                   	push   ebx
c00120c9:	83 ec 14             	sub    esp,0x14
c00120cc:	6a 0c                	push   0xc
c00120ce:	e8 9e 76 ff ff       	call   c0009771 <malloc>
c00120d3:	89 c3                	mov    ebx,eax
c00120d5:	58                   	pop    eax
c00120d6:	5a                   	pop    edx
c00120d7:	ff 35 d0 66 02 c0    	push   DWORD PTR ds:0xc00266d0
c00120dd:	53                   	push   ebx
c00120de:	e8 71 fe ff ff       	call   c0011f54 <EnvVarContainer::EnvVarContainer(Process*)>
c00120e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00120e6:	89 1d 58 5c 02 c0    	mov    DWORD PTR ds:0xc0025c58,ebx
c00120ec:	e8 47 fe ff ff       	call   c0011f38 <EnvVarContainer::__loadSystem()>
c00120f1:	83 c4 18             	add    esp,0x18
c00120f4:	5b                   	pop    ebx
c00120f5:	c3                   	ret    

c00120f6 <Krnl::loadUserEnv()>:
c00120f6:	53                   	push   ebx
c00120f7:	83 ec 14             	sub    esp,0x14
c00120fa:	6a 0c                	push   0xc
c00120fc:	e8 70 76 ff ff       	call   c0009771 <malloc>
c0012101:	89 c3                	mov    ebx,eax
c0012103:	58                   	pop    eax
c0012104:	5a                   	pop    edx
c0012105:	ff 35 d0 66 02 c0    	push   DWORD PTR ds:0xc00266d0
c001210b:	53                   	push   ebx
c001210c:	e8 43 fe ff ff       	call   c0011f54 <EnvVarContainer::EnvVarContainer(Process*)>
c0012111:	89 1d 54 5c 02 c0    	mov    DWORD PTR ds:0xc0025c54,ebx
c0012117:	83 c4 18             	add    esp,0x18
c001211a:	5b                   	pop    ebx
c001211b:	c3                   	ret    

c001211c <Krnl::flushEnv()>:
c001211c:	c3                   	ret    

c001211d <Krnl::getProcessTotalEnvCount(Process*)>:
c001211d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012121:	8b 15 54 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c54
c0012127:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001212d:	a1 58 5c 02 c0       	mov    eax,ds:0xc0025c58
c0012132:	8b 00                	mov    eax,DWORD PTR [eax]
c0012134:	03 01                	add    eax,DWORD PTR [ecx]
c0012136:	85 d2                	test   edx,edx
c0012138:	74 02                	je     c001213c <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001213a:	03 02                	add    eax,DWORD PTR [edx]
c001213c:	c3                   	ret    

c001213d <Krnl::getProcessEnvPair(Process*, int)>:
c001213d:	57                   	push   edi
c001213e:	56                   	push   esi
c001213f:	8b 35 54 5c 02 c0    	mov    esi,DWORD PTR ds:0xc0025c54
c0012145:	53                   	push   ebx
c0012146:	85 f6                	test   esi,esi
c0012148:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001214c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012150:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0012156:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001215a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001215c:	75 16                	jne    c0012174 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001215e:	39 c2                	cmp    edx,eax
c0012160:	7c 16                	jl     c0012178 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0012162:	8b 0d 58 5c 02 c0    	mov    ecx,DWORD PTR ds:0xc0025c58
c0012168:	8b 31                	mov    esi,DWORD PTR [ecx]
c001216a:	01 c6                	add    esi,eax
c001216c:	39 d6                	cmp    esi,edx
c001216e:	7e 3c                	jle    c00121ac <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0012170:	29 c2                	sub    edx,eax
c0012172:	eb 04                	jmp    c0012178 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0012174:	39 c2                	cmp    edx,eax
c0012176:	7d 05                	jge    c001217d <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0012178:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001217b:	eb 20                	jmp    c001219d <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001217d:	8b 3e                	mov    edi,DWORD PTR [esi]
c001217f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0012182:	39 d1                	cmp    ecx,edx
c0012184:	7e 04                	jle    c001218a <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0012186:	29 c2                	sub    edx,eax
c0012188:	eb 10                	jmp    c001219a <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001218a:	8b 35 58 5c 02 c0    	mov    esi,DWORD PTR ds:0xc0025c58
c0012190:	03 0e                	add    ecx,DWORD PTR [esi]
c0012192:	39 d1                	cmp    ecx,edx
c0012194:	7e 16                	jle    c00121ac <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0012196:	29 c2                	sub    edx,eax
c0012198:	29 fa                	sub    edx,edi
c001219a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001219d:	8d 14 d0             	lea    edx,[eax+edx*8]
c00121a0:	8b 02                	mov    eax,DWORD PTR [edx]
c00121a2:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00121a5:	89 03                	mov    DWORD PTR [ebx],eax
c00121a7:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00121aa:	eb 1d                	jmp    c00121c9 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00121ac:	83 ec 0c             	sub    esp,0xc
c00121af:	68 c6 18 02 c0       	push   0xc00218c6
c00121b4:	e8 18 00 00 00       	call   c00121d1 <Krnl::panic(char const*)>
c00121b9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00121bf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00121c6:	83 c4 10             	add    esp,0x10
c00121c9:	89 d8                	mov    eax,ebx
c00121cb:	5b                   	pop    ebx
c00121cc:	5e                   	pop    esi
c00121cd:	5f                   	pop    edi
c00121ce:	c2 04 00             	ret    0x4

c00121d1 <Krnl::panic(char const*)>:
c00121d1:	53                   	push   ebx
c00121d2:	83 ec 10             	sub    esp,0x10
c00121d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00121d9:	fa                   	cli    
c00121da:	c6 05 64 5c 02 c0 01 	mov    BYTE PTR ds:0xc0025c64,0x1
c00121e1:	53                   	push   ebx
c00121e2:	68 e0 18 02 c0       	push   0xc00218e0
c00121e7:	e8 0f a3 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c00121ec:	83 c4 0c             	add    esp,0xc
c00121ef:	6a 01                	push   0x1
c00121f1:	6a 0f                	push   0xf
c00121f3:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c00121f9:	e8 e6 80 ff ff       	call   c000a2e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00121fe:	59                   	pop    ecx
c00121ff:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c0012205:	e8 d2 82 ff ff       	call   c000a4dc <VgaText::clearScreen()>
c001220a:	58                   	pop    eax
c001220b:	5a                   	pop    edx
c001220c:	68 37 19 02 c0       	push   0xc0021937
c0012211:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c0012217:	e8 00 81 ff ff       	call   c000a31c <VgaText::setTitle(char*)>
c001221c:	83 c4 0c             	add    esp,0xc
c001221f:	6a 01                	push   0x1
c0012221:	6a 0f                	push   0xf
c0012223:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c0012229:	e8 b6 80 ff ff       	call   c000a2e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001222e:	59                   	pop    ecx
c001222f:	58                   	pop    eax
c0012230:	68 f9 18 02 c0       	push   0xc00218f9
c0012235:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c001223b:	e8 90 85 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c0012240:	58                   	pop    eax
c0012241:	5a                   	pop    edx
c0012242:	68 80 19 02 c0       	push   0xc0021980
c0012247:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c001224d:	e8 7e 85 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c0012252:	59                   	pop    ecx
c0012253:	58                   	pop    eax
c0012254:	68 15 19 02 c0       	push   0xc0021915
c0012259:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c001225f:	e8 6c 85 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c0012264:	58                   	pop    eax
c0012265:	5a                   	pop    edx
c0012266:	53                   	push   ebx
c0012267:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c001226d:	e8 5e 85 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c0012272:	59                   	pop    ecx
c0012273:	5b                   	pop    ebx
c0012274:	68 35 19 02 c0       	push   0xc0021935
c0012279:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c001227f:	e8 4c 85 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c0012284:	58                   	pop    eax
c0012285:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012289:	e8 97 29 00 00       	call   c0014c25 <Thr::getDriverNameFromAddress(unsigned long)>
c001228e:	83 c4 10             	add    esp,0x10
c0012291:	85 c0                	test   eax,eax
c0012293:	0f 84 4e 01 00 00    	je     c00123e7 <Krnl::panic(char const*)+0x216>
c0012299:	83 ec 08             	sub    esp,0x8
c001229c:	89 c3                	mov    ebx,eax
c001229e:	68 bc 19 02 c0       	push   0xc00219bc
c00122a3:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c00122a9:	e8 22 85 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c00122ae:	59                   	pop    ecx
c00122af:	58                   	pop    eax
c00122b0:	68 15 19 02 c0       	push   0xc0021915
c00122b5:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c00122bb:	e8 10 85 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c00122c0:	58                   	pop    eax
c00122c1:	5a                   	pop    edx
c00122c2:	53                   	push   ebx
c00122c3:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c00122c9:	e8 02 85 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c00122ce:	83 c4 10             	add    esp,0x10
c00122d1:	83 ec 08             	sub    esp,0x8
c00122d4:	68 34 19 02 c0       	push   0xc0021934
c00122d9:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c00122df:	e8 ec 84 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c00122e4:	58                   	pop    eax
c00122e5:	5a                   	pop    edx
c00122e6:	68 14 1a 02 c0       	push   0xc0021a14
c00122eb:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c00122f1:	e8 da 84 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c00122f6:	59                   	pop    ecx
c00122f7:	5b                   	pop    ebx
c00122f8:	68 54 1a 02 c0       	push   0xc0021a54
c00122fd:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c0012303:	e8 c8 84 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c0012308:	58                   	pop    eax
c0012309:	5a                   	pop    edx
c001230a:	68 20 19 02 c0       	push   0xc0021920
c001230f:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c0012315:	e8 b6 84 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c001231a:	59                   	pop    ecx
c001231b:	5b                   	pop    ebx
c001231c:	68 98 1a 02 c0       	push   0xc0021a98
c0012321:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c0012327:	e8 a4 84 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c001232c:	58                   	pop    eax
c001232d:	5a                   	pop    edx
c001232e:	68 38 19 02 c0       	push   0xc0021938
c0012333:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c0012339:	e8 92 84 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c001233e:	0f 20 c0             	mov    eax,cr0
c0012341:	59                   	pop    ecx
c0012342:	5b                   	pop    ebx
c0012343:	50                   	push   eax
c0012344:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c001234a:	e8 3b 84 ff ff       	call   c000a78a <VgaText::putx(unsigned int)>
c001234f:	58                   	pop    eax
c0012350:	5a                   	pop    edx
c0012351:	68 42 19 02 c0       	push   0xc0021942
c0012356:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c001235c:	e8 6f 84 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c0012361:	0f 20 d0             	mov    eax,cr2
c0012364:	59                   	pop    ecx
c0012365:	5b                   	pop    ebx
c0012366:	50                   	push   eax
c0012367:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c001236d:	e8 18 84 ff ff       	call   c000a78a <VgaText::putx(unsigned int)>
c0012372:	58                   	pop    eax
c0012373:	5a                   	pop    edx
c0012374:	68 4c 19 02 c0       	push   0xc002194c
c0012379:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c001237f:	e8 4c 84 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c0012384:	0f 20 d8             	mov    eax,cr3
c0012387:	59                   	pop    ecx
c0012388:	5b                   	pop    ebx
c0012389:	50                   	push   eax
c001238a:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c0012390:	e8 f5 83 ff ff       	call   c000a78a <VgaText::putx(unsigned int)>
c0012395:	58                   	pop    eax
c0012396:	5a                   	pop    edx
c0012397:	68 5f 19 02 c0       	push   0xc002195f
c001239c:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c00123a2:	e8 29 84 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c00123a7:	0f 20 e0             	mov    eax,cr4
c00123aa:	59                   	pop    ecx
c00123ab:	5b                   	pop    ebx
c00123ac:	50                   	push   eax
c00123ad:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c00123b3:	e8 d2 83 ff ff       	call   c000a78a <VgaText::putx(unsigned int)>
c00123b8:	58                   	pop    eax
c00123b9:	5a                   	pop    edx
c00123ba:	68 69 19 02 c0       	push   0xc0021969
c00123bf:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c00123c5:	e8 06 84 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c00123ca:	83 c4 10             	add    esp,0x10
c00123cd:	b2 fe                	mov    dl,0xfe
c00123cf:	e4 60                	in     al,0x60
c00123d1:	3c 1c                	cmp    al,0x1c
c00123d3:	74 04                	je     c00123d9 <Krnl::panic(char const*)+0x208>
c00123d5:	3c 5a                	cmp    al,0x5a
c00123d7:	75 f6                	jne    c00123cf <Krnl::panic(char const*)+0x1fe>
c00123d9:	e4 64                	in     al,0x64
c00123db:	a8 02                	test   al,0x2
c00123dd:	75 fa                	jne    c00123d9 <Krnl::panic(char const*)+0x208>
c00123df:	88 d0                	mov    al,dl
c00123e1:	e6 64                	out    0x64,al
c00123e3:	fa                   	cli    
c00123e4:	f4                   	hlt    
c00123e5:	eb e8                	jmp    c00123cf <Krnl::panic(char const*)+0x1fe>
c00123e7:	51                   	push   ecx
c00123e8:	51                   	push   ecx
c00123e9:	68 e8 19 02 c0       	push   0xc00219e8
c00123ee:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c00123f4:	e8 d7 83 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c00123f9:	5b                   	pop    ebx
c00123fa:	58                   	pop    eax
c00123fb:	68 15 19 02 c0       	push   0xc0021915
c0012400:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c0012406:	e8 c5 83 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c001240b:	58                   	pop    eax
c001240c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012411:	5a                   	pop    edx
c0012412:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012415:	83 c0 0c             	add    eax,0xc
c0012418:	50                   	push   eax
c0012419:	ff 35 14 32 02 c0    	push   DWORD PTR ds:0xc0023214
c001241f:	e8 ac 83 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c0012424:	83 c4 10             	add    esp,0x10
c0012427:	e9 a5 fe ff ff       	jmp    c00122d1 <Krnl::panic(char const*)+0x100>

c001242c <Krnl::powerThread(void*)>:
c001242c:	53                   	push   ebx
c001242d:	83 ec 08             	sub    esp,0x8
c0012430:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c0012435:	48                   	dec    eax
c0012436:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c001243b:	75 01                	jne    c001243e <Krnl::powerThread(void*)+0x12>
c001243d:	fb                   	sti    
c001243e:	83 ec 0c             	sub    esp,0xc
c0012441:	8b 1d b4 5c 02 c0    	mov    ebx,DWORD PTR ds:0xc0025cb4
c0012447:	6a 0a                	push   0xa
c0012449:	c6 05 80 5c 02 c0 00 	mov    BYTE PTR ds:0xc0025c80,0x0
c0012450:	e8 07 35 00 00       	call   c001595c <sleep(unsigned int)>
c0012455:	a1 c4 5c 02 c0       	mov    eax,ds:0xc0025cc4
c001245a:	83 c4 10             	add    esp,0x10
c001245d:	83 c0 0a             	add    eax,0xa
c0012460:	85 db                	test   ebx,ebx
c0012462:	a3 c4 5c 02 c0       	mov    ds:0xc0025cc4,eax
c0012467:	74 d5                	je     c001243e <Krnl::powerThread(void*)+0x12>
c0012469:	39 d8                	cmp    eax,ebx
c001246b:	7e d1                	jle    c001243e <Krnl::powerThread(void*)+0x12>
c001246d:	83 ec 0c             	sub    esp,0xc
c0012470:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c0012476:	e8 5b 69 ff ff       	call   c0008dd6 <Computer::sleep()>
c001247b:	83 c4 10             	add    esp,0x10
c001247e:	eb be                	jmp    c001243e <Krnl::powerThread(void*)+0x12>

c0012480 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0012480:	57                   	push   edi
c0012481:	b9 09 00 00 00       	mov    ecx,0x9
c0012486:	56                   	push   esi
c0012487:	bf a0 5c 02 c0       	mov    edi,0xc0025ca0
c001248c:	fc                   	cld    
c001248d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012491:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012493:	5e                   	pop    esi
c0012494:	5f                   	pop    edi
c0012495:	c3                   	ret    

c0012496 <Krnl::userIOReceived()>:
c0012496:	c7 05 c4 5c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025cc4,0x0
c00124a0:	c3                   	ret    

c00124a1 <Krnl::handlePowerButton()>:
c00124a1:	83 ec 0c             	sub    esp,0xc
c00124a4:	a1 a0 5c 02 c0       	mov    eax,ds:0xc0025ca0
c00124a9:	83 f8 02             	cmp    eax,0x2
c00124ac:	75 10                	jne    c00124be <Krnl::handlePowerButton()+0x1d>
c00124ae:	83 ec 0c             	sub    esp,0xc
c00124b1:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c00124b7:	e8 ea 68 ff ff       	call   c0008da6 <Computer::shutdown()>
c00124bc:	eb 11                	jmp    c00124cf <Krnl::handlePowerButton()+0x2e>
c00124be:	48                   	dec    eax
c00124bf:	75 11                	jne    c00124d2 <Krnl::handlePowerButton()+0x31>
c00124c1:	83 ec 0c             	sub    esp,0xc
c00124c4:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c00124ca:	e8 07 69 ff ff       	call   c0008dd6 <Computer::sleep()>
c00124cf:	83 c4 10             	add    esp,0x10
c00124d2:	83 c4 0c             	add    esp,0xc
c00124d5:	c3                   	ret    

c00124d6 <Krnl::handleSleepButton()>:
c00124d6:	83 ec 0c             	sub    esp,0xc
c00124d9:	a1 a4 5c 02 c0       	mov    eax,ds:0xc0025ca4
c00124de:	83 f8 02             	cmp    eax,0x2
c00124e1:	75 10                	jne    c00124f3 <Krnl::handleSleepButton()+0x1d>
c00124e3:	83 ec 0c             	sub    esp,0xc
c00124e6:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c00124ec:	e8 b5 68 ff ff       	call   c0008da6 <Computer::shutdown()>
c00124f1:	eb 11                	jmp    c0012504 <Krnl::handleSleepButton()+0x2e>
c00124f3:	48                   	dec    eax
c00124f4:	75 11                	jne    c0012507 <Krnl::handleSleepButton()+0x31>
c00124f6:	83 ec 0c             	sub    esp,0xc
c00124f9:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c00124ff:	e8 d2 68 ff ff       	call   c0008dd6 <Computer::sleep()>
c0012504:	83 c4 10             	add    esp,0x10
c0012507:	83 c4 0c             	add    esp,0xc
c001250a:	c3                   	ret    

c001250b <Krnl::setupPowerManager()>:
c001250b:	83 ec 0c             	sub    esp,0xc
c001250e:	c7 05 c4 5c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025cc4,0x0
c0012518:	68 f0 00 00 00       	push   0xf0
c001251d:	c6 05 80 5c 02 c0 00 	mov    BYTE PTR ds:0xc0025c80,0x0
c0012524:	6a 00                	push   0x0
c0012526:	68 2c 24 01 c0       	push   0xc001242c
c001252b:	ff 35 d0 66 02 c0    	push   DWORD PTR ds:0xc00266d0
c0012531:	e8 02 2f 00 00       	call   c0015438 <Process::createThread(void (*)(void*), void*, int)>
c0012536:	c7 05 a0 5c 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0025ca0,0x2
c0012540:	c7 05 a4 5c 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025ca4,0x1
c001254a:	c7 05 a8 5c 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0025ca8,0x3
c0012554:	c7 05 ac 5c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025cac,0x0
c001255e:	c7 05 b8 5c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025cb8,0x0
c0012568:	c7 05 b0 5c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025cb0,0x0
c0012572:	c7 05 bc 5c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025cbc,0x0
c001257c:	c7 05 b4 5c 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0025cb4,0x3c
c0012586:	c7 05 c0 5c 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0025cc0,0x3c
c0012590:	83 c4 1c             	add    esp,0x1c
c0012593:	c3                   	ret    

c0012594 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012594:	55                   	push   ebp
c0012595:	57                   	push   edi
c0012596:	56                   	push   esi
c0012597:	53                   	push   ebx
c0012598:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001259e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00125a5:	8a 1e                	mov    bl,BYTE PTR [esi]
c00125a7:	8d 6e 01             	lea    ebp,[esi+0x1]
c00125aa:	80 fb 40             	cmp    bl,0x40
c00125ad:	75 1b                	jne    c00125ca <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00125af:	8a 16                	mov    dl,BYTE PTR [esi]
c00125b1:	84 d2                	test   dl,dl
c00125b3:	0f 84 f1 00 00 00    	je     c00126aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00125b9:	8d 46 01             	lea    eax,[esi+0x1]
c00125bc:	80 fa 3a             	cmp    dl,0x3a
c00125bf:	74 04                	je     c00125c5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00125c1:	89 c6                	mov    esi,eax
c00125c3:	eb ea                	jmp    c00125af <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00125c5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00125c8:	89 c6                	mov    esi,eax
c00125ca:	50                   	push   eax
c00125cb:	6a 40                	push   0x40
c00125cd:	6a 00                	push   0x0
c00125cf:	8d 44 24 24          	lea    eax,[esp+0x24]
c00125d3:	50                   	push   eax
c00125d4:	e8 cf de fe ff       	call   c00004a8 <memset>
c00125d9:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00125e0:	31 c0                	xor    eax,eax
c00125e2:	83 c4 10             	add    esp,0x10
c00125e5:	8a 0f                	mov    cl,BYTE PTR [edi]
c00125e7:	84 c9                	test   cl,cl
c00125e9:	0f 84 bb 00 00 00    	je     c00126aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00125ef:	3d c7 00 00 00       	cmp    eax,0xc7
c00125f4:	0f 8f b0 00 00 00    	jg     c00126aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00125fa:	80 f9 0a             	cmp    cl,0xa
c00125fd:	0f 85 98 00 00 00    	jne    c001269b <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0012603:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012608:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001260c:	a8 df                	test   al,0xdf
c001260e:	0f 94 c1             	sete   cl
c0012611:	3c 23                	cmp    al,0x23
c0012613:	0f 94 c2             	sete   dl
c0012616:	08 d1                	or     cl,dl
c0012618:	75 4a                	jne    c0012664 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001261a:	8d 50 f7             	lea    edx,[eax-0x9]
c001261d:	80 fa 01             	cmp    dl,0x1
c0012620:	76 42                	jbe    c0012664 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012622:	3c 5b                	cmp    al,0x5b
c0012624:	75 42                	jne    c0012668 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012626:	80 fb 40             	cmp    bl,0x40
c0012629:	75 39                	jne    c0012664 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001262b:	83 ec 0c             	sub    esp,0xc
c001262e:	8d 54 24 65          	lea    edx,[esp+0x65]
c0012632:	52                   	push   edx
c0012633:	e8 8c de fe ff       	call   c00004c4 <strlen>
c0012638:	83 c4 10             	add    esp,0x10
c001263b:	83 f8 3f             	cmp    eax,0x3f
c001263e:	77 6a                	ja     c00126aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012640:	50                   	push   eax
c0012641:	50                   	push   eax
c0012642:	8d 54 24 61          	lea    edx,[esp+0x61]
c0012646:	52                   	push   edx
c0012647:	8d 54 24 24          	lea    edx,[esp+0x24]
c001264b:	52                   	push   edx
c001264c:	e8 13 df fe ff       	call   c0000564 <strcpy>
c0012651:	58                   	pop    eax
c0012652:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012656:	52                   	push   edx
c0012657:	e8 68 de fe ff       	call   c00004c4 <strlen>
c001265c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012661:	83 c4 10             	add    esp,0x10
c0012664:	31 d2                	xor    edx,edx
c0012666:	eb 3a                	jmp    c00126a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0012668:	80 fb 40             	cmp    bl,0x40
c001266b:	74 06                	je     c0012673 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001266d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012671:	eb 20                	jmp    c0012693 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0012673:	50                   	push   eax
c0012674:	50                   	push   eax
c0012675:	55                   	push   ebp
c0012676:	8d 44 24 24          	lea    eax,[esp+0x24]
c001267a:	50                   	push   eax
c001267b:	e8 70 df fe ff       	call   c00005f0 <strcmp>
c0012680:	83 c4 10             	add    esp,0x10
c0012683:	85 c0                	test   eax,eax
c0012685:	75 dd                	jne    c0012664 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012687:	eb e4                	jmp    c001266d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0012689:	8d 50 01             	lea    edx,[eax+0x1]
c001268c:	80 f9 3d             	cmp    cl,0x3d
c001268f:	74 1d                	je     c00126ae <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0012691:	89 d0                	mov    eax,edx
c0012693:	8a 08                	mov    cl,BYTE PTR [eax]
c0012695:	84 c9                	test   cl,cl
c0012697:	75 f0                	jne    c0012689 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0012699:	eb 0f                	jmp    c00126aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001269b:	8d 50 01             	lea    edx,[eax+0x1]
c001269e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00126a2:	47                   	inc    edi
c00126a3:	89 d0                	mov    eax,edx
c00126a5:	e9 3b ff ff ff       	jmp    c00125e5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00126aa:	31 c0                	xor    eax,eax
c00126ac:	eb 33                	jmp    c00126e1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00126ae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00126b2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00126b5:	50                   	push   eax
c00126b6:	50                   	push   eax
c00126b7:	8d 44 24 60          	lea    eax,[esp+0x60]
c00126bb:	50                   	push   eax
c00126bc:	56                   	push   esi
c00126bd:	e8 2e df fe ff       	call   c00005f0 <strcmp>
c00126c2:	83 c4 10             	add    esp,0x10
c00126c5:	85 c0                	test   eax,eax
c00126c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00126cb:	75 97                	jne    c0012664 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00126cd:	51                   	push   ecx
c00126ce:	51                   	push   ecx
c00126cf:	52                   	push   edx
c00126d0:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00126d7:	e8 88 de fe ff       	call   c0000564 <strcpy>
c00126dc:	83 c4 10             	add    esp,0x10
c00126df:	b0 01                	mov    al,0x1
c00126e1:	81 c4 2c 01 00 00    	add    esp,0x12c
c00126e7:	5b                   	pop    ebx
c00126e8:	5e                   	pop    esi
c00126e9:	5f                   	pop    edi
c00126ea:	5d                   	pop    ebp
c00126eb:	c3                   	ret    

c00126ec <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00126ec:	57                   	push   edi
c00126ed:	56                   	push   esi
c00126ee:	53                   	push   ebx
c00126ef:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00126f5:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00126fc:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012703:	53                   	push   ebx
c0012704:	e8 bb dd fe ff       	call   c00004c4 <strlen>
c0012709:	89 34 24             	mov    DWORD PTR [esp],esi
c001270c:	89 c7                	mov    edi,eax
c001270e:	e8 b1 dd fe ff       	call   c00004c4 <strlen>
c0012713:	83 c4 10             	add    esp,0x10
c0012716:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001271a:	3d ff 00 00 00       	cmp    eax,0xff
c001271f:	0f 87 d3 00 00 00    	ja     c00127f8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012725:	57                   	push   edi
c0012726:	57                   	push   edi
c0012727:	56                   	push   esi
c0012728:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001272c:	56                   	push   esi
c001272d:	e8 32 de fe ff       	call   c0000564 <strcpy>
c0012732:	58                   	pop    eax
c0012733:	5a                   	pop    edx
c0012734:	68 a3 1d 02 c0       	push   0xc0021da3
c0012739:	56                   	push   esi
c001273a:	e8 65 df fe ff       	call   c00006a4 <strcat>
c001273f:	59                   	pop    ecx
c0012740:	5f                   	pop    edi
c0012741:	53                   	push   ebx
c0012742:	56                   	push   esi
c0012743:	e8 5c df fe ff       	call   c00006a4 <strcat>
c0012748:	58                   	pop    eax
c0012749:	5a                   	pop    edx
c001274a:	68 be 1a 02 c0       	push   0xc0021abe
c001274f:	56                   	push   esi
c0012750:	e8 4f df fe ff       	call   c00006a4 <strcat>
c0012755:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001275c:	e8 10 70 ff ff       	call   c0009771 <malloc>
c0012761:	83 c4 0c             	add    esp,0xc
c0012764:	89 c3                	mov    ebx,eax
c0012766:	ff 35 d0 66 02 c0    	push   DWORD PTR ds:0xc00266d0
c001276c:	56                   	push   esi
c001276d:	50                   	push   eax
c001276e:	e8 f3 a2 ff ff       	call   c000ca66 <File::File(char const*, Process*)>
c0012773:	83 c4 10             	add    esp,0x10
c0012776:	85 db                	test   ebx,ebx
c0012778:	74 7e                	je     c00127f8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001277a:	51                   	push   ecx
c001277b:	51                   	push   ecx
c001277c:	6a 01                	push   0x1
c001277e:	53                   	push   ebx
c001277f:	e8 9c a3 ff ff       	call   c000cb20 <File::open(FileOpenMode)>
c0012784:	83 c4 10             	add    esp,0x10
c0012787:	85 c0                	test   eax,eax
c0012789:	74 08                	je     c0012793 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001278b:	83 ec 0c             	sub    esp,0xc
c001278e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012790:	53                   	push   ebx
c0012791:	eb 5f                	jmp    c00127f2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012793:	52                   	push   edx
c0012794:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012798:	50                   	push   eax
c0012799:	8d 44 24 20          	lea    eax,[esp+0x20]
c001279d:	50                   	push   eax
c001279e:	53                   	push   ebx
c001279f:	e8 28 a6 ff ff       	call   c000cdcc <File::stat(unsigned long long*, bool*)>
c00127a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00127a8:	83 c4 10             	add    esp,0x10
c00127ab:	89 c1                	mov    ecx,eax
c00127ad:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00127b1:	74 31                	je     c00127e4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00127b3:	83 ec 0c             	sub    esp,0xc
c00127b6:	50                   	push   eax
c00127b7:	e8 b5 6f ff ff       	call   c0009771 <malloc>
c00127bc:	89 c6                	mov    esi,eax
c00127be:	58                   	pop    eax
c00127bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127c1:	8d 54 24 20          	lea    edx,[esp+0x20]
c00127c5:	52                   	push   edx
c00127c6:	56                   	push   esi
c00127c7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00127cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00127cf:	53                   	push   ebx
c00127d0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00127d3:	83 c4 20             	add    esp,0x20
c00127d6:	85 c0                	test   eax,eax
c00127d8:	75 0a                	jne    c00127e4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00127da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127de:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00127e2:	74 18                	je     c00127fc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00127e4:	83 ec 0c             	sub    esp,0xc
c00127e7:	53                   	push   ebx
c00127e8:	e8 91 a3 ff ff       	call   c000cb7e <File::close()>
c00127ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00127f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00127f5:	83 c4 10             	add    esp,0x10
c00127f8:	31 c0                	xor    eax,eax
c00127fa:	eb 3b                	jmp    c0012837 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00127fc:	83 ec 0c             	sub    esp,0xc
c00127ff:	53                   	push   ebx
c0012800:	e8 79 a3 ff ff       	call   c000cb7e <File::close()>
c0012805:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012807:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001280a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001280d:	83 c4 0c             	add    esp,0xc
c0012810:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012817:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001281e:	56                   	push   esi
c001281f:	e8 70 fd ff ff       	call   c0012594 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012824:	89 34 24             	mov    DWORD PTR [esp],esi
c0012827:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001282b:	e8 51 6f ff ff       	call   c0009781 <free>
c0012830:	83 c4 10             	add    esp,0x10
c0012833:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012837:	81 c4 20 01 00 00    	add    esp,0x120
c001283d:	5b                   	pop    ebx
c001283e:	5e                   	pop    esi
c001283f:	5f                   	pop    edi
c0012840:	c3                   	ret    

c0012841 <Reg::getLine(char*, char*, char*)>:
c0012841:	57                   	push   edi
c0012842:	56                   	push   esi
c0012843:	53                   	push   ebx
c0012844:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012848:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001284c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012850:	57                   	push   edi
c0012851:	56                   	push   esi
c0012852:	53                   	push   ebx
c0012853:	68 c3 1a 02 c0       	push   0xc0021ac3
c0012858:	e8 8f fe ff ff       	call   c00126ec <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001285d:	83 c4 10             	add    esp,0x10
c0012860:	84 c0                	test   al,al
c0012862:	75 10                	jne    c0012874 <Reg::getLine(char*, char*, char*)+0x33>
c0012864:	57                   	push   edi
c0012865:	56                   	push   esi
c0012866:	53                   	push   ebx
c0012867:	68 e8 1a 02 c0       	push   0xc0021ae8
c001286c:	e8 7b fe ff ff       	call   c00126ec <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012871:	83 c4 10             	add    esp,0x10
c0012874:	5b                   	pop    ebx
c0012875:	5e                   	pop    esi
c0012876:	5f                   	pop    edi
c0012877:	c3                   	ret    

c0012878 <Reg::readInt(char*, char*, int*)>:
c0012878:	55                   	push   ebp
c0012879:	57                   	push   edi
c001287a:	56                   	push   esi
c001287b:	53                   	push   ebx
c001287c:	81 ec f0 00 00 00    	sub    esp,0xf0
c0012882:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0012886:	57                   	push   edi
c0012887:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001288e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012895:	e8 a7 ff ff ff       	call   c0012841 <Reg::getLine(char*, char*, char*)>
c001289a:	83 c4 10             	add    esp,0x10
c001289d:	84 c0                	test   al,al
c001289f:	0f 84 b3 00 00 00    	je     c0012958 <Reg::readInt(char*, char*, int*)+0xe0>
c00128a5:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00128a9:	80 fa 2b             	cmp    dl,0x2b
c00128ac:	74 0c                	je     c00128ba <Reg::readInt(char*, char*, int*)+0x42>
c00128ae:	80 fa 2d             	cmp    dl,0x2d
c00128b1:	75 0e                	jne    c00128c1 <Reg::readInt(char*, char*, int*)+0x49>
c00128b3:	ba 01 00 00 00       	mov    edx,0x1
c00128b8:	eb 0b                	jmp    c00128c5 <Reg::readInt(char*, char*, int*)+0x4d>
c00128ba:	ba 01 00 00 00       	mov    edx,0x1
c00128bf:	eb 02                	jmp    c00128c3 <Reg::readInt(char*, char*, int*)+0x4b>
c00128c1:	31 d2                	xor    edx,edx
c00128c3:	31 c0                	xor    eax,eax
c00128c5:	be 0a 00 00 00       	mov    esi,0xa
c00128ca:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00128cf:	75 20                	jne    c00128f1 <Reg::readInt(char*, char*, int*)+0x79>
c00128d1:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00128d5:	80 f9 78             	cmp    cl,0x78
c00128d8:	75 0a                	jne    c00128e4 <Reg::readInt(char*, char*, int*)+0x6c>
c00128da:	83 c2 02             	add    edx,0x2
c00128dd:	be 10 00 00 00       	mov    esi,0x10
c00128e2:	eb 0d                	jmp    c00128f1 <Reg::readInt(char*, char*, int*)+0x79>
c00128e4:	80 f9 62             	cmp    cl,0x62
c00128e7:	75 08                	jne    c00128f1 <Reg::readInt(char*, char*, int*)+0x79>
c00128e9:	83 c2 02             	add    edx,0x2
c00128ec:	be 02 00 00 00       	mov    esi,0x2
c00128f1:	01 d7                	add    edi,edx
c00128f3:	31 d2                	xor    edx,edx
c00128f5:	8a 1f                	mov    bl,BYTE PTR [edi]
c00128f7:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00128fb:	80 fb 0d             	cmp    bl,0xd
c00128fe:	0f 94 c3             	sete   bl
c0012901:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012906:	0f 94 c1             	sete   cl
c0012909:	08 cb                	or     bl,cl
c001290b:	75 3a                	jne    c0012947 <Reg::readInt(char*, char*, int*)+0xcf>
c001290d:	0f af d6             	imul   edx,esi
c0012910:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0012915:	83 fe 10             	cmp    esi,0x10
c0012918:	75 26                	jne    c0012940 <Reg::readInt(char*, char*, int*)+0xc8>
c001291a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001291e:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0012921:	89 e9                	mov    ecx,ebp
c0012923:	80 f9 05             	cmp    cl,0x5
c0012926:	77 06                	ja     c001292e <Reg::readInt(char*, char*, int*)+0xb6>
c0012928:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001292c:	eb 16                	jmp    c0012944 <Reg::readInt(char*, char*, int*)+0xcc>
c001292e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0012932:	83 e9 61             	sub    ecx,0x61
c0012935:	80 f9 05             	cmp    cl,0x5
c0012938:	77 06                	ja     c0012940 <Reg::readInt(char*, char*, int*)+0xc8>
c001293a:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001293e:	eb 04                	jmp    c0012944 <Reg::readInt(char*, char*, int*)+0xcc>
c0012940:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0012944:	47                   	inc    edi
c0012945:	eb ae                	jmp    c00128f5 <Reg::readInt(char*, char*, int*)+0x7d>
c0012947:	84 c0                	test   al,al
c0012949:	74 02                	je     c001294d <Reg::readInt(char*, char*, int*)+0xd5>
c001294b:	f7 da                	neg    edx
c001294d:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0012954:	89 10                	mov    DWORD PTR [eax],edx
c0012956:	88 d8                	mov    al,bl
c0012958:	81 c4 ec 00 00 00    	add    esp,0xec
c001295e:	5b                   	pop    ebx
c001295f:	5e                   	pop    esi
c0012960:	5f                   	pop    edi
c0012961:	5d                   	pop    ebp
c0012962:	c3                   	ret    

c0012963 <Reg::readString(char*, char*, char*, int)>:
c0012963:	57                   	push   edi
c0012964:	56                   	push   esi
c0012965:	53                   	push   ebx
c0012966:	81 ec d4 00 00 00    	sub    esp,0xd4
c001296c:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0012973:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0012977:	57                   	push   edi
c0012978:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001297f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012986:	e8 b6 fe ff ff       	call   c0012841 <Reg::getLine(char*, char*, char*)>
c001298b:	83 c4 10             	add    esp,0x10
c001298e:	89 c6                	mov    esi,eax
c0012990:	84 c0                	test   al,al
c0012992:	74 44                	je     c00129d8 <Reg::readString(char*, char*, char*, int)+0x75>
c0012994:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001299b:	31 c0                	xor    eax,eax
c001299d:	4a                   	dec    edx
c001299e:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00129a1:	84 c9                	test   cl,cl
c00129a3:	74 0f                	je     c00129b4 <Reg::readString(char*, char*, char*, int)+0x51>
c00129a5:	39 c2                	cmp    edx,eax
c00129a7:	7e 0b                	jle    c00129b4 <Reg::readString(char*, char*, char*, int)+0x51>
c00129a9:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00129ac:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00129b1:	40                   	inc    eax
c00129b2:	eb ea                	jmp    c001299e <Reg::readString(char*, char*, char*, int)+0x3b>
c00129b4:	83 ec 0c             	sub    esp,0xc
c00129b7:	53                   	push   ebx
c00129b8:	e8 07 db fe ff       	call   c00004c4 <strlen>
c00129bd:	83 c4 10             	add    esp,0x10
c00129c0:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00129c5:	75 11                	jne    c00129d8 <Reg::readString(char*, char*, char*, int)+0x75>
c00129c7:	83 ec 0c             	sub    esp,0xc
c00129ca:	53                   	push   ebx
c00129cb:	e8 f4 da fe ff       	call   c00004c4 <strlen>
c00129d0:	83 c4 10             	add    esp,0x10
c00129d3:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00129d8:	81 c4 d0 00 00 00    	add    esp,0xd0
c00129de:	89 f0                	mov    eax,esi
c00129e0:	5b                   	pop    ebx
c00129e1:	5e                   	pop    esi
c00129e2:	5f                   	pop    edi
c00129e3:	c3                   	ret    

c00129e4 <Reg::readBool(char*, char*, bool*)>:
c00129e4:	83 ec 20             	sub    esp,0x20
c00129e7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00129eb:	50                   	push   eax
c00129ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129f4:	e8 7f fe ff ff       	call   c0012878 <Reg::readInt(char*, char*, int*)>
c00129f9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00129fe:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012a02:	0f 95 02             	setne  BYTE PTR [edx]
c0012a05:	83 c4 2c             	add    esp,0x2c
c0012a08:	c3                   	ret    

c0012a09 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0012a09:	53                   	push   ebx
c0012a0a:	83 ec 1c             	sub    esp,0x1c
c0012a0d:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0012a11:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012a15:	50                   	push   eax
c0012a16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a1e:	e8 c1 ff ff ff       	call   c00129e4 <Reg::readBool(char*, char*, bool*)>
c0012a23:	83 c4 10             	add    esp,0x10
c0012a26:	84 c0                	test   al,al
c0012a28:	74 04                	je     c0012a2e <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0012a2a:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0012a2e:	88 d8                	mov    al,bl
c0012a30:	83 c4 18             	add    esp,0x18
c0012a33:	5b                   	pop    ebx
c0012a34:	c3                   	ret    

c0012a35 <Reg::readIntWithDefault(char*, char*, int)>:
c0012a35:	53                   	push   ebx
c0012a36:	83 ec 1c             	sub    esp,0x1c
c0012a39:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012a3d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012a41:	50                   	push   eax
c0012a42:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a4a:	e8 29 fe ff ff       	call   c0012878 <Reg::readInt(char*, char*, int*)>
c0012a4f:	83 c4 10             	add    esp,0x10
c0012a52:	84 c0                	test   al,al
c0012a54:	74 04                	je     c0012a5a <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012a56:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a5a:	89 d8                	mov    eax,ebx
c0012a5c:	83 c4 18             	add    esp,0x18
c0012a5f:	5b                   	pop    ebx
c0012a60:	c3                   	ret    

c0012a61 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012a61:	57                   	push   edi
c0012a62:	56                   	push   esi
c0012a63:	56                   	push   esi
c0012a64:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012a68:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012a6c:	56                   	push   esi
c0012a6d:	57                   	push   edi
c0012a6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a76:	e8 e8 fe ff ff       	call   c0012963 <Reg::readString(char*, char*, char*, int)>
c0012a7b:	83 c4 10             	add    esp,0x10
c0012a7e:	84 c0                	test   al,al
c0012a80:	75 1a                	jne    c0012a9c <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012a82:	51                   	push   ecx
c0012a83:	56                   	push   esi
c0012a84:	6a 00                	push   0x0
c0012a86:	57                   	push   edi
c0012a87:	e8 1c da fe ff       	call   c00004a8 <memset>
c0012a8c:	8d 4e ff             	lea    ecx,[esi-0x1]
c0012a8f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012a93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012a95:	83 c4 10             	add    esp,0x10
c0012a98:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012a9c:	89 f8                	mov    eax,edi
c0012a9e:	5a                   	pop    edx
c0012a9f:	5e                   	pop    esi
c0012aa0:	5f                   	pop    edi
c0012aa1:	c3                   	ret    

c0012aa2 <Sys::eject(regs*)>:
c0012aa2:	83 ec 0c             	sub    esp,0xc
c0012aa5:	83 ca ff             	or     edx,0xffffffff
c0012aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aac:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012aaf:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012ab4:	83 e9 41             	sub    ecx,0x41
c0012ab7:	83 f9 19             	cmp    ecx,0x19
c0012aba:	77 18                	ja     c0012ad4 <Sys::eject(regs*)+0x32>
c0012abc:	8b 0c 8d 40 57 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffda8c0]
c0012ac3:	85 c9                	test   ecx,ecx
c0012ac5:	74 0d                	je     c0012ad4 <Sys::eject(regs*)+0x32>
c0012ac7:	83 ec 0c             	sub    esp,0xc
c0012aca:	51                   	push   ecx
c0012acb:	e8 64 c0 ff ff       	call   c000eb34 <LogicalDisk::eject()>
c0012ad0:	83 c4 10             	add    esp,0x10
c0012ad3:	99                   	cdq    
c0012ad4:	83 c4 0c             	add    esp,0xc
c0012ad7:	c3                   	ret    

c0012ad8 <Sys::exit(regs*)>:
c0012ad8:	83 ec 18             	sub    esp,0x18
c0012adb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012adf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012ae2:	e8 85 34 00 00       	call   c0015f6c <terminateTask(int)>
c0012ae7:	83 c8 ff             	or     eax,0xffffffff
c0012aea:	83 c4 1c             	add    esp,0x1c
c0012aed:	89 c2                	mov    edx,eax
c0012aef:	c3                   	ret    

c0012af0 <Sys::getCwd(regs*)>:
c0012af0:	83 ec 10             	sub    esp,0x10
c0012af3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012af7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0012afa:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012afd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b02:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012b05:	e8 5e 9d ff ff       	call   c000c868 <Fs::getcwd(Process*, char*, int)>
c0012b0a:	83 c4 1c             	add    esp,0x1c
c0012b0d:	99                   	cdq    
c0012b0e:	c3                   	ret    

c0012b0f <Sys::getPID(regs*)>:
c0012b0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b14:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012b17:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b19:	99                   	cdq    
c0012b1a:	c3                   	ret    

c0012b1b <Sys::getRAMData(regs*)>:
c0012b1b:	8b 0d f8 31 02 c0    	mov    ecx,DWORD PTR ds:0xc00231f8
c0012b21:	69 05 f4 31 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc00231f4,0xc8
c0012b2b:	99                   	cdq    
c0012b2c:	f7 f9                	idiv   ecx
c0012b2e:	c1 e0 18             	shl    eax,0x18
c0012b31:	09 c8                	or     eax,ecx
c0012b33:	99                   	cdq    
c0012b34:	c3                   	ret    

c0012b35 <Sys::getVGAPtr(regs*)>:
c0012b35:	55                   	push   ebp
c0012b36:	57                   	push   edi
c0012b37:	56                   	push   esi
c0012b38:	53                   	push   ebx
c0012b39:	83 ec 18             	sub    esp,0x18
c0012b3c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012b40:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012b43:	e8 28 2f 00 00       	call   c0015a70 <Thr::processFromPID(int)>
c0012b48:	83 c4 10             	add    esp,0x10
c0012b4b:	89 c1                	mov    ecx,eax
c0012b4d:	b8 01 00 00 00       	mov    eax,0x1
c0012b52:	85 c9                	test   ecx,ecx
c0012b54:	74 57                	je     c0012bad <Sys::getVGAPtr(regs*)+0x78>
c0012b56:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0012b5c:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0012b60:	74 0c                	je     c0012b6e <Sys::getVGAPtr(regs*)+0x39>
c0012b62:	83 ec 0c             	sub    esp,0xc
c0012b65:	55                   	push   ebp
c0012b66:	e8 26 79 ff ff       	call   c000a491 <setActiveTerminal(VgaText*)>
c0012b6b:	83 c4 10             	add    esp,0x10
c0012b6e:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0012b71:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012b74:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0012b79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012b7b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0012b7e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b81:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0012b87:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b8a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0012b8d:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0012b93:	50                   	push   eax
c0012b94:	50                   	push   eax
c0012b95:	68 03 1b 02 c0       	push   0xc0021b03
c0012b9a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b9d:	05 a8 0f 00 00       	add    eax,0xfa8
c0012ba2:	50                   	push   eax
c0012ba3:	e8 bc d9 fe ff       	call   c0000564 <strcpy>
c0012ba8:	83 c4 10             	add    esp,0x10
c0012bab:	31 c0                	xor    eax,eax
c0012bad:	83 c4 0c             	add    esp,0xc
c0012bb0:	31 d2                	xor    edx,edx
c0012bb2:	5b                   	pop    ebx
c0012bb3:	5e                   	pop    esi
c0012bb4:	5f                   	pop    edi
c0012bb5:	5d                   	pop    ebp
c0012bb6:	c3                   	ret    

c0012bb7 <Sys::loadDLL(regs*)>:
c0012bb7:	56                   	push   esi
c0012bb8:	53                   	push   ebx
c0012bb9:	31 d2                	xor    edx,edx
c0012bbb:	51                   	push   ecx
c0012bbc:	b8 01 00 00 00       	mov    eax,0x1
c0012bc1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012bc5:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0012bc9:	0f 84 8c 00 00 00    	je     c0012c5b <Sys::loadDLL(regs*)+0xa4>
c0012bcf:	83 ec 0c             	sub    esp,0xc
c0012bd2:	68 14 01 00 00       	push   0x114
c0012bd7:	e8 95 6b ff ff       	call   c0009771 <malloc>
c0012bdc:	83 c4 0c             	add    esp,0xc
c0012bdf:	89 c3                	mov    ebx,eax
c0012be1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012be6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012be9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012bec:	53                   	push   ebx
c0012bed:	e8 74 9e ff ff       	call   c000ca66 <File::File(char const*, Process*)>
c0012bf2:	83 c4 10             	add    esp,0x10
c0012bf5:	31 d2                	xor    edx,edx
c0012bf7:	b8 02 00 00 00       	mov    eax,0x2
c0012bfc:	85 db                	test   ebx,ebx
c0012bfe:	74 5b                	je     c0012c5b <Sys::loadDLL(regs*)+0xa4>
c0012c00:	83 ec 0c             	sub    esp,0xc
c0012c03:	53                   	push   ebx
c0012c04:	e8 85 a1 ff ff       	call   c000cd8e <File::exists()>
c0012c09:	83 c4 10             	add    esp,0x10
c0012c0c:	84 c0                	test   al,al
c0012c0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c10:	75 11                	jne    c0012c23 <Sys::loadDLL(regs*)+0x6c>
c0012c12:	83 ec 0c             	sub    esp,0xc
c0012c15:	53                   	push   ebx
c0012c16:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c19:	83 c4 10             	add    esp,0x10
c0012c1c:	b8 03 00 00 00       	mov    eax,0x3
c0012c21:	eb 36                	jmp    c0012c59 <Sys::loadDLL(regs*)+0xa2>
c0012c23:	83 ec 0c             	sub    esp,0xc
c0012c26:	53                   	push   ebx
c0012c27:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c2a:	58                   	pop    eax
c0012c2b:	5a                   	pop    edx
c0012c2c:	6a 00                	push   0x0
c0012c2e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012c31:	e8 40 20 00 00       	call   c0014c76 <Thr::loadDLL(char const*, bool)>
c0012c36:	83 c4 10             	add    esp,0x10
c0012c39:	89 c1                	mov    ecx,eax
c0012c3b:	31 d2                	xor    edx,edx
c0012c3d:	b8 04 00 00 00       	mov    eax,0x4
c0012c42:	85 c9                	test   ecx,ecx
c0012c44:	74 15                	je     c0012c5b <Sys::loadDLL(regs*)+0xa4>
c0012c46:	53                   	push   ebx
c0012c47:	53                   	push   ebx
c0012c48:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c0012c4e:	51                   	push   ecx
c0012c4f:	e8 53 22 00 00       	call   c0014ea7 <Thr::executeDLL(unsigned long, void*)>
c0012c54:	83 c4 10             	add    esp,0x10
c0012c57:	31 c0                	xor    eax,eax
c0012c59:	31 d2                	xor    edx,edx
c0012c5b:	59                   	pop    ecx
c0012c5c:	5b                   	pop    ebx
c0012c5d:	5e                   	pop    esi
c0012c5e:	c3                   	ret    

c0012c5f <Sys::read(regs*)>:
c0012c5f:	57                   	push   edi
c0012c60:	56                   	push   esi
c0012c61:	53                   	push   ebx
c0012c62:	83 ec 10             	sub    esp,0x10
c0012c65:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012c69:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012c6c:	83 f8 02             	cmp    eax,0x2
c0012c6f:	77 10                	ja     c0012c81 <Sys::read(regs*)+0x22>
c0012c71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c76:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012c79:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0012c7f:	eb 0e                	jmp    c0012c8f <Sys::read(regs*)+0x30>
c0012c81:	83 ec 0c             	sub    esp,0xc
c0012c84:	50                   	push   eax
c0012c85:	e8 b9 84 ff ff       	call   c000b143 <getFromFileDescriptor(int)>
c0012c8a:	83 c4 10             	add    esp,0x10
c0012c8d:	89 c1                	mov    ecx,eax
c0012c8f:	83 c8 ff             	or     eax,0xffffffff
c0012c92:	85 c9                	test   ecx,ecx
c0012c94:	89 c2                	mov    edx,eax
c0012c96:	74 28                	je     c0012cc0 <Sys::read(regs*)+0x61>
c0012c98:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012ca0:	31 ff                	xor    edi,edi
c0012ca2:	83 ec 0c             	sub    esp,0xc
c0012ca5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ca7:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012cab:	52                   	push   edx
c0012cac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012caf:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0012cb2:	57                   	push   edi
c0012cb3:	56                   	push   esi
c0012cb4:	51                   	push   ecx
c0012cb5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012cb8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012cbc:	83 c4 20             	add    esp,0x20
c0012cbf:	99                   	cdq    
c0012cc0:	83 c4 10             	add    esp,0x10
c0012cc3:	5b                   	pop    ebx
c0012cc4:	5e                   	pop    esi
c0012cc5:	5f                   	pop    edi
c0012cc6:	c3                   	ret    

c0012cc7 <Sys::sbrk(regs*)>:
c0012cc7:	56                   	push   esi
c0012cc8:	53                   	push   ebx
c0012cc9:	50                   	push   eax
c0012cca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ccf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012cd3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012cd6:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0012cd9:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0012cdf:	85 db                	test   ebx,ebx
c0012ce1:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0012ce4:	74 02                	je     c0012ce8 <Sys::sbrk(regs*)+0x21>
c0012ce6:	79 06                	jns    c0012cee <Sys::sbrk(regs*)+0x27>
c0012ce8:	89 f0                	mov    eax,esi
c0012cea:	31 d2                	xor    edx,edx
c0012cec:	eb 2a                	jmp    c0012d18 <Sys::sbrk(regs*)+0x51>
c0012cee:	83 c8 ff             	or     eax,0xffffffff
c0012cf1:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0012cf7:	89 c2                	mov    edx,eax
c0012cf9:	77 1d                	ja     c0012d18 <Sys::sbrk(regs*)+0x51>
c0012cfb:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0012d01:	50                   	push   eax
c0012d02:	c1 ea 0c             	shr    edx,0xc
c0012d05:	68 07 0c 00 00       	push   0xc07
c0012d0a:	52                   	push   edx
c0012d0b:	51                   	push   ecx
c0012d0c:	e8 df 8c ff ff       	call   c000b9f0 <VAS::allocatePages(int, int)>
c0012d11:	89 f0                	mov    eax,esi
c0012d13:	31 d2                	xor    edx,edx
c0012d15:	83 c4 10             	add    esp,0x10
c0012d18:	59                   	pop    ecx
c0012d19:	5b                   	pop    ebx
c0012d1a:	5e                   	pop    esi
c0012d1b:	c3                   	ret    

c0012d1c <Sys::setCwd(regs*)>:
c0012d1c:	83 ec 14             	sub    esp,0x14
c0012d1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d23:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012d26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d2b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012d2e:	e8 fa a0 ff ff       	call   c000ce2d <Fs::setcwd(Process*, char*)>
c0012d33:	83 c4 1c             	add    esp,0x1c
c0012d36:	99                   	cdq    
c0012d37:	c3                   	ret    

c0012d38 <Sys::setTime(regs*)>:
c0012d38:	55                   	push   ebp
c0012d39:	31 c9                	xor    ecx,ecx
c0012d3b:	57                   	push   edi
c0012d3c:	bd 0c 00 00 00       	mov    ebp,0xc
c0012d41:	56                   	push   esi
c0012d42:	53                   	push   ebx
c0012d43:	31 db                	xor    ebx,ebx
c0012d45:	83 ec 10             	sub    esp,0x10
c0012d48:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012d4c:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0012d4f:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0012d52:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0012d55:	89 c2                	mov    edx,eax
c0012d57:	66 81 ef 6c 07       	sub    di,0x76c
c0012d5c:	83 e2 1f             	and    edx,0x1f
c0012d5f:	c1 e7 10             	shl    edi,0x10
c0012d62:	42                   	inc    edx
c0012d63:	c1 e8 05             	shr    eax,0x5
c0012d66:	88 d1                	mov    cl,dl
c0012d68:	31 d2                	xor    edx,edx
c0012d6a:	f7 f5                	div    ebp
c0012d6c:	89 dd                	mov    ebp,ebx
c0012d6e:	88 d5                	mov    ch,dl
c0012d70:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0012d76:	0f b7 c1             	movzx  eax,cx
c0012d79:	31 d2                	xor    edx,edx
c0012d7b:	09 f8                	or     eax,edi
c0012d7d:	bf 3c 00 00 00       	mov    edi,0x3c
c0012d82:	89 c1                	mov    ecx,eax
c0012d84:	89 f0                	mov    eax,esi
c0012d86:	f7 f7                	div    edi
c0012d88:	c1 e2 10             	shl    edx,0x10
c0012d8b:	09 d5                	or     ebp,edx
c0012d8d:	31 d2                	xor    edx,edx
c0012d8f:	89 eb                	mov    ebx,ebp
c0012d91:	f7 f7                	div    edi
c0012d93:	bf 10 0e 00 00       	mov    edi,0xe10
c0012d98:	88 d7                	mov    bh,dl
c0012d9a:	89 f0                	mov    eax,esi
c0012d9c:	31 d2                	xor    edx,edx
c0012d9e:	f7 f7                	div    edi
c0012da0:	bf 18 00 00 00       	mov    edi,0x18
c0012da5:	31 d2                	xor    edx,edx
c0012da7:	f7 f7                	div    edi
c0012da9:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c0012dae:	88 d3                	mov    bl,dl
c0012db0:	53                   	push   ebx
c0012db1:	51                   	push   ecx
c0012db2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0012db8:	e8 75 a8 ff ff       	call   c000d632 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0012dbd:	83 c4 1c             	add    esp,0x1c
c0012dc0:	83 f0 01             	xor    eax,0x1
c0012dc3:	5b                   	pop    ebx
c0012dc4:	0f b6 c0             	movzx  eax,al
c0012dc7:	5e                   	pop    esi
c0012dc8:	31 d2                	xor    edx,edx
c0012dca:	5f                   	pop    edi
c0012dcb:	5d                   	pop    ebp
c0012dcc:	c3                   	ret    

c0012dcd <Sys::timezone(regs*)>:
c0012dcd:	53                   	push   ebx
c0012dce:	83 ec 08             	sub    esp,0x8
c0012dd1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012dd5:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0012dd9:	75 17                	jne    c0012df2 <Sys::timezone(regs*)+0x25>
c0012ddb:	83 ec 0c             	sub    esp,0xc
c0012dde:	68 0d 1b 02 c0       	push   0xc0021b0d
c0012de3:	e8 13 97 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0012de8:	83 c8 ff             	or     eax,0xffffffff
c0012deb:	83 c4 10             	add    esp,0x10
c0012dee:	89 c2                	mov    edx,eax
c0012df0:	eb 20                	jmp    c0012e12 <Sys::timezone(regs*)+0x45>
c0012df2:	83 ec 0c             	sub    esp,0xc
c0012df5:	68 22 1b 02 c0       	push   0xc0021b22
c0012dfa:	e8 fc 96 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0012dff:	58                   	pop    eax
c0012e00:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012e03:	e8 8c a5 ff ff       	call   c000d394 <User::loadClockSettings(int)>
c0012e08:	83 c4 10             	add    esp,0x10
c0012e0b:	b8 01 00 00 00       	mov    eax,0x1
c0012e10:	31 d2                	xor    edx,edx
c0012e12:	83 c4 08             	add    esp,0x8
c0012e15:	5b                   	pop    ebx
c0012e16:	c3                   	ret    

c0012e17 <Sys::write(regs*)>:
c0012e17:	57                   	push   edi
c0012e18:	56                   	push   esi
c0012e19:	53                   	push   ebx
c0012e1a:	83 ec 10             	sub    esp,0x10
c0012e1d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012e21:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012e24:	83 f8 02             	cmp    eax,0x2
c0012e27:	77 10                	ja     c0012e39 <Sys::write(regs*)+0x22>
c0012e29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e2e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012e31:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0012e37:	eb 0e                	jmp    c0012e47 <Sys::write(regs*)+0x30>
c0012e39:	83 ec 0c             	sub    esp,0xc
c0012e3c:	50                   	push   eax
c0012e3d:	e8 01 83 ff ff       	call   c000b143 <getFromFileDescriptor(int)>
c0012e42:	83 c4 10             	add    esp,0x10
c0012e45:	89 c1                	mov    ecx,eax
c0012e47:	83 c8 ff             	or     eax,0xffffffff
c0012e4a:	85 c9                	test   ecx,ecx
c0012e4c:	89 c2                	mov    edx,eax
c0012e4e:	74 28                	je     c0012e78 <Sys::write(regs*)+0x61>
c0012e50:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012e58:	31 ff                	xor    edi,edi
c0012e5a:	83 ec 0c             	sub    esp,0xc
c0012e5d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e5f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012e63:	52                   	push   edx
c0012e64:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012e67:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0012e6a:	57                   	push   edi
c0012e6b:	56                   	push   esi
c0012e6c:	51                   	push   ecx
c0012e6d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012e70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012e74:	83 c4 20             	add    esp,0x20
c0012e77:	99                   	cdq    
c0012e78:	83 c4 10             	add    esp,0x10
c0012e7b:	5b                   	pop    ebx
c0012e7c:	5e                   	pop    esi
c0012e7d:	5f                   	pop    edi
c0012e7e:	c3                   	ret    

c0012e7f <Sys::wsbe(regs*)>:
c0012e7f:	57                   	push   edi
c0012e80:	b9 0b 00 00 00       	mov    ecx,0xb
c0012e85:	56                   	push   esi
c0012e86:	be 61 1b 02 c0       	mov    esi,0xc0021b61
c0012e8b:	53                   	push   ebx
c0012e8c:	83 ec 30             	sub    esp,0x30
c0012e8f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0012e93:	fc                   	cld    
c0012e94:	83 ec 0c             	sub    esp,0xc
c0012e97:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012e99:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012e9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ea2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012ea5:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0012eab:	8b 06                	mov    eax,DWORD PTR [esi]
c0012ead:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0012eb0:	57                   	push   edi
c0012eb1:	e8 0e d6 fe ff       	call   c00004c4 <strlen>
c0012eb6:	5a                   	pop    edx
c0012eb7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0012ebb:	52                   	push   edx
c0012ebc:	31 d2                	xor    edx,edx
c0012ebe:	57                   	push   edi
c0012ebf:	52                   	push   edx
c0012ec0:	50                   	push   eax
c0012ec1:	56                   	push   esi
c0012ec2:	ff d3                	call   ebx
c0012ec4:	83 c4 14             	add    esp,0x14
c0012ec7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012ecb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0012ece:	e8 99 30 00 00       	call   c0015f6c <terminateTask(int)>
c0012ed3:	83 c4 40             	add    esp,0x40
c0012ed6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012edb:	5b                   	pop    ebx
c0012edc:	31 d2                	xor    edx,edx
c0012ede:	5e                   	pop    esi
c0012edf:	5f                   	pop    edi
c0012ee0:	c3                   	ret    

c0012ee1 <Sys::yield(regs*)>:
c0012ee1:	83 ec 0c             	sub    esp,0xc
c0012ee4:	fa                   	cli    
c0012ee5:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c0012eeb:	e8 64 27 00 00       	call   c0015654 <schedule()>
c0012ef0:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c0012ef5:	48                   	dec    eax
c0012ef6:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c0012efb:	75 01                	jne    c0012efe <Sys::yield(regs*)+0x1d>
c0012efd:	fb                   	sti    
c0012efe:	31 c0                	xor    eax,eax
c0012f00:	31 d2                	xor    edx,edx
c0012f02:	83 c4 0c             	add    esp,0xc
c0012f05:	c3                   	ret    

c0012f06 <sysCallSeekDir(regs*)>:
c0012f06:	31 c0                	xor    eax,eax
c0012f08:	31 d2                	xor    edx,edx
c0012f0a:	c3                   	ret    

c0012f0b <sysCallTellDir(regs*)>:
c0012f0b:	31 c0                	xor    eax,eax
c0012f0d:	31 d2                	xor    edx,edx
c0012f0f:	c3                   	ret    

c0012f10 <sysCallVerify(regs*)>:
c0012f10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f14:	31 d2                	xor    edx,edx
c0012f16:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012f19:	c3                   	ret    

c0012f1a <sysCallGetArgc(regs*)>:
c0012f1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f1f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012f22:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0012f28:	99                   	cdq    
c0012f29:	c3                   	ret    

c0012f2a <sysCallTTYName(regs*)>:
c0012f2a:	b8 01 00 00 00       	mov    eax,0x1
c0012f2f:	31 d2                	xor    edx,edx
c0012f31:	c3                   	ret    

c0012f32 <sysFormatDisk(regs*)>:
c0012f32:	56                   	push   esi
c0012f33:	53                   	push   ebx
c0012f34:	53                   	push   ebx
c0012f35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012f39:	8b 1d b8 32 02 c0    	mov    ebx,DWORD PTR ds:0xc00232b8
c0012f3f:	eb 25                	jmp    c0012f66 <sysFormatDisk(regs*)+0x34>
c0012f41:	83 ec 0c             	sub    esp,0xc
c0012f44:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0012f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012f49:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0012f4c:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0012f4f:	50                   	push   eax
c0012f50:	ff 34 85 40 57 02 c0 	push   DWORD PTR [eax*4-0x3ffda8c0]
c0012f57:	53                   	push   ebx
c0012f58:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0012f5b:	83 c4 20             	add    esp,0x20
c0012f5e:	83 f8 08             	cmp    eax,0x8
c0012f61:	75 12                	jne    c0012f75 <sysFormatDisk(regs*)+0x43>
c0012f63:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0012f66:	85 db                	test   ebx,ebx
c0012f68:	75 d7                	jne    c0012f41 <sysFormatDisk(regs*)+0xf>
c0012f6a:	59                   	pop    ecx
c0012f6b:	b8 03 00 00 00       	mov    eax,0x3
c0012f70:	31 d2                	xor    edx,edx
c0012f72:	5b                   	pop    ebx
c0012f73:	5e                   	pop    esi
c0012f74:	c3                   	ret    
c0012f75:	85 c0                	test   eax,eax
c0012f77:	74 1b                	je     c0012f94 <sysFormatDisk(regs*)+0x62>
c0012f79:	83 f8 09             	cmp    eax,0x9
c0012f7c:	74 0b                	je     c0012f89 <sysFormatDisk(regs*)+0x57>
c0012f7e:	59                   	pop    ecx
c0012f7f:	b8 02 00 00 00       	mov    eax,0x2
c0012f84:	31 d2                	xor    edx,edx
c0012f86:	5b                   	pop    ebx
c0012f87:	5e                   	pop    esi
c0012f88:	c3                   	ret    
c0012f89:	59                   	pop    ecx
c0012f8a:	b8 01 00 00 00       	mov    eax,0x1
c0012f8f:	31 d2                	xor    edx,edx
c0012f91:	5b                   	pop    ebx
c0012f92:	5e                   	pop    esi
c0012f93:	c3                   	ret    
c0012f94:	59                   	pop    ecx
c0012f95:	31 c0                	xor    eax,eax
c0012f97:	31 d2                	xor    edx,edx
c0012f99:	5b                   	pop    ebx
c0012f9a:	5e                   	pop    esi
c0012f9b:	c3                   	ret    

c0012f9c <sysSetDiskVolumeLabel(regs*)>:
c0012f9c:	56                   	push   esi
c0012f9d:	53                   	push   ebx
c0012f9e:	53                   	push   ebx
c0012f9f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fa3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0012fa6:	83 f8 19             	cmp    eax,0x19
c0012fa9:	77 2d                	ja     c0012fd8 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0012fab:	8b 0c 85 40 57 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffda8c0]
c0012fb2:	85 c9                	test   ecx,ecx
c0012fb4:	74 22                	je     c0012fd8 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0012fb6:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0012fb9:	85 db                	test   ebx,ebx
c0012fbb:	74 1b                	je     c0012fd8 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0012fbd:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0012fc3:	85 d2                	test   edx,edx
c0012fc5:	74 11                	je     c0012fd8 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0012fc7:	8b 32                	mov    esi,DWORD PTR [edx]
c0012fc9:	53                   	push   ebx
c0012fca:	50                   	push   eax
c0012fcb:	51                   	push   ecx
c0012fcc:	52                   	push   edx
c0012fcd:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0012fd0:	83 c4 10             	add    esp,0x10
c0012fd3:	99                   	cdq    
c0012fd4:	59                   	pop    ecx
c0012fd5:	5b                   	pop    ebx
c0012fd6:	5e                   	pop    esi
c0012fd7:	c3                   	ret    
c0012fd8:	59                   	pop    ecx
c0012fd9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012fde:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012fe3:	5b                   	pop    ebx
c0012fe4:	5e                   	pop    esi
c0012fe5:	c3                   	ret    

c0012fe6 <sysGetDiskVolumeLabel(regs*)>:
c0012fe6:	57                   	push   edi
c0012fe7:	56                   	push   esi
c0012fe8:	53                   	push   ebx
c0012fe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fed:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0012ff0:	83 fa 19             	cmp    edx,0x19
c0012ff3:	77 38                	ja     c001302d <sysGetDiskVolumeLabel(regs*)+0x47>
c0012ff5:	8b 0c 95 40 57 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffda8c0]
c0012ffc:	85 c9                	test   ecx,ecx
c0012ffe:	74 2d                	je     c001302d <sysGetDiskVolumeLabel(regs*)+0x47>
c0013000:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0013003:	85 db                	test   ebx,ebx
c0013005:	74 26                	je     c001302d <sysGetDiskVolumeLabel(regs*)+0x47>
c0013007:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001300a:	85 f6                	test   esi,esi
c001300c:	74 1f                	je     c001302d <sysGetDiskVolumeLabel(regs*)+0x47>
c001300e:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0013014:	85 c0                	test   eax,eax
c0013016:	74 15                	je     c001302d <sysGetDiskVolumeLabel(regs*)+0x47>
c0013018:	83 ec 0c             	sub    esp,0xc
c001301b:	8b 38                	mov    edi,DWORD PTR [eax]
c001301d:	56                   	push   esi
c001301e:	53                   	push   ebx
c001301f:	52                   	push   edx
c0013020:	51                   	push   ecx
c0013021:	50                   	push   eax
c0013022:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0013025:	83 c4 20             	add    esp,0x20
c0013028:	99                   	cdq    
c0013029:	5b                   	pop    ebx
c001302a:	5e                   	pop    esi
c001302b:	5f                   	pop    edi
c001302c:	c3                   	ret    
c001302d:	5b                   	pop    ebx
c001302e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013033:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013038:	5e                   	pop    esi
c0013039:	5f                   	pop    edi
c001303a:	c3                   	ret    

c001303b <sysShutdown(regs*)>:
c001303b:	83 ec 0c             	sub    esp,0xc
c001303e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013042:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013045:	85 c0                	test   eax,eax
c0013047:	74 18                	je     c0013061 <sysShutdown(regs*)+0x26>
c0013049:	83 f8 01             	cmp    eax,0x1
c001304c:	74 38                	je     c0013086 <sysShutdown(regs*)+0x4b>
c001304e:	83 f8 02             	cmp    eax,0x2
c0013051:	74 24                	je     c0013077 <sysShutdown(regs*)+0x3c>
c0013053:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013058:	ba ff ff ff ff       	mov    edx,0xffffffff
c001305d:	83 c4 0c             	add    esp,0xc
c0013060:	c3                   	ret    
c0013061:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c0013066:	8b 10                	mov    edx,DWORD PTR [eax]
c0013068:	6a 00                	push   0x0
c001306a:	6a 00                	push   0x0
c001306c:	6a 00                	push   0x0
c001306e:	50                   	push   eax
c001306f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0013072:	83 c4 10             	add    esp,0x10
c0013075:	eb dc                	jmp    c0013053 <sysShutdown(regs*)+0x18>
c0013077:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c001307c:	8b 10                	mov    edx,DWORD PTR [eax]
c001307e:	6a 00                	push   0x0
c0013080:	6a 00                	push   0x0
c0013082:	6a 01                	push   0x1
c0013084:	eb e8                	jmp    c001306e <sysShutdown(regs*)+0x33>
c0013086:	a1 c0 57 02 c0       	mov    eax,ds:0xc00257c0
c001308b:	85 c0                	test   eax,eax
c001308d:	74 02                	je     c0013091 <sysShutdown(regs*)+0x56>
c001308f:	ff d0                	call   eax
c0013091:	31 c0                	xor    eax,eax
c0013093:	31 d2                	xor    edx,edx
c0013095:	83 c4 0c             	add    esp,0xc
c0013098:	c3                   	ret    

c0013099 <sysCallRealpath(regs*)>:
c0013099:	83 ec 0c             	sub    esp,0xc
c001309c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130a0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00130a3:	85 d2                	test   edx,edx
c00130a5:	74 07                	je     c00130ae <sysCallRealpath(regs*)+0x15>
c00130a7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00130aa:	85 c0                	test   eax,eax
c00130ac:	75 0b                	jne    c00130b9 <sysCallRealpath(regs*)+0x20>
c00130ae:	b8 01 00 00 00       	mov    eax,0x1
c00130b3:	31 d2                	xor    edx,edx
c00130b5:	83 c4 0c             	add    esp,0xc
c00130b8:	c3                   	ret    
c00130b9:	51                   	push   ecx
c00130ba:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00130c0:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00130c3:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00130c9:	51                   	push   ecx
c00130ca:	52                   	push   edx
c00130cb:	50                   	push   eax
c00130cc:	e8 eb 97 ff ff       	call   c000c8bc <Fs::standardiseFiles(char*, char const*, char const*)>
c00130d1:	83 c4 10             	add    esp,0x10
c00130d4:	31 c0                	xor    eax,eax
c00130d6:	31 d2                	xor    edx,edx
c00130d8:	83 c4 0c             	add    esp,0xc
c00130db:	c3                   	ret    

c00130dc <sysCallReadDir(regs*)>:
c00130dc:	53                   	push   ebx
c00130dd:	83 ec 18             	sub    esp,0x18
c00130e0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00130e4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00130e7:	83 f8 02             	cmp    eax,0x2
c00130ea:	76 60                	jbe    c001314c <sysCallReadDir(regs*)+0x70>
c00130ec:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00130f3:	77 48                	ja     c001313d <sysCallReadDir(regs*)+0x61>
c00130f5:	83 ec 0c             	sub    esp,0xc
c00130f8:	50                   	push   eax
c00130f9:	e8 45 80 ff ff       	call   c000b143 <getFromFileDescriptor(int)>
c00130fe:	83 c4 10             	add    esp,0x10
c0013101:	85 c0                	test   eax,eax
c0013103:	74 38                	je     c001313d <sysCallReadDir(regs*)+0x61>
c0013105:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001310d:	83 ec 0c             	sub    esp,0xc
c0013110:	8b 10                	mov    edx,DWORD PTR [eax]
c0013112:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0013116:	51                   	push   ecx
c0013117:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001311a:	6a 00                	push   0x0
c001311c:	68 10 01 00 00       	push   0x110
c0013121:	50                   	push   eax
c0013122:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0013125:	83 c4 20             	add    esp,0x20
c0013128:	85 c0                	test   eax,eax
c001312a:	74 29                	je     c0013155 <sysCallReadDir(regs*)+0x79>
c001312c:	83 f8 07             	cmp    eax,0x7
c001312f:	74 1b                	je     c001314c <sysCallReadDir(regs*)+0x70>
c0013131:	b8 02 00 00 00       	mov    eax,0x2
c0013136:	31 d2                	xor    edx,edx
c0013138:	83 c4 18             	add    esp,0x18
c001313b:	5b                   	pop    ebx
c001313c:	c3                   	ret    
c001313d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013142:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013147:	83 c4 18             	add    esp,0x18
c001314a:	5b                   	pop    ebx
c001314b:	c3                   	ret    
c001314c:	b8 01 00 00 00       	mov    eax,0x1
c0013151:	31 d2                	xor    edx,edx
c0013153:	eb e3                	jmp    c0013138 <sysCallReadDir(regs*)+0x5c>
c0013155:	31 c0                	xor    eax,eax
c0013157:	31 d2                	xor    edx,edx
c0013159:	eb dd                	jmp    c0013138 <sysCallReadDir(regs*)+0x5c>

c001315b <sysCallIsATTY(regs*)>:
c001315b:	83 ec 0c             	sub    esp,0xc
c001315e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013162:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013165:	83 f8 02             	cmp    eax,0x2
c0013168:	76 07                	jbe    c0013171 <sysCallIsATTY(regs*)+0x16>
c001316a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001316f:	75 26                	jne    c0013197 <sysCallIsATTY(regs*)+0x3c>
c0013171:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013176:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013179:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001317f:	85 c0                	test   eax,eax
c0013181:	74 24                	je     c00131a7 <sysCallIsATTY(regs*)+0x4c>
c0013183:	83 ec 0c             	sub    esp,0xc
c0013186:	8b 10                	mov    edx,DWORD PTR [eax]
c0013188:	50                   	push   eax
c0013189:	ff 12                	call   DWORD PTR [edx]
c001318b:	31 d2                	xor    edx,edx
c001318d:	0f b6 c0             	movzx  eax,al
c0013190:	83 c4 10             	add    esp,0x10
c0013193:	83 c4 0c             	add    esp,0xc
c0013196:	c3                   	ret    
c0013197:	83 ec 0c             	sub    esp,0xc
c001319a:	50                   	push   eax
c001319b:	e8 a3 7f ff ff       	call   c000b143 <getFromFileDescriptor(int)>
c00131a0:	83 c4 10             	add    esp,0x10
c00131a3:	85 c0                	test   eax,eax
c00131a5:	75 dc                	jne    c0013183 <sysCallIsATTY(regs*)+0x28>
c00131a7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00131ac:	ba ff ff ff ff       	mov    edx,0xffffffff
c00131b1:	83 c4 0c             	add    esp,0xc
c00131b4:	c3                   	ret    

c00131b5 <sysCallSeek(regs*)>:
c00131b5:	53                   	push   ebx
c00131b6:	83 ec 08             	sub    esp,0x8
c00131b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00131bd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00131c0:	8d 50 fd             	lea    edx,[eax-0x3]
c00131c3:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00131c9:	77 32                	ja     c00131fd <sysCallSeek(regs*)+0x48>
c00131cb:	83 ec 0c             	sub    esp,0xc
c00131ce:	50                   	push   eax
c00131cf:	e8 6f 7f ff ff       	call   c000b143 <getFromFileDescriptor(int)>
c00131d4:	83 c4 0c             	add    esp,0xc
c00131d7:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00131da:	31 db                	xor    ebx,ebx
c00131dc:	53                   	push   ebx
c00131dd:	51                   	push   ecx
c00131de:	50                   	push   eax
c00131df:	e8 fa 99 ff ff       	call   c000cbde <File::seek(unsigned long long)>
c00131e4:	83 c4 10             	add    esp,0x10
c00131e7:	85 c0                	test   eax,eax
c00131e9:	0f 95 c0             	setne  al
c00131ec:	31 d2                	xor    edx,edx
c00131ee:	0f b6 c0             	movzx  eax,al
c00131f1:	f7 d8                	neg    eax
c00131f3:	83 d2 00             	adc    edx,0x0
c00131f6:	83 c4 08             	add    esp,0x8
c00131f9:	f7 da                	neg    edx
c00131fb:	5b                   	pop    ebx
c00131fc:	c3                   	ret    
c00131fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013202:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013207:	83 c4 08             	add    esp,0x8
c001320a:	5b                   	pop    ebx
c001320b:	c3                   	ret    

c001320c <sysCallTell(regs*)>:
c001320c:	53                   	push   ebx
c001320d:	83 ec 08             	sub    esp,0x8
c0013210:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013214:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013217:	83 f8 02             	cmp    eax,0x2
c001321a:	76 4d                	jbe    c0013269 <sysCallTell(regs*)+0x5d>
c001321c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0013221:	76 19                	jbe    c001323c <sysCallTell(regs*)+0x30>
c0013223:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0013226:	31 d2                	xor    edx,edx
c0013228:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001322e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013235:	31 c0                	xor    eax,eax
c0013237:	83 c4 08             	add    esp,0x8
c001323a:	5b                   	pop    ebx
c001323b:	c3                   	ret    
c001323c:	83 ec 0c             	sub    esp,0xc
c001323f:	50                   	push   eax
c0013240:	e8 fe 7e ff ff       	call   c000b143 <getFromFileDescriptor(int)>
c0013245:	5a                   	pop    edx
c0013246:	59                   	pop    ecx
c0013247:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001324a:	50                   	push   eax
c001324b:	e8 e4 99 ff ff       	call   c000cc34 <File::tell(unsigned long long*)>
c0013250:	83 c4 10             	add    esp,0x10
c0013253:	85 c0                	test   eax,eax
c0013255:	0f 95 c0             	setne  al
c0013258:	31 d2                	xor    edx,edx
c001325a:	0f b6 c0             	movzx  eax,al
c001325d:	f7 d8                	neg    eax
c001325f:	83 d2 00             	adc    edx,0x0
c0013262:	83 c4 08             	add    esp,0x8
c0013265:	f7 da                	neg    edx
c0013267:	5b                   	pop    ebx
c0013268:	c3                   	ret    
c0013269:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001326e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013273:	83 c4 08             	add    esp,0x8
c0013276:	5b                   	pop    ebx
c0013277:	c3                   	ret    

c0013278 <sysCallSize(regs*)>:
c0013278:	53                   	push   ebx
c0013279:	83 ec 18             	sub    esp,0x18
c001327c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013280:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013283:	83 f8 02             	cmp    eax,0x2
c0013286:	76 53                	jbe    c00132db <sysCallSize(regs*)+0x63>
c0013288:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001328d:	76 19                	jbe    c00132a8 <sysCallSize(regs*)+0x30>
c001328f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0013292:	31 d2                	xor    edx,edx
c0013294:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001329a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00132a1:	31 c0                	xor    eax,eax
c00132a3:	83 c4 18             	add    esp,0x18
c00132a6:	5b                   	pop    ebx
c00132a7:	c3                   	ret    
c00132a8:	83 ec 0c             	sub    esp,0xc
c00132ab:	50                   	push   eax
c00132ac:	e8 92 7e ff ff       	call   c000b143 <getFromFileDescriptor(int)>
c00132b1:	83 c4 0c             	add    esp,0xc
c00132b4:	8d 54 24 13          	lea    edx,[esp+0x13]
c00132b8:	52                   	push   edx
c00132b9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00132bc:	50                   	push   eax
c00132bd:	e8 0a 9b ff ff       	call   c000cdcc <File::stat(unsigned long long*, bool*)>
c00132c2:	83 c4 10             	add    esp,0x10
c00132c5:	85 c0                	test   eax,eax
c00132c7:	0f 95 c0             	setne  al
c00132ca:	31 d2                	xor    edx,edx
c00132cc:	0f b6 c0             	movzx  eax,al
c00132cf:	f7 d8                	neg    eax
c00132d1:	83 d2 00             	adc    edx,0x0
c00132d4:	83 c4 18             	add    esp,0x18
c00132d7:	f7 da                	neg    edx
c00132d9:	5b                   	pop    ebx
c00132da:	c3                   	ret    
c00132db:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00132e0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00132e5:	83 c4 18             	add    esp,0x18
c00132e8:	5b                   	pop    ebx
c00132e9:	c3                   	ret    

c00132ea <sysCallSizeFromFilename(regs*)>:
c00132ea:	57                   	push   edi
c00132eb:	56                   	push   esi
c00132ec:	53                   	push   ebx
c00132ed:	83 ec 20             	sub    esp,0x20
c00132f0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00132f4:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00132f7:	83 fb 02             	cmp    ebx,0x2
c00132fa:	0f 86 88 00 00 00    	jbe    c0013388 <sysCallSizeFromFilename(regs*)+0x9e>
c0013300:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0013306:	76 1b                	jbe    c0013323 <sysCallSizeFromFilename(regs*)+0x39>
c0013308:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001330b:	31 d2                	xor    edx,edx
c001330d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013313:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001331a:	83 c4 20             	add    esp,0x20
c001331d:	31 c0                	xor    eax,eax
c001331f:	5b                   	pop    ebx
c0013320:	5e                   	pop    esi
c0013321:	5f                   	pop    edi
c0013322:	c3                   	ret    
c0013323:	83 ec 0c             	sub    esp,0xc
c0013326:	68 14 01 00 00       	push   0x114
c001332b:	e8 41 64 ff ff       	call   c0009771 <malloc>
c0013330:	83 c4 0c             	add    esp,0xc
c0013333:	89 c7                	mov    edi,eax
c0013335:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001333a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001333d:	53                   	push   ebx
c001333e:	57                   	push   edi
c001333f:	e8 22 97 ff ff       	call   c000ca66 <File::File(char const*, Process*)>
c0013344:	83 c4 0c             	add    esp,0xc
c0013347:	8d 44 24 23          	lea    eax,[esp+0x23]
c001334b:	50                   	push   eax
c001334c:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001334f:	57                   	push   edi
c0013350:	e8 77 9a ff ff       	call   c000cdcc <File::stat(unsigned long long*, bool*)>
c0013355:	83 c4 10             	add    esp,0x10
c0013358:	85 ff                	test   edi,edi
c001335a:	74 14                	je     c0013370 <sysCallSizeFromFilename(regs*)+0x86>
c001335c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013360:	8b 17                	mov    edx,DWORD PTR [edi]
c0013362:	83 ec 0c             	sub    esp,0xc
c0013365:	57                   	push   edi
c0013366:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0013369:	83 c4 10             	add    esp,0x10
c001336c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013370:	85 c0                	test   eax,eax
c0013372:	0f 95 c0             	setne  al
c0013375:	31 d2                	xor    edx,edx
c0013377:	0f b6 c0             	movzx  eax,al
c001337a:	f7 d8                	neg    eax
c001337c:	83 d2 00             	adc    edx,0x0
c001337f:	83 c4 20             	add    esp,0x20
c0013382:	f7 da                	neg    edx
c0013384:	5b                   	pop    ebx
c0013385:	5e                   	pop    esi
c0013386:	5f                   	pop    edi
c0013387:	c3                   	ret    
c0013388:	83 c4 20             	add    esp,0x20
c001338b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013390:	5b                   	pop    ebx
c0013391:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013396:	5e                   	pop    esi
c0013397:	5f                   	pop    edi
c0013398:	c3                   	ret    

c0013399 <sysCallClose(regs*)>:
c0013399:	53                   	push   ebx
c001339a:	83 ec 08             	sub    esp,0x8
c001339d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133a1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00133a4:	83 f8 02             	cmp    eax,0x2
c00133a7:	76 41                	jbe    c00133ea <sysCallClose(regs*)+0x51>
c00133a9:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00133af:	83 fa 01             	cmp    edx,0x1
c00133b2:	76 2d                	jbe    c00133e1 <sysCallClose(regs*)+0x48>
c00133b4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00133b9:	77 2f                	ja     c00133ea <sysCallClose(regs*)+0x51>
c00133bb:	83 ec 0c             	sub    esp,0xc
c00133be:	50                   	push   eax
c00133bf:	e8 7f 7d ff ff       	call   c000b143 <getFromFileDescriptor(int)>
c00133c4:	89 c3                	mov    ebx,eax
c00133c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00133c9:	e8 b0 97 ff ff       	call   c000cb7e <File::close()>
c00133ce:	83 c4 10             	add    esp,0x10
c00133d1:	85 db                	test   ebx,ebx
c00133d3:	74 0c                	je     c00133e1 <sysCallClose(regs*)+0x48>
c00133d5:	83 ec 0c             	sub    esp,0xc
c00133d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00133da:	53                   	push   ebx
c00133db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00133de:	83 c4 10             	add    esp,0x10
c00133e1:	31 c0                	xor    eax,eax
c00133e3:	31 d2                	xor    edx,edx
c00133e5:	83 c4 08             	add    esp,0x8
c00133e8:	5b                   	pop    ebx
c00133e9:	c3                   	ret    
c00133ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00133ef:	ba ff ff ff ff       	mov    edx,0xffffffff
c00133f4:	83 c4 08             	add    esp,0x8
c00133f7:	5b                   	pop    ebx
c00133f8:	c3                   	ret    

c00133f9 <sysCallOpenDir(regs*)>:
c00133f9:	56                   	push   esi
c00133fa:	53                   	push   ebx
c00133fb:	53                   	push   ebx
c00133fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013400:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0013403:	85 f6                	test   esi,esi
c0013405:	74 59                	je     c0013460 <sysCallOpenDir(regs*)+0x67>
c0013407:	83 ec 0c             	sub    esp,0xc
c001340a:	68 14 01 00 00       	push   0x114
c001340f:	e8 5d 63 ff ff       	call   c0009771 <malloc>
c0013414:	83 c4 0c             	add    esp,0xc
c0013417:	89 c6                	mov    esi,eax
c0013419:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001341e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013421:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013424:	56                   	push   esi
c0013425:	e8 60 9b ff ff       	call   c000cf8a <Directory::Directory(char const*, Process*)>
c001342a:	83 c4 10             	add    esp,0x10
c001342d:	85 f6                	test   esi,esi
c001342f:	74 2f                	je     c0013460 <sysCallOpenDir(regs*)+0x67>
c0013431:	83 ec 0c             	sub    esp,0xc
c0013434:	56                   	push   esi
c0013435:	e8 0a 9c ff ff       	call   c000d044 <Directory::open()>
c001343a:	83 c4 10             	add    esp,0x10
c001343d:	85 c0                	test   eax,eax
c001343f:	75 1f                	jne    c0013460 <sysCallOpenDir(regs*)+0x67>
c0013441:	83 ec 0c             	sub    esp,0xc
c0013444:	56                   	push   esi
c0013445:	e8 04 7a ff ff       	call   c000ae4e <UnixFile::getFileDescriptor()>
c001344a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001344d:	83 c4 10             	add    esp,0x10
c0013450:	89 02                	mov    DWORD PTR [edx],eax
c0013452:	c1 f8 1f             	sar    eax,0x1f
c0013455:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013458:	31 c0                	xor    eax,eax
c001345a:	59                   	pop    ecx
c001345b:	31 d2                	xor    edx,edx
c001345d:	5b                   	pop    ebx
c001345e:	5e                   	pop    esi
c001345f:	c3                   	ret    
c0013460:	59                   	pop    ecx
c0013461:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013466:	ba ff ff ff ff       	mov    edx,0xffffffff
c001346b:	5b                   	pop    ebx
c001346c:	5e                   	pop    esi
c001346d:	c3                   	ret    

c001346e <sysCallCloseDir(regs*)>:
c001346e:	53                   	push   ebx
c001346f:	83 ec 08             	sub    esp,0x8
c0013472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013476:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013479:	8d 50 fd             	lea    edx,[eax-0x3]
c001347c:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0013482:	77 2f                	ja     c00134b3 <sysCallCloseDir(regs*)+0x45>
c0013484:	83 ec 0c             	sub    esp,0xc
c0013487:	50                   	push   eax
c0013488:	e8 b6 7c ff ff       	call   c000b143 <getFromFileDescriptor(int)>
c001348d:	89 c3                	mov    ebx,eax
c001348f:	89 04 24             	mov    DWORD PTR [esp],eax
c0013492:	e8 09 9c ff ff       	call   c000d0a0 <Directory::close()>
c0013497:	83 c4 10             	add    esp,0x10
c001349a:	85 db                	test   ebx,ebx
c001349c:	74 0c                	je     c00134aa <sysCallCloseDir(regs*)+0x3c>
c001349e:	83 ec 0c             	sub    esp,0xc
c00134a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134a3:	53                   	push   ebx
c00134a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134a7:	83 c4 10             	add    esp,0x10
c00134aa:	31 c0                	xor    eax,eax
c00134ac:	31 d2                	xor    edx,edx
c00134ae:	83 c4 08             	add    esp,0x8
c00134b1:	5b                   	pop    ebx
c00134b2:	c3                   	ret    
c00134b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00134b8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00134bd:	83 c4 08             	add    esp,0x8
c00134c0:	5b                   	pop    ebx
c00134c1:	c3                   	ret    

c00134c2 <sysCallMakeDir(regs*)>:
c00134c2:	56                   	push   esi
c00134c3:	53                   	push   ebx
c00134c4:	83 ec 10             	sub    esp,0x10
c00134c7:	68 14 01 00 00       	push   0x114
c00134cc:	e8 a0 62 ff ff       	call   c0009771 <malloc>
c00134d1:	83 c4 0c             	add    esp,0xc
c00134d4:	89 c3                	mov    ebx,eax
c00134d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134db:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00134de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134e2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00134e5:	53                   	push   ebx
c00134e6:	e8 9f 9a ff ff       	call   c000cf8a <Directory::Directory(char const*, Process*)>
c00134eb:	83 c4 10             	add    esp,0x10
c00134ee:	85 db                	test   ebx,ebx
c00134f0:	74 32                	je     c0013524 <sysCallMakeDir(regs*)+0x62>
c00134f2:	83 ec 0c             	sub    esp,0xc
c00134f5:	53                   	push   ebx
c00134f6:	e8 29 9d ff ff       	call   c000d224 <Directory::create()>
c00134fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00134fe:	89 c6                	mov    esi,eax
c0013500:	e8 9b 9b ff ff       	call   c000d0a0 <Directory::close()>
c0013505:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013507:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001350a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001350d:	83 c4 10             	add    esp,0x10
c0013510:	31 c0                	xor    eax,eax
c0013512:	59                   	pop    ecx
c0013513:	85 f6                	test   esi,esi
c0013515:	5b                   	pop    ebx
c0013516:	0f 95 c0             	setne  al
c0013519:	5e                   	pop    esi
c001351a:	31 d2                	xor    edx,edx
c001351c:	f7 d8                	neg    eax
c001351e:	83 d2 00             	adc    edx,0x0
c0013521:	f7 da                	neg    edx
c0013523:	c3                   	ret    
c0013524:	59                   	pop    ecx
c0013525:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001352a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001352f:	5b                   	pop    ebx
c0013530:	5e                   	pop    esi
c0013531:	c3                   	ret    

c0013532 <sysCallWait(regs*)>:
c0013532:	83 ec 10             	sub    esp,0x10
c0013535:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013539:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001353c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001353f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013542:	e8 35 23 00 00       	call   c001587c <waitTask(int, int*, int)>
c0013547:	83 c4 1c             	add    esp,0x1c
c001354a:	99                   	cdq    
c001354b:	c3                   	ret    

c001354c <sysCallNotImpl(regs*)>:
c001354c:	83 ec 18             	sub    esp,0x18
c001354f:	68 8d 1b 02 c0       	push   0xc0021b8d
c0013554:	e8 78 ec ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c0013559:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001355e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013563:	83 c4 1c             	add    esp,0x1c
c0013566:	c3                   	ret    

c0013567 <sysPanic(regs*)>:
c0013567:	83 ec 18             	sub    esp,0x18
c001356a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001356e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013571:	e8 5b ec ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c0013576:	b8 01 00 00 00       	mov    eax,0x1
c001357b:	31 d2                	xor    edx,edx
c001357d:	83 c4 1c             	add    esp,0x1c
c0013580:	c3                   	ret    

c0013581 <sysCallRmdir(regs*)>:
c0013581:	56                   	push   esi
c0013582:	53                   	push   ebx
c0013583:	83 ec 20             	sub    esp,0x20
c0013586:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001358a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001358d:	68 14 01 00 00       	push   0x114
c0013592:	e8 da 61 ff ff       	call   c0009771 <malloc>
c0013597:	83 c4 0c             	add    esp,0xc
c001359a:	89 c3                	mov    ebx,eax
c001359c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135a1:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00135a4:	56                   	push   esi
c00135a5:	53                   	push   ebx
c00135a6:	e8 bb 94 ff ff       	call   c000ca66 <File::File(char const*, Process*)>
c00135ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00135ae:	e8 e5 96 ff ff       	call   c000cc98 <File::unlink()>
c00135b3:	83 c4 10             	add    esp,0x10
c00135b6:	85 db                	test   ebx,ebx
c00135b8:	74 14                	je     c00135ce <sysCallRmdir(regs*)+0x4d>
c00135ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00135be:	8b 13                	mov    edx,DWORD PTR [ebx]
c00135c0:	83 ec 0c             	sub    esp,0xc
c00135c3:	53                   	push   ebx
c00135c4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00135c7:	83 c4 10             	add    esp,0x10
c00135ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135ce:	85 c0                	test   eax,eax
c00135d0:	0f 95 c0             	setne  al
c00135d3:	31 d2                	xor    edx,edx
c00135d5:	0f b6 c0             	movzx  eax,al
c00135d8:	f7 d8                	neg    eax
c00135da:	83 d2 00             	adc    edx,0x0
c00135dd:	83 c4 14             	add    esp,0x14
c00135e0:	f7 da                	neg    edx
c00135e2:	5b                   	pop    ebx
c00135e3:	5e                   	pop    esi
c00135e4:	c3                   	ret    

c00135e5 <sysCallUnlink(regs*)>:
c00135e5:	56                   	push   esi
c00135e6:	53                   	push   ebx
c00135e7:	83 ec 20             	sub    esp,0x20
c00135ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00135ee:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00135f1:	68 14 01 00 00       	push   0x114
c00135f6:	e8 76 61 ff ff       	call   c0009771 <malloc>
c00135fb:	83 c4 0c             	add    esp,0xc
c00135fe:	89 c3                	mov    ebx,eax
c0013600:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013605:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013608:	56                   	push   esi
c0013609:	53                   	push   ebx
c001360a:	e8 57 94 ff ff       	call   c000ca66 <File::File(char const*, Process*)>
c001360f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013612:	e8 81 96 ff ff       	call   c000cc98 <File::unlink()>
c0013617:	83 c4 10             	add    esp,0x10
c001361a:	85 db                	test   ebx,ebx
c001361c:	74 14                	je     c0013632 <sysCallUnlink(regs*)+0x4d>
c001361e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013622:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013624:	83 ec 0c             	sub    esp,0xc
c0013627:	53                   	push   ebx
c0013628:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001362b:	83 c4 10             	add    esp,0x10
c001362e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013632:	85 c0                	test   eax,eax
c0013634:	0f 95 c0             	setne  al
c0013637:	31 d2                	xor    edx,edx
c0013639:	0f b6 c0             	movzx  eax,al
c001363c:	f7 d8                	neg    eax
c001363e:	83 d2 00             	adc    edx,0x0
c0013641:	83 c4 14             	add    esp,0x14
c0013644:	f7 da                	neg    edx
c0013646:	5b                   	pop    ebx
c0013647:	5e                   	pop    esi
c0013648:	c3                   	ret    

c0013649 <sysCallGetArgv(regs*)>:
c0013649:	83 ec 0c             	sub    esp,0xc
c001364c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013650:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0013653:	85 c0                	test   eax,eax
c0013655:	78 2b                	js     c0013682 <sysCallGetArgv(regs*)+0x39>
c0013657:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001365d:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0013660:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0013666:	7d 1a                	jge    c0013682 <sysCallGetArgv(regs*)+0x39>
c0013668:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001366f:	85 c0                	test   eax,eax
c0013671:	74 17                	je     c001368a <sysCallGetArgv(regs*)+0x41>
c0013673:	83 ec 08             	sub    esp,0x8
c0013676:	50                   	push   eax
c0013677:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001367a:	e8 e5 ce fe ff       	call   c0000564 <strcpy>
c001367f:	83 c4 10             	add    esp,0x10
c0013682:	31 c0                	xor    eax,eax
c0013684:	31 d2                	xor    edx,edx
c0013686:	83 c4 0c             	add    esp,0xc
c0013689:	c3                   	ret    
c001368a:	b8 01 00 00 00       	mov    eax,0x1
c001368f:	31 d2                	xor    edx,edx
c0013691:	83 c4 0c             	add    esp,0xc
c0013694:	c3                   	ret    

c0013695 <sysCallUSleep(regs*)>:
c0013695:	83 ec 1c             	sub    esp,0x1c
c0013698:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001369c:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001369f:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00136a2:	6a 00                	push   0x0
c00136a4:	6a 64                	push   0x64
c00136a6:	52                   	push   edx
c00136a7:	50                   	push   eax
c00136a8:	e8 43 bc 00 00       	call   c001f2f0 <__udivdi3>
c00136ad:	83 c4 14             	add    esp,0x14
c00136b0:	50                   	push   eax
c00136b1:	e8 96 22 00 00       	call   c001594c <milliTenthSleep(unsigned int)>
c00136b6:	31 c0                	xor    eax,eax
c00136b8:	31 d2                	xor    edx,edx
c00136ba:	83 c4 1c             	add    esp,0x1c
c00136bd:	c3                   	ret    

c00136be <sysCallSpawn(regs*)>:
c00136be:	56                   	push   esi
c00136bf:	53                   	push   ebx
c00136c0:	50                   	push   eax
c00136c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136c5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00136c8:	85 c0                	test   eax,eax
c00136ca:	75 08                	jne    c00136d4 <sysCallSpawn(regs*)+0x16>
c00136cc:	59                   	pop    ecx
c00136cd:	31 c0                	xor    eax,eax
c00136cf:	31 d2                	xor    edx,edx
c00136d1:	5b                   	pop    ebx
c00136d2:	5e                   	pop    esi
c00136d3:	c3                   	ret    
c00136d4:	83 ec 0c             	sub    esp,0xc
c00136d7:	68 1f 07 00 00       	push   0x71f
c00136dc:	e8 90 60 ff ff       	call   c0009771 <malloc>
c00136e1:	83 c4 10             	add    esp,0x10
c00136e4:	89 c6                	mov    esi,eax
c00136e6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00136e9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00136ec:	85 c0                	test   eax,eax
c00136ee:	75 32                	jne    c0013722 <sysCallSpawn(regs*)+0x64>
c00136f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136f5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00136f8:	52                   	push   edx
c00136f9:	50                   	push   eax
c00136fa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00136fd:	56                   	push   esi
c00136fe:	e8 41 19 00 00       	call   c0015044 <Process::Process(char const*, Process*, char**)>
c0013703:	83 c4 10             	add    esp,0x10
c0013706:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001370d:	75 bd                	jne    c00136cc <sysCallSpawn(regs*)+0xe>
c001370f:	83 ec 0c             	sub    esp,0xc
c0013712:	56                   	push   esi
c0013713:	e8 18 1e 00 00       	call   c0015530 <Process::createUserThread()>
c0013718:	8b 06                	mov    eax,DWORD PTR [esi]
c001371a:	83 c4 10             	add    esp,0x10
c001371d:	99                   	cdq    
c001371e:	59                   	pop    ecx
c001371f:	5b                   	pop    ebx
c0013720:	5e                   	pop    esi
c0013721:	c3                   	ret    
c0013722:	31 c0                	xor    eax,eax
c0013724:	eb d2                	jmp    c00136f8 <sysCallSpawn(regs*)+0x3a>

c0013726 <sysCallGetEnv(regs*)>:
c0013726:	57                   	push   edi
c0013727:	56                   	push   esi
c0013728:	53                   	push   ebx
c0013729:	83 ec 1c             	sub    esp,0x1c
c001372c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013730:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013735:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013738:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001373b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001373e:	e8 da e9 ff ff       	call   c001211d <Krnl::getProcessTotalEnvCount(Process*)>
c0013743:	83 c4 10             	add    esp,0x10
c0013746:	39 c7                	cmp    edi,eax
c0013748:	7c 14                	jl     c001375e <sysCallGetEnv(regs*)+0x38>
c001374a:	85 f6                	test   esi,esi
c001374c:	75 0b                	jne    c0013759 <sysCallGetEnv(regs*)+0x33>
c001374e:	83 c4 10             	add    esp,0x10
c0013751:	31 c0                	xor    eax,eax
c0013753:	5b                   	pop    ebx
c0013754:	31 d2                	xor    edx,edx
c0013756:	5e                   	pop    esi
c0013757:	5f                   	pop    edi
c0013758:	c3                   	ret    
c0013759:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001375c:	eb f0                	jmp    c001374e <sysCallGetEnv(regs*)+0x28>
c001375e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0013762:	52                   	push   edx
c0013763:	57                   	push   edi
c0013764:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001376a:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c001376d:	50                   	push   eax
c001376e:	e8 ca e9 ff ff       	call   c001213d <Krnl::getProcessEnvPair(Process*, int)>
c0013773:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013776:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001377a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001377e:	83 c4 0c             	add    esp,0xc
c0013781:	85 c9                	test   ecx,ecx
c0013783:	75 23                	jne    c00137a8 <sysCallGetEnv(regs*)+0x82>
c0013785:	83 ec 0c             	sub    esp,0xc
c0013788:	50                   	push   eax
c0013789:	e8 36 cd fe ff       	call   c00004c4 <strlen>
c001378e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013791:	89 c3                	mov    ebx,eax
c0013793:	e8 2c cd fe ff       	call   c00004c4 <strlen>
c0013798:	83 c4 10             	add    esp,0x10
c001379b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001379f:	83 c4 10             	add    esp,0x10
c00137a2:	31 d2                	xor    edx,edx
c00137a4:	5b                   	pop    ebx
c00137a5:	5e                   	pop    esi
c00137a6:	5f                   	pop    edi
c00137a7:	c3                   	ret    
c00137a8:	83 ec 08             	sub    esp,0x8
c00137ab:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00137ae:	50                   	push   eax
c00137af:	56                   	push   esi
c00137b0:	e8 af cd fe ff       	call   c0000564 <strcpy>
c00137b5:	58                   	pop    eax
c00137b6:	5a                   	pop    edx
c00137b7:	68 a7 1b 02 c0       	push   0xc0021ba7
c00137bc:	56                   	push   esi
c00137bd:	e8 e2 ce fe ff       	call   c00006a4 <strcat>
c00137c2:	59                   	pop    ecx
c00137c3:	5b                   	pop    ebx
c00137c4:	57                   	push   edi
c00137c5:	56                   	push   esi
c00137c6:	e8 d9 ce fe ff       	call   c00006a4 <strcat>
c00137cb:	83 c4 10             	add    esp,0x10
c00137ce:	e9 7b ff ff ff       	jmp    c001374e <sysCallGetEnv(regs*)+0x28>

c00137d3 <sysSetFatAttrib(regs*)>:
c00137d3:	57                   	push   edi
c00137d4:	56                   	push   esi
c00137d5:	53                   	push   ebx
c00137d6:	83 ec 1c             	sub    esp,0x1c
c00137d9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00137dd:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00137e0:	68 14 01 00 00       	push   0x114
c00137e5:	e8 87 5f ff ff       	call   c0009771 <malloc>
c00137ea:	83 c4 0c             	add    esp,0xc
c00137ed:	89 c3                	mov    ebx,eax
c00137ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137f4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00137f7:	57                   	push   edi
c00137f8:	53                   	push   ebx
c00137f9:	e8 68 92 ff ff       	call   c000ca66 <File::File(char const*, Process*)>
c00137fe:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013801:	83 c4 0c             	add    esp,0xc
c0013804:	0f b6 d4             	movzx  edx,ah
c0013807:	0f b6 c0             	movzx  eax,al
c001380a:	52                   	push   edx
c001380b:	50                   	push   eax
c001380c:	53                   	push   ebx
c001380d:	e8 20 95 ff ff       	call   c000cd32 <File::chfatattr(unsigned char, unsigned char)>
c0013812:	83 c4 10             	add    esp,0x10
c0013815:	85 db                	test   ebx,ebx
c0013817:	74 14                	je     c001382d <sysSetFatAttrib(regs*)+0x5a>
c0013819:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001381d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001381f:	83 ec 0c             	sub    esp,0xc
c0013822:	53                   	push   ebx
c0013823:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0013826:	83 c4 10             	add    esp,0x10
c0013829:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001382d:	85 c0                	test   eax,eax
c001382f:	0f 95 c0             	setne  al
c0013832:	31 d2                	xor    edx,edx
c0013834:	0f b6 c0             	movzx  eax,al
c0013837:	f7 d8                	neg    eax
c0013839:	83 d2 00             	adc    edx,0x0
c001383c:	83 c4 10             	add    esp,0x10
c001383f:	f7 da                	neg    edx
c0013841:	5b                   	pop    ebx
c0013842:	5e                   	pop    esi
c0013843:	5f                   	pop    edi
c0013844:	c3                   	ret    

c0013845 <sysPipe(regs*)>:
c0013845:	57                   	push   edi
c0013846:	56                   	push   esi
c0013847:	53                   	push   ebx
c0013848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001384c:	83 ec 0c             	sub    esp,0xc
c001384f:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0013852:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0013855:	6a 20                	push   0x20
c0013857:	e8 15 5f ff ff       	call   c0009771 <malloc>
c001385c:	89 c3                	mov    ebx,eax
c001385e:	58                   	pop    eax
c001385f:	5a                   	pop    edx
c0013860:	68 00 50 00 00       	push   0x5000
c0013865:	53                   	push   ebx
c0013866:	e8 ed 68 ff ff       	call   c000a158 <Pipe::Pipe(int)>
c001386b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001386e:	e8 db 75 ff ff       	call   c000ae4e <UnixFile::getFileDescriptor()>
c0013873:	89 07                	mov    DWORD PTR [edi],eax
c0013875:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013878:	e8 d1 75 ff ff       	call   c000ae4e <UnixFile::getFileDescriptor()>
c001387d:	83 c4 10             	add    esp,0x10
c0013880:	89 06                	mov    DWORD PTR [esi],eax
c0013882:	31 d2                	xor    edx,edx
c0013884:	5b                   	pop    ebx
c0013885:	31 c0                	xor    eax,eax
c0013887:	5e                   	pop    esi
c0013888:	5f                   	pop    edi
c0013889:	c3                   	ret    

c001388a <sysGetUnixTime(regs*)>:
c001388a:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c001388f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013895:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013899:	e9 cc 9b ff ff       	jmp    c000d46a <Clock::timeInSecondsLocal()>

c001389e <string_ends_with(char const*, char const*)>:
c001389e:	57                   	push   edi
c001389f:	56                   	push   esi
c00138a0:	53                   	push   ebx
c00138a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138a5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00138a9:	83 ec 0c             	sub    esp,0xc
c00138ac:	53                   	push   ebx
c00138ad:	e8 12 cc fe ff       	call   c00004c4 <strlen>
c00138b2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00138b5:	89 c6                	mov    esi,eax
c00138b7:	e8 08 cc fe ff       	call   c00004c4 <strlen>
c00138bc:	83 c4 10             	add    esp,0x10
c00138bf:	39 c6                	cmp    esi,eax
c00138c1:	7d 06                	jge    c00138c9 <string_ends_with(char const*, char const*)+0x2b>
c00138c3:	5b                   	pop    ebx
c00138c4:	31 c0                	xor    eax,eax
c00138c6:	5e                   	pop    esi
c00138c7:	5f                   	pop    edi
c00138c8:	c3                   	ret    
c00138c9:	83 ec 08             	sub    esp,0x8
c00138cc:	29 c6                	sub    esi,eax
c00138ce:	57                   	push   edi
c00138cf:	01 f3                	add    ebx,esi
c00138d1:	53                   	push   ebx
c00138d2:	e8 19 cd fe ff       	call   c00005f0 <strcmp>
c00138d7:	83 c4 10             	add    esp,0x10
c00138da:	85 c0                	test   eax,eax
c00138dc:	5b                   	pop    ebx
c00138dd:	0f 94 c0             	sete   al
c00138e0:	5e                   	pop    esi
c00138e1:	0f b6 c0             	movzx  eax,al
c00138e4:	5f                   	pop    edi
c00138e5:	c3                   	ret    

c00138e6 <sysCallOpen(regs*)>:
c00138e6:	56                   	push   esi
c00138e7:	53                   	push   ebx
c00138e8:	81 ec 04 01 00 00    	sub    esp,0x104
c00138ee:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00138f5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00138f8:	85 c9                	test   ecx,ecx
c00138fa:	0f 84 ad 01 00 00    	je     c0013aad <sysCallOpen(regs*)+0x1c7>
c0013900:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0013903:	85 c0                	test   eax,eax
c0013905:	0f 84 a2 01 00 00    	je     c0013aad <sysCallOpen(regs*)+0x1c7>
c001390b:	52                   	push   edx
c001390c:	68 a9 1b 02 c0       	push   0xc0021ba9
c0013911:	50                   	push   eax
c0013912:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013916:	56                   	push   esi
c0013917:	e8 a0 8f ff ff       	call   c000c8bc <Fs::standardiseFiles(char*, char const*, char const*)>
c001391c:	89 34 24             	mov    DWORD PTR [esp],esi
c001391f:	e8 a0 cb fe ff       	call   c00004c4 <strlen>
c0013924:	83 c4 10             	add    esp,0x10
c0013927:	48                   	dec    eax
c0013928:	74 1d                	je     c0013947 <sysCallOpen(regs*)+0x61>
c001392a:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001392d:	eb 0f                	jmp    c001393e <sysCallOpen(regs*)+0x58>
c001392f:	80 fa 3a             	cmp    dl,0x3a
c0013932:	74 0f                	je     c0013943 <sysCallOpen(regs*)+0x5d>
c0013934:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0013938:	48                   	dec    eax
c0013939:	74 0c                	je     c0013947 <sysCallOpen(regs*)+0x61>
c001393b:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001393e:	80 fa 2e             	cmp    dl,0x2e
c0013941:	75 ec                	jne    c001392f <sysCallOpen(regs*)+0x49>
c0013943:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0013947:	83 ec 08             	sub    esp,0x8
c001394a:	68 ad 1b 02 c0       	push   0xc0021bad
c001394f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013952:	e8 47 ff ff ff       	call   c001389e <string_ends_with(char const*, char const*)>
c0013957:	83 c4 10             	add    esp,0x10
c001395a:	85 c0                	test   eax,eax
c001395c:	74 1d                	je     c001397b <sysCallOpen(regs*)+0x95>
c001395e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013961:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0013967:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001396e:	81 c4 04 01 00 00    	add    esp,0x104
c0013974:	31 c0                	xor    eax,eax
c0013976:	31 d2                	xor    edx,edx
c0013978:	5b                   	pop    ebx
c0013979:	5e                   	pop    esi
c001397a:	c3                   	ret    
c001397b:	83 ec 08             	sub    esp,0x8
c001397e:	68 b2 1b 02 c0       	push   0xc0021bb2
c0013983:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013986:	e8 13 ff ff ff       	call   c001389e <string_ends_with(char const*, char const*)>
c001398b:	83 c4 10             	add    esp,0x10
c001398e:	85 c0                	test   eax,eax
c0013990:	75 cc                	jne    c001395e <sysCallOpen(regs*)+0x78>
c0013992:	83 ec 08             	sub    esp,0x8
c0013995:	68 ae 1b 02 c0       	push   0xc0021bae
c001399a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001399d:	e8 4e cc fe ff       	call   c00005f0 <strcmp>
c00139a2:	83 c4 10             	add    esp,0x10
c00139a5:	85 c0                	test   eax,eax
c00139a7:	74 b5                	je     c001395e <sysCallOpen(regs*)+0x78>
c00139a9:	83 ec 08             	sub    esp,0x8
c00139ac:	68 ad 1b 02 c0       	push   0xc0021bad
c00139b1:	56                   	push   esi
c00139b2:	e8 e7 fe ff ff       	call   c001389e <string_ends_with(char const*, char const*)>
c00139b7:	83 c4 10             	add    esp,0x10
c00139ba:	85 c0                	test   eax,eax
c00139bc:	75 a0                	jne    c001395e <sysCallOpen(regs*)+0x78>
c00139be:	83 ec 08             	sub    esp,0x8
c00139c1:	68 b7 1b 02 c0       	push   0xc0021bb7
c00139c6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00139c9:	e8 d0 fe ff ff       	call   c001389e <string_ends_with(char const*, char const*)>
c00139ce:	83 c4 10             	add    esp,0x10
c00139d1:	85 c0                	test   eax,eax
c00139d3:	0f 85 e7 00 00 00    	jne    c0013ac0 <sysCallOpen(regs*)+0x1da>
c00139d9:	83 ec 08             	sub    esp,0x8
c00139dc:	68 bc 1b 02 c0       	push   0xc0021bbc
c00139e1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00139e4:	e8 b5 fe ff ff       	call   c001389e <string_ends_with(char const*, char const*)>
c00139e9:	83 c4 10             	add    esp,0x10
c00139ec:	85 c0                	test   eax,eax
c00139ee:	0f 85 cc 00 00 00    	jne    c0013ac0 <sysCallOpen(regs*)+0x1da>
c00139f4:	83 ec 08             	sub    esp,0x8
c00139f7:	68 b8 1b 02 c0       	push   0xc0021bb8
c00139fc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00139ff:	e8 ec cb fe ff       	call   c00005f0 <strcmp>
c0013a04:	83 c4 10             	add    esp,0x10
c0013a07:	85 c0                	test   eax,eax
c0013a09:	0f 84 b1 00 00 00    	je     c0013ac0 <sysCallOpen(regs*)+0x1da>
c0013a0f:	83 ec 08             	sub    esp,0x8
c0013a12:	68 b7 1b 02 c0       	push   0xc0021bb7
c0013a17:	56                   	push   esi
c0013a18:	e8 81 fe ff ff       	call   c001389e <string_ends_with(char const*, char const*)>
c0013a1d:	83 c4 10             	add    esp,0x10
c0013a20:	85 c0                	test   eax,eax
c0013a22:	0f 85 98 00 00 00    	jne    c0013ac0 <sysCallOpen(regs*)+0x1da>
c0013a28:	83 ec 0c             	sub    esp,0xc
c0013a2b:	68 14 01 00 00       	push   0x114
c0013a30:	e8 3c 5d ff ff       	call   c0009771 <malloc>
c0013a35:	83 c4 0c             	add    esp,0xc
c0013a38:	89 c6                	mov    esi,eax
c0013a3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a3f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013a42:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013a45:	56                   	push   esi
c0013a46:	e8 1b 90 ff ff       	call   c000ca66 <File::File(char const*, Process*)>
c0013a4b:	83 c4 10             	add    esp,0x10
c0013a4e:	85 f6                	test   esi,esi
c0013a50:	74 5b                	je     c0013aad <sysCallOpen(regs*)+0x1c7>
c0013a52:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0013a55:	0f b6 c2             	movzx  eax,dl
c0013a58:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0013a5b:	89 d0                	mov    eax,edx
c0013a5d:	83 e0 01             	and    eax,0x1
c0013a60:	f6 c2 02             	test   dl,0x2
c0013a63:	74 03                	je     c0013a68 <sysCallOpen(regs*)+0x182>
c0013a65:	83 c8 02             	or     eax,0x2
c0013a68:	f6 c2 04             	test   dl,0x4
c0013a6b:	74 03                	je     c0013a70 <sysCallOpen(regs*)+0x18a>
c0013a6d:	83 c8 04             	or     eax,0x4
c0013a70:	f6 c2 08             	test   dl,0x8
c0013a73:	74 03                	je     c0013a78 <sysCallOpen(regs*)+0x192>
c0013a75:	83 c8 0a             	or     eax,0xa
c0013a78:	83 e2 10             	and    edx,0x10
c0013a7b:	74 03                	je     c0013a80 <sysCallOpen(regs*)+0x19a>
c0013a7d:	83 c8 12             	or     eax,0x12
c0013a80:	83 ec 08             	sub    esp,0x8
c0013a83:	50                   	push   eax
c0013a84:	56                   	push   esi
c0013a85:	e8 96 90 ff ff       	call   c000cb20 <File::open(FileOpenMode)>
c0013a8a:	83 c4 10             	add    esp,0x10
c0013a8d:	85 c0                	test   eax,eax
c0013a8f:	75 1c                	jne    c0013aad <sysCallOpen(regs*)+0x1c7>
c0013a91:	83 ec 0c             	sub    esp,0xc
c0013a94:	56                   	push   esi
c0013a95:	e8 b4 73 ff ff       	call   c000ae4e <UnixFile::getFileDescriptor()>
c0013a9a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0013a9d:	83 c4 10             	add    esp,0x10
c0013aa0:	89 02                	mov    DWORD PTR [edx],eax
c0013aa2:	c1 f8 1f             	sar    eax,0x1f
c0013aa5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013aa8:	e9 c1 fe ff ff       	jmp    c001396e <sysCallOpen(regs*)+0x88>
c0013aad:	81 c4 04 01 00 00    	add    esp,0x104
c0013ab3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013ab8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013abd:	5b                   	pop    ebx
c0013abe:	5e                   	pop    esi
c0013abf:	c3                   	ret    
c0013ac0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013ac3:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0013ac9:	e9 99 fe ff ff       	jmp    c0013967 <sysCallOpen(regs*)+0x81>

c0013ace <Sys::loadSyscalls()>:
c0013ace:	c7 05 e0 5c 02 c0 e1 2e 01 c0 	mov    DWORD PTR ds:0xc0025ce0,0xc0012ee1
c0013ad8:	c7 05 e4 5c 02 c0 d8 2a 01 c0 	mov    DWORD PTR ds:0xc0025ce4,0xc0012ad8
c0013ae2:	c7 05 e8 5c 02 c0 c7 2c 01 c0 	mov    DWORD PTR ds:0xc0025ce8,0xc0012cc7
c0013aec:	c7 05 ec 5c 02 c0 17 2e 01 c0 	mov    DWORD PTR ds:0xc0025cec,0xc0012e17
c0013af6:	c7 05 f0 5c 02 c0 5f 2c 01 c0 	mov    DWORD PTR ds:0xc0025cf0,0xc0012c5f
c0013b00:	c7 05 f4 5c 02 c0 0f 2b 01 c0 	mov    DWORD PTR ds:0xc0025cf4,0xc0012b0f
c0013b0a:	c7 05 f8 5c 02 c0 f0 2a 01 c0 	mov    DWORD PTR ds:0xc0025cf8,0xc0012af0
c0013b14:	c7 05 fc 5c 02 c0 1c 2d 01 c0 	mov    DWORD PTR ds:0xc0025cfc,0xc0012d1c
c0013b1e:	c7 05 04 5d 02 c0 99 33 01 c0 	mov    DWORD PTR ds:0xc0025d04,0xc0013399
c0013b28:	c7 05 00 5d 02 c0 e6 38 01 c0 	mov    DWORD PTR ds:0xc0025d00,0xc00138e6
c0013b32:	c7 05 08 5d 02 c0 f9 33 01 c0 	mov    DWORD PTR ds:0xc0025d08,0xc00133f9
c0013b3c:	c7 05 0c 5d 02 c0 dc 30 01 c0 	mov    DWORD PTR ds:0xc0025d0c,0xc00130dc
c0013b46:	c7 05 10 5d 02 c0 06 2f 01 c0 	mov    DWORD PTR ds:0xc0025d10,0xc0012f06
c0013b50:	c7 05 14 5d 02 c0 0b 2f 01 c0 	mov    DWORD PTR ds:0xc0025d14,0xc0012f0b
c0013b5a:	c7 05 18 5d 02 c0 c2 34 01 c0 	mov    DWORD PTR ds:0xc0025d18,0xc00134c2
c0013b64:	c7 05 1c 5d 02 c0 6e 34 01 c0 	mov    DWORD PTR ds:0xc0025d1c,0xc001346e
c0013b6e:	c7 05 20 5d 02 c0 b5 31 01 c0 	mov    DWORD PTR ds:0xc0025d20,0xc00131b5
c0013b78:	c7 05 24 5d 02 c0 0c 32 01 c0 	mov    DWORD PTR ds:0xc0025d24,0xc001320c
c0013b82:	c7 05 28 5d 02 c0 78 32 01 c0 	mov    DWORD PTR ds:0xc0025d28,0xc0013278
c0013b8c:	c7 05 2c 5d 02 c0 10 2f 01 c0 	mov    DWORD PTR ds:0xc0025d2c,0xc0012f10
c0013b96:	c7 05 30 5d 02 c0 32 35 01 c0 	mov    DWORD PTR ds:0xc0025d30,0xc0013532
c0013ba0:	c7 05 34 5d 02 c0 4c 35 01 c0 	mov    DWORD PTR ds:0xc0025d34,0xc001354c
c0013baa:	c7 05 38 5d 02 c0 4c 35 01 c0 	mov    DWORD PTR ds:0xc0025d38,0xc001354c
c0013bb4:	c7 05 3c 5d 02 c0 81 35 01 c0 	mov    DWORD PTR ds:0xc0025d3c,0xc0013581
c0013bbe:	c7 05 40 5d 02 c0 e5 35 01 c0 	mov    DWORD PTR ds:0xc0025d40,0xc00135e5
c0013bc8:	c7 05 44 5d 02 c0 1a 2f 01 c0 	mov    DWORD PTR ds:0xc0025d44,0xc0012f1a
c0013bd2:	c7 05 48 5d 02 c0 49 36 01 c0 	mov    DWORD PTR ds:0xc0025d48,0xc0013649
c0013bdc:	c7 05 4c 5d 02 c0 99 30 01 c0 	mov    DWORD PTR ds:0xc0025d4c,0xc0013099
c0013be6:	c7 05 50 5d 02 c0 2a 2f 01 c0 	mov    DWORD PTR ds:0xc0025d50,0xc0012f2a
c0013bf0:	c7 05 54 5d 02 c0 5b 31 01 c0 	mov    DWORD PTR ds:0xc0025d54,0xc001315b
c0013bfa:	c7 05 58 5d 02 c0 95 36 01 c0 	mov    DWORD PTR ds:0xc0025d58,0xc0013695
c0013c04:	c7 05 5c 5d 02 c0 ea 32 01 c0 	mov    DWORD PTR ds:0xc0025d5c,0xc00132ea
c0013c0e:	c7 05 60 5d 02 c0 be 36 01 c0 	mov    DWORD PTR ds:0xc0025d60,0xc00136be
c0013c18:	c7 05 64 5d 02 c0 26 37 01 c0 	mov    DWORD PTR ds:0xc0025d64,0xc0013726
c0013c22:	c7 05 6c 5d 02 c0 32 2f 01 c0 	mov    DWORD PTR ds:0xc0025d6c,0xc0012f32
c0013c2c:	c7 05 70 5d 02 c0 9c 2f 01 c0 	mov    DWORD PTR ds:0xc0025d70,0xc0012f9c
c0013c36:	c7 05 74 5d 02 c0 e6 2f 01 c0 	mov    DWORD PTR ds:0xc0025d74,0xc0012fe6
c0013c40:	c7 05 78 5d 02 c0 d3 37 01 c0 	mov    DWORD PTR ds:0xc0025d78,0xc00137d3
c0013c4a:	c7 05 7c 5d 02 c0 67 35 01 c0 	mov    DWORD PTR ds:0xc0025d7c,0xc0013567
c0013c54:	c7 05 80 5d 02 c0 3b 30 01 c0 	mov    DWORD PTR ds:0xc0025d80,0xc001303b
c0013c5e:	c7 05 84 5d 02 c0 45 38 01 c0 	mov    DWORD PTR ds:0xc0025d84,0xc0013845
c0013c68:	c7 05 88 5d 02 c0 8a 38 01 c0 	mov    DWORD PTR ds:0xc0025d88,0xc001388a
c0013c72:	c7 05 8c 5d 02 c0 b7 2b 01 c0 	mov    DWORD PTR ds:0xc0025d8c,0xc0012bb7
c0013c7c:	c7 05 90 5d 02 c0 38 2d 01 c0 	mov    DWORD PTR ds:0xc0025d90,0xc0012d38
c0013c86:	c7 05 94 5d 02 c0 cd 2d 01 c0 	mov    DWORD PTR ds:0xc0025d94,0xc0012dcd
c0013c90:	c7 05 98 5d 02 c0 a2 2a 01 c0 	mov    DWORD PTR ds:0xc0025d98,0xc0012aa2
c0013c9a:	c7 05 9c 5d 02 c0 7f 2e 01 c0 	mov    DWORD PTR ds:0xc0025d9c,0xc0012e7f
c0013ca4:	c7 05 a0 5d 02 c0 1b 2b 01 c0 	mov    DWORD PTR ds:0xc0025da0,0xc0012b1b
c0013cae:	c7 05 a4 5d 02 c0 35 2b 01 c0 	mov    DWORD PTR ds:0xc0025da4,0xc0012b35
c0013cb8:	c3                   	ret    

c0013cb9 <Sys::systemCall(regs*, void*)>:
c0013cb9:	53                   	push   ebx
c0013cba:	83 ec 08             	sub    esp,0x8
c0013cbd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cc1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0013cc4:	83 f8 7f             	cmp    eax,0x7f
c0013cc7:	77 16                	ja     c0013cdf <Sys::systemCall(regs*, void*)+0x26>
c0013cc9:	8b 14 85 e0 5c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda320]
c0013cd0:	85 d2                	test   edx,edx
c0013cd2:	74 0b                	je     c0013cdf <Sys::systemCall(regs*, void*)+0x26>
c0013cd4:	83 ec 0c             	sub    esp,0xc
c0013cd7:	53                   	push   ebx
c0013cd8:	ff d2                	call   edx
c0013cda:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0013cdd:	eb 0d                	jmp    c0013cec <Sys::systemCall(regs*, void*)+0x33>
c0013cdf:	52                   	push   edx
c0013ce0:	52                   	push   edx
c0013ce1:	50                   	push   eax
c0013ce2:	68 c1 1b 02 c0       	push   0xc0021bc1
c0013ce7:	e8 0f 88 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0013cec:	83 c4 10             	add    esp,0x10
c0013cef:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013cf4:	31 d2                	xor    edx,edx
c0013cf6:	83 c4 08             	add    esp,0x8
c0013cf9:	5b                   	pop    ebx
c0013cfa:	c3                   	ret    

c0013cfb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013cfb:	55                   	push   ebp
c0013cfc:	57                   	push   edi
c0013cfd:	56                   	push   esi
c0013cfe:	53                   	push   ebx
c0013cff:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013d05:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013d0d:	0f 95 c2             	setne  dl
c0013d10:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013d18:	0f 94 c0             	sete   al
c0013d1b:	84 c2                	test   dl,al
c0013d1d:	74 34                	je     c0013d53 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0013d1f:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013d2a:	74 27                	je     c0013d53 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0013d2c:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013d33:	05 00 10 00 00       	add    eax,0x1000
c0013d38:	89 c1                	mov    ecx,eax
c0013d3a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013d3f:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0013d45:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013d4c:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0013d53:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0013d5a:	83 ec 0c             	sub    esp,0xc
c0013d5d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013d63:	6a 01                	push   0x1
c0013d65:	e8 2f 75 ff ff       	call   c000b299 <Virt::allocateKernelVirtualPages(int)>
c0013d6a:	83 c4 10             	add    esp,0x10
c0013d6d:	89 c3                	mov    ebx,eax
c0013d6f:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013d75:	0f 86 25 01 00 00    	jbe    c0013ea0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0013d7b:	c1 ee 0c             	shr    esi,0xc
c0013d7e:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013d85:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0013d89:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013d91:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013d98:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013d9c:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013da3:	29 ef                	sub    edi,ebp
c0013da5:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0013da9:	0f 83 f8 00 00 00    	jae    c0013ea7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0013daf:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013db5:	76 05                	jbe    c0013dbc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0013db7:	bf 00 10 00 00       	mov    edi,0x1000
c0013dbc:	83 ec 0c             	sub    esp,0xc
c0013dbf:	31 d2                	xor    edx,edx
c0013dc1:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013dc8:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013dca:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013dce:	50                   	push   eax
c0013dcf:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013dd3:	56                   	push   esi
c0013dd4:	52                   	push   edx
c0013dd5:	57                   	push   edi
c0013dd6:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013ddd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013de0:	83 c4 20             	add    esp,0x20
c0013de3:	85 c0                	test   eax,eax
c0013de5:	75 06                	jne    c0013ded <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0013de7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013deb:	74 13                	je     c0013e00 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0013ded:	83 ec 0c             	sub    esp,0xc
c0013df0:	53                   	push   ebx
c0013df1:	e8 97 77 ff ff       	call   c000b58d <Virt::freeKernelVirtualPages(unsigned long)>
c0013df6:	83 c4 10             	add    esp,0x10
c0013df9:	31 c0                	xor    eax,eax
c0013dfb:	e9 7c 01 00 00       	jmp    c0013f7c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0013e00:	fa                   	cli    
c0013e01:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c0013e07:	e8 2c 5d ff ff       	call   c0009b38 <Phys::allocatePage()>
c0013e0c:	6a 07                	push   0x7
c0013e0e:	89 c7                	mov    edi,eax
c0013e10:	53                   	push   ebx
c0013e11:	50                   	push   eax
c0013e12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e17:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e1a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013e20:	e8 c7 7a ff ff       	call   c000b8ec <VAS::mapPage(unsigned long, unsigned long, int)>
c0013e25:	83 c4 0c             	add    esp,0xc
c0013e28:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013e2f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013e35:	6a 00                	push   0x0
c0013e37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e3c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e3f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013e45:	e8 14 79 ff ff       	call   c000b75e <VAS::mapOtherVASIn(bool, VAS*)>
c0013e4a:	58                   	pop    eax
c0013e4b:	5a                   	pop    edx
c0013e4c:	68 07 0c 00 00       	push   0xc07
c0013e51:	55                   	push   ebp
c0013e52:	57                   	push   edi
c0013e53:	89 df                	mov    edi,ebx
c0013e55:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013e5c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013e62:	6a 00                	push   0x0
c0013e64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e69:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e6c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013e72:	e8 33 7e ff ff       	call   c000bcaa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013e77:	b9 00 10 00 00       	mov    ecx,0x1000
c0013e7c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e7e:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c0013e83:	83 c4 20             	add    esp,0x20
c0013e86:	48                   	dec    eax
c0013e87:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c0013e8c:	85 c0                	test   eax,eax
c0013e8e:	75 01                	jne    c0013e91 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0013e90:	fb                   	sti    
c0013e91:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013e97:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013e9b:	e9 f1 fe ff ff       	jmp    c0013d91 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0013ea0:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013ea7:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013eae:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013eb4:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013eba:	0f 86 ae 00 00 00    	jbe    c0013f6e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0013ec0:	fa                   	cli    
c0013ec1:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c0013ec7:	c1 ee 0c             	shr    esi,0xc
c0013eca:	51                   	push   ecx
c0013ecb:	31 ff                	xor    edi,edi
c0013ecd:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013ed4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013eda:	6a 00                	push   0x0
c0013edc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ee1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ee4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013eea:	e8 6f 78 ff ff       	call   c000b75e <VAS::mapOtherVASIn(bool, VAS*)>
c0013eef:	83 c4 10             	add    esp,0x10
c0013ef2:	e8 41 5c ff ff       	call   c0009b38 <Phys::allocatePage()>
c0013ef7:	47                   	inc    edi
c0013ef8:	6a 07                	push   0x7
c0013efa:	53                   	push   ebx
c0013efb:	50                   	push   eax
c0013efc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f00:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013f06:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013f09:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013f0f:	e8 d8 79 ff ff       	call   c000b8ec <VAS::mapPage(unsigned long, unsigned long, int)>
c0013f14:	58                   	pop    eax
c0013f15:	5a                   	pop    edx
c0013f16:	68 07 0c 00 00       	push   0xc07
c0013f1b:	55                   	push   ebp
c0013f1c:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013f22:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f26:	50                   	push   eax
c0013f27:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013f2e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013f34:	6a 00                	push   0x0
c0013f36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f3b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f3e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013f44:	e8 61 7d ff ff       	call   c000bcaa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013f49:	83 c4 1c             	add    esp,0x1c
c0013f4c:	68 00 10 00 00       	push   0x1000
c0013f51:	6a 00                	push   0x0
c0013f53:	53                   	push   ebx
c0013f54:	e8 4f c5 fe ff       	call   c00004a8 <memset>
c0013f59:	83 c4 10             	add    esp,0x10
c0013f5c:	39 fe                	cmp    esi,edi
c0013f5e:	77 92                	ja     c0013ef2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0013f60:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c0013f65:	48                   	dec    eax
c0013f66:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c0013f6b:	75 01                	jne    c0013f6e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0013f6d:	fb                   	sti    
c0013f6e:	83 ec 0c             	sub    esp,0xc
c0013f71:	53                   	push   ebx
c0013f72:	e8 16 76 ff ff       	call   c000b58d <Virt::freeKernelVirtualPages(unsigned long)>
c0013f77:	83 c4 10             	add    esp,0x10
c0013f7a:	b0 01                	mov    al,0x1
c0013f7c:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013f82:	5b                   	pop    ebx
c0013f83:	5e                   	pop    esi
c0013f84:	5f                   	pop    edi
c0013f85:	5d                   	pop    ebp
c0013f86:	c3                   	ret    

c0013f87 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013f87:	55                   	push   ebp
c0013f88:	57                   	push   edi
c0013f89:	56                   	push   esi
c0013f8a:	53                   	push   ebx
c0013f8b:	83 ec 48             	sub    esp,0x48
c0013f8e:	68 14 01 00 00       	push   0x114
c0013f93:	e8 d9 57 ff ff       	call   c0009771 <malloc>
c0013f98:	83 c4 0c             	add    esp,0xc
c0013f9b:	89 c6                	mov    esi,eax
c0013f9d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013fa1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013fa5:	50                   	push   eax
c0013fa6:	e8 bb 8a ff ff       	call   c000ca66 <File::File(char const*, Process*)>
c0013fab:	58                   	pop    eax
c0013fac:	5a                   	pop    edx
c0013fad:	6a 01                	push   0x1
c0013faf:	56                   	push   esi
c0013fb0:	e8 6b 8b ff ff       	call   c000cb20 <File::open(FileOpenMode)>
c0013fb5:	83 c4 10             	add    esp,0x10
c0013fb8:	85 c0                	test   eax,eax
c0013fba:	0f 85 47 01 00 00    	jne    c0014107 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013fc0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013fc8:	83 ec 0c             	sub    esp,0xc
c0013fcb:	6a 34                	push   0x34
c0013fcd:	e8 9f 57 ff ff       	call   c0009771 <malloc>
c0013fd2:	89 c3                	mov    ebx,eax
c0013fd4:	58                   	pop    eax
c0013fd5:	8b 06                	mov    eax,DWORD PTR [esi]
c0013fd7:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0013fdb:	57                   	push   edi
c0013fdc:	53                   	push   ebx
c0013fdd:	6a 00                	push   0x0
c0013fdf:	6a 34                	push   0x34
c0013fe1:	56                   	push   esi
c0013fe2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013fe5:	83 c4 20             	add    esp,0x20
c0013fe8:	85 c0                	test   eax,eax
c0013fea:	0f 85 17 01 00 00    	jne    c0014107 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013ff0:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013ff6:	0f 85 0b 01 00 00    	jne    c0014107 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013ffc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fff:	85 c0                	test   eax,eax
c0014001:	0f 84 00 01 00 00    	je     c0014107 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0014007:	31 d2                	xor    edx,edx
c0014009:	55                   	push   ebp
c001400a:	52                   	push   edx
c001400b:	50                   	push   eax
c001400c:	56                   	push   esi
c001400d:	e8 cc 8b ff ff       	call   c000cbde <File::seek(unsigned long long)>
c0014012:	83 c4 10             	add    esp,0x10
c0014015:	85 c0                	test   eax,eax
c0014017:	0f 85 ea 00 00 00    	jne    c0014107 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001401d:	83 ec 0c             	sub    esp,0xc
c0014020:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014023:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014027:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001402b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001402f:	0f af c2             	imul   eax,edx
c0014032:	50                   	push   eax
c0014033:	e8 39 57 ff ff       	call   c0009771 <malloc>
c0014038:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001403a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001403e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014041:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014045:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014049:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001404d:	0f af c2             	imul   eax,edx
c0014050:	99                   	cdq    
c0014051:	52                   	push   edx
c0014052:	50                   	push   eax
c0014053:	56                   	push   esi
c0014054:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014057:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001405a:	83 c4 20             	add    esp,0x20
c001405d:	85 c0                	test   eax,eax
c001405f:	0f 84 a2 00 00 00    	je     c0014107 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0014065:	31 d2                	xor    edx,edx
c0014067:	51                   	push   ecx
c0014068:	52                   	push   edx
c0014069:	50                   	push   eax
c001406a:	56                   	push   esi
c001406b:	e8 6e 8b ff ff       	call   c000cbde <File::seek(unsigned long long)>
c0014070:	83 c4 10             	add    esp,0x10
c0014073:	85 c0                	test   eax,eax
c0014075:	0f 85 8c 00 00 00    	jne    c0014107 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001407b:	83 ec 0c             	sub    esp,0xc
c001407e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014082:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014086:	31 ed                	xor    ebp,ebp
c0014088:	0f af c2             	imul   eax,edx
c001408b:	50                   	push   eax
c001408c:	e8 e0 56 ff ff       	call   c0009771 <malloc>
c0014091:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014093:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014097:	89 3c 24             	mov    DWORD PTR [esp],edi
c001409a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001409e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00140a2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00140a6:	0f af c2             	imul   eax,edx
c00140a9:	99                   	cdq    
c00140aa:	52                   	push   edx
c00140ab:	50                   	push   eax
c00140ac:	56                   	push   esi
c00140ad:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00140b0:	83 c4 20             	add    esp,0x20
c00140b3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00140bb:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00140bf:	0f 86 80 00 00 00    	jbe    c0014145 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00140c5:	0f b7 fd             	movzx  edi,bp
c00140c8:	c1 e7 05             	shl    edi,0x5
c00140cb:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00140cf:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00140d2:	75 6b                	jne    c001413f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00140d4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00140d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00140db:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00140de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00140e2:	52                   	push   edx
c00140e3:	31 d2                	xor    edx,edx
c00140e5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00140e8:	52                   	push   edx
c00140e9:	50                   	push   eax
c00140ea:	56                   	push   esi
c00140eb:	e8 ee 8a ff ff       	call   c000cbde <File::seek(unsigned long long)>
c00140f0:	83 c4 10             	add    esp,0x10
c00140f3:	85 c0                	test   eax,eax
c00140f5:	74 17                	je     c001410e <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00140f7:	83 ec 0c             	sub    esp,0xc
c00140fa:	68 d5 1b 02 c0       	push   0xc0021bd5
c00140ff:	e8 f7 83 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0014104:	83 c4 10             	add    esp,0x10
c0014107:	31 c0                	xor    eax,eax
c0014109:	e9 87 00 00 00       	jmp    c0014195 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001410e:	83 ec 0c             	sub    esp,0xc
c0014111:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014114:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014117:	50                   	push   eax
c0014118:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001411c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014120:	56                   	push   esi
c0014121:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014125:	e8 d1 fb ff ff       	call   c0013cfb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001412a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001412e:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014132:	83 c4 20             	add    esp,0x20
c0014135:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014139:	73 04                	jae    c001413f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001413b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001413f:	45                   	inc    ebp
c0014140:	e9 76 ff ff ff       	jmp    c00140bb <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014145:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014149:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001414d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014151:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014157:	83 ec 0c             	sub    esp,0xc
c001415a:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014160:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014165:	05 00 10 00 00       	add    eax,0x1000
c001416a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001416d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014171:	e8 0b 56 ff ff       	call   c0009781 <free>
c0014176:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014179:	e8 03 56 ff ff       	call   c0009781 <free>
c001417e:	58                   	pop    eax
c001417f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014183:	e8 f9 55 ff ff       	call   c0009781 <free>
c0014188:	89 34 24             	mov    DWORD PTR [esp],esi
c001418b:	e8 ee 89 ff ff       	call   c000cb7e <File::close()>
c0014190:	83 c4 10             	add    esp,0x10
c0014193:	b0 01                	mov    al,0x1
c0014195:	83 c4 3c             	add    esp,0x3c
c0014198:	5b                   	pop    ebx
c0014199:	5e                   	pop    esi
c001419a:	5f                   	pop    edi
c001419b:	5d                   	pop    ebp
c001419c:	c3                   	ret    

c001419d <Thr::runtimeReferenceHelper()>:
c001419d:	83 ec 18             	sub    esp,0x18
c00141a0:	68 dd 1b 02 c0       	push   0xc0021bdd
c00141a5:	e8 51 83 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c00141aa:	fa                   	cli    
c00141ab:	83 c4 10             	add    esp,0x10
c00141ae:	eb fe                	jmp    c00141ae <Thr::runtimeReferenceHelper()+0x11>

c00141b0 <Thr::getAddressOfKernelSymbol(char const*)>:
c00141b0:	57                   	push   edi
c00141b1:	56                   	push   esi
c00141b2:	53                   	push   ebx
c00141b3:	31 db                	xor    ebx,ebx
c00141b5:	39 1d 80 66 02 c0    	cmp    DWORD PTR ds:0xc0026680,ebx
c00141bb:	7e 3c                	jle    c00141f9 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00141bd:	8b 34 9d 00 66 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd9a00]
c00141c4:	31 ff                	xor    edi,edi
c00141c6:	39 3c 9d 00 65 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd9b00],edi
c00141cd:	7e 27                	jle    c00141f6 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00141cf:	50                   	push   eax
c00141d0:	50                   	push   eax
c00141d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00141d5:	8b 06                	mov    eax,DWORD PTR [esi]
c00141d7:	03 04 9d 80 65 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd9a80]
c00141de:	50                   	push   eax
c00141df:	e8 0c c4 fe ff       	call   c00005f0 <strcmp>
c00141e4:	83 c4 10             	add    esp,0x10
c00141e7:	85 c0                	test   eax,eax
c00141e9:	75 05                	jne    c00141f0 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00141eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00141ee:	eb 0b                	jmp    c00141fb <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00141f0:	83 c6 10             	add    esi,0x10
c00141f3:	47                   	inc    edi
c00141f4:	eb d0                	jmp    c00141c6 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00141f6:	43                   	inc    ebx
c00141f7:	eb bc                	jmp    c00141b5 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00141f9:	31 c0                	xor    eax,eax
c00141fb:	5b                   	pop    ebx
c00141fc:	5e                   	pop    esi
c00141fd:	5f                   	pop    edi
c00141fe:	c3                   	ret    

c00141ff <Thr::loadKernelSymbolTable(char const*)>:
c00141ff:	55                   	push   ebp
c0014200:	57                   	push   edi
c0014201:	56                   	push   esi
c0014202:	53                   	push   ebx
c0014203:	83 ec 68             	sub    esp,0x68
c0014206:	8b 35 d0 66 02 c0    	mov    esi,DWORD PTR ds:0xc00266d0
c001420c:	68 14 01 00 00       	push   0x114
c0014211:	e8 5b 55 ff ff       	call   c0009771 <malloc>
c0014216:	83 c4 0c             	add    esp,0xc
c0014219:	89 c3                	mov    ebx,eax
c001421b:	56                   	push   esi
c001421c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014220:	50                   	push   eax
c0014221:	e8 40 88 ff ff       	call   c000ca66 <File::File(char const*, Process*)>
c0014226:	5e                   	pop    esi
c0014227:	5f                   	pop    edi
c0014228:	6a 01                	push   0x1
c001422a:	53                   	push   ebx
c001422b:	e8 f0 88 ff ff       	call   c000cb20 <File::open(FileOpenMode)>
c0014230:	83 c4 10             	add    esp,0x10
c0014233:	85 c0                	test   eax,eax
c0014235:	74 0a                	je     c0014241 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014237:	83 ec 0c             	sub    esp,0xc
c001423a:	68 ff 1b 02 c0       	push   0xc0021bff
c001423f:	eb 34                	jmp    c0014275 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014241:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014249:	83 ec 0c             	sub    esp,0xc
c001424c:	6a 34                	push   0x34
c001424e:	e8 1e 55 ff ff       	call   c0009771 <malloc>
c0014253:	59                   	pop    ecx
c0014254:	89 c7                	mov    edi,eax
c0014256:	8d 74 24 34          	lea    esi,[esp+0x34]
c001425a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001425c:	56                   	push   esi
c001425d:	57                   	push   edi
c001425e:	6a 00                	push   0x0
c0014260:	6a 34                	push   0x34
c0014262:	53                   	push   ebx
c0014263:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014266:	83 c4 20             	add    esp,0x20
c0014269:	85 c0                	test   eax,eax
c001426b:	74 17                	je     c0014284 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001426d:	83 ec 0c             	sub    esp,0xc
c0014270:	68 16 1c 02 c0       	push   0xc0021c16
c0014275:	e8 57 df ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001427a:	83 c4 10             	add    esp,0x10
c001427d:	31 c0                	xor    eax,eax
c001427f:	e9 31 02 00 00       	jmp    c00144b5 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014284:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001428a:	75 e1                	jne    c001426d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001428c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001428f:	85 c0                	test   eax,eax
c0014291:	74 da                	je     c001426d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014293:	52                   	push   edx
c0014294:	31 d2                	xor    edx,edx
c0014296:	52                   	push   edx
c0014297:	50                   	push   eax
c0014298:	53                   	push   ebx
c0014299:	e8 40 89 ff ff       	call   c000cbde <File::seek(unsigned long long)>
c001429e:	83 c4 10             	add    esp,0x10
c00142a1:	85 c0                	test   eax,eax
c00142a3:	75 c8                	jne    c001426d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00142a5:	83 ec 0c             	sub    esp,0xc
c00142a8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00142ac:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00142b0:	31 ed                	xor    ebp,ebp
c00142b2:	0f af c2             	imul   eax,edx
c00142b5:	50                   	push   eax
c00142b6:	e8 b6 54 ff ff       	call   c0009771 <malloc>
c00142bb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00142bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00142c1:	89 34 24             	mov    DWORD PTR [esp],esi
c00142c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00142c8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00142cc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00142d0:	0f af c2             	imul   eax,edx
c00142d3:	99                   	cdq    
c00142d4:	52                   	push   edx
c00142d5:	50                   	push   eax
c00142d6:	53                   	push   ebx
c00142d7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00142da:	83 c4 20             	add    esp,0x20
c00142dd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00142e5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00142ed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00142f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00142fd:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0014301:	0f 86 aa 00 00 00    	jbe    c00143b1 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014307:	0f b7 f5             	movzx  esi,bp
c001430a:	6b f6 28             	imul   esi,esi,0x28
c001430d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014311:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014314:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014318:	50                   	push   eax
c0014319:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001431d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014321:	8b 16                	mov    edx,DWORD PTR [esi]
c0014323:	6b c0 28             	imul   eax,eax,0x28
c0014326:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001432a:	89 d0                	mov    eax,edx
c001432c:	31 d2                	xor    edx,edx
c001432e:	52                   	push   edx
c001432f:	50                   	push   eax
c0014330:	53                   	push   ebx
c0014331:	e8 a8 88 ff ff       	call   c000cbde <File::seek(unsigned long long)>
c0014336:	83 c4 0c             	add    esp,0xc
c0014339:	6a 20                	push   0x20
c001433b:	6a 00                	push   0x0
c001433d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014341:	52                   	push   edx
c0014342:	e8 61 c1 fe ff       	call   c00004a8 <memset>
c0014347:	58                   	pop    eax
c0014348:	8b 03                	mov    eax,DWORD PTR [ebx]
c001434a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001434e:	51                   	push   ecx
c001434f:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014353:	52                   	push   edx
c0014354:	6a 00                	push   0x0
c0014356:	6a 1f                	push   0x1f
c0014358:	53                   	push   ebx
c0014359:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001435c:	83 c4 18             	add    esp,0x18
c001435f:	68 2d 1c 02 c0       	push   0xc0021c2d
c0014364:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014368:	52                   	push   edx
c0014369:	e8 82 c2 fe ff       	call   c00005f0 <strcmp>
c001436e:	83 c4 10             	add    esp,0x10
c0014371:	85 c0                	test   eax,eax
c0014373:	75 0f                	jne    c0014384 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014375:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014378:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001437c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014380:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014384:	50                   	push   eax
c0014385:	50                   	push   eax
c0014386:	68 35 1c 02 c0       	push   0xc0021c35
c001438b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001438f:	50                   	push   eax
c0014390:	e8 5b c2 fe ff       	call   c00005f0 <strcmp>
c0014395:	83 c4 10             	add    esp,0x10
c0014398:	85 c0                	test   eax,eax
c001439a:	75 0f                	jne    c00143ab <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001439c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001439f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00143a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00143a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00143ab:	45                   	inc    ebp
c00143ac:	e9 4c ff ff ff       	jmp    c00142fd <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00143b1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00143b6:	75 10                	jne    c00143c8 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00143b8:	83 ec 0c             	sub    esp,0xc
c00143bb:	68 3d 1c 02 c0       	push   0xc0021c3d
c00143c0:	e8 0c de ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c00143c5:	83 c4 10             	add    esp,0x10
c00143c8:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00143cd:	75 10                	jne    c00143df <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00143cf:	83 ec 0c             	sub    esp,0xc
c00143d2:	68 3d 1c 02 c0       	push   0xc0021c3d
c00143d7:	e8 f5 dd ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c00143dc:	83 c4 10             	add    esp,0x10
c00143df:	31 d2                	xor    edx,edx
c00143e1:	50                   	push   eax
c00143e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143e6:	52                   	push   edx
c00143e7:	50                   	push   eax
c00143e8:	53                   	push   ebx
c00143e9:	e8 f0 87 ff ff       	call   c000cbde <File::seek(unsigned long long)>
c00143ee:	5a                   	pop    edx
c00143ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00143f3:	e8 79 53 ff ff       	call   c0009771 <malloc>
c00143f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00143fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014400:	31 c9                	xor    ecx,ecx
c0014402:	5e                   	pop    esi
c0014403:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014405:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014409:	55                   	push   ebp
c001440a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001440e:	51                   	push   ecx
c001440f:	52                   	push   edx
c0014410:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014414:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014418:	53                   	push   ebx
c0014419:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001441c:	83 c4 14             	add    esp,0x14
c001441f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014423:	e8 49 53 ff ff       	call   c0009771 <malloc>
c0014428:	89 c6                	mov    esi,eax
c001442a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001442c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001442f:	56                   	push   esi
c0014430:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014434:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014438:	51                   	push   ecx
c0014439:	52                   	push   edx
c001443a:	53                   	push   ebx
c001443b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001443e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014442:	8b 15 80 66 02 c0    	mov    edx,DWORD PTR ds:0xc0026680
c0014448:	83 c4 1c             	add    esp,0x1c
c001444b:	c1 e8 04             	shr    eax,0x4
c001444e:	89 04 95 00 65 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b00],eax
c0014455:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014459:	31 d2                	xor    edx,edx
c001445b:	52                   	push   edx
c001445c:	50                   	push   eax
c001445d:	53                   	push   ebx
c001445e:	e8 7b 87 ff ff       	call   c000cbde <File::seek(unsigned long long)>
c0014463:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014465:	31 d2                	xor    edx,edx
c0014467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001446a:	56                   	push   esi
c001446b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001446f:	52                   	push   edx
c0014470:	50                   	push   eax
c0014471:	53                   	push   ebx
c0014472:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014475:	83 c4 14             	add    esp,0x14
c0014478:	53                   	push   ebx
c0014479:	e8 00 87 ff ff       	call   c000cb7e <File::close()>
c001447e:	5d                   	pop    ebp
c001447f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014483:	e8 f9 52 ff ff       	call   c0009781 <free>
c0014488:	89 3c 24             	mov    DWORD PTR [esp],edi
c001448b:	e8 f1 52 ff ff       	call   c0009781 <free>
c0014490:	a1 80 66 02 c0       	mov    eax,ds:0xc0026680
c0014495:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014499:	8d 50 01             	lea    edx,[eax+0x1]
c001449c:	89 0c 85 00 66 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9a00],ecx
c00144a3:	89 34 85 80 65 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9a80],esi
c00144aa:	89 15 80 66 02 c0    	mov    DWORD PTR ds:0xc0026680,edx
c00144b0:	83 c4 10             	add    esp,0x10
c00144b3:	b0 01                	mov    al,0x1
c00144b5:	83 c4 5c             	add    esp,0x5c
c00144b8:	5b                   	pop    ebx
c00144b9:	5e                   	pop    esi
c00144ba:	5f                   	pop    edi
c00144bb:	5d                   	pop    ebp
c00144bc:	c3                   	ret    

c00144bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00144bd:	55                   	push   ebp
c00144be:	57                   	push   edi
c00144bf:	56                   	push   esi
c00144c0:	53                   	push   ebx
c00144c1:	81 ec 68 03 00 00    	sub    esp,0x368
c00144c7:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00144ce:	8b 1d d0 66 02 c0    	mov    ebx,DWORD PTR ds:0xc00266d0
c00144d4:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00144d8:	68 14 01 00 00       	push   0x114
c00144dd:	e8 8f 52 ff ff       	call   c0009771 <malloc>
c00144e2:	83 c4 0c             	add    esp,0xc
c00144e5:	89 c5                	mov    ebp,eax
c00144e7:	53                   	push   ebx
c00144e8:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00144ef:	50                   	push   eax
c00144f0:	e8 71 85 ff ff       	call   c000ca66 <File::File(char const*, Process*)>
c00144f5:	5e                   	pop    esi
c00144f6:	5f                   	pop    edi
c00144f7:	6a 01                	push   0x1
c00144f9:	55                   	push   ebp
c00144fa:	e8 21 86 ff ff       	call   c000cb20 <File::open(FileOpenMode)>
c00144ff:	83 c4 10             	add    esp,0x10
c0014502:	85 c0                	test   eax,eax
c0014504:	0f 85 a7 06 00 00    	jne    c0014bb1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001450a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014512:	83 ec 0c             	sub    esp,0xc
c0014515:	6a 34                	push   0x34
c0014517:	e8 55 52 ff ff       	call   c0009771 <malloc>
c001451c:	5b                   	pop    ebx
c001451d:	89 c7                	mov    edi,eax
c001451f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014523:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014526:	53                   	push   ebx
c0014527:	57                   	push   edi
c0014528:	6a 00                	push   0x0
c001452a:	6a 34                	push   0x34
c001452c:	55                   	push   ebp
c001452d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014530:	83 c4 20             	add    esp,0x20
c0014533:	85 c0                	test   eax,eax
c0014535:	0f 85 76 06 00 00    	jne    c0014bb1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001453b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014541:	0f 85 6a 06 00 00    	jne    c0014bb1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014547:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001454a:	85 c0                	test   eax,eax
c001454c:	0f 84 5f 06 00 00    	je     c0014bb1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014552:	31 d2                	xor    edx,edx
c0014554:	51                   	push   ecx
c0014555:	52                   	push   edx
c0014556:	50                   	push   eax
c0014557:	55                   	push   ebp
c0014558:	e8 81 86 ff ff       	call   c000cbde <File::seek(unsigned long long)>
c001455d:	83 c4 10             	add    esp,0x10
c0014560:	85 c0                	test   eax,eax
c0014562:	0f 85 49 06 00 00    	jne    c0014bb1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014568:	83 ec 0c             	sub    esp,0xc
c001456b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001456e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014572:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014576:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001457a:	0f af c2             	imul   eax,edx
c001457d:	50                   	push   eax
c001457e:	e8 ee 51 ff ff       	call   c0009771 <malloc>
c0014583:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014586:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001458a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001458d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014591:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014595:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014599:	0f af c2             	imul   eax,edx
c001459c:	99                   	cdq    
c001459d:	52                   	push   edx
c001459e:	50                   	push   eax
c001459f:	55                   	push   ebp
c00145a0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00145a3:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00145a6:	83 c4 20             	add    esp,0x20
c00145a9:	85 c0                	test   eax,eax
c00145ab:	0f 84 00 06 00 00    	je     c0014bb1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00145b1:	52                   	push   edx
c00145b2:	31 d2                	xor    edx,edx
c00145b4:	52                   	push   edx
c00145b5:	50                   	push   eax
c00145b6:	55                   	push   ebp
c00145b7:	e8 22 86 ff ff       	call   c000cbde <File::seek(unsigned long long)>
c00145bc:	83 c4 10             	add    esp,0x10
c00145bf:	85 c0                	test   eax,eax
c00145c1:	0f 85 ea 05 00 00    	jne    c0014bb1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00145c7:	83 ec 0c             	sub    esp,0xc
c00145ca:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00145ce:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00145d2:	31 f6                	xor    esi,esi
c00145d4:	0f af c2             	imul   eax,edx
c00145d7:	50                   	push   eax
c00145d8:	e8 94 51 ff ff       	call   c0009771 <malloc>
c00145dd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00145e0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00145e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145e7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00145eb:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00145ef:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00145f3:	0f af c2             	imul   eax,edx
c00145f6:	99                   	cdq    
c00145f7:	52                   	push   edx
c00145f8:	50                   	push   eax
c00145f9:	55                   	push   ebp
c00145fa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00145fd:	83 c4 20             	add    esp,0x20
c0014600:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0014604:	0f 86 8a 00 00 00    	jbe    c0014694 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001460a:	0f b7 de             	movzx  ebx,si
c001460d:	c1 e3 05             	shl    ebx,0x5
c0014610:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014614:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014617:	75 75                	jne    c001468e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014619:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001461c:	31 d2                	xor    edx,edx
c001461e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014622:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014625:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014629:	50                   	push   eax
c001462a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001462d:	52                   	push   edx
c001462e:	50                   	push   eax
c001462f:	55                   	push   ebp
c0014630:	e8 a9 85 ff ff       	call   c000cbde <File::seek(unsigned long long)>
c0014635:	83 c4 10             	add    esp,0x10
c0014638:	85 c0                	test   eax,eax
c001463a:	0f 85 71 05 00 00    	jne    c0014bb1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014640:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014647:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001464a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001464e:	31 d2                	xor    edx,edx
c0014650:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014654:	83 ec 0c             	sub    esp,0xc
c0014657:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001465b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014662:	50                   	push   eax
c0014663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014667:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001466b:	52                   	push   edx
c001466c:	50                   	push   eax
c001466d:	55                   	push   ebp
c001466e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014671:	83 c4 1c             	add    esp,0x1c
c0014674:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014677:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001467a:	50                   	push   eax
c001467b:	6a 00                	push   0x0
c001467d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014681:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0014685:	50                   	push   eax
c0014686:	e8 1d be fe ff       	call   c00004a8 <memset>
c001468b:	83 c4 10             	add    esp,0x10
c001468e:	46                   	inc    esi
c001468f:	e9 6c ff ff ff       	jmp    c0014600 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014694:	53                   	push   ebx
c0014695:	31 db                	xor    ebx,ebx
c0014697:	68 00 01 00 00       	push   0x100
c001469c:	6a 00                	push   0x0
c001469e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00146a2:	50                   	push   eax
c00146a3:	e8 00 be fe ff       	call   c00004a8 <memset>
c00146a8:	83 c4 0c             	add    esp,0xc
c00146ab:	68 00 01 00 00       	push   0x100
c00146b0:	6a 00                	push   0x0
c00146b2:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00146b9:	50                   	push   eax
c00146ba:	e8 e9 bd fe ff       	call   c00004a8 <memset>
c00146bf:	83 c4 10             	add    esp,0x10
c00146c2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00146ca:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00146d2:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00146da:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00146e2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00146ea:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00146ee:	0f 86 30 01 00 00    	jbe    c0014824 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00146f4:	0f b7 f3             	movzx  esi,bx
c00146f7:	6b f6 28             	imul   esi,esi,0x28
c00146fa:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00146fe:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014701:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014705:	52                   	push   edx
c0014706:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001470a:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001470e:	8b 06                	mov    eax,DWORD PTR [esi]
c0014710:	6b d2 28             	imul   edx,edx,0x28
c0014713:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014717:	31 d2                	xor    edx,edx
c0014719:	52                   	push   edx
c001471a:	50                   	push   eax
c001471b:	55                   	push   ebp
c001471c:	e8 bd 84 ff ff       	call   c000cbde <File::seek(unsigned long long)>
c0014721:	83 c4 0c             	add    esp,0xc
c0014724:	6a 20                	push   0x20
c0014726:	6a 00                	push   0x0
c0014728:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001472f:	51                   	push   ecx
c0014730:	e8 73 bd fe ff       	call   c00004a8 <memset>
c0014735:	59                   	pop    ecx
c0014736:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014739:	8d 54 24 58          	lea    edx,[esp+0x58]
c001473d:	52                   	push   edx
c001473e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014745:	51                   	push   ecx
c0014746:	6a 00                	push   0x0
c0014748:	6a 1f                	push   0x1f
c001474a:	55                   	push   ebp
c001474b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001474e:	83 c4 1c             	add    esp,0x1c
c0014751:	6a 09                	push   0x9
c0014753:	68 57 1c 02 c0       	push   0xc0021c57
c0014758:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001475f:	51                   	push   ecx
c0014760:	e8 3f bc fe ff       	call   c00003a4 <memcmp>
c0014765:	83 c4 10             	add    esp,0x10
c0014768:	85 c0                	test   eax,eax
c001476a:	75 21                	jne    c001478d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001476c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014770:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014774:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0014778:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001477c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001477f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014786:	89 d0                	mov    eax,edx
c0014788:	40                   	inc    eax
c0014789:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001478d:	50                   	push   eax
c001478e:	6a 09                	push   0x9
c0014790:	68 61 1c 02 c0       	push   0xc0021c61
c0014795:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001479c:	50                   	push   eax
c001479d:	e8 02 bc fe ff       	call   c00003a4 <memcmp>
c00147a2:	83 c4 10             	add    esp,0x10
c00147a5:	85 c0                	test   eax,eax
c00147a7:	75 21                	jne    c00147ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00147a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00147b1:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00147b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00147b9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00147bc:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00147c3:	89 d0                	mov    eax,edx
c00147c5:	40                   	inc    eax
c00147c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147ca:	50                   	push   eax
c00147cb:	50                   	push   eax
c00147cc:	68 2d 1c 02 c0       	push   0xc0021c2d
c00147d1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00147d8:	50                   	push   eax
c00147d9:	e8 12 be fe ff       	call   c00005f0 <strcmp>
c00147de:	83 c4 10             	add    esp,0x10
c00147e1:	85 c0                	test   eax,eax
c00147e3:	75 0f                	jne    c00147f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00147e5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00147e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00147f0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00147f4:	50                   	push   eax
c00147f5:	50                   	push   eax
c00147f6:	68 35 1c 02 c0       	push   0xc0021c35
c00147fb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014802:	50                   	push   eax
c0014803:	e8 e8 bd fe ff       	call   c00005f0 <strcmp>
c0014808:	83 c4 10             	add    esp,0x10
c001480b:	85 c0                	test   eax,eax
c001480d:	75 0f                	jne    c001481e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001480f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014812:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001481a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001481e:	43                   	inc    ebx
c001481f:	e9 c6 fe ff ff       	jmp    c00146ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014824:	31 d2                	xor    edx,edx
c0014826:	50                   	push   eax
c0014827:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001482b:	52                   	push   edx
c001482c:	50                   	push   eax
c001482d:	55                   	push   ebp
c001482e:	e8 ab 83 ff ff       	call   c000cbde <File::seek(unsigned long long)>
c0014833:	58                   	pop    eax
c0014834:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014838:	e8 34 4f ff ff       	call   c0009771 <malloc>
c001483d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014840:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014844:	31 d2                	xor    edx,edx
c0014846:	58                   	pop    eax
c0014847:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001484b:	53                   	push   ebx
c001484c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0014850:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014854:	52                   	push   edx
c0014855:	50                   	push   eax
c0014856:	55                   	push   ebp
c0014857:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001485a:	83 c4 14             	add    esp,0x14
c001485d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014861:	e8 0b 4f ff ff       	call   c0009771 <malloc>
c0014866:	31 d2                	xor    edx,edx
c0014868:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001486c:	83 c4 0c             	add    esp,0xc
c001486f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014873:	52                   	push   edx
c0014874:	50                   	push   eax
c0014875:	55                   	push   ebp
c0014876:	e8 63 83 ff ff       	call   c000cbde <File::seek(unsigned long long)>
c001487b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001487e:	31 d2                	xor    edx,edx
c0014880:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014883:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014887:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001488b:	52                   	push   edx
c001488c:	50                   	push   eax
c001488d:	55                   	push   ebp
c001488e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014891:	83 c4 20             	add    esp,0x20
c0014894:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001489c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00148a0:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00148a4:	0f 84 0b 03 00 00    	je     c0014bb5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00148aa:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00148b1:	31 d2                	xor    edx,edx
c00148b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00148b7:	c1 e8 03             	shr    eax,0x3
c00148ba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00148be:	51                   	push   ecx
c00148bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00148c3:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00148c7:	52                   	push   edx
c00148c8:	50                   	push   eax
c00148c9:	55                   	push   ebp
c00148ca:	e8 0f 83 ff ff       	call   c000cbde <File::seek(unsigned long long)>
c00148cf:	5b                   	pop    ebx
c00148d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00148d4:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00148db:	e8 91 4e ff ff       	call   c0009771 <malloc>
c00148e0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00148e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00148e7:	31 d2                	xor    edx,edx
c00148e9:	5e                   	pop    esi
c00148ea:	8d 44 24 58          	lea    eax,[esp+0x58]
c00148ee:	50                   	push   eax
c00148ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00148f7:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00148fe:	52                   	push   edx
c00148ff:	50                   	push   eax
c0014900:	55                   	push   ebp
c0014901:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014904:	83 c4 20             	add    esp,0x20
c0014907:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001490f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014913:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0014917:	0f 8d 7c 02 00 00    	jge    c0014b99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001491d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014921:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014925:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001492a:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001492d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014931:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014935:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0014939:	89 d8                	mov    eax,ebx
c001493b:	c1 e8 08             	shr    eax,0x8
c001493e:	89 c6                	mov    esi,eax
c0014940:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014944:	c1 e6 04             	shl    esi,0x4
c0014947:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001494b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001494e:	85 d2                	test   edx,edx
c0014950:	0f 85 bf 00 00 00    	jne    c0014a15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0014956:	83 ec 0c             	sub    esp,0xc
c0014959:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001495d:	03 06                	add    eax,DWORD PTR [esi]
c001495f:	50                   	push   eax
c0014960:	e8 4b f8 ff ff       	call   c00141b0 <Thr::getAddressOfKernelSymbol(char const*)>
c0014965:	83 c4 10             	add    esp,0x10
c0014968:	89 c2                	mov    edx,eax
c001496a:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001496f:	85 c0                	test   eax,eax
c0014971:	0f 85 9e 00 00 00    	jne    c0014a15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0014977:	83 ec 0c             	sub    esp,0xc
c001497a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001497e:	03 06                	add    eax,DWORD PTR [esi]
c0014980:	50                   	push   eax
c0014981:	e8 ae 3d ff ff       	call   c0008734 <Krnl::resolveCompatibilitySymbol(char*)>
c0014986:	83 c4 10             	add    esp,0x10
c0014989:	89 c2                	mov    edx,eax
c001498b:	85 c0                	test   eax,eax
c001498d:	0f 85 82 00 00 00    	jne    c0014a15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0014993:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0014997:	50                   	push   eax
c0014998:	50                   	push   eax
c0014999:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001499d:	03 06                	add    eax,DWORD PTR [esi]
c001499f:	50                   	push   eax
c00149a0:	68 6b 1c 02 c0       	push   0xc0021c6b
c00149a5:	e8 51 7b ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c00149aa:	58                   	pop    eax
c00149ab:	5a                   	pop    edx
c00149ac:	68 85 1c 02 c0       	push   0xc0021c85
c00149b1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00149b8:	50                   	push   eax
c00149b9:	e8 a6 bb fe ff       	call   c0000564 <strcpy>
c00149be:	59                   	pop    ecx
c00149bf:	58                   	pop    eax
c00149c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149c4:	03 06                	add    eax,DWORD PTR [esi]
c00149c6:	50                   	push   eax
c00149c7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00149ce:	50                   	push   eax
c00149cf:	e8 d0 bc fe ff       	call   c00006a4 <strcat>
c00149d4:	58                   	pop    eax
c00149d5:	5a                   	pop    edx
c00149d6:	68 1b 1d 02 c0       	push   0xc0021d1b
c00149db:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00149e2:	50                   	push   eax
c00149e3:	e8 bc bc fe ff       	call   c00006a4 <strcat>
c00149e8:	83 c4 10             	add    esp,0x10
c00149eb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00149f0:	0f 84 5d 01 00 00    	je     c0014b53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00149f6:	83 ec 0c             	sub    esp,0xc
c00149f9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014a00:	50                   	push   eax
c0014a01:	e8 cb d7 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c0014a06:	83 c4 10             	add    esp,0x10
c0014a09:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0014a0d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014a11:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0014a15:	80 fb 01             	cmp    bl,0x1
c0014a18:	0f 85 88 00 00 00    	jne    c0014aa6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0014a1e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014a25:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0014a29:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0014a2d:	01 ce                	add    esi,ecx
c0014a2f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0014a35:	0f 94 c0             	sete   al
c0014a38:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0014a3e:	0f 94 c3             	sete   bl
c0014a41:	09 c3                	or     ebx,eax
c0014a43:	8b 06                	mov    eax,DWORD PTR [esi]
c0014a45:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0014a4a:	74 41                	je     c0014a8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0014a4c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0014a4f:	84 db                	test   bl,bl
c0014a51:	75 15                	jne    c0014a68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0014a53:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014a57:	66 83 f8 0c          	cmp    ax,0xc
c0014a5b:	76 05                	jbe    c0014a62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0014a5d:	b8 0c 00 00 00       	mov    eax,0xc
c0014a62:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0014a66:	76 37                	jbe    c0014a9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0014a68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0014a6c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0014a71:	0f 84 dc 00 00 00    	je     c0014b53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0014a77:	83 ec 0c             	sub    esp,0xc
c0014a7a:	68 9c 1c 02 c0       	push   0xc0021c9c
c0014a7f:	e8 4d d7 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c0014a84:	83 c4 10             	add    esp,0x10
c0014a87:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014a8b:	eb 12                	jmp    c0014a9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0014a8d:	01 c1                	add    ecx,eax
c0014a8f:	84 db                	test   bl,bl
c0014a91:	75 0c                	jne    c0014a9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0014a93:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014a97:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0014a9b:	77 02                	ja     c0014a9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0014a9d:	01 d1                	add    ecx,edx
c0014a9f:	89 0e                	mov    DWORD PTR [esi],ecx
c0014aa1:	e9 ea 00 00 00       	jmp    c0014b90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0014aa6:	80 fb 02             	cmp    bl,0x2
c0014aa9:	75 7c                	jne    c0014b27 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0014aab:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0014ab2:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0014ab6:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0014aba:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0014ac0:	74 20                	je     c0014ae2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0014ac2:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0014ac8:	74 18                	je     c0014ae2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0014aca:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014ace:	b9 0a 00 00 00       	mov    ecx,0xa
c0014ad3:	66 83 f8 0e          	cmp    ax,0xe
c0014ad7:	77 03                	ja     c0014adc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0014ad9:	8d 48 fc             	lea    ecx,[eax-0x4]
c0014adc:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0014ae0:	76 1f                	jbe    c0014b01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0014ae2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0014ae6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0014aeb:	74 66                	je     c0014b53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0014aed:	83 ec 0c             	sub    esp,0xc
c0014af0:	68 b8 1c 02 c0       	push   0xc0021cb8
c0014af5:	e8 d7 d6 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c0014afa:	83 c4 10             	add    esp,0x10
c0014afd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014b01:	8b 06                	mov    eax,DWORD PTR [esi]
c0014b03:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0014b08:	74 13                	je     c0014b1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0014b0a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0014b0e:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0014b15:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0014b19:	01 c8                	add    eax,ecx
c0014b1b:	eb 04                	jmp    c0014b21 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0014b1d:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0014b21:	01 c2                	add    edx,eax
c0014b23:	89 16                	mov    DWORD PTR [esi],edx
c0014b25:	eb 69                	jmp    c0014b90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0014b27:	0f b6 db             	movzx  ebx,bl
c0014b2a:	50                   	push   eax
c0014b2b:	50                   	push   eax
c0014b2c:	53                   	push   ebx
c0014b2d:	68 d4 1c 02 c0       	push   0xc0021cd4
c0014b32:	e8 c4 79 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0014b37:	83 c4 10             	add    esp,0x10
c0014b3a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0014b3f:	74 12                	je     c0014b53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0014b41:	83 ec 0c             	sub    esp,0xc
c0014b44:	68 df 1c 02 c0       	push   0xc0021cdf
c0014b49:	e8 83 d6 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c0014b4e:	83 c4 10             	add    esp,0x10
c0014b51:	eb 3d                	jmp    c0014b90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0014b53:	83 ec 0c             	sub    esp,0xc
c0014b56:	55                   	push   ebp
c0014b57:	e8 22 80 ff ff       	call   c000cb7e <File::close()>
c0014b5c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b5f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014b62:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014b65:	59                   	pop    ecx
c0014b66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b6a:	e8 12 4c ff ff       	call   c0009781 <free>
c0014b6f:	5b                   	pop    ebx
c0014b70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014b74:	e8 08 4c ff ff       	call   c0009781 <free>
c0014b79:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014b7c:	e8 00 4c ff ff       	call   c0009781 <free>
c0014b81:	5e                   	pop    esi
c0014b82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b86:	e8 f6 4b ff ff       	call   c0009781 <free>
c0014b8b:	83 c4 10             	add    esp,0x10
c0014b8e:	eb 21                	jmp    c0014bb1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014b90:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0014b94:	e9 76 fd ff ff       	jmp    c001490f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0014b99:	83 ec 0c             	sub    esp,0xc
c0014b9c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ba0:	e8 dc 4b ff ff       	call   c0009781 <free>
c0014ba5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0014ba9:	83 c4 10             	add    esp,0x10
c0014bac:	e9 eb fc ff ff       	jmp    c001489c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0014bb1:	31 c0                	xor    eax,eax
c0014bb3:	eb 33                	jmp    c0014be8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0014bb5:	83 ec 0c             	sub    esp,0xc
c0014bb8:	55                   	push   ebp
c0014bb9:	e8 c0 7f ff ff       	call   c000cb7e <File::close()>
c0014bbe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014bc1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014bc4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014bc7:	58                   	pop    eax
c0014bc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014bcc:	e8 b0 4b ff ff       	call   c0009781 <free>
c0014bd1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014bd4:	e8 a8 4b ff ff       	call   c0009781 <free>
c0014bd9:	5a                   	pop    edx
c0014bda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bde:	e8 9e 4b ff ff       	call   c0009781 <free>
c0014be3:	83 c4 10             	add    esp,0x10
c0014be6:	b0 01                	mov    al,0x1
c0014be8:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014bee:	5b                   	pop    ebx
c0014bef:	5e                   	pop    esi
c0014bf0:	5f                   	pop    edi
c0014bf1:	5d                   	pop    ebp
c0014bf2:	c3                   	ret    

c0014bf3 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014bf3:	56                   	push   esi
c0014bf4:	31 d2                	xor    edx,edx
c0014bf6:	53                   	push   ebx
c0014bf7:	8b 1d e0 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ee0
c0014bfd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014c01:	39 d3                	cmp    ebx,edx
c0014c03:	7e 1b                	jle    c0014c20 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014c05:	8b 04 95 00 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9f00]
c0014c0c:	39 c8                	cmp    eax,ecx
c0014c0e:	77 0d                	ja     c0014c1d <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014c10:	8b 34 95 00 5f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffda100]
c0014c17:	01 c6                	add    esi,eax
c0014c19:	39 ce                	cmp    esi,ecx
c0014c1b:	77 05                	ja     c0014c22 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014c1d:	42                   	inc    edx
c0014c1e:	eb e1                	jmp    c0014c01 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014c20:	31 c0                	xor    eax,eax
c0014c22:	5b                   	pop    ebx
c0014c23:	5e                   	pop    esi
c0014c24:	c3                   	ret    

c0014c25 <Thr::getDriverNameFromAddress(unsigned long)>:
c0014c25:	53                   	push   ebx
c0014c26:	31 c0                	xor    eax,eax
c0014c28:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014c2c:	8b 1d e0 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ee0
c0014c32:	39 c3                	cmp    ebx,eax
c0014c34:	7e 22                	jle    c0014c58 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0014c36:	8b 14 85 00 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f00]
c0014c3d:	39 ca                	cmp    edx,ecx
c0014c3f:	77 14                	ja     c0014c55 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014c41:	03 14 85 00 5f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffda100]
c0014c48:	39 ca                	cmp    edx,ecx
c0014c4a:	76 09                	jbe    c0014c55 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014c4c:	8b 04 85 00 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9d00]
c0014c53:	eb 05                	jmp    c0014c5a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0014c55:	40                   	inc    eax
c0014c56:	eb da                	jmp    c0014c32 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0014c58:	31 c0                	xor    eax,eax
c0014c5a:	5b                   	pop    ebx
c0014c5b:	c3                   	ret    

c0014c5c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0014c5c:	53                   	push   ebx
c0014c5d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014c61:	53                   	push   ebx
c0014c62:	e8 8c ff ff ff       	call   c0014bf3 <Thr::getDriverBaseFromAddress(unsigned long)>
c0014c67:	5a                   	pop    edx
c0014c68:	31 d2                	xor    edx,edx
c0014c6a:	85 c0                	test   eax,eax
c0014c6c:	74 04                	je     c0014c72 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0014c6e:	89 da                	mov    edx,ebx
c0014c70:	29 c2                	sub    edx,eax
c0014c72:	89 d0                	mov    eax,edx
c0014c74:	5b                   	pop    ebx
c0014c75:	c3                   	ret    

c0014c76 <Thr::loadDLL(char const*, bool)>:
c0014c76:	55                   	push   ebp
c0014c77:	57                   	push   edi
c0014c78:	56                   	push   esi
c0014c79:	53                   	push   ebx
c0014c7a:	81 ec 34 01 00 00    	sub    esp,0x134
c0014c80:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0014c87:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0014c8e:	56                   	push   esi
c0014c8f:	68 f7 1c 02 c0       	push   0xc0021cf7
c0014c94:	e8 62 78 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0014c99:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014ca0:	e8 cc 4a ff ff       	call   c0009771 <malloc>
c0014ca5:	83 c4 0c             	add    esp,0xc
c0014ca8:	89 c3                	mov    ebx,eax
c0014caa:	ff 35 d0 66 02 c0    	push   DWORD PTR ds:0xc00266d0
c0014cb0:	56                   	push   esi
c0014cb1:	50                   	push   eax
c0014cb2:	e8 af 7d ff ff       	call   c000ca66 <File::File(char const*, Process*)>
c0014cb7:	83 c4 10             	add    esp,0x10
c0014cba:	85 db                	test   ebx,ebx
c0014cbc:	75 3c                	jne    c0014cfa <Thr::loadDLL(char const*, bool)+0x84>
c0014cbe:	89 f8                	mov    eax,edi
c0014cc0:	84 c0                	test   al,al
c0014cc2:	0f 84 d2 01 00 00    	je     c0014e9a <Thr::loadDLL(char const*, bool)+0x224>
c0014cc8:	55                   	push   ebp
c0014cc9:	55                   	push   ebp
c0014cca:	68 08 1d 02 c0       	push   0xc0021d08
c0014ccf:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0014cd3:	55                   	push   ebp
c0014cd4:	e8 8b b8 fe ff       	call   c0000564 <strcpy>
c0014cd9:	58                   	pop    eax
c0014cda:	5a                   	pop    edx
c0014cdb:	56                   	push   esi
c0014cdc:	55                   	push   ebp
c0014cdd:	e8 c2 b9 fe ff       	call   c00006a4 <strcat>
c0014ce2:	59                   	pop    ecx
c0014ce3:	58                   	pop    eax
c0014ce4:	68 1b 1d 02 c0       	push   0xc0021d1b
c0014ce9:	55                   	push   ebp
c0014cea:	e8 b5 b9 fe ff       	call   c00006a4 <strcat>
c0014cef:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014cf2:	e8 da d4 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c0014cf7:	83 c4 10             	add    esp,0x10
c0014cfa:	51                   	push   ecx
c0014cfb:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014cff:	50                   	push   eax
c0014d00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014d04:	50                   	push   eax
c0014d05:	53                   	push   ebx
c0014d06:	e8 c1 80 ff ff       	call   c000cdcc <File::stat(unsigned long long*, bool*)>
c0014d0b:	83 c4 10             	add    esp,0x10
c0014d0e:	85 db                	test   ebx,ebx
c0014d10:	74 0c                	je     c0014d1e <Thr::loadDLL(char const*, bool)+0xa8>
c0014d12:	83 ec 0c             	sub    esp,0xc
c0014d15:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d17:	53                   	push   ebx
c0014d18:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014d1b:	83 c4 10             	add    esp,0x10
c0014d1e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014d23:	75 0a                	jne    c0014d2f <Thr::loadDLL(char const*, bool)+0xb9>
c0014d25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d29:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014d2d:	75 3c                	jne    c0014d6b <Thr::loadDLL(char const*, bool)+0xf5>
c0014d2f:	89 f8                	mov    eax,edi
c0014d31:	84 c0                	test   al,al
c0014d33:	0f 84 49 01 00 00    	je     c0014e82 <Thr::loadDLL(char const*, bool)+0x20c>
c0014d39:	51                   	push   ecx
c0014d3a:	51                   	push   ecx
c0014d3b:	68 08 1d 02 c0       	push   0xc0021d08
c0014d40:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0014d44:	53                   	push   ebx
c0014d45:	e8 1a b8 fe ff       	call   c0000564 <strcpy>
c0014d4a:	5d                   	pop    ebp
c0014d4b:	58                   	pop    eax
c0014d4c:	56                   	push   esi
c0014d4d:	53                   	push   ebx
c0014d4e:	e8 51 b9 fe ff       	call   c00006a4 <strcat>
c0014d53:	58                   	pop    eax
c0014d54:	5a                   	pop    edx
c0014d55:	68 1b 1d 02 c0       	push   0xc0021d1b
c0014d5a:	53                   	push   ebx
c0014d5b:	e8 44 b9 fe ff       	call   c00006a4 <strcat>
c0014d60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d63:	e8 69 d4 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c0014d68:	83 c4 10             	add    esp,0x10
c0014d6b:	52                   	push   edx
c0014d6c:	6a 03                	push   0x3
c0014d6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014d76:	05 ff 0f 00 00       	add    eax,0xfff
c0014d7b:	83 d2 00             	adc    edx,0x0
c0014d7e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014d82:	50                   	push   eax
c0014d83:	ff 35 b4 32 02 c0    	push   DWORD PTR ds:0xc00232b4
c0014d89:	e8 62 6c ff ff       	call   c000b9f0 <VAS::allocatePages(int, int)>
c0014d8e:	59                   	pop    ecx
c0014d8f:	89 c3                	mov    ebx,eax
c0014d91:	5d                   	pop    ebp
c0014d92:	50                   	push   eax
c0014d93:	68 8e 09 02 c0       	push   0xc002098e
c0014d98:	e8 5e 77 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0014d9d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014da0:	e8 1f b7 fe ff       	call   c00004c4 <strlen>
c0014da5:	8b 2d e0 5e 02 c0    	mov    ebp,DWORD PTR ds:0xc0025ee0
c0014dab:	40                   	inc    eax
c0014dac:	89 04 24             	mov    DWORD PTR [esp],eax
c0014daf:	e8 bd 49 ff ff       	call   c0009771 <malloc>
c0014db4:	89 04 ad 00 63 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd9d00],eax
c0014dbb:	58                   	pop    eax
c0014dbc:	a1 e0 5e 02 c0       	mov    eax,ds:0xc0025ee0
c0014dc1:	5a                   	pop    edx
c0014dc2:	56                   	push   esi
c0014dc3:	ff 34 85 00 63 02 c0 	push   DWORD PTR [eax*4-0x3ffd9d00]
c0014dca:	e8 95 b7 fe ff       	call   c0000564 <strcpy>
c0014dcf:	a1 e0 5e 02 c0       	mov    eax,ds:0xc0025ee0
c0014dd4:	8d 50 01             	lea    edx,[eax+0x1]
c0014dd7:	89 1c 85 00 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9f00],ebx
c0014dde:	89 15 e0 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee0,edx
c0014de4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014de8:	83 c4 0c             	add    esp,0xc
c0014deb:	89 14 85 00 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda100],edx
c0014df2:	6a 01                	push   0x1
c0014df4:	53                   	push   ebx
c0014df5:	56                   	push   esi
c0014df6:	e8 c2 f6 ff ff       	call   c00144bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014dfb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014dff:	83 c4 10             	add    esp,0x10
c0014e02:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014e07:	0f 85 89 00 00 00    	jne    c0014e96 <Thr::loadDLL(char const*, bool)+0x220>
c0014e0d:	89 f8                	mov    eax,edi
c0014e0f:	84 c0                	test   al,al
c0014e11:	74 73                	je     c0014e86 <Thr::loadDLL(char const*, bool)+0x210>
c0014e13:	83 ec 0c             	sub    esp,0xc
c0014e16:	68 1d 1d 02 c0       	push   0xc0021d1d
c0014e1b:	e8 b1 d3 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c0014e20:	83 c4 10             	add    esp,0x10
c0014e23:	eb 61                	jmp    c0014e86 <Thr::loadDLL(char const*, bool)+0x210>
c0014e25:	50                   	push   eax
c0014e26:	50                   	push   eax
c0014e27:	89 e8                	mov    eax,ebp
c0014e29:	c1 e0 0c             	shl    eax,0xc
c0014e2c:	01 d8                	add    eax,ebx
c0014e2e:	50                   	push   eax
c0014e2f:	ff 35 b4 32 02 c0    	push   DWORD PTR ds:0xc00232b4
c0014e35:	e8 34 67 ff ff       	call   c000b56e <VAS::getPageTableEntry(unsigned long)>
c0014e3a:	83 c4 10             	add    esp,0x10
c0014e3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e3f:	a8 60                	test   al,0x60
c0014e41:	75 11                	jne    c0014e54 <Thr::loadDLL(char const*, bool)+0x1de>
c0014e43:	83 ec 0c             	sub    esp,0xc
c0014e46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014e4b:	50                   	push   eax
c0014e4c:	e8 85 4c ff ff       	call   c0009ad6 <Phys::freePage(unsigned long)>
c0014e51:	83 c4 10             	add    esp,0x10
c0014e54:	45                   	inc    ebp
c0014e55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e59:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014e5d:	05 ff 0f 00 00       	add    eax,0xfff
c0014e62:	bf 00 00 00 00       	mov    edi,0x0
c0014e67:	83 d2 00             	adc    edx,0x0
c0014e6a:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014e6e:	c1 ea 0c             	shr    edx,0xc
c0014e71:	39 c5                	cmp    ebp,eax
c0014e73:	89 d1                	mov    ecx,edx
c0014e75:	89 f8                	mov    eax,edi
c0014e77:	19 c8                	sbb    eax,ecx
c0014e79:	72 aa                	jb     c0014e25 <Thr::loadDLL(char const*, bool)+0x1af>
c0014e7b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014e80:	75 18                	jne    c0014e9a <Thr::loadDLL(char const*, bool)+0x224>
c0014e82:	31 db                	xor    ebx,ebx
c0014e84:	eb 14                	jmp    c0014e9a <Thr::loadDLL(char const*, bool)+0x224>
c0014e86:	83 ec 0c             	sub    esp,0xc
c0014e89:	68 3c 1d 02 c0       	push   0xc0021d3c
c0014e8e:	e8 3e d3 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c0014e93:	83 c4 10             	add    esp,0x10
c0014e96:	31 ed                	xor    ebp,ebp
c0014e98:	eb bb                	jmp    c0014e55 <Thr::loadDLL(char const*, bool)+0x1df>
c0014e9a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014ea0:	89 d8                	mov    eax,ebx
c0014ea2:	5b                   	pop    ebx
c0014ea3:	5e                   	pop    esi
c0014ea4:	5f                   	pop    edi
c0014ea5:	5d                   	pop    ebp
c0014ea6:	c3                   	ret    

c0014ea7 <Thr::executeDLL(unsigned long, void*)>:
c0014ea7:	56                   	push   esi
c0014ea8:	53                   	push   ebx
c0014ea9:	52                   	push   edx
c0014eaa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014eae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014eb2:	85 db                	test   ebx,ebx
c0014eb4:	75 10                	jne    c0014ec6 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014eb6:	83 ec 0c             	sub    esp,0xc
c0014eb9:	68 58 1d 02 c0       	push   0xc0021d58
c0014ebe:	e8 0e d3 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c0014ec3:	83 c4 10             	add    esp,0x10
c0014ec6:	50                   	push   eax
c0014ec7:	50                   	push   eax
c0014ec8:	53                   	push   ebx
c0014ec9:	68 82 1d 02 c0       	push   0xc0021d82
c0014ece:	e8 28 76 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0014ed3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014ed7:	89 d8                	mov    eax,ebx
c0014ed9:	83 c4 14             	add    esp,0x14
c0014edc:	5b                   	pop    ebx
c0014edd:	5e                   	pop    esi
c0014ede:	ff e0                	jmp    eax

c0014ee0 <userModeEntryPoint(void*)>:
c0014ee0:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c0014ee5:	48                   	dec    eax
c0014ee6:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c0014eeb:	75 03                	jne    c0014ef0 <userModeEntryPoint(void*)+0x10>
c0014eed:	fb                   	sti    
c0014eee:	66 90                	xchg   ax,ax
c0014ef0:	fb                   	sti    
c0014ef1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ef6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ef9:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014eff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f03:	e9 57 b3 fe ff       	jmp    c000025f <goToUsermode>

c0014f08 <changeTSS>:
c0014f08:	83 ec 14             	sub    esp,0x14
c0014f0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f10:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f13:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014f18:	c1 e2 15             	shl    edx,0x15
c0014f1b:	29 d0                	sub    eax,edx
c0014f1d:	50                   	push   eax
c0014f1e:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c0014f23:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014f29:	05 7c 11 00 00       	add    eax,0x117c
c0014f2e:	50                   	push   eax
c0014f2f:	e8 b8 5c ff ff       	call   c000abec <TSS::setESP(unsigned long)>
c0014f34:	83 c4 1c             	add    esp,0x1c
c0014f37:	c3                   	ret    

c0014f38 <switchToThread(ThreadControlBlock*)>:
c0014f38:	57                   	push   edi
c0014f39:	a1 a4 66 02 c0       	mov    eax,ds:0xc00266a4
c0014f3e:	56                   	push   esi
c0014f3f:	85 c0                	test   eax,eax
c0014f41:	53                   	push   ebx
c0014f42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014f46:	0f 85 88 00 00 00    	jne    c0014fd4 <switchToThread(ThreadControlBlock*)+0x9c>
c0014f4c:	8a 43 40             	mov    al,BYTE PTR [ebx+0x40]
c0014f4f:	3c ff                	cmp    al,0xff
c0014f51:	74 7d                	je     c0014fd0 <switchToThread(ThreadControlBlock*)+0x98>
c0014f53:	0f b6 d0             	movzx  edx,al
c0014f56:	b8 00 04 00 00       	mov    eax,0x400
c0014f5b:	29 d0                	sub    eax,edx
c0014f5d:	d1 f8                	sar    eax,1
c0014f5f:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0014f62:	66 90                	xchg   ax,ax
c0014f64:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014f67:	ff 15 98 67 02 c0    	call   DWORD PTR ds:0xc0026798
c0014f6d:	a3 e8 66 02 c0       	mov    ds:0xc00266e8,eax
c0014f72:	89 15 ec 66 02 c0    	mov    DWORD PTR ds:0xc00266ec,edx
c0014f78:	89 c6                	mov    esi,eax
c0014f7a:	89 d7                	mov    edi,edx
c0014f7c:	2b 35 d8 66 02 c0    	sub    esi,DWORD PTR ds:0xc00266d8
c0014f82:	a3 d8 66 02 c0       	mov    ds:0xc00266d8,eax
c0014f87:	1b 3d dc 66 02 c0    	sbb    edi,DWORD PTR ds:0xc00266dc
c0014f8d:	89 35 e0 66 02 c0    	mov    DWORD PTR ds:0xc00266e0,esi
c0014f93:	89 3d e4 66 02 c0    	mov    DWORD PTR ds:0xc00266e4,edi
c0014f99:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014f9f:	89 15 dc 66 02 c0    	mov    DWORD PTR ds:0xc00266dc,edx
c0014fa5:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014fa8:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014fab:	01 c6                	add    esi,eax
c0014fad:	11 d7                	adc    edi,edx
c0014faf:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014fb2:	83 ec 0c             	sub    esp,0xc
c0014fb5:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014fb8:	53                   	push   ebx
c0014fb9:	e8 d9 b2 fe ff       	call   c0000297 <switchToThreadASM>
c0014fbe:	0f 20 c0             	mov    eax,cr0
c0014fc1:	83 c8 08             	or     eax,0x8
c0014fc4:	0f 22 c0             	mov    cr0,eax
c0014fc7:	83 c4 10             	add    esp,0x10
c0014fca:	5b                   	pop    ebx
c0014fcb:	5e                   	pop    esi
c0014fcc:	5f                   	pop    edi
c0014fcd:	c3                   	ret    
c0014fce:	66 90                	xchg   ax,ax
c0014fd0:	31 c0                	xor    eax,eax
c0014fd2:	eb 90                	jmp    c0014f64 <switchToThread(ThreadControlBlock*)+0x2c>
c0014fd4:	5b                   	pop    ebx
c0014fd5:	c7 05 a0 66 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00266a0,0x1
c0014fdf:	5e                   	pop    esi
c0014fe0:	5f                   	pop    edi
c0014fe1:	c3                   	ret    
c0014fe2:	66 90                	xchg   ax,ax

c0014fe4 <Process::addArgs(char**)>:
c0014fe4:	57                   	push   edi
c0014fe5:	56                   	push   esi
c0014fe6:	53                   	push   ebx
c0014fe7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014feb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0014fef:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0014ff9:	85 ff                	test   edi,edi
c0014ffb:	74 43                	je     c0015040 <Process::addArgs(char**)+0x5c>
c0014ffd:	8b 07                	mov    eax,DWORD PTR [edi]
c0014fff:	85 c0                	test   eax,eax
c0015001:	74 3d                	je     c0015040 <Process::addArgs(char**)+0x5c>
c0015003:	31 db                	xor    ebx,ebx
c0015005:	8d 76 00             	lea    esi,[esi+0x0]
c0015008:	83 ec 0c             	sub    esp,0xc
c001500b:	50                   	push   eax
c001500c:	e8 b3 b4 fe ff       	call   c00004c4 <strlen>
c0015011:	40                   	inc    eax
c0015012:	89 04 24             	mov    DWORD PTR [esp],eax
c0015015:	e8 57 47 ff ff       	call   c0009771 <malloc>
c001501a:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0015021:	5a                   	pop    edx
c0015022:	59                   	pop    ecx
c0015023:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0015026:	43                   	inc    ebx
c0015027:	50                   	push   eax
c0015028:	e8 37 b5 fe ff       	call   c0000564 <strcpy>
c001502d:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0015033:	83 c4 10             	add    esp,0x10
c0015036:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015039:	85 c0                	test   eax,eax
c001503b:	75 cb                	jne    c0015008 <Process::addArgs(char**)+0x24>
c001503d:	8d 76 00             	lea    esi,[esi+0x0]
c0015040:	5b                   	pop    ebx
c0015041:	5e                   	pop    esi
c0015042:	5f                   	pop    edi
c0015043:	c3                   	ret    

c0015044 <Process::Process(char const*, Process*, char**)>:
c0015044:	56                   	push   esi
c0015045:	53                   	push   ebx
c0015046:	83 ec 14             	sub    esp,0x14
c0015049:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001504d:	05 0c 02 00 00       	add    eax,0x20c
c0015052:	bb 07 00 00 00       	mov    ebx,0x7
c0015057:	89 c6                	mov    esi,eax
c0015059:	8d 76 00             	lea    esi,[esi+0x0]
c001505c:	85 db                	test   ebx,ebx
c001505e:	78 14                	js     c0015074 <Process::Process(char const*, Process*, char**)+0x30>
c0015060:	83 ec 0c             	sub    esp,0xc
c0015063:	56                   	push   esi
c0015064:	e8 93 ab 00 00       	call   c001fbfc <ThreadControlBlock::ThreadControlBlock()>
c0015069:	83 c4 10             	add    esp,0x10
c001506c:	83 c6 5f             	add    esi,0x5f
c001506f:	4b                   	dec    ebx
c0015070:	eb ea                	jmp    c001505c <Process::Process(char const*, Process*, char**)+0x18>
c0015072:	66 90                	xchg   ax,ax
c0015074:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015078:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001507f:	83 ec 0c             	sub    esp,0xc
c0015082:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015086:	e8 cf cf ff ff       	call   c001205a <Krnl::newProcessEnv(Process*)>
c001508b:	83 c4 10             	add    esp,0x10
c001508e:	89 c2                	mov    edx,eax
c0015090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015094:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001509a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001509e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00150a7:	a1 f0 2b 02 c0       	mov    eax,ds:0xc0022bf0
c00150ac:	8d 50 01             	lea    edx,[eax+0x1]
c00150af:	89 15 f0 2b 02 c0    	mov    DWORD PTR ds:0xc0022bf0,edx
c00150b5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150b9:	89 02                	mov    DWORD PTR [edx],eax
c00150bb:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00150c3:	83 ec 0c             	sub    esp,0xc
c00150c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00150ca:	e8 a2 46 ff ff       	call   c0009771 <malloc>
c00150cf:	83 c4 10             	add    esp,0x10
c00150d2:	89 c3                	mov    ebx,eax
c00150d4:	83 ec 08             	sub    esp,0x8
c00150d7:	6a 00                	push   0x0
c00150d9:	53                   	push   ebx
c00150da:	e8 b9 6c ff ff       	call   c000bd98 <VAS::VAS(bool)>
c00150df:	83 c4 10             	add    esp,0x10
c00150e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150e6:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00150ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150f0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00150fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015102:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015108:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001510c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015112:	85 c0                	test   eax,eax
c0015114:	74 42                	je     c0015158 <Process::Process(char const*, Process*, char**)+0x114>
c0015116:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001511a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015120:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015126:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001512a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015130:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015134:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001513a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015140:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015144:	05 0c 01 00 00       	add    eax,0x10c
c0015149:	83 ec 08             	sub    esp,0x8
c001514c:	52                   	push   edx
c001514d:	50                   	push   eax
c001514e:	e8 11 b4 fe ff       	call   c0000564 <strcpy>
c0015153:	83 c4 10             	add    esp,0x10
c0015156:	eb 64                	jmp    c00151bc <Process::Process(char const*, Process*, char**)+0x178>
c0015158:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0015160:	83 ec 0c             	sub    esp,0xc
c0015163:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015167:	e8 05 46 ff ff       	call   c0009771 <malloc>
c001516c:	83 c4 10             	add    esp,0x10
c001516f:	89 c3                	mov    ebx,eax
c0015171:	83 ec 08             	sub    esp,0x8
c0015174:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015178:	53                   	push   ebx
c0015179:	e8 12 58 ff ff       	call   c000a990 <VgaText::VgaText(char const*)>
c001517e:	83 c4 10             	add    esp,0x10
c0015181:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015185:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001518b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001518f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015195:	83 ec 0c             	sub    esp,0xc
c0015198:	50                   	push   eax
c0015199:	e8 96 50 ff ff       	call   c000a234 <addToTerminalCycle(VgaText*)>
c001519e:	83 c4 10             	add    esp,0x10
c00151a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151a5:	05 0c 01 00 00       	add    eax,0x10c
c00151aa:	83 ec 08             	sub    esp,0x8
c00151ad:	68 a1 1d 02 c0       	push   0xc0021da1
c00151b2:	50                   	push   eax
c00151b3:	e8 ac b3 fe ff       	call   c0000564 <strcpy>
c00151b8:	83 c4 10             	add    esp,0x10
c00151bb:	90                   	nop
c00151bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151c0:	83 c0 0c             	add    eax,0xc
c00151c3:	83 ec 08             	sub    esp,0x8
c00151c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00151ca:	50                   	push   eax
c00151cb:	e8 94 b3 fe ff       	call   c0000564 <strcpy>
c00151d0:	83 c4 10             	add    esp,0x10
c00151d3:	83 ec 08             	sub    esp,0x8
c00151d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00151da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00151de:	e8 01 fe ff ff       	call   c0014fe4 <Process::addArgs(char**)>
c00151e3:	83 c4 10             	add    esp,0x10
c00151e6:	83 ec 08             	sub    esp,0x8
c00151e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00151ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00151f1:	e8 91 ed ff ff       	call   c0013f87 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00151f6:	83 c4 10             	add    esp,0x10
c00151f9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00151fd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015201:	83 f0 01             	xor    eax,0x1
c0015204:	88 c2                	mov    dl,al
c0015206:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001520a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015210:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015215:	83 ec 08             	sub    esp,0x8
c0015218:	50                   	push   eax
c0015219:	68 f8 1d 02 c0       	push   0xc0021df8
c001521e:	e8 d8 72 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0015223:	83 c4 10             	add    esp,0x10
c0015226:	90                   	nop
c0015227:	83 c4 14             	add    esp,0x14
c001522a:	5b                   	pop    ebx
c001522b:	5e                   	pop    esi
c001522c:	c3                   	ret    
c001522d:	90                   	nop
c001522e:	66 90                	xchg   ax,ax

c0015230 <Process::Process(bool, char const*, Process*, char**)>:
c0015230:	56                   	push   esi
c0015231:	53                   	push   ebx
c0015232:	83 ec 24             	sub    esp,0x24
c0015235:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015239:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001523d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015241:	05 0c 02 00 00       	add    eax,0x20c
c0015246:	bb 07 00 00 00       	mov    ebx,0x7
c001524b:	89 c6                	mov    esi,eax
c001524d:	8d 76 00             	lea    esi,[esi+0x0]
c0015250:	85 db                	test   ebx,ebx
c0015252:	78 14                	js     c0015268 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015254:	83 ec 0c             	sub    esp,0xc
c0015257:	56                   	push   esi
c0015258:	e8 9f a9 00 00       	call   c001fbfc <ThreadControlBlock::ThreadControlBlock()>
c001525d:	83 c4 10             	add    esp,0x10
c0015260:	83 c6 5f             	add    esi,0x5f
c0015263:	4b                   	dec    ebx
c0015264:	eb ea                	jmp    c0015250 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015266:	66 90                	xchg   ax,ax
c0015268:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001526c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015273:	83 ec 0c             	sub    esp,0xc
c0015276:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001527a:	e8 db cd ff ff       	call   c001205a <Krnl::newProcessEnv(Process*)>
c001527f:	83 c4 10             	add    esp,0x10
c0015282:	89 c2                	mov    edx,eax
c0015284:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015288:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001528e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015292:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001529b:	a1 f0 2b 02 c0       	mov    eax,ds:0xc0022bf0
c00152a0:	8d 50 01             	lea    edx,[eax+0x1]
c00152a3:	89 15 f0 2b 02 c0    	mov    DWORD PTR ds:0xc0022bf0,edx
c00152a9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00152ad:	89 02                	mov    DWORD PTR [edx],eax
c00152af:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00152b7:	83 ec 0c             	sub    esp,0xc
c00152ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00152be:	e8 ae 44 ff ff       	call   c0009771 <malloc>
c00152c3:	83 c4 10             	add    esp,0x10
c00152c6:	89 c3                	mov    ebx,eax
c00152c8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00152cd:	83 ec 08             	sub    esp,0x8
c00152d0:	50                   	push   eax
c00152d1:	53                   	push   ebx
c00152d2:	e8 c1 6a ff ff       	call   c000bd98 <VAS::VAS(bool)>
c00152d7:	83 c4 10             	add    esp,0x10
c00152da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00152de:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00152e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00152e8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00152f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00152f6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00152fa:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015300:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015304:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001530a:	85 c0                	test   eax,eax
c001530c:	74 42                	je     c0015350 <Process::Process(bool, char const*, Process*, char**)+0x120>
c001530e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015312:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015318:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001531e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015322:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015328:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001532c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015332:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015338:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001533c:	05 0c 01 00 00       	add    eax,0x10c
c0015341:	83 ec 08             	sub    esp,0x8
c0015344:	52                   	push   edx
c0015345:	50                   	push   eax
c0015346:	e8 19 b2 fe ff       	call   c0000564 <strcpy>
c001534b:	83 c4 10             	add    esp,0x10
c001534e:	eb 64                	jmp    c00153b4 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0015350:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c0015358:	83 ec 0c             	sub    esp,0xc
c001535b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001535f:	e8 0d 44 ff ff       	call   c0009771 <malloc>
c0015364:	83 c4 10             	add    esp,0x10
c0015367:	89 c3                	mov    ebx,eax
c0015369:	83 ec 08             	sub    esp,0x8
c001536c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015370:	53                   	push   ebx
c0015371:	e8 1a 56 ff ff       	call   c000a990 <VgaText::VgaText(char const*)>
c0015376:	83 c4 10             	add    esp,0x10
c0015379:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001537d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015383:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015387:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001538d:	83 ec 0c             	sub    esp,0xc
c0015390:	50                   	push   eax
c0015391:	e8 9e 4e ff ff       	call   c000a234 <addToTerminalCycle(VgaText*)>
c0015396:	83 c4 10             	add    esp,0x10
c0015399:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001539d:	05 0c 01 00 00       	add    eax,0x10c
c00153a2:	83 ec 08             	sub    esp,0x8
c00153a5:	68 a1 1d 02 c0       	push   0xc0021da1
c00153aa:	50                   	push   eax
c00153ab:	e8 b4 b1 fe ff       	call   c0000564 <strcpy>
c00153b0:	83 c4 10             	add    esp,0x10
c00153b3:	90                   	nop
c00153b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00153b8:	83 c0 0c             	add    eax,0xc
c00153bb:	83 ec 08             	sub    esp,0x8
c00153be:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00153c2:	50                   	push   eax
c00153c3:	e8 9c b1 fe ff       	call   c0000564 <strcpy>
c00153c8:	83 c4 10             	add    esp,0x10
c00153cb:	83 ec 08             	sub    esp,0x8
c00153ce:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00153d2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00153d6:	e8 09 fc ff ff       	call   c0014fe4 <Process::addArgs(char**)>
c00153db:	83 c4 10             	add    esp,0x10
c00153de:	90                   	nop
c00153df:	83 c4 24             	add    esp,0x24
c00153e2:	5b                   	pop    ebx
c00153e3:	5e                   	pop    esi
c00153e4:	c3                   	ret    
c00153e5:	8d 76 00             	lea    esi,[esi+0x0]

c00153e8 <taskStartupFunction>:
c00153e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153ed:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00153f0:	c3                   	ret    
c00153f1:	90                   	nop
c00153f2:	66 90                	xchg   ax,ax

c00153f4 <Semaphore::Semaphore(int)>:
c00153f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00153f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00153fc:	89 10                	mov    DWORD PTR [eax],edx
c00153fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015402:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015409:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001540d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015414:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015418:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001541f:	90                   	nop
c0015420:	c3                   	ret    
c0015421:	90                   	nop
c0015422:	66 90                	xchg   ax,ax

c0015424 <Mutex::Mutex()>:
c0015424:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015428:	6a 01                	push   0x1
c001542a:	50                   	push   eax
c001542b:	e8 c4 ff ff ff       	call   c00153f4 <Semaphore::Semaphore(int)>
c0015430:	83 c4 08             	add    esp,0x8
c0015433:	90                   	nop
c0015434:	c3                   	ret    
c0015435:	90                   	nop
c0015436:	66 90                	xchg   ax,ax

c0015438 <Process::createThread(void (*)(void*), void*, int)>:
c0015438:	57                   	push   edi
c0015439:	31 c9                	xor    ecx,ecx
c001543b:	56                   	push   esi
c001543c:	53                   	push   ebx
c001543d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015441:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015448:	89 f2                	mov    edx,esi
c001544a:	66 90                	xchg   ax,ax
c001544c:	0f b7 c2             	movzx  eax,dx
c001544f:	83 e2 01             	and    edx,0x1
c0015452:	74 14                	je     c0015468 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015454:	d1 f8                	sar    eax,1
c0015456:	41                   	inc    ecx
c0015457:	89 c2                	mov    edx,eax
c0015459:	83 f9 10             	cmp    ecx,0x10
c001545c:	75 ee                	jne    c001544c <Process::createThread(void (*)(void*), void*, int)+0x14>
c001545e:	31 db                	xor    ebx,ebx
c0015460:	89 d8                	mov    eax,ebx
c0015462:	5b                   	pop    ebx
c0015463:	5e                   	pop    esi
c0015464:	5f                   	pop    edi
c0015465:	c3                   	ret    
c0015466:	66 90                	xchg   ax,ax
c0015468:	b8 01 00 00 00       	mov    eax,0x1
c001546d:	d3 e0                	shl    eax,cl
c001546f:	09 c6                	or     esi,eax
c0015471:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015474:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001547b:	01 c0                	add    eax,eax
c001547d:	01 c8                	add    eax,ecx
c001547f:	8d 04 80             	lea    eax,[eax+eax*4]
c0015482:	01 d8                	add    eax,ebx
c0015484:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001548b:	75 0b                	jne    c0015498 <Process::createThread(void (*)(void*), void*, int)+0x60>
c001548d:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015497:	90                   	nop
c0015498:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001549e:	83 ec 08             	sub    esp,0x8
c00154a1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00154a4:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00154a7:	01 c0                	add    eax,eax
c00154a9:	01 c8                	add    eax,ecx
c00154ab:	8d 3c 80             	lea    edi,[eax+eax*4]
c00154ae:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00154b1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00154b7:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00154bd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00154c1:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00154c7:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00154cd:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00154d4:	89 ca                	mov    edx,ecx
c00154d6:	f7 da                	neg    edx
c00154d8:	c1 e2 15             	shl    edx,0x15
c00154db:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00154e1:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00154e7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00154eb:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00154f5:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00154fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00154ff:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015505:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001550f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015519:	53                   	push   ebx
c001551a:	68 c4 66 02 c0       	push   0xc00266c4
c001551f:	e8 78 a4 00 00       	call   c001f99c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015524:	83 c4 10             	add    esp,0x10
c0015527:	89 d8                	mov    eax,ebx
c0015529:	5b                   	pop    ebx
c001552a:	5e                   	pop    esi
c001552b:	5f                   	pop    edi
c001552c:	c3                   	ret    
c001552d:	90                   	nop
c001552e:	66 90                	xchg   ax,ax

c0015530 <Process::createUserThread()>:
c0015530:	83 ec 0c             	sub    esp,0xc
c0015533:	68 80 00 00 00       	push   0x80
c0015538:	6a 00                	push   0x0
c001553a:	68 e0 4e 01 c0       	push   0xc0014ee0
c001553f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015543:	e8 f0 fe ff ff       	call   c0015438 <Process::createThread(void (*)(void*), void*, int)>
c0015548:	83 c4 1c             	add    esp,0x1c
c001554b:	c3                   	ret    

c001554c <setupMultitasking(void (*)())>:
c001554c:	56                   	push   esi
c001554d:	53                   	push   ebx
c001554e:	51                   	push   ecx
c001554f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015553:	eb 13                	jmp    c0015568 <setupMultitasking(void (*)())+0x1c>
c0015555:	8d 76 00             	lea    esi,[esi+0x0]
c0015558:	83 ec 0c             	sub    esp,0xc
c001555b:	68 c4 66 02 c0       	push   0xc00266c4
c0015560:	e8 7f a3 00 00       	call   c001f8e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015565:	83 c4 10             	add    esp,0x10
c0015568:	83 ec 0c             	sub    esp,0xc
c001556b:	68 c4 66 02 c0       	push   0xc00266c4
c0015570:	e8 4b a3 00 00       	call   c001f8c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015575:	83 c4 10             	add    esp,0x10
c0015578:	84 c0                	test   al,al
c001557a:	74 dc                	je     c0015558 <setupMultitasking(void (*)())+0xc>
c001557c:	83 ec 0c             	sub    esp,0xc
c001557f:	68 1f 07 00 00       	push   0x71f
c0015584:	e8 e8 41 ff ff       	call   c0009771 <malloc>
c0015589:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015590:	89 c3                	mov    ebx,eax
c0015592:	6a 00                	push   0x0
c0015594:	68 a5 1d 02 c0       	push   0xc0021da5
c0015599:	6a 01                	push   0x1
c001559b:	50                   	push   eax
c001559c:	e8 8f fc ff ff       	call   c0015230 <Process::Process(bool, char const*, Process*, char**)>
c00155a1:	83 c4 14             	add    esp,0x14
c00155a4:	89 1d d0 66 02 c0    	mov    DWORD PTR ds:0xc00266d0,ebx
c00155aa:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c00155b0:	e8 dc 4e ff ff       	call   c000a491 <setActiveTerminal(VgaText*)>
c00155b5:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00155bd:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00155c7:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00155cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00155d0:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00155da:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00155e0:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00155e6:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00155f0:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00155fa:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015604:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001560a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015614:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001561a:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015624:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001562a:	58                   	pop    eax
c001562b:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015631:	5a                   	pop    edx
c0015632:	68 a1 1d 02 c0       	push   0xc0021da1
c0015637:	50                   	push   eax
c0015638:	e8 27 af fe ff       	call   c0000564 <strcpy>
c001563d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015644:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015648:	83 c4 14             	add    esp,0x14
c001564b:	5b                   	pop    ebx
c001564c:	5e                   	pop    esi
c001564d:	e9 37 ac fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0015652:	66 90                	xchg   ax,ax

c0015654 <schedule()>:
c0015654:	a1 a4 66 02 c0       	mov    eax,ds:0xc00266a4
c0015659:	85 c0                	test   eax,eax
c001565b:	74 0b                	je     c0015668 <schedule()+0x14>
c001565d:	c7 05 a0 66 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00266a0,0x1
c0015667:	c3                   	ret    
c0015668:	53                   	push   ebx
c0015669:	83 ec 14             	sub    esp,0x14
c001566c:	68 c4 66 02 c0       	push   0xc00266c4
c0015671:	e8 4a a2 00 00       	call   c001f8c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015676:	83 c4 10             	add    esp,0x10
c0015679:	84 c0                	test   al,al
c001567b:	75 3b                	jne    c00156b8 <schedule()+0x64>
c001567d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015682:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015685:	4a                   	dec    edx
c0015686:	74 38                	je     c00156c0 <schedule()+0x6c>
c0015688:	83 ec 0c             	sub    esp,0xc
c001568b:	68 c4 66 02 c0       	push   0xc00266c4
c0015690:	e8 47 a2 00 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015695:	c7 04 24 c4 66 02 c0 	mov    DWORD PTR [esp],0xc00266c4
c001569c:	89 c3                	mov    ebx,eax
c001569e:	e8 41 a2 00 00       	call   c001f8e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00156a3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00156aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156ad:	e8 86 f8 ff ff       	call   c0014f38 <switchToThread(ThreadControlBlock*)>
c00156b2:	83 c4 10             	add    esp,0x10
c00156b5:	8d 76 00             	lea    esi,[esi+0x0]
c00156b8:	83 c4 08             	add    esp,0x8
c00156bb:	5b                   	pop    ebx
c00156bc:	c3                   	ret    
c00156bd:	8d 76 00             	lea    esi,[esi+0x0]
c00156c0:	83 ec 08             	sub    esp,0x8
c00156c3:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00156ca:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00156d0:	68 c4 66 02 c0       	push   0xc00266c4
c00156d5:	e8 c2 a2 00 00       	call   c001f99c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00156da:	83 c4 10             	add    esp,0x10
c00156dd:	eb a9                	jmp    c0015688 <schedule()+0x34>
c00156df:	90                   	nop

c00156e0 <Semaphore::tryAcquire()>:
c00156e0:	53                   	push   ebx
c00156e1:	83 ec 08             	sub    esp,0x8
c00156e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00156e8:	fa                   	cli    
c00156e9:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c00156ee:	8d 50 01             	lea    edx,[eax+0x1]
c00156f1:	89 15 a8 66 02 c0    	mov    DWORD PTR ds:0xc00266a8,edx
c00156f7:	8b 15 a4 66 02 c0    	mov    edx,DWORD PTR ds:0xc00266a4
c00156fd:	8d 5a 01             	lea    ebx,[edx+0x1]
c0015700:	89 1d a4 66 02 c0    	mov    DWORD PTR ds:0xc00266a4,ebx
c0015706:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015709:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001570b:	7c 33                	jl     c0015740 <Semaphore::tryAcquire()+0x60>
c001570d:	89 15 a4 66 02 c0    	mov    DWORD PTR ds:0xc00266a4,edx
c0015713:	85 d2                	test   edx,edx
c0015715:	75 0d                	jne    c0015724 <Semaphore::tryAcquire()+0x44>
c0015717:	8b 15 a0 66 02 c0    	mov    edx,DWORD PTR ds:0xc00266a0
c001571d:	85 d2                	test   edx,edx
c001571f:	75 6b                	jne    c001578c <Semaphore::tryAcquire()+0xac>
c0015721:	8d 76 00             	lea    esi,[esi+0x0]
c0015724:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c0015729:	85 c0                	test   eax,eax
c001572b:	74 0b                	je     c0015738 <Semaphore::tryAcquire()+0x58>
c001572d:	8d 76 00             	lea    esi,[esi+0x0]
c0015730:	31 c0                	xor    eax,eax
c0015732:	83 c4 08             	add    esp,0x8
c0015735:	5b                   	pop    ebx
c0015736:	c3                   	ret    
c0015737:	90                   	nop
c0015738:	fb                   	sti    
c0015739:	83 c4 08             	add    esp,0x8
c001573c:	5b                   	pop    ebx
c001573d:	c3                   	ret    
c001573e:	66 90                	xchg   ax,ax
c0015740:	43                   	inc    ebx
c0015741:	89 15 a4 66 02 c0    	mov    DWORD PTR ds:0xc00266a4,edx
c0015747:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001574a:	85 d2                	test   edx,edx
c001574c:	75 22                	jne    c0015770 <Semaphore::tryAcquire()+0x90>
c001574e:	8b 0d a0 66 02 c0    	mov    ecx,DWORD PTR ds:0xc00266a0
c0015754:	85 c9                	test   ecx,ecx
c0015756:	74 18                	je     c0015770 <Semaphore::tryAcquire()+0x90>
c0015758:	c7 05 a0 66 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00266a0,0x0
c0015762:	e8 ed fe ff ff       	call   c0015654 <schedule()>
c0015767:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c001576c:	48                   	dec    eax
c001576d:	8d 76 00             	lea    esi,[esi+0x0]
c0015770:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c0015775:	85 c0                	test   eax,eax
c0015777:	75 0b                	jne    c0015784 <Semaphore::tryAcquire()+0xa4>
c0015779:	fb                   	sti    
c001577a:	b0 01                	mov    al,0x1
c001577c:	83 c4 08             	add    esp,0x8
c001577f:	5b                   	pop    ebx
c0015780:	c3                   	ret    
c0015781:	8d 76 00             	lea    esi,[esi+0x0]
c0015784:	b0 01                	mov    al,0x1
c0015786:	83 c4 08             	add    esp,0x8
c0015789:	5b                   	pop    ebx
c001578a:	c3                   	ret    
c001578b:	90                   	nop
c001578c:	c7 05 a0 66 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00266a0,0x0
c0015796:	e8 b9 fe ff ff       	call   c0015654 <schedule()>
c001579b:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c00157a0:	48                   	dec    eax
c00157a1:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c00157a6:	85 c0                	test   eax,eax
c00157a8:	75 86                	jne    c0015730 <Semaphore::tryAcquire()+0x50>
c00157aa:	eb 8c                	jmp    c0015738 <Semaphore::tryAcquire()+0x58>

c00157ac <Semaphore::assertLocked(char const*)>:
c00157ac:	83 ec 0c             	sub    esp,0xc
c00157af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00157b3:	fa                   	cli    
c00157b4:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c00157ba:	a1 a4 66 02 c0       	mov    eax,ds:0xc00266a4
c00157bf:	8d 48 01             	lea    ecx,[eax+0x1]
c00157c2:	89 0d a4 66 02 c0    	mov    DWORD PTR ds:0xc00266a4,ecx
c00157c8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00157ca:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00157cd:	7c 29                	jl     c00157f8 <Semaphore::assertLocked(char const*)+0x4c>
c00157cf:	90                   	nop
c00157d0:	a3 a4 66 02 c0       	mov    ds:0xc00266a4,eax
c00157d5:	85 c0                	test   eax,eax
c00157d7:	75 0b                	jne    c00157e4 <Semaphore::assertLocked(char const*)+0x38>
c00157d9:	a1 a0 66 02 c0       	mov    eax,ds:0xc00266a0
c00157de:	85 c0                	test   eax,eax
c00157e0:	75 2e                	jne    c0015810 <Semaphore::assertLocked(char const*)+0x64>
c00157e2:	66 90                	xchg   ax,ax
c00157e4:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c00157e9:	48                   	dec    eax
c00157ea:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c00157ef:	75 03                	jne    c00157f4 <Semaphore::assertLocked(char const*)+0x48>
c00157f1:	fb                   	sti    
c00157f2:	66 90                	xchg   ax,ax
c00157f4:	83 c4 0c             	add    esp,0xc
c00157f7:	c3                   	ret    
c00157f8:	83 ec 0c             	sub    esp,0xc
c00157fb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00157ff:	e8 cd c9 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c0015804:	a1 a4 66 02 c0       	mov    eax,ds:0xc00266a4
c0015809:	83 c4 10             	add    esp,0x10
c001580c:	48                   	dec    eax
c001580d:	eb c1                	jmp    c00157d0 <Semaphore::assertLocked(char const*)+0x24>
c001580f:	90                   	nop
c0015810:	c7 05 a0 66 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00266a0,0x0
c001581a:	e8 35 fe ff ff       	call   c0015654 <schedule()>
c001581f:	eb c3                	jmp    c00157e4 <Semaphore::assertLocked(char const*)+0x38>
c0015821:	8d 76 00             	lea    esi,[esi+0x0]

c0015824 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015824:	83 ec 0c             	sub    esp,0xc
c0015827:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001582c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015830:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015833:	e8 1c fe ff ff       	call   c0015654 <schedule()>
c0015838:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c001583d:	48                   	dec    eax
c001583e:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c0015843:	75 03                	jne    c0015848 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015845:	fb                   	sti    
c0015846:	66 90                	xchg   ax,ax
c0015848:	83 c4 0c             	add    esp,0xc
c001584b:	c3                   	ret    

c001584c <blockTask(TaskState)>:
c001584c:	83 ec 0c             	sub    esp,0xc
c001584f:	fa                   	cli    
c0015850:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c0015856:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001585a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001585f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015862:	e8 ed fd ff ff       	call   c0015654 <schedule()>
c0015867:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c001586c:	48                   	dec    eax
c001586d:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c0015872:	75 04                	jne    c0015878 <blockTask(TaskState)+0x2c>
c0015874:	fb                   	sti    
c0015875:	8d 76 00             	lea    esi,[esi+0x0]
c0015878:	83 c4 0c             	add    esp,0xc
c001587b:	c3                   	ret    

c001587c <waitTask(int, int*, int)>:
c001587c:	83 ec 18             	sub    esp,0x18
c001587f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015884:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015888:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001588b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001588f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015894:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015897:	6a 07                	push   0x7
c0015899:	e8 ae ff ff ff       	call   c001584c <blockTask(TaskState)>
c001589e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158a3:	83 c4 10             	add    esp,0x10
c00158a6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00158a9:	85 d2                	test   edx,edx
c00158ab:	74 0b                	je     c00158b8 <waitTask(int, int*, int)+0x3c>
c00158ad:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00158b0:	89 02                	mov    DWORD PTR [edx],eax
c00158b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158b7:	90                   	nop
c00158b8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00158bb:	83 c4 0c             	add    esp,0xc
c00158be:	c3                   	ret    
c00158bf:	90                   	nop

c00158c0 <milliTenthSleepUntil(unsigned int)>:
c00158c0:	83 ec 0c             	sub    esp,0xc
c00158c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158c7:	39 05 ac 57 02 c0    	cmp    DWORD PTR ds:0xc00257ac,eax
c00158cd:	76 05                	jbe    c00158d4 <milliTenthSleepUntil(unsigned int)+0x14>
c00158cf:	90                   	nop
c00158d0:	83 c4 0c             	add    esp,0xc
c00158d3:	c3                   	ret    
c00158d4:	fa                   	cli    
c00158d5:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c00158db:	83 ec 08             	sub    esp,0x8
c00158de:	ff 05 a4 66 02 c0    	inc    DWORD PTR ds:0xc00266a4
c00158e4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00158ea:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00158ed:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00158f3:	68 b8 66 02 c0       	push   0xc00266b8
c00158f8:	e8 9f a0 00 00       	call   c001f99c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00158fd:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015904:	e8 43 ff ff ff       	call   c001584c <blockTask(TaskState)>
c0015909:	a1 a4 66 02 c0       	mov    eax,ds:0xc00266a4
c001590e:	83 c4 10             	add    esp,0x10
c0015911:	48                   	dec    eax
c0015912:	a3 a4 66 02 c0       	mov    ds:0xc00266a4,eax
c0015917:	85 c0                	test   eax,eax
c0015919:	75 09                	jne    c0015924 <milliTenthSleepUntil(unsigned int)+0x64>
c001591b:	a1 a0 66 02 c0       	mov    eax,ds:0xc00266a0
c0015920:	85 c0                	test   eax,eax
c0015922:	75 14                	jne    c0015938 <milliTenthSleepUntil(unsigned int)+0x78>
c0015924:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c0015929:	48                   	dec    eax
c001592a:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c001592f:	75 9f                	jne    c00158d0 <milliTenthSleepUntil(unsigned int)+0x10>
c0015931:	fb                   	sti    
c0015932:	83 c4 0c             	add    esp,0xc
c0015935:	c3                   	ret    
c0015936:	66 90                	xchg   ax,ax
c0015938:	c7 05 a0 66 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00266a0,0x0
c0015942:	e8 0d fd ff ff       	call   c0015654 <schedule()>
c0015947:	eb db                	jmp    c0015924 <milliTenthSleepUntil(unsigned int)+0x64>
c0015949:	8d 76 00             	lea    esi,[esi+0x0]

c001594c <milliTenthSleep(unsigned int)>:
c001594c:	a1 ac 57 02 c0       	mov    eax,ds:0xc00257ac
c0015951:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0015955:	e9 66 ff ff ff       	jmp    c00158c0 <milliTenthSleepUntil(unsigned int)>
c001595a:	66 90                	xchg   ax,ax

c001595c <sleep(unsigned int)>:
c001595c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015960:	8d 04 80             	lea    eax,[eax+eax*4]
c0015963:	8d 04 80             	lea    eax,[eax+eax*4]
c0015966:	8d 04 80             	lea    eax,[eax+eax*4]
c0015969:	8d 04 80             	lea    eax,[eax+eax*4]
c001596c:	c1 e0 04             	shl    eax,0x4
c001596f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015973:	eb d7                	jmp    c001594c <milliTenthSleep(unsigned int)>
c0015975:	90                   	nop
c0015976:	66 90                	xchg   ax,ax

c0015978 <Semaphore::acquire()>:
c0015978:	83 ec 0c             	sub    esp,0xc
c001597b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001597f:	fa                   	cli    
c0015980:	a1 a4 66 02 c0       	mov    eax,ds:0xc00266a4
c0015985:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c001598b:	8d 48 01             	lea    ecx,[eax+0x1]
c001598e:	89 0d a4 66 02 c0    	mov    DWORD PTR ds:0xc00266a4,ecx
c0015994:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015997:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015999:	7d 2d                	jge    c00159c8 <Semaphore::acquire()+0x50>
c001599b:	41                   	inc    ecx
c001599c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001599f:	90                   	nop
c00159a0:	a3 a4 66 02 c0       	mov    ds:0xc00266a4,eax
c00159a5:	85 c0                	test   eax,eax
c00159a7:	75 0b                	jne    c00159b4 <Semaphore::acquire()+0x3c>
c00159a9:	a1 a0 66 02 c0       	mov    eax,ds:0xc00266a0
c00159ae:	85 c0                	test   eax,eax
c00159b0:	75 62                	jne    c0015a14 <Semaphore::acquire()+0x9c>
c00159b2:	66 90                	xchg   ax,ax
c00159b4:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c00159b9:	48                   	dec    eax
c00159ba:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c00159bf:	75 03                	jne    c00159c4 <Semaphore::acquire()+0x4c>
c00159c1:	fb                   	sti    
c00159c2:	66 90                	xchg   ax,ax
c00159c4:	83 c4 0c             	add    esp,0xc
c00159c7:	c3                   	ret    
c00159c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159cd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00159d4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00159d7:	85 c9                	test   ecx,ecx
c00159d9:	74 4d                	je     c0015a28 <Semaphore::acquire()+0xb0>
c00159db:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00159de:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00159e4:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00159e7:	90                   	nop
c00159e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159ed:	83 ec 0c             	sub    esp,0xc
c00159f0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00159f3:	68 20 1e 02 c0       	push   0xc0021e20
c00159f8:	e8 fe 6a ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c00159fd:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015a04:	e8 43 fe ff ff       	call   c001584c <blockTask(TaskState)>
c0015a09:	a1 a4 66 02 c0       	mov    eax,ds:0xc00266a4
c0015a0e:	83 c4 10             	add    esp,0x10
c0015a11:	48                   	dec    eax
c0015a12:	eb 8c                	jmp    c00159a0 <Semaphore::acquire()+0x28>
c0015a14:	c7 05 a0 66 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00266a0,0x0
c0015a1e:	e8 31 fc ff ff       	call   c0015654 <schedule()>
c0015a23:	eb 8f                	jmp    c00159b4 <Semaphore::acquire()+0x3c>
c0015a25:	8d 76 00             	lea    esi,[esi+0x0]
c0015a28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a2d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015a30:	eb b6                	jmp    c00159e8 <Semaphore::acquire()+0x70>
c0015a32:	66 90                	xchg   ax,ax

c0015a34 <taskReturned>:
c0015a34:	83 ec 18             	sub    esp,0x18
c0015a37:	68 40 1e 02 c0       	push   0xc0021e40
c0015a3c:	e8 90 c7 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c0015a41:	83 c4 10             	add    esp,0x10
c0015a44:	83 ec 0c             	sub    esp,0xc
c0015a47:	6a 02                	push   0x2
c0015a49:	e8 fe fd ff ff       	call   c001584c <blockTask(TaskState)>
c0015a4e:	fa                   	cli    
c0015a4f:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c0015a55:	e8 fa fb ff ff       	call   c0015654 <schedule()>
c0015a5a:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c0015a5f:	83 c4 10             	add    esp,0x10
c0015a62:	48                   	dec    eax
c0015a63:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c0015a68:	85 c0                	test   eax,eax
c0015a6a:	75 d8                	jne    c0015a44 <taskReturned+0x10>
c0015a6c:	fb                   	sti    
c0015a6d:	eb d5                	jmp    c0015a44 <taskReturned+0x10>
c0015a6f:	90                   	nop

c0015a70 <Thr::processFromPID(int)>:
c0015a70:	57                   	push   edi
c0015a71:	56                   	push   esi
c0015a72:	53                   	push   ebx
c0015a73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015a77:	fa                   	cli    
c0015a78:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c0015a7e:	83 ec 0c             	sub    esp,0xc
c0015a81:	68 c4 66 02 c0       	push   0xc00266c4
c0015a86:	e8 51 9e 00 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015a8b:	83 c4 10             	add    esp,0x10
c0015a8e:	89 c7                	mov    edi,eax
c0015a90:	eb 16                	jmp    c0015aa8 <Thr::processFromPID(int)+0x38>
c0015a92:	66 90                	xchg   ax,ax
c0015a94:	83 ec 0c             	sub    esp,0xc
c0015a97:	68 c4 66 02 c0       	push   0xc00266c4
c0015a9c:	e8 3b 9e 00 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015aa1:	83 c4 10             	add    esp,0x10
c0015aa4:	39 f8                	cmp    eax,edi
c0015aa6:	74 4c                	je     c0015af4 <Thr::processFromPID(int)+0x84>
c0015aa8:	83 ec 0c             	sub    esp,0xc
c0015aab:	68 c4 66 02 c0       	push   0xc00266c4
c0015ab0:	e8 27 9e 00 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ab5:	c7 04 24 c4 66 02 c0 	mov    DWORD PTR [esp],0xc00266c4
c0015abc:	89 c3                	mov    ebx,eax
c0015abe:	e8 21 9e 00 00       	call   c001f8e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015ac3:	58                   	pop    eax
c0015ac4:	5a                   	pop    edx
c0015ac5:	53                   	push   ebx
c0015ac6:	68 c4 66 02 c0       	push   0xc00266c4
c0015acb:	e8 cc 9e 00 00       	call   c001f99c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015ad0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015ad3:	83 c4 10             	add    esp,0x10
c0015ad6:	39 30                	cmp    DWORD PTR [eax],esi
c0015ad8:	75 ba                	jne    c0015a94 <Thr::processFromPID(int)+0x24>
c0015ada:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c0015adf:	48                   	dec    eax
c0015ae0:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c0015ae5:	74 09                	je     c0015af0 <Thr::processFromPID(int)+0x80>
c0015ae7:	90                   	nop
c0015ae8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015aeb:	5b                   	pop    ebx
c0015aec:	5e                   	pop    esi
c0015aed:	5f                   	pop    edi
c0015aee:	c3                   	ret    
c0015aef:	90                   	nop
c0015af0:	fb                   	sti    
c0015af1:	eb f5                	jmp    c0015ae8 <Thr::processFromPID(int)+0x78>
c0015af3:	90                   	nop
c0015af4:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c0015af9:	48                   	dec    eax
c0015afa:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c0015aff:	75 07                	jne    c0015b08 <Thr::processFromPID(int)+0x98>
c0015b01:	fb                   	sti    
c0015b02:	5b                   	pop    ebx
c0015b03:	5e                   	pop    esi
c0015b04:	5f                   	pop    edi
c0015b05:	c3                   	ret    
c0015b06:	66 90                	xchg   ax,ax
c0015b08:	5b                   	pop    ebx
c0015b09:	31 c0                	xor    eax,eax
c0015b0b:	5e                   	pop    esi
c0015b0c:	5f                   	pop    edi
c0015b0d:	c3                   	ret    
c0015b0e:	66 90                	xchg   ax,ax

c0015b10 <unblockTask(ThreadControlBlock*)>:
c0015b10:	53                   	push   ebx
c0015b11:	83 ec 08             	sub    esp,0x8
c0015b14:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015b18:	fa                   	cli    
c0015b19:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c0015b1f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015b22:	85 c0                	test   eax,eax
c0015b24:	74 66                	je     c0015b8c <unblockTask(ThreadControlBlock*)+0x7c>
c0015b26:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015b29:	48                   	dec    eax
c0015b2a:	74 38                	je     c0015b64 <unblockTask(ThreadControlBlock*)+0x54>
c0015b2c:	83 ec 0c             	sub    esp,0xc
c0015b2f:	68 c4 66 02 c0       	push   0xc00266c4
c0015b34:	e8 a3 9d 00 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b39:	83 c4 10             	add    esp,0x10
c0015b3c:	85 c0                	test   eax,eax
c0015b3e:	75 1c                	jne    c0015b5c <unblockTask(ThreadControlBlock*)+0x4c>
c0015b40:	eb 5e                	jmp    c0015ba0 <unblockTask(ThreadControlBlock*)+0x90>
c0015b42:	66 90                	xchg   ax,ax
c0015b44:	83 ec 08             	sub    esp,0x8
c0015b47:	50                   	push   eax
c0015b48:	68 c4 66 02 c0       	push   0xc00266c4
c0015b4d:	e8 3a a1 00 00       	call   c001fc8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015b52:	83 c4 10             	add    esp,0x10
c0015b55:	85 c0                	test   eax,eax
c0015b57:	74 47                	je     c0015ba0 <unblockTask(ThreadControlBlock*)+0x90>
c0015b59:	8d 76 00             	lea    esi,[esi+0x0]
c0015b5c:	39 c3                	cmp    ebx,eax
c0015b5e:	75 e4                	jne    c0015b44 <unblockTask(ThreadControlBlock*)+0x34>
c0015b60:	eb 12                	jmp    c0015b74 <unblockTask(ThreadControlBlock*)+0x64>
c0015b62:	66 90                	xchg   ax,ax
c0015b64:	83 ec 0c             	sub    esp,0xc
c0015b67:	68 c3 1d 02 c0       	push   0xc0021dc3
c0015b6c:	e8 8a 69 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0015b71:	83 c4 10             	add    esp,0x10
c0015b74:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c0015b79:	48                   	dec    eax
c0015b7a:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c0015b7f:	75 03                	jne    c0015b84 <unblockTask(ThreadControlBlock*)+0x74>
c0015b81:	fb                   	sti    
c0015b82:	66 90                	xchg   ax,ax
c0015b84:	83 c4 08             	add    esp,0x8
c0015b87:	5b                   	pop    ebx
c0015b88:	c3                   	ret    
c0015b89:	8d 76 00             	lea    esi,[esi+0x0]
c0015b8c:	83 ec 0c             	sub    esp,0xc
c0015b8f:	68 ac 1d 02 c0       	push   0xc0021dac
c0015b94:	e8 62 69 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0015b99:	83 c4 10             	add    esp,0x10
c0015b9c:	eb d6                	jmp    c0015b74 <unblockTask(ThreadControlBlock*)+0x64>
c0015b9e:	66 90                	xchg   ax,ax
c0015ba0:	83 ec 08             	sub    esp,0x8
c0015ba3:	53                   	push   ebx
c0015ba4:	68 c4 66 02 c0       	push   0xc00266c4
c0015ba9:	e8 ee 9d 00 00       	call   c001f99c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015bae:	83 c4 10             	add    esp,0x10
c0015bb1:	eb c1                	jmp    c0015b74 <unblockTask(ThreadControlBlock*)+0x64>
c0015bb3:	90                   	nop

c0015bb4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015bb4:	55                   	push   ebp
c0015bb5:	57                   	push   edi
c0015bb6:	56                   	push   esi
c0015bb7:	53                   	push   ebx
c0015bb8:	83 ec 1c             	sub    esp,0x1c
c0015bbb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015bbf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015bc2:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0015bc8:	85 ff                	test   edi,edi
c0015bca:	7e 24                	jle    c0015bf0 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0015bcc:	31 f6                	xor    esi,esi
c0015bce:	66 90                	xchg   ax,ax
c0015bd0:	83 ec 0c             	sub    esp,0xc
c0015bd3:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0015bda:	46                   	inc    esi
c0015bdb:	e8 a1 3b ff ff       	call   c0009781 <free>
c0015be0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015be3:	83 c4 10             	add    esp,0x10
c0015be6:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0015bec:	7f e2                	jg     c0015bd0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0015bee:	66 90                	xchg   ax,ax
c0015bf0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015bfa:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015bff:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0015c02:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015c05:	d3 c0                	rol    eax,cl
c0015c07:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0015c0e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015c11:	89 f7                	mov    edi,esi
c0015c13:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015c1b:	0f 85 73 01 00 00    	jne    c0015d94 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0015c21:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015c27:	85 ed                	test   ebp,ebp
c0015c29:	74 1d                	je     c0015c48 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0015c2b:	83 ec 0c             	sub    esp,0xc
c0015c2e:	55                   	push   ebp
c0015c2f:	e8 42 c3 ff ff       	call   c0011f76 <EnvVarContainer::~EnvVarContainer()>
c0015c34:	59                   	pop    ecx
c0015c35:	5e                   	pop    esi
c0015c36:	6a 0c                	push   0xc
c0015c38:	55                   	push   ebp
c0015c39:	e8 dc 67 ff ff       	call   c000c41a <operator delete(void*, unsigned long)>
c0015c3e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015c41:	83 c4 10             	add    esp,0x10
c0015c44:	89 f7                	mov    edi,esi
c0015c46:	66 90                	xchg   ax,ax
c0015c48:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015c4e:	85 c0                	test   eax,eax
c0015c50:	0f 84 b2 00 00 00    	je     c0015d08 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0015c56:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015c59:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015c5d:	31 c9                	xor    ecx,ecx
c0015c5f:	eb 17                	jmp    c0015c78 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0015c61:	8d 76 00             	lea    esi,[esi+0x0]
c0015c64:	41                   	inc    ecx
c0015c65:	83 f9 10             	cmp    ecx,0x10
c0015c68:	0f 84 9a 00 00 00    	je     c0015d08 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0015c6e:	66 90                	xchg   ax,ax
c0015c70:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015c76:	66 90                	xchg   ax,ax
c0015c78:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0015c7f:	d3 fa                	sar    edx,cl
c0015c81:	83 e2 01             	and    edx,0x1
c0015c84:	74 de                	je     c0015c64 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0015c86:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0015c89:	01 d2                	add    edx,edx
c0015c8b:	01 ca                	add    edx,ecx
c0015c8d:	8d 14 92             	lea    edx,[edx+edx*4]
c0015c90:	01 d0                	add    eax,edx
c0015c92:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015c98:	83 fd 07             	cmp    ebp,0x7
c0015c9b:	75 c7                	jne    c0015c64 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0015c9d:	05 40 02 00 00       	add    eax,0x240
c0015ca2:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0015ca5:	83 fd ff             	cmp    ebp,0xffffffff
c0015ca8:	0f 8c ee 00 00 00    	jl     c0015d9c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0015cae:	0f 84 ac 01 00 00    	je     c0015e60 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0015cb4:	85 ed                	test   ebp,ebp
c0015cb6:	0f 84 90 01 00 00    	je     c0015e4c <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0015cbc:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015cbe:	75 a4                	jne    c0015c64 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0015cc0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015cc6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015cca:	01 d0                	add    eax,edx
c0015ccc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015cd0:	83 ec 0c             	sub    esp,0xc
c0015cd3:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015cd9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015cdc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015ce2:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015ce9:	50                   	push   eax
c0015cea:	e8 21 fe ff ff       	call   c0015b10 <unblockTask(ThreadControlBlock*)>
c0015cef:	83 c4 10             	add    esp,0x10
c0015cf2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015cf5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015cf9:	89 f7                	mov    edi,esi
c0015cfb:	41                   	inc    ecx
c0015cfc:	83 f9 10             	cmp    ecx,0x10
c0015cff:	0f 85 6b ff ff ff    	jne    c0015c70 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015d05:	8d 76 00             	lea    esi,[esi+0x0]
c0015d08:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015d0e:	85 c0                	test   eax,eax
c0015d10:	74 62                	je     c0015d74 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0015d12:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015d18:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015d1e:	74 54                	je     c0015d74 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0015d20:	83 ec 0c             	sub    esp,0xc
c0015d23:	68 c4 66 02 c0       	push   0xc00266c4
c0015d28:	e8 af 9b 00 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015d2d:	c7 04 24 c4 66 02 c0 	mov    DWORD PTR [esp],0xc00266c4
c0015d34:	89 c7                	mov    edi,eax
c0015d36:	e8 85 9b 00 00       	call   c001f8c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015d3b:	83 c4 10             	add    esp,0x10
c0015d3e:	84 c0                	test   al,al
c0015d40:	0f 84 ce 00 00 00    	je     c0015e14 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0015d46:	66 90                	xchg   ax,ax
c0015d48:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015d4b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015d51:	85 d2                	test   edx,edx
c0015d53:	74 0f                	je     c0015d64 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0015d55:	83 ec 0c             	sub    esp,0xc
c0015d58:	8b 02                	mov    eax,DWORD PTR [edx]
c0015d5a:	52                   	push   edx
c0015d5b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015d5e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015d61:	83 c4 10             	add    esp,0x10
c0015d64:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015d6e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015d71:	8d 76 00             	lea    esi,[esi+0x0]
c0015d74:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015d7a:	85 db                	test   ebx,ebx
c0015d7c:	74 16                	je     c0015d94 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0015d7e:	83 ec 0c             	sub    esp,0xc
c0015d81:	53                   	push   ebx
c0015d82:	e8 01 5a ff ff       	call   c000b788 <VAS::~VAS()>
c0015d87:	58                   	pop    eax
c0015d88:	5a                   	pop    edx
c0015d89:	6a 14                	push   0x14
c0015d8b:	53                   	push   ebx
c0015d8c:	e8 89 66 ff ff       	call   c000c41a <operator delete(void*, unsigned long)>
c0015d91:	83 c4 10             	add    esp,0x10
c0015d94:	83 c4 1c             	add    esp,0x1c
c0015d97:	5b                   	pop    ebx
c0015d98:	5e                   	pop    esi
c0015d99:	5f                   	pop    edi
c0015d9a:	5d                   	pop    ebp
c0015d9b:	c3                   	ret    
c0015d9c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015da0:	83 ec 0c             	sub    esp,0xc
c0015da3:	68 74 1e 02 c0       	push   0xc0021e74
c0015da8:	e8 24 c4 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c0015dad:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015db0:	83 c4 10             	add    esp,0x10
c0015db3:	89 f7                	mov    edi,esi
c0015db5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015db9:	e9 a6 fe ff ff       	jmp    c0015c64 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0015dbe:	66 90                	xchg   ax,ax
c0015dc0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015dc6:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015dcc:	75 1e                	jne    c0015dec <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0015dce:	83 ec 0c             	sub    esp,0xc
c0015dd1:	68 dc 1e 02 c0       	push   0xc0021edc
c0015dd6:	e8 20 67 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0015ddb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015de2:	e8 65 fa ff ff       	call   c001584c <blockTask(TaskState)>
c0015de7:	83 c4 10             	add    esp,0x10
c0015dea:	66 90                	xchg   ax,ax
c0015dec:	83 ec 08             	sub    esp,0x8
c0015def:	56                   	push   esi
c0015df0:	68 c4 66 02 c0       	push   0xc00266c4
c0015df5:	e8 a2 9b 00 00       	call   c001f99c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015dfa:	c7 04 24 c4 66 02 c0 	mov    DWORD PTR [esp],0xc00266c4
c0015e01:	e8 d6 9a 00 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e06:	83 c4 10             	add    esp,0x10
c0015e09:	39 f8                	cmp    eax,edi
c0015e0b:	0f 84 37 ff ff ff    	je     c0015d48 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0015e11:	8d 76 00             	lea    esi,[esi+0x0]
c0015e14:	83 ec 0c             	sub    esp,0xc
c0015e17:	68 c4 66 02 c0       	push   0xc00266c4
c0015e1c:	e8 bb 9a 00 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e21:	c7 04 24 c4 66 02 c0 	mov    DWORD PTR [esp],0xc00266c4
c0015e28:	89 c6                	mov    esi,eax
c0015e2a:	e8 b5 9a 00 00       	call   c001f8e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015e2f:	83 c4 10             	add    esp,0x10
c0015e32:	39 f3                	cmp    ebx,esi
c0015e34:	74 b6                	je     c0015dec <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0015e36:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015e39:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015e3c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015e42:	75 a8                	jne    c0015dec <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0015e44:	e9 77 ff ff ff       	jmp    c0015dc0 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0015e49:	8d 76 00             	lea    esi,[esi+0x0]
c0015e4c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015e50:	83 ec 0c             	sub    esp,0xc
c0015e53:	68 a8 1e 02 c0       	push   0xc0021ea8
c0015e58:	e9 4b ff ff ff       	jmp    c0015da8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0015e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0015e60:	8b 36                	mov    esi,DWORD PTR [esi]
c0015e62:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015e66:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015e69:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015e6c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015e72:	01 d7                	add    edi,edx
c0015e74:	89 f8                	mov    eax,edi
c0015e76:	e9 51 fe ff ff       	jmp    c0015ccc <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0015e7b:	90                   	nop

c0015e7c <cleanerTaskFunction(void*)>:
c0015e7c:	53                   	push   ebx
c0015e7d:	83 ec 08             	sub    esp,0x8
c0015e80:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c0015e85:	48                   	dec    eax
c0015e86:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c0015e8b:	75 03                	jne    c0015e90 <cleanerTaskFunction(void*)+0x14>
c0015e8d:	fb                   	sti    
c0015e8e:	66 90                	xchg   ax,ax
c0015e90:	fa                   	cli    
c0015e91:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c0015e96:	80 3d 8c 66 02 c0 00 	cmp    BYTE PTR ds:0xc002668c,0x0
c0015e9d:	8d 50 01             	lea    edx,[eax+0x1]
c0015ea0:	89 15 a8 66 02 c0    	mov    DWORD PTR ds:0xc00266a8,edx
c0015ea6:	0f 84 ac 00 00 00    	je     c0015f58 <cleanerTaskFunction(void*)+0xdc>
c0015eac:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c0015eb1:	85 c0                	test   eax,eax
c0015eb3:	75 03                	jne    c0015eb8 <cleanerTaskFunction(void*)+0x3c>
c0015eb5:	fb                   	sti    
c0015eb6:	66 90                	xchg   ax,ax
c0015eb8:	c6 05 8c 66 02 c0 00 	mov    BYTE PTR ds:0xc002668c,0x0
c0015ebf:	fa                   	cli    
c0015ec0:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c0015ec6:	ff 05 a4 66 02 c0    	inc    DWORD PTR ds:0xc00266a4
c0015ecc:	fa                   	cli    
c0015ecd:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c0015ed3:	eb 2b                	jmp    c0015f00 <cleanerTaskFunction(void*)+0x84>
c0015ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0015ed8:	83 ec 0c             	sub    esp,0xc
c0015edb:	68 ac 66 02 c0       	push   0xc00266ac
c0015ee0:	e8 f7 99 00 00       	call   c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ee5:	c7 04 24 ac 66 02 c0 	mov    DWORD PTR [esp],0xc00266ac
c0015eec:	89 c3                	mov    ebx,eax
c0015eee:	e8 f1 99 00 00       	call   c001f8e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015ef3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ef6:	e8 b9 fc ff ff       	call   c0015bb4 <cleanupTerminatedTask(ThreadControlBlock*)>
c0015efb:	83 c4 10             	add    esp,0x10
c0015efe:	66 90                	xchg   ax,ax
c0015f00:	83 ec 0c             	sub    esp,0xc
c0015f03:	68 ac 66 02 c0       	push   0xc00266ac
c0015f08:	e8 b3 99 00 00       	call   c001f8c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015f0d:	83 c4 10             	add    esp,0x10
c0015f10:	84 c0                	test   al,al
c0015f12:	74 c4                	je     c0015ed8 <cleanerTaskFunction(void*)+0x5c>
c0015f14:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c0015f19:	48                   	dec    eax
c0015f1a:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c0015f1f:	75 03                	jne    c0015f24 <cleanerTaskFunction(void*)+0xa8>
c0015f21:	fb                   	sti    
c0015f22:	66 90                	xchg   ax,ax
c0015f24:	a1 a4 66 02 c0       	mov    eax,ds:0xc00266a4
c0015f29:	48                   	dec    eax
c0015f2a:	a3 a4 66 02 c0       	mov    ds:0xc00266a4,eax
c0015f2f:	0f 85 4b ff ff ff    	jne    c0015e80 <cleanerTaskFunction(void*)+0x4>
c0015f35:	a1 a0 66 02 c0       	mov    eax,ds:0xc00266a0
c0015f3a:	85 c0                	test   eax,eax
c0015f3c:	0f 84 3e ff ff ff    	je     c0015e80 <cleanerTaskFunction(void*)+0x4>
c0015f42:	c7 05 a0 66 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00266a0,0x0
c0015f4c:	e8 03 f7 ff ff       	call   c0015654 <schedule()>
c0015f51:	e9 2a ff ff ff       	jmp    c0015e80 <cleanerTaskFunction(void*)+0x4>
c0015f56:	66 90                	xchg   ax,ax
c0015f58:	83 ec 0c             	sub    esp,0xc
c0015f5b:	6a 02                	push   0x2
c0015f5d:	e8 c2 f8 ff ff       	call   c0015824 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015f62:	83 c4 10             	add    esp,0x10
c0015f65:	e9 4e ff ff ff       	jmp    c0015eb8 <cleanerTaskFunction(void*)+0x3c>
c0015f6a:	66 90                	xchg   ax,ax

c0015f6c <terminateTask(int)>:
c0015f6c:	83 ec 14             	sub    esp,0x14
c0015f6f:	fa                   	cli    
c0015f70:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c0015f76:	ff 05 a4 66 02 c0    	inc    DWORD PTR ds:0xc00266a4
c0015f7c:	fa                   	cli    
c0015f7d:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c0015f83:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015f87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f8c:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015f8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f94:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015f97:	50                   	push   eax
c0015f98:	68 ac 66 02 c0       	push   0xc00266ac
c0015f9d:	e8 fa 99 00 00       	call   c001f99c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015fa2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fa7:	83 c4 10             	add    esp,0x10
c0015faa:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015fb1:	a1 88 66 02 c0       	mov    eax,ds:0xc0026688
c0015fb6:	85 c0                	test   eax,eax
c0015fb8:	74 5e                	je     c0016018 <terminateTask(int)+0xac>
c0015fba:	83 ec 0c             	sub    esp,0xc
c0015fbd:	c6 05 8c 66 02 c0 01 	mov    BYTE PTR ds:0xc002668c,0x1
c0015fc4:	50                   	push   eax
c0015fc5:	e8 46 fb ff ff       	call   c0015b10 <unblockTask(ThreadControlBlock*)>
c0015fca:	83 c4 10             	add    esp,0x10
c0015fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0015fd0:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c0015fd5:	48                   	dec    eax
c0015fd6:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c0015fdb:	75 03                	jne    c0015fe0 <terminateTask(int)+0x74>
c0015fdd:	fb                   	sti    
c0015fde:	66 90                	xchg   ax,ax
c0015fe0:	a1 a4 66 02 c0       	mov    eax,ds:0xc00266a4
c0015fe5:	48                   	dec    eax
c0015fe6:	a3 a4 66 02 c0       	mov    ds:0xc00266a4,eax
c0015feb:	75 0b                	jne    c0015ff8 <terminateTask(int)+0x8c>
c0015fed:	83 3d a0 66 02 c0 00 	cmp    DWORD PTR ds:0xc00266a0,0x0
c0015ff4:	75 36                	jne    c001602c <terminateTask(int)+0xc0>
c0015ff6:	66 90                	xchg   ax,ax
c0015ff8:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c0015ffd:	48                   	dec    eax
c0015ffe:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c0016003:	75 03                	jne    c0016008 <terminateTask(int)+0x9c>
c0016005:	fb                   	sti    
c0016006:	66 90                	xchg   ax,ax
c0016008:	fa                   	cli    
c0016009:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c001600f:	90                   	nop
c0016010:	e8 3f f6 ff ff       	call   c0015654 <schedule()>
c0016015:	eb e1                	jmp    c0015ff8 <terminateTask(int)+0x8c>
c0016017:	90                   	nop
c0016018:	83 ec 0c             	sub    esp,0xc
c001601b:	68 da 1d 02 c0       	push   0xc0021dda
c0016020:	e8 d6 64 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0016025:	83 c4 10             	add    esp,0x10
c0016028:	eb a6                	jmp    c0015fd0 <terminateTask(int)+0x64>
c001602a:	66 90                	xchg   ax,ax
c001602c:	c7 05 a0 66 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00266a0,0x0
c0016036:	eb d8                	jmp    c0016010 <terminateTask(int)+0xa4>

c0016038 <Thr::terminateFromIRQ(int)>:
c0016038:	83 ec 18             	sub    esp,0x18
c001603b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001603f:	e8 28 ff ff ff       	call   c0015f6c <terminateTask(int)>

c0016044 <Semaphore::release()>:
c0016044:	83 ec 0c             	sub    esp,0xc
c0016047:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001604b:	fa                   	cli    
c001604c:	a1 a4 66 02 c0       	mov    eax,ds:0xc00266a4
c0016051:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c0016057:	8d 48 01             	lea    ecx,[eax+0x1]
c001605a:	89 0d a4 66 02 c0    	mov    DWORD PTR ds:0xc00266a4,ecx
c0016060:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016063:	85 c9                	test   ecx,ecx
c0016065:	74 41                	je     c00160a8 <Semaphore::release()+0x64>
c0016067:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001606a:	83 ec 0c             	sub    esp,0xc
c001606d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016070:	51                   	push   ecx
c0016071:	e8 9a fa ff ff       	call   c0015b10 <unblockTask(ThreadControlBlock*)>
c0016076:	a1 a4 66 02 c0       	mov    eax,ds:0xc00266a4
c001607b:	83 c4 10             	add    esp,0x10
c001607e:	48                   	dec    eax
c001607f:	90                   	nop
c0016080:	a3 a4 66 02 c0       	mov    ds:0xc00266a4,eax
c0016085:	85 c0                	test   eax,eax
c0016087:	75 0b                	jne    c0016094 <Semaphore::release()+0x50>
c0016089:	a1 a0 66 02 c0       	mov    eax,ds:0xc00266a0
c001608e:	85 c0                	test   eax,eax
c0016090:	75 1e                	jne    c00160b0 <Semaphore::release()+0x6c>
c0016092:	66 90                	xchg   ax,ax
c0016094:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c0016099:	48                   	dec    eax
c001609a:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c001609f:	75 03                	jne    c00160a4 <Semaphore::release()+0x60>
c00160a1:	fb                   	sti    
c00160a2:	66 90                	xchg   ax,ax
c00160a4:	83 c4 0c             	add    esp,0xc
c00160a7:	c3                   	ret    
c00160a8:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00160ab:	eb d3                	jmp    c0016080 <Semaphore::release()+0x3c>
c00160ad:	8d 76 00             	lea    esi,[esi+0x0]
c00160b0:	c7 05 a0 66 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00266a0,0x0
c00160ba:	e8 95 f5 ff ff       	call   c0015654 <schedule()>
c00160bf:	eb d3                	jmp    c0016094 <Semaphore::release()+0x50>
c00160c1:	8d 76 00             	lea    esi,[esi+0x0]

c00160c4 <__static_initialization_and_destruction_0(int, int)>:
c00160c4:	83 ec 0c             	sub    esp,0xc
c00160c7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00160cc:	0f 85 8e 00 00 00    	jne    c0016160 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00160d2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00160da:	0f 85 80 00 00 00    	jne    c0016160 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00160e0:	83 ec 0c             	sub    esp,0xc
c00160e3:	68 c4 66 02 c0       	push   0xc00266c4
c00160e8:	e8 5b 9b 00 00       	call   c001fc48 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00160ed:	83 c4 10             	add    esp,0x10
c00160f0:	83 ec 04             	sub    esp,0x4
c00160f3:	68 88 29 02 c0       	push   0xc0022988
c00160f8:	68 c4 66 02 c0       	push   0xc00266c4
c00160fd:	68 f8 fb 01 c0       	push   0xc001fbf8
c0016102:	e8 c3 62 ff ff       	call   c000c3ca <__cxa_atexit>
c0016107:	83 c4 10             	add    esp,0x10
c001610a:	83 ec 0c             	sub    esp,0xc
c001610d:	68 b8 66 02 c0       	push   0xc00266b8
c0016112:	e8 31 9b 00 00       	call   c001fc48 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016117:	83 c4 10             	add    esp,0x10
c001611a:	83 ec 04             	sub    esp,0x4
c001611d:	68 88 29 02 c0       	push   0xc0022988
c0016122:	68 b8 66 02 c0       	push   0xc00266b8
c0016127:	68 f8 fb 01 c0       	push   0xc001fbf8
c001612c:	e8 99 62 ff ff       	call   c000c3ca <__cxa_atexit>
c0016131:	83 c4 10             	add    esp,0x10
c0016134:	83 ec 0c             	sub    esp,0xc
c0016137:	68 ac 66 02 c0       	push   0xc00266ac
c001613c:	e8 07 9b 00 00       	call   c001fc48 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016141:	83 c4 10             	add    esp,0x10
c0016144:	83 ec 04             	sub    esp,0x4
c0016147:	68 88 29 02 c0       	push   0xc0022988
c001614c:	68 ac 66 02 c0       	push   0xc00266ac
c0016151:	68 f8 fb 01 c0       	push   0xc001fbf8
c0016156:	e8 6f 62 ff ff       	call   c000c3ca <__cxa_atexit>
c001615b:	83 c4 10             	add    esp,0x10
c001615e:	66 90                	xchg   ax,ax
c0016160:	90                   	nop
c0016161:	83 c4 0c             	add    esp,0xc
c0016164:	c3                   	ret    
c0016165:	8d 76 00             	lea    esi,[esi+0x0]

c0016168 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016168:	83 ec 0c             	sub    esp,0xc
c001616b:	83 ec 08             	sub    esp,0x8
c001616e:	68 ff ff 00 00       	push   0xffff
c0016173:	6a 01                	push   0x1
c0016175:	e8 4a ff ff ff       	call   c00160c4 <__static_initialization_and_destruction_0(int, int)>
c001617a:	83 c4 10             	add    esp,0x10
c001617d:	83 c4 0c             	add    esp,0xc
c0016180:	c3                   	ret    

c0016181 <Vm::inbv(unsigned short)>:
c0016181:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016185:	66 81 fa fe fe       	cmp    dx,0xfefe
c001618a:	75 06                	jne    c0016192 <Vm::inbv(unsigned short)+0x11>
c001618c:	a0 0c 67 02 c0       	mov    al,ds:0xc002670c
c0016191:	c3                   	ret    
c0016192:	ec                   	in     al,dx
c0016193:	c3                   	ret    

c0016194 <Vm::outbv(unsigned short, unsigned char)>:
c0016194:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016198:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001619c:	66 81 fa fe fe       	cmp    dx,0xfefe
c00161a1:	75 25                	jne    c00161c8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00161a3:	8b 0d 0c 67 02 c0    	mov    ecx,DWORD PTR ds:0xc002670c
c00161a9:	8d 51 01             	lea    edx,[ecx+0x1]
c00161ac:	88 81 20 67 02 c0    	mov    BYTE PTR [ecx-0x3ffd98e0],al
c00161b2:	89 15 0c 67 02 c0    	mov    DWORD PTR ds:0xc002670c,edx
c00161b8:	83 fa 20             	cmp    edx,0x20
c00161bb:	75 0c                	jne    c00161c9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00161bd:	c7 05 0c 67 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002670c,0x1f
c00161c7:	c3                   	ret    
c00161c8:	ee                   	out    dx,al
c00161c9:	c3                   	ret    

c00161ca <Vm::realToLinear(unsigned short, unsigned short)>:
c00161ca:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00161cf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00161d4:	c1 e0 04             	shl    eax,0x4
c00161d7:	01 d0                	add    eax,edx
c00161d9:	c3                   	ret    

c00161da <Vm::getSegment(unsigned int)>:
c00161da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00161de:	c1 e8 10             	shr    eax,0x10
c00161e1:	c3                   	ret    

c00161e2 <Vm::getOffset(unsigned int)>:
c00161e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00161e6:	c3                   	ret    

c00161e7 <Vm::mainloop2()>:
c00161e7:	83 ec 18             	sub    esp,0x18
c00161ea:	fa                   	cli    
c00161eb:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c00161f1:	6a 02                	push   0x2
c00161f3:	c6 05 05 67 02 c0 01 	mov    BYTE PTR ds:0xc0026705,0x1
c00161fa:	e8 25 f6 ff ff       	call   c0015824 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00161ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016204:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016208:	52                   	push   edx
c0016209:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c001620d:	52                   	push   edx
c001620e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016212:	52                   	push   edx
c0016213:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016217:	50                   	push   eax
c0016218:	e8 12 a0 fe ff       	call   c000022f <goToVM86>
c001621d:	83 c4 2c             	add    esp,0x2c
c0016220:	c3                   	ret    

c0016221 <Vm::mainVm8086Loop(void*)>:
c0016221:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c0016226:	48                   	dec    eax
c0016227:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c001622c:	75 01                	jne    c001622f <Vm::mainVm8086Loop(void*)+0xe>
c001622e:	fb                   	sti    
c001622f:	eb b6                	jmp    c00161e7 <Vm::mainloop2()>

c0016231 <Vm::mainloop3(unsigned long)>:
c0016231:	83 ec 18             	sub    esp,0x18
c0016234:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016238:	fa                   	cli    
c0016239:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c001623f:	6a 02                	push   0x2
c0016241:	c6 05 04 67 02 c0 01 	mov    BYTE PTR ds:0xc0026704,0x1
c0016248:	a3 00 67 02 c0       	mov    ds:0xc0026700,eax
c001624d:	e8 d2 f5 ff ff       	call   c0015824 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016252:	83 c4 1c             	add    esp,0x1c
c0016255:	eb 90                	jmp    c00161e7 <Vm::mainloop2()>

c0016257 <Vm::initialise8086()>:
c0016257:	83 ec 0c             	sub    esp,0xc
c001625a:	68 80 00 00 00       	push   0x80
c001625f:	6a 00                	push   0x0
c0016261:	68 21 62 01 c0       	push   0xc0016221
c0016266:	ff 35 d0 66 02 c0    	push   DWORD PTR ds:0xc00266d0
c001626c:	e8 c7 f1 ff ff       	call   c0015438 <Process::createThread(void (*)(void*), void*, int)>
c0016271:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016278:	a3 08 67 02 c0       	mov    ds:0xc0026708,eax
c001627d:	68 00 01 00 00       	push   0x100
c0016282:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c0016287:	6a 00                	push   0x0
c0016289:	6a 00                	push   0x0
c001628b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016291:	e8 4e 59 ff ff       	call   c000bbe4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016296:	83 c4 2c             	add    esp,0x2c
c0016299:	c3                   	ret    

c001629a <Vm::finish8086()>:
c001629a:	53                   	push   ebx
c001629b:	83 ec 08             	sub    esp,0x8
c001629e:	fa                   	cli    
c001629f:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c00162a5:	80 3d 04 67 02 c0 00 	cmp    BYTE PTR ds:0xc0026704,0x0
c00162ac:	75 15                	jne    c00162c3 <Vm::finish8086()+0x29>
c00162ae:	e8 a1 f3 ff ff       	call   c0015654 <schedule()>
c00162b3:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c00162b8:	48                   	dec    eax
c00162b9:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c00162be:	75 de                	jne    c001629e <Vm::finish8086()+0x4>
c00162c0:	fb                   	sti    
c00162c1:	eb db                	jmp    c001629e <Vm::finish8086()+0x4>
c00162c3:	83 ec 0c             	sub    esp,0xc
c00162c6:	8b 1d 00 67 02 c0    	mov    ebx,DWORD PTR ds:0xc0026700
c00162cc:	ff 35 08 67 02 c0    	push   DWORD PTR ds:0xc0026708
c00162d2:	c6 05 04 67 02 c0 00 	mov    BYTE PTR ds:0xc0026704,0x0
c00162d9:	e8 32 f8 ff ff       	call   c0015b10 <unblockTask(ThreadControlBlock*)>
c00162de:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c00162e3:	83 c4 10             	add    esp,0x10
c00162e6:	8d 50 ff             	lea    edx,[eax-0x1]
c00162e9:	89 15 a8 66 02 c0    	mov    DWORD PTR ds:0xc00266a8,edx
c00162ef:	85 d2                	test   edx,edx
c00162f1:	75 01                	jne    c00162f4 <Vm::finish8086()+0x5a>
c00162f3:	fb                   	sti    
c00162f4:	89 d8                	mov    eax,ebx
c00162f6:	83 c4 08             	add    esp,0x8
c00162f9:	5b                   	pop    ebx
c00162fa:	c3                   	ret    

c00162fb <Vm::getOutput8086(unsigned char*)>:
c00162fb:	57                   	push   edi
c00162fc:	8b 0d 0c 67 02 c0    	mov    ecx,DWORD PTR ds:0xc002670c
c0016302:	56                   	push   esi
c0016303:	be 20 67 02 c0       	mov    esi,0xc0026720
c0016308:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001630c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001630e:	a1 0c 67 02 c0       	mov    eax,ds:0xc002670c
c0016313:	5e                   	pop    esi
c0016314:	c7 05 0c 67 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002670c,0x0
c001631e:	5f                   	pop    edi
c001631f:	c3                   	ret    

c0016320 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016320:	55                   	push   ebp
c0016321:	57                   	push   edi
c0016322:	56                   	push   esi
c0016323:	53                   	push   ebx
c0016324:	83 ec 0c             	sub    esp,0xc
c0016327:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001632b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001632f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016333:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016337:	fa                   	cli    
c0016338:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c001633e:	80 3d 05 67 02 c0 00 	cmp    BYTE PTR ds:0xc0026705,0x0
c0016345:	75 15                	jne    c001635c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016347:	e8 08 f3 ff ff       	call   c0015654 <schedule()>
c001634c:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c0016351:	48                   	dec    eax
c0016352:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c0016357:	75 de                	jne    c0016337 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016359:	fb                   	sti    
c001635a:	eb db                	jmp    c0016337 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001635c:	a1 08 67 02 c0       	mov    eax,ds:0xc0026708
c0016361:	c7 05 0c 67 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002670c,0x0
c001636b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001636f:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016373:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016377:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001637b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001637f:	0f b7 ff             	movzx  edi,di
c0016382:	0f b7 f6             	movzx  esi,si
c0016385:	50                   	push   eax
c0016386:	6a 20                	push   0x20
c0016388:	6a 00                	push   0x0
c001638a:	68 20 67 02 c0       	push   0xc0026720
c001638f:	e8 14 a1 fe ff       	call   c00004a8 <memset>
c0016394:	5a                   	pop    edx
c0016395:	59                   	pop    ecx
c0016396:	57                   	push   edi
c0016397:	56                   	push   esi
c0016398:	e8 2d fe ff ff       	call   c00161ca <Vm::realToLinear(unsigned short, unsigned short)>
c001639d:	83 c4 10             	add    esp,0x10
c00163a0:	89 c7                	mov    edi,eax
c00163a2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00163a6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00163aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00163ac:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c00163b1:	c6 05 05 67 02 c0 00 	mov    BYTE PTR ds:0xc0026705,0x0
c00163b8:	48                   	dec    eax
c00163b9:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c00163be:	75 01                	jne    c00163c1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00163c0:	fb                   	sti    
c00163c1:	83 ec 0c             	sub    esp,0xc
c00163c4:	ff 35 08 67 02 c0    	push   DWORD PTR ds:0xc0026708
c00163ca:	e8 41 f7 ff ff       	call   c0015b10 <unblockTask(ThreadControlBlock*)>
c00163cf:	83 c4 1c             	add    esp,0x1c
c00163d2:	b0 01                	mov    al,0x1
c00163d4:	5b                   	pop    ebx
c00163d5:	5e                   	pop    esi
c00163d6:	5f                   	pop    edi
c00163d7:	5d                   	pop    ebp
c00163d8:	c3                   	ret    

c00163d9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00163d9:	55                   	push   ebp
c00163da:	57                   	push   edi
c00163db:	56                   	push   esi
c00163dc:	53                   	push   ebx
c00163dd:	83 ec 2c             	sub    esp,0x2c
c00163e0:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00163e4:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00163e8:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00163ec:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00163f0:	fa                   	cli    
c00163f1:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c00163f7:	0f b6 35 05 67 02 c0 	movzx  esi,BYTE PTR ds:0xc0026705
c00163fe:	89 f0                	mov    eax,esi
c0016400:	84 c0                	test   al,al
c0016402:	75 1d                	jne    c0016421 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0016404:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016408:	e8 47 f2 ff ff       	call   c0015654 <schedule()>
c001640d:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c0016412:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016416:	48                   	dec    eax
c0016417:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c001641c:	75 d2                	jne    c00163f0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001641e:	fb                   	sti    
c001641f:	eb cf                	jmp    c00163f0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016421:	a1 08 67 02 c0       	mov    eax,ds:0xc0026708
c0016426:	c7 05 0c 67 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002670c,0x0
c0016430:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0016434:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016438:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c001643c:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0016440:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016444:	50                   	push   eax
c0016445:	6a 20                	push   0x20
c0016447:	6a 00                	push   0x0
c0016449:	68 20 67 02 c0       	push   0xc0026720
c001644e:	e8 55 a0 fe ff       	call   c00004a8 <memset>
c0016453:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001645a:	e8 12 33 ff ff       	call   c0009771 <malloc>
c001645f:	83 c4 0c             	add    esp,0xc
c0016462:	89 c3                	mov    ebx,eax
c0016464:	ff 35 d0 66 02 c0    	push   DWORD PTR ds:0xc00266d0
c001646a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001646e:	50                   	push   eax
c001646f:	e8 f2 65 ff ff       	call   c000ca66 <File::File(char const*, Process*)>
c0016474:	83 c4 10             	add    esp,0x10
c0016477:	85 db                	test   ebx,ebx
c0016479:	75 0a                	jne    c0016485 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001647b:	83 ec 0c             	sub    esp,0xc
c001647e:	68 04 1f 02 c0       	push   0xc0021f04
c0016483:	eb 3e                	jmp    c00164c3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0016485:	50                   	push   eax
c0016486:	8d 44 24 17          	lea    eax,[esp+0x17]
c001648a:	50                   	push   eax
c001648b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001648f:	50                   	push   eax
c0016490:	53                   	push   ebx
c0016491:	e8 36 69 ff ff       	call   c000cdcc <File::stat(unsigned long long*, bool*)>
c0016496:	83 c4 10             	add    esp,0x10
c0016499:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001649e:	74 0a                	je     c00164aa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00164a0:	83 ec 0c             	sub    esp,0xc
c00164a3:	68 18 1f 02 c0       	push   0xc0021f18
c00164a8:	eb 19                	jmp    c00164c3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00164aa:	51                   	push   ecx
c00164ab:	51                   	push   ecx
c00164ac:	6a 01                	push   0x1
c00164ae:	53                   	push   ebx
c00164af:	e8 6c 66 ff ff       	call   c000cb20 <File::open(FileOpenMode)>
c00164b4:	83 c4 10             	add    esp,0x10
c00164b7:	85 c0                	test   eax,eax
c00164b9:	74 24                	je     c00164df <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00164bb:	83 ec 0c             	sub    esp,0xc
c00164be:	68 31 1f 02 c0       	push   0xc0021f31
c00164c3:	e8 09 bd ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c00164c8:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c00164cd:	83 c4 10             	add    esp,0x10
c00164d0:	48                   	dec    eax
c00164d1:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c00164d6:	85 c0                	test   eax,eax
c00164d8:	75 01                	jne    c00164db <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00164da:	fb                   	sti    
c00164db:	31 f6                	xor    esi,esi
c00164dd:	eb 58                	jmp    c0016537 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00164df:	0f b7 ed             	movzx  ebp,bp
c00164e2:	50                   	push   eax
c00164e3:	0f b7 ff             	movzx  edi,di
c00164e6:	50                   	push   eax
c00164e7:	55                   	push   ebp
c00164e8:	57                   	push   edi
c00164e9:	e8 dc fc ff ff       	call   c00161ca <Vm::realToLinear(unsigned short, unsigned short)>
c00164ee:	5a                   	pop    edx
c00164ef:	8b 13                	mov    edx,DWORD PTR [ebx]
c00164f1:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00164f5:	51                   	push   ecx
c00164f6:	50                   	push   eax
c00164f7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00164fb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00164ff:	53                   	push   ebx
c0016500:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016503:	83 c4 14             	add    esp,0x14
c0016506:	53                   	push   ebx
c0016507:	e8 72 66 ff ff       	call   c000cb7e <File::close()>
c001650c:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c0016511:	83 c4 10             	add    esp,0x10
c0016514:	48                   	dec    eax
c0016515:	c6 05 05 67 02 c0 00 	mov    BYTE PTR ds:0xc0026705,0x0
c001651c:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c0016521:	85 c0                	test   eax,eax
c0016523:	75 01                	jne    c0016526 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0016525:	fb                   	sti    
c0016526:	83 ec 0c             	sub    esp,0xc
c0016529:	ff 35 08 67 02 c0    	push   DWORD PTR ds:0xc0026708
c001652f:	e8 dc f5 ff ff       	call   c0015b10 <unblockTask(ThreadControlBlock*)>
c0016534:	83 c4 10             	add    esp,0x10
c0016537:	83 c4 2c             	add    esp,0x2c
c001653a:	89 f0                	mov    eax,esi
c001653c:	5b                   	pop    ebx
c001653d:	5e                   	pop    esi
c001653e:	5f                   	pop    edi
c001653f:	5d                   	pop    ebp
c0016540:	c3                   	ret    

c0016541 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016541:	57                   	push   edi
c0016542:	56                   	push   esi
c0016543:	53                   	push   ebx
c0016544:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016548:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001654c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016550:	83 e8 06             	sub    eax,0x6
c0016553:	0f b7 c0             	movzx  eax,ax
c0016556:	50                   	push   eax
c0016557:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001655c:	50                   	push   eax
c001655d:	e8 68 fc ff ff       	call   c00161ca <Vm::realToLinear(unsigned short, unsigned short)>
c0016562:	5a                   	pop    edx
c0016563:	5e                   	pop    esi
c0016564:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0016567:	8d 56 fa             	lea    edx,[esi-0x6]
c001656a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016570:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0016573:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0016576:	83 c2 02             	add    edx,0x2
c0016579:	66 89 10             	mov    WORD PTR [eax],dx
c001657c:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001657f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016583:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0016586:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001658a:	89 d6                	mov    esi,edx
c001658c:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0016592:	66 81 e6 ff fd       	and    si,0xfdff
c0016597:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c001659b:	74 07                	je     c00165a4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001659d:	89 d6                	mov    esi,edx
c001659f:	66 81 ce 00 02       	or     si,0x200
c00165a4:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00165a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165ad:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00165b1:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00165b9:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00165bc:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00165c4:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00165c7:	5b                   	pop    ebx
c00165c8:	5e                   	pop    esi
c00165c9:	5f                   	pop    edi
c00165ca:	c3                   	ret    

c00165cb <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00165cb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00165d0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00165d5:	c1 e0 04             	shl    eax,0x4
c00165d8:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00165db:	c3                   	ret    

c00165dc <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00165dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00165e1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00165e6:	c1 e0 04             	shl    eax,0x4
c00165e9:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00165ed:	c3                   	ret    

c00165ee <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00165ee:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00165f3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00165f8:	c1 e0 04             	shl    eax,0x4
c00165fb:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00165fe:	c3                   	ret    

c00165ff <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00165ff:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016604:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016609:	c1 e0 04             	shl    eax,0x4
c001660c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016610:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016613:	c3                   	ret    

c0016614 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016614:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016619:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001661e:	c1 e0 04             	shl    eax,0x4
c0016621:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016625:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016629:	c3                   	ret    

c001662a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001662a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001662f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016634:	c1 e0 04             	shl    eax,0x4
c0016637:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001663b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001663e:	c3                   	ret    

c001663f <Vm::faultHandler(regs*)>:
c001663f:	55                   	push   ebp
c0016640:	57                   	push   edi
c0016641:	56                   	push   esi
c0016642:	53                   	push   ebx
c0016643:	83 ec 1c             	sub    esp,0x1c
c0016646:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001664a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001664d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016651:	0f b7 f8             	movzx  edi,ax
c0016654:	52                   	push   edx
c0016655:	0f b7 c0             	movzx  eax,ax
c0016658:	50                   	push   eax
c0016659:	e8 6c fb ff ff       	call   c00161ca <Vm::realToLinear(unsigned short, unsigned short)>
c001665e:	5a                   	pop    edx
c001665f:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0016662:	59                   	pop    ecx
c0016663:	89 c1                	mov    ecx,eax
c0016665:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016668:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001666c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016671:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016675:	0f b7 c5             	movzx  eax,bp
c0016678:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001667c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0016680:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016684:	e8 41 fb ff ff       	call   c00161ca <Vm::realToLinear(unsigned short, unsigned short)>
c0016689:	5e                   	pop    esi
c001668a:	be 06 00 00 00       	mov    esi,0x6
c001668f:	5a                   	pop    edx
c0016690:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0016695:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001669a:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001669d:	80 fa 9d             	cmp    dl,0x9d
c00166a0:	0f 84 2c 02 00 00    	je     c00168d2 <Vm::faultHandler(regs*)+0x293>
c00166a6:	0f 87 91 00 00 00    	ja     c001673d <Vm::faultHandler(regs*)+0xfe>
c00166ac:	80 fa 66             	cmp    dl,0x66
c00166af:	0f 84 98 01 00 00    	je     c001684d <Vm::faultHandler(regs*)+0x20e>
c00166b5:	77 47                	ja     c00166fe <Vm::faultHandler(regs*)+0xbf>
c00166b7:	80 fa 36             	cmp    dl,0x36
c00166ba:	0f 84 80 01 00 00    	je     c0016840 <Vm::faultHandler(regs*)+0x201>
c00166c0:	77 1a                	ja     c00166dc <Vm::faultHandler(regs*)+0x9d>
c00166c2:	80 fa 26             	cmp    dl,0x26
c00166c5:	0f 84 4e 01 00 00    	je     c0016819 <Vm::faultHandler(regs*)+0x1da>
c00166cb:	80 fa 2e             	cmp    dl,0x2e
c00166ce:	0f 85 e2 05 00 00    	jne    c0016cb6 <Vm::faultHandler(regs*)+0x677>
c00166d4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00166d7:	31 f6                	xor    esi,esi
c00166d9:	41                   	inc    ecx
c00166da:	eb be                	jmp    c001669a <Vm::faultHandler(regs*)+0x5b>
c00166dc:	80 fa 64             	cmp    dl,0x64
c00166df:	0f 84 41 01 00 00    	je     c0016826 <Vm::faultHandler(regs*)+0x1e7>
c00166e5:	0f 87 48 01 00 00    	ja     c0016833 <Vm::faultHandler(regs*)+0x1f4>
c00166eb:	80 fa 3e             	cmp    dl,0x3e
c00166ee:	0f 85 c2 05 00 00    	jne    c0016cb6 <Vm::faultHandler(regs*)+0x677>
c00166f4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00166f7:	be 01 00 00 00       	mov    esi,0x1
c00166fc:	eb db                	jmp    c00166d9 <Vm::faultHandler(regs*)+0x9a>
c00166fe:	80 fa 6d             	cmp    dl,0x6d
c0016701:	0f 84 ec 02 00 00    	je     c00169f3 <Vm::faultHandler(regs*)+0x3b4>
c0016707:	77 17                	ja     c0016720 <Vm::faultHandler(regs*)+0xe1>
c0016709:	80 fa 67             	cmp    dl,0x67
c001670c:	0f 84 48 01 00 00    	je     c001685a <Vm::faultHandler(regs*)+0x21b>
c0016712:	80 fa 6c             	cmp    dl,0x6c
c0016715:	0f 84 69 02 00 00    	je     c0016984 <Vm::faultHandler(regs*)+0x345>
c001671b:	e9 96 05 00 00       	jmp    c0016cb6 <Vm::faultHandler(regs*)+0x677>
c0016720:	80 fa 6f             	cmp    dl,0x6f
c0016723:	0f 84 f4 03 00 00    	je     c0016b1d <Vm::faultHandler(regs*)+0x4de>
c0016729:	0f 82 59 03 00 00    	jb     c0016a88 <Vm::faultHandler(regs*)+0x449>
c001672f:	80 fa 9c             	cmp    dl,0x9c
c0016732:	0f 84 2f 01 00 00    	je     c0016867 <Vm::faultHandler(regs*)+0x228>
c0016738:	e9 79 05 00 00       	jmp    c0016cb6 <Vm::faultHandler(regs*)+0x677>
c001673d:	80 fa ec             	cmp    dl,0xec
c0016740:	0f 84 14 05 00 00    	je     c0016c5a <Vm::faultHandler(regs*)+0x61b>
c0016746:	77 7b                	ja     c00167c3 <Vm::faultHandler(regs*)+0x184>
c0016748:	80 fa e4             	cmp    dl,0xe4
c001674b:	0f 84 93 04 00 00    	je     c0016be4 <Vm::faultHandler(regs*)+0x5a5>
c0016751:	77 53                	ja     c00167a6 <Vm::faultHandler(regs*)+0x167>
c0016753:	80 fa cd             	cmp    dl,0xcd
c0016756:	0f 84 d9 01 00 00    	je     c0016935 <Vm::faultHandler(regs*)+0x2f6>
c001675c:	80 fa cf             	cmp    dl,0xcf
c001675f:	0f 85 51 05 00 00    	jne    c0016cb6 <Vm::faultHandler(regs*)+0x677>
c0016765:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016768:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001676b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001676f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016772:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0016776:	81 ca 00 02 02 00    	or     edx,0x20200
c001677c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001677f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0016783:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016789:	66 c1 e8 09          	shr    ax,0x9
c001678d:	83 e0 01             	and    eax,0x1
c0016790:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016793:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016796:	83 c0 06             	add    eax,0x6
c0016799:	25 ff ff 00 00       	and    eax,0xffff
c001679e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00167a1:	e9 0c 05 00 00       	jmp    c0016cb2 <Vm::faultHandler(regs*)+0x673>
c00167a6:	80 fa e6             	cmp    dl,0xe6
c00167a9:	0f 84 7f 04 00 00    	je     c0016c2e <Vm::faultHandler(regs*)+0x5ef>
c00167af:	0f 82 4b 04 00 00    	jb     c0016c00 <Vm::faultHandler(regs*)+0x5c1>
c00167b5:	80 fa e7             	cmp    dl,0xe7
c00167b8:	0f 84 87 04 00 00    	je     c0016c45 <Vm::faultHandler(regs*)+0x606>
c00167be:	e9 f3 04 00 00       	jmp    c0016cb6 <Vm::faultHandler(regs*)+0x677>
c00167c3:	80 fa ef             	cmp    dl,0xef
c00167c6:	0f 84 d1 04 00 00    	je     c0016c9d <Vm::faultHandler(regs*)+0x65e>
c00167cc:	77 28                	ja     c00167f6 <Vm::faultHandler(regs*)+0x1b7>
c00167ce:	80 fa ed             	cmp    dl,0xed
c00167d1:	0f 84 9f 04 00 00    	je     c0016c76 <Vm::faultHandler(regs*)+0x637>
c00167d7:	80 fa ee             	cmp    dl,0xee
c00167da:	0f 85 d6 04 00 00    	jne    c0016cb6 <Vm::faultHandler(regs*)+0x677>
c00167e0:	50                   	push   eax
c00167e1:	50                   	push   eax
c00167e2:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00167e6:	50                   	push   eax
c00167e7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00167eb:	50                   	push   eax
c00167ec:	e8 a3 f9 ff ff       	call   c0016194 <Vm::outbv(unsigned short, unsigned char)>
c00167f1:	e9 9f 04 00 00       	jmp    c0016c95 <Vm::faultHandler(regs*)+0x656>
c00167f6:	80 fa fa             	cmp    dl,0xfa
c00167f9:	0f 84 69 01 00 00    	je     c0016968 <Vm::faultHandler(regs*)+0x329>
c00167ff:	80 fa fb             	cmp    dl,0xfb
c0016802:	0f 84 6e 01 00 00    	je     c0016976 <Vm::faultHandler(regs*)+0x337>
c0016808:	80 fa f3             	cmp    dl,0xf3
c001680b:	0f 85 a5 04 00 00    	jne    c0016cb6 <Vm::faultHandler(regs*)+0x677>
c0016811:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016814:	e9 c0 fe ff ff       	jmp    c00166d9 <Vm::faultHandler(regs*)+0x9a>
c0016819:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001681c:	be 02 00 00 00       	mov    esi,0x2
c0016821:	e9 b3 fe ff ff       	jmp    c00166d9 <Vm::faultHandler(regs*)+0x9a>
c0016826:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016829:	be 03 00 00 00       	mov    esi,0x3
c001682e:	e9 a6 fe ff ff       	jmp    c00166d9 <Vm::faultHandler(regs*)+0x9a>
c0016833:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016836:	be 04 00 00 00       	mov    esi,0x4
c001683b:	e9 99 fe ff ff       	jmp    c00166d9 <Vm::faultHandler(regs*)+0x9a>
c0016840:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016843:	be 05 00 00 00       	mov    esi,0x5
c0016848:	e9 8c fe ff ff       	jmp    c00166d9 <Vm::faultHandler(regs*)+0x9a>
c001684d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016850:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0016855:	e9 7f fe ff ff       	jmp    c00166d9 <Vm::faultHandler(regs*)+0x9a>
c001685a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001685d:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0016862:	e9 72 fe ff ff       	jmp    c00166d9 <Vm::faultHandler(regs*)+0x9a>
c0016867:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001686a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001686e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0016873:	74 30                	je     c00168a5 <Vm::faultHandler(regs*)+0x266>
c0016875:	83 e9 04             	sub    ecx,0x4
c0016878:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001687e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016884:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016887:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001688a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016890:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016894:	0f 84 15 04 00 00    	je     c0016caf <Vm::faultHandler(regs*)+0x670>
c001689a:	80 ce 02             	or     dh,0x2
c001689d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00168a0:	e9 0a 04 00 00       	jmp    c0016caf <Vm::faultHandler(regs*)+0x670>
c00168a5:	83 e9 02             	sub    ecx,0x2
c00168a8:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00168ae:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00168b1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00168b5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00168bb:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00168bf:	74 05                	je     c00168c6 <Vm::faultHandler(regs*)+0x287>
c00168c1:	80 ce 02             	or     dh,0x2
c00168c4:	eb 03                	jmp    c00168c9 <Vm::faultHandler(regs*)+0x28a>
c00168c6:	80 e6 fd             	and    dh,0xfd
c00168c9:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00168cd:	e9 dd 03 00 00       	jmp    c0016caf <Vm::faultHandler(regs*)+0x670>
c00168d2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00168d7:	74 2a                	je     c0016903 <Vm::faultHandler(regs*)+0x2c4>
c00168d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00168db:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00168e1:	81 ca 00 02 02 00    	or     edx,0x20200
c00168e7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00168ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00168ec:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00168f2:	c1 e8 09             	shr    eax,0x9
c00168f5:	83 e0 01             	and    eax,0x1
c00168f8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00168fb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00168fe:	83 c0 04             	add    eax,0x4
c0016901:	eb 25                	jmp    c0016928 <Vm::faultHandler(regs*)+0x2e9>
c0016903:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016906:	81 ca 00 02 02 00    	or     edx,0x20200
c001690c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001690f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0016912:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016918:	66 c1 e8 09          	shr    ax,0x9
c001691c:	83 e0 01             	and    eax,0x1
c001691f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016922:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016925:	83 c0 02             	add    eax,0x2
c0016928:	25 ff ff 00 00       	and    eax,0xffff
c001692d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016930:	e9 7a 03 00 00       	jmp    c0016caf <Vm::faultHandler(regs*)+0x670>
c0016935:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016939:	3c ee                	cmp    al,0xee
c001693b:	75 10                	jne    c001694d <Vm::faultHandler(regs*)+0x30e>
c001693d:	83 ec 0c             	sub    esp,0xc
c0016940:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016943:	e8 e9 f8 ff ff       	call   c0016231 <Vm::mainloop3(unsigned long)>
c0016948:	e9 4b 03 00 00       	jmp    c0016c98 <Vm::faultHandler(regs*)+0x659>
c001694d:	83 ec 0c             	sub    esp,0xc
c0016950:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016958:	51                   	push   ecx
c0016959:	50                   	push   eax
c001695a:	53                   	push   ebx
c001695b:	e8 e1 fb ff ff       	call   c0016541 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016960:	83 c4 20             	add    esp,0x20
c0016963:	e9 4a 03 00 00       	jmp    c0016cb2 <Vm::faultHandler(regs*)+0x673>
c0016968:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001696d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016971:	e9 39 03 00 00       	jmp    c0016caf <Vm::faultHandler(regs*)+0x670>
c0016976:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001697b:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001697f:	e9 2b 03 00 00       	jmp    c0016caf <Vm::faultHandler(regs*)+0x670>
c0016984:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016987:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001698c:	74 2b                	je     c00169b9 <Vm::faultHandler(regs*)+0x37a>
c001698e:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016995:	76 22                	jbe    c00169b9 <Vm::faultHandler(regs*)+0x37a>
c0016997:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001699b:	50                   	push   eax
c001699c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00169a0:	50                   	push   eax
c00169a1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00169a5:	50                   	push   eax
c00169a6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00169aa:	50                   	push   eax
c00169ab:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00169af:	50                   	push   eax
c00169b0:	6a 6c                	push   0x6c
c00169b2:	6a 6c                	push   0x6c
c00169b4:	e9 b9 01 00 00       	jmp    c0016b72 <Vm::faultHandler(regs*)+0x533>
c00169b9:	83 ec 0c             	sub    esp,0xc
c00169bc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00169c0:	0f b7 f6             	movzx  esi,si
c00169c3:	50                   	push   eax
c00169c4:	e8 b8 f7 ff ff       	call   c0016181 <Vm::inbv(unsigned short)>
c00169c9:	83 c4 0c             	add    esp,0xc
c00169cc:	0f b6 c0             	movzx  eax,al
c00169cf:	50                   	push   eax
c00169d0:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00169d4:	50                   	push   eax
c00169d5:	56                   	push   esi
c00169d6:	e8 24 fc ff ff       	call   c00165ff <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00169db:	83 c4 10             	add    esp,0x10
c00169de:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00169e1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00169e5:	74 03                	je     c00169ea <Vm::faultHandler(regs*)+0x3ab>
c00169e7:	48                   	dec    eax
c00169e8:	eb 01                	jmp    c00169eb <Vm::faultHandler(regs*)+0x3ac>
c00169ea:	40                   	inc    eax
c00169eb:	0f b7 c0             	movzx  eax,ax
c00169ee:	e9 8d 00 00 00       	jmp    c0016a80 <Vm::faultHandler(regs*)+0x441>
c00169f3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00169f6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00169f9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00169fe:	74 29                	je     c0016a29 <Vm::faultHandler(regs*)+0x3ea>
c0016a00:	3d ff ff 00 00       	cmp    eax,0xffff
c0016a05:	76 22                	jbe    c0016a29 <Vm::faultHandler(regs*)+0x3ea>
c0016a07:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016a0b:	50                   	push   eax
c0016a0c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016a10:	50                   	push   eax
c0016a11:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016a15:	50                   	push   eax
c0016a16:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016a1a:	50                   	push   eax
c0016a1b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016a1f:	50                   	push   eax
c0016a20:	6a 6d                	push   0x6d
c0016a22:	6a 6d                	push   0x6d
c0016a24:	e9 49 01 00 00       	jmp    c0016b72 <Vm::faultHandler(regs*)+0x533>
c0016a29:	0f b7 c8             	movzx  ecx,ax
c0016a2c:	0f b7 f6             	movzx  esi,si
c0016a2f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016a32:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0016a37:	74 20                	je     c0016a59 <Vm::faultHandler(regs*)+0x41a>
c0016a39:	ed                   	in     eax,dx
c0016a3a:	55                   	push   ebp
c0016a3b:	50                   	push   eax
c0016a3c:	51                   	push   ecx
c0016a3d:	56                   	push   esi
c0016a3e:	e8 e7 fb ff ff       	call   c001662a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016a43:	83 c4 10             	add    esp,0x10
c0016a46:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016a49:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016a4d:	74 05                	je     c0016a54 <Vm::faultHandler(regs*)+0x415>
c0016a4f:	83 e8 04             	sub    eax,0x4
c0016a52:	eb 27                	jmp    c0016a7b <Vm::faultHandler(regs*)+0x43c>
c0016a54:	83 c0 04             	add    eax,0x4
c0016a57:	eb 22                	jmp    c0016a7b <Vm::faultHandler(regs*)+0x43c>
c0016a59:	66 ed                	in     ax,dx
c0016a5b:	0f b7 c0             	movzx  eax,ax
c0016a5e:	57                   	push   edi
c0016a5f:	50                   	push   eax
c0016a60:	51                   	push   ecx
c0016a61:	56                   	push   esi
c0016a62:	e8 ad fb ff ff       	call   c0016614 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0016a67:	83 c4 10             	add    esp,0x10
c0016a6a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016a6d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016a71:	74 05                	je     c0016a78 <Vm::faultHandler(regs*)+0x439>
c0016a73:	83 e8 02             	sub    eax,0x2
c0016a76:	eb 03                	jmp    c0016a7b <Vm::faultHandler(regs*)+0x43c>
c0016a78:	83 c0 02             	add    eax,0x2
c0016a7b:	25 ff ff 00 00       	and    eax,0xffff
c0016a80:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016a83:	e9 27 02 00 00       	jmp    c0016caf <Vm::faultHandler(regs*)+0x670>
c0016a88:	8d 46 ff             	lea    eax,[esi-0x1]
c0016a8b:	3c 05                	cmp    al,0x5
c0016a8d:	77 24                	ja     c0016ab3 <Vm::faultHandler(regs*)+0x474>
c0016a8f:	0f b6 c0             	movzx  eax,al
c0016a92:	ff 24 85 a4 1f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde05c]
c0016a99:	0f b7 fd             	movzx  edi,bp
c0016a9c:	eb 15                	jmp    c0016ab3 <Vm::faultHandler(regs*)+0x474>
c0016a9e:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016aa2:	eb 0f                	jmp    c0016ab3 <Vm::faultHandler(regs*)+0x474>
c0016aa4:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016aa8:	eb 09                	jmp    c0016ab3 <Vm::faultHandler(regs*)+0x474>
c0016aaa:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016aae:	eb 03                	jmp    c0016ab3 <Vm::faultHandler(regs*)+0x474>
c0016ab0:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016ab3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016ab6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016abb:	74 29                	je     c0016ae6 <Vm::faultHandler(regs*)+0x4a7>
c0016abd:	3d ff ff 00 00       	cmp    eax,0xffff
c0016ac2:	76 22                	jbe    c0016ae6 <Vm::faultHandler(regs*)+0x4a7>
c0016ac4:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016ac8:	50                   	push   eax
c0016ac9:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016acd:	50                   	push   eax
c0016ace:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016ad2:	50                   	push   eax
c0016ad3:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016ad7:	50                   	push   eax
c0016ad8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016adc:	50                   	push   eax
c0016add:	6a 6e                	push   0x6e
c0016adf:	6a 6e                	push   0x6e
c0016ae1:	e9 8c 00 00 00       	jmp    c0016b72 <Vm::faultHandler(regs*)+0x533>
c0016ae6:	0f b7 c0             	movzx  eax,ax
c0016ae9:	52                   	push   edx
c0016aea:	52                   	push   edx
c0016aeb:	50                   	push   eax
c0016aec:	57                   	push   edi
c0016aed:	e8 d9 fa ff ff       	call   c00165cb <Vm::readByteFromReal(unsigned short, unsigned short)>
c0016af2:	59                   	pop    ecx
c0016af3:	0f b6 c0             	movzx  eax,al
c0016af6:	5e                   	pop    esi
c0016af7:	50                   	push   eax
c0016af8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016afc:	50                   	push   eax
c0016afd:	e8 92 f6 ff ff       	call   c0016194 <Vm::outbv(unsigned short, unsigned char)>
c0016b02:	83 c4 10             	add    esp,0x10
c0016b05:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016b08:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016b0c:	74 03                	je     c0016b11 <Vm::faultHandler(regs*)+0x4d2>
c0016b0e:	48                   	dec    eax
c0016b0f:	eb 01                	jmp    c0016b12 <Vm::faultHandler(regs*)+0x4d3>
c0016b11:	40                   	inc    eax
c0016b12:	0f b7 c0             	movzx  eax,ax
c0016b15:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016b18:	e9 92 01 00 00       	jmp    c0016caf <Vm::faultHandler(regs*)+0x670>
c0016b1d:	8d 46 ff             	lea    eax,[esi-0x1]
c0016b20:	3c 05                	cmp    al,0x5
c0016b22:	77 1f                	ja     c0016b43 <Vm::faultHandler(regs*)+0x504>
c0016b24:	0f b6 c0             	movzx  eax,al
c0016b27:	ff 24 85 bc 1f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde044]
c0016b2e:	89 ef                	mov    edi,ebp
c0016b30:	eb 11                	jmp    c0016b43 <Vm::faultHandler(regs*)+0x504>
c0016b32:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0016b35:	eb 0c                	jmp    c0016b43 <Vm::faultHandler(regs*)+0x504>
c0016b37:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0016b3a:	eb 07                	jmp    c0016b43 <Vm::faultHandler(regs*)+0x504>
c0016b3c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016b3f:	eb 02                	jmp    c0016b43 <Vm::faultHandler(regs*)+0x504>
c0016b41:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0016b43:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0016b46:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016b4b:	74 37                	je     c0016b84 <Vm::faultHandler(regs*)+0x545>
c0016b4d:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0016b53:	76 2f                	jbe    c0016b84 <Vm::faultHandler(regs*)+0x545>
c0016b55:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016b59:	50                   	push   eax
c0016b5a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016b5e:	50                   	push   eax
c0016b5f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016b63:	50                   	push   eax
c0016b64:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016b68:	50                   	push   eax
c0016b69:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016b6d:	50                   	push   eax
c0016b6e:	6a 6f                	push   0x6f
c0016b70:	6a 6f                	push   0x6f
c0016b72:	68 4a 1f 02 c0       	push   0xc0021f4a
c0016b77:	e8 7f 59 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0016b7c:	83 c4 20             	add    esp,0x20
c0016b7f:	e9 86 01 00 00       	jmp    c0016d0a <Vm::faultHandler(regs*)+0x6cb>
c0016b84:	0f b7 d7             	movzx  edx,di
c0016b87:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016b8a:	0f b7 c6             	movzx  eax,si
c0016b8d:	81 e1 00 04 00 00    	and    ecx,0x400
c0016b93:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016b96:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0016b9b:	74 1d                	je     c0016bba <Vm::faultHandler(regs*)+0x57b>
c0016b9d:	55                   	push   ebp
c0016b9e:	55                   	push   ebp
c0016b9f:	50                   	push   eax
c0016ba0:	52                   	push   edx
c0016ba1:	e8 48 fa ff ff       	call   c00165ee <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016ba6:	83 c4 10             	add    esp,0x10
c0016ba9:	89 fa                	mov    edx,edi
c0016bab:	ef                   	out    dx,eax
c0016bac:	85 c9                	test   ecx,ecx
c0016bae:	74 05                	je     c0016bb5 <Vm::faultHandler(regs*)+0x576>
c0016bb0:	83 ee 04             	sub    esi,0x4
c0016bb3:	eb 21                	jmp    c0016bd6 <Vm::faultHandler(regs*)+0x597>
c0016bb5:	83 c6 04             	add    esi,0x4
c0016bb8:	eb 1c                	jmp    c0016bd6 <Vm::faultHandler(regs*)+0x597>
c0016bba:	55                   	push   ebp
c0016bbb:	55                   	push   ebp
c0016bbc:	50                   	push   eax
c0016bbd:	52                   	push   edx
c0016bbe:	e8 19 fa ff ff       	call   c00165dc <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016bc3:	83 c4 10             	add    esp,0x10
c0016bc6:	89 fa                	mov    edx,edi
c0016bc8:	66 ef                	out    dx,ax
c0016bca:	85 c9                	test   ecx,ecx
c0016bcc:	74 05                	je     c0016bd3 <Vm::faultHandler(regs*)+0x594>
c0016bce:	83 ee 02             	sub    esi,0x2
c0016bd1:	eb 03                	jmp    c0016bd6 <Vm::faultHandler(regs*)+0x597>
c0016bd3:	83 c6 02             	add    esi,0x2
c0016bd6:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016bdc:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016bdf:	e9 cb 00 00 00       	jmp    c0016caf <Vm::faultHandler(regs*)+0x670>
c0016be4:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016beb:	83 ec 0c             	sub    esp,0xc
c0016bee:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016bf2:	50                   	push   eax
c0016bf3:	e8 89 f5 ff ff       	call   c0016181 <Vm::inbv(unsigned short)>
c0016bf8:	0f b6 c0             	movzx  eax,al
c0016bfb:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016bfe:	eb 3f                	jmp    c0016c3f <Vm::faultHandler(regs*)+0x600>
c0016c00:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0016c05:	74 07                	je     c0016c0e <Vm::faultHandler(regs*)+0x5cf>
c0016c07:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016c0b:	ed                   	in     eax,dx
c0016c0c:	eb 14                	jmp    c0016c22 <Vm::faultHandler(regs*)+0x5e3>
c0016c0e:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016c11:	66 31 f6             	xor    si,si
c0016c14:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016c17:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016c1b:	66 ed                	in     ax,dx
c0016c1d:	0f b7 c0             	movzx  eax,ax
c0016c20:	09 f0                	or     eax,esi
c0016c22:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016c25:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016c29:	e9 84 00 00 00       	jmp    c0016cb2 <Vm::faultHandler(regs*)+0x673>
c0016c2e:	52                   	push   edx
c0016c2f:	52                   	push   edx
c0016c30:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016c34:	50                   	push   eax
c0016c35:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016c39:	50                   	push   eax
c0016c3a:	e8 55 f5 ff ff       	call   c0016194 <Vm::outbv(unsigned short, unsigned char)>
c0016c3f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016c43:	eb 53                	jmp    c0016c98 <Vm::faultHandler(regs*)+0x659>
c0016c45:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016c48:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016c4c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0016c51:	74 03                	je     c0016c56 <Vm::faultHandler(regs*)+0x617>
c0016c53:	ef                   	out    dx,eax
c0016c54:	eb cf                	jmp    c0016c25 <Vm::faultHandler(regs*)+0x5e6>
c0016c56:	66 ef                	out    dx,ax
c0016c58:	eb cb                	jmp    c0016c25 <Vm::faultHandler(regs*)+0x5e6>
c0016c5a:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016c61:	83 ec 0c             	sub    esp,0xc
c0016c64:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016c68:	50                   	push   eax
c0016c69:	e8 13 f5 ff ff       	call   c0016181 <Vm::inbv(unsigned short)>
c0016c6e:	0f b6 c0             	movzx  eax,al
c0016c71:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016c74:	eb 1f                	jmp    c0016c95 <Vm::faultHandler(regs*)+0x656>
c0016c76:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016c79:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0016c7e:	74 03                	je     c0016c83 <Vm::faultHandler(regs*)+0x644>
c0016c80:	ed                   	in     eax,dx
c0016c81:	eb 0d                	jmp    c0016c90 <Vm::faultHandler(regs*)+0x651>
c0016c83:	66 ed                	in     ax,dx
c0016c85:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016c88:	0f b7 c0             	movzx  eax,ax
c0016c8b:	66 31 d2             	xor    dx,dx
c0016c8e:	09 d0                	or     eax,edx
c0016c90:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016c93:	eb 1a                	jmp    c0016caf <Vm::faultHandler(regs*)+0x670>
c0016c95:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016c98:	83 c4 10             	add    esp,0x10
c0016c9b:	eb 15                	jmp    c0016cb2 <Vm::faultHandler(regs*)+0x673>
c0016c9d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016ca0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016ca3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0016ca8:	74 03                	je     c0016cad <Vm::faultHandler(regs*)+0x66e>
c0016caa:	ef                   	out    dx,eax
c0016cab:	eb 02                	jmp    c0016caf <Vm::faultHandler(regs*)+0x670>
c0016cad:	66 ef                	out    dx,ax
c0016caf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016cb2:	b0 01                	mov    al,0x1
c0016cb4:	eb 56                	jmp    c0016d0c <Vm::faultHandler(regs*)+0x6cd>
c0016cb6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016cba:	50                   	push   eax
c0016cbb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016cbf:	50                   	push   eax
c0016cc0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016cc4:	50                   	push   eax
c0016cc5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016cc9:	50                   	push   eax
c0016cca:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016cce:	50                   	push   eax
c0016ccf:	52                   	push   edx
c0016cd0:	52                   	push   edx
c0016cd1:	68 77 1f 02 c0       	push   0xc0021f77
c0016cd6:	e8 20 58 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0016cdb:	83 c4 20             	add    esp,0x20
c0016cde:	83 ec 0c             	sub    esp,0xc
c0016ce1:	6a 60                	push   0x60
c0016ce3:	e8 99 f4 ff ff       	call   c0016181 <Vm::inbv(unsigned short)>
c0016ce8:	83 c4 10             	add    esp,0x10
c0016ceb:	3c 1c                	cmp    al,0x1c
c0016ced:	74 04                	je     c0016cf3 <Vm::faultHandler(regs*)+0x6b4>
c0016cef:	3c 5a                	cmp    al,0x5a
c0016cf1:	75 eb                	jne    c0016cde <Vm::faultHandler(regs*)+0x69f>
c0016cf3:	3c 5a                	cmp    al,0x5a
c0016cf5:	74 04                	je     c0016cfb <Vm::faultHandler(regs*)+0x6bc>
c0016cf7:	3c 1c                	cmp    al,0x1c
c0016cf9:	75 0f                	jne    c0016d0a <Vm::faultHandler(regs*)+0x6cb>
c0016cfb:	83 ec 0c             	sub    esp,0xc
c0016cfe:	6a 60                	push   0x60
c0016d00:	e8 7c f4 ff ff       	call   c0016181 <Vm::inbv(unsigned short)>
c0016d05:	83 c4 10             	add    esp,0x10
c0016d08:	eb e9                	jmp    c0016cf3 <Vm::faultHandler(regs*)+0x6b4>
c0016d0a:	31 c0                	xor    eax,eax
c0016d0c:	83 c4 1c             	add    esp,0x1c
c0016d0f:	5b                   	pop    ebx
c0016d10:	5e                   	pop    esi
c0016d11:	5f                   	pop    edi
c0016d12:	5d                   	pop    ebp
c0016d13:	c3                   	ret    

c0016d14 <Vm::fpuInternalTo32(unsigned long long)>:
c0016d14:	57                   	push   edi
c0016d15:	56                   	push   esi
c0016d16:	53                   	push   ebx
c0016d17:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d1f:	89 d6                	mov    esi,edx
c0016d21:	89 d7                	mov    edi,edx
c0016d23:	89 c1                	mov    ecx,eax
c0016d25:	c1 ef 14             	shr    edi,0x14
c0016d28:	89 d3                	mov    ebx,edx
c0016d2a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0016d30:	31 d2                	xor    edx,edx
c0016d32:	89 f8                	mov    eax,edi
c0016d34:	81 e6 00 00 00 80    	and    esi,0x80000000
c0016d3a:	bf ff 00 00 00       	mov    edi,0xff
c0016d3f:	05 80 fc ff ff       	add    eax,0xfffffc80
c0016d44:	83 d2 ff             	adc    edx,0xffffffff
c0016d47:	39 c7                	cmp    edi,eax
c0016d49:	bf 00 00 00 00       	mov    edi,0x0
c0016d4e:	19 d7                	sbb    edi,edx
c0016d50:	72 16                	jb     c0016d68 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0016d52:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0016d56:	c1 e0 17             	shl    eax,0x17
c0016d59:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c0016d5f:	09 f1                	or     ecx,esi
c0016d61:	09 c1                	or     ecx,eax
c0016d63:	89 cf                	mov    edi,ecx
c0016d65:	eb 05                	jmp    c0016d6c <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0016d67:	90                   	nop
c0016d68:	31 ff                	xor    edi,edi
c0016d6a:	66 90                	xchg   ax,ax
c0016d6c:	89 f8                	mov    eax,edi
c0016d6e:	5b                   	pop    ebx
c0016d6f:	5e                   	pop    esi
c0016d70:	5f                   	pop    edi
c0016d71:	c3                   	ret    

c0016d72 <Vm::fpuInternalTo64(unsigned long long)>:
c0016d72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016d7a:	c3                   	ret    

c0016d7b <Vm::fpu32ToInternal(unsigned int)>:
c0016d7b:	57                   	push   edi
c0016d7c:	31 ff                	xor    edi,edi
c0016d7e:	56                   	push   esi
c0016d7f:	53                   	push   ebx
c0016d80:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016d84:	89 cb                	mov    ebx,ecx
c0016d86:	89 ce                	mov    esi,ecx
c0016d88:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0016d8e:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0016d94:	c1 e9 17             	shr    ecx,0x17
c0016d97:	89 f0                	mov    eax,esi
c0016d99:	0f b6 d1             	movzx  edx,cl
c0016d9c:	81 c2 80 03 00 00    	add    edx,0x380
c0016da2:	89 d1                	mov    ecx,edx
c0016da4:	89 fa                	mov    edx,edi
c0016da6:	c1 e1 14             	shl    ecx,0x14
c0016da9:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0016dad:	c1 e0 1d             	shl    eax,0x1d
c0016db0:	89 d7                	mov    edi,edx
c0016db2:	89 c6                	mov    esi,eax
c0016db4:	89 ca                	mov    edx,ecx
c0016db6:	89 f0                	mov    eax,esi
c0016db8:	09 fa                	or     edx,edi
c0016dba:	09 da                	or     edx,ebx
c0016dbc:	5b                   	pop    ebx
c0016dbd:	5e                   	pop    esi
c0016dbe:	5f                   	pop    edi
c0016dbf:	c3                   	ret    

c0016dc0 <Vm::fpu64ToInternal(unsigned long long)>:
c0016dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016dc8:	c3                   	ret    

c0016dc9 <Vm::fpuFloatToLong(unsigned long long)>:
c0016dc9:	57                   	push   edi
c0016dca:	31 c0                	xor    eax,eax
c0016dcc:	56                   	push   esi
c0016dcd:	31 d2                	xor    edx,edx
c0016dcf:	53                   	push   ebx
c0016dd0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016dd4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016dd8:	89 d9                	mov    ecx,ebx
c0016dda:	c1 e9 14             	shr    ecx,0x14
c0016ddd:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0016de3:	89 cf                	mov    edi,ecx
c0016de5:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0016deb:	78 37                	js     c0016e24 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0016ded:	89 d9                	mov    ecx,ebx
c0016def:	89 f0                	mov    eax,esi
c0016df1:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0016df7:	81 c9 00 00 10 00    	or     ecx,0x100000
c0016dfd:	89 ca                	mov    edx,ecx
c0016dff:	b9 34 00 00 00       	mov    ecx,0x34
c0016e04:	29 f9                	sub    ecx,edi
c0016e06:	0f ad d0             	shrd   eax,edx,cl
c0016e09:	d3 fa                	sar    edx,cl
c0016e0b:	f6 c1 20             	test   cl,0x20
c0016e0e:	74 08                	je     c0016e18 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0016e10:	89 d0                	mov    eax,edx
c0016e12:	c1 fa 1f             	sar    edx,0x1f
c0016e15:	8d 76 00             	lea    esi,[esi+0x0]
c0016e18:	85 db                	test   ebx,ebx
c0016e1a:	79 08                	jns    c0016e24 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0016e1c:	f7 d8                	neg    eax
c0016e1e:	83 d2 00             	adc    edx,0x0
c0016e21:	f7 da                	neg    edx
c0016e23:	90                   	nop
c0016e24:	5b                   	pop    ebx
c0016e25:	5e                   	pop    esi
c0016e26:	5f                   	pop    edi
c0016e27:	c3                   	ret    

c0016e28 <Vm::fpuULongToFloat(unsigned long long)>:
c0016e28:	57                   	push   edi
c0016e29:	31 c9                	xor    ecx,ecx
c0016e2b:	56                   	push   esi
c0016e2c:	53                   	push   ebx
c0016e2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e31:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016e35:	8d 76 00             	lea    esi,[esi+0x0]
c0016e38:	0f ba e7 14          	bt     edi,0x14
c0016e3c:	72 0a                	jb     c0016e48 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c0016e3e:	01 f6                	add    esi,esi
c0016e40:	11 ff                	adc    edi,edi
c0016e42:	41                   	inc    ecx
c0016e43:	eb f3                	jmp    c0016e38 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0016e45:	8d 76 00             	lea    esi,[esi+0x0]
c0016e48:	89 fa                	mov    edx,edi
c0016e4a:	89 f0                	mov    eax,esi
c0016e4c:	bb 33 04 00 00       	mov    ebx,0x433
c0016e51:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0016e57:	29 cb                	sub    ebx,ecx
c0016e59:	89 d9                	mov    ecx,ebx
c0016e5b:	5b                   	pop    ebx
c0016e5c:	c1 e1 14             	shl    ecx,0x14
c0016e5f:	5e                   	pop    esi
c0016e60:	09 ca                	or     edx,ecx
c0016e62:	5f                   	pop    edi
c0016e63:	c3                   	ret    

c0016e64 <Vm::fpuLongToFloat(long long)>:
c0016e64:	56                   	push   esi
c0016e65:	31 c0                	xor    eax,eax
c0016e67:	53                   	push   ebx
c0016e68:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016e70:	39 c8                	cmp    eax,ecx
c0016e72:	19 d8                	sbb    eax,ebx
c0016e74:	7d 06                	jge    c0016e7c <Vm::fpuLongToFloat(long long)+0x18>
c0016e76:	31 f6                	xor    esi,esi
c0016e78:	eb 0e                	jmp    c0016e88 <Vm::fpuLongToFloat(long long)+0x24>
c0016e7a:	66 90                	xchg   ax,ax
c0016e7c:	f7 d9                	neg    ecx
c0016e7e:	be 01 00 00 00       	mov    esi,0x1
c0016e83:	83 d3 00             	adc    ebx,0x0
c0016e86:	f7 db                	neg    ebx
c0016e88:	31 c0                	xor    eax,eax
c0016e8a:	66 90                	xchg   ax,ax
c0016e8c:	0f ba e3 14          	bt     ebx,0x14
c0016e90:	72 0a                	jb     c0016e9c <Vm::fpuLongToFloat(long long)+0x38>
c0016e92:	01 c9                	add    ecx,ecx
c0016e94:	11 db                	adc    ebx,ebx
c0016e96:	40                   	inc    eax
c0016e97:	eb f3                	jmp    c0016e8c <Vm::fpuLongToFloat(long long)+0x28>
c0016e99:	8d 76 00             	lea    esi,[esi+0x0]
c0016e9c:	ba 33 04 00 00       	mov    edx,0x433
c0016ea1:	29 c2                	sub    edx,eax
c0016ea3:	89 c8                	mov    eax,ecx
c0016ea5:	c1 e2 14             	shl    edx,0x14
c0016ea8:	89 d9                	mov    ecx,ebx
c0016eaa:	89 f3                	mov    ebx,esi
c0016eac:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0016eb2:	09 ca                	or     edx,ecx
c0016eb4:	84 db                	test   bl,bl
c0016eb6:	74 08                	je     c0016ec0 <Vm::fpuLongToFloat(long long)+0x5c>
c0016eb8:	81 ca 00 00 00 80    	or     edx,0x80000000
c0016ebe:	66 90                	xchg   ax,ax
c0016ec0:	5b                   	pop    ebx
c0016ec1:	5e                   	pop    esi
c0016ec2:	c3                   	ret    

c0016ec3 <Vm::fpuGet0()>:
c0016ec3:	31 c0                	xor    eax,eax
c0016ec5:	31 d2                	xor    edx,edx
c0016ec7:	c3                   	ret    

c0016ec8 <Vm::fpuGet1()>:
c0016ec8:	b8 01 00 00 00       	mov    eax,0x1
c0016ecd:	31 d2                	xor    edx,edx
c0016ecf:	c3                   	ret    

c0016ed0 <Vm::fpuGetPi()>:
c0016ed0:	b8 03 00 00 00       	mov    eax,0x3
c0016ed5:	31 d2                	xor    edx,edx
c0016ed7:	c3                   	ret    

c0016ed8 <Vm::fpuGetLog2E()>:
c0016ed8:	83 ec 18             	sub    esp,0x18
c0016edb:	68 d4 1f 02 c0       	push   0xc0021fd4
c0016ee0:	e8 ec b2 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c0016ee5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016eea:	31 d2                	xor    edx,edx
c0016eec:	83 c4 1c             	add    esp,0x1c
c0016eef:	c3                   	ret    

c0016ef0 <Vm::fpuGetLogE2()>:
c0016ef0:	83 ec 18             	sub    esp,0x18
c0016ef3:	68 e0 1f 02 c0       	push   0xc0021fe0
c0016ef8:	e8 d4 b2 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c0016efd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016f02:	31 d2                	xor    edx,edx
c0016f04:	83 c4 1c             	add    esp,0x1c
c0016f07:	c3                   	ret    

c0016f08 <Vm::fpuGetLog210()>:
c0016f08:	83 ec 18             	sub    esp,0x18
c0016f0b:	68 ec 1f 02 c0       	push   0xc0021fec
c0016f10:	e8 bc b2 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c0016f15:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016f1a:	31 d2                	xor    edx,edx
c0016f1c:	83 c4 1c             	add    esp,0x1c
c0016f1f:	c3                   	ret    

c0016f20 <Vm::fpuGetLog102()>:
c0016f20:	83 ec 18             	sub    esp,0x18
c0016f23:	68 f9 1f 02 c0       	push   0xc0021ff9
c0016f28:	e8 a4 b2 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c0016f2d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016f32:	31 d2                	xor    edx,edx
c0016f34:	83 c4 1c             	add    esp,0x1c
c0016f37:	c3                   	ret    

c0016f38 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0016f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f3c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0016f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f44:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0016f48:	0f 92 c0             	setb   al
c0016f4b:	c3                   	ret    

c0016f4c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0016f4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f54:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0016f58:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0016f5c:	09 c2                	or     edx,eax
c0016f5e:	0f 94 c0             	sete   al
c0016f61:	c3                   	ret    

c0016f62 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0016f62:	57                   	push   edi
c0016f63:	56                   	push   esi
c0016f64:	53                   	push   ebx
c0016f65:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016f69:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016f6d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016f71:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0016f75:	57                   	push   edi
c0016f76:	56                   	push   esi
c0016f77:	53                   	push   ebx
c0016f78:	51                   	push   ecx
c0016f79:	e8 ce ff ff ff       	call   c0016f4c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0016f7e:	83 c4 10             	add    esp,0x10
c0016f81:	88 c2                	mov    dl,al
c0016f83:	31 c0                	xor    eax,eax
c0016f85:	84 d2                	test   dl,dl
c0016f87:	75 0f                	jne    c0016f98 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0016f89:	57                   	push   edi
c0016f8a:	56                   	push   esi
c0016f8b:	53                   	push   ebx
c0016f8c:	51                   	push   ecx
c0016f8d:	e8 a6 ff ff ff       	call   c0016f38 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0016f92:	83 c4 10             	add    esp,0x10
c0016f95:	8d 76 00             	lea    esi,[esi+0x0]
c0016f98:	83 e0 01             	and    eax,0x1
c0016f9b:	5b                   	pop    ebx
c0016f9c:	88 c1                	mov    cl,al
c0016f9e:	83 e2 01             	and    edx,0x1
c0016fa1:	a0 41 67 02 c0       	mov    al,ds:0xc0026741
c0016fa6:	c1 e2 06             	shl    edx,0x6
c0016fa9:	83 e0 ba             	and    eax,0xffffffba
c0016fac:	5e                   	pop    esi
c0016fad:	09 c8                	or     eax,ecx
c0016faf:	5f                   	pop    edi
c0016fb0:	09 d0                	or     eax,edx
c0016fb2:	a2 41 67 02 c0       	mov    ds:0xc0026741,al
c0016fb7:	c3                   	ret    

c0016fb8 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0016fb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fbc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016fc0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0016fc4:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0016fc8:	c3                   	ret    

c0016fc9 <Vm::fpuAbs(unsigned long long)>:
c0016fc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016fcd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016fd1:	c3                   	ret    

c0016fd2 <Vm::fpuChs(unsigned long long)>:
c0016fd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016fd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016fda:	f7 d8                	neg    eax
c0016fdc:	83 d2 00             	adc    edx,0x0
c0016fdf:	f7 da                	neg    edx
c0016fe1:	c3                   	ret    

c0016fe2 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c0016fe2:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0016fe6:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0016feb:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c0016fef:	eb c7                	jmp    c0016fb8 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c0016ff1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c0016ff1:	53                   	push   ebx
c0016ff2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ff6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016ffe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017002:	0f af ca             	imul   ecx,edx
c0017005:	0f af d8             	imul   ebx,eax
c0017008:	f7 e2                	mul    edx
c001700a:	01 d9                	add    ecx,ebx
c001700c:	5b                   	pop    ebx
c001700d:	01 ca                	add    edx,ecx
c001700f:	c3                   	ret    

c0017010 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0017010:	83 ec 0c             	sub    esp,0xc
c0017013:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017017:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001701b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001701f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017023:	e8 c8 82 00 00       	call   c001f2f0 <__udivdi3>
c0017028:	83 c4 1c             	add    esp,0x1c
c001702b:	c3                   	ret    

c001702c <Vm::fpuSquare(unsigned long long)>:
c001702c:	50                   	push   eax
c001702d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017031:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017035:	52                   	push   edx
c0017036:	50                   	push   eax
c0017037:	52                   	push   edx
c0017038:	50                   	push   eax
c0017039:	e8 b3 ff ff ff       	call   c0016ff1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001703e:	83 c4 14             	add    esp,0x14
c0017041:	c3                   	ret    

c0017042 <Vm::fpuGetReg(int)>:
c0017042:	83 ec 0c             	sub    esp,0xc
c0017045:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001704a:	76 10                	jbe    c001705c <Vm::fpuGetReg(int)+0x1a>
c001704c:	83 ec 0c             	sub    esp,0xc
c001704f:	68 06 20 02 c0       	push   0xc0022006
c0017054:	e8 78 b1 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c0017059:	83 c4 10             	add    esp,0x10
c001705c:	a0 41 67 02 c0       	mov    al,ds:0xc0026741
c0017061:	b9 08 00 00 00       	mov    ecx,0x8
c0017066:	c0 e8 03             	shr    al,0x3
c0017069:	83 e0 07             	and    eax,0x7
c001706c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0017070:	99                   	cdq    
c0017071:	f7 f9                	idiv   ecx
c0017073:	8b 04 d5 44 67 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd98bc]
c001707a:	8b 14 d5 48 67 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd98b8]
c0017081:	83 c4 0c             	add    esp,0xc
c0017084:	c3                   	ret    

c0017085 <Vm::fpuSetReg(int, unsigned long long)>:
c0017085:	57                   	push   edi
c0017086:	56                   	push   esi
c0017087:	52                   	push   edx
c0017088:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001708c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0017090:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0017095:	76 11                	jbe    c00170a8 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c0017097:	83 ec 0c             	sub    esp,0xc
c001709a:	68 19 20 02 c0       	push   0xc0022019
c001709f:	e8 2d b1 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c00170a4:	83 c4 10             	add    esp,0x10
c00170a7:	90                   	nop
c00170a8:	a0 41 67 02 c0       	mov    al,ds:0xc0026741
c00170ad:	b9 08 00 00 00       	mov    ecx,0x8
c00170b2:	c0 e8 03             	shr    al,0x3
c00170b5:	83 e0 07             	and    eax,0x7
c00170b8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00170bc:	99                   	cdq    
c00170bd:	f7 f9                	idiv   ecx
c00170bf:	89 34 d5 44 67 02 c0 	mov    DWORD PTR [edx*8-0x3ffd98bc],esi
c00170c6:	89 3c d5 48 67 02 c0 	mov    DWORD PTR [edx*8-0x3ffd98b8],edi
c00170cd:	58                   	pop    eax
c00170ce:	5e                   	pop    esi
c00170cf:	5f                   	pop    edi
c00170d0:	c3                   	ret    

c00170d1 <Vm::fpuPush(unsigned long long)>:
c00170d1:	a0 41 67 02 c0       	mov    al,ds:0xc0026741
c00170d6:	c0 e8 03             	shr    al,0x3
c00170d9:	83 e0 07             	and    eax,0x7
c00170dc:	83 c0 07             	add    eax,0x7
c00170df:	88 c2                	mov    dl,al
c00170e1:	83 e0 07             	and    eax,0x7
c00170e4:	83 e2 07             	and    edx,0x7
c00170e7:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c00170ee:	8a 15 41 67 02 c0    	mov    dl,BYTE PTR ds:0xc0026741
c00170f4:	83 e2 c7             	and    edx,0xffffffc7
c00170f7:	09 ca                	or     edx,ecx
c00170f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00170fd:	88 15 41 67 02 c0    	mov    BYTE PTR ds:0xc0026741,dl
c0017103:	89 0c c5 48 67 02 c0 	mov    DWORD PTR [eax*8-0x3ffd98b8],ecx
c001710a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001710e:	89 14 c5 44 67 02 c0 	mov    DWORD PTR [eax*8-0x3ffd98bc],edx
c0017115:	a1 84 67 02 c0       	mov    eax,ds:0xc0026784
c001711a:	83 f8 08             	cmp    eax,0x8
c001711d:	75 09                	jne    c0017128 <Vm::fpuPush(unsigned long long)+0x57>
c001711f:	80 0d 40 67 02 c0 40 	or     BYTE PTR ds:0xc0026740,0x40
c0017126:	c3                   	ret    
c0017127:	90                   	nop
c0017128:	40                   	inc    eax
c0017129:	a3 84 67 02 c0       	mov    ds:0xc0026784,eax
c001712e:	c3                   	ret    

c001712f <Vm::fpuPop()>:
c001712f:	8a 0d 41 67 02 c0    	mov    cl,BYTE PTR ds:0xc0026741
c0017135:	53                   	push   ebx
c0017136:	c0 e9 03             	shr    cl,0x3
c0017139:	8a 1d 41 67 02 c0    	mov    bl,BYTE PTR ds:0xc0026741
c001713f:	83 e1 07             	and    ecx,0x7
c0017142:	83 e3 c7             	and    ebx,0xffffffc7
c0017145:	8b 04 cd 44 67 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd98bc]
c001714c:	8b 14 cd 48 67 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd98b8]
c0017153:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001715a:	83 e1 38             	and    ecx,0x38
c001715d:	09 d9                	or     ecx,ebx
c001715f:	88 0d 41 67 02 c0    	mov    BYTE PTR ds:0xc0026741,cl
c0017165:	8b 0d 84 67 02 c0    	mov    ecx,DWORD PTR ds:0xc0026784
c001716b:	85 c9                	test   ecx,ecx
c001716d:	74 09                	je     c0017178 <Vm::fpuPop()+0x49>
c001716f:	49                   	dec    ecx
c0017170:	89 0d 84 67 02 c0    	mov    DWORD PTR ds:0xc0026784,ecx
c0017176:	eb 08                	jmp    c0017180 <Vm::fpuPop()+0x51>
c0017178:	80 0d 40 67 02 c0 40 	or     BYTE PTR ds:0xc0026740,0x40
c001717f:	90                   	nop
c0017180:	5b                   	pop    ebx
c0017181:	c3                   	ret    

c0017182 <Vm::x87Handler(regs*)>:
c0017182:	55                   	push   ebp
c0017183:	57                   	push   edi
c0017184:	56                   	push   esi
c0017185:	53                   	push   ebx
c0017186:	83 ec 1c             	sub    esp,0x1c
c0017189:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001718d:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c0017192:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0017195:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001719d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00171a1:	50                   	push   eax
c00171a2:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00171a6:	50                   	push   eax
c00171a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00171ab:	50                   	push   eax
c00171ac:	53                   	push   ebx
c00171ad:	e8 9e a8 ff ff       	call   c0011a50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00171b2:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c00171b5:	83 c4 10             	add    esp,0x10
c00171b8:	89 c6                	mov    esi,eax
c00171ba:	80 fa d9             	cmp    dl,0xd9
c00171bd:	0f 85 79 01 00 00    	jne    c001733c <Vm::x87Handler(regs*)+0x1ba>
c00171c3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00171c7:	8d 50 20             	lea    edx,[eax+0x20]
c00171ca:	80 fa 0e             	cmp    dl,0xe
c00171cd:	0f 87 a5 00 00 00    	ja     c0017278 <Vm::x87Handler(regs*)+0xf6>
c00171d3:	0f b6 d2             	movzx  edx,dl
c00171d6:	ff 24 95 2c 20 02 c0 	jmp    DWORD PTR [edx*4-0x3ffddfd4]
c00171dd:	8d 76 00             	lea    esi,[esi+0x0]
c00171e0:	e8 de fc ff ff       	call   c0016ec3 <Vm::fpuGet0()>
c00171e5:	eb 09                	jmp    c00171f0 <Vm::x87Handler(regs*)+0x6e>
c00171e7:	90                   	nop
c00171e8:	e8 db fc ff ff       	call   c0016ec8 <Vm::fpuGet1()>
c00171ed:	8d 76 00             	lea    esi,[esi+0x0]
c00171f0:	57                   	push   edi
c00171f1:	57                   	push   edi
c00171f2:	66 90                	xchg   ax,ax
c00171f4:	52                   	push   edx
c00171f5:	50                   	push   eax
c00171f6:	e8 d6 fe ff ff       	call   c00170d1 <Vm::fpuPush(unsigned long long)>
c00171fb:	90                   	nop
c00171fc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017200:	83 c4 10             	add    esp,0x10
c0017203:	90                   	nop
c0017204:	b0 01                	mov    al,0x1
c0017206:	e9 89 0a 00 00       	jmp    c0017c94 <Vm::x87Handler(regs*)+0xb12>
c001720b:	90                   	nop
c001720c:	83 ec 0c             	sub    esp,0xc
c001720f:	6a 00                	push   0x0
c0017211:	e8 2c fe ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c0017216:	59                   	pop    ecx
c0017217:	5e                   	pop    esi
c0017218:	52                   	push   edx
c0017219:	50                   	push   eax
c001721a:	e8 b3 fd ff ff       	call   c0016fd2 <Vm::fpuChs(unsigned long long)>
c001721f:	eb 17                	jmp    c0017238 <Vm::x87Handler(regs*)+0xb6>
c0017221:	8d 76 00             	lea    esi,[esi+0x0]
c0017224:	83 ec 0c             	sub    esp,0xc
c0017227:	6a 00                	push   0x0
c0017229:	e8 14 fe ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c001722e:	5f                   	pop    edi
c001722f:	5d                   	pop    ebp
c0017230:	52                   	push   edx
c0017231:	50                   	push   eax
c0017232:	e8 92 fd ff ff       	call   c0016fc9 <Vm::fpuAbs(unsigned long long)>
c0017237:	90                   	nop
c0017238:	83 c4 0c             	add    esp,0xc
c001723b:	90                   	nop
c001723c:	52                   	push   edx
c001723d:	50                   	push   eax
c001723e:	66 90                	xchg   ax,ax
c0017240:	6a 00                	push   0x0
c0017242:	66 90                	xchg   ax,ax
c0017244:	e8 3c fe ff ff       	call   c0017085 <Vm::fpuSetReg(int, unsigned long long)>
c0017249:	eb b1                	jmp    c00171fc <Vm::x87Handler(regs*)+0x7a>
c001724b:	90                   	nop
c001724c:	e8 b7 fc ff ff       	call   c0016f08 <Vm::fpuGetLog210()>
c0017251:	eb 9d                	jmp    c00171f0 <Vm::x87Handler(regs*)+0x6e>
c0017253:	90                   	nop
c0017254:	e8 7f fc ff ff       	call   c0016ed8 <Vm::fpuGetLog2E()>
c0017259:	eb 95                	jmp    c00171f0 <Vm::x87Handler(regs*)+0x6e>
c001725b:	90                   	nop
c001725c:	e8 6f fc ff ff       	call   c0016ed0 <Vm::fpuGetPi()>
c0017261:	eb 8d                	jmp    c00171f0 <Vm::x87Handler(regs*)+0x6e>
c0017263:	90                   	nop
c0017264:	e8 b7 fc ff ff       	call   c0016f20 <Vm::fpuGetLog102()>
c0017269:	eb 85                	jmp    c00171f0 <Vm::x87Handler(regs*)+0x6e>
c001726b:	90                   	nop
c001726c:	e8 7f fc ff ff       	call   c0016ef0 <Vm::fpuGetLogE2()>
c0017271:	e9 7a ff ff ff       	jmp    c00171f0 <Vm::x87Handler(regs*)+0x6e>
c0017276:	66 90                	xchg   ax,ax
c0017278:	8d 50 40             	lea    edx,[eax+0x40]
c001727b:	80 fa 07             	cmp    dl,0x7
c001727e:	77 18                	ja     c0017298 <Vm::x87Handler(regs*)+0x116>
c0017280:	83 ec 0c             	sub    esp,0xc
c0017283:	2d c0 00 00 00       	sub    eax,0xc0
c0017288:	50                   	push   eax
c0017289:	e8 b4 fd ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c001728e:	59                   	pop    ecx
c001728f:	5e                   	pop    esi
c0017290:	e9 5f ff ff ff       	jmp    c00171f4 <Vm::x87Handler(regs*)+0x72>
c0017295:	8d 76 00             	lea    esi,[esi+0x0]
c0017298:	8d 50 38             	lea    edx,[eax+0x38]
c001729b:	80 fa 07             	cmp    dl,0x7
c001729e:	77 3c                	ja     c00172dc <Vm::x87Handler(regs*)+0x15a>
c00172a0:	83 ec 0c             	sub    esp,0xc
c00172a3:	2d c8 00 00 00       	sub    eax,0xc8
c00172a8:	50                   	push   eax
c00172a9:	e8 94 fd ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c00172ae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00172b5:	89 c6                	mov    esi,eax
c00172b7:	89 d7                	mov    edi,edx
c00172b9:	e8 84 fd ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c00172be:	83 c4 0c             	add    esp,0xc
c00172c1:	52                   	push   edx
c00172c2:	50                   	push   eax
c00172c3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00172c7:	2d c8 00 00 00       	sub    eax,0xc8
c00172cc:	50                   	push   eax
c00172cd:	e8 b3 fd ff ff       	call   c0017085 <Vm::fpuSetReg(int, unsigned long long)>
c00172d2:	83 c4 0c             	add    esp,0xc
c00172d5:	57                   	push   edi
c00172d6:	56                   	push   esi
c00172d7:	e9 64 ff ff ff       	jmp    c0017240 <Vm::x87Handler(regs*)+0xbe>
c00172dc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00172e0:	84 d2                	test   dl,dl
c00172e2:	75 10                	jne    c00172f4 <Vm::x87Handler(regs*)+0x172>
c00172e4:	83 ec 0c             	sub    esp,0xc
c00172e7:	ff 36                	push   DWORD PTR [esi]
c00172e9:	e8 8d fa ff ff       	call   c0016d7b <Vm::fpu32ToInternal(unsigned int)>
c00172ee:	e9 c9 00 00 00       	jmp    c00173bc <Vm::x87Handler(regs*)+0x23a>
c00172f3:	90                   	nop
c00172f4:	80 fa 03             	cmp    dl,0x3
c00172f7:	75 13                	jne    c001730c <Vm::x87Handler(regs*)+0x18a>
c00172f9:	e8 31 fe ff ff       	call   c001712f <Vm::fpuPop()>
c00172fe:	55                   	push   ebp
c00172ff:	55                   	push   ebp
c0017300:	52                   	push   edx
c0017301:	50                   	push   eax
c0017302:	e8 0d fa ff ff       	call   c0016d14 <Vm::fpuInternalTo32(unsigned long long)>
c0017307:	e9 90 00 00 00       	jmp    c001739c <Vm::x87Handler(regs*)+0x21a>
c001730c:	80 fa 05             	cmp    dl,0x5
c001730f:	75 0f                	jne    c0017320 <Vm::x87Handler(regs*)+0x19e>
c0017311:	66 8b 06             	mov    ax,WORD PTR [esi]
c0017314:	66 a3 42 67 02 c0    	mov    ds:0xc0026742,ax
c001731a:	e9 ed 00 00 00       	jmp    c001740c <Vm::x87Handler(regs*)+0x28a>
c001731f:	90                   	nop
c0017320:	31 c0                	xor    eax,eax
c0017322:	80 fa 07             	cmp    dl,0x7
c0017325:	0f 85 69 09 00 00    	jne    c0017c94 <Vm::x87Handler(regs*)+0xb12>
c001732b:	66 a1 42 67 02 c0    	mov    ax,ds:0xc0026742
c0017331:	66 89 06             	mov    WORD PTR [esi],ax
c0017334:	e9 d3 00 00 00       	jmp    c001740c <Vm::x87Handler(regs*)+0x28a>
c0017339:	8d 76 00             	lea    esi,[esi+0x0]
c001733c:	80 fa d8             	cmp    dl,0xd8
c001733f:	0f 84 d3 00 00 00    	je     c0017418 <Vm::x87Handler(regs*)+0x296>
c0017345:	80 fa dc             	cmp    dl,0xdc
c0017348:	0f 84 2a 02 00 00    	je     c0017578 <Vm::x87Handler(regs*)+0x3f6>
c001734e:	80 fa de             	cmp    dl,0xde
c0017351:	0f 84 f1 02 00 00    	je     c0017648 <Vm::x87Handler(regs*)+0x4c6>
c0017357:	80 fa dd             	cmp    dl,0xdd
c001735a:	0f 84 94 04 00 00    	je     c00177f4 <Vm::x87Handler(regs*)+0x672>
c0017360:	80 fa da             	cmp    dl,0xda
c0017363:	0f 84 5f 05 00 00    	je     c00178c8 <Vm::x87Handler(regs*)+0x746>
c0017369:	80 fa df             	cmp    dl,0xdf
c001736c:	0f 84 aa 05 00 00    	je     c001791c <Vm::x87Handler(regs*)+0x79a>
c0017372:	31 c0                	xor    eax,eax
c0017374:	80 fa db             	cmp    dl,0xdb
c0017377:	0f 85 17 09 00 00    	jne    c0017c94 <Vm::x87Handler(regs*)+0xb12>
c001737d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0017381:	80 fa 03             	cmp    dl,0x3
c0017384:	0f 85 c2 06 00 00    	jne    c0017a4c <Vm::x87Handler(regs*)+0x8ca>
c001738a:	e8 a0 fd ff ff       	call   c001712f <Vm::fpuPop()>
c001738f:	55                   	push   ebp
c0017390:	55                   	push   ebp
c0017391:	8d 76 00             	lea    esi,[esi+0x0]
c0017394:	52                   	push   edx
c0017395:	50                   	push   eax
c0017396:	e8 2e fa ff ff       	call   c0016dc9 <Vm::fpuFloatToLong(unsigned long long)>
c001739b:	90                   	nop
c001739c:	83 c4 10             	add    esp,0x10
c001739f:	89 06                	mov    DWORD PTR [esi],eax
c00173a1:	eb 69                	jmp    c001740c <Vm::x87Handler(regs*)+0x28a>
c00173a3:	90                   	nop
c00173a4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00173a8:	84 d2                	test   dl,dl
c00173aa:	0f 85 2c 06 00 00    	jne    c00179dc <Vm::x87Handler(regs*)+0x85a>
c00173b0:	57                   	push   edi
c00173b1:	57                   	push   edi
c00173b2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00173b5:	ff 36                	push   DWORD PTR [esi]
c00173b7:	e8 04 fa ff ff       	call   c0016dc0 <Vm::fpu64ToInternal(unsigned long long)>
c00173bc:	5e                   	pop    esi
c00173bd:	5f                   	pop    edi
c00173be:	52                   	push   edx
c00173bf:	50                   	push   eax
c00173c0:	e8 0c fd ff ff       	call   c00170d1 <Vm::fpuPush(unsigned long long)>
c00173c5:	8d 76 00             	lea    esi,[esi+0x0]
c00173c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173cc:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00173cf:	e9 2c fe ff ff       	jmp    c0017200 <Vm::x87Handler(regs*)+0x7e>
c00173d4:	80 fa 03             	cmp    dl,0x3
c00173d7:	0f 85 2b 07 00 00    	jne    c0017b08 <Vm::x87Handler(regs*)+0x986>
c00173dd:	57                   	push   edi
c00173de:	57                   	push   edi
c00173df:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00173e2:	ff 36                	push   DWORD PTR [esi]
c00173e4:	e8 d7 f9 ff ff       	call   c0016dc0 <Vm::fpu64ToInternal(unsigned long long)>
c00173e9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00173f0:	89 c6                	mov    esi,eax
c00173f2:	89 d7                	mov    edi,edx
c00173f4:	e8 49 fc ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c00173f9:	57                   	push   edi
c00173fa:	56                   	push   esi
c00173fb:	52                   	push   edx
c00173fc:	50                   	push   eax
c00173fd:	e8 60 fb ff ff       	call   c0016f62 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0017402:	83 c4 20             	add    esp,0x20
c0017405:	e8 25 fd ff ff       	call   c001712f <Vm::fpuPop()>
c001740a:	66 90                	xchg   ax,ax
c001740c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017410:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0017413:	e9 ec fd ff ff       	jmp    c0017204 <Vm::x87Handler(regs*)+0x82>
c0017418:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001741c:	8d 50 40             	lea    edx,[eax+0x40]
c001741f:	80 fa 07             	cmp    dl,0x7
c0017422:	77 2c                	ja     c0017450 <Vm::x87Handler(regs*)+0x2ce>
c0017424:	83 ec 0c             	sub    esp,0xc
c0017427:	2d c0 00 00 00       	sub    eax,0xc0
c001742c:	50                   	push   eax
c001742d:	e8 10 fc ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c0017432:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017439:	89 c6                	mov    esi,eax
c001743b:	89 d7                	mov    edi,edx
c001743d:	e8 00 fc ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c0017442:	57                   	push   edi
c0017443:	56                   	push   esi
c0017444:	52                   	push   edx
c0017445:	50                   	push   eax
c0017446:	e8 6d fb ff ff       	call   c0016fb8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001744b:	eb 33                	jmp    c0017480 <Vm::x87Handler(regs*)+0x2fe>
c001744d:	8d 76 00             	lea    esi,[esi+0x0]
c0017450:	8d 50 38             	lea    edx,[eax+0x38]
c0017453:	80 fa 07             	cmp    dl,0x7
c0017456:	77 30                	ja     c0017488 <Vm::x87Handler(regs*)+0x306>
c0017458:	83 ec 0c             	sub    esp,0xc
c001745b:	2d c8 00 00 00       	sub    eax,0xc8
c0017460:	50                   	push   eax
c0017461:	e8 dc fb ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c0017466:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001746d:	89 c6                	mov    esi,eax
c001746f:	89 d7                	mov    edi,edx
c0017471:	e8 cc fb ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c0017476:	57                   	push   edi
c0017477:	56                   	push   esi
c0017478:	52                   	push   edx
c0017479:	50                   	push   eax
c001747a:	e8 72 fb ff ff       	call   c0016ff1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001747f:	90                   	nop
c0017480:	83 c4 1c             	add    esp,0x1c
c0017483:	e9 b4 fd ff ff       	jmp    c001723c <Vm::x87Handler(regs*)+0xba>
c0017488:	8d 50 30             	lea    edx,[eax+0x30]
c001748b:	80 fa 07             	cmp    dl,0x7
c001748e:	77 10                	ja     c00174a0 <Vm::x87Handler(regs*)+0x31e>
c0017490:	83 ec 0c             	sub    esp,0xc
c0017493:	2d d0 00 00 00       	sub    eax,0xd0
c0017498:	e9 c3 03 00 00       	jmp    c0017860 <Vm::x87Handler(regs*)+0x6de>
c001749d:	8d 76 00             	lea    esi,[esi+0x0]
c00174a0:	8d 50 28             	lea    edx,[eax+0x28]
c00174a3:	80 fa 07             	cmp    dl,0x7
c00174a6:	77 10                	ja     c00174b8 <Vm::x87Handler(regs*)+0x336>
c00174a8:	83 ec 0c             	sub    esp,0xc
c00174ab:	2d d8 00 00 00       	sub    eax,0xd8
c00174b0:	e9 e7 03 00 00       	jmp    c001789c <Vm::x87Handler(regs*)+0x71a>
c00174b5:	8d 76 00             	lea    esi,[esi+0x0]
c00174b8:	8d 50 20             	lea    edx,[eax+0x20]
c00174bb:	80 fa 07             	cmp    dl,0x7
c00174be:	77 1c                	ja     c00174dc <Vm::x87Handler(regs*)+0x35a>
c00174c0:	83 ec 0c             	sub    esp,0xc
c00174c3:	2d e0 00 00 00       	sub    eax,0xe0
c00174c8:	50                   	push   eax
c00174c9:	e8 74 fb ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c00174ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00174d5:	89 c6                	mov    esi,eax
c00174d7:	89 d7                	mov    edi,edx
c00174d9:	eb 25                	jmp    c0017500 <Vm::x87Handler(regs*)+0x37e>
c00174db:	90                   	nop
c00174dc:	8d 50 18             	lea    edx,[eax+0x18]
c00174df:	80 fa 07             	cmp    dl,0x7
c00174e2:	77 30                	ja     c0017514 <Vm::x87Handler(regs*)+0x392>
c00174e4:	83 ec 0c             	sub    esp,0xc
c00174e7:	6a 00                	push   0x0
c00174e9:	e8 54 fb ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c00174ee:	89 c6                	mov    esi,eax
c00174f0:	89 d7                	mov    edi,edx
c00174f2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00174f6:	2d e8 00 00 00       	sub    eax,0xe8
c00174fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00174fe:	66 90                	xchg   ax,ax
c0017500:	e8 3d fb ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c0017505:	57                   	push   edi
c0017506:	56                   	push   esi
c0017507:	52                   	push   edx
c0017508:	50                   	push   eax
c0017509:	e8 d4 fa ff ff       	call   c0016fe2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001750e:	e9 6d ff ff ff       	jmp    c0017480 <Vm::x87Handler(regs*)+0x2fe>
c0017513:	90                   	nop
c0017514:	8d 50 10             	lea    edx,[eax+0x10]
c0017517:	80 fa 07             	cmp    dl,0x7
c001751a:	77 1c                	ja     c0017538 <Vm::x87Handler(regs*)+0x3b6>
c001751c:	83 ec 0c             	sub    esp,0xc
c001751f:	2d f0 00 00 00       	sub    eax,0xf0
c0017524:	50                   	push   eax
c0017525:	e8 18 fb ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c001752a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017531:	89 c6                	mov    esi,eax
c0017533:	89 d7                	mov    edi,edx
c0017535:	eb 25                	jmp    c001755c <Vm::x87Handler(regs*)+0x3da>
c0017537:	90                   	nop
c0017538:	3c f7                	cmp    al,0xf7
c001753a:	0f 86 00 04 00 00    	jbe    c0017940 <Vm::x87Handler(regs*)+0x7be>
c0017540:	83 ec 0c             	sub    esp,0xc
c0017543:	6a 00                	push   0x0
c0017545:	e8 f8 fa ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c001754a:	89 c6                	mov    esi,eax
c001754c:	89 d7                	mov    edi,edx
c001754e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017552:	2d f8 00 00 00       	sub    eax,0xf8
c0017557:	89 04 24             	mov    DWORD PTR [esp],eax
c001755a:	66 90                	xchg   ax,ax
c001755c:	e8 e1 fa ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c0017561:	57                   	push   edi
c0017562:	56                   	push   esi
c0017563:	52                   	push   edx
c0017564:	50                   	push   eax
c0017565:	e8 a6 fa ff ff       	call   c0017010 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001756a:	83 c4 1c             	add    esp,0x1c
c001756d:	52                   	push   edx
c001756e:	50                   	push   eax
c001756f:	6a 00                	push   0x0
c0017571:	e9 6a 02 00 00       	jmp    c00177e0 <Vm::x87Handler(regs*)+0x65e>
c0017576:	66 90                	xchg   ax,ax
c0017578:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001757c:	8d 50 40             	lea    edx,[eax+0x40]
c001757f:	80 fa 07             	cmp    dl,0x7
c0017582:	77 38                	ja     c00175bc <Vm::x87Handler(regs*)+0x43a>
c0017584:	83 ec 0c             	sub    esp,0xc
c0017587:	2d c0 00 00 00       	sub    eax,0xc0
c001758c:	50                   	push   eax
c001758d:	e8 b0 fa ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c0017592:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017599:	89 c6                	mov    esi,eax
c001759b:	89 d7                	mov    edi,edx
c001759d:	e8 a0 fa ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c00175a2:	57                   	push   edi
c00175a3:	56                   	push   esi
c00175a4:	52                   	push   edx
c00175a5:	50                   	push   eax
c00175a6:	e8 0d fa ff ff       	call   c0016fb8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00175ab:	83 c4 1c             	add    esp,0x1c
c00175ae:	52                   	push   edx
c00175af:	50                   	push   eax
c00175b0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00175b4:	2d c0 00 00 00       	sub    eax,0xc0
c00175b9:	eb 41                	jmp    c00175fc <Vm::x87Handler(regs*)+0x47a>
c00175bb:	90                   	nop
c00175bc:	8d 50 38             	lea    edx,[eax+0x38]
c00175bf:	80 fa 07             	cmp    dl,0x7
c00175c2:	77 40                	ja     c0017604 <Vm::x87Handler(regs*)+0x482>
c00175c4:	83 ec 0c             	sub    esp,0xc
c00175c7:	2d c8 00 00 00       	sub    eax,0xc8
c00175cc:	50                   	push   eax
c00175cd:	e8 70 fa ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c00175d2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00175d9:	89 c6                	mov    esi,eax
c00175db:	89 d7                	mov    edi,edx
c00175dd:	e8 60 fa ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c00175e2:	57                   	push   edi
c00175e3:	56                   	push   esi
c00175e4:	52                   	push   edx
c00175e5:	50                   	push   eax
c00175e6:	e8 06 fa ff ff       	call   c0016ff1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00175eb:	83 c4 1c             	add    esp,0x1c
c00175ee:	52                   	push   edx
c00175ef:	50                   	push   eax
c00175f0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00175f4:	2d c8 00 00 00       	sub    eax,0xc8
c00175f9:	8d 76 00             	lea    esi,[esi+0x0]
c00175fc:	50                   	push   eax
c00175fd:	e9 42 fc ff ff       	jmp    c0017244 <Vm::x87Handler(regs*)+0xc2>
c0017602:	66 90                	xchg   ax,ax
c0017604:	83 c0 18             	add    eax,0x18
c0017607:	3c 07                	cmp    al,0x7
c0017609:	0f 87 6d 04 00 00    	ja     c0017a7c <Vm::x87Handler(regs*)+0x8fa>
c001760f:	83 ec 0c             	sub    esp,0xc
c0017612:	6a 00                	push   0x0
c0017614:	e8 29 fa ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c0017619:	89 c6                	mov    esi,eax
c001761b:	89 d7                	mov    edi,edx
c001761d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017621:	2d e8 00 00 00       	sub    eax,0xe8
c0017626:	89 04 24             	mov    DWORD PTR [esp],eax
c0017629:	e8 14 fa ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c001762e:	57                   	push   edi
c001762f:	56                   	push   esi
c0017630:	52                   	push   edx
c0017631:	50                   	push   eax
c0017632:	e8 ab f9 ff ff       	call   c0016fe2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0017637:	83 c4 1c             	add    esp,0x1c
c001763a:	52                   	push   edx
c001763b:	50                   	push   eax
c001763c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017640:	2d e8 00 00 00       	sub    eax,0xe8
c0017645:	eb b5                	jmp    c00175fc <Vm::x87Handler(regs*)+0x47a>
c0017647:	90                   	nop
c0017648:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001764c:	8d 50 40             	lea    edx,[eax+0x40]
c001764f:	80 fa 07             	cmp    dl,0x7
c0017652:	77 3c                	ja     c0017690 <Vm::x87Handler(regs*)+0x50e>
c0017654:	83 ec 0c             	sub    esp,0xc
c0017657:	2d c0 00 00 00       	sub    eax,0xc0
c001765c:	50                   	push   eax
c001765d:	e8 e0 f9 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c0017662:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017669:	89 c6                	mov    esi,eax
c001766b:	89 d7                	mov    edi,edx
c001766d:	e8 d0 f9 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c0017672:	57                   	push   edi
c0017673:	56                   	push   esi
c0017674:	52                   	push   edx
c0017675:	50                   	push   eax
c0017676:	e8 3d f9 ff ff       	call   c0016fb8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001767b:	83 c4 1c             	add    esp,0x1c
c001767e:	52                   	push   edx
c001767f:	50                   	push   eax
c0017680:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017684:	2d c0 00 00 00       	sub    eax,0xc0
c0017689:	e9 b2 01 00 00       	jmp    c0017840 <Vm::x87Handler(regs*)+0x6be>
c001768e:	66 90                	xchg   ax,ax
c0017690:	8d 50 20             	lea    edx,[eax+0x20]
c0017693:	80 fa 07             	cmp    dl,0x7
c0017696:	77 3c                	ja     c00176d4 <Vm::x87Handler(regs*)+0x552>
c0017698:	83 ec 0c             	sub    esp,0xc
c001769b:	2d e0 00 00 00       	sub    eax,0xe0
c00176a0:	50                   	push   eax
c00176a1:	e8 9c f9 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c00176a6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00176ad:	89 c6                	mov    esi,eax
c00176af:	89 d7                	mov    edi,edx
c00176b1:	e8 8c f9 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c00176b6:	57                   	push   edi
c00176b7:	56                   	push   esi
c00176b8:	52                   	push   edx
c00176b9:	50                   	push   eax
c00176ba:	e8 23 f9 ff ff       	call   c0016fe2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00176bf:	83 c4 1c             	add    esp,0x1c
c00176c2:	52                   	push   edx
c00176c3:	50                   	push   eax
c00176c4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00176c8:	2d e0 00 00 00       	sub    eax,0xe0
c00176cd:	e9 6e 01 00 00       	jmp    c0017840 <Vm::x87Handler(regs*)+0x6be>
c00176d2:	66 90                	xchg   ax,ax
c00176d4:	8d 50 18             	lea    edx,[eax+0x18]
c00176d7:	80 fa 07             	cmp    dl,0x7
c00176da:	77 3c                	ja     c0017718 <Vm::x87Handler(regs*)+0x596>
c00176dc:	83 ec 0c             	sub    esp,0xc
c00176df:	6a 00                	push   0x0
c00176e1:	e8 5c f9 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c00176e6:	89 c6                	mov    esi,eax
c00176e8:	89 d7                	mov    edi,edx
c00176ea:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00176ee:	2d e8 00 00 00       	sub    eax,0xe8
c00176f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00176f6:	e8 47 f9 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c00176fb:	57                   	push   edi
c00176fc:	56                   	push   esi
c00176fd:	52                   	push   edx
c00176fe:	50                   	push   eax
c00176ff:	e8 de f8 ff ff       	call   c0016fe2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0017704:	83 c4 1c             	add    esp,0x1c
c0017707:	52                   	push   edx
c0017708:	50                   	push   eax
c0017709:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001770d:	2d e8 00 00 00       	sub    eax,0xe8
c0017712:	e9 29 01 00 00       	jmp    c0017840 <Vm::x87Handler(regs*)+0x6be>
c0017717:	90                   	nop
c0017718:	8d 50 38             	lea    edx,[eax+0x38]
c001771b:	80 fa 07             	cmp    dl,0x7
c001771e:	77 3c                	ja     c001775c <Vm::x87Handler(regs*)+0x5da>
c0017720:	83 ec 0c             	sub    esp,0xc
c0017723:	2d c8 00 00 00       	sub    eax,0xc8
c0017728:	50                   	push   eax
c0017729:	e8 14 f9 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c001772e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017735:	89 c6                	mov    esi,eax
c0017737:	89 d7                	mov    edi,edx
c0017739:	e8 04 f9 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c001773e:	57                   	push   edi
c001773f:	56                   	push   esi
c0017740:	52                   	push   edx
c0017741:	50                   	push   eax
c0017742:	e8 aa f8 ff ff       	call   c0016ff1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0017747:	83 c4 1c             	add    esp,0x1c
c001774a:	52                   	push   edx
c001774b:	50                   	push   eax
c001774c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017750:	2d c8 00 00 00       	sub    eax,0xc8
c0017755:	e9 82 00 00 00       	jmp    c00177dc <Vm::x87Handler(regs*)+0x65a>
c001775a:	66 90                	xchg   ax,ax
c001775c:	3c f7                	cmp    al,0xf7
c001775e:	76 38                	jbe    c0017798 <Vm::x87Handler(regs*)+0x616>
c0017760:	83 ec 0c             	sub    esp,0xc
c0017763:	6a 00                	push   0x0
c0017765:	e8 d8 f8 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c001776a:	89 c6                	mov    esi,eax
c001776c:	89 d7                	mov    edi,edx
c001776e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017772:	2d f8 00 00 00       	sub    eax,0xf8
c0017777:	89 04 24             	mov    DWORD PTR [esp],eax
c001777a:	e8 c3 f8 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c001777f:	57                   	push   edi
c0017780:	56                   	push   esi
c0017781:	52                   	push   edx
c0017782:	50                   	push   eax
c0017783:	e8 88 f8 ff ff       	call   c0017010 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0017788:	83 c4 1c             	add    esp,0x1c
c001778b:	52                   	push   edx
c001778c:	50                   	push   eax
c001778d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017791:	2d f8 00 00 00       	sub    eax,0xf8
c0017796:	eb 44                	jmp    c00177dc <Vm::x87Handler(regs*)+0x65a>
c0017798:	8d 50 10             	lea    edx,[eax+0x10]
c001779b:	80 fa 07             	cmp    dl,0x7
c001779e:	0f 87 6c 01 00 00    	ja     c0017910 <Vm::x87Handler(regs*)+0x78e>
c00177a4:	83 ec 0c             	sub    esp,0xc
c00177a7:	2d f0 00 00 00       	sub    eax,0xf0
c00177ac:	50                   	push   eax
c00177ad:	e8 90 f8 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c00177b2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00177b9:	89 c6                	mov    esi,eax
c00177bb:	89 d7                	mov    edi,edx
c00177bd:	e8 80 f8 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c00177c2:	57                   	push   edi
c00177c3:	56                   	push   esi
c00177c4:	52                   	push   edx
c00177c5:	50                   	push   eax
c00177c6:	e8 45 f8 ff ff       	call   c0017010 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00177cb:	83 c4 1c             	add    esp,0x1c
c00177ce:	52                   	push   edx
c00177cf:	50                   	push   eax
c00177d0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00177d4:	2d f0 00 00 00       	sub    eax,0xf0
c00177d9:	8d 76 00             	lea    esi,[esi+0x0]
c00177dc:	50                   	push   eax
c00177dd:	8d 76 00             	lea    esi,[esi+0x0]
c00177e0:	e8 a0 f8 ff ff       	call   c0017085 <Vm::fpuSetReg(int, unsigned long long)>
c00177e5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00177e9:	e8 41 f9 ff ff       	call   c001712f <Vm::fpuPop()>
c00177ee:	e9 0d fa ff ff       	jmp    c0017200 <Vm::x87Handler(regs*)+0x7e>
c00177f3:	90                   	nop
c00177f4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00177f8:	8d 50 30             	lea    edx,[eax+0x30]
c00177fb:	80 fa 07             	cmp    dl,0x7
c00177fe:	77 20                	ja     c0017820 <Vm::x87Handler(regs*)+0x69e>
c0017800:	83 ec 0c             	sub    esp,0xc
c0017803:	6a 00                	push   0x0
c0017805:	e8 38 f8 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c001780a:	83 c4 0c             	add    esp,0xc
c001780d:	52                   	push   edx
c001780e:	50                   	push   eax
c001780f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017813:	2d d0 00 00 00       	sub    eax,0xd0
c0017818:	e9 df fd ff ff       	jmp    c00175fc <Vm::x87Handler(regs*)+0x47a>
c001781d:	8d 76 00             	lea    esi,[esi+0x0]
c0017820:	8d 50 28             	lea    edx,[eax+0x28]
c0017823:	80 fa 07             	cmp    dl,0x7
c0017826:	77 28                	ja     c0017850 <Vm::x87Handler(regs*)+0x6ce>
c0017828:	83 ec 0c             	sub    esp,0xc
c001782b:	6a 00                	push   0x0
c001782d:	e8 10 f8 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c0017832:	83 c4 0c             	add    esp,0xc
c0017835:	52                   	push   edx
c0017836:	50                   	push   eax
c0017837:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001783b:	2d d8 00 00 00       	sub    eax,0xd8
c0017840:	50                   	push   eax
c0017841:	e8 3f f8 ff ff       	call   c0017085 <Vm::fpuSetReg(int, unsigned long long)>
c0017846:	e8 e4 f8 ff ff       	call   c001712f <Vm::fpuPop()>
c001784b:	e9 ac f9 ff ff       	jmp    c00171fc <Vm::x87Handler(regs*)+0x7a>
c0017850:	8d 50 20             	lea    edx,[eax+0x20]
c0017853:	80 fa 07             	cmp    dl,0x7
c0017856:	77 30                	ja     c0017888 <Vm::x87Handler(regs*)+0x706>
c0017858:	83 ec 0c             	sub    esp,0xc
c001785b:	2d e0 00 00 00       	sub    eax,0xe0
c0017860:	50                   	push   eax
c0017861:	e8 dc f7 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c0017866:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001786d:	89 c6                	mov    esi,eax
c001786f:	89 d7                	mov    edi,edx
c0017871:	e8 cc f7 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c0017876:	57                   	push   edi
c0017877:	56                   	push   esi
c0017878:	52                   	push   edx
c0017879:	50                   	push   eax
c001787a:	e8 e3 f6 ff ff       	call   c0016f62 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001787f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017883:	e9 78 02 00 00       	jmp    c0017b00 <Vm::x87Handler(regs*)+0x97e>
c0017888:	8d 50 18             	lea    edx,[eax+0x18]
c001788b:	80 fa 07             	cmp    dl,0x7
c001788e:	0f 87 10 fb ff ff    	ja     c00173a4 <Vm::x87Handler(regs*)+0x222>
c0017894:	83 ec 0c             	sub    esp,0xc
c0017897:	2d e8 00 00 00       	sub    eax,0xe8
c001789c:	50                   	push   eax
c001789d:	e8 a0 f7 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c00178a2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00178a9:	89 c6                	mov    esi,eax
c00178ab:	89 d7                	mov    edi,edx
c00178ad:	e8 90 f7 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c00178b2:	57                   	push   edi
c00178b3:	56                   	push   esi
c00178b4:	52                   	push   edx
c00178b5:	50                   	push   eax
c00178b6:	e8 a7 f6 ff ff       	call   c0016f62 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00178bb:	83 c4 20             	add    esp,0x20
c00178be:	e8 6c f8 ff ff       	call   c001712f <Vm::fpuPop()>
c00178c3:	eb 6f                	jmp    c0017934 <Vm::x87Handler(regs*)+0x7b2>
c00178c5:	8d 76 00             	lea    esi,[esi+0x0]
c00178c8:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00178cc:	0f 85 22 01 00 00    	jne    c00179f4 <Vm::x87Handler(regs*)+0x872>
c00178d2:	66 90                	xchg   ax,ax
c00178d4:	83 ec 0c             	sub    esp,0xc
c00178d7:	6a 01                	push   0x1
c00178d9:	e8 64 f7 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c00178de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00178e5:	89 c6                	mov    esi,eax
c00178e7:	89 d7                	mov    edi,edx
c00178e9:	e8 54 f7 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c00178ee:	57                   	push   edi
c00178ef:	56                   	push   esi
c00178f0:	52                   	push   edx
c00178f1:	50                   	push   eax
c00178f2:	e8 6b f6 ff ff       	call   c0016f62 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00178f7:	83 c4 20             	add    esp,0x20
c00178fa:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00178fe:	e8 2c f8 ff ff       	call   c001712f <Vm::fpuPop()>
c0017903:	e8 27 f8 ff ff       	call   c001712f <Vm::fpuPop()>
c0017908:	e9 f7 f8 ff ff       	jmp    c0017204 <Vm::x87Handler(regs*)+0x82>
c001790d:	8d 76 00             	lea    esi,[esi+0x0]
c0017910:	3c d9                	cmp    al,0xd9
c0017912:	0f 85 e8 02 00 00    	jne    c0017c00 <Vm::x87Handler(regs*)+0xa7e>
c0017918:	eb ba                	jmp    c00178d4 <Vm::x87Handler(regs*)+0x752>
c001791a:	66 90                	xchg   ax,ax
c001791c:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0017920:	0f 85 2a 03 00 00    	jne    c0017c50 <Vm::x87Handler(regs*)+0xace>
c0017926:	0f b7 05 40 67 02 c0 	movzx  eax,WORD PTR ds:0xc0026740
c001792d:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0017931:	8d 76 00             	lea    esi,[esi+0x0]
c0017934:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017938:	e9 c7 f8 ff ff       	jmp    c0017204 <Vm::x87Handler(regs*)+0x82>
c001793d:	8d 76 00             	lea    esi,[esi+0x0]
c0017940:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0017944:	84 d2                	test   dl,dl
c0017946:	75 10                	jne    c0017958 <Vm::x87Handler(regs*)+0x7d6>
c0017948:	83 ec 0c             	sub    esp,0xc
c001794b:	ff 36                	push   DWORD PTR [esi]
c001794d:	e8 29 f4 ff ff       	call   c0016d7b <Vm::fpu32ToInternal(unsigned int)>
c0017952:	e9 39 01 00 00       	jmp    c0017a90 <Vm::x87Handler(regs*)+0x90e>
c0017957:	90                   	nop
c0017958:	80 fa 01             	cmp    dl,0x1
c001795b:	75 0f                	jne    c001796c <Vm::x87Handler(regs*)+0x7ea>
c001795d:	83 ec 0c             	sub    esp,0xc
c0017960:	ff 36                	push   DWORD PTR [esi]
c0017962:	e8 14 f4 ff ff       	call   c0016d7b <Vm::fpu32ToInternal(unsigned int)>
c0017967:	e9 b4 02 00 00       	jmp    c0017c20 <Vm::x87Handler(regs*)+0xa9e>
c001796c:	80 fa 04             	cmp    dl,0x4
c001796f:	75 0f                	jne    c0017980 <Vm::x87Handler(regs*)+0x7fe>
c0017971:	83 ec 0c             	sub    esp,0xc
c0017974:	ff 36                	push   DWORD PTR [esi]
c0017976:	e8 00 f4 ff ff       	call   c0016d7b <Vm::fpu32ToInternal(unsigned int)>
c001797b:	e9 9c 01 00 00       	jmp    c0017b1c <Vm::x87Handler(regs*)+0x99a>
c0017980:	80 fa 05             	cmp    dl,0x5
c0017983:	75 1b                	jne    c00179a0 <Vm::x87Handler(regs*)+0x81e>
c0017985:	83 ec 0c             	sub    esp,0xc
c0017988:	6a 00                	push   0x0
c001798a:	e8 b3 f6 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c001798f:	89 c7                	mov    edi,eax
c0017991:	89 d5                	mov    ebp,edx
c0017993:	58                   	pop    eax
c0017994:	ff 36                	push   DWORD PTR [esi]
c0017996:	e8 e0 f3 ff ff       	call   c0016d7b <Vm::fpu32ToInternal(unsigned int)>
c001799b:	e9 bc 01 00 00       	jmp    c0017b5c <Vm::x87Handler(regs*)+0x9da>
c00179a0:	80 fa 06             	cmp    dl,0x6
c00179a3:	75 0f                	jne    c00179b4 <Vm::x87Handler(regs*)+0x832>
c00179a5:	83 ec 0c             	sub    esp,0xc
c00179a8:	ff 36                	push   DWORD PTR [esi]
c00179aa:	e8 cc f3 ff ff       	call   c0016d7b <Vm::fpu32ToInternal(unsigned int)>
c00179af:	e9 cc 01 00 00       	jmp    c0017b80 <Vm::x87Handler(regs*)+0x9fe>
c00179b4:	31 c0                	xor    eax,eax
c00179b6:	80 fa 07             	cmp    dl,0x7
c00179b9:	0f 85 d5 02 00 00    	jne    c0017c94 <Vm::x87Handler(regs*)+0xb12>
c00179bf:	83 ec 0c             	sub    esp,0xc
c00179c2:	6a 00                	push   0x0
c00179c4:	e8 79 f6 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c00179c9:	89 c7                	mov    edi,eax
c00179cb:	89 d5                	mov    ebp,edx
c00179cd:	58                   	pop    eax
c00179ce:	ff 36                	push   DWORD PTR [esi]
c00179d0:	e8 a6 f3 ff ff       	call   c0016d7b <Vm::fpu32ToInternal(unsigned int)>
c00179d5:	e9 ee 01 00 00       	jmp    c0017bc8 <Vm::x87Handler(regs*)+0xa46>
c00179da:	66 90                	xchg   ax,ax
c00179dc:	80 fa 03             	cmp    dl,0x3
c00179df:	0f 85 f7 01 00 00    	jne    c0017bdc <Vm::x87Handler(regs*)+0xa5a>
c00179e5:	e8 45 f7 ff ff       	call   c001712f <Vm::fpuPop()>
c00179ea:	51                   	push   ecx
c00179eb:	51                   	push   ecx
c00179ec:	e9 03 02 00 00       	jmp    c0017bf4 <Vm::x87Handler(regs*)+0xa72>
c00179f1:	8d 76 00             	lea    esi,[esi+0x0]
c00179f4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00179f8:	80 fa 01             	cmp    dl,0x1
c00179fb:	75 0b                	jne    c0017a08 <Vm::x87Handler(regs*)+0x886>
c00179fd:	57                   	push   edi
c00179fe:	57                   	push   edi
c00179ff:	8b 06                	mov    eax,DWORD PTR [esi]
c0017a01:	e9 0e 02 00 00       	jmp    c0017c14 <Vm::x87Handler(regs*)+0xa92>
c0017a06:	66 90                	xchg   ax,ax
c0017a08:	80 fa 04             	cmp    dl,0x4
c0017a0b:	75 13                	jne    c0017a20 <Vm::x87Handler(regs*)+0x89e>
c0017a0d:	31 d2                	xor    edx,edx
c0017a0f:	51                   	push   ecx
c0017a10:	51                   	push   ecx
c0017a11:	8b 06                	mov    eax,DWORD PTR [esi]
c0017a13:	52                   	push   edx
c0017a14:	50                   	push   eax
c0017a15:	e8 4a f4 ff ff       	call   c0016e64 <Vm::fpuLongToFloat(long long)>
c0017a1a:	e9 fd 00 00 00       	jmp    c0017b1c <Vm::x87Handler(regs*)+0x99a>
c0017a1f:	90                   	nop
c0017a20:	31 c0                	xor    eax,eax
c0017a22:	80 fa 07             	cmp    dl,0x7
c0017a25:	0f 85 69 02 00 00    	jne    c0017c94 <Vm::x87Handler(regs*)+0xb12>
c0017a2b:	83 ec 0c             	sub    esp,0xc
c0017a2e:	6a 00                	push   0x0
c0017a30:	e8 0d f6 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c0017a35:	89 c7                	mov    edi,eax
c0017a37:	89 d5                	mov    ebp,edx
c0017a39:	58                   	pop    eax
c0017a3a:	8b 06                	mov    eax,DWORD PTR [esi]
c0017a3c:	5a                   	pop    edx
c0017a3d:	31 d2                	xor    edx,edx
c0017a3f:	52                   	push   edx
c0017a40:	50                   	push   eax
c0017a41:	e8 1e f4 ff ff       	call   c0016e64 <Vm::fpuLongToFloat(long long)>
c0017a46:	e9 7d 01 00 00       	jmp    c0017bc8 <Vm::x87Handler(regs*)+0xa46>
c0017a4b:	90                   	nop
c0017a4c:	84 d2                	test   dl,dl
c0017a4e:	75 10                	jne    c0017a60 <Vm::x87Handler(regs*)+0x8de>
c0017a50:	31 d2                	xor    edx,edx
c0017a52:	55                   	push   ebp
c0017a53:	55                   	push   ebp
c0017a54:	8b 06                	mov    eax,DWORD PTR [esi]
c0017a56:	52                   	push   edx
c0017a57:	50                   	push   eax
c0017a58:	e9 03 02 00 00       	jmp    c0017c60 <Vm::x87Handler(regs*)+0xade>
c0017a5d:	8d 76 00             	lea    esi,[esi+0x0]
c0017a60:	31 c0                	xor    eax,eax
c0017a62:	80 fa 02             	cmp    dl,0x2
c0017a65:	0f 85 29 02 00 00    	jne    c0017c94 <Vm::x87Handler(regs*)+0xb12>
c0017a6b:	83 ec 0c             	sub    esp,0xc
c0017a6e:	6a 00                	push   0x0
c0017a70:	e8 cd f5 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c0017a75:	59                   	pop    ecx
c0017a76:	5f                   	pop    edi
c0017a77:	e9 18 f9 ff ff       	jmp    c0017394 <Vm::x87Handler(regs*)+0x212>
c0017a7c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0017a80:	84 d2                	test   dl,dl
c0017a82:	75 2c                	jne    c0017ab0 <Vm::x87Handler(regs*)+0x92e>
c0017a84:	50                   	push   eax
c0017a85:	50                   	push   eax
c0017a86:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0017a89:	ff 36                	push   DWORD PTR [esi]
c0017a8b:	e8 30 f3 ff ff       	call   c0016dc0 <Vm::fpu64ToInternal(unsigned long long)>
c0017a90:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017a97:	89 c6                	mov    esi,eax
c0017a99:	89 d7                	mov    edi,edx
c0017a9b:	e8 a2 f5 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c0017aa0:	57                   	push   edi
c0017aa1:	56                   	push   esi
c0017aa2:	52                   	push   edx
c0017aa3:	50                   	push   eax
c0017aa4:	e8 0f f5 ff ff       	call   c0016fb8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0017aa9:	e9 8e 01 00 00       	jmp    c0017c3c <Vm::x87Handler(regs*)+0xaba>
c0017aae:	66 90                	xchg   ax,ax
c0017ab0:	80 fa 01             	cmp    dl,0x1
c0017ab3:	75 13                	jne    c0017ac8 <Vm::x87Handler(regs*)+0x946>
c0017ab5:	50                   	push   eax
c0017ab6:	50                   	push   eax
c0017ab7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0017aba:	ff 36                	push   DWORD PTR [esi]
c0017abc:	e8 ff f2 ff ff       	call   c0016dc0 <Vm::fpu64ToInternal(unsigned long long)>
c0017ac1:	e9 5a 01 00 00       	jmp    c0017c20 <Vm::x87Handler(regs*)+0xa9e>
c0017ac6:	66 90                	xchg   ax,ax
c0017ac8:	80 fa 02             	cmp    dl,0x2
c0017acb:	0f 85 03 f9 ff ff    	jne    c00173d4 <Vm::x87Handler(regs*)+0x252>
c0017ad1:	55                   	push   ebp
c0017ad2:	55                   	push   ebp
c0017ad3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0017ad6:	ff 36                	push   DWORD PTR [esi]
c0017ad8:	e8 e3 f2 ff ff       	call   c0016dc0 <Vm::fpu64ToInternal(unsigned long long)>
c0017add:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017ae4:	89 c6                	mov    esi,eax
c0017ae6:	89 d7                	mov    edi,edx
c0017ae8:	e8 55 f5 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c0017aed:	57                   	push   edi
c0017aee:	56                   	push   esi
c0017aef:	52                   	push   edx
c0017af0:	50                   	push   eax
c0017af1:	e8 6c f4 ff ff       	call   c0016f62 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0017af6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017afa:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0017afd:	8d 76 00             	lea    esi,[esi+0x0]
c0017b00:	83 c4 20             	add    esp,0x20
c0017b03:	e9 fc f6 ff ff       	jmp    c0017204 <Vm::x87Handler(regs*)+0x82>
c0017b08:	80 fa 04             	cmp    dl,0x4
c0017b0b:	75 2f                	jne    c0017b3c <Vm::x87Handler(regs*)+0x9ba>
c0017b0d:	51                   	push   ecx
c0017b0e:	51                   	push   ecx
c0017b0f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0017b12:	ff 36                	push   DWORD PTR [esi]
c0017b14:	e8 a7 f2 ff ff       	call   c0016dc0 <Vm::fpu64ToInternal(unsigned long long)>
c0017b19:	8d 76 00             	lea    esi,[esi+0x0]
c0017b1c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017b23:	89 c6                	mov    esi,eax
c0017b25:	89 d7                	mov    edi,edx
c0017b27:	e8 16 f5 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c0017b2c:	57                   	push   edi
c0017b2d:	56                   	push   esi
c0017b2e:	52                   	push   edx
c0017b2f:	50                   	push   eax
c0017b30:	e8 ad f4 ff ff       	call   c0016fe2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0017b35:	e9 02 01 00 00       	jmp    c0017c3c <Vm::x87Handler(regs*)+0xaba>
c0017b3a:	66 90                	xchg   ax,ax
c0017b3c:	80 fa 05             	cmp    dl,0x5
c0017b3f:	75 2b                	jne    c0017b6c <Vm::x87Handler(regs*)+0x9ea>
c0017b41:	83 ec 0c             	sub    esp,0xc
c0017b44:	6a 00                	push   0x0
c0017b46:	e8 f7 f4 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c0017b4b:	89 c7                	mov    edi,eax
c0017b4d:	89 d5                	mov    ebp,edx
c0017b4f:	58                   	pop    eax
c0017b50:	5a                   	pop    edx
c0017b51:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0017b54:	ff 36                	push   DWORD PTR [esi]
c0017b56:	e8 65 f2 ff ff       	call   c0016dc0 <Vm::fpu64ToInternal(unsigned long long)>
c0017b5b:	90                   	nop
c0017b5c:	83 c4 10             	add    esp,0x10
c0017b5f:	55                   	push   ebp
c0017b60:	57                   	push   edi
c0017b61:	52                   	push   edx
c0017b62:	50                   	push   eax
c0017b63:	e8 7a f4 ff ff       	call   c0016fe2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0017b68:	eb 6a                	jmp    c0017bd4 <Vm::x87Handler(regs*)+0xa52>
c0017b6a:	66 90                	xchg   ax,ax
c0017b6c:	80 fa 06             	cmp    dl,0x6
c0017b6f:	75 2f                	jne    c0017ba0 <Vm::x87Handler(regs*)+0xa1e>
c0017b71:	51                   	push   ecx
c0017b72:	51                   	push   ecx
c0017b73:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0017b76:	ff 36                	push   DWORD PTR [esi]
c0017b78:	e8 43 f2 ff ff       	call   c0016dc0 <Vm::fpu64ToInternal(unsigned long long)>
c0017b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0017b80:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017b87:	89 c6                	mov    esi,eax
c0017b89:	89 d7                	mov    edi,edx
c0017b8b:	e8 b2 f4 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c0017b90:	57                   	push   edi
c0017b91:	56                   	push   esi
c0017b92:	52                   	push   edx
c0017b93:	50                   	push   eax
c0017b94:	e8 77 f4 ff ff       	call   c0017010 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0017b99:	e9 9e 00 00 00       	jmp    c0017c3c <Vm::x87Handler(regs*)+0xaba>
c0017b9e:	66 90                	xchg   ax,ax
c0017ba0:	31 c0                	xor    eax,eax
c0017ba2:	80 fa 07             	cmp    dl,0x7
c0017ba5:	0f 85 e9 00 00 00    	jne    c0017c94 <Vm::x87Handler(regs*)+0xb12>
c0017bab:	83 ec 0c             	sub    esp,0xc
c0017bae:	6a 00                	push   0x0
c0017bb0:	e8 8d f4 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c0017bb5:	89 c7                	mov    edi,eax
c0017bb7:	89 d5                	mov    ebp,edx
c0017bb9:	58                   	pop    eax
c0017bba:	5a                   	pop    edx
c0017bbb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0017bbe:	ff 36                	push   DWORD PTR [esi]
c0017bc0:	e8 fb f1 ff ff       	call   c0016dc0 <Vm::fpu64ToInternal(unsigned long long)>
c0017bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0017bc8:	83 c4 10             	add    esp,0x10
c0017bcb:	55                   	push   ebp
c0017bcc:	57                   	push   edi
c0017bcd:	52                   	push   edx
c0017bce:	50                   	push   eax
c0017bcf:	e8 3c f4 ff ff       	call   c0017010 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0017bd4:	83 c4 0c             	add    esp,0xc
c0017bd7:	eb 67                	jmp    c0017c40 <Vm::x87Handler(regs*)+0xabe>
c0017bd9:	8d 76 00             	lea    esi,[esi+0x0]
c0017bdc:	31 c0                	xor    eax,eax
c0017bde:	80 fa 02             	cmp    dl,0x2
c0017be1:	0f 85 ad 00 00 00    	jne    c0017c94 <Vm::x87Handler(regs*)+0xb12>
c0017be7:	83 ec 0c             	sub    esp,0xc
c0017bea:	6a 00                	push   0x0
c0017bec:	e8 51 f4 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c0017bf1:	59                   	pop    ecx
c0017bf2:	5f                   	pop    edi
c0017bf3:	90                   	nop
c0017bf4:	52                   	push   edx
c0017bf5:	50                   	push   eax
c0017bf6:	e8 77 f1 ff ff       	call   c0016d72 <Vm::fpuInternalTo64(unsigned long long)>
c0017bfb:	e9 84 00 00 00       	jmp    c0017c84 <Vm::x87Handler(regs*)+0xb02>
c0017c00:	31 c0                	xor    eax,eax
c0017c02:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0017c07:	0f 85 87 00 00 00    	jne    c0017c94 <Vm::x87Handler(regs*)+0xb12>
c0017c0d:	50                   	push   eax
c0017c0e:	50                   	push   eax
c0017c0f:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0017c12:	66 90                	xchg   ax,ax
c0017c14:	31 d2                	xor    edx,edx
c0017c16:	52                   	push   edx
c0017c17:	50                   	push   eax
c0017c18:	e8 47 f2 ff ff       	call   c0016e64 <Vm::fpuLongToFloat(long long)>
c0017c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0017c20:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017c27:	89 c6                	mov    esi,eax
c0017c29:	89 d7                	mov    edi,edx
c0017c2b:	e8 12 f4 ff ff       	call   c0017042 <Vm::fpuGetReg(int)>
c0017c30:	57                   	push   edi
c0017c31:	56                   	push   esi
c0017c32:	52                   	push   edx
c0017c33:	50                   	push   eax
c0017c34:	e8 b8 f3 ff ff       	call   c0016ff1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0017c39:	8d 76 00             	lea    esi,[esi+0x0]
c0017c3c:	83 c4 1c             	add    esp,0x1c
c0017c3f:	90                   	nop
c0017c40:	52                   	push   edx
c0017c41:	50                   	push   eax
c0017c42:	6a 00                	push   0x0
c0017c44:	e8 3c f4 ff ff       	call   c0017085 <Vm::fpuSetReg(int, unsigned long long)>
c0017c49:	e9 7a f7 ff ff       	jmp    c00173c8 <Vm::x87Handler(regs*)+0x246>
c0017c4e:	66 90                	xchg   ax,ax
c0017c50:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0017c54:	80 fa 05             	cmp    dl,0x5
c0017c57:	75 13                	jne    c0017c6c <Vm::x87Handler(regs*)+0xaea>
c0017c59:	55                   	push   ebp
c0017c5a:	55                   	push   ebp
c0017c5b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0017c5e:	ff 36                	push   DWORD PTR [esi]
c0017c60:	e8 c3 f1 ff ff       	call   c0016e28 <Vm::fpuULongToFloat(unsigned long long)>
c0017c65:	e9 52 f7 ff ff       	jmp    c00173bc <Vm::x87Handler(regs*)+0x23a>
c0017c6a:	66 90                	xchg   ax,ax
c0017c6c:	31 c0                	xor    eax,eax
c0017c6e:	80 fa 07             	cmp    dl,0x7
c0017c71:	75 21                	jne    c0017c94 <Vm::x87Handler(regs*)+0xb12>
c0017c73:	e8 b7 f4 ff ff       	call   c001712f <Vm::fpuPop()>
c0017c78:	51                   	push   ecx
c0017c79:	51                   	push   ecx
c0017c7a:	52                   	push   edx
c0017c7b:	50                   	push   eax
c0017c7c:	e8 48 f1 ff ff       	call   c0016dc9 <Vm::fpuFloatToLong(unsigned long long)>
c0017c81:	8d 76 00             	lea    esi,[esi+0x0]
c0017c84:	83 c4 10             	add    esp,0x10
c0017c87:	89 06                	mov    DWORD PTR [esi],eax
c0017c89:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0017c8c:	e9 7b f7 ff ff       	jmp    c001740c <Vm::x87Handler(regs*)+0x28a>
c0017c91:	8d 76 00             	lea    esi,[esi+0x0]
c0017c94:	83 c4 1c             	add    esp,0x1c
c0017c97:	5b                   	pop    ebx
c0017c98:	5e                   	pop    esi
c0017c99:	5f                   	pop    edi
c0017c9a:	5d                   	pop    ebp
c0017c9b:	c3                   	ret    

c0017c9c <__static_initialization_and_destruction_0(int, int)>:
c0017c9c:	83 ec 0c             	sub    esp,0xc
c0017c9f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017ca4:	75 1a                	jne    c0017cc0 <__static_initialization_and_destruction_0(int, int)+0x24>
c0017ca6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017cae:	75 10                	jne    c0017cc0 <__static_initialization_and_destruction_0(int, int)+0x24>
c0017cb0:	83 ec 0c             	sub    esp,0xc
c0017cb3:	68 40 67 02 c0       	push   0xc0026740
c0017cb8:	e8 d7 7f 00 00       	call   c001fc94 <Vm::_FPUState::_FPUState()>
c0017cbd:	83 c4 10             	add    esp,0x10
c0017cc0:	90                   	nop
c0017cc1:	83 c4 0c             	add    esp,0xc
c0017cc4:	c3                   	ret    
c0017cc5:	8d 76 00             	lea    esi,[esi+0x0]

c0017cc8 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0017cc8:	83 ec 0c             	sub    esp,0xc
c0017ccb:	83 ec 08             	sub    esp,0x8
c0017cce:	68 ff ff 00 00       	push   0xffff
c0017cd3:	6a 01                	push   0x1
c0017cd5:	e8 c2 ff ff ff       	call   c0017c9c <__static_initialization_and_destruction_0(int, int)>
c0017cda:	83 c4 10             	add    esp,0x10
c0017cdd:	83 c4 0c             	add    esp,0xc
c0017ce0:	c3                   	ret    

c0017ce1 <Hal::noCopro(unsigned long)>:
c0017ce1:	c3                   	ret    

c0017ce2 <Hal::noTSC()>:
c0017ce2:	31 c0                	xor    eax,eax
c0017ce4:	31 d2                	xor    edx,edx
c0017ce6:	c3                   	ret    

c0017ce7 <Hal::readTSC()>:
c0017ce7:	0f 31                	rdtsc  
c0017ce9:	c3                   	ret    

c0017cea <nmiHandler(regs*, void*)>:
c0017cea:	83 ec 0c             	sub    esp,0xc
c0017ced:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c0017cf2:	83 ec 0c             	sub    esp,0xc
c0017cf5:	50                   	push   eax
c0017cf6:	e8 2b 12 ff ff       	call   c0008f26 <Computer::handleNMI()>
c0017cfb:	83 c4 10             	add    esp,0x10
c0017cfe:	90                   	nop
c0017cff:	83 c4 0c             	add    esp,0xc
c0017d02:	c3                   	ret    

c0017d03 <doubleFault(regs*, void*)>:
c0017d03:	55                   	push   ebp
c0017d04:	89 e5                	mov    ebp,esp
c0017d06:	83 ec 08             	sub    esp,0x8
c0017d09:	83 ec 0c             	sub    esp,0xc
c0017d0c:	68 68 20 02 c0       	push   0xc0022068
c0017d11:	e8 bb a4 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c0017d16:	83 c4 10             	add    esp,0x10
c0017d19:	90                   	nop
c0017d1a:	c9                   	leave  
c0017d1b:	c3                   	ret    

c0017d1c <displayDebugInfo(regs*)>:
c0017d1c:	83 ec 1c             	sub    esp,0x1c
c0017d1f:	0f 20 c0             	mov    eax,cr0
c0017d22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d26:	0f 20 d0             	mov    eax,cr2
c0017d29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d2d:	0f 20 d8             	mov    eax,cr3
c0017d30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017d34:	0f 20 e0             	mov    eax,cr4
c0017d37:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d3e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017d41:	83 ec 08             	sub    esp,0x8
c0017d44:	50                   	push   eax
c0017d45:	68 84 20 02 c0       	push   0xc0022084
c0017d4a:	e8 ac 47 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0017d4f:	83 c4 10             	add    esp,0x10
c0017d52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d56:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017d59:	83 ec 08             	sub    esp,0x8
c0017d5c:	50                   	push   eax
c0017d5d:	68 75 20 02 c0       	push   0xc0022075
c0017d62:	e8 94 47 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0017d67:	83 c4 10             	add    esp,0x10
c0017d6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d6e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017d71:	83 ec 08             	sub    esp,0x8
c0017d74:	50                   	push   eax
c0017d75:	68 80 20 02 c0       	push   0xc0022080
c0017d7a:	e8 7c 47 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0017d7f:	83 c4 10             	add    esp,0x10
c0017d82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d86:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017d89:	83 ec 08             	sub    esp,0x8
c0017d8c:	50                   	push   eax
c0017d8d:	68 8f 20 02 c0       	push   0xc002208f
c0017d92:	e8 64 47 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0017d97:	83 c4 10             	add    esp,0x10
c0017d9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d9e:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017da1:	83 ec 08             	sub    esp,0x8
c0017da4:	50                   	push   eax
c0017da5:	68 9a 20 02 c0       	push   0xc002209a
c0017daa:	e8 4c 47 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0017daf:	83 c4 10             	add    esp,0x10
c0017db2:	83 ec 08             	sub    esp,0x8
c0017db5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017db9:	68 a5 20 02 c0       	push   0xc00220a5
c0017dbe:	e8 38 47 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0017dc3:	83 c4 10             	add    esp,0x10
c0017dc6:	83 ec 08             	sub    esp,0x8
c0017dc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017dcd:	68 b0 20 02 c0       	push   0xc00220b0
c0017dd2:	e8 24 47 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c0017dd7:	83 c4 10             	add    esp,0x10
c0017dda:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c0017ddf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017de5:	83 ec 0c             	sub    esp,0xc
c0017de8:	50                   	push   eax
c0017de9:	e8 a3 26 ff ff       	call   c000a491 <setActiveTerminal(VgaText*)>
c0017dee:	83 c4 10             	add    esp,0x10
c0017df1:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c0017df6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017dfc:	83 ec 08             	sub    esp,0x8
c0017dff:	68 bb 20 02 c0       	push   0xc00220bb
c0017e04:	50                   	push   eax
c0017e05:	e8 c6 29 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c0017e0a:	83 c4 10             	add    esp,0x10
c0017e0d:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c0017e12:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e18:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017e1d:	8b 12                	mov    edx,DWORD PTR [edx]
c0017e1f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017e22:	83 c2 0c             	add    edx,0xc
c0017e25:	83 ec 08             	sub    esp,0x8
c0017e28:	52                   	push   edx
c0017e29:	50                   	push   eax
c0017e2a:	e8 a1 29 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c0017e2f:	83 c4 10             	add    esp,0x10
c0017e32:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c0017e37:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e3d:	83 ec 08             	sub    esp,0x8
c0017e40:	68 c4 20 02 c0       	push   0xc00220c4
c0017e45:	50                   	push   eax
c0017e46:	e8 85 29 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c0017e4b:	83 c4 10             	add    esp,0x10
c0017e4e:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c0017e53:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e59:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017e5d:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017e60:	83 ec 08             	sub    esp,0x8
c0017e63:	52                   	push   edx
c0017e64:	50                   	push   eax
c0017e65:	e8 20 29 ff ff       	call   c000a78a <VgaText::putx(unsigned int)>
c0017e6a:	83 c4 10             	add    esp,0x10
c0017e6d:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c0017e72:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e78:	83 ec 08             	sub    esp,0x8
c0017e7b:	68 cc 20 02 c0       	push   0xc00220cc
c0017e80:	50                   	push   eax
c0017e81:	e8 4a 29 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c0017e86:	83 c4 10             	add    esp,0x10
c0017e89:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c0017e8e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e94:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017e98:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017e9b:	83 ec 08             	sub    esp,0x8
c0017e9e:	52                   	push   edx
c0017e9f:	50                   	push   eax
c0017ea0:	e8 e5 28 ff ff       	call   c000a78a <VgaText::putx(unsigned int)>
c0017ea5:	83 c4 10             	add    esp,0x10
c0017ea8:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c0017ead:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017eb3:	83 ec 08             	sub    esp,0x8
c0017eb6:	68 d4 20 02 c0       	push   0xc00220d4
c0017ebb:	50                   	push   eax
c0017ebc:	e8 0f 29 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c0017ec1:	83 c4 10             	add    esp,0x10
c0017ec4:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c0017ec9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ecf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ed3:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017ed6:	83 ec 08             	sub    esp,0x8
c0017ed9:	52                   	push   edx
c0017eda:	50                   	push   eax
c0017edb:	e8 aa 28 ff ff       	call   c000a78a <VgaText::putx(unsigned int)>
c0017ee0:	83 c4 10             	add    esp,0x10
c0017ee3:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c0017ee8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017eee:	83 ec 08             	sub    esp,0x8
c0017ef1:	68 dc 20 02 c0       	push   0xc00220dc
c0017ef6:	50                   	push   eax
c0017ef7:	e8 d4 28 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c0017efc:	83 c4 10             	add    esp,0x10
c0017eff:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c0017f04:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f0a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017f0e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017f11:	83 ec 08             	sub    esp,0x8
c0017f14:	52                   	push   edx
c0017f15:	50                   	push   eax
c0017f16:	e8 6f 28 ff ff       	call   c000a78a <VgaText::putx(unsigned int)>
c0017f1b:	83 c4 10             	add    esp,0x10
c0017f1e:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c0017f23:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f29:	83 ec 08             	sub    esp,0x8
c0017f2c:	68 e4 20 02 c0       	push   0xc00220e4
c0017f31:	50                   	push   eax
c0017f32:	e8 99 28 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c0017f37:	83 c4 10             	add    esp,0x10
c0017f3a:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c0017f3f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f45:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017f49:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017f4c:	83 ec 08             	sub    esp,0x8
c0017f4f:	52                   	push   edx
c0017f50:	50                   	push   eax
c0017f51:	e8 34 28 ff ff       	call   c000a78a <VgaText::putx(unsigned int)>
c0017f56:	83 c4 10             	add    esp,0x10
c0017f59:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c0017f5e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f64:	83 ec 08             	sub    esp,0x8
c0017f67:	68 ec 20 02 c0       	push   0xc00220ec
c0017f6c:	50                   	push   eax
c0017f6d:	e8 5e 28 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c0017f72:	83 c4 10             	add    esp,0x10
c0017f75:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c0017f7a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f80:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017f84:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017f87:	83 ec 08             	sub    esp,0x8
c0017f8a:	52                   	push   edx
c0017f8b:	50                   	push   eax
c0017f8c:	e8 f9 27 ff ff       	call   c000a78a <VgaText::putx(unsigned int)>
c0017f91:	83 c4 10             	add    esp,0x10
c0017f94:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c0017f99:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f9f:	83 ec 08             	sub    esp,0x8
c0017fa2:	68 f4 20 02 c0       	push   0xc00220f4
c0017fa7:	50                   	push   eax
c0017fa8:	e8 23 28 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c0017fad:	83 c4 10             	add    esp,0x10
c0017fb0:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c0017fb5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fbb:	83 ec 08             	sub    esp,0x8
c0017fbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017fc2:	50                   	push   eax
c0017fc3:	e8 c2 27 ff ff       	call   c000a78a <VgaText::putx(unsigned int)>
c0017fc8:	83 c4 10             	add    esp,0x10
c0017fcb:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c0017fd0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fd6:	83 ec 08             	sub    esp,0x8
c0017fd9:	68 fd 20 02 c0       	push   0xc00220fd
c0017fde:	50                   	push   eax
c0017fdf:	e8 ec 27 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c0017fe4:	83 c4 10             	add    esp,0x10
c0017fe7:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c0017fec:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ff2:	83 ec 08             	sub    esp,0x8
c0017ff5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017ff9:	50                   	push   eax
c0017ffa:	e8 8b 27 ff ff       	call   c000a78a <VgaText::putx(unsigned int)>
c0017fff:	83 c4 10             	add    esp,0x10
c0018002:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c0018007:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001800d:	83 ec 08             	sub    esp,0x8
c0018010:	68 05 21 02 c0       	push   0xc0022105
c0018015:	50                   	push   eax
c0018016:	e8 b5 27 ff ff       	call   c000a7d0 <VgaText::puts(char const*)>
c001801b:	83 c4 10             	add    esp,0x10
c001801e:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c0018023:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018029:	83 ec 08             	sub    esp,0x8
c001802c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018030:	50                   	push   eax
c0018031:	e8 54 27 ff ff       	call   c000a78a <VgaText::putx(unsigned int)>
c0018036:	83 c4 10             	add    esp,0x10
c0018039:	fa                   	cli    
c001803a:	f4                   	hlt    
c001803b:	eb fe                	jmp    c001803b <displayDebugInfo(regs*)+0x31f>

c001803d <displayProgramFault(char const*)>:
c001803d:	83 ec 0c             	sub    esp,0xc
c0018040:	83 ec 0c             	sub    esp,0xc
c0018043:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018047:	e8 af 44 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c001804c:	83 c4 10             	add    esp,0x10
c001804f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018054:	8b 00                	mov    eax,DWORD PTR [eax]
c0018056:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018059:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001805f:	85 c0                	test   eax,eax
c0018061:	74 21                	je     c0018084 <displayProgramFault(char const*)+0x47>
c0018063:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018068:	8b 00                	mov    eax,DWORD PTR [eax]
c001806a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001806d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018073:	6a 04                	push   0x4
c0018075:	6a 0f                	push   0xf
c0018077:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001807b:	50                   	push   eax
c001807c:	e8 c1 27 ff ff       	call   c000a842 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0018081:	83 c4 10             	add    esp,0x10
c0018084:	90                   	nop
c0018085:	83 c4 0c             	add    esp,0xc
c0018088:	c3                   	ret    

c0018089 <gpFault(regs*, void*)>:
c0018089:	83 ec 1c             	sub    esp,0x1c
c001808c:	c7 05 9c 67 02 c0 3f 66 01 c0 	mov    DWORD PTR ds:0xc002679c,0xc001663f
c0018096:	a1 9c 67 02 c0       	mov    eax,ds:0xc002679c
c001809b:	85 c0                	test   eax,eax
c001809d:	74 1c                	je     c00180bb <gpFault(regs*, void*)+0x32>
c001809f:	a1 9c 67 02 c0       	mov    eax,ds:0xc002679c
c00180a4:	83 ec 0c             	sub    esp,0xc
c00180a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180ab:	ff d0                	call   eax
c00180ad:	83 c4 10             	add    esp,0x10
c00180b0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00180b4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00180b9:	75 2e                	jne    c00180e9 <gpFault(regs*, void*)+0x60>
c00180bb:	83 ec 0c             	sub    esp,0xc
c00180be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180c2:	e8 55 fc ff ff       	call   c0017d1c <displayDebugInfo(regs*)>
c00180c7:	83 c4 10             	add    esp,0x10
c00180ca:	83 ec 0c             	sub    esp,0xc
c00180cd:	68 0d 21 02 c0       	push   0xc002210d
c00180d2:	e8 66 ff ff ff       	call   c001803d <displayProgramFault(char const*)>
c00180d7:	83 c4 10             	add    esp,0x10
c00180da:	83 ec 0c             	sub    esp,0xc
c00180dd:	6a 00                	push   0x0
c00180df:	e8 54 df ff ff       	call   c0016038 <Thr::terminateFromIRQ(int)>
c00180e4:	83 c4 10             	add    esp,0x10
c00180e7:	eb 01                	jmp    c00180ea <gpFault(regs*, void*)+0x61>
c00180e9:	90                   	nop
c00180ea:	83 c4 1c             	add    esp,0x1c
c00180ed:	c3                   	ret    

c00180ee <pgFault(regs*, void*)>:
c00180ee:	83 ec 1c             	sub    esp,0x1c
c00180f1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00180f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00180f8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00180fb:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018101:	0f 20 d2             	mov    edx,cr2
c0018104:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018108:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001810c:	83 ec 08             	sub    esp,0x8
c001810f:	52                   	push   edx
c0018110:	50                   	push   eax
c0018111:	e8 30 40 ff ff       	call   c000c146 <VAS::tryLoadBackOffDisk(unsigned long)>
c0018116:	83 c4 10             	add    esp,0x10
c0018119:	84 c0                	test   al,al
c001811b:	75 2e                	jne    c001814b <pgFault(regs*, void*)+0x5d>
c001811d:	83 ec 0c             	sub    esp,0xc
c0018120:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018124:	e8 f3 fb ff ff       	call   c0017d1c <displayDebugInfo(regs*)>
c0018129:	83 c4 10             	add    esp,0x10
c001812c:	83 ec 0c             	sub    esp,0xc
c001812f:	68 26 21 02 c0       	push   0xc0022126
c0018134:	e8 04 ff ff ff       	call   c001803d <displayProgramFault(char const*)>
c0018139:	83 c4 10             	add    esp,0x10
c001813c:	83 ec 0c             	sub    esp,0xc
c001813f:	6a 00                	push   0x0
c0018141:	e8 f2 de ff ff       	call   c0016038 <Thr::terminateFromIRQ(int)>
c0018146:	83 c4 10             	add    esp,0x10
c0018149:	eb 01                	jmp    c001814c <pgFault(regs*, void*)+0x5e>
c001814b:	90                   	nop
c001814c:	83 c4 1c             	add    esp,0x1c
c001814f:	c3                   	ret    

c0018150 <otherISRHandler(regs*, void*)>:
c0018150:	83 ec 0c             	sub    esp,0xc
c0018153:	83 ec 0c             	sub    esp,0xc
c0018156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001815a:	e8 bd fb ff ff       	call   c0017d1c <displayDebugInfo(regs*)>
c001815f:	83 c4 10             	add    esp,0x10
c0018162:	83 ec 0c             	sub    esp,0xc
c0018165:	68 78 21 02 c0       	push   0xc0022178
c001816a:	e8 ce fe ff ff       	call   c001803d <displayProgramFault(char const*)>
c001816f:	83 c4 10             	add    esp,0x10
c0018172:	83 ec 0c             	sub    esp,0xc
c0018175:	6a 00                	push   0x0
c0018177:	e8 bc de ff ff       	call   c0016038 <Thr::terminateFromIRQ(int)>
c001817c:	83 c4 10             	add    esp,0x10
c001817f:	90                   	nop
c0018180:	83 c4 0c             	add    esp,0xc
c0018183:	c3                   	ret    

c0018184 <opcodeFault(regs*, void*)>:
c0018184:	55                   	push   ebp
c0018185:	89 e5                	mov    ebp,esp
c0018187:	83 ec 08             	sub    esp,0x8
c001818a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001818d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018190:	83 ec 08             	sub    esp,0x8
c0018193:	50                   	push   eax
c0018194:	68 31 21 02 c0       	push   0xc0022131
c0018199:	e8 5d 43 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c001819e:	83 c4 10             	add    esp,0x10
c00181a1:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c00181a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00181ac:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00181b2:	84 c0                	test   al,al
c00181b4:	74 21                	je     c00181d7 <opcodeFault(regs*, void*)+0x53>
c00181b6:	83 ec 0c             	sub    esp,0xc
c00181b9:	68 a0 21 02 c0       	push   0xc00221a0
c00181be:	e8 38 43 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c00181c3:	83 c4 10             	add    esp,0x10
c00181c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00181c9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00181cc:	8d 50 19             	lea    edx,[eax+0x19]
c00181cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00181d2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00181d5:	eb 2b                	jmp    c0018202 <opcodeFault(regs*, void*)+0x7e>
c00181d7:	83 ec 0c             	sub    esp,0xc
c00181da:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00181dd:	e8 3a fb ff ff       	call   c0017d1c <displayDebugInfo(regs*)>
c00181e2:	83 c4 10             	add    esp,0x10
c00181e5:	83 ec 0c             	sub    esp,0xc
c00181e8:	68 3f 21 02 c0       	push   0xc002213f
c00181ed:	e8 4b fe ff ff       	call   c001803d <displayProgramFault(char const*)>
c00181f2:	83 c4 10             	add    esp,0x10
c00181f5:	83 ec 0c             	sub    esp,0xc
c00181f8:	6a 00                	push   0x0
c00181fa:	e8 39 de ff ff       	call   c0016038 <Thr::terminateFromIRQ(int)>
c00181ff:	83 c4 10             	add    esp,0x10
c0018202:	c9                   	leave  
c0018203:	c3                   	ret    

c0018204 <i386SaveCoprocessor(void*)>:
c0018204:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018208:	83 c0 3f             	add    eax,0x3f
c001820b:	83 e0 c0             	and    eax,0xffffffc0
c001820e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018212:	ff 25 94 67 02 c0    	jmp    DWORD PTR ds:0xc0026794

c0018218 <i386LoadCoprocessor(void*)>:
c0018218:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001821c:	83 c0 3f             	add    eax,0x3f
c001821f:	83 e0 c0             	and    eax,0xffffffc0
c0018222:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018226:	ff 25 90 67 02 c0    	jmp    DWORD PTR ds:0xc0026790

c001822c <x87EmulHandler(regs*, void*)>:
c001822c:	53                   	push   ebx
c001822d:	83 ec 08             	sub    esp,0x8
c0018230:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018235:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018239:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c001823d:	74 10                	je     c001824f <x87EmulHandler(regs*, void*)+0x23>
c001823f:	83 ec 0c             	sub    esp,0xc
c0018242:	68 4c 21 02 c0       	push   0xc002214c
c0018247:	e8 85 9f ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001824c:	83 c4 10             	add    esp,0x10
c001824f:	0f 20 c0             	mov    eax,cr0
c0018252:	a8 08                	test   al,0x8
c0018254:	74 56                	je     c00182ac <x87EmulHandler(regs*, void*)+0x80>
c0018256:	0f 06                	clts   
c0018258:	a1 8c 67 02 c0       	mov    eax,ds:0xc002678c
c001825d:	85 c0                	test   eax,eax
c001825f:	74 0e                	je     c001826f <x87EmulHandler(regs*, void*)+0x43>
c0018261:	83 ec 0c             	sub    esp,0xc
c0018264:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0018267:	e8 98 ff ff ff       	call   c0018204 <i386SaveCoprocessor(void*)>
c001826c:	83 c4 10             	add    esp,0x10
c001826f:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018275:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0018279:	75 12                	jne    c001828d <x87EmulHandler(regs*, void*)+0x61>
c001827b:	83 ec 0c             	sub    esp,0xc
c001827e:	68 40 02 00 00       	push   0x240
c0018283:	e8 e9 14 ff ff       	call   c0009771 <malloc>
c0018288:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001828b:	eb 10                	jmp    c001829d <x87EmulHandler(regs*, void*)+0x71>
c001828d:	83 ec 0c             	sub    esp,0xc
c0018290:	a1 8c 67 02 c0       	mov    eax,ds:0xc002678c
c0018295:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0018298:	e8 7b ff ff ff       	call   c0018218 <i386LoadCoprocessor(void*)>
c001829d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182a2:	83 c4 10             	add    esp,0x10
c00182a5:	a3 8c 67 02 c0       	mov    ds:0xc002678c,eax
c00182aa:	eb 2e                	jmp    c00182da <x87EmulHandler(regs*, void*)+0xae>
c00182ac:	83 ec 0c             	sub    esp,0xc
c00182af:	53                   	push   ebx
c00182b0:	e8 cd ee ff ff       	call   c0017182 <Vm::x87Handler(regs*)>
c00182b5:	83 c4 10             	add    esp,0x10
c00182b8:	84 c0                	test   al,al
c00182ba:	75 1e                	jne    c00182da <x87EmulHandler(regs*, void*)+0xae>
c00182bc:	83 ec 0c             	sub    esp,0xc
c00182bf:	68 60 21 02 c0       	push   0xc0022160
c00182c4:	e8 32 42 ff ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c00182c9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00182d1:	83 c4 18             	add    esp,0x18
c00182d4:	5b                   	pop    ebx
c00182d5:	e9 5e dd ff ff       	jmp    c0016038 <Thr::terminateFromIRQ(int)>
c00182da:	83 c4 08             	add    esp,0x8
c00182dd:	5b                   	pop    ebx
c00182de:	c3                   	ret    

c00182df <Hal::initialiseCoprocessor()>:
c00182df:	83 ec 10             	sub    esp,0x10
c00182e2:	c7 05 8c 67 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002678c,0x0
c00182ec:	6a 00                	push   0x0
c00182ee:	68 2c 82 01 c0       	push   0xc001822c
c00182f3:	6a 07                	push   0x7
c00182f5:	e8 56 5b ff ff       	call   c000de50 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182fa:	e8 f1 69 00 00       	call   c001ecf0 <avxDetect>
c00182ff:	83 c4 10             	add    esp,0x10
c0018302:	85 c0                	test   eax,eax
c0018304:	74 1c                	je     c0018322 <Hal::initialiseCoprocessor()+0x43>
c0018306:	c7 05 94 67 02 c0 1a ed 01 c0 	mov    DWORD PTR ds:0xc0026794,0xc001ed1a
c0018310:	c7 05 90 67 02 c0 2b ed 01 c0 	mov    DWORD PTR ds:0xc0026790,0xc001ed2b
c001831a:	83 c4 0c             	add    esp,0xc
c001831d:	e9 1a 6a 00 00       	jmp    c001ed3c <avxInit>
c0018322:	e8 49 6c 00 00       	call   c001ef70 <absolutelyNoChanceInHell>
c0018327:	85 c0                	test   eax,eax
c0018329:	74 1c                	je     c0018347 <Hal::initialiseCoprocessor()+0x68>
c001832b:	c7 05 94 67 02 c0 88 ef 01 c0 	mov    DWORD PTR ds:0xc0026794,0xc001ef88
c0018335:	c7 05 90 67 02 c0 90 ef 01 c0 	mov    DWORD PTR ds:0xc0026790,0xc001ef90
c001833f:	83 c4 0c             	add    esp,0xc
c0018342:	e9 51 6c 00 00       	jmp    c001ef98 <sseInit>
c0018347:	e8 6a 6c 00 00       	call   c001efb6 <x87Detect>
c001834c:	85 c0                	test   eax,eax
c001834e:	74 1c                	je     c001836c <Hal::initialiseCoprocessor()+0x8d>
c0018350:	c7 05 94 67 02 c0 d1 ef 01 c0 	mov    DWORD PTR ds:0xc0026794,0xc001efd1
c001835a:	c7 05 90 67 02 c0 d8 ef 01 c0 	mov    DWORD PTR ds:0xc0026790,0xc001efd8
c0018364:	83 c4 0c             	add    esp,0xc
c0018367:	e9 73 6c 00 00       	jmp    c001efdf <x87Init>
c001836c:	c7 05 94 67 02 c0 e1 7c 01 c0 	mov    DWORD PTR ds:0xc0026794,0xc0017ce1
c0018376:	c7 05 90 67 02 c0 e1 7c 01 c0 	mov    DWORD PTR ds:0xc0026790,0xc0017ce1
c0018380:	0f 20 c0             	mov    eax,cr0
c0018383:	83 c8 04             	or     eax,0x4
c0018386:	0f 22 c0             	mov    cr0,eax
c0018389:	83 c4 0c             	add    esp,0xc
c001838c:	c3                   	ret    

c001838d <Hal::panic(char const*)>:
c001838d:	e9 3f 9e ff ff       	jmp    c00121d1 <Krnl::panic(char const*)>

c0018392 <Hal::initialise()>:
c0018392:	53                   	push   ebx
c0018393:	83 ec 08             	sub    esp,0x8
c0018396:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c001839b:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00183a1:	b8 e2 7c 01 c0       	mov    eax,0xc0017ce2
c00183a6:	f6 82 8c 11 00 00 02 	test   BYTE PTR [edx+0x118c],0x2
c00183ad:	74 05                	je     c00183b4 <Hal::initialise()+0x22>
c00183af:	b8 e7 7c 01 c0       	mov    eax,0xc0017ce7
c00183b4:	a3 98 67 02 c0       	mov    ds:0xc0026798,eax
c00183b9:	e8 b7 5c ff ff       	call   c000e075 <setupINTS()>
c00183be:	80 3d a0 5a 02 c0 00 	cmp    BYTE PTR ds:0xc0025aa0,0x0
c00183c5:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c00183ca:	75 07                	jne    c00183d3 <Hal::initialise()+0x41>
c00183cc:	80 a0 e8 01 00 00 fe 	and    BYTE PTR [eax+0x1e8],0xfe
c00183d3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00183d9:	83 e0 01             	and    eax,0x1
c00183dc:	a2 88 67 02 c0       	mov    ds:0xc0026788,al
c00183e1:	e8 9e 02 00 00       	call   c0018684 <picOpen()>
c00183e6:	80 3d 88 67 02 c0 00 	cmp    BYTE PTR ds:0xc0026788,0x0
c00183ed:	74 0a                	je     c00183f9 <Hal::initialise()+0x67>
c00183ef:	e8 e0 01 00 00       	call   c00185d4 <picDisable()>
c00183f4:	e8 a1 62 00 00       	call   c001e69a <apicOpen()>
c00183f9:	bb 0f 00 00 00       	mov    ebx,0xf
c00183fe:	50                   	push   eax
c00183ff:	6a 00                	push   0x0
c0018401:	68 50 81 01 c0       	push   0xc0018150
c0018406:	6a 00                	push   0x0
c0018408:	e8 43 5a ff ff       	call   c000de50 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001840d:	83 c4 0c             	add    esp,0xc
c0018410:	6a 00                	push   0x0
c0018412:	68 50 81 01 c0       	push   0xc0018150
c0018417:	6a 01                	push   0x1
c0018419:	e8 32 5a ff ff       	call   c000de50 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001841e:	83 c4 0c             	add    esp,0xc
c0018421:	6a 00                	push   0x0
c0018423:	68 ea 7c 01 c0       	push   0xc0017cea
c0018428:	6a 02                	push   0x2
c001842a:	e8 21 5a ff ff       	call   c000de50 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001842f:	83 c4 0c             	add    esp,0xc
c0018432:	6a 00                	push   0x0
c0018434:	68 50 81 01 c0       	push   0xc0018150
c0018439:	6a 03                	push   0x3
c001843b:	e8 10 5a ff ff       	call   c000de50 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018440:	83 c4 0c             	add    esp,0xc
c0018443:	6a 00                	push   0x0
c0018445:	68 50 81 01 c0       	push   0xc0018150
c001844a:	6a 04                	push   0x4
c001844c:	e8 ff 59 ff ff       	call   c000de50 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018451:	83 c4 0c             	add    esp,0xc
c0018454:	6a 00                	push   0x0
c0018456:	68 50 81 01 c0       	push   0xc0018150
c001845b:	6a 05                	push   0x5
c001845d:	e8 ee 59 ff ff       	call   c000de50 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018462:	83 c4 0c             	add    esp,0xc
c0018465:	6a 00                	push   0x0
c0018467:	68 84 81 01 c0       	push   0xc0018184
c001846c:	6a 06                	push   0x6
c001846e:	e8 dd 59 ff ff       	call   c000de50 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018473:	83 c4 0c             	add    esp,0xc
c0018476:	6a 00                	push   0x0
c0018478:	68 03 7d 01 c0       	push   0xc0017d03
c001847d:	6a 08                	push   0x8
c001847f:	e8 cc 59 ff ff       	call   c000de50 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018484:	83 c4 0c             	add    esp,0xc
c0018487:	6a 00                	push   0x0
c0018489:	68 50 81 01 c0       	push   0xc0018150
c001848e:	6a 09                	push   0x9
c0018490:	e8 bb 59 ff ff       	call   c000de50 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018495:	83 c4 0c             	add    esp,0xc
c0018498:	6a 00                	push   0x0
c001849a:	68 50 81 01 c0       	push   0xc0018150
c001849f:	6a 0a                	push   0xa
c00184a1:	e8 aa 59 ff ff       	call   c000de50 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00184a6:	83 c4 0c             	add    esp,0xc
c00184a9:	6a 00                	push   0x0
c00184ab:	68 50 81 01 c0       	push   0xc0018150
c00184b0:	6a 0b                	push   0xb
c00184b2:	e8 99 59 ff ff       	call   c000de50 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00184b7:	83 c4 0c             	add    esp,0xc
c00184ba:	6a 00                	push   0x0
c00184bc:	68 89 80 01 c0       	push   0xc0018089
c00184c1:	6a 0d                	push   0xd
c00184c3:	e8 88 59 ff ff       	call   c000de50 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00184c8:	83 c4 0c             	add    esp,0xc
c00184cb:	6a 00                	push   0x0
c00184cd:	68 ee 80 01 c0       	push   0xc00180ee
c00184d2:	6a 0e                	push   0xe
c00184d4:	e8 77 59 ff ff       	call   c000de50 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00184d9:	83 c4 10             	add    esp,0x10
c00184dc:	50                   	push   eax
c00184dd:	6a 00                	push   0x0
c00184df:	68 50 81 01 c0       	push   0xc0018150
c00184e4:	53                   	push   ebx
c00184e5:	43                   	inc    ebx
c00184e6:	e8 65 59 ff ff       	call   c000de50 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00184eb:	83 c4 10             	add    esp,0x10
c00184ee:	83 fb 1e             	cmp    ebx,0x1e
c00184f1:	75 e9                	jne    c00184dc <Hal::initialise()+0x14a>
c00184f3:	50                   	push   eax
c00184f4:	6a 00                	push   0x0
c00184f6:	68 b9 3c 01 c0       	push   0xc0013cb9
c00184fb:	6a 60                	push   0x60
c00184fd:	e8 4e 59 ff ff       	call   c000de50 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018502:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c0018507:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0018511:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018518:	e8 54 12 ff ff       	call   c0009771 <malloc>
c001851d:	89 04 24             	mov    DWORD PTR [esp],eax
c0018520:	89 c3                	mov    ebx,eax
c0018522:	e8 15 09 00 00       	call   c0018e3c <RTC::RTC()>
c0018527:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0018531:	5a                   	pop    edx
c0018532:	59                   	pop    ecx
c0018533:	53                   	push   ebx
c0018534:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c001853a:	e8 df 53 ff ff       	call   c000d91e <Device::addChild(Device*)>
c001853f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018541:	6a 00                	push   0x0
c0018543:	6a 00                	push   0x0
c0018545:	6a 00                	push   0x0
c0018547:	53                   	push   ebx
c0018548:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001854b:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c0018550:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018556:	83 c4 28             	add    esp,0x28
c0018559:	5b                   	pop    ebx
c001855a:	c3                   	ret    

c001855b <Hal::makeBeep(int)>:
c001855b:	53                   	push   ebx
c001855c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018560:	85 db                	test   ebx,ebx
c0018562:	75 07                	jne    c001856b <Hal::makeBeep(int)+0x10>
c0018564:	e4 61                	in     al,0x61
c0018566:	83 e0 fc             	and    eax,0xfffffffc
c0018569:	eb 26                	jmp    c0018591 <Hal::makeBeep(int)+0x36>
c001856b:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0018570:	99                   	cdq    
c0018571:	f7 fb                	idiv   ebx
c0018573:	89 c1                	mov    ecx,eax
c0018575:	b0 b6                	mov    al,0xb6
c0018577:	e6 43                	out    0x43,al
c0018579:	88 c8                	mov    al,cl
c001857b:	e6 42                	out    0x42,al
c001857d:	89 c8                	mov    eax,ecx
c001857f:	c1 e8 08             	shr    eax,0x8
c0018582:	e6 42                	out    0x42,al
c0018584:	e4 61                	in     al,0x61
c0018586:	88 c2                	mov    dl,al
c0018588:	83 ca 03             	or     edx,0x3
c001858b:	38 c2                	cmp    dl,al
c001858d:	74 04                	je     c0018593 <Hal::makeBeep(int)+0x38>
c001858f:	88 d0                	mov    al,dl
c0018591:	e6 61                	out    0x61,al
c0018593:	5b                   	pop    ebx
c0018594:	c3                   	ret    

c0018595 <Hal::getRand()>:
c0018595:	31 c0                	xor    eax,eax
c0018597:	c3                   	ret    

c0018598 <Hal::endOfInterrupt(int)>:
c0018598:	80 3d 88 67 02 c0 00 	cmp    BYTE PTR ds:0xc0026788,0x0
c001859f:	74 23                	je     c00185c4 <Hal::endOfInterrupt(int)+0x2c>
c00185a1:	83 ec 14             	sub    esp,0x14
c00185a4:	6a 1b                	push   0x1b
c00185a6:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c00185ac:	e8 91 07 ff ff       	call   c0008d42 <Computer::rdmsr(unsigned int)>
c00185b1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00185b6:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00185c0:	83 c4 1c             	add    esp,0x1c
c00185c3:	c3                   	ret    
c00185c4:	e9 3f 02 00 00       	jmp    c0018808 <picEOI(int)>
c00185c9:	66 90                	xchg   ax,ax
c00185cb:	90                   	nop

c00185cc <picIoWait()>:
c00185cc:	eb 00                	jmp    c00185ce <picIoWait()+0x2>
c00185ce:	eb 00                	jmp    c00185d0 <picIoWait()+0x4>
c00185d0:	90                   	nop
c00185d1:	c3                   	ret    
c00185d2:	66 90                	xchg   ax,ax

c00185d4 <picDisable()>:
c00185d4:	83 ec 10             	sub    esp,0x10
c00185d7:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00185de:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00185e3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00185e7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00185ec:	ee                   	out    dx,al
c00185ed:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00185f4:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00185f9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00185fd:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018602:	ee                   	out    dx,al
c0018603:	90                   	nop
c0018604:	83 c4 10             	add    esp,0x10
c0018607:	c3                   	ret    

c0018608 <picGetIRQReg(int)>:
c0018608:	83 ec 10             	sub    esp,0x10
c001860b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001860f:	0f b6 c0             	movzx  eax,al
c0018612:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018619:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001861d:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018621:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018626:	ee                   	out    dx,al
c0018627:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001862b:	0f b6 c0             	movzx  eax,al
c001862e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018635:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018639:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001863d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018642:	ee                   	out    dx,al
c0018643:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001864a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001864f:	89 c2                	mov    edx,eax
c0018651:	ec                   	in     al,dx
c0018652:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018656:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001865a:	0f b6 c0             	movzx  eax,al
c001865d:	c1 e0 08             	shl    eax,0x8
c0018660:	89 c1                	mov    ecx,eax
c0018662:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018669:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001866e:	89 c2                	mov    edx,eax
c0018670:	ec                   	in     al,dx
c0018671:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018675:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018679:	0f b6 c0             	movzx  eax,al
c001867c:	09 c8                	or     eax,ecx
c001867e:	83 c4 10             	add    esp,0x10
c0018681:	c3                   	ret    
c0018682:	66 90                	xchg   ax,ax

c0018684 <picOpen()>:
c0018684:	83 ec 50             	sub    esp,0x50
c0018687:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001868e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018693:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018697:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001869b:	ee                   	out    dx,al
c001869c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00186a3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00186a8:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00186ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00186b0:	ee                   	out    dx,al
c00186b1:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00186b9:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00186c1:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00186c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00186cc:	89 c2                	mov    edx,eax
c00186ce:	ec                   	in     al,dx
c00186cf:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00186d3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00186d7:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00186db:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00186e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00186e6:	89 c2                	mov    edx,eax
c00186e8:	ec                   	in     al,dx
c00186e9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00186ed:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00186f1:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00186f5:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00186fc:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018701:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018705:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018709:	ee                   	out    dx,al
c001870a:	e8 bd fe ff ff       	call   c00185cc <picIoWait()>
c001870f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018716:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001871b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001871f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018723:	ee                   	out    dx,al
c0018724:	e8 a3 fe ff ff       	call   c00185cc <picIoWait()>
c0018729:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001872d:	0f b6 c0             	movzx  eax,al
c0018730:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018737:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001873b:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001873f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018743:	ee                   	out    dx,al
c0018744:	e8 83 fe ff ff       	call   c00185cc <picIoWait()>
c0018749:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001874d:	0f b6 c0             	movzx  eax,al
c0018750:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018757:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001875b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001875f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018763:	ee                   	out    dx,al
c0018764:	e8 63 fe ff ff       	call   c00185cc <picIoWait()>
c0018769:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018770:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018775:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018779:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001877d:	ee                   	out    dx,al
c001877e:	e8 49 fe ff ff       	call   c00185cc <picIoWait()>
c0018783:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001878a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001878f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018793:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018797:	ee                   	out    dx,al
c0018798:	e8 2f fe ff ff       	call   c00185cc <picIoWait()>
c001879d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00187a4:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00187a9:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00187ad:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00187b1:	ee                   	out    dx,al
c00187b2:	e8 15 fe ff ff       	call   c00185cc <picIoWait()>
c00187b7:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00187be:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00187c3:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00187c7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00187cb:	ee                   	out    dx,al
c00187cc:	e8 fb fd ff ff       	call   c00185cc <picIoWait()>
c00187d1:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00187d6:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00187dd:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00187e1:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00187e5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00187e9:	ee                   	out    dx,al
c00187ea:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00187ef:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00187f6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00187fa:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00187fe:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018802:	ee                   	out    dx,al
c0018803:	90                   	nop
c0018804:	83 c4 50             	add    esp,0x50
c0018807:	c3                   	ret    

c0018808 <picEOI(int)>:
c0018808:	83 ec 10             	sub    esp,0x10
c001880b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018810:	75 1e                	jne    c0018830 <picEOI(int)+0x28>
c0018812:	6a 0b                	push   0xb
c0018814:	e8 ef fd ff ff       	call   c0018608 <picGetIRQReg(int)>
c0018819:	83 c4 04             	add    esp,0x4
c001881c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018821:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018826:	25 80 00 00 00       	and    eax,0x80
c001882b:	74 73                	je     c00188a0 <picEOI(int)+0x98>
c001882d:	8d 76 00             	lea    esi,[esi+0x0]
c0018830:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018835:	75 31                	jne    c0018868 <picEOI(int)+0x60>
c0018837:	6a 0b                	push   0xb
c0018839:	e8 ca fd ff ff       	call   c0018608 <picGetIRQReg(int)>
c001883e:	83 c4 04             	add    esp,0x4
c0018841:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018846:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001884a:	66 85 c0             	test   ax,ax
c001884d:	78 19                	js     c0018868 <picEOI(int)+0x60>
c001884f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018856:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001885b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001885f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018864:	ee                   	out    dx,al
c0018865:	eb 3d                	jmp    c00188a4 <picEOI(int)+0x9c>
c0018867:	90                   	nop
c0018868:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001886d:	7e 19                	jle    c0018888 <picEOI(int)+0x80>
c001886f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018876:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001887b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001887f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018884:	ee                   	out    dx,al
c0018885:	8d 76 00             	lea    esi,[esi+0x0]
c0018888:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001888f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018894:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018898:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001889d:	ee                   	out    dx,al
c001889e:	eb 04                	jmp    c00188a4 <picEOI(int)+0x9c>
c00188a0:	90                   	nop
c00188a1:	8d 76 00             	lea    esi,[esi+0x0]
c00188a4:	83 c4 10             	add    esp,0x10
c00188a7:	c3                   	ret    

c00188a8 <RTC::open(int, int, void*)>:
c00188a8:	31 c0                	xor    eax,eax
c00188aa:	c3                   	ret    
c00188ab:	90                   	nop

c00188ac <RTC::close(int, int, void*)>:
c00188ac:	31 c0                	xor    eax,eax
c00188ae:	c3                   	ret    
c00188af:	90                   	nop

c00188b0 <RTC::timeInSecondsUTC()>:
c00188b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188b4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00188ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00188c0:	c3                   	ret    
c00188c1:	90                   	nop

c00188c2 <RTC::timeInDatetimeUTC()>:
c00188c2:	53                   	push   ebx
c00188c3:	83 ec 14             	sub    esp,0x14
c00188c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00188ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00188d0:	50                   	push   eax
c00188d1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00188d4:	83 c4 0c             	add    esp,0xc
c00188d7:	52                   	push   edx
c00188d8:	50                   	push   eax
c00188d9:	53                   	push   ebx
c00188da:	e8 b3 4d ff ff       	call   c000d692 <secondsToDatetime(unsigned long long)>
c00188df:	89 d8                	mov    eax,ebx
c00188e1:	83 c4 14             	add    esp,0x14
c00188e4:	5b                   	pop    ebx
c00188e5:	c2 04 00             	ret    0x4

c00188e8 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00188e8:	56                   	push   esi
c00188e9:	53                   	push   ebx
c00188ea:	83 ec 14             	sub    esp,0x14
c00188ed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00188f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00188f3:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00188f6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00188fa:	52                   	push   edx
c00188fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018903:	50                   	push   eax
c0018904:	e8 89 4d ff ff       	call   c000d692 <secondsToDatetime(unsigned long long)>
c0018909:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001890d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018911:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018915:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018919:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001891d:	89 f0                	mov    eax,esi
c001891f:	83 c4 20             	add    esp,0x20
c0018922:	5b                   	pop    ebx
c0018923:	5e                   	pop    esi
c0018924:	ff e0                	jmp    eax

c0018926 <RTC::~RTC()>:
c0018926:	83 ec 0c             	sub    esp,0xc
c0018929:	ba e0 21 02 c0       	mov    edx,0xc00221e0
c001892e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018932:	89 10                	mov    DWORD PTR [eax],edx
c0018934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018938:	83 ec 0c             	sub    esp,0xc
c001893b:	50                   	push   eax
c001893c:	e8 db 4a ff ff       	call   c000d41c <Clock::~Clock()>
c0018941:	83 c4 10             	add    esp,0x10
c0018944:	90                   	nop
c0018945:	83 c4 0c             	add    esp,0xc
c0018948:	c3                   	ret    
c0018949:	90                   	nop

c001894a <RTC::~RTC()>:
c001894a:	83 ec 0c             	sub    esp,0xc
c001894d:	83 ec 0c             	sub    esp,0xc
c0018950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018954:	e8 cd ff ff ff       	call   c0018926 <RTC::~RTC()>
c0018959:	83 c4 10             	add    esp,0x10
c001895c:	83 ec 08             	sub    esp,0x8
c001895f:	68 60 01 00 00       	push   0x160
c0018964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018968:	e8 ad 3a ff ff       	call   c000c41a <operator delete(void*, unsigned long)>
c001896d:	83 c4 10             	add    esp,0x10
c0018970:	83 c4 0c             	add    esp,0xc
c0018973:	c3                   	ret    

c0018974 <RTC::get_update_in_progress_flag()>:
c0018974:	83 ec 14             	sub    esp,0x14
c0018977:	6a 0a                	push   0xa
c0018979:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c001897f:	e8 72 04 ff ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018984:	83 c4 1c             	add    esp,0x1c
c0018987:	c0 e8 07             	shr    al,0x7
c001898a:	c3                   	ret    
c001898b:	90                   	nop

c001898c <RTC::completeRTCRefresh()>:
c001898c:	55                   	push   ebp
c001898d:	57                   	push   edi
c001898e:	56                   	push   esi
c001898f:	53                   	push   ebx
c0018990:	83 ec 2c             	sub    esp,0x2c
c0018993:	8b 1d ac 57 02 c0    	mov    ebx,DWORD PTR ds:0xc00257ac
c0018999:	83 ec 0c             	sub    esp,0xc
c001899c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00189a0:	e8 cf ff ff ff       	call   c0018974 <RTC::get_update_in_progress_flag()>
c00189a5:	83 c4 10             	add    esp,0x10
c00189a8:	84 c0                	test   al,al
c00189aa:	74 0e                	je     c00189ba <RTC::completeRTCRefresh()+0x2e>
c00189ac:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00189b2:	3b 05 ac 57 02 c0    	cmp    eax,DWORD PTR ds:0xc00257ac
c00189b8:	73 df                	jae    c0018999 <RTC::completeRTCRefresh()+0xd>
c00189ba:	55                   	push   ebp
c00189bb:	55                   	push   ebp
c00189bc:	6a 00                	push   0x0
c00189be:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c00189c4:	e8 2d 04 ff ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c00189c9:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00189cd:	58                   	pop    eax
c00189ce:	5a                   	pop    edx
c00189cf:	6a 02                	push   0x2
c00189d1:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c00189d7:	e8 1a 04 ff ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c00189dc:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00189e0:	59                   	pop    ecx
c00189e1:	5b                   	pop    ebx
c00189e2:	6a 04                	push   0x4
c00189e4:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c00189ea:	e8 07 04 ff ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c00189ef:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00189f3:	5e                   	pop    esi
c00189f4:	5f                   	pop    edi
c00189f5:	6a 07                	push   0x7
c00189f7:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c00189fd:	e8 f4 03 ff ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018a02:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0018a06:	5d                   	pop    ebp
c0018a07:	58                   	pop    eax
c0018a08:	6a 08                	push   0x8
c0018a0a:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c0018a10:	e8 e1 03 ff ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018a15:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0018a19:	58                   	pop    eax
c0018a1a:	5a                   	pop    edx
c0018a1b:	6a 09                	push   0x9
c0018a1d:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c0018a23:	e8 ce 03 ff ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018a28:	83 c4 10             	add    esp,0x10
c0018a2b:	0f b6 e8             	movzx  ebp,al
c0018a2e:	8b 1d ac 57 02 c0    	mov    ebx,DWORD PTR ds:0xc00257ac
c0018a34:	83 ec 0c             	sub    esp,0xc
c0018a37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018a3b:	e8 34 ff ff ff       	call   c0018974 <RTC::get_update_in_progress_flag()>
c0018a40:	83 c4 10             	add    esp,0x10
c0018a43:	84 c0                	test   al,al
c0018a45:	74 0e                	je     c0018a55 <RTC::completeRTCRefresh()+0xc9>
c0018a47:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018a4d:	3b 05 ac 57 02 c0    	cmp    eax,DWORD PTR ds:0xc00257ac
c0018a53:	73 df                	jae    c0018a34 <RTC::completeRTCRefresh()+0xa8>
c0018a55:	50                   	push   eax
c0018a56:	50                   	push   eax
c0018a57:	6a 00                	push   0x0
c0018a59:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c0018a5f:	e8 92 03 ff ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018a64:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0018a68:	58                   	pop    eax
c0018a69:	5a                   	pop    edx
c0018a6a:	6a 02                	push   0x2
c0018a6c:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c0018a72:	e8 7f 03 ff ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018a77:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018a7b:	59                   	pop    ecx
c0018a7c:	5b                   	pop    ebx
c0018a7d:	6a 04                	push   0x4
c0018a7f:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c0018a85:	e8 6c 03 ff ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018a8a:	5e                   	pop    esi
c0018a8b:	88 c3                	mov    bl,al
c0018a8d:	5f                   	pop    edi
c0018a8e:	6a 07                	push   0x7
c0018a90:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c0018a96:	e8 5b 03 ff ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018a9b:	89 c6                	mov    esi,eax
c0018a9d:	58                   	pop    eax
c0018a9e:	5a                   	pop    edx
c0018a9f:	6a 08                	push   0x8
c0018aa1:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c0018aa7:	e8 4a 03 ff ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018aac:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018ab0:	59                   	pop    ecx
c0018ab1:	5f                   	pop    edi
c0018ab2:	6a 09                	push   0x9
c0018ab4:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c0018aba:	e8 37 03 ff ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018abf:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018ac3:	0f b6 f8             	movzx  edi,al
c0018ac6:	83 c4 10             	add    esp,0x10
c0018ac9:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0018acd:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018ad1:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0018ad5:	89 f1                	mov    ecx,esi
c0018ad7:	0f 94 c0             	sete   al
c0018ada:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0018ade:	0f 94 c2             	sete   dl
c0018ae1:	21 d0                	and    eax,edx
c0018ae3:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0018ae7:	0f 94 c2             	sete   dl
c0018aea:	21 c2                	and    edx,eax
c0018aec:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0018af0:	0f 94 c0             	sete   al
c0018af3:	21 d0                	and    eax,edx
c0018af5:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0018af9:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0018afd:	0f 94 c1             	sete   cl
c0018b00:	84 c8                	test   al,cl
c0018b02:	75 29                	jne    c0018b2d <RTC::completeRTCRefresh()+0x1a1>
c0018b04:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018b08:	89 fd                	mov    ebp,edi
c0018b0a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0018b0e:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0018b12:	89 f0                	mov    eax,esi
c0018b14:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0018b18:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018b1c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018b20:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0018b24:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018b28:	e9 01 ff ff ff       	jmp    c0018a2e <RTC::completeRTCRefresh()+0xa2>
c0018b2d:	39 fd                	cmp    ebp,edi
c0018b2f:	75 d3                	jne    c0018b04 <RTC::completeRTCRefresh()+0x178>
c0018b31:	55                   	push   ebp
c0018b32:	55                   	push   ebp
c0018b33:	6a 0b                	push   0xb
c0018b35:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c0018b3b:	e8 b6 02 ff ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018b40:	83 c4 10             	add    esp,0x10
c0018b43:	89 c5                	mov    ebp,eax
c0018b45:	a8 04                	test   al,0x4
c0018b47:	75 78                	jne    c0018bc1 <RTC::completeRTCRefresh()+0x235>
c0018b49:	b1 0a                	mov    cl,0xa
c0018b4b:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0018b4f:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0018b53:	83 e2 0f             	and    edx,0xf
c0018b56:	c0 e8 04             	shr    al,0x4
c0018b59:	c1 ef 04             	shr    edi,0x4
c0018b5c:	f6 e1                	mul    cl
c0018b5e:	6b ff 0a             	imul   edi,edi,0xa
c0018b61:	01 d0                	add    eax,edx
c0018b63:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018b67:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0018b6b:	83 e2 0f             	and    edx,0xf
c0018b6e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018b72:	c0 e8 04             	shr    al,0x4
c0018b75:	f6 e1                	mul    cl
c0018b77:	01 d0                	add    eax,edx
c0018b79:	88 da                	mov    dl,bl
c0018b7b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b7f:	83 e2 0f             	and    edx,0xf
c0018b82:	88 d8                	mov    al,bl
c0018b84:	83 e3 80             	and    ebx,0xffffff80
c0018b87:	c0 e8 04             	shr    al,0x4
c0018b8a:	83 e0 07             	and    eax,0x7
c0018b8d:	f6 e1                	mul    cl
c0018b8f:	01 d0                	add    eax,edx
c0018b91:	89 f2                	mov    edx,esi
c0018b93:	09 c3                	or     ebx,eax
c0018b95:	83 e2 0f             	and    edx,0xf
c0018b98:	89 f0                	mov    eax,esi
c0018b9a:	c0 e8 04             	shr    al,0x4
c0018b9d:	f6 e1                	mul    cl
c0018b9f:	8d 34 02             	lea    esi,[edx+eax*1]
c0018ba2:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0018ba6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018baa:	83 e2 0f             	and    edx,0xf
c0018bad:	c0 e8 04             	shr    al,0x4
c0018bb0:	f6 e1                	mul    cl
c0018bb2:	01 d0                	add    eax,edx
c0018bb4:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0018bb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018bbc:	83 e0 0f             	and    eax,0xf
c0018bbf:	01 c7                	add    edi,eax
c0018bc1:	83 e5 02             	and    ebp,0x2
c0018bc4:	75 14                	jne    c0018bda <RTC::completeRTCRefresh()+0x24e>
c0018bc6:	84 db                	test   bl,bl
c0018bc8:	79 10                	jns    c0018bda <RTC::completeRTCRefresh()+0x24e>
c0018bca:	83 e3 7f             	and    ebx,0x7f
c0018bcd:	b9 18 00 00 00       	mov    ecx,0x18
c0018bd2:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018bd5:	99                   	cdq    
c0018bd6:	f7 f9                	idiv   ecx
c0018bd8:	88 d3                	mov    bl,dl
c0018bda:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0018be0:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0018be6:	77 06                	ja     c0018bee <RTC::completeRTCRefresh()+0x262>
c0018be8:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0018bee:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0018bf3:	31 d2                	xor    edx,edx
c0018bf5:	c1 e1 10             	shl    ecx,0x10
c0018bf8:	89 d7                	mov    edi,edx
c0018bfa:	c1 e5 10             	shl    ebp,0x10
c0018bfd:	31 c0                	xor    eax,eax
c0018bff:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0018c05:	09 cf                	or     edi,ecx
c0018c07:	89 fa                	mov    edx,edi
c0018c09:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0018c0d:	88 da                	mov    dl,bl
c0018c0f:	89 f3                	mov    ebx,esi
c0018c11:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0018c15:	88 d8                	mov    al,bl
c0018c17:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0018c1b:	0f b7 c8             	movzx  ecx,ax
c0018c1e:	09 e9                	or     ecx,ebp
c0018c20:	89 c8                	mov    eax,ecx
c0018c22:	51                   	push   ecx
c0018c23:	51                   	push   ecx
c0018c24:	52                   	push   edx
c0018c25:	50                   	push   eax
c0018c26:	e8 e0 48 ff ff       	call   c000d50b <datetimeToSeconds(datetime_t)>
c0018c2b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0018c2f:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018c35:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018c3b:	83 c4 3c             	add    esp,0x3c
c0018c3e:	5b                   	pop    ebx
c0018c3f:	5e                   	pop    esi
c0018c40:	5f                   	pop    edi
c0018c41:	5d                   	pop    ebp
c0018c42:	c3                   	ret    
c0018c43:	90                   	nop

c0018c44 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018c44:	55                   	push   ebp
c0018c45:	57                   	push   edi
c0018c46:	56                   	push   esi
c0018c47:	53                   	push   ebx
c0018c48:	83 ec 30             	sub    esp,0x30
c0018c4b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018c4f:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018c53:	6a 00                	push   0x0
c0018c55:	6a 00                	push   0x0
c0018c57:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c0018c5d:	e8 a6 02 ff ff       	call   c0008f08 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c62:	83 c4 0c             	add    esp,0xc
c0018c65:	6a 00                	push   0x0
c0018c67:	6a 02                	push   0x2
c0018c69:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c0018c6f:	e8 94 02 ff ff       	call   c0008f08 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c74:	31 d2                	xor    edx,edx
c0018c76:	89 f9                	mov    ecx,edi
c0018c78:	89 f8                	mov    eax,edi
c0018c7a:	c1 e9 10             	shr    ecx,0x10
c0018c7d:	0f b6 c4             	movzx  eax,ah
c0018c80:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0018c84:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018c88:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018c8c:	b9 64 00 00 00       	mov    ecx,0x64
c0018c91:	89 f0                	mov    eax,esi
c0018c93:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018c97:	89 f0                	mov    eax,esi
c0018c99:	0f b6 c4             	movzx  eax,ah
c0018c9c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018ca0:	89 f0                	mov    eax,esi
c0018ca2:	c1 e8 10             	shr    eax,0x10
c0018ca5:	66 f7 f1             	div    cx
c0018ca8:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0018cad:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0018cb2:	59                   	pop    ecx
c0018cb3:	5b                   	pop    ebx
c0018cb4:	89 fb                	mov    ebx,edi
c0018cb6:	6a 0b                	push   0xb
c0018cb8:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c0018cbe:	e8 33 01 ff ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018cc3:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0018cc7:	83 c4 10             	add    esp,0x10
c0018cca:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0018ccf:	75 74                	jne    c0018d45 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0018cd1:	b2 0a                	mov    dl,0xa
c0018cd3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018cd7:	0f b6 c1             	movzx  eax,cl
c0018cda:	f6 f2                	div    dl
c0018cdc:	88 c3                	mov    bl,al
c0018cde:	88 e0                	mov    al,ah
c0018ce0:	c1 e3 04             	shl    ebx,0x4
c0018ce3:	09 c3                	or     ebx,eax
c0018ce5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018cea:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0018cee:	f6 f2                	div    dl
c0018cf0:	88 c1                	mov    cl,al
c0018cf2:	88 e0                	mov    al,ah
c0018cf4:	c1 e1 04             	shl    ecx,0x4
c0018cf7:	09 c1                	or     ecx,eax
c0018cf9:	89 f8                	mov    eax,edi
c0018cfb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018cff:	0f b6 c0             	movzx  eax,al
c0018d02:	f6 f2                	div    dl
c0018d04:	88 c3                	mov    bl,al
c0018d06:	88 e0                	mov    al,ah
c0018d08:	c1 e3 04             	shl    ebx,0x4
c0018d0b:	09 c3                	or     ebx,eax
c0018d0d:	89 f0                	mov    eax,esi
c0018d0f:	0f b6 c0             	movzx  eax,al
c0018d12:	f6 f2                	div    dl
c0018d14:	88 c1                	mov    cl,al
c0018d16:	88 e0                	mov    al,ah
c0018d18:	c1 e1 04             	shl    ecx,0x4
c0018d1b:	09 c1                	or     ecx,eax
c0018d1d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0018d22:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0018d26:	f6 f2                	div    dl
c0018d28:	88 c1                	mov    cl,al
c0018d2a:	88 e0                	mov    al,ah
c0018d2c:	c1 e1 04             	shl    ecx,0x4
c0018d2f:	09 c1                	or     ecx,eax
c0018d31:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0018d36:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018d3a:	f6 f2                	div    dl
c0018d3c:	89 c5                	mov    ebp,eax
c0018d3e:	88 e0                	mov    al,ah
c0018d40:	c1 e5 04             	shl    ebp,0x4
c0018d43:	09 c5                	or     ebp,eax
c0018d45:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0018d4a:	75 17                	jne    c0018d63 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0018d4c:	80 fb 0b             	cmp    bl,0xb
c0018d4f:	76 0c                	jbe    c0018d5d <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0018d51:	80 eb 0c             	sub    bl,0xc
c0018d54:	75 02                	jne    c0018d58 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018d56:	b3 0c                	mov    bl,0xc
c0018d58:	83 cb 80             	or     ebx,0xffffff80
c0018d5b:	eb 06                	jmp    c0018d63 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0018d5d:	84 db                	test   bl,bl
c0018d5f:	75 02                	jne    c0018d63 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0018d61:	b3 0c                	mov    bl,0xc
c0018d63:	0f b6 db             	movzx  ebx,bl
c0018d66:	50                   	push   eax
c0018d67:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0018d6c:	50                   	push   eax
c0018d6d:	6a 00                	push   0x0
c0018d6f:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c0018d75:	e8 8e 01 ff ff       	call   c0008f08 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018d7a:	83 c4 0c             	add    esp,0xc
c0018d7d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0018d82:	50                   	push   eax
c0018d83:	6a 02                	push   0x2
c0018d85:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c0018d8b:	e8 78 01 ff ff       	call   c0008f08 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018d90:	83 c4 0c             	add    esp,0xc
c0018d93:	53                   	push   ebx
c0018d94:	6a 04                	push   0x4
c0018d96:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c0018d9c:	e8 67 01 ff ff       	call   c0008f08 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018da1:	83 c4 0c             	add    esp,0xc
c0018da4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018da9:	50                   	push   eax
c0018daa:	6a 07                	push   0x7
c0018dac:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c0018db2:	e8 51 01 ff ff       	call   c0008f08 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018db7:	83 c4 0c             	add    esp,0xc
c0018dba:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0018dbf:	50                   	push   eax
c0018dc0:	6a 08                	push   0x8
c0018dc2:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c0018dc8:	e8 3b 01 ff ff       	call   c0008f08 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018dcd:	83 c4 0c             	add    esp,0xc
c0018dd0:	89 e8                	mov    eax,ebp
c0018dd2:	0f b6 e8             	movzx  ebp,al
c0018dd5:	55                   	push   ebp
c0018dd6:	6a 09                	push   0x9
c0018dd8:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c0018dde:	e8 25 01 ff ff       	call   c0008f08 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018de3:	5a                   	pop    edx
c0018de4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018de8:	e8 9f fb ff ff       	call   c001898c <RTC::completeRTCRefresh()>
c0018ded:	83 c4 3c             	add    esp,0x3c
c0018df0:	b0 01                	mov    al,0x1
c0018df2:	5b                   	pop    ebx
c0018df3:	5e                   	pop    esi
c0018df4:	5f                   	pop    edi
c0018df5:	5d                   	pop    ebp
c0018df6:	c3                   	ret    

c0018df7 <rtcIRQHandler(regs*, void*)>:
c0018df7:	53                   	push   ebx
c0018df8:	83 ec 10             	sub    esp,0x10
c0018dfb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018dff:	6a 0c                	push   0xc
c0018e01:	ff 35 c8 31 02 c0    	push   DWORD PTR ds:0xc00231c8
c0018e07:	e8 ea ff fe ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018e0c:	83 c4 10             	add    esp,0x10
c0018e0f:	84 c0                	test   al,al
c0018e11:	79 24                	jns    c0018e37 <rtcIRQHandler(regs*, void*)+0x40>
c0018e13:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018e1a:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018e21:	66 ff 05 a0 67 02 c0 	inc    WORD PTR ds:0xc00267a0
c0018e28:	75 0d                	jne    c0018e37 <rtcIRQHandler(regs*, void*)+0x40>
c0018e2a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018e2e:	83 c4 08             	add    esp,0x8
c0018e31:	5b                   	pop    ebx
c0018e32:	e9 55 fb ff ff       	jmp    c001898c <RTC::completeRTCRefresh()>
c0018e37:	83 c4 08             	add    esp,0x8
c0018e3a:	5b                   	pop    ebx
c0018e3b:	c3                   	ret    

c0018e3c <RTC::RTC()>:
c0018e3c:	83 ec 1c             	sub    esp,0x1c
c0018e3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e43:	83 ec 08             	sub    esp,0x8
c0018e46:	68 c3 21 02 c0       	push   0xc00221c3
c0018e4b:	50                   	push   eax
c0018e4c:	e8 95 45 ff ff       	call   c000d3e6 <Clock::Clock(char const*)>
c0018e51:	83 c4 10             	add    esp,0x10
c0018e54:	ba e0 21 02 c0       	mov    edx,0xc00221e0
c0018e59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e5d:	89 10                	mov    DWORD PTR [eax],edx
c0018e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e63:	83 ec 0c             	sub    esp,0xc
c0018e66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018e6a:	6a 01                	push   0x1
c0018e6c:	68 f7 8d 01 c0       	push   0xc0018df7
c0018e71:	6a 08                	push   0x8
c0018e73:	50                   	push   eax
c0018e74:	e8 51 4a ff ff       	call   c000d8ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018e79:	83 c4 20             	add    esp,0x20
c0018e7c:	89 c2                	mov    edx,eax
c0018e7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e82:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018e88:	fa                   	cli    
c0018e89:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c0018e8e:	40                   	inc    eax
c0018e8f:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c0018e94:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c0018e99:	83 ec 08             	sub    esp,0x8
c0018e9c:	6a 0b                	push   0xb
c0018e9e:	50                   	push   eax
c0018e9f:	e8 52 ff fe ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018ea4:	83 c4 10             	add    esp,0x10
c0018ea7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018eab:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c0018eb0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018eb4:	83 ca 10             	or     edx,0x10
c0018eb7:	0f b6 d2             	movzx  edx,dl
c0018eba:	83 ec 04             	sub    esp,0x4
c0018ebd:	52                   	push   edx
c0018ebe:	6a 0b                	push   0xb
c0018ec0:	50                   	push   eax
c0018ec1:	e8 42 00 ff ff       	call   c0008f08 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018ec6:	83 c4 10             	add    esp,0x10
c0018ec9:	83 ec 0c             	sub    esp,0xc
c0018ecc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018ed0:	e8 b7 fa ff ff       	call   c001898c <RTC::completeRTCRefresh()>
c0018ed5:	83 c4 10             	add    esp,0x10
c0018ed8:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c0018edd:	48                   	dec    eax
c0018ede:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c0018ee3:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c0018ee8:	85 c0                	test   eax,eax
c0018eea:	75 01                	jne    c0018eed <RTC::RTC()+0xb1>
c0018eec:	fb                   	sti    
c0018eed:	90                   	nop
c0018eee:	83 c4 1c             	add    esp,0x1c
c0018ef1:	c3                   	ret    
c0018ef2:	66 90                	xchg   ax,ax

c0018ef4 <Hal::consoleScroll(int, int)>:
c0018ef4:	83 ec 10             	sub    esp,0x10
c0018ef7:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018eff:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018f07:	90                   	nop
c0018f08:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018f0d:	0f 8f e1 00 00 00    	jg     c0018ff4 <Hal::consoleScroll(int, int)+0x100>
c0018f13:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018f1b:	90                   	nop
c0018f1c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018f24:	0f 8f be 00 00 00    	jg     c0018fe8 <Hal::consoleScroll(int, int)+0xf4>
c0018f2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018f2e:	89 d0                	mov    eax,edx
c0018f30:	c1 e0 02             	shl    eax,0x2
c0018f33:	01 d0                	add    eax,edx
c0018f35:	c1 e0 05             	shl    eax,0x5
c0018f38:	89 c2                	mov    edx,eax
c0018f3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f3e:	01 d0                	add    eax,edx
c0018f40:	89 c2                	mov    edx,eax
c0018f42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f46:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018f49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018f4d:	89 d0                	mov    eax,edx
c0018f4f:	c1 e0 02             	shl    eax,0x2
c0018f52:	01 d0                	add    eax,edx
c0018f54:	c1 e0 05             	shl    eax,0x5
c0018f57:	89 c2                	mov    edx,eax
c0018f59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f5d:	01 d0                	add    eax,edx
c0018f5f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f69:	01 c2                	add    edx,eax
c0018f6b:	8a 01                	mov    al,BYTE PTR [ecx]
c0018f6d:	88 02                	mov    BYTE PTR [edx],al
c0018f6f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018f74:	75 66                	jne    c0018fdc <Hal::consoleScroll(int, int)+0xe8>
c0018f76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f7a:	83 e0 01             	and    eax,0x1
c0018f7d:	74 39                	je     c0018fb8 <Hal::consoleScroll(int, int)+0xc4>
c0018f7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f83:	83 e0 0f             	and    eax,0xf
c0018f86:	88 c2                	mov    dl,al
c0018f88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018f8c:	c1 e0 04             	shl    eax,0x4
c0018f8f:	88 d1                	mov    cl,dl
c0018f91:	09 c1                	or     ecx,eax
c0018f93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018f97:	89 d0                	mov    eax,edx
c0018f99:	c1 e0 02             	shl    eax,0x2
c0018f9c:	01 d0                	add    eax,edx
c0018f9e:	c1 e0 05             	shl    eax,0x5
c0018fa1:	89 c2                	mov    edx,eax
c0018fa3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018fa7:	01 d0                	add    eax,edx
c0018fa9:	89 c2                	mov    edx,eax
c0018fab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018faf:	01 d0                	add    eax,edx
c0018fb1:	88 ca                	mov    dl,cl
c0018fb3:	88 10                	mov    BYTE PTR [eax],dl
c0018fb5:	eb 25                	jmp    c0018fdc <Hal::consoleScroll(int, int)+0xe8>
c0018fb7:	90                   	nop
c0018fb8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018fbc:	89 d0                	mov    eax,edx
c0018fbe:	c1 e0 02             	shl    eax,0x2
c0018fc1:	01 d0                	add    eax,edx
c0018fc3:	c1 e0 05             	shl    eax,0x5
c0018fc6:	89 c2                	mov    edx,eax
c0018fc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018fcc:	01 d0                	add    eax,edx
c0018fce:	89 c2                	mov    edx,eax
c0018fd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018fd4:	01 d0                	add    eax,edx
c0018fd6:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018fd9:	8d 76 00             	lea    esi,[esi+0x0]
c0018fdc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0018fe0:	e9 37 ff ff ff       	jmp    c0018f1c <Hal::consoleScroll(int, int)+0x28>
c0018fe5:	8d 76 00             	lea    esi,[esi+0x0]
c0018fe8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0018fec:	e9 17 ff ff ff       	jmp    c0018f08 <Hal::consoleScroll(int, int)+0x14>
c0018ff1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ff4:	90                   	nop
c0018ff5:	83 c4 10             	add    esp,0x10
c0018ff8:	c3                   	ret    
c0018ff9:	8d 76 00             	lea    esi,[esi+0x0]

c0018ffc <Hal::consoleWriteCharacter(char, int, int, int, int)>:
c0018ffc:	83 ec 14             	sub    esp,0x14
c0018fff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019003:	88 04 24             	mov    BYTE PTR [esp],al
c0019006:	8a 04 24             	mov    al,BYTE PTR [esp]
c0019009:	0f b6 c0             	movzx  eax,al
c001900c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019010:	89 d1                	mov    ecx,edx
c0019012:	83 e1 0f             	and    ecx,0xf
c0019015:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019019:	c1 e2 04             	shl    edx,0x4
c001901c:	0f b6 d2             	movzx  edx,dl
c001901f:	09 ca                	or     edx,ecx
c0019021:	c1 e2 08             	shl    edx,0x8
c0019024:	09 d0                	or     eax,edx
c0019026:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001902b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0019033:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019037:	89 d0                	mov    eax,edx
c0019039:	c1 e0 02             	shl    eax,0x2
c001903c:	01 d0                	add    eax,edx
c001903e:	c1 e0 04             	shl    eax,0x4
c0019041:	89 c2                	mov    edx,eax
c0019043:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019047:	01 d0                	add    eax,edx
c0019049:	01 c0                	add    eax,eax
c001904b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001904f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019053:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0019058:	66 89 02             	mov    WORD PTR [edx],ax
c001905b:	90                   	nop
c001905c:	83 c4 14             	add    esp,0x14
c001905f:	c3                   	ret    

c0019060 <Hal::consoleCursorUpdate(int, int)>:
c0019060:	83 ec 20             	sub    esp,0x20
c0019063:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019067:	89 c2                	mov    edx,eax
c0019069:	89 d0                	mov    eax,edx
c001906b:	c1 e0 02             	shl    eax,0x2
c001906e:	01 d0                	add    eax,edx
c0019070:	c1 e0 04             	shl    eax,0x4
c0019073:	89 c2                	mov    edx,eax
c0019075:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019079:	01 d0                	add    eax,edx
c001907b:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0019080:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0019087:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001908c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019090:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019094:	ee                   	out    dx,al
c0019095:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001909a:	0f b6 c0             	movzx  eax,al
c001909d:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00190a4:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00190a8:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00190ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00190b0:	ee                   	out    dx,al
c00190b1:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00190b8:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00190bd:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00190c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00190c5:	ee                   	out    dx,al
c00190c6:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00190cb:	66 c1 e8 08          	shr    ax,0x8
c00190cf:	0f b6 c0             	movzx  eax,al
c00190d2:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00190d9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00190dd:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00190e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00190e5:	ee                   	out    dx,al
c00190e6:	90                   	nop
c00190e7:	83 c4 20             	add    esp,0x20
c00190ea:	c3                   	ret    
c00190eb:	90                   	nop

c00190ec <FAT::getName()>:
c00190ec:	b8 14 22 02 c0       	mov    eax,0xc0022214
c00190f1:	c3                   	ret    
c00190f2:	66 90                	xchg   ax,ax

c00190f4 <FAT::tell(void*, unsigned long long*)>:
c00190f4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00190f9:	75 09                	jne    c0019104 <FAT::tell(void*, unsigned long long*)+0x10>
c00190fb:	b8 04 00 00 00       	mov    eax,0x4
c0019100:	c3                   	ret    
c0019101:	8d 76 00             	lea    esi,[esi+0x0]
c0019104:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019109:	75 09                	jne    c0019114 <FAT::tell(void*, unsigned long long*)+0x20>
c001910b:	b8 04 00 00 00       	mov    eax,0x4
c0019110:	c3                   	ret    
c0019111:	8d 76 00             	lea    esi,[esi+0x0]
c0019114:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019118:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001911b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001911e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019122:	89 01                	mov    DWORD PTR [ecx],eax
c0019124:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019127:	b8 00 00 00 00       	mov    eax,0x0
c001912c:	c3                   	ret    
c001912d:	90                   	nop
c001912e:	66 90                	xchg   ax,ax

c0019130 <FAT::stat(void*, unsigned long long*)>:
c0019130:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019135:	75 09                	jne    c0019140 <FAT::stat(void*, unsigned long long*)+0x10>
c0019137:	b8 04 00 00 00       	mov    eax,0x4
c001913c:	c3                   	ret    
c001913d:	8d 76 00             	lea    esi,[esi+0x0]
c0019140:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019145:	75 09                	jne    c0019150 <FAT::stat(void*, unsigned long long*)+0x20>
c0019147:	b8 04 00 00 00       	mov    eax,0x4
c001914c:	c3                   	ret    
c001914d:	8d 76 00             	lea    esi,[esi+0x0]
c0019150:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019154:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019157:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001915a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001915e:	89 01                	mov    DWORD PTR [ecx],eax
c0019160:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019163:	b8 00 00 00 00       	mov    eax,0x0
c0019168:	c3                   	ret    
c0019169:	90                   	nop
c001916a:	66 90                	xchg   ax,ax

c001916c <FAT::~FAT()>:
c001916c:	83 ec 0c             	sub    esp,0xc
c001916f:	ba 60 22 02 c0       	mov    edx,0xc0022260
c0019174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019178:	89 10                	mov    DWORD PTR [eax],edx
c001917a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001917e:	83 ec 0c             	sub    esp,0xc
c0019181:	50                   	push   eax
c0019182:	e8 af 36 ff ff       	call   c000c836 <Filesystem::~Filesystem()>
c0019187:	83 c4 10             	add    esp,0x10
c001918a:	90                   	nop
c001918b:	83 c4 0c             	add    esp,0xc
c001918e:	c3                   	ret    
c001918f:	90                   	nop

c0019190 <FAT::~FAT()>:
c0019190:	83 ec 0c             	sub    esp,0xc
c0019193:	83 ec 0c             	sub    esp,0xc
c0019196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001919a:	e8 cd ff ff ff       	call   c001916c <FAT::~FAT()>
c001919f:	83 c4 10             	add    esp,0x10
c00191a2:	83 ec 08             	sub    esp,0x8
c00191a5:	6a 08                	push   0x8
c00191a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00191ab:	e8 6a 32 ff ff       	call   c000c41a <operator delete(void*, unsigned long)>
c00191b0:	83 c4 10             	add    esp,0x10
c00191b3:	83 c4 0c             	add    esp,0xc
c00191b6:	c3                   	ret    
c00191b7:	90                   	nop

c00191b8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00191b8:	83 ec 1c             	sub    esp,0x1c
c00191bb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00191c2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00191c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00191cb:	8b 04 85 e0 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9820]
c00191d2:	83 f8 ff             	cmp    eax,0xffffffff
c00191d5:	75 35                	jne    c001920c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00191d7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00191db:	88 c2                	mov    dl,al
c00191dd:	a1 c0 67 02 c0       	mov    eax,ds:0xc00267c0
c00191e2:	01 d0                	add    eax,edx
c00191e4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00191e8:	8b 15 c0 67 02 c0    	mov    edx,DWORD PTR ds:0xc00267c0
c00191ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00191f2:	89 14 85 e0 67 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9820],edx
c00191f9:	a1 c0 67 02 c0       	mov    eax,ds:0xc00267c0
c00191fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019202:	89 14 85 60 68 02 c0 	mov    DWORD PTR [eax*4-0x3ffd97a0],edx
c0019209:	eb 19                	jmp    c0019224 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001920b:	90                   	nop
c001920c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019210:	88 c2                	mov    dl,al
c0019212:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019216:	8b 04 85 e0 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9820]
c001921d:	01 d0                	add    eax,edx
c001921f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019223:	90                   	nop
c0019224:	83 ec 04             	sub    esp,0x4
c0019227:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001922b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001922f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019233:	50                   	push   eax
c0019234:	e8 1d d8 fe ff       	call   c0006a56 <f_getlabel>
c0019239:	83 c4 10             	add    esp,0x10
c001923c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019240:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019245:	75 09                	jne    c0019250 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019247:	b8 00 00 00 00       	mov    eax,0x0
c001924c:	eb 0a                	jmp    c0019258 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001924e:	66 90                	xchg   ax,ax
c0019250:	b8 01 00 00 00       	mov    eax,0x1
c0019255:	8d 76 00             	lea    esi,[esi+0x0]
c0019258:	83 c4 1c             	add    esp,0x1c
c001925b:	c3                   	ret    

c001925c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001925c:	57                   	push   edi
c001925d:	83 ec 58             	sub    esp,0x58
c0019260:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019268:	8d 54 24 10          	lea    edx,[esp+0x10]
c001926c:	b9 0f 00 00 00       	mov    ecx,0xf
c0019271:	b8 00 00 00 00       	mov    eax,0x0
c0019276:	fc                   	cld    
c0019277:	89 d7                	mov    edi,edx
c0019279:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001927b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001927f:	8b 04 85 e0 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9820]
c0019286:	83 f8 ff             	cmp    eax,0xffffffff
c0019289:	75 35                	jne    c00192c0 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001928b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001928f:	88 c2                	mov    dl,al
c0019291:	a1 c0 67 02 c0       	mov    eax,ds:0xc00267c0
c0019296:	01 d0                	add    eax,edx
c0019298:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001929c:	8b 15 c0 67 02 c0    	mov    edx,DWORD PTR ds:0xc00267c0
c00192a2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00192a6:	89 14 85 e0 67 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9820],edx
c00192ad:	a1 c0 67 02 c0       	mov    eax,ds:0xc00267c0
c00192b2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00192b6:	89 14 85 60 68 02 c0 	mov    DWORD PTR [eax*4-0x3ffd97a0],edx
c00192bd:	eb 19                	jmp    c00192d8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00192bf:	90                   	nop
c00192c0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00192c4:	88 c2                	mov    dl,al
c00192c6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00192ca:	8b 04 85 e0 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9820]
c00192d1:	01 d0                	add    eax,edx
c00192d3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00192d7:	90                   	nop
c00192d8:	83 ec 08             	sub    esp,0x8
c00192db:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00192df:	8d 44 24 18          	lea    eax,[esp+0x18]
c00192e3:	50                   	push   eax
c00192e4:	e8 bb 73 fe ff       	call   c00006a4 <strcat>
c00192e9:	83 c4 10             	add    esp,0x10
c00192ec:	83 ec 0c             	sub    esp,0xc
c00192ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c00192f3:	50                   	push   eax
c00192f4:	e8 4b d9 fe ff       	call   c0006c44 <f_setlabel>
c00192f9:	83 c4 10             	add    esp,0x10
c00192fc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019300:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019305:	75 09                	jne    c0019310 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0019307:	b8 00 00 00 00       	mov    eax,0x0
c001930c:	eb 0a                	jmp    c0019318 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001930e:	66 90                	xchg   ax,ax
c0019310:	b8 01 00 00 00       	mov    eax,0x1
c0019315:	8d 76 00             	lea    esi,[esi+0x0]
c0019318:	83 c4 58             	add    esp,0x58
c001931b:	5f                   	pop    edi
c001931c:	c3                   	ret    
c001931d:	90                   	nop
c001931e:	66 90                	xchg   ax,ax

c0019320 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019320:	83 ec 2c             	sub    esp,0x2c
c0019323:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001932b:	83 ec 08             	sub    esp,0x8
c001932e:	68 38 22 02 c0       	push   0xc0022238
c0019333:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019337:	e8 b4 72 fe ff       	call   c00005f0 <strcmp>
c001933c:	83 c4 10             	add    esp,0x10
c001933f:	85 c0                	test   eax,eax
c0019341:	0f 94 c0             	sete   al
c0019344:	84 c0                	test   al,al
c0019346:	74 10                	je     c0019358 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0019348:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019350:	e9 b3 00 00 00       	jmp    c0019408 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0019355:	8d 76 00             	lea    esi,[esi+0x0]
c0019358:	83 ec 08             	sub    esp,0x8
c001935b:	68 2a 22 02 c0       	push   0xc002222a
c0019360:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019364:	e8 87 72 fe ff       	call   c00005f0 <strcmp>
c0019369:	83 c4 10             	add    esp,0x10
c001936c:	85 c0                	test   eax,eax
c001936e:	0f 94 c0             	sete   al
c0019371:	84 c0                	test   al,al
c0019373:	74 0f                	je     c0019384 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0019375:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001937d:	e9 86 00 00 00       	jmp    c0019408 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0019382:	66 90                	xchg   ax,ax
c0019384:	83 ec 08             	sub    esp,0x8
c0019387:	68 30 22 02 c0       	push   0xc0022230
c001938c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019390:	e8 5b 72 fe ff       	call   c00005f0 <strcmp>
c0019395:	83 c4 10             	add    esp,0x10
c0019398:	85 c0                	test   eax,eax
c001939a:	0f 94 c0             	sete   al
c001939d:	84 c0                	test   al,al
c001939f:	74 0b                	je     c00193ac <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c00193a1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00193a9:	eb 5d                	jmp    c0019408 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00193ab:	90                   	nop
c00193ac:	83 ec 08             	sub    esp,0x8
c00193af:	68 2c 02 02 c0       	push   0xc002022c
c00193b4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00193b8:	e8 33 72 fe ff       	call   c00005f0 <strcmp>
c00193bd:	83 c4 10             	add    esp,0x10
c00193c0:	85 c0                	test   eax,eax
c00193c2:	0f 94 c0             	sete   al
c00193c5:	84 c0                	test   al,al
c00193c7:	74 0b                	je     c00193d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c00193c9:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00193d1:	eb 35                	jmp    c0019408 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00193d3:	90                   	nop
c00193d4:	83 ec 08             	sub    esp,0x8
c00193d7:	68 36 22 02 c0       	push   0xc0022236
c00193dc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00193e0:	e8 0b 72 fe ff       	call   c00005f0 <strcmp>
c00193e5:	83 c4 10             	add    esp,0x10
c00193e8:	85 c0                	test   eax,eax
c00193ea:	0f 94 c0             	sete   al
c00193ed:	84 c0                	test   al,al
c00193ef:	74 0b                	je     c00193fc <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c00193f1:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00193f9:	eb 0d                	jmp    c0019408 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00193fb:	90                   	nop
c00193fc:	b8 08 00 00 00       	mov    eax,0x8
c0019401:	e9 ea 00 00 00       	jmp    c00194f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0019406:	66 90                	xchg   ax,ax
c0019408:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001940f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019414:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019418:	8b 04 85 e0 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9820]
c001941f:	83 f8 ff             	cmp    eax,0xffffffff
c0019422:	75 34                	jne    c0019458 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0019424:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019428:	88 c2                	mov    dl,al
c001942a:	a1 c0 67 02 c0       	mov    eax,ds:0xc00267c0
c001942f:	01 d0                	add    eax,edx
c0019431:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019435:	8b 15 c0 67 02 c0    	mov    edx,DWORD PTR ds:0xc00267c0
c001943b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001943f:	89 14 85 e0 67 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9820],edx
c0019446:	a1 c0 67 02 c0       	mov    eax,ds:0xc00267c0
c001944b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001944f:	89 14 85 60 68 02 c0 	mov    DWORD PTR [eax*4-0x3ffd97a0],edx
c0019456:	eb 18                	jmp    c0019470 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0019458:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001945c:	88 c2                	mov    dl,al
c001945e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019462:	8b 04 85 e0 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9820]
c0019469:	01 d0                	add    eax,edx
c001946b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001946f:	90                   	nop
c0019470:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019474:	88 04 24             	mov    BYTE PTR [esp],al
c0019477:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001947b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001947f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019487:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001948c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019494:	83 ec 0c             	sub    esp,0xc
c0019497:	68 00 20 00 00       	push   0x2000
c001949c:	e8 d0 02 ff ff       	call   c0009771 <malloc>
c00194a1:	83 c4 10             	add    esp,0x10
c00194a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00194a8:	68 00 20 00 00       	push   0x2000
c00194ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00194b1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00194b5:	50                   	push   eax
c00194b6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00194ba:	50                   	push   eax
c00194bb:	e8 05 de fe ff       	call   c00072c5 <f_mkfs>
c00194c0:	83 c4 10             	add    esp,0x10
c00194c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00194c7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00194cc:	75 0a                	jne    c00194d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c00194ce:	b8 00 00 00 00       	mov    eax,0x0
c00194d3:	eb 1b                	jmp    c00194f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00194d5:	8d 76 00             	lea    esi,[esi+0x0]
c00194d8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00194dd:	75 09                	jne    c00194e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00194df:	b8 09 00 00 00       	mov    eax,0x9
c00194e4:	eb 0a                	jmp    c00194f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00194e6:	66 90                	xchg   ax,ax
c00194e8:	b8 01 00 00 00       	mov    eax,0x1
c00194ed:	8d 76 00             	lea    esi,[esi+0x0]
c00194f0:	83 c4 2c             	add    esp,0x2c
c00194f3:	c3                   	ret    

c00194f4 <FAT::tryMount(LogicalDisk*, int)>:
c00194f4:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00194fa:	a1 c0 67 02 c0       	mov    eax,ds:0xc00267c0
c00194ff:	83 f8 14             	cmp    eax,0x14
c0019502:	75 18                	jne    c001951c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019504:	83 ec 0c             	sub    esp,0xc
c0019507:	68 3c 22 02 c0       	push   0xc002223c
c001950c:	e8 c0 8c ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c0019511:	83 c4 10             	add    esp,0x10
c0019514:	b0 00                	mov    al,0x0
c0019516:	e9 e9 01 00 00       	jmp    c0019704 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001951b:	90                   	nop
c001951c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0019523:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019529:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001952f:	3d 00 02 00 00       	cmp    eax,0x200
c0019534:	74 0a                	je     c0019540 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019536:	b0 00                	mov    al,0x0
c0019538:	e9 c7 01 00 00       	jmp    c0019704 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001953d:	8d 76 00             	lea    esi,[esi+0x0]
c0019540:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0019548:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001954f:	8b 04 85 e0 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9820]
c0019556:	83 f8 ff             	cmp    eax,0xffffffff
c0019559:	74 09                	je     c0019564 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001955b:	b0 01                	mov    al,0x1
c001955d:	e9 a2 01 00 00       	jmp    c0019704 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0019562:	66 90                	xchg   ax,ax
c0019564:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001956e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0019576:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001957d:	88 c2                	mov    dl,al
c001957f:	a1 c0 67 02 c0       	mov    eax,ds:0xc00267c0
c0019584:	01 d0                	add    eax,edx
c0019586:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001958d:	8b 15 c0 67 02 c0    	mov    edx,DWORD PTR ds:0xc00267c0
c0019593:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001959a:	89 14 85 e0 67 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9820],edx
c00195a1:	a1 c0 67 02 c0       	mov    eax,ds:0xc00267c0
c00195a6:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00195ad:	89 14 85 60 68 02 c0 	mov    DWORD PTR [eax*4-0x3ffd97a0],edx
c00195b4:	83 ec 0c             	sub    esp,0xc
c00195b7:	68 54 02 00 00       	push   0x254
c00195bc:	e8 b0 01 ff ff       	call   c0009771 <malloc>
c00195c1:	83 c4 10             	add    esp,0x10
c00195c4:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00195cb:	83 ec 04             	sub    esp,0x4
c00195ce:	6a 00                	push   0x0
c00195d0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00195d7:	50                   	push   eax
c00195d8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00195df:	e8 69 b6 fe ff       	call   c0004c4d <f_mount>
c00195e4:	83 c4 10             	add    esp,0x10
c00195e7:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00195ee:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00195f6:	74 1c                	je     c0019614 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00195f8:	83 ec 0c             	sub    esp,0xc
c00195fb:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019602:	e8 8a 01 ff ff       	call   c0009791 <rfree>
c0019607:	83 c4 10             	add    esp,0x10
c001960a:	b0 00                	mov    al,0x0
c001960c:	e9 f3 00 00 00       	jmp    c0019704 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0019611:	8d 76 00             	lea    esi,[esi+0x0]
c0019614:	83 ec 04             	sub    esp,0x4
c0019617:	68 00 01 00 00       	push   0x100
c001961c:	6a 00                	push   0x0
c001961e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019625:	50                   	push   eax
c0019626:	e8 7d 6e fe ff       	call   c00004a8 <memset>
c001962b:	83 c4 10             	add    esp,0x10
c001962e:	83 ec 08             	sub    esp,0x8
c0019631:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019638:	50                   	push   eax
c0019639:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019640:	50                   	push   eax
c0019641:	e8 5e 70 fe ff       	call   c00006a4 <strcat>
c0019646:	83 c4 10             	add    esp,0x10
c0019649:	83 ec 08             	sub    esp,0x8
c001964c:	68 4a 22 02 c0       	push   0xc002224a
c0019651:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019658:	50                   	push   eax
c0019659:	e8 46 70 fe ff       	call   c00006a4 <strcat>
c001965e:	83 c4 10             	add    esp,0x10
c0019661:	83 ec 04             	sub    esp,0x4
c0019664:	6a 01                	push   0x1
c0019666:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001966d:	50                   	push   eax
c001966e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019672:	50                   	push   eax
c0019673:	e8 37 b6 fe ff       	call   c0004caf <f_open>
c0019678:	83 c4 10             	add    esp,0x10
c001967b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019682:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019689:	85 c0                	test   eax,eax
c001968b:	74 0b                	je     c0019698 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001968d:	78 31                	js     c00196c0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001968f:	83 e8 04             	sub    eax,0x4
c0019692:	83 f8 01             	cmp    eax,0x1
c0019695:	77 29                	ja     c00196c0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019697:	90                   	nop
c0019698:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00196a0:	83 ec 0c             	sub    esp,0xc
c00196a3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00196a7:	50                   	push   eax
c00196a8:	e8 54 c1 fe ff       	call   c0005801 <f_close>
c00196ad:	83 c4 10             	add    esp,0x10
c00196b0:	90                   	nop
c00196b1:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00196b9:	74 41                	je     c00196fc <FAT::tryMount(LogicalDisk*, int)+0x208>
c00196bb:	eb 33                	jmp    c00196f0 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00196bd:	8d 76 00             	lea    esi,[esi+0x0]
c00196c0:	83 ec 0c             	sub    esp,0xc
c00196c3:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00196ca:	e8 c2 00 ff ff       	call   c0009791 <rfree>
c00196cf:	83 c4 10             	add    esp,0x10
c00196d2:	83 ec 04             	sub    esp,0x4
c00196d5:	6a 00                	push   0x0
c00196d7:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00196de:	50                   	push   eax
c00196df:	6a 00                	push   0x0
c00196e1:	e8 67 b5 fe ff       	call   c0004c4d <f_mount>
c00196e6:	83 c4 10             	add    esp,0x10
c00196e9:	b0 00                	mov    al,0x0
c00196eb:	eb 17                	jmp    c0019704 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00196ed:	8d 76 00             	lea    esi,[esi+0x0]
c00196f0:	a1 c0 67 02 c0       	mov    eax,ds:0xc00267c0
c00196f5:	40                   	inc    eax
c00196f6:	a3 c0 67 02 c0       	mov    ds:0xc00267c0,eax
c00196fb:	90                   	nop
c00196fc:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0019703:	90                   	nop
c0019704:	81 c4 6c 03 00 00    	add    esp,0x36c
c001970a:	c3                   	ret    
c001970b:	90                   	nop

c001970c <FAT::allocateSwapfile(char const*, int)>:
c001970c:	55                   	push   ebp
c001970d:	57                   	push   edi
c001970e:	56                   	push   esi
c001970f:	53                   	push   ebx
c0019710:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019716:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019721:	83 ec 0c             	sub    esp,0xc
c0019724:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001972b:	e8 41 00 ff ff       	call   c0009771 <malloc>
c0019730:	83 c4 10             	add    esp,0x10
c0019733:	89 c7                	mov    edi,eax
c0019735:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c001973a:	83 ec 04             	sub    esp,0x4
c001973d:	50                   	push   eax
c001973e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019745:	57                   	push   edi
c0019746:	e8 1b 33 ff ff       	call   c000ca66 <File::File(char const*, Process*)>
c001974b:	83 c4 10             	add    esp,0x10
c001974e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019755:	83 ec 04             	sub    esp,0x4
c0019758:	8d 44 24 13          	lea    eax,[esp+0x13]
c001975c:	50                   	push   eax
c001975d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019761:	50                   	push   eax
c0019762:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019769:	e8 5e 36 ff ff       	call   c000cdcc <File::stat(unsigned long long*, bool*)>
c001976e:	83 c4 10             	add    esp,0x10
c0019771:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019778:	c1 e0 14             	shl    eax,0x14
c001977b:	89 c7                	mov    edi,eax
c001977d:	89 c5                	mov    ebp,eax
c001977f:	c1 fd 1f             	sar    ebp,0x1f
c0019782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019786:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001978a:	89 f9                	mov    ecx,edi
c001978c:	31 c1                	xor    ecx,eax
c001978e:	89 cb                	mov    ebx,ecx
c0019790:	89 e9                	mov    ecx,ebp
c0019792:	31 d1                	xor    ecx,edx
c0019794:	89 ce                	mov    esi,ecx
c0019796:	89 f0                	mov    eax,esi
c0019798:	09 d8                	or     eax,ebx
c001979a:	0f 84 98 00 00 00    	je     c0019838 <FAT::allocateSwapfile(char const*, int)+0x12c>
c00197a0:	83 ec 0c             	sub    esp,0xc
c00197a3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00197aa:	e8 e9 34 ff ff       	call   c000cc98 <File::unlink()>
c00197af:	83 c4 10             	add    esp,0x10
c00197b2:	83 ec 08             	sub    esp,0x8
c00197b5:	6a 12                	push   0x12
c00197b7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00197be:	e8 5d 33 ff ff       	call   c000cb20 <File::open(FileOpenMode)>
c00197c3:	83 c4 10             	add    esp,0x10
c00197c6:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00197cd:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00197d3:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00197da:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00197e1:	c1 e0 14             	shl    eax,0x14
c00197e4:	99                   	cdq    
c00197e5:	6a 01                	push   0x1
c00197e7:	52                   	push   edx
c00197e8:	50                   	push   eax
c00197e9:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00197f0:	e8 bc d6 fe ff       	call   c0006eb1 <f_expand>
c00197f5:	83 c4 10             	add    esp,0x10
c00197f8:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00197ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0019801:	83 c0 10             	add    eax,0x10
c0019804:	8b 00                	mov    eax,DWORD PTR [eax]
c0019806:	83 ec 0c             	sub    esp,0xc
c0019809:	8d 54 24 24          	lea    edx,[esp+0x24]
c001980d:	52                   	push   edx
c001980e:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019812:	52                   	push   edx
c0019813:	6a 00                	push   0x0
c0019815:	68 00 04 00 00       	push   0x400
c001981a:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019821:	ff d0                	call   eax
c0019823:	83 c4 20             	add    esp,0x20
c0019826:	83 ec 0c             	sub    esp,0xc
c0019829:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019830:	e8 49 33 ff ff       	call   c000cb7e <File::close()>
c0019835:	83 c4 10             	add    esp,0x10
c0019838:	83 ec 08             	sub    esp,0x8
c001983b:	6a 01                	push   0x1
c001983d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019844:	e8 d7 32 ff ff       	call   c000cb20 <File::open(FileOpenMode)>
c0019849:	83 c4 10             	add    esp,0x10
c001984c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019853:	8b 00                	mov    eax,DWORD PTR [eax]
c0019855:	83 c0 0c             	add    eax,0xc
c0019858:	8b 00                	mov    eax,DWORD PTR [eax]
c001985a:	83 ec 0c             	sub    esp,0xc
c001985d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019861:	52                   	push   edx
c0019862:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019866:	52                   	push   edx
c0019867:	6a 00                	push   0x0
c0019869:	6a 04                	push   0x4
c001986b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019872:	ff d0                	call   eax
c0019874:	83 c4 20             	add    esp,0x20
c0019877:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001987e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019884:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001988b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019892:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0019895:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019898:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001989f:	83 ec 0c             	sub    esp,0xc
c00198a2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00198a9:	e8 d0 32 ff ff       	call   c000cb7e <File::close()>
c00198ae:	83 c4 10             	add    esp,0x10
c00198b1:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00198b8:	ba 00 00 00 00       	mov    edx,0x0
c00198bd:	81 c4 3c 04 00 00    	add    esp,0x43c
c00198c3:	5b                   	pop    ebx
c00198c4:	5e                   	pop    esi
c00198c5:	5f                   	pop    edi
c00198c6:	5d                   	pop    ebp
c00198c7:	c3                   	ret    

c00198c8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00198c8:	57                   	push   edi
c00198c9:	56                   	push   esi
c00198ca:	53                   	push   ebx
c00198cb:	81 ec 50 02 00 00    	sub    esp,0x250
c00198d1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00198d9:	74 0d                	je     c00198e8 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00198db:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00198e3:	75 0f                	jne    c00198f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00198e5:	8d 76 00             	lea    esi,[esi+0x0]
c00198e8:	b8 04 00 00 00       	mov    eax,0x4
c00198ed:	e9 36 01 00 00       	jmp    c0019a28 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c00198f2:	66 90                	xchg   ax,ax
c00198f4:	83 ec 08             	sub    esp,0x8
c00198f7:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00198fe:	50                   	push   eax
c00198ff:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019906:	e8 00 c5 fe ff       	call   c0005e0b <f_readdir>
c001990b:	83 c4 10             	add    esp,0x10
c001990e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019915:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001991c:	83 ec 0c             	sub    esp,0xc
c001991f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019926:	83 c0 1a             	add    eax,0x1a
c0019929:	50                   	push   eax
c001992a:	e8 95 6b fe ff       	call   c00004c4 <strlen>
c001992f:	83 c4 10             	add    esp,0x10
c0019932:	ba 00 00 00 00       	mov    edx,0x0
c0019937:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001993b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001993f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019946:	0f b6 c0             	movzx  eax,al
c0019949:	83 e0 10             	and    eax,0x10
c001994c:	74 0a                	je     c0019958 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001994e:	b8 02 00 00 00       	mov    eax,0x2
c0019953:	eb 0b                	jmp    c0019960 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019955:	8d 76 00             	lea    esi,[esi+0x0]
c0019958:	b8 01 00 00 00       	mov    eax,0x1
c001995d:	8d 76 00             	lea    esi,[esi+0x0]
c0019960:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019964:	83 ec 08             	sub    esp,0x8
c0019967:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001996e:	83 c0 1a             	add    eax,0x1a
c0019971:	50                   	push   eax
c0019972:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019976:	83 c0 10             	add    eax,0x10
c0019979:	50                   	push   eax
c001997a:	e8 e5 6b fe ff       	call   c0000564 <strcpy>
c001997f:	83 c4 10             	add    esp,0x10
c0019982:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019989:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019990:	8d 44 24 04          	lea    eax,[esp+0x4]
c0019994:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001999b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00199a2:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00199a9:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00199b0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00199b7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00199be:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00199c5:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00199cc:	89 c6                	mov    esi,eax
c00199ce:	89 d7                	mov    edi,edx
c00199d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199d2:	89 c8                	mov    eax,ecx
c00199d4:	89 fa                	mov    edx,edi
c00199d6:	89 f3                	mov    ebx,esi
c00199d8:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00199df:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00199e6:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00199ed:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00199f4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00199fa:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019a01:	84 c0                	test   al,al
c0019a03:	75 07                	jne    c0019a0c <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0019a05:	b8 07 00 00 00       	mov    eax,0x7
c0019a0a:	eb 1c                	jmp    c0019a28 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0019a0c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0019a13:	85 c0                	test   eax,eax
c0019a15:	75 09                	jne    c0019a20 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0019a17:	b8 00 00 00 00       	mov    eax,0x0
c0019a1c:	eb 0a                	jmp    c0019a28 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0019a1e:	66 90                	xchg   ax,ax
c0019a20:	b8 01 00 00 00       	mov    eax,0x1
c0019a25:	8d 76 00             	lea    esi,[esi+0x0]
c0019a28:	81 c4 50 02 00 00    	add    esp,0x250
c0019a2e:	5b                   	pop    ebx
c0019a2f:	5e                   	pop    esi
c0019a30:	5f                   	pop    edi
c0019a31:	c3                   	ret    
c0019a32:	66 90                	xchg   ax,ax

c0019a34 <FAT::read(void*, unsigned long, void*, int*)>:
c0019a34:	83 ec 1c             	sub    esp,0x1c
c0019a37:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a3c:	74 0a                	je     c0019a48 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0019a3e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019a43:	75 0b                	jne    c0019a50 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019a45:	8d 76 00             	lea    esi,[esi+0x0]
c0019a48:	b8 04 00 00 00       	mov    eax,0x4
c0019a4d:	eb 41                	jmp    c0019a90 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019a4f:	90                   	nop
c0019a50:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a54:	50                   	push   eax
c0019a55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019a59:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019a5d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a61:	e8 85 b6 fe ff       	call   c00050eb <f_read>
c0019a66:	83 c4 10             	add    esp,0x10
c0019a69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a71:	89 c2                	mov    edx,eax
c0019a73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019a77:	89 10                	mov    DWORD PTR [eax],edx
c0019a79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a7d:	85 c0                	test   eax,eax
c0019a7f:	75 07                	jne    c0019a88 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019a81:	b8 00 00 00 00       	mov    eax,0x0
c0019a86:	eb 08                	jmp    c0019a90 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019a88:	b8 01 00 00 00       	mov    eax,0x1
c0019a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a90:	83 c4 1c             	add    esp,0x1c
c0019a93:	c3                   	ret    

c0019a94 <FAT::write(void*, unsigned long, void*, int*)>:
c0019a94:	83 ec 1c             	sub    esp,0x1c
c0019a97:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a9c:	74 0a                	je     c0019aa8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0019a9e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019aa3:	75 0b                	jne    c0019ab0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0019aa8:	b8 04 00 00 00       	mov    eax,0x4
c0019aad:	eb 41                	jmp    c0019af0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019aaf:	90                   	nop
c0019ab0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019ab4:	50                   	push   eax
c0019ab5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019ab9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019abd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019ac1:	e8 a5 b8 fe ff       	call   c000536b <f_write>
c0019ac6:	83 c4 10             	add    esp,0x10
c0019ac9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019acd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ad1:	89 c2                	mov    edx,eax
c0019ad3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019ad7:	89 10                	mov    DWORD PTR [eax],edx
c0019ad9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019add:	85 c0                	test   eax,eax
c0019adf:	75 07                	jne    c0019ae8 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019ae1:	b8 00 00 00 00       	mov    eax,0x0
c0019ae6:	eb 08                	jmp    c0019af0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019ae8:	b8 01 00 00 00       	mov    eax,0x1
c0019aed:	8d 76 00             	lea    esi,[esi+0x0]
c0019af0:	83 c4 1c             	add    esp,0x1c
c0019af3:	c3                   	ret    

c0019af4 <FAT::close(void*)>:
c0019af4:	83 ec 1c             	sub    esp,0x1c
c0019af7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019afc:	75 0a                	jne    c0019b08 <FAT::close(void*)+0x14>
c0019afe:	b8 04 00 00 00       	mov    eax,0x4
c0019b03:	eb 3f                	jmp    c0019b44 <FAT::close(void*)+0x50>
c0019b05:	8d 76 00             	lea    esi,[esi+0x0]
c0019b08:	83 ec 0c             	sub    esp,0xc
c0019b0b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b0f:	e8 ed bc fe ff       	call   c0005801 <f_close>
c0019b14:	83 c4 10             	add    esp,0x10
c0019b17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b1b:	83 ec 0c             	sub    esp,0xc
c0019b1e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b22:	e8 5a fc fe ff       	call   c0009781 <free>
c0019b27:	83 c4 10             	add    esp,0x10
c0019b2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b2e:	85 c0                	test   eax,eax
c0019b30:	75 0a                	jne    c0019b3c <FAT::close(void*)+0x48>
c0019b32:	b8 00 00 00 00       	mov    eax,0x0
c0019b37:	eb 0b                	jmp    c0019b44 <FAT::close(void*)+0x50>
c0019b39:	8d 76 00             	lea    esi,[esi+0x0]
c0019b3c:	b8 01 00 00 00       	mov    eax,0x1
c0019b41:	8d 76 00             	lea    esi,[esi+0x0]
c0019b44:	83 c4 1c             	add    esp,0x1c
c0019b47:	c3                   	ret    

c0019b48 <FAT::closeDir(void*)>:
c0019b48:	83 ec 1c             	sub    esp,0x1c
c0019b4b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019b50:	75 0a                	jne    c0019b5c <FAT::closeDir(void*)+0x14>
c0019b52:	b8 04 00 00 00       	mov    eax,0x4
c0019b57:	eb 3f                	jmp    c0019b98 <FAT::closeDir(void*)+0x50>
c0019b59:	8d 76 00             	lea    esi,[esi+0x0]
c0019b5c:	83 ec 0c             	sub    esp,0xc
c0019b5f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b63:	e8 81 c2 fe ff       	call   c0005de9 <f_closedir>
c0019b68:	83 c4 10             	add    esp,0x10
c0019b6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b6f:	83 ec 0c             	sub    esp,0xc
c0019b72:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b76:	e8 06 fc fe ff       	call   c0009781 <free>
c0019b7b:	83 c4 10             	add    esp,0x10
c0019b7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b82:	85 c0                	test   eax,eax
c0019b84:	75 0a                	jne    c0019b90 <FAT::closeDir(void*)+0x48>
c0019b86:	b8 00 00 00 00       	mov    eax,0x0
c0019b8b:	eb 0b                	jmp    c0019b98 <FAT::closeDir(void*)+0x50>
c0019b8d:	8d 76 00             	lea    esi,[esi+0x0]
c0019b90:	b8 01 00 00 00       	mov    eax,0x1
c0019b95:	8d 76 00             	lea    esi,[esi+0x0]
c0019b98:	83 c4 1c             	add    esp,0x1c
c0019b9b:	c3                   	ret    

c0019b9c <FAT::seek(void*, unsigned long long)>:
c0019b9c:	83 ec 2c             	sub    esp,0x2c
c0019b9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019ba7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019bab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019baf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019bb4:	75 0a                	jne    c0019bc0 <FAT::seek(void*, unsigned long long)+0x24>
c0019bb6:	b8 04 00 00 00       	mov    eax,0x4
c0019bbb:	eb 37                	jmp    c0019bf4 <FAT::seek(void*, unsigned long long)+0x58>
c0019bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0019bc0:	83 ec 04             	sub    esp,0x4
c0019bc3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019bc7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019bcb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019bcf:	e8 5c bc fe ff       	call   c0005830 <f_lseek>
c0019bd4:	83 c4 10             	add    esp,0x10
c0019bd7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019bdb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019bdf:	85 c0                	test   eax,eax
c0019be1:	75 09                	jne    c0019bec <FAT::seek(void*, unsigned long long)+0x50>
c0019be3:	b8 00 00 00 00       	mov    eax,0x0
c0019be8:	eb 0a                	jmp    c0019bf4 <FAT::seek(void*, unsigned long long)+0x58>
c0019bea:	66 90                	xchg   ax,ax
c0019bec:	b8 01 00 00 00       	mov    eax,0x1
c0019bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0019bf4:	83 c4 2c             	add    esp,0x2c
c0019bf7:	c3                   	ret    

c0019bf8 <fatWrapperReadDisk>:
c0019bf8:	83 ec 1c             	sub    esp,0x1c
c0019bfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bff:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019c03:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019c07:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019c0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019c12:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c17:	8b 04 85 40 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda8c0]
c0019c1e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019c22:	83 ec 0c             	sub    esp,0xc
c0019c25:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019c29:	52                   	push   edx
c0019c2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c32:	50                   	push   eax
c0019c33:	e8 66 4f ff ff       	call   c000eb9e <LogicalDisk::read(unsigned long long, int, void*)>
c0019c38:	83 c4 20             	add    esp,0x20
c0019c3b:	83 c4 1c             	add    esp,0x1c
c0019c3e:	c3                   	ret    
c0019c3f:	90                   	nop

c0019c40 <fatWrapperWriteDisk>:
c0019c40:	83 ec 1c             	sub    esp,0x1c
c0019c43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c47:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019c4b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019c4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019c56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019c5a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c5f:	8b 04 85 40 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda8c0]
c0019c66:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019c6a:	83 ec 0c             	sub    esp,0xc
c0019c6d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019c71:	52                   	push   edx
c0019c72:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c7a:	50                   	push   eax
c0019c7b:	e8 8a 4f ff ff       	call   c000ec0a <LogicalDisk::write(unsigned long long, int, void*)>
c0019c80:	83 c4 20             	add    esp,0x20
c0019c83:	83 c4 1c             	add    esp,0x1c
c0019c86:	c3                   	ret    
c0019c87:	90                   	nop

c0019c88 <fatWrapperIoctl>:
c0019c88:	53                   	push   ebx
c0019c89:	83 ec 28             	sub    esp,0x28
c0019c8c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019c90:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019c94:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019c98:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019c9c:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0019ca1:	75 31                	jne    c0019cd4 <fatWrapperIoctl+0x4c>
c0019ca3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ca7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019cab:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019cb0:	8b 04 85 40 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda8c0]
c0019cb7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019cbd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019cc3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019cc7:	66 89 02             	mov    WORD PTR [edx],ax
c0019cca:	b8 00 00 00 00       	mov    eax,0x0
c0019ccf:	e9 bc 00 00 00       	jmp    c0019d90 <fatWrapperIoctl+0x108>
c0019cd4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0019cd9:	75 6d                	jne    c0019d48 <fatWrapperIoctl+0xc0>
c0019cdb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cdf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019ce3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019ce8:	8b 04 85 40 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda8c0]
c0019cef:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019cf5:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019cfb:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019d01:	89 c8                	mov    eax,ecx
c0019d03:	89 da                	mov    edx,ebx
c0019d05:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019d09:	c1 e0 0a             	shl    eax,0xa
c0019d0c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019d11:	8b 0c 8d 40 57 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffda8c0]
c0019d18:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019d1e:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019d24:	89 cb                	mov    ebx,ecx
c0019d26:	c1 fb 1f             	sar    ebx,0x1f
c0019d29:	53                   	push   ebx
c0019d2a:	51                   	push   ecx
c0019d2b:	52                   	push   edx
c0019d2c:	50                   	push   eax
c0019d2d:	e8 be 55 00 00       	call   c001f2f0 <__udivdi3>
c0019d32:	83 c4 10             	add    esp,0x10
c0019d35:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019d39:	89 01                	mov    DWORD PTR [ecx],eax
c0019d3b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019d3e:	b8 00 00 00 00       	mov    eax,0x0
c0019d43:	eb 4b                	jmp    c0019d90 <fatWrapperIoctl+0x108>
c0019d45:	8d 76 00             	lea    esi,[esi+0x0]
c0019d48:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0019d4d:	75 09                	jne    c0019d58 <fatWrapperIoctl+0xd0>
c0019d4f:	b8 00 00 00 00       	mov    eax,0x0
c0019d54:	eb 3a                	jmp    c0019d90 <fatWrapperIoctl+0x108>
c0019d56:	66 90                	xchg   ax,ax
c0019d58:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0019d5d:	75 19                	jne    c0019d78 <fatWrapperIoctl+0xf0>
c0019d5f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019d67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019d6b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019d71:	b8 00 00 00 00       	mov    eax,0x0
c0019d76:	eb 18                	jmp    c0019d90 <fatWrapperIoctl+0x108>
c0019d78:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0019d7d:	75 09                	jne    c0019d88 <fatWrapperIoctl+0x100>
c0019d7f:	b8 00 00 00 00       	mov    eax,0x0
c0019d84:	eb 0a                	jmp    c0019d90 <fatWrapperIoctl+0x108>
c0019d86:	66 90                	xchg   ax,ax
c0019d88:	b8 04 00 00 00       	mov    eax,0x4
c0019d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d90:	83 c4 28             	add    esp,0x28
c0019d93:	5b                   	pop    ebx
c0019d94:	c3                   	ret    
c0019d95:	90                   	nop
c0019d96:	66 90                	xchg   ax,ax

c0019d98 <FAT::FAT()>:
c0019d98:	83 ec 1c             	sub    esp,0x1c
c0019d9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d9f:	83 ec 0c             	sub    esp,0xc
c0019da2:	50                   	push   eax
c0019da3:	e8 6a 2a ff ff       	call   c000c812 <Filesystem::Filesystem()>
c0019da8:	83 c4 10             	add    esp,0x10
c0019dab:	ba 60 22 02 c0       	mov    edx,0xc0022260
c0019db0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019db4:	89 10                	mov    DWORD PTR [eax],edx
c0019db6:	c7 05 c0 67 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00267c0,0x0
c0019dc0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019dc8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019dcd:	7f 15                	jg     c0019de4 <FAT::FAT()+0x4c>
c0019dcf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019dd3:	c7 04 85 e0 67 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd9820],0xffffffff
c0019dde:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019de2:	eb e4                	jmp    c0019dc8 <FAT::FAT()+0x30>
c0019de4:	90                   	nop
c0019de5:	83 c4 1c             	add    esp,0x1c
c0019de8:	c3                   	ret    
c0019de9:	90                   	nop
c0019dea:	66 90                	xchg   ax,ax

c0019dec <FAT::fixFilepath(char*)>:
c0019dec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019df0:	8a 00                	mov    al,BYTE PTR [eax]
c0019df2:	3c 40                	cmp    al,0x40
c0019df4:	7e 2e                	jle    c0019e24 <FAT::fixFilepath(char*)+0x38>
c0019df6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019dfa:	8a 00                	mov    al,BYTE PTR [eax]
c0019dfc:	83 e8 41             	sub    eax,0x41
c0019dff:	88 c2                	mov    dl,al
c0019e01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019e05:	88 10                	mov    BYTE PTR [eax],dl
c0019e07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019e0b:	8a 00                	mov    al,BYTE PTR [eax]
c0019e0d:	0f be c0             	movsx  eax,al
c0019e10:	8b 04 85 e0 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9820]
c0019e17:	83 c0 30             	add    eax,0x30
c0019e1a:	88 c2                	mov    dl,al
c0019e1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019e20:	88 10                	mov    BYTE PTR [eax],dl
c0019e22:	66 90                	xchg   ax,ax
c0019e24:	90                   	nop
c0019e25:	c3                   	ret    
c0019e26:	66 90                	xchg   ax,ax

c0019e28 <FAT::open(char const*, void**, FileOpenMode)>:
c0019e28:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e2e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e36:	74 0c                	je     c0019e44 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019e38:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019e40:	75 0e                	jne    c0019e50 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019e42:	66 90                	xchg   ax,ax
c0019e44:	b8 04 00 00 00       	mov    eax,0x4
c0019e49:	e9 06 01 00 00       	jmp    c0019f54 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c0019e4e:	66 90                	xchg   ax,ax
c0019e50:	83 ec 08             	sub    esp,0x8
c0019e53:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e5a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e5e:	50                   	push   eax
c0019e5f:	e8 00 67 fe ff       	call   c0000564 <strcpy>
c0019e64:	83 c4 10             	add    esp,0x10
c0019e67:	83 ec 08             	sub    esp,0x8
c0019e6a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019e6e:	50                   	push   eax
c0019e6f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e76:	e8 71 ff ff ff       	call   c0019dec <FAT::fixFilepath(char*)>
c0019e7b:	83 c4 10             	add    esp,0x10
c0019e7e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019e86:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e8d:	83 e0 01             	and    eax,0x1
c0019e90:	74 0a                	je     c0019e9c <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0019e92:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0019e9a:	66 90                	xchg   ax,ax
c0019e9c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019ea3:	83 e0 04             	and    eax,0x4
c0019ea6:	74 10                	je     c0019eb8 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0019ea8:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0019eb0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019eb8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019ebf:	83 e0 02             	and    eax,0x2
c0019ec2:	74 08                	je     c0019ecc <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0019ec4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019ecc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019ed3:	83 e0 08             	and    eax,0x8
c0019ed6:	74 08                	je     c0019ee0 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0019ed8:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0019ee0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019ee7:	83 e0 10             	and    eax,0x10
c0019eea:	74 08                	je     c0019ef4 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019eec:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0019ef4:	83 ec 0c             	sub    esp,0xc
c0019ef7:	68 50 02 00 00       	push   0x250
c0019efc:	e8 70 f8 fe ff       	call   c0009771 <malloc>
c0019f01:	83 c4 10             	add    esp,0x10
c0019f04:	89 c2                	mov    edx,eax
c0019f06:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f0d:	89 10                	mov    DWORD PTR [eax],edx
c0019f0f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019f17:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f20:	83 ec 04             	sub    esp,0x4
c0019f23:	52                   	push   edx
c0019f24:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019f28:	52                   	push   edx
c0019f29:	50                   	push   eax
c0019f2a:	e8 80 ad fe ff       	call   c0004caf <f_open>
c0019f2f:	83 c4 10             	add    esp,0x10
c0019f32:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019f39:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019f41:	74 09                	je     c0019f4c <FAT::open(char const*, void**, FileOpenMode)+0x124>
c0019f43:	b8 01 00 00 00       	mov    eax,0x1
c0019f48:	eb 0a                	jmp    c0019f54 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c0019f4a:	66 90                	xchg   ax,ax
c0019f4c:	b8 00 00 00 00       	mov    eax,0x0
c0019f51:	8d 76 00             	lea    esi,[esi+0x0]
c0019f54:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019f5a:	c3                   	ret    
c0019f5b:	90                   	nop

c0019f5c <FAT::openDir(char const*, void**)>:
c0019f5c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019f62:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019f6a:	74 0c                	je     c0019f78 <FAT::openDir(char const*, void**)+0x1c>
c0019f6c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019f74:	75 0e                	jne    c0019f84 <FAT::openDir(char const*, void**)+0x28>
c0019f76:	66 90                	xchg   ax,ax
c0019f78:	b8 04 00 00 00       	mov    eax,0x4
c0019f7d:	e9 82 00 00 00       	jmp    c001a004 <FAT::openDir(char const*, void**)+0xa8>
c0019f82:	66 90                	xchg   ax,ax
c0019f84:	83 ec 08             	sub    esp,0x8
c0019f87:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f8e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f92:	50                   	push   eax
c0019f93:	e8 cc 65 fe ff       	call   c0000564 <strcpy>
c0019f98:	83 c4 10             	add    esp,0x10
c0019f9b:	83 ec 08             	sub    esp,0x8
c0019f9e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019fa2:	50                   	push   eax
c0019fa3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019faa:	e8 3d fe ff ff       	call   c0019dec <FAT::fixFilepath(char*)>
c0019faf:	83 c4 10             	add    esp,0x10
c0019fb2:	83 ec 0c             	sub    esp,0xc
c0019fb5:	6a 4c                	push   0x4c
c0019fb7:	e8 b5 f7 fe ff       	call   c0009771 <malloc>
c0019fbc:	83 c4 10             	add    esp,0x10
c0019fbf:	89 c2                	mov    edx,eax
c0019fc1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019fc8:	89 10                	mov    DWORD PTR [eax],edx
c0019fca:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019fd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0019fd3:	83 ec 08             	sub    esp,0x8
c0019fd6:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019fda:	52                   	push   edx
c0019fdb:	50                   	push   eax
c0019fdc:	e8 06 bd fe ff       	call   c0005ce7 <f_opendir>
c0019fe1:	83 c4 10             	add    esp,0x10
c0019fe4:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019feb:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019ff3:	74 07                	je     c0019ffc <FAT::openDir(char const*, void**)+0xa0>
c0019ff5:	b8 01 00 00 00       	mov    eax,0x1
c0019ffa:	eb 08                	jmp    c001a004 <FAT::openDir(char const*, void**)+0xa8>
c0019ffc:	b8 00 00 00 00       	mov    eax,0x0
c001a001:	8d 76 00             	lea    esi,[esi+0x0]
c001a004:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a00a:	c3                   	ret    
c001a00b:	90                   	nop

c001a00c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001a00c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a012:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001a01a:	75 0c                	jne    c001a028 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001a01c:	b8 04 00 00 00       	mov    eax,0x4
c001a021:	e9 d2 00 00 00       	jmp    c001a0f8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001a026:	66 90                	xchg   ax,ax
c001a028:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001a030:	75 0a                	jne    c001a03c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001a032:	b8 04 00 00 00       	mov    eax,0x4
c001a037:	e9 bc 00 00 00       	jmp    c001a0f8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001a03c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001a044:	75 0a                	jne    c001a050 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001a046:	b8 04 00 00 00       	mov    eax,0x4
c001a04b:	e9 a8 00 00 00       	jmp    c001a0f8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001a050:	83 ec 08             	sub    esp,0x8
c001a053:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a05a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a061:	50                   	push   eax
c001a062:	e8 fd 64 fe ff       	call   c0000564 <strcpy>
c001a067:	83 c4 10             	add    esp,0x10
c001a06a:	83 ec 08             	sub    esp,0x8
c001a06d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a074:	50                   	push   eax
c001a075:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a07c:	e8 6b fd ff ff       	call   c0019dec <FAT::fixFilepath(char*)>
c001a081:	83 c4 10             	add    esp,0x10
c001a084:	83 ec 08             	sub    esp,0x8
c001a087:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a08b:	50                   	push   eax
c001a08c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a093:	50                   	push   eax
c001a094:	e8 0d be fe ff       	call   c0005ea6 <f_stat>
c001a099:	83 c4 10             	add    esp,0x10
c001a09c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a0a3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a0aa:	85 c0                	test   eax,eax
c001a0ac:	74 0a                	je     c001a0b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001a0ae:	83 f8 04             	cmp    eax,0x4
c001a0b1:	74 35                	je     c001a0e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001a0b3:	eb 3b                	jmp    c001a0f0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001a0b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a0b8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a0bc:	0f b6 c0             	movzx  eax,al
c001a0bf:	83 e0 10             	and    eax,0x10
c001a0c2:	0f 95 c2             	setne  dl
c001a0c5:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a0cc:	88 10                	mov    BYTE PTR [eax],dl
c001a0ce:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a0d1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a0d5:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a0dc:	89 01                	mov    DWORD PTR [ecx],eax
c001a0de:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a0e1:	b8 00 00 00 00       	mov    eax,0x0
c001a0e6:	eb 10                	jmp    c001a0f8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001a0e8:	b8 02 00 00 00       	mov    eax,0x2
c001a0ed:	eb 09                	jmp    c001a0f8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001a0ef:	90                   	nop
c001a0f0:	b8 01 00 00 00       	mov    eax,0x1
c001a0f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a0f8:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a0fe:	c3                   	ret    
c001a0ff:	90                   	nop

c001a100 <FAT::unlink(char const*)>:
c001a100:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a106:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a10e:	75 08                	jne    c001a118 <FAT::unlink(char const*)+0x18>
c001a110:	b8 04 00 00 00       	mov    eax,0x4
c001a115:	eb 61                	jmp    c001a178 <FAT::unlink(char const*)+0x78>
c001a117:	90                   	nop
c001a118:	83 ec 08             	sub    esp,0x8
c001a11b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a122:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a126:	50                   	push   eax
c001a127:	e8 38 64 fe ff       	call   c0000564 <strcpy>
c001a12c:	83 c4 10             	add    esp,0x10
c001a12f:	83 ec 08             	sub    esp,0x8
c001a132:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a136:	50                   	push   eax
c001a137:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a13e:	e8 a9 fc ff ff       	call   c0019dec <FAT::fixFilepath(char*)>
c001a143:	83 c4 10             	add    esp,0x10
c001a146:	83 ec 0c             	sub    esp,0xc
c001a149:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a14d:	50                   	push   eax
c001a14e:	e8 a5 c0 fe ff       	call   c00061f8 <f_unlink>
c001a153:	83 c4 10             	add    esp,0x10
c001a156:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a15d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a164:	85 c0                	test   eax,eax
c001a166:	75 08                	jne    c001a170 <FAT::unlink(char const*)+0x70>
c001a168:	b8 00 00 00 00       	mov    eax,0x0
c001a16d:	eb 09                	jmp    c001a178 <FAT::unlink(char const*)+0x78>
c001a16f:	90                   	nop
c001a170:	b8 01 00 00 00       	mov    eax,0x1
c001a175:	8d 76 00             	lea    esi,[esi+0x0]
c001a178:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a17e:	c3                   	ret    
c001a17f:	90                   	nop

c001a180 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a180:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a186:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a18d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a194:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a198:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a19c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a1a4:	75 0a                	jne    c001a1b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a1a6:	b8 04 00 00 00       	mov    eax,0x4
c001a1ab:	e9 30 01 00 00       	jmp    c001a2e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001a1b0:	83 ec 08             	sub    esp,0x8
c001a1b3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a1ba:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a1be:	50                   	push   eax
c001a1bf:	e8 a0 63 fe ff       	call   c0000564 <strcpy>
c001a1c4:	83 c4 10             	add    esp,0x10
c001a1c7:	83 ec 08             	sub    esp,0x8
c001a1ca:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a1ce:	50                   	push   eax
c001a1cf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a1d6:	e8 11 fc ff ff       	call   c0019dec <FAT::fixFilepath(char*)>
c001a1db:	83 c4 10             	add    esp,0x10
c001a1de:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a1e6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a1ee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a1f3:	83 e0 01             	and    eax,0x1
c001a1f6:	74 08                	je     c001a200 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001a1f8:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001a200:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a205:	83 e0 02             	and    eax,0x2
c001a208:	74 0a                	je     c001a214 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001a20a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001a212:	66 90                	xchg   ax,ax
c001a214:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a219:	83 e0 04             	and    eax,0x4
c001a21c:	74 0a                	je     c001a228 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001a21e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001a226:	66 90                	xchg   ax,ax
c001a228:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a22d:	83 e0 08             	and    eax,0x8
c001a230:	74 0a                	je     c001a23c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001a232:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001a23a:	66 90                	xchg   ax,ax
c001a23c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a241:	83 e0 01             	and    eax,0x1
c001a244:	74 0a                	je     c001a250 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001a246:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001a24e:	66 90                	xchg   ax,ax
c001a250:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a255:	83 e0 02             	and    eax,0x2
c001a258:	74 0a                	je     c001a264 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001a25a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001a262:	66 90                	xchg   ax,ax
c001a264:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a269:	83 e0 04             	and    eax,0x4
c001a26c:	74 0a                	je     c001a278 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001a26e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001a276:	66 90                	xchg   ax,ax
c001a278:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a27d:	83 e0 08             	and    eax,0x8
c001a280:	74 0a                	je     c001a28c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001a282:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001a28a:	66 90                	xchg   ax,ax
c001a28c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a293:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001a29a:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a2a2:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a2aa:	83 ec 04             	sub    esp,0x4
c001a2ad:	52                   	push   edx
c001a2ae:	50                   	push   eax
c001a2af:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a2b3:	50                   	push   eax
c001a2b4:	e8 e1 c5 fe ff       	call   c000689a <f_chmod>
c001a2b9:	83 c4 10             	add    esp,0x10
c001a2bc:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a2c3:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a2ca:	85 c0                	test   eax,eax
c001a2cc:	75 0a                	jne    c001a2d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001a2ce:	b8 00 00 00 00       	mov    eax,0x0
c001a2d3:	eb 0b                	jmp    c001a2e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001a2d5:	8d 76 00             	lea    esi,[esi+0x0]
c001a2d8:	b8 01 00 00 00       	mov    eax,0x1
c001a2dd:	8d 76 00             	lea    esi,[esi+0x0]
c001a2e0:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a2e6:	c3                   	ret    
c001a2e7:	90                   	nop

c001a2e8 <FAT::rename(char const*, char const*)>:
c001a2e8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a2ee:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a2f6:	74 0c                	je     c001a304 <FAT::rename(char const*, char const*)+0x1c>
c001a2f8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a300:	75 0e                	jne    c001a310 <FAT::rename(char const*, char const*)+0x28>
c001a302:	66 90                	xchg   ax,ax
c001a304:	b8 04 00 00 00       	mov    eax,0x4
c001a309:	e9 9e 00 00 00       	jmp    c001a3ac <FAT::rename(char const*, char const*)+0xc4>
c001a30e:	66 90                	xchg   ax,ax
c001a310:	83 ec 08             	sub    esp,0x8
c001a313:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a31a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a321:	50                   	push   eax
c001a322:	e8 3d 62 fe ff       	call   c0000564 <strcpy>
c001a327:	83 c4 10             	add    esp,0x10
c001a32a:	83 ec 08             	sub    esp,0x8
c001a32d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a334:	50                   	push   eax
c001a335:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a33c:	e8 ab fa ff ff       	call   c0019dec <FAT::fixFilepath(char*)>
c001a341:	83 c4 10             	add    esp,0x10
c001a344:	83 ec 08             	sub    esp,0x8
c001a347:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a34e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a352:	50                   	push   eax
c001a353:	e8 0c 62 fe ff       	call   c0000564 <strcpy>
c001a358:	83 c4 10             	add    esp,0x10
c001a35b:	83 ec 08             	sub    esp,0x8
c001a35e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a362:	50                   	push   eax
c001a363:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a36a:	e8 7d fa ff ff       	call   c0019dec <FAT::fixFilepath(char*)>
c001a36f:	83 c4 10             	add    esp,0x10
c001a372:	83 ec 08             	sub    esp,0x8
c001a375:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a379:	50                   	push   eax
c001a37a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a381:	50                   	push   eax
c001a382:	e8 20 c2 fe ff       	call   c00065a7 <f_rename>
c001a387:	83 c4 10             	add    esp,0x10
c001a38a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a391:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a398:	85 c0                	test   eax,eax
c001a39a:	75 08                	jne    c001a3a4 <FAT::rename(char const*, char const*)+0xbc>
c001a39c:	b8 00 00 00 00       	mov    eax,0x0
c001a3a1:	eb 09                	jmp    c001a3ac <FAT::rename(char const*, char const*)+0xc4>
c001a3a3:	90                   	nop
c001a3a4:	b8 01 00 00 00       	mov    eax,0x1
c001a3a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a3ac:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a3b2:	c3                   	ret    
c001a3b3:	90                   	nop

c001a3b4 <FAT::mkdir(char const*)>:
c001a3b4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a3ba:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a3c2:	75 08                	jne    c001a3cc <FAT::mkdir(char const*)+0x18>
c001a3c4:	b8 04 00 00 00       	mov    eax,0x4
c001a3c9:	eb 61                	jmp    c001a42c <FAT::mkdir(char const*)+0x78>
c001a3cb:	90                   	nop
c001a3cc:	83 ec 08             	sub    esp,0x8
c001a3cf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a3d6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a3da:	50                   	push   eax
c001a3db:	e8 84 61 fe ff       	call   c0000564 <strcpy>
c001a3e0:	83 c4 10             	add    esp,0x10
c001a3e3:	83 ec 08             	sub    esp,0x8
c001a3e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a3ea:	50                   	push   eax
c001a3eb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a3f2:	e8 f5 f9 ff ff       	call   c0019dec <FAT::fixFilepath(char*)>
c001a3f7:	83 c4 10             	add    esp,0x10
c001a3fa:	83 ec 0c             	sub    esp,0xc
c001a3fd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a401:	50                   	push   eax
c001a402:	e8 74 bf fe ff       	call   c000637b <f_mkdir>
c001a407:	83 c4 10             	add    esp,0x10
c001a40a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a411:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a418:	85 c0                	test   eax,eax
c001a41a:	75 08                	jne    c001a424 <FAT::mkdir(char const*)+0x70>
c001a41c:	b8 00 00 00 00       	mov    eax,0x0
c001a421:	eb 09                	jmp    c001a42c <FAT::mkdir(char const*)+0x78>
c001a423:	90                   	nop
c001a424:	b8 01 00 00 00       	mov    eax,0x1
c001a429:	8d 76 00             	lea    esi,[esi+0x0]
c001a42c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a432:	c3                   	ret    
c001a433:	90                   	nop

c001a434 <FAT::exists(char const*)>:
c001a434:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a43a:	83 ec 08             	sub    esp,0x8
c001a43d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a444:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a448:	50                   	push   eax
c001a449:	e8 16 61 fe ff       	call   c0000564 <strcpy>
c001a44e:	83 c4 10             	add    esp,0x10
c001a451:	83 ec 08             	sub    esp,0x8
c001a454:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a458:	50                   	push   eax
c001a459:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a460:	e8 87 f9 ff ff       	call   c0019dec <FAT::fixFilepath(char*)>
c001a465:	83 c4 10             	add    esp,0x10
c001a468:	83 ec 08             	sub    esp,0x8
c001a46b:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001a472:	50                   	push   eax
c001a473:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a477:	50                   	push   eax
c001a478:	e8 29 ba fe ff       	call   c0005ea6 <f_stat>
c001a47d:	83 c4 10             	add    esp,0x10
c001a480:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a487:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a48e:	85 c0                	test   eax,eax
c001a490:	75 06                	jne    c001a498 <FAT::exists(char const*)+0x64>
c001a492:	b0 01                	mov    al,0x1
c001a494:	eb 06                	jmp    c001a49c <FAT::exists(char const*)+0x68>
c001a496:	66 90                	xchg   ax,ax
c001a498:	b0 00                	mov    al,0x0
c001a49a:	66 90                	xchg   ax,ax
c001a49c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a4a2:	c3                   	ret    
c001a4a3:	90                   	nop

c001a4a4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a4a4:	b8 08 00 00 00       	mov    eax,0x8
c001a4a9:	c3                   	ret    

c001a4aa <ISO9660::seek(void*, unsigned long long)>:
c001a4aa:	53                   	push   ebx
c001a4ab:	b8 04 00 00 00       	mov    eax,0x4
c001a4b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a4b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a4b8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a4bc:	85 d2                	test   edx,edx
c001a4be:	74 17                	je     c001a4d7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001a4c0:	89 c8                	mov    eax,ecx
c001a4c2:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001a4c5:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001a4c8:	b8 01 00 00 00       	mov    eax,0x1
c001a4cd:	73 08                	jae    c001a4d7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001a4cf:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001a4d2:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001a4d5:	31 c0                	xor    eax,eax
c001a4d7:	5b                   	pop    ebx
c001a4d8:	c3                   	ret    
c001a4d9:	90                   	nop

c001a4da <ISO9660::tell(void*, unsigned long long*)>:
c001a4da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a4de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4e2:	85 d2                	test   edx,edx
c001a4e4:	74 12                	je     c001a4f8 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001a4e6:	85 c0                	test   eax,eax
c001a4e8:	74 0e                	je     c001a4f8 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001a4ea:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a4ed:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001a4f0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001a4f3:	89 10                	mov    DWORD PTR [eax],edx
c001a4f5:	31 c0                	xor    eax,eax
c001a4f7:	c3                   	ret    
c001a4f8:	b8 04 00 00 00       	mov    eax,0x4
c001a4fd:	c3                   	ret    

c001a4fe <ISO9660::getName()>:
c001a4fe:	b8 c0 22 02 c0       	mov    eax,0xc00222c0
c001a503:	c3                   	ret    

c001a504 <ISO9660::stat(void*, unsigned long long*)>:
c001a504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a508:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a50c:	85 d2                	test   edx,edx
c001a50e:	74 12                	je     c001a522 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001a510:	85 c0                	test   eax,eax
c001a512:	74 0e                	je     c001a522 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001a514:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001a517:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001a51a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001a51d:	89 10                	mov    DWORD PTR [eax],edx
c001a51f:	31 c0                	xor    eax,eax
c001a521:	c3                   	ret    
c001a522:	b8 04 00 00 00       	mov    eax,0x4
c001a527:	c3                   	ret    

c001a528 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a528:	b8 01 00 00 00       	mov    eax,0x1
c001a52d:	c3                   	ret    

c001a52e <ISO9660::unlink(char const*)>:
c001a52e:	b8 01 00 00 00       	mov    eax,0x1
c001a533:	c3                   	ret    

c001a534 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a534:	b8 01 00 00 00       	mov    eax,0x1
c001a539:	c3                   	ret    

c001a53a <ISO9660::rename(char const*, char const*)>:
c001a53a:	b8 01 00 00 00       	mov    eax,0x1
c001a53f:	c3                   	ret    

c001a540 <ISO9660::mkdir(char const*)>:
c001a540:	b8 01 00 00 00       	mov    eax,0x1
c001a545:	c3                   	ret    

c001a546 <ISO9660::close(void*)>:
c001a546:	83 ec 0c             	sub    esp,0xc
c001a549:	b8 04 00 00 00       	mov    eax,0x4
c001a54e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a552:	85 d2                	test   edx,edx
c001a554:	74 0e                	je     c001a564 <ISO9660::close(void*)+0x1e>
c001a556:	83 ec 0c             	sub    esp,0xc
c001a559:	52                   	push   edx
c001a55a:	e8 22 f2 fe ff       	call   c0009781 <free>
c001a55f:	83 c4 10             	add    esp,0x10
c001a562:	31 c0                	xor    eax,eax
c001a564:	83 c4 0c             	add    esp,0xc
c001a567:	c3                   	ret    

c001a568 <ISO9660::closeDir(void*)>:
c001a568:	83 ec 0c             	sub    esp,0xc
c001a56b:	b8 04 00 00 00       	mov    eax,0x4
c001a570:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a574:	85 d2                	test   edx,edx
c001a576:	74 0e                	je     c001a586 <ISO9660::closeDir(void*)+0x1e>
c001a578:	83 ec 0c             	sub    esp,0xc
c001a57b:	52                   	push   edx
c001a57c:	e8 00 f2 fe ff       	call   c0009781 <free>
c001a581:	83 c4 10             	add    esp,0x10
c001a584:	31 c0                	xor    eax,eax
c001a586:	83 c4 0c             	add    esp,0xc
c001a589:	c3                   	ret    

c001a58a <ISO9660::~ISO9660()>:
c001a58a:	83 ec 0c             	sub    esp,0xc
c001a58d:	ba e4 22 02 c0       	mov    edx,0xc00222e4
c001a592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a596:	89 10                	mov    DWORD PTR [eax],edx
c001a598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a59c:	83 ec 0c             	sub    esp,0xc
c001a59f:	50                   	push   eax
c001a5a0:	e8 91 22 ff ff       	call   c000c836 <Filesystem::~Filesystem()>
c001a5a5:	83 c4 10             	add    esp,0x10
c001a5a8:	90                   	nop
c001a5a9:	83 c4 0c             	add    esp,0xc
c001a5ac:	c3                   	ret    
c001a5ad:	90                   	nop

c001a5ae <ISO9660::~ISO9660()>:
c001a5ae:	83 ec 0c             	sub    esp,0xc
c001a5b1:	83 ec 0c             	sub    esp,0xc
c001a5b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5b8:	e8 cd ff ff ff       	call   c001a58a <ISO9660::~ISO9660()>
c001a5bd:	83 c4 10             	add    esp,0x10
c001a5c0:	83 ec 08             	sub    esp,0x8
c001a5c3:	6a 08                	push   0x8
c001a5c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5c9:	e8 4c 1e ff ff       	call   c000c41a <operator delete(void*, unsigned long)>
c001a5ce:	83 c4 10             	add    esp,0x10
c001a5d1:	83 c4 0c             	add    esp,0xc
c001a5d4:	c3                   	ret    

c001a5d5 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001a5d5:	55                   	push   ebp
c001a5d6:	31 c9                	xor    ecx,ecx
c001a5d8:	57                   	push   edi
c001a5d9:	56                   	push   esi
c001a5da:	53                   	push   ebx
c001a5db:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001a5df:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a5e3:	89 eb                	mov    ebx,ebp
c001a5e5:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001a5e9:	39 ce                	cmp    esi,ecx
c001a5eb:	7e 17                	jle    c001a604 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001a5ed:	31 d2                	xor    edx,edx
c001a5ef:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001a5f3:	7d 13                	jge    c001a608 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001a5f5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a5f9:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a5fc:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001a5ff:	75 0d                	jne    c001a60e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001a601:	42                   	inc    edx
c001a602:	eb eb                	jmp    c001a5ef <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001a604:	31 c0                	xor    eax,eax
c001a606:	eb 0a                	jmp    c001a612 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001a608:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001a60c:	eb 04                	jmp    c001a612 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001a60e:	41                   	inc    ecx
c001a60f:	43                   	inc    ebx
c001a610:	eb d7                	jmp    c001a5e9 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001a612:	5b                   	pop    ebx
c001a613:	5e                   	pop    esi
c001a614:	5f                   	pop    edi
c001a615:	5d                   	pop    ebp
c001a616:	c3                   	ret    

c001a617 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a617:	57                   	push   edi
c001a618:	56                   	push   esi
c001a619:	53                   	push   ebx
c001a61a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a61e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a622:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a626:	39 35 c0 68 02 c0    	cmp    DWORD PTR ds:0xc00268c0,esi
c001a62c:	75 08                	jne    c001a636 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001a62e:	38 1d f4 2b 02 c0    	cmp    BYTE PTR ds:0xc0022bf4,bl
c001a634:	74 4a                	je     c001a680 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001a636:	83 ec 0c             	sub    esp,0xc
c001a639:	31 d2                	xor    edx,edx
c001a63b:	68 e0 68 02 c0       	push   0xc00268e0
c001a640:	0f be c3             	movsx  eax,bl
c001a643:	6a 01                	push   0x1
c001a645:	52                   	push   edx
c001a646:	56                   	push   esi
c001a647:	ff 34 85 3c 56 02 c0 	push   DWORD PTR [eax*4-0x3ffda9c4]
c001a64e:	e8 4b 45 ff ff       	call   c000eb9e <LogicalDisk::read(unsigned long long, int, void*)>
c001a653:	83 c4 20             	add    esp,0x20
c001a656:	85 c0                	test   eax,eax
c001a658:	75 0e                	jne    c001a668 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001a65a:	89 35 c0 68 02 c0    	mov    DWORD PTR ds:0xc00268c0,esi
c001a660:	88 1d f4 2b 02 c0    	mov    BYTE PTR ds:0xc0022bf4,bl
c001a666:	eb 18                	jmp    c001a680 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001a668:	50                   	push   eax
c001a669:	68 00 08 00 00       	push   0x800
c001a66e:	6a 00                	push   0x0
c001a670:	57                   	push   edi
c001a671:	e8 32 5e fe ff       	call   c00004a8 <memset>
c001a676:	83 c4 10             	add    esp,0x10
c001a679:	b8 01 00 00 00       	mov    eax,0x1
c001a67e:	eb 0e                	jmp    c001a68e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001a680:	be e0 68 02 c0       	mov    esi,0xc00268e0
c001a685:	b9 00 08 00 00       	mov    ecx,0x800
c001a68a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a68c:	31 c0                	xor    eax,eax
c001a68e:	5b                   	pop    ebx
c001a68f:	5e                   	pop    esi
c001a690:	5f                   	pop    edi
c001a691:	c3                   	ret    

c001a692 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a692:	81 ec 10 08 00 00    	sub    esp,0x810
c001a698:	c7 05 c0 68 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc00268c0,0xdeadbeef
c001a6a2:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001a6a9:	83 c0 41             	add    eax,0x41
c001a6ac:	0f be c0             	movsx  eax,al
c001a6af:	50                   	push   eax
c001a6b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a6b4:	50                   	push   eax
c001a6b5:	6a 10                	push   0x10
c001a6b7:	e8 5b ff ff ff       	call   c001a617 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a6bc:	83 c4 10             	add    esp,0x10
c001a6bf:	31 d2                	xor    edx,edx
c001a6c1:	85 c0                	test   eax,eax
c001a6c3:	75 24                	jne    c001a6e9 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001a6c5:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a6ca:	75 1d                	jne    c001a6e9 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001a6cc:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a6d1:	75 16                	jne    c001a6e9 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001a6d3:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a6d8:	75 0f                	jne    c001a6e9 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001a6da:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a6df:	75 08                	jne    c001a6e9 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001a6e1:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a6e6:	0f 94 c2             	sete   dl
c001a6e9:	88 d0                	mov    al,dl
c001a6eb:	81 c4 0c 08 00 00    	add    esp,0x80c
c001a6f1:	c3                   	ret    

c001a6f2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a6f2:	55                   	push   ebp
c001a6f3:	57                   	push   edi
c001a6f4:	56                   	push   esi
c001a6f5:	53                   	push   ebx
c001a6f6:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001a6fc:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001a703:	85 ed                	test   ebp,ebp
c001a705:	0f 84 da 01 00 00    	je     c001a8e5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001a70b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001a713:	0f 84 cc 01 00 00    	je     c001a8e5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001a719:	b8 01 00 00 00       	mov    eax,0x1
c001a71e:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001a722:	0f 85 c2 01 00 00    	jne    c001a8ea <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001a728:	31 d2                	xor    edx,edx
c001a72a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a731:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001a734:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001a737:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a73a:	89 04 24             	mov    DWORD PTR [esp],eax
c001a73d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a741:	01 c8                	add    eax,ecx
c001a743:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001a746:	11 da                	adc    edx,ebx
c001a748:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a74c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001a750:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001a754:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001a758:	19 d7                	sbb    edi,edx
c001a75a:	72 11                	jb     c001a76d <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001a75c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001a75f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001a763:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a767:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a76b:	eb 0c                	jmp    c001a779 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001a76d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001a771:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001a775:	29 ce                	sub    esi,ecx
c001a777:	19 df                	sbb    edi,ebx
c001a779:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a77c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001a77f:	0f a4 c2 0b          	shld   edx,eax,0xb
c001a783:	c1 e0 0b             	shl    eax,0xb
c001a786:	01 c8                	add    eax,ecx
c001a788:	11 da                	adc    edx,ebx
c001a78a:	89 04 24             	mov    DWORD PTR [esp],eax
c001a78d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a791:	51                   	push   ecx
c001a792:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001a796:	50                   	push   eax
c001a797:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001a79b:	53                   	push   ebx
c001a79c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a7a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a7a4:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a7a8:	50                   	push   eax
c001a7a9:	e8 69 fe ff ff       	call   c001a617 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a7ae:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001a7b1:	b8 00 08 00 00       	mov    eax,0x800
c001a7b6:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001a7bc:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001a7c0:	29 d0                	sub    eax,edx
c001a7c2:	83 c4 10             	add    esp,0x10
c001a7c5:	89 f9                	mov    ecx,edi
c001a7c7:	39 c6                	cmp    esi,eax
c001a7c9:	83 d9 00             	sbb    ecx,0x0
c001a7cc:	7d 1b                	jge    c001a7e9 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001a7ce:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a7d3:	75 12                	jne    c001a7e7 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001a7d5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a7dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a7e2:	e9 fa 00 00 00       	jmp    c001a8e1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001a7e7:	89 f0                	mov    eax,esi
c001a7e9:	01 d3                	add    ebx,edx
c001a7eb:	31 d2                	xor    edx,edx
c001a7ed:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001a7f1:	39 c2                	cmp    edx,eax
c001a7f3:	7d 14                	jge    c001a809 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001a7f5:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001a7fc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a800:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001a803:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001a806:	42                   	inc    edx
c001a807:	eb e8                	jmp    c001a7f1 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001a809:	89 c2                	mov    edx,eax
c001a80b:	85 c0                	test   eax,eax
c001a80d:	79 02                	jns    c001a811 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001a80f:	31 d2                	xor    edx,edx
c001a811:	01 c2                	add    edx,eax
c001a813:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001a816:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001a81d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001a821:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a825:	99                   	cdq    
c001a826:	01 c1                	add    ecx,eax
c001a828:	11 d3                	adc    ebx,edx
c001a82a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a82e:	29 c6                	sub    esi,eax
c001a830:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a834:	19 d7                	sbb    edi,edx
c001a836:	89 34 24             	mov    DWORD PTR [esp],esi
c001a839:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001a83d:	b8 ff 07 00 00       	mov    eax,0x7ff
c001a842:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001a845:	b8 00 00 00 00       	mov    eax,0x0
c001a84a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a84e:	7d 43                	jge    c001a893 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001a850:	52                   	push   edx
c001a851:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001a855:	50                   	push   eax
c001a856:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a85a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a85e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a862:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a866:	50                   	push   eax
c001a867:	e8 ab fd ff ff       	call   c001a617 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a86c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001a874:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001a879:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001a881:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001a889:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001a88e:	83 c4 10             	add    esp,0x10
c001a891:	eb aa                	jmp    c001a83d <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001a893:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a897:	0b 04 24             	or     eax,DWORD PTR [esp]
c001a89a:	74 2a                	je     c001a8c6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001a89c:	50                   	push   eax
c001a89d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001a8a1:	50                   	push   eax
c001a8a2:	8d 74 24 28          	lea    esi,[esp+0x28]
c001a8a6:	56                   	push   esi
c001a8a7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a8ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a8af:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001a8b3:	51                   	push   ecx
c001a8b4:	e8 5e fd ff ff       	call   c001a617 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a8b9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a8bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a8c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a8c3:	83 c4 10             	add    esp,0x10
c001a8c6:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a8cd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a8d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a8d5:	89 18                	mov    DWORD PTR [eax],ebx
c001a8d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8db:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001a8de:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001a8e1:	31 c0                	xor    eax,eax
c001a8e3:	eb 05                	jmp    c001a8ea <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001a8e5:	b8 04 00 00 00       	mov    eax,0x4
c001a8ea:	81 c4 2c 08 00 00    	add    esp,0x82c
c001a8f0:	5b                   	pop    ebx
c001a8f1:	5e                   	pop    esi
c001a8f2:	5f                   	pop    edi
c001a8f3:	5d                   	pop    ebp
c001a8f4:	c3                   	ret    
c001a8f5:	90                   	nop

c001a8f6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a8f6:	55                   	push   ebp
c001a8f7:	57                   	push   edi
c001a8f8:	56                   	push   esi
c001a8f9:	53                   	push   ebx
c001a8fa:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001a900:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001a907:	85 ed                	test   ebp,ebp
c001a909:	0f 84 51 02 00 00    	je     c001ab60 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001a90f:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001a917:	0f 84 43 02 00 00    	je     c001ab60 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001a91d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001a920:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001a923:	75 0a                	jne    c001a92f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001a925:	b8 07 00 00 00       	mov    eax,0x7
c001a92a:	e9 36 02 00 00       	jmp    c001ab65 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001a92f:	50                   	push   eax
c001a930:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001a934:	50                   	push   eax
c001a935:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a93c:	53                   	push   ebx
c001a93d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a940:	c1 e0 0b             	shl    eax,0xb
c001a943:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001a946:	c1 e8 0b             	shr    eax,0xb
c001a949:	50                   	push   eax
c001a94a:	e8 c8 fc ff ff       	call   c001a617 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a94f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001a952:	83 c4 10             	add    esp,0x10
c001a955:	89 c1                	mov    ecx,eax
c001a957:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001a95a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a960:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001a963:	84 db                	test   bl,bl
c001a965:	0f 85 8b 00 00 00    	jne    c001a9f6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001a96b:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001a971:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001a974:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001a97a:	29 c6                	sub    esi,eax
c001a97c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001a980:	89 f3                	mov    ebx,esi
c001a982:	89 f1                	mov    ecx,esi
c001a984:	c1 fb 1f             	sar    ebx,0x1f
c001a987:	01 f0                	add    eax,esi
c001a989:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001a98c:	11 da                	adc    edx,ebx
c001a98e:	89 04 24             	mov    DWORD PTR [esp],eax
c001a991:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a995:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001a998:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001a99b:	89 d8                	mov    eax,ebx
c001a99d:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001a9a1:	ba 00 00 00 00       	mov    edx,0x0
c001a9a6:	19 f8                	sbb    eax,edi
c001a9a8:	b8 00 00 00 00       	mov    eax,0x0
c001a9ad:	73 08                	jae    c001a9b7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001a9af:	89 f0                	mov    eax,esi
c001a9b1:	89 fa                	mov    edx,edi
c001a9b3:	29 c8                	sub    eax,ecx
c001a9b5:	19 da                	sbb    edx,ebx
c001a9b7:	89 d7                	mov    edi,edx
c001a9b9:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001a9bc:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001a9bf:	09 c7                	or     edi,eax
c001a9c1:	0f 84 5e ff ff ff    	je     c001a925 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001a9c7:	57                   	push   edi
c001a9c8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001a9cc:	50                   	push   eax
c001a9cd:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a9d4:	53                   	push   ebx
c001a9d5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a9d8:	c1 e0 0b             	shl    eax,0xb
c001a9db:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001a9df:	c1 e8 0b             	shr    eax,0xb
c001a9e2:	50                   	push   eax
c001a9e3:	e8 2f fc ff ff       	call   c001a617 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a9e8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001a9eb:	83 c4 10             	add    esp,0x10
c001a9ee:	25 ff 07 00 00       	and    eax,0x7ff
c001a9f3:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001a9f6:	31 ff                	xor    edi,edi
c001a9f8:	56                   	push   esi
c001a9f9:	6a 28                	push   0x28
c001a9fb:	6a 00                	push   0x0
c001a9fd:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aa01:	50                   	push   eax
c001aa02:	e8 a1 5a fe ff       	call   c00004a8 <memset>
c001aa07:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001aa0a:	25 ff 07 00 00       	and    eax,0x7ff
c001aa0f:	89 c6                	mov    esi,eax
c001aa11:	83 c6 21             	add    esi,0x21
c001aa14:	83 d7 00             	adc    edi,0x0
c001aa17:	83 c4 10             	add    esp,0x10
c001aa1a:	31 c9                	xor    ecx,ecx
c001aa1c:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001aa23:	83 f9 28             	cmp    ecx,0x28
c001aa26:	88 04 24             	mov    BYTE PTR [esp],al
c001aa29:	0f 94 c2             	sete   dl
c001aa2c:	88 d0                	mov    al,dl
c001aa2e:	ba ff 07 00 00       	mov    edx,0x7ff
c001aa33:	39 f2                	cmp    edx,esi
c001aa35:	ba 00 00 00 00       	mov    edx,0x0
c001aa3a:	19 fa                	sbb    edx,edi
c001aa3c:	0f 92 c2             	setb   dl
c001aa3f:	09 c2                	or     edx,eax
c001aa41:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001aa45:	0f 94 c0             	sete   al
c001aa48:	08 d0                	or     al,dl
c001aa4a:	75 16                	jne    c001aa62 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001aa4c:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001aa50:	74 10                	je     c001aa62 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001aa52:	8a 04 24             	mov    al,BYTE PTR [esp]
c001aa55:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001aa59:	41                   	inc    ecx
c001aa5a:	83 c6 01             	add    esi,0x1
c001aa5d:	83 d7 00             	adc    edi,0x0
c001aa60:	eb ba                	jmp    c001aa1c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001aa62:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001aa69:	83 ec 0c             	sub    esp,0xc
c001aa6c:	8d 74 24 24          	lea    esi,[esp+0x24]
c001aa70:	56                   	push   esi
c001aa71:	e8 4e 5a fe ff       	call   c00004c4 <strlen>
c001aa76:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001aa7d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001aa81:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001aa89:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001aa8c:	5a                   	pop    edx
c001aa8d:	25 ff 07 00 00       	and    eax,0x7ff
c001aa92:	59                   	pop    ecx
c001aa93:	01 f8                	add    eax,edi
c001aa95:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001aa9b:	83 e0 02             	and    eax,0x2
c001aa9e:	3c 01                	cmp    al,0x1
c001aaa0:	19 c0                	sbb    eax,eax
c001aaa2:	83 c0 02             	add    eax,0x2
c001aaa5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001aaa9:	56                   	push   esi
c001aaaa:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001aaae:	50                   	push   eax
c001aaaf:	e8 b0 5a fe ff       	call   c0000564 <strcpy>
c001aab4:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001aab8:	83 c4 10             	add    esp,0x10
c001aabb:	84 c0                	test   al,al
c001aabd:	75 21                	jne    c001aae0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001aabf:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001aac7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001aacf:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001aad7:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001aade:	eb 28                	jmp    c001ab08 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001aae0:	fe c8                	dec    al
c001aae2:	75 24                	jne    c001ab08 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001aae4:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001aaec:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001aaf4:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001aafc:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001ab03:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001ab08:	8d 74 24 40          	lea    esi,[esp+0x40]
c001ab0c:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001ab13:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001ab1a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab1c:	0f b6 f3             	movzx  esi,bl
c001ab1f:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001ab26:	31 db                	xor    ebx,ebx
c001ab28:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001ab2e:	89 df                	mov    edi,ebx
c001ab30:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001ab33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ab36:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001ab39:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ab3c:	39 c6                	cmp    esi,eax
c001ab3e:	19 d7                	sbb    edi,edx
c001ab40:	72 10                	jb     c001ab52 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001ab42:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001ab49:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001ab50:	eb 0a                	jmp    c001ab5c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001ab52:	29 f0                	sub    eax,esi
c001ab54:	19 da                	sbb    edx,ebx
c001ab56:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001ab59:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001ab5c:	31 c0                	xor    eax,eax
c001ab5e:	eb 05                	jmp    c001ab65 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001ab60:	b8 04 00 00 00       	mov    eax,0x4
c001ab65:	81 c4 5c 09 00 00    	add    esp,0x95c
c001ab6b:	5b                   	pop    ebx
c001ab6c:	5e                   	pop    esi
c001ab6d:	5f                   	pop    edi
c001ab6e:	5d                   	pop    ebp
c001ab6f:	c3                   	ret    

c001ab70 <readRoot(unsigned int*, unsigned int*, char)>:
c001ab70:	57                   	push   edi
c001ab71:	56                   	push   esi
c001ab72:	81 ec 38 08 00 00    	sub    esp,0x838
c001ab78:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001ab80:	50                   	push   eax
c001ab81:	8d 44 24 38          	lea    eax,[esp+0x38]
c001ab85:	50                   	push   eax
c001ab86:	6a 10                	push   0x10
c001ab88:	e8 8a fa ff ff       	call   c001a617 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ab8d:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001ab94:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001ab98:	b9 22 00 00 00       	mov    ecx,0x22
c001ab9d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab9f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001aba6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001abaa:	89 10                	mov    DWORD PTR [eax],edx
c001abac:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001abb3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001abb7:	89 10                	mov    DWORD PTR [eax],edx
c001abb9:	81 c4 44 08 00 00    	add    esp,0x844
c001abbf:	b0 01                	mov    al,0x1
c001abc1:	5e                   	pop    esi
c001abc2:	5f                   	pop    edi
c001abc3:	c3                   	ret    

c001abc4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001abc4:	55                   	push   ebp
c001abc5:	57                   	push   edi
c001abc6:	56                   	push   esi
c001abc7:	53                   	push   ebx
c001abc8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001abce:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001abd5:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001abdc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001abe0:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001abe4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001abe8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001abec:	75 03                	jne    c001abf1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001abee:	83 c3 02             	add    ebx,0x2
c001abf1:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001abf4:	75 03                	jne    c001abf9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001abf6:	43                   	inc    ebx
c001abf7:	eb f8                	jmp    c001abf1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001abf9:	52                   	push   edx
c001abfa:	68 00 01 00 00       	push   0x100
c001abff:	6a 00                	push   0x0
c001ac01:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ac05:	50                   	push   eax
c001ac06:	e8 9d 58 fe ff       	call   c00004a8 <memset>
c001ac0b:	83 c4 10             	add    esp,0x10
c001ac0e:	31 d2                	xor    edx,edx
c001ac10:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001ac13:	84 c0                	test   al,al
c001ac15:	74 21                	je     c001ac38 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001ac17:	3c 2f                	cmp    al,0x2f
c001ac19:	75 0b                	jne    c001ac26 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001ac1b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001ac1f:	bd 01 00 00 00       	mov    ebp,0x1
c001ac24:	eb 14                	jmp    c001ac3a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001ac26:	8d 48 9f             	lea    ecx,[eax-0x61]
c001ac29:	80 f9 19             	cmp    cl,0x19
c001ac2c:	77 03                	ja     c001ac31 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001ac2e:	83 e8 20             	sub    eax,0x20
c001ac31:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001ac35:	42                   	inc    edx
c001ac36:	eb d8                	jmp    c001ac10 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001ac38:	31 ed                	xor    ebp,ebp
c001ac3a:	83 ec 0c             	sub    esp,0xc
c001ac3d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001ac44:	e8 28 eb fe ff       	call   c0009771 <malloc>
c001ac49:	89 c6                	mov    esi,eax
c001ac4b:	89 c2                	mov    edx,eax
c001ac4d:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001ac54:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001ac5a:	c1 ef 0b             	shr    edi,0xb
c001ac5d:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001ac64:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001ac68:	83 c4 10             	add    esp,0x10
c001ac6b:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001ac70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac74:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001ac7b:	74 29                	je     c001aca6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001ac7d:	50                   	push   eax
c001ac7e:	57                   	push   edi
c001ac7f:	52                   	push   edx
c001ac80:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ac84:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ac8b:	e8 87 f9 ff ff       	call   c001a617 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ac90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac94:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001ac9b:	81 c2 00 08 00 00    	add    edx,0x800
c001aca1:	83 c4 10             	add    esp,0x10
c001aca4:	eb ca                	jmp    c001ac70 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001aca6:	83 ec 0c             	sub    esp,0xc
c001aca9:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001acad:	57                   	push   edi
c001acae:	e8 11 58 fe ff       	call   c00004c4 <strlen>
c001acb3:	50                   	push   eax
c001acb4:	57                   	push   edi
c001acb5:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001acbc:	56                   	push   esi
c001acbd:	e8 13 f9 ff ff       	call   c001a5d5 <__memmem(unsigned char*, int, unsigned char*, int)>
c001acc2:	83 c4 20             	add    esp,0x20
c001acc5:	85 c0                	test   eax,eax
c001acc7:	75 13                	jne    c001acdc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001acc9:	83 ec 0c             	sub    esp,0xc
c001accc:	56                   	push   esi
c001accd:	e8 af ea fe ff       	call   c0009781 <free>
c001acd2:	83 c4 10             	add    esp,0x10
c001acd5:	31 c0                	xor    eax,eax
c001acd7:	e9 b3 00 00 00       	jmp    c001ad8f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001acdc:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001ace0:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001ace4:	c1 e7 08             	shl    edi,0x8
c001ace7:	c1 e2 10             	shl    edx,0x10
c001acea:	09 d7                	or     edi,edx
c001acec:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001acf0:	09 d7                	or     edi,edx
c001acf2:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001acf6:	c1 e2 18             	shl    edx,0x18
c001acf9:	09 d7                	or     edi,edx
c001acfb:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001acff:	89 d1                	mov    ecx,edx
c001ad01:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001ad05:	c1 e1 08             	shl    ecx,0x8
c001ad08:	c1 e2 10             	shl    edx,0x10
c001ad0b:	09 ca                	or     edx,ecx
c001ad0d:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001ad11:	09 ca                	or     edx,ecx
c001ad13:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001ad17:	c1 e1 18             	shl    ecx,0x18
c001ad1a:	09 ca                	or     edx,ecx
c001ad1c:	89 e9                	mov    ecx,ebp
c001ad1e:	84 c9                	test   cl,cl
c001ad20:	74 3c                	je     c001ad5e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001ad22:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ad26:	83 ec 0c             	sub    esp,0xc
c001ad29:	56                   	push   esi
c001ad2a:	e8 52 ea fe ff       	call   c0009781 <free>
c001ad2f:	83 c4 0c             	add    esp,0xc
c001ad32:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ad39:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001ad3e:	50                   	push   eax
c001ad3f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ad46:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ad4d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad51:	52                   	push   edx
c001ad52:	57                   	push   edi
c001ad53:	53                   	push   ebx
c001ad54:	e8 6b fe ff ff       	call   c001abc4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001ad59:	83 c4 20             	add    esp,0x20
c001ad5c:	eb 31                	jmp    c001ad8f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001ad5e:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001ad61:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001ad68:	d0 e8                	shr    al,1
c001ad6a:	89 3b                	mov    DWORD PTR [ebx],edi
c001ad6c:	83 e0 01             	and    eax,0x1
c001ad6f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ad76:	83 ec 0c             	sub    esp,0xc
c001ad79:	89 13                	mov    DWORD PTR [ebx],edx
c001ad7b:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001ad82:	89 03                	mov    DWORD PTR [ebx],eax
c001ad84:	56                   	push   esi
c001ad85:	e8 f7 e9 fe ff       	call   c0009781 <free>
c001ad8a:	83 c4 10             	add    esp,0x10
c001ad8d:	b0 01                	mov    al,0x1
c001ad8f:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ad95:	5b                   	pop    ebx
c001ad96:	5e                   	pop    esi
c001ad97:	5f                   	pop    edi
c001ad98:	5d                   	pop    ebp
c001ad99:	c3                   	ret    

c001ad9a <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001ad9a:	55                   	push   ebp
c001ad9b:	57                   	push   edi
c001ad9c:	56                   	push   esi
c001ad9d:	53                   	push   ebx
c001ad9e:	83 ec 20             	sub    esp,0x20
c001ada1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ada5:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001ada9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001adad:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001adb5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001adbd:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001adc2:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001adc8:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001adce:	57                   	push   edi
c001adcf:	8d 44 24 14          	lea    eax,[esp+0x14]
c001add3:	50                   	push   eax
c001add4:	8d 44 24 14          	lea    eax,[esp+0x14]
c001add8:	50                   	push   eax
c001add9:	e8 92 fd ff ff       	call   c001ab70 <readRoot(unsigned int*, unsigned int*, char)>
c001adde:	5a                   	pop    edx
c001addf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ade3:	e8 dc 56 fe ff       	call   c00004c4 <strlen>
c001ade8:	83 c4 10             	add    esp,0x10
c001adeb:	83 f8 03             	cmp    eax,0x3
c001adee:	77 17                	ja     c001ae07 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001adf0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001adf4:	89 03                	mov    DWORD PTR [ebx],eax
c001adf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adfa:	89 06                	mov    DWORD PTR [esi],eax
c001adfc:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001ae03:	b0 01                	mov    al,0x1
c001ae05:	eb 19                	jmp    c001ae20 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001ae07:	50                   	push   eax
c001ae08:	55                   	push   ebp
c001ae09:	57                   	push   edi
c001ae0a:	56                   	push   esi
c001ae0b:	53                   	push   ebx
c001ae0c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ae10:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ae14:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ae18:	e8 a7 fd ff ff       	call   c001abc4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001ae1d:	83 c4 20             	add    esp,0x20
c001ae20:	83 c4 1c             	add    esp,0x1c
c001ae23:	5b                   	pop    ebx
c001ae24:	5e                   	pop    esi
c001ae25:	5f                   	pop    edi
c001ae26:	5d                   	pop    ebp
c001ae27:	c3                   	ret    

c001ae28 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001ae28:	57                   	push   edi
c001ae29:	56                   	push   esi
c001ae2a:	53                   	push   ebx
c001ae2b:	83 ec 10             	sub    esp,0x10
c001ae2e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ae32:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ae36:	85 ff                	test   edi,edi
c001ae38:	0f 84 8b 00 00 00    	je     c001aec9 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001ae3e:	85 f6                	test   esi,esi
c001ae40:	0f 84 83 00 00 00    	je     c001aec9 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001ae46:	b8 03 00 00 00       	mov    eax,0x3
c001ae4b:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001ae50:	75 7c                	jne    c001aece <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001ae52:	83 ec 0c             	sub    esp,0xc
c001ae55:	6a 1c                	push   0x1c
c001ae57:	e8 15 e9 fe ff       	call   c0009771 <malloc>
c001ae5c:	89 07                	mov    DWORD PTR [edi],eax
c001ae5e:	89 c3                	mov    ebx,eax
c001ae60:	58                   	pop    eax
c001ae61:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae65:	50                   	push   eax
c001ae66:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ae69:	50                   	push   eax
c001ae6a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ae6e:	50                   	push   eax
c001ae6f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ae73:	50                   	push   eax
c001ae74:	56                   	push   esi
c001ae75:	e8 20 ff ff ff       	call   c001ad9a <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ae7a:	83 c4 20             	add    esp,0x20
c001ae7d:	84 c0                	test   al,al
c001ae7f:	74 07                	je     c001ae88 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001ae81:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ae86:	74 0b                	je     c001ae93 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001ae88:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ae8c:	b8 01 00 00 00       	mov    eax,0x1
c001ae91:	eb 3b                	jmp    c001aece <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001ae93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae97:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ae9b:	89 03                	mov    DWORD PTR [ebx],eax
c001ae9d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001aea4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aea8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001aeaf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001aeb6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001aeb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001aec0:	8a 06                	mov    al,BYTE PTR [esi]
c001aec2:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001aec5:	31 c0                	xor    eax,eax
c001aec7:	eb 05                	jmp    c001aece <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001aec9:	b8 04 00 00 00       	mov    eax,0x4
c001aece:	83 c4 10             	add    esp,0x10
c001aed1:	5b                   	pop    ebx
c001aed2:	5e                   	pop    esi
c001aed3:	5f                   	pop    edi
c001aed4:	c3                   	ret    
c001aed5:	90                   	nop

c001aed6 <ISO9660::exists(char const*)>:
c001aed6:	83 ec 28             	sub    esp,0x28
c001aed9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aedd:	8d 54 24 18          	lea    edx,[esp+0x18]
c001aee1:	52                   	push   edx
c001aee2:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001aee5:	52                   	push   edx
c001aee6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001aeea:	52                   	push   edx
c001aeeb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001aeef:	52                   	push   edx
c001aef0:	50                   	push   eax
c001aef1:	e8 a4 fe ff ff       	call   c001ad9a <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001aef6:	83 c4 3c             	add    esp,0x3c
c001aef9:	c3                   	ret    

c001aefa <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001aefa:	56                   	push   esi
c001aefb:	53                   	push   ebx
c001aefc:	83 ec 14             	sub    esp,0x14
c001aeff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001af03:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001af07:	85 db                	test   ebx,ebx
c001af09:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001af0d:	0f 94 c2             	sete   dl
c001af10:	85 f6                	test   esi,esi
c001af12:	0f 94 c0             	sete   al
c001af15:	08 c2                	or     dl,al
c001af17:	75 68                	jne    c001af81 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001af19:	85 c9                	test   ecx,ecx
c001af1b:	74 64                	je     c001af81 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001af1d:	83 ec 0c             	sub    esp,0xc
c001af20:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001af23:	8d 44 24 18          	lea    eax,[esp+0x18]
c001af27:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001af2d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001af34:	50                   	push   eax
c001af35:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001af38:	50                   	push   eax
c001af39:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001af3d:	50                   	push   eax
c001af3e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001af42:	50                   	push   eax
c001af43:	51                   	push   ecx
c001af44:	e8 51 fe ff ff       	call   c001ad9a <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001af49:	83 c4 20             	add    esp,0x20
c001af4c:	ba 01 00 00 00       	mov    edx,0x1
c001af51:	84 c0                	test   al,al
c001af53:	74 31                	je     c001af86 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001af55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af59:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001af60:	89 03                	mov    DWORD PTR [ebx],eax
c001af62:	ba 00 00 00 00       	mov    edx,0x0
c001af67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af6b:	85 c0                	test   eax,eax
c001af6d:	0f 95 06             	setne  BYTE PTR [esi]
c001af70:	74 14                	je     c001af86 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001af72:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001af78:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001af7f:	eb 05                	jmp    c001af86 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001af81:	ba 04 00 00 00       	mov    edx,0x4
c001af86:	83 c4 14             	add    esp,0x14
c001af89:	89 d0                	mov    eax,edx
c001af8b:	5b                   	pop    ebx
c001af8c:	5e                   	pop    esi
c001af8d:	c3                   	ret    

c001af8e <ISO9660::openDir(char const*, void**)>:
c001af8e:	57                   	push   edi
c001af8f:	56                   	push   esi
c001af90:	53                   	push   ebx
c001af91:	83 ec 10             	sub    esp,0x10
c001af94:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001af98:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001af9c:	85 ff                	test   edi,edi
c001af9e:	74 7b                	je     c001b01b <ISO9660::openDir(char const*, void**)+0x8d>
c001afa0:	85 f6                	test   esi,esi
c001afa2:	74 77                	je     c001b01b <ISO9660::openDir(char const*, void**)+0x8d>
c001afa4:	83 ec 0c             	sub    esp,0xc
c001afa7:	6a 1c                	push   0x1c
c001afa9:	e8 c3 e7 fe ff       	call   c0009771 <malloc>
c001afae:	89 07                	mov    DWORD PTR [edi],eax
c001afb0:	89 c3                	mov    ebx,eax
c001afb2:	58                   	pop    eax
c001afb3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001afb7:	50                   	push   eax
c001afb8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001afbb:	50                   	push   eax
c001afbc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001afc0:	50                   	push   eax
c001afc1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001afc5:	50                   	push   eax
c001afc6:	56                   	push   esi
c001afc7:	e8 ce fd ff ff       	call   c001ad9a <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001afcc:	83 c4 20             	add    esp,0x20
c001afcf:	84 c0                	test   al,al
c001afd1:	74 07                	je     c001afda <ISO9660::openDir(char const*, void**)+0x4c>
c001afd3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001afd8:	75 0b                	jne    c001afe5 <ISO9660::openDir(char const*, void**)+0x57>
c001afda:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001afde:	b8 01 00 00 00       	mov    eax,0x1
c001afe3:	eb 3b                	jmp    c001b020 <ISO9660::openDir(char const*, void**)+0x92>
c001afe5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afe9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001afed:	89 03                	mov    DWORD PTR [ebx],eax
c001afef:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001aff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001affa:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001b001:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b00b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b012:	8a 06                	mov    al,BYTE PTR [esi]
c001b014:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001b017:	31 c0                	xor    eax,eax
c001b019:	eb 05                	jmp    c001b020 <ISO9660::openDir(char const*, void**)+0x92>
c001b01b:	b8 04 00 00 00       	mov    eax,0x4
c001b020:	83 c4 10             	add    esp,0x10
c001b023:	5b                   	pop    ebx
c001b024:	5e                   	pop    esi
c001b025:	5f                   	pop    edi
c001b026:	c3                   	ret    
c001b027:	90                   	nop

c001b028 <ISO9660::ISO9660()>:
c001b028:	83 ec 0c             	sub    esp,0xc
c001b02b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b02f:	83 ec 0c             	sub    esp,0xc
c001b032:	50                   	push   eax
c001b033:	e8 da 17 ff ff       	call   c000c812 <Filesystem::Filesystem()>
c001b038:	83 c4 10             	add    esp,0x10
c001b03b:	ba e4 22 02 c0       	mov    edx,0xc00222e4
c001b040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b044:	89 10                	mov    DWORD PTR [eax],edx
c001b046:	90                   	nop
c001b047:	83 c4 0c             	add    esp,0xc
c001b04a:	c3                   	ret    
c001b04b:	90                   	nop

c001b04c <SoundCard::beginPlayback()>:
c001b04c:	c7 44 24 04 44 23 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022344
c001b054:	e9 78 71 ff ff       	jmp    c00121d1 <Krnl::panic(char const*)>
c001b059:	90                   	nop

c001b05a <SoundCard::stopPlayback()>:
c001b05a:	c7 44 24 04 44 23 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022344
c001b062:	e9 6a 71 ff ff       	jmp    c00121d1 <Krnl::panic(char const*)>
c001b067:	90                   	nop

c001b068 <SoundCard::SoundCard(char const*)>:
c001b068:	83 ec 1c             	sub    esp,0x1c
c001b06b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b06f:	83 ec 08             	sub    esp,0x8
c001b072:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b076:	50                   	push   eax
c001b077:	e8 3a 2a ff ff       	call   c000dab6 <Device::Device(char const*)>
c001b07c:	83 c4 10             	add    esp,0x10
c001b07f:	ba 90 23 02 c0       	mov    edx,0xc0022390
c001b084:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b088:	89 10                	mov    DWORD PTR [eax],edx
c001b08a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b08e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b099:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001b0a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b0a7:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001b0b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b0b5:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001b0bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b0c3:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b0cd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b0d5:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b0da:	7f 19                	jg     c001b0f5 <SoundCard::SoundCard(char const*)+0x8d>
c001b0dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b0e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b0e4:	83 c2 54             	add    edx,0x54
c001b0e7:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001b0ef:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b0f3:	eb e0                	jmp    c001b0d5 <SoundCard::SoundCard(char const*)+0x6d>
c001b0f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b0f9:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b100:	90                   	nop
c001b101:	83 c4 1c             	add    esp,0x1c
c001b104:	c3                   	ret    
c001b105:	90                   	nop

c001b106 <SoundCard::~SoundCard()>:
c001b106:	83 ec 0c             	sub    esp,0xc
c001b109:	ba 90 23 02 c0       	mov    edx,0xc0022390
c001b10e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b112:	89 10                	mov    DWORD PTR [eax],edx
c001b114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b118:	83 ec 0c             	sub    esp,0xc
c001b11b:	50                   	push   eax
c001b11c:	e8 ff 26 ff ff       	call   c000d820 <Device::~Device()>
c001b121:	83 c4 10             	add    esp,0x10
c001b124:	90                   	nop
c001b125:	83 c4 0c             	add    esp,0xc
c001b128:	c3                   	ret    
c001b129:	90                   	nop

c001b12a <SoundCard::~SoundCard()>:
c001b12a:	83 ec 0c             	sub    esp,0xc
c001b12d:	83 ec 0c             	sub    esp,0xc
c001b130:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b134:	e8 cd ff ff ff       	call   c001b106 <SoundCard::~SoundCard()>
c001b139:	83 c4 10             	add    esp,0x10
c001b13c:	83 ec 08             	sub    esp,0x8
c001b13f:	68 e8 01 00 00       	push   0x1e8
c001b144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b148:	e8 cd 12 ff ff       	call   c000c41a <operator delete(void*, unsigned long)>
c001b14d:	83 c4 10             	add    esp,0x10
c001b150:	83 c4 0c             	add    esp,0xc
c001b153:	c3                   	ret    

c001b154 <SoundCard::configureRates(int, int, int)>:
c001b154:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b158:	31 c0                	xor    eax,eax
c001b15a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001b161:	75 20                	jne    c001b183 <SoundCard::configureRates(int, int, int)+0x2f>
c001b163:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b167:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001b16d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b171:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001b177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b17b:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001b181:	b0 01                	mov    al,0x1
c001b183:	c3                   	ret    

c001b184 <SoundCard::getSamples16(int, short*)>:
c001b184:	55                   	push   ebp
c001b185:	57                   	push   edi
c001b186:	31 ff                	xor    edi,edi
c001b188:	56                   	push   esi
c001b189:	53                   	push   ebx
c001b18a:	31 db                	xor    ebx,ebx
c001b18c:	83 ec 10             	sub    esp,0x10
c001b18f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b193:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b197:	8d 04 36             	lea    eax,[esi+esi*1]
c001b19a:	50                   	push   eax
c001b19b:	6a 00                	push   0x0
c001b19d:	55                   	push   ebp
c001b19e:	e8 05 53 fe ff       	call   c00004a8 <memset>
c001b1a3:	83 c4 10             	add    esp,0x10
c001b1a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1aa:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001b1b1:	85 c0                	test   eax,eax
c001b1b3:	74 1b                	je     c001b1d0 <SoundCard::getSamples16(int, short*)+0x4c>
c001b1b5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b1b9:	75 15                	jne    c001b1d0 <SoundCard::getSamples16(int, short*)+0x4c>
c001b1bb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b1bf:	55                   	push   ebp
c001b1c0:	56                   	push   esi
c001b1c1:	50                   	push   eax
c001b1c2:	e8 ed 02 00 00       	call   c001b4b4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001b1c7:	83 c4 10             	add    esp,0x10
c001b1ca:	39 c7                	cmp    edi,eax
c001b1cc:	7d 02                	jge    c001b1d0 <SoundCard::getSamples16(int, short*)+0x4c>
c001b1ce:	89 c7                	mov    edi,eax
c001b1d0:	43                   	inc    ebx
c001b1d1:	83 fb 20             	cmp    ebx,0x20
c001b1d4:	75 d0                	jne    c001b1a6 <SoundCard::getSamples16(int, short*)+0x22>
c001b1d6:	83 c4 0c             	add    esp,0xc
c001b1d9:	89 f8                	mov    eax,edi
c001b1db:	5b                   	pop    ebx
c001b1dc:	5e                   	pop    esi
c001b1dd:	5f                   	pop    edi
c001b1de:	5d                   	pop    ebp
c001b1df:	c3                   	ret    

c001b1e0 <SoundCard::getSamples32(int, int*)>:
c001b1e0:	55                   	push   ebp
c001b1e1:	57                   	push   edi
c001b1e2:	31 ff                	xor    edi,edi
c001b1e4:	56                   	push   esi
c001b1e5:	31 f6                	xor    esi,esi
c001b1e7:	53                   	push   ebx
c001b1e8:	83 ec 10             	sub    esp,0x10
c001b1eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b1ef:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b1f3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b1f7:	c1 e0 02             	shl    eax,0x2
c001b1fa:	50                   	push   eax
c001b1fb:	6a 00                	push   0x0
c001b1fd:	55                   	push   ebp
c001b1fe:	e8 a5 52 fe ff       	call   c00004a8 <memset>
c001b203:	83 c4 10             	add    esp,0x10
c001b206:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001b20d:	85 c0                	test   eax,eax
c001b20f:	74 1b                	je     c001b22c <SoundCard::getSamples32(int, int*)+0x4c>
c001b211:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b215:	75 15                	jne    c001b22c <SoundCard::getSamples32(int, int*)+0x4c>
c001b217:	53                   	push   ebx
c001b218:	55                   	push   ebp
c001b219:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b21d:	50                   	push   eax
c001b21e:	e8 55 03 00 00       	call   c001b578 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001b223:	83 c4 10             	add    esp,0x10
c001b226:	39 c6                	cmp    esi,eax
c001b228:	7d 02                	jge    c001b22c <SoundCard::getSamples32(int, int*)+0x4c>
c001b22a:	89 c6                	mov    esi,eax
c001b22c:	47                   	inc    edi
c001b22d:	83 ff 20             	cmp    edi,0x20
c001b230:	75 d4                	jne    c001b206 <SoundCard::getSamples32(int, int*)+0x26>
c001b232:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001b238:	85 f6                	test   esi,esi
c001b23a:	75 0f                	jne    c001b24b <SoundCard::getSamples32(int, int*)+0x6b>
c001b23c:	84 c0                	test   al,al
c001b23e:	74 1b                	je     c001b25b <SoundCard::getSamples32(int, int*)+0x7b>
c001b240:	83 ec 0c             	sub    esp,0xc
c001b243:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b245:	53                   	push   ebx
c001b246:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001b249:	eb 0d                	jmp    c001b258 <SoundCard::getSamples32(int, int*)+0x78>
c001b24b:	84 c0                	test   al,al
c001b24d:	75 0c                	jne    c001b25b <SoundCard::getSamples32(int, int*)+0x7b>
c001b24f:	83 ec 0c             	sub    esp,0xc
c001b252:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b254:	53                   	push   ebx
c001b255:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001b258:	83 c4 10             	add    esp,0x10
c001b25b:	83 c4 0c             	add    esp,0xc
c001b25e:	89 f0                	mov    eax,esi
c001b260:	5b                   	pop    ebx
c001b261:	5e                   	pop    esi
c001b262:	5f                   	pop    edi
c001b263:	5d                   	pop    ebp
c001b264:	c3                   	ret    
c001b265:	90                   	nop

c001b266 <SoundCard::addChannel(SoundPort*)>:
c001b266:	83 ec 0c             	sub    esp,0xc
c001b269:	31 c0                	xor    eax,eax
c001b26b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b26f:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001b277:	74 1b                	je     c001b294 <SoundCard::addChannel(SoundPort*)+0x2e>
c001b279:	40                   	inc    eax
c001b27a:	83 f8 20             	cmp    eax,0x20
c001b27d:	75 f0                	jne    c001b26f <SoundCard::addChannel(SoundPort*)+0x9>
c001b27f:	83 ec 0c             	sub    esp,0xc
c001b282:	68 69 23 02 c0       	push   0xc0022369
c001b287:	e8 45 6f ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001b28c:	83 c4 10             	add    esp,0x10
c001b28f:	83 c8 ff             	or     eax,0xffffffff
c001b292:	eb 0b                	jmp    c001b29f <SoundCard::addChannel(SoundPort*)+0x39>
c001b294:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b298:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001b29f:	83 c4 0c             	add    esp,0xc
c001b2a2:	c3                   	ret    
c001b2a3:	90                   	nop

c001b2a4 <SoundCard::removeChannel(int)>:
c001b2a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b2a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2ac:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001b2b7:	c3                   	ret    

c001b2b8 <SoundPort::SoundPort(int, int, int, int)>:
c001b2b8:	83 ec 0c             	sub    esp,0xc
c001b2bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2bf:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b2c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2ca:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b2ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b2d6:	89 10                	mov    DWORD PTR [eax],edx
c001b2d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b2e0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b2e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b2eb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b2ee:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001b2f3:	75 13                	jne    c001b308 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001b2f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2f9:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2fb:	05 a0 0f 00 00       	add    eax,0xfa0
c001b300:	01 c0                	add    eax,eax
c001b302:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b306:	66 90                	xchg   ax,ax
c001b308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b30c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b310:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001b313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b317:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001b31e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b322:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b325:	c1 e0 02             	shl    eax,0x2
c001b328:	83 ec 0c             	sub    esp,0xc
c001b32b:	50                   	push   eax
c001b32c:	e8 40 e4 fe ff       	call   c0009771 <malloc>
c001b331:	83 c4 10             	add    esp,0x10
c001b334:	89 c2                	mov    edx,eax
c001b336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b33a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001b33d:	90                   	nop
c001b33e:	83 c4 0c             	add    esp,0xc
c001b341:	c3                   	ret    
c001b342:	66 90                	xchg   ax,ax

c001b344 <SoundPort::~SoundPort()>:
c001b344:	83 ec 0c             	sub    esp,0xc
c001b347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b34b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b34e:	85 c0                	test   eax,eax
c001b350:	74 1e                	je     c001b370 <SoundPort::~SoundPort()+0x2c>
c001b352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b356:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b359:	83 ec 0c             	sub    esp,0xc
c001b35c:	50                   	push   eax
c001b35d:	e8 1f e4 fe ff       	call   c0009781 <free>
c001b362:	83 c4 10             	add    esp,0x10
c001b365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b369:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b370:	90                   	nop
c001b371:	83 c4 0c             	add    esp,0xc
c001b374:	c3                   	ret    
c001b375:	90                   	nop
c001b376:	66 90                	xchg   ax,ax

c001b378 <SoundPort::unpause()>:
c001b378:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b37c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001b380:	c3                   	ret    
c001b381:	90                   	nop
c001b382:	66 90                	xchg   ax,ax

c001b384 <SoundPort::pause()>:
c001b384:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b388:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b38c:	c3                   	ret    
c001b38d:	90                   	nop
c001b38e:	66 90                	xchg   ax,ax

c001b390 <SoundPort::getBufferUsed()>:
c001b390:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b394:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b397:	c3                   	ret    

c001b398 <SoundPort::getBufferSize()>:
c001b398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b39c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b39f:	c3                   	ret    

c001b3a0 <SoundPort::buffer16(short*, int)>:
c001b3a0:	55                   	push   ebp
c001b3a1:	57                   	push   edi
c001b3a2:	56                   	push   esi
c001b3a3:	53                   	push   ebx
c001b3a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b3a8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001b3ac:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001b3af:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001b3b2:	74 68                	je     c001b41c <SoundPort::buffer16(short*, int)+0x7c>
c001b3b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b3b8:	85 c9                	test   ecx,ecx
c001b3ba:	7e 60                	jle    c001b41c <SoundPort::buffer16(short*, int)+0x7c>
c001b3bc:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001b3c0:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b3c3:	c1 e1 0f             	shl    ecx,0xf
c001b3c6:	8d 70 01             	lea    esi,[eax+0x1]
c001b3c9:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b3cc:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001b3cf:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b3d2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b3d5:	74 4d                	je     c001b424 <SoundPort::buffer16(short*, int)+0x84>
c001b3d7:	31 f6                	xor    esi,esi
c001b3d9:	eb 21                	jmp    c001b3fc <SoundPort::buffer16(short*, int)+0x5c>
c001b3db:	90                   	nop
c001b3dc:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001b3e1:	8d 79 01             	lea    edi,[ecx+0x1]
c001b3e4:	c1 e3 0f             	shl    ebx,0xf
c001b3e7:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001b3ea:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001b3ed:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001b3f0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b3f3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b3f6:	74 1c                	je     c001b414 <SoundPort::buffer16(short*, int)+0x74>
c001b3f8:	89 c6                	mov    esi,eax
c001b3fa:	66 90                	xchg   ax,ax
c001b3fc:	8d 46 01             	lea    eax,[esi+0x1]
c001b3ff:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001b403:	75 d7                	jne    c001b3dc <SoundPort::buffer16(short*, int)+0x3c>
c001b405:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b409:	8d 76 00             	lea    esi,[esi+0x0]
c001b40c:	5b                   	pop    ebx
c001b40d:	5e                   	pop    esi
c001b40e:	5f                   	pop    edi
c001b40f:	5d                   	pop    ebp
c001b410:	c3                   	ret    
c001b411:	8d 76 00             	lea    esi,[esi+0x0]
c001b414:	5b                   	pop    ebx
c001b415:	8d 46 02             	lea    eax,[esi+0x2]
c001b418:	5e                   	pop    esi
c001b419:	5f                   	pop    edi
c001b41a:	5d                   	pop    ebp
c001b41b:	c3                   	ret    
c001b41c:	5b                   	pop    ebx
c001b41d:	31 c0                	xor    eax,eax
c001b41f:	5e                   	pop    esi
c001b420:	5f                   	pop    edi
c001b421:	5d                   	pop    ebp
c001b422:	c3                   	ret    
c001b423:	90                   	nop
c001b424:	b8 01 00 00 00       	mov    eax,0x1
c001b429:	eb e1                	jmp    c001b40c <SoundPort::buffer16(short*, int)+0x6c>
c001b42b:	90                   	nop

c001b42c <SoundPort::buffer32(int*, int)>:
c001b42c:	55                   	push   ebp
c001b42d:	57                   	push   edi
c001b42e:	56                   	push   esi
c001b42f:	53                   	push   ebx
c001b430:	51                   	push   ecx
c001b431:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b435:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b439:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b43c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b440:	89 04 24             	mov    DWORD PTR [esp],eax
c001b443:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b446:	74 5c                	je     c001b4a4 <SoundPort::buffer32(int*, int)+0x78>
c001b448:	85 c0                	test   eax,eax
c001b44a:	7e 58                	jle    c001b4a4 <SoundPort::buffer32(int*, int)+0x78>
c001b44c:	8d 71 01             	lea    esi,[ecx+0x1]
c001b44f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b452:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b455:	8b 37                	mov    esi,DWORD PTR [edi]
c001b457:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001b45a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b45d:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b460:	74 4a                	je     c001b4ac <SoundPort::buffer32(int*, int)+0x80>
c001b462:	31 f6                	xor    esi,esi
c001b464:	eb 1e                	jmp    c001b484 <SoundPort::buffer32(int*, int)+0x58>
c001b466:	66 90                	xchg   ax,ax
c001b468:	8d 69 01             	lea    ebp,[ecx+0x1]
c001b46b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001b46e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001b471:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b474:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001b478:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b47b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b47e:	74 18                	je     c001b498 <SoundPort::buffer32(int*, int)+0x6c>
c001b480:	89 de                	mov    esi,ebx
c001b482:	66 90                	xchg   ax,ax
c001b484:	8d 5e 01             	lea    ebx,[esi+0x1]
c001b487:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001b48a:	75 dc                	jne    c001b468 <SoundPort::buffer32(int*, int)+0x3c>
c001b48c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b48f:	90                   	nop
c001b490:	5a                   	pop    edx
c001b491:	5b                   	pop    ebx
c001b492:	5e                   	pop    esi
c001b493:	5f                   	pop    edi
c001b494:	5d                   	pop    ebp
c001b495:	c3                   	ret    
c001b496:	66 90                	xchg   ax,ax
c001b498:	5a                   	pop    edx
c001b499:	8d 46 02             	lea    eax,[esi+0x2]
c001b49c:	5b                   	pop    ebx
c001b49d:	5e                   	pop    esi
c001b49e:	5f                   	pop    edi
c001b49f:	5d                   	pop    ebp
c001b4a0:	c3                   	ret    
c001b4a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b4a4:	5a                   	pop    edx
c001b4a5:	31 c0                	xor    eax,eax
c001b4a7:	5b                   	pop    ebx
c001b4a8:	5e                   	pop    esi
c001b4a9:	5f                   	pop    edi
c001b4aa:	5d                   	pop    ebp
c001b4ab:	c3                   	ret    
c001b4ac:	b8 01 00 00 00       	mov    eax,0x1
c001b4b1:	eb dd                	jmp    c001b490 <SoundPort::buffer32(int*, int)+0x64>
c001b4b3:	90                   	nop

c001b4b4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b4b4:	57                   	push   edi
c001b4b5:	56                   	push   esi
c001b4b6:	53                   	push   ebx
c001b4b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b4bb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b4bf:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001b4c5:	39 03                	cmp    DWORD PTR [ebx],eax
c001b4c7:	74 13                	je     c001b4dc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001b4c9:	83 ec 0c             	sub    esp,0xc
c001b4cc:	68 bc 23 02 c0       	push   0xc00223bc
c001b4d1:	e8 fb 6c ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001b4d6:	83 c4 10             	add    esp,0x10
c001b4d9:	8d 76 00             	lea    esi,[esi+0x0]
c001b4dc:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001b4e2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b4e5:	74 11                	je     c001b4f8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001b4e7:	83 ec 0c             	sub    esp,0xc
c001b4ea:	68 fb 23 02 c0       	push   0xc00223fb
c001b4ef:	e8 dd 6c ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001b4f4:	83 c4 10             	add    esp,0x10
c001b4f7:	90                   	nop
c001b4f8:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001b4fe:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b501:	74 11                	je     c001b514 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001b503:	83 ec 0c             	sub    esp,0xc
c001b506:	68 fb 23 02 c0       	push   0xc00223fb
c001b50b:	e8 c1 6c ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001b510:	83 c4 10             	add    esp,0x10
c001b513:	90                   	nop
c001b514:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001b517:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001b51b:	7e 07                	jle    c001b524 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001b51d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b521:	8d 76 00             	lea    esi,[esi+0x0]
c001b524:	85 f6                	test   esi,esi
c001b526:	7e 2c                	jle    c001b554 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001b528:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b52c:	8d 3c 36             	lea    edi,[esi+esi*1]
c001b52f:	31 c9                	xor    ecx,ecx
c001b531:	01 d7                	add    edi,edx
c001b533:	90                   	nop
c001b534:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001b537:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001b53a:	85 c0                	test   eax,eax
c001b53c:	79 06                	jns    c001b544 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001b53e:	05 ff 7f 00 00       	add    eax,0x7fff
c001b543:	90                   	nop
c001b544:	c1 f8 0f             	sar    eax,0xf
c001b547:	83 c1 04             	add    ecx,0x4
c001b54a:	66 01 02             	add    WORD PTR [edx],ax
c001b54d:	83 c2 02             	add    edx,0x2
c001b550:	39 d7                	cmp    edi,edx
c001b552:	75 e0                	jne    c001b534 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001b554:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b557:	50                   	push   eax
c001b558:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b55b:	29 f0                	sub    eax,esi
c001b55d:	c1 e0 02             	shl    eax,0x2
c001b560:	50                   	push   eax
c001b561:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b564:	50                   	push   eax
c001b565:	52                   	push   edx
c001b566:	e8 75 4e fe ff       	call   c00003e0 <memmove>
c001b56b:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001b56e:	83 c4 10             	add    esp,0x10
c001b571:	89 f0                	mov    eax,esi
c001b573:	5b                   	pop    ebx
c001b574:	5e                   	pop    esi
c001b575:	5f                   	pop    edi
c001b576:	c3                   	ret    
c001b577:	90                   	nop

c001b578 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b578:	57                   	push   edi
c001b579:	56                   	push   esi
c001b57a:	53                   	push   ebx
c001b57b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b57f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b583:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b587:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001b58d:	39 06                	cmp    DWORD PTR [esi],eax
c001b58f:	74 13                	je     c001b5a4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001b591:	83 ec 0c             	sub    esp,0xc
c001b594:	68 dc 23 02 c0       	push   0xc00223dc
c001b599:	e8 33 6c ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001b59e:	83 c4 10             	add    esp,0x10
c001b5a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b5a4:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001b5aa:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001b5ad:	74 11                	je     c001b5c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001b5af:	83 ec 0c             	sub    esp,0xc
c001b5b2:	68 17 24 02 c0       	push   0xc0022417
c001b5b7:	e8 15 6c ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001b5bc:	83 c4 10             	add    esp,0x10
c001b5bf:	90                   	nop
c001b5c0:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001b5c6:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001b5c9:	74 11                	je     c001b5dc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001b5cb:	83 ec 0c             	sub    esp,0xc
c001b5ce:	68 17 24 02 c0       	push   0xc0022417
c001b5d3:	e8 f9 6b ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001b5d8:	83 c4 10             	add    esp,0x10
c001b5db:	90                   	nop
c001b5dc:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001b5df:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001b5e3:	7e 07                	jle    c001b5ec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001b5e5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b5e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b5ec:	85 ff                	test   edi,edi
c001b5ee:	7e 1c                	jle    c001b60c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001b5f0:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b5f7:	31 c0                	xor    eax,eax
c001b5f9:	8d 76 00             	lea    esi,[esi+0x0]
c001b5fc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b5ff:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b602:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001b605:	83 c0 04             	add    eax,0x4
c001b608:	39 c1                	cmp    ecx,eax
c001b60a:	75 f0                	jne    c001b5fc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001b60c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b60f:	50                   	push   eax
c001b610:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b613:	29 f8                	sub    eax,edi
c001b615:	c1 e0 02             	shl    eax,0x2
c001b618:	50                   	push   eax
c001b619:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b61c:	50                   	push   eax
c001b61d:	52                   	push   edx
c001b61e:	e8 bd 4d fe ff       	call   c00003e0 <memmove>
c001b623:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001b626:	83 c4 10             	add    esp,0x10
c001b629:	89 f8                	mov    eax,edi
c001b62b:	5b                   	pop    ebx
c001b62c:	5e                   	pop    esi
c001b62d:	5f                   	pop    edi
c001b62e:	c3                   	ret    
c001b62f:	90                   	nop

c001b630 <PCI::open(int, int, void*)>:
c001b630:	83 ec 18             	sub    esp,0x18
c001b633:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b637:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b63b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b641:	8b 10                	mov    edx,DWORD PTR [eax]
c001b643:	50                   	push   eax
c001b644:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b647:	31 c0                	xor    eax,eax
c001b649:	83 c4 1c             	add    esp,0x1c
c001b64c:	c3                   	ret    
c001b64d:	90                   	nop

c001b64e <PCI::close(int, int, void*)>:
c001b64e:	31 c0                	xor    eax,eax
c001b650:	c3                   	ret    
c001b651:	90                   	nop

c001b652 <PCI::PCI()>:
c001b652:	83 ec 0c             	sub    esp,0xc
c001b655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b659:	83 ec 08             	sub    esp,0x8
c001b65c:	68 33 24 02 c0       	push   0xc0022433
c001b661:	50                   	push   eax
c001b662:	e8 11 1c ff ff       	call   c000d278 <Bus::Bus(char const*)>
c001b667:	83 c4 10             	add    esp,0x10
c001b66a:	ba dc 24 02 c0       	mov    edx,0xc00224dc
c001b66f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b673:	89 10                	mov    DWORD PTR [eax],edx
c001b675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b679:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b687:	a3 e0 70 02 c0       	mov    ds:0xc00270e0,eax
c001b68c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b690:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b696:	0f b6 d0             	movzx  edx,al
c001b699:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b69d:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b6a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b6ae:	0f b6 d0             	movzx  edx,al
c001b6b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6b5:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b6ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b6c4:	8d 50 01             	lea    edx,[eax+0x1]
c001b6c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b6cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b6d1:	0f b6 d0             	movzx  edx,al
c001b6d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b6dc:	83 c9 c0             	or     ecx,0xffffffc0
c001b6df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b6e3:	90                   	nop
c001b6e4:	83 c4 0c             	add    esp,0xc
c001b6e7:	c3                   	ret    

c001b6e8 <PCI::readBAR8(unsigned int, int)>:
c001b6e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b6ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6f0:	f6 c2 01             	test   dl,0x1
c001b6f3:	74 07                	je     c001b6fc <PCI::readBAR8(unsigned int, int)+0x14>
c001b6f5:	83 e2 fc             	and    edx,0xfffffffc
c001b6f8:	01 c2                	add    edx,eax
c001b6fa:	ec                   	in     al,dx
c001b6fb:	c3                   	ret    
c001b6fc:	83 e2 f0             	and    edx,0xfffffff0
c001b6ff:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b702:	c3                   	ret    
c001b703:	90                   	nop

c001b704 <PCI::readBAR16(unsigned int, int)>:
c001b704:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b708:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b70c:	f6 c2 01             	test   dl,0x1
c001b70f:	74 08                	je     c001b719 <PCI::readBAR16(unsigned int, int)+0x15>
c001b711:	83 e2 fc             	and    edx,0xfffffffc
c001b714:	01 c2                	add    edx,eax
c001b716:	66 ed                	in     ax,dx
c001b718:	c3                   	ret    
c001b719:	83 e2 f0             	and    edx,0xfffffff0
c001b71c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b720:	c3                   	ret    
c001b721:	90                   	nop

c001b722 <PCI::readBAR32(unsigned int, int)>:
c001b722:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b726:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b72a:	f6 c2 01             	test   dl,0x1
c001b72d:	74 07                	je     c001b736 <PCI::readBAR32(unsigned int, int)+0x14>
c001b72f:	83 e2 fc             	and    edx,0xfffffffc
c001b732:	01 c2                	add    edx,eax
c001b734:	ed                   	in     eax,dx
c001b735:	c3                   	ret    
c001b736:	83 e2 f0             	and    edx,0xfffffff0
c001b739:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b73c:	c3                   	ret    
c001b73d:	90                   	nop

c001b73e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b73e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b742:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b746:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b74a:	f6 c2 01             	test   dl,0x1
c001b74d:	74 07                	je     c001b756 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b74f:	83 e2 fc             	and    edx,0xfffffffc
c001b752:	01 ca                	add    edx,ecx
c001b754:	ee                   	out    dx,al
c001b755:	c3                   	ret    
c001b756:	83 e2 f0             	and    edx,0xfffffff0
c001b759:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b75c:	c3                   	ret    
c001b75d:	90                   	nop

c001b75e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b75e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b762:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b766:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b76a:	f6 c2 01             	test   dl,0x1
c001b76d:	74 08                	je     c001b777 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b76f:	83 e2 fc             	and    edx,0xfffffffc
c001b772:	01 ca                	add    edx,ecx
c001b774:	66 ef                	out    dx,ax
c001b776:	c3                   	ret    
c001b777:	83 e2 f0             	and    edx,0xfffffff0
c001b77a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b77e:	c3                   	ret    
c001b77f:	90                   	nop

c001b780 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b780:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b784:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b788:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b78c:	f6 c2 01             	test   dl,0x1
c001b78f:	74 07                	je     c001b798 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b791:	83 e2 fc             	and    edx,0xfffffffc
c001b794:	01 ca                	add    edx,ecx
c001b796:	ef                   	out    dx,eax
c001b797:	c3                   	ret    
c001b798:	83 e2 f0             	and    edx,0xfffffff0
c001b79b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b79e:	c3                   	ret    
c001b79f:	90                   	nop

c001b7a0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b7a0:	55                   	push   ebp
c001b7a1:	57                   	push   edi
c001b7a2:	56                   	push   esi
c001b7a3:	53                   	push   ebx
c001b7a4:	83 ec 0c             	sub    esp,0xc
c001b7a7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b7ab:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b7af:	89 f0                	mov    eax,esi
c001b7b1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b7b5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b7b9:	3c 07                	cmp    al,0x7
c001b7bb:	76 10                	jbe    c001b7cd <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b7bd:	83 ec 0c             	sub    esp,0xc
c001b7c0:	68 3b 24 02 c0       	push   0xc002243b
c001b7c5:	e8 07 6a ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001b7ca:	83 c4 10             	add    esp,0x10
c001b7cd:	80 fb 0f             	cmp    bl,0xf
c001b7d0:	76 10                	jbe    c001b7e2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001b7d2:	83 ec 0c             	sub    esp,0xc
c001b7d5:	68 6b 24 02 c0       	push   0xc002246b
c001b7da:	e8 f2 69 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001b7df:	83 c4 10             	add    esp,0x10
c001b7e2:	8d 04 36             	lea    eax,[esi+esi*1]
c001b7e5:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b7ea:	83 c8 f0             	or     eax,0xfffffff0
c001b7ed:	ee                   	out    dx,al
c001b7ee:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b7f3:	89 e8                	mov    eax,ebp
c001b7f5:	ee                   	out    dx,al
c001b7f6:	83 c4 0c             	add    esp,0xc
c001b7f9:	89 d8                	mov    eax,ebx
c001b7fb:	66 81 e7 fc 00       	and    di,0xfc
c001b800:	5b                   	pop    ebx
c001b801:	c1 e0 08             	shl    eax,0x8
c001b804:	5e                   	pop    esi
c001b805:	09 f8                	or     eax,edi
c001b807:	5f                   	pop    edi
c001b808:	66 0d 00 c0          	or     ax,0xc000
c001b80c:	5d                   	pop    ebp
c001b80d:	c3                   	ret    

c001b80e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b80e:	57                   	push   edi
c001b80f:	56                   	push   esi
c001b810:	53                   	push   ebx
c001b811:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b815:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b819:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b81f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b823:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b827:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b82b:	83 ff 01             	cmp    edi,0x1
c001b82e:	75 3e                	jne    c001b86e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001b830:	89 de                	mov    esi,ebx
c001b832:	0f b6 c0             	movzx  eax,al
c001b835:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b83b:	c1 e0 10             	shl    eax,0x10
c001b83e:	0f b6 c9             	movzx  ecx,cl
c001b841:	09 f0                	or     eax,esi
c001b843:	c1 e1 08             	shl    ecx,0x8
c001b846:	0f b6 d2             	movzx  edx,dl
c001b849:	09 c8                	or     eax,ecx
c001b84b:	c1 e2 0b             	shl    edx,0xb
c001b84e:	09 d0                	or     eax,edx
c001b850:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b855:	0d 00 00 00 80       	or     eax,0x80000000
c001b85a:	ef                   	out    dx,eax
c001b85b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b860:	ed                   	in     eax,dx
c001b861:	83 e3 02             	and    ebx,0x2
c001b864:	0f b6 cb             	movzx  ecx,bl
c001b867:	c1 e1 03             	shl    ecx,0x3
c001b86a:	d3 e8                	shr    eax,cl
c001b86c:	eb 43                	jmp    c001b8b1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001b86e:	83 ff 02             	cmp    edi,0x2
c001b871:	75 2c                	jne    c001b89f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001b873:	83 ec 0c             	sub    esp,0xc
c001b876:	0f b6 c9             	movzx  ecx,cl
c001b879:	0f b6 d2             	movzx  edx,dl
c001b87c:	0f b6 fb             	movzx  edi,bl
c001b87f:	0f b6 c0             	movzx  eax,al
c001b882:	57                   	push   edi
c001b883:	51                   	push   ecx
c001b884:	52                   	push   edx
c001b885:	50                   	push   eax
c001b886:	56                   	push   esi
c001b887:	e8 14 ff ff ff       	call   c001b7a0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b88c:	89 c2                	mov    edx,eax
c001b88e:	ed                   	in     eax,dx
c001b88f:	83 e3 02             	and    ebx,0x2
c001b892:	83 c4 20             	add    esp,0x20
c001b895:	0f b6 cb             	movzx  ecx,bl
c001b898:	c1 e1 03             	shl    ecx,0x3
c001b89b:	d3 e8                	shr    eax,cl
c001b89d:	eb 12                	jmp    c001b8b1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001b89f:	83 ec 0c             	sub    esp,0xc
c001b8a2:	68 9b 24 02 c0       	push   0xc002249b
c001b8a7:	e8 25 69 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001b8ac:	83 c4 10             	add    esp,0x10
c001b8af:	31 c0                	xor    eax,eax
c001b8b1:	5b                   	pop    ebx
c001b8b2:	5e                   	pop    esi
c001b8b3:	5f                   	pop    edi
c001b8b4:	c3                   	ret    
c001b8b5:	90                   	nop

c001b8b6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b8b6:	83 ec 18             	sub    esp,0x18
c001b8b9:	6a 00                	push   0x0
c001b8bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b8c0:	50                   	push   eax
c001b8c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b8c6:	50                   	push   eax
c001b8c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b8cc:	50                   	push   eax
c001b8cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b8d1:	e8 38 ff ff ff       	call   c001b80e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b8d6:	83 c4 2c             	add    esp,0x2c
c001b8d9:	c3                   	ret    

c001b8da <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b8da:	83 ec 18             	sub    esp,0x18
c001b8dd:	6a 0e                	push   0xe
c001b8df:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b8e4:	50                   	push   eax
c001b8e5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b8ea:	50                   	push   eax
c001b8eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b8f0:	50                   	push   eax
c001b8f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b8f5:	e8 14 ff ff ff       	call   c001b80e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b8fa:	83 c4 2c             	add    esp,0x2c
c001b8fd:	0f b6 c0             	movzx  eax,al
c001b900:	c3                   	ret    
c001b901:	90                   	nop

c001b902 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b902:	55                   	push   ebp
c001b903:	57                   	push   edi
c001b904:	56                   	push   esi
c001b905:	53                   	push   ebx
c001b906:	83 ec 18             	sub    esp,0x18
c001b909:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b90e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b913:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b918:	6a 0a                	push   0xa
c001b91a:	56                   	push   esi
c001b91b:	55                   	push   ebp
c001b91c:	57                   	push   edi
c001b91d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b921:	e8 e8 fe ff ff       	call   c001b80e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b926:	83 c4 14             	add    esp,0x14
c001b929:	89 c3                	mov    ebx,eax
c001b92b:	6a 0a                	push   0xa
c001b92d:	0f b6 db             	movzx  ebx,bl
c001b930:	56                   	push   esi
c001b931:	55                   	push   ebp
c001b932:	57                   	push   edi
c001b933:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b937:	e8 d2 fe ff ff       	call   c001b80e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b93c:	83 c4 2c             	add    esp,0x2c
c001b93f:	25 00 ff 00 00       	and    eax,0xff00
c001b944:	09 d8                	or     eax,ebx
c001b946:	5b                   	pop    ebx
c001b947:	5e                   	pop    esi
c001b948:	5f                   	pop    edi
c001b949:	5d                   	pop    ebp
c001b94a:	c3                   	ret    
c001b94b:	90                   	nop

c001b94c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b94c:	83 ec 18             	sub    esp,0x18
c001b94f:	6a 08                	push   0x8
c001b951:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b956:	50                   	push   eax
c001b957:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b95c:	50                   	push   eax
c001b95d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b962:	50                   	push   eax
c001b963:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b967:	e8 a2 fe ff ff       	call   c001b80e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b96c:	83 c4 2c             	add    esp,0x2c
c001b96f:	0f b6 c4             	movzx  eax,ah
c001b972:	c3                   	ret    
c001b973:	90                   	nop

c001b974 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b974:	83 ec 18             	sub    esp,0x18
c001b977:	6a 08                	push   0x8
c001b979:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b97e:	50                   	push   eax
c001b97f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b984:	50                   	push   eax
c001b985:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b98a:	50                   	push   eax
c001b98b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b98f:	e8 7a fe ff ff       	call   c001b80e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b994:	83 c4 2c             	add    esp,0x2c
c001b997:	c3                   	ret    

c001b998 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b998:	83 ec 18             	sub    esp,0x18
c001b99b:	6a 3c                	push   0x3c
c001b99d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b9a2:	50                   	push   eax
c001b9a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b9a8:	50                   	push   eax
c001b9a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b9ae:	50                   	push   eax
c001b9af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b9b3:	e8 56 fe ff ff       	call   c001b80e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b9b8:	83 c4 2c             	add    esp,0x2c
c001b9bb:	c3                   	ret    

c001b9bc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b9bc:	83 ec 18             	sub    esp,0x18
c001b9bf:	6a 18                	push   0x18
c001b9c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b9c6:	50                   	push   eax
c001b9c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b9cc:	50                   	push   eax
c001b9cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b9d2:	50                   	push   eax
c001b9d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b9d7:	e8 32 fe ff ff       	call   c001b80e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b9dc:	83 c4 2c             	add    esp,0x2c
c001b9df:	0f b6 c4             	movzx  eax,ah
c001b9e2:	c3                   	ret    
c001b9e3:	90                   	nop

c001b9e4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b9e4:	55                   	push   ebp
c001b9e5:	57                   	push   edi
c001b9e6:	56                   	push   esi
c001b9e7:	53                   	push   ebx
c001b9e8:	83 ec 28             	sub    esp,0x28
c001b9eb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001b9ef:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b9f4:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b9f9:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b9fe:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001ba05:	8d 43 12             	lea    eax,[ebx+0x12]
c001ba08:	83 c3 10             	add    ebx,0x10
c001ba0b:	0f b6 c0             	movzx  eax,al
c001ba0e:	0f b6 db             	movzx  ebx,bl
c001ba11:	50                   	push   eax
c001ba12:	51                   	push   ecx
c001ba13:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001ba17:	57                   	push   edi
c001ba18:	55                   	push   ebp
c001ba19:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ba1d:	e8 ec fd ff ff       	call   c001b80e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ba22:	83 c4 14             	add    esp,0x14
c001ba25:	89 c6                	mov    esi,eax
c001ba27:	53                   	push   ebx
c001ba28:	c1 e6 10             	shl    esi,0x10
c001ba2b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ba2f:	51                   	push   ecx
c001ba30:	57                   	push   edi
c001ba31:	55                   	push   ebp
c001ba32:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ba36:	e8 d3 fd ff ff       	call   c001b80e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ba3b:	83 c4 3c             	add    esp,0x3c
c001ba3e:	0f b7 c0             	movzx  eax,ax
c001ba41:	5b                   	pop    ebx
c001ba42:	09 f0                	or     eax,esi
c001ba44:	5e                   	pop    esi
c001ba45:	5f                   	pop    edi
c001ba46:	5d                   	pop    ebp
c001ba47:	c3                   	ret    

c001ba48 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001ba48:	55                   	push   ebp
c001ba49:	57                   	push   edi
c001ba4a:	56                   	push   esi
c001ba4b:	53                   	push   ebx
c001ba4c:	83 ec 0c             	sub    esp,0xc
c001ba4f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ba53:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ba57:	89 f5                	mov    ebp,esi
c001ba59:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001ba5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ba63:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ba67:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ba6b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ba6f:	83 f9 01             	cmp    ecx,0x1
c001ba72:	75 5d                	jne    c001bad1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001ba74:	0f b6 c8             	movzx  ecx,al
c001ba77:	0f b6 d2             	movzx  edx,dl
c001ba7a:	c1 e1 10             	shl    ecx,0x10
c001ba7d:	c1 e2 0b             	shl    edx,0xb
c001ba80:	89 f0                	mov    eax,esi
c001ba82:	25 fc 00 00 00       	and    eax,0xfc
c001ba87:	09 c1                	or     ecx,eax
c001ba89:	89 e8                	mov    eax,ebp
c001ba8b:	0f b6 c0             	movzx  eax,al
c001ba8e:	c1 e0 08             	shl    eax,0x8
c001ba91:	09 c1                	or     ecx,eax
c001ba93:	09 d1                	or     ecx,edx
c001ba95:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ba9a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001baa0:	89 c8                	mov    eax,ecx
c001baa2:	ef                   	out    dx,eax
c001baa3:	ba fc 0c 00 00       	mov    edx,0xcfc
c001baa8:	ed                   	in     eax,dx
c001baa9:	0f b7 db             	movzx  ebx,bx
c001baac:	83 e6 02             	and    esi,0x2
c001baaf:	74 0a                	je     c001babb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001bab1:	0f b7 d0             	movzx  edx,ax
c001bab4:	c1 e3 10             	shl    ebx,0x10
c001bab7:	09 d3                	or     ebx,edx
c001bab9:	eb 05                	jmp    c001bac0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001babb:	66 31 c0             	xor    ax,ax
c001babe:	09 c3                	or     ebx,eax
c001bac0:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bac5:	89 c8                	mov    eax,ecx
c001bac7:	ef                   	out    dx,eax
c001bac8:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bacd:	89 d8                	mov    eax,ebx
c001bacf:	eb 41                	jmp    c001bb12 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001bad1:	83 f9 02             	cmp    ecx,0x2
c001bad4:	75 45                	jne    c001bb1b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001bad6:	83 ec 0c             	sub    esp,0xc
c001bad9:	0f b6 d2             	movzx  edx,dl
c001badc:	89 f1                	mov    ecx,esi
c001bade:	0f b6 c0             	movzx  eax,al
c001bae1:	0f b6 f1             	movzx  esi,cl
c001bae4:	89 e9                	mov    ecx,ebp
c001bae6:	56                   	push   esi
c001bae7:	0f b6 c9             	movzx  ecx,cl
c001baea:	51                   	push   ecx
c001baeb:	52                   	push   edx
c001baec:	50                   	push   eax
c001baed:	57                   	push   edi
c001baee:	e8 ad fc ff ff       	call   c001b7a0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001baf3:	89 c2                	mov    edx,eax
c001baf5:	ed                   	in     eax,dx
c001baf6:	83 c4 20             	add    esp,0x20
c001baf9:	0f b7 db             	movzx  ebx,bx
c001bafc:	f6 c2 02             	test   dl,0x2
c001baff:	74 0c                	je     c001bb0d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001bb01:	0f b7 c8             	movzx  ecx,ax
c001bb04:	89 d8                	mov    eax,ebx
c001bb06:	c1 e0 10             	shl    eax,0x10
c001bb09:	09 c8                	or     eax,ecx
c001bb0b:	eb 05                	jmp    c001bb12 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001bb0d:	66 31 c0             	xor    ax,ax
c001bb10:	09 d8                	or     eax,ebx
c001bb12:	ef                   	out    dx,eax
c001bb13:	83 c4 0c             	add    esp,0xc
c001bb16:	5b                   	pop    ebx
c001bb17:	5e                   	pop    esi
c001bb18:	5f                   	pop    edi
c001bb19:	5d                   	pop    ebp
c001bb1a:	c3                   	ret    
c001bb1b:	c7 44 24 20 9b 24 02 c0 	mov    DWORD PTR [esp+0x20],0xc002249b
c001bb23:	83 c4 0c             	add    esp,0xc
c001bb26:	5b                   	pop    ebx
c001bb27:	5e                   	pop    esi
c001bb28:	5f                   	pop    edi
c001bb29:	5d                   	pop    ebp
c001bb2a:	e9 a2 66 ff ff       	jmp    c00121d1 <Krnl::panic(char const*)>
c001bb2f:	90                   	nop

c001bb30 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001bb30:	55                   	push   ebp
c001bb31:	57                   	push   edi
c001bb32:	56                   	push   esi
c001bb33:	53                   	push   ebx
c001bb34:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001bb3a:	80 3d ec 70 02 c0 00 	cmp    BYTE PTR ds:0xc00270ec,0x0
c001bb41:	0f 85 84 00 00 00    	jne    c001bbcb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c001bb47:	83 ec 0c             	sub    esp,0xc
c001bb4a:	68 14 01 00 00       	push   0x114
c001bb4f:	e8 1d dc fe ff       	call   c0009771 <malloc>
c001bb54:	83 c4 0c             	add    esp,0xc
c001bb57:	89 c3                	mov    ebx,eax
c001bb59:	ff 35 d0 66 02 c0    	push   DWORD PTR ds:0xc00266d0
c001bb5f:	68 a1 24 02 c0       	push   0xc00224a1
c001bb64:	50                   	push   eax
c001bb65:	e8 fc 0e ff ff       	call   c000ca66 <File::File(char const*, Process*)>
c001bb6a:	5a                   	pop    edx
c001bb6b:	59                   	pop    ecx
c001bb6c:	6a 01                	push   0x1
c001bb6e:	53                   	push   ebx
c001bb6f:	e8 ac 0f ff ff       	call   c000cb20 <File::open(FileOpenMode)>
c001bb74:	83 c4 0c             	add    esp,0xc
c001bb77:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001bb7b:	50                   	push   eax
c001bb7c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001bb80:	50                   	push   eax
c001bb81:	53                   	push   ebx
c001bb82:	e8 45 12 ff ff       	call   c000cdcc <File::stat(unsigned long long*, bool*)>
c001bb87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bb8b:	40                   	inc    eax
c001bb8c:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb8f:	e8 dd db fe ff       	call   c0009771 <malloc>
c001bb94:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bb98:	a3 e8 70 02 c0       	mov    ds:0xc00270e8,eax
c001bb9d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001bba1:	5e                   	pop    esi
c001bba2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bba4:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001bba8:	51                   	push   ecx
c001bba9:	50                   	push   eax
c001bbaa:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001bbae:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001bbb2:	53                   	push   ebx
c001bbb3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bbb6:	83 c4 14             	add    esp,0x14
c001bbb9:	53                   	push   ebx
c001bbba:	e8 bf 0f ff ff       	call   c000cb7e <File::close()>
c001bbbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bbc3:	83 c4 10             	add    esp,0x10
c001bbc6:	a3 e4 70 02 c0       	mov    ds:0xc00270e4,eax
c001bbcb:	a1 e4 70 02 c0       	mov    eax,ds:0xc00270e4
c001bbd0:	8b 15 e8 70 02 c0    	mov    edx,DWORD PTR ds:0xc00270e8
c001bbd6:	89 04 24             	mov    DWORD PTR [esp],eax
c001bbd9:	31 ff                	xor    edi,edi
c001bbdb:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c001bbe3:	31 f6                	xor    esi,esi
c001bbe5:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001bbea:	31 db                	xor    ebx,ebx
c001bbec:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001bbf4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001bbf9:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c001bc00:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001bc04:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c001bc0b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001bc0f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001bc12:	0f 8e 6b 01 00 00    	jle    c001bd83 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c001bc18:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001bc1b:	d4 40                	aam    0x40
c001bc1d:	d5 39                	aad    0x39
c001bc1f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bc23:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c001bc27:	d4 40                	aam    0x40
c001bc29:	d5 39                	aad    0x39
c001bc2b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001bc2f:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c001bc33:	d4 40                	aam    0x40
c001bc35:	d5 39                	aad    0x39
c001bc37:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001bc3b:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c001bc3f:	d4 40                	aam    0x40
c001bc41:	d5 39                	aad    0x39
c001bc43:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bc47:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c001bc4b:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001bc4f:	3c 56                	cmp    al,0x56
c001bc51:	74 45                	je     c001bc98 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c001bc53:	d4 40                	aam    0x40
c001bc55:	d5 39                	aad    0x39
c001bc57:	8d 48 d0             	lea    ecx,[eax-0x30]
c001bc5a:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c001bc5e:	0f b6 c9             	movzx  ecx,cl
c001bc61:	c1 e1 04             	shl    ecx,0x4
c001bc64:	d4 40                	aam    0x40
c001bc66:	d5 39                	aad    0x39
c001bc68:	8d 58 d0             	lea    ebx,[eax-0x30]
c001bc6b:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c001bc6f:	0f b6 db             	movzx  ebx,bl
c001bc72:	09 cb                	or     ebx,ecx
c001bc74:	c1 e3 04             	shl    ebx,0x4
c001bc77:	d4 40                	aam    0x40
c001bc79:	d5 39                	aad    0x39
c001bc7b:	8d 48 d0             	lea    ecx,[eax-0x30]
c001bc7e:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c001bc82:	0f b6 c9             	movzx  ecx,cl
c001bc85:	09 cb                	or     ebx,ecx
c001bc87:	c1 e3 04             	shl    ebx,0x4
c001bc8a:	89 d9                	mov    ecx,ebx
c001bc8c:	d4 40                	aam    0x40
c001bc8e:	d5 39                	aad    0x39
c001bc90:	8d 58 d0             	lea    ebx,[eax-0x30]
c001bc93:	0f b6 db             	movzx  ebx,bl
c001bc96:	09 cb                	or     ebx,ecx
c001bc98:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c001bc9c:	80 f9 44             	cmp    cl,0x44
c001bc9f:	74 47                	je     c001bce8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c001bca1:	88 c8                	mov    al,cl
c001bca3:	d4 40                	aam    0x40
c001bca5:	d5 39                	aad    0x39
c001bca7:	83 e8 30             	sub    eax,0x30
c001bcaa:	0f b6 e8             	movzx  ebp,al
c001bcad:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c001bcb1:	c1 e5 04             	shl    ebp,0x4
c001bcb4:	d4 40                	aam    0x40
c001bcb6:	d5 39                	aad    0x39
c001bcb8:	83 e8 30             	sub    eax,0x30
c001bcbb:	0f b6 f0             	movzx  esi,al
c001bcbe:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c001bcc2:	09 ee                	or     esi,ebp
c001bcc4:	c1 e6 04             	shl    esi,0x4
c001bcc7:	d4 40                	aam    0x40
c001bcc9:	d5 39                	aad    0x39
c001bccb:	83 e8 30             	sub    eax,0x30
c001bcce:	0f b6 e8             	movzx  ebp,al
c001bcd1:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c001bcd5:	09 ee                	or     esi,ebp
c001bcd7:	c1 e6 04             	shl    esi,0x4
c001bcda:	89 f5                	mov    ebp,esi
c001bcdc:	d4 40                	aam    0x40
c001bcde:	d5 39                	aad    0x39
c001bce0:	83 e8 30             	sub    eax,0x30
c001bce3:	0f b6 f0             	movzx  esi,al
c001bce6:	09 ee                	or     esi,ebp
c001bce8:	83 c7 10             	add    edi,0x10
c001bceb:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c001bcef:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001bcf2:	3c 0a                	cmp    al,0xa
c001bcf4:	74 09                	je     c001bcff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c001bcf6:	45                   	inc    ebp
c001bcf7:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001bcfa:	75 16                	jne    c001bd12 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c001bcfc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001bcff:	3c 0a                	cmp    al,0xa
c001bd01:	0f 94 c0             	sete   al
c001bd04:	0f b6 c0             	movzx  eax,al
c001bd07:	01 c7                	add    edi,eax
c001bd09:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001bd0e:	75 0c                	jne    c001bd1c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c001bd10:	eb 15                	jmp    c001bd27 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c001bd12:	47                   	inc    edi
c001bd13:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001bd16:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001bd1a:	eb d3                	jmp    c001bcef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c001bd1c:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c001bd21:	0f 85 e8 fe ff ff    	jne    c001bc0f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001bd27:	80 f9 44             	cmp    cl,0x44
c001bd2a:	74 0b                	je     c001bd37 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c001bd2c:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c001bd31:	0f 85 d8 fe ff ff    	jne    c001bc0f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001bd37:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001bd3b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001bd3f:	c1 e1 04             	shl    ecx,0x4
c001bd42:	83 e8 30             	sub    eax,0x30
c001bd45:	09 c8                	or     eax,ecx
c001bd47:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001bd4b:	0f 85 be fe ff ff    	jne    c001bc0f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001bd51:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c001bd55:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bd59:	c1 e1 04             	shl    ecx,0x4
c001bd5c:	83 e8 30             	sub    eax,0x30
c001bd5f:	09 c8                	or     eax,ecx
c001bd61:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c001bd65:	0f 85 a4 fe ff ff    	jne    c001bc0f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001bd6b:	50                   	push   eax
c001bd6c:	50                   	push   eax
c001bd6d:	8d 44 24 28          	lea    eax,[esp+0x28]
c001bd71:	50                   	push   eax
c001bd72:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001bd79:	e8 e6 47 fe ff       	call   c0000564 <strcpy>
c001bd7e:	83 c4 10             	add    esp,0x10
c001bd81:	eb 15                	jmp    c001bd98 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c001bd83:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001bd8a:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001bd95:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001bd98:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001bd9f:	81 c4 2c 01 00 00    	add    esp,0x12c
c001bda5:	5b                   	pop    ebx
c001bda6:	5e                   	pop    esi
c001bda7:	5f                   	pop    edi
c001bda8:	5d                   	pop    ebp
c001bda9:	c3                   	ret    

c001bdaa <PCI::checkBus(unsigned char)>:
c001bdaa:	56                   	push   esi
c001bdab:	53                   	push   ebx
c001bdac:	31 db                	xor    ebx,ebx
c001bdae:	51                   	push   ecx
c001bdaf:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001bdb4:	52                   	push   edx
c001bdb5:	53                   	push   ebx
c001bdb6:	43                   	inc    ebx
c001bdb7:	56                   	push   esi
c001bdb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bdbc:	e8 f3 02 00 00       	call   c001c0b4 <PCI::checkDevice(unsigned char, unsigned char)>
c001bdc1:	83 c4 10             	add    esp,0x10
c001bdc4:	83 fb 20             	cmp    ebx,0x20
c001bdc7:	75 eb                	jne    c001bdb4 <PCI::checkBus(unsigned char)+0xa>
c001bdc9:	58                   	pop    eax
c001bdca:	5b                   	pop    ebx
c001bdcb:	5e                   	pop    esi
c001bdcc:	c3                   	ret    
c001bdcd:	90                   	nop

c001bdce <PCI::foundDevice(PCIDeviceInfo)>:
c001bdce:	55                   	push   ebp
c001bdcf:	57                   	push   edi
c001bdd0:	56                   	push   esi
c001bdd1:	53                   	push   ebx
c001bdd2:	83 ec 1c             	sub    esp,0x1c
c001bdd5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bdd9:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001bddf:	0f 84 52 01 00 00    	je     c001bf37 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001bde5:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001bde9:	66 81 f9 06 04       	cmp    cx,0x406
c001bdee:	75 2c                	jne    c001be1c <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001bdf0:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001bdf5:	50                   	push   eax
c001bdf6:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001bdfb:	50                   	push   eax
c001bdfc:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001be01:	50                   	push   eax
c001be02:	56                   	push   esi
c001be03:	e8 b4 fb ff ff       	call   c001b9bc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001be08:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001be0c:	0f b6 c0             	movzx  eax,al
c001be0f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001be13:	83 c4 2c             	add    esp,0x2c
c001be16:	5b                   	pop    ebx
c001be17:	5e                   	pop    esi
c001be18:	5f                   	pop    edi
c001be19:	5d                   	pop    ebp
c001be1a:	eb 8e                	jmp    c001bdaa <PCI::checkBus(unsigned char)>
c001be1c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001be20:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001be26:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001be2a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001be2e:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001be32:	88 d3                	mov    bl,dl
c001be34:	85 c0                	test   eax,eax
c001be36:	74 33                	je     c001be6b <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001be38:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001be3b:	85 d2                	test   edx,edx
c001be3d:	74 28                	je     c001be67 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001be3f:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001be45:	31 ef                	xor    edi,ebp
c001be47:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001be4d:	75 18                	jne    c001be67 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001be4f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001be53:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001be59:	75 0c                	jne    c001be67 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001be5b:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001be61:	0f 84 d0 00 00 00    	je     c001bf37 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001be67:	8b 00                	mov    eax,DWORD PTR [eax]
c001be69:	eb c9                	jmp    c001be34 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001be6b:	66 81 f9 01 06       	cmp    cx,0x601
c001be70:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001be74:	75 19                	jne    c001be8f <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001be76:	83 ec 0c             	sub    esp,0xc
c001be79:	68 64 01 00 00       	push   0x164
c001be7e:	e8 ee d8 fe ff       	call   c0009771 <malloc>
c001be83:	89 c5                	mov    ebp,eax
c001be85:	89 04 24             	mov    DWORD PTR [esp],eax
c001be88:	e8 37 0e 00 00       	call   c001ccc4 <SATABus::SATABus()>
c001be8d:	eb 1e                	jmp    c001bead <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001be8f:	66 81 f9 01 01       	cmp    cx,0x101
c001be94:	75 60                	jne    c001bef6 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001be96:	83 ec 0c             	sub    esp,0xc
c001be99:	68 70 02 00 00       	push   0x270
c001be9e:	e8 ce d8 fe ff       	call   c0009771 <malloc>
c001bea3:	89 c5                	mov    ebp,eax
c001bea5:	89 04 24             	mov    DWORD PTR [esp],eax
c001bea8:	e8 cb 02 00 00       	call   c001c178 <IDE::IDE()>
c001bead:	58                   	pop    eax
c001beae:	5a                   	pop    edx
c001beaf:	55                   	push   ebp
c001beb0:	56                   	push   esi
c001beb1:	e8 68 1a ff ff       	call   c000d91e <Device::addChild(Device*)>
c001beb6:	83 ec 1c             	sub    esp,0x1c
c001beb9:	b9 09 00 00 00       	mov    ecx,0x9
c001bebe:	fc                   	cld    
c001bebf:	89 e7                	mov    edi,esp
c001bec1:	89 de                	mov    esi,ebx
c001bec3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bec5:	55                   	push   ebp
c001bec6:	e8 99 19 ff ff       	call   c000d864 <Device::preOpenPCI(PCIDeviceInfo)>
c001becb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bece:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001bed2:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001beda:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001bee2:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001beea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001beed:	83 c4 4c             	add    esp,0x4c
c001bef0:	5b                   	pop    ebx
c001bef1:	5e                   	pop    esi
c001bef2:	5f                   	pop    edi
c001bef3:	5d                   	pop    ebp
c001bef4:	ff e0                	jmp    eax
c001bef6:	83 ec 0c             	sub    esp,0xc
c001bef9:	68 58 01 00 00       	push   0x158
c001befe:	e8 6e d8 fe ff       	call   c0009771 <malloc>
c001bf03:	89 c5                	mov    ebp,eax
c001bf05:	58                   	pop    eax
c001bf06:	5a                   	pop    edx
c001bf07:	68 ba 24 02 c0       	push   0xc00224ba
c001bf0c:	55                   	push   ebp
c001bf0d:	e8 aa 1c ff ff       	call   c000dbbc <DriverlessDevice::DriverlessDevice(char const*)>
c001bf12:	59                   	pop    ecx
c001bf13:	5f                   	pop    edi
c001bf14:	55                   	push   ebp
c001bf15:	56                   	push   esi
c001bf16:	e8 03 1a ff ff       	call   c000d91e <Device::addChild(Device*)>
c001bf1b:	b9 09 00 00 00       	mov    ecx,0x9
c001bf20:	fc                   	cld    
c001bf21:	89 df                	mov    edi,ebx
c001bf23:	89 de                	mov    esi,ebx
c001bf25:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bf27:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001bf2b:	83 c4 2c             	add    esp,0x2c
c001bf2e:	5b                   	pop    ebx
c001bf2f:	5e                   	pop    esi
c001bf30:	5f                   	pop    edi
c001bf31:	5d                   	pop    ebp
c001bf32:	e9 2d 19 ff ff       	jmp    c000d864 <Device::preOpenPCI(PCIDeviceInfo)>
c001bf37:	83 c4 1c             	add    esp,0x1c
c001bf3a:	5b                   	pop    ebx
c001bf3b:	5e                   	pop    esi
c001bf3c:	5f                   	pop    edi
c001bf3d:	5d                   	pop    ebp
c001bf3e:	c3                   	ret    
c001bf3f:	90                   	nop

c001bf40 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001bf40:	55                   	push   ebp
c001bf41:	57                   	push   edi
c001bf42:	56                   	push   esi
c001bf43:	53                   	push   ebx
c001bf44:	83 ec 68             	sub    esp,0x68
c001bf47:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001bf4b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001bf52:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bf56:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001bf5d:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001bf62:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bf66:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001bf6d:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c001bf72:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bf76:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bf7b:	6a 0c                	push   0xc
c001bf7d:	57                   	push   edi
c001bf7e:	53                   	push   ebx
c001bf7f:	56                   	push   esi
c001bf80:	55                   	push   ebp
c001bf81:	e8 88 f8 ff ff       	call   c001b80e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bf86:	83 c4 20             	add    esp,0x20
c001bf89:	57                   	push   edi
c001bf8a:	53                   	push   ebx
c001bf8b:	56                   	push   esi
c001bf8c:	55                   	push   ebp
c001bf8d:	e8 70 f9 ff ff       	call   c001b902 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bf92:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c001bf97:	57                   	push   edi
c001bf98:	53                   	push   ebx
c001bf99:	56                   	push   esi
c001bf9a:	55                   	push   ebp
c001bf9b:	e8 f8 f9 ff ff       	call   c001b998 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bfa0:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001bfa4:	83 c4 14             	add    esp,0x14
c001bfa7:	6a 3c                	push   0x3c
c001bfa9:	57                   	push   edi
c001bfaa:	53                   	push   ebx
c001bfab:	56                   	push   esi
c001bfac:	55                   	push   ebp
c001bfad:	e8 5c f8 ff ff       	call   c001b80e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bfb2:	0f b6 c4             	movzx  eax,ah
c001bfb5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001bfb9:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001bfbd:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bfc1:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c001bfc6:	8b 90 e4 01 00 00    	mov    edx,DWORD PTR [eax+0x1e4]
c001bfcc:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bfd2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bfd6:	83 c4 20             	add    esp,0x20
c001bfd9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001bfde:	74 30                	je     c001c010 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bfe0:	31 c0                	xor    eax,eax
c001bfe2:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bfe6:	7e 28                	jle    c001c010 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bfe8:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bff0:	39 cb                	cmp    ebx,ecx
c001bff2:	75 19                	jne    c001c00d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bff4:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bffc:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001c000:	75 0b                	jne    c001c00d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c002:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001c009:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c001c00d:	40                   	inc    eax
c001c00e:	eb d2                	jmp    c001bfe2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001c010:	31 d2                	xor    edx,edx
c001c012:	83 ec 0c             	sub    esp,0xc
c001c015:	57                   	push   edi
c001c016:	53                   	push   ebx
c001c017:	56                   	push   esi
c001c018:	52                   	push   edx
c001c019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001c01d:	55                   	push   ebp
c001c01e:	e8 c1 f9 ff ff       	call   c001b9e4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c023:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c027:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c02b:	42                   	inc    edx
c001c02c:	83 c4 20             	add    esp,0x20
c001c02f:	83 fa 06             	cmp    edx,0x6
c001c032:	75 de                	jne    c001c012 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001c034:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c039:	83 ec 0c             	sub    esp,0xc
c001c03c:	86 e0                	xchg   al,ah
c001c03e:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001c043:	6a 02                	push   0x2
c001c045:	57                   	push   edi
c001c046:	53                   	push   ebx
c001c047:	56                   	push   esi
c001c048:	55                   	push   ebp
c001c049:	e8 c0 f7 ff ff       	call   c001b80e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c04e:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001c053:	83 c4 20             	add    esp,0x20
c001c056:	57                   	push   edi
c001c057:	53                   	push   ebx
c001c058:	56                   	push   esi
c001c059:	55                   	push   ebp
c001c05a:	e8 ed f8 ff ff       	call   c001b94c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c05f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c063:	57                   	push   edi
c001c064:	53                   	push   ebx
c001c065:	56                   	push   esi
c001c066:	55                   	push   ebp
c001c067:	e8 4a f8 ff ff       	call   c001b8b6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c06c:	b9 09 00 00 00       	mov    ecx,0x9
c001c071:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001c076:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c001c07a:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001c07e:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001c082:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001c086:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001c08a:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001c08e:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001c092:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001c096:	83 ec 0c             	sub    esp,0xc
c001c099:	fc                   	cld    
c001c09a:	89 e7                	mov    edi,esp
c001c09c:	8d 74 24 58          	lea    esi,[esp+0x58]
c001c0a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c0a2:	55                   	push   ebp
c001c0a3:	e8 26 fd ff ff       	call   c001bdce <PCI::foundDevice(PCIDeviceInfo)>
c001c0a8:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c0ae:	5b                   	pop    ebx
c001c0af:	5e                   	pop    esi
c001c0b0:	5f                   	pop    edi
c001c0b1:	5d                   	pop    ebp
c001c0b2:	c3                   	ret    
c001c0b3:	90                   	nop

c001c0b4 <PCI::checkDevice(unsigned char, unsigned char)>:
c001c0b4:	55                   	push   ebp
c001c0b5:	57                   	push   edi
c001c0b6:	56                   	push   esi
c001c0b7:	53                   	push   ebx
c001c0b8:	83 ec 0c             	sub    esp,0xc
c001c0bb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c0bf:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c0c4:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c0c9:	6a 00                	push   0x0
c001c0cb:	56                   	push   esi
c001c0cc:	57                   	push   edi
c001c0cd:	55                   	push   ebp
c001c0ce:	e8 e3 f7 ff ff       	call   c001b8b6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c0d3:	6a 00                	push   0x0
c001c0d5:	56                   	push   esi
c001c0d6:	57                   	push   edi
c001c0d7:	55                   	push   ebp
c001c0d8:	e8 63 fe ff ff       	call   c001bf40 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c0dd:	83 c4 20             	add    esp,0x20
c001c0e0:	6a 00                	push   0x0
c001c0e2:	56                   	push   esi
c001c0e3:	57                   	push   edi
c001c0e4:	55                   	push   ebp
c001c0e5:	e8 f0 f7 ff ff       	call   c001b8da <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c0ea:	83 c4 10             	add    esp,0x10
c001c0ed:	84 c0                	test   al,al
c001c0ef:	79 27                	jns    c001c118 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c0f1:	bb 01 00 00 00       	mov    ebx,0x1
c001c0f6:	53                   	push   ebx
c001c0f7:	56                   	push   esi
c001c0f8:	57                   	push   edi
c001c0f9:	55                   	push   ebp
c001c0fa:	e8 b7 f7 ff ff       	call   c001b8b6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c0ff:	83 c4 10             	add    esp,0x10
c001c102:	66 40                	inc    ax
c001c104:	74 0c                	je     c001c112 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001c106:	53                   	push   ebx
c001c107:	56                   	push   esi
c001c108:	57                   	push   edi
c001c109:	55                   	push   ebp
c001c10a:	e8 31 fe ff ff       	call   c001bf40 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c10f:	83 c4 10             	add    esp,0x10
c001c112:	43                   	inc    ebx
c001c113:	83 fb 08             	cmp    ebx,0x8
c001c116:	75 de                	jne    c001c0f6 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c118:	83 c4 0c             	add    esp,0xc
c001c11b:	5b                   	pop    ebx
c001c11c:	5e                   	pop    esi
c001c11d:	5f                   	pop    edi
c001c11e:	5d                   	pop    ebp
c001c11f:	c3                   	ret    

c001c120 <PCI::detect()>:
c001c120:	56                   	push   esi
c001c121:	53                   	push   ebx
c001c122:	53                   	push   ebx
c001c123:	31 db                	xor    ebx,ebx
c001c125:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c129:	6a 00                	push   0x0
c001c12b:	6a 00                	push   0x0
c001c12d:	6a 00                	push   0x0
c001c12f:	56                   	push   esi
c001c130:	e8 a5 f7 ff ff       	call   c001b8da <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c135:	83 c4 10             	add    esp,0x10
c001c138:	a8 80                	test   al,0x80
c001c13a:	75 21                	jne    c001c15d <PCI::detect()+0x3d>
c001c13c:	51                   	push   ecx
c001c13d:	51                   	push   ecx
c001c13e:	6a 00                	push   0x0
c001c140:	56                   	push   esi
c001c141:	e8 64 fc ff ff       	call   c001bdaa <PCI::checkBus(unsigned char)>
c001c146:	83 c4 10             	add    esp,0x10
c001c149:	eb 24                	jmp    c001c16f <PCI::detect()+0x4f>
c001c14b:	52                   	push   edx
c001c14c:	52                   	push   edx
c001c14d:	53                   	push   ebx
c001c14e:	43                   	inc    ebx
c001c14f:	56                   	push   esi
c001c150:	e8 55 fc ff ff       	call   c001bdaa <PCI::checkBus(unsigned char)>
c001c155:	83 c4 10             	add    esp,0x10
c001c158:	83 fb 08             	cmp    ebx,0x8
c001c15b:	74 12                	je     c001c16f <PCI::detect()+0x4f>
c001c15d:	53                   	push   ebx
c001c15e:	6a 00                	push   0x0
c001c160:	6a 00                	push   0x0
c001c162:	56                   	push   esi
c001c163:	e8 4e f7 ff ff       	call   c001b8b6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c168:	83 c4 10             	add    esp,0x10
c001c16b:	66 40                	inc    ax
c001c16d:	74 dc                	je     c001c14b <PCI::detect()+0x2b>
c001c16f:	58                   	pop    eax
c001c170:	5b                   	pop    ebx
c001c171:	5e                   	pop    esi
c001c172:	c3                   	ret    
c001c173:	90                   	nop

c001c174 <IDE::close(int, int, void*)>:
c001c174:	83 c8 ff             	or     eax,0xffffffff
c001c177:	c3                   	ret    

c001c178 <IDE::IDE()>:
c001c178:	83 ec 0c             	sub    esp,0xc
c001c17b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c17f:	83 ec 08             	sub    esp,0x8
c001c182:	68 00 25 02 c0       	push   0xc0022500
c001c187:	50                   	push   eax
c001c188:	e8 d3 1a ff ff       	call   c000dc60 <HardDiskController::HardDiskController(char const*)>
c001c18d:	83 c4 10             	add    esp,0x10
c001c190:	ba 90 25 02 c0       	mov    edx,0xc0022590
c001c195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c199:	89 10                	mov    DWORD PTR [eax],edx
c001c19b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c19f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c1a6:	90                   	nop
c001c1a7:	83 c4 0c             	add    esp,0xc
c001c1aa:	c3                   	ret    
c001c1ab:	90                   	nop

c001c1ac <IDE::prepareInterrupt(unsigned char)>:
c001c1ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c1b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c1b5:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c1bd:	c3                   	ret    

c001c1be <selectDrive(unsigned char, unsigned char)>:
c001c1be:	c3                   	ret    
c001c1bf:	90                   	nop

c001c1c0 <IDE::getBase(unsigned char)>:
c001c1c0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c1c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1c9:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c1d1:	c3                   	ret    

c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c1d2:	55                   	push   ebp
c001c1d3:	57                   	push   edi
c001c1d4:	56                   	push   esi
c001c1d5:	53                   	push   ebx
c001c1d6:	83 ec 1c             	sub    esp,0x1c
c001c1d9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c1dd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c1e1:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c1e4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c1e8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c1ec:	80 f9 03             	cmp    cl,0x3
c001c1ef:	77 51                	ja     c001c242 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001c1f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1f5:	0f b6 f2             	movzx  esi,dl
c001c1f8:	0f b6 db             	movzx  ebx,bl
c001c1fb:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c1fe:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001c202:	83 ca 80             	or     edx,0xffffff80
c001c205:	0f b6 d2             	movzx  edx,dl
c001c208:	52                   	push   edx
c001c209:	6a 0c                	push   0xc
c001c20b:	56                   	push   esi
c001c20c:	57                   	push   edi
c001c20d:	e8 c0 ff ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c212:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c217:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c21b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c21f:	ee                   	out    dx,al
c001c220:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c225:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c229:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c22d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c231:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c239:	83 c4 2c             	add    esp,0x2c
c001c23c:	5b                   	pop    ebx
c001c23d:	5e                   	pop    esi
c001c23e:	5f                   	pop    edi
c001c23f:	5d                   	pop    ebp
c001c240:	eb 90                	jmp    c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c242:	80 fb 07             	cmp    bl,0x7
c001c245:	77 12                	ja     c001c259 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001c247:	0f b6 d2             	movzx  edx,dl
c001c24a:	0f b6 db             	movzx  ebx,bl
c001c24d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001c255:	89 da                	mov    edx,ebx
c001c257:	eb 2f                	jmp    c001c288 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c259:	80 fb 0d             	cmp    bl,0xd
c001c25c:	77 13                	ja     c001c271 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001c25e:	0f b6 d2             	movzx  edx,dl
c001c261:	0f b6 db             	movzx  ebx,bl
c001c264:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c26b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c26f:	eb 17                	jmp    c001c288 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c271:	80 fb 15             	cmp    bl,0x15
c001c274:	77 13                	ja     c001c289 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c276:	0f b6 d2             	movzx  edx,dl
c001c279:	0f b6 db             	movzx  ebx,bl
c001c27c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c284:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c288:	ee                   	out    dx,al
c001c289:	83 c4 1c             	add    esp,0x1c
c001c28c:	5b                   	pop    ebx
c001c28d:	5e                   	pop    esi
c001c28e:	5f                   	pop    edi
c001c28f:	5d                   	pop    ebp
c001c290:	c3                   	ret    
c001c291:	90                   	nop

c001c292 <IDE::read(unsigned char, unsigned char)>:
c001c292:	55                   	push   ebp
c001c293:	57                   	push   edi
c001c294:	56                   	push   esi
c001c295:	53                   	push   ebx
c001c296:	83 ec 1c             	sub    esp,0x1c
c001c299:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c29d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c2a1:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c2a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c2a8:	3c 03                	cmp    al,0x3
c001c2aa:	77 43                	ja     c001c2ef <IDE::read(unsigned char, unsigned char)+0x5d>
c001c2ac:	0f b6 f2             	movzx  esi,dl
c001c2af:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c2b2:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001c2b6:	83 c8 80             	or     eax,0xffffff80
c001c2b9:	0f b6 c0             	movzx  eax,al
c001c2bc:	50                   	push   eax
c001c2bd:	6a 0c                	push   0xc
c001c2bf:	56                   	push   esi
c001c2c0:	57                   	push   edi
c001c2c1:	e8 0c ff ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2c6:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001c2cb:	0f b6 c3             	movzx  eax,bl
c001c2ce:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001c2d2:	ec                   	in     al,dx
c001c2d3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c2d7:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c2dc:	52                   	push   edx
c001c2dd:	6a 0c                	push   0xc
c001c2df:	56                   	push   esi
c001c2e0:	57                   	push   edi
c001c2e1:	e8 ec fe ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2e6:	83 c4 20             	add    esp,0x20
c001c2e9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c2ed:	eb 49                	jmp    c001c338 <IDE::read(unsigned char, unsigned char)+0xa6>
c001c2ef:	80 fb 07             	cmp    bl,0x7
c001c2f2:	77 12                	ja     c001c306 <IDE::read(unsigned char, unsigned char)+0x74>
c001c2f4:	0f b6 d2             	movzx  edx,dl
c001c2f7:	0f b6 c3             	movzx  eax,bl
c001c2fa:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001c302:	89 c2                	mov    edx,eax
c001c304:	eb 31                	jmp    c001c337 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c306:	80 fb 0d             	cmp    bl,0xd
c001c309:	77 13                	ja     c001c31e <IDE::read(unsigned char, unsigned char)+0x8c>
c001c30b:	0f b6 d2             	movzx  edx,dl
c001c30e:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001c315:	0f b6 d3             	movzx  edx,bl
c001c318:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c31c:	eb 19                	jmp    c001c337 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c31e:	31 c0                	xor    eax,eax
c001c320:	80 fb 15             	cmp    bl,0x15
c001c323:	77 13                	ja     c001c338 <IDE::read(unsigned char, unsigned char)+0xa6>
c001c325:	0f b6 d2             	movzx  edx,dl
c001c328:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001c330:	0f b6 d3             	movzx  edx,bl
c001c333:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c337:	ec                   	in     al,dx
c001c338:	83 c4 1c             	add    esp,0x1c
c001c33b:	5b                   	pop    ebx
c001c33c:	5e                   	pop    esi
c001c33d:	5f                   	pop    edi
c001c33e:	5d                   	pop    ebp
c001c33f:	c3                   	ret    

c001c340 <IDE::waitInterrupt(unsigned char)>:
c001c340:	55                   	push   ebp
c001c341:	57                   	push   edi
c001c342:	56                   	push   esi
c001c343:	53                   	push   ebx
c001c344:	31 db                	xor    ebx,ebx
c001c346:	83 ec 0c             	sub    esp,0xc
c001c349:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c34d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001c352:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001c35a:	89 e8                	mov    eax,ebp
c001c35c:	84 c0                	test   al,al
c001c35e:	75 30                	jne    c001c390 <IDE::waitInterrupt(unsigned char)+0x50>
c001c360:	50                   	push   eax
c001c361:	6a 0c                	push   0xc
c001c363:	56                   	push   esi
c001c364:	57                   	push   edi
c001c365:	e8 28 ff ff ff       	call   c001c292 <IDE::read(unsigned char, unsigned char)>
c001c36a:	83 c4 10             	add    esp,0x10
c001c36d:	a8 01                	test   al,0x1
c001c36f:	75 27                	jne    c001c398 <IDE::waitInterrupt(unsigned char)+0x58>
c001c371:	f6 c3 04             	test   bl,0x4
c001c374:	75 12                	jne    c001c388 <IDE::waitInterrupt(unsigned char)+0x48>
c001c376:	83 fb 32             	cmp    ebx,0x32
c001c379:	7e 0d                	jle    c001c388 <IDE::waitInterrupt(unsigned char)+0x48>
c001c37b:	83 ec 0c             	sub    esp,0xc
c001c37e:	6a 64                	push   0x64
c001c380:	e8 c7 95 ff ff       	call   c001594c <milliTenthSleep(unsigned int)>
c001c385:	83 c4 10             	add    esp,0x10
c001c388:	83 fb 3c             	cmp    ebx,0x3c
c001c38b:	74 0b                	je     c001c398 <IDE::waitInterrupt(unsigned char)+0x58>
c001c38d:	43                   	inc    ebx
c001c38e:	eb c2                	jmp    c001c352 <IDE::waitInterrupt(unsigned char)+0x12>
c001c390:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001c398:	83 c4 0c             	add    esp,0xc
c001c39b:	89 e8                	mov    eax,ebp
c001c39d:	5b                   	pop    ebx
c001c39e:	5e                   	pop    esi
c001c39f:	5f                   	pop    edi
c001c3a0:	5d                   	pop    ebp
c001c3a1:	c3                   	ret    

c001c3a2 <ideChannel0IRQHandler(regs*, void*)>:
c001c3a2:	83 ec 10             	sub    esp,0x10
c001c3a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3a9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c3b0:	6a 07                	push   0x7
c001c3b2:	6a 00                	push   0x0
c001c3b4:	50                   	push   eax
c001c3b5:	e8 d8 fe ff ff       	call   c001c292 <IDE::read(unsigned char, unsigned char)>
c001c3ba:	83 c4 1c             	add    esp,0x1c
c001c3bd:	c3                   	ret    

c001c3be <ideChannel1IRQHandler(regs*, void*)>:
c001c3be:	83 ec 10             	sub    esp,0x10
c001c3c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3c5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c3cc:	6a 07                	push   0x7
c001c3ce:	6a 01                	push   0x1
c001c3d0:	50                   	push   eax
c001c3d1:	e8 bc fe ff ff       	call   c001c292 <IDE::read(unsigned char, unsigned char)>
c001c3d6:	83 c4 1c             	add    esp,0x1c
c001c3d9:	c3                   	ret    

c001c3da <IDE::enableIRQs(unsigned char, bool)>:
c001c3da:	57                   	push   edi
c001c3db:	56                   	push   esi
c001c3dc:	be 04 00 00 00       	mov    esi,0x4
c001c3e1:	53                   	push   ebx
c001c3e2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c3e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c3eb:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001c3f0:	0f 94 c0             	sete   al
c001c3f3:	d1 e0                	shl    eax,1
c001c3f5:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001c3fc:	0f b6 c0             	movzx  eax,al
c001c3ff:	50                   	push   eax
c001c400:	6a 0c                	push   0xc
c001c402:	57                   	push   edi
c001c403:	53                   	push   ebx
c001c404:	e8 c9 fd ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c409:	83 c4 10             	add    esp,0x10
c001c40c:	50                   	push   eax
c001c40d:	6a 0c                	push   0xc
c001c40f:	57                   	push   edi
c001c410:	53                   	push   ebx
c001c411:	e8 7c fe ff ff       	call   c001c292 <IDE::read(unsigned char, unsigned char)>
c001c416:	83 c4 10             	add    esp,0x10
c001c419:	4e                   	dec    esi
c001c41a:	75 f0                	jne    c001c40c <IDE::enableIRQs(unsigned char, bool)+0x32>
c001c41c:	5b                   	pop    ebx
c001c41d:	5e                   	pop    esi
c001c41e:	5f                   	pop    edi
c001c41f:	c3                   	ret    

c001c420 <IDE::open(int, int, void*)>:
c001c420:	55                   	push   ebp
c001c421:	57                   	push   edi
c001c422:	56                   	push   esi
c001c423:	53                   	push   ebx
c001c424:	83 ec 1c             	sub    esp,0x1c
c001c427:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c42b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c434:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c43d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c444:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c44b:	0f 85 b0 02 00 00    	jne    c001c701 <IDE::open(int, int, void*)+0x2e1>
c001c451:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c457:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001c45b:	83 e0 7f             	and    eax,0x7f
c001c45e:	3c 05                	cmp    al,0x5
c001c460:	74 04                	je     c001c466 <IDE::open(int, int, void*)+0x46>
c001c462:	3c 0f                	cmp    al,0xf
c001c464:	75 32                	jne    c001c498 <IDE::open(int, int, void*)+0x78>
c001c466:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c46c:	83 e0 fc             	and    eax,0xfffffffc
c001c46f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c476:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c47c:	83 e0 fc             	and    eax,0xfffffffc
c001c47f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c486:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c48c:	83 e0 fc             	and    eax,0xfffffffc
c001c48f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c496:	eb 14                	jmp    c001c4ac <IDE::open(int, int, void*)+0x8c>
c001c498:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c4a2:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c4ac:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001c4b3:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c4ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c4be:	89 c6                	mov    esi,eax
c001c4c0:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c4c5:	c1 e6 10             	shl    esi,0x10
c001c4c8:	89 e8                	mov    eax,ebp
c001c4ca:	89 fa                	mov    edx,edi
c001c4cc:	c1 e0 0b             	shl    eax,0xb
c001c4cf:	09 f0                	or     eax,esi
c001c4d1:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001c4d8:	c1 e6 08             	shl    esi,0x8
c001c4db:	09 c6                	or     esi,eax
c001c4dd:	89 f0                	mov    eax,esi
c001c4df:	0d 08 00 00 80       	or     eax,0x80000008
c001c4e4:	ef                   	out    dx,eax
c001c4e5:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001c4ea:	89 ca                	mov    edx,ecx
c001c4ec:	ed                   	in     eax,dx
c001c4ed:	c1 e8 10             	shr    eax,0x10
c001c4f0:	3d ff ff 00 00       	cmp    eax,0xffff
c001c4f5:	0f 84 f5 00 00 00    	je     c001c5f0 <IDE::open(int, int, void*)+0x1d0>
c001c4fb:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001c501:	89 fa                	mov    edx,edi
c001c503:	89 f0                	mov    eax,esi
c001c505:	ef                   	out    dx,eax
c001c506:	b0 fe                	mov    al,0xfe
c001c508:	89 ca                	mov    edx,ecx
c001c50a:	ee                   	out    dx,al
c001c50b:	89 f0                	mov    eax,esi
c001c50d:	89 fa                	mov    edx,edi
c001c50f:	ef                   	out    dx,eax
c001c510:	89 ca                	mov    edx,ecx
c001c512:	ed                   	in     eax,dx
c001c513:	3c fe                	cmp    al,0xfe
c001c515:	0f 85 a9 00 00 00    	jne    c001c5c4 <IDE::open(int, int, void*)+0x1a4>
c001c51b:	8b 15 c8 31 02 c0    	mov    edx,DWORD PTR ds:0xc00231c8
c001c521:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001c528:	74 33                	je     c001c55d <IDE::open(int, int, void*)+0x13d>
c001c52a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c530:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c534:	40                   	inc    eax
c001c535:	83 ec 0c             	sub    esp,0xc
c001c538:	0f b6 c0             	movzx  eax,al
c001c53b:	50                   	push   eax
c001c53c:	55                   	push   ebp
c001c53d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c541:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001c547:	51                   	push   ecx
c001c548:	e8 fb 40 ff ff       	call   c0010648 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c54d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c552:	83 c4 1c             	add    esp,0x1c
c001c555:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c55b:	eb 0a                	jmp    c001c567 <IDE::open(int, int, void*)+0x147>
c001c55d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c567:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c56e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c575:	c1 e1 10             	shl    ecx,0x10
c001c578:	c1 e0 08             	shl    eax,0x8
c001c57b:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c580:	09 c1                	or     ecx,eax
c001c582:	89 fa                	mov    edx,edi
c001c584:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c58b:	c1 e0 0b             	shl    eax,0xb
c001c58e:	09 c1                	or     ecx,eax
c001c590:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c596:	89 c8                	mov    eax,ecx
c001c598:	ef                   	out    dx,eax
c001c599:	be fc 0c 00 00       	mov    esi,0xcfc
c001c59e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001c5a4:	89 f2                	mov    edx,esi
c001c5a6:	ee                   	out    dx,al
c001c5a7:	89 c8                	mov    eax,ecx
c001c5a9:	89 fa                	mov    edx,edi
c001c5ab:	ef                   	out    dx,eax
c001c5ac:	89 f2                	mov    edx,esi
c001c5ae:	ed                   	in     eax,dx
c001c5af:	0f b6 c0             	movzx  eax,al
c001c5b2:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001c5b8:	74 46                	je     c001c600 <IDE::open(int, int, void*)+0x1e0>
c001c5ba:	83 ec 0c             	sub    esp,0xc
c001c5bd:	68 18 25 02 c0       	push   0xc0022518
c001c5c2:	eb 34                	jmp    c001c5f8 <IDE::open(int, int, void*)+0x1d8>
c001c5c4:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c5cd:	75 17                	jne    c001c5e6 <IDE::open(int, int, void*)+0x1c6>
c001c5cf:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001c5d4:	74 07                	je     c001c5dd <IDE::open(int, int, void*)+0x1bd>
c001c5d6:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001c5db:	75 09                	jne    c001c5e6 <IDE::open(int, int, void*)+0x1c6>
c001c5dd:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c5e4:	eb 1a                	jmp    c001c600 <IDE::open(int, int, void*)+0x1e0>
c001c5e6:	83 ec 0c             	sub    esp,0xc
c001c5e9:	68 20 25 02 c0       	push   0xc0022520
c001c5ee:	eb 08                	jmp    c001c5f8 <IDE::open(int, int, void*)+0x1d8>
c001c5f0:	83 ec 0c             	sub    esp,0xc
c001c5f3:	68 51 25 02 c0       	push   0xc0022551
c001c5f8:	e8 d4 5b ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001c5fd:	83 c4 10             	add    esp,0x10
c001c600:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001c607:	79 1a                	jns    c001c623 <IDE::open(int, int, void*)+0x203>
c001c609:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c60f:	83 e0 fc             	and    eax,0xfffffffc
c001c612:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c619:	83 c0 08             	add    eax,0x8
c001c61c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c623:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c629:	89 c2                	mov    edx,eax
c001c62b:	83 e2 0f             	and    edx,0xf
c001c62e:	66 83 fa 08          	cmp    dx,0x8
c001c632:	75 0a                	jne    c001c63e <IDE::open(int, int, void*)+0x21e>
c001c634:	83 e8 02             	sub    eax,0x2
c001c637:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c63e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c644:	89 c2                	mov    edx,eax
c001c646:	83 e2 0f             	and    edx,0xf
c001c649:	66 83 fa 08          	cmp    dx,0x8
c001c64d:	75 0a                	jne    c001c659 <IDE::open(int, int, void*)+0x239>
c001c64f:	83 e8 02             	sub    eax,0x2
c001c652:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c659:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c660:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c667:	89 d0                	mov    eax,edx
c001c669:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c66c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c670:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c674:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c677:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c67c:	0f b6 c9             	movzx  ecx,cl
c001c67f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c686:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c689:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c68d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c691:	8d 50 02             	lea    edx,[eax+0x2]
c001c694:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c699:	0f b6 d2             	movzx  edx,dl
c001c69c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c6a2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c6a5:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c6a9:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c6ad:	8d 48 03             	lea    ecx,[eax+0x3]
c001c6b0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c6b5:	0f b6 c9             	movzx  ecx,cl
c001c6b8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c6be:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c6c1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c6c5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c6c9:	8d 50 04             	lea    edx,[eax+0x4]
c001c6cc:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c6d2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c6d7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c6de:	66 85 f6             	test   si,si
c001c6e1:	74 5b                	je     c001c73e <IDE::open(int, int, void*)+0x31e>
c001c6e3:	0f b6 d2             	movzx  edx,dl
c001c6e6:	83 c0 05             	add    eax,0x5
c001c6e9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c6ec:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c6f0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c6f4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c6fa:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c6ff:	eb 3d                	jmp    c001c73e <IDE::open(int, int, void*)+0x31e>
c001c701:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c707:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c70e:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c715:	66 05 06 02          	add    ax,0x206
c001c719:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c720:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c727:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c72e:	66 05 06 02          	add    ax,0x206
c001c732:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c739:	e9 e5 fe ff ff       	jmp    c001c623 <IDE::open(int, int, void*)+0x203>
c001c73e:	50                   	push   eax
c001c73f:	50                   	push   eax
c001c740:	6a 00                	push   0x0
c001c742:	53                   	push   ebx
c001c743:	e8 64 fa ff ff       	call   c001c1ac <IDE::prepareInterrupt(unsigned char)>
c001c748:	5a                   	pop    edx
c001c749:	59                   	pop    ecx
c001c74a:	6a 01                	push   0x1
c001c74c:	53                   	push   ebx
c001c74d:	e8 5a fa ff ff       	call   c001c1ac <IDE::prepareInterrupt(unsigned char)>
c001c752:	83 c4 0c             	add    esp,0xc
c001c755:	6a 00                	push   0x0
c001c757:	6a 00                	push   0x0
c001c759:	53                   	push   ebx
c001c75a:	e8 7b fc ff ff       	call   c001c3da <IDE::enableIRQs(unsigned char, bool)>
c001c75f:	83 c4 0c             	add    esp,0xc
c001c762:	6a 00                	push   0x0
c001c764:	6a 01                	push   0x1
c001c766:	53                   	push   ebx
c001c767:	e8 6e fc ff ff       	call   c001c3da <IDE::enableIRQs(unsigned char, bool)>
c001c76c:	83 c4 10             	add    esp,0x10
c001c76f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c776:	74 34                	je     c001c7ac <IDE::open(int, int, void*)+0x38c>
c001c778:	83 ec 0c             	sub    esp,0xc
c001c77b:	53                   	push   ebx
c001c77c:	6a 01                	push   0x1
c001c77e:	68 a2 c3 01 c0       	push   0xc001c3a2
c001c783:	6a 0e                	push   0xe
c001c785:	53                   	push   ebx
c001c786:	e8 3f 11 ff ff       	call   c000d8ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c78b:	83 c4 14             	add    esp,0x14
c001c78e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c794:	53                   	push   ebx
c001c795:	6a 01                	push   0x1
c001c797:	68 be c3 01 c0       	push   0xc001c3be
c001c79c:	6a 0f                	push   0xf
c001c79e:	53                   	push   ebx
c001c79f:	e8 26 11 ff ff       	call   c000d8ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c7a4:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c7aa:	eb 38                	jmp    c001c7e4 <IDE::open(int, int, void*)+0x3c4>
c001c7ac:	83 ec 0c             	sub    esp,0xc
c001c7af:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c7b9:	53                   	push   ebx
c001c7ba:	6a 00                	push   0x0
c001c7bc:	68 a2 c3 01 c0       	push   0xc001c3a2
c001c7c1:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c7c7:	53                   	push   ebx
c001c7c8:	e8 fd 10 ff ff       	call   c000d8ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c7cd:	83 c4 14             	add    esp,0x14
c001c7d0:	53                   	push   ebx
c001c7d1:	6a 00                	push   0x0
c001c7d3:	68 be c3 01 c0       	push   0xc001c3be
c001c7d8:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c7de:	53                   	push   ebx
c001c7df:	e8 e6 10 ff ff       	call   c000d8ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c7e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c7e6:	83 c4 20             	add    esp,0x20
c001c7e9:	83 ec 0c             	sub    esp,0xc
c001c7ec:	53                   	push   ebx
c001c7ed:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c7f0:	83 c4 0c             	add    esp,0xc
c001c7f3:	6a 07                	push   0x7
c001c7f5:	6a 00                	push   0x0
c001c7f7:	53                   	push   ebx
c001c7f8:	e8 95 fa ff ff       	call   c001c292 <IDE::read(unsigned char, unsigned char)>
c001c7fd:	83 c4 0c             	add    esp,0xc
c001c800:	6a 07                	push   0x7
c001c802:	6a 01                	push   0x1
c001c804:	53                   	push   ebx
c001c805:	e8 88 fa ff ff       	call   c001c292 <IDE::read(unsigned char, unsigned char)>
c001c80a:	83 c4 0c             	add    esp,0xc
c001c80d:	6a 01                	push   0x1
c001c80f:	6a 00                	push   0x0
c001c811:	53                   	push   ebx
c001c812:	e8 c3 fb ff ff       	call   c001c3da <IDE::enableIRQs(unsigned char, bool)>
c001c817:	83 c4 0c             	add    esp,0xc
c001c81a:	6a 01                	push   0x1
c001c81c:	6a 01                	push   0x1
c001c81e:	53                   	push   ebx
c001c81f:	e8 b6 fb ff ff       	call   c001c3da <IDE::enableIRQs(unsigned char, bool)>
c001c824:	83 c4 2c             	add    esp,0x2c
c001c827:	31 c0                	xor    eax,eax
c001c829:	5b                   	pop    ebx
c001c82a:	5e                   	pop    esi
c001c82b:	5f                   	pop    edi
c001c82c:	5d                   	pop    ebp
c001c82d:	c3                   	ret    

c001c82e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c82e:	55                   	push   ebp
c001c82f:	57                   	push   edi
c001c830:	56                   	push   esi
c001c831:	53                   	push   ebx
c001c832:	83 ec 1c             	sub    esp,0x1c
c001c835:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c839:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c83d:	8d 50 f8             	lea    edx,[eax-0x8]
c001c840:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c844:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c848:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c84c:	80 fa 03             	cmp    dl,0x3
c001c84f:	77 5d                	ja     c001c8ae <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001c851:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c855:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c859:	0f b6 db             	movzx  ebx,bl
c001c85c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c85f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001c863:	83 ca 80             	or     edx,0xffffff80
c001c866:	0f b6 d2             	movzx  edx,dl
c001c869:	52                   	push   edx
c001c86a:	6a 0c                	push   0xc
c001c86c:	53                   	push   ebx
c001c86d:	56                   	push   esi
c001c86e:	e8 5f f9 ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c873:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001c878:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c87c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c880:	0f b6 c0             	movzx  eax,al
c001c883:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001c887:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c889:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c88e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c892:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c896:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c89a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c8a2:	83 c4 2c             	add    esp,0x2c
c001c8a5:	5b                   	pop    ebx
c001c8a6:	5e                   	pop    esi
c001c8a7:	5f                   	pop    edi
c001c8a8:	5d                   	pop    ebp
c001c8a9:	e9 24 f9 ff ff       	jmp    c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8ae:	3c 07                	cmp    al,0x7
c001c8b0:	77 10                	ja     c001c8c2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001c8b2:	0f b6 db             	movzx  ebx,bl
c001c8b5:	0f b6 d0             	movzx  edx,al
c001c8b8:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001c8c0:	eb 2d                	jmp    c001c8ef <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c8c2:	3c 0d                	cmp    al,0xd
c001c8c4:	77 13                	ja     c001c8d9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001c8c6:	0f b6 db             	movzx  ebx,bl
c001c8c9:	0f b6 c0             	movzx  eax,al
c001c8cc:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001c8d3:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001c8d7:	eb 16                	jmp    c001c8ef <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c8d9:	3c 15                	cmp    al,0x15
c001c8db:	77 14                	ja     c001c8f1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001c8dd:	0f b6 db             	movzx  ebx,bl
c001c8e0:	0f b6 c0             	movzx  eax,al
c001c8e3:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001c8eb:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001c8ef:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c8f1:	83 c4 1c             	add    esp,0x1c
c001c8f4:	5b                   	pop    ebx
c001c8f5:	5e                   	pop    esi
c001c8f6:	5f                   	pop    edi
c001c8f7:	5d                   	pop    ebp
c001c8f8:	c3                   	ret    
c001c8f9:	90                   	nop

c001c8fa <IDE::detect()>:
c001c8fa:	55                   	push   ebp
c001c8fb:	57                   	push   edi
c001c8fc:	56                   	push   esi
c001c8fd:	53                   	push   ebx
c001c8fe:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c904:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c90b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c912:	0f 85 97 02 00 00    	jne    c001cbaf <IDE::detect()+0x2b5>
c001c918:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c91f:	31 f6                	xor    esi,esi
c001c921:	31 ed                	xor    ebp,ebp
c001c923:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c92b:	89 e8                	mov    eax,ebp
c001c92d:	c1 e0 06             	shl    eax,0x6
c001c930:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c938:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c93c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c940:	c1 e0 04             	shl    eax,0x4
c001c943:	83 c8 a0             	or     eax,0xffffffa0
c001c946:	0f b6 c0             	movzx  eax,al
c001c949:	50                   	push   eax
c001c94a:	6a 06                	push   0x6
c001c94c:	56                   	push   esi
c001c94d:	53                   	push   ebx
c001c94e:	e8 7f f8 ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c953:	83 c4 0c             	add    esp,0xc
c001c956:	6a 0c                	push   0xc
c001c958:	56                   	push   esi
c001c959:	53                   	push   ebx
c001c95a:	e8 33 f9 ff ff       	call   c001c292 <IDE::read(unsigned char, unsigned char)>
c001c95f:	83 c4 0c             	add    esp,0xc
c001c962:	6a 0c                	push   0xc
c001c964:	56                   	push   esi
c001c965:	53                   	push   ebx
c001c966:	e8 27 f9 ff ff       	call   c001c292 <IDE::read(unsigned char, unsigned char)>
c001c96b:	83 c4 0c             	add    esp,0xc
c001c96e:	6a 0c                	push   0xc
c001c970:	56                   	push   esi
c001c971:	53                   	push   ebx
c001c972:	e8 1b f9 ff ff       	call   c001c292 <IDE::read(unsigned char, unsigned char)>
c001c977:	83 c4 0c             	add    esp,0xc
c001c97a:	6a 0c                	push   0xc
c001c97c:	56                   	push   esi
c001c97d:	53                   	push   ebx
c001c97e:	e8 0f f9 ff ff       	call   c001c292 <IDE::read(unsigned char, unsigned char)>
c001c983:	68 ec 00 00 00       	push   0xec
c001c988:	6a 07                	push   0x7
c001c98a:	56                   	push   esi
c001c98b:	53                   	push   ebx
c001c98c:	e8 41 f8 ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c991:	83 c4 1c             	add    esp,0x1c
c001c994:	6a 0c                	push   0xc
c001c996:	56                   	push   esi
c001c997:	53                   	push   ebx
c001c998:	e8 f5 f8 ff ff       	call   c001c292 <IDE::read(unsigned char, unsigned char)>
c001c99d:	83 c4 0c             	add    esp,0xc
c001c9a0:	6a 0c                	push   0xc
c001c9a2:	56                   	push   esi
c001c9a3:	53                   	push   ebx
c001c9a4:	e8 e9 f8 ff ff       	call   c001c292 <IDE::read(unsigned char, unsigned char)>
c001c9a9:	83 c4 0c             	add    esp,0xc
c001c9ac:	6a 0c                	push   0xc
c001c9ae:	56                   	push   esi
c001c9af:	53                   	push   ebx
c001c9b0:	e8 dd f8 ff ff       	call   c001c292 <IDE::read(unsigned char, unsigned char)>
c001c9b5:	83 c4 0c             	add    esp,0xc
c001c9b8:	6a 0c                	push   0xc
c001c9ba:	56                   	push   esi
c001c9bb:	53                   	push   ebx
c001c9bc:	e8 d1 f8 ff ff       	call   c001c292 <IDE::read(unsigned char, unsigned char)>
c001c9c1:	83 c4 0c             	add    esp,0xc
c001c9c4:	6a 0c                	push   0xc
c001c9c6:	56                   	push   esi
c001c9c7:	53                   	push   ebx
c001c9c8:	e8 c5 f8 ff ff       	call   c001c292 <IDE::read(unsigned char, unsigned char)>
c001c9cd:	83 c4 10             	add    esp,0x10
c001c9d0:	84 c0                	test   al,al
c001c9d2:	0f 84 5f 01 00 00    	je     c001cb37 <IDE::detect()+0x23d>
c001c9d8:	31 ff                	xor    edi,edi
c001c9da:	50                   	push   eax
c001c9db:	6a 0c                	push   0xc
c001c9dd:	56                   	push   esi
c001c9de:	53                   	push   ebx
c001c9df:	e8 ae f8 ff ff       	call   c001c292 <IDE::read(unsigned char, unsigned char)>
c001c9e4:	83 c4 10             	add    esp,0x10
c001c9e7:	a8 01                	test   al,0x1
c001c9e9:	0f 85 69 01 00 00    	jne    c001cb58 <IDE::detect()+0x25e>
c001c9ef:	84 c0                	test   al,al
c001c9f1:	78 04                	js     c001c9f7 <IDE::detect()+0xfd>
c001c9f3:	a8 08                	test   al,0x8
c001c9f5:	75 23                	jne    c001ca1a <IDE::detect()+0x120>
c001c9f7:	47                   	inc    edi
c001c9f8:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c9fe:	7e da                	jle    c001c9da <IDE::detect()+0xe0>
c001ca00:	83 ec 0c             	sub    esp,0xc
c001ca03:	6a 32                	push   0x32
c001ca05:	e8 42 8f ff ff       	call   c001594c <milliTenthSleep(unsigned int)>
c001ca0a:	83 c4 10             	add    esp,0x10
c001ca0d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001ca13:	75 c5                	jne    c001c9da <IDE::detect()+0xe0>
c001ca15:	e9 3e 01 00 00       	jmp    c001cb58 <IDE::detect()+0x25e>
c001ca1a:	31 c9                	xor    ecx,ecx
c001ca1c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001ca20:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ca24:	83 ec 0c             	sub    esp,0xc
c001ca27:	68 80 00 00 00       	push   0x80
c001ca2c:	57                   	push   edi
c001ca2d:	6a 00                	push   0x0
c001ca2f:	56                   	push   esi
c001ca30:	53                   	push   ebx
c001ca31:	e8 f8 fd ff ff       	call   c001c82e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ca36:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001ca3b:	89 e8                	mov    eax,ebp
c001ca3d:	89 d1                	mov    ecx,edx
c001ca3f:	c1 e0 06             	shl    eax,0x6
c001ca42:	01 d8                	add    eax,ebx
c001ca44:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001ca4b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001ca52:	89 f2                	mov    edx,esi
c001ca54:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001ca5a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001ca5e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001ca64:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ca68:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001ca6f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001ca77:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001ca7e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001ca86:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001ca8c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001ca93:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001ca99:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ca9d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001caa1:	83 c4 20             	add    esp,0x20
c001caa4:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001caa7:	83 c0 02             	add    eax,0x2
c001caaa:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001cab0:	83 c7 02             	add    edi,0x2
c001cab3:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001cab6:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001cabc:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001cac0:	75 e2                	jne    c001caa4 <IDE::detect()+0x1aa>
c001cac2:	89 e8                	mov    eax,ebp
c001cac4:	c1 e0 06             	shl    eax,0x6
c001cac7:	01 d8                	add    eax,ebx
c001cac9:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001cacf:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001cad6:	66 c1 ea 09          	shr    dx,0x9
c001cada:	83 e2 01             	and    edx,0x1
c001cadd:	84 c9                	test   cl,cl
c001cadf:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001cae5:	75 22                	jne    c001cb09 <IDE::detect()+0x20f>
c001cae7:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001caee:	74 46                	je     c001cb36 <IDE::detect()+0x23c>
c001caf0:	83 ec 0c             	sub    esp,0xc
c001caf3:	68 7c 01 00 00       	push   0x17c
c001caf8:	e8 74 cc fe ff       	call   c0009771 <malloc>
c001cafd:	89 c7                	mov    edi,eax
c001caff:	89 04 24             	mov    DWORD PTR [esp],eax
c001cb02:	e8 fd 04 00 00       	call   c001d004 <ATA::ATA()>
c001cb07:	eb 17                	jmp    c001cb20 <IDE::detect()+0x226>
c001cb09:	83 ec 0c             	sub    esp,0xc
c001cb0c:	68 84 01 00 00       	push   0x184
c001cb11:	e8 5b cc fe ff       	call   c0009771 <malloc>
c001cb16:	89 c7                	mov    edi,eax
c001cb18:	89 04 24             	mov    DWORD PTR [esp],eax
c001cb1b:	e8 dc 0a 00 00       	call   c001d5fc <ATAPI::ATAPI()>
c001cb20:	5a                   	pop    edx
c001cb21:	59                   	pop    ecx
c001cb22:	57                   	push   edi
c001cb23:	53                   	push   ebx
c001cb24:	e8 f5 0d ff ff       	call   c000d91e <Device::addChild(Device*)>
c001cb29:	8b 07                	mov    eax,DWORD PTR [edi]
c001cb2b:	53                   	push   ebx
c001cb2c:	55                   	push   ebp
c001cb2d:	6a 00                	push   0x0
c001cb2f:	57                   	push   edi
c001cb30:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cb33:	83 c4 20             	add    esp,0x20
c001cb36:	45                   	inc    ebp
c001cb37:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001cb3c:	74 0d                	je     c001cb4b <IDE::detect()+0x251>
c001cb3e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001cb46:	e9 e0 fd ff ff       	jmp    c001c92b <IDE::detect()+0x31>
c001cb4b:	4e                   	dec    esi
c001cb4c:	74 61                	je     c001cbaf <IDE::detect()+0x2b5>
c001cb4e:	be 01 00 00 00       	mov    esi,0x1
c001cb53:	e9 cb fd ff ff       	jmp    c001c923 <IDE::detect()+0x29>
c001cb58:	50                   	push   eax
c001cb59:	6a 04                	push   0x4
c001cb5b:	56                   	push   esi
c001cb5c:	53                   	push   ebx
c001cb5d:	e8 30 f7 ff ff       	call   c001c292 <IDE::read(unsigned char, unsigned char)>
c001cb62:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001cb66:	83 c4 0c             	add    esp,0xc
c001cb69:	6a 05                	push   0x5
c001cb6b:	56                   	push   esi
c001cb6c:	53                   	push   ebx
c001cb6d:	e8 20 f7 ff ff       	call   c001c292 <IDE::read(unsigned char, unsigned char)>
c001cb72:	83 c4 10             	add    esp,0x10
c001cb75:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001cb79:	80 fa 14             	cmp    dl,0x14
c001cb7c:	75 04                	jne    c001cb82 <IDE::detect()+0x288>
c001cb7e:	3c eb                	cmp    al,0xeb
c001cb80:	eb 07                	jmp    c001cb89 <IDE::detect()+0x28f>
c001cb82:	3c 96                	cmp    al,0x96
c001cb84:	75 b1                	jne    c001cb37 <IDE::detect()+0x23d>
c001cb86:	80 fa 69             	cmp    dl,0x69
c001cb89:	75 ac                	jne    c001cb37 <IDE::detect()+0x23d>
c001cb8b:	68 a1 00 00 00       	push   0xa1
c001cb90:	6a 07                	push   0x7
c001cb92:	56                   	push   esi
c001cb93:	53                   	push   ebx
c001cb94:	e8 39 f6 ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb99:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001cba0:	e8 a7 8d ff ff       	call   c001594c <milliTenthSleep(unsigned int)>
c001cba5:	83 c4 10             	add    esp,0x10
c001cba8:	b1 01                	mov    cl,0x1
c001cbaa:	e9 6d fe ff ff       	jmp    c001ca1c <IDE::detect()+0x122>
c001cbaf:	81 c4 1c 02 00 00    	add    esp,0x21c
c001cbb5:	5b                   	pop    ebx
c001cbb6:	5e                   	pop    esi
c001cbb7:	5f                   	pop    edi
c001cbb8:	5d                   	pop    ebp
c001cbb9:	c3                   	ret    

c001cbba <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001cbba:	55                   	push   ebp
c001cbbb:	57                   	push   edi
c001cbbc:	56                   	push   esi
c001cbbd:	53                   	push   ebx
c001cbbe:	83 ec 1c             	sub    esp,0x1c
c001cbc1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001cbc5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001cbc9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001cbcd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001cbd1:	88 c3                	mov    bl,al
c001cbd3:	84 c0                	test   al,al
c001cbd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cbd9:	0f 84 81 00 00 00    	je     c001cc60 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001cbdf:	83 ec 0c             	sub    esp,0xc
c001cbe2:	68 7b 25 02 c0       	push   0xc002257b
c001cbe7:	e8 0f f9 fe ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c001cbec:	83 c4 10             	add    esp,0x10
c001cbef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbf3:	3c 01                	cmp    al,0x1
c001cbf5:	74 63                	je     c001cc5a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001cbf7:	3c 02                	cmp    al,0x2
c001cbf9:	75 53                	jne    c001cc4e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001cbfb:	d1 e6                	shl    esi,1
c001cbfd:	09 ee                	or     esi,ebp
c001cbff:	50                   	push   eax
c001cc00:	89 f0                	mov    eax,esi
c001cc02:	6a 01                	push   0x1
c001cc04:	0f b6 f0             	movzx  esi,al
c001cc07:	c1 e6 06             	shl    esi,0x6
c001cc0a:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001cc12:	50                   	push   eax
c001cc13:	57                   	push   edi
c001cc14:	e8 79 f6 ff ff       	call   c001c292 <IDE::read(unsigned char, unsigned char)>
c001cc19:	83 c4 10             	add    esp,0x10
c001cc1c:	a8 01                	test   al,0x1
c001cc1e:	74 02                	je     c001cc22 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001cc20:	b3 07                	mov    bl,0x7
c001cc22:	a8 02                	test   al,0x2
c001cc24:	74 02                	je     c001cc28 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001cc26:	b3 03                	mov    bl,0x3
c001cc28:	a8 04                	test   al,0x4
c001cc2a:	74 02                	je     c001cc2e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001cc2c:	b3 14                	mov    bl,0x14
c001cc2e:	a8 08                	test   al,0x8
c001cc30:	74 02                	je     c001cc34 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001cc32:	b3 03                	mov    bl,0x3
c001cc34:	a8 10                	test   al,0x10
c001cc36:	74 02                	je     c001cc3a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001cc38:	b3 15                	mov    bl,0x15
c001cc3a:	a8 20                	test   al,0x20
c001cc3c:	74 02                	je     c001cc40 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001cc3e:	b3 03                	mov    bl,0x3
c001cc40:	a8 40                	test   al,0x40
c001cc42:	74 02                	je     c001cc46 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001cc44:	b3 16                	mov    bl,0x16
c001cc46:	84 c0                	test   al,al
c001cc48:	79 16                	jns    c001cc60 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001cc4a:	b3 0d                	mov    bl,0xd
c001cc4c:	eb 12                	jmp    c001cc60 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001cc4e:	3c 03                	cmp    al,0x3
c001cc50:	74 0c                	je     c001cc5e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001cc52:	3c 04                	cmp    al,0x4
c001cc54:	75 0a                	jne    c001cc60 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001cc56:	b3 08                	mov    bl,0x8
c001cc58:	eb 06                	jmp    c001cc60 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001cc5a:	b3 13                	mov    bl,0x13
c001cc5c:	eb 02                	jmp    c001cc60 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001cc5e:	b3 17                	mov    bl,0x17
c001cc60:	83 c4 1c             	add    esp,0x1c
c001cc63:	88 d8                	mov    al,bl
c001cc65:	5b                   	pop    ebx
c001cc66:	5e                   	pop    esi
c001cc67:	5f                   	pop    edi
c001cc68:	5d                   	pop    ebp
c001cc69:	c3                   	ret    

c001cc6a <IDE::polling(unsigned char, unsigned int)>:
c001cc6a:	57                   	push   edi
c001cc6b:	56                   	push   esi
c001cc6c:	53                   	push   ebx
c001cc6d:	bb 04 00 00 00       	mov    ebx,0x4
c001cc72:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001cc76:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001cc7b:	52                   	push   edx
c001cc7c:	6a 0c                	push   0xc
c001cc7e:	56                   	push   esi
c001cc7f:	57                   	push   edi
c001cc80:	e8 0d f6 ff ff       	call   c001c292 <IDE::read(unsigned char, unsigned char)>
c001cc85:	83 c4 10             	add    esp,0x10
c001cc88:	4b                   	dec    ebx
c001cc89:	75 f0                	jne    c001cc7b <IDE::polling(unsigned char, unsigned int)+0x11>
c001cc8b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001cc90:	50                   	push   eax
c001cc91:	6a 0c                	push   0xc
c001cc93:	56                   	push   esi
c001cc94:	57                   	push   edi
c001cc95:	e8 f8 f5 ff ff       	call   c001c292 <IDE::read(unsigned char, unsigned char)>
c001cc9a:	83 c4 10             	add    esp,0x10
c001cc9d:	a8 01                	test   al,0x1
c001cc9f:	75 17                	jne    c001ccb8 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001cca1:	a8 20                	test   al,0x20
c001cca3:	75 0f                	jne    c001ccb4 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001cca5:	4b                   	dec    ebx
c001cca6:	74 10                	je     c001ccb8 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001cca8:	84 c0                	test   al,al
c001ccaa:	78 e4                	js     c001cc90 <IDE::polling(unsigned char, unsigned int)+0x26>
c001ccac:	a8 08                	test   al,0x8
c001ccae:	74 e0                	je     c001cc90 <IDE::polling(unsigned char, unsigned int)+0x26>
c001ccb0:	31 c0                	xor    eax,eax
c001ccb2:	eb 06                	jmp    c001ccba <IDE::polling(unsigned char, unsigned int)+0x50>
c001ccb4:	b0 01                	mov    al,0x1
c001ccb6:	eb 02                	jmp    c001ccba <IDE::polling(unsigned char, unsigned int)+0x50>
c001ccb8:	b0 02                	mov    al,0x2
c001ccba:	5b                   	pop    ebx
c001ccbb:	5e                   	pop    esi
c001ccbc:	5f                   	pop    edi
c001ccbd:	c3                   	ret    

c001ccbe <SATABus::close(int, int, void*)>:
c001ccbe:	31 c0                	xor    eax,eax
c001ccc0:	c3                   	ret    
c001ccc1:	90                   	nop

c001ccc2 <SATABus::detect()>:
c001ccc2:	c3                   	ret    
c001ccc3:	90                   	nop

c001ccc4 <SATABus::SATABus()>:
c001ccc4:	83 ec 0c             	sub    esp,0xc
c001ccc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cccb:	83 ec 08             	sub    esp,0x8
c001ccce:	68 b4 25 02 c0       	push   0xc00225b4
c001ccd3:	50                   	push   eax
c001ccd4:	e8 87 0f ff ff       	call   c000dc60 <HardDiskController::HardDiskController(char const*)>
c001ccd9:	83 c4 10             	add    esp,0x10
c001ccdc:	ba e0 25 02 c0       	mov    edx,0xc00225e0
c001cce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cce5:	89 10                	mov    DWORD PTR [eax],edx
c001cce7:	83 ec 0c             	sub    esp,0xc
c001ccea:	6a 50                	push   0x50
c001ccec:	e8 04 cf fe ff       	call   c0009bf5 <Phys::allocateContiguousPages(int)>
c001ccf1:	83 c4 10             	add    esp,0x10
c001ccf4:	89 c2                	mov    edx,eax
c001ccf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccfa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001cd00:	83 ec 0c             	sub    esp,0xc
c001cd03:	6a 50                	push   0x50
c001cd05:	e8 8f e5 fe ff       	call   c000b299 <Virt::allocateKernelVirtualPages(int)>
c001cd0a:	83 c4 10             	add    esp,0x10
c001cd0d:	89 c2                	mov    edx,eax
c001cd0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd13:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001cd19:	a1 b4 32 02 c0       	mov    eax,ds:0xc00232b4
c001cd1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cd22:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001cd28:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cd2c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001cd32:	83 ec 0c             	sub    esp,0xc
c001cd35:	6a 03                	push   0x3
c001cd37:	6a 50                	push   0x50
c001cd39:	51                   	push   ecx
c001cd3a:	52                   	push   edx
c001cd3b:	50                   	push   eax
c001cd3c:	e8 a3 ee fe ff       	call   c000bbe4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001cd41:	83 c4 20             	add    esp,0x20
c001cd44:	90                   	nop
c001cd45:	83 c4 0c             	add    esp,0xc
c001cd48:	c3                   	ret    
c001cd49:	90                   	nop

c001cd4a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001cd4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd4e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001cd51:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001cd54:	09 c2                	or     edx,eax
c001cd56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd5a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cd60:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cd62:	31 c0                	xor    eax,eax
c001cd64:	c1 e9 08             	shr    ecx,0x8
c001cd67:	83 e1 0f             	and    ecx,0xf
c001cd6a:	39 c8                	cmp    eax,ecx
c001cd6c:	74 0a                	je     c001cd78 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001cd6e:	f6 c2 01             	test   dl,0x1
c001cd71:	74 08                	je     c001cd7b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001cd73:	d1 ea                	shr    edx,1
c001cd75:	40                   	inc    eax
c001cd76:	eb f2                	jmp    c001cd6a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001cd78:	83 c8 ff             	or     eax,0xffffffff
c001cd7b:	c3                   	ret    

c001cd7c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001cd7c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cd80:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001cd83:	89 c2                	mov    edx,eax
c001cd85:	c1 ea 08             	shr    edx,0x8
c001cd88:	83 e2 0f             	and    edx,0xf
c001cd8b:	fe ca                	dec    dl
c001cd8d:	75 31                	jne    c001cdc0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001cd8f:	83 e0 0f             	and    eax,0xf
c001cd92:	3c 03                	cmp    al,0x3
c001cd94:	75 2a                	jne    c001cdc0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001cd96:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001cd99:	b8 02 00 00 00       	mov    eax,0x2
c001cd9e:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001cda4:	74 1c                	je     c001cdc2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001cda6:	b8 04 00 00 00       	mov    eax,0x4
c001cdab:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001cdb1:	74 0f                	je     c001cdc2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001cdb3:	31 c0                	xor    eax,eax
c001cdb5:	83 fa 03             	cmp    edx,0x3
c001cdb8:	0f 94 c0             	sete   al
c001cdbb:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001cdbf:	c3                   	ret    
c001cdc0:	31 c0                	xor    eax,eax
c001cdc2:	c3                   	ret    
c001cdc3:	90                   	nop

c001cdc4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001cdc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cdc8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cdcb:	0f ba e2 0f          	bt     edx,0xf
c001cdcf:	72 f7                	jb     c001cdc8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001cdd1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cdd4:	83 ca 10             	or     edx,0x10
c001cdd7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cdda:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cddd:	83 ca 01             	or     edx,0x1
c001cde0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cde3:	c3                   	ret    

c001cde4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001cde4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cde8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cdeb:	83 e2 fe             	and    edx,0xfffffffe
c001cdee:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cdf1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cdf4:	83 e2 ef             	and    edx,0xffffffef
c001cdf7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cdfa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cdfd:	0f ba e2 0e          	bt     edx,0xe
c001ce01:	72 f7                	jb     c001cdfa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ce03:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ce06:	0f ba e2 0f          	bt     edx,0xf
c001ce0a:	72 ee                	jb     c001cdfa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ce0c:	c3                   	ret    
c001ce0d:	90                   	nop

c001ce0e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001ce0e:	55                   	push   ebp
c001ce0f:	57                   	push   edi
c001ce10:	56                   	push   esi
c001ce11:	53                   	push   ebx
c001ce12:	83 ec 1c             	sub    esp,0x1c
c001ce15:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ce19:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ce1d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001ce21:	53                   	push   ebx
c001ce22:	89 fd                	mov    ebp,edi
c001ce24:	56                   	push   esi
c001ce25:	c1 e5 0a             	shl    ebp,0xa
c001ce28:	e8 b7 ff ff ff       	call   c001cde4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ce2d:	83 ec 0c             	sub    esp,0xc
c001ce30:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001ce36:	01 e8                	add    eax,ebp
c001ce38:	89 03                	mov    DWORD PTR [ebx],eax
c001ce3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce3c:	68 00 04 00 00       	push   0x400
c001ce41:	6a 00                	push   0x0
c001ce43:	50                   	push   eax
c001ce44:	e8 5f 36 fe ff       	call   c00004a8 <memset>
c001ce49:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001ce4f:	89 fa                	mov    edx,edi
c001ce51:	01 e8                	add    eax,ebp
c001ce53:	c1 e7 0d             	shl    edi,0xd
c001ce56:	89 03                	mov    DWORD PTR [ebx],eax
c001ce58:	c1 e2 08             	shl    edx,0x8
c001ce5b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ce62:	81 c2 00 80 00 00    	add    edx,0x8000
c001ce68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001ce6c:	89 d0                	mov    eax,edx
c001ce6e:	83 c4 1c             	add    esp,0x1c
c001ce71:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001ce77:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ce7a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ce7d:	68 00 01 00 00       	push   0x100
c001ce82:	6a 00                	push   0x0
c001ce84:	50                   	push   eax
c001ce85:	e8 1e 36 fe ff       	call   c00004a8 <memset>
c001ce8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ce8e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001ce94:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001ce9a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ce9e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001cea1:	83 c4 10             	add    esp,0x10
c001cea4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ceab:	31 ff                	xor    edi,edi
c001cead:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001ceb3:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001ceb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cebd:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001cec3:	83 c5 20             	add    ebp,0x20
c001cec6:	01 f8                	add    eax,edi
c001cec8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cecb:	52                   	push   edx
c001cecc:	68 00 01 00 00       	push   0x100
c001ced1:	6a 00                	push   0x0
c001ced3:	50                   	push   eax
c001ced4:	e8 cf 35 fe ff       	call   c00004a8 <memset>
c001ced9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cedd:	83 c4 10             	add    esp,0x10
c001cee0:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001cee6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001ceed:	01 f8                	add    eax,edi
c001ceef:	81 c7 00 01 00 00    	add    edi,0x100
c001cef5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cef8:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001cefe:	75 b3                	jne    c001ceb3 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001cf00:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001cf04:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001cf08:	83 c4 1c             	add    esp,0x1c
c001cf0b:	5b                   	pop    ebx
c001cf0c:	5e                   	pop    esi
c001cf0d:	5f                   	pop    edi
c001cf0e:	5d                   	pop    ebp
c001cf0f:	e9 b0 fe ff ff       	jmp    c001cdc4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001cf14 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001cf14:	55                   	push   ebp
c001cf15:	57                   	push   edi
c001cf16:	56                   	push   esi
c001cf17:	53                   	push   ebx
c001cf18:	31 db                	xor    ebx,ebx
c001cf1a:	83 ec 0c             	sub    esp,0xc
c001cf1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf21:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cf25:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cf28:	f7 c7 01 00 00 00    	test   edi,0x1
c001cf2e:	74 7a                	je     c001cfaa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cf30:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cf34:	89 d8                	mov    eax,ebx
c001cf36:	c1 e0 07             	shl    eax,0x7
c001cf39:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cf40:	55                   	push   ebp
c001cf41:	56                   	push   esi
c001cf42:	e8 35 fe ff ff       	call   c001cd7c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cf47:	5a                   	pop    edx
c001cf48:	83 f8 01             	cmp    eax,0x1
c001cf4b:	59                   	pop    ecx
c001cf4c:	75 21                	jne    c001cf6f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cf4e:	50                   	push   eax
c001cf4f:	53                   	push   ebx
c001cf50:	55                   	push   ebp
c001cf51:	56                   	push   esi
c001cf52:	e8 b7 fe ff ff       	call   c001ce0e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cf57:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cf5e:	e8 0e c8 fe ff       	call   c0009771 <malloc>
c001cf63:	89 c5                	mov    ebp,eax
c001cf65:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf68:	e8 49 0d 00 00       	call   c001dcb6 <SATA::SATA()>
c001cf6d:	eb 24                	jmp    c001cf93 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cf6f:	83 f8 04             	cmp    eax,0x4
c001cf72:	75 36                	jne    c001cfaa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cf74:	51                   	push   ecx
c001cf75:	53                   	push   ebx
c001cf76:	55                   	push   ebp
c001cf77:	56                   	push   esi
c001cf78:	e8 91 fe ff ff       	call   c001ce0e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cf7d:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cf84:	e8 e8 c7 fe ff       	call   c0009771 <malloc>
c001cf89:	89 c5                	mov    ebp,eax
c001cf8b:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf8e:	e8 7f 10 00 00       	call   c001e012 <SATAPI::SATAPI()>
c001cf93:	58                   	pop    eax
c001cf94:	5a                   	pop    edx
c001cf95:	55                   	push   ebp
c001cf96:	56                   	push   esi
c001cf97:	e8 82 09 ff ff       	call   c000d91e <Device::addChild(Device*)>
c001cf9c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cf9f:	56                   	push   esi
c001cfa0:	6a 00                	push   0x0
c001cfa2:	53                   	push   ebx
c001cfa3:	55                   	push   ebp
c001cfa4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cfa7:	83 c4 20             	add    esp,0x20
c001cfaa:	d1 ef                	shr    edi,1
c001cfac:	43                   	inc    ebx
c001cfad:	83 fb 20             	cmp    ebx,0x20
c001cfb0:	0f 85 72 ff ff ff    	jne    c001cf28 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cfb6:	83 c4 0c             	add    esp,0xc
c001cfb9:	5b                   	pop    ebx
c001cfba:	5e                   	pop    esi
c001cfbb:	5f                   	pop    edi
c001cfbc:	5d                   	pop    ebp
c001cfbd:	c3                   	ret    

c001cfbe <SATABus::open(int, int, void*)>:
c001cfbe:	83 ec 14             	sub    esp,0x14
c001cfc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cfc5:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cfcb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cfd1:	52                   	push   edx
c001cfd2:	50                   	push   eax
c001cfd3:	e8 3c ff ff ff       	call   c001cf14 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cfd8:	31 c0                	xor    eax,eax
c001cfda:	83 c4 1c             	add    esp,0x1c
c001cfdd:	c3                   	ret    

c001cfde <ATA::close(int, int, void*)>:
c001cfde:	83 ec 0c             	sub    esp,0xc
c001cfe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfe5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cfeb:	85 c0                	test   eax,eax
c001cfed:	74 0c                	je     c001cffb <ATA::close(int, int, void*)+0x1d>
c001cfef:	83 ec 0c             	sub    esp,0xc
c001cff2:	8b 10                	mov    edx,DWORD PTR [eax]
c001cff4:	50                   	push   eax
c001cff5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cff8:	83 c4 10             	add    esp,0x10
c001cffb:	31 c0                	xor    eax,eax
c001cffd:	83 c4 0c             	add    esp,0xc
c001d000:	c3                   	ret    
c001d001:	90                   	nop

c001d002 <ATA::powerSaving(PowerSavingLevel)>:
c001d002:	c3                   	ret    
c001d003:	90                   	nop

c001d004 <ATA::ATA()>:
c001d004:	83 ec 0c             	sub    esp,0xc
c001d007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d00b:	83 ec 04             	sub    esp,0x4
c001d00e:	68 00 02 00 00       	push   0x200
c001d013:	68 ad 26 02 c0       	push   0xc00226ad
c001d018:	50                   	push   eax
c001d019:	e8 cc 0c ff ff       	call   c000dcea <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d01e:	83 c4 10             	add    esp,0x10
c001d021:	ba 20 26 02 c0       	mov    edx,0xc0022620
c001d026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d02a:	89 10                	mov    DWORD PTR [eax],edx
c001d02c:	90                   	nop
c001d02d:	83 c4 0c             	add    esp,0xc
c001d030:	c3                   	ret    
c001d031:	90                   	nop

c001d032 <ATA::flush(bool)>:
c001d032:	53                   	push   ebx
c001d033:	83 ec 08             	sub    esp,0x8
c001d036:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001d03b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d03f:	19 c0                	sbb    eax,eax
c001d041:	83 e0 fd             	and    eax,0xfffffffd
c001d044:	05 ea 00 00 00       	add    eax,0xea
c001d049:	50                   	push   eax
c001d04a:	6a 07                	push   0x7
c001d04c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d053:	50                   	push   eax
c001d054:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d05a:	e8 73 f1 ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d05f:	83 c4 0c             	add    esp,0xc
c001d062:	6a 00                	push   0x0
c001d064:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d06b:	50                   	push   eax
c001d06c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d072:	e8 f3 fb ff ff       	call   c001cc6a <IDE::polling(unsigned char, unsigned int)>
c001d077:	83 c4 18             	add    esp,0x18
c001d07a:	5b                   	pop    ebx
c001d07b:	c3                   	ret    

c001d07c <ATA::readyForCommand()>:
c001d07c:	56                   	push   esi
c001d07d:	53                   	push   ebx
c001d07e:	53                   	push   ebx
c001d07f:	31 db                	xor    ebx,ebx
c001d081:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d085:	51                   	push   ecx
c001d086:	6a 0c                	push   0xc
c001d088:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d08f:	50                   	push   eax
c001d090:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d096:	e8 f7 f1 ff ff       	call   c001c292 <IDE::read(unsigned char, unsigned char)>
c001d09b:	83 c4 10             	add    esp,0x10
c001d09e:	a8 88                	test   al,0x88
c001d0a0:	74 1f                	je     c001d0c1 <ATA::readyForCommand()+0x45>
c001d0a2:	43                   	inc    ebx
c001d0a3:	83 fb 63             	cmp    ebx,0x63
c001d0a6:	7e dd                	jle    c001d085 <ATA::readyForCommand()+0x9>
c001d0a8:	83 ec 0c             	sub    esp,0xc
c001d0ab:	6a 0a                	push   0xa
c001d0ad:	e8 9a 88 ff ff       	call   c001594c <milliTenthSleep(unsigned int)>
c001d0b2:	83 c4 10             	add    esp,0x10
c001d0b5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d0bb:	75 c8                	jne    c001d085 <ATA::readyForCommand()+0x9>
c001d0bd:	31 c0                	xor    eax,eax
c001d0bf:	eb 02                	jmp    c001d0c3 <ATA::readyForCommand()+0x47>
c001d0c1:	b0 01                	mov    al,0x1
c001d0c3:	5a                   	pop    edx
c001d0c4:	5b                   	pop    ebx
c001d0c5:	5e                   	pop    esi
c001d0c6:	c3                   	ret    
c001d0c7:	90                   	nop

c001d0c8 <ATA::access(unsigned long long, int, void*, bool)>:
c001d0c8:	55                   	push   ebp
c001d0c9:	57                   	push   edi
c001d0ca:	56                   	push   esi
c001d0cb:	53                   	push   ebx
c001d0cc:	83 ec 2c             	sub    esp,0x2c
c001d0cf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d0d3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d0d7:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d0db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0df:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d0e3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001d0e7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d0eb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d0f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d0f5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d0fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d0ff:	c1 e0 06             	shl    eax,0x6
c001d102:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d10a:	74 5d                	je     c001d169 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001d10c:	89 fa                	mov    edx,edi
c001d10e:	89 f0                	mov    eax,esi
c001d110:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001d114:	c1 ea 1c             	shr    edx,0x1c
c001d117:	89 d1                	mov    ecx,edx
c001d119:	09 c1                	or     ecx,eax
c001d11b:	74 25                	je     c001d142 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001d11d:	31 ed                	xor    ebp,ebp
c001d11f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d126:	89 fa                	mov    edx,edi
c001d128:	89 f0                	mov    eax,esi
c001d12a:	0f ad d0             	shrd   eax,edx,cl
c001d12d:	d3 ea                	shr    edx,cl
c001d12f:	f6 c1 20             	test   cl,0x20
c001d132:	74 02                	je     c001d136 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001d134:	89 d0                	mov    eax,edx
c001d136:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d13a:	45                   	inc    ebp
c001d13b:	83 fd 06             	cmp    ebp,0x6
c001d13e:	75 df                	jne    c001d11f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001d140:	eb 76                	jmp    c001d1b8 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001d142:	89 f0                	mov    eax,esi
c001d144:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d149:	89 fa                	mov    edx,edi
c001d14b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d152:	0f ac d0 10          	shrd   eax,edx,0x10
c001d156:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d15b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d15f:	c1 ee 18             	shr    esi,0x18
c001d162:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001d167:	eb 56                	jmp    c001d1bf <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001d169:	6a 00                	push   0x0
c001d16b:	6a 3f                	push   0x3f
c001d16d:	57                   	push   edi
c001d16e:	56                   	push   esi
c001d16f:	e8 7c 22 00 00       	call   c001f3f0 <__umoddi3>
c001d174:	83 c4 10             	add    esp,0x10
c001d177:	40                   	inc    eax
c001d178:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d17c:	6a 00                	push   0x0
c001d17e:	68 f0 03 00 00       	push   0x3f0
c001d183:	57                   	push   edi
c001d184:	56                   	push   esi
c001d185:	e8 66 21 00 00       	call   c001f2f0 <__udivdi3>
c001d18a:	83 c4 10             	add    esp,0x10
c001d18d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d192:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d199:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d19e:	6a 00                	push   0x0
c001d1a0:	6a 3f                	push   0x3f
c001d1a2:	57                   	push   edi
c001d1a3:	56                   	push   esi
c001d1a4:	e8 47 21 00 00       	call   c001f2f0 <__udivdi3>
c001d1a9:	83 c4 10             	add    esp,0x10
c001d1ac:	89 c6                	mov    esi,eax
c001d1ae:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001d1b3:	83 e6 0f             	and    esi,0xf
c001d1b6:	eb 07                	jmp    c001d1bf <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001d1b8:	31 f6                	xor    esi,esi
c001d1ba:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001d1bf:	bf 01 00 00 00       	mov    edi,0x1
c001d1c4:	50                   	push   eax
c001d1c5:	6a 00                	push   0x0
c001d1c7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d1ce:	50                   	push   eax
c001d1cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d1d3:	e8 02 f2 ff ff       	call   c001c3da <IDE::enableIRQs(unsigned char, bool)>
c001d1d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1db:	e8 9c fe ff ff       	call   c001d07c <ATA::readyForCommand()>
c001d1e0:	83 c4 10             	add    esp,0x10
c001d1e3:	84 c0                	test   al,al
c001d1e5:	0f 84 4e 02 00 00    	je     c001d439 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001d1eb:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d1f1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d1f7:	c1 e0 04             	shl    eax,0x4
c001d1fa:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001d201:	09 c6                	or     esi,eax
c001d203:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001d208:	75 05                	jne    c001d20f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001d20a:	83 ce a0             	or     esi,0xffffffa0
c001d20d:	eb 03                	jmp    c001d212 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001d20f:	83 ce e0             	or     esi,0xffffffe0
c001d212:	89 f0                	mov    eax,esi
c001d214:	0f b6 f0             	movzx  esi,al
c001d217:	56                   	push   esi
c001d218:	6a 06                	push   0x6
c001d21a:	51                   	push   ecx
c001d21b:	52                   	push   edx
c001d21c:	e8 b1 ef ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d221:	83 c4 10             	add    esp,0x10
c001d224:	6a 00                	push   0x0
c001d226:	6a 01                	push   0x1
c001d228:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d22f:	50                   	push   eax
c001d230:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d236:	e8 97 ef ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d23b:	83 c4 10             	add    esp,0x10
c001d23e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001d243:	75 6e                	jne    c001d2b3 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001d245:	6a 00                	push   0x0
c001d247:	6a 08                	push   0x8
c001d249:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d250:	50                   	push   eax
c001d251:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d257:	e8 76 ef ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d25c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d261:	50                   	push   eax
c001d262:	6a 09                	push   0x9
c001d264:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d26b:	50                   	push   eax
c001d26c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d272:	e8 5b ef ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d277:	83 c4 20             	add    esp,0x20
c001d27a:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d27f:	50                   	push   eax
c001d280:	6a 0a                	push   0xa
c001d282:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d289:	50                   	push   eax
c001d28a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d290:	e8 3d ef ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d295:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d29a:	50                   	push   eax
c001d29b:	6a 0b                	push   0xb
c001d29d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d2a4:	50                   	push   eax
c001d2a5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d2ab:	e8 22 ef ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2b0:	83 c4 20             	add    esp,0x20
c001d2b3:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d2b8:	50                   	push   eax
c001d2b9:	6a 02                	push   0x2
c001d2bb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d2c2:	50                   	push   eax
c001d2c3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d2c9:	e8 04 ef ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2ce:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d2d3:	50                   	push   eax
c001d2d4:	6a 03                	push   0x3
c001d2d6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d2dd:	50                   	push   eax
c001d2de:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d2e4:	e8 e9 ee ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2e9:	83 c4 20             	add    esp,0x20
c001d2ec:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d2f1:	50                   	push   eax
c001d2f2:	6a 04                	push   0x4
c001d2f4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d2fb:	50                   	push   eax
c001d2fc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d302:	e8 cb ee ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d307:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d30c:	50                   	push   eax
c001d30d:	6a 05                	push   0x5
c001d30f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d316:	50                   	push   eax
c001d317:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d31d:	e8 b0 ee ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d322:	83 c4 20             	add    esp,0x20
c001d325:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001d32a:	0f 94 c0             	sete   al
c001d32d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d332:	74 09                	je     c001d33d <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001d334:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001d33b:	eb 07                	jmp    c001d344 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001d33d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001d344:	0f b6 c0             	movzx  eax,al
c001d347:	50                   	push   eax
c001d348:	6a 07                	push   0x7
c001d34a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d351:	50                   	push   eax
c001d352:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d358:	e8 75 ee ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d35d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d361:	83 c4 10             	add    esp,0x10
c001d364:	85 f6                	test   esi,esi
c001d366:	0f 84 ae 00 00 00    	je     c001d41a <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001d36c:	50                   	push   eax
c001d36d:	6a 01                	push   0x1
c001d36f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d376:	50                   	push   eax
c001d377:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d37d:	e8 e8 f8 ff ff       	call   c001cc6a <IDE::polling(unsigned char, unsigned int)>
c001d382:	83 c4 10             	add    esp,0x10
c001d385:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d38b:	84 c0                	test   al,al
c001d38d:	74 20                	je     c001d3af <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001d38f:	0f b6 f8             	movzx  edi,al
c001d392:	0f b6 d2             	movzx  edx,dl
c001d395:	57                   	push   edi
c001d396:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d39d:	50                   	push   eax
c001d39e:	52                   	push   edx
c001d39f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d3a5:	e8 10 f8 ff ff       	call   c001cbba <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d3aa:	e9 87 00 00 00       	jmp    c001d436 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001d3af:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d3b4:	74 33                	je     c001d3e9 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001d3b6:	31 ed                	xor    ebp,ebp
c001d3b8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d3bc:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001d3c0:	50                   	push   eax
c001d3c1:	50                   	push   eax
c001d3c2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d3c9:	50                   	push   eax
c001d3ca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d3d0:	e8 eb ed ff ff       	call   c001c1c0 <IDE::getBase(unsigned char)>
c001d3d5:	89 c2                	mov    edx,eax
c001d3d7:	89 f8                	mov    eax,edi
c001d3d9:	66 ef                	out    dx,ax
c001d3db:	45                   	inc    ebp
c001d3dc:	83 c4 10             	add    esp,0x10
c001d3df:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001d3e5:	75 d1                	jne    c001d3b8 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001d3e7:	eb 23                	jmp    c001d40c <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001d3e9:	0f b6 d2             	movzx  edx,dl
c001d3ec:	51                   	push   ecx
c001d3ed:	51                   	push   ecx
c001d3ee:	52                   	push   edx
c001d3ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d3f5:	e8 c6 ed ff ff       	call   c001c1c0 <IDE::getBase(unsigned char)>
c001d3fa:	b9 00 01 00 00       	mov    ecx,0x100
c001d3ff:	89 c2                	mov    edx,eax
c001d401:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d405:	fc                   	cld    
c001d406:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d409:	83 c4 10             	add    esp,0x10
c001d40c:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001d414:	4e                   	dec    esi
c001d415:	e9 4a ff ff ff       	jmp    c001d364 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001d41a:	31 ff                	xor    edi,edi
c001d41c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d421:	74 16                	je     c001d439 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001d423:	50                   	push   eax
c001d424:	50                   	push   eax
c001d425:	31 c0                	xor    eax,eax
c001d427:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001d42c:	0f 94 c0             	sete   al
c001d42f:	50                   	push   eax
c001d430:	53                   	push   ebx
c001d431:	e8 fc fb ff ff       	call   c001d032 <ATA::flush(bool)>
c001d436:	83 c4 10             	add    esp,0x10
c001d439:	83 c4 2c             	add    esp,0x2c
c001d43c:	89 f8                	mov    eax,edi
c001d43e:	5b                   	pop    ebx
c001d43f:	5e                   	pop    esi
c001d440:	5f                   	pop    edi
c001d441:	5d                   	pop    ebp
c001d442:	c3                   	ret    
c001d443:	90                   	nop

c001d444 <ATA::read(unsigned long long, int, void*)>:
c001d444:	57                   	push   edi
c001d445:	b8 04 00 00 00       	mov    eax,0x4
c001d44a:	56                   	push   esi
c001d44b:	53                   	push   ebx
c001d44c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d450:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d454:	8d 7a ff             	lea    edi,[edx-0x1]
c001d457:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d45b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001d45f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d465:	77 25                	ja     c001d48c <ATA::read(unsigned long long, int, void*)+0x48>
c001d467:	b8 06 00 00 00       	mov    eax,0x6
c001d46c:	85 f6                	test   esi,esi
c001d46e:	74 1c                	je     c001d48c <ATA::read(unsigned long long, int, void*)+0x48>
c001d470:	50                   	push   eax
c001d471:	50                   	push   eax
c001d472:	6a 00                	push   0x0
c001d474:	56                   	push   esi
c001d475:	52                   	push   edx
c001d476:	53                   	push   ebx
c001d477:	51                   	push   ecx
c001d478:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d47c:	e8 47 fc ff ff       	call   c001d0c8 <ATA::access(unsigned long long, int, void*, bool)>
c001d481:	83 c4 20             	add    esp,0x20
c001d484:	85 c0                	test   eax,eax
c001d486:	0f 95 c0             	setne  al
c001d489:	0f b6 c0             	movzx  eax,al
c001d48c:	5b                   	pop    ebx
c001d48d:	5e                   	pop    esi
c001d48e:	5f                   	pop    edi
c001d48f:	c3                   	ret    

c001d490 <ATA::write(unsigned long long, int, void*)>:
c001d490:	57                   	push   edi
c001d491:	b8 04 00 00 00       	mov    eax,0x4
c001d496:	56                   	push   esi
c001d497:	53                   	push   ebx
c001d498:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d49c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d4a0:	8d 7a ff             	lea    edi,[edx-0x1]
c001d4a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d4a7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001d4ab:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d4b1:	77 25                	ja     c001d4d8 <ATA::write(unsigned long long, int, void*)+0x48>
c001d4b3:	b8 06 00 00 00       	mov    eax,0x6
c001d4b8:	85 f6                	test   esi,esi
c001d4ba:	74 1c                	je     c001d4d8 <ATA::write(unsigned long long, int, void*)+0x48>
c001d4bc:	50                   	push   eax
c001d4bd:	50                   	push   eax
c001d4be:	6a 01                	push   0x1
c001d4c0:	56                   	push   esi
c001d4c1:	52                   	push   edx
c001d4c2:	53                   	push   ebx
c001d4c3:	51                   	push   ecx
c001d4c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4c8:	e8 fb fb ff ff       	call   c001d0c8 <ATA::access(unsigned long long, int, void*, bool)>
c001d4cd:	83 c4 20             	add    esp,0x20
c001d4d0:	85 c0                	test   eax,eax
c001d4d2:	0f 95 c0             	setne  al
c001d4d5:	0f b6 c0             	movzx  eax,al
c001d4d8:	5b                   	pop    ebx
c001d4d9:	5e                   	pop    esi
c001d4da:	5f                   	pop    edi
c001d4db:	c3                   	ret    

c001d4dc <ATA::detectCHS()>:
c001d4dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d4e0:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d4e6:	c1 e0 06             	shl    eax,0x6
c001d4e9:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d4ef:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d4f9:	c7 44 24 04 04 26 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022604
c001d501:	e9 cb 4c ff ff       	jmp    c00121d1 <Krnl::panic(char const*)>

c001d506 <ATA::open(int, int, void*)>:
c001d506:	53                   	push   ebx
c001d507:	83 ec 08             	sub    esp,0x8
c001d50a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d50e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d512:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d516:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d51c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d522:	c1 e0 06             	shl    eax,0x6
c001d525:	01 d0                	add    eax,edx
c001d527:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d52e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d534:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d53b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d545:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d54b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d552:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d559:	75 0c                	jne    c001d567 <ATA::open(int, int, void*)+0x61>
c001d55b:	83 ec 0c             	sub    esp,0xc
c001d55e:	53                   	push   ebx
c001d55f:	e8 78 ff ff ff       	call   c001d4dc <ATA::detectCHS()>
c001d564:	83 c4 10             	add    esp,0x10
c001d567:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d56d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d573:	c1 e0 06             	shl    eax,0x6
c001d576:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d57d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d587:	d1 e8                	shr    eax,1
c001d589:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d58f:	6a 04                	push   0x4
c001d591:	6a 0c                	push   0xc
c001d593:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d59a:	50                   	push   eax
c001d59b:	52                   	push   edx
c001d59c:	e8 31 ec ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5a1:	90                   	nop
c001d5a2:	90                   	nop
c001d5a3:	6a 00                	push   0x0
c001d5a5:	6a 0c                	push   0xc
c001d5a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d5ae:	50                   	push   eax
c001d5af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d5b5:	e8 18 ec ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5ba:	83 c4 14             	add    esp,0x14
c001d5bd:	53                   	push   ebx
c001d5be:	e8 8f 07 ff ff       	call   c000dd52 <PhysicalDisk::startCache()>
c001d5c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d5c6:	e8 db 17 ff ff       	call   c000eda6 <createPartitionsForDisk(PhysicalDisk*)>
c001d5cb:	31 c0                	xor    eax,eax
c001d5cd:	83 c4 18             	add    esp,0x18
c001d5d0:	5b                   	pop    ebx
c001d5d1:	c3                   	ret    

c001d5d2 <ATAPI::write(unsigned long long, int, void*)>:
c001d5d2:	b8 03 00 00 00       	mov    eax,0x3
c001d5d7:	c3                   	ret    

c001d5d8 <ATAPI::close(int, int, void*)>:
c001d5d8:	83 ec 0c             	sub    esp,0xc
c001d5db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5df:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d5e5:	85 c0                	test   eax,eax
c001d5e7:	74 0c                	je     c001d5f5 <ATAPI::close(int, int, void*)+0x1d>
c001d5e9:	83 ec 0c             	sub    esp,0xc
c001d5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c001d5ee:	50                   	push   eax
c001d5ef:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d5f2:	83 c4 10             	add    esp,0x10
c001d5f5:	31 c0                	xor    eax,eax
c001d5f7:	83 c4 0c             	add    esp,0xc
c001d5fa:	c3                   	ret    
c001d5fb:	90                   	nop

c001d5fc <ATAPI::ATAPI()>:
c001d5fc:	83 ec 0c             	sub    esp,0xc
c001d5ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d603:	83 ec 04             	sub    esp,0x4
c001d606:	68 00 08 00 00       	push   0x800
c001d60b:	68 4d 27 02 c0       	push   0xc002274d
c001d610:	50                   	push   eax
c001d611:	e8 d4 06 ff ff       	call   c000dcea <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d616:	83 c4 10             	add    esp,0x10
c001d619:	ba 68 26 02 c0       	mov    edx,0xc0022668
c001d61e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d622:	89 10                	mov    DWORD PTR [eax],edx
c001d624:	90                   	nop
c001d625:	83 c4 0c             	add    esp,0xc
c001d628:	c3                   	ret    
c001d629:	90                   	nop

c001d62a <ATAPI::readyForCommand()>:
c001d62a:	56                   	push   esi
c001d62b:	53                   	push   ebx
c001d62c:	53                   	push   ebx
c001d62d:	31 db                	xor    ebx,ebx
c001d62f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d633:	51                   	push   ecx
c001d634:	6a 0c                	push   0xc
c001d636:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d63d:	50                   	push   eax
c001d63e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d644:	e8 49 ec ff ff       	call   c001c292 <IDE::read(unsigned char, unsigned char)>
c001d649:	83 c4 10             	add    esp,0x10
c001d64c:	a8 88                	test   al,0x88
c001d64e:	74 25                	je     c001d675 <ATAPI::readyForCommand()+0x4b>
c001d650:	43                   	inc    ebx
c001d651:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d657:	7e da                	jle    c001d633 <ATAPI::readyForCommand()+0x9>
c001d659:	83 ec 0c             	sub    esp,0xc
c001d65c:	68 5e 01 00 00       	push   0x15e
c001d661:	e8 e6 82 ff ff       	call   c001594c <milliTenthSleep(unsigned int)>
c001d666:	83 c4 10             	add    esp,0x10
c001d669:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d66f:	75 c2                	jne    c001d633 <ATAPI::readyForCommand()+0x9>
c001d671:	31 c0                	xor    eax,eax
c001d673:	eb 02                	jmp    c001d677 <ATAPI::readyForCommand()+0x4d>
c001d675:	b0 01                	mov    al,0x1
c001d677:	5a                   	pop    edx
c001d678:	5b                   	pop    ebx
c001d679:	5e                   	pop    esi
c001d67a:	c3                   	ret    
c001d67b:	90                   	nop

c001d67c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d67c:	55                   	push   ebp
c001d67d:	57                   	push   edi
c001d67e:	56                   	push   esi
c001d67f:	53                   	push   ebx
c001d680:	83 ec 20             	sub    esp,0x20
c001d683:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d687:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d68b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d68f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d693:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d697:	6a 01                	push   0x1
c001d699:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6a0:	50                   	push   eax
c001d6a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6a7:	e8 2e ed ff ff       	call   c001c3da <IDE::enableIRQs(unsigned char, bool)>
c001d6ac:	5e                   	pop    esi
c001d6ad:	58                   	pop    eax
c001d6ae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6b5:	50                   	push   eax
c001d6b6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6bc:	e8 eb ea ff ff       	call   c001c1ac <IDE::prepareInterrupt(unsigned char)>
c001d6c1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6c4:	e8 61 ff ff ff       	call   c001d62a <ATAPI::readyForCommand()>
c001d6c9:	83 c4 10             	add    esp,0x10
c001d6cc:	84 c0                	test   al,al
c001d6ce:	75 0a                	jne    c001d6da <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d6d0:	bb 01 00 00 00       	mov    ebx,0x1
c001d6d5:	e9 57 02 00 00       	jmp    c001d931 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d6da:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001d6e0:	c1 e0 04             	shl    eax,0x4
c001d6e3:	0f b6 c0             	movzx  eax,al
c001d6e6:	50                   	push   eax
c001d6e7:	6a 06                	push   0x6
c001d6e9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6f0:	50                   	push   eax
c001d6f1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6f7:	e8 d6 ea ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6fc:	6a 00                	push   0x0
c001d6fe:	6a 01                	push   0x1
c001d700:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d707:	50                   	push   eax
c001d708:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d70e:	e8 bf ea ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d713:	83 c4 20             	add    esp,0x20
c001d716:	0f b6 c3             	movzx  eax,bl
c001d719:	0f b6 df             	movzx  ebx,bh
c001d71c:	50                   	push   eax
c001d71d:	6a 04                	push   0x4
c001d71f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d726:	50                   	push   eax
c001d727:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d72d:	e8 a0 ea ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d732:	53                   	push   ebx
c001d733:	6a 05                	push   0x5
c001d735:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d73c:	50                   	push   eax
c001d73d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d743:	e8 8a ea ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d748:	83 c4 20             	add    esp,0x20
c001d74b:	68 a0 00 00 00       	push   0xa0
c001d750:	6a 07                	push   0x7
c001d752:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d759:	50                   	push   eax
c001d75a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d760:	e8 6d ea ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d765:	83 c4 0c             	add    esp,0xc
c001d768:	6a 01                	push   0x1
c001d76a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d771:	50                   	push   eax
c001d772:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d778:	e8 ed f4 ff ff       	call   c001cc6a <IDE::polling(unsigned char, unsigned int)>
c001d77d:	83 c4 10             	add    esp,0x10
c001d780:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001d786:	84 c0                	test   al,al
c001d788:	74 23                	je     c001d7ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d78a:	0f b6 d8             	movzx  ebx,al
c001d78d:	0f b6 d2             	movzx  edx,dl
c001d790:	53                   	push   ebx
c001d791:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001d798:	50                   	push   eax
c001d799:	52                   	push   edx
c001d79a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7a0:	e8 15 f4 ff ff       	call   c001cbba <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d7a5:	83 c4 10             	add    esp,0x10
c001d7a8:	e9 84 01 00 00       	jmp    c001d931 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d7ad:	0f b6 d2             	movzx  edx,dl
c001d7b0:	53                   	push   ebx
c001d7b1:	53                   	push   ebx
c001d7b2:	52                   	push   edx
c001d7b3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7b9:	e8 02 ea ff ff       	call   c001c1c0 <IDE::getBase(unsigned char)>
c001d7be:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d7c2:	b9 06 00 00 00       	mov    ecx,0x6
c001d7c7:	89 c2                	mov    edx,eax
c001d7c9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d7cc:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d7d0:	83 c4 10             	add    esp,0x10
c001d7d3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d7d9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d7e0:	85 db                	test   ebx,ebx
c001d7e2:	0f 84 ec 00 00 00    	je     c001d8d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d7e8:	51                   	push   ecx
c001d7e9:	51                   	push   ecx
c001d7ea:	52                   	push   edx
c001d7eb:	50                   	push   eax
c001d7ec:	e8 4f eb ff ff       	call   c001c340 <IDE::waitInterrupt(unsigned char)>
c001d7f1:	83 c4 10             	add    esp,0x10
c001d7f4:	84 c0                	test   al,al
c001d7f6:	0f 84 d4 fe ff ff    	je     c001d6d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d7fc:	56                   	push   esi
c001d7fd:	56                   	push   esi
c001d7fe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d805:	50                   	push   eax
c001d806:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d80c:	e8 9b e9 ff ff       	call   c001c1ac <IDE::prepareInterrupt(unsigned char)>
c001d811:	83 c4 0c             	add    esp,0xc
c001d814:	6a 04                	push   0x4
c001d816:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d81d:	50                   	push   eax
c001d81e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d824:	e8 69 ea ff ff       	call   c001c292 <IDE::read(unsigned char, unsigned char)>
c001d829:	83 c4 0c             	add    esp,0xc
c001d82c:	89 c6                	mov    esi,eax
c001d82e:	6a 05                	push   0x5
c001d830:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d837:	50                   	push   eax
c001d838:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d83e:	e8 4f ea ff ff       	call   c001c292 <IDE::read(unsigned char, unsigned char)>
c001d843:	89 f1                	mov    ecx,esi
c001d845:	0f b6 c0             	movzx  eax,al
c001d848:	0f b6 f1             	movzx  esi,cl
c001d84b:	c1 e0 08             	shl    eax,0x8
c001d84e:	09 c6                	or     esi,eax
c001d850:	d1 fe                	sar    esi,1
c001d852:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d856:	83 c4 10             	add    esp,0x10
c001d859:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d85e:	74 41                	je     c001d8a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001d860:	31 c9                	xor    ecx,ecx
c001d862:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d868:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d86f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d873:	75 0a                	jne    c001d87f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001d875:	01 c9                	add    ecx,ecx
c001d877:	01 cd                	add    ebp,ecx
c001d879:	4b                   	dec    ebx
c001d87a:	e9 54 ff ff ff       	jmp    c001d7d3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001d87f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d884:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d888:	51                   	push   ecx
c001d889:	51                   	push   ecx
c001d88a:	52                   	push   edx
c001d88b:	50                   	push   eax
c001d88c:	e8 2f e9 ff ff       	call   c001c1c0 <IDE::getBase(unsigned char)>
c001d891:	89 c2                	mov    edx,eax
c001d893:	89 f0                	mov    eax,esi
c001d895:	66 ef                	out    dx,ax
c001d897:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d89b:	83 c4 10             	add    esp,0x10
c001d89e:	41                   	inc    ecx
c001d89f:	eb c1                	jmp    c001d862 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001d8a1:	31 f6                	xor    esi,esi
c001d8a3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d8a9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d8b0:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d8b4:	75 06                	jne    c001d8bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001d8b6:	01 f6                	add    esi,esi
c001d8b8:	01 f5                	add    ebp,esi
c001d8ba:	eb bd                	jmp    c001d879 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001d8bc:	51                   	push   ecx
c001d8bd:	51                   	push   ecx
c001d8be:	52                   	push   edx
c001d8bf:	50                   	push   eax
c001d8c0:	e8 fb e8 ff ff       	call   c001c1c0 <IDE::getBase(unsigned char)>
c001d8c5:	89 c2                	mov    edx,eax
c001d8c7:	66 ed                	in     ax,dx
c001d8c9:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d8ce:	83 c4 10             	add    esp,0x10
c001d8d1:	46                   	inc    esi
c001d8d2:	eb cf                	jmp    c001d8a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001d8d4:	51                   	push   ecx
c001d8d5:	51                   	push   ecx
c001d8d6:	52                   	push   edx
c001d8d7:	50                   	push   eax
c001d8d8:	e8 63 ea ff ff       	call   c001c340 <IDE::waitInterrupt(unsigned char)>
c001d8dd:	83 c4 10             	add    esp,0x10
c001d8e0:	84 c0                	test   al,al
c001d8e2:	0f 84 e8 fd ff ff    	je     c001d6d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d8e8:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d8ed:	52                   	push   edx
c001d8ee:	52                   	push   edx
c001d8ef:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d8f6:	50                   	push   eax
c001d8f7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d8fd:	e8 aa e8 ff ff       	call   c001c1ac <IDE::prepareInterrupt(unsigned char)>
c001d902:	83 c4 10             	add    esp,0x10
c001d905:	50                   	push   eax
c001d906:	50                   	push   eax
c001d907:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d90e:	50                   	push   eax
c001d90f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d915:	e8 a6 e8 ff ff       	call   c001c1c0 <IDE::getBase(unsigned char)>
c001d91a:	8d 50 07             	lea    edx,[eax+0x7]
c001d91d:	ec                   	in     al,dx
c001d91e:	83 c4 10             	add    esp,0x10
c001d921:	a8 88                	test   al,0x88
c001d923:	74 0a                	je     c001d92f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d925:	4b                   	dec    ebx
c001d926:	75 dd                	jne    c001d905 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d928:	bb 02 00 00 00       	mov    ebx,0x2
c001d92d:	eb 02                	jmp    c001d931 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d92f:	31 db                	xor    ebx,ebx
c001d931:	83 c4 1c             	add    esp,0x1c
c001d934:	89 d8                	mov    eax,ebx
c001d936:	5b                   	pop    ebx
c001d937:	5e                   	pop    esi
c001d938:	5f                   	pop    edi
c001d939:	5d                   	pop    ebp
c001d93a:	c3                   	ret    
c001d93b:	90                   	nop

c001d93c <ATAPI::diskRemoved()>:
c001d93c:	53                   	push   ebx
c001d93d:	83 ec 14             	sub    esp,0x14
c001d940:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d944:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d94b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d951:	e8 ce 11 ff ff       	call   c000eb24 <LogicalDisk::unmount()>
c001d956:	58                   	pop    eax
c001d957:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d95d:	e8 0a 1b ff ff       	call   c000f46c <VCache::writeWriteBuffer()>
c001d962:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d968:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d96c:	83 c4 18             	add    esp,0x18
c001d96f:	5b                   	pop    ebx
c001d970:	e9 e7 1a ff ff       	jmp    c000f45c <VCache::invalidateReadBuffer()>
c001d975:	90                   	nop

c001d976 <ATAPI::eject()>:
c001d976:	57                   	push   edi
c001d977:	b9 03 00 00 00       	mov    ecx,0x3
c001d97c:	53                   	push   ebx
c001d97d:	83 ec 14             	sub    esp,0x14
c001d980:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d984:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d988:	fc                   	cld    
c001d989:	31 c0                	xor    eax,eax
c001d98b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d98d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d992:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d997:	50                   	push   eax
c001d998:	50                   	push   eax
c001d999:	6a 00                	push   0x0
c001d99b:	6a 00                	push   0x0
c001d99d:	6a 00                	push   0x0
c001d99f:	6a 02                	push   0x2
c001d9a1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d9a5:	50                   	push   eax
c001d9a6:	53                   	push   ebx
c001d9a7:	e8 d0 fc ff ff       	call   c001d67c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d9ac:	83 c4 14             	add    esp,0x14
c001d9af:	53                   	push   ebx
c001d9b0:	e8 87 ff ff ff       	call   c001d93c <ATAPI::diskRemoved()>
c001d9b5:	83 c4 24             	add    esp,0x24
c001d9b8:	31 c0                	xor    eax,eax
c001d9ba:	5b                   	pop    ebx
c001d9bb:	5f                   	pop    edi
c001d9bc:	c3                   	ret    
c001d9bd:	90                   	nop

c001d9be <ATAPI::diskInserted()>:
c001d9be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9c2:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d9c9:	c3                   	ret    

c001d9ca <ATAPI::detectMedia()>:
c001d9ca:	56                   	push   esi
c001d9cb:	53                   	push   ebx
c001d9cc:	83 ec 28             	sub    esp,0x28
c001d9cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d9d3:	6a 0c                	push   0xc
c001d9d5:	6a 00                	push   0x0
c001d9d7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d9db:	56                   	push   esi
c001d9dc:	e8 c7 2a fe ff       	call   c00004a8 <memset>
c001d9e1:	58                   	pop    eax
c001d9e2:	5a                   	pop    edx
c001d9e3:	6a 00                	push   0x0
c001d9e5:	6a 00                	push   0x0
c001d9e7:	6a 00                	push   0x0
c001d9e9:	6a 00                	push   0x0
c001d9eb:	56                   	push   esi
c001d9ec:	53                   	push   ebx
c001d9ed:	e8 8a fc ff ff       	call   c001d67c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d9f2:	83 c4 1c             	add    esp,0x1c
c001d9f5:	6a 0c                	push   0xc
c001d9f7:	6a 00                	push   0x0
c001d9f9:	56                   	push   esi
c001d9fa:	e8 a9 2a fe ff       	call   c00004a8 <memset>
c001d9ff:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001da04:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001da09:	59                   	pop    ecx
c001da0a:	58                   	pop    eax
c001da0b:	6a 01                	push   0x1
c001da0d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001da11:	50                   	push   eax
c001da12:	6a 00                	push   0x0
c001da14:	6a 12                	push   0x12
c001da16:	56                   	push   esi
c001da17:	53                   	push   ebx
c001da18:	e8 5f fc ff ff       	call   c001d67c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da1d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001da21:	83 c4 20             	add    esp,0x20
c001da24:	83 e0 7f             	and    eax,0x7f
c001da27:	3c 70                	cmp    al,0x70
c001da29:	74 15                	je     c001da40 <ATAPI::detectMedia()+0x76>
c001da2b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da32:	75 0c                	jne    c001da40 <ATAPI::detectMedia()+0x76>
c001da34:	83 ec 0c             	sub    esp,0xc
c001da37:	53                   	push   ebx
c001da38:	e8 81 ff ff ff       	call   c001d9be <ATAPI::diskInserted()>
c001da3d:	83 c4 10             	add    esp,0x10
c001da40:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001da44:	83 e0 0f             	and    eax,0xf
c001da47:	3c 02                	cmp    al,0x2
c001da49:	75 1b                	jne    c001da66 <ATAPI::detectMedia()+0x9c>
c001da4b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001da50:	75 2d                	jne    c001da7f <ATAPI::detectMedia()+0xb5>
c001da52:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da59:	74 24                	je     c001da7f <ATAPI::detectMedia()+0xb5>
c001da5b:	83 ec 0c             	sub    esp,0xc
c001da5e:	53                   	push   ebx
c001da5f:	e8 d8 fe ff ff       	call   c001d93c <ATAPI::diskRemoved()>
c001da64:	eb 16                	jmp    c001da7c <ATAPI::detectMedia()+0xb2>
c001da66:	84 c0                	test   al,al
c001da68:	75 15                	jne    c001da7f <ATAPI::detectMedia()+0xb5>
c001da6a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da71:	75 0c                	jne    c001da7f <ATAPI::detectMedia()+0xb5>
c001da73:	83 ec 0c             	sub    esp,0xc
c001da76:	53                   	push   ebx
c001da77:	e8 42 ff ff ff       	call   c001d9be <ATAPI::diskInserted()>
c001da7c:	83 c4 10             	add    esp,0x10
c001da7f:	83 c4 24             	add    esp,0x24
c001da82:	5b                   	pop    ebx
c001da83:	5e                   	pop    esi
c001da84:	c3                   	ret    
c001da85:	90                   	nop

c001da86 <ATAPI::open(int, int, void*)>:
c001da86:	56                   	push   esi
c001da87:	53                   	push   ebx
c001da88:	50                   	push   eax
c001da89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da91:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da95:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001da9b:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001daa1:	c1 e0 06             	shl    eax,0x6
c001daa4:	01 d0                	add    eax,edx
c001daa6:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001daad:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001dab3:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001daba:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001dac4:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001daca:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001dad1:	6a 04                	push   0x4
c001dad3:	6a 0c                	push   0xc
c001dad5:	51                   	push   ecx
c001dad6:	52                   	push   edx
c001dad7:	e8 f6 e6 ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dadc:	90                   	nop
c001dadd:	90                   	nop
c001dade:	6a 00                	push   0x0
c001dae0:	6a 0c                	push   0xc
c001dae2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dae9:	50                   	push   eax
c001daea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001daf0:	e8 dd e6 ff ff       	call   c001c1d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001daf5:	83 c4 14             	add    esp,0x14
c001daf8:	68 74 01 00 00       	push   0x174
c001dafd:	e8 6f bc fe ff       	call   c0009771 <malloc>
c001db02:	83 c4 0c             	add    esp,0xc
c001db05:	89 c6                	mov    esi,eax
c001db07:	6a 00                	push   0x0
c001db09:	68 ff ff ff 7f       	push   0x7fffffff
c001db0e:	6a 00                	push   0x0
c001db10:	6a 00                	push   0x0
c001db12:	53                   	push   ebx
c001db13:	68 36 28 02 c0       	push   0xc0022836
c001db18:	50                   	push   eax
c001db19:	e8 52 0e ff ff       	call   c000e970 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001db1e:	83 c4 14             	add    esp,0x14
c001db21:	56                   	push   esi
c001db22:	e8 ff 0e ff ff       	call   c000ea26 <LogicalDisk::assignDriveLetter()>
c001db27:	5a                   	pop    edx
c001db28:	0f be c0             	movsx  eax,al
c001db2b:	59                   	pop    ecx
c001db2c:	50                   	push   eax
c001db2d:	68 50 26 02 c0       	push   0xc0022650
c001db32:	e8 c4 e9 fe ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c001db37:	58                   	pop    eax
c001db38:	5a                   	pop    edx
c001db39:	56                   	push   esi
c001db3a:	53                   	push   ebx
c001db3b:	e8 de fd fe ff       	call   c000d91e <Device::addChild(Device*)>
c001db40:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001db46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db49:	e8 04 02 ff ff       	call   c000dd52 <PhysicalDisk::startCache()>
c001db4e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001db55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db58:	e8 6d fe ff ff       	call   c001d9ca <ATAPI::detectMedia()>
c001db5d:	83 c4 14             	add    esp,0x14
c001db60:	31 c0                	xor    eax,eax
c001db62:	5b                   	pop    ebx
c001db63:	5e                   	pop    esi
c001db64:	c3                   	ret    
c001db65:	90                   	nop

c001db66 <ATAPI::read(unsigned long long, int, void*)>:
c001db66:	55                   	push   ebp
c001db67:	57                   	push   edi
c001db68:	56                   	push   esi
c001db69:	53                   	push   ebx
c001db6a:	83 ec 1c             	sub    esp,0x1c
c001db6d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001db71:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001db75:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001db79:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001db80:	74 41                	je     c001dbc3 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001db82:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001db86:	b9 03 00 00 00       	mov    ecx,0x3
c001db8b:	fc                   	cld    
c001db8c:	31 c0                	xor    eax,eax
c001db8e:	86 fb                	xchg   bl,bh
c001db90:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001db92:	c1 c3 10             	rol    ebx,0x10
c001db95:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001db9a:	89 e8                	mov    eax,ebp
c001db9c:	86 fb                	xchg   bl,bh
c001db9e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001dba2:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001dba6:	50                   	push   eax
c001dba7:	50                   	push   eax
c001dba8:	55                   	push   ebp
c001dba9:	c1 e5 0b             	shl    ebp,0xb
c001dbac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dbb0:	6a 00                	push   0x0
c001dbb2:	55                   	push   ebp
c001dbb3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dbb7:	50                   	push   eax
c001dbb8:	56                   	push   esi
c001dbb9:	e8 be fa ff ff       	call   c001d67c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dbbe:	83 c4 20             	add    esp,0x20
c001dbc1:	eb 1a                	jmp    c001dbdd <ATAPI::read(unsigned long long, int, void*)+0x77>
c001dbc3:	83 ec 0c             	sub    esp,0xc
c001dbc6:	56                   	push   esi
c001dbc7:	e8 fe fd ff ff       	call   c001d9ca <ATAPI::detectMedia()>
c001dbcc:	83 c4 10             	add    esp,0x10
c001dbcf:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001dbd6:	75 aa                	jne    c001db82 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001dbd8:	b8 02 00 00 00       	mov    eax,0x2
c001dbdd:	83 c4 1c             	add    esp,0x1c
c001dbe0:	5b                   	pop    ebx
c001dbe1:	5e                   	pop    esi
c001dbe2:	5f                   	pop    edi
c001dbe3:	5d                   	pop    ebp
c001dbe4:	c3                   	ret    
c001dbe5:	90                   	nop

c001dbe6 <SATA::close(int, int, void*)>:
c001dbe6:	83 ec 0c             	sub    esp,0xc
c001dbe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbed:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dbf3:	85 c0                	test   eax,eax
c001dbf5:	74 0c                	je     c001dc03 <SATA::close(int, int, void*)+0x1d>
c001dbf7:	83 ec 0c             	sub    esp,0xc
c001dbfa:	8b 10                	mov    edx,DWORD PTR [eax]
c001dbfc:	50                   	push   eax
c001dbfd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dc00:	83 c4 10             	add    esp,0x10
c001dc03:	31 c0                	xor    eax,eax
c001dc05:	83 c4 0c             	add    esp,0xc
c001dc08:	c3                   	ret    
c001dc09:	90                   	nop

c001dc0a <SATA::powerSaving(PowerSavingLevel)>:
c001dc0a:	c3                   	ret    
c001dc0b:	90                   	nop

c001dc0c <SATA::open(int, int, void*)>:
c001dc0c:	56                   	push   esi
c001dc0d:	53                   	push   ebx
c001dc0e:	50                   	push   eax
c001dc0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dc13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc17:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dc21:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001dc27:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001dc31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc35:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dc3f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001dc45:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dc4c:	e8 e7 be fe ff       	call   c0009b38 <Phys::allocatePage()>
c001dc51:	89 c6                	mov    esi,eax
c001dc53:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dc59:	81 c6 00 10 00 00    	add    esi,0x1000
c001dc5f:	e8 d4 be fe ff       	call   c0009b38 <Phys::allocatePage()>
c001dc64:	39 c6                	cmp    esi,eax
c001dc66:	74 10                	je     c001dc78 <SATA::open(int, int, void*)+0x6c>
c001dc68:	83 ec 0c             	sub    esp,0xc
c001dc6b:	68 98 26 02 c0       	push   0xc0022698
c001dc70:	e8 5c 45 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001dc75:	83 c4 10             	add    esp,0x10
c001dc78:	83 ec 0c             	sub    esp,0xc
c001dc7b:	6a 02                	push   0x2
c001dc7d:	e8 17 d6 fe ff       	call   c000b299 <Virt::allocateKernelVirtualPages(int)>
c001dc82:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dc88:	6a 03                	push   0x3
c001dc8a:	50                   	push   eax
c001dc8b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001dc91:	ff 35 b4 32 02 c0    	push   DWORD PTR ds:0xc00232b4
c001dc97:	e8 50 dc fe ff       	call   c000b8ec <VAS::mapPage(unsigned long, unsigned long, int)>
c001dc9c:	83 c4 14             	add    esp,0x14
c001dc9f:	53                   	push   ebx
c001dca0:	e8 ad 00 ff ff       	call   c000dd52 <PhysicalDisk::startCache()>
c001dca5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dca8:	e8 f9 10 ff ff       	call   c000eda6 <createPartitionsForDisk(PhysicalDisk*)>
c001dcad:	83 c4 14             	add    esp,0x14
c001dcb0:	31 c0                	xor    eax,eax
c001dcb2:	5b                   	pop    ebx
c001dcb3:	5e                   	pop    esi
c001dcb4:	c3                   	ret    
c001dcb5:	90                   	nop

c001dcb6 <SATA::SATA()>:
c001dcb6:	83 ec 0c             	sub    esp,0xc
c001dcb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcbd:	83 ec 04             	sub    esp,0x4
c001dcc0:	68 00 02 00 00       	push   0x200
c001dcc5:	68 ac 26 02 c0       	push   0xc00226ac
c001dcca:	50                   	push   eax
c001dccb:	e8 1a 00 ff ff       	call   c000dcea <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dcd0:	83 c4 10             	add    esp,0x10
c001dcd3:	ba 1c 27 02 c0       	mov    edx,0xc002271c
c001dcd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcdc:	89 10                	mov    DWORD PTR [eax],edx
c001dcde:	90                   	nop
c001dcdf:	83 c4 0c             	add    esp,0xc
c001dce2:	c3                   	ret    
c001dce3:	90                   	nop

c001dce4 <SATA::access(unsigned long long, int, void*, bool)>:
c001dce4:	55                   	push   ebp
c001dce5:	57                   	push   edi
c001dce6:	56                   	push   esi
c001dce7:	53                   	push   ebx
c001dce8:	83 ec 2c             	sub    esp,0x2c
c001dceb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dcef:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dcf3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dcf7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dcfb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dcff:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dd04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dd08:	7e 10                	jle    c001dd1a <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001dd0a:	83 ec 0c             	sub    esp,0xc
c001dd0d:	68 bc 26 02 c0       	push   0xc00226bc
c001dd12:	e8 ba 44 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001dd17:	83 c4 10             	add    esp,0x10
c001dd1a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dd20:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dd26:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dd2c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dd30:	89 d0                	mov    eax,edx
c001dd32:	c1 e0 07             	shl    eax,0x7
c001dd35:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dd39:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dd43:	51                   	push   ecx
c001dd44:	8d 42 02             	lea    eax,[edx+0x2]
c001dd47:	51                   	push   ecx
c001dd48:	c1 e0 07             	shl    eax,0x7
c001dd4b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dd4f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dd53:	50                   	push   eax
c001dd54:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dd5a:	e8 eb ef ff ff       	call   c001cd4a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dd5f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dd63:	83 c4 10             	add    esp,0x10
c001dd66:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001dd6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd6f:	0f 84 4f 01 00 00    	je     c001dec4 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001dd75:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dd79:	c1 e0 09             	shl    eax,0x9
c001dd7c:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001dd81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dd85:	74 0e                	je     c001dd95 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001dd87:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001dd8d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001dd91:	89 c1                	mov    ecx,eax
c001dd93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dd95:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dd99:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dd9f:	8d 42 02             	lea    eax,[edx+0x2]
c001dda2:	c1 e0 07             	shl    eax,0x7
c001dda5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dda9:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddab:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ddb1:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ddb7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ddbb:	c1 e1 05             	shl    ecx,0x5
c001ddbe:	01 c8                	add    eax,ecx
c001ddc0:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ddc4:	83 e1 01             	and    ecx,0x1
c001ddc7:	89 ce                	mov    esi,ecx
c001ddc9:	8a 08                	mov    cl,BYTE PTR [eax]
c001ddcb:	c1 e6 06             	shl    esi,0x6
c001ddce:	83 e1 bf             	and    ecx,0xffffffbf
c001ddd1:	09 f1                	or     ecx,esi
c001ddd3:	88 08                	mov    BYTE PTR [eax],cl
c001ddd5:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ddd7:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001dddd:	81 c9 05 00 01 00    	or     ecx,0x10005
c001dde3:	89 08                	mov    DWORD PTR [eax],ecx
c001dde5:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ddeb:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ddf1:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ddf7:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ddfa:	50                   	push   eax
c001ddfb:	68 90 00 00 00       	push   0x90
c001de00:	6a 00                	push   0x0
c001de02:	56                   	push   esi
c001de03:	e8 a0 26 fe ff       	call   c00004a8 <memset>
c001de08:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001de0e:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001de12:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001de18:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001de1c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001de20:	83 c4 10             	add    esp,0x10
c001de23:	48                   	dec    eax
c001de24:	25 ff ff 3f 00       	and    eax,0x3fffff
c001de29:	89 c1                	mov    ecx,eax
c001de2b:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001de31:	25 00 00 c0 ff       	and    eax,0xffc00000
c001de36:	09 c8                	or     eax,ecx
c001de38:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001de3e:	66 8b 06             	mov    ax,WORD PTR [esi]
c001de41:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001de48:	66 25 00 7f          	and    ax,0x7f00
c001de4c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001de50:	66 0d 27 80          	or     ax,0x8027
c001de54:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001de59:	66 89 06             	mov    WORD PTR [esi],ax
c001de5c:	19 c0                	sbb    eax,eax
c001de5e:	83 e0 f0             	and    eax,0xfffffff0
c001de61:	83 c0 35             	add    eax,0x35
c001de64:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001de67:	89 e8                	mov    eax,ebp
c001de69:	c1 e8 10             	shr    eax,0x10
c001de6c:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001de6f:	89 e8                	mov    eax,ebp
c001de71:	c1 e8 18             	shr    eax,0x18
c001de74:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001de77:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001de7b:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001de7e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001de82:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001de85:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001de89:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001de8d:	89 d6                	mov    esi,edx
c001de8f:	31 c0                	xor    eax,eax
c001de91:	c1 e6 07             	shl    esi,0x7
c001de94:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001de98:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001de9e:	80 e1 88             	and    cl,0x88
c001dea1:	74 0a                	je     c001dead <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001dea3:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001dea8:	74 0a                	je     c001deb4 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001deaa:	40                   	inc    eax
c001deab:	eb eb                	jmp    c001de98 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001dead:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001deb2:	75 17                	jne    c001decb <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001deb4:	83 ec 0c             	sub    esp,0xc
c001deb7:	68 f5 26 02 c0       	push   0xc00226f5
c001debc:	e8 3a e6 fe ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c001dec1:	83 c4 10             	add    esp,0x10
c001dec4:	b8 01 00 00 00       	mov    eax,0x1
c001dec9:	eb 5d                	jmp    c001df28 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001decb:	b8 01 00 00 00       	mov    eax,0x1
c001ded0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ded4:	c1 e2 07             	shl    edx,0x7
c001ded7:	d3 e0                	shl    eax,cl
c001ded9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001dedd:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001dee3:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001dee9:	85 c8                	test   eax,ecx
c001deeb:	74 16                	je     c001df03 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001deed:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001def3:	0f ba e1 1e          	bt     ecx,0x1e
c001def7:	73 ea                	jae    c001dee3 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001def9:	83 ec 0c             	sub    esp,0xc
c001defc:	68 03 27 02 c0       	push   0xc0022703
c001df01:	eb b9                	jmp    c001debc <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001df03:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001df09:	0f ba e0 1e          	bt     eax,0x1e
c001df0d:	72 b5                	jb     c001dec4 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001df0f:	31 c0                	xor    eax,eax
c001df11:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001df16:	75 10                	jne    c001df28 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001df18:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001df1e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001df22:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001df26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001df28:	83 c4 2c             	add    esp,0x2c
c001df2b:	5b                   	pop    ebx
c001df2c:	5e                   	pop    esi
c001df2d:	5f                   	pop    edi
c001df2e:	5d                   	pop    ebp
c001df2f:	c3                   	ret    

c001df30 <SATA::read(unsigned long long, int, void*)>:
c001df30:	57                   	push   edi
c001df31:	b8 04 00 00 00       	mov    eax,0x4
c001df36:	56                   	push   esi
c001df37:	53                   	push   ebx
c001df38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001df3c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001df40:	8d 7a ff             	lea    edi,[edx-0x1]
c001df43:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001df47:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001df4b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001df51:	77 25                	ja     c001df78 <SATA::read(unsigned long long, int, void*)+0x48>
c001df53:	b8 06 00 00 00       	mov    eax,0x6
c001df58:	85 f6                	test   esi,esi
c001df5a:	74 1c                	je     c001df78 <SATA::read(unsigned long long, int, void*)+0x48>
c001df5c:	50                   	push   eax
c001df5d:	50                   	push   eax
c001df5e:	6a 00                	push   0x0
c001df60:	56                   	push   esi
c001df61:	52                   	push   edx
c001df62:	53                   	push   ebx
c001df63:	51                   	push   ecx
c001df64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df68:	e8 77 fd ff ff       	call   c001dce4 <SATA::access(unsigned long long, int, void*, bool)>
c001df6d:	83 c4 20             	add    esp,0x20
c001df70:	85 c0                	test   eax,eax
c001df72:	0f 95 c0             	setne  al
c001df75:	0f b6 c0             	movzx  eax,al
c001df78:	5b                   	pop    ebx
c001df79:	5e                   	pop    esi
c001df7a:	5f                   	pop    edi
c001df7b:	c3                   	ret    

c001df7c <SATA::write(unsigned long long, int, void*)>:
c001df7c:	55                   	push   ebp
c001df7d:	b8 04 00 00 00       	mov    eax,0x4
c001df82:	57                   	push   edi
c001df83:	56                   	push   esi
c001df84:	53                   	push   ebx
c001df85:	83 ec 0c             	sub    esp,0xc
c001df88:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001df8c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001df90:	8d 73 ff             	lea    esi,[ebx-0x1]
c001df93:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001df97:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001df9b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001dfa1:	77 3d                	ja     c001dfe0 <SATA::write(unsigned long long, int, void*)+0x64>
c001dfa3:	b8 06 00 00 00       	mov    eax,0x6
c001dfa8:	85 ed                	test   ebp,ebp
c001dfaa:	74 34                	je     c001dfe0 <SATA::write(unsigned long long, int, void*)+0x64>
c001dfac:	c1 e3 09             	shl    ebx,0x9
c001dfaf:	01 eb                	add    ebx,ebp
c001dfb1:	89 d6                	mov    esi,edx
c001dfb3:	89 cf                	mov    edi,ecx
c001dfb5:	83 c6 01             	add    esi,0x1
c001dfb8:	83 d7 00             	adc    edi,0x0
c001dfbb:	50                   	push   eax
c001dfbc:	50                   	push   eax
c001dfbd:	6a 01                	push   0x1
c001dfbf:	55                   	push   ebp
c001dfc0:	81 c5 00 02 00 00    	add    ebp,0x200
c001dfc6:	6a 01                	push   0x1
c001dfc8:	51                   	push   ecx
c001dfc9:	52                   	push   edx
c001dfca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dfce:	e8 11 fd ff ff       	call   c001dce4 <SATA::access(unsigned long long, int, void*, bool)>
c001dfd3:	83 c4 20             	add    esp,0x20
c001dfd6:	89 f2                	mov    edx,esi
c001dfd8:	89 f9                	mov    ecx,edi
c001dfda:	39 dd                	cmp    ebp,ebx
c001dfdc:	75 d3                	jne    c001dfb1 <SATA::write(unsigned long long, int, void*)+0x35>
c001dfde:	31 c0                	xor    eax,eax
c001dfe0:	83 c4 0c             	add    esp,0xc
c001dfe3:	5b                   	pop    ebx
c001dfe4:	5e                   	pop    esi
c001dfe5:	5f                   	pop    edi
c001dfe6:	5d                   	pop    ebp
c001dfe7:	c3                   	ret    

c001dfe8 <SATAPI::write(unsigned long long, int, void*)>:
c001dfe8:	b8 03 00 00 00       	mov    eax,0x3
c001dfed:	c3                   	ret    

c001dfee <SATAPI::close(int, int, void*)>:
c001dfee:	83 ec 0c             	sub    esp,0xc
c001dff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dff5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dffb:	85 c0                	test   eax,eax
c001dffd:	74 0c                	je     c001e00b <SATAPI::close(int, int, void*)+0x1d>
c001dfff:	83 ec 0c             	sub    esp,0xc
c001e002:	8b 10                	mov    edx,DWORD PTR [eax]
c001e004:	50                   	push   eax
c001e005:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e008:	83 c4 10             	add    esp,0x10
c001e00b:	31 c0                	xor    eax,eax
c001e00d:	83 c4 0c             	add    esp,0xc
c001e010:	c3                   	ret    
c001e011:	90                   	nop

c001e012 <SATAPI::SATAPI()>:
c001e012:	83 ec 0c             	sub    esp,0xc
c001e015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e019:	83 ec 04             	sub    esp,0x4
c001e01c:	68 00 08 00 00       	push   0x800
c001e021:	68 4c 27 02 c0       	push   0xc002274c
c001e026:	50                   	push   eax
c001e027:	e8 be fc fe ff       	call   c000dcea <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e02c:	83 c4 10             	add    esp,0x10
c001e02f:	ba 88 28 02 c0       	mov    edx,0xc0022888
c001e034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e038:	89 10                	mov    DWORD PTR [eax],edx
c001e03a:	90                   	nop
c001e03b:	83 c4 0c             	add    esp,0xc
c001e03e:	c3                   	ret    
c001e03f:	90                   	nop

c001e040 <SATAPI::diskRemoved()>:
c001e040:	c3                   	ret    
c001e041:	90                   	nop

c001e042 <SATAPI::diskInserted()>:
c001e042:	83 ec 18             	sub    esp,0x18
c001e045:	68 58 27 02 c0       	push   0xc0022758
c001e04a:	e8 ac e4 fe ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c001e04f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e053:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e05a:	83 c4 1c             	add    esp,0x1c
c001e05d:	c3                   	ret    

c001e05e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e05e:	55                   	push   ebp
c001e05f:	57                   	push   edi
c001e060:	56                   	push   esi
c001e061:	53                   	push   ebx
c001e062:	83 ec 38             	sub    esp,0x38
c001e065:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001e069:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001e06d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e071:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e075:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e079:	68 70 27 02 c0       	push   0xc0022770
c001e07e:	e8 78 e4 fe ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c001e083:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e089:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e08f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e093:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e09d:	c1 e0 07             	shl    eax,0x7
c001e0a0:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001e0a4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e0a8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e0b2:	5a                   	pop    edx
c001e0b3:	59                   	pop    ecx
c001e0b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e0b8:	8d 58 02             	lea    ebx,[eax+0x2]
c001e0bb:	c1 e3 07             	shl    ebx,0x7
c001e0be:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001e0c2:	53                   	push   ebx
c001e0c3:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e0c9:	e8 7c ec ff ff       	call   c001cd4a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e0ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e0d2:	83 c4 10             	add    esp,0x10
c001e0d5:	b8 01 00 00 00       	mov    eax,0x1
c001e0da:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e0df:	0f 84 ff 01 00 00    	je     c001e2e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001e0e5:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e0eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e0ed:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e0f3:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e0f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e0fd:	c1 e1 05             	shl    ecx,0x5
c001e100:	01 c8                	add    eax,ecx
c001e102:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e104:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e10a:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e110:	89 08                	mov    DWORD PTR [eax],ecx
c001e112:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e118:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e11e:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e124:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e127:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e12a:	50                   	push   eax
c001e12b:	68 90 00 00 00       	push   0x90
c001e130:	6a 00                	push   0x0
c001e132:	53                   	push   ebx
c001e133:	e8 70 23 fe ff       	call   c00004a8 <memset>
c001e138:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e13c:	b9 0c 00 00 00       	mov    ecx,0xc
c001e141:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e143:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e149:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e14d:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e153:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e157:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e15b:	48                   	dec    eax
c001e15c:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e161:	89 c1                	mov    ecx,eax
c001e163:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e169:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e16e:	09 c8                	or     eax,ecx
c001e170:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e176:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e179:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001e180:	66 25 00 7f          	and    ax,0x7f00
c001e184:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e188:	66 0d 27 80          	or     ax,0x8027
c001e18c:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e190:	66 89 03             	mov    WORD PTR [ebx],ax
c001e193:	89 d0                	mov    eax,edx
c001e195:	c1 ea 18             	shr    edx,0x18
c001e198:	c1 e8 10             	shr    eax,0x10
c001e19b:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e19e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e1a1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e1a5:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e1a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e1ac:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e1af:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e1b3:	83 c4 10             	add    esp,0x10
c001e1b6:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e1ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e1be:	31 c0                	xor    eax,eax
c001e1c0:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e1c6:	80 e1 88             	and    cl,0x88
c001e1c9:	74 0a                	je     c001e1d5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001e1cb:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e1d0:	74 0a                	je     c001e1dc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001e1d2:	40                   	inc    eax
c001e1d3:	eb eb                	jmp    c001e1c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001e1d5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e1da:	75 0a                	jne    c001e1e6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e1dc:	83 ec 0c             	sub    esp,0xc
c001e1df:	68 8a 27 02 c0       	push   0xc002278a
c001e1e4:	eb 43                	jmp    c001e229 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001e1e6:	be 01 00 00 00       	mov    esi,0x1
c001e1eb:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e1ef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e1f3:	d3 e6                	shl    esi,cl
c001e1f5:	c1 e7 07             	shl    edi,0x7
c001e1f8:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e1fe:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c001e203:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e207:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e20d:	85 c6                	test   esi,eax
c001e20f:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e215:	0f 84 96 00 00 00    	je     c001e2b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c001e21b:	0f ba e0 1e          	bt     eax,0x1e
c001e21f:	73 1a                	jae    c001e23b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c001e221:	83 ec 0c             	sub    esp,0xc
c001e224:	68 9f 27 02 c0       	push   0xc002279f
c001e229:	e8 cd e2 fe ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c001e22e:	83 c4 10             	add    esp,0x10
c001e231:	b8 01 00 00 00       	mov    eax,0x1
c001e236:	e9 a9 00 00 00       	jmp    c001e2e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001e23b:	83 fb 0d             	cmp    ebx,0xd
c001e23e:	77 12                	ja     c001e252 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c001e240:	83 ec 0c             	sub    esp,0xc
c001e243:	68 c8 00 00 00       	push   0xc8
c001e248:	e8 ff 76 ff ff       	call   c001594c <milliTenthSleep(unsigned int)>
c001e24d:	83 c4 10             	add    esp,0x10
c001e250:	eb 2a                	jmp    c001e27c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c001e252:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c001e258:	83 f8 0d             	cmp    eax,0xd
c001e25b:	77 0a                	ja     c001e267 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c001e25d:	83 ec 0c             	sub    esp,0xc
c001e260:	68 58 02 00 00       	push   0x258
c001e265:	eb 28                	jmp    c001e28f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c001e267:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c001e26d:	83 f8 0d             	cmp    eax,0xd
c001e270:	77 0a                	ja     c001e27c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c001e272:	83 ec 0c             	sub    esp,0xc
c001e275:	68 dc 05 00 00       	push   0x5dc
c001e27a:	eb 13                	jmp    c001e28f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c001e27c:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c001e282:	83 f8 0d             	cmp    eax,0xd
c001e285:	77 10                	ja     c001e297 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c001e287:	83 ec 0c             	sub    esp,0xc
c001e28a:	68 c4 09 00 00       	push   0x9c4
c001e28f:	e8 b8 76 ff ff       	call   c001594c <milliTenthSleep(unsigned int)>
c001e294:	83 c4 10             	add    esp,0x10
c001e297:	43                   	inc    ebx
c001e298:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c001e29e:	0f 85 63 ff ff ff    	jne    c001e207 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c001e2a4:	83 ec 0c             	sub    esp,0xc
c001e2a7:	68 b2 27 02 c0       	push   0xc00227b2
c001e2ac:	e9 78 ff ff ff       	jmp    c001e229 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001e2b1:	0f ba e0 1e          	bt     eax,0x1e
c001e2b5:	73 0d                	jae    c001e2c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001e2b7:	83 ec 0c             	sub    esp,0xc
c001e2ba:	68 c6 27 02 c0       	push   0xc00227c6
c001e2bf:	e9 65 ff ff ff       	jmp    c001e229 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001e2c4:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e2c9:	74 17                	je     c001e2e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c001e2cb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e2d0:	74 10                	je     c001e2e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c001e2d2:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e2d8:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e2dc:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e2e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e2e2:	31 c0                	xor    eax,eax
c001e2e4:	83 c4 2c             	add    esp,0x2c
c001e2e7:	5b                   	pop    ebx
c001e2e8:	5e                   	pop    esi
c001e2e9:	5f                   	pop    edi
c001e2ea:	5d                   	pop    ebp
c001e2eb:	c3                   	ret    

c001e2ec <SATAPI::eject()>:
c001e2ec:	57                   	push   edi
c001e2ed:	b9 03 00 00 00       	mov    ecx,0x3
c001e2f2:	83 ec 18             	sub    esp,0x18
c001e2f5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e2f9:	fc                   	cld    
c001e2fa:	31 c0                	xor    eax,eax
c001e2fc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e2fe:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e303:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e308:	50                   	push   eax
c001e309:	6a 00                	push   0x0
c001e30b:	6a 00                	push   0x0
c001e30d:	6a 00                	push   0x0
c001e30f:	6a 00                	push   0x0
c001e311:	6a 02                	push   0x2
c001e313:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e317:	50                   	push   eax
c001e318:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e31c:	e8 3d fd ff ff       	call   c001e05e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e321:	31 c0                	xor    eax,eax
c001e323:	83 c4 38             	add    esp,0x38
c001e326:	5f                   	pop    edi
c001e327:	c3                   	ret    

c001e328 <SATAPI::detectMedia()>:
c001e328:	56                   	push   esi
c001e329:	53                   	push   ebx
c001e32a:	83 ec 30             	sub    esp,0x30
c001e32d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001e331:	68 db 27 02 c0       	push   0xc00227db
c001e336:	e8 c0 e1 fe ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c001e33b:	83 c4 0c             	add    esp,0xc
c001e33e:	6a 0c                	push   0xc
c001e340:	6a 00                	push   0x0
c001e342:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001e346:	56                   	push   esi
c001e347:	e8 5c 21 fe ff       	call   c00004a8 <memset>
c001e34c:	83 c4 0c             	add    esp,0xc
c001e34f:	6a 00                	push   0x0
c001e351:	6a 00                	push   0x0
c001e353:	6a 00                	push   0x0
c001e355:	6a 00                	push   0x0
c001e357:	6a 00                	push   0x0
c001e359:	56                   	push   esi
c001e35a:	53                   	push   ebx
c001e35b:	e8 fe fc ff ff       	call   c001e05e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e360:	83 c4 20             	add    esp,0x20
c001e363:	48                   	dec    eax
c001e364:	74 34                	je     c001e39a <SATAPI::detectMedia()+0x72>
c001e366:	50                   	push   eax
c001e367:	6a 0c                	push   0xc
c001e369:	6a 00                	push   0x0
c001e36b:	56                   	push   esi
c001e36c:	e8 37 21 fe ff       	call   c00004a8 <memset>
c001e371:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001e376:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001e37b:	83 c4 0c             	add    esp,0xc
c001e37e:	6a 01                	push   0x1
c001e380:	8d 44 24 16          	lea    eax,[esp+0x16]
c001e384:	50                   	push   eax
c001e385:	6a 00                	push   0x0
c001e387:	6a 00                	push   0x0
c001e389:	6a 12                	push   0x12
c001e38b:	56                   	push   esi
c001e38c:	53                   	push   ebx
c001e38d:	e8 cc fc ff ff       	call   c001e05e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e392:	83 c4 20             	add    esp,0x20
c001e395:	48                   	dec    eax
c001e396:	75 39                	jne    c001e3d1 <SATAPI::detectMedia()+0xa9>
c001e398:	eb 1e                	jmp    c001e3b8 <SATAPI::detectMedia()+0x90>
c001e39a:	83 ec 0c             	sub    esp,0xc
c001e39d:	68 ef 27 02 c0       	push   0xc00227ef
c001e3a2:	e8 54 e1 fe ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c001e3a7:	83 c4 10             	add    esp,0x10
c001e3aa:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001e3b1:	74 b3                	je     c001e366 <SATAPI::detectMedia()+0x3e>
c001e3b3:	e9 93 00 00 00       	jmp    c001e44b <SATAPI::detectMedia()+0x123>
c001e3b8:	83 ec 0c             	sub    esp,0xc
c001e3bb:	68 f9 27 02 c0       	push   0xc00227f9
c001e3c0:	e8 36 e1 fe ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c001e3c5:	83 c4 10             	add    esp,0x10
c001e3c8:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001e3cf:	75 7a                	jne    c001e44b <SATAPI::detectMedia()+0x123>
c001e3d1:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001e3d5:	83 e0 7f             	and    eax,0x7f
c001e3d8:	3c 70                	cmp    al,0x70
c001e3da:	74 25                	je     c001e401 <SATAPI::detectMedia()+0xd9>
c001e3dc:	83 ec 0c             	sub    esp,0xc
c001e3df:	68 03 28 02 c0       	push   0xc0022803
c001e3e4:	e8 12 e1 fe ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c001e3e9:	83 c4 10             	add    esp,0x10
c001e3ec:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001e3f3:	75 0c                	jne    c001e401 <SATAPI::detectMedia()+0xd9>
c001e3f5:	83 ec 0c             	sub    esp,0xc
c001e3f8:	53                   	push   ebx
c001e3f9:	e8 44 fc ff ff       	call   c001e042 <SATAPI::diskInserted()>
c001e3fe:	83 c4 10             	add    esp,0x10
c001e401:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e405:	83 e0 0f             	and    eax,0xf
c001e408:	3c 02                	cmp    al,0x2
c001e40a:	75 16                	jne    c001e422 <SATAPI::detectMedia()+0xfa>
c001e40c:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001e411:	75 38                	jne    c001e44b <SATAPI::detectMedia()+0x123>
c001e413:	83 ec 0c             	sub    esp,0xc
c001e416:	68 0c 28 02 c0       	push   0xc002280c
c001e41b:	e8 db e0 fe ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c001e420:	eb 26                	jmp    c001e448 <SATAPI::detectMedia()+0x120>
c001e422:	84 c0                	test   al,al
c001e424:	75 25                	jne    c001e44b <SATAPI::detectMedia()+0x123>
c001e426:	83 ec 0c             	sub    esp,0xc
c001e429:	68 15 28 02 c0       	push   0xc0022815
c001e42e:	e8 c8 e0 fe ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c001e433:	83 c4 10             	add    esp,0x10
c001e436:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001e43d:	75 0c                	jne    c001e44b <SATAPI::detectMedia()+0x123>
c001e43f:	83 ec 0c             	sub    esp,0xc
c001e442:	53                   	push   ebx
c001e443:	e8 fa fb ff ff       	call   c001e042 <SATAPI::diskInserted()>
c001e448:	83 c4 10             	add    esp,0x10
c001e44b:	83 c4 24             	add    esp,0x24
c001e44e:	5b                   	pop    ebx
c001e44f:	5e                   	pop    esi
c001e450:	c3                   	ret    
c001e451:	90                   	nop

c001e452 <SATAPI::open(int, int, void*)>:
c001e452:	56                   	push   esi
c001e453:	53                   	push   ebx
c001e454:	51                   	push   ecx
c001e455:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e459:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e45d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e467:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e46d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e477:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e47b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e485:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e48b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e492:	e8 a1 b6 fe ff       	call   c0009b38 <Phys::allocatePage()>
c001e497:	89 c6                	mov    esi,eax
c001e499:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e49f:	81 c6 00 10 00 00    	add    esi,0x1000
c001e4a5:	e8 8e b6 fe ff       	call   c0009b38 <Phys::allocatePage()>
c001e4aa:	39 c6                	cmp    esi,eax
c001e4ac:	74 10                	je     c001e4be <SATAPI::open(int, int, void*)+0x6c>
c001e4ae:	83 ec 0c             	sub    esp,0xc
c001e4b1:	68 1f 28 02 c0       	push   0xc002281f
c001e4b6:	e8 16 3d ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001e4bb:	83 c4 10             	add    esp,0x10
c001e4be:	83 ec 0c             	sub    esp,0xc
c001e4c1:	6a 02                	push   0x2
c001e4c3:	e8 d1 cd fe ff       	call   c000b299 <Virt::allocateKernelVirtualPages(int)>
c001e4c8:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e4ce:	6a 03                	push   0x3
c001e4d0:	50                   	push   eax
c001e4d1:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e4d7:	ff 35 b4 32 02 c0    	push   DWORD PTR ds:0xc00232b4
c001e4dd:	e8 0a d4 fe ff       	call   c000b8ec <VAS::mapPage(unsigned long, unsigned long, int)>
c001e4e2:	83 c4 14             	add    esp,0x14
c001e4e5:	68 74 01 00 00       	push   0x174
c001e4ea:	e8 82 b2 fe ff       	call   c0009771 <malloc>
c001e4ef:	83 c4 0c             	add    esp,0xc
c001e4f2:	89 c6                	mov    esi,eax
c001e4f4:	6a 00                	push   0x0
c001e4f6:	68 ff ff ff 7f       	push   0x7fffffff
c001e4fb:	6a 00                	push   0x0
c001e4fd:	6a 00                	push   0x0
c001e4ff:	53                   	push   ebx
c001e500:	68 35 28 02 c0       	push   0xc0022835
c001e505:	50                   	push   eax
c001e506:	e8 65 04 ff ff       	call   c000e970 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e50b:	83 c4 14             	add    esp,0x14
c001e50e:	56                   	push   esi
c001e50f:	e8 12 05 ff ff       	call   c000ea26 <LogicalDisk::assignDriveLetter()>
c001e514:	5a                   	pop    edx
c001e515:	0f be c0             	movsx  eax,al
c001e518:	59                   	pop    ecx
c001e519:	50                   	push   eax
c001e51a:	68 50 26 02 c0       	push   0xc0022650
c001e51f:	e8 d7 df fe ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c001e524:	58                   	pop    eax
c001e525:	5a                   	pop    edx
c001e526:	56                   	push   esi
c001e527:	53                   	push   ebx
c001e528:	e8 f1 f3 fe ff       	call   c000d91e <Device::addChild(Device*)>
c001e52d:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e533:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e536:	e8 17 f8 fe ff       	call   c000dd52 <PhysicalDisk::startCache()>
c001e53b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e542:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e545:	e8 de fd ff ff       	call   c001e328 <SATAPI::detectMedia()>
c001e54a:	83 c4 14             	add    esp,0x14
c001e54d:	31 c0                	xor    eax,eax
c001e54f:	5b                   	pop    ebx
c001e550:	5e                   	pop    esi
c001e551:	c3                   	ret    

c001e552 <SATAPI::read(unsigned long long, int, void*)>:
c001e552:	55                   	push   ebp
c001e553:	57                   	push   edi
c001e554:	56                   	push   esi
c001e555:	53                   	push   ebx
c001e556:	83 ec 48             	sub    esp,0x48
c001e559:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001e55d:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c001e561:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c001e565:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001e569:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e56d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001e571:	68 43 28 02 c0       	push   0xc0022843
c001e576:	e8 80 df fe ff       	call   c000c4fb <Dbg::kprintf(char const*, ...)>
c001e57b:	83 c4 10             	add    esp,0x10
c001e57e:	83 fb 04             	cmp    ebx,0x4
c001e581:	7e 10                	jle    c001e593 <SATAPI::read(unsigned long long, int, void*)+0x41>
c001e583:	83 ec 0c             	sub    esp,0xc
c001e586:	68 54 28 02 c0       	push   0xc0022854
c001e58b:	e8 41 3c ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001e590:	83 c4 10             	add    esp,0x10
c001e593:	8d 7c 24 18          	lea    edi,[esp+0x18]
c001e597:	31 ed                	xor    ebp,ebp
c001e599:	b9 03 00 00 00       	mov    ecx,0x3
c001e59e:	fc                   	cld    
c001e59f:	89 e8                	mov    eax,ebp
c001e5a1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e5a3:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c001e5a8:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c001e5ad:	50                   	push   eax
c001e5ae:	6a 00                	push   0x0
c001e5b0:	6a 00                	push   0x0
c001e5b2:	6a 00                	push   0x0
c001e5b4:	6a 00                	push   0x0
c001e5b6:	6a 02                	push   0x2
c001e5b8:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e5bc:	50                   	push   eax
c001e5bd:	56                   	push   esi
c001e5be:	e8 9b fa ff ff       	call   c001e05e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e5c3:	8d 7c 24 44          	lea    edi,[esp+0x44]
c001e5c7:	89 e8                	mov    eax,ebp
c001e5c9:	b9 03 00 00 00       	mov    ecx,0x3
c001e5ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e5d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5d4:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c001e5d8:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c001e5dd:	86 e0                	xchg   al,ah
c001e5df:	c1 c0 10             	rol    eax,0x10
c001e5e2:	86 e0                	xchg   al,ah
c001e5e4:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c001e5e8:	83 c4 1c             	add    esp,0x1c
c001e5eb:	53                   	push   ebx
c001e5ec:	c1 e3 0b             	shl    ebx,0xb
c001e5ef:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e5f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e5f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e5fb:	53                   	push   ebx
c001e5fc:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e600:	50                   	push   eax
c001e601:	56                   	push   esi
c001e602:	e8 57 fa ff ff       	call   c001e05e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e607:	83 c4 20             	add    esp,0x20
c001e60a:	85 c0                	test   eax,eax
c001e60c:	74 14                	je     c001e622 <SATAPI::read(unsigned long long, int, void*)+0xd0>
c001e60e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e612:	83 ec 0c             	sub    esp,0xc
c001e615:	56                   	push   esi
c001e616:	e8 0d fd ff ff       	call   c001e328 <SATAPI::detectMedia()>
c001e61b:	83 c4 10             	add    esp,0x10
c001e61e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e622:	83 c4 3c             	add    esp,0x3c
c001e625:	5b                   	pop    ebx
c001e626:	5e                   	pop    esi
c001e627:	5f                   	pop    edi
c001e628:	5d                   	pop    ebp
c001e629:	c3                   	ret    

c001e62a <IOAPIC::close(int, int, void*)>:
c001e62a:	b8 00 00 00 00       	mov    eax,0x0
c001e62f:	c3                   	ret    

c001e630 <apicGetBase()>:
c001e630:	55                   	push   ebp
c001e631:	89 e5                	mov    ebp,esp
c001e633:	83 ec 18             	sub    esp,0x18
c001e636:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c001e63b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e641:	83 e0 08             	and    eax,0x8
c001e644:	84 c0                	test   al,al
c001e646:	75 07                	jne    c001e64f <apicGetBase()+0x1f>
c001e648:	b8 00 00 00 00       	mov    eax,0x0
c001e64d:	eb 21                	jmp    c001e670 <apicGetBase()+0x40>
c001e64f:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c001e654:	83 ec 08             	sub    esp,0x8
c001e657:	6a 1b                	push   0x1b
c001e659:	50                   	push   eax
c001e65a:	e8 e3 a6 fe ff       	call   c0008d42 <Computer::rdmsr(unsigned int)>
c001e65f:	83 c4 10             	add    esp,0x10
c001e662:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e665:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e668:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e66b:	25 00 f0 ff ff       	and    eax,0xfffff000
c001e670:	c9                   	leave  
c001e671:	c3                   	ret    

c001e672 <IOAPIC::IOAPIC()>:
c001e672:	83 ec 0c             	sub    esp,0xc
c001e675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e679:	83 ec 08             	sub    esp,0x8
c001e67c:	68 b8 28 02 c0       	push   0xc00228b8
c001e681:	50                   	push   eax
c001e682:	e8 2f f4 fe ff       	call   c000dab6 <Device::Device(char const*)>
c001e687:	83 c4 10             	add    esp,0x10
c001e68a:	ba c8 28 02 c0       	mov    edx,0xc00228c8
c001e68f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e693:	89 10                	mov    DWORD PTR [eax],edx
c001e695:	90                   	nop
c001e696:	83 c4 0c             	add    esp,0xc
c001e699:	c3                   	ret    

c001e69a <apicOpen()>:
c001e69a:	55                   	push   ebp
c001e69b:	89 e5                	mov    ebp,esp
c001e69d:	53                   	push   ebx
c001e69e:	83 ec 34             	sub    esp,0x34
c001e6a1:	a0 40 71 02 c0       	mov    al,ds:0xc0027140
c001e6a6:	83 f0 01             	xor    eax,0x1
c001e6a9:	84 c0                	test   al,al
c001e6ab:	0f 84 91 00 00 00    	je     c001e742 <apicOpen()+0xa8>
c001e6b1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e6b5:	a0 a0 5a 02 c0       	mov    al,ds:0xc0025aa0
c001e6ba:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001e6bd:	73 7c                	jae    c001e73b <apicOpen()+0xa1>
c001e6bf:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e6c6:	83 ec 0c             	sub    esp,0xc
c001e6c9:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e6cc:	e8 a0 b0 fe ff       	call   c0009771 <malloc>
c001e6d1:	83 c4 10             	add    esp,0x10
c001e6d4:	89 c3                	mov    ebx,eax
c001e6d6:	83 ec 0c             	sub    esp,0xc
c001e6d9:	53                   	push   ebx
c001e6da:	e8 93 ff ff ff       	call   c001e672 <IOAPIC::IOAPIC()>
c001e6df:	83 c4 10             	add    esp,0x10
c001e6e2:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e6e5:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e6e9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e6ec:	89 14 85 20 71 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8ee0],edx
c001e6f3:	a1 00 71 02 c0       	mov    eax,ds:0xc0027100
c001e6f8:	40                   	inc    eax
c001e6f9:	a3 00 71 02 c0       	mov    ds:0xc0027100,eax
c001e6fe:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c001e703:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e709:	83 ec 08             	sub    esp,0x8
c001e70c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e70f:	50                   	push   eax
c001e710:	e8 09 f2 fe ff       	call   c000d91e <Device::addChild(Device*)>
c001e715:	83 c4 10             	add    esp,0x10
c001e718:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e71b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e71d:	83 c0 08             	add    eax,0x8
c001e720:	8b 00                	mov    eax,DWORD PTR [eax]
c001e722:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e726:	6a 00                	push   0x0
c001e728:	6a 00                	push   0x0
c001e72a:	52                   	push   edx
c001e72b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e72e:	ff d0                	call   eax
c001e730:	83 c4 10             	add    esp,0x10
c001e733:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001e736:	e9 7a ff ff ff       	jmp    c001e6b5 <apicOpen()+0x1b>
c001e73b:	c6 05 40 71 02 c0 01 	mov    BYTE PTR ds:0xc0027140,0x1
c001e742:	e8 e9 fe ff ff       	call   c001e630 <apicGetBase()>
c001e747:	05 f0 00 00 00       	add    eax,0xf0
c001e74c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e74f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e752:	8b 00                	mov    eax,DWORD PTR [eax]
c001e754:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e757:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e75e:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e765:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e768:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e76b:	89 10                	mov    DWORD PTR [eax],edx
c001e76d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e774:	a1 f0 59 02 c0       	mov    eax,ds:0xc00259f0
c001e779:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e77c:	7d 70                	jge    c001e7ee <apicOpen()+0x154>
c001e77e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e781:	8b 04 85 00 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda600]
c001e788:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e78b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e78e:	8b 04 85 00 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda600]
c001e795:	c1 e8 08             	shr    eax,0x8
c001e798:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e79c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e79f:	8b 04 85 00 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda600]
c001e7a6:	c1 e8 18             	shr    eax,0x18
c001e7a9:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e7ac:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001e7b0:	75 37                	jne    c001e7e9 <apicOpen()+0x14f>
c001e7b2:	e8 79 fe ff ff       	call   c001e630 <apicGetBase()>
c001e7b7:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001e7bb:	75 07                	jne    c001e7c4 <apicOpen()+0x12a>
c001e7bd:	ba 60 03 00 00       	mov    edx,0x360
c001e7c2:	eb 05                	jmp    c001e7c9 <apicOpen()+0x12f>
c001e7c4:	ba 50 03 00 00       	mov    edx,0x350
c001e7c9:	01 d0                	add    eax,edx
c001e7cb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e7ce:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e7d1:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7d3:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e7d6:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e7dd:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e7e1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e7e4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e7e7:	89 10                	mov    DWORD PTR [eax],edx
c001e7e9:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001e7ec:	eb 86                	jmp    c001e774 <apicOpen()+0xda>
c001e7ee:	90                   	nop
c001e7ef:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e7f2:	c9                   	leave  
c001e7f3:	c3                   	ret    

c001e7f4 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e7f4:	55                   	push   ebp
c001e7f5:	89 e5                	mov    ebp,esp
c001e7f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7fa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e800:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e803:	72 1d                	jb     c001e822 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e805:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e808:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e80e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e811:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e817:	01 d0                	add    eax,edx
c001e819:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e81c:	73 04                	jae    c001e822 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e81e:	b0 01                	mov    al,0x1
c001e820:	eb 02                	jmp    c001e824 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e822:	b0 00                	mov    al,0x0
c001e824:	5d                   	pop    ebp
c001e825:	c3                   	ret    

c001e826 <IOAPIC::read(int)>:
c001e826:	55                   	push   ebp
c001e827:	89 e5                	mov    ebp,esp
c001e829:	83 ec 10             	sub    esp,0x10
c001e82c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e82f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e835:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e838:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e83b:	0f b6 d0             	movzx  edx,al
c001e83e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e841:	89 10                	mov    DWORD PTR [eax],edx
c001e843:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e846:	83 c0 10             	add    eax,0x10
c001e849:	8b 00                	mov    eax,DWORD PTR [eax]
c001e84b:	c9                   	leave  
c001e84c:	c3                   	ret    
c001e84d:	90                   	nop

c001e84e <IOAPIC::open(int, int, void*)>:
c001e84e:	55                   	push   ebp
c001e84f:	89 e5                	mov    ebp,esp
c001e851:	57                   	push   edi
c001e852:	56                   	push   esi
c001e853:	53                   	push   ebx
c001e854:	83 ec 04             	sub    esp,0x4
c001e857:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e85a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e85d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e863:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e866:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e86c:	8b 14 85 e0 5a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda520]
c001e873:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e876:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e87c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e87f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e885:	8b 14 85 60 5b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda4a0]
c001e88c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e88f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e895:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e898:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e89e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8a1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e8a7:	0f b6 f0             	movzx  esi,al
c001e8aa:	89 d0                	mov    eax,edx
c001e8ac:	ba 00 00 00 00       	mov    edx,0x0
c001e8b1:	89 c7                	mov    edi,eax
c001e8b3:	83 e7 ff             	and    edi,0xffffffff
c001e8b6:	89 f9                	mov    ecx,edi
c001e8b8:	0f b6 da             	movzx  ebx,dl
c001e8bb:	89 c8                	mov    eax,ecx
c001e8bd:	89 da                	mov    edx,ebx
c001e8bf:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e8c2:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e8c5:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e8c9:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e8cd:	83 e0 00             	and    eax,0x0
c001e8d0:	09 d0                	or     eax,edx
c001e8d2:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e8d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8d9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e8df:	8d 50 01             	lea    edx,[eax+0x1]
c001e8e2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e8e5:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e8eb:	0f b6 d0             	movzx  edx,al
c001e8ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8f1:	83 c2 08             	add    edx,0x8
c001e8f4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e8f8:	0f b6 c9             	movzx  ecx,cl
c001e8fb:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e901:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e905:	6a 01                	push   0x1
c001e907:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e90a:	e8 17 ff ff ff       	call   c001e826 <IOAPIC::read(int)>
c001e90f:	83 c4 08             	add    esp,0x8
c001e912:	c1 f8 10             	sar    eax,0x10
c001e915:	0f b6 c0             	movzx  eax,al
c001e918:	8d 50 01             	lea    edx,[eax+0x1]
c001e91b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e91e:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e924:	b8 00 00 00 00       	mov    eax,0x0
c001e929:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e92c:	5b                   	pop    ebx
c001e92d:	5e                   	pop    esi
c001e92e:	5f                   	pop    edi
c001e92f:	5d                   	pop    ebp
c001e930:	c3                   	ret    
c001e931:	90                   	nop

c001e932 <IOAPIC::write(int, int)>:
c001e932:	55                   	push   ebp
c001e933:	89 e5                	mov    ebp,esp
c001e935:	83 ec 10             	sub    esp,0x10
c001e938:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e93b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e941:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e944:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e947:	0f b6 d0             	movzx  edx,al
c001e94a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e94d:	89 10                	mov    DWORD PTR [eax],edx
c001e94f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e952:	8d 50 10             	lea    edx,[eax+0x10]
c001e955:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e958:	89 02                	mov    DWORD PTR [edx],eax
c001e95a:	90                   	nop
c001e95b:	c9                   	leave  
c001e95c:	c3                   	ret    
c001e95d:	90                   	nop

c001e95e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e95e:	55                   	push   ebp
c001e95f:	89 e5                	mov    ebp,esp
c001e961:	53                   	push   ebx
c001e962:	83 ec 2c             	sub    esp,0x2c
c001e965:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e968:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e96b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e96e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e971:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e974:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e977:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e97a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e97d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e980:	88 d8                	mov    al,bl
c001e982:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e985:	88 c8                	mov    al,cl
c001e987:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e98a:	88 d0                	mov    al,dl
c001e98c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e98f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e993:	83 c0 08             	add    eax,0x8
c001e996:	01 c0                	add    eax,eax
c001e998:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e99b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e99f:	83 c0 08             	add    eax,0x8
c001e9a2:	01 c0                	add    eax,eax
c001e9a4:	40                   	inc    eax
c001e9a5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e9a8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e9ab:	50                   	push   eax
c001e9ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9af:	e8 72 fe ff ff       	call   c001e826 <IOAPIC::read(int)>
c001e9b4:	83 c4 08             	add    esp,0x8
c001e9b7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e9ba:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e9c1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e9c4:	c1 e0 18             	shl    eax,0x18
c001e9c7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e9ca:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e9cd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e9d0:	52                   	push   edx
c001e9d1:	50                   	push   eax
c001e9d2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9d5:	e8 58 ff ff ff       	call   c001e932 <IOAPIC::write(int, int)>
c001e9da:	83 c4 0c             	add    esp,0xc
c001e9dd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e9e0:	50                   	push   eax
c001e9e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9e4:	e8 3d fe ff ff       	call   c001e826 <IOAPIC::read(int)>
c001e9e9:	83 c4 08             	add    esp,0x8
c001e9ec:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e9ef:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e9f6:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e9fd:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ea04:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001ea08:	74 09                	je     c001ea13 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c001ea0a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ea11:	eb 07                	jmp    c001ea1a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c001ea13:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ea1a:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001ea1e:	74 09                	je     c001ea29 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c001ea20:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ea27:	eb 07                	jmp    c001ea30 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c001ea29:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ea30:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ea37:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001ea3b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ea3e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ea41:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea44:	52                   	push   edx
c001ea45:	50                   	push   eax
c001ea46:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ea49:	e8 e4 fe ff ff       	call   c001e932 <IOAPIC::write(int, int)>
c001ea4e:	83 c4 0c             	add    esp,0xc
c001ea51:	90                   	nop
c001ea52:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ea55:	c9                   	leave  
c001ea56:	c3                   	ret    
c001ea57:	90                   	nop

c001ea58 <APICTimer::close(int, int, void*)>:
c001ea58:	b8 00 00 00 00       	mov    eax,0x0
c001ea5d:	c3                   	ret    
c001ea5e:	66 90                	xchg   ax,ax

c001ea60 <apicTimerHandler(regs*, void*)>:
c001ea60:	83 ec 0c             	sub    esp,0xc
c001ea63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ea67:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ea69:	b8 10 27 00 00       	mov    eax,0x2710
c001ea6e:	ba 00 00 00 00       	mov    edx,0x0
c001ea73:	f7 f1                	div    ecx
c001ea75:	83 ec 0c             	sub    esp,0xc
c001ea78:	50                   	push   eax
c001ea79:	e8 0e 07 ff ff       	call   c000f18c <timerHandler(unsigned int)>
c001ea7e:	83 c4 10             	add    esp,0x10
c001ea81:	90                   	nop
c001ea82:	83 c4 0c             	add    esp,0xc
c001ea85:	c3                   	ret    
c001ea86:	66 90                	xchg   ax,ax

c001ea88 <APICTimer::open(int, int, void*)>:
c001ea88:	83 ec 0c             	sub    esp,0xc
c001ea8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea8f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea91:	83 c0 24             	add    eax,0x24
c001ea94:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea96:	83 ec 08             	sub    esp,0x8
c001ea99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eaa1:	ff d0                	call   eax
c001eaa3:	83 c4 10             	add    esp,0x10
c001eaa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaaa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001eaae:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eabc:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001eac2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eac6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001eacc:	83 ec 0c             	sub    esp,0xc
c001eacf:	51                   	push   ecx
c001ead0:	6a 01                	push   0x1
c001ead2:	68 60 ea 01 c0       	push   0xc001ea60
c001ead7:	52                   	push   edx
c001ead8:	50                   	push   eax
c001ead9:	e8 ec ed fe ff       	call   c000d8ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eade:	83 c4 20             	add    esp,0x20
c001eae1:	89 c2                	mov    edx,eax
c001eae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eae7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eaed:	b8 00 00 00 00       	mov    eax,0x0
c001eaf2:	83 c4 0c             	add    esp,0xc
c001eaf5:	c3                   	ret    
c001eaf6:	66 90                	xchg   ax,ax

c001eaf8 <APICTimer::write(int)>:
c001eaf8:	83 ec 0c             	sub    esp,0xc
c001eafb:	83 ec 0c             	sub    esp,0xc
c001eafe:	68 ec 28 02 c0       	push   0xc00228ec
c001eb03:	e8 c9 36 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001eb08:	83 c4 10             	add    esp,0x10
c001eb0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb0f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb13:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eb19:	90                   	nop
c001eb1a:	83 c4 0c             	add    esp,0xc
c001eb1d:	c3                   	ret    
c001eb1e:	66 90                	xchg   ax,ax

c001eb20 <APICTimer::APICTimer()>:
c001eb20:	83 ec 0c             	sub    esp,0xc
c001eb23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb27:	83 ec 08             	sub    esp,0x8
c001eb2a:	68 fc 28 02 c0       	push   0xc00228fc
c001eb2f:	50                   	push   eax
c001eb30:	e8 8b 05 ff ff       	call   c000f0c0 <Timer::Timer(char const*)>
c001eb35:	83 c4 10             	add    esp,0x10
c001eb38:	ba 10 29 02 c0       	mov    edx,0xc0022910
c001eb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb41:	89 10                	mov    DWORD PTR [eax],edx
c001eb43:	90                   	nop
c001eb44:	83 c4 0c             	add    esp,0xc
c001eb47:	c3                   	ret    

c001eb48 <PIT::write(int)>:
c001eb48:	83 ec 10             	sub    esp,0x10
c001eb4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eb4f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001eb53:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eb59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eb5d:	a3 44 71 02 c0       	mov    ds:0xc0027144,eax
c001eb62:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001eb67:	99                   	cdq    
c001eb68:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001eb6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eb70:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001eb77:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001eb7c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001eb80:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001eb85:	ee                   	out    dx,al
c001eb86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb8a:	0f b6 c0             	movzx  eax,al
c001eb8d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001eb94:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001eb98:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001eb9c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001eba1:	ee                   	out    dx,al
c001eba2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eba6:	c1 f8 08             	sar    eax,0x8
c001eba9:	0f b6 c0             	movzx  eax,al
c001ebac:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ebb3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ebb7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ebbb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ebc0:	ee                   	out    dx,al
c001ebc1:	90                   	nop
c001ebc2:	83 c4 10             	add    esp,0x10
c001ebc5:	c3                   	ret    
c001ebc6:	66 90                	xchg   ax,ax

c001ebc8 <pitHandler(regs*, void*)>:
c001ebc8:	83 ec 0c             	sub    esp,0xc
c001ebcb:	8b 0d 44 71 02 c0    	mov    ecx,DWORD PTR ds:0xc0027144
c001ebd1:	b8 10 27 00 00       	mov    eax,0x2710
c001ebd6:	99                   	cdq    
c001ebd7:	f7 f9                	idiv   ecx
c001ebd9:	83 ec 0c             	sub    esp,0xc
c001ebdc:	50                   	push   eax
c001ebdd:	e8 aa 05 ff ff       	call   c000f18c <timerHandler(unsigned int)>
c001ebe2:	83 c4 10             	add    esp,0x10
c001ebe5:	90                   	nop
c001ebe6:	83 c4 0c             	add    esp,0xc
c001ebe9:	c3                   	ret    
c001ebea:	66 90                	xchg   ax,ax

c001ebec <PIT::open(int, int, void*)>:
c001ebec:	83 ec 0c             	sub    esp,0xc
c001ebef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebf3:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebf5:	83 c0 24             	add    eax,0x24
c001ebf8:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebfa:	83 ec 08             	sub    esp,0x8
c001ebfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec05:	ff d0                	call   eax
c001ec07:	83 c4 10             	add    esp,0x10
c001ec0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec0e:	83 ec 0c             	sub    esp,0xc
c001ec11:	6a 00                	push   0x0
c001ec13:	6a 01                	push   0x1
c001ec15:	68 c8 eb 01 c0       	push   0xc001ebc8
c001ec1a:	6a 00                	push   0x0
c001ec1c:	50                   	push   eax
c001ec1d:	e8 a8 ec fe ff       	call   c000d8ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ec22:	83 c4 20             	add    esp,0x20
c001ec25:	89 c2                	mov    edx,eax
c001ec27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec2b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ec31:	b8 00 00 00 00       	mov    eax,0x0
c001ec36:	83 c4 0c             	add    esp,0xc
c001ec39:	c3                   	ret    
c001ec3a:	66 90                	xchg   ax,ax

c001ec3c <PIT::close(int, int, void*)>:
c001ec3c:	83 ec 0c             	sub    esp,0xc
c001ec3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec43:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ec4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec51:	6a 01                	push   0x1
c001ec53:	68 c8 eb 01 c0       	push   0xc001ebc8
c001ec58:	6a 00                	push   0x0
c001ec5a:	50                   	push   eax
c001ec5b:	e8 a0 ec fe ff       	call   c000d900 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ec60:	83 c4 10             	add    esp,0x10
c001ec63:	b8 00 00 00 00       	mov    eax,0x0
c001ec68:	83 c4 0c             	add    esp,0xc
c001ec6b:	c3                   	ret    

c001ec6c <PIT::PIT()>:
c001ec6c:	83 ec 0c             	sub    esp,0xc
c001ec6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec73:	83 ec 08             	sub    esp,0x8
c001ec76:	68 38 29 02 c0       	push   0xc0022938
c001ec7b:	50                   	push   eax
c001ec7c:	e8 3f 04 ff ff       	call   c000f0c0 <Timer::Timer(char const*)>
c001ec81:	83 c4 10             	add    esp,0x10
c001ec84:	ba 60 29 02 c0       	mov    edx,0xc0022960
c001ec89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec8d:	89 10                	mov    DWORD PTR [eax],edx
c001ec8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec93:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ec99:	0f b6 d0             	movzx  edx,al
c001ec9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001eca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecab:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ecb1:	0f b6 d0             	movzx  edx,al
c001ecb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ecbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecc1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ecc7:	8d 50 01             	lea    edx,[eax+0x1]
c001ecca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ecce:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ecd4:	0f b6 d0             	movzx  edx,al
c001ecd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecdb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ecdf:	83 e1 3f             	and    ecx,0x3f
c001ece2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ece6:	90                   	nop
c001ece7:	83 c4 0c             	add    esp,0xc
c001ecea:	c3                   	ret    
c001eceb:	66 90                	xchg   ax,ax
c001eced:	66 90                	xchg   ax,ax
c001ecef:	90                   	nop

c001ecf0 <avxDetect>:
c001ecf0:	b8 01 00 00 00       	mov    eax,0x1
c001ecf5:	0f a2                	cpuid  
c001ecf7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ecfd:	74 15                	je     c001ed14 <avxDetect.noAVX>
c001ecff:	b8 01 00 00 00       	mov    eax,0x1
c001ed04:	0f a2                	cpuid  
c001ed06:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ed0c:	74 06                	je     c001ed14 <avxDetect.noAVX>
c001ed0e:	b8 01 00 00 00       	mov    eax,0x1
c001ed13:	c3                   	ret    

c001ed14 <avxDetect.noAVX>:
c001ed14:	b8 00 00 00 00       	mov    eax,0x0
c001ed19:	c3                   	ret    

c001ed1a <avxSave>:
c001ed1a:	53                   	push   ebx
c001ed1b:	52                   	push   edx
c001ed1c:	31 c0                	xor    eax,eax
c001ed1e:	48                   	dec    eax
c001ed1f:	89 c2                	mov    edx,eax
c001ed21:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ed25:	0f ae 23             	xsave  [ebx]
c001ed28:	5a                   	pop    edx
c001ed29:	5b                   	pop    ebx
c001ed2a:	c3                   	ret    

c001ed2b <avxLoad>:
c001ed2b:	53                   	push   ebx
c001ed2c:	52                   	push   edx
c001ed2d:	31 c0                	xor    eax,eax
c001ed2f:	48                   	dec    eax
c001ed30:	89 c2                	mov    edx,eax
c001ed32:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ed36:	0f ae 2b             	xrstor [ebx]
c001ed39:	5a                   	pop    edx
c001ed3a:	5b                   	pop    ebx
c001ed3b:	c3                   	ret    

c001ed3c <avxInit>:
c001ed3c:	e8 57 02 00 00       	call   c001ef98 <sseInit>
c001ed41:	50                   	push   eax
c001ed42:	51                   	push   ecx
c001ed43:	0f 20 e0             	mov    eax,cr4
c001ed46:	0d 00 00 04 00       	or     eax,0x40000
c001ed4b:	0f 22 e0             	mov    cr4,eax
c001ed4e:	31 c9                	xor    ecx,ecx
c001ed50:	0f 01 d0             	xgetbv 
c001ed53:	0d 07 00 00 00       	or     eax,0x7
c001ed58:	0f 01 d1             	xsetbv 
c001ed5b:	59                   	pop    ecx
c001ed5c:	58                   	pop    eax
c001ed5d:	c3                   	ret    

c001ed5e <avxClose>:
c001ed5e:	c3                   	ret    

c001ed5f <wouldSheSayYes>:
c001ed5f:	c3                   	ret    
c001ed60:	49                   	dec    ecx
c001ed61:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001ed65:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001ed69:	75 20                	jne    c001ed8b <isr0+0xb>
c001ed6b:	4e                   	dec    esi
c001ed6c:	79 61                	jns    c001edcf <isr7+0x3>
c001ed6e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001ed73:	66 90                	xchg   ax,ax
c001ed75:	66 90                	xchg   ax,ax
c001ed77:	66 90                	xchg   ax,ax
c001ed79:	66 90                	xchg   ax,ax
c001ed7b:	66 90                	xchg   ax,ax
c001ed7d:	66 90                	xchg   ax,ax
c001ed7f:	90                   	nop

c001ed80 <isr0>:
c001ed80:	fa                   	cli    
c001ed81:	68 00 00 00 00       	push   0x0
c001ed86:	68 00 00 00 00       	push   0x0
c001ed8b:	e9 44 01 00 00       	jmp    c001eed4 <int_common_stub>

c001ed90 <isr1>:
c001ed90:	fa                   	cli    
c001ed91:	6a 00                	push   0x0
c001ed93:	6a 01                	push   0x1
c001ed95:	e9 3a 01 00 00       	jmp    c001eed4 <int_common_stub>

c001ed9a <isr2>:
c001ed9a:	fa                   	cli    
c001ed9b:	6a 00                	push   0x0
c001ed9d:	6a 02                	push   0x2
c001ed9f:	e9 30 01 00 00       	jmp    c001eed4 <int_common_stub>

c001eda4 <isr3>:
c001eda4:	fa                   	cli    
c001eda5:	6a 00                	push   0x0
c001eda7:	6a 03                	push   0x3
c001eda9:	e9 26 01 00 00       	jmp    c001eed4 <int_common_stub>

c001edae <isr4>:
c001edae:	fa                   	cli    
c001edaf:	6a 00                	push   0x0
c001edb1:	6a 04                	push   0x4
c001edb3:	e9 1c 01 00 00       	jmp    c001eed4 <int_common_stub>

c001edb8 <isr5>:
c001edb8:	fa                   	cli    
c001edb9:	6a 00                	push   0x0
c001edbb:	6a 05                	push   0x5
c001edbd:	e9 12 01 00 00       	jmp    c001eed4 <int_common_stub>

c001edc2 <isr6>:
c001edc2:	fa                   	cli    
c001edc3:	6a 00                	push   0x0
c001edc5:	6a 06                	push   0x6
c001edc7:	e9 08 01 00 00       	jmp    c001eed4 <int_common_stub>

c001edcc <isr7>:
c001edcc:	fa                   	cli    
c001edcd:	6a 00                	push   0x0
c001edcf:	6a 07                	push   0x7
c001edd1:	e9 fe 00 00 00       	jmp    c001eed4 <int_common_stub>

c001edd6 <isr8>:
c001edd6:	fa                   	cli    
c001edd7:	6a 08                	push   0x8
c001edd9:	e9 f6 00 00 00       	jmp    c001eed4 <int_common_stub>

c001edde <isr9>:
c001edde:	fa                   	cli    
c001eddf:	6a 00                	push   0x0
c001ede1:	6a 09                	push   0x9
c001ede3:	e9 ec 00 00 00       	jmp    c001eed4 <int_common_stub>

c001ede8 <isr10>:
c001ede8:	fa                   	cli    
c001ede9:	6a 0a                	push   0xa
c001edeb:	e9 e4 00 00 00       	jmp    c001eed4 <int_common_stub>

c001edf0 <isr11>:
c001edf0:	fa                   	cli    
c001edf1:	6a 0b                	push   0xb
c001edf3:	e9 dc 00 00 00       	jmp    c001eed4 <int_common_stub>

c001edf8 <isr12>:
c001edf8:	fa                   	cli    
c001edf9:	6a 0c                	push   0xc
c001edfb:	e9 d4 00 00 00       	jmp    c001eed4 <int_common_stub>

c001ee00 <isr13>:
c001ee00:	fa                   	cli    
c001ee01:	6a 0d                	push   0xd
c001ee03:	e9 cc 00 00 00       	jmp    c001eed4 <int_common_stub>

c001ee08 <isr14>:
c001ee08:	fa                   	cli    
c001ee09:	6a 0e                	push   0xe
c001ee0b:	e9 c4 00 00 00       	jmp    c001eed4 <int_common_stub>

c001ee10 <isr15>:
c001ee10:	fa                   	cli    
c001ee11:	6a 00                	push   0x0
c001ee13:	6a 0f                	push   0xf
c001ee15:	e9 ba 00 00 00       	jmp    c001eed4 <int_common_stub>

c001ee1a <isr16>:
c001ee1a:	fa                   	cli    
c001ee1b:	6a 00                	push   0x0
c001ee1d:	6a 10                	push   0x10
c001ee1f:	e9 b0 00 00 00       	jmp    c001eed4 <int_common_stub>

c001ee24 <isr17>:
c001ee24:	fa                   	cli    
c001ee25:	6a 00                	push   0x0
c001ee27:	6a 11                	push   0x11
c001ee29:	e9 a6 00 00 00       	jmp    c001eed4 <int_common_stub>

c001ee2e <isr18>:
c001ee2e:	fa                   	cli    
c001ee2f:	6a 00                	push   0x0
c001ee31:	6a 12                	push   0x12
c001ee33:	e9 9c 00 00 00       	jmp    c001eed4 <int_common_stub>

c001ee38 <irq3>:
c001ee38:	fa                   	cli    
c001ee39:	6a 00                	push   0x0
c001ee3b:	6a 23                	push   0x23
c001ee3d:	e9 92 00 00 00       	jmp    c001eed4 <int_common_stub>

c001ee42 <irq4>:
c001ee42:	fa                   	cli    
c001ee43:	6a 00                	push   0x0
c001ee45:	6a 24                	push   0x24
c001ee47:	e9 88 00 00 00       	jmp    c001eed4 <int_common_stub>

c001ee4c <irq5>:
c001ee4c:	fa                   	cli    
c001ee4d:	6a 00                	push   0x0
c001ee4f:	6a 25                	push   0x25
c001ee51:	e9 7e 00 00 00       	jmp    c001eed4 <int_common_stub>

c001ee56 <irq6>:
c001ee56:	fa                   	cli    
c001ee57:	6a 00                	push   0x0
c001ee59:	6a 26                	push   0x26
c001ee5b:	e9 74 00 00 00       	jmp    c001eed4 <int_common_stub>

c001ee60 <irq7>:
c001ee60:	fa                   	cli    
c001ee61:	6a 00                	push   0x0
c001ee63:	6a 27                	push   0x27
c001ee65:	e9 6a 00 00 00       	jmp    c001eed4 <int_common_stub>

c001ee6a <irq8>:
c001ee6a:	fa                   	cli    
c001ee6b:	6a 00                	push   0x0
c001ee6d:	6a 28                	push   0x28
c001ee6f:	e9 60 00 00 00       	jmp    c001eed4 <int_common_stub>

c001ee74 <irq9>:
c001ee74:	fa                   	cli    
c001ee75:	6a 00                	push   0x0
c001ee77:	6a 29                	push   0x29
c001ee79:	e9 56 00 00 00       	jmp    c001eed4 <int_common_stub>

c001ee7e <irq10>:
c001ee7e:	fa                   	cli    
c001ee7f:	6a 00                	push   0x0
c001ee81:	6a 2a                	push   0x2a
c001ee83:	e9 4c 00 00 00       	jmp    c001eed4 <int_common_stub>

c001ee88 <irq11>:
c001ee88:	fa                   	cli    
c001ee89:	6a 00                	push   0x0
c001ee8b:	6a 2b                	push   0x2b
c001ee8d:	e9 42 00 00 00       	jmp    c001eed4 <int_common_stub>

c001ee92 <irq12>:
c001ee92:	fa                   	cli    
c001ee93:	6a 00                	push   0x0
c001ee95:	6a 2c                	push   0x2c
c001ee97:	e9 38 00 00 00       	jmp    c001eed4 <int_common_stub>

c001ee9c <irq13>:
c001ee9c:	fa                   	cli    
c001ee9d:	6a 00                	push   0x0
c001ee9f:	6a 2d                	push   0x2d
c001eea1:	e9 2e 00 00 00       	jmp    c001eed4 <int_common_stub>

c001eea6 <irq14>:
c001eea6:	fa                   	cli    
c001eea7:	6a 00                	push   0x0
c001eea9:	6a 2e                	push   0x2e
c001eeab:	e9 24 00 00 00       	jmp    c001eed4 <int_common_stub>

c001eeb0 <irq15>:
c001eeb0:	fa                   	cli    
c001eeb1:	6a 00                	push   0x0
c001eeb3:	6a 2f                	push   0x2f
c001eeb5:	e9 1a 00 00 00       	jmp    c001eed4 <int_common_stub>

c001eeba <irq1>:
c001eeba:	fa                   	cli    
c001eebb:	6a 00                	push   0x0
c001eebd:	6a 21                	push   0x21
c001eebf:	eb 13                	jmp    c001eed4 <int_common_stub>

c001eec1 <irq2>:
c001eec1:	fa                   	cli    
c001eec2:	6a 00                	push   0x0
c001eec4:	6a 22                	push   0x22
c001eec6:	eb 0c                	jmp    c001eed4 <int_common_stub>

c001eec8 <isr96>:
c001eec8:	6a 00                	push   0x0
c001eeca:	6a 60                	push   0x60
c001eecc:	fb                   	sti    
c001eecd:	eb 05                	jmp    c001eed4 <int_common_stub>

c001eecf <irq0>:
c001eecf:	fa                   	cli    
c001eed0:	6a 00                	push   0x0
c001eed2:	6a 20                	push   0x20

c001eed4 <int_common_stub>:
c001eed4:	60                   	pusha  
c001eed5:	1e                   	push   ds
c001eed6:	06                   	push   es
c001eed7:	0f a0                	push   fs
c001eed9:	0f a8                	push   gs
c001eedb:	66 b8 10 00          	mov    ax,0x10
c001eedf:	66 8e d8             	mov    ds,ax
c001eee2:	66 8e c0             	mov    es,ax
c001eee5:	66 8e e0             	mov    fs,ax
c001eee8:	66 8e e8             	mov    gs,ax
c001eeeb:	54                   	push   esp
c001eeec:	fc                   	cld    
c001eeed:	e8 d6 ee fe ff       	call   c000ddc8 <int_handler>
c001eef2:	81 c4 04 00 00 00    	add    esp,0x4
c001eef8:	0f a9                	pop    gs
c001eefa:	0f a1                	pop    fs
c001eefc:	07                   	pop    es
c001eefd:	1f                   	pop    ds
c001eefe:	61                   	popa   
c001eeff:	81 c4 08 00 00 00    	add    esp,0x8
c001ef05:	cf                   	iret   

c001ef06 <irq16>:
c001ef06:	fa                   	cli    
c001ef07:	6a 00                	push   0x0
c001ef09:	6a 30                	push   0x30
c001ef0b:	e9 c4 ff ff ff       	jmp    c001eed4 <int_common_stub>

c001ef10 <irq17>:
c001ef10:	fa                   	cli    
c001ef11:	6a 00                	push   0x0
c001ef13:	6a 31                	push   0x31
c001ef15:	e9 ba ff ff ff       	jmp    c001eed4 <int_common_stub>

c001ef1a <irq18>:
c001ef1a:	fa                   	cli    
c001ef1b:	6a 00                	push   0x0
c001ef1d:	6a 32                	push   0x32
c001ef1f:	e9 b0 ff ff ff       	jmp    c001eed4 <int_common_stub>

c001ef24 <irq19>:
c001ef24:	fa                   	cli    
c001ef25:	6a 00                	push   0x0
c001ef27:	6a 33                	push   0x33
c001ef29:	e9 a6 ff ff ff       	jmp    c001eed4 <int_common_stub>

c001ef2e <irq20>:
c001ef2e:	fa                   	cli    
c001ef2f:	6a 00                	push   0x0
c001ef31:	6a 34                	push   0x34
c001ef33:	e9 9c ff ff ff       	jmp    c001eed4 <int_common_stub>

c001ef38 <irq21>:
c001ef38:	fa                   	cli    
c001ef39:	6a 00                	push   0x0
c001ef3b:	6a 35                	push   0x35
c001ef3d:	e9 92 ff ff ff       	jmp    c001eed4 <int_common_stub>

c001ef42 <irq22>:
c001ef42:	fa                   	cli    
c001ef43:	6a 00                	push   0x0
c001ef45:	6a 36                	push   0x36
c001ef47:	e9 88 ff ff ff       	jmp    c001eed4 <int_common_stub>

c001ef4c <irq23>:
c001ef4c:	fa                   	cli    
c001ef4d:	6a 00                	push   0x0
c001ef4f:	6a 37                	push   0x37
c001ef51:	e9 7e ff ff ff       	jmp    c001eed4 <int_common_stub>
c001ef56:	66 90                	xchg   ax,ax
c001ef58:	66 90                	xchg   ax,ax
c001ef5a:	66 90                	xchg   ax,ax
c001ef5c:	66 90                	xchg   ax,ax
c001ef5e:	66 90                	xchg   ax,ax

c001ef60 <i386GetRDRAND>:
c001ef60:	b9 64 00 00 00       	mov    ecx,0x64

c001ef65 <retry>:
c001ef65:	0f c7 f0             	rdrand eax
c001ef68:	72 05                	jb     c001ef6f <retry.done>
c001ef6a:	e2 f9                	loop   c001ef65 <retry>

c001ef6c <retry.fail>:
c001ef6c:	31 c0                	xor    eax,eax
c001ef6e:	c3                   	ret    

c001ef6f <retry.done>:
c001ef6f:	c3                   	ret    

c001ef70 <absolutelyNoChanceInHell>:
c001ef70:	b8 01 00 00 00       	mov    eax,0x1
c001ef75:	0f a2                	cpuid  
c001ef77:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001ef7d:	74 06                	je     c001ef85 <sseDetect.noSSE>
c001ef7f:	b8 01 00 00 00       	mov    eax,0x1
c001ef84:	c3                   	ret    

c001ef85 <sseDetect.noSSE>:
c001ef85:	31 c0                	xor    eax,eax
c001ef87:	c3                   	ret    

c001ef88 <sseSave>:
c001ef88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef8c:	0f ae 00             	fxsave [eax]
c001ef8f:	c3                   	ret    

c001ef90 <sseLoad>:
c001ef90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef94:	0f ae 08             	fxrstor [eax]
c001ef97:	c3                   	ret    

c001ef98 <sseInit>:
c001ef98:	e8 42 00 00 00       	call   c001efdf <x87Init>
c001ef9d:	0f 20 e0             	mov    eax,cr4
c001efa0:	66 0d 00 06          	or     ax,0x600
c001efa4:	0f 22 e0             	mov    cr4,eax
c001efa7:	c3                   	ret    

c001efa8 <sseClose>:
c001efa8:	c3                   	ret    
c001efa9:	66 90                	xchg   ax,ax
c001efab:	66 90                	xchg   ax,ax
c001efad:	66 90                	xchg   ax,ax
c001efaf:	90                   	nop

c001efb0 <value_37F>:
c001efb0:	7f 03                	jg     c001efb5 <value_37A+0x1>

c001efb2 <value_37E>:
c001efb2:	7e 03                	jle    c001efb7 <x87Detect+0x1>

c001efb4 <value_37A>:
c001efb4:	7a 03                	jp     c001efb9 <x87Detect+0x3>

c001efb6 <x87Detect>:
c001efb6:	b8 01 00 00 00       	mov    eax,0x1
c001efbb:	0f a2                	cpuid  
c001efbd:	f7 c2 01 00 00 00    	test   edx,0x1
c001efc3:	74 06                	je     c001efcb <x87Detect.nox87>
c001efc5:	b8 01 00 00 00       	mov    eax,0x1
c001efca:	c3                   	ret    

c001efcb <x87Detect.nox87>:
c001efcb:	b8 00 00 00 00       	mov    eax,0x0
c001efd0:	c3                   	ret    

c001efd1 <x87Save>:
c001efd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efd5:	dd 30                	fnsave [eax]
c001efd7:	c3                   	ret    

c001efd8 <x87Load>:
c001efd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efdc:	dd 20                	frstor [eax]
c001efde:	c3                   	ret    

c001efdf <x87Init>:
c001efdf:	0f 20 c0             	mov    eax,cr0
c001efe2:	66 25 fb ff          	and    ax,0xfffb
c001efe6:	66 0d 22 00          	or     ax,0x22
c001efea:	0f 22 c0             	mov    cr0,eax
c001efed:	db e3                	fninit 
c001efef:	0f 06                	clts   
c001eff1:	d9 2d b4 ef 01 c0    	fldcw  WORD PTR ds:0xc001efb4
c001eff7:	c3                   	ret    

c001eff8 <x87Close>:
c001eff8:	c3                   	ret    
c001eff9:	66 90                	xchg   ax,ax
c001effb:	90                   	nop

c001effc <__do_global_ctors_aux>:
c001effc:	a1 c0 ff 01 c0       	mov    eax,ds:0xc001ffc0
c001f001:	83 f8 ff             	cmp    eax,0xffffffff
c001f004:	74 1a                	je     c001f020 <__do_global_ctors_aux+0x24>
c001f006:	55                   	push   ebp
c001f007:	89 e5                	mov    ebp,esp
c001f009:	53                   	push   ebx
c001f00a:	52                   	push   edx
c001f00b:	bb c0 ff 01 c0       	mov    ebx,0xc001ffc0
c001f010:	ff d0                	call   eax
c001f012:	83 eb 04             	sub    ebx,0x4
c001f015:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f017:	83 f8 ff             	cmp    eax,0xffffffff
c001f01a:	75 f4                	jne    c001f010 <__do_global_ctors_aux+0x14>
c001f01c:	58                   	pop    eax
c001f01d:	5b                   	pop    ebx
c001f01e:	5d                   	pop    ebp
c001f01f:	c3                   	ret    
c001f020:	c3                   	ret    
c001f021:	66 90                	xchg   ax,ax
c001f023:	90                   	nop

c001f024 <__divdi3>:
c001f024:	55                   	push   ebp
c001f025:	57                   	push   edi
c001f026:	56                   	push   esi
c001f027:	53                   	push   ebx
c001f028:	83 ec 1c             	sub    esp,0x1c
c001f02b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f02f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f033:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f036:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f03a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f03e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f042:	85 db                	test   ebx,ebx
c001f044:	0f 88 8e 00 00 00    	js     c001f0d8 <__divdi3+0xb4>
c001f04a:	89 dd                	mov    ebp,ebx
c001f04c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f054:	89 d3                	mov    ebx,edx
c001f056:	85 d2                	test   edx,edx
c001f058:	79 0d                	jns    c001f067 <__divdi3+0x43>
c001f05a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f05e:	f7 d8                	neg    eax
c001f060:	83 d2 00             	adc    edx,0x0
c001f063:	f7 da                	neg    edx
c001f065:	89 d3                	mov    ebx,edx
c001f067:	89 c7                	mov    edi,eax
c001f069:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f06c:	85 db                	test   ebx,ebx
c001f06e:	75 48                	jne    c001f0b8 <__divdi3+0x94>
c001f070:	39 ef                	cmp    edi,ebp
c001f072:	76 24                	jbe    c001f098 <__divdi3+0x74>
c001f074:	89 ea                	mov    edx,ebp
c001f076:	f7 f7                	div    edi
c001f078:	89 c1                	mov    ecx,eax
c001f07a:	31 f6                	xor    esi,esi
c001f07c:	89 c8                	mov    eax,ecx
c001f07e:	89 f2                	mov    edx,esi
c001f080:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f084:	85 c9                	test   ecx,ecx
c001f086:	74 07                	je     c001f08f <__divdi3+0x6b>
c001f088:	f7 d8                	neg    eax
c001f08a:	83 d2 00             	adc    edx,0x0
c001f08d:	f7 da                	neg    edx
c001f08f:	83 c4 1c             	add    esp,0x1c
c001f092:	5b                   	pop    ebx
c001f093:	5e                   	pop    esi
c001f094:	5f                   	pop    edi
c001f095:	5d                   	pop    ebp
c001f096:	c3                   	ret    
c001f097:	90                   	nop
c001f098:	85 ff                	test   edi,edi
c001f09a:	75 0b                	jne    c001f0a7 <__divdi3+0x83>
c001f09c:	b8 01 00 00 00       	mov    eax,0x1
c001f0a1:	31 d2                	xor    edx,edx
c001f0a3:	f7 f3                	div    ebx
c001f0a5:	89 c7                	mov    edi,eax
c001f0a7:	31 d2                	xor    edx,edx
c001f0a9:	89 e8                	mov    eax,ebp
c001f0ab:	f7 f7                	div    edi
c001f0ad:	89 c6                	mov    esi,eax
c001f0af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f0b2:	f7 f7                	div    edi
c001f0b4:	89 c1                	mov    ecx,eax
c001f0b6:	eb c4                	jmp    c001f07c <__divdi3+0x58>
c001f0b8:	39 eb                	cmp    ebx,ebp
c001f0ba:	77 3c                	ja     c001f0f8 <__divdi3+0xd4>
c001f0bc:	0f bd f3             	bsr    esi,ebx
c001f0bf:	83 f6 1f             	xor    esi,0x1f
c001f0c2:	75 40                	jne    c001f104 <__divdi3+0xe0>
c001f0c4:	39 eb                	cmp    ebx,ebp
c001f0c6:	72 09                	jb     c001f0d1 <__divdi3+0xad>
c001f0c8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f0cb:	0f 87 97 00 00 00    	ja     c001f168 <__divdi3+0x144>
c001f0d1:	b9 01 00 00 00       	mov    ecx,0x1
c001f0d6:	eb a4                	jmp    c001f07c <__divdi3+0x58>
c001f0d8:	f7 d9                	neg    ecx
c001f0da:	83 d3 00             	adc    ebx,0x0
c001f0dd:	f7 db                	neg    ebx
c001f0df:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f0e2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f0e6:	89 dd                	mov    ebp,ebx
c001f0e8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f0f0:	e9 5f ff ff ff       	jmp    c001f054 <__divdi3+0x30>
c001f0f5:	8d 76 00             	lea    esi,[esi+0x0]
c001f0f8:	31 f6                	xor    esi,esi
c001f0fa:	31 c9                	xor    ecx,ecx
c001f0fc:	e9 7b ff ff ff       	jmp    c001f07c <__divdi3+0x58>
c001f101:	8d 76 00             	lea    esi,[esi+0x0]
c001f104:	b8 20 00 00 00       	mov    eax,0x20
c001f109:	29 f0                	sub    eax,esi
c001f10b:	89 f1                	mov    ecx,esi
c001f10d:	d3 e3                	shl    ebx,cl
c001f10f:	89 fa                	mov    edx,edi
c001f111:	88 c1                	mov    cl,al
c001f113:	d3 ea                	shr    edx,cl
c001f115:	09 da                	or     edx,ebx
c001f117:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f11b:	89 f1                	mov    ecx,esi
c001f11d:	d3 e7                	shl    edi,cl
c001f11f:	89 eb                	mov    ebx,ebp
c001f121:	88 c1                	mov    cl,al
c001f123:	d3 eb                	shr    ebx,cl
c001f125:	89 f1                	mov    ecx,esi
c001f127:	d3 e5                	shl    ebp,cl
c001f129:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f12c:	88 c1                	mov    cl,al
c001f12e:	d3 ea                	shr    edx,cl
c001f130:	09 d5                	or     ebp,edx
c001f132:	89 e8                	mov    eax,ebp
c001f134:	89 da                	mov    edx,ebx
c001f136:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f13a:	89 d3                	mov    ebx,edx
c001f13c:	89 c5                	mov    ebp,eax
c001f13e:	f7 e7                	mul    edi
c001f140:	39 d3                	cmp    ebx,edx
c001f142:	72 18                	jb     c001f15c <__divdi3+0x138>
c001f144:	74 0a                	je     c001f150 <__divdi3+0x12c>
c001f146:	89 e9                	mov    ecx,ebp
c001f148:	31 f6                	xor    esi,esi
c001f14a:	e9 2d ff ff ff       	jmp    c001f07c <__divdi3+0x58>
c001f14f:	90                   	nop
c001f150:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f153:	89 f1                	mov    ecx,esi
c001f155:	d3 e7                	shl    edi,cl
c001f157:	39 c7                	cmp    edi,eax
c001f159:	73 eb                	jae    c001f146 <__divdi3+0x122>
c001f15b:	90                   	nop
c001f15c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f15f:	31 f6                	xor    esi,esi
c001f161:	e9 16 ff ff ff       	jmp    c001f07c <__divdi3+0x58>
c001f166:	66 90                	xchg   ax,ax
c001f168:	31 c9                	xor    ecx,ecx
c001f16a:	e9 0d ff ff ff       	jmp    c001f07c <__divdi3+0x58>
c001f16f:	90                   	nop

c001f170 <__moddi3>:
c001f170:	55                   	push   ebp
c001f171:	57                   	push   edi
c001f172:	56                   	push   esi
c001f173:	53                   	push   ebx
c001f174:	83 ec 2c             	sub    esp,0x2c
c001f177:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f17b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f17f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f183:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f187:	85 db                	test   ebx,ebx
c001f189:	0f 88 85 00 00 00    	js     c001f214 <__moddi3+0xa4>
c001f18f:	89 de                	mov    esi,ebx
c001f191:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f199:	89 d7                	mov    edi,edx
c001f19b:	85 d2                	test   edx,edx
c001f19d:	79 09                	jns    c001f1a8 <__moddi3+0x38>
c001f19f:	f7 d8                	neg    eax
c001f1a1:	83 d2 00             	adc    edx,0x0
c001f1a4:	f7 da                	neg    edx
c001f1a6:	89 d7                	mov    edi,edx
c001f1a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f1ac:	89 cd                	mov    ebp,ecx
c001f1ae:	85 ff                	test   edi,edi
c001f1b0:	75 52                	jne    c001f204 <__moddi3+0x94>
c001f1b2:	89 c3                	mov    ebx,eax
c001f1b4:	39 f0                	cmp    eax,esi
c001f1b6:	76 24                	jbe    c001f1dc <__moddi3+0x6c>
c001f1b8:	89 c8                	mov    eax,ecx
c001f1ba:	89 f2                	mov    edx,esi
c001f1bc:	f7 f3                	div    ebx
c001f1be:	89 d6                	mov    esi,edx
c001f1c0:	89 f0                	mov    eax,esi
c001f1c2:	31 d2                	xor    edx,edx
c001f1c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f1c8:	85 c9                	test   ecx,ecx
c001f1ca:	74 07                	je     c001f1d3 <__moddi3+0x63>
c001f1cc:	f7 d8                	neg    eax
c001f1ce:	83 d2 00             	adc    edx,0x0
c001f1d1:	f7 da                	neg    edx
c001f1d3:	83 c4 2c             	add    esp,0x2c
c001f1d6:	5b                   	pop    ebx
c001f1d7:	5e                   	pop    esi
c001f1d8:	5f                   	pop    edi
c001f1d9:	5d                   	pop    ebp
c001f1da:	c3                   	ret    
c001f1db:	90                   	nop
c001f1dc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f1e0:	85 db                	test   ebx,ebx
c001f1e2:	75 0d                	jne    c001f1f1 <__moddi3+0x81>
c001f1e4:	b8 01 00 00 00       	mov    eax,0x1
c001f1e9:	31 d2                	xor    edx,edx
c001f1eb:	f7 f7                	div    edi
c001f1ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f1f1:	89 f0                	mov    eax,esi
c001f1f3:	31 d2                	xor    edx,edx
c001f1f5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f1f9:	f7 f7                	div    edi
c001f1fb:	89 e8                	mov    eax,ebp
c001f1fd:	f7 f7                	div    edi
c001f1ff:	89 d6                	mov    esi,edx
c001f201:	eb bd                	jmp    c001f1c0 <__moddi3+0x50>
c001f203:	90                   	nop
c001f204:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f208:	39 f7                	cmp    edi,esi
c001f20a:	76 20                	jbe    c001f22c <__moddi3+0xbc>
c001f20c:	89 c8                	mov    eax,ecx
c001f20e:	89 f2                	mov    edx,esi
c001f210:	eb b2                	jmp    c001f1c4 <__moddi3+0x54>
c001f212:	66 90                	xchg   ax,ax
c001f214:	f7 d9                	neg    ecx
c001f216:	83 d3 00             	adc    ebx,0x0
c001f219:	f7 db                	neg    ebx
c001f21b:	89 de                	mov    esi,ebx
c001f21d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f225:	e9 6f ff ff ff       	jmp    c001f199 <__moddi3+0x29>
c001f22a:	66 90                	xchg   ax,ax
c001f22c:	0f bd c7             	bsr    eax,edi
c001f22f:	83 f0 1f             	xor    eax,0x1f
c001f232:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f236:	75 24                	jne    c001f25c <__moddi3+0xec>
c001f238:	39 f7                	cmp    edi,esi
c001f23a:	72 06                	jb     c001f242 <__moddi3+0xd2>
c001f23c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f240:	77 0c                	ja     c001f24e <__moddi3+0xde>
c001f242:	89 e9                	mov    ecx,ebp
c001f244:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f248:	19 fe                	sbb    esi,edi
c001f24a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f24e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f252:	89 f2                	mov    edx,esi
c001f254:	e9 6b ff ff ff       	jmp    c001f1c4 <__moddi3+0x54>
c001f259:	8d 76 00             	lea    esi,[esi+0x0]
c001f25c:	b8 20 00 00 00       	mov    eax,0x20
c001f261:	89 c2                	mov    edx,eax
c001f263:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f267:	29 da                	sub    edx,ebx
c001f269:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f26d:	88 d9                	mov    cl,bl
c001f26f:	d3 e7                	shl    edi,cl
c001f271:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f275:	88 d1                	mov    cl,dl
c001f277:	d3 e8                	shr    eax,cl
c001f279:	09 c7                	or     edi,eax
c001f27b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f27f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f283:	89 d8                	mov    eax,ebx
c001f285:	88 d9                	mov    cl,bl
c001f287:	d3 e7                	shl    edi,cl
c001f289:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f28d:	89 f3                	mov    ebx,esi
c001f28f:	88 d1                	mov    cl,dl
c001f291:	d3 eb                	shr    ebx,cl
c001f293:	89 c7                	mov    edi,eax
c001f295:	88 c1                	mov    cl,al
c001f297:	d3 e6                	shl    esi,cl
c001f299:	89 e8                	mov    eax,ebp
c001f29b:	88 d1                	mov    cl,dl
c001f29d:	d3 e8                	shr    eax,cl
c001f29f:	09 f0                	or     eax,esi
c001f2a1:	89 f9                	mov    ecx,edi
c001f2a3:	d3 e5                	shl    ebp,cl
c001f2a5:	89 da                	mov    edx,ebx
c001f2a7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f2ab:	89 d3                	mov    ebx,edx
c001f2ad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f2b1:	89 c6                	mov    esi,eax
c001f2b3:	89 d1                	mov    ecx,edx
c001f2b5:	39 d3                	cmp    ebx,edx
c001f2b7:	72 27                	jb     c001f2e0 <__moddi3+0x170>
c001f2b9:	74 21                	je     c001f2dc <__moddi3+0x16c>
c001f2bb:	29 f5                	sub    ebp,esi
c001f2bd:	19 cb                	sbb    ebx,ecx
c001f2bf:	89 de                	mov    esi,ebx
c001f2c1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f2c5:	d3 e6                	shl    esi,cl
c001f2c7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f2cb:	89 f9                	mov    ecx,edi
c001f2cd:	d3 ed                	shr    ebp,cl
c001f2cf:	09 ee                	or     esi,ebp
c001f2d1:	89 f0                	mov    eax,esi
c001f2d3:	d3 eb                	shr    ebx,cl
c001f2d5:	89 da                	mov    edx,ebx
c001f2d7:	e9 e8 fe ff ff       	jmp    c001f1c4 <__moddi3+0x54>
c001f2dc:	39 c5                	cmp    ebp,eax
c001f2de:	73 db                	jae    c001f2bb <__moddi3+0x14b>
c001f2e0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f2e4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f2e8:	89 d1                	mov    ecx,edx
c001f2ea:	89 c6                	mov    esi,eax
c001f2ec:	eb cd                	jmp    c001f2bb <__moddi3+0x14b>
c001f2ee:	66 90                	xchg   ax,ax

c001f2f0 <__udivdi3>:
c001f2f0:	55                   	push   ebp
c001f2f1:	57                   	push   edi
c001f2f2:	56                   	push   esi
c001f2f3:	53                   	push   ebx
c001f2f4:	83 ec 1c             	sub    esp,0x1c
c001f2f7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f2fb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f2ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f303:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f307:	85 d2                	test   edx,edx
c001f309:	75 41                	jne    c001f34c <__udivdi3+0x5c>
c001f30b:	39 f7                	cmp    edi,esi
c001f30d:	76 15                	jbe    c001f324 <__udivdi3+0x34>
c001f30f:	89 e8                	mov    eax,ebp
c001f311:	89 f2                	mov    edx,esi
c001f313:	f7 f7                	div    edi
c001f315:	31 db                	xor    ebx,ebx
c001f317:	89 da                	mov    edx,ebx
c001f319:	83 c4 1c             	add    esp,0x1c
c001f31c:	5b                   	pop    ebx
c001f31d:	5e                   	pop    esi
c001f31e:	5f                   	pop    edi
c001f31f:	5d                   	pop    ebp
c001f320:	c3                   	ret    
c001f321:	8d 76 00             	lea    esi,[esi+0x0]
c001f324:	89 f9                	mov    ecx,edi
c001f326:	85 ff                	test   edi,edi
c001f328:	75 0b                	jne    c001f335 <__udivdi3+0x45>
c001f32a:	b8 01 00 00 00       	mov    eax,0x1
c001f32f:	31 d2                	xor    edx,edx
c001f331:	f7 f7                	div    edi
c001f333:	89 c1                	mov    ecx,eax
c001f335:	31 d2                	xor    edx,edx
c001f337:	89 f0                	mov    eax,esi
c001f339:	f7 f1                	div    ecx
c001f33b:	89 c3                	mov    ebx,eax
c001f33d:	89 e8                	mov    eax,ebp
c001f33f:	f7 f1                	div    ecx
c001f341:	89 da                	mov    edx,ebx
c001f343:	83 c4 1c             	add    esp,0x1c
c001f346:	5b                   	pop    ebx
c001f347:	5e                   	pop    esi
c001f348:	5f                   	pop    edi
c001f349:	5d                   	pop    ebp
c001f34a:	c3                   	ret    
c001f34b:	90                   	nop
c001f34c:	39 f2                	cmp    edx,esi
c001f34e:	77 1c                	ja     c001f36c <__udivdi3+0x7c>
c001f350:	0f bd da             	bsr    ebx,edx
c001f353:	83 f3 1f             	xor    ebx,0x1f
c001f356:	75 24                	jne    c001f37c <__udivdi3+0x8c>
c001f358:	39 f2                	cmp    edx,esi
c001f35a:	72 08                	jb     c001f364 <__udivdi3+0x74>
c001f35c:	39 ef                	cmp    edi,ebp
c001f35e:	0f 87 84 00 00 00    	ja     c001f3e8 <__udivdi3+0xf8>
c001f364:	b8 01 00 00 00       	mov    eax,0x1
c001f369:	eb ac                	jmp    c001f317 <__udivdi3+0x27>
c001f36b:	90                   	nop
c001f36c:	31 db                	xor    ebx,ebx
c001f36e:	31 c0                	xor    eax,eax
c001f370:	89 da                	mov    edx,ebx
c001f372:	83 c4 1c             	add    esp,0x1c
c001f375:	5b                   	pop    ebx
c001f376:	5e                   	pop    esi
c001f377:	5f                   	pop    edi
c001f378:	5d                   	pop    ebp
c001f379:	c3                   	ret    
c001f37a:	66 90                	xchg   ax,ax
c001f37c:	b8 20 00 00 00       	mov    eax,0x20
c001f381:	29 d8                	sub    eax,ebx
c001f383:	88 d9                	mov    cl,bl
c001f385:	d3 e2                	shl    edx,cl
c001f387:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f38b:	89 fa                	mov    edx,edi
c001f38d:	88 c1                	mov    cl,al
c001f38f:	d3 ea                	shr    edx,cl
c001f391:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f395:	09 d1                	or     ecx,edx
c001f397:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f39b:	88 d9                	mov    cl,bl
c001f39d:	d3 e7                	shl    edi,cl
c001f39f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f3a3:	89 f7                	mov    edi,esi
c001f3a5:	88 c1                	mov    cl,al
c001f3a7:	d3 ef                	shr    edi,cl
c001f3a9:	88 d9                	mov    cl,bl
c001f3ab:	d3 e6                	shl    esi,cl
c001f3ad:	89 ea                	mov    edx,ebp
c001f3af:	88 c1                	mov    cl,al
c001f3b1:	d3 ea                	shr    edx,cl
c001f3b3:	09 d6                	or     esi,edx
c001f3b5:	89 f0                	mov    eax,esi
c001f3b7:	89 fa                	mov    edx,edi
c001f3b9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f3bd:	89 d7                	mov    edi,edx
c001f3bf:	89 c6                	mov    esi,eax
c001f3c1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f3c5:	39 d7                	cmp    edi,edx
c001f3c7:	72 13                	jb     c001f3dc <__udivdi3+0xec>
c001f3c9:	74 09                	je     c001f3d4 <__udivdi3+0xe4>
c001f3cb:	89 f0                	mov    eax,esi
c001f3cd:	31 db                	xor    ebx,ebx
c001f3cf:	e9 43 ff ff ff       	jmp    c001f317 <__udivdi3+0x27>
c001f3d4:	88 d9                	mov    cl,bl
c001f3d6:	d3 e5                	shl    ebp,cl
c001f3d8:	39 c5                	cmp    ebp,eax
c001f3da:	73 ef                	jae    c001f3cb <__udivdi3+0xdb>
c001f3dc:	8d 46 ff             	lea    eax,[esi-0x1]
c001f3df:	31 db                	xor    ebx,ebx
c001f3e1:	e9 31 ff ff ff       	jmp    c001f317 <__udivdi3+0x27>
c001f3e6:	66 90                	xchg   ax,ax
c001f3e8:	31 c0                	xor    eax,eax
c001f3ea:	e9 28 ff ff ff       	jmp    c001f317 <__udivdi3+0x27>
c001f3ef:	90                   	nop

c001f3f0 <__umoddi3>:
c001f3f0:	55                   	push   ebp
c001f3f1:	57                   	push   edi
c001f3f2:	56                   	push   esi
c001f3f3:	53                   	push   ebx
c001f3f4:	83 ec 1c             	sub    esp,0x1c
c001f3f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f3fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f3ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f403:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f407:	89 da                	mov    edx,ebx
c001f409:	85 c0                	test   eax,eax
c001f40b:	75 37                	jne    c001f444 <__umoddi3+0x54>
c001f40d:	39 df                	cmp    edi,ebx
c001f40f:	76 13                	jbe    c001f424 <__umoddi3+0x34>
c001f411:	89 f0                	mov    eax,esi
c001f413:	f7 f7                	div    edi
c001f415:	89 d0                	mov    eax,edx
c001f417:	31 d2                	xor    edx,edx
c001f419:	83 c4 1c             	add    esp,0x1c
c001f41c:	5b                   	pop    ebx
c001f41d:	5e                   	pop    esi
c001f41e:	5f                   	pop    edi
c001f41f:	5d                   	pop    ebp
c001f420:	c3                   	ret    
c001f421:	8d 76 00             	lea    esi,[esi+0x0]
c001f424:	89 fd                	mov    ebp,edi
c001f426:	85 ff                	test   edi,edi
c001f428:	75 0b                	jne    c001f435 <__umoddi3+0x45>
c001f42a:	b8 01 00 00 00       	mov    eax,0x1
c001f42f:	31 d2                	xor    edx,edx
c001f431:	f7 f7                	div    edi
c001f433:	89 c5                	mov    ebp,eax
c001f435:	89 d8                	mov    eax,ebx
c001f437:	31 d2                	xor    edx,edx
c001f439:	f7 f5                	div    ebp
c001f43b:	89 f0                	mov    eax,esi
c001f43d:	f7 f5                	div    ebp
c001f43f:	89 d0                	mov    eax,edx
c001f441:	eb d4                	jmp    c001f417 <__umoddi3+0x27>
c001f443:	90                   	nop
c001f444:	89 f1                	mov    ecx,esi
c001f446:	39 d8                	cmp    eax,ebx
c001f448:	76 0a                	jbe    c001f454 <__umoddi3+0x64>
c001f44a:	89 f0                	mov    eax,esi
c001f44c:	83 c4 1c             	add    esp,0x1c
c001f44f:	5b                   	pop    ebx
c001f450:	5e                   	pop    esi
c001f451:	5f                   	pop    edi
c001f452:	5d                   	pop    ebp
c001f453:	c3                   	ret    
c001f454:	0f bd e8             	bsr    ebp,eax
c001f457:	83 f5 1f             	xor    ebp,0x1f
c001f45a:	75 1c                	jne    c001f478 <__umoddi3+0x88>
c001f45c:	39 d8                	cmp    eax,ebx
c001f45e:	72 04                	jb     c001f464 <__umoddi3+0x74>
c001f460:	39 f7                	cmp    edi,esi
c001f462:	77 08                	ja     c001f46c <__umoddi3+0x7c>
c001f464:	89 da                	mov    edx,ebx
c001f466:	29 fe                	sub    esi,edi
c001f468:	19 c2                	sbb    edx,eax
c001f46a:	89 f1                	mov    ecx,esi
c001f46c:	89 c8                	mov    eax,ecx
c001f46e:	83 c4 1c             	add    esp,0x1c
c001f471:	5b                   	pop    ebx
c001f472:	5e                   	pop    esi
c001f473:	5f                   	pop    edi
c001f474:	5d                   	pop    ebp
c001f475:	c3                   	ret    
c001f476:	66 90                	xchg   ax,ax
c001f478:	ba 20 00 00 00       	mov    edx,0x20
c001f47d:	29 ea                	sub    edx,ebp
c001f47f:	89 e9                	mov    ecx,ebp
c001f481:	d3 e0                	shl    eax,cl
c001f483:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f487:	89 f8                	mov    eax,edi
c001f489:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f48d:	88 d1                	mov    cl,dl
c001f48f:	d3 e8                	shr    eax,cl
c001f491:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f495:	09 c1                	or     ecx,eax
c001f497:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f49b:	89 e9                	mov    ecx,ebp
c001f49d:	d3 e7                	shl    edi,cl
c001f49f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f4a3:	89 d8                	mov    eax,ebx
c001f4a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f4a9:	88 d1                	mov    cl,dl
c001f4ab:	d3 e8                	shr    eax,cl
c001f4ad:	89 c7                	mov    edi,eax
c001f4af:	89 e9                	mov    ecx,ebp
c001f4b1:	d3 e3                	shl    ebx,cl
c001f4b3:	89 f0                	mov    eax,esi
c001f4b5:	88 d1                	mov    cl,dl
c001f4b7:	d3 e8                	shr    eax,cl
c001f4b9:	09 d8                	or     eax,ebx
c001f4bb:	89 e9                	mov    ecx,ebp
c001f4bd:	d3 e6                	shl    esi,cl
c001f4bf:	89 f3                	mov    ebx,esi
c001f4c1:	89 fa                	mov    edx,edi
c001f4c3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f4c7:	89 d1                	mov    ecx,edx
c001f4c9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f4cd:	89 c6                	mov    esi,eax
c001f4cf:	89 d7                	mov    edi,edx
c001f4d1:	39 d1                	cmp    ecx,edx
c001f4d3:	72 27                	jb     c001f4fc <__umoddi3+0x10c>
c001f4d5:	74 21                	je     c001f4f8 <__umoddi3+0x108>
c001f4d7:	89 ca                	mov    edx,ecx
c001f4d9:	29 f3                	sub    ebx,esi
c001f4db:	19 fa                	sbb    edx,edi
c001f4dd:	89 d0                	mov    eax,edx
c001f4df:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f4e3:	d3 e0                	shl    eax,cl
c001f4e5:	89 e9                	mov    ecx,ebp
c001f4e7:	d3 eb                	shr    ebx,cl
c001f4e9:	09 d8                	or     eax,ebx
c001f4eb:	d3 ea                	shr    edx,cl
c001f4ed:	83 c4 1c             	add    esp,0x1c
c001f4f0:	5b                   	pop    ebx
c001f4f1:	5e                   	pop    esi
c001f4f2:	5f                   	pop    edi
c001f4f3:	5d                   	pop    ebp
c001f4f4:	c3                   	ret    
c001f4f5:	8d 76 00             	lea    esi,[esi+0x0]
c001f4f8:	39 c3                	cmp    ebx,eax
c001f4fa:	73 db                	jae    c001f4d7 <__umoddi3+0xe7>
c001f4fc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f500:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f504:	89 d7                	mov    edi,edx
c001f506:	89 c6                	mov    esi,eax
c001f508:	eb cd                	jmp    c001f4d7 <__umoddi3+0xe7>

Disassembly of section .init:

c001f50a <_init>:
c001f50a:	55                   	push   ebp
c001f50b:	89 e5                	mov    ebp,esp
c001f50d:	e8 06 0c fe ff       	call   c0000118 <frame_dummy>
c001f512:	e8 e5 fa ff ff       	call   c001effc <__do_global_ctors_aux>
c001f517:	5d                   	pop    ebp
c001f518:	c3                   	ret    

Disassembly of section .fini:

c001f519 <_fini>:
c001f519:	55                   	push   ebp
c001f51a:	89 e5                	mov    ebp,esp
c001f51c:	e8 87 0b fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001f521:	5d                   	pop    ebp
c001f522:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f524 <Computer::~Computer()>:
c001f524:	83 ec 0c             	sub    esp,0xc
c001f527:	ba 50 08 02 c0       	mov    edx,0xc0020850
c001f52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f530:	89 10                	mov    DWORD PTR [eax],edx
c001f532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f536:	83 ec 0c             	sub    esp,0xc
c001f539:	50                   	push   eax
c001f53a:	e8 e1 e2 fe ff       	call   c000d820 <Device::~Device()>
c001f53f:	83 c4 10             	add    esp,0x10
c001f542:	90                   	nop
c001f543:	83 c4 0c             	add    esp,0xc
c001f546:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f548 <Computer::~Computer()>:
c001f548:	83 ec 0c             	sub    esp,0xc
c001f54b:	83 ec 0c             	sub    esp,0xc
c001f54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f552:	e8 cd ff ff ff       	call   c001f524 <Computer::~Computer()>
c001f557:	83 c4 10             	add    esp,0x10
c001f55a:	83 ec 08             	sub    esp,0x8
c001f55d:	68 ec 01 00 00       	push   0x1ec
c001f562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f566:	e8 af ce fe ff       	call   c000c41a <operator delete(void*, unsigned long)>
c001f56b:	83 c4 10             	add    esp,0x10
c001f56e:	83 c4 0c             	add    esp,0xc
c001f571:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f572 <idleCommon()>:
c001f572:	83 ec 0c             	sub    esp,0xc
c001f575:	fa                   	cli    
c001f576:	ff 05 a8 66 02 c0    	inc    DWORD PTR ds:0xc00266a8
c001f57c:	e8 d3 60 ff ff       	call   c0015654 <schedule()>
c001f581:	a1 a8 66 02 c0       	mov    eax,ds:0xc00266a8
c001f586:	48                   	dec    eax
c001f587:	a3 a8 66 02 c0       	mov    ds:0xc00266a8,eax
c001f58c:	75 01                	jne    c001f58f <idleCommon()+0x1d>
c001f58e:	fb                   	sti    
c001f58f:	83 c4 0c             	add    esp,0xc
c001f592:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f594 <LinkedList<UnixFile>::~LinkedList()>:
c001f594:	90                   	nop
c001f595:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f596 <LinkedList<UnixFile>::LinkedList()>:
c001f596:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f59a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f5a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f5ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f5b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f5c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5c4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f5cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5cf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f5d6:	90                   	nop
c001f5d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f5d8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f5d8:	83 ec 0c             	sub    esp,0xc
c001f5db:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f5e0:	75 10                	jne    c001f5f2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f5e2:	83 ec 0c             	sub    esp,0xc
c001f5e5:	68 a4 0a 02 c0       	push   0xc0020aa4
c001f5ea:	e8 e2 2b ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001f5ef:	83 c4 10             	add    esp,0x10
c001f5f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5f6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5f8:	85 c0                	test   eax,eax
c001f5fa:	74 34                	je     c001f630 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f5fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f600:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f603:	85 c0                	test   eax,eax
c001f605:	74 29                	je     c001f630 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f60b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f60e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f612:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f619:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f61d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f624:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f627:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f62e:	eb 65                	jmp    c001f695 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f634:	8b 00                	mov    eax,DWORD PTR [eax]
c001f636:	85 c0                	test   eax,eax
c001f638:	75 4b                	jne    c001f685 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f63a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f63e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f641:	85 c0                	test   eax,eax
c001f643:	75 40                	jne    c001f685 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f649:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f64d:	89 10                	mov    DWORD PTR [eax],edx
c001f64f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f653:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f657:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f65e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f661:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f66c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f66f:	85 c0                	test   eax,eax
c001f671:	74 22                	je     c001f695 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f673:	83 ec 0c             	sub    esp,0xc
c001f676:	68 c6 0a 02 c0       	push   0xc0020ac6
c001f67b:	e8 51 2b ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001f680:	83 c4 10             	add    esp,0x10
c001f683:	eb 10                	jmp    c001f695 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f685:	83 ec 0c             	sub    esp,0xc
c001f688:	68 d0 0a 02 c0       	push   0xc0020ad0
c001f68d:	e8 3f 2b ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001f692:	83 c4 10             	add    esp,0x10
c001f695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f699:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f69c:	8d 50 01             	lea    edx,[eax+0x1]
c001f69f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f6a6:	90                   	nop
c001f6a7:	83 c4 0c             	add    esp,0xc
c001f6aa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f6ac <LinkedList<UnixFile>::getFirstElement()>:
c001f6ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f6b4 <LinkedList<UnixFile>::removeFirst()>:
c001f6b4:	83 ec 0c             	sub    esp,0xc
c001f6b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6bb:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6bd:	85 c0                	test   eax,eax
c001f6bf:	75 12                	jne    c001f6d3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f6c1:	83 ec 0c             	sub    esp,0xc
c001f6c4:	68 dc 0a 02 c0       	push   0xc0020adc
c001f6c9:	e8 03 2b ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001f6ce:	83 c4 10             	add    esp,0x10
c001f6d1:	eb 7e                	jmp    c001f751 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f6d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6d7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6dd:	85 c0                	test   eax,eax
c001f6df:	74 10                	je     c001f6f1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f6e1:	83 ec 0c             	sub    esp,0xc
c001f6e4:	68 27 0b 02 c0       	push   0xc0020b27
c001f6e9:	e8 e3 2a ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001f6ee:	83 c4 10             	add    esp,0x10
c001f6f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6f5:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6fa:	85 c0                	test   eax,eax
c001f6fc:	75 33                	jne    c001f731 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f6fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f702:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f70c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f717:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f71a:	83 f8 01             	cmp    eax,0x1
c001f71d:	74 21                	je     c001f740 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f71f:	83 ec 0c             	sub    esp,0xc
c001f722:	68 00 0b 02 c0       	push   0xc0020b00
c001f727:	e8 a5 2a ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001f72c:	83 c4 10             	add    esp,0x10
c001f72f:	eb 0f                	jmp    c001f740 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f735:	8b 00                	mov    eax,DWORD PTR [eax]
c001f737:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f73e:	89 10                	mov    DWORD PTR [eax],edx
c001f740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f744:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f747:	8d 50 ff             	lea    edx,[eax-0x1]
c001f74a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f74e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f751:	83 c4 0c             	add    esp,0xc
c001f754:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f756 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f756:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f75a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f75d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f75e <DriverlessDevice::~DriverlessDevice()>:
c001f75e:	ba 7c 11 02 c0       	mov    edx,0xc002117c
c001f763:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f767:	89 10                	mov    DWORD PTR [eax],edx
c001f769:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f76d:	50                   	push   eax
c001f76e:	e8 ad e0 fe ff       	call   c000d820 <Device::~Device()>
c001f773:	83 c4 04             	add    esp,0x4
c001f776:	90                   	nop
c001f777:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f778 <DriverlessDevice::~DriverlessDevice()>:
c001f778:	83 ec 0c             	sub    esp,0xc
c001f77b:	83 ec 0c             	sub    esp,0xc
c001f77e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f782:	e8 d7 ff ff ff       	call   c001f75e <DriverlessDevice::~DriverlessDevice()>
c001f787:	83 c4 10             	add    esp,0x10
c001f78a:	83 ec 08             	sub    esp,0x8
c001f78d:	68 58 01 00 00       	push   0x158
c001f792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f796:	e8 7f cc fe ff       	call   c000c41a <operator delete(void*, unsigned long)>
c001f79b:	83 c4 10             	add    esp,0x10
c001f79e:	83 c4 0c             	add    esp,0xc
c001f7a1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f7a2 <LinkedList<Device>::addElement(Device*)>:
c001f7a2:	83 ec 0c             	sub    esp,0xc
c001f7a5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f7aa:	75 10                	jne    c001f7bc <LinkedList<Device>::addElement(Device*)+0x1a>
c001f7ac:	83 ec 0c             	sub    esp,0xc
c001f7af:	68 a4 0a 02 c0       	push   0xc0020aa4
c001f7b4:	e8 18 2a ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001f7b9:	83 c4 10             	add    esp,0x10
c001f7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7c2:	85 c0                	test   eax,eax
c001f7c4:	74 3a                	je     c001f800 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f7c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7cd:	85 c0                	test   eax,eax
c001f7cf:	74 2f                	je     c001f800 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f7d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7dc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f7e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7ea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f7ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7f4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f7fe:	eb 68                	jmp    c001f868 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f804:	8b 00                	mov    eax,DWORD PTR [eax]
c001f806:	85 c0                	test   eax,eax
c001f808:	75 4e                	jne    c001f858 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f80e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f811:	85 c0                	test   eax,eax
c001f813:	75 43                	jne    c001f858 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f819:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f81d:	89 10                	mov    DWORD PTR [eax],edx
c001f81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f823:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f827:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f82a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f82e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f831:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f83b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f83f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f842:	85 c0                	test   eax,eax
c001f844:	74 22                	je     c001f868 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f846:	83 ec 0c             	sub    esp,0xc
c001f849:	68 c6 0a 02 c0       	push   0xc0020ac6
c001f84e:	e8 7e 29 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001f853:	83 c4 10             	add    esp,0x10
c001f856:	eb 10                	jmp    c001f868 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f858:	83 ec 0c             	sub    esp,0xc
c001f85b:	68 d0 0a 02 c0       	push   0xc0020ad0
c001f860:	e8 6c 29 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001f865:	83 c4 10             	add    esp,0x10
c001f868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f86c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f86f:	8d 50 01             	lea    edx,[eax+0x1]
c001f872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f876:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f879:	90                   	nop
c001f87a:	83 c4 0c             	add    esp,0xc
c001f87d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f87e <LinkedList<Device>::LinkedList()>:
c001f87e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f882:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f888:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f88c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f893:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f897:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f89e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f8a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f8b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8b7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f8be:	90                   	nop
c001f8bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f8c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f8c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8c6:	85 c0                	test   eax,eax
c001f8c8:	75 0e                	jne    c001f8d8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f8ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8d1:	85 c0                	test   eax,eax
c001f8d3:	75 03                	jne    c001f8d8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f8d5:	b0 01                	mov    al,0x1
c001f8d7:	c3                   	ret    
c001f8d8:	b0 00                	mov    al,0x0
c001f8da:	90                   	nop
c001f8db:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f8dc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f8dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f8e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f8e4:	83 ec 0c             	sub    esp,0xc
c001f8e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8eb:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8ed:	85 c0                	test   eax,eax
c001f8ef:	75 17                	jne    c001f908 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f8f1:	83 ec 0c             	sub    esp,0xc
c001f8f4:	68 dc 0a 02 c0       	push   0xc0020adc
c001f8f9:	e8 d3 28 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001f8fe:	83 c4 10             	add    esp,0x10
c001f901:	e9 92 00 00 00       	jmp    c001f998 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001f906:	66 90                	xchg   ax,ax
c001f908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f90c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f90f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f912:	85 c0                	test   eax,eax
c001f914:	0f 95 c0             	setne  al
c001f917:	84 c0                	test   al,al
c001f919:	74 11                	je     c001f92c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001f91b:	83 ec 0c             	sub    esp,0xc
c001f91e:	68 27 0b 02 c0       	push   0xc0020b27
c001f923:	e8 a9 28 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001f928:	83 c4 10             	add    esp,0x10
c001f92b:	90                   	nop
c001f92c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f930:	8b 00                	mov    eax,DWORD PTR [eax]
c001f932:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f935:	85 c0                	test   eax,eax
c001f937:	0f 94 c0             	sete   al
c001f93a:	84 c0                	test   al,al
c001f93c:	74 36                	je     c001f974 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001f93e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f942:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f94c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f957:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f95a:	83 f8 01             	cmp    eax,0x1
c001f95d:	74 25                	je     c001f984 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001f95f:	83 ec 0c             	sub    esp,0xc
c001f962:	68 00 0b 02 c0       	push   0xc0020b00
c001f967:	e8 65 28 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001f96c:	83 c4 10             	add    esp,0x10
c001f96f:	eb 13                	jmp    c001f984 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001f971:	8d 76 00             	lea    esi,[esi+0x0]
c001f974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f978:	8b 00                	mov    eax,DWORD PTR [eax]
c001f97a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f97d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f981:	89 10                	mov    DWORD PTR [eax],edx
c001f983:	90                   	nop
c001f984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f988:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f98b:	8d 50 ff             	lea    edx,[eax-0x1]
c001f98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f992:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f995:	8d 76 00             	lea    esi,[esi+0x0]
c001f998:	83 c4 0c             	add    esp,0xc
c001f99b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f99c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f99c:	83 ec 0c             	sub    esp,0xc
c001f99f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f9a4:	75 12                	jne    c001f9b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f9a6:	83 ec 0c             	sub    esp,0xc
c001f9a9:	68 a4 0a 02 c0       	push   0xc0020aa4
c001f9ae:	e8 1e 28 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001f9b3:	83 c4 10             	add    esp,0x10
c001f9b6:	66 90                	xchg   ax,ax
c001f9b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9be:	85 c0                	test   eax,eax
c001f9c0:	74 36                	je     c001f9f8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f9c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9c9:	85 c0                	test   eax,eax
c001f9cb:	74 2b                	je     c001f9f8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f9cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9d8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f9db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9df:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9e3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f9e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9ed:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f9f4:	eb 6a                	jmp    c001fa60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f9f6:	66 90                	xchg   ax,ax
c001f9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9fe:	85 c0                	test   eax,eax
c001fa00:	75 4e                	jne    c001fa50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fa02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa09:	85 c0                	test   eax,eax
c001fa0b:	75 43                	jne    c001fa50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fa0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa15:	89 10                	mov    DWORD PTR [eax],edx
c001fa17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa1f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa29:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fa30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa37:	85 c0                	test   eax,eax
c001fa39:	74 25                	je     c001fa60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fa3b:	83 ec 0c             	sub    esp,0xc
c001fa3e:	68 c6 0a 02 c0       	push   0xc0020ac6
c001fa43:	e8 89 27 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001fa48:	83 c4 10             	add    esp,0x10
c001fa4b:	eb 13                	jmp    c001fa60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fa4d:	8d 76 00             	lea    esi,[esi+0x0]
c001fa50:	83 ec 0c             	sub    esp,0xc
c001fa53:	68 d0 0a 02 c0       	push   0xc0020ad0
c001fa58:	e8 74 27 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001fa5d:	83 c4 10             	add    esp,0x10
c001fa60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa67:	8d 50 01             	lea    edx,[eax+0x1]
c001fa6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa6e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa71:	90                   	nop
c001fa72:	83 c4 0c             	add    esp,0xc
c001fa75:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fa78 <ACPI::~ACPI()>:
c001fa78:	83 ec 0c             	sub    esp,0xc
c001fa7b:	ba e4 16 02 c0       	mov    edx,0xc00216e4
c001fa80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa84:	89 10                	mov    DWORD PTR [eax],edx
c001fa86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa8a:	83 ec 0c             	sub    esp,0xc
c001fa8d:	50                   	push   eax
c001fa8e:	e8 8d dd fe ff       	call   c000d820 <Device::~Device()>
c001fa93:	83 c4 10             	add    esp,0x10
c001fa96:	90                   	nop
c001fa97:	83 c4 0c             	add    esp,0xc
c001fa9a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fa9c <ACPI::~ACPI()>:
c001fa9c:	83 ec 0c             	sub    esp,0xc
c001fa9f:	83 ec 0c             	sub    esp,0xc
c001faa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001faa6:	e8 cd ff ff ff       	call   c001fa78 <ACPI::~ACPI()>
c001faab:	83 c4 10             	add    esp,0x10
c001faae:	83 ec 08             	sub    esp,0x8
c001fab1:	68 64 12 00 00       	push   0x1264
c001fab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001faba:	e8 5b c9 fe ff       	call   c000c41a <operator delete(void*, unsigned long)>
c001fabf:	83 c4 10             	add    esp,0x10
c001fac2:	83 c4 0c             	add    esp,0xc
c001fac5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001fac8 <LinkedList<Device>::~LinkedList()>:
c001fac8:	90                   	nop
c001fac9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001facc <LinkedList<Device>::isEmpty()>:
c001facc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fad0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fad2:	85 c0                	test   eax,eax
c001fad4:	75 0e                	jne    c001fae4 <LinkedList<Device>::isEmpty()+0x18>
c001fad6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fada:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fadd:	85 c0                	test   eax,eax
c001fadf:	75 03                	jne    c001fae4 <LinkedList<Device>::isEmpty()+0x18>
c001fae1:	b0 01                	mov    al,0x1
c001fae3:	c3                   	ret    
c001fae4:	b0 00                	mov    al,0x0
c001fae6:	90                   	nop
c001fae7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001fae8 <LinkedList<Device>::getFirstElement()>:
c001fae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faec:	8b 00                	mov    eax,DWORD PTR [eax]
c001faee:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001faf0 <LinkedList<Device>::removeFirst()>:
c001faf0:	83 ec 0c             	sub    esp,0xc
c001faf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf7:	8b 00                	mov    eax,DWORD PTR [eax]
c001faf9:	85 c0                	test   eax,eax
c001fafb:	75 17                	jne    c001fb14 <LinkedList<Device>::removeFirst()+0x24>
c001fafd:	83 ec 0c             	sub    esp,0xc
c001fb00:	68 dc 0a 02 c0       	push   0xc0020adc
c001fb05:	e8 c7 26 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001fb0a:	83 c4 10             	add    esp,0x10
c001fb0d:	e9 92 00 00 00       	jmp    c001fba4 <LinkedList<Device>::removeFirst()+0xb4>
c001fb12:	66 90                	xchg   ax,ax
c001fb14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb1b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fb21:	85 c0                	test   eax,eax
c001fb23:	74 13                	je     c001fb38 <LinkedList<Device>::removeFirst()+0x48>
c001fb25:	83 ec 0c             	sub    esp,0xc
c001fb28:	68 27 0b 02 c0       	push   0xc0020b27
c001fb2d:	e8 9f 26 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001fb32:	83 c4 10             	add    esp,0x10
c001fb35:	8d 76 00             	lea    esi,[esi+0x0]
c001fb38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb3c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb3e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fb44:	85 c0                	test   eax,eax
c001fb46:	75 34                	jne    c001fb7c <LinkedList<Device>::removeFirst()+0x8c>
c001fb48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb4c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb56:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb61:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb64:	83 f8 01             	cmp    eax,0x1
c001fb67:	74 27                	je     c001fb90 <LinkedList<Device>::removeFirst()+0xa0>
c001fb69:	83 ec 0c             	sub    esp,0xc
c001fb6c:	68 00 0b 02 c0       	push   0xc0020b00
c001fb71:	e8 5b 26 ff ff       	call   c00121d1 <Krnl::panic(char const*)>
c001fb76:	83 c4 10             	add    esp,0x10
c001fb79:	eb 15                	jmp    c001fb90 <LinkedList<Device>::removeFirst()+0xa0>
c001fb7b:	90                   	nop
c001fb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb80:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb82:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001fb88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb8c:	89 10                	mov    DWORD PTR [eax],edx
c001fb8e:	66 90                	xchg   ax,ax
c001fb90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb97:	8d 50 ff             	lea    edx,[eax-0x1]
c001fb9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb9e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fba1:	8d 76 00             	lea    esi,[esi+0x0]
c001fba4:	83 c4 0c             	add    esp,0xc
c001fba7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fba8 <CPU::~CPU()>:
c001fba8:	83 ec 0c             	sub    esp,0xc
c001fbab:	ba 80 18 02 c0       	mov    edx,0xc0021880
c001fbb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb4:	89 10                	mov    DWORD PTR [eax],edx
c001fbb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbba:	83 ec 0c             	sub    esp,0xc
c001fbbd:	50                   	push   eax
c001fbbe:	e8 5d dc fe ff       	call   c000d820 <Device::~Device()>
c001fbc3:	83 c4 10             	add    esp,0x10
c001fbc6:	90                   	nop
c001fbc7:	83 c4 0c             	add    esp,0xc
c001fbca:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fbcc <CPU::~CPU()>:
c001fbcc:	83 ec 0c             	sub    esp,0xc
c001fbcf:	83 ec 0c             	sub    esp,0xc
c001fbd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbd6:	e8 cd ff ff ff       	call   c001fba8 <CPU::~CPU()>
c001fbdb:	83 c4 10             	add    esp,0x10
c001fbde:	83 ec 08             	sub    esp,0x8
c001fbe1:	68 94 11 00 00       	push   0x1194
c001fbe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbea:	e8 2b c8 fe ff       	call   c000c41a <operator delete(void*, unsigned long)>
c001fbef:	83 c4 10             	add    esp,0x10
c001fbf2:	83 c4 0c             	add    esp,0xc
c001fbf5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fbf8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fbf8:	90                   	nop
c001fbf9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fbfc <ThreadControlBlock::ThreadControlBlock()>:
c001fbfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc00:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fc07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc0b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fc12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc16:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fc1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc21:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fc28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc2c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001fc33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc37:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fc3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc3f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fc43:	90                   	nop
c001fc44:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fc48 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fc48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc4c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc56:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc61:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc76:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc81:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc88:	90                   	nop
c001fc89:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fc8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fc8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc90:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fc93:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c001fc94 <Vm::_FPUState::_FPUState()>:
c001fc94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc98:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c001fc9f:	90                   	nop
c001fca0:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fca2 <PCI::~PCI()>:
c001fca2:	83 ec 0c             	sub    esp,0xc
c001fca5:	ba dc 24 02 c0       	mov    edx,0xc00224dc
c001fcaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcae:	89 10                	mov    DWORD PTR [eax],edx
c001fcb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb4:	83 ec 0c             	sub    esp,0xc
c001fcb7:	50                   	push   eax
c001fcb8:	e8 f3 d5 fe ff       	call   c000d2b0 <Bus::~Bus()>
c001fcbd:	83 c4 10             	add    esp,0x10
c001fcc0:	90                   	nop
c001fcc1:	83 c4 0c             	add    esp,0xc
c001fcc4:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fcc6 <PCI::~PCI()>:
c001fcc6:	83 ec 0c             	sub    esp,0xc
c001fcc9:	83 ec 0c             	sub    esp,0xc
c001fccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcd0:	e8 cd ff ff ff       	call   c001fca2 <PCI::~PCI()>
c001fcd5:	83 c4 10             	add    esp,0x10
c001fcd8:	83 ec 08             	sub    esp,0x8
c001fcdb:	68 5c 01 00 00       	push   0x15c
c001fce0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fce4:	e8 31 c7 fe ff       	call   c000c41a <operator delete(void*, unsigned long)>
c001fce9:	83 c4 10             	add    esp,0x10
c001fcec:	83 c4 0c             	add    esp,0xc
c001fcef:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fcf0 <IDE::~IDE()>:
c001fcf0:	83 ec 0c             	sub    esp,0xc
c001fcf3:	ba 90 25 02 c0       	mov    edx,0xc0022590
c001fcf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcfc:	89 10                	mov    DWORD PTR [eax],edx
c001fcfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd02:	83 ec 0c             	sub    esp,0xc
c001fd05:	50                   	push   eax
c001fd06:	e8 8d df fe ff       	call   c000dc98 <HardDiskController::~HardDiskController()>
c001fd0b:	83 c4 10             	add    esp,0x10
c001fd0e:	90                   	nop
c001fd0f:	83 c4 0c             	add    esp,0xc
c001fd12:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fd14 <IDE::~IDE()>:
c001fd14:	83 ec 0c             	sub    esp,0xc
c001fd17:	83 ec 0c             	sub    esp,0xc
c001fd1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd1e:	e8 cd ff ff ff       	call   c001fcf0 <IDE::~IDE()>
c001fd23:	83 c4 10             	add    esp,0x10
c001fd26:	83 ec 08             	sub    esp,0x8
c001fd29:	68 70 02 00 00       	push   0x270
c001fd2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd32:	e8 e3 c6 fe ff       	call   c000c41a <operator delete(void*, unsigned long)>
c001fd37:	83 c4 10             	add    esp,0x10
c001fd3a:	83 c4 0c             	add    esp,0xc
c001fd3d:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fd3e <SATABus::~SATABus()>:
c001fd3e:	83 ec 0c             	sub    esp,0xc
c001fd41:	ba e0 25 02 c0       	mov    edx,0xc00225e0
c001fd46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd4a:	89 10                	mov    DWORD PTR [eax],edx
c001fd4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd50:	83 ec 0c             	sub    esp,0xc
c001fd53:	50                   	push   eax
c001fd54:	e8 3f df fe ff       	call   c000dc98 <HardDiskController::~HardDiskController()>
c001fd59:	83 c4 10             	add    esp,0x10
c001fd5c:	90                   	nop
c001fd5d:	83 c4 0c             	add    esp,0xc
c001fd60:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fd62 <SATABus::~SATABus()>:
c001fd62:	83 ec 0c             	sub    esp,0xc
c001fd65:	83 ec 0c             	sub    esp,0xc
c001fd68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd6c:	e8 cd ff ff ff       	call   c001fd3e <SATABus::~SATABus()>
c001fd71:	83 c4 10             	add    esp,0x10
c001fd74:	83 ec 08             	sub    esp,0x8
c001fd77:	68 64 01 00 00       	push   0x164
c001fd7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd80:	e8 95 c6 fe ff       	call   c000c41a <operator delete(void*, unsigned long)>
c001fd85:	83 c4 10             	add    esp,0x10
c001fd88:	83 c4 0c             	add    esp,0xc
c001fd8b:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fd8c <ATA::~ATA()>:
c001fd8c:	83 ec 0c             	sub    esp,0xc
c001fd8f:	ba 20 26 02 c0       	mov    edx,0xc0022620
c001fd94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd98:	89 10                	mov    DWORD PTR [eax],edx
c001fd9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd9e:	83 ec 0c             	sub    esp,0xc
c001fda1:	50                   	push   eax
c001fda2:	e8 d3 df fe ff       	call   c000dd7a <PhysicalDisk::~PhysicalDisk()>
c001fda7:	83 c4 10             	add    esp,0x10
c001fdaa:	90                   	nop
c001fdab:	83 c4 0c             	add    esp,0xc
c001fdae:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fdb0 <ATA::~ATA()>:
c001fdb0:	83 ec 0c             	sub    esp,0xc
c001fdb3:	83 ec 0c             	sub    esp,0xc
c001fdb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdba:	e8 cd ff ff ff       	call   c001fd8c <ATA::~ATA()>
c001fdbf:	83 c4 10             	add    esp,0x10
c001fdc2:	83 ec 08             	sub    esp,0x8
c001fdc5:	68 7c 01 00 00       	push   0x17c
c001fdca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdce:	e8 47 c6 fe ff       	call   c000c41a <operator delete(void*, unsigned long)>
c001fdd3:	83 c4 10             	add    esp,0x10
c001fdd6:	83 c4 0c             	add    esp,0xc
c001fdd9:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fdda <ATAPI::~ATAPI()>:
c001fdda:	83 ec 0c             	sub    esp,0xc
c001fddd:	ba 68 26 02 c0       	mov    edx,0xc0022668
c001fde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde6:	89 10                	mov    DWORD PTR [eax],edx
c001fde8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdec:	83 ec 0c             	sub    esp,0xc
c001fdef:	50                   	push   eax
c001fdf0:	e8 85 df fe ff       	call   c000dd7a <PhysicalDisk::~PhysicalDisk()>
c001fdf5:	83 c4 10             	add    esp,0x10
c001fdf8:	90                   	nop
c001fdf9:	83 c4 0c             	add    esp,0xc
c001fdfc:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fdfe <ATAPI::~ATAPI()>:
c001fdfe:	83 ec 0c             	sub    esp,0xc
c001fe01:	83 ec 0c             	sub    esp,0xc
c001fe04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe08:	e8 cd ff ff ff       	call   c001fdda <ATAPI::~ATAPI()>
c001fe0d:	83 c4 10             	add    esp,0x10
c001fe10:	83 ec 08             	sub    esp,0x8
c001fe13:	68 84 01 00 00       	push   0x184
c001fe18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe1c:	e8 f9 c5 fe ff       	call   c000c41a <operator delete(void*, unsigned long)>
c001fe21:	83 c4 10             	add    esp,0x10
c001fe24:	83 c4 0c             	add    esp,0xc
c001fe27:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001fe28 <SATA::~SATA()>:
c001fe28:	83 ec 0c             	sub    esp,0xc
c001fe2b:	ba 1c 27 02 c0       	mov    edx,0xc002271c
c001fe30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe34:	89 10                	mov    DWORD PTR [eax],edx
c001fe36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe3a:	83 ec 0c             	sub    esp,0xc
c001fe3d:	50                   	push   eax
c001fe3e:	e8 37 df fe ff       	call   c000dd7a <PhysicalDisk::~PhysicalDisk()>
c001fe43:	83 c4 10             	add    esp,0x10
c001fe46:	90                   	nop
c001fe47:	83 c4 0c             	add    esp,0xc
c001fe4a:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fe4c <SATA::~SATA()>:
c001fe4c:	83 ec 0c             	sub    esp,0xc
c001fe4f:	83 ec 0c             	sub    esp,0xc
c001fe52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe56:	e8 cd ff ff ff       	call   c001fe28 <SATA::~SATA()>
c001fe5b:	83 c4 10             	add    esp,0x10
c001fe5e:	83 ec 08             	sub    esp,0x8
c001fe61:	68 7c 01 00 00       	push   0x17c
c001fe66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe6a:	e8 ab c5 fe ff       	call   c000c41a <operator delete(void*, unsigned long)>
c001fe6f:	83 c4 10             	add    esp,0x10
c001fe72:	83 c4 0c             	add    esp,0xc
c001fe75:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001fe76 <SATAPI::~SATAPI()>:
c001fe76:	83 ec 0c             	sub    esp,0xc
c001fe79:	ba 88 28 02 c0       	mov    edx,0xc0022888
c001fe7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe82:	89 10                	mov    DWORD PTR [eax],edx
c001fe84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe88:	83 ec 0c             	sub    esp,0xc
c001fe8b:	50                   	push   eax
c001fe8c:	e8 e9 de fe ff       	call   c000dd7a <PhysicalDisk::~PhysicalDisk()>
c001fe91:	83 c4 10             	add    esp,0x10
c001fe94:	90                   	nop
c001fe95:	83 c4 0c             	add    esp,0xc
c001fe98:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001fe9a <SATAPI::~SATAPI()>:
c001fe9a:	83 ec 0c             	sub    esp,0xc
c001fe9d:	83 ec 0c             	sub    esp,0xc
c001fea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fea4:	e8 cd ff ff ff       	call   c001fe76 <SATAPI::~SATAPI()>
c001fea9:	83 c4 10             	add    esp,0x10
c001feac:	83 ec 08             	sub    esp,0x8
c001feaf:	68 84 01 00 00       	push   0x184
c001feb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feb8:	e8 5d c5 fe ff       	call   c000c41a <operator delete(void*, unsigned long)>
c001febd:	83 c4 10             	add    esp,0x10
c001fec0:	83 c4 0c             	add    esp,0xc
c001fec3:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fec4 <IOAPIC::~IOAPIC()>:
c001fec4:	83 ec 0c             	sub    esp,0xc
c001fec7:	ba c8 28 02 c0       	mov    edx,0xc00228c8
c001fecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed0:	89 10                	mov    DWORD PTR [eax],edx
c001fed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed6:	83 ec 0c             	sub    esp,0xc
c001fed9:	50                   	push   eax
c001feda:	e8 41 d9 fe ff       	call   c000d820 <Device::~Device()>
c001fedf:	83 c4 10             	add    esp,0x10
c001fee2:	90                   	nop
c001fee3:	83 c4 0c             	add    esp,0xc
c001fee6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fee8 <IOAPIC::~IOAPIC()>:
c001fee8:	83 ec 0c             	sub    esp,0xc
c001feeb:	83 ec 0c             	sub    esp,0xc
c001feee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fef2:	e8 cd ff ff ff       	call   c001fec4 <IOAPIC::~IOAPIC()>
c001fef7:	83 c4 10             	add    esp,0x10
c001fefa:	83 ec 08             	sub    esp,0x8
c001fefd:	68 68 01 00 00       	push   0x168
c001ff02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff06:	e8 0f c5 fe ff       	call   c000c41a <operator delete(void*, unsigned long)>
c001ff0b:	83 c4 10             	add    esp,0x10
c001ff0e:	83 c4 0c             	add    esp,0xc
c001ff11:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ff14 <APICTimer::~APICTimer()>:
c001ff14:	83 ec 0c             	sub    esp,0xc
c001ff17:	ba 10 29 02 c0       	mov    edx,0xc0022910
c001ff1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff20:	89 10                	mov    DWORD PTR [eax],edx
c001ff22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff26:	83 ec 0c             	sub    esp,0xc
c001ff29:	50                   	push   eax
c001ff2a:	e8 c9 f1 fe ff       	call   c000f0f8 <Timer::~Timer()>
c001ff2f:	83 c4 10             	add    esp,0x10
c001ff32:	90                   	nop
c001ff33:	83 c4 0c             	add    esp,0xc
c001ff36:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ff38 <APICTimer::~APICTimer()>:
c001ff38:	83 ec 0c             	sub    esp,0xc
c001ff3b:	83 ec 0c             	sub    esp,0xc
c001ff3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff42:	e8 cd ff ff ff       	call   c001ff14 <APICTimer::~APICTimer()>
c001ff47:	83 c4 10             	add    esp,0x10
c001ff4a:	83 ec 08             	sub    esp,0x8
c001ff4d:	68 60 01 00 00       	push   0x160
c001ff52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff56:	e8 bf c4 fe ff       	call   c000c41a <operator delete(void*, unsigned long)>
c001ff5b:	83 c4 10             	add    esp,0x10
c001ff5e:	83 c4 0c             	add    esp,0xc
c001ff61:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ff64 <PIT::~PIT()>:
c001ff64:	83 ec 0c             	sub    esp,0xc
c001ff67:	ba 60 29 02 c0       	mov    edx,0xc0022960
c001ff6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff70:	89 10                	mov    DWORD PTR [eax],edx
c001ff72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff76:	83 ec 0c             	sub    esp,0xc
c001ff79:	50                   	push   eax
c001ff7a:	e8 79 f1 fe ff       	call   c000f0f8 <Timer::~Timer()>
c001ff7f:	83 c4 10             	add    esp,0x10
c001ff82:	90                   	nop
c001ff83:	83 c4 0c             	add    esp,0xc
c001ff86:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ff88 <PIT::~PIT()>:
c001ff88:	83 ec 0c             	sub    esp,0xc
c001ff8b:	83 ec 0c             	sub    esp,0xc
c001ff8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff92:	e8 cd ff ff ff       	call   c001ff64 <PIT::~PIT()>
c001ff97:	83 c4 10             	add    esp,0x10
c001ff9a:	83 ec 08             	sub    esp,0x8
c001ff9d:	68 5c 01 00 00       	push   0x15c
c001ffa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffa6:	e8 6f c4 fe ff       	call   c000c41a <operator delete(void*, unsigned long)>
c001ffab:	83 c4 10             	add    esp,0x10
c001ffae:	83 c4 0c             	add    esp,0xc
c001ffb1:	c3                   	ret    
