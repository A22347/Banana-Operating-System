
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 01 66 01 00       	call   c0016621 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 a4 4f 03 c0       	mov    eax,0xc0034fa4
c0000025:	3d a4 4f 03 c0       	cmp    eax,0xc0034fa4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 a4 4f 03 c0       	push   0xc0034fa4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 a4 4f 03 c0       	mov    eax,0xc0034fa4
c0000051:	2d a4 4f 03 c0       	sub    eax,0xc0034fa4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 a4 4f 03 c0       	push   0xc0034fa4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d a0 78 03 c0 00 	cmp    BYTE PTR ds:0xc00378a0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb ac f9 02 c0       	mov    ebx,0xc002f9ac
c0000097:	81 eb a8 f9 02 c0    	sub    ebx,0xc002f9a8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be a8 f9 02 c0       	mov    esi,0xc002f9a8
c00000a6:	a1 a4 78 03 c0       	mov    eax,ds:0xc00378a4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 a4 78 03 c0       	mov    ds:0xc00378a4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 a4 78 03 c0       	mov    eax,ds:0xc00378a4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 a4 4f 03 c0       	push   0xc0034fa4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 a0 78 03 c0 01 	mov    BYTE PTR ds:0xc00378a0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 a8 78 03 c0       	push   0xc00378a8
c0000108:	68 a4 4f 03 c0       	push   0xc0034fa4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 1f 4d 02 00       	call   c0024fcc <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 18 8f 01 00       	call   c00191dd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 fd 4c 02 00       	call   c0024fcc <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 0a 52 02 00       	call   c00254f8 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 ad 56 02 00       	call   c00259a4 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c4 b9 03 c0 	lgdtd  ds:0xc003b9c4
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 fb 01 02 00       	jmp    c002057a <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 c0 78 03 c0       	mov    ds:0xc00378c0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 c0 78 03 c0    	mov    DWORD PTR ds:0xc00378c0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d c0 78 03 c0    	mov    ebx,DWORD PTR ds:0xc00378c0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 c0 f9 02 c0 02 	test   BYTE PTR [edx-0x3ffd0640],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 c0 f9 02 c0 01 	test   BYTE PTR [edx-0x3ffd0640],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 c0 f9 02 c0 08 	test   BYTE PTR [edx-0x3ffd0640],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 c0 f9 02 c0 04 	test   BYTE PTR [ecx-0x3ffd0640],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 c0 f9 02 c0 01 	test   BYTE PTR [edx-0x3ffd0640],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <LWIP_PLATFORM_HTONS>:
c0000be8:	83 ec 04             	sub    esp,0x4
c0000beb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000bef:	66 89 04 24          	mov    WORD PTR [esp],ax
c0000bf3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000bf7:	c1 e8 08             	shr    eax,0x8
c0000bfa:	89 c2                	mov    edx,eax
c0000bfc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c00:	c1 e0 08             	shl    eax,0x8
c0000c03:	09 d0                	or     eax,edx
c0000c05:	83 c4 04             	add    esp,0x4
c0000c08:	c3                   	ret    
c0000c09:	8d 76 00             	lea    esi,[esi+0x0]

c0000c0c <LWIP_PLATFORM_HTONL>:
c0000c0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c10:	c1 e8 18             	shr    eax,0x18
c0000c13:	89 c2                	mov    edx,eax
c0000c15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c19:	c1 e8 08             	shr    eax,0x8
c0000c1c:	25 00 ff 00 00       	and    eax,0xff00
c0000c21:	09 c2                	or     edx,eax
c0000c23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c27:	c1 e0 08             	shl    eax,0x8
c0000c2a:	25 00 00 ff 00       	and    eax,0xff0000
c0000c2f:	09 c2                	or     edx,eax
c0000c31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c35:	c1 e0 18             	shl    eax,0x18
c0000c38:	09 d0                	or     eax,edx
c0000c3a:	c3                   	ret    
c0000c3b:	90                   	nop

c0000c3c <lwip_socket_init>:
c0000c3c:	83 ec 0c             	sub    esp,0xc
c0000c3f:	83 ec 0c             	sub    esp,0xc
c0000c42:	68 c4 fa 02 c0       	push   0xc002fac4
c0000c47:	e8 68 16 02 00       	call   c00222b4 <KeCPuts>
c0000c4c:	83 c4 10             	add    esp,0x10
c0000c4f:	90                   	nop
c0000c50:	83 c4 0c             	add    esp,0xc
c0000c53:	c3                   	ret    

c0000c54 <tcpip_callback_with_block>:
c0000c54:	83 ec 0c             	sub    esp,0xc
c0000c57:	83 ec 0c             	sub    esp,0xc
c0000c5a:	68 ff fa 02 c0       	push   0xc002faff
c0000c5f:	e8 38 16 02 00       	call   c002229c <KeCPanic>
c0000c64:	83 c4 10             	add    esp,0x10
c0000c67:	90                   	nop
c0000c68:	83 c4 0c             	add    esp,0xc
c0000c6b:	c3                   	ret    

c0000c6c <sys_sem_new>:
c0000c6c:	83 ec 1c             	sub    esp,0x1c
c0000c6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000c73:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0000c77:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0000c7c:	83 ec 08             	sub    esp,0x8
c0000c7f:	50                   	push   eax
c0000c80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0000c84:	e8 53 15 02 00       	call   c00221dc <KeNetCreateSemaphore>
c0000c89:	83 c4 10             	add    esp,0x10
c0000c8c:	b0 00                	mov    al,0x0
c0000c8e:	83 c4 1c             	add    esp,0x1c
c0000c91:	c3                   	ret    
c0000c92:	66 90                	xchg   ax,ax

c0000c94 <sys_sem_free>:
c0000c94:	83 ec 0c             	sub    esp,0xc
c0000c97:	83 ec 0c             	sub    esp,0xc
c0000c9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000c9e:	e8 7d 15 02 00       	call   c0022220 <KeNetFreeSemaphore>
c0000ca3:	83 c4 10             	add    esp,0x10
c0000ca6:	90                   	nop
c0000ca7:	83 c4 0c             	add    esp,0xc
c0000caa:	c3                   	ret    
c0000cab:	90                   	nop

c0000cac <sys_sem_signal>:
c0000cac:	83 ec 0c             	sub    esp,0xc
c0000caf:	83 ec 0c             	sub    esp,0xc
c0000cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cb6:	e8 81 15 02 00       	call   c002223c <KeNetSignalSemaphore>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	90                   	nop
c0000cbf:	83 c4 0c             	add    esp,0xc
c0000cc2:	c3                   	ret    
c0000cc3:	90                   	nop

c0000cc4 <sys_arch_sem_wait>:
c0000cc4:	83 ec 0c             	sub    esp,0xc
c0000cc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ccb:	83 ec 08             	sub    esp,0x8
c0000cce:	50                   	push   eax
c0000ccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cd3:	e8 80 15 02 00       	call   c0022258 <KeNetWaitSemaphore>
c0000cd8:	83 c4 10             	add    esp,0x10
c0000cdb:	83 c4 0c             	add    esp,0xc
c0000cde:	c3                   	ret    
c0000cdf:	90                   	nop

c0000ce0 <sys_mbox_new>:
c0000ce0:	83 ec 0c             	sub    esp,0xc
c0000ce3:	83 ec 0c             	sub    esp,0xc
c0000ce6:	68 19 fb 02 c0       	push   0xc002fb19
c0000ceb:	e8 ac 15 02 00       	call   c002229c <KeCPanic>
c0000cf0:	83 c4 10             	add    esp,0x10
c0000cf3:	b0 00                	mov    al,0x0
c0000cf5:	83 c4 0c             	add    esp,0xc
c0000cf8:	c3                   	ret    
c0000cf9:	8d 76 00             	lea    esi,[esi+0x0]

c0000cfc <sys_mbox_free>:
c0000cfc:	83 ec 0c             	sub    esp,0xc
c0000cff:	83 ec 0c             	sub    esp,0xc
c0000d02:	68 26 fb 02 c0       	push   0xc002fb26
c0000d07:	e8 90 15 02 00       	call   c002229c <KeCPanic>
c0000d0c:	83 c4 10             	add    esp,0x10
c0000d0f:	90                   	nop
c0000d10:	83 c4 0c             	add    esp,0xc
c0000d13:	c3                   	ret    

c0000d14 <sys_mbox_post>:
c0000d14:	83 ec 0c             	sub    esp,0xc
c0000d17:	83 ec 0c             	sub    esp,0xc
c0000d1a:	68 34 fb 02 c0       	push   0xc002fb34
c0000d1f:	e8 78 15 02 00       	call   c002229c <KeCPanic>
c0000d24:	83 c4 10             	add    esp,0x10
c0000d27:	90                   	nop
c0000d28:	83 c4 0c             	add    esp,0xc
c0000d2b:	c3                   	ret    

c0000d2c <sys_arch_mbox_fetch>:
c0000d2c:	83 ec 0c             	sub    esp,0xc
c0000d2f:	83 ec 0c             	sub    esp,0xc
c0000d32:	68 42 fb 02 c0       	push   0xc002fb42
c0000d37:	e8 60 15 02 00       	call   c002229c <KeCPanic>
c0000d3c:	83 c4 10             	add    esp,0x10
c0000d3f:	b8 00 00 00 00       	mov    eax,0x0
c0000d44:	83 c4 0c             	add    esp,0xc
c0000d47:	c3                   	ret    

c0000d48 <sys_arch_mbox_tryfetch>:
c0000d48:	83 ec 0c             	sub    esp,0xc
c0000d4b:	83 ec 0c             	sub    esp,0xc
c0000d4e:	68 56 fb 02 c0       	push   0xc002fb56
c0000d53:	e8 44 15 02 00       	call   c002229c <KeCPanic>
c0000d58:	83 c4 10             	add    esp,0x10
c0000d5b:	b8 00 00 00 00       	mov    eax,0x0
c0000d60:	83 c4 0c             	add    esp,0xc
c0000d63:	c3                   	ret    

c0000d64 <sys_mbox_trypost>:
c0000d64:	83 ec 0c             	sub    esp,0xc
c0000d67:	83 ec 0c             	sub    esp,0xc
c0000d6a:	68 6d fb 02 c0       	push   0xc002fb6d
c0000d6f:	e8 28 15 02 00       	call   c002229c <KeCPanic>
c0000d74:	83 c4 10             	add    esp,0x10
c0000d77:	90                   	nop
c0000d78:	83 c4 0c             	add    esp,0xc
c0000d7b:	c3                   	ret    

c0000d7c <sys_thread_new>:
c0000d7c:	83 ec 0c             	sub    esp,0xc
c0000d7f:	83 ec 08             	sub    esp,0x8
c0000d82:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000d86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000d8a:	e8 e9 14 02 00       	call   c0022278 <KeNetCreateThread>
c0000d8f:	83 c4 10             	add    esp,0x10
c0000d92:	b8 00 00 00 00       	mov    eax,0x0
c0000d97:	83 c4 0c             	add    esp,0xc
c0000d9a:	c3                   	ret    
c0000d9b:	90                   	nop

c0000d9c <sys_init>:
c0000d9c:	90                   	nop
c0000d9d:	c3                   	ret    

c0000d9e <largebin_index>:
c0000d9e:	89 c2                	mov    edx,eax
c0000da0:	c1 ea 08             	shr    edx,0x8
c0000da3:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000da9:	77 10                	ja     c0000dbb <largebin_index+0x1d>
c0000dab:	0f bd d2             	bsr    edx,edx
c0000dae:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000db1:	d3 e8                	shr    eax,cl
c0000db3:	83 e0 03             	and    eax,0x3
c0000db6:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000dba:	c3                   	ret    
c0000dbb:	b8 5f 00 00 00       	mov    eax,0x5f
c0000dc0:	c3                   	ret    

c0000dc1 <malloc_init_state>:
c0000dc1:	53                   	push   ebx
c0000dc2:	8d 50 34             	lea    edx,[eax+0x34]
c0000dc5:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000dcb:	89 d1                	mov    ecx,edx
c0000dcd:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000dd0:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000dd3:	83 c2 08             	add    edx,0x8
c0000dd6:	39 da                	cmp    edx,ebx
c0000dd8:	75 f3                	jne    c0000dcd <malloc_init_state+0xc>
c0000dda:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ddc:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000de6:	83 e2 03             	and    edx,0x3
c0000de9:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000df3:	83 ca 48             	or     edx,0x48
c0000df6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000e00:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000e0a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000e11:	89 10                	mov    DWORD PTR [eax],edx
c0000e13:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000e16:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000e20:	5b                   	pop    ebx
c0000e21:	c3                   	ret    

c0000e22 <malloc_consolidate>:
c0000e22:	8b 10                	mov    edx,DWORD PTR [eax]
c0000e24:	85 d2                	test   edx,edx
c0000e26:	0f 84 d8 00 00 00    	je     c0000f04 <malloc_consolidate+0xe2>
c0000e2c:	55                   	push   ebp
c0000e2d:	83 e2 fd             	and    edx,0xfffffffd
c0000e30:	57                   	push   edi
c0000e31:	89 c5                	mov    ebp,eax
c0000e33:	56                   	push   esi
c0000e34:	8d 78 34             	lea    edi,[eax+0x34]
c0000e37:	53                   	push   ebx
c0000e38:	83 ec 10             	sub    esp,0x10
c0000e3b:	89 10                	mov    DWORD PTR [eax],edx
c0000e3d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000e41:	c1 ea 03             	shr    edx,0x3
c0000e44:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000e48:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000e4c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000e4f:	85 d2                	test   edx,edx
c0000e51:	0f 84 98 00 00 00    	je     c0000eef <malloc_consolidate+0xcd>
c0000e57:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000e5e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000e61:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000e64:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000e68:	89 f9                	mov    ecx,edi
c0000e6a:	83 e1 fe             	and    ecx,0xfffffffe
c0000e6d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000e70:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000e73:	83 e3 fc             	and    ebx,0xfffffffc
c0000e76:	83 e7 01             	and    edi,0x1
c0000e79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000e7c:	75 14                	jne    c0000e92 <malloc_consolidate+0x70>
c0000e7e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000e80:	29 fa                	sub    edx,edi
c0000e82:	01 f9                	add    ecx,edi
c0000e84:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e87:	89 fb                	mov    ebx,edi
c0000e89:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000e8c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000e8f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000e92:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000e95:	74 40                	je     c0000ed7 <malloc_consolidate+0xb5>
c0000e97:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000e9a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000e9d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ea1:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000ea4:	83 e7 01             	and    edi,0x1
c0000ea7:	75 0e                	jne    c0000eb7 <malloc_consolidate+0x95>
c0000ea9:	01 d9                	add    ecx,ebx
c0000eab:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000eae:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000eb1:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000eb4:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000eb7:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000eba:	89 ce                	mov    esi,ecx
c0000ebc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000ebf:	83 ce 01             	or     esi,0x1
c0000ec2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000ec5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000ec8:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000ecb:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000ecf:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ed2:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ed5:	eb 0c                	jmp    c0000ee3 <malloc_consolidate+0xc1>
c0000ed7:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000eda:	83 c9 01             	or     ecx,0x1
c0000edd:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ee0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ee3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ee7:	85 d2                	test   edx,edx
c0000ee9:	0f 85 6f ff ff ff    	jne    c0000e5e <malloc_consolidate+0x3c>
c0000eef:	83 c5 04             	add    ebp,0x4
c0000ef2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ef6:	0f 85 50 ff ff ff    	jne    c0000e4c <malloc_consolidate+0x2a>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	5b                   	pop    ebx
c0000f00:	5e                   	pop    esi
c0000f01:	5f                   	pop    edi
c0000f02:	5d                   	pop    ebp
c0000f03:	c3                   	ret    
c0000f04:	e9 b8 fe ff ff       	jmp    c0000dc1 <malloc_init_state>

c0000f09 <dlfree>:
c0000f09:	57                   	push   edi
c0000f0a:	56                   	push   esi
c0000f0b:	53                   	push   ebx
c0000f0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000f10:	85 c9                	test   ecx,ecx
c0000f12:	0f 84 01 01 00 00    	je     c0001019 <dlfree+0x110>
c0000f18:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000f1b:	8b 1d e0 78 03 c0    	mov    ebx,DWORD PTR ds:0xc00378e0
c0000f21:	89 f0                	mov    eax,esi
c0000f23:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000f26:	83 e0 fc             	and    eax,0xfffffffc
c0000f29:	39 c3                	cmp    ebx,eax
c0000f2b:	72 24                	jb     c0000f51 <dlfree+0x48>
c0000f2d:	83 cb 03             	or     ebx,0x3
c0000f30:	c1 e8 03             	shr    eax,0x3
c0000f33:	89 1d e0 78 03 c0    	mov    DWORD PTR ds:0xc00378e0,ebx
c0000f39:	83 e8 02             	sub    eax,0x2
c0000f3c:	8b 1c 85 e4 78 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffc871c]
c0000f43:	89 19                	mov    DWORD PTR [ecx],ebx
c0000f45:	89 14 85 e4 78 03 c0 	mov    DWORD PTR [eax*4-0x3ffc871c],edx
c0000f4c:	e9 c8 00 00 00       	jmp    c0001019 <dlfree+0x110>
c0000f51:	83 e6 02             	and    esi,0x2
c0000f54:	0f 85 a0 00 00 00    	jne    c0000ffa <dlfree+0xf1>
c0000f5a:	83 cb 01             	or     ebx,0x1
c0000f5d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000f60:	89 1d e0 78 03 c0    	mov    DWORD PTR ds:0xc00378e0,ebx
c0000f66:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000f69:	83 e3 fc             	and    ebx,0xfffffffc
c0000f6c:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000f70:	75 13                	jne    c0000f85 <dlfree+0x7c>
c0000f72:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000f75:	29 ca                	sub    edx,ecx
c0000f77:	01 c8                	add    eax,ecx
c0000f79:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000f7c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000f7f:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000f82:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000f85:	39 35 0c 79 03 c0    	cmp    DWORD PTR ds:0xc003790c,esi
c0000f8b:	74 40                	je     c0000fcd <dlfree+0xc4>
c0000f8d:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000f91:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000f94:	80 e1 01             	and    cl,0x1
c0000f97:	75 0e                	jne    c0000fa7 <dlfree+0x9e>
c0000f99:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000f9c:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000f9f:	01 d8                	add    eax,ebx
c0000fa1:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000fa4:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000fa7:	8b 0d 1c 79 03 c0    	mov    ecx,DWORD PTR ds:0xc003791c
c0000fad:	c7 42 0c 14 79 03 c0 	mov    DWORD PTR [edx+0xc],0xc0037914
c0000fb4:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000fb7:	89 15 1c 79 03 c0    	mov    DWORD PTR ds:0xc003791c,edx
c0000fbd:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000fc0:	89 c1                	mov    ecx,eax
c0000fc2:	83 c9 01             	or     ecx,0x1
c0000fc5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fc8:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000fcb:	eb 10                	jmp    c0000fdd <dlfree+0xd4>
c0000fcd:	01 d8                	add    eax,ebx
c0000fcf:	89 c1                	mov    ecx,eax
c0000fd1:	83 c9 01             	or     ecx,0x1
c0000fd4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fd7:	89 15 0c 79 03 c0    	mov    DWORD PTR ds:0xc003790c,edx
c0000fdd:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000fe2:	76 35                	jbe    c0001019 <dlfree+0x110>
c0000fe4:	f6 05 e0 78 03 c0 02 	test   BYTE PTR ds:0xc00378e0,0x2
c0000feb:	74 2c                	je     c0001019 <dlfree+0x110>
c0000fed:	5b                   	pop    ebx
c0000fee:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c0000ff3:	5e                   	pop    esi
c0000ff4:	5f                   	pop    edi
c0000ff5:	e9 28 fe ff ff       	jmp    c0000e22 <malloc_consolidate>
c0000ffa:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000ffd:	01 c8                	add    eax,ecx
c0000fff:	53                   	push   ebx
c0001000:	29 ca                	sub    edx,ecx
c0001002:	53                   	push   ebx
c0001003:	ff 0d 30 7c 03 c0    	dec    DWORD PTR ds:0xc0037c30
c0001009:	50                   	push   eax
c000100a:	29 05 44 7c 03 c0    	sub    DWORD PTR ds:0xc0037c44,eax
c0001010:	52                   	push   edx
c0001011:	e8 31 55 01 00       	call   c0016547 <munmap>
c0001016:	83 c4 10             	add    esp,0x10
c0001019:	5b                   	pop    ebx
c000101a:	5e                   	pop    esi
c000101b:	5f                   	pop    edi
c000101c:	c3                   	ret    

c000101d <sYSMALLOc>:
c000101d:	55                   	push   ebp
c000101e:	57                   	push   edi
c000101f:	56                   	push   esi
c0001020:	53                   	push   ebx
c0001021:	89 d3                	mov    ebx,edx
c0001023:	83 ec 2c             	sub    esp,0x2c
c0001026:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000102a:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0001030:	f6 02 02             	test   BYTE PTR [edx],0x2
c0001033:	8d 45 ff             	lea    eax,[ebp-0x1]
c0001036:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000103a:	74 1f                	je     c000105b <sYSMALLOc+0x3e>
c000103c:	89 d0                	mov    eax,edx
c000103e:	e8 df fd ff ff       	call   c0000e22 <malloc_consolidate>
c0001043:	83 ec 0c             	sub    esp,0xc
c0001046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000104a:	83 e8 07             	sub    eax,0x7
c000104d:	50                   	push   eax
c000104e:	e8 7d 03 00 00       	call   c00013d0 <dlmalloc>
c0001053:	83 c4 10             	add    esp,0x10
c0001056:	e9 6d 03 00 00       	jmp    c00013c8 <sYSMALLOc+0x3ab>
c000105b:	f7 dd                	neg    ebp
c000105d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001061:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0001065:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c000106b:	0f 87 be 00 00 00    	ja     c000112f <sYSMALLOc+0x112>
c0001071:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0001077:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c000107d:	0f 8d ac 00 00 00    	jge    c000112f <sYSMALLOc+0x112>
c0001083:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0001087:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000108b:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c000108f:	21 ee                	and    esi,ebp
c0001091:	39 fe                	cmp    esi,edi
c0001093:	0f 86 96 00 00 00    	jbe    c000112f <sYSMALLOc+0x112>
c0001099:	52                   	push   edx
c000109a:	52                   	push   edx
c000109b:	6a 00                	push   0x0
c000109d:	6a ff                	push   0xffffffff
c000109f:	6a 0c                	push   0xc
c00010a1:	6a 03                	push   0x3
c00010a3:	56                   	push   esi
c00010a4:	6a 00                	push   0x0
c00010a6:	e8 3e 54 01 00       	call   c00164e9 <mmap>
c00010ab:	83 c4 20             	add    esp,0x20
c00010ae:	83 f8 ff             	cmp    eax,0xffffffff
c00010b1:	74 7c                	je     c000112f <sYSMALLOc+0x112>
c00010b3:	89 c1                	mov    ecx,eax
c00010b5:	83 e1 07             	and    ecx,0x7
c00010b8:	74 13                	je     c00010cd <sYSMALLOc+0xb0>
c00010ba:	ba 08 00 00 00       	mov    edx,0x8
c00010bf:	29 ca                	sub    edx,ecx
c00010c1:	89 f1                	mov    ecx,esi
c00010c3:	01 d0                	add    eax,edx
c00010c5:	29 d1                	sub    ecx,edx
c00010c7:	89 10                	mov    DWORD PTR [eax],edx
c00010c9:	89 ca                	mov    edx,ecx
c00010cb:	eb 08                	jmp    c00010d5 <sYSMALLOc+0xb8>
c00010cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00010d3:	89 f2                	mov    edx,esi
c00010d5:	83 ca 02             	or     edx,0x2
c00010d8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00010db:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c00010e1:	8d 57 01             	lea    edx,[edi+0x1]
c00010e4:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c00010ea:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c00010f0:	7e 06                	jle    c00010f8 <sYSMALLOc+0xdb>
c00010f2:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c00010f8:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c00010fe:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0001104:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c000110a:	76 06                	jbe    c0001112 <sYSMALLOc+0xf5>
c000110c:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0001112:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0001118:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c000111e:	0f 83 3f 01 00 00    	jae    c0001263 <sYSMALLOc+0x246>
c0001124:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c000112a:	e9 34 01 00 00       	jmp    c0001263 <sYSMALLOc+0x246>
c000112f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001132:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0001138:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000113c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000113f:	83 e0 fc             	and    eax,0xfffffffc
c0001142:	89 04 24             	mov    DWORD PTR [esp],eax
c0001145:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001149:	03 04 24             	add    eax,DWORD PTR [esp]
c000114c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001154:	83 c0 10             	add    eax,0x10
c0001157:	01 c5                	add    ebp,eax
c0001159:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000115d:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0001164:	74 03                	je     c0001169 <sYSMALLOc+0x14c>
c0001166:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0001169:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c000116d:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0001171:	89 ee                	mov    esi,ebp
c0001173:	7f 18                	jg     c000118d <sYSMALLOc+0x170>
c0001175:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c000117c:	74 27                	je     c00011a5 <sYSMALLOc+0x188>
c000117e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001182:	03 34 24             	add    esi,DWORD PTR [esp]
c0001185:	01 ee                	add    esi,ebp
c0001187:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c000118b:	eb 18                	jmp    c00011a5 <sYSMALLOc+0x188>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	55                   	push   ebp
c0001191:	e8 1d 53 01 00       	call   c00164b3 <sbrk_thunk>
c0001196:	83 c4 10             	add    esp,0x10
c0001199:	89 c7                	mov    edi,eax
c000119b:	83 c8 ff             	or     eax,0xffffffff
c000119e:	83 ff ff             	cmp    edi,0xffffffff
c00011a1:	75 42                	jne    c00011e5 <sYSMALLOc+0x1c8>
c00011a3:	eb d0                	jmp    c0001175 <sYSMALLOc+0x158>
c00011a5:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c00011ab:	77 05                	ja     c00011b2 <sYSMALLOc+0x195>
c00011ad:	be 00 c0 00 00       	mov    esi,0xc000
c00011b2:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00011b6:	77 07                	ja     c00011bf <sYSMALLOc+0x1a2>
c00011b8:	31 c0                	xor    eax,eax
c00011ba:	e9 09 02 00 00       	jmp    c00013c8 <sYSMALLOc+0x3ab>
c00011bf:	50                   	push   eax
c00011c0:	50                   	push   eax
c00011c1:	6a 00                	push   0x0
c00011c3:	6a ff                	push   0xffffffff
c00011c5:	6a 0c                	push   0xc
c00011c7:	6a 03                	push   0x3
c00011c9:	56                   	push   esi
c00011ca:	6a 00                	push   0x0
c00011cc:	e8 18 53 01 00       	call   c00164e9 <mmap>
c00011d1:	83 c4 20             	add    esp,0x20
c00011d4:	89 c7                	mov    edi,eax
c00011d6:	83 f8 ff             	cmp    eax,0xffffffff
c00011d9:	74 dd                	je     c00011b8 <sYSMALLOc+0x19b>
c00011db:	8d 04 30             	lea    eax,[eax+esi*1]
c00011de:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c00011e5:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c00011eb:	01 f5                	add    ebp,esi
c00011ed:	83 f8 ff             	cmp    eax,0xffffffff
c00011f0:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00011f6:	75 73                	jne    c000126b <sYSMALLOc+0x24e>
c00011f8:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00011fc:	75 6d                	jne    c000126b <sYSMALLOc+0x24e>
c00011fe:	03 34 24             	add    esi,DWORD PTR [esp]
c0001201:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001205:	83 ce 01             	or     esi,0x1
c0001208:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000120b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001211:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001217:	73 06                	jae    c000121f <sYSMALLOc+0x202>
c0001219:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000121f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001225:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000122b:	73 06                	jae    c0001233 <sYSMALLOc+0x216>
c000122d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001233:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001236:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001239:	83 e2 fc             	and    edx,0xfffffffc
c000123c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0001240:	0f 82 72 ff ff ff    	jb     c00011b8 <sYSMALLOc+0x19b>
c0001246:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000124a:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c000124e:	01 c1                	add    ecx,eax
c0001250:	83 ca 01             	or     edx,0x1
c0001253:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001256:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000125a:	83 cb 01             	or     ebx,0x1
c000125d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001260:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001263:	83 c0 08             	add    eax,0x8
c0001266:	e9 5d 01 00 00       	jmp    c00013c8 <sYSMALLOc+0x3ab>
c000126b:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0001271:	89 d1                	mov    ecx,edx
c0001273:	83 e1 01             	and    ecx,0x1
c0001276:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000127a:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c000127f:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c0001283:	74 14                	je     c0001299 <sYSMALLOc+0x27c>
c0001285:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001289:	76 0e                	jbe    c0001299 <sYSMALLOc+0x27c>
c000128b:	83 e2 fe             	and    edx,0xfffffffe
c000128e:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001294:	e9 89 00 00 00       	jmp    c0001322 <sYSMALLOc+0x305>
c0001299:	85 c9                	test   ecx,ecx
c000129b:	0f 84 81 00 00 00    	je     c0001322 <sYSMALLOc+0x305>
c00012a1:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00012a5:	74 0e                	je     c00012b5 <sYSMALLOc+0x298>
c00012a7:	89 f8                	mov    eax,edi
c00012a9:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00012ad:	01 c5                	add    ebp,eax
c00012af:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00012b5:	89 fa                	mov    edx,edi
c00012b7:	83 e2 07             	and    edx,0x7
c00012ba:	74 0c                	je     c00012c8 <sYSMALLOc+0x2ab>
c00012bc:	b8 08 00 00 00       	mov    eax,0x8
c00012c1:	29 d0                	sub    eax,edx
c00012c3:	8d 14 07             	lea    edx,[edi+eax*1]
c00012c6:	eb 04                	jmp    c00012cc <sYSMALLOc+0x2af>
c00012c8:	89 fa                	mov    edx,edi
c00012ca:	31 c0                	xor    eax,eax
c00012cc:	03 04 24             	add    eax,DWORD PTR [esp]
c00012cf:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00012d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00012d7:	8d 0c 06             	lea    ecx,[esi+eax*1]
c00012da:	83 ec 0c             	sub    esp,0xc
c00012dd:	01 f9                	add    ecx,edi
c00012df:	01 cd                	add    ebp,ecx
c00012e1:	29 c8                	sub    eax,ecx
c00012e3:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c00012e7:	01 c5                	add    ebp,eax
c00012e9:	55                   	push   ebp
c00012ea:	e8 c4 51 01 00       	call   c00164b3 <sbrk_thunk>
c00012ef:	83 c4 10             	add    esp,0x10
c00012f2:	83 f8 ff             	cmp    eax,0xffffffff
c00012f5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00012f9:	75 17                	jne    c0001312 <sYSMALLOc+0x2f5>
c00012fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00012ff:	83 ec 0c             	sub    esp,0xc
c0001302:	6a 00                	push   0x0
c0001304:	e8 aa 51 01 00       	call   c00164b3 <sbrk_thunk>
c0001309:	83 c4 10             	add    esp,0x10
c000130c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001310:	eb 32                	jmp    c0001344 <sYSMALLOc+0x327>
c0001312:	39 f8                	cmp    eax,edi
c0001314:	73 39                	jae    c000134f <sYSMALLOc+0x332>
c0001316:	8d 04 37             	lea    eax,[edi+esi*1]
c0001319:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001320:	eb 22                	jmp    c0001344 <sYSMALLOc+0x327>
c0001322:	89 fa                	mov    edx,edi
c0001324:	83 f8 ff             	cmp    eax,0xffffffff
c0001327:	75 24                	jne    c000134d <sYSMALLOc+0x330>
c0001329:	83 ec 0c             	sub    esp,0xc
c000132c:	6a 00                	push   0x0
c000132e:	e8 80 51 01 00       	call   c00164b3 <sbrk_thunk>
c0001333:	83 c4 10             	add    esp,0x10
c0001336:	89 c2                	mov    edx,eax
c0001338:	29 fa                	sub    edx,edi
c000133a:	29 f2                	sub    edx,esi
c000133c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001342:	89 fa                	mov    edx,edi
c0001344:	83 f8 ff             	cmp    eax,0xffffffff
c0001347:	0f 84 be fe ff ff    	je     c000120b <sYSMALLOc+0x1ee>
c000134d:	31 ed                	xor    ebp,ebp
c000134f:	29 d0                	sub    eax,edx
c0001351:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0001354:	01 e8                	add    eax,ebp
c0001356:	83 c8 01             	or     eax,0x1
c0001359:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000135c:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c0001362:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0001366:	0f 84 9f fe ff ff    	je     c000120b <sYSMALLOc+0x1ee>
c000136c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001370:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0001373:	83 ee 0c             	sub    esi,0xc
c0001376:	83 e6 f8             	and    esi,0xfffffff8
c0001379:	89 f0                	mov    eax,esi
c000137b:	83 c8 01             	or     eax,0x1
c000137e:	83 fe 0f             	cmp    esi,0xf
c0001381:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001384:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000138c:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001394:	0f 86 71 fe ff ff    	jbe    c000120b <sYSMALLOc+0x1ee>
c000139a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00013a0:	83 ec 0c             	sub    esp,0xc
c00013a3:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00013ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00013b1:	83 c0 08             	add    eax,0x8
c00013b4:	50                   	push   eax
c00013b5:	e8 4f fb ff ff       	call   c0000f09 <dlfree>
c00013ba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00013c0:	83 c4 10             	add    esp,0x10
c00013c3:	e9 43 fe ff ff       	jmp    c000120b <sYSMALLOc+0x1ee>
c00013c8:	83 c4 2c             	add    esp,0x2c
c00013cb:	5b                   	pop    ebx
c00013cc:	5e                   	pop    esi
c00013cd:	5f                   	pop    edi
c00013ce:	5d                   	pop    ebp
c00013cf:	c3                   	ret    

c00013d0 <dlmalloc>:
c00013d0:	55                   	push   ebp
c00013d1:	57                   	push   edi
c00013d2:	56                   	push   esi
c00013d3:	53                   	push   ebx
c00013d4:	83 ec 1c             	sub    esp,0x1c
c00013d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00013db:	83 f8 df             	cmp    eax,0xffffffdf
c00013de:	0f 87 70 03 00 00    	ja     c0001754 <dlmalloc+0x384>
c00013e4:	83 c0 0b             	add    eax,0xb
c00013e7:	be 10 00 00 00       	mov    esi,0x10
c00013ec:	83 f8 0f             	cmp    eax,0xf
c00013ef:	76 05                	jbe    c00013f6 <dlmalloc+0x26>
c00013f1:	83 e0 f8             	and    eax,0xfffffff8
c00013f4:	89 c6                	mov    esi,eax
c00013f6:	8b 3d e0 78 03 c0    	mov    edi,DWORD PTR ds:0xc00378e0
c00013fc:	f7 c7 01 00 00 00    	test   edi,0x1
c0001402:	75 17                	jne    c000141b <dlmalloc+0x4b>
c0001404:	85 ff                	test   edi,edi
c0001406:	0f 85 05 03 00 00    	jne    c0001711 <dlmalloc+0x341>
c000140c:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c0001411:	e8 0c fa ff ff       	call   c0000e22 <malloc_consolidate>
c0001416:	e9 f6 02 00 00       	jmp    c0001711 <dlmalloc+0x341>
c000141b:	39 f7                	cmp    edi,esi
c000141d:	72 1f                	jb     c000143e <dlmalloc+0x6e>
c000141f:	89 f2                	mov    edx,esi
c0001421:	c1 ea 03             	shr    edx,0x3
c0001424:	83 ea 02             	sub    edx,0x2
c0001427:	8b 04 95 e4 78 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc871c]
c000142e:	85 c0                	test   eax,eax
c0001430:	74 0c                	je     c000143e <dlmalloc+0x6e>
c0001432:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001435:	89 0c 95 e4 78 03 c0 	mov    DWORD PTR [edx*4-0x3ffc871c],ecx
c000143c:	eb 30                	jmp    c000146e <dlmalloc+0x9e>
c000143e:	89 f0                	mov    eax,esi
c0001440:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001446:	77 2e                	ja     c0001476 <dlmalloc+0xa6>
c0001448:	c1 e8 03             	shr    eax,0x3
c000144b:	8d 14 c5 14 79 03 c0 	lea    edx,[eax*8-0x3ffc86ec]
c0001452:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001456:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001459:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000145c:	39 c3                	cmp    ebx,eax
c000145e:	74 2e                	je     c000148e <dlmalloc+0xbe>
c0001460:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001463:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001468:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000146b:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000146e:	83 c0 08             	add    eax,0x8
c0001471:	e9 e0 02 00 00       	jmp    c0001756 <dlmalloc+0x386>
c0001476:	e8 23 f9 ff ff       	call   c0000d9e <largebin_index>
c000147b:	83 e7 02             	and    edi,0x2
c000147e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001482:	74 0a                	je     c000148e <dlmalloc+0xbe>
c0001484:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c0001489:	e8 94 f9 ff ff       	call   c0000e22 <malloc_consolidate>
c000148e:	8d 46 10             	lea    eax,[esi+0x10]
c0001491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001495:	8b 1d 20 79 03 c0    	mov    ebx,DWORD PTR ds:0xc0037920
c000149b:	81 fb 14 79 03 c0    	cmp    ebx,0xc0037914
c00014a1:	0f 84 13 01 00 00    	je     c00015ba <dlmalloc+0x1ea>
c00014a7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00014aa:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014ad:	83 e7 fc             	and    edi,0xfffffffc
c00014b0:	81 fe ff 00 00 00    	cmp    esi,0xff
c00014b6:	77 4c                	ja     c0001504 <dlmalloc+0x134>
c00014b8:	3d 14 79 03 c0       	cmp    eax,0xc0037914
c00014bd:	75 45                	jne    c0001504 <dlmalloc+0x134>
c00014bf:	39 1d 10 79 03 c0    	cmp    DWORD PTR ds:0xc0037910,ebx
c00014c5:	75 3d                	jne    c0001504 <dlmalloc+0x134>
c00014c7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00014cb:	73 37                	jae    c0001504 <dlmalloc+0x134>
c00014cd:	8d 04 33             	lea    eax,[ebx+esi*1]
c00014d0:	89 fa                	mov    edx,edi
c00014d2:	a3 1c 79 03 c0       	mov    ds:0xc003791c,eax
c00014d7:	a3 20 79 03 c0       	mov    ds:0xc0037920,eax
c00014dc:	a3 10 79 03 c0       	mov    ds:0xc0037910,eax
c00014e1:	29 f2                	sub    edx,esi
c00014e3:	c7 40 08 14 79 03 c0 	mov    DWORD PTR [eax+0x8],0xc0037914
c00014ea:	c7 40 0c 14 79 03 c0 	mov    DWORD PTR [eax+0xc],0xc0037914
c00014f1:	83 ce 01             	or     esi,0x1
c00014f4:	89 d1                	mov    ecx,edx
c00014f6:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00014f9:	83 c9 01             	or     ecx,0x1
c00014fc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00014ff:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001502:	eb 15                	jmp    c0001519 <dlmalloc+0x149>
c0001504:	a3 20 79 03 c0       	mov    ds:0xc0037920,eax
c0001509:	39 fe                	cmp    esi,edi
c000150b:	c7 40 08 14 79 03 c0 	mov    DWORD PTR [eax+0x8],0xc0037914
c0001512:	75 0d                	jne    c0001521 <dlmalloc+0x151>
c0001514:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001519:	8d 43 08             	lea    eax,[ebx+0x8]
c000151c:	e9 35 02 00 00       	jmp    c0001756 <dlmalloc+0x386>
c0001521:	89 f8                	mov    eax,edi
c0001523:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001529:	77 19                	ja     c0001544 <dlmalloc+0x174>
c000152b:	c1 e8 03             	shr    eax,0x3
c000152e:	8d 14 00             	lea    edx,[eax+eax*1]
c0001531:	83 c2 0d             	add    edx,0xd
c0001534:	8d 2c 95 d8 78 03 c0 	lea    ebp,[edx*4-0x3ffc8728]
c000153b:	8b 14 95 e0 78 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc8720]
c0001542:	eb 46                	jmp    c000158a <dlmalloc+0x1ba>
c0001544:	e8 55 f8 ff ff       	call   c0000d9e <largebin_index>
c0001549:	8d 14 00             	lea    edx,[eax+eax*1]
c000154c:	83 c2 0d             	add    edx,0xd
c000154f:	8d 0c 95 e0 78 03 c0 	lea    ecx,[edx*4-0x3ffc8720]
c0001556:	8b 14 95 e0 78 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc8720]
c000155d:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001560:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001564:	89 d5                	mov    ebp,edx
c0001566:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000156a:	74 1e                	je     c000158a <dlmalloc+0x1ba>
c000156c:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000156f:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001572:	77 12                	ja     c0001586 <dlmalloc+0x1b6>
c0001574:	83 cf 01             	or     edi,0x1
c0001577:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000157a:	76 05                	jbe    c0001581 <dlmalloc+0x1b1>
c000157c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000157f:	eb f6                	jmp    c0001577 <dlmalloc+0x1a7>
c0001581:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001584:	eb 04                	jmp    c000158a <dlmalloc+0x1ba>
c0001586:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000158a:	89 c7                	mov    edi,eax
c000158c:	88 c1                	mov    cl,al
c000158e:	c1 ff 05             	sar    edi,0x5
c0001591:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001595:	bf 01 00 00 00       	mov    edi,0x1
c000159a:	d3 e7                	shl    edi,cl
c000159c:	89 f8                	mov    eax,edi
c000159e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00015a2:	09 04 bd 14 7c 03 c0 	or     DWORD PTR [edi*4-0x3ffc83ec],eax
c00015a9:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00015ac:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00015af:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00015b2:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00015b5:	e9 db fe ff ff       	jmp    c0001495 <dlmalloc+0xc5>
c00015ba:	81 fe ff 00 00 00    	cmp    esi,0xff
c00015c0:	76 78                	jbe    c000163a <dlmalloc+0x26a>
c00015c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00015c6:	8d 04 c5 14 79 03 c0 	lea    eax,[eax*8-0x3ffc86ec]
c00015cd:	8d 48 f8             	lea    ecx,[eax-0x8]
c00015d0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00015d3:	39 ca                	cmp    edx,ecx
c00015d5:	74 63                	je     c000163a <dlmalloc+0x26a>
c00015d7:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00015da:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015dd:	83 e3 fc             	and    ebx,0xfffffffc
c00015e0:	39 de                	cmp    esi,ebx
c00015e2:	77 52                	ja     c0001636 <dlmalloc+0x266>
c00015e4:	89 df                	mov    edi,ebx
c00015e6:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00015e9:	29 f7                	sub    edi,esi
c00015eb:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00015ee:	01 d3                	add    ebx,edx
c00015f0:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00015f3:	83 ff 0f             	cmp    edi,0xf
c00015f6:	8d 42 08             	lea    eax,[edx+0x8]
c00015f9:	77 09                	ja     c0001604 <dlmalloc+0x234>
c00015fb:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00015ff:	e9 52 01 00 00       	jmp    c0001756 <dlmalloc+0x386>
c0001604:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001607:	83 ce 01             	or     esi,0x1
c000160a:	89 0d 1c 79 03 c0    	mov    DWORD PTR ds:0xc003791c,ecx
c0001610:	89 0d 20 79 03 c0    	mov    DWORD PTR ds:0xc0037920,ecx
c0001616:	c7 41 08 14 79 03 c0 	mov    DWORD PTR [ecx+0x8],0xc0037914
c000161d:	c7 41 0c 14 79 03 c0 	mov    DWORD PTR [ecx+0xc],0xc0037914
c0001624:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001627:	89 fa                	mov    edx,edi
c0001629:	83 ca 01             	or     edx,0x1
c000162c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000162f:	89 3b                	mov    DWORD PTR [ebx],edi
c0001631:	e9 20 01 00 00       	jmp    c0001756 <dlmalloc+0x386>
c0001636:	89 c2                	mov    edx,eax
c0001638:	eb 99                	jmp    c00015d3 <dlmalloc+0x203>
c000163a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000163e:	b8 01 00 00 00       	mov    eax,0x1
c0001643:	41                   	inc    ecx
c0001644:	89 cb                	mov    ebx,ecx
c0001646:	8d 14 cd 0c 79 03 c0 	lea    edx,[ecx*8-0x3ffc86f4]
c000164d:	c1 eb 05             	shr    ebx,0x5
c0001650:	d3 e0                	shl    eax,cl
c0001652:	8b 3c 9d 14 7c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc83ec]
c0001659:	39 f8                	cmp    eax,edi
c000165b:	77 04                	ja     c0001661 <dlmalloc+0x291>
c000165d:	85 c0                	test   eax,eax
c000165f:	75 26                	jne    c0001687 <dlmalloc+0x2b7>
c0001661:	43                   	inc    ebx
c0001662:	83 fb 02             	cmp    ebx,0x2
c0001665:	0f 87 a6 00 00 00    	ja     c0001711 <dlmalloc+0x341>
c000166b:	8b 3c 9d 14 7c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc83ec]
c0001672:	85 ff                	test   edi,edi
c0001674:	74 eb                	je     c0001661 <dlmalloc+0x291>
c0001676:	89 d8                	mov    eax,ebx
c0001678:	c1 e0 06             	shl    eax,0x6
c000167b:	8d 14 85 0c 79 03 c0 	lea    edx,[eax*4-0x3ffc86f4]
c0001682:	b8 01 00 00 00       	mov    eax,0x1
c0001687:	85 f8                	test   eax,edi
c0001689:	75 07                	jne    c0001692 <dlmalloc+0x2c2>
c000168b:	83 c2 08             	add    edx,0x8
c000168e:	01 c0                	add    eax,eax
c0001690:	eb f5                	jmp    c0001687 <dlmalloc+0x2b7>
c0001692:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001695:	39 ca                	cmp    edx,ecx
c0001697:	75 14                	jne    c00016ad <dlmalloc+0x2dd>
c0001699:	89 c1                	mov    ecx,eax
c000169b:	83 c2 08             	add    edx,0x8
c000169e:	f7 d1                	not    ecx
c00016a0:	01 c0                	add    eax,eax
c00016a2:	21 cf                	and    edi,ecx
c00016a4:	89 3c 9d 14 7c 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc83ec],edi
c00016ab:	eb ac                	jmp    c0001659 <dlmalloc+0x289>
c00016ad:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00016b0:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00016b3:	83 e0 fc             	and    eax,0xfffffffc
c00016b6:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00016b9:	89 c3                	mov    ebx,eax
c00016bb:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00016be:	29 f3                	sub    ebx,esi
c00016c0:	8d 14 01             	lea    edx,[ecx+eax*1]
c00016c3:	83 fb 0f             	cmp    ebx,0xf
c00016c6:	8d 41 08             	lea    eax,[ecx+0x8]
c00016c9:	77 09                	ja     c00016d4 <dlmalloc+0x304>
c00016cb:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00016cf:	e9 82 00 00 00       	jmp    c0001756 <dlmalloc+0x386>
c00016d4:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00016d7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00016dd:	89 3d 1c 79 03 c0    	mov    DWORD PTR ds:0xc003791c,edi
c00016e3:	89 3d 20 79 03 c0    	mov    DWORD PTR ds:0xc0037920,edi
c00016e9:	c7 47 08 14 79 03 c0 	mov    DWORD PTR [edi+0x8],0xc0037914
c00016f0:	c7 47 0c 14 79 03 c0 	mov    DWORD PTR [edi+0xc],0xc0037914
c00016f7:	77 06                	ja     c00016ff <dlmalloc+0x32f>
c00016f9:	89 3d 10 79 03 c0    	mov    DWORD PTR ds:0xc0037910,edi
c00016ff:	83 ce 01             	or     esi,0x1
c0001702:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001705:	89 d9                	mov    ecx,ebx
c0001707:	83 c9 01             	or     ecx,0x1
c000170a:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000170d:	89 1a                	mov    DWORD PTR [edx],ebx
c000170f:	eb 45                	jmp    c0001756 <dlmalloc+0x386>
c0001711:	a1 0c 79 03 c0       	mov    eax,ds:0xc003790c
c0001716:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001719:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000171c:	83 e2 fc             	and    edx,0xfffffffc
c000171f:	39 d1                	cmp    ecx,edx
c0001721:	77 1e                	ja     c0001741 <dlmalloc+0x371>
c0001723:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 0d 0c 79 03 c0    	mov    DWORD PTR ds:0xc003790c,ecx
c000172e:	83 cb 01             	or     ebx,0x1
c0001731:	29 f2                	sub    edx,esi
c0001733:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001736:	83 ca 01             	or     edx,0x1
c0001739:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000173c:	e9 2d fd ff ff       	jmp    c000146e <dlmalloc+0x9e>
c0001741:	83 c4 1c             	add    esp,0x1c
c0001744:	89 f0                	mov    eax,esi
c0001746:	5b                   	pop    ebx
c0001747:	ba e0 78 03 c0       	mov    edx,0xc00378e0
c000174c:	5e                   	pop    esi
c000174d:	5f                   	pop    edi
c000174e:	5d                   	pop    ebp
c000174f:	e9 c9 f8 ff ff       	jmp    c000101d <sYSMALLOc>
c0001754:	31 c0                	xor    eax,eax
c0001756:	83 c4 1c             	add    esp,0x1c
c0001759:	5b                   	pop    ebx
c000175a:	5e                   	pop    esi
c000175b:	5f                   	pop    edi
c000175c:	5d                   	pop    ebp
c000175d:	c3                   	ret    

c000175e <iALLOc>:
c000175e:	55                   	push   ebp
c000175f:	89 c5                	mov    ebp,eax
c0001761:	57                   	push   edi
c0001762:	56                   	push   esi
c0001763:	53                   	push   ebx
c0001764:	83 ec 2c             	sub    esp,0x2c
c0001767:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000176b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000176f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001773:	83 3d e0 78 03 c0 00 	cmp    DWORD PTR ds:0xc00378e0,0x0
c000177a:	75 12                	jne    c000178e <iALLOc+0x30>
c000177c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001780:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c0001785:	e8 98 f6 ff ff       	call   c0000e22 <malloc_consolidate>
c000178a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000178e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001793:	74 12                	je     c00017a7 <iALLOc+0x49>
c0001795:	85 ed                	test   ebp,ebp
c0001797:	0f 84 64 01 00 00    	je     c0001901 <iALLOc+0x1a3>
c000179d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00017a5:	eb 33                	jmp    c00017da <iALLOc+0x7c>
c00017a7:	85 ed                	test   ebp,ebp
c00017a9:	75 14                	jne    c00017bf <iALLOc+0x61>
c00017ab:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00017b3:	83 c4 2c             	add    esp,0x2c
c00017b6:	5b                   	pop    ebx
c00017b7:	5e                   	pop    esi
c00017b8:	5f                   	pop    edi
c00017b9:	5d                   	pop    ebp
c00017ba:	e9 11 fc ff ff       	jmp    c00013d0 <dlmalloc>
c00017bf:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00017c6:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00017ce:	83 f8 0f             	cmp    eax,0xf
c00017d1:	76 07                	jbe    c00017da <iALLOc+0x7c>
c00017d3:	83 e0 f8             	and    eax,0xfffffff8
c00017d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00017da:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00017df:	75 09                	jne    c00017ea <iALLOc+0x8c>
c00017e1:	89 d0                	mov    eax,edx
c00017e3:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00017e6:	31 f6                	xor    esi,esi
c00017e8:	eb 3b                	jmp    c0001825 <iALLOc+0xc7>
c00017ea:	8b 02                	mov    eax,DWORD PTR [edx]
c00017ec:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00017f4:	83 c0 0b             	add    eax,0xb
c00017f7:	83 f8 0f             	cmp    eax,0xf
c00017fa:	76 07                	jbe    c0001803 <iALLOc+0xa5>
c00017fc:	83 e0 f8             	and    eax,0xfffffff8
c00017ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001803:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001807:	0f af f5             	imul   esi,ebp
c000180a:	eb 25                	jmp    c0001831 <iALLOc+0xd3>
c000180c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000180e:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001811:	bb 10 00 00 00       	mov    ebx,0x10
c0001816:	83 f9 0f             	cmp    ecx,0xf
c0001819:	76 05                	jbe    c0001820 <iALLOc+0xc2>
c000181b:	83 e1 f8             	and    ecx,0xfffffff8
c000181e:	89 cb                	mov    ebx,ecx
c0001820:	01 de                	add    esi,ebx
c0001822:	83 c0 04             	add    eax,0x4
c0001825:	39 c7                	cmp    edi,eax
c0001827:	75 e3                	jne    c000180c <iALLOc+0xae>
c0001829:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001831:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001835:	8b 1d 34 7c 03 c0    	mov    ebx,DWORD PTR ds:0xc0037c34
c000183b:	83 ec 0c             	sub    esp,0xc
c000183e:	c7 05 34 7c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037c34,0x0
c0001848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000184c:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001850:	50                   	push   eax
c0001851:	e8 7a fb ff ff       	call   c00013d0 <dlmalloc>
c0001856:	83 c4 10             	add    esp,0x10
c0001859:	89 1d 34 7c 03 c0    	mov    DWORD PTR ds:0xc0037c34,ebx
c000185f:	85 c0                	test   eax,eax
c0001861:	0f 84 92 00 00 00    	je     c00018f9 <iALLOc+0x19b>
c0001867:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000186a:	8d 78 f8             	lea    edi,[eax-0x8]
c000186d:	83 e3 fc             	and    ebx,0xfffffffc
c0001870:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001874:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001879:	74 1e                	je     c0001899 <iALLOc+0x13b>
c000187b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000187f:	89 d9                	mov    ecx,ebx
c0001881:	52                   	push   edx
c0001882:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001886:	83 e9 04             	sub    ecx,0x4
c0001889:	51                   	push   ecx
c000188a:	6a 00                	push   0x0
c000188c:	50                   	push   eax
c000188d:	e8 5e ec ff ff       	call   c00004f0 <memset>
c0001892:	83 c4 10             	add    esp,0x10
c0001895:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001899:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000189e:	75 14                	jne    c00018b4 <iALLOc+0x156>
c00018a0:	8d 04 37             	lea    eax,[edi+esi*1]
c00018a3:	29 f3                	sub    ebx,esi
c00018a5:	8d 48 08             	lea    ecx,[eax+0x8]
c00018a8:	83 cb 01             	or     ebx,0x1
c00018ab:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00018af:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00018b2:	89 f3                	mov    ebx,esi
c00018b4:	31 c0                	xor    eax,eax
c00018b6:	4d                   	dec    ebp
c00018b7:	8d 4f 08             	lea    ecx,[edi+0x8]
c00018ba:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018be:	39 c5                	cmp    ebp,eax
c00018c0:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00018c3:	74 2c                	je     c00018f1 <iALLOc+0x193>
c00018c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00018c9:	85 c9                	test   ecx,ecx
c00018cb:	75 15                	jne    c00018e2 <iALLOc+0x184>
c00018cd:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00018d0:	8d 71 0b             	lea    esi,[ecx+0xb]
c00018d3:	b9 10 00 00 00       	mov    ecx,0x10
c00018d8:	83 fe 0f             	cmp    esi,0xf
c00018db:	76 05                	jbe    c00018e2 <iALLOc+0x184>
c00018dd:	83 e6 f8             	and    esi,0xfffffff8
c00018e0:	89 f1                	mov    ecx,esi
c00018e2:	89 ce                	mov    esi,ecx
c00018e4:	29 cb                	sub    ebx,ecx
c00018e6:	83 ce 01             	or     esi,0x1
c00018e9:	40                   	inc    eax
c00018ea:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00018ed:	01 cf                	add    edi,ecx
c00018ef:	eb c6                	jmp    c00018b7 <iALLOc+0x159>
c00018f1:	83 cb 01             	or     ebx,0x1
c00018f4:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00018f7:	eb 08                	jmp    c0001901 <iALLOc+0x1a3>
c00018f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001905:	83 c4 2c             	add    esp,0x2c
c0001908:	5b                   	pop    ebx
c0001909:	5e                   	pop    esi
c000190a:	5f                   	pop    edi
c000190b:	5d                   	pop    ebp
c000190c:	c3                   	ret    

c000190d <dlrealloc>:
c000190d:	55                   	push   ebp
c000190e:	57                   	push   edi
c000190f:	56                   	push   esi
c0001910:	53                   	push   ebx
c0001911:	83 ec 1c             	sub    esp,0x1c
c0001914:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001918:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000191c:	85 db                	test   ebx,ebx
c000191e:	75 10                	jne    c0001930 <dlrealloc+0x23>
c0001920:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001924:	83 c4 1c             	add    esp,0x1c
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	e9 a0 fa ff ff       	jmp    c00013d0 <dlmalloc>
c0001930:	83 f8 df             	cmp    eax,0xffffffdf
c0001933:	0f 87 a5 01 00 00    	ja     c0001ade <dlrealloc+0x1d1>
c0001939:	83 c0 0b             	add    eax,0xb
c000193c:	bd 10 00 00 00       	mov    ebp,0x10
c0001941:	83 f8 0f             	cmp    eax,0xf
c0001944:	76 05                	jbe    c000194b <dlrealloc+0x3e>
c0001946:	83 e0 f8             	and    eax,0xfffffff8
c0001949:	89 c5                	mov    ebp,eax
c000194b:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000194e:	89 c6                	mov    esi,eax
c0001950:	83 e6 fc             	and    esi,0xfffffffc
c0001953:	a8 02                	test   al,0x2
c0001955:	0f 85 4e 01 00 00    	jne    c0001aa9 <dlrealloc+0x19c>
c000195b:	8d 7b f8             	lea    edi,[ebx-0x8]
c000195e:	39 f5                	cmp    ebp,esi
c0001960:	0f 86 04 01 00 00    	jbe    c0001a6a <dlrealloc+0x15d>
c0001966:	8d 14 37             	lea    edx,[edi+esi*1]
c0001969:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000196c:	39 15 0c 79 03 c0    	cmp    DWORD PTR ds:0xc003790c,edx
c0001972:	75 33                	jne    c00019a7 <dlrealloc+0x9a>
c0001974:	83 e1 fc             	and    ecx,0xfffffffc
c0001977:	01 f1                	add    ecx,esi
c0001979:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000197d:	8d 4d 10             	lea    ecx,[ebp+0x10]
c0001980:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001984:	77 49                	ja     c00019cf <dlrealloc+0xc2>
c0001986:	01 ef                	add    edi,ebp
c0001988:	83 e0 01             	and    eax,0x1
c000198b:	09 e8                	or     eax,ebp
c000198d:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001990:	89 3d 0c 79 03 c0    	mov    DWORD PTR ds:0xc003790c,edi
c0001996:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000199a:	29 e8                	sub    eax,ebp
c000199c:	83 c8 01             	or     eax,0x1
c000199f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00019a2:	e9 39 01 00 00       	jmp    c0001ae0 <dlrealloc+0x1d3>
c00019a7:	89 c8                	mov    eax,ecx
c00019a9:	83 e0 fe             	and    eax,0xfffffffe
c00019ac:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00019b1:	75 1c                	jne    c00019cf <dlrealloc+0xc2>
c00019b3:	83 e1 fc             	and    ecx,0xfffffffc
c00019b6:	01 f1                	add    ecx,esi
c00019b8:	39 cd                	cmp    ebp,ecx
c00019ba:	77 13                	ja     c00019cf <dlrealloc+0xc2>
c00019bc:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00019bf:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00019c2:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00019c5:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00019c8:	89 ce                	mov    esi,ecx
c00019ca:	e9 9b 00 00 00       	jmp    c0001a6a <dlrealloc+0x15d>
c00019cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00019d3:	8d 45 f9             	lea    eax,[ebp-0x7]
c00019d6:	83 ec 0c             	sub    esp,0xc
c00019d9:	50                   	push   eax
c00019da:	e8 f1 f9 ff ff       	call   c00013d0 <dlmalloc>
c00019df:	83 c4 10             	add    esp,0x10
c00019e2:	85 c0                	test   eax,eax
c00019e4:	0f 84 f4 00 00 00    	je     c0001ade <dlrealloc+0x1d1>
c00019ea:	8d 48 f8             	lea    ecx,[eax-0x8]
c00019ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f1:	39 ca                	cmp    edx,ecx
c00019f3:	75 0a                	jne    c00019ff <dlrealloc+0xf2>
c00019f5:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00019f8:	83 e0 fc             	and    eax,0xfffffffc
c00019fb:	01 c6                	add    esi,eax
c00019fd:	eb 6b                	jmp    c0001a6a <dlrealloc+0x15d>
c00019ff:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001a02:	83 f9 27             	cmp    ecx,0x27
c0001a05:	76 08                	jbe    c0001a0f <dlrealloc+0x102>
c0001a07:	89 de                	mov    esi,ebx
c0001a09:	89 c7                	mov    edi,eax
c0001a0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a0d:	eb 43                	jmp    c0001a52 <dlrealloc+0x145>
c0001a0f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001a11:	83 f9 13             	cmp    ecx,0x13
c0001a14:	89 10                	mov    DWORD PTR [eax],edx
c0001a16:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001a19:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001a1c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001a1f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001a22:	76 2e                	jbe    c0001a52 <dlrealloc+0x145>
c0001a24:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001a27:	83 f9 1b             	cmp    ecx,0x1b
c0001a2a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001a2d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001a30:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001a33:	76 1d                	jbe    c0001a52 <dlrealloc+0x145>
c0001a35:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001a38:	83 f9 23             	cmp    ecx,0x23
c0001a3b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001a3e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001a41:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001a44:	76 0c                	jbe    c0001a52 <dlrealloc+0x145>
c0001a46:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001a49:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001a4c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001a4f:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001a52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001a56:	83 ec 0c             	sub    esp,0xc
c0001a59:	53                   	push   ebx
c0001a5a:	e8 aa f4 ff ff       	call   c0000f09 <dlfree>
c0001a5f:	83 c4 10             	add    esp,0x10
c0001a62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001a66:	89 c3                	mov    ebx,eax
c0001a68:	eb 76                	jmp    c0001ae0 <dlrealloc+0x1d3>
c0001a6a:	89 f2                	mov    edx,esi
c0001a6c:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001a6f:	29 ea                	sub    edx,ebp
c0001a71:	83 e1 01             	and    ecx,0x1
c0001a74:	8d 04 37             	lea    eax,[edi+esi*1]
c0001a77:	83 fa 0f             	cmp    edx,0xf
c0001a7a:	77 0b                	ja     c0001a87 <dlrealloc+0x17a>
c0001a7c:	09 f1                	or     ecx,esi
c0001a7e:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c0001a81:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001a85:	eb 59                	jmp    c0001ae0 <dlrealloc+0x1d3>
c0001a87:	01 ef                	add    edi,ebp
c0001a89:	83 ec 0c             	sub    esp,0xc
c0001a8c:	09 cd                	or     ebp,ecx
c0001a8e:	83 ca 01             	or     edx,0x1
c0001a91:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c0001a94:	83 c7 08             	add    edi,0x8
c0001a97:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001a9a:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001a9e:	57                   	push   edi
c0001a9f:	e8 65 f4 ff ff       	call   c0000f09 <dlfree>
c0001aa4:	83 c4 10             	add    esp,0x10
c0001aa7:	eb 37                	jmp    c0001ae0 <dlrealloc+0x1d3>
c0001aa9:	8d 45 04             	lea    eax,[ebp+0x4]
c0001aac:	39 f0                	cmp    eax,esi
c0001aae:	76 30                	jbe    c0001ae0 <dlrealloc+0x1d3>
c0001ab0:	83 ec 0c             	sub    esp,0xc
c0001ab3:	83 ed 07             	sub    ebp,0x7
c0001ab6:	55                   	push   ebp
c0001ab7:	e8 14 f9 ff ff       	call   c00013d0 <dlmalloc>
c0001abc:	83 c4 10             	add    esp,0x10
c0001abf:	89 c5                	mov    ebp,eax
c0001ac1:	85 c0                	test   eax,eax
c0001ac3:	74 19                	je     c0001ade <dlrealloc+0x1d1>
c0001ac5:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001ac8:	89 c7                	mov    edi,eax
c0001aca:	89 de                	mov    esi,ebx
c0001acc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ace:	83 ec 0c             	sub    esp,0xc
c0001ad1:	53                   	push   ebx
c0001ad2:	89 eb                	mov    ebx,ebp
c0001ad4:	e8 30 f4 ff ff       	call   c0000f09 <dlfree>
c0001ad9:	83 c4 10             	add    esp,0x10
c0001adc:	eb 02                	jmp    c0001ae0 <dlrealloc+0x1d3>
c0001ade:	31 db                	xor    ebx,ebx
c0001ae0:	83 c4 1c             	add    esp,0x1c
c0001ae3:	89 d8                	mov    eax,ebx
c0001ae5:	5b                   	pop    ebx
c0001ae6:	5e                   	pop    esi
c0001ae7:	5f                   	pop    edi
c0001ae8:	5d                   	pop    ebp
c0001ae9:	c3                   	ret    

c0001aea <dlmemalign>:
c0001aea:	55                   	push   ebp
c0001aeb:	57                   	push   edi
c0001aec:	56                   	push   esi
c0001aed:	53                   	push   ebx
c0001aee:	83 ec 0c             	sub    esp,0xc
c0001af1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001af5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001af9:	83 fa 08             	cmp    edx,0x8
c0001afc:	77 10                	ja     c0001b0e <dlmemalign+0x24>
c0001afe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001b02:	83 c4 0c             	add    esp,0xc
c0001b05:	5b                   	pop    ebx
c0001b06:	5e                   	pop    esi
c0001b07:	5f                   	pop    edi
c0001b08:	5d                   	pop    ebp
c0001b09:	e9 c2 f8 ff ff       	jmp    c00013d0 <dlmalloc>
c0001b0e:	bf 10 00 00 00       	mov    edi,0x10
c0001b13:	83 fa 0f             	cmp    edx,0xf
c0001b16:	76 13                	jbe    c0001b2b <dlmemalign+0x41>
c0001b18:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001b1b:	85 d1                	test   ecx,edx
c0001b1d:	75 04                	jne    c0001b23 <dlmemalign+0x39>
c0001b1f:	89 d7                	mov    edi,edx
c0001b21:	eb 08                	jmp    c0001b2b <dlmemalign+0x41>
c0001b23:	39 d7                	cmp    edi,edx
c0001b25:	73 04                	jae    c0001b2b <dlmemalign+0x41>
c0001b27:	01 ff                	add    edi,edi
c0001b29:	eb f8                	jmp    c0001b23 <dlmemalign+0x39>
c0001b2b:	83 f8 df             	cmp    eax,0xffffffdf
c0001b2e:	76 07                	jbe    c0001b37 <dlmemalign+0x4d>
c0001b30:	31 c0                	xor    eax,eax
c0001b32:	e9 ce 00 00 00       	jmp    c0001c05 <dlmemalign+0x11b>
c0001b37:	83 c0 0b             	add    eax,0xb
c0001b3a:	bd 10 00 00 00       	mov    ebp,0x10
c0001b3f:	83 f8 0f             	cmp    eax,0xf
c0001b42:	76 05                	jbe    c0001b49 <dlmemalign+0x5f>
c0001b44:	83 e0 f8             	and    eax,0xfffffff8
c0001b47:	89 c5                	mov    ebp,eax
c0001b49:	83 ec 0c             	sub    esp,0xc
c0001b4c:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001b50:	50                   	push   eax
c0001b51:	e8 7a f8 ff ff       	call   c00013d0 <dlmalloc>
c0001b56:	83 c4 10             	add    esp,0x10
c0001b59:	89 c1                	mov    ecx,eax
c0001b5b:	85 c0                	test   eax,eax
c0001b5d:	74 d1                	je     c0001b30 <dlmemalign+0x46>
c0001b5f:	31 d2                	xor    edx,edx
c0001b61:	8d 70 f8             	lea    esi,[eax-0x8]
c0001b64:	f7 f7                	div    edi
c0001b66:	85 d2                	test   edx,edx
c0001b68:	74 62                	je     c0001bcc <dlmemalign+0xe2>
c0001b6a:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001b6e:	89 f8                	mov    eax,edi
c0001b70:	f7 d8                	neg    eax
c0001b72:	21 c3                	and    ebx,eax
c0001b74:	83 eb 08             	sub    ebx,0x8
c0001b77:	89 d8                	mov    eax,ebx
c0001b79:	29 f0                	sub    eax,esi
c0001b7b:	83 f8 0f             	cmp    eax,0xf
c0001b7e:	77 02                	ja     c0001b82 <dlmemalign+0x98>
c0001b80:	01 fb                	add    ebx,edi
c0001b82:	89 d8                	mov    eax,ebx
c0001b84:	29 f0                	sub    eax,esi
c0001b86:	89 c6                	mov    esi,eax
c0001b88:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001b8b:	89 c2                	mov    edx,eax
c0001b8d:	83 e2 fc             	and    edx,0xfffffffc
c0001b90:	29 f2                	sub    edx,esi
c0001b92:	a8 02                	test   al,0x2
c0001b94:	74 10                	je     c0001ba6 <dlmemalign+0xbc>
c0001b96:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001b99:	83 ca 02             	or     edx,0x2
c0001b9c:	8d 43 08             	lea    eax,[ebx+0x8]
c0001b9f:	89 33                	mov    DWORD PTR [ebx],esi
c0001ba1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001ba4:	eb 5f                	jmp    c0001c05 <dlmemalign+0x11b>
c0001ba6:	83 ec 0c             	sub    esp,0xc
c0001ba9:	89 d0                	mov    eax,edx
c0001bab:	83 c8 01             	or     eax,0x1
c0001bae:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001bb1:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001bb6:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001bb9:	83 e0 01             	and    eax,0x1
c0001bbc:	09 f0                	or     eax,esi
c0001bbe:	89 de                	mov    esi,ebx
c0001bc0:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001bc3:	51                   	push   ecx
c0001bc4:	e8 40 f3 ff ff       	call   c0000f09 <dlfree>
c0001bc9:	83 c4 10             	add    esp,0x10
c0001bcc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001bcf:	a8 02                	test   al,0x2
c0001bd1:	75 2f                	jne    c0001c02 <dlmemalign+0x118>
c0001bd3:	83 e0 fc             	and    eax,0xfffffffc
c0001bd6:	8d 55 10             	lea    edx,[ebp+0x10]
c0001bd9:	39 c2                	cmp    edx,eax
c0001bdb:	73 25                	jae    c0001c02 <dlmemalign+0x118>
c0001bdd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001be0:	83 ec 0c             	sub    esp,0xc
c0001be3:	29 e8                	sub    eax,ebp
c0001be5:	83 c2 08             	add    edx,0x8
c0001be8:	83 c8 01             	or     eax,0x1
c0001beb:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001bee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001bf1:	83 e0 01             	and    eax,0x1
c0001bf4:	09 c5                	or     ebp,eax
c0001bf6:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001bf9:	52                   	push   edx
c0001bfa:	e8 0a f3 ff ff       	call   c0000f09 <dlfree>
c0001bff:	83 c4 10             	add    esp,0x10
c0001c02:	8d 46 08             	lea    eax,[esi+0x8]
c0001c05:	83 c4 0c             	add    esp,0xc
c0001c08:	5b                   	pop    ebx
c0001c09:	5e                   	pop    esi
c0001c0a:	5f                   	pop    edi
c0001c0b:	5d                   	pop    ebp
c0001c0c:	c3                   	ret    

c0001c0d <dlcalloc>:
c0001c0d:	53                   	push   ebx
c0001c0e:	83 ec 14             	sub    esp,0x14
c0001c11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001c15:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001c1a:	50                   	push   eax
c0001c1b:	e8 b0 f7 ff ff       	call   c00013d0 <dlmalloc>
c0001c20:	83 c4 10             	add    esp,0x10
c0001c23:	89 c3                	mov    ebx,eax
c0001c25:	85 c0                	test   eax,eax
c0001c27:	74 6e                	je     c0001c97 <dlcalloc+0x8a>
c0001c29:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001c2c:	a8 02                	test   al,0x2
c0001c2e:	75 67                	jne    c0001c97 <dlcalloc+0x8a>
c0001c30:	83 e0 fc             	and    eax,0xfffffffc
c0001c33:	83 e8 04             	sub    eax,0x4
c0001c36:	83 f8 27             	cmp    eax,0x27
c0001c39:	76 0f                	jbe    c0001c4a <dlcalloc+0x3d>
c0001c3b:	52                   	push   edx
c0001c3c:	50                   	push   eax
c0001c3d:	6a 00                	push   0x0
c0001c3f:	53                   	push   ebx
c0001c40:	e8 ab e8 ff ff       	call   c00004f0 <memset>
c0001c45:	83 c4 10             	add    esp,0x10
c0001c48:	eb 4d                	jmp    c0001c97 <dlcalloc+0x8a>
c0001c4a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001c50:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001c57:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001c5e:	83 f8 13             	cmp    eax,0x13
c0001c61:	76 34                	jbe    c0001c97 <dlcalloc+0x8a>
c0001c63:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001c6a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001c71:	83 f8 1b             	cmp    eax,0x1b
c0001c74:	76 21                	jbe    c0001c97 <dlcalloc+0x8a>
c0001c76:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001c7d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001c84:	83 f8 23             	cmp    eax,0x23
c0001c87:	76 0e                	jbe    c0001c97 <dlcalloc+0x8a>
c0001c89:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001c90:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001c97:	89 d8                	mov    eax,ebx
c0001c99:	83 c4 08             	add    esp,0x8
c0001c9c:	5b                   	pop    ebx
c0001c9d:	c3                   	ret    

c0001c9e <dlcfree>:
c0001c9e:	e9 66 f2 ff ff       	jmp    c0000f09 <dlfree>

c0001ca3 <dlindependent_calloc>:
c0001ca3:	83 ec 28             	sub    esp,0x28
c0001ca6:	b9 03 00 00 00       	mov    ecx,0x3
c0001cab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001caf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001cb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001cb7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001cbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001cbf:	e8 9a fa ff ff       	call   c000175e <iALLOc>
c0001cc4:	83 c4 2c             	add    esp,0x2c
c0001cc7:	c3                   	ret    

c0001cc8 <dlindependent_comalloc>:
c0001cc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001cd0:	31 c9                	xor    ecx,ecx
c0001cd2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001cd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001cda:	e9 7f fa ff ff       	jmp    c000175e <iALLOc>

c0001cdf <dlvalloc>:
c0001cdf:	83 ec 0c             	sub    esp,0xc
c0001ce2:	83 3d e0 78 03 c0 00 	cmp    DWORD PTR ds:0xc00378e0,0x0
c0001ce9:	75 0a                	jne    c0001cf5 <dlvalloc+0x16>
c0001ceb:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c0001cf0:	e8 2d f1 ff ff       	call   c0000e22 <malloc_consolidate>
c0001cf5:	50                   	push   eax
c0001cf6:	50                   	push   eax
c0001cf7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001cfb:	ff 35 3c 7c 03 c0    	push   DWORD PTR ds:0xc0037c3c
c0001d01:	e8 e4 fd ff ff       	call   c0001aea <dlmemalign>
c0001d06:	83 c4 1c             	add    esp,0x1c
c0001d09:	c3                   	ret    

c0001d0a <dlpvalloc>:
c0001d0a:	83 ec 0c             	sub    esp,0xc
c0001d0d:	83 3d e0 78 03 c0 00 	cmp    DWORD PTR ds:0xc00378e0,0x0
c0001d14:	75 0a                	jne    c0001d20 <dlpvalloc+0x16>
c0001d16:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c0001d1b:	e8 02 f1 ff ff       	call   c0000e22 <malloc_consolidate>
c0001d20:	a1 3c 7c 03 c0       	mov    eax,ds:0xc0037c3c
c0001d25:	89 c1                	mov    ecx,eax
c0001d27:	52                   	push   edx
c0001d28:	f7 d9                	neg    ecx
c0001d2a:	52                   	push   edx
c0001d2b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001d2f:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001d33:	21 ca                	and    edx,ecx
c0001d35:	52                   	push   edx
c0001d36:	50                   	push   eax
c0001d37:	e8 ae fd ff ff       	call   c0001aea <dlmemalign>
c0001d3c:	83 c4 1c             	add    esp,0x1c
c0001d3f:	c3                   	ret    

c0001d40 <dlmalloc_trim>:
c0001d40:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c0001d45:	e8 d8 f0 ff ff       	call   c0000e22 <malloc_consolidate>
c0001d4a:	31 c0                	xor    eax,eax
c0001d4c:	c3                   	ret    

c0001d4d <dlmalloc_usable_size>:
c0001d4d:	53                   	push   ebx
c0001d4e:	31 c0                	xor    eax,eax
c0001d50:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001d54:	85 c9                	test   ecx,ecx
c0001d56:	74 24                	je     c0001d7c <dlmalloc_usable_size+0x2f>
c0001d58:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001d5b:	f6 c2 02             	test   dl,0x2
c0001d5e:	74 08                	je     c0001d68 <dlmalloc_usable_size+0x1b>
c0001d60:	83 e2 fc             	and    edx,0xfffffffc
c0001d63:	8d 42 f8             	lea    eax,[edx-0x8]
c0001d66:	eb 14                	jmp    c0001d7c <dlmalloc_usable_size+0x2f>
c0001d68:	89 d3                	mov    ebx,edx
c0001d6a:	31 c0                	xor    eax,eax
c0001d6c:	83 e3 fe             	and    ebx,0xfffffffe
c0001d6f:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001d74:	74 06                	je     c0001d7c <dlmalloc_usable_size+0x2f>
c0001d76:	83 e2 fc             	and    edx,0xfffffffc
c0001d79:	8d 42 fc             	lea    eax,[edx-0x4]
c0001d7c:	5b                   	pop    ebx
c0001d7d:	c3                   	ret    

c0001d7e <dlmallinfo>:
c0001d7e:	55                   	push   ebp
c0001d7f:	57                   	push   edi
c0001d80:	56                   	push   esi
c0001d81:	53                   	push   ebx
c0001d82:	83 ec 08             	sub    esp,0x8
c0001d85:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001d89:	83 3d 0c 79 03 c0 00 	cmp    DWORD PTR ds:0xc003790c,0x0
c0001d90:	75 0a                	jne    c0001d9c <dlmallinfo+0x1e>
c0001d92:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c0001d97:	e8 86 f0 ff ff       	call   c0000e22 <malloc_consolidate>
c0001d9c:	a1 0c 79 03 c0       	mov    eax,ds:0xc003790c
c0001da1:	31 ed                	xor    ebp,ebp
c0001da3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001da6:	31 c9                	xor    ecx,ecx
c0001da8:	83 e0 fc             	and    eax,0xfffffffc
c0001dab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001daf:	31 c0                	xor    eax,eax
c0001db1:	8b 14 85 e4 78 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc871c]
c0001db8:	85 d2                	test   edx,edx
c0001dba:	74 0e                	je     c0001dca <dlmallinfo+0x4c>
c0001dbc:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001dbf:	45                   	inc    ebp
c0001dc0:	83 e6 fc             	and    esi,0xfffffffc
c0001dc3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001dc6:	01 f1                	add    ecx,esi
c0001dc8:	eb ee                	jmp    c0001db8 <dlmallinfo+0x3a>
c0001dca:	40                   	inc    eax
c0001dcb:	83 f8 0a             	cmp    eax,0xa
c0001dce:	75 e1                	jne    c0001db1 <dlmallinfo+0x33>
c0001dd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001dd4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ddb:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001dde:	b8 14 79 03 c0       	mov    eax,0xc0037914
c0001de3:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001de6:	39 f0                	cmp    eax,esi
c0001de8:	74 10                	je     c0001dfa <dlmallinfo+0x7c>
c0001dea:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ded:	ff 04 24             	inc    DWORD PTR [esp]
c0001df0:	83 e7 fc             	and    edi,0xfffffffc
c0001df3:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001df6:	01 fa                	add    edx,edi
c0001df8:	eb ec                	jmp    c0001de6 <dlmallinfo+0x68>
c0001dfa:	83 c0 08             	add    eax,0x8
c0001dfd:	3d 0c 7c 03 c0       	cmp    eax,0xc0037c0c
c0001e02:	75 df                	jne    c0001de3 <dlmallinfo+0x65>
c0001e04:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001e07:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001e0a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001e0d:	a1 48 7c 03 c0       	mov    eax,ds:0xc0037c48
c0001e12:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001e15:	89 03                	mov    DWORD PTR [ebx],eax
c0001e17:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001e1a:	8b 35 30 7c 03 c0    	mov    esi,DWORD PTR ds:0xc0037c30
c0001e20:	29 d0                	sub    eax,edx
c0001e22:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001e25:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001e28:	8b 35 44 7c 03 c0    	mov    esi,DWORD PTR ds:0xc0037c44
c0001e2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001e32:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001e35:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001e38:	8b 35 54 7c 03 c0    	mov    esi,DWORD PTR ds:0xc0037c54
c0001e3e:	89 d8                	mov    eax,ebx
c0001e40:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001e43:	83 c4 08             	add    esp,0x8
c0001e46:	5b                   	pop    ebx
c0001e47:	5e                   	pop    esi
c0001e48:	5f                   	pop    edi
c0001e49:	5d                   	pop    ebp
c0001e4a:	c2 04 00             	ret    0x4

c0001e4d <dlmalloc_stats>:
c0001e4d:	83 ec 30             	sub    esp,0x30
c0001e50:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001e54:	50                   	push   eax
c0001e55:	e8 24 ff ff ff       	call   c0001d7e <dlmallinfo>
c0001e5a:	83 c4 30             	add    esp,0x30
c0001e5d:	c3                   	ret    

c0001e5e <dlmallopt>:
c0001e5e:	56                   	push   esi
c0001e5f:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c0001e64:	53                   	push   ebx
c0001e65:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001e69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001e6d:	e8 b0 ef ff ff       	call   c0000e22 <malloc_consolidate>
c0001e72:	8d 46 04             	lea    eax,[esi+0x4]
c0001e75:	83 f8 05             	cmp    eax,0x5
c0001e78:	77 5d                	ja     c0001ed7 <dlmallopt+0x79>
c0001e7a:	ff 24 85 80 fb 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd0480]
c0001e81:	83 fb 50             	cmp    ebx,0x50
c0001e84:	77 51                	ja     c0001ed7 <dlmallopt+0x79>
c0001e86:	ba 08 00 00 00       	mov    edx,0x8
c0001e8b:	85 db                	test   ebx,ebx
c0001e8d:	74 12                	je     c0001ea1 <dlmallopt+0x43>
c0001e8f:	83 c3 0b             	add    ebx,0xb
c0001e92:	ba 10 00 00 00       	mov    edx,0x10
c0001e97:	83 fb 0f             	cmp    ebx,0xf
c0001e9a:	76 05                	jbe    c0001ea1 <dlmallopt+0x43>
c0001e9c:	89 da                	mov    edx,ebx
c0001e9e:	83 e2 f8             	and    edx,0xfffffff8
c0001ea1:	a1 e0 78 03 c0       	mov    eax,ds:0xc00378e0
c0001ea6:	83 e0 03             	and    eax,0x3
c0001ea9:	09 d0                	or     eax,edx
c0001eab:	a3 e0 78 03 c0       	mov    ds:0xc00378e0,eax
c0001eb0:	eb 27                	jmp    c0001ed9 <dlmallopt+0x7b>
c0001eb2:	89 1d 24 7c 03 c0    	mov    DWORD PTR ds:0xc0037c24,ebx
c0001eb8:	eb 16                	jmp    c0001ed0 <dlmallopt+0x72>
c0001eba:	89 1d 28 7c 03 c0    	mov    DWORD PTR ds:0xc0037c28,ebx
c0001ec0:	eb 0e                	jmp    c0001ed0 <dlmallopt+0x72>
c0001ec2:	89 1d 2c 7c 03 c0    	mov    DWORD PTR ds:0xc0037c2c,ebx
c0001ec8:	eb 06                	jmp    c0001ed0 <dlmallopt+0x72>
c0001eca:	89 1d 34 7c 03 c0    	mov    DWORD PTR ds:0xc0037c34,ebx
c0001ed0:	be 01 00 00 00       	mov    esi,0x1
c0001ed5:	eb 02                	jmp    c0001ed9 <dlmallopt+0x7b>
c0001ed7:	31 f6                	xor    esi,esi
c0001ed9:	89 f0                	mov    eax,esi
c0001edb:	5b                   	pop    ebx
c0001edc:	5e                   	pop    esi
c0001edd:	c3                   	ret    
c0001ede:	66 90                	xchg   ax,ax

c0001ee0 <isblank>:
c0001ee0:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ee5:	74 09                	je     c0001ef0 <isblank+0x10>
c0001ee7:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001eec:	75 0a                	jne    c0001ef8 <isblank+0x18>
c0001eee:	66 90                	xchg   ax,ax
c0001ef0:	b8 01 00 00 00       	mov    eax,0x1
c0001ef5:	c3                   	ret    
c0001ef6:	66 90                	xchg   ax,ax
c0001ef8:	b8 00 00 00 00       	mov    eax,0x0
c0001efd:	c3                   	ret    
c0001efe:	66 90                	xchg   ax,ax

c0001f00 <iscntrl>:
c0001f00:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001f05:	7e 09                	jle    c0001f10 <iscntrl+0x10>
c0001f07:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001f0c:	75 0a                	jne    c0001f18 <iscntrl+0x18>
c0001f0e:	66 90                	xchg   ax,ax
c0001f10:	b8 01 00 00 00       	mov    eax,0x1
c0001f15:	c3                   	ret    
c0001f16:	66 90                	xchg   ax,ax
c0001f18:	b8 00 00 00 00       	mov    eax,0x0
c0001f1d:	c3                   	ret    
c0001f1e:	66 90                	xchg   ax,ax

c0001f20 <isdigit>:
c0001f20:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001f25:	7e 0d                	jle    c0001f34 <isdigit+0x14>
c0001f27:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001f2c:	7f 06                	jg     c0001f34 <isdigit+0x14>
c0001f2e:	b8 01 00 00 00       	mov    eax,0x1
c0001f33:	c3                   	ret    
c0001f34:	b8 00 00 00 00       	mov    eax,0x0
c0001f39:	c3                   	ret    
c0001f3a:	66 90                	xchg   ax,ax

c0001f3c <islower>:
c0001f3c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f41:	7e 0d                	jle    c0001f50 <islower+0x14>
c0001f43:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001f48:	7f 06                	jg     c0001f50 <islower+0x14>
c0001f4a:	b8 01 00 00 00       	mov    eax,0x1
c0001f4f:	c3                   	ret    
c0001f50:	b8 00 00 00 00       	mov    eax,0x0
c0001f55:	c3                   	ret    
c0001f56:	66 90                	xchg   ax,ax

c0001f58 <isspace>:
c0001f58:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001f5d:	7c 19                	jl     c0001f78 <isspace+0x20>
c0001f5f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001f64:	7e 0a                	jle    c0001f70 <isspace+0x18>
c0001f66:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001f6b:	75 0b                	jne    c0001f78 <isspace+0x20>
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0001f70:	b8 01 00 00 00       	mov    eax,0x1
c0001f75:	c3                   	ret    
c0001f76:	66 90                	xchg   ax,ax
c0001f78:	b8 00 00 00 00       	mov    eax,0x0
c0001f7d:	c3                   	ret    
c0001f7e:	66 90                	xchg   ax,ax

c0001f80 <isupper>:
c0001f80:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f85:	7e 0d                	jle    c0001f94 <isupper+0x14>
c0001f87:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001f8c:	7f 06                	jg     c0001f94 <isupper+0x14>
c0001f8e:	b8 01 00 00 00       	mov    eax,0x1
c0001f93:	c3                   	ret    
c0001f94:	b8 00 00 00 00       	mov    eax,0x0
c0001f99:	c3                   	ret    
c0001f9a:	66 90                	xchg   ax,ax

c0001f9c <isalpha>:
c0001f9c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fa0:	e8 db ff ff ff       	call   c0001f80 <isupper>
c0001fa5:	83 c4 04             	add    esp,0x4
c0001fa8:	85 c0                	test   eax,eax
c0001faa:	75 10                	jne    c0001fbc <isalpha+0x20>
c0001fac:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fb0:	e8 87 ff ff ff       	call   c0001f3c <islower>
c0001fb5:	83 c4 04             	add    esp,0x4
c0001fb8:	85 c0                	test   eax,eax
c0001fba:	74 08                	je     c0001fc4 <isalpha+0x28>
c0001fbc:	b8 01 00 00 00       	mov    eax,0x1
c0001fc1:	c3                   	ret    
c0001fc2:	66 90                	xchg   ax,ax
c0001fc4:	b8 00 00 00 00       	mov    eax,0x0
c0001fc9:	c3                   	ret    
c0001fca:	66 90                	xchg   ax,ax

c0001fcc <isalnum>:
c0001fcc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fd0:	e8 c7 ff ff ff       	call   c0001f9c <isalpha>
c0001fd5:	83 c4 04             	add    esp,0x4
c0001fd8:	85 c0                	test   eax,eax
c0001fda:	75 10                	jne    c0001fec <isalnum+0x20>
c0001fdc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fe0:	e8 3b ff ff ff       	call   c0001f20 <isdigit>
c0001fe5:	83 c4 04             	add    esp,0x4
c0001fe8:	85 c0                	test   eax,eax
c0001fea:	74 08                	je     c0001ff4 <isalnum+0x28>
c0001fec:	b8 01 00 00 00       	mov    eax,0x1
c0001ff1:	c3                   	ret    
c0001ff2:	66 90                	xchg   ax,ax
c0001ff4:	b8 00 00 00 00       	mov    eax,0x0
c0001ff9:	c3                   	ret    
c0001ffa:	66 90                	xchg   ax,ax

c0001ffc <ispunct>:
c0001ffc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002000:	e8 c7 ff ff ff       	call   c0001fcc <isalnum>
c0002005:	83 c4 04             	add    esp,0x4
c0002008:	85 c0                	test   eax,eax
c000200a:	75 28                	jne    c0002034 <ispunct+0x38>
c000200c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002010:	e8 43 ff ff ff       	call   c0001f58 <isspace>
c0002015:	83 c4 04             	add    esp,0x4
c0002018:	85 c0                	test   eax,eax
c000201a:	75 18                	jne    c0002034 <ispunct+0x38>
c000201c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002020:	e8 db fe ff ff       	call   c0001f00 <iscntrl>
c0002025:	83 c4 04             	add    esp,0x4
c0002028:	85 c0                	test   eax,eax
c000202a:	75 08                	jne    c0002034 <ispunct+0x38>
c000202c:	b8 01 00 00 00       	mov    eax,0x1
c0002031:	c3                   	ret    
c0002032:	66 90                	xchg   ax,ax
c0002034:	b8 00 00 00 00       	mov    eax,0x0
c0002039:	c3                   	ret    
c000203a:	66 90                	xchg   ax,ax

c000203c <isgraph>:
c000203c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002040:	e8 87 ff ff ff       	call   c0001fcc <isalnum>
c0002045:	83 c4 04             	add    esp,0x4
c0002048:	85 c0                	test   eax,eax
c000204a:	75 10                	jne    c000205c <isgraph+0x20>
c000204c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002050:	e8 a7 ff ff ff       	call   c0001ffc <ispunct>
c0002055:	83 c4 04             	add    esp,0x4
c0002058:	85 c0                	test   eax,eax
c000205a:	74 08                	je     c0002064 <isgraph+0x28>
c000205c:	b8 01 00 00 00       	mov    eax,0x1
c0002061:	c3                   	ret    
c0002062:	66 90                	xchg   ax,ax
c0002064:	b8 00 00 00 00       	mov    eax,0x0
c0002069:	c3                   	ret    
c000206a:	66 90                	xchg   ax,ax

c000206c <isprint>:
c000206c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002070:	e8 c7 ff ff ff       	call   c000203c <isgraph>
c0002075:	83 c4 04             	add    esp,0x4
c0002078:	85 c0                	test   eax,eax
c000207a:	75 08                	jne    c0002084 <isprint+0x18>
c000207c:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0002081:	75 09                	jne    c000208c <isprint+0x20>
c0002083:	90                   	nop
c0002084:	b8 01 00 00 00       	mov    eax,0x1
c0002089:	c3                   	ret    
c000208a:	66 90                	xchg   ax,ax
c000208c:	b8 00 00 00 00       	mov    eax,0x0
c0002091:	c3                   	ret    
c0002092:	66 90                	xchg   ax,ax

c0002094 <isxdigit>:
c0002094:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002098:	e8 83 fe ff ff       	call   c0001f20 <isdigit>
c000209d:	83 c4 04             	add    esp,0x4
c00020a0:	85 c0                	test   eax,eax
c00020a2:	75 20                	jne    c00020c4 <isxdigit+0x30>
c00020a4:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c00020a9:	7e 09                	jle    c00020b4 <isxdigit+0x20>
c00020ab:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c00020b0:	7e 12                	jle    c00020c4 <isxdigit+0x30>
c00020b2:	66 90                	xchg   ax,ax
c00020b4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c00020b9:	7e 11                	jle    c00020cc <isxdigit+0x38>
c00020bb:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c00020c0:	7f 0a                	jg     c00020cc <isxdigit+0x38>
c00020c2:	66 90                	xchg   ax,ax
c00020c4:	b8 01 00 00 00       	mov    eax,0x1
c00020c9:	c3                   	ret    
c00020ca:	66 90                	xchg   ax,ax
c00020cc:	b8 00 00 00 00       	mov    eax,0x0
c00020d1:	c3                   	ret    

c00020d2 <disk_status>:
c00020d2:	31 c0                	xor    eax,eax
c00020d4:	c3                   	ret    

c00020d5 <disk_initialize>:
c00020d5:	31 c0                	xor    eax,eax
c00020d7:	c3                   	ret    

c00020d8 <disk_read>:
c00020d8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00020dd:	0f b6 04 85 20 13 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbece0]
c00020e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020e9:	e9 ae 6e 02 00       	jmp    c0028f9c <fatWrapperReadDisk>

c00020ee <disk_write>:
c00020ee:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00020f3:	0f b6 04 85 20 13 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbece0]
c00020fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020ff:	e9 d8 6e 02 00       	jmp    c0028fdc <fatWrapperWriteDisk>

c0002104 <disk_ioctl>:
c0002104:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002109:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000210d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0002112:	0f b6 04 85 20 13 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbece0]
c000211a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000211e:	e9 f9 6e 02 00       	jmp    c002901c <fatWrapperIoctl>

c0002123 <ld_word>:
c0002123:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002127:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000212a:	c1 e2 08             	shl    edx,0x8
c000212d:	09 d0                	or     eax,edx
c000212f:	c3                   	ret    

c0002130 <ld_dword>:
c0002130:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002134:	89 d1                	mov    ecx,edx
c0002136:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c000213a:	c1 e1 08             	shl    ecx,0x8
c000213d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002140:	09 ca                	or     edx,ecx
c0002142:	c1 e2 08             	shl    edx,0x8
c0002145:	09 d0                	or     eax,edx
c0002147:	c3                   	ret    

c0002148 <st_word>:
c0002148:	66 89 10             	mov    WORD PTR [eax],dx
c000214b:	c3                   	ret    

c000214c <st_dword>:
c000214c:	89 10                	mov    DWORD PTR [eax],edx
c000214e:	c3                   	ret    

c000214f <mem_cpy>:
c000214f:	85 c9                	test   ecx,ecx
c0002151:	74 10                	je     c0002163 <mem_cpy+0x14>
c0002153:	57                   	push   edi
c0002154:	01 c1                	add    ecx,eax
c0002156:	56                   	push   esi
c0002157:	89 c7                	mov    edi,eax
c0002159:	89 d6                	mov    esi,edx
c000215b:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000215c:	39 f9                	cmp    ecx,edi
c000215e:	75 fb                	jne    c000215b <mem_cpy+0xc>
c0002160:	5e                   	pop    esi
c0002161:	5f                   	pop    edi
c0002162:	c3                   	ret    
c0002163:	c3                   	ret    

c0002164 <mem_set>:
c0002164:	01 c1                	add    ecx,eax
c0002166:	40                   	inc    eax
c0002167:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c000216a:	39 c8                	cmp    eax,ecx
c000216c:	75 f8                	jne    c0002166 <mem_set+0x2>
c000216e:	c3                   	ret    

c000216f <mem_cmp>:
c000216f:	57                   	push   edi
c0002170:	56                   	push   esi
c0002171:	89 c6                	mov    esi,eax
c0002173:	53                   	push   ebx
c0002174:	46                   	inc    esi
c0002175:	42                   	inc    edx
c0002176:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000217a:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000217e:	29 fb                	sub    ebx,edi
c0002180:	89 cf                	mov    edi,ecx
c0002182:	29 f7                	sub    edi,esi
c0002184:	01 c7                	add    edi,eax
c0002186:	74 04                	je     c000218c <mem_cmp+0x1d>
c0002188:	85 db                	test   ebx,ebx
c000218a:	74 e8                	je     c0002174 <mem_cmp+0x5>
c000218c:	89 d8                	mov    eax,ebx
c000218e:	5b                   	pop    ebx
c000218f:	5e                   	pop    esi
c0002190:	5f                   	pop    edi
c0002191:	c3                   	ret    

c0002192 <chk_chr>:
c0002192:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002195:	85 c9                	test   ecx,ecx
c0002197:	74 07                	je     c00021a0 <chk_chr+0xe>
c0002199:	39 d1                	cmp    ecx,edx
c000219b:	74 03                	je     c00021a0 <chk_chr+0xe>
c000219d:	40                   	inc    eax
c000219e:	eb f2                	jmp    c0002192 <chk_chr>
c00021a0:	89 c8                	mov    eax,ecx
c00021a2:	c3                   	ret    

c00021a3 <dbc_1st>:
c00021a3:	31 c0                	xor    eax,eax
c00021a5:	c3                   	ret    

c00021a6 <dbc_2nd>:
c00021a6:	31 c0                	xor    eax,eax
c00021a8:	c3                   	ret    

c00021a9 <tchar2uni>:
c00021a9:	57                   	push   edi
c00021aa:	56                   	push   esi
c00021ab:	53                   	push   ebx
c00021ac:	8b 18                	mov    ebx,DWORD PTR [eax]
c00021ae:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00021b0:	8d 73 01             	lea    esi,[ebx+0x1]
c00021b3:	f6 c1 80             	test   cl,0x80
c00021b6:	75 0a                	jne    c00021c2 <tchar2uni+0x19>
c00021b8:	0f b6 d1             	movzx  edx,cl
c00021bb:	89 f3                	mov    ebx,esi
c00021bd:	e9 b2 00 00 00       	jmp    c0002274 <tchar2uni+0xcb>
c00021c2:	89 ca                	mov    edx,ecx
c00021c4:	81 e2 e0 00 00 00    	and    edx,0xe0
c00021ca:	81 fa c0 00 00 00    	cmp    edx,0xc0
c00021d0:	89 ca                	mov    edx,ecx
c00021d2:	75 0a                	jne    c00021de <tchar2uni+0x35>
c00021d4:	83 e2 1f             	and    edx,0x1f
c00021d7:	b9 01 00 00 00       	mov    ecx,0x1
c00021dc:	eb 37                	jmp    c0002215 <tchar2uni+0x6c>
c00021de:	81 e2 f0 00 00 00    	and    edx,0xf0
c00021e4:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00021ea:	75 0c                	jne    c00021f8 <tchar2uni+0x4f>
c00021ec:	89 ca                	mov    edx,ecx
c00021ee:	b9 02 00 00 00       	mov    ecx,0x2
c00021f3:	83 e2 0f             	and    edx,0xf
c00021f6:	eb 1d                	jmp    c0002215 <tchar2uni+0x6c>
c00021f8:	89 cf                	mov    edi,ecx
c00021fa:	83 ca ff             	or     edx,0xffffffff
c00021fd:	81 e7 f8 00 00 00    	and    edi,0xf8
c0002203:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0002209:	75 70                	jne    c000227b <tchar2uni+0xd2>
c000220b:	89 ca                	mov    edx,ecx
c000220d:	b9 03 00 00 00       	mov    ecx,0x3
c0002212:	83 e2 07             	and    edx,0x7
c0002215:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0002219:	46                   	inc    esi
c000221a:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c000221d:	89 cf                	mov    edi,ecx
c000221f:	81 e7 c0 00 00 00    	and    edi,0xc0
c0002225:	83 c7 80             	add    edi,0xffffff80
c0002228:	75 4e                	jne    c0002278 <tchar2uni+0xcf>
c000222a:	c1 e2 06             	shl    edx,0x6
c000222d:	83 e1 3f             	and    ecx,0x3f
c0002230:	09 ca                	or     edx,ecx
c0002232:	39 de                	cmp    esi,ebx
c0002234:	75 e3                	jne    c0002219 <tchar2uni+0x70>
c0002236:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002239:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c000223f:	77 37                	ja     c0002278 <tchar2uni+0xcf>
c0002241:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002247:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000224d:	76 29                	jbe    c0002278 <tchar2uni+0xcf>
c000224f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002255:	76 1d                	jbe    c0002274 <tchar2uni+0xcb>
c0002257:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c000225d:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002263:	c1 e1 06             	shl    ecx,0x6
c0002266:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c000226c:	09 ca                	or     edx,ecx
c000226e:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002274:	89 18                	mov    DWORD PTR [eax],ebx
c0002276:	eb 03                	jmp    c000227b <tchar2uni+0xd2>
c0002278:	83 ca ff             	or     edx,0xffffffff
c000227b:	5b                   	pop    ebx
c000227c:	89 d0                	mov    eax,edx
c000227e:	5e                   	pop    esi
c000227f:	5f                   	pop    edi
c0002280:	c3                   	ret    

c0002281 <put_utf>:
c0002281:	53                   	push   ebx
c0002282:	83 f8 7f             	cmp    eax,0x7f
c0002285:	89 c3                	mov    ebx,eax
c0002287:	b0 00                	mov    al,0x0
c0002289:	77 11                	ja     c000229c <put_utf+0x1b>
c000228b:	85 c9                	test   ecx,ecx
c000228d:	0f 84 e5 00 00 00    	je     c0002378 <put_utf+0xf7>
c0002293:	88 1a                	mov    BYTE PTR [edx],bl
c0002295:	b0 01                	mov    al,0x1
c0002297:	e9 dc 00 00 00       	jmp    c0002378 <put_utf+0xf7>
c000229c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00022a2:	77 23                	ja     c00022c7 <put_utf+0x46>
c00022a4:	83 f9 01             	cmp    ecx,0x1
c00022a7:	0f 86 cb 00 00 00    	jbe    c0002378 <put_utf+0xf7>
c00022ad:	89 d8                	mov    eax,ebx
c00022af:	83 e3 3f             	and    ebx,0x3f
c00022b2:	c1 e8 06             	shr    eax,0x6
c00022b5:	83 cb 80             	or     ebx,0xffffff80
c00022b8:	83 c8 c0             	or     eax,0xffffffc0
c00022bb:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00022be:	88 02                	mov    BYTE PTR [edx],al
c00022c0:	b0 02                	mov    al,0x2
c00022c2:	e9 b1 00 00 00       	jmp    c0002378 <put_utf+0xf7>
c00022c7:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c00022cd:	77 40                	ja     c000230f <put_utf+0x8e>
c00022cf:	83 f9 02             	cmp    ecx,0x2
c00022d2:	0f 86 a0 00 00 00    	jbe    c0002378 <put_utf+0xf7>
c00022d8:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00022de:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00022e4:	0f 86 8e 00 00 00    	jbe    c0002378 <put_utf+0xf7>
c00022ea:	89 d8                	mov    eax,ebx
c00022ec:	c1 e8 0c             	shr    eax,0xc
c00022ef:	83 c8 e0             	or     eax,0xffffffe0
c00022f2:	88 02                	mov    BYTE PTR [edx],al
c00022f4:	89 d8                	mov    eax,ebx
c00022f6:	83 e3 3f             	and    ebx,0x3f
c00022f9:	c1 e8 06             	shr    eax,0x6
c00022fc:	83 cb 80             	or     ebx,0xffffff80
c00022ff:	83 e0 3f             	and    eax,0x3f
c0002302:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0002305:	83 c8 80             	or     eax,0xffffff80
c0002308:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000230b:	b0 03                	mov    al,0x3
c000230d:	eb 69                	jmp    c0002378 <put_utf+0xf7>
c000230f:	83 f9 03             	cmp    ecx,0x3
c0002312:	76 64                	jbe    c0002378 <put_utf+0xf7>
c0002314:	89 d9                	mov    ecx,ebx
c0002316:	0f b7 c3             	movzx  eax,bx
c0002319:	66 31 c9             	xor    cx,cx
c000231c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0002322:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002328:	c1 e9 06             	shr    ecx,0x6
c000232b:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002331:	77 43                	ja     c0002376 <put_utf+0xf5>
c0002333:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0002339:	77 3b                	ja     c0002376 <put_utf+0xf5>
c000233b:	09 cb                	or     ebx,ecx
c000233d:	81 c3 00 00 01 00    	add    ebx,0x10000
c0002343:	89 d8                	mov    eax,ebx
c0002345:	c1 e8 12             	shr    eax,0x12
c0002348:	83 c8 f0             	or     eax,0xfffffff0
c000234b:	88 02                	mov    BYTE PTR [edx],al
c000234d:	89 d8                	mov    eax,ebx
c000234f:	c1 e8 0c             	shr    eax,0xc
c0002352:	83 e0 3f             	and    eax,0x3f
c0002355:	83 c8 80             	or     eax,0xffffff80
c0002358:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000235b:	89 d8                	mov    eax,ebx
c000235d:	83 e3 3f             	and    ebx,0x3f
c0002360:	c1 e8 06             	shr    eax,0x6
c0002363:	83 cb 80             	or     ebx,0xffffff80
c0002366:	83 e0 3f             	and    eax,0x3f
c0002369:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c000236c:	83 c8 80             	or     eax,0xffffff80
c000236f:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002372:	b0 04                	mov    al,0x4
c0002374:	eb 02                	jmp    c0002378 <put_utf+0xf7>
c0002376:	31 c0                	xor    eax,eax
c0002378:	5b                   	pop    ebx
c0002379:	c3                   	ret    

c000237a <clst2sect>:
c000237a:	8d 4a fe             	lea    ecx,[edx-0x2]
c000237d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002380:	83 ea 02             	sub    edx,0x2
c0002383:	39 ca                	cmp    edx,ecx
c0002385:	76 0d                	jbe    c0002394 <clst2sect+0x1a>
c0002387:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000238b:	0f af d1             	imul   edx,ecx
c000238e:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002391:	89 d0                	mov    eax,edx
c0002393:	c3                   	ret    
c0002394:	31 c0                	xor    eax,eax
c0002396:	c3                   	ret    

c0002397 <pick_lfn>:
c0002397:	55                   	push   ebp
c0002398:	57                   	push   edi
c0002399:	89 c7                	mov    edi,eax
c000239b:	56                   	push   esi
c000239c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000239f:	53                   	push   ebx
c00023a0:	89 d3                	mov    ebx,edx
c00023a2:	e8 7c fd ff ff       	call   c0002123 <ld_word>
c00023a7:	66 85 c0             	test   ax,ax
c00023aa:	74 04                	je     c00023b0 <pick_lfn+0x19>
c00023ac:	31 c0                	xor    eax,eax
c00023ae:	eb 62                	jmp    c0002412 <pick_lfn+0x7b>
c00023b0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00023b3:	bd 01 00 00 00       	mov    ebp,0x1
c00023b8:	83 e1 bf             	and    ecx,0xffffffbf
c00023bb:	31 f6                	xor    esi,esi
c00023bd:	49                   	dec    ecx
c00023be:	6b c9 0d             	imul   ecx,ecx,0xd
c00023c1:	0f b6 86 e0 fc 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd0320]
c00023c8:	01 d8                	add    eax,ebx
c00023ca:	e8 54 fd ff ff       	call   c0002123 <ld_word>
c00023cf:	66 85 ed             	test   bp,bp
c00023d2:	74 11                	je     c00023e5 <pick_lfn+0x4e>
c00023d4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00023da:	77 d0                	ja     c00023ac <pick_lfn+0x15>
c00023dc:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00023e0:	89 c5                	mov    ebp,eax
c00023e2:	41                   	inc    ecx
c00023e3:	eb 0a                	jmp    c00023ef <pick_lfn+0x58>
c00023e5:	0f b7 c0             	movzx  eax,ax
c00023e8:	3d ff ff 00 00       	cmp    eax,0xffff
c00023ed:	75 bd                	jne    c00023ac <pick_lfn+0x15>
c00023ef:	46                   	inc    esi
c00023f0:	83 fe 0d             	cmp    esi,0xd
c00023f3:	75 cc                	jne    c00023c1 <pick_lfn+0x2a>
c00023f5:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00023f8:	74 13                	je     c000240d <pick_lfn+0x76>
c00023fa:	66 85 ed             	test   bp,bp
c00023fd:	74 0e                	je     c000240d <pick_lfn+0x76>
c00023ff:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002405:	77 a5                	ja     c00023ac <pick_lfn+0x15>
c0002407:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c000240d:	b8 01 00 00 00       	mov    eax,0x1
c0002412:	5b                   	pop    ebx
c0002413:	5e                   	pop    esi
c0002414:	5f                   	pop    edi
c0002415:	5d                   	pop    ebp
c0002416:	c3                   	ret    

c0002417 <put_lfn>:
c0002417:	55                   	push   ebp
c0002418:	57                   	push   edi
c0002419:	89 d7                	mov    edi,edx
c000241b:	56                   	push   esi
c000241c:	31 f6                	xor    esi,esi
c000241e:	53                   	push   ebx
c000241f:	83 ec 0c             	sub    esp,0xc
c0002422:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002426:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000242a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000242e:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002434:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002437:	8d 42 1a             	lea    eax,[edx+0x1a]
c000243a:	31 d2                	xor    edx,edx
c000243c:	e8 07 fd ff ff       	call   c0002148 <st_word>
c0002441:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002448:	0f b6 d9             	movzx  ebx,cl
c000244b:	4b                   	dec    ebx
c000244c:	6b db 0d             	imul   ebx,ebx,0xd
c000244f:	0f b7 c6             	movzx  eax,si
c0002452:	3d ff ff 00 00       	cmp    eax,0xffff
c0002457:	74 09                	je     c0002462 <put_lfn+0x4b>
c0002459:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000245d:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002461:	43                   	inc    ebx
c0002462:	0f b7 ee             	movzx  ebp,si
c0002465:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002468:	89 ea                	mov    edx,ebp
c000246a:	0f b6 80 e0 fc 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0320]
c0002471:	01 f8                	add    eax,edi
c0002473:	e8 d0 fc ff ff       	call   c0002148 <st_word>
c0002478:	85 ed                	test   ebp,ebp
c000247a:	75 05                	jne    c0002481 <put_lfn+0x6a>
c000247c:	be ff ff 00 00       	mov    esi,0xffff
c0002481:	ff 04 24             	inc    DWORD PTR [esp]
c0002484:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002488:	75 c5                	jne    c000244f <put_lfn+0x38>
c000248a:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002490:	74 0b                	je     c000249d <put_lfn+0x86>
c0002492:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002496:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000249b:	75 07                	jne    c00024a4 <put_lfn+0x8d>
c000249d:	83 c9 40             	or     ecx,0x40
c00024a0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00024a4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00024a8:	88 07                	mov    BYTE PTR [edi],al
c00024aa:	83 c4 0c             	add    esp,0xc
c00024ad:	5b                   	pop    ebx
c00024ae:	5e                   	pop    esi
c00024af:	5f                   	pop    edi
c00024b0:	5d                   	pop    ebp
c00024b1:	c3                   	ret    

c00024b2 <gen_numname>:
c00024b2:	57                   	push   edi
c00024b3:	89 cf                	mov    edi,ecx
c00024b5:	56                   	push   esi
c00024b6:	b9 0b 00 00 00       	mov    ecx,0xb
c00024bb:	53                   	push   ebx
c00024bc:	89 c6                	mov    esi,eax
c00024be:	83 ec 10             	sub    esp,0x10
c00024c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00024c5:	e8 85 fc ff ff       	call   c000214f <mem_cpy>
c00024ca:	83 fb 05             	cmp    ebx,0x5
c00024cd:	76 30                	jbe    c00024ff <gen_numname+0x4d>
c00024cf:	66 8b 07             	mov    ax,WORD PTR [edi]
c00024d2:	66 85 c0             	test   ax,ax
c00024d5:	74 28                	je     c00024ff <gen_numname+0x4d>
c00024d7:	83 c7 02             	add    edi,0x2
c00024da:	ba 10 00 00 00       	mov    edx,0x10
c00024df:	01 db                	add    ebx,ebx
c00024e1:	89 c1                	mov    ecx,eax
c00024e3:	c1 e0 10             	shl    eax,0x10
c00024e6:	83 e1 01             	and    ecx,0x1
c00024e9:	c1 e8 11             	shr    eax,0x11
c00024ec:	01 cb                	add    ebx,ecx
c00024ee:	0f ba e3 10          	bt     ebx,0x10
c00024f2:	73 06                	jae    c00024fa <gen_numname+0x48>
c00024f4:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00024fa:	4a                   	dec    edx
c00024fb:	75 e2                	jne    c00024df <gen_numname+0x2d>
c00024fd:	eb d0                	jmp    c00024cf <gen_numname+0x1d>
c00024ff:	b8 07 00 00 00       	mov    eax,0x7
c0002504:	89 d9                	mov    ecx,ebx
c0002506:	83 e1 0f             	and    ecx,0xf
c0002509:	8d 79 30             	lea    edi,[ecx+0x30]
c000250c:	89 fa                	mov    edx,edi
c000250e:	83 ff 39             	cmp    edi,0x39
c0002511:	76 03                	jbe    c0002516 <gen_numname+0x64>
c0002513:	8d 51 37             	lea    edx,[ecx+0x37]
c0002516:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002519:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000251d:	89 da                	mov    edx,ebx
c000251f:	c1 ea 04             	shr    edx,0x4
c0002522:	83 fb 0f             	cmp    ebx,0xf
c0002525:	76 06                	jbe    c000252d <gen_numname+0x7b>
c0002527:	89 c8                	mov    eax,ecx
c0002529:	89 d3                	mov    ebx,edx
c000252b:	eb d7                	jmp    c0002504 <gen_numname+0x52>
c000252d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0002532:	31 d2                	xor    edx,edx
c0002534:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002537:	8d 04 16             	lea    eax,[esi+edx*1]
c000253a:	39 ca                	cmp    edx,ecx
c000253c:	73 19                	jae    c0002557 <gen_numname+0xa5>
c000253e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002541:	83 f8 20             	cmp    eax,0x20
c0002544:	74 11                	je     c0002557 <gen_numname+0xa5>
c0002546:	e8 58 fc ff ff       	call   c00021a3 <dbc_1st>
c000254b:	85 c0                	test   eax,eax
c000254d:	74 05                	je     c0002554 <gen_numname+0xa2>
c000254f:	39 d3                	cmp    ebx,edx
c0002551:	74 04                	je     c0002557 <gen_numname+0xa5>
c0002553:	42                   	inc    edx
c0002554:	42                   	inc    edx
c0002555:	eb e0                	jmp    c0002537 <gen_numname+0x85>
c0002557:	b0 20                	mov    al,0x20
c0002559:	83 f9 07             	cmp    ecx,0x7
c000255c:	77 05                	ja     c0002563 <gen_numname+0xb1>
c000255e:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002562:	41                   	inc    ecx
c0002563:	42                   	inc    edx
c0002564:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002568:	83 fa 07             	cmp    edx,0x7
c000256b:	76 ea                	jbe    c0002557 <gen_numname+0xa5>
c000256d:	83 c4 10             	add    esp,0x10
c0002570:	5b                   	pop    ebx
c0002571:	5e                   	pop    esi
c0002572:	5f                   	pop    edi
c0002573:	c3                   	ret    

c0002574 <sum_sfn>:
c0002574:	53                   	push   ebx
c0002575:	31 c9                	xor    ecx,ecx
c0002577:	31 db                	xor    ebx,ebx
c0002579:	0f b6 d1             	movzx  edx,cl
c000257c:	c1 e1 07             	shl    ecx,0x7
c000257f:	d1 ea                	shr    edx,1
c0002581:	09 ca                	or     edx,ecx
c0002583:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002586:	43                   	inc    ebx
c0002587:	01 ca                	add    edx,ecx
c0002589:	83 fb 0b             	cmp    ebx,0xb
c000258c:	88 d1                	mov    cl,dl
c000258e:	75 e9                	jne    c0002579 <sum_sfn+0x5>
c0002590:	88 d0                	mov    al,dl
c0002592:	5b                   	pop    ebx
c0002593:	c3                   	ret    

c0002594 <get_ldnumber>:
c0002594:	8b 10                	mov    edx,DWORD PTR [eax]
c0002596:	85 d2                	test   edx,edx
c0002598:	74 14                	je     c00025ae <get_ldnumber+0x1a>
c000259a:	56                   	push   esi
c000259b:	53                   	push   ebx
c000259c:	89 d3                	mov    ebx,edx
c000259e:	43                   	inc    ebx
c000259f:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c00025a2:	80 f9 1f             	cmp    cl,0x1f
c00025a5:	76 0d                	jbe    c00025b4 <get_ldnumber+0x20>
c00025a7:	80 f9 3a             	cmp    cl,0x3a
c00025aa:	75 f2                	jne    c000259e <get_ldnumber+0xa>
c00025ac:	eb 0a                	jmp    c00025b8 <get_ldnumber+0x24>
c00025ae:	83 c9 ff             	or     ecx,0xffffffff
c00025b1:	89 c8                	mov    eax,ecx
c00025b3:	c3                   	ret    
c00025b4:	31 c9                	xor    ecx,ecx
c00025b6:	eb 24                	jmp    c00025dc <get_ldnumber+0x48>
c00025b8:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c00025bb:	8d 4e d0             	lea    ecx,[esi-0x30]
c00025be:	80 f9 09             	cmp    cl,0x9
c00025c1:	77 16                	ja     c00025d9 <get_ldnumber+0x45>
c00025c3:	83 c2 02             	add    edx,0x2
c00025c6:	83 c9 ff             	or     ecx,0xffffffff
c00025c9:	39 d3                	cmp    ebx,edx
c00025cb:	75 0f                	jne    c00025dc <get_ldnumber+0x48>
c00025cd:	89 f2                	mov    edx,esi
c00025cf:	89 18                	mov    DWORD PTR [eax],ebx
c00025d1:	0f be ca             	movsx  ecx,dl
c00025d4:	83 e9 30             	sub    ecx,0x30
c00025d7:	eb 03                	jmp    c00025dc <get_ldnumber+0x48>
c00025d9:	83 c9 ff             	or     ecx,0xffffffff
c00025dc:	89 c8                	mov    eax,ecx
c00025de:	5b                   	pop    ebx
c00025df:	5e                   	pop    esi
c00025e0:	c3                   	ret    

c00025e1 <validate>:
c00025e1:	56                   	push   esi
c00025e2:	53                   	push   ebx
c00025e3:	89 d6                	mov    esi,edx
c00025e5:	51                   	push   ecx
c00025e6:	85 c0                	test   eax,eax
c00025e8:	75 09                	jne    c00025f3 <validate+0x12>
c00025ea:	b8 09 00 00 00       	mov    eax,0x9
c00025ef:	31 c9                	xor    ecx,ecx
c00025f1:	eb 2e                	jmp    c0002621 <validate+0x40>
c00025f3:	89 c3                	mov    ebx,eax
c00025f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00025f7:	85 c0                	test   eax,eax
c00025f9:	74 ef                	je     c00025ea <validate+0x9>
c00025fb:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00025fe:	74 ea                	je     c00025ea <validate+0x9>
c0002600:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0002603:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c0002607:	75 e1                	jne    c00025ea <validate+0x9>
c0002609:	83 ec 0c             	sub    esp,0xc
c000260c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002610:	50                   	push   eax
c0002611:	e8 bc fa ff ff       	call   c00020d2 <disk_status>
c0002616:	83 c4 10             	add    esp,0x10
c0002619:	a8 01                	test   al,0x1
c000261b:	75 cd                	jne    c00025ea <validate+0x9>
c000261d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000261f:	31 c0                	xor    eax,eax
c0002621:	89 0e                	mov    DWORD PTR [esi],ecx
c0002623:	5a                   	pop    edx
c0002624:	5b                   	pop    ebx
c0002625:	5e                   	pop    esi
c0002626:	c3                   	ret    

c0002627 <sync_window>:
c0002627:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000262b:	74 58                	je     c0002685 <sync_window+0x5e>
c000262d:	56                   	push   esi
c000262e:	53                   	push   ebx
c000262f:	8d 70 34             	lea    esi,[eax+0x34]
c0002632:	51                   	push   ecx
c0002633:	89 c3                	mov    ebx,eax
c0002635:	6a 01                	push   0x1
c0002637:	ff 70 30             	push   DWORD PTR [eax+0x30]
c000263a:	56                   	push   esi
c000263b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000263f:	50                   	push   eax
c0002640:	e8 a9 fa ff ff       	call   c00020ee <disk_write>
c0002645:	83 c4 10             	add    esp,0x10
c0002648:	ba 01 00 00 00       	mov    edx,0x1
c000264d:	85 c0                	test   eax,eax
c000264f:	75 2e                	jne    c000267f <sync_window+0x58>
c0002651:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002654:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002657:	89 c1                	mov    ecx,eax
c0002659:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000265d:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002660:	39 d1                	cmp    ecx,edx
c0002662:	73 19                	jae    c000267d <sync_window+0x56>
c0002664:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002668:	75 13                	jne    c000267d <sync_window+0x56>
c000266a:	6a 01                	push   0x1
c000266c:	01 d0                	add    eax,edx
c000266e:	50                   	push   eax
c000266f:	56                   	push   esi
c0002670:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002674:	50                   	push   eax
c0002675:	e8 74 fa ff ff       	call   c00020ee <disk_write>
c000267a:	83 c4 10             	add    esp,0x10
c000267d:	31 d2                	xor    edx,edx
c000267f:	89 d0                	mov    eax,edx
c0002681:	5a                   	pop    edx
c0002682:	5b                   	pop    ebx
c0002683:	5e                   	pop    esi
c0002684:	c3                   	ret    
c0002685:	31 d2                	xor    edx,edx
c0002687:	89 d0                	mov    eax,edx
c0002689:	c3                   	ret    

c000268a <move_window>:
c000268a:	57                   	push   edi
c000268b:	56                   	push   esi
c000268c:	31 f6                	xor    esi,esi
c000268e:	53                   	push   ebx
c000268f:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002692:	74 32                	je     c00026c6 <move_window+0x3c>
c0002694:	89 c3                	mov    ebx,eax
c0002696:	89 d7                	mov    edi,edx
c0002698:	e8 8a ff ff ff       	call   c0002627 <sync_window>
c000269d:	89 c6                	mov    esi,eax
c000269f:	85 c0                	test   eax,eax
c00026a1:	75 23                	jne    c00026c6 <move_window+0x3c>
c00026a3:	6a 01                	push   0x1
c00026a5:	8d 43 34             	lea    eax,[ebx+0x34]
c00026a8:	57                   	push   edi
c00026a9:	50                   	push   eax
c00026aa:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00026ae:	50                   	push   eax
c00026af:	e8 24 fa ff ff       	call   c00020d8 <disk_read>
c00026b4:	83 c4 10             	add    esp,0x10
c00026b7:	85 c0                	test   eax,eax
c00026b9:	74 08                	je     c00026c3 <move_window+0x39>
c00026bb:	be 01 00 00 00       	mov    esi,0x1
c00026c0:	83 cf ff             	or     edi,0xffffffff
c00026c3:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00026c6:	89 f0                	mov    eax,esi
c00026c8:	5b                   	pop    ebx
c00026c9:	5e                   	pop    esi
c00026ca:	5f                   	pop    edi
c00026cb:	c3                   	ret    

c00026cc <check_fs>:
c00026cc:	53                   	push   ebx
c00026cd:	89 c3                	mov    ebx,eax
c00026cf:	83 ec 08             	sub    esp,0x8
c00026d2:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00026d6:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00026dd:	e8 a8 ff ff ff       	call   c000268a <move_window>
c00026e2:	ba 04 00 00 00       	mov    edx,0x4
c00026e7:	85 c0                	test   eax,eax
c00026e9:	75 68                	jne    c0002753 <check_fs+0x87>
c00026eb:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00026f1:	e8 2d fa ff ff       	call   c0002123 <ld_word>
c00026f6:	ba 03 00 00 00       	mov    edx,0x3
c00026fb:	66 3d 55 aa          	cmp    ax,0xaa55
c00026ff:	75 52                	jne    c0002753 <check_fs+0x87>
c0002701:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c0002704:	8d 50 18             	lea    edx,[eax+0x18]
c0002707:	80 fa 01             	cmp    dl,0x1
c000270a:	76 09                	jbe    c0002715 <check_fs+0x49>
c000270c:	ba 02 00 00 00       	mov    edx,0x2
c0002711:	3c eb                	cmp    al,0xeb
c0002713:	75 3e                	jne    c0002753 <check_fs+0x87>
c0002715:	ba 3c 3b 03 c0       	mov    edx,0xc0033b3c
c000271a:	8d 43 6a             	lea    eax,[ebx+0x6a]
c000271d:	b9 03 00 00 00       	mov    ecx,0x3
c0002722:	e8 48 fa ff ff       	call   c000216f <mem_cmp>
c0002727:	31 d2                	xor    edx,edx
c0002729:	85 c0                	test   eax,eax
c000272b:	74 26                	je     c0002753 <check_fs+0x87>
c000272d:	ba 98 fb 02 c0       	mov    edx,0xc002fb98
c0002732:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002738:	b9 05 00 00 00       	mov    ecx,0x5
c000273d:	e8 2d fa ff ff       	call   c000216f <mem_cmp>
c0002742:	31 d2                	xor    edx,edx
c0002744:	85 c0                	test   eax,eax
c0002746:	74 0b                	je     c0002753 <check_fs+0x87>
c0002748:	31 d2                	xor    edx,edx
c000274a:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000274e:	0f 95 c2             	setne  dl
c0002751:	01 d2                	add    edx,edx
c0002753:	89 d0                	mov    eax,edx
c0002755:	83 c4 08             	add    esp,0x8
c0002758:	5b                   	pop    ebx
c0002759:	c3                   	ret    

c000275a <find_volume>:
c000275a:	55                   	push   ebp
c000275b:	57                   	push   edi
c000275c:	56                   	push   esi
c000275d:	89 c6                	mov    esi,eax
c000275f:	53                   	push   ebx
c0002760:	89 d3                	mov    ebx,edx
c0002762:	83 ec 2c             	sub    esp,0x2c
c0002765:	31 d2                	xor    edx,edx
c0002767:	e8 60 ff ff ff       	call   c00026cc <check_fs>
c000276c:	83 f8 02             	cmp    eax,0x2
c000276f:	74 06                	je     c0002777 <find_volume+0x1d>
c0002771:	77 62                	ja     c00027d5 <find_volume+0x7b>
c0002773:	85 db                	test   ebx,ebx
c0002775:	74 5e                	je     c00027d5 <find_volume+0x7b>
c0002777:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000277b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002781:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002787:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000278b:	89 cf                	mov    edi,ecx
c000278d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002791:	89 e8                	mov    eax,ebp
c0002793:	83 c5 10             	add    ebp,0x10
c0002796:	e8 95 f9 ff ff       	call   c0002130 <ld_dword>
c000279b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000279f:	89 01                	mov    DWORD PTR [ecx],eax
c00027a1:	83 c1 04             	add    ecx,0x4
c00027a4:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00027a8:	75 e3                	jne    c000278d <find_volume+0x33>
c00027aa:	31 ed                	xor    ebp,ebp
c00027ac:	85 db                	test   ebx,ebx
c00027ae:	74 03                	je     c00027b3 <find_volume+0x59>
c00027b0:	8d 6b ff             	lea    ebp,[ebx-0x1]
c00027b3:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c00027b6:	b8 03 00 00 00       	mov    eax,0x3
c00027bb:	85 d2                	test   edx,edx
c00027bd:	74 0c                	je     c00027cb <find_volume+0x71>
c00027bf:	89 f0                	mov    eax,esi
c00027c1:	e8 06 ff ff ff       	call   c00026cc <check_fs>
c00027c6:	83 f8 01             	cmp    eax,0x1
c00027c9:	76 0a                	jbe    c00027d5 <find_volume+0x7b>
c00027cb:	85 db                	test   ebx,ebx
c00027cd:	75 06                	jne    c00027d5 <find_volume+0x7b>
c00027cf:	45                   	inc    ebp
c00027d0:	83 fd 03             	cmp    ebp,0x3
c00027d3:	76 de                	jbe    c00027b3 <find_volume+0x59>
c00027d5:	83 c4 2c             	add    esp,0x2c
c00027d8:	5b                   	pop    ebx
c00027d9:	5e                   	pop    esi
c00027da:	5f                   	pop    edi
c00027db:	5d                   	pop    ebp
c00027dc:	c3                   	ret    

c00027dd <mount_volume>:
c00027dd:	55                   	push   ebp
c00027de:	89 d5                	mov    ebp,edx
c00027e0:	57                   	push   edi
c00027e1:	89 cf                	mov    edi,ecx
c00027e3:	56                   	push   esi
c00027e4:	53                   	push   ebx
c00027e5:	bb 0b 00 00 00       	mov    ebx,0xb
c00027ea:	83 ec 1c             	sub    esp,0x1c
c00027ed:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00027f3:	e8 9c fd ff ff       	call   c0002594 <get_ldnumber>
c00027f8:	85 c0                	test   eax,eax
c00027fa:	0f 88 c4 02 00 00    	js     c0002ac4 <mount_volume+0x2e7>
c0002800:	8b 34 85 80 7c 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc8380]
c0002807:	89 c2                	mov    edx,eax
c0002809:	bb 0c 00 00 00       	mov    ebx,0xc
c000280e:	85 f6                	test   esi,esi
c0002810:	0f 84 ae 02 00 00    	je     c0002ac4 <mount_volume+0x2e7>
c0002816:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002819:	83 e7 fe             	and    edi,0xfffffffe
c000281c:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000281f:	74 3a                	je     c000285b <mount_volume+0x7e>
c0002821:	89 04 24             	mov    DWORD PTR [esp],eax
c0002824:	83 ec 0c             	sub    esp,0xc
c0002827:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000282b:	50                   	push   eax
c000282c:	e8 a1 f8 ff ff       	call   c00020d2 <disk_status>
c0002831:	83 c4 10             	add    esp,0x10
c0002834:	a8 01                	test   al,0x1
c0002836:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0002839:	75 20                	jne    c000285b <mount_volume+0x7e>
c000283b:	31 db                	xor    ebx,ebx
c000283d:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002843:	0f 84 7b 02 00 00    	je     c0002ac4 <mount_volume+0x2e7>
c0002849:	a8 04                	test   al,0x4
c000284b:	0f 84 73 02 00 00    	je     c0002ac4 <mount_volume+0x2e7>
c0002851:	bb 0a 00 00 00       	mov    ebx,0xa
c0002856:	e9 69 02 00 00       	jmp    c0002ac4 <mount_volume+0x2e7>
c000285b:	83 ec 0c             	sub    esp,0xc
c000285e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002861:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002864:	0f b6 c2             	movzx  eax,dl
c0002867:	bb 03 00 00 00       	mov    ebx,0x3
c000286c:	50                   	push   eax
c000286d:	e8 63 f8 ff ff       	call   c00020d5 <disk_initialize>
c0002872:	83 c4 10             	add    esp,0x10
c0002875:	a8 01                	test   al,0x1
c0002877:	0f 85 47 02 00 00    	jne    c0002ac4 <mount_volume+0x2e7>
c000287d:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002883:	74 04                	je     c0002889 <mount_volume+0xac>
c0002885:	a8 04                	test   al,0x4
c0002887:	75 c8                	jne    c0002851 <mount_volume+0x74>
c0002889:	31 d2                	xor    edx,edx
c000288b:	89 f0                	mov    eax,esi
c000288d:	bb 01 00 00 00       	mov    ebx,0x1
c0002892:	e8 c3 fe ff ff       	call   c000275a <find_volume>
c0002897:	83 f8 04             	cmp    eax,0x4
c000289a:	0f 84 24 02 00 00    	je     c0002ac4 <mount_volume+0x2e7>
c00028a0:	83 f8 01             	cmp    eax,0x1
c00028a3:	76 0a                	jbe    c00028af <mount_volume+0xd2>
c00028a5:	bb 0d 00 00 00       	mov    ebx,0xd
c00028aa:	e9 15 02 00 00       	jmp    c0002ac4 <mount_volume+0x2e7>
c00028af:	8d 46 3f             	lea    eax,[esi+0x3f]
c00028b2:	e8 6c f8 ff ff       	call   c0002123 <ld_word>
c00028b7:	66 3d 00 02          	cmp    ax,0x200
c00028bb:	75 e8                	jne    c00028a5 <mount_volume+0xc8>
c00028bd:	8d 46 4a             	lea    eax,[esi+0x4a]
c00028c0:	e8 5e f8 ff ff       	call   c0002123 <ld_word>
c00028c5:	0f b7 c0             	movzx  eax,ax
c00028c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00028cb:	85 c0                	test   eax,eax
c00028cd:	75 0b                	jne    c00028da <mount_volume+0xfd>
c00028cf:	8d 46 58             	lea    eax,[esi+0x58]
c00028d2:	e8 59 f8 ff ff       	call   c0002130 <ld_dword>
c00028d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00028da:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00028dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00028e1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00028e4:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00028e7:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c00028ea:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00028ee:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00028f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028f5:	48                   	dec    eax
c00028f6:	3c 01                	cmp    al,0x1
c00028f8:	77 ab                	ja     c00028a5 <mount_volume+0xc8>
c00028fa:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00028fe:	89 c3                	mov    ebx,eax
c0002900:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c0002904:	66 85 c0             	test   ax,ax
c0002907:	74 9c                	je     c00028a5 <mount_volume+0xc8>
c0002909:	8d 40 ff             	lea    eax,[eax-0x1]
c000290c:	85 d8                	test   eax,ebx
c000290e:	75 95                	jne    c00028a5 <mount_volume+0xc8>
c0002910:	8d 46 45             	lea    eax,[esi+0x45]
c0002913:	e8 0b f8 ff ff       	call   c0002123 <ld_word>
c0002918:	89 c7                	mov    edi,eax
c000291a:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c000291e:	a8 0f                	test   al,0xf
c0002920:	75 83                	jne    c00028a5 <mount_volume+0xc8>
c0002922:	8d 46 47             	lea    eax,[esi+0x47]
c0002925:	e8 f9 f7 ff ff       	call   c0002123 <ld_word>
c000292a:	0f b7 e8             	movzx  ebp,ax
c000292d:	85 ed                	test   ebp,ebp
c000292f:	75 0a                	jne    c000293b <mount_volume+0x15e>
c0002931:	8d 46 54             	lea    eax,[esi+0x54]
c0002934:	e8 f7 f7 ff ff       	call   c0002130 <ld_dword>
c0002939:	89 c5                	mov    ebp,eax
c000293b:	8d 46 42             	lea    eax,[esi+0x42]
c000293e:	e8 e0 f7 ff ff       	call   c0002123 <ld_word>
c0002943:	0f b7 c8             	movzx  ecx,ax
c0002946:	85 c9                	test   ecx,ecx
c0002948:	0f 84 57 ff ff ff    	je     c00028a5 <mount_volume+0xc8>
c000294e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002953:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c0002957:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295b:	0f b7 c7             	movzx  eax,di
c000295e:	c1 e8 04             	shr    eax,0x4
c0002961:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002965:	01 c8                	add    eax,ecx
c0002967:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000296b:	39 c5                	cmp    ebp,eax
c000296d:	0f 82 32 ff ff ff    	jb     c00028a5 <mount_volume+0xc8>
c0002973:	29 c5                	sub    ebp,eax
c0002975:	31 d2                	xor    edx,edx
c0002977:	89 e8                	mov    eax,ebp
c0002979:	f7 f3                	div    ebx
c000297b:	39 dd                	cmp    ebp,ebx
c000297d:	0f 82 22 ff ff ff    	jb     c00028a5 <mount_volume+0xc8>
c0002983:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002988:	0f 87 17 ff ff ff    	ja     c00028a5 <mount_volume+0xc8>
c000298e:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002993:	0f 86 1c 01 00 00    	jbe    c0002ab5 <mount_volume+0x2d8>
c0002999:	bb 03 00 00 00       	mov    ebx,0x3
c000299e:	8d 68 02             	lea    ebp,[eax+0x2]
c00029a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00029a9:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c00029ad:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00029b0:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00029b3:	01 c8                	add    eax,ecx
c00029b5:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00029b8:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00029bb:	83 fb 03             	cmp    ebx,0x3
c00029be:	75 23                	jne    c00029e3 <mount_volume+0x206>
c00029c0:	8d 46 5e             	lea    eax,[esi+0x5e]
c00029c3:	e8 5b f7 ff ff       	call   c0002123 <ld_word>
c00029c8:	09 c7                	or     edi,eax
c00029ca:	66 85 ff             	test   di,di
c00029cd:	0f 85 d2 fe ff ff    	jne    c00028a5 <mount_volume+0xc8>
c00029d3:	8d 46 60             	lea    eax,[esi+0x60]
c00029d6:	c1 e5 02             	shl    ebp,0x2
c00029d9:	e8 52 f7 ff ff       	call   c0002130 <ld_dword>
c00029de:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00029e1:	eb 24                	jmp    c0002a07 <mount_volume+0x22a>
c00029e3:	66 85 ff             	test   di,di
c00029e6:	0f 84 b9 fe ff ff    	je     c00028a5 <mount_volume+0xc8>
c00029ec:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00029f0:	83 fb 02             	cmp    ebx,0x2
c00029f3:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00029f6:	75 04                	jne    c00029fc <mount_volume+0x21f>
c00029f8:	01 ed                	add    ebp,ebp
c00029fa:	eb 0b                	jmp    c0002a07 <mount_volume+0x22a>
c00029fc:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c0002a00:	83 e5 01             	and    ebp,0x1
c0002a03:	d1 e8                	shr    eax,1
c0002a05:	01 c5                	add    ebp,eax
c0002a07:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c0002a0d:	c1 ed 09             	shr    ebp,0x9
c0002a10:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0002a13:	0f 87 8c fe ff ff    	ja     c00028a5 <mount_volume+0xc8>
c0002a19:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002a20:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002a27:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002a2b:	83 fb 03             	cmp    ebx,0x3
c0002a2e:	75 6e                	jne    c0002a9e <mount_volume+0x2c1>
c0002a30:	8d 46 64             	lea    eax,[esi+0x64]
c0002a33:	e8 eb f6 ff ff       	call   c0002123 <ld_word>
c0002a38:	66 48                	dec    ax
c0002a3a:	75 62                	jne    c0002a9e <mount_volume+0x2c1>
c0002a3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0002a40:	89 f0                	mov    eax,esi
c0002a42:	42                   	inc    edx
c0002a43:	e8 42 fc ff ff       	call   c000268a <move_window>
c0002a48:	85 c0                	test   eax,eax
c0002a4a:	75 52                	jne    c0002a9e <mount_volume+0x2c1>
c0002a4c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002a50:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002a56:	e8 c8 f6 ff ff       	call   c0002123 <ld_word>
c0002a5b:	66 3d 55 aa          	cmp    ax,0xaa55
c0002a5f:	75 3d                	jne    c0002a9e <mount_volume+0x2c1>
c0002a61:	8d 46 34             	lea    eax,[esi+0x34]
c0002a64:	e8 c7 f6 ff ff       	call   c0002130 <ld_dword>
c0002a69:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002a6e:	75 2e                	jne    c0002a9e <mount_volume+0x2c1>
c0002a70:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002a76:	e8 b5 f6 ff ff       	call   c0002130 <ld_dword>
c0002a7b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a80:	75 1c                	jne    c0002a9e <mount_volume+0x2c1>
c0002a82:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002a88:	e8 a3 f6 ff ff       	call   c0002130 <ld_dword>
c0002a8d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002a90:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002a96:	e8 95 f6 ff ff       	call   c0002130 <ld_dword>
c0002a9b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002a9e:	66 a1 60 7c 03 c0    	mov    ax,ds:0xc0037c60
c0002aa4:	88 1e                	mov    BYTE PTR [esi],bl
c0002aa6:	40                   	inc    eax
c0002aa7:	31 db                	xor    ebx,ebx
c0002aa9:	66 a3 60 7c 03 c0    	mov    ds:0xc0037c60,ax
c0002aaf:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002ab3:	eb 0f                	jmp    c0002ac4 <mount_volume+0x2e7>
c0002ab5:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002aba:	19 db                	sbb    ebx,ebx
c0002abc:	83 c3 02             	add    ebx,0x2
c0002abf:	e9 da fe ff ff       	jmp    c000299e <mount_volume+0x1c1>
c0002ac4:	83 c4 1c             	add    esp,0x1c
c0002ac7:	89 d8                	mov    eax,ebx
c0002ac9:	5b                   	pop    ebx
c0002aca:	5e                   	pop    esi
c0002acb:	5f                   	pop    edi
c0002acc:	5d                   	pop    ebp
c0002acd:	c3                   	ret    

c0002ace <put_fat>:
c0002ace:	55                   	push   ebp
c0002acf:	bd 02 00 00 00       	mov    ebp,0x2
c0002ad4:	57                   	push   edi
c0002ad5:	56                   	push   esi
c0002ad6:	53                   	push   ebx
c0002ad7:	83 ec 1c             	sub    esp,0x1c
c0002ada:	83 fa 01             	cmp    edx,0x1
c0002add:	0f 86 38 01 00 00    	jbe    c0002c1b <put_fat+0x14d>
c0002ae3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002ae6:	0f 86 2f 01 00 00    	jbe    c0002c1b <put_fat+0x14d>
c0002aec:	89 c6                	mov    esi,eax
c0002aee:	89 cf                	mov    edi,ecx
c0002af0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002af3:	89 d3                	mov    ebx,edx
c0002af5:	83 f8 02             	cmp    eax,0x2
c0002af8:	0f 84 b1 00 00 00    	je     c0002baf <put_fat+0xe1>
c0002afe:	83 f8 03             	cmp    eax,0x3
c0002b01:	0f 84 d5 00 00 00    	je     c0002bdc <put_fat+0x10e>
c0002b07:	48                   	dec    eax
c0002b08:	0f 85 0d 01 00 00    	jne    c0002c1b <put_fat+0x14d>
c0002b0e:	89 d1                	mov    ecx,edx
c0002b10:	89 f0                	mov    eax,esi
c0002b12:	d1 e9                	shr    ecx,1
c0002b14:	01 d1                	add    ecx,edx
c0002b16:	89 ca                	mov    edx,ecx
c0002b18:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b1c:	c1 ea 09             	shr    edx,0x9
c0002b1f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002b22:	e8 63 fb ff ff       	call   c000268a <move_window>
c0002b27:	89 c5                	mov    ebp,eax
c0002b29:	85 c0                	test   eax,eax
c0002b2b:	0f 85 ea 00 00 00    	jne    c0002c1b <put_fat+0x14d>
c0002b31:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002b35:	8d 46 34             	lea    eax,[esi+0x34]
c0002b38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b3c:	8d 41 01             	lea    eax,[ecx+0x1]
c0002b3f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002b45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b49:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b4d:	89 f8                	mov    eax,edi
c0002b4f:	83 e3 01             	and    ebx,0x1
c0002b52:	74 11                	je     c0002b65 <put_fat+0x97>
c0002b54:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002b56:	89 f8                	mov    eax,edi
c0002b58:	83 e2 0f             	and    edx,0xf
c0002b5b:	c1 e0 04             	shl    eax,0x4
c0002b5e:	25 f0 0f 00 00       	and    eax,0xff0
c0002b63:	09 d0                	or     eax,edx
c0002b65:	88 01                	mov    BYTE PTR [ecx],al
c0002b67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b6b:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b6f:	c1 ea 09             	shr    edx,0x9
c0002b72:	89 f0                	mov    eax,esi
c0002b74:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002b77:	e8 0e fb ff ff       	call   c000268a <move_window>
c0002b7c:	89 c5                	mov    ebp,eax
c0002b7e:	85 c0                	test   eax,eax
c0002b80:	0f 85 95 00 00 00    	jne    c0002c1b <put_fat+0x14d>
c0002b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b8a:	25 ff 01 00 00       	and    eax,0x1ff
c0002b8f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b93:	85 db                	test   ebx,ebx
c0002b95:	74 07                	je     c0002b9e <put_fat+0xd0>
c0002b97:	c1 ef 04             	shr    edi,0x4
c0002b9a:	89 f9                	mov    ecx,edi
c0002b9c:	eb 0d                	jmp    c0002bab <put_fat+0xdd>
c0002b9e:	8a 08                	mov    cl,BYTE PTR [eax]
c0002ba0:	c1 ef 08             	shr    edi,0x8
c0002ba3:	83 e1 f0             	and    ecx,0xfffffff0
c0002ba6:	83 e7 0f             	and    edi,0xf
c0002ba9:	09 f9                	or     ecx,edi
c0002bab:	88 08                	mov    BYTE PTR [eax],cl
c0002bad:	eb 27                	jmp    c0002bd6 <put_fat+0x108>
c0002baf:	c1 ea 08             	shr    edx,0x8
c0002bb2:	89 f0                	mov    eax,esi
c0002bb4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002bb7:	e8 ce fa ff ff       	call   c000268a <move_window>
c0002bbc:	89 c5                	mov    ebp,eax
c0002bbe:	85 c0                	test   eax,eax
c0002bc0:	75 59                	jne    c0002c1b <put_fat+0x14d>
c0002bc2:	01 db                	add    ebx,ebx
c0002bc4:	0f b7 d7             	movzx  edx,di
c0002bc7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002bcd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002bd1:	e8 72 f5 ff ff       	call   c0002148 <st_word>
c0002bd6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bda:	eb 3f                	jmp    c0002c1b <put_fat+0x14d>
c0002bdc:	c1 ea 07             	shr    edx,0x7
c0002bdf:	89 f0                	mov    eax,esi
c0002be1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002be4:	e8 a1 fa ff ff       	call   c000268a <move_window>
c0002be9:	89 c5                	mov    ebp,eax
c0002beb:	85 c0                	test   eax,eax
c0002bed:	75 2c                	jne    c0002c1b <put_fat+0x14d>
c0002bef:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002bf5:	c1 e3 02             	shl    ebx,0x2
c0002bf8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002bfe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002c02:	89 d8                	mov    eax,ebx
c0002c04:	e8 27 f5 ff ff       	call   c0002130 <ld_dword>
c0002c09:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c0e:	09 f8                	or     eax,edi
c0002c10:	89 c2                	mov    edx,eax
c0002c12:	89 d8                	mov    eax,ebx
c0002c14:	e8 33 f5 ff ff       	call   c000214c <st_dword>
c0002c19:	eb bb                	jmp    c0002bd6 <put_fat+0x108>
c0002c1b:	83 c4 1c             	add    esp,0x1c
c0002c1e:	89 e8                	mov    eax,ebp
c0002c20:	5b                   	pop    ebx
c0002c21:	5e                   	pop    esi
c0002c22:	5f                   	pop    edi
c0002c23:	5d                   	pop    ebp
c0002c24:	c3                   	ret    

c0002c25 <dir_clear>:
c0002c25:	55                   	push   ebp
c0002c26:	57                   	push   edi
c0002c27:	56                   	push   esi
c0002c28:	89 c6                	mov    esi,eax
c0002c2a:	53                   	push   ebx
c0002c2b:	83 ec 1c             	sub    esp,0x1c
c0002c2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002c32:	e8 f0 f9 ff ff       	call   c0002627 <sync_window>
c0002c37:	85 c0                	test   eax,eax
c0002c39:	0f 85 c0 00 00 00    	jne    c0002cff <dir_clear+0xda>
c0002c3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c43:	89 f0                	mov    eax,esi
c0002c45:	e8 30 f7 ff ff       	call   c000237a <clst2sect>
c0002c4a:	31 d2                	xor    edx,edx
c0002c4c:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002c4f:	89 c5                	mov    ebp,eax
c0002c51:	b9 00 02 00 00       	mov    ecx,0x200
c0002c56:	8d 46 34             	lea    eax,[esi+0x34]
c0002c59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c5d:	e8 02 f5 ff ff       	call   c0002164 <mem_set>
c0002c62:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002c66:	c1 e3 09             	shl    ebx,0x9
c0002c69:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002c6f:	76 1b                	jbe    c0002c8c <dir_clear+0x67>
c0002c71:	bb 00 80 00 00       	mov    ebx,0x8000
c0002c76:	eb 14                	jmp    c0002c8c <dir_clear+0x67>
c0002c78:	83 ec 0c             	sub    esp,0xc
c0002c7b:	53                   	push   ebx
c0002c7c:	e8 eb 32 00 00       	call   c0005f6c <ff_memalloc>
c0002c81:	83 c4 10             	add    esp,0x10
c0002c84:	89 c7                	mov    edi,eax
c0002c86:	85 c0                	test   eax,eax
c0002c88:	75 7c                	jne    c0002d06 <dir_clear+0xe1>
c0002c8a:	d1 eb                	shr    ebx,1
c0002c8c:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002c92:	77 e4                	ja     c0002c78 <dir_clear+0x53>
c0002c94:	31 db                	xor    ebx,ebx
c0002c96:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002c9a:	39 d8                	cmp    eax,ebx
c0002c9c:	76 53                	jbe    c0002cf1 <dir_clear+0xcc>
c0002c9e:	6a 01                	push   0x1
c0002ca0:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ca3:	50                   	push   eax
c0002ca4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002ca8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002cac:	50                   	push   eax
c0002cad:	e8 3c f4 ff ff       	call   c00020ee <disk_write>
c0002cb2:	83 c4 10             	add    esp,0x10
c0002cb5:	85 c0                	test   eax,eax
c0002cb7:	75 38                	jne    c0002cf1 <dir_clear+0xcc>
c0002cb9:	43                   	inc    ebx
c0002cba:	eb da                	jmp    c0002c96 <dir_clear+0x71>
c0002cbc:	52                   	push   edx
c0002cbd:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002cc0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002cc4:	50                   	push   eax
c0002cc5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002cc9:	57                   	push   edi
c0002cca:	50                   	push   eax
c0002ccb:	e8 1e f4 ff ff       	call   c00020ee <disk_write>
c0002cd0:	83 c4 10             	add    esp,0x10
c0002cd3:	85 c0                	test   eax,eax
c0002cd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002cd9:	75 0a                	jne    c0002ce5 <dir_clear+0xc0>
c0002cdb:	01 d3                	add    ebx,edx
c0002cdd:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002ce1:	39 d8                	cmp    eax,ebx
c0002ce3:	77 d7                	ja     c0002cbc <dir_clear+0x97>
c0002ce5:	83 ec 0c             	sub    esp,0xc
c0002ce8:	57                   	push   edi
c0002ce9:	e8 96 32 00 00       	call   c0005f84 <ff_memfree>
c0002cee:	83 c4 10             	add    esp,0x10
c0002cf1:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002cf5:	39 d8                	cmp    eax,ebx
c0002cf7:	0f 95 c0             	setne  al
c0002cfa:	0f b6 c0             	movzx  eax,al
c0002cfd:	eb 19                	jmp    c0002d18 <dir_clear+0xf3>
c0002cff:	b8 01 00 00 00       	mov    eax,0x1
c0002d04:	eb 12                	jmp    c0002d18 <dir_clear+0xf3>
c0002d06:	89 d9                	mov    ecx,ebx
c0002d08:	31 d2                	xor    edx,edx
c0002d0a:	e8 55 f4 ff ff       	call   c0002164 <mem_set>
c0002d0f:	89 da                	mov    edx,ebx
c0002d11:	31 db                	xor    ebx,ebx
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	eb c5                	jmp    c0002cdd <dir_clear+0xb8>
c0002d18:	83 c4 1c             	add    esp,0x1c
c0002d1b:	5b                   	pop    ebx
c0002d1c:	5e                   	pop    esi
c0002d1d:	5f                   	pop    edi
c0002d1e:	5d                   	pop    ebp
c0002d1f:	c3                   	ret    

c0002d20 <create_name>:
c0002d20:	55                   	push   ebp
c0002d21:	57                   	push   edi
c0002d22:	89 d7                	mov    edi,edx
c0002d24:	56                   	push   esi
c0002d25:	31 f6                	xor    esi,esi
c0002d27:	53                   	push   ebx
c0002d28:	83 ec 3c             	sub    esp,0x3c
c0002d2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d2f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002d31:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002d39:	8b 00                	mov    eax,DWORD PTR [eax]
c0002d3b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002d3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d42:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002d46:	e8 5e f4 ff ff       	call   c00021a9 <tchar2uni>
c0002d4b:	89 c3                	mov    ebx,eax
c0002d4d:	83 f8 ff             	cmp    eax,0xffffffff
c0002d50:	75 0a                	jne    c0002d5c <create_name+0x3c>
c0002d52:	b8 06 00 00 00       	mov    eax,0x6
c0002d57:	e9 93 02 00 00       	jmp    c0002fef <create_name+0x2cf>
c0002d5c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002d61:	76 0c                	jbe    c0002d6f <create_name+0x4f>
c0002d63:	c1 e8 10             	shr    eax,0x10
c0002d66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d6a:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002d6e:	46                   	inc    esi
c0002d6f:	0f b7 d3             	movzx  edx,bx
c0002d72:	83 fa 1f             	cmp    edx,0x1f
c0002d75:	76 4a                	jbe    c0002dc1 <create_name+0xa1>
c0002d77:	83 fa 5c             	cmp    edx,0x5c
c0002d7a:	74 30                	je     c0002dac <create_name+0x8c>
c0002d7c:	83 fa 2f             	cmp    edx,0x2f
c0002d7f:	74 2b                	je     c0002dac <create_name+0x8c>
c0002d81:	83 fa 7f             	cmp    edx,0x7f
c0002d84:	77 0e                	ja     c0002d94 <create_name+0x74>
c0002d86:	b8 9e fb 02 c0       	mov    eax,0xc002fb9e
c0002d8b:	e8 02 f4 ff ff       	call   c0002192 <chk_chr>
c0002d90:	85 c0                	test   eax,eax
c0002d92:	75 be                	jne    c0002d52 <create_name+0x32>
c0002d94:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002d9a:	77 b6                	ja     c0002d52 <create_name+0x32>
c0002d9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002da0:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002da4:	46                   	inc    esi
c0002da5:	eb 9b                	jmp    c0002d42 <create_name+0x22>
c0002da7:	40                   	inc    eax
c0002da8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002dac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002db0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002db3:	83 fa 2f             	cmp    edx,0x2f
c0002db6:	74 ef                	je     c0002da7 <create_name+0x87>
c0002db8:	83 fa 5c             	cmp    edx,0x5c
c0002dbb:	74 ea                	je     c0002da7 <create_name+0x87>
c0002dbd:	31 db                	xor    ebx,ebx
c0002dbf:	eb 02                	jmp    c0002dc3 <create_name+0xa3>
c0002dc1:	b3 04                	mov    bl,0x4
c0002dc3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002dc7:	89 07                	mov    DWORD PTR [edi],eax
c0002dc9:	85 f6                	test   esi,esi
c0002dcb:	74 16                	je     c0002de3 <create_name+0xc3>
c0002dcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002dd1:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002dd6:	83 f8 20             	cmp    eax,0x20
c0002dd9:	74 05                	je     c0002de0 <create_name+0xc0>
c0002ddb:	83 f8 2e             	cmp    eax,0x2e
c0002dde:	75 03                	jne    c0002de3 <create_name+0xc3>
c0002de0:	4e                   	dec    esi
c0002de1:	eb e6                	jmp    c0002dc9 <create_name+0xa9>
c0002de3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002de7:	31 ff                	xor    edi,edi
c0002de9:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002def:	85 f6                	test   esi,esi
c0002df1:	0f 84 5b ff ff ff    	je     c0002d52 <create_name+0x32>
c0002df7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002dfb:	8d 57 01             	lea    edx,[edi+0x1]
c0002dfe:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002e02:	83 f8 20             	cmp    eax,0x20
c0002e05:	75 04                	jne    c0002e0b <create_name+0xeb>
c0002e07:	89 d7                	mov    edi,edx
c0002e09:	eb ec                	jmp    c0002df7 <create_name+0xd7>
c0002e0b:	85 ff                	test   edi,edi
c0002e0d:	75 05                	jne    c0002e14 <create_name+0xf4>
c0002e0f:	83 f8 2e             	cmp    eax,0x2e
c0002e12:	75 08                	jne    c0002e1c <create_name+0xfc>
c0002e14:	83 cb 03             	or     ebx,0x3
c0002e17:	eb 03                	jmp    c0002e1c <create_name+0xfc>
c0002e19:	4e                   	dec    esi
c0002e1a:	74 0c                	je     c0002e28 <create_name+0x108>
c0002e1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002e20:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002e26:	75 f1                	jne    c0002e19 <create_name+0xf9>
c0002e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002e31:	83 c0 20             	add    eax,0x20
c0002e34:	ba 20 00 00 00       	mov    edx,0x20
c0002e39:	31 ed                	xor    ebp,ebp
c0002e3b:	e8 24 f3 ff ff       	call   c0002164 <mem_set>
c0002e40:	b9 08 00 00 00       	mov    ecx,0x8
c0002e45:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002e4a:	8d 47 01             	lea    eax,[edi+0x1]
c0002e4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002e51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002e55:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002e59:	89 c7                	mov    edi,eax
c0002e5b:	85 c0                	test   eax,eax
c0002e5d:	0f 84 25 01 00 00    	je     c0002f88 <create_name+0x268>
c0002e63:	83 f8 20             	cmp    eax,0x20
c0002e66:	74 0f                	je     c0002e77 <create_name+0x157>
c0002e68:	83 f8 2e             	cmp    eax,0x2e
c0002e6b:	75 13                	jne    c0002e80 <create_name+0x160>
c0002e6d:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002e71:	0f 84 6a 01 00 00    	je     c0002fe1 <create_name+0x2c1>
c0002e77:	83 cb 03             	or     ebx,0x3
c0002e7a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002e7e:	eb ca                	jmp    c0002e4a <create_name+0x12a>
c0002e80:	39 cd                	cmp    ebp,ecx
c0002e82:	73 0b                	jae    c0002e8f <create_name+0x16f>
c0002e84:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002e88:	75 3f                	jne    c0002ec9 <create_name+0x1a9>
c0002e8a:	e9 52 01 00 00       	jmp    c0002fe1 <create_name+0x2c1>
c0002e8f:	83 f9 0b             	cmp    ecx,0xb
c0002e92:	75 0d                	jne    c0002ea1 <create_name+0x181>
c0002e94:	83 cb 03             	or     ebx,0x3
c0002e97:	b9 0b 00 00 00       	mov    ecx,0xb
c0002e9c:	e9 e7 00 00 00       	jmp    c0002f88 <create_name+0x268>
c0002ea1:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002ea5:	74 0d                	je     c0002eb4 <create_name+0x194>
c0002ea7:	83 cb 03             	or     ebx,0x3
c0002eaa:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002eae:	0f 87 d4 00 00 00    	ja     c0002f88 <create_name+0x268>
c0002eb4:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002eb9:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002ebd:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ec2:	bd 08 00 00 00       	mov    ebp,0x8
c0002ec7:	eb b1                	jmp    c0002e7a <create_name+0x15a>
c0002ec9:	83 f8 7f             	cmp    eax,0x7f
c0002ecc:	76 66                	jbe    c0002f34 <create_name+0x214>
c0002ece:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002ed2:	89 d9                	mov    ecx,ebx
c0002ed4:	83 c9 02             	or     ecx,0x2
c0002ed7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002edb:	52                   	push   edx
c0002edc:	52                   	push   edx
c0002edd:	68 b5 01 00 00       	push   0x1b5
c0002ee2:	50                   	push   eax
c0002ee3:	e8 b4 30 00 00       	call   c0005f9c <ff_uni2oem>
c0002ee8:	83 c4 10             	add    esp,0x10
c0002eeb:	89 c7                	mov    edi,eax
c0002eed:	a8 80                	test   al,0x80
c0002eef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ef3:	74 0c                	je     c0002f01 <create_name+0x1e1>
c0002ef5:	83 e7 7f             	and    edi,0x7f
c0002ef8:	0f b6 bf 60 fc 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd03a0]
c0002eff:	eb 2a                	jmp    c0002f2b <create_name+0x20b>
c0002f01:	0f b7 c0             	movzx  eax,ax
c0002f04:	3d ff 00 00 00       	cmp    eax,0xff
c0002f09:	76 20                	jbe    c0002f2b <create_name+0x20b>
c0002f0b:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002f0e:	39 ea                	cmp    edx,ebp
c0002f10:	77 0a                	ja     c0002f1c <create_name+0x1fc>
c0002f12:	83 cb 03             	or     ebx,0x3
c0002f15:	89 cd                	mov    ebp,ecx
c0002f17:	e9 5e ff ff ff       	jmp    c0002e7a <create_name+0x15a>
c0002f1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002f20:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002f24:	45                   	inc    ebp
c0002f25:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002f29:	eb 4d                	jmp    c0002f78 <create_name+0x258>
c0002f2b:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002f2f:	66 85 ff             	test   di,di
c0002f32:	74 19                	je     c0002f4d <create_name+0x22d>
c0002f34:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002f38:	0f b7 d7             	movzx  edx,di
c0002f3b:	b8 a7 fb 02 c0       	mov    eax,0xc002fba7
c0002f40:	e8 4d f2 ff ff       	call   c0002192 <chk_chr>
c0002f45:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002f49:	85 c0                	test   eax,eax
c0002f4b:	74 0a                	je     c0002f57 <create_name+0x237>
c0002f4d:	83 cb 03             	or     ebx,0x3
c0002f50:	bf 5f 00 00 00       	mov    edi,0x5f
c0002f55:	eb 21                	jmp    c0002f78 <create_name+0x258>
c0002f57:	8d 47 bf             	lea    eax,[edi-0x41]
c0002f5a:	66 83 f8 19          	cmp    ax,0x19
c0002f5e:	77 07                	ja     c0002f67 <create_name+0x247>
c0002f60:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002f65:	eb 11                	jmp    c0002f78 <create_name+0x258>
c0002f67:	8d 47 9f             	lea    eax,[edi-0x61]
c0002f6a:	66 83 f8 19          	cmp    ax,0x19
c0002f6e:	77 08                	ja     c0002f78 <create_name+0x258>
c0002f70:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002f75:	83 ef 20             	sub    edi,0x20
c0002f78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002f7c:	89 f8                	mov    eax,edi
c0002f7e:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002f82:	45                   	inc    ebp
c0002f83:	e9 f2 fe ff ff       	jmp    c0002e7a <create_name+0x15a>
c0002f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002f8c:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002f90:	75 04                	jne    c0002f96 <create_name+0x276>
c0002f92:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002f96:	83 f9 08             	cmp    ecx,0x8
c0002f99:	75 05                	jne    c0002fa0 <create_name+0x280>
c0002f9b:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002fa0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002fa4:	83 e0 0c             	and    eax,0xc
c0002fa7:	83 f8 0c             	cmp    eax,0xc
c0002faa:	74 0c                	je     c0002fb8 <create_name+0x298>
c0002fac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002fb0:	83 e0 03             	and    eax,0x3
c0002fb3:	83 f8 03             	cmp    eax,0x3
c0002fb6:	75 05                	jne    c0002fbd <create_name+0x29d>
c0002fb8:	83 cb 02             	or     ebx,0x2
c0002fbb:	eb 19                	jmp    c0002fd6 <create_name+0x2b6>
c0002fbd:	f6 c3 02             	test   bl,0x2
c0002fc0:	75 14                	jne    c0002fd6 <create_name+0x2b6>
c0002fc2:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002fc7:	74 03                	je     c0002fcc <create_name+0x2ac>
c0002fc9:	83 cb 10             	or     ebx,0x10
c0002fcc:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002fd1:	74 03                	je     c0002fd6 <create_name+0x2b6>
c0002fd3:	83 cb 08             	or     ebx,0x8
c0002fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002fda:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002fdd:	31 c0                	xor    eax,eax
c0002fdf:	eb 0e                	jmp    c0002fef <create_name+0x2cf>
c0002fe1:	83 f9 0b             	cmp    ecx,0xb
c0002fe4:	0f 85 ca fe ff ff    	jne    c0002eb4 <create_name+0x194>
c0002fea:	e9 a5 fe ff ff       	jmp    c0002e94 <create_name+0x174>
c0002fef:	83 c4 3c             	add    esp,0x3c
c0002ff2:	5b                   	pop    ebx
c0002ff3:	5e                   	pop    esi
c0002ff4:	5f                   	pop    edi
c0002ff5:	5d                   	pop    ebp
c0002ff6:	c3                   	ret    

c0002ff7 <cmp_lfn>:
c0002ff7:	55                   	push   ebp
c0002ff8:	57                   	push   edi
c0002ff9:	89 d7                	mov    edi,edx
c0002ffb:	56                   	push   esi
c0002ffc:	53                   	push   ebx
c0002ffd:	83 ec 1c             	sub    esp,0x1c
c0003000:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003004:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003007:	e8 17 f1 ff ff       	call   c0002123 <ld_word>
c000300c:	66 85 c0             	test   ax,ax
c000300f:	74 07                	je     c0003018 <cmp_lfn+0x21>
c0003011:	31 c0                	xor    eax,eax
c0003013:	e9 a1 00 00 00       	jmp    c00030b9 <cmp_lfn+0xc2>
c0003018:	8a 1f                	mov    bl,BYTE PTR [edi]
c000301a:	bd 01 00 00 00       	mov    ebp,0x1
c000301f:	83 e3 3f             	and    ebx,0x3f
c0003022:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000302a:	4b                   	dec    ebx
c000302b:	6b db 0d             	imul   ebx,ebx,0xd
c000302e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003032:	0f b6 80 e0 fc 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0320]
c0003039:	01 f8                	add    eax,edi
c000303b:	e8 e3 f0 ff ff       	call   c0002123 <ld_word>
c0003040:	66 85 ed             	test   bp,bp
c0003043:	89 c6                	mov    esi,eax
c0003045:	74 3c                	je     c0003083 <cmp_lfn+0x8c>
c0003047:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000304d:	77 c2                	ja     c0003011 <cmp_lfn+0x1a>
c000304f:	83 ec 0c             	sub    esp,0xc
c0003052:	0f b7 c0             	movzx  eax,ax
c0003055:	50                   	push   eax
c0003056:	e8 59 30 00 00       	call   c00060b4 <ff_wtoupper>
c000305b:	89 c5                	mov    ebp,eax
c000305d:	8d 43 01             	lea    eax,[ebx+0x1]
c0003060:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003064:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003068:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000306c:	89 04 24             	mov    DWORD PTR [esp],eax
c000306f:	e8 40 30 00 00       	call   c00060b4 <ff_wtoupper>
c0003074:	83 c4 10             	add    esp,0x10
c0003077:	39 c5                	cmp    ebp,eax
c0003079:	75 96                	jne    c0003011 <cmp_lfn+0x1a>
c000307b:	89 f5                	mov    ebp,esi
c000307d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003081:	eb 0b                	jmp    c000308e <cmp_lfn+0x97>
c0003083:	0f b7 c8             	movzx  ecx,ax
c0003086:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c000308c:	75 83                	jne    c0003011 <cmp_lfn+0x1a>
c000308e:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003092:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003097:	75 95                	jne    c000302e <cmp_lfn+0x37>
c0003099:	f6 07 40             	test   BYTE PTR [edi],0x40
c000309c:	74 16                	je     c00030b4 <cmp_lfn+0xbd>
c000309e:	66 85 ed             	test   bp,bp
c00030a1:	74 11                	je     c00030b4 <cmp_lfn+0xbd>
c00030a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030a7:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00030ac:	0f 94 c0             	sete   al
c00030af:	0f b6 c0             	movzx  eax,al
c00030b2:	eb 05                	jmp    c00030b9 <cmp_lfn+0xc2>
c00030b4:	b8 01 00 00 00       	mov    eax,0x1
c00030b9:	83 c4 1c             	add    esp,0x1c
c00030bc:	5b                   	pop    ebx
c00030bd:	5e                   	pop    esi
c00030be:	5f                   	pop    edi
c00030bf:	5d                   	pop    ebp
c00030c0:	c3                   	ret    

c00030c1 <sync_fs>:
c00030c1:	56                   	push   esi
c00030c2:	53                   	push   ebx
c00030c3:	53                   	push   ebx
c00030c4:	89 c3                	mov    ebx,eax
c00030c6:	e8 5c f5 ff ff       	call   c0002627 <sync_window>
c00030cb:	85 c0                	test   eax,eax
c00030cd:	0f 85 9a 00 00 00    	jne    c000316d <sync_fs+0xac>
c00030d3:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00030d6:	75 7b                	jne    c0003153 <sync_fs+0x92>
c00030d8:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00030dc:	75 75                	jne    c0003153 <sync_fs+0x92>
c00030de:	b9 00 02 00 00       	mov    ecx,0x200
c00030e3:	8d 73 34             	lea    esi,[ebx+0x34]
c00030e6:	31 d2                	xor    edx,edx
c00030e8:	89 f0                	mov    eax,esi
c00030ea:	e8 75 f0 ff ff       	call   c0002164 <mem_set>
c00030ef:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00030f5:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030fa:	e8 49 f0 ff ff       	call   c0002148 <st_word>
c00030ff:	ba 52 52 61 41       	mov    edx,0x41615252
c0003104:	89 f0                	mov    eax,esi
c0003106:	e8 41 f0 ff ff       	call   c000214c <st_dword>
c000310b:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0003111:	ba 72 72 41 61       	mov    edx,0x61417272
c0003116:	e8 31 f0 ff ff       	call   c000214c <st_dword>
c000311b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000311e:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0003124:	e8 23 f0 ff ff       	call   c000214c <st_dword>
c0003129:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000312c:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0003132:	e8 15 f0 ff ff       	call   c000214c <st_dword>
c0003137:	6a 01                	push   0x1
c0003139:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000313c:	40                   	inc    eax
c000313d:	50                   	push   eax
c000313e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003141:	56                   	push   esi
c0003142:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003146:	50                   	push   eax
c0003147:	e8 a2 ef ff ff       	call   c00020ee <disk_write>
c000314c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0003150:	83 c4 10             	add    esp,0x10
c0003153:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003157:	51                   	push   ecx
c0003158:	6a 00                	push   0x0
c000315a:	6a 00                	push   0x0
c000315c:	50                   	push   eax
c000315d:	e8 a2 ef ff ff       	call   c0002104 <disk_ioctl>
c0003162:	83 c4 10             	add    esp,0x10
c0003165:	85 c0                	test   eax,eax
c0003167:	0f 95 c0             	setne  al
c000316a:	0f b6 c0             	movzx  eax,al
c000316d:	5a                   	pop    edx
c000316e:	5b                   	pop    ebx
c000316f:	5e                   	pop    esi
c0003170:	c3                   	ret    

c0003171 <create_partition>:
c0003171:	55                   	push   ebp
c0003172:	0f b6 c0             	movzx  eax,al
c0003175:	57                   	push   edi
c0003176:	56                   	push   esi
c0003177:	53                   	push   ebx
c0003178:	83 ec 40             	sub    esp,0x40
c000317b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000317f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003183:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003187:	8d 44 24 30          	lea    eax,[esp+0x30]
c000318b:	50                   	push   eax
c000318c:	6a 01                	push   0x1
c000318e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003192:	e8 6d ef ff ff       	call   c0002104 <disk_ioctl>
c0003197:	83 c4 10             	add    esp,0x10
c000319a:	85 c0                	test   eax,eax
c000319c:	0f 85 6a 01 00 00    	jne    c000330c <create_partition+0x19b>
c00031a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00031a6:	b9 05 00 00 00       	mov    ecx,0x5
c00031ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00031af:	be 08 00 00 00       	mov    esi,0x8
c00031b4:	89 f0                	mov    eax,esi
c00031b6:	31 d2                	xor    edx,edx
c00031b8:	0f b6 d8             	movzx  ebx,al
c00031bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00031bf:	f7 f3                	div    ebx
c00031c1:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00031c6:	76 0a                	jbe    c00031d2 <create_partition+0x61>
c00031c8:	d1 e6                	shl    esi,1
c00031ca:	49                   	dec    ecx
c00031cb:	75 e7                	jne    c00031b4 <create_partition+0x43>
c00031cd:	be ff ff ff ff       	mov    esi,0xffffffff
c00031d2:	b9 00 02 00 00       	mov    ecx,0x200
c00031d7:	31 d2                	xor    edx,edx
c00031d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031dd:	e8 82 ef ff ff       	call   c0002164 <mem_set>
c00031e2:	b9 64 00 00 00       	mov    ecx,0x64
c00031e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00031eb:	31 d2                	xor    edx,edx
c00031ed:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00031f5:	f7 f1                	div    ecx
c00031f7:	b9 3f 00 00 00       	mov    ecx,0x3f
c00031fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003200:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003204:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c000320a:	89 f0                	mov    eax,esi
c000320c:	0f b6 c0             	movzx  eax,al
c000320f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003213:	85 c9                	test   ecx,ecx
c0003215:	75 34                	jne    c000324b <create_partition+0xda>
c0003217:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000321b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0003220:	05 fe 01 00 00       	add    eax,0x1fe
c0003225:	e8 1e ef ff ff       	call   c0002148 <st_word>
c000322a:	6a 01                	push   0x1
c000322c:	6a 00                	push   0x0
c000322e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0003232:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003236:	e8 b3 ee ff ff       	call   c00020ee <disk_write>
c000323b:	83 c4 10             	add    esp,0x10
c000323e:	85 c0                	test   eax,eax
c0003240:	0f 95 c0             	setne  al
c0003243:	0f b6 c0             	movzx  eax,al
c0003246:	e9 c6 00 00 00       	jmp    c0003311 <create_partition+0x1a0>
c000324b:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000324f:	76 c6                	jbe    c0003217 <create_partition+0xa6>
c0003251:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003255:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0003259:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c000325c:	83 fe 64             	cmp    esi,0x64
c000325f:	77 0d                	ja     c000326e <create_partition+0xfd>
c0003261:	74 07                	je     c000326a <create_partition+0xf9>
c0003263:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003268:	eb 04                	jmp    c000326e <create_partition+0xfd>
c000326a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000326e:	31 c0                	xor    eax,eax
c0003270:	89 f2                	mov    edx,esi
c0003272:	01 ca                	add    edx,ecx
c0003274:	0f 92 c0             	setb   al
c0003277:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c000327b:	77 04                	ja     c0003281 <create_partition+0x110>
c000327d:	85 c0                	test   eax,eax
c000327f:	74 08                	je     c0003289 <create_partition+0x118>
c0003281:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003285:	29 ce                	sub    esi,ecx
c0003287:	eb 04                	jmp    c000328d <create_partition+0x11c>
c0003289:	85 f6                	test   esi,esi
c000328b:	74 8a                	je     c0003217 <create_partition+0xa6>
c000328d:	89 ca                	mov    edx,ecx
c000328f:	89 d8                	mov    eax,ebx
c0003291:	bf 3f 00 00 00       	mov    edi,0x3f
c0003296:	e8 b1 ee ff ff       	call   c000214c <st_dword>
c000329b:	8d 43 04             	lea    eax,[ebx+0x4]
c000329e:	89 f2                	mov    edx,esi
c00032a0:	83 c3 10             	add    ebx,0x10
c00032a3:	e8 a4 ee ff ff       	call   c000214c <st_dword>
c00032a8:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00032ac:	31 d2                	xor    edx,edx
c00032ae:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c00032b1:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00032b5:	89 c8                	mov    eax,ecx
c00032b7:	01 f1                	add    ecx,esi
c00032b9:	f7 f7                	div    edi
c00032bb:	89 d5                	mov    ebp,edx
c00032bd:	31 d2                	xor    edx,edx
c00032bf:	45                   	inc    ebp
c00032c0:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c00032c4:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c00032c7:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c00032ca:	89 c2                	mov    edx,eax
c00032cc:	8d 41 ff             	lea    eax,[ecx-0x1]
c00032cf:	c1 ea 02             	shr    edx,0x2
c00032d2:	83 e2 c0             	and    edx,0xffffffc0
c00032d5:	09 ea                	or     edx,ebp
c00032d7:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c00032da:	31 d2                	xor    edx,edx
c00032dc:	f7 f7                	div    edi
c00032de:	89 d6                	mov    esi,edx
c00032e0:	31 d2                	xor    edx,edx
c00032e2:	46                   	inc    esi
c00032e3:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c00032e7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c00032ea:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c00032ed:	89 c7                	mov    edi,eax
c00032ef:	c1 ef 02             	shr    edi,0x2
c00032f2:	83 e7 c0             	and    edi,0xffffffc0
c00032f5:	09 fe                	or     esi,edi
c00032f7:	89 f2                	mov    edx,esi
c00032f9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c00032fc:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0003301:	0f 85 0c ff ff ff    	jne    c0003213 <create_partition+0xa2>
c0003307:	e9 0b ff ff ff       	jmp    c0003217 <create_partition+0xa6>
c000330c:	b8 01 00 00 00       	mov    eax,0x1
c0003311:	83 c4 3c             	add    esp,0x3c
c0003314:	5b                   	pop    ebx
c0003315:	5e                   	pop    esi
c0003316:	5f                   	pop    edi
c0003317:	5d                   	pop    ebp
c0003318:	c3                   	ret    

c0003319 <get_fileinfo>:
c0003319:	55                   	push   ebp
c000331a:	57                   	push   edi
c000331b:	56                   	push   esi
c000331c:	53                   	push   ebx
c000331d:	83 ec 1c             	sub    esp,0x1c
c0003320:	8b 30                	mov    esi,DWORD PTR [eax]
c0003322:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0003326:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000332a:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c000332e:	0f 84 d3 01 00 00    	je     c0003507 <get_fileinfo+0x1ee>
c0003334:	89 d3                	mov    ebx,edx
c0003336:	89 c6                	mov    esi,eax
c0003338:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000333c:	74 72                	je     c00033b0 <get_fileinfo+0x97>
c000333e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003346:	31 ed                	xor    ebp,ebp
c0003348:	31 ff                	xor    edi,edi
c000334a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000334e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003352:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003355:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003359:	89 c2                	mov    edx,eax
c000335b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000335f:	85 c0                	test   eax,eax
c0003361:	74 41                	je     c00033a4 <get_fileinfo+0x8b>
c0003363:	0f b7 c5             	movzx  eax,bp
c0003366:	85 c0                	test   eax,eax
c0003368:	75 0d                	jne    c0003377 <get_fileinfo+0x5e>
c000336a:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003370:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003375:	76 22                	jbe    c0003399 <get_fileinfo+0x80>
c0003377:	c1 e0 10             	shl    eax,0x10
c000337a:	b9 ff 00 00 00       	mov    ecx,0xff
c000337f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003383:	29 f9                	sub    ecx,edi
c0003385:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003389:	e8 f3 ee ff ff       	call   c0002281 <put_utf>
c000338e:	0f b6 c0             	movzx  eax,al
c0003391:	85 c0                	test   eax,eax
c0003393:	74 0d                	je     c00033a2 <get_fileinfo+0x89>
c0003395:	01 c7                	add    edi,eax
c0003397:	31 d2                	xor    edx,edx
c0003399:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000339e:	89 d5                	mov    ebp,edx
c00033a0:	eb a8                	jmp    c000334a <get_fileinfo+0x31>
c00033a2:	31 ff                	xor    edi,edi
c00033a4:	66 85 ed             	test   bp,bp
c00033a7:	74 02                	je     c00033ab <get_fileinfo+0x92>
c00033a9:	31 ff                	xor    edi,edi
c00033ab:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00033b0:	31 ff                	xor    edi,edi
c00033b2:	31 c9                	xor    ecx,ecx
c00033b4:	83 f9 0a             	cmp    ecx,0xa
c00033b7:	0f 87 ac 00 00 00    	ja     c0003469 <get_fileinfo+0x150>
c00033bd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033c0:	8d 69 01             	lea    ebp,[ecx+0x1]
c00033c3:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00033c7:	89 c2                	mov    edx,eax
c00033c9:	83 f8 20             	cmp    eax,0x20
c00033cc:	0f 84 90 00 00 00    	je     c0003462 <get_fileinfo+0x149>
c00033d2:	83 f8 05             	cmp    eax,0x5
c00033d5:	75 05                	jne    c00033dc <get_fileinfo+0xc3>
c00033d7:	ba e5 00 00 00       	mov    edx,0xe5
c00033dc:	83 ff 0b             	cmp    edi,0xb
c00033df:	77 0b                	ja     c00033ec <get_fileinfo+0xd3>
c00033e1:	83 fd 09             	cmp    ebp,0x9
c00033e4:	75 06                	jne    c00033ec <get_fileinfo+0xd3>
c00033e6:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00033eb:	47                   	inc    edi
c00033ec:	0f b7 c2             	movzx  eax,dx
c00033ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033f3:	e8 ab ed ff ff       	call   c00021a3 <dbc_1st>
c00033f8:	85 c0                	test   eax,eax
c00033fa:	74 2f                	je     c000342b <get_fileinfo+0x112>
c00033fc:	83 fd 08             	cmp    ebp,0x8
c00033ff:	74 2a                	je     c000342b <get_fileinfo+0x112>
c0003401:	83 fd 0b             	cmp    ebp,0xb
c0003404:	74 25                	je     c000342b <get_fileinfo+0x112>
c0003406:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003409:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000340d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003411:	e8 90 ed ff ff       	call   c00021a6 <dbc_2nd>
c0003416:	85 c0                	test   eax,eax
c0003418:	74 11                	je     c000342b <get_fileinfo+0x112>
c000341a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000341e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0003423:	c1 e0 08             	shl    eax,0x8
c0003426:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003429:	09 c2                	or     edx,eax
c000342b:	0f b7 d2             	movzx  edx,dx
c000342e:	50                   	push   eax
c000342f:	50                   	push   eax
c0003430:	68 b5 01 00 00       	push   0x1b5
c0003435:	52                   	push   edx
c0003436:	e8 01 2c 00 00       	call   c000603c <ff_oem2uni>
c000343b:	83 c4 10             	add    esp,0x10
c000343e:	0f b7 c0             	movzx  eax,ax
c0003441:	85 c0                	test   eax,eax
c0003443:	75 04                	jne    c0003449 <get_fileinfo+0x130>
c0003445:	31 ff                	xor    edi,edi
c0003447:	eb 20                	jmp    c0003469 <get_fileinfo+0x150>
c0003449:	b9 0c 00 00 00       	mov    ecx,0xc
c000344e:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003452:	29 f9                	sub    ecx,edi
c0003454:	e8 28 ee ff ff       	call   c0002281 <put_utf>
c0003459:	0f b6 c0             	movzx  eax,al
c000345c:	85 c0                	test   eax,eax
c000345e:	74 e5                	je     c0003445 <get_fileinfo+0x12c>
c0003460:	01 c7                	add    edi,eax
c0003462:	89 e9                	mov    ecx,ebp
c0003464:	e9 4b ff ff ff       	jmp    c00033b4 <get_fileinfo+0x9b>
c0003469:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000346e:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003472:	75 5f                	jne    c00034d3 <get_fileinfo+0x1ba>
c0003474:	85 ff                	test   edi,edi
c0003476:	75 0b                	jne    c0003483 <get_fileinfo+0x16a>
c0003478:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000347c:	ba 01 00 00 00       	mov    edx,0x1
c0003481:	eb 3e                	jmp    c00034c1 <get_fileinfo+0x1a8>
c0003483:	bf 08 00 00 00       	mov    edi,0x8
c0003488:	31 d2                	xor    edx,edx
c000348a:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003490:	84 c0                	test   al,al
c0003492:	74 2d                	je     c00034c1 <get_fileinfo+0x1a8>
c0003494:	66 83 f8 2e          	cmp    ax,0x2e
c0003498:	74 1b                	je     c00034b5 <get_fileinfo+0x19c>
c000349a:	8d 48 bf             	lea    ecx,[eax-0x41]
c000349d:	66 83 f9 19          	cmp    cx,0x19
c00034a1:	77 17                	ja     c00034ba <get_fileinfo+0x1a1>
c00034a3:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00034a6:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c00034a9:	21 f9                	and    ecx,edi
c00034ab:	80 e1 18             	and    cl,0x18
c00034ae:	74 0a                	je     c00034ba <get_fileinfo+0x1a1>
c00034b0:	83 c0 20             	add    eax,0x20
c00034b3:	eb 05                	jmp    c00034ba <get_fileinfo+0x1a1>
c00034b5:	bf 10 00 00 00       	mov    edi,0x10
c00034ba:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00034be:	42                   	inc    edx
c00034bf:	eb c9                	jmp    c000348a <get_fileinfo+0x171>
c00034c1:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00034c6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034c9:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00034cd:	75 04                	jne    c00034d3 <get_fileinfo+0x1ba>
c00034cf:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00034d3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034d6:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00034d9:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00034dc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034df:	83 c0 1c             	add    eax,0x1c
c00034e2:	e8 49 ec ff ff       	call   c0002130 <ld_dword>
c00034e7:	89 03                	mov    DWORD PTR [ebx],eax
c00034e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034ec:	83 c0 16             	add    eax,0x16
c00034ef:	e8 2f ec ff ff       	call   c0002123 <ld_word>
c00034f4:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00034f8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034fb:	83 c0 18             	add    eax,0x18
c00034fe:	e8 20 ec ff ff       	call   c0002123 <ld_word>
c0003503:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003507:	83 c4 1c             	add    esp,0x1c
c000350a:	5b                   	pop    ebx
c000350b:	5e                   	pop    esi
c000350c:	5f                   	pop    edi
c000350d:	5d                   	pop    ebp
c000350e:	c3                   	ret    

c000350f <ld_clust.isra.0>:
c000350f:	56                   	push   esi
c0003510:	89 c6                	mov    esi,eax
c0003512:	53                   	push   ebx
c0003513:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003516:	89 d3                	mov    ebx,edx
c0003518:	e8 06 ec ff ff       	call   c0002123 <ld_word>
c000351d:	0f b7 c8             	movzx  ecx,ax
c0003520:	89 f0                	mov    eax,esi
c0003522:	3c 03                	cmp    al,0x3
c0003524:	75 0d                	jne    c0003533 <ld_clust.isra.0+0x24>
c0003526:	8d 43 14             	lea    eax,[ebx+0x14]
c0003529:	e8 f5 eb ff ff       	call   c0002123 <ld_word>
c000352e:	c1 e0 10             	shl    eax,0x10
c0003531:	09 c1                	or     ecx,eax
c0003533:	89 c8                	mov    eax,ecx
c0003535:	5b                   	pop    ebx
c0003536:	5e                   	pop    esi
c0003537:	c3                   	ret    

c0003538 <st_clust.isra.1>:
c0003538:	56                   	push   esi
c0003539:	89 c6                	mov    esi,eax
c000353b:	53                   	push   ebx
c000353c:	89 d3                	mov    ebx,edx
c000353e:	0f b7 d1             	movzx  edx,cx
c0003541:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003544:	e8 ff eb ff ff       	call   c0002148 <st_word>
c0003549:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000354c:	75 0f                	jne    c000355d <st_clust.isra.1+0x25>
c000354e:	c1 e9 10             	shr    ecx,0x10
c0003551:	8d 43 14             	lea    eax,[ebx+0x14]
c0003554:	89 ca                	mov    edx,ecx
c0003556:	5b                   	pop    ebx
c0003557:	5e                   	pop    esi
c0003558:	e9 eb eb ff ff       	jmp    c0002148 <st_word>
c000355d:	5b                   	pop    ebx
c000355e:	5e                   	pop    esi
c000355f:	c3                   	ret    

c0003560 <get_fat.isra.2>:
c0003560:	b9 01 00 00 00       	mov    ecx,0x1
c0003565:	83 fa 01             	cmp    edx,0x1
c0003568:	0f 86 f3 00 00 00    	jbe    c0003661 <get_fat.isra.2+0x101>
c000356e:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003571:	0f 83 ea 00 00 00    	jae    c0003661 <get_fat.isra.2+0x101>
c0003577:	55                   	push   ebp
c0003578:	57                   	push   edi
c0003579:	89 c7                	mov    edi,eax
c000357b:	56                   	push   esi
c000357c:	89 d6                	mov    esi,edx
c000357e:	53                   	push   ebx
c000357f:	83 ec 0c             	sub    esp,0xc
c0003582:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003585:	83 f8 02             	cmp    eax,0x2
c0003588:	74 78                	je     c0003602 <get_fat.isra.2+0xa2>
c000358a:	83 f8 03             	cmp    eax,0x3
c000358d:	0f 84 96 00 00 00    	je     c0003629 <get_fat.isra.2+0xc9>
c0003593:	48                   	dec    eax
c0003594:	0f 85 bd 00 00 00    	jne    c0003657 <get_fat.isra.2+0xf7>
c000359a:	89 d3                	mov    ebx,edx
c000359c:	89 f8                	mov    eax,edi
c000359e:	d1 eb                	shr    ebx,1
c00035a0:	01 d3                	add    ebx,edx
c00035a2:	89 da                	mov    edx,ebx
c00035a4:	c1 ea 09             	shr    edx,0x9
c00035a7:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00035aa:	e8 db f0 ff ff       	call   c000268a <move_window>
c00035af:	85 c0                	test   eax,eax
c00035b1:	74 08                	je     c00035bb <get_fat.isra.2+0x5b>
c00035b3:	83 c9 ff             	or     ecx,0xffffffff
c00035b6:	e9 9c 00 00 00       	jmp    c0003657 <get_fat.isra.2+0xf7>
c00035bb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00035be:	89 f8                	mov    eax,edi
c00035c0:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035c6:	89 ea                	mov    edx,ebp
c00035c8:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c00035cc:	c1 ea 09             	shr    edx,0x9
c00035cf:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00035d2:	e8 b3 f0 ff ff       	call   c000268a <move_window>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	75 d8                	jne    c00035b3 <get_fat.isra.2+0x53>
c00035db:	0f b6 c3             	movzx  eax,bl
c00035de:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00035e4:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c00035e9:	c1 e3 08             	shl    ebx,0x8
c00035ec:	09 c3                	or     ebx,eax
c00035ee:	89 d9                	mov    ecx,ebx
c00035f0:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00035f6:	83 e6 01             	and    esi,0x1
c00035f9:	74 5c                	je     c0003657 <get_fat.isra.2+0xf7>
c00035fb:	89 d9                	mov    ecx,ebx
c00035fd:	c1 e9 04             	shr    ecx,0x4
c0003600:	eb 55                	jmp    c0003657 <get_fat.isra.2+0xf7>
c0003602:	c1 ea 08             	shr    edx,0x8
c0003605:	89 f8                	mov    eax,edi
c0003607:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000360a:	e8 7b f0 ff ff       	call   c000268a <move_window>
c000360f:	85 c0                	test   eax,eax
c0003611:	75 a0                	jne    c00035b3 <get_fat.isra.2+0x53>
c0003613:	01 f6                	add    esi,esi
c0003615:	81 e6 fe 01 00 00    	and    esi,0x1fe
c000361b:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000361f:	e8 ff ea ff ff       	call   c0002123 <ld_word>
c0003624:	0f b7 c8             	movzx  ecx,ax
c0003627:	eb 2e                	jmp    c0003657 <get_fat.isra.2+0xf7>
c0003629:	c1 ea 07             	shr    edx,0x7
c000362c:	89 f8                	mov    eax,edi
c000362e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003631:	e8 54 f0 ff ff       	call   c000268a <move_window>
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 75 ff ff ff    	jne    c00035b3 <get_fat.isra.2+0x53>
c000363e:	c1 e6 02             	shl    esi,0x2
c0003641:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003647:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000364b:	e8 e0 ea ff ff       	call   c0002130 <ld_dword>
c0003650:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003655:	89 c1                	mov    ecx,eax
c0003657:	83 c4 0c             	add    esp,0xc
c000365a:	89 c8                	mov    eax,ecx
c000365c:	5b                   	pop    ebx
c000365d:	5e                   	pop    esi
c000365e:	5f                   	pop    edi
c000365f:	5d                   	pop    ebp
c0003660:	c3                   	ret    
c0003661:	89 c8                	mov    eax,ecx
c0003663:	c3                   	ret    

c0003664 <dir_sdi>:
c0003664:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000366a:	0f 87 b6 00 00 00    	ja     c0003726 <dir_sdi+0xc2>
c0003670:	55                   	push   ebp
c0003671:	57                   	push   edi
c0003672:	56                   	push   esi
c0003673:	53                   	push   ebx
c0003674:	89 d3                	mov    ebx,edx
c0003676:	83 ec 1c             	sub    esp,0x1c
c0003679:	f6 c2 1f             	test   dl,0x1f
c000367c:	74 0a                	je     c0003688 <dir_sdi+0x24>
c000367e:	b8 02 00 00 00       	mov    eax,0x2
c0003683:	e9 96 00 00 00       	jmp    c000371e <dir_sdi+0xba>
c0003688:	89 c6                	mov    esi,eax
c000368a:	8b 38                	mov    edi,DWORD PTR [eax]
c000368c:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000368f:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003692:	85 c9                	test   ecx,ecx
c0003694:	75 23                	jne    c00036b9 <dir_sdi+0x55>
c0003696:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003699:	76 07                	jbe    c00036a2 <dir_sdi+0x3e>
c000369b:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000369e:	85 c0                	test   eax,eax
c00036a0:	75 15                	jne    c00036b7 <dir_sdi+0x53>
c00036a2:	89 da                	mov    edx,ebx
c00036a4:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00036a8:	c1 ea 05             	shr    edx,0x5
c00036ab:	39 c2                	cmp    edx,eax
c00036ad:	73 cf                	jae    c000367e <dir_sdi+0x1a>
c00036af:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c00036b2:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00036b5:	eb 3d                	jmp    c00036f4 <dir_sdi+0x90>
c00036b7:	89 c1                	mov    ecx,eax
c00036b9:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00036bd:	c1 e5 09             	shl    ebp,0x9
c00036c0:	89 ca                	mov    edx,ecx
c00036c2:	39 eb                	cmp    ebx,ebp
c00036c4:	72 1c                	jb     c00036e2 <dir_sdi+0x7e>
c00036c6:	8b 06                	mov    eax,DWORD PTR [esi]
c00036c8:	e8 93 fe ff ff       	call   c0003560 <get_fat.isra.2>
c00036cd:	89 c1                	mov    ecx,eax
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	74 45                	je     c0003719 <dir_sdi+0xb5>
c00036d4:	83 f8 01             	cmp    eax,0x1
c00036d7:	76 a5                	jbe    c000367e <dir_sdi+0x1a>
c00036d9:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00036dc:	76 a0                	jbe    c000367e <dir_sdi+0x1a>
c00036de:	29 eb                	sub    ebx,ebp
c00036e0:	eb de                	jmp    c00036c0 <dir_sdi+0x5c>
c00036e2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036e6:	89 f8                	mov    eax,edi
c00036e8:	e8 8d ec ff ff       	call   c000237a <clst2sect>
c00036ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036f1:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00036f4:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00036f7:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00036fa:	85 d2                	test   edx,edx
c00036fc:	74 80                	je     c000367e <dir_sdi+0x1a>
c00036fe:	89 d8                	mov    eax,ebx
c0003700:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003706:	c1 e8 09             	shr    eax,0x9
c0003709:	01 d0                	add    eax,edx
c000370b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000370e:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c0003712:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003715:	31 c0                	xor    eax,eax
c0003717:	eb 05                	jmp    c000371e <dir_sdi+0xba>
c0003719:	b8 01 00 00 00       	mov    eax,0x1
c000371e:	83 c4 1c             	add    esp,0x1c
c0003721:	5b                   	pop    ebx
c0003722:	5e                   	pop    esi
c0003723:	5f                   	pop    edi
c0003724:	5d                   	pop    ebp
c0003725:	c3                   	ret    
c0003726:	b8 02 00 00 00       	mov    eax,0x2
c000372b:	c3                   	ret    

c000372c <create_chain>:
c000372c:	55                   	push   ebp
c000372d:	89 c5                	mov    ebp,eax
c000372f:	57                   	push   edi
c0003730:	89 d7                	mov    edi,edx
c0003732:	56                   	push   esi
c0003733:	53                   	push   ebx
c0003734:	83 ec 1c             	sub    esp,0x1c
c0003737:	85 d2                	test   edx,edx
c0003739:	8b 30                	mov    esi,DWORD PTR [eax]
c000373b:	75 0e                	jne    c000374b <create_chain+0x1f>
c000373d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003740:	85 c9                	test   ecx,ecx
c0003742:	74 34                	je     c0003778 <create_chain+0x4c>
c0003744:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003747:	77 34                	ja     c000377d <create_chain+0x51>
c0003749:	eb 2d                	jmp    c0003778 <create_chain+0x4c>
c000374b:	89 f0                	mov    eax,esi
c000374d:	e8 0e fe ff ff       	call   c0003560 <get_fat.isra.2>
c0003752:	89 c3                	mov    ebx,eax
c0003754:	83 f8 01             	cmp    eax,0x1
c0003757:	77 0a                	ja     c0003763 <create_chain+0x37>
c0003759:	bb 01 00 00 00       	mov    ebx,0x1
c000375e:	e9 fe 00 00 00       	jmp    c0003861 <create_chain+0x135>
c0003763:	83 f8 ff             	cmp    eax,0xffffffff
c0003766:	0f 84 f2 00 00 00    	je     c000385e <create_chain+0x132>
c000376c:	89 f9                	mov    ecx,edi
c000376e:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003771:	76 0a                	jbe    c000377d <create_chain+0x51>
c0003773:	e9 e9 00 00 00       	jmp    c0003861 <create_chain+0x135>
c0003778:	b9 01 00 00 00       	mov    ecx,0x1
c000377d:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003781:	75 07                	jne    c000378a <create_chain+0x5e>
c0003783:	31 db                	xor    ebx,ebx
c0003785:	e9 d7 00 00 00       	jmp    c0003861 <create_chain+0x135>
c000378a:	39 f9                	cmp    ecx,edi
c000378c:	75 46                	jne    c00037d4 <create_chain+0xa8>
c000378e:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003791:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003794:	77 05                	ja     c000379b <create_chain+0x6f>
c0003796:	bb 02 00 00 00       	mov    ebx,0x2
c000379b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000379f:	89 da                	mov    edx,ebx
c00037a1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00037a4:	e8 b7 fd ff ff       	call   c0003560 <get_fat.isra.2>
c00037a9:	83 f8 01             	cmp    eax,0x1
c00037ac:	74 ab                	je     c0003759 <create_chain+0x2d>
c00037ae:	83 f8 ff             	cmp    eax,0xffffffff
c00037b1:	0f 84 a7 00 00 00    	je     c000385e <create_chain+0x132>
c00037b7:	85 c0                	test   eax,eax
c00037b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00037bd:	74 11                	je     c00037d0 <create_chain+0xa4>
c00037bf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00037c2:	83 f8 01             	cmp    eax,0x1
c00037c5:	76 0d                	jbe    c00037d4 <create_chain+0xa8>
c00037c7:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c00037ca:	73 08                	jae    c00037d4 <create_chain+0xa8>
c00037cc:	89 c1                	mov    ecx,eax
c00037ce:	eb 04                	jmp    c00037d4 <create_chain+0xa8>
c00037d0:	85 db                	test   ebx,ebx
c00037d2:	75 3d                	jne    c0003811 <create_chain+0xe5>
c00037d4:	89 cb                	mov    ebx,ecx
c00037d6:	43                   	inc    ebx
c00037d7:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00037da:	77 0a                	ja     c00037e6 <create_chain+0xba>
c00037dc:	83 f9 01             	cmp    ecx,0x1
c00037df:	76 a2                	jbe    c0003783 <create_chain+0x57>
c00037e1:	bb 02 00 00 00       	mov    ebx,0x2
c00037e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00037ea:	89 da                	mov    edx,ebx
c00037ec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00037ef:	e8 6c fd ff ff       	call   c0003560 <get_fat.isra.2>
c00037f4:	85 c0                	test   eax,eax
c00037f6:	74 19                	je     c0003811 <create_chain+0xe5>
c00037f8:	83 f8 01             	cmp    eax,0x1
c00037fb:	0f 84 58 ff ff ff    	je     c0003759 <create_chain+0x2d>
c0003801:	40                   	inc    eax
c0003802:	74 5a                	je     c000385e <create_chain+0x132>
c0003804:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003808:	39 cb                	cmp    ebx,ecx
c000380a:	75 ca                	jne    c00037d6 <create_chain+0xaa>
c000380c:	e9 72 ff ff ff       	jmp    c0003783 <create_chain+0x57>
c0003811:	83 c9 ff             	or     ecx,0xffffffff
c0003814:	89 da                	mov    edx,ebx
c0003816:	89 f0                	mov    eax,esi
c0003818:	e8 b1 f2 ff ff       	call   c0002ace <put_fat>
c000381d:	85 c0                	test   eax,eax
c000381f:	75 36                	jne    c0003857 <create_chain+0x12b>
c0003821:	85 ff                	test   edi,edi
c0003823:	75 16                	jne    c000383b <create_chain+0x10f>
c0003825:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003828:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c000382b:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c000382e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003831:	39 d0                	cmp    eax,edx
c0003833:	77 17                	ja     c000384c <create_chain+0x120>
c0003835:	48                   	dec    eax
c0003836:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003839:	eb 11                	jmp    c000384c <create_chain+0x120>
c000383b:	89 d9                	mov    ecx,ebx
c000383d:	89 fa                	mov    edx,edi
c000383f:	89 f0                	mov    eax,esi
c0003841:	e8 88 f2 ff ff       	call   c0002ace <put_fat>
c0003846:	85 c0                	test   eax,eax
c0003848:	74 db                	je     c0003825 <create_chain+0xf9>
c000384a:	eb 0b                	jmp    c0003857 <create_chain+0x12b>
c000384c:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c000384f:	83 c8 01             	or     eax,0x1
c0003852:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003855:	eb 0a                	jmp    c0003861 <create_chain+0x135>
c0003857:	48                   	dec    eax
c0003858:	0f 85 fb fe ff ff    	jne    c0003759 <create_chain+0x2d>
c000385e:	83 cb ff             	or     ebx,0xffffffff
c0003861:	83 c4 1c             	add    esp,0x1c
c0003864:	89 d8                	mov    eax,ebx
c0003866:	5b                   	pop    ebx
c0003867:	5e                   	pop    esi
c0003868:	5f                   	pop    edi
c0003869:	5d                   	pop    ebp
c000386a:	c3                   	ret    

c000386b <remove_chain>:
c000386b:	55                   	push   ebp
c000386c:	57                   	push   edi
c000386d:	56                   	push   esi
c000386e:	89 d6                	mov    esi,edx
c0003870:	53                   	push   ebx
c0003871:	83 ec 0c             	sub    esp,0xc
c0003874:	83 fa 01             	cmp    edx,0x1
c0003877:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003879:	76 6a                	jbe    c00038e5 <remove_chain+0x7a>
c000387b:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000387e:	76 65                	jbe    c00038e5 <remove_chain+0x7a>
c0003880:	89 c5                	mov    ebp,eax
c0003882:	89 ca                	mov    edx,ecx
c0003884:	85 c9                	test   ecx,ecx
c0003886:	74 0e                	je     c0003896 <remove_chain+0x2b>
c0003888:	83 c9 ff             	or     ecx,0xffffffff
c000388b:	89 d8                	mov    eax,ebx
c000388d:	e8 3c f2 ff ff       	call   c0002ace <put_fat>
c0003892:	85 c0                	test   eax,eax
c0003894:	75 5b                	jne    c00038f1 <remove_chain+0x86>
c0003896:	89 f2                	mov    edx,esi
c0003898:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000389b:	e8 c0 fc ff ff       	call   c0003560 <get_fat.isra.2>
c00038a0:	89 c7                	mov    edi,eax
c00038a2:	85 c0                	test   eax,eax
c00038a4:	75 04                	jne    c00038aa <remove_chain+0x3f>
c00038a6:	31 c0                	xor    eax,eax
c00038a8:	eb 47                	jmp    c00038f1 <remove_chain+0x86>
c00038aa:	83 f8 01             	cmp    eax,0x1
c00038ad:	74 36                	je     c00038e5 <remove_chain+0x7a>
c00038af:	83 f8 ff             	cmp    eax,0xffffffff
c00038b2:	74 38                	je     c00038ec <remove_chain+0x81>
c00038b4:	31 c9                	xor    ecx,ecx
c00038b6:	89 f2                	mov    edx,esi
c00038b8:	89 d8                	mov    eax,ebx
c00038ba:	e8 0f f2 ff ff       	call   c0002ace <put_fat>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2e                	jne    c00038f1 <remove_chain+0x86>
c00038c3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00038c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c9:	8d 4a fe             	lea    ecx,[edx-0x2]
c00038cc:	39 c8                	cmp    eax,ecx
c00038ce:	73 0d                	jae    c00038dd <remove_chain+0x72>
c00038d0:	40                   	inc    eax
c00038d1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00038d4:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00038d7:	83 c8 01             	or     eax,0x1
c00038da:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00038dd:	89 fe                	mov    esi,edi
c00038df:	39 fa                	cmp    edx,edi
c00038e1:	77 b3                	ja     c0003896 <remove_chain+0x2b>
c00038e3:	eb c1                	jmp    c00038a6 <remove_chain+0x3b>
c00038e5:	b8 02 00 00 00       	mov    eax,0x2
c00038ea:	eb 05                	jmp    c00038f1 <remove_chain+0x86>
c00038ec:	b8 01 00 00 00       	mov    eax,0x1
c00038f1:	83 c4 0c             	add    esp,0xc
c00038f4:	5b                   	pop    ebx
c00038f5:	5e                   	pop    esi
c00038f6:	5f                   	pop    edi
c00038f7:	5d                   	pop    ebp
c00038f8:	c3                   	ret    

c00038f9 <dir_next>:
c00038f9:	55                   	push   ebp
c00038fa:	57                   	push   edi
c00038fb:	56                   	push   esi
c00038fc:	53                   	push   ebx
c00038fd:	83 ec 1c             	sub    esp,0x1c
c0003900:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003903:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003905:	83 c7 20             	add    edi,0x20
c0003908:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c000390e:	76 07                	jbe    c0003917 <dir_next+0x1e>
c0003910:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003917:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c000391a:	b9 04 00 00 00       	mov    ecx,0x4
c000391f:	85 f6                	test   esi,esi
c0003921:	0f 84 cd 00 00 00    	je     c00039f4 <dir_next+0xfb>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	89 d1                	mov    ecx,edx
c000392b:	89 f8                	mov    eax,edi
c000392d:	25 ff 01 00 00       	and    eax,0x1ff
c0003932:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003936:	0f 85 a8 00 00 00    	jne    c00039e4 <dir_next+0xeb>
c000393c:	46                   	inc    esi
c000393d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003940:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003943:	85 d2                	test   edx,edx
c0003945:	75 22                	jne    c0003969 <dir_next+0x70>
c0003947:	89 fa                	mov    edx,edi
c0003949:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000394d:	c1 ea 05             	shr    edx,0x5
c0003950:	39 c2                	cmp    edx,eax
c0003952:	0f 82 8c 00 00 00    	jb     c00039e4 <dir_next+0xeb>
c0003958:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000395f:	b9 04 00 00 00       	mov    ecx,0x4
c0003964:	e9 8b 00 00 00       	jmp    c00039f4 <dir_next+0xfb>
c0003969:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000396d:	89 fe                	mov    esi,edi
c000396f:	48                   	dec    eax
c0003970:	c1 ee 09             	shr    esi,0x9
c0003973:	85 f0                	test   eax,esi
c0003975:	75 6d                	jne    c00039e4 <dir_next+0xeb>
c0003977:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000397b:	89 e8                	mov    eax,ebp
c000397d:	e8 de fb ff ff       	call   c0003560 <get_fat.isra.2>
c0003982:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003986:	89 c6                	mov    esi,eax
c0003988:	83 f8 01             	cmp    eax,0x1
c000398b:	77 07                	ja     c0003994 <dir_next+0x9b>
c000398d:	b9 02 00 00 00       	mov    ecx,0x2
c0003992:	eb 60                	jmp    c00039f4 <dir_next+0xfb>
c0003994:	83 f8 ff             	cmp    eax,0xffffffff
c0003997:	75 07                	jne    c00039a0 <dir_next+0xa7>
c0003999:	b9 01 00 00 00       	mov    ecx,0x1
c000399e:	eb 54                	jmp    c00039f4 <dir_next+0xfb>
c00039a0:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00039a3:	77 30                	ja     c00039d5 <dir_next+0xdc>
c00039a5:	85 c9                	test   ecx,ecx
c00039a7:	74 af                	je     c0003958 <dir_next+0x5f>
c00039a9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	e8 79 fd ff ff       	call   c000372c <create_chain>
c00039b3:	b9 07 00 00 00       	mov    ecx,0x7
c00039b8:	89 c6                	mov    esi,eax
c00039ba:	85 c0                	test   eax,eax
c00039bc:	74 36                	je     c00039f4 <dir_next+0xfb>
c00039be:	83 f8 01             	cmp    eax,0x1
c00039c1:	74 ca                	je     c000398d <dir_next+0x94>
c00039c3:	83 f8 ff             	cmp    eax,0xffffffff
c00039c6:	74 d1                	je     c0003999 <dir_next+0xa0>
c00039c8:	89 c2                	mov    edx,eax
c00039ca:	89 e8                	mov    eax,ebp
c00039cc:	e8 54 f2 ff ff       	call   c0002c25 <dir_clear>
c00039d1:	85 c0                	test   eax,eax
c00039d3:	75 c4                	jne    c0003999 <dir_next+0xa0>
c00039d5:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00039d8:	89 f2                	mov    edx,esi
c00039da:	89 e8                	mov    eax,ebp
c00039dc:	e8 99 e9 ff ff       	call   c000237a <clst2sect>
c00039e1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00039e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00039e8:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00039eb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00039ef:	31 c9                	xor    ecx,ecx
c00039f1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00039f4:	83 c4 1c             	add    esp,0x1c
c00039f7:	89 c8                	mov    eax,ecx
c00039f9:	5b                   	pop    ebx
c00039fa:	5e                   	pop    esi
c00039fb:	5f                   	pop    edi
c00039fc:	5d                   	pop    ebp
c00039fd:	c3                   	ret    

c00039fe <dir_alloc>:
c00039fe:	55                   	push   ebp
c00039ff:	89 c5                	mov    ebp,eax
c0003a01:	57                   	push   edi
c0003a02:	89 d7                	mov    edi,edx
c0003a04:	56                   	push   esi
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	53                   	push   ebx
c0003a08:	83 ec 0c             	sub    esp,0xc
c0003a0b:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a0d:	e8 52 fc ff ff       	call   c0003664 <dir_sdi>
c0003a12:	85 c0                	test   eax,eax
c0003a14:	75 3b                	jne    c0003a51 <dir_alloc+0x53>
c0003a16:	31 db                	xor    ebx,ebx
c0003a18:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003a1b:	89 f0                	mov    eax,esi
c0003a1d:	e8 68 ec ff ff       	call   c000268a <move_window>
c0003a22:	85 c0                	test   eax,eax
c0003a24:	75 2b                	jne    c0003a51 <dir_alloc+0x53>
c0003a26:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003a29:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003a2c:	85 d2                	test   edx,edx
c0003a2e:	74 08                	je     c0003a38 <dir_alloc+0x3a>
c0003a30:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003a36:	75 07                	jne    c0003a3f <dir_alloc+0x41>
c0003a38:	43                   	inc    ebx
c0003a39:	39 fb                	cmp    ebx,edi
c0003a3b:	75 04                	jne    c0003a41 <dir_alloc+0x43>
c0003a3d:	eb 1c                	jmp    c0003a5b <dir_alloc+0x5d>
c0003a3f:	31 db                	xor    ebx,ebx
c0003a41:	ba 01 00 00 00       	mov    edx,0x1
c0003a46:	89 e8                	mov    eax,ebp
c0003a48:	e8 ac fe ff ff       	call   c00038f9 <dir_next>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	74 c7                	je     c0003a18 <dir_alloc+0x1a>
c0003a51:	83 f8 04             	cmp    eax,0x4
c0003a54:	75 05                	jne    c0003a5b <dir_alloc+0x5d>
c0003a56:	b8 07 00 00 00       	mov    eax,0x7
c0003a5b:	83 c4 0c             	add    esp,0xc
c0003a5e:	5b                   	pop    ebx
c0003a5f:	5e                   	pop    esi
c0003a60:	5f                   	pop    edi
c0003a61:	5d                   	pop    ebp
c0003a62:	c3                   	ret    

c0003a63 <dir_read>:
c0003a63:	55                   	push   ebp
c0003a64:	57                   	push   edi
c0003a65:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a6a:	56                   	push   esi
c0003a6b:	be 04 00 00 00       	mov    esi,0x4
c0003a70:	53                   	push   ebx
c0003a71:	89 c3                	mov    ebx,eax
c0003a73:	83 ec 1c             	sub    esp,0x1c
c0003a76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a7a:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003a7c:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003a81:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a84:	85 d2                	test   edx,edx
c0003a86:	0f 84 e3 00 00 00    	je     c0003b6f <dir_read+0x10c>
c0003a8c:	89 e8                	mov    eax,ebp
c0003a8e:	e8 f7 eb ff ff       	call   c000268a <move_window>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 dd 00 00 00    	jne    c0003b7a <dir_read+0x117>
c0003a9d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa0:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003aa3:	88 04 24             	mov    BYTE PTR [esp],al
c0003aa6:	85 c0                	test   eax,eax
c0003aa8:	0f 84 c7 00 00 00    	je     c0003b75 <dir_read+0x112>
c0003aae:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003ab1:	83 e1 3f             	and    ecx,0x3f
c0003ab4:	83 f8 2e             	cmp    eax,0x2e
c0003ab7:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003aba:	0f 84 95 00 00 00    	je     c0003b55 <dir_read+0xf2>
c0003ac0:	3d e5 00 00 00       	cmp    eax,0xe5
c0003ac5:	0f 84 8a 00 00 00    	je     c0003b55 <dir_read+0xf2>
c0003acb:	0f b6 c9             	movzx  ecx,cl
c0003ace:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003ad2:	83 e1 df             	and    ecx,0xffffffdf
c0003ad5:	83 f9 08             	cmp    ecx,0x8
c0003ad8:	0f 94 c1             	sete   cl
c0003adb:	0f b6 c9             	movzx  ecx,cl
c0003ade:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003ae2:	75 71                	jne    c0003b55 <dir_read+0xf2>
c0003ae4:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003ae9:	75 4a                	jne    c0003b35 <dir_read+0xd2>
c0003aeb:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c0003aef:	74 16                	je     c0003b07 <dir_read+0xa4>
c0003af1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003af4:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003afb:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003aff:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b02:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b05:	eb 0e                	jmp    c0003b15 <dir_read+0xb2>
c0003b07:	89 f9                	mov    ecx,edi
c0003b09:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b0e:	0f b6 c9             	movzx  ecx,cl
c0003b11:	39 c1                	cmp    ecx,eax
c0003b13:	75 45                	jne    c0003b5a <dir_read+0xf7>
c0003b15:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b19:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b1e:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c0003b21:	75 37                	jne    c0003b5a <dir_read+0xf7>
c0003b23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003b26:	e8 6c e8 ff ff       	call   c0002397 <pick_lfn>
c0003b2b:	85 c0                	test   eax,eax
c0003b2d:	74 2b                	je     c0003b5a <dir_read+0xf7>
c0003b2f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003b32:	4f                   	dec    edi
c0003b33:	eb 25                	jmp    c0003b5a <dir_read+0xf7>
c0003b35:	89 f8                	mov    eax,edi
c0003b37:	84 c0                	test   al,al
c0003b39:	75 11                	jne    c0003b4c <dir_read+0xe9>
c0003b3b:	89 d0                	mov    eax,edx
c0003b3d:	e8 32 ea ff ff       	call   c0002574 <sum_sfn>
c0003b42:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003b46:	75 04                	jne    c0003b4c <dir_read+0xe9>
c0003b48:	31 f6                	xor    esi,esi
c0003b4a:	eb 35                	jmp    c0003b81 <dir_read+0x11e>
c0003b4c:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b53:	eb 2c                	jmp    c0003b81 <dir_read+0x11e>
c0003b55:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b5a:	31 d2                	xor    edx,edx
c0003b5c:	89 d8                	mov    eax,ebx
c0003b5e:	e8 96 fd ff ff       	call   c00038f9 <dir_next>
c0003b63:	89 c6                	mov    esi,eax
c0003b65:	85 c0                	test   eax,eax
c0003b67:	0f 84 14 ff ff ff    	je     c0003a81 <dir_read+0x1e>
c0003b6d:	eb 0b                	jmp    c0003b7a <dir_read+0x117>
c0003b6f:	85 f6                	test   esi,esi
c0003b71:	74 d5                	je     c0003b48 <dir_read+0xe5>
c0003b73:	eb 05                	jmp    c0003b7a <dir_read+0x117>
c0003b75:	be 04 00 00 00       	mov    esi,0x4
c0003b7a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003b81:	83 c4 1c             	add    esp,0x1c
c0003b84:	89 f0                	mov    eax,esi
c0003b86:	5b                   	pop    ebx
c0003b87:	5e                   	pop    esi
c0003b88:	5f                   	pop    edi
c0003b89:	5d                   	pop    ebp
c0003b8a:	c3                   	ret    

c0003b8b <dir_remove>:
c0003b8b:	57                   	push   edi
c0003b8c:	56                   	push   esi
c0003b8d:	53                   	push   ebx
c0003b8e:	89 c3                	mov    ebx,eax
c0003b90:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003b93:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b95:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003b98:	83 fa ff             	cmp    edx,0xffffffff
c0003b9b:	74 09                	je     c0003ba6 <dir_remove+0x1b>
c0003b9d:	e8 c2 fa ff ff       	call   c0003664 <dir_sdi>
c0003ba2:	85 c0                	test   eax,eax
c0003ba4:	75 34                	jne    c0003bda <dir_remove+0x4f>
c0003ba6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ba9:	89 f0                	mov    eax,esi
c0003bab:	e8 da ea ff ff       	call   c000268a <move_window>
c0003bb0:	85 c0                	test   eax,eax
c0003bb2:	75 1c                	jne    c0003bd0 <dir_remove+0x45>
c0003bb4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bb7:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003bba:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003bbe:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003bc1:	73 17                	jae    c0003bda <dir_remove+0x4f>
c0003bc3:	31 d2                	xor    edx,edx
c0003bc5:	89 d8                	mov    eax,ebx
c0003bc7:	e8 2d fd ff ff       	call   c00038f9 <dir_next>
c0003bcc:	85 c0                	test   eax,eax
c0003bce:	74 d6                	je     c0003ba6 <dir_remove+0x1b>
c0003bd0:	83 f8 04             	cmp    eax,0x4
c0003bd3:	75 05                	jne    c0003bda <dir_remove+0x4f>
c0003bd5:	b8 02 00 00 00       	mov    eax,0x2
c0003bda:	5b                   	pop    ebx
c0003bdb:	5e                   	pop    esi
c0003bdc:	5f                   	pop    edi
c0003bdd:	c3                   	ret    

c0003bde <dir_find>:
c0003bde:	55                   	push   ebp
c0003bdf:	31 d2                	xor    edx,edx
c0003be1:	57                   	push   edi
c0003be2:	56                   	push   esi
c0003be3:	53                   	push   ebx
c0003be4:	89 c3                	mov    ebx,eax
c0003be6:	83 ec 1c             	sub    esp,0x1c
c0003be9:	8b 00                	mov    eax,DWORD PTR [eax]
c0003beb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bef:	89 d8                	mov    eax,ebx
c0003bf1:	e8 6e fa ff ff       	call   c0003664 <dir_sdi>
c0003bf6:	89 c6                	mov    esi,eax
c0003bf8:	85 c0                	test   eax,eax
c0003bfa:	0f 85 1d 01 00 00    	jne    c0003d1d <dir_find+0x13f>
c0003c00:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003c07:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003c0c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003c11:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003c14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c18:	e8 6d ea ff ff       	call   c000268a <move_window>
c0003c1d:	89 c6                	mov    esi,eax
c0003c1f:	85 c0                	test   eax,eax
c0003c21:	0f 85 f6 00 00 00    	jne    c0003d1d <dir_find+0x13f>
c0003c27:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003c2a:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003c2e:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003c32:	85 c9                	test   ecx,ecx
c0003c34:	0f 84 de 00 00 00    	je     c0003d18 <dir_find+0x13a>
c0003c3a:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003c3d:	89 d0                	mov    eax,edx
c0003c3f:	83 e0 3f             	and    eax,0x3f
c0003c42:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003c48:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003c4b:	0f 84 a6 00 00 00    	je     c0003cf7 <dir_find+0x119>
c0003c51:	80 e2 08             	and    dl,0x8
c0003c54:	0f b6 c0             	movzx  eax,al
c0003c57:	74 0b                	je     c0003c64 <dir_find+0x86>
c0003c59:	83 f8 0f             	cmp    eax,0xf
c0003c5c:	0f 85 95 00 00 00    	jne    c0003cf7 <dir_find+0x119>
c0003c62:	eb 05                	jmp    c0003c69 <dir_find+0x8b>
c0003c64:	83 f8 0f             	cmp    eax,0xf
c0003c67:	75 62                	jne    c0003ccb <dir_find+0xed>
c0003c69:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003c6d:	0f 85 90 00 00 00    	jne    c0003d03 <dir_find+0x125>
c0003c73:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003c78:	74 17                	je     c0003c91 <dir_find+0xb3>
c0003c7a:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003c7d:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003c85:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003c89:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c8c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003c8f:	eb 13                	jmp    c0003ca4 <dir_find+0xc6>
c0003c91:	89 f8                	mov    eax,edi
c0003c93:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003c98:	0f b6 d0             	movzx  edx,al
c0003c9b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003ca0:	39 c2                	cmp    edx,eax
c0003ca2:	75 5f                	jne    c0003d03 <dir_find+0x125>
c0003ca4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003ca8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003cad:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003cb0:	75 51                	jne    c0003d03 <dir_find+0x125>
c0003cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cb6:	89 ea                	mov    edx,ebp
c0003cb8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbb:	e8 37 f3 ff ff       	call   c0002ff7 <cmp_lfn>
c0003cc0:	85 c0                	test   eax,eax
c0003cc2:	74 3f                	je     c0003d03 <dir_find+0x125>
c0003cc4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003cc8:	4f                   	dec    edi
c0003cc9:	eb 38                	jmp    c0003d03 <dir_find+0x125>
c0003ccb:	89 f8                	mov    eax,edi
c0003ccd:	84 c0                	test   al,al
c0003ccf:	75 0d                	jne    c0003cde <dir_find+0x100>
c0003cd1:	89 e8                	mov    eax,ebp
c0003cd3:	e8 9c e8 ff ff       	call   c0002574 <sum_sfn>
c0003cd8:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003cdc:	74 3f                	je     c0003d1d <dir_find+0x13f>
c0003cde:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003ce2:	75 13                	jne    c0003cf7 <dir_find+0x119>
c0003ce4:	8d 53 20             	lea    edx,[ebx+0x20]
c0003ce7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cec:	89 e8                	mov    eax,ebp
c0003cee:	e8 7c e4 ff ff       	call   c000216f <mem_cmp>
c0003cf3:	85 c0                	test   eax,eax
c0003cf5:	74 26                	je     c0003d1d <dir_find+0x13f>
c0003cf7:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003cfe:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003d03:	31 d2                	xor    edx,edx
c0003d05:	89 d8                	mov    eax,ebx
c0003d07:	e8 ed fb ff ff       	call   c00038f9 <dir_next>
c0003d0c:	89 c6                	mov    esi,eax
c0003d0e:	85 c0                	test   eax,eax
c0003d10:	0f 84 fb fe ff ff    	je     c0003c11 <dir_find+0x33>
c0003d16:	eb 05                	jmp    c0003d1d <dir_find+0x13f>
c0003d18:	be 04 00 00 00       	mov    esi,0x4
c0003d1d:	83 c4 1c             	add    esp,0x1c
c0003d20:	89 f0                	mov    eax,esi
c0003d22:	5b                   	pop    ebx
c0003d23:	5e                   	pop    esi
c0003d24:	5f                   	pop    edi
c0003d25:	5d                   	pop    ebp
c0003d26:	c3                   	ret    

c0003d27 <follow_path>:
c0003d27:	56                   	push   esi
c0003d28:	53                   	push   ebx
c0003d29:	89 c3                	mov    ebx,eax
c0003d2b:	83 ec 14             	sub    esp,0x14
c0003d2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003d32:	8b 30                	mov    esi,DWORD PTR [eax]
c0003d34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d38:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003d3b:	83 fa 5c             	cmp    edx,0x5c
c0003d3e:	75 07                	jne    c0003d47 <follow_path+0x20>
c0003d40:	40                   	inc    eax
c0003d41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d45:	eb ed                	jmp    c0003d34 <follow_path+0xd>
c0003d47:	83 fa 2f             	cmp    edx,0x2f
c0003d4a:	74 f4                	je     c0003d40 <follow_path+0x19>
c0003d4c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003d53:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003d56:	77 3e                	ja     c0003d96 <follow_path+0x6f>
c0003d58:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003d5c:	31 d2                	xor    edx,edx
c0003d5e:	89 d8                	mov    eax,ebx
c0003d60:	e8 ff f8 ff ff       	call   c0003664 <dir_sdi>
c0003d65:	eb 4f                	jmp    c0003db6 <follow_path+0x8f>
c0003d67:	89 d8                	mov    eax,ebx
c0003d69:	e8 70 fe ff ff       	call   c0003bde <dir_find>
c0003d6e:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003d71:	85 c0                	test   eax,eax
c0003d73:	75 32                	jne    c0003da7 <follow_path+0x80>
c0003d75:	80 e2 04             	and    dl,0x4
c0003d78:	75 3c                	jne    c0003db6 <follow_path+0x8f>
c0003d7a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003d7e:	74 31                	je     c0003db1 <follow_path+0x8a>
c0003d80:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003d83:	25 ff 01 00 00       	and    eax,0x1ff
c0003d88:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003d8c:	8a 06                	mov    al,BYTE PTR [esi]
c0003d8e:	e8 7c f7 ff ff       	call   c000350f <ld_clust.isra.0>
c0003d93:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003d96:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003d9a:	89 d8                	mov    eax,ebx
c0003d9c:	e8 7f ef ff ff       	call   c0002d20 <create_name>
c0003da1:	85 c0                	test   eax,eax
c0003da3:	74 c2                	je     c0003d67 <follow_path+0x40>
c0003da5:	eb 0f                	jmp    c0003db6 <follow_path+0x8f>
c0003da7:	83 f8 04             	cmp    eax,0x4
c0003daa:	75 0a                	jne    c0003db6 <follow_path+0x8f>
c0003dac:	80 e2 04             	and    dl,0x4
c0003daf:	75 05                	jne    c0003db6 <follow_path+0x8f>
c0003db1:	b8 05 00 00 00       	mov    eax,0x5
c0003db6:	83 c4 14             	add    esp,0x14
c0003db9:	5b                   	pop    ebx
c0003dba:	5e                   	pop    esi
c0003dbb:	c3                   	ret    

c0003dbc <dir_register>:
c0003dbc:	55                   	push   ebp
c0003dbd:	57                   	push   edi
c0003dbe:	56                   	push   esi
c0003dbf:	be 06 00 00 00       	mov    esi,0x6
c0003dc4:	53                   	push   ebx
c0003dc5:	83 ec 2c             	sub    esp,0x2c
c0003dc8:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003dcb:	80 e2 a0             	and    dl,0xa0
c0003dce:	0f 85 66 01 00 00    	jne    c0003f3a <dir_register+0x17e>
c0003dd4:	8b 38                	mov    edi,DWORD PTR [eax]
c0003dd6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003dde:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003de1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003de5:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003dea:	74 06                	je     c0003df2 <dir_register+0x36>
c0003dec:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003df0:	eb ef                	jmp    c0003de1 <dir_register+0x25>
c0003df2:	89 c3                	mov    ebx,eax
c0003df4:	b9 0c 00 00 00       	mov    ecx,0xc
c0003df9:	8d 40 20             	lea    eax,[eax+0x20]
c0003dfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e00:	89 c2                	mov    edx,eax
c0003e02:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003e06:	e8 44 e3 ff ff       	call   c000214f <mem_cpy>
c0003e0b:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003e10:	74 48                	je     c0003e5a <dir_register+0x9e>
c0003e12:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003e16:	bd 01 00 00 00       	mov    ebp,0x1
c0003e1b:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003e1e:	55                   	push   ebp
c0003e1f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003e23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003e27:	e8 86 e6 ff ff       	call   c00024b2 <gen_numname>
c0003e2c:	58                   	pop    eax
c0003e2d:	89 d8                	mov    eax,ebx
c0003e2f:	e8 aa fd ff ff       	call   c0003bde <dir_find>
c0003e34:	89 c6                	mov    esi,eax
c0003e36:	85 c0                	test   eax,eax
c0003e38:	75 10                	jne    c0003e4a <dir_register+0x8e>
c0003e3a:	45                   	inc    ebp
c0003e3b:	83 fd 64             	cmp    ebp,0x64
c0003e3e:	75 db                	jne    c0003e1b <dir_register+0x5f>
c0003e40:	be 07 00 00 00       	mov    esi,0x7
c0003e45:	e9 f0 00 00 00       	jmp    c0003f3a <dir_register+0x17e>
c0003e4a:	83 f8 04             	cmp    eax,0x4
c0003e4d:	0f 85 e7 00 00 00    	jne    c0003f3a <dir_register+0x17e>
c0003e53:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003e57:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003e5a:	bd 01 00 00 00       	mov    ebp,0x1
c0003e5f:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003e64:	74 13                	je     c0003e79 <dir_register+0xbd>
c0003e66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003e6a:	b9 0d 00 00 00       	mov    ecx,0xd
c0003e6f:	83 c0 0c             	add    eax,0xc
c0003e72:	31 d2                	xor    edx,edx
c0003e74:	f7 f1                	div    ecx
c0003e76:	8d 68 01             	lea    ebp,[eax+0x1]
c0003e79:	89 ea                	mov    edx,ebp
c0003e7b:	89 d8                	mov    eax,ebx
c0003e7d:	e8 7c fb ff ff       	call   c00039fe <dir_alloc>
c0003e82:	89 c6                	mov    esi,eax
c0003e84:	85 c0                	test   eax,eax
c0003e86:	0f 85 ae 00 00 00    	jne    c0003f3a <dir_register+0x17e>
c0003e8c:	4d                   	dec    ebp
c0003e8d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003e91:	74 67                	je     c0003efa <dir_register+0x13e>
c0003e93:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003e96:	89 e8                	mov    eax,ebp
c0003e98:	c1 e0 05             	shl    eax,0x5
c0003e9b:	29 c2                	sub    edx,eax
c0003e9d:	89 d8                	mov    eax,ebx
c0003e9f:	e8 c0 f7 ff ff       	call   c0003664 <dir_sdi>
c0003ea4:	89 c6                	mov    esi,eax
c0003ea6:	85 c0                	test   eax,eax
c0003ea8:	0f 85 8c 00 00 00    	jne    c0003f3a <dir_register+0x17e>
c0003eae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eb2:	e8 bd e6 ff ff       	call   c0002574 <sum_sfn>
c0003eb7:	0f b6 e8             	movzx  ebp,al
c0003eba:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ebd:	89 f8                	mov    eax,edi
c0003ebf:	e8 c6 e7 ff ff       	call   c000268a <move_window>
c0003ec4:	89 c6                	mov    esi,eax
c0003ec6:	85 c0                	test   eax,eax
c0003ec8:	75 70                	jne    c0003f3a <dir_register+0x17e>
c0003eca:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003ecf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ed2:	83 ec 0c             	sub    esp,0xc
c0003ed5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ed8:	55                   	push   ebp
c0003ed9:	e8 39 e5 ff ff       	call   c0002417 <put_lfn>
c0003ede:	31 d2                	xor    edx,edx
c0003ee0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ee4:	89 d8                	mov    eax,ebx
c0003ee6:	e8 0e fa ff ff       	call   c00038f9 <dir_next>
c0003eeb:	83 c4 10             	add    esp,0x10
c0003eee:	89 c6                	mov    esi,eax
c0003ef0:	85 c0                	test   eax,eax
c0003ef2:	75 46                	jne    c0003f3a <dir_register+0x17e>
c0003ef4:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003ef8:	75 c0                	jne    c0003eba <dir_register+0xfe>
c0003efa:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003efd:	89 f8                	mov    eax,edi
c0003eff:	e8 86 e7 ff ff       	call   c000268a <move_window>
c0003f04:	89 c6                	mov    esi,eax
c0003f06:	85 c0                	test   eax,eax
c0003f08:	75 30                	jne    c0003f3a <dir_register+0x17e>
c0003f0a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f0d:	b9 20 00 00 00       	mov    ecx,0x20
c0003f12:	31 d2                	xor    edx,edx
c0003f14:	e8 4b e2 ff ff       	call   c0002164 <mem_set>
c0003f19:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f20:	b9 0b 00 00 00       	mov    ecx,0xb
c0003f25:	e8 25 e2 ff ff       	call   c000214f <mem_cpy>
c0003f2a:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003f2d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003f30:	83 e0 18             	and    eax,0x18
c0003f33:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003f36:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003f3a:	83 c4 2c             	add    esp,0x2c
c0003f3d:	89 f0                	mov    eax,esi
c0003f3f:	5b                   	pop    ebx
c0003f40:	5e                   	pop    esi
c0003f41:	5f                   	pop    edi
c0003f42:	5d                   	pop    ebp
c0003f43:	c3                   	ret    

c0003f44 <f_mount>:
c0003f44:	53                   	push   ebx
c0003f45:	83 ec 18             	sub    esp,0x18
c0003f48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003f4c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003f50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f54:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003f58:	e8 37 e6 ff ff       	call   c0002594 <get_ldnumber>
c0003f5d:	89 c2                	mov    edx,eax
c0003f5f:	b8 0b 00 00 00       	mov    eax,0xb
c0003f64:	85 d2                	test   edx,edx
c0003f66:	78 39                	js     c0003fa1 <f_mount+0x5d>
c0003f68:	8b 04 95 80 7c 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc8380]
c0003f6f:	85 c0                	test   eax,eax
c0003f71:	74 03                	je     c0003f76 <f_mount+0x32>
c0003f73:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003f76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003f7a:	85 c0                	test   eax,eax
c0003f7c:	74 03                	je     c0003f81 <f_mount+0x3d>
c0003f7e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003f81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003f85:	89 04 95 80 7c 03 c0 	mov    DWORD PTR [edx*4-0x3ffc8380],eax
c0003f8c:	31 c0                	xor    eax,eax
c0003f8e:	84 db                	test   bl,bl
c0003f90:	74 0f                	je     c0003fa1 <f_mount+0x5d>
c0003f92:	31 c9                	xor    ecx,ecx
c0003f94:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003f98:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003f9c:	e8 3c e8 ff ff       	call   c00027dd <mount_volume>
c0003fa1:	83 c4 18             	add    esp,0x18
c0003fa4:	5b                   	pop    ebx
c0003fa5:	c3                   	ret    

c0003fa6 <f_open>:
c0003fa6:	55                   	push   ebp
c0003fa7:	b8 09 00 00 00       	mov    eax,0x9
c0003fac:	57                   	push   edi
c0003fad:	56                   	push   esi
c0003fae:	53                   	push   ebx
c0003faf:	83 ec 5c             	sub    esp,0x5c
c0003fb2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003fb6:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003fba:	85 db                	test   ebx,ebx
c0003fbc:	0f 84 9f 02 00 00    	je     c0004261 <f_open+0x2bb>
c0003fc2:	89 fd                	mov    ebp,edi
c0003fc4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003fc8:	83 e5 3f             	and    ebp,0x3f
c0003fcb:	89 e8                	mov    eax,ebp
c0003fcd:	89 ee                	mov    esi,ebp
c0003fcf:	0f b6 c8             	movzx  ecx,al
c0003fd2:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003fd6:	e8 02 e8 ff ff       	call   c00027dd <mount_volume>
c0003fdb:	85 c0                	test   eax,eax
c0003fdd:	0f 85 78 02 00 00    	jne    c000425b <f_open+0x2b5>
c0003fe3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe7:	83 ec 0c             	sub    esp,0xc
c0003fea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003fee:	68 00 02 00 00       	push   0x200
c0003ff3:	e8 74 1f 00 00       	call   c0005f6c <ff_memalloc>
c0003ff8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ffc:	83 c4 10             	add    esp,0x10
c0003fff:	b8 11 00 00 00       	mov    eax,0x11
c0004004:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0004009:	0f 84 52 02 00 00    	je     c0004261 <f_open+0x2bb>
c000400f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004013:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004017:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000401b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c000401e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004022:	e8 00 fd ff ff       	call   c0003d27 <follow_path>
c0004027:	85 c0                	test   eax,eax
c0004029:	75 0c                	jne    c0004037 <f_open+0x91>
c000402b:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004030:	74 05                	je     c0004037 <f_open+0x91>
c0004032:	b8 06 00 00 00       	mov    eax,0x6
c0004037:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000403d:	0f 84 d5 00 00 00    	je     c0004118 <f_open+0x172>
c0004043:	85 c0                	test   eax,eax
c0004045:	74 21                	je     c0004068 <f_open+0xc2>
c0004047:	83 f8 04             	cmp    eax,0x4
c000404a:	0f 85 f0 01 00 00    	jne    c0004240 <f_open+0x29a>
c0004050:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004054:	e8 63 fd ff ff       	call   c0003dbc <dir_register>
c0004059:	85 c0                	test   eax,eax
c000405b:	0f 85 df 01 00 00    	jne    c0004240 <f_open+0x29a>
c0004061:	83 cd 08             	or     ebp,0x8
c0004064:	89 ee                	mov    esi,ebp
c0004066:	eb 2c                	jmp    c0004094 <f_open+0xee>
c0004068:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c000406c:	b8 07 00 00 00       	mov    eax,0x7
c0004071:	80 e2 11             	and    dl,0x11
c0004074:	0f 85 c6 01 00 00    	jne    c0004240 <f_open+0x29a>
c000407a:	b8 08 00 00 00       	mov    eax,0x8
c000407f:	f7 c7 04 00 00 00    	test   edi,0x4
c0004085:	0f 85 b5 01 00 00    	jne    c0004240 <f_open+0x29a>
c000408b:	83 e7 08             	and    edi,0x8
c000408e:	0f 84 b1 00 00 00    	je     c0004145 <f_open+0x19f>
c0004094:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004098:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000409c:	89 ea                	mov    edx,ebp
c000409e:	8a 00                	mov    al,BYTE PTR [eax]
c00040a0:	e8 6a f4 ff ff       	call   c000350f <ld_clust.isra.0>
c00040a5:	ba 00 00 21 50       	mov    edx,0x50210000
c00040aa:	89 c7                	mov    edi,eax
c00040ac:	8d 45 0e             	lea    eax,[ebp+0xe]
c00040af:	e8 98 e0 ff ff       	call   c000214c <st_dword>
c00040b4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00040b8:	31 c9                	xor    ecx,ecx
c00040ba:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c00040be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040c2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00040c6:	e8 6d f4 ff ff       	call   c0003538 <st_clust.isra.1>
c00040cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00040cf:	31 d2                	xor    edx,edx
c00040d1:	83 c0 1c             	add    eax,0x1c
c00040d4:	e8 73 e0 ff ff       	call   c000214c <st_dword>
c00040d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040dd:	85 ff                	test   edi,edi
c00040df:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00040e3:	74 60                	je     c0004145 <f_open+0x19f>
c00040e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040e9:	31 c9                	xor    ecx,ecx
c00040eb:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c00040ee:	89 fa                	mov    edx,edi
c00040f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00040f4:	e8 72 f7 ff ff       	call   c000386b <remove_chain>
c00040f9:	85 c0                	test   eax,eax
c00040fb:	0f 85 3f 01 00 00    	jne    c0004240 <f_open+0x29a>
c0004101:	89 ea                	mov    edx,ebp
c0004103:	4f                   	dec    edi
c0004104:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004108:	e8 7d e5 ff ff       	call   c000268a <move_window>
c000410d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004111:	85 c0                	test   eax,eax
c0004113:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0004116:	eb 27                	jmp    c000413f <f_open+0x199>
c0004118:	85 c0                	test   eax,eax
c000411a:	0f 85 20 01 00 00    	jne    c0004240 <f_open+0x29a>
c0004120:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004124:	b8 04 00 00 00       	mov    eax,0x4
c0004129:	f6 c2 10             	test   dl,0x10
c000412c:	0f 85 0e 01 00 00    	jne    c0004240 <f_open+0x29a>
c0004132:	83 e7 02             	and    edi,0x2
c0004135:	74 0e                	je     c0004145 <f_open+0x19f>
c0004137:	b8 07 00 00 00       	mov    eax,0x7
c000413c:	80 e2 01             	and    dl,0x1
c000413f:	0f 85 fb 00 00 00    	jne    c0004240 <f_open+0x29a>
c0004145:	f7 c6 08 00 00 00    	test   esi,0x8
c000414b:	74 03                	je     c0004150 <f_open+0x1aa>
c000414d:	83 ce 40             	or     esi,0x40
c0004150:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004154:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004158:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c000415b:	89 fa                	mov    edx,edi
c000415d:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0004160:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004163:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004166:	e8 a4 f3 ff ff       	call   c000350f <ld_clust.isra.0>
c000416b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000416e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004171:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004174:	e8 b7 df ff ff       	call   c0002130 <ld_dword>
c0004179:	89 2b                	mov    DWORD PTR [ebx],ebp
c000417b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000417e:	31 d2                	xor    edx,edx
c0004180:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004184:	b9 00 02 00 00       	mov    ecx,0x200
c0004189:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000418d:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004191:	89 f0                	mov    eax,esi
c0004193:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000419a:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000419d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00041a4:	89 f8                	mov    eax,edi
c00041a6:	e8 b9 df ff ff       	call   c0002164 <mem_set>
c00041ab:	83 e6 20             	and    esi,0x20
c00041ae:	75 07                	jne    c00041b7 <f_open+0x211>
c00041b0:	31 c0                	xor    eax,eax
c00041b2:	e9 89 00 00 00       	jmp    c0004240 <f_open+0x29a>
c00041b7:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00041ba:	85 ed                	test   ebp,ebp
c00041bc:	74 f2                	je     c00041b0 <f_open+0x20a>
c00041be:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c00041c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00041c5:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00041c8:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c00041cc:	c1 e6 09             	shl    esi,0x9
c00041cf:	39 ee                	cmp    esi,ebp
c00041d1:	73 1c                	jae    c00041ef <f_open+0x249>
c00041d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d5:	29 f5                	sub    ebp,esi
c00041d7:	e8 84 f3 ff ff       	call   c0003560 <get_fat.isra.2>
c00041dc:	89 c2                	mov    edx,eax
c00041de:	83 f8 01             	cmp    eax,0x1
c00041e1:	76 10                	jbe    c00041f3 <f_open+0x24d>
c00041e3:	83 f8 ff             	cmp    eax,0xffffffff
c00041e6:	75 e7                	jne    c00041cf <f_open+0x229>
c00041e8:	b8 01 00 00 00       	mov    eax,0x1
c00041ed:	eb 09                	jmp    c00041f8 <f_open+0x252>
c00041ef:	31 c0                	xor    eax,eax
c00041f1:	eb 05                	jmp    c00041f8 <f_open+0x252>
c00041f3:	b8 02 00 00 00       	mov    eax,0x2
c00041f8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00041fb:	85 c0                	test   eax,eax
c00041fd:	75 41                	jne    c0004240 <f_open+0x29a>
c00041ff:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0004205:	74 a9                	je     c00041b0 <f_open+0x20a>
c0004207:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000420b:	89 f0                	mov    eax,esi
c000420d:	e8 68 e1 ff ff       	call   c000237a <clst2sect>
c0004212:	89 c2                	mov    edx,eax
c0004214:	b8 02 00 00 00       	mov    eax,0x2
c0004219:	85 d2                	test   edx,edx
c000421b:	74 23                	je     c0004240 <f_open+0x29a>
c000421d:	c1 ed 09             	shr    ebp,0x9
c0004220:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0004224:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004227:	6a 01                	push   0x1
c0004229:	50                   	push   eax
c000422a:	57                   	push   edi
c000422b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000422f:	50                   	push   eax
c0004230:	e8 a3 de ff ff       	call   c00020d8 <disk_read>
c0004235:	83 c4 10             	add    esp,0x10
c0004238:	85 c0                	test   eax,eax
c000423a:	0f 95 c0             	setne  al
c000423d:	0f b6 c0             	movzx  eax,al
c0004240:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004244:	83 ec 0c             	sub    esp,0xc
c0004247:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000424b:	e8 34 1d 00 00       	call   c0005f84 <ff_memfree>
c0004250:	83 c4 10             	add    esp,0x10
c0004253:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004257:	85 c0                	test   eax,eax
c0004259:	74 06                	je     c0004261 <f_open+0x2bb>
c000425b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004261:	83 c4 5c             	add    esp,0x5c
c0004264:	5b                   	pop    ebx
c0004265:	5e                   	pop    esi
c0004266:	5f                   	pop    edi
c0004267:	5d                   	pop    ebp
c0004268:	c3                   	ret    

c0004269 <f_read>:
c0004269:	55                   	push   ebp
c000426a:	57                   	push   edi
c000426b:	56                   	push   esi
c000426c:	53                   	push   ebx
c000426d:	83 ec 2c             	sub    esp,0x2c
c0004270:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004274:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004278:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000427e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004282:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004286:	89 d8                	mov    eax,ebx
c0004288:	e8 54 e3 ff ff       	call   c00025e1 <validate>
c000428d:	89 c5                	mov    ebp,eax
c000428f:	85 c0                	test   eax,eax
c0004291:	0f 85 c7 01 00 00    	jne    c000445e <f_read+0x1f5>
c0004297:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000429b:	85 ed                	test   ebp,ebp
c000429d:	0f 85 bb 01 00 00    	jne    c000445e <f_read+0x1f5>
c00042a3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c00042a7:	0f 84 ac 01 00 00    	je     c0004459 <f_read+0x1f0>
c00042ad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00042b0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c00042b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00042b7:	39 f0                	cmp    eax,esi
c00042b9:	0f 86 b0 00 00 00    	jbe    c000436f <f_read+0x106>
c00042bf:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00042c3:	e9 a7 00 00 00       	jmp    c000436f <f_read+0x106>
c00042c8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cb:	a9 ff 01 00 00       	test   eax,0x1ff
c00042d0:	0f 85 56 01 00 00    	jne    c000442c <f_read+0x1c3>
c00042d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00042da:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c00042de:	89 c2                	mov    edx,eax
c00042e0:	4f                   	dec    edi
c00042e1:	c1 ea 09             	shr    edx,0x9
c00042e4:	21 d7                	and    edi,edx
c00042e6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00042ea:	0f 84 8f 00 00 00    	je     c000437f <f_read+0x116>
c00042f0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00042f4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042f7:	89 c8                	mov    eax,ecx
c00042f9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00042fd:	e8 78 e0 ff ff       	call   c000237a <clst2sect>
c0004302:	85 c0                	test   eax,eax
c0004304:	0f 84 8d 00 00 00    	je     c0004397 <f_read+0x12e>
c000430a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000430e:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0004316:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0004319:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000431d:	0f 86 bf 00 00 00    	jbe    c00043e2 <f_read+0x179>
c0004323:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0004327:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000432b:	c1 ee 09             	shr    esi,0x9
c000432e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004332:	01 f2                	add    edx,esi
c0004334:	39 c2                	cmp    edx,eax
c0004336:	76 06                	jbe    c000433e <f_read+0xd5>
c0004338:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000433c:	89 c6                	mov    esi,eax
c000433e:	56                   	push   esi
c000433f:	57                   	push   edi
c0004340:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004344:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004348:	50                   	push   eax
c0004349:	e8 8a dd ff ff       	call   c00020d8 <disk_read>
c000434e:	83 c4 10             	add    esp,0x10
c0004351:	85 c0                	test   eax,eax
c0004353:	75 55                	jne    c00043aa <f_read+0x141>
c0004355:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004359:	75 65                	jne    c00043c0 <f_read+0x157>
c000435b:	c1 e6 09             	shl    esi,0x9
c000435e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004362:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004366:	01 30                	add    DWORD PTR [eax],esi
c0004368:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000436c:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000436f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004374:	0f 85 4e ff ff ff    	jne    c00042c8 <f_read+0x5f>
c000437a:	e9 df 00 00 00       	jmp    c000445e <f_read+0x1f5>
c000437f:	85 c0                	test   eax,eax
c0004381:	75 05                	jne    c0004388 <f_read+0x11f>
c0004383:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004386:	eb 0a                	jmp    c0004392 <f_read+0x129>
c0004388:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000438b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000438d:	e8 ce f1 ff ff       	call   c0003560 <get_fat.isra.2>
c0004392:	83 f8 01             	cmp    eax,0x1
c0004395:	77 0e                	ja     c00043a5 <f_read+0x13c>
c0004397:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000439b:	bd 02 00 00 00       	mov    ebp,0x2
c00043a0:	e9 b9 00 00 00       	jmp    c000445e <f_read+0x1f5>
c00043a5:	83 f8 ff             	cmp    eax,0xffffffff
c00043a8:	75 0e                	jne    c00043b8 <f_read+0x14f>
c00043aa:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043ae:	bd 01 00 00 00       	mov    ebp,0x1
c00043b3:	e9 a6 00 00 00       	jmp    c000445e <f_read+0x1f5>
c00043b8:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043bb:	e9 30 ff ff ff       	jmp    c00042f0 <f_read+0x87>
c00043c0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00043c3:	29 f8                	sub    eax,edi
c00043c5:	39 f0                	cmp    eax,esi
c00043c7:	73 92                	jae    c000435b <f_read+0xf2>
c00043c9:	c1 e0 09             	shl    eax,0x9
c00043cc:	8d 53 28             	lea    edx,[ebx+0x28]
c00043cf:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00043d3:	b9 00 02 00 00       	mov    ecx,0x200
c00043d8:	e8 72 dd ff ff       	call   c000214f <mem_cpy>
c00043dd:	e9 79 ff ff ff       	jmp    c000435b <f_read+0xf2>
c00043e2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00043e5:	39 f8                	cmp    eax,edi
c00043e7:	74 40                	je     c0004429 <f_read+0x1c0>
c00043e9:	8d 73 28             	lea    esi,[ebx+0x28]
c00043ec:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043f0:	74 1e                	je     c0004410 <f_read+0x1a7>
c00043f2:	6a 01                	push   0x1
c00043f4:	50                   	push   eax
c00043f5:	56                   	push   esi
c00043f6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043fa:	50                   	push   eax
c00043fb:	e8 ee dc ff ff       	call   c00020ee <disk_write>
c0004400:	83 c4 10             	add    esp,0x10
c0004403:	85 c0                	test   eax,eax
c0004405:	75 a3                	jne    c00043aa <f_read+0x141>
c0004407:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000440a:	83 e0 7f             	and    eax,0x7f
c000440d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004410:	6a 01                	push   0x1
c0004412:	57                   	push   edi
c0004413:	56                   	push   esi
c0004414:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004418:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000441c:	50                   	push   eax
c000441d:	e8 b6 dc ff ff       	call   c00020d8 <disk_read>
c0004422:	83 c4 10             	add    esp,0x10
c0004425:	85 c0                	test   eax,eax
c0004427:	75 81                	jne    c00043aa <f_read+0x141>
c0004429:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000442c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000442f:	ba 00 02 00 00       	mov    edx,0x200
c0004434:	25 ff 01 00 00       	and    eax,0x1ff
c0004439:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000443d:	29 c2                	sub    edx,eax
c000443f:	39 d6                	cmp    esi,edx
c0004441:	76 02                	jbe    c0004445 <f_read+0x1dc>
c0004443:	89 d6                	mov    esi,edx
c0004445:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0004449:	89 f1                	mov    ecx,esi
c000444b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000444f:	e8 fb dc ff ff       	call   c000214f <mem_cpy>
c0004454:	e9 05 ff ff ff       	jmp    c000435e <f_read+0xf5>
c0004459:	bd 07 00 00 00       	mov    ebp,0x7
c000445e:	83 c4 2c             	add    esp,0x2c
c0004461:	89 e8                	mov    eax,ebp
c0004463:	5b                   	pop    ebx
c0004464:	5e                   	pop    esi
c0004465:	5f                   	pop    edi
c0004466:	5d                   	pop    ebp
c0004467:	c3                   	ret    

c0004468 <f_write>:
c0004468:	55                   	push   ebp
c0004469:	57                   	push   edi
c000446a:	56                   	push   esi
c000446b:	53                   	push   ebx
c000446c:	83 ec 2c             	sub    esp,0x2c
c000446f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004473:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004477:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000447d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004481:	89 d8                	mov    eax,ebx
c0004483:	e8 59 e1 ff ff       	call   c00025e1 <validate>
c0004488:	89 c5                	mov    ebp,eax
c000448a:	85 c0                	test   eax,eax
c000448c:	0f 85 14 02 00 00    	jne    c00046a6 <f_write+0x23e>
c0004492:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004496:	85 ed                	test   ebp,ebp
c0004498:	0f 85 08 02 00 00    	jne    c00046a6 <f_write+0x23e>
c000449e:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044a2:	0f 84 f9 01 00 00    	je     c00046a1 <f_write+0x239>
c00044a8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044ab:	89 c7                	mov    edi,eax
c00044ad:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c00044b1:	0f 83 ef 00 00 00    	jae    c00045a6 <f_write+0x13e>
c00044b7:	f7 d0                	not    eax
c00044b9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00044bd:	e9 e4 00 00 00       	jmp    c00045a6 <f_write+0x13e>
c00044c2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044c5:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c00044cb:	0f 85 9a 01 00 00    	jne    c000466b <f_write+0x203>
c00044d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d5:	89 d1                	mov    ecx,edx
c00044d7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00044db:	c1 e9 09             	shr    ecx,0x9
c00044de:	48                   	dec    eax
c00044df:	21 c8                	and    eax,ecx
c00044e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00044e5:	0f 84 c8 00 00 00    	je     c00045b3 <f_write+0x14b>
c00044eb:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00044ef:	0f 85 22 01 00 00    	jne    c0004617 <f_write+0x1af>
c00044f5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00044f9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044fc:	89 c8                	mov    eax,ecx
c00044fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004502:	e8 73 de ff ff       	call   c000237a <clst2sect>
c0004507:	85 c0                	test   eax,eax
c0004509:	0f 84 d2 00 00 00    	je     c00045e1 <f_write+0x179>
c000450f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004513:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004517:	01 c7                	add    edi,eax
c0004519:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0004521:	0f 86 1c 01 00 00    	jbe    c0004643 <f_write+0x1db>
c0004527:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000452b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000452f:	c1 ee 09             	shr    esi,0x9
c0004532:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004536:	01 f2                	add    edx,esi
c0004538:	39 c2                	cmp    edx,eax
c000453a:	76 06                	jbe    c0004542 <f_write+0xda>
c000453c:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004540:	89 c6                	mov    esi,eax
c0004542:	56                   	push   esi
c0004543:	57                   	push   edi
c0004544:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004548:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000454c:	50                   	push   eax
c000454d:	e8 9c db ff ff       	call   c00020ee <disk_write>
c0004552:	83 c4 10             	add    esp,0x10
c0004555:	85 c0                	test   eax,eax
c0004557:	0f 85 97 00 00 00    	jne    c00045f4 <f_write+0x18c>
c000455d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004560:	29 fa                	sub    edx,edi
c0004562:	39 f2                	cmp    edx,esi
c0004564:	73 1d                	jae    c0004583 <f_write+0x11b>
c0004566:	8d 43 28             	lea    eax,[ebx+0x28]
c0004569:	c1 e2 09             	shl    edx,0x9
c000456c:	b9 00 02 00 00       	mov    ecx,0x200
c0004571:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004575:	e8 d5 db ff ff       	call   c000214f <mem_cpy>
c000457a:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000457d:	83 e0 7f             	and    eax,0x7f
c0004580:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004583:	c1 e6 09             	shl    esi,0x9
c0004586:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000458a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000458e:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004592:	01 30                	add    DWORD PTR [eax],esi
c0004594:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004597:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000459a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000459d:	39 f0                	cmp    eax,esi
c000459f:	73 02                	jae    c00045a3 <f_write+0x13b>
c00045a1:	89 f0                	mov    eax,esi
c00045a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045a6:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00045ab:	0f 85 11 ff ff ff    	jne    c00044c2 <f_write+0x5a>
c00045b1:	eb 1b                	jmp    c00045ce <f_write+0x166>
c00045b3:	85 d2                	test   edx,edx
c00045b5:	75 09                	jne    c00045c0 <f_write+0x158>
c00045b7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00045ba:	85 c0                	test   eax,eax
c00045bc:	75 1e                	jne    c00045dc <f_write+0x174>
c00045be:	eb 03                	jmp    c00045c3 <f_write+0x15b>
c00045c0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045c3:	89 d8                	mov    eax,ebx
c00045c5:	e8 62 f1 ff ff       	call   c000372c <create_chain>
c00045ca:	85 c0                	test   eax,eax
c00045cc:	75 0e                	jne    c00045dc <f_write+0x174>
c00045ce:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d1:	83 c8 40             	or     eax,0x40
c00045d4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045d7:	e9 ca 00 00 00       	jmp    c00046a6 <f_write+0x23e>
c00045dc:	83 f8 01             	cmp    eax,0x1
c00045df:	75 0e                	jne    c00045ef <f_write+0x187>
c00045e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00045e5:	bd 02 00 00 00       	mov    ebp,0x2
c00045ea:	e9 b7 00 00 00       	jmp    c00046a6 <f_write+0x23e>
c00045ef:	83 f8 ff             	cmp    eax,0xffffffff
c00045f2:	75 0e                	jne    c0004602 <f_write+0x19a>
c00045f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00045f8:	bd 01 00 00 00       	mov    ebp,0x1
c00045fd:	e9 a4 00 00 00       	jmp    c00046a6 <f_write+0x23e>
c0004602:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004605:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004609:	0f 85 dc fe ff ff    	jne    c00044eb <f_write+0x83>
c000460f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004612:	e9 d4 fe ff ff       	jmp    c00044eb <f_write+0x83>
c0004617:	6a 01                	push   0x1
c0004619:	8d 43 28             	lea    eax,[ebx+0x28]
c000461c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000461f:	50                   	push   eax
c0004620:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004624:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004628:	50                   	push   eax
c0004629:	e8 c0 da ff ff       	call   c00020ee <disk_write>
c000462e:	83 c4 10             	add    esp,0x10
c0004631:	85 c0                	test   eax,eax
c0004633:	75 bf                	jne    c00045f4 <f_write+0x18c>
c0004635:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004638:	83 e0 7f             	and    eax,0x7f
c000463b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000463e:	e9 b2 fe ff ff       	jmp    c00044f5 <f_write+0x8d>
c0004643:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c0004646:	74 20                	je     c0004668 <f_write+0x200>
c0004648:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000464b:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000464e:	76 18                	jbe    c0004668 <f_write+0x200>
c0004650:	6a 01                	push   0x1
c0004652:	8d 43 28             	lea    eax,[ebx+0x28]
c0004655:	57                   	push   edi
c0004656:	50                   	push   eax
c0004657:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000465b:	50                   	push   eax
c000465c:	e8 77 da ff ff       	call   c00020d8 <disk_read>
c0004661:	83 c4 10             	add    esp,0x10
c0004664:	85 c0                	test   eax,eax
c0004666:	75 8c                	jne    c00045f4 <f_write+0x18c>
c0004668:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000466b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000466e:	ba 00 02 00 00       	mov    edx,0x200
c0004673:	25 ff 01 00 00       	and    eax,0x1ff
c0004678:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000467c:	29 c2                	sub    edx,eax
c000467e:	39 d6                	cmp    esi,edx
c0004680:	76 02                	jbe    c0004684 <f_write+0x21c>
c0004682:	89 d6                	mov    esi,edx
c0004684:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004688:	89 f1                	mov    ecx,esi
c000468a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000468e:	e8 bc da ff ff       	call   c000214f <mem_cpy>
c0004693:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004696:	83 c8 80             	or     eax,0xffffff80
c0004699:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000469c:	e9 e5 fe ff ff       	jmp    c0004586 <f_write+0x11e>
c00046a1:	bd 07 00 00 00       	mov    ebp,0x7
c00046a6:	83 c4 2c             	add    esp,0x2c
c00046a9:	89 e8                	mov    eax,ebp
c00046ab:	5b                   	pop    ebx
c00046ac:	5e                   	pop    esi
c00046ad:	5f                   	pop    edi
c00046ae:	5d                   	pop    ebp
c00046af:	c3                   	ret    

c00046b0 <f_sync>:
c00046b0:	56                   	push   esi
c00046b1:	53                   	push   ebx
c00046b2:	83 ec 14             	sub    esp,0x14
c00046b5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046b9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046bd:	89 d8                	mov    eax,ebx
c00046bf:	e8 1d df ff ff       	call   c00025e1 <validate>
c00046c4:	85 c0                	test   eax,eax
c00046c6:	0f 85 a3 00 00 00    	jne    c000476f <f_sync+0xbf>
c00046cc:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00046cf:	f6 c2 40             	test   dl,0x40
c00046d2:	0f 84 97 00 00 00    	je     c000476f <f_sync+0xbf>
c00046d8:	80 e2 80             	and    dl,0x80
c00046db:	74 2e                	je     c000470b <f_sync+0x5b>
c00046dd:	6a 01                	push   0x1
c00046df:	8d 43 28             	lea    eax,[ebx+0x28]
c00046e2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00046e5:	50                   	push   eax
c00046e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046ea:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00046ee:	50                   	push   eax
c00046ef:	e8 fa d9 ff ff       	call   c00020ee <disk_write>
c00046f4:	83 c4 10             	add    esp,0x10
c00046f7:	89 c2                	mov    edx,eax
c00046f9:	b8 01 00 00 00       	mov    eax,0x1
c00046fe:	85 d2                	test   edx,edx
c0004700:	75 6d                	jne    c000476f <f_sync+0xbf>
c0004702:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004705:	83 e0 7f             	and    eax,0x7f
c0004708:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000470b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000470e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004712:	e8 73 df ff ff       	call   c000268a <move_window>
c0004717:	85 c0                	test   eax,eax
c0004719:	75 54                	jne    c000476f <f_sync+0xbf>
c000471b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c000471e:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c0004721:	89 f2                	mov    edx,esi
c0004723:	83 c8 20             	or     eax,0x20
c0004726:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004729:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000472c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000472e:	e8 05 ee ff ff       	call   c0003538 <st_clust.isra.1>
c0004733:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004736:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004739:	e8 0e da ff ff       	call   c000214c <st_dword>
c000473e:	8d 46 16             	lea    eax,[esi+0x16]
c0004741:	ba 00 00 21 50       	mov    edx,0x50210000
c0004746:	e8 01 da ff ff       	call   c000214c <st_dword>
c000474b:	31 d2                	xor    edx,edx
c000474d:	8d 46 12             	lea    eax,[esi+0x12]
c0004750:	e8 f3 d9 ff ff       	call   c0002148 <st_word>
c0004755:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004759:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000475d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004761:	e8 5b e9 ff ff       	call   c00030c1 <sync_fs>
c0004766:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004769:	83 e2 bf             	and    edx,0xffffffbf
c000476c:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000476f:	83 c4 14             	add    esp,0x14
c0004772:	5b                   	pop    ebx
c0004773:	5e                   	pop    esi
c0004774:	c3                   	ret    

c0004775 <f_close>:
c0004775:	53                   	push   ebx
c0004776:	83 ec 24             	sub    esp,0x24
c0004779:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000477d:	53                   	push   ebx
c000477e:	e8 2d ff ff ff       	call   c00046b0 <f_sync>
c0004783:	83 c4 10             	add    esp,0x10
c0004786:	85 c0                	test   eax,eax
c0004788:	75 15                	jne    c000479f <f_close+0x2a>
c000478a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000478e:	89 d8                	mov    eax,ebx
c0004790:	e8 4c de ff ff       	call   c00025e1 <validate>
c0004795:	85 c0                	test   eax,eax
c0004797:	75 06                	jne    c000479f <f_close+0x2a>
c0004799:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000479f:	83 c4 18             	add    esp,0x18
c00047a2:	5b                   	pop    ebx
c00047a3:	c3                   	ret    

c00047a4 <f_lseek>:
c00047a4:	55                   	push   ebp
c00047a5:	57                   	push   edi
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 2c             	sub    esp,0x2c
c00047ab:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00047af:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00047b3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00047b7:	89 d8                	mov    eax,ebx
c00047b9:	e8 23 de ff ff       	call   c00025e1 <validate>
c00047be:	89 c5                	mov    ebp,eax
c00047c0:	85 c0                	test   eax,eax
c00047c2:	0f 85 83 01 00 00    	jne    c000494b <f_lseek+0x1a7>
c00047c8:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00047cc:	85 ed                	test   ebp,ebp
c00047ce:	0f 85 77 01 00 00    	jne    c000494b <f_lseek+0x1a7>
c00047d4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00047d7:	39 f0                	cmp    eax,esi
c00047d9:	73 08                	jae    c00047e3 <f_lseek+0x3f>
c00047db:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047df:	75 02                	jne    c00047e3 <f_lseek+0x3f>
c00047e1:	89 c6                	mov    esi,eax
c00047e3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00047e6:	85 f6                	test   esi,esi
c00047e8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00047ef:	75 07                	jne    c00047f8 <f_lseek+0x54>
c00047f1:	31 f6                	xor    esi,esi
c00047f3:	e9 e2 00 00 00       	jmp    c00048da <f_lseek+0x136>
c00047f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047fc:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c0004800:	c1 e7 09             	shl    edi,0x9
c0004803:	85 c9                	test   ecx,ecx
c0004805:	74 28                	je     c000482f <f_lseek+0x8b>
c0004807:	49                   	dec    ecx
c0004808:	31 d2                	xor    edx,edx
c000480a:	8d 46 ff             	lea    eax,[esi-0x1]
c000480d:	f7 f7                	div    edi
c000480f:	31 d2                	xor    edx,edx
c0004811:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004815:	89 c8                	mov    eax,ecx
c0004817:	f7 f7                	div    edi
c0004819:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000481d:	72 10                	jb     c000482f <f_lseek+0x8b>
c000481f:	89 f8                	mov    eax,edi
c0004821:	f7 d8                	neg    eax
c0004823:	21 c1                	and    ecx,eax
c0004825:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004828:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c000482b:	29 ce                	sub    esi,ecx
c000482d:	eb 3c                	jmp    c000486b <f_lseek+0xc7>
c000482f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004832:	85 c0                	test   eax,eax
c0004834:	75 32                	jne    c0004868 <f_lseek+0xc4>
c0004836:	31 d2                	xor    edx,edx
c0004838:	89 d8                	mov    eax,ebx
c000483a:	e8 ed ee ff ff       	call   c000372c <create_chain>
c000483f:	83 f8 01             	cmp    eax,0x1
c0004842:	75 0e                	jne    c0004852 <f_lseek+0xae>
c0004844:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004848:	bd 02 00 00 00       	mov    ebp,0x2
c000484d:	e9 f9 00 00 00       	jmp    c000494b <f_lseek+0x1a7>
c0004852:	83 f8 ff             	cmp    eax,0xffffffff
c0004855:	75 0e                	jne    c0004865 <f_lseek+0xc1>
c0004857:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000485b:	bd 01 00 00 00       	mov    ebp,0x1
c0004860:	e9 e6 00 00 00       	jmp    c000494b <f_lseek+0x1a7>
c0004865:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004868:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000486b:	85 c0                	test   eax,eax
c000486d:	74 82                	je     c00047f1 <f_lseek+0x4d>
c000486f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004872:	39 fe                	cmp    esi,edi
c0004874:	76 3d                	jbe    c00048b3 <f_lseek+0x10f>
c0004876:	01 fa                	add    edx,edi
c0004878:	29 fe                	sub    esi,edi
c000487a:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000487d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004881:	89 c2                	mov    edx,eax
c0004883:	74 0d                	je     c0004892 <f_lseek+0xee>
c0004885:	89 d8                	mov    eax,ebx
c0004887:	e8 a0 ee ff ff       	call   c000372c <create_chain>
c000488c:	85 c0                	test   eax,eax
c000488e:	75 09                	jne    c0004899 <f_lseek+0xf5>
c0004890:	eb 1f                	jmp    c00048b1 <f_lseek+0x10d>
c0004892:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004894:	e8 c7 ec ff ff       	call   c0003560 <get_fat.isra.2>
c0004899:	83 f8 ff             	cmp    eax,0xffffffff
c000489c:	74 b9                	je     c0004857 <f_lseek+0xb3>
c000489e:	83 f8 01             	cmp    eax,0x1
c00048a1:	76 a1                	jbe    c0004844 <f_lseek+0xa0>
c00048a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00048a7:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c00048aa:	76 98                	jbe    c0004844 <f_lseek+0xa0>
c00048ac:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00048af:	eb be                	jmp    c000486f <f_lseek+0xcb>
c00048b1:	31 f6                	xor    esi,esi
c00048b3:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c00048b6:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00048bc:	0f 84 2f ff ff ff    	je     c00047f1 <f_lseek+0x4d>
c00048c2:	89 c2                	mov    edx,eax
c00048c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048c8:	e8 ad da ff ff       	call   c000237a <clst2sect>
c00048cd:	85 c0                	test   eax,eax
c00048cf:	0f 84 6f ff ff ff    	je     c0004844 <f_lseek+0xa0>
c00048d5:	c1 ee 09             	shr    esi,0x9
c00048d8:	01 c6                	add    esi,eax
c00048da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00048dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00048e0:	76 0c                	jbe    c00048ee <f_lseek+0x14a>
c00048e2:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00048e5:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00048e8:	83 ca 40             	or     edx,0x40
c00048eb:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00048ee:	a9 ff 01 00 00       	test   eax,0x1ff
c00048f3:	74 56                	je     c000494b <f_lseek+0x1a7>
c00048f5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00048f8:	39 f0                	cmp    eax,esi
c00048fa:	74 4f                	je     c000494b <f_lseek+0x1a7>
c00048fc:	8d 7b 28             	lea    edi,[ebx+0x28]
c00048ff:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004903:	74 26                	je     c000492b <f_lseek+0x187>
c0004905:	6a 01                	push   0x1
c0004907:	50                   	push   eax
c0004908:	57                   	push   edi
c0004909:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000490d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004911:	50                   	push   eax
c0004912:	e8 d7 d7 ff ff       	call   c00020ee <disk_write>
c0004917:	83 c4 10             	add    esp,0x10
c000491a:	85 c0                	test   eax,eax
c000491c:	0f 85 35 ff ff ff    	jne    c0004857 <f_lseek+0xb3>
c0004922:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004925:	83 e0 7f             	and    eax,0x7f
c0004928:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000492b:	6a 01                	push   0x1
c000492d:	56                   	push   esi
c000492e:	57                   	push   edi
c000492f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004933:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004937:	50                   	push   eax
c0004938:	e8 9b d7 ff ff       	call   c00020d8 <disk_read>
c000493d:	83 c4 10             	add    esp,0x10
c0004940:	85 c0                	test   eax,eax
c0004942:	0f 85 0f ff ff ff    	jne    c0004857 <f_lseek+0xb3>
c0004948:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000494b:	83 c4 2c             	add    esp,0x2c
c000494e:	89 e8                	mov    eax,ebp
c0004950:	5b                   	pop    ebx
c0004951:	5e                   	pop    esi
c0004952:	5f                   	pop    edi
c0004953:	5d                   	pop    ebp
c0004954:	c3                   	ret    

c0004955 <f_opendir>:
c0004955:	56                   	push   esi
c0004956:	b8 09 00 00 00       	mov    eax,0x9
c000495b:	53                   	push   ebx
c000495c:	83 ec 24             	sub    esp,0x24
c000495f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004963:	85 db                	test   ebx,ebx
c0004965:	0f 84 af 00 00 00    	je     c0004a1a <f_opendir+0xc5>
c000496b:	31 c9                	xor    ecx,ecx
c000496d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004971:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004975:	e8 63 de ff ff       	call   c00027dd <mount_volume>
c000497a:	85 c0                	test   eax,eax
c000497c:	0f 85 92 00 00 00    	jne    c0004a14 <f_opendir+0xbf>
c0004982:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004986:	83 ec 0c             	sub    esp,0xc
c0004989:	89 03                	mov    DWORD PTR [ebx],eax
c000498b:	68 00 02 00 00       	push   0x200
c0004990:	e8 d7 15 00 00       	call   c0005f6c <ff_memalloc>
c0004995:	83 c4 10             	add    esp,0x10
c0004998:	89 c6                	mov    esi,eax
c000499a:	b8 11 00 00 00       	mov    eax,0x11
c000499f:	85 f6                	test   esi,esi
c00049a1:	74 77                	je     c0004a1a <f_opendir+0xc5>
c00049a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049a7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00049ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049ae:	89 d8                	mov    eax,ebx
c00049b0:	e8 72 f3 ff ff       	call   c0003d27 <follow_path>
c00049b5:	85 c0                	test   eax,eax
c00049b7:	75 37                	jne    c00049f0 <f_opendir+0x9b>
c00049b9:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c00049bd:	75 1c                	jne    c00049db <f_opendir+0x86>
c00049bf:	b8 05 00 00 00       	mov    eax,0x5
c00049c4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00049c8:	74 26                	je     c00049f0 <f_opendir+0x9b>
c00049ca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00049cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049d1:	8a 00                	mov    al,BYTE PTR [eax]
c00049d3:	e8 37 eb ff ff       	call   c000350f <ld_clust.isra.0>
c00049d8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00049db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049df:	31 d2                	xor    edx,edx
c00049e1:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00049e5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00049e9:	89 d8                	mov    eax,ebx
c00049eb:	e8 74 ec ff ff       	call   c0003664 <dir_sdi>
c00049f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049f4:	83 ec 0c             	sub    esp,0xc
c00049f7:	56                   	push   esi
c00049f8:	e8 87 15 00 00       	call   c0005f84 <ff_memfree>
c00049fd:	83 c4 10             	add    esp,0x10
c0004a00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a04:	83 f8 04             	cmp    eax,0x4
c0004a07:	74 06                	je     c0004a0f <f_opendir+0xba>
c0004a09:	85 c0                	test   eax,eax
c0004a0b:	74 0d                	je     c0004a1a <f_opendir+0xc5>
c0004a0d:	eb 05                	jmp    c0004a14 <f_opendir+0xbf>
c0004a0f:	b8 05 00 00 00       	mov    eax,0x5
c0004a14:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004a1a:	83 c4 24             	add    esp,0x24
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_closedir>:
c0004a20:	53                   	push   ebx
c0004a21:	83 ec 18             	sub    esp,0x18
c0004a24:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004a28:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004a2c:	89 d8                	mov    eax,ebx
c0004a2e:	e8 ae db ff ff       	call   c00025e1 <validate>
c0004a33:	85 c0                	test   eax,eax
c0004a35:	75 06                	jne    c0004a3d <f_closedir+0x1d>
c0004a37:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004a3d:	83 c4 18             	add    esp,0x18
c0004a40:	5b                   	pop    ebx
c0004a41:	c3                   	ret    

c0004a42 <f_readdir>:
c0004a42:	57                   	push   edi
c0004a43:	56                   	push   esi
c0004a44:	53                   	push   ebx
c0004a45:	83 ec 20             	sub    esp,0x20
c0004a48:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004a4c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004a50:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a54:	89 d8                	mov    eax,ebx
c0004a56:	e8 86 db ff ff       	call   c00025e1 <validate>
c0004a5b:	85 c0                	test   eax,eax
c0004a5d:	75 6e                	jne    c0004acd <f_readdir+0x8b>
c0004a5f:	85 ff                	test   edi,edi
c0004a61:	75 0b                	jne    c0004a6e <f_readdir+0x2c>
c0004a63:	31 d2                	xor    edx,edx
c0004a65:	89 d8                	mov    eax,ebx
c0004a67:	e8 f8 eb ff ff       	call   c0003664 <dir_sdi>
c0004a6c:	eb 5f                	jmp    c0004acd <f_readdir+0x8b>
c0004a6e:	83 ec 0c             	sub    esp,0xc
c0004a71:	68 00 02 00 00       	push   0x200
c0004a76:	e8 f1 14 00 00       	call   c0005f6c <ff_memalloc>
c0004a7b:	83 c4 10             	add    esp,0x10
c0004a7e:	89 c6                	mov    esi,eax
c0004a80:	b8 11 00 00 00       	mov    eax,0x11
c0004a85:	85 f6                	test   esi,esi
c0004a87:	74 44                	je     c0004acd <f_readdir+0x8b>
c0004a89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a8d:	31 d2                	xor    edx,edx
c0004a8f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004a92:	89 d8                	mov    eax,ebx
c0004a94:	e8 ca ef ff ff       	call   c0003a63 <dir_read>
c0004a99:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004a9e:	75 19                	jne    c0004ab9 <f_readdir+0x77>
c0004aa0:	89 fa                	mov    edx,edi
c0004aa2:	89 d8                	mov    eax,ebx
c0004aa4:	e8 70 e8 ff ff       	call   c0003319 <get_fileinfo>
c0004aa9:	31 d2                	xor    edx,edx
c0004aab:	89 d8                	mov    eax,ebx
c0004aad:	e8 47 ee ff ff       	call   c00038f9 <dir_next>
c0004ab2:	83 f8 04             	cmp    eax,0x4
c0004ab5:	75 02                	jne    c0004ab9 <f_readdir+0x77>
c0004ab7:	31 c0                	xor    eax,eax
c0004ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004abd:	83 ec 0c             	sub    esp,0xc
c0004ac0:	56                   	push   esi
c0004ac1:	e8 be 14 00 00       	call   c0005f84 <ff_memfree>
c0004ac6:	83 c4 10             	add    esp,0x10
c0004ac9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004acd:	83 c4 20             	add    esp,0x20
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	c3                   	ret    

c0004ad4 <f_stat>:
c0004ad4:	57                   	push   edi
c0004ad5:	31 c9                	xor    ecx,ecx
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 30             	sub    esp,0x30
c0004adc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004ae0:	89 e2                	mov    edx,esp
c0004ae2:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ae6:	e8 f2 dc ff ff       	call   c00027dd <mount_volume>
c0004aeb:	89 c3                	mov    ebx,eax
c0004aed:	85 c0                	test   eax,eax
c0004aef:	75 59                	jne    c0004b4a <f_stat+0x76>
c0004af1:	83 ec 0c             	sub    esp,0xc
c0004af4:	bb 11 00 00 00       	mov    ebx,0x11
c0004af9:	68 00 02 00 00       	push   0x200
c0004afe:	e8 69 14 00 00       	call   c0005f6c <ff_memalloc>
c0004b03:	83 c4 10             	add    esp,0x10
c0004b06:	89 c6                	mov    esi,eax
c0004b08:	85 c0                	test   eax,eax
c0004b0a:	74 3e                	je     c0004b4a <f_stat+0x76>
c0004b0c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004b0f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004b13:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004b16:	89 e0                	mov    eax,esp
c0004b18:	e8 0a f2 ff ff       	call   c0003d27 <follow_path>
c0004b1d:	89 c3                	mov    ebx,eax
c0004b1f:	85 c0                	test   eax,eax
c0004b21:	75 1b                	jne    c0004b3e <f_stat+0x6a>
c0004b23:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004b28:	75 0f                	jne    c0004b39 <f_stat+0x65>
c0004b2a:	85 ff                	test   edi,edi
c0004b2c:	74 10                	je     c0004b3e <f_stat+0x6a>
c0004b2e:	89 fa                	mov    edx,edi
c0004b30:	89 e0                	mov    eax,esp
c0004b32:	e8 e2 e7 ff ff       	call   c0003319 <get_fileinfo>
c0004b37:	eb 05                	jmp    c0004b3e <f_stat+0x6a>
c0004b39:	bb 06 00 00 00       	mov    ebx,0x6
c0004b3e:	83 ec 0c             	sub    esp,0xc
c0004b41:	56                   	push   esi
c0004b42:	e8 3d 14 00 00       	call   c0005f84 <ff_memfree>
c0004b47:	83 c4 10             	add    esp,0x10
c0004b4a:	83 c4 30             	add    esp,0x30
c0004b4d:	89 d8                	mov    eax,ebx
c0004b4f:	5b                   	pop    ebx
c0004b50:	5e                   	pop    esi
c0004b51:	5f                   	pop    edi
c0004b52:	c3                   	ret    

c0004b53 <f_getfree>:
c0004b53:	55                   	push   ebp
c0004b54:	31 c9                	xor    ecx,ecx
c0004b56:	57                   	push   edi
c0004b57:	56                   	push   esi
c0004b58:	53                   	push   ebx
c0004b59:	83 ec 2c             	sub    esp,0x2c
c0004b5c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b60:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004b64:	e8 74 dc ff ff       	call   c00027dd <mount_volume>
c0004b69:	89 c7                	mov    edi,eax
c0004b6b:	85 c0                	test   eax,eax
c0004b6d:	0f 85 df 00 00 00    	jne    c0004c52 <f_getfree+0xff>
c0004b73:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004b77:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004b7b:	89 30                	mov    DWORD PTR [eax],esi
c0004b7d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004b80:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004b83:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004b86:	39 d0                	cmp    eax,edx
c0004b88:	77 0b                	ja     c0004b95 <f_getfree+0x42>
c0004b8a:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004b8e:	89 01                	mov    DWORD PTR [ecx],eax
c0004b90:	e9 bd 00 00 00       	jmp    c0004c52 <f_getfree+0xff>
c0004b95:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004b98:	75 29                	jne    c0004bc3 <f_getfree+0x70>
c0004b9a:	bd 02 00 00 00       	mov    ebp,0x2
c0004b9f:	31 db                	xor    ebx,ebx
c0004ba1:	89 ea                	mov    edx,ebp
c0004ba3:	89 f0                	mov    eax,esi
c0004ba5:	e8 b6 e9 ff ff       	call   c0003560 <get_fat.isra.2>
c0004baa:	83 f8 ff             	cmp    eax,0xffffffff
c0004bad:	74 7d                	je     c0004c2c <f_getfree+0xd9>
c0004baf:	83 f8 01             	cmp    eax,0x1
c0004bb2:	74 7f                	je     c0004c33 <f_getfree+0xe0>
c0004bb4:	83 d3 00             	adc    ebx,0x0
c0004bb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bbb:	45                   	inc    ebp
c0004bbc:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004bbf:	77 e0                	ja     c0004ba1 <f_getfree+0x4e>
c0004bc1:	eb 79                	jmp    c0004c3c <f_getfree+0xe9>
c0004bc3:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004bc6:	31 db                	xor    ebx,ebx
c0004bc8:	31 f6                	xor    esi,esi
c0004bca:	85 f6                	test   esi,esi
c0004bcc:	75 18                	jne    c0004be6 <f_getfree+0x93>
c0004bce:	8d 42 01             	lea    eax,[edx+0x1]
c0004bd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bd9:	e8 ac da ff ff       	call   c000268a <move_window>
c0004bde:	85 c0                	test   eax,eax
c0004be0:	75 58                	jne    c0004c3a <f_getfree+0xe7>
c0004be2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004bea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004bee:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004bf2:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004bf5:	75 13                	jne    c0004c0a <f_getfree+0xb7>
c0004bf7:	e8 27 d5 ff ff       	call   c0002123 <ld_word>
c0004bfc:	0f b7 c0             	movzx  eax,ax
c0004bff:	83 f8 01             	cmp    eax,0x1
c0004c02:	83 d3 00             	adc    ebx,0x0
c0004c05:	83 c6 02             	add    esi,0x2
c0004c08:	eb 13                	jmp    c0004c1d <f_getfree+0xca>
c0004c0a:	e8 21 d5 ff ff       	call   c0002130 <ld_dword>
c0004c0f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004c14:	83 f8 01             	cmp    eax,0x1
c0004c17:	83 d3 00             	adc    ebx,0x0
c0004c1a:	83 c6 04             	add    esi,0x4
c0004c1d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004c23:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004c27:	4d                   	dec    ebp
c0004c28:	75 a0                	jne    c0004bca <f_getfree+0x77>
c0004c2a:	eb 10                	jmp    c0004c3c <f_getfree+0xe9>
c0004c2c:	bf 01 00 00 00       	mov    edi,0x1
c0004c31:	eb 09                	jmp    c0004c3c <f_getfree+0xe9>
c0004c33:	bf 02 00 00 00       	mov    edi,0x2
c0004c38:	eb 02                	jmp    c0004c3c <f_getfree+0xe9>
c0004c3a:	89 c7                	mov    edi,eax
c0004c3c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004c40:	89 18                	mov    DWORD PTR [eax],ebx
c0004c42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c46:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004c49:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004c4c:	83 ca 01             	or     edx,0x1
c0004c4f:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004c52:	83 c4 2c             	add    esp,0x2c
c0004c55:	89 f8                	mov    eax,edi
c0004c57:	5b                   	pop    ebx
c0004c58:	5e                   	pop    esi
c0004c59:	5f                   	pop    edi
c0004c5a:	5d                   	pop    ebp
c0004c5b:	c3                   	ret    

c0004c5c <f_truncate>:
c0004c5c:	56                   	push   esi
c0004c5d:	53                   	push   ebx
c0004c5e:	83 ec 14             	sub    esp,0x14
c0004c61:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004c65:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c69:	89 d8                	mov    eax,ebx
c0004c6b:	e8 71 d9 ff ff       	call   c00025e1 <validate>
c0004c70:	89 c6                	mov    esi,eax
c0004c72:	85 c0                	test   eax,eax
c0004c74:	0f 85 c4 00 00 00    	jne    c0004d3e <f_truncate+0xe2>
c0004c7a:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004c7e:	85 f6                	test   esi,esi
c0004c80:	0f 85 b8 00 00 00    	jne    c0004d3e <f_truncate+0xe2>
c0004c86:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004c8a:	0f 84 a9 00 00 00    	je     c0004d39 <f_truncate+0xdd>
c0004c90:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004c93:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004c96:	0f 83 a2 00 00 00    	jae    c0004d3e <f_truncate+0xe2>
c0004c9c:	85 c0                	test   eax,eax
c0004c9e:	75 15                	jne    c0004cb5 <f_truncate+0x59>
c0004ca0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ca3:	31 c9                	xor    ecx,ecx
c0004ca5:	89 d8                	mov    eax,ebx
c0004ca7:	e8 bf eb ff ff       	call   c000386b <remove_chain>
c0004cac:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004cb3:	eb 35                	jmp    c0004cea <f_truncate+0x8e>
c0004cb5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004cb8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004cba:	e8 a1 e8 ff ff       	call   c0003560 <get_fat.isra.2>
c0004cbf:	89 c2                	mov    edx,eax
c0004cc1:	b8 01 00 00 00       	mov    eax,0x1
c0004cc6:	83 fa ff             	cmp    edx,0xffffffff
c0004cc9:	74 1f                	je     c0004cea <f_truncate+0x8e>
c0004ccb:	b8 02 00 00 00       	mov    eax,0x2
c0004cd0:	83 fa 01             	cmp    edx,0x1
c0004cd3:	74 15                	je     c0004cea <f_truncate+0x8e>
c0004cd5:	31 c0                	xor    eax,eax
c0004cd7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004cdb:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004cde:	76 0a                	jbe    c0004cea <f_truncate+0x8e>
c0004ce0:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004ce3:	89 d8                	mov    eax,ebx
c0004ce5:	e8 81 eb ff ff       	call   c000386b <remove_chain>
c0004cea:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ced:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004cf0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004cf3:	83 ca 40             	or     edx,0x40
c0004cf6:	85 c0                	test   eax,eax
c0004cf8:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004cfb:	75 35                	jne    c0004d32 <f_truncate+0xd6>
c0004cfd:	80 e2 80             	and    dl,0x80
c0004d00:	74 3c                	je     c0004d3e <f_truncate+0xe2>
c0004d02:	6a 01                	push   0x1
c0004d04:	8d 43 28             	lea    eax,[ebx+0x28]
c0004d07:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004d0a:	50                   	push   eax
c0004d0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004d0f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004d13:	50                   	push   eax
c0004d14:	e8 d5 d3 ff ff       	call   c00020ee <disk_write>
c0004d19:	83 c4 10             	add    esp,0x10
c0004d1c:	85 c0                	test   eax,eax
c0004d1e:	75 0d                	jne    c0004d2d <f_truncate+0xd1>
c0004d20:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004d23:	31 f6                	xor    esi,esi
c0004d25:	83 e0 7f             	and    eax,0x7f
c0004d28:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004d2b:	eb 11                	jmp    c0004d3e <f_truncate+0xe2>
c0004d2d:	b8 01 00 00 00       	mov    eax,0x1
c0004d32:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004d35:	89 c6                	mov    esi,eax
c0004d37:	eb 05                	jmp    c0004d3e <f_truncate+0xe2>
c0004d39:	be 07 00 00 00       	mov    esi,0x7
c0004d3e:	89 f0                	mov    eax,esi
c0004d40:	83 c4 14             	add    esp,0x14
c0004d43:	5b                   	pop    ebx
c0004d44:	5e                   	pop    esi
c0004d45:	c3                   	ret    

c0004d46 <f_unlink>:
c0004d46:	55                   	push   ebp
c0004d47:	b9 02 00 00 00       	mov    ecx,0x2
c0004d4c:	57                   	push   edi
c0004d4d:	56                   	push   esi
c0004d4e:	53                   	push   ebx
c0004d4f:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004d55:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d59:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004d60:	e8 78 da ff ff       	call   c00027dd <mount_volume>
c0004d65:	85 c0                	test   eax,eax
c0004d67:	0f 85 f0 00 00 00    	jne    c0004e5d <f_unlink+0x117>
c0004d6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d71:	83 ec 0c             	sub    esp,0xc
c0004d74:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d78:	68 00 02 00 00       	push   0x200
c0004d7d:	e8 ea 11 00 00       	call   c0005f6c <ff_memalloc>
c0004d82:	83 c4 10             	add    esp,0x10
c0004d85:	89 c3                	mov    ebx,eax
c0004d87:	b8 11 00 00 00       	mov    eax,0x11
c0004d8c:	85 db                	test   ebx,ebx
c0004d8e:	0f 84 c9 00 00 00    	je     c0004e5d <f_unlink+0x117>
c0004d94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d98:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004d9f:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004da2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004da6:	e8 7c ef ff ff       	call   c0003d27 <follow_path>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 96 00 00 00    	jne    c0004e49 <f_unlink+0x103>
c0004db3:	b8 06 00 00 00       	mov    eax,0x6
c0004db8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004dbd:	0f 85 86 00 00 00    	jne    c0004e49 <f_unlink+0x103>
c0004dc3:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004dc8:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004dce:	74 07                	je     c0004dd7 <f_unlink+0x91>
c0004dd0:	b8 07 00 00 00       	mov    eax,0x7
c0004dd5:	eb 72                	jmp    c0004e49 <f_unlink+0x103>
c0004dd7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ddb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ddf:	8a 07                	mov    al,BYTE PTR [edi]
c0004de1:	e8 29 e7 ff ff       	call   c000350f <ld_clust.isra.0>
c0004de6:	83 e5 10             	and    ebp,0x10
c0004de9:	89 c6                	mov    esi,eax
c0004deb:	75 0f                	jne    c0004dfc <f_unlink+0xb6>
c0004ded:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004df1:	e8 95 ed ff ff       	call   c0003b8b <dir_remove>
c0004df6:	85 c0                	test   eax,eax
c0004df8:	74 2f                	je     c0004e29 <f_unlink+0xe3>
c0004dfa:	eb 4d                	jmp    c0004e49 <f_unlink+0x103>
c0004dfc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004e00:	31 d2                	xor    edx,edx
c0004e02:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004e06:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004e0a:	e8 55 e8 ff ff       	call   c0003664 <dir_sdi>
c0004e0f:	85 c0                	test   eax,eax
c0004e11:	75 36                	jne    c0004e49 <f_unlink+0x103>
c0004e13:	31 d2                	xor    edx,edx
c0004e15:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004e19:	e8 45 ec ff ff       	call   c0003a63 <dir_read>
c0004e1e:	85 c0                	test   eax,eax
c0004e20:	74 ae                	je     c0004dd0 <f_unlink+0x8a>
c0004e22:	83 f8 04             	cmp    eax,0x4
c0004e25:	75 22                	jne    c0004e49 <f_unlink+0x103>
c0004e27:	eb c4                	jmp    c0004ded <f_unlink+0xa7>
c0004e29:	85 f6                	test   esi,esi
c0004e2b:	75 0b                	jne    c0004e38 <f_unlink+0xf2>
c0004e2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e31:	e8 8b e2 ff ff       	call   c00030c1 <sync_fs>
c0004e36:	eb 11                	jmp    c0004e49 <f_unlink+0x103>
c0004e38:	31 c9                	xor    ecx,ecx
c0004e3a:	89 f2                	mov    edx,esi
c0004e3c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e40:	e8 26 ea ff ff       	call   c000386b <remove_chain>
c0004e45:	85 c0                	test   eax,eax
c0004e47:	74 e4                	je     c0004e2d <f_unlink+0xe7>
c0004e49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4d:	83 ec 0c             	sub    esp,0xc
c0004e50:	53                   	push   ebx
c0004e51:	e8 2e 11 00 00       	call   c0005f84 <ff_memfree>
c0004e56:	83 c4 10             	add    esp,0x10
c0004e59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5d:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004e63:	5b                   	pop    ebx
c0004e64:	5e                   	pop    esi
c0004e65:	5f                   	pop    edi
c0004e66:	5d                   	pop    ebp
c0004e67:	c3                   	ret    

c0004e68 <f_mkdir>:
c0004e68:	57                   	push   edi
c0004e69:	b9 02 00 00 00       	mov    ecx,0x2
c0004e6e:	56                   	push   esi
c0004e6f:	53                   	push   ebx
c0004e70:	83 ec 50             	sub    esp,0x50
c0004e73:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004e77:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e7b:	e8 5d d9 ff ff       	call   c00027dd <mount_volume>
c0004e80:	89 c3                	mov    ebx,eax
c0004e82:	85 c0                	test   eax,eax
c0004e84:	0f 85 70 01 00 00    	jne    c0004ffa <f_mkdir+0x192>
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	bb 11 00 00 00       	mov    ebx,0x11
c0004e93:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e97:	83 ec 0c             	sub    esp,0xc
c0004e9a:	68 00 02 00 00       	push   0x200
c0004e9f:	e8 c8 10 00 00       	call   c0005f6c <ff_memalloc>
c0004ea4:	83 c4 10             	add    esp,0x10
c0004ea7:	89 c7                	mov    edi,eax
c0004ea9:	85 c0                	test   eax,eax
c0004eab:	0f 84 49 01 00 00    	je     c0004ffa <f_mkdir+0x192>
c0004eb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004eb5:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004eb9:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004ebc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec0:	e8 62 ee ff ff       	call   c0003d27 <follow_path>
c0004ec5:	89 c3                	mov    ebx,eax
c0004ec7:	85 c0                	test   eax,eax
c0004ec9:	74 3e                	je     c0004f09 <f_mkdir+0xa1>
c0004ecb:	83 f8 04             	cmp    eax,0x4
c0004ece:	75 3e                	jne    c0004f0e <f_mkdir+0xa6>
c0004ed0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ed4:	31 d2                	xor    edx,edx
c0004ed6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004eda:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004ede:	e8 49 e8 ff ff       	call   c000372c <create_chain>
c0004ee3:	89 c6                	mov    esi,eax
c0004ee5:	85 c0                	test   eax,eax
c0004ee7:	74 0c                	je     c0004ef5 <f_mkdir+0x8d>
c0004ee9:	bb 02 00 00 00       	mov    ebx,0x2
c0004eee:	83 f8 01             	cmp    eax,0x1
c0004ef1:	74 07                	je     c0004efa <f_mkdir+0x92>
c0004ef3:	eb 2a                	jmp    c0004f1f <f_mkdir+0xb7>
c0004ef5:	bb 07 00 00 00       	mov    ebx,0x7
c0004efa:	31 c9                	xor    ecx,ecx
c0004efc:	89 f2                	mov    edx,esi
c0004efe:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004f02:	e8 64 e9 ff ff       	call   c000386b <remove_chain>
c0004f07:	eb 05                	jmp    c0004f0e <f_mkdir+0xa6>
c0004f09:	bb 08 00 00 00       	mov    ebx,0x8
c0004f0e:	83 ec 0c             	sub    esp,0xc
c0004f11:	57                   	push   edi
c0004f12:	e8 6d 10 00 00       	call   c0005f84 <ff_memfree>
c0004f17:	83 c4 10             	add    esp,0x10
c0004f1a:	e9 db 00 00 00       	jmp    c0004ffa <f_mkdir+0x192>
c0004f1f:	bb 01 00 00 00       	mov    ebx,0x1
c0004f24:	83 f8 ff             	cmp    eax,0xffffffff
c0004f27:	74 d1                	je     c0004efa <f_mkdir+0x92>
c0004f29:	89 f2                	mov    edx,esi
c0004f2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f2f:	e8 f1 dc ff ff       	call   c0002c25 <dir_clear>
c0004f34:	89 c3                	mov    ebx,eax
c0004f36:	85 c0                	test   eax,eax
c0004f38:	75 c0                	jne    c0004efa <f_mkdir+0x92>
c0004f3a:	b9 0b 00 00 00       	mov    ecx,0xb
c0004f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f43:	ba 20 00 00 00       	mov    edx,0x20
c0004f48:	83 c0 34             	add    eax,0x34
c0004f4b:	e8 14 d2 ff ff       	call   c0002164 <mem_set>
c0004f50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f54:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f59:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004f5d:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004f61:	83 c0 4a             	add    eax,0x4a
c0004f64:	e8 e3 d1 ff ff       	call   c000214c <st_dword>
c0004f69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f6d:	89 f1                	mov    ecx,esi
c0004f6f:	8d 50 34             	lea    edx,[eax+0x34]
c0004f72:	e8 c1 e5 ff ff       	call   c0003538 <st_clust.isra.1>
c0004f77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f7b:	b9 20 00 00 00       	mov    ecx,0x20
c0004f80:	8d 50 34             	lea    edx,[eax+0x34]
c0004f83:	83 c0 54             	add    eax,0x54
c0004f86:	e8 c4 d1 ff ff       	call   c000214f <mem_cpy>
c0004f8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f8f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004f93:	8d 50 54             	lea    edx,[eax+0x54]
c0004f96:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004f9a:	e8 99 e5 ff ff       	call   c0003538 <st_clust.isra.1>
c0004f9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fa3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fa7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004fab:	e8 0c ee ff ff       	call   c0003dbc <dir_register>
c0004fb0:	89 c3                	mov    ebx,eax
c0004fb2:	85 c0                	test   eax,eax
c0004fb4:	0f 85 40 ff ff ff    	jne    c0004efa <f_mkdir+0x92>
c0004fba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fbe:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fc3:	83 c0 16             	add    eax,0x16
c0004fc6:	e8 81 d1 ff ff       	call   c000214c <st_dword>
c0004fcb:	89 f1                	mov    ecx,esi
c0004fcd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004fd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fd5:	e8 5e e5 ff ff       	call   c0003538 <st_clust.isra.1>
c0004fda:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fde:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004fe2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fe6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fee:	e8 ce e0 ff ff       	call   c00030c1 <sync_fs>
c0004ff3:	89 c3                	mov    ebx,eax
c0004ff5:	e9 14 ff ff ff       	jmp    c0004f0e <f_mkdir+0xa6>
c0004ffa:	83 c4 50             	add    esp,0x50
c0004ffd:	89 d8                	mov    eax,ebx
c0004fff:	5b                   	pop    ebx
c0005000:	5e                   	pop    esi
c0005001:	5f                   	pop    edi
c0005002:	c3                   	ret    

c0005003 <f_rename>:
c0005003:	57                   	push   edi
c0005004:	56                   	push   esi
c0005005:	53                   	push   ebx
c0005006:	81 ec a0 00 00 00    	sub    esp,0xa0
c000500c:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0005013:	e8 7c d5 ff ff       	call   c0002594 <get_ldnumber>
c0005018:	b9 02 00 00 00       	mov    ecx,0x2
c000501d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005021:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0005028:	e8 b0 d7 ff ff       	call   c00027dd <mount_volume>
c000502d:	85 c0                	test   eax,eax
c000502f:	0f 85 7c 01 00 00    	jne    c00051b1 <f_rename+0x1ae>
c0005035:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005039:	83 ec 0c             	sub    esp,0xc
c000503c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0005040:	68 00 02 00 00       	push   0x200
c0005045:	e8 22 0f 00 00       	call   c0005f6c <ff_memalloc>
c000504a:	83 c4 10             	add    esp,0x10
c000504d:	89 c6                	mov    esi,eax
c000504f:	b8 11 00 00 00       	mov    eax,0x11
c0005054:	85 f6                	test   esi,esi
c0005056:	0f 84 55 01 00 00    	je     c00051b1 <f_rename+0x1ae>
c000505c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005060:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0005067:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000506a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000506e:	e8 b4 ec ff ff       	call   c0003d27 <follow_path>
c0005073:	85 c0                	test   eax,eax
c0005075:	0f 85 22 01 00 00    	jne    c000519d <f_rename+0x19a>
c000507b:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c000507f:	b8 06 00 00 00       	mov    eax,0x6
c0005084:	80 e2 a0             	and    dl,0xa0
c0005087:	0f 85 10 01 00 00    	jne    c000519d <f_rename+0x19a>
c000508d:	b9 20 00 00 00       	mov    ecx,0x20
c0005092:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005096:	8d 44 24 20          	lea    eax,[esp+0x20]
c000509a:	e8 b0 d0 ff ff       	call   c000214f <mem_cpy>
c000509f:	b9 30 00 00 00       	mov    ecx,0x30
c00050a4:	8d 54 24 40          	lea    edx,[esp+0x40]
c00050a8:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050ac:	e8 9e d0 ff ff       	call   c000214f <mem_cpy>
c00050b1:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c00050b8:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050bc:	e8 66 ec ff ff       	call   c0003d27 <follow_path>
c00050c1:	85 c0                	test   eax,eax
c00050c3:	75 20                	jne    c00050e5 <f_rename+0xe2>
c00050c5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00050c9:	b8 08 00 00 00       	mov    eax,0x8
c00050ce:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c00050d2:	0f 85 c5 00 00 00    	jne    c000519d <f_rename+0x19a>
c00050d8:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00050dc:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c00050e3:	eb 03                	jmp    c00050e8 <f_rename+0xe5>
c00050e5:	83 f8 04             	cmp    eax,0x4
c00050e8:	0f 85 af 00 00 00    	jne    c000519d <f_rename+0x19a>
c00050ee:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050f2:	e8 c5 ec ff ff       	call   c0003dbc <dir_register>
c00050f7:	85 c0                	test   eax,eax
c00050f9:	0f 85 9e 00 00 00    	jne    c000519d <f_rename+0x19a>
c00050ff:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0005106:	b9 13 00 00 00       	mov    ecx,0x13
c000510b:	8d 43 0d             	lea    eax,[ebx+0xd]
c000510e:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0005112:	e8 38 d0 ff ff       	call   c000214f <mem_cpy>
c0005117:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c000511b:	a8 10                	test   al,0x10
c000511d:	75 03                	jne    c0005122 <f_rename+0x11f>
c000511f:	83 c8 20             	or     eax,0x20
c0005122:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0005125:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005129:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000512d:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0005131:	74 54                	je     c0005187 <f_rename+0x184>
c0005133:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0005137:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c000513b:	74 4a                	je     c0005187 <f_rename+0x184>
c000513d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0005141:	89 da                	mov    edx,ebx
c0005143:	8a 07                	mov    al,BYTE PTR [edi]
c0005145:	e8 c5 e3 ff ff       	call   c000350f <ld_clust.isra.0>
c000514a:	89 c2                	mov    edx,eax
c000514c:	89 f8                	mov    eax,edi
c000514e:	e8 27 d2 ff ff       	call   c000237a <clst2sect>
c0005153:	89 c2                	mov    edx,eax
c0005155:	b8 02 00 00 00       	mov    eax,0x2
c000515a:	85 d2                	test   edx,edx
c000515c:	74 3f                	je     c000519d <f_rename+0x19a>
c000515e:	89 f8                	mov    eax,edi
c0005160:	e8 25 d5 ff ff       	call   c000268a <move_window>
c0005165:	85 c0                	test   eax,eax
c0005167:	75 34                	jne    c000519d <f_rename+0x19a>
c0005169:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516d:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0005171:	75 14                	jne    c0005187 <f_rename+0x184>
c0005173:	8d 50 54             	lea    edx,[eax+0x54]
c0005176:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000517a:	e8 b9 e3 ff ff       	call   c0003538 <st_clust.isra.1>
c000517f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005183:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005187:	8d 44 24 40          	lea    eax,[esp+0x40]
c000518b:	e8 fb e9 ff ff       	call   c0003b8b <dir_remove>
c0005190:	85 c0                	test   eax,eax
c0005192:	75 09                	jne    c000519d <f_rename+0x19a>
c0005194:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005198:	e8 24 df ff ff       	call   c00030c1 <sync_fs>
c000519d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	56                   	push   esi
c00051a5:	e8 da 0d 00 00       	call   c0005f84 <ff_memfree>
c00051aa:	83 c4 10             	add    esp,0x10
c00051ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b1:	81 c4 a0 00 00 00    	add    esp,0xa0
c00051b7:	5b                   	pop    ebx
c00051b8:	5e                   	pop    esi
c00051b9:	5f                   	pop    edi
c00051ba:	c3                   	ret    

c00051bb <f_chmod>:
c00051bb:	57                   	push   edi
c00051bc:	b9 02 00 00 00       	mov    ecx,0x2
c00051c1:	56                   	push   esi
c00051c2:	53                   	push   ebx
c00051c3:	83 ec 50             	sub    esp,0x50
c00051c6:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c00051ca:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c00051ce:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051d2:	8d 44 24 60          	lea    eax,[esp+0x60]
c00051d6:	e8 02 d6 ff ff       	call   c00027dd <mount_volume>
c00051db:	85 c0                	test   eax,eax
c00051dd:	0f 85 81 00 00 00    	jne    c0005264 <f_chmod+0xa9>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	83 ec 0c             	sub    esp,0xc
c00051ea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00051ee:	68 00 02 00 00       	push   0x200
c00051f3:	e8 74 0d 00 00       	call   c0005f6c <ff_memalloc>
c00051f8:	83 c4 10             	add    esp,0x10
c00051fb:	89 c6                	mov    esi,eax
c00051fd:	b8 11 00 00 00       	mov    eax,0x11
c0005202:	85 f6                	test   esi,esi
c0005204:	74 5e                	je     c0005264 <f_chmod+0xa9>
c0005206:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000520e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005211:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005215:	e8 0d eb ff ff       	call   c0003d27 <follow_path>
c000521a:	85 c0                	test   eax,eax
c000521c:	75 32                	jne    c0005250 <f_chmod+0x95>
c000521e:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005222:	b8 06 00 00 00       	mov    eax,0x6
c0005227:	80 e2 a0             	and    dl,0xa0
c000522a:	75 24                	jne    c0005250 <f_chmod+0x95>
c000522c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005230:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0005233:	31 d7                	xor    edi,edx
c0005235:	21 fb                	and    ebx,edi
c0005237:	83 e3 27             	and    ebx,0x27
c000523a:	31 d3                	xor    ebx,edx
c000523c:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c000523f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005243:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005247:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000524b:	e8 71 de ff ff       	call   c00030c1 <sync_fs>
c0005250:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005254:	83 ec 0c             	sub    esp,0xc
c0005257:	56                   	push   esi
c0005258:	e8 27 0d 00 00       	call   c0005f84 <ff_memfree>
c000525d:	83 c4 10             	add    esp,0x10
c0005260:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005264:	83 c4 50             	add    esp,0x50
c0005267:	5b                   	pop    ebx
c0005268:	5e                   	pop    esi
c0005269:	5f                   	pop    edi
c000526a:	c3                   	ret    

c000526b <f_utime>:
c000526b:	56                   	push   esi
c000526c:	b9 02 00 00 00       	mov    ecx,0x2
c0005271:	53                   	push   ebx
c0005272:	83 ec 54             	sub    esp,0x54
c0005275:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005279:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000527d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005281:	e8 57 d5 ff ff       	call   c00027dd <mount_volume>
c0005286:	85 c0                	test   eax,eax
c0005288:	0f 85 87 00 00 00    	jne    c0005315 <f_utime+0xaa>
c000528e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005292:	83 ec 0c             	sub    esp,0xc
c0005295:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005299:	68 00 02 00 00       	push   0x200
c000529e:	e8 c9 0c 00 00       	call   c0005f6c <ff_memalloc>
c00052a3:	83 c4 10             	add    esp,0x10
c00052a6:	89 c3                	mov    ebx,eax
c00052a8:	b8 11 00 00 00       	mov    eax,0x11
c00052ad:	85 db                	test   ebx,ebx
c00052af:	74 64                	je     c0005315 <f_utime+0xaa>
c00052b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052b5:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00052b9:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00052bc:	8d 44 24 20          	lea    eax,[esp+0x20]
c00052c0:	e8 62 ea ff ff       	call   c0003d27 <follow_path>
c00052c5:	85 c0                	test   eax,eax
c00052c7:	75 38                	jne    c0005301 <f_utime+0x96>
c00052c9:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00052cd:	b8 06 00 00 00       	mov    eax,0x6
c00052d2:	80 e2 a0             	and    dl,0xa0
c00052d5:	75 2a                	jne    c0005301 <f_utime+0x96>
c00052d7:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c00052db:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c00052df:	c1 e2 10             	shl    edx,0x10
c00052e2:	09 c2                	or     edx,eax
c00052e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00052e8:	83 c0 16             	add    eax,0x16
c00052eb:	e8 5c ce ff ff       	call   c000214c <st_dword>
c00052f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052f4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00052f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052fc:	e8 c0 dd ff ff       	call   c00030c1 <sync_fs>
c0005301:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005305:	83 ec 0c             	sub    esp,0xc
c0005308:	53                   	push   ebx
c0005309:	e8 76 0c 00 00       	call   c0005f84 <ff_memfree>
c000530e:	83 c4 10             	add    esp,0x10
c0005311:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005315:	83 c4 54             	add    esp,0x54
c0005318:	5b                   	pop    ebx
c0005319:	5e                   	pop    esi
c000531a:	c3                   	ret    

c000531b <f_getlabel>:
c000531b:	55                   	push   ebp
c000531c:	31 c9                	xor    ecx,ecx
c000531e:	57                   	push   edi
c000531f:	56                   	push   esi
c0005320:	53                   	push   ebx
c0005321:	83 ec 5c             	sub    esp,0x5c
c0005324:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005328:	8d 44 24 70          	lea    eax,[esp+0x70]
c000532c:	e8 ac d4 ff ff       	call   c00027dd <mount_volume>
c0005331:	89 c6                	mov    esi,eax
c0005333:	85 c0                	test   eax,eax
c0005335:	0f 85 27 01 00 00    	jne    c0005462 <f_getlabel+0x147>
c000533b:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0005340:	0f 84 d0 00 00 00    	je     c0005416 <f_getlabel+0xfb>
c0005346:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000534a:	31 d2                	xor    edx,edx
c000534c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005350:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005358:	8d 44 24 20          	lea    eax,[esp+0x20]
c000535c:	e8 03 e3 ff ff       	call   c0003664 <dir_sdi>
c0005361:	85 c0                	test   eax,eax
c0005363:	0f 85 a1 00 00 00    	jne    c000540a <f_getlabel+0xef>
c0005369:	ba 01 00 00 00       	mov    edx,0x1
c000536e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005372:	e8 ec e6 ff ff       	call   c0003a63 <dir_read>
c0005377:	85 c0                	test   eax,eax
c0005379:	0f 85 8b 00 00 00    	jne    c000540a <f_getlabel+0xef>
c000537f:	31 db                	xor    ebx,ebx
c0005381:	31 c9                	xor    ecx,ecx
c0005383:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005387:	8d 79 01             	lea    edi,[ecx+0x1]
c000538a:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000538f:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005394:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005398:	e8 06 ce ff ff       	call   c00021a3 <dbc_1st>
c000539d:	85 c0                	test   eax,eax
c000539f:	74 16                	je     c00053b7 <f_getlabel+0x9c>
c00053a1:	83 ff 0b             	cmp    edi,0xb
c00053a4:	74 11                	je     c00053b7 <f_getlabel+0x9c>
c00053a6:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c00053ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00053af:	8d 79 02             	lea    edi,[ecx+0x2]
c00053b2:	c1 e0 08             	shl    eax,0x8
c00053b5:	09 c2                	or     edx,eax
c00053b7:	0f b7 d2             	movzx  edx,dx
c00053ba:	50                   	push   eax
c00053bb:	50                   	push   eax
c00053bc:	68 b5 01 00 00       	push   0x1b5
c00053c1:	52                   	push   edx
c00053c2:	e8 75 0c 00 00       	call   c000603c <ff_oem2uni>
c00053c7:	83 c4 10             	add    esp,0x10
c00053ca:	0f b7 c0             	movzx  eax,ax
c00053cd:	85 c0                	test   eax,eax
c00053cf:	74 22                	je     c00053f3 <f_getlabel+0xd8>
c00053d1:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00053d5:	b9 04 00 00 00       	mov    ecx,0x4
c00053da:	01 da                	add    edx,ebx
c00053dc:	e8 a0 ce ff ff       	call   c0002281 <put_utf>
c00053e1:	0f b6 c0             	movzx  eax,al
c00053e4:	85 c0                	test   eax,eax
c00053e6:	74 0b                	je     c00053f3 <f_getlabel+0xd8>
c00053e8:	01 c3                	add    ebx,eax
c00053ea:	83 ff 0b             	cmp    edi,0xb
c00053ed:	74 06                	je     c00053f5 <f_getlabel+0xda>
c00053ef:	89 f9                	mov    ecx,edi
c00053f1:	eb 90                	jmp    c0005383 <f_getlabel+0x68>
c00053f3:	31 db                	xor    ebx,ebx
c00053f5:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00053f9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00053fc:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0005400:	74 14                	je     c0005416 <f_getlabel+0xfb>
c0005402:	4b                   	dec    ebx
c0005403:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0005406:	74 f1                	je     c00053f9 <f_getlabel+0xde>
c0005408:	eb 0c                	jmp    c0005416 <f_getlabel+0xfb>
c000540a:	83 f8 04             	cmp    eax,0x4
c000540d:	75 51                	jne    c0005460 <f_getlabel+0x145>
c000540f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005413:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005416:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c000541b:	74 45                	je     c0005462 <f_getlabel+0x147>
c000541d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005421:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005424:	e8 61 d2 ff ff       	call   c000268a <move_window>
c0005429:	89 c6                	mov    esi,eax
c000542b:	85 c0                	test   eax,eax
c000542d:	75 33                	jne    c0005462 <f_getlabel+0x147>
c000542f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005433:	b8 43 00 00 00       	mov    eax,0x43
c0005438:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c000543b:	83 f9 03             	cmp    ecx,0x3
c000543e:	74 0f                	je     c000544f <f_getlabel+0x134>
c0005440:	31 c0                	xor    eax,eax
c0005442:	83 f9 04             	cmp    ecx,0x4
c0005445:	0f 94 c0             	sete   al
c0005448:	48                   	dec    eax
c0005449:	83 e0 c3             	and    eax,0xffffffc3
c000544c:	83 c0 64             	add    eax,0x64
c000544f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005453:	e8 d8 cc ff ff       	call   c0002130 <ld_dword>
c0005458:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000545c:	89 07                	mov    DWORD PTR [edi],eax
c000545e:	eb 02                	jmp    c0005462 <f_getlabel+0x147>
c0005460:	89 c6                	mov    esi,eax
c0005462:	83 c4 5c             	add    esp,0x5c
c0005465:	89 f0                	mov    eax,esi
c0005467:	5b                   	pop    ebx
c0005468:	5e                   	pop    esi
c0005469:	5f                   	pop    edi
c000546a:	5d                   	pop    ebp
c000546b:	c3                   	ret    

c000546c <f_setlabel>:
c000546c:	57                   	push   edi
c000546d:	b9 02 00 00 00       	mov    ecx,0x2
c0005472:	56                   	push   esi
c0005473:	53                   	push   ebx
c0005474:	83 ec 50             	sub    esp,0x50
c0005477:	8d 54 24 04          	lea    edx,[esp+0x4]
c000547b:	8d 44 24 60          	lea    eax,[esp+0x60]
c000547f:	e8 59 d3 ff ff       	call   c00027dd <mount_volume>
c0005484:	89 c6                	mov    esi,eax
c0005486:	85 c0                	test   eax,eax
c0005488:	0f 85 65 01 00 00    	jne    c00055f3 <f_setlabel+0x187>
c000548e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005493:	ba 20 00 00 00       	mov    edx,0x20
c0005498:	8d 44 24 0a          	lea    eax,[esp+0xa]
c000549c:	31 db                	xor    ebx,ebx
c000549e:	e8 c1 cc ff ff       	call   c0002164 <mem_set>
c00054a3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00054a7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00054aa:	76 5d                	jbe    c0005509 <f_setlabel+0x9d>
c00054ac:	8d 44 24 60          	lea    eax,[esp+0x60]
c00054b0:	e8 f4 cc ff ff       	call   c00021a9 <tchar2uni>
c00054b5:	3d ff ff 00 00       	cmp    eax,0xffff
c00054ba:	76 0a                	jbe    c00054c6 <f_setlabel+0x5a>
c00054bc:	be 06 00 00 00       	mov    esi,0x6
c00054c1:	e9 2d 01 00 00       	jmp    c00055f3 <f_setlabel+0x187>
c00054c6:	83 ec 0c             	sub    esp,0xc
c00054c9:	50                   	push   eax
c00054ca:	e8 e5 0b 00 00       	call   c00060b4 <ff_wtoupper>
c00054cf:	5a                   	pop    edx
c00054d0:	59                   	pop    ecx
c00054d1:	68 b5 01 00 00       	push   0x1b5
c00054d6:	50                   	push   eax
c00054d7:	e8 c0 0a 00 00       	call   c0005f9c <ff_uni2oem>
c00054dc:	83 c4 10             	add    esp,0x10
c00054df:	0f b7 f0             	movzx  esi,ax
c00054e2:	89 f7                	mov    edi,esi
c00054e4:	85 f6                	test   esi,esi
c00054e6:	74 d4                	je     c00054bc <f_setlabel+0x50>
c00054e8:	89 f2                	mov    edx,esi
c00054ea:	b8 30 fc 02 c0       	mov    eax,0xc002fc30
c00054ef:	e8 9e cc ff ff       	call   c0002192 <chk_chr>
c00054f4:	85 c0                	test   eax,eax
c00054f6:	75 c4                	jne    c00054bc <f_setlabel+0x50>
c00054f8:	81 fe ff 00 00 00    	cmp    esi,0xff
c00054fe:	0f 87 c9 00 00 00    	ja     c00055cd <f_setlabel+0x161>
c0005504:	e9 e0 00 00 00       	jmp    c00055e9 <f_setlabel+0x17d>
c0005509:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c000550e:	74 ac                	je     c00054bc <f_setlabel+0x50>
c0005510:	85 db                	test   ebx,ebx
c0005512:	74 0e                	je     c0005522 <f_setlabel+0xb6>
c0005514:	8d 43 ff             	lea    eax,[ebx-0x1]
c0005517:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c000551c:	75 04                	jne    c0005522 <f_setlabel+0xb6>
c000551e:	89 c3                	mov    ebx,eax
c0005520:	eb ee                	jmp    c0005510 <f_setlabel+0xa4>
c0005522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005526:	31 d2                	xor    edx,edx
c0005528:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000552c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005534:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005538:	e8 27 e1 ff ff       	call   c0003664 <dir_sdi>
c000553d:	89 c6                	mov    esi,eax
c000553f:	85 c0                	test   eax,eax
c0005541:	0f 85 ac 00 00 00    	jne    c00055f3 <f_setlabel+0x187>
c0005547:	ba 01 00 00 00       	mov    edx,0x1
c000554c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005550:	e8 0e e5 ff ff       	call   c0003a63 <dir_read>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 18                	jne    c0005571 <f_setlabel+0x105>
c0005559:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000555d:	85 db                	test   ebx,ebx
c000555f:	74 0b                	je     c000556c <f_setlabel+0x100>
c0005561:	b9 0b 00 00 00       	mov    ecx,0xb
c0005566:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000556a:	eb 47                	jmp    c00055b3 <f_setlabel+0x147>
c000556c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000556f:	eb 47                	jmp    c00055b8 <f_setlabel+0x14c>
c0005571:	83 f8 04             	cmp    eax,0x4
c0005574:	75 53                	jne    c00055c9 <f_setlabel+0x15d>
c0005576:	85 db                	test   ebx,ebx
c0005578:	74 79                	je     c00055f3 <f_setlabel+0x187>
c000557a:	ba 01 00 00 00       	mov    edx,0x1
c000557f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005583:	e8 76 e4 ff ff       	call   c00039fe <dir_alloc>
c0005588:	89 c6                	mov    esi,eax
c000558a:	85 c0                	test   eax,eax
c000558c:	75 65                	jne    c00055f3 <f_setlabel+0x187>
c000558e:	b9 20 00 00 00       	mov    ecx,0x20
c0005593:	31 d2                	xor    edx,edx
c0005595:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005599:	e8 c6 cb ff ff       	call   c0002164 <mem_set>
c000559e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00055a2:	b9 0b 00 00 00       	mov    ecx,0xb
c00055a7:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00055ab:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00055af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00055b3:	e8 97 cb ff ff       	call   c000214f <mem_cpy>
c00055b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00055bc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00055c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00055c4:	e8 f8 da ff ff       	call   c00030c1 <sync_fs>
c00055c9:	89 c6                	mov    esi,eax
c00055cb:	eb 26                	jmp    c00055f3 <f_setlabel+0x187>
c00055cd:	83 fb 09             	cmp    ebx,0x9
c00055d0:	0f 87 e6 fe ff ff    	ja     c00054bc <f_setlabel+0x50>
c00055d6:	89 f0                	mov    eax,esi
c00055d8:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00055dc:	43                   	inc    ebx
c00055dd:	89 f8                	mov    eax,edi
c00055df:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00055e3:	43                   	inc    ebx
c00055e4:	e9 ba fe ff ff       	jmp    c00054a3 <f_setlabel+0x37>
c00055e9:	83 fb 0a             	cmp    ebx,0xa
c00055ec:	76 ef                	jbe    c00055dd <f_setlabel+0x171>
c00055ee:	e9 c9 fe ff ff       	jmp    c00054bc <f_setlabel+0x50>
c00055f3:	83 c4 50             	add    esp,0x50
c00055f6:	89 f0                	mov    eax,esi
c00055f8:	5b                   	pop    ebx
c00055f9:	5e                   	pop    esi
c00055fa:	5f                   	pop    edi
c00055fb:	c3                   	ret    

c00055fc <f_expand>:
c00055fc:	55                   	push   ebp
c00055fd:	57                   	push   edi
c00055fe:	56                   	push   esi
c00055ff:	53                   	push   ebx
c0005600:	83 ec 2c             	sub    esp,0x2c
c0005603:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005607:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000560b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000560f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005613:	89 d8                	mov    eax,ebx
c0005615:	e8 c7 cf ff ff       	call   c00025e1 <validate>
c000561a:	89 c6                	mov    esi,eax
c000561c:	85 c0                	test   eax,eax
c000561e:	0f 85 3b 01 00 00    	jne    c000575f <f_expand+0x163>
c0005624:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005628:	85 f6                	test   esi,esi
c000562a:	0f 85 2f 01 00 00    	jne    c000575f <f_expand+0x163>
c0005630:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005635:	75 0a                	jne    c0005641 <f_expand+0x45>
c0005637:	be 07 00 00 00       	mov    esi,0x7
c000563c:	e9 1e 01 00 00       	jmp    c000575f <f_expand+0x163>
c0005641:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005645:	75 f0                	jne    c0005637 <f_expand+0x3b>
c0005647:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000564b:	74 ea                	je     c0005637 <f_expand+0x3b>
c000564d:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005651:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005655:	c1 e1 09             	shl    ecx,0x9
c0005658:	8d 41 ff             	lea    eax,[ecx-0x1]
c000565b:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000565f:	0f 95 c0             	setne  al
c0005662:	31 d2                	xor    edx,edx
c0005664:	0f b6 c0             	movzx  eax,al
c0005667:	89 c7                	mov    edi,eax
c0005669:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000566d:	f7 f1                	div    ecx
c000566f:	01 f8                	add    eax,edi
c0005671:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005674:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005678:	83 ff 01             	cmp    edi,0x1
c000567b:	76 05                	jbe    c0005682 <f_expand+0x86>
c000567d:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005680:	77 05                	ja     c0005687 <f_expand+0x8b>
c0005682:	bf 02 00 00 00       	mov    edi,0x2
c0005687:	89 3c 24             	mov    DWORD PTR [esp],edi
c000568a:	89 fd                	mov    ebp,edi
c000568c:	31 c9                	xor    ecx,ecx
c000568e:	89 ea                	mov    edx,ebp
c0005690:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005694:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005696:	45                   	inc    ebp
c0005697:	e8 c4 de ff ff       	call   c0003560 <get_fat.isra.2>
c000569c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00056a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00056a4:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00056a7:	77 05                	ja     c00056ae <f_expand+0xb2>
c00056a9:	bd 02 00 00 00       	mov    ebp,0x2
c00056ae:	83 f8 01             	cmp    eax,0x1
c00056b1:	74 20                	je     c00056d3 <f_expand+0xd7>
c00056b3:	83 f8 ff             	cmp    eax,0xffffffff
c00056b6:	74 25                	je     c00056dd <f_expand+0xe1>
c00056b8:	85 c0                	test   eax,eax
c00056ba:	75 09                	jne    c00056c5 <f_expand+0xc9>
c00056bc:	41                   	inc    ecx
c00056bd:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00056c1:	75 07                	jne    c00056ca <f_expand+0xce>
c00056c3:	eb 1f                	jmp    c00056e4 <f_expand+0xe8>
c00056c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00056c8:	31 c9                	xor    ecx,ecx
c00056ca:	39 fd                	cmp    ebp,edi
c00056cc:	75 c0                	jne    c000568e <f_expand+0x92>
c00056ce:	e9 64 ff ff ff       	jmp    c0005637 <f_expand+0x3b>
c00056d3:	be 02 00 00 00       	mov    esi,0x2
c00056d8:	e9 82 00 00 00       	jmp    c000575f <f_expand+0x163>
c00056dd:	be 01 00 00 00       	mov    esi,0x1
c00056e2:	eb 7b                	jmp    c000575f <f_expand+0x163>
c00056e4:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00056e9:	74 2b                	je     c0005716 <f_expand+0x11a>
c00056eb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00056ee:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00056f2:	85 ed                	test   ebp,ebp
c00056f4:	74 24                	je     c000571a <f_expand+0x11e>
c00056f6:	83 c9 ff             	or     ecx,0xffffffff
c00056f9:	83 fd 01             	cmp    ebp,0x1
c00056fc:	74 03                	je     c0005701 <f_expand+0x105>
c00056fe:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005701:	89 fa                	mov    edx,edi
c0005703:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005707:	e8 c2 d3 ff ff       	call   c0002ace <put_fat>
c000570c:	85 c0                	test   eax,eax
c000570e:	75 4d                	jne    c000575d <f_expand+0x161>
c0005710:	89 f8                	mov    eax,edi
c0005712:	4d                   	dec    ebp
c0005713:	47                   	inc    edi
c0005714:	eb dc                	jmp    c00056f2 <f_expand+0xf6>
c0005716:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005719:	48                   	dec    eax
c000571a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000571e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005723:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005726:	74 37                	je     c000575f <f_expand+0x163>
c0005728:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000572b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000572e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005732:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005735:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005738:	83 c8 40             	or     eax,0x40
c000573b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000573e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005741:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005744:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005747:	39 c8                	cmp    eax,ecx
c0005749:	77 14                	ja     c000575f <f_expand+0x163>
c000574b:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000574f:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005752:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005755:	83 c8 01             	or     eax,0x1
c0005758:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000575b:	eb 02                	jmp    c000575f <f_expand+0x163>
c000575d:	89 c6                	mov    esi,eax
c000575f:	83 c4 2c             	add    esp,0x2c
c0005762:	89 f0                	mov    eax,esi
c0005764:	5b                   	pop    ebx
c0005765:	5e                   	pop    esi
c0005766:	5f                   	pop    edi
c0005767:	5d                   	pop    ebp
c0005768:	c3                   	ret    

c0005769 <f_mkfs>:
c0005769:	55                   	push   ebp
c000576a:	57                   	push   edi
c000576b:	56                   	push   esi
c000576c:	be 0b 00 00 00       	mov    esi,0xb
c0005771:	53                   	push   ebx
c0005772:	83 ec 5c             	sub    esp,0x5c
c0005775:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005779:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000577d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005781:	e8 0e ce ff ff       	call   c0002594 <get_ldnumber>
c0005786:	85 c0                	test   eax,eax
c0005788:	0f 88 d1 07 00 00    	js     c0005f5f <f_mkfs+0x7f6>
c000578e:	8b 14 85 80 7c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc8380]
c0005795:	85 d2                	test   edx,edx
c0005797:	74 03                	je     c000579c <f_mkfs+0x33>
c0005799:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000579c:	85 db                	test   ebx,ebx
c000579e:	75 05                	jne    c00057a5 <f_mkfs+0x3c>
c00057a0:	bb 20 fc 02 c0       	mov    ebx,0xc002fc20
c00057a5:	83 ec 0c             	sub    esp,0xc
c00057a8:	0f b6 c0             	movzx  eax,al
c00057ab:	be 03 00 00 00       	mov    esi,0x3
c00057b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00057b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00057b8:	e8 18 c9 ff ff       	call   c00020d5 <disk_initialize>
c00057bd:	83 c4 10             	add    esp,0x10
c00057c0:	a8 01                	test   al,0x1
c00057c2:	0f 85 97 07 00 00    	jne    c0005f5f <f_mkfs+0x7f6>
c00057c8:	be 0a 00 00 00       	mov    esi,0xa
c00057cd:	a8 04                	test   al,0x4
c00057cf:	0f 85 8a 07 00 00    	jne    c0005f5f <f_mkfs+0x7f6>
c00057d5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00057d8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00057dc:	85 c0                	test   eax,eax
c00057de:	75 20                	jne    c0005800 <f_mkfs+0x97>
c00057e0:	51                   	push   ecx
c00057e1:	8d 44 24 44          	lea    eax,[esp+0x44]
c00057e5:	50                   	push   eax
c00057e6:	6a 03                	push   0x3
c00057e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00057ec:	e8 13 c9 ff ff       	call   c0002104 <disk_ioctl>
c00057f1:	83 c4 10             	add    esp,0x10
c00057f4:	85 c0                	test   eax,eax
c00057f6:	74 08                	je     c0005800 <f_mkfs+0x97>
c00057f8:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c0005800:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0005804:	8d 42 ff             	lea    eax,[edx-0x1]
c0005807:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000580c:	77 04                	ja     c0005812 <f_mkfs+0xa9>
c000580e:	85 c2                	test   edx,eax
c0005810:	74 08                	je     c000581a <f_mkfs+0xb1>
c0005812:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000581a:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000581d:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0005821:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005825:	48                   	dec    eax
c0005826:	3c 01                	cmp    al,0x1
c0005828:	76 05                	jbe    c000582f <f_mkfs+0xc6>
c000582a:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000582f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005832:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005836:	48                   	dec    eax
c0005837:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000583c:	77 07                	ja     c0005845 <f_mkfs+0xdc>
c000583e:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c0005843:	74 08                	je     c000584d <f_mkfs+0xe4>
c0005845:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c000584d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005850:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005856:	77 07                	ja     c000585f <f_mkfs+0xf6>
c0005858:	8d 47 ff             	lea    eax,[edi-0x1]
c000585b:	85 f8                	test   eax,edi
c000585d:	74 02                	je     c0005861 <f_mkfs+0xf8>
c000585f:	31 ff                	xor    edi,edi
c0005861:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005869:	77 0a                	ja     c0005875 <f_mkfs+0x10c>
c000586b:	be 11 00 00 00       	mov    esi,0x11
c0005870:	e9 ea 06 00 00       	jmp    c0005f5f <f_mkfs+0x7f6>
c0005875:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005877:	85 ed                	test   ebp,ebp
c0005879:	89 eb                	mov    ebx,ebp
c000587b:	75 1e                	jne    c000589b <f_mkfs+0x132>
c000587d:	83 ec 0c             	sub    esp,0xc
c0005880:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005887:	25 00 fe ff ff       	and    eax,0xfffffe00
c000588c:	50                   	push   eax
c000588d:	e8 da 06 00 00       	call   c0005f6c <ff_memalloc>
c0005892:	83 c4 10             	add    esp,0x10
c0005895:	89 c3                	mov    ebx,eax
c0005897:	85 c0                	test   eax,eax
c0005899:	74 d0                	je     c000586b <f_mkfs+0x102>
c000589b:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c00058a3:	52                   	push   edx
c00058a4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00058a8:	50                   	push   eax
c00058a9:	6a 01                	push   0x1
c00058ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00058af:	e8 50 c8 ff ff       	call   c0002104 <disk_ioctl>
c00058b4:	83 c4 10             	add    esp,0x10
c00058b7:	85 c0                	test   eax,eax
c00058b9:	0f 85 49 06 00 00    	jne    c0005f08 <f_mkfs+0x79f>
c00058bf:	89 f0                	mov    eax,esi
c00058c1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00058c9:	83 e0 08             	and    eax,0x8
c00058cc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00058d0:	75 18                	jne    c00058ea <f_mkfs+0x181>
c00058d2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00058d6:	83 f8 3f             	cmp    eax,0x3f
c00058d9:	76 0f                	jbe    c00058ea <f_mkfs+0x181>
c00058db:	83 e8 3f             	sub    eax,0x3f
c00058de:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00058e6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00058ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00058ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00058f2:	83 f8 7f             	cmp    eax,0x7f
c00058f5:	0f 86 5b 02 00 00    	jbe    c0005b56 <f_mkfs+0x3ed>
c00058fb:	b9 80 00 00 00       	mov    ecx,0x80
c0005900:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c0005906:	77 05                	ja     c000590d <f_mkfs+0x1a4>
c0005908:	c1 ef 09             	shr    edi,0x9
c000590b:	89 f9                	mov    ecx,edi
c000590d:	89 f0                	mov    eax,esi
c000590f:	89 f7                	mov    edi,esi
c0005911:	83 e0 01             	and    eax,0x1
c0005914:	83 e7 02             	and    edi,0x2
c0005917:	0f b6 c0             	movzx  eax,al
c000591a:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000591e:	74 0a                	je     c000592a <f_mkfs+0x1c1>
c0005920:	85 c0                	test   eax,eax
c0005922:	0f 84 4f 01 00 00    	je     c0005a77 <f_mkfs+0x30e>
c0005928:	eb 37                	jmp    c0005961 <f_mkfs+0x1f8>
c000592a:	be 13 00 00 00       	mov    esi,0x13
c000592f:	85 c0                	test   eax,eax
c0005931:	75 2e                	jne    c0005961 <f_mkfs+0x1f8>
c0005933:	e9 e7 05 00 00       	jmp    c0005f1f <f_mkfs+0x7b6>
c0005938:	83 f8 02             	cmp    eax,0x2
c000593b:	0f 85 0d 02 00 00    	jne    c0005b4e <f_mkfs+0x3e5>
c0005941:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005947:	0f 86 e4 01 00 00    	jbe    c0005b31 <f_mkfs+0x3c8>
c000594d:	85 c9                	test   ecx,ecx
c000594f:	0f 85 dc 05 00 00    	jne    c0005f31 <f_mkfs+0x7c8>
c0005955:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005958:	83 f9 40             	cmp    ecx,0x40
c000595b:	0f 87 e0 05 00 00    	ja     c0005f41 <f_mkfs+0x7d8>
c0005961:	89 cf                	mov    edi,ecx
c0005963:	85 c9                	test   ecx,ecx
c0005965:	75 1c                	jne    c0005983 <f_mkfs+0x21a>
c0005967:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000596b:	b8 00 fc 02 c0       	mov    eax,0xc002fc00
c0005970:	c1 ee 0c             	shr    esi,0xc
c0005973:	bf 01 00 00 00       	mov    edi,0x1
c0005978:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000597b:	85 d2                	test   edx,edx
c000597d:	0f 85 63 01 00 00    	jne    c0005ae6 <f_mkfs+0x37d>
c0005983:	31 d2                	xor    edx,edx
c0005985:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005989:	f7 f7                	div    edi
c000598b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005990:	0f 86 62 01 00 00    	jbe    c0005af8 <f_mkfs+0x38f>
c0005996:	83 c0 02             	add    eax,0x2
c0005999:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000599e:	01 c0                	add    eax,eax
c00059a0:	05 ff 01 00 00       	add    eax,0x1ff
c00059a5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00059ad:	c1 e8 09             	shr    eax,0x9
c00059b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00059b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059b8:	c1 e0 05             	shl    eax,0x5
c00059bb:	c1 e8 09             	shr    eax,0x9
c00059be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00059c2:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00059c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00059cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059cf:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00059d3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00059d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059db:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00059e0:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00059e4:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00059e8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00059ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00059f0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00059f4:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00059f8:	f7 d8                	neg    eax
c00059fa:	21 c6                	and    esi,eax
c00059fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a01:	29 d6                	sub    esi,edx
c0005a03:	83 f8 03             	cmp    eax,0x3
c0005a06:	0f 85 ff 00 00 00    	jne    c0005b0b <f_mkfs+0x3a2>
c0005a0c:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005a10:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005a14:	89 f8                	mov    eax,edi
c0005a16:	c1 e0 04             	shl    eax,0x4
c0005a19:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0005a1d:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005a21:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005a25:	0f 82 2b 01 00 00    	jb     c0005b56 <f_mkfs+0x3ed>
c0005a2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005a2f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005a33:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005a37:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c0005a3c:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005a40:	29 d0                	sub    eax,edx
c0005a42:	31 d2                	xor    edx,edx
c0005a44:	f7 f7                	div    edi
c0005a46:	89 c6                	mov    esi,eax
c0005a48:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4d:	83 f8 03             	cmp    eax,0x3
c0005a50:	0f 85 e2 fe ff ff    	jne    c0005938 <f_mkfs+0x1cf>
c0005a56:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005a5c:	0f 87 03 01 00 00    	ja     c0005b65 <f_mkfs+0x3fc>
c0005a62:	85 c9                	test   ecx,ecx
c0005a64:	0f 85 ec 00 00 00    	jne    c0005b56 <f_mkfs+0x3ed>
c0005a6a:	83 ff 01             	cmp    edi,0x1
c0005a6d:	0f 86 e3 00 00 00    	jbe    c0005b56 <f_mkfs+0x3ed>
c0005a73:	d1 ef                	shr    edi,1
c0005a75:	89 f9                	mov    ecx,edi
c0005a77:	89 ce                	mov    esi,ecx
c0005a79:	85 c9                	test   ecx,ecx
c0005a7b:	75 25                	jne    c0005aa2 <f_mkfs+0x339>
c0005a7d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005a81:	b8 10 fc 02 c0       	mov    eax,0xc002fc10
c0005a86:	c1 ee 11             	shr    esi,0x11
c0005a89:	b9 01 00 00 00       	mov    ecx,0x1
c0005a8e:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005a91:	85 d2                	test   edx,edx
c0005a93:	74 0b                	je     c0005aa0 <f_mkfs+0x337>
c0005a95:	83 c0 02             	add    eax,0x2
c0005a98:	39 f2                	cmp    edx,esi
c0005a9a:	77 04                	ja     c0005aa0 <f_mkfs+0x337>
c0005a9c:	01 c9                	add    ecx,ecx
c0005a9e:	eb ee                	jmp    c0005a8e <f_mkfs+0x325>
c0005aa0:	31 f6                	xor    esi,esi
c0005aa2:	31 d2                	xor    edx,edx
c0005aa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa8:	f7 f1                	div    ecx
c0005aaa:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005ab1:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005ab6:	c1 ea 09             	shr    edx,0x9
c0005ab9:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005abe:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005ac2:	0f 87 8e 00 00 00    	ja     c0005b56 <f_mkfs+0x3ed>
c0005ac8:	89 cf                	mov    edi,ecx
c0005aca:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005ad2:	89 f1                	mov    ecx,esi
c0005ad4:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005adc:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005ae1:	e9 dc fe ff ff       	jmp    c00059c2 <f_mkfs+0x259>
c0005ae6:	83 c0 02             	add    eax,0x2
c0005ae9:	39 f2                	cmp    edx,esi
c0005aeb:	0f 87 92 fe ff ff    	ja     c0005983 <f_mkfs+0x21a>
c0005af1:	01 ff                	add    edi,edi
c0005af3:	e9 80 fe ff ff       	jmp    c0005978 <f_mkfs+0x20f>
c0005af8:	8d 04 40             	lea    eax,[eax+eax*2]
c0005afb:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005b00:	40                   	inc    eax
c0005b01:	d1 e8                	shr    eax,1
c0005b03:	83 c0 03             	add    eax,0x3
c0005b06:	e9 95 fe ff ff       	jmp    c00059a0 <f_mkfs+0x237>
c0005b0b:	31 d2                	xor    edx,edx
c0005b0d:	89 f0                	mov    eax,esi
c0005b0f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005b13:	85 d2                	test   edx,edx
c0005b15:	74 09                	je     c0005b20 <f_mkfs+0x3b7>
c0005b17:	4e                   	dec    esi
c0005b18:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005b1c:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005b20:	89 f0                	mov    eax,esi
c0005b22:	31 d2                	xor    edx,edx
c0005b24:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005b28:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005b2c:	e9 e3 fe ff ff       	jmp    c0005a14 <f_mkfs+0x2ab>
c0005b31:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005b37:	77 2c                	ja     c0005b65 <f_mkfs+0x3fc>
c0005b39:	85 c9                	test   ecx,ecx
c0005b3b:	75 19                	jne    c0005b56 <f_mkfs+0x3ed>
c0005b3d:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005b40:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005b46:	0f 86 15 fe ff ff    	jbe    c0005961 <f_mkfs+0x1f8>
c0005b4c:	eb 08                	jmp    c0005b56 <f_mkfs+0x3ed>
c0005b4e:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005b54:	76 0a                	jbe    c0005b60 <f_mkfs+0x3f7>
c0005b56:	be 0e 00 00 00       	mov    esi,0xe
c0005b5b:	e9 bf 03 00 00       	jmp    c0005f1f <f_mkfs+0x7b6>
c0005b60:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005b65:	31 d2                	xor    edx,edx
c0005b67:	b9 00 02 00 00       	mov    ecx,0x200
c0005b6c:	89 d8                	mov    eax,ebx
c0005b6e:	e8 f1 c5 ff ff       	call   c0002164 <mem_set>
c0005b73:	b9 0b 00 00 00       	mov    ecx,0xb
c0005b78:	ba ae fb 02 c0       	mov    edx,0xc002fbae
c0005b7d:	89 d8                	mov    eax,ebx
c0005b7f:	e8 cb c5 ff ff       	call   c000214f <mem_cpy>
c0005b84:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005b87:	ba 00 02 00 00       	mov    edx,0x200
c0005b8c:	e8 b7 c5 ff ff       	call   c0002148 <st_word>
c0005b91:	89 f8                	mov    eax,edi
c0005b93:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005b98:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005b9b:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005b9e:	e8 a5 c5 ff ff       	call   c0002148 <st_word>
c0005ba3:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005ba7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005baa:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005baf:	83 f8 03             	cmp    eax,0x3
c0005bb2:	75 08                	jne    c0005bbc <f_mkfs+0x453>
c0005bb4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005bbc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005bc0:	8d 43 11             	lea    eax,[ebx+0x11]
c0005bc3:	e8 80 c5 ff ff       	call   c0002148 <st_word>
c0005bc8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005bcc:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005bd2:	77 0a                	ja     c0005bde <f_mkfs+0x475>
c0005bd4:	8d 43 13             	lea    eax,[ebx+0x13]
c0005bd7:	e8 6c c5 ff ff       	call   c0002148 <st_word>
c0005bdc:	eb 08                	jmp    c0005be6 <f_mkfs+0x47d>
c0005bde:	8d 43 20             	lea    eax,[ebx+0x20]
c0005be1:	e8 66 c5 ff ff       	call   c000214c <st_dword>
c0005be6:	8d 43 18             	lea    eax,[ebx+0x18]
c0005be9:	ba 3f 00 00 00       	mov    edx,0x3f
c0005bee:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005bf2:	e8 51 c5 ff ff       	call   c0002148 <st_word>
c0005bf7:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005bfa:	ba ff 00 00 00       	mov    edx,0xff
c0005bff:	e8 44 c5 ff ff       	call   c0002148 <st_word>
c0005c04:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005c07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005c0b:	e8 3c c5 ff ff       	call   c000214c <st_dword>
c0005c10:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c15:	83 f8 03             	cmp    eax,0x3
c0005c18:	75 57                	jne    c0005c71 <f_mkfs+0x508>
c0005c1a:	8d 43 43             	lea    eax,[ebx+0x43]
c0005c1d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005c22:	e8 25 c5 ff ff       	call   c000214c <st_dword>
c0005c27:	8d 43 24             	lea    eax,[ebx+0x24]
c0005c2a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005c2e:	e8 19 c5 ff ff       	call   c000214c <st_dword>
c0005c33:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005c36:	ba 02 00 00 00       	mov    edx,0x2
c0005c3b:	e8 0c c5 ff ff       	call   c000214c <st_dword>
c0005c40:	8d 43 30             	lea    eax,[ebx+0x30]
c0005c43:	ba 01 00 00 00       	mov    edx,0x1
c0005c48:	e8 fb c4 ff ff       	call   c0002148 <st_word>
c0005c4d:	8d 43 32             	lea    eax,[ebx+0x32]
c0005c50:	ba 06 00 00 00       	mov    edx,0x6
c0005c55:	e8 ee c4 ff ff       	call   c0002148 <st_word>
c0005c5a:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005c5e:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005c62:	8d 43 47             	lea    eax,[ebx+0x47]
c0005c65:	b9 13 00 00 00       	mov    ecx,0x13
c0005c6a:	ba ba fb 02 c0       	mov    edx,0xc002fbba
c0005c6f:	eb 2f                	jmp    c0005ca0 <f_mkfs+0x537>
c0005c71:	8d 43 27             	lea    eax,[ebx+0x27]
c0005c74:	ba 00 00 21 50       	mov    edx,0x50210000
c0005c79:	e8 ce c4 ff ff       	call   c000214c <st_dword>
c0005c7e:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005c83:	8d 43 16             	lea    eax,[ebx+0x16]
c0005c86:	e8 bd c4 ff ff       	call   c0002148 <st_word>
c0005c8b:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005c8f:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005c93:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005c96:	b9 13 00 00 00       	mov    ecx,0x13
c0005c9b:	ba ce fb 02 c0       	mov    edx,0xc002fbce
c0005ca0:	e8 aa c4 ff ff       	call   c000214f <mem_cpy>
c0005ca5:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005cab:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005cb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cb4:	e8 8f c4 ff ff       	call   c0002148 <st_word>
c0005cb9:	6a 01                	push   0x1
c0005cbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cbf:	53                   	push   ebx
c0005cc0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cc4:	e8 25 c4 ff ff       	call   c00020ee <disk_write>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	85 c0                	test   eax,eax
c0005cce:	0f 85 34 02 00 00    	jne    c0005f08 <f_mkfs+0x79f>
c0005cd4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cd9:	83 f8 03             	cmp    eax,0x3
c0005cdc:	0f 85 98 00 00 00    	jne    c0005d7a <f_mkfs+0x611>
c0005ce2:	6a 01                	push   0x1
c0005ce4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005ce8:	83 c0 06             	add    eax,0x6
c0005ceb:	50                   	push   eax
c0005cec:	53                   	push   ebx
c0005ced:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cf1:	e8 f8 c3 ff ff       	call   c00020ee <disk_write>
c0005cf6:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfb:	31 d2                	xor    edx,edx
c0005cfd:	89 d8                	mov    eax,ebx
c0005cff:	e8 60 c4 ff ff       	call   c0002164 <mem_set>
c0005d04:	ba 52 52 61 41       	mov    edx,0x41615252
c0005d09:	89 d8                	mov    eax,ebx
c0005d0b:	e8 3c c4 ff ff       	call   c000214c <st_dword>
c0005d10:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005d16:	ba 72 72 41 61       	mov    edx,0x61417272
c0005d1b:	e8 2c c4 ff ff       	call   c000214c <st_dword>
c0005d20:	8d 56 ff             	lea    edx,[esi-0x1]
c0005d23:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005d29:	e8 1e c4 ff ff       	call   c000214c <st_dword>
c0005d2e:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005d34:	ba 02 00 00 00       	mov    edx,0x2
c0005d39:	e8 0e c4 ff ff       	call   c000214c <st_dword>
c0005d3e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005d43:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005d49:	e8 fa c3 ff ff       	call   c0002148 <st_word>
c0005d4e:	6a 01                	push   0x1
c0005d50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005d54:	83 c0 07             	add    eax,0x7
c0005d57:	50                   	push   eax
c0005d58:	53                   	push   ebx
c0005d59:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005d5d:	e8 8c c3 ff ff       	call   c00020ee <disk_write>
c0005d62:	83 c4 20             	add    esp,0x20
c0005d65:	6a 01                	push   0x1
c0005d67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d6b:	40                   	inc    eax
c0005d6c:	50                   	push   eax
c0005d6d:	53                   	push   ebx
c0005d6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d72:	e8 77 c3 ff ff       	call   c00020ee <disk_write>
c0005d77:	83 c4 10             	add    esp,0x10
c0005d7a:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005d7e:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005d82:	c1 e8 09             	shr    eax,0x9
c0005d85:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005d8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d8f:	31 d2                	xor    edx,edx
c0005d91:	89 d8                	mov    eax,ebx
c0005d93:	e8 cc c3 ff ff       	call   c0002164 <mem_set>
c0005d98:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d9d:	31 c9                	xor    ecx,ecx
c0005d9f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005da7:	83 f8 01             	cmp    eax,0x1
c0005daa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005dae:	0f 94 c1             	sete   cl
c0005db1:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005db5:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005db9:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005dc1:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005dc9:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005dce:	75 21                	jne    c0005df1 <f_mkfs+0x688>
c0005dd0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005dd5:	89 d8                	mov    eax,ebx
c0005dd7:	e8 70 c3 ff ff       	call   c000214c <st_dword>
c0005ddc:	8d 43 04             	lea    eax,[ebx+0x4]
c0005ddf:	83 ca ff             	or     edx,0xffffffff
c0005de2:	e8 65 c3 ff ff       	call   c000214c <st_dword>
c0005de7:	8d 43 08             	lea    eax,[ebx+0x8]
c0005dea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005def:	eb 06                	jmp    c0005df7 <f_mkfs+0x68e>
c0005df1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005df5:	89 d8                	mov    eax,ebx
c0005df7:	e8 50 c3 ff ff       	call   c000214c <st_dword>
c0005dfc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e00:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005e04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005e08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005e0c:	39 ce                	cmp    esi,ecx
c0005e0e:	76 02                	jbe    c0005e12 <f_mkfs+0x6a9>
c0005e10:	89 ce                	mov    esi,ecx
c0005e12:	56                   	push   esi
c0005e13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005e17:	53                   	push   ebx
c0005e18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005e1c:	e8 cd c2 ff ff       	call   c00020ee <disk_write>
c0005e21:	83 c4 10             	add    esp,0x10
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 85 dc 00 00 00    	jne    c0005f08 <f_mkfs+0x79f>
c0005e2c:	31 d2                	xor    edx,edx
c0005e2e:	b9 00 02 00 00       	mov    ecx,0x200
c0005e33:	89 d8                	mov    eax,ebx
c0005e35:	e8 2a c3 ff ff       	call   c0002164 <mem_set>
c0005e3a:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005e3e:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005e42:	75 c0                	jne    c0005e04 <f_mkfs+0x69b>
c0005e44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005e48:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005e50:	40                   	inc    eax
c0005e51:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005e55:	0f 87 6e ff ff ff    	ja     c0005dc9 <f_mkfs+0x660>
c0005e5b:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005e60:	83 f8 03             	cmp    eax,0x3
c0005e63:	74 04                	je     c0005e69 <f_mkfs+0x700>
c0005e65:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005e69:	89 fe                	mov    esi,edi
c0005e6b:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005e6f:	76 04                	jbe    c0005e75 <f_mkfs+0x70c>
c0005e71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e75:	56                   	push   esi
c0005e76:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005e7a:	53                   	push   ebx
c0005e7b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005e7f:	e8 6a c2 ff ff       	call   c00020ee <disk_write>
c0005e84:	83 c4 10             	add    esp,0x10
c0005e87:	85 c0                	test   eax,eax
c0005e89:	75 7d                	jne    c0005f08 <f_mkfs+0x79f>
c0005e8b:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005e8f:	29 f7                	sub    edi,esi
c0005e91:	75 d6                	jne    c0005e69 <f_mkfs+0x700>
c0005e93:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005e98:	b9 0c 00 00 00       	mov    ecx,0xc
c0005e9d:	83 f8 03             	cmp    eax,0x3
c0005ea0:	74 1e                	je     c0005ec0 <f_mkfs+0x757>
c0005ea2:	b9 06 00 00 00       	mov    ecx,0x6
c0005ea7:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005eaf:	77 0f                	ja     c0005ec0 <f_mkfs+0x757>
c0005eb1:	b9 04 00 00 00       	mov    ecx,0x4
c0005eb6:	83 f8 02             	cmp    eax,0x2
c0005eb9:	74 05                	je     c0005ec0 <f_mkfs+0x757>
c0005ebb:	b9 01 00 00 00       	mov    ecx,0x1
c0005ec0:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005ec5:	75 2a                	jne    c0005ef1 <f_mkfs+0x788>
c0005ec7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005ecb:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005ed3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005ed7:	83 ec 0c             	sub    esp,0xc
c0005eda:	53                   	push   ebx
c0005edb:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005edf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ee3:	e8 89 d2 ff ff       	call   c0003171 <create_partition>
c0005ee8:	83 c4 10             	add    esp,0x10
c0005eeb:	89 c6                	mov    esi,eax
c0005eed:	85 c0                	test   eax,eax
c0005eef:	75 2e                	jne    c0005f1f <f_mkfs+0x7b6>
c0005ef1:	31 f6                	xor    esi,esi
c0005ef3:	50                   	push   eax
c0005ef4:	6a 00                	push   0x0
c0005ef6:	6a 00                	push   0x0
c0005ef8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005efc:	e8 03 c2 ff ff       	call   c0002104 <disk_ioctl>
c0005f01:	83 c4 10             	add    esp,0x10
c0005f04:	85 c0                	test   eax,eax
c0005f06:	74 17                	je     c0005f1f <f_mkfs+0x7b6>
c0005f08:	85 ed                	test   ebp,ebp
c0005f0a:	75 0c                	jne    c0005f18 <f_mkfs+0x7af>
c0005f0c:	83 ec 0c             	sub    esp,0xc
c0005f0f:	53                   	push   ebx
c0005f10:	e8 6f 00 00 00       	call   c0005f84 <ff_memfree>
c0005f15:	83 c4 10             	add    esp,0x10
c0005f18:	be 01 00 00 00       	mov    esi,0x1
c0005f1d:	eb 40                	jmp    c0005f5f <f_mkfs+0x7f6>
c0005f1f:	85 ed                	test   ebp,ebp
c0005f21:	75 3c                	jne    c0005f5f <f_mkfs+0x7f6>
c0005f23:	83 ec 0c             	sub    esp,0xc
c0005f26:	53                   	push   ebx
c0005f27:	e8 58 00 00 00       	call   c0005f84 <ff_memfree>
c0005f2c:	83 c4 10             	add    esp,0x10
c0005f2f:	eb 2e                	jmp    c0005f5f <f_mkfs+0x7f6>
c0005f31:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005f36:	0f 85 3b fb ff ff    	jne    c0005a77 <f_mkfs+0x30e>
c0005f3c:	e9 15 fc ff ff       	jmp    c0005b56 <f_mkfs+0x3ed>
c0005f41:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005f46:	0f 85 31 fb ff ff    	jne    c0005a7d <f_mkfs+0x314>
c0005f4c:	89 cf                	mov    edi,ecx
c0005f4e:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005f54:	0f 86 29 fa ff ff    	jbe    c0005983 <f_mkfs+0x21a>
c0005f5a:	e9 f7 fb ff ff       	jmp    c0005b56 <f_mkfs+0x3ed>
c0005f5f:	83 c4 5c             	add    esp,0x5c
c0005f62:	89 f0                	mov    eax,esi
c0005f64:	5b                   	pop    ebx
c0005f65:	5e                   	pop    esi
c0005f66:	5f                   	pop    edi
c0005f67:	5d                   	pop    ebp
c0005f68:	c3                   	ret    
c0005f69:	66 90                	xchg   ax,ax
c0005f6b:	90                   	nop

c0005f6c <ff_memalloc>:
c0005f6c:	83 ec 0c             	sub    esp,0xc
c0005f6f:	83 ec 0c             	sub    esp,0xc
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	e8 4c 06 01 00       	call   c00165c7 <malloc>
c0005f7b:	83 c4 10             	add    esp,0x10
c0005f7e:	83 c4 0c             	add    esp,0xc
c0005f81:	c3                   	ret    
c0005f82:	66 90                	xchg   ax,ax

c0005f84 <ff_memfree>:
c0005f84:	83 ec 0c             	sub    esp,0xc
c0005f87:	83 ec 0c             	sub    esp,0xc
c0005f8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f8e:	e8 44 06 01 00       	call   c00165d7 <free>
c0005f93:	83 c4 10             	add    esp,0x10
c0005f96:	90                   	nop
c0005f97:	83 c4 0c             	add    esp,0xc
c0005f9a:	c3                   	ret    
c0005f9b:	90                   	nop

c0005f9c <ff_uni2oem>:
c0005f9c:	83 ec 14             	sub    esp,0x14
c0005f9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005fa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005fae:	c7 44 24 0c 00 00 03 c0 	mov    DWORD PTR [esp+0xc],0xc0030000
c0005fb6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005fbb:	77 0b                	ja     c0005fc8 <ff_uni2oem+0x2c>
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005fc6:	eb 68                	jmp    c0006030 <ff_uni2oem+0x94>
c0005fc8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005fd0:	77 5e                	ja     c0006030 <ff_uni2oem+0x94>
c0005fd2:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005fd6:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005fdb:	75 53                	jne    c0006030 <ff_uni2oem+0x94>
c0005fdd:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005fe4:	eb 12                	jmp    c0005ff8 <ff_uni2oem+0x5c>
c0005fe6:	66 90                	xchg   ax,ax
c0005fe8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005fed:	83 c0 01             	add    eax,0x1
c0005ff0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ff8:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ffd:	83 f8 7f             	cmp    eax,0x7f
c0006000:	77 1e                	ja     c0006020 <ff_uni2oem+0x84>
c0006002:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0006007:	01 c0                	add    eax,eax
c0006009:	89 c2                	mov    edx,eax
c000600b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000600f:	01 d0                	add    eax,edx
c0006011:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006014:	0f b7 c0             	movzx  eax,ax
c0006017:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000601b:	75 cb                	jne    c0005fe8 <ff_uni2oem+0x4c>
c000601d:	8d 76 00             	lea    esi,[esi+0x0]
c0006020:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0006025:	83 e8 80             	sub    eax,0xffffff80
c0006028:	0f b6 c0             	movzx  eax,al
c000602b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0006030:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0006035:	83 c4 14             	add    esp,0x14
c0006038:	c3                   	ret    
c0006039:	8d 76 00             	lea    esi,[esi+0x0]

c000603c <ff_oem2uni>:
c000603c:	83 ec 18             	sub    esp,0x18
c000603f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006043:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006047:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000604c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0006050:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0006057:	c7 44 24 10 00 00 03 c0 	mov    DWORD PTR [esp+0x10],0xc0030000
c000605f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006064:	83 f8 7f             	cmp    eax,0x7f
c0006067:	77 0b                	ja     c0006074 <ff_oem2uni+0x38>
c0006069:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000606d:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0006072:	eb 34                	jmp    c00060a8 <ff_oem2uni+0x6c>
c0006074:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0006078:	3d b5 01 00 00       	cmp    eax,0x1b5
c000607d:	75 29                	jne    c00060a8 <ff_oem2uni+0x6c>
c000607f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006084:	3d ff 00 00 00       	cmp    eax,0xff
c0006089:	77 1d                	ja     c00060a8 <ff_oem2uni+0x6c>
c000608b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006090:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0006095:	01 c0                	add    eax,eax
c0006097:	89 c2                	mov    edx,eax
c0006099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000609d:	01 d0                	add    eax,edx
c000609f:	66 8b 00             	mov    ax,WORD PTR [eax]
c00060a2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00060ad:	83 c4 18             	add    esp,0x18
c00060b0:	c3                   	ret    
c00060b1:	8d 76 00             	lea    esi,[esi+0x0]

c00060b4 <ff_wtoupper>:
c00060b4:	83 ec 10             	sub    esp,0x10
c00060b7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00060bf:	0f 87 ab 01 00 00    	ja     c0006270 <ff_wtoupper+0x1bc>
c00060c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00060c9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060ce:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00060d3:	3d ff 0f 00 00       	cmp    eax,0xfff
c00060d8:	77 0a                	ja     c00060e4 <ff_wtoupper+0x30>
c00060da:	b8 00 fe 02 c0       	mov    eax,0xc002fe00
c00060df:	eb 0b                	jmp    c00060ec <ff_wtoupper+0x38>
c00060e1:	8d 76 00             	lea    esi,[esi+0x0]
c00060e4:	b8 40 fd 02 c0       	mov    eax,0xc002fd40
c00060e9:	8d 76 00             	lea    esi,[esi+0x0]
c00060ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060f4:	8d 50 02             	lea    edx,[eax+0x2]
c00060f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00060fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0006103:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006108:	85 c0                	test   eax,eax
c000610a:	0f 84 54 01 00 00    	je     c0006264 <ff_wtoupper+0x1b0>
c0006110:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006115:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000611a:	39 c2                	cmp    edx,eax
c000611c:	0f 82 42 01 00 00    	jb     c0006264 <ff_wtoupper+0x1b0>
c0006122:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006126:	8d 50 02             	lea    edx,[eax+0x2]
c0006129:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000612d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006130:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006135:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000613a:	c1 e8 08             	shr    eax,0x8
c000613d:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006142:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0006147:	0f b6 c0             	movzx  eax,al
c000614a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000614f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006154:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0006159:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000615e:	01 ca                	add    edx,ecx
c0006160:	39 d0                	cmp    eax,edx
c0006162:	0f 8d d8 00 00 00    	jge    c0006240 <ff_wtoupper+0x18c>
c0006168:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000616d:	83 f8 08             	cmp    eax,0x8
c0006170:	0f 87 ea 00 00 00    	ja     c0006260 <ff_wtoupper+0x1ac>
c0006176:	8b 04 85 00 fd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0300]
c000617d:	ff e0                	jmp    eax
c000617f:	90                   	nop
c0006180:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006185:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000618a:	29 c2                	sub    edx,eax
c000618c:	89 d0                	mov    eax,edx
c000618e:	01 c0                	add    eax,eax
c0006190:	89 c2                	mov    edx,eax
c0006192:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006196:	01 d0                	add    eax,edx
c0006198:	66 8b 00             	mov    ax,WORD PTR [eax]
c000619b:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061a0:	e9 97 00 00 00       	jmp    c000623c <ff_wtoupper+0x188>
c00061a5:	8d 76 00             	lea    esi,[esi+0x0]
c00061a8:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00061ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00061b1:	89 d1                	mov    ecx,edx
c00061b3:	29 c1                	sub    ecx,eax
c00061b5:	89 c8                	mov    eax,ecx
c00061b7:	83 e0 01             	and    eax,0x1
c00061ba:	89 c2                	mov    edx,eax
c00061bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061c1:	29 d0                	sub    eax,edx
c00061c3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061c8:	eb 72                	jmp    c000623c <ff_wtoupper+0x188>
c00061ca:	66 90                	xchg   ax,ax
c00061cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061d1:	83 e8 10             	sub    eax,0x10
c00061d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061d9:	eb 61                	jmp    c000623c <ff_wtoupper+0x188>
c00061db:	90                   	nop
c00061dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061e1:	83 e8 20             	sub    eax,0x20
c00061e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061e9:	eb 51                	jmp    c000623c <ff_wtoupper+0x188>
c00061eb:	90                   	nop
c00061ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061f1:	83 e8 30             	sub    eax,0x30
c00061f4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061f9:	eb 41                	jmp    c000623c <ff_wtoupper+0x188>
c00061fb:	90                   	nop
c00061fc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006201:	83 e8 1a             	sub    eax,0x1a
c0006204:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006209:	eb 31                	jmp    c000623c <ff_wtoupper+0x188>
c000620b:	90                   	nop
c000620c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006211:	83 c0 08             	add    eax,0x8
c0006214:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006219:	eb 21                	jmp    c000623c <ff_wtoupper+0x188>
c000621b:	90                   	nop
c000621c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006221:	83 e8 50             	sub    eax,0x50
c0006224:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006229:	eb 11                	jmp    c000623c <ff_wtoupper+0x188>
c000622b:	90                   	nop
c000622c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006231:	2d 60 1c 00 00       	sub    eax,0x1c60
c0006236:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000623b:	90                   	nop
c000623c:	eb 22                	jmp    c0006260 <ff_wtoupper+0x1ac>
c000623e:	66 90                	xchg   ax,ax
c0006240:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006245:	85 c0                	test   eax,eax
c0006247:	0f 85 a3 fe ff ff    	jne    c00060f0 <ff_wtoupper+0x3c>
c000624d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006252:	01 c0                	add    eax,eax
c0006254:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006258:	e9 93 fe ff ff       	jmp    c00060f0 <ff_wtoupper+0x3c>
c000625d:	8d 76 00             	lea    esi,[esi+0x0]
c0006260:	90                   	nop
c0006261:	8d 76 00             	lea    esi,[esi+0x0]
c0006264:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006269:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000626d:	8d 76 00             	lea    esi,[esi+0x0]
c0006270:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006274:	83 c4 10             	add    esp,0x10
c0006277:	c3                   	ret    

c0006278 <utf2ucs>:
c0006278:	57                   	push   edi
c0006279:	31 c9                	xor    ecx,ecx
c000627b:	56                   	push   esi
c000627c:	89 d7                	mov    edi,edx
c000627e:	53                   	push   ebx
c000627f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006283:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006287:	89 de                	mov    esi,ebx
c0006289:	c1 fe 08             	sar    esi,0x8
c000628c:	89 f2                	mov    edx,esi
c000628e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006291:	41                   	inc    ecx
c0006292:	85 db                	test   ebx,ebx
c0006294:	75 e9                	jne    c000627f <utf2ucs+0x7>
c0006296:	5b                   	pop    ebx
c0006297:	5e                   	pop    esi
c0006298:	5f                   	pop    edi
c0006299:	c3                   	ret    

c000629a <ucs2utfn>:
c000629a:	83 e1 fe             	and    ecx,0xfffffffe
c000629d:	01 d1                	add    ecx,edx
c000629f:	39 d1                	cmp    ecx,edx
c00062a1:	75 04                	jne    c00062a7 <ucs2utfn+0xd>
c00062a3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00062a6:	c3                   	ret    
c00062a7:	57                   	push   edi
c00062a8:	56                   	push   esi
c00062a9:	53                   	push   ebx
c00062aa:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c00062ad:	83 c2 02             	add    edx,0x2
c00062b0:	89 de                	mov    esi,ebx
c00062b2:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c00062b6:	c1 e6 08             	shl    esi,0x8
c00062b9:	09 f3                	or     ebx,esi
c00062bb:	83 fb 3b             	cmp    ebx,0x3b
c00062be:	74 50                	je     c0006310 <ucs2utfn+0x76>
c00062c0:	83 fb 7f             	cmp    ebx,0x7f
c00062c3:	7f 05                	jg     c00062ca <ucs2utfn+0x30>
c00062c5:	88 18                	mov    BYTE PTR [eax],bl
c00062c7:	40                   	inc    eax
c00062c8:	eb 42                	jmp    c000630c <ucs2utfn+0x72>
c00062ca:	89 de                	mov    esi,ebx
c00062cc:	89 df                	mov    edi,ebx
c00062ce:	c1 fe 06             	sar    esi,0x6
c00062d1:	83 e7 3f             	and    edi,0x3f
c00062d4:	83 cf 80             	or     edi,0xffffff80
c00062d7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00062dd:	7f 12                	jg     c00062f1 <ucs2utfn+0x57>
c00062df:	83 ce c0             	or     esi,0xffffffc0
c00062e2:	83 c0 02             	add    eax,0x2
c00062e5:	89 f3                	mov    ebx,esi
c00062e7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00062ea:	89 fb                	mov    ebx,edi
c00062ec:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00062ef:	eb 1b                	jmp    c000630c <ucs2utfn+0x72>
c00062f1:	c1 fb 0c             	sar    ebx,0xc
c00062f4:	83 e6 3f             	and    esi,0x3f
c00062f7:	83 cb e0             	or     ebx,0xffffffe0
c00062fa:	83 ce 80             	or     esi,0xffffff80
c00062fd:	88 18                	mov    BYTE PTR [eax],bl
c00062ff:	89 f3                	mov    ebx,esi
c0006301:	83 c0 03             	add    eax,0x3
c0006304:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006307:	89 fb                	mov    ebx,edi
c0006309:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000630c:	39 d1                	cmp    ecx,edx
c000630e:	75 9a                	jne    c00062aa <ucs2utfn+0x10>
c0006310:	5b                   	pop    ebx
c0006311:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006314:	5e                   	pop    esi
c0006315:	5f                   	pop    edi
c0006316:	c3                   	ret    

c0006317 <isjoliet>:
c0006317:	31 d2                	xor    edx,edx
c0006319:	80 38 25             	cmp    BYTE PTR [eax],0x25
c000631c:	75 26                	jne    c0006344 <isjoliet+0x2d>
c000631e:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006322:	75 20                	jne    c0006344 <isjoliet+0x2d>
c0006324:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006328:	ba 02 00 00 00       	mov    edx,0x2
c000632d:	83 f8 43             	cmp    eax,0x43
c0006330:	74 12                	je     c0006344 <isjoliet+0x2d>
c0006332:	ba 03 00 00 00       	mov    edx,0x3
c0006337:	83 f8 45             	cmp    eax,0x45
c000633a:	74 08                	je     c0006344 <isjoliet+0x2d>
c000633c:	31 d2                	xor    edx,edx
c000633e:	83 f8 40             	cmp    eax,0x40
c0006341:	0f 94 c2             	sete   dl
c0006344:	89 d0                	mov    eax,edx
c0006346:	c3                   	ret    

c0006347 <htohl_32>:
c0006347:	8b 00                	mov    eax,DWORD PTR [eax]
c0006349:	c3                   	ret    

c000634a <iso_733>:
c000634a:	eb fb                	jmp    c0006347 <htohl_32>

c000634c <bgrad_cache>:
c000634c:	83 fa 0e             	cmp    edx,0xe
c000634f:	77 16                	ja     c0006367 <bgrad_cache+0x1b>
c0006351:	53                   	push   ebx
c0006352:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006355:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006359:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000635c:	42                   	inc    edx
c000635d:	83 fa 0f             	cmp    edx,0xf
c0006360:	75 f3                	jne    c0006355 <bgrad_cache+0x9>
c0006362:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006365:	5b                   	pop    ebx
c0006366:	c3                   	ret    
c0006367:	c3                   	ret    

c0006368 <ucscompare>:
c0006368:	55                   	push   ebp
c0006369:	57                   	push   edi
c000636a:	89 c7                	mov    edi,eax
c000636c:	56                   	push   esi
c000636d:	89 d6                	mov    esi,edx
c000636f:	53                   	push   ebx
c0006370:	31 d2                	xor    edx,edx
c0006372:	83 ec 1c             	sub    esp,0x1c
c0006375:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006379:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000637e:	c1 e3 08             	shl    ebx,0x8
c0006381:	09 c3                	or     ebx,eax
c0006383:	39 ca                	cmp    edx,ecx
c0006385:	7d 42                	jge    c00063c9 <ucscompare+0x61>
c0006387:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000638b:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006390:	c1 e0 08             	shl    eax,0x8
c0006393:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006397:	09 e8                	or     eax,ebp
c0006399:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000639d:	83 f8 3b             	cmp    eax,0x3b
c00063a0:	74 27                	je     c00063c9 <ucscompare+0x61>
c00063a2:	83 ec 0c             	sub    esp,0xc
c00063a5:	50                   	push   eax
c00063a6:	e8 a5 a5 ff ff       	call   c0000950 <tolower>
c00063ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00063ae:	89 c5                	mov    ebp,eax
c00063b0:	e8 9b a5 ff ff       	call   c0000950 <tolower>
c00063b5:	83 c4 10             	add    esp,0x10
c00063b8:	39 c5                	cmp    ebp,eax
c00063ba:	75 20                	jne    c00063dc <ucscompare+0x74>
c00063bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00063c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00063c4:	83 c2 02             	add    edx,0x2
c00063c7:	eb ac                	jmp    c0006375 <ucscompare+0xd>
c00063c9:	85 db                	test   ebx,ebx
c00063cb:	0f 95 c2             	setne  dl
c00063ce:	31 c0                	xor    eax,eax
c00063d0:	83 fb 2f             	cmp    ebx,0x2f
c00063d3:	0f 95 c0             	setne  al
c00063d6:	21 d0                	and    eax,edx
c00063d8:	f7 d8                	neg    eax
c00063da:	eb 03                	jmp    c00063df <ucscompare+0x77>
c00063dc:	83 c8 ff             	or     eax,0xffffffff
c00063df:	83 c4 1c             	add    esp,0x1c
c00063e2:	5b                   	pop    ebx
c00063e3:	5e                   	pop    esi
c00063e4:	5f                   	pop    edi
c00063e5:	5d                   	pop    ebp
c00063e6:	c3                   	ret    

c00063e7 <fncompare>:
c00063e7:	55                   	push   ebp
c00063e8:	57                   	push   edi
c00063e9:	89 c7                	mov    edi,eax
c00063eb:	56                   	push   esi
c00063ec:	89 ce                	mov    esi,ecx
c00063ee:	53                   	push   ebx
c00063ef:	31 db                	xor    ebx,ebx
c00063f1:	83 ec 1c             	sub    esp,0x1c
c00063f4:	39 d3                	cmp    ebx,edx
c00063f6:	7d 45                	jge    c000643d <fncompare+0x56>
c00063f8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00063fc:	83 f8 3b             	cmp    eax,0x3b
c00063ff:	74 3c                	je     c000643d <fncompare+0x56>
c0006401:	83 f8 2e             	cmp    eax,0x2e
c0006404:	75 0e                	jne    c0006414 <fncompare+0x2d>
c0006406:	8d 4a ff             	lea    ecx,[edx-0x1]
c0006409:	39 d9                	cmp    ecx,ebx
c000640b:	74 30                	je     c000643d <fncompare+0x56>
c000640d:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0006412:	74 29                	je     c000643d <fncompare+0x56>
c0006414:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006418:	83 ec 0c             	sub    esp,0xc
c000641b:	50                   	push   eax
c000641c:	e8 2f a5 ff ff       	call   c0000950 <tolower>
c0006421:	89 c5                	mov    ebp,eax
c0006423:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006427:	89 04 24             	mov    DWORD PTR [esp],eax
c000642a:	e8 21 a5 ff ff       	call   c0000950 <tolower>
c000642f:	83 c4 10             	add    esp,0x10
c0006432:	39 c5                	cmp    ebp,eax
c0006434:	75 1e                	jne    c0006454 <fncompare+0x6d>
c0006436:	43                   	inc    ebx
c0006437:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000643b:	eb b7                	jmp    c00063f4 <fncompare+0xd>
c000643d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	0f 95 c1             	setne  cl
c0006446:	31 c0                	xor    eax,eax
c0006448:	83 fa 2f             	cmp    edx,0x2f
c000644b:	0f 95 c0             	setne  al
c000644e:	21 c8                	and    eax,ecx
c0006450:	f7 d8                	neg    eax
c0006452:	eb 03                	jmp    c0006457 <fncompare+0x70>
c0006454:	83 c8 ff             	or     eax,0xffffffff
c0006457:	83 c4 1c             	add    esp,0x1c
c000645a:	5b                   	pop    ebx
c000645b:	5e                   	pop    esi
c000645c:	5f                   	pop    edi
c000645d:	5d                   	pop    ebp
c000645e:	c3                   	ret    

c000645f <bclear_cache>:
c000645f:	83 ec 18             	sub    esp,0x18
c0006462:	68 00 01 03 c0       	push   0xc0030100
c0006467:	e8 cc 34 02 00       	call   c0029938 <iso_kprintf>
c000646c:	83 c4 10             	add    esp,0x10
c000646f:	31 c0                	xor    eax,eax
c0006471:	8b 14 85 20 70 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc8fe0]
c0006478:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000647e:	8b 14 85 80 70 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc8f80]
c0006485:	40                   	inc    eax
c0006486:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000648c:	83 f8 10             	cmp    eax,0x10
c000648f:	75 e0                	jne    c0006471 <bclear_cache+0x12>
c0006491:	83 c4 0c             	add    esp,0xc
c0006494:	c3                   	ret    

c0006495 <bclear>:
c0006495:	eb c8                	jmp    c000645f <bclear_cache>

c0006497 <iso_break_all>:
c0006497:	83 ec 18             	sub    esp,0x18
c000649a:	68 0e 01 03 c0       	push   0xc003010e
c000649f:	e8 94 34 02 00       	call   c0029938 <iso_kprintf>
c00064a4:	83 c4 10             	add    esp,0x10
c00064a7:	31 c0                	xor    eax,eax
c00064a9:	c7 80 b0 7d 03 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffc8250],0x1
c00064b3:	05 94 00 00 00       	add    eax,0x94
c00064b8:	3d 40 09 00 00       	cmp    eax,0x940
c00064bd:	75 ea                	jne    c00064a9 <iso_break_all+0x12>
c00064bf:	83 c4 0c             	add    esp,0xc
c00064c2:	c3                   	ret    

c00064c3 <isoReadDiscSector>:
c00064c3:	83 ec 0c             	sub    esp,0xc
c00064c6:	0f be 05 60 70 03 c0 	movsx  eax,BYTE PTR ds:0xc0037060
c00064cd:	50                   	push   eax
c00064ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00064d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00064d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00064da:	e8 fd 33 02 00       	call   c00298dc <isoReadDiscSectorHelper>
c00064df:	83 c4 1c             	add    esp,0x1c
c00064e2:	c3                   	ret    

c00064e3 <bread_cache>:
c00064e3:	55                   	push   ebp
c00064e4:	57                   	push   edi
c00064e5:	89 d7                	mov    edi,edx
c00064e7:	56                   	push   esi
c00064e8:	ba 0f 00 00 00       	mov    edx,0xf
c00064ed:	53                   	push   ebx
c00064ee:	89 c6                	mov    esi,eax
c00064f0:	83 ec 0c             	sub    esp,0xc
c00064f3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00064f6:	39 38                	cmp    DWORD PTR [eax],edi
c00064f8:	74 3c                	je     c0006536 <bread_cache+0x53>
c00064fa:	4a                   	dec    edx
c00064fb:	83 fa ff             	cmp    edx,0xffffffff
c00064fe:	75 f3                	jne    c00064f3 <bread_cache+0x10>
c0006500:	31 db                	xor    ebx,ebx
c0006502:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0006505:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0006508:	74 08                	je     c0006512 <bread_cache+0x2f>
c000650a:	43                   	inc    ebx
c000650b:	83 fb 10             	cmp    ebx,0x10
c000650e:	75 f2                	jne    c0006502 <bread_cache+0x1f>
c0006510:	31 db                	xor    ebx,ebx
c0006512:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0006515:	50                   	push   eax
c0006516:	6a 01                	push   0x1
c0006518:	57                   	push   edi
c0006519:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000651c:	83 c0 04             	add    eax,0x4
c000651f:	50                   	push   eax
c0006520:	e8 9e ff ff ff       	call   c00064c3 <isoReadDiscSector>
c0006525:	83 c4 10             	add    esp,0x10
c0006528:	83 c9 ff             	or     ecx,0xffffffff
c000652b:	85 c0                	test   eax,eax
c000652d:	78 13                	js     c0006542 <bread_cache+0x5f>
c000652f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006532:	89 da                	mov    edx,ebx
c0006534:	89 38                	mov    DWORD PTR [eax],edi
c0006536:	89 f0                	mov    eax,esi
c0006538:	e8 0f fe ff ff       	call   c000634c <bgrad_cache>
c000653d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006542:	83 c4 0c             	add    esp,0xc
c0006545:	89 c8                	mov    eax,ecx
c0006547:	5b                   	pop    ebx
c0006548:	5e                   	pop    esi
c0006549:	5f                   	pop    edi
c000654a:	5d                   	pop    ebp
c000654b:	c3                   	ret    

c000654c <biread>:
c000654c:	89 c2                	mov    edx,eax
c000654e:	b8 80 70 03 c0       	mov    eax,0xc0037080
c0006553:	eb 8e                	jmp    c00064e3 <bread_cache>

c0006555 <bdread>:
c0006555:	89 c2                	mov    edx,eax
c0006557:	b8 20 70 03 c0       	mov    eax,0xc0037020
c000655c:	eb 85                	jmp    c00064e3 <bread_cache>

c000655e <strnicmp>:
c000655e:	55                   	push   ebp
c000655f:	57                   	push   edi
c0006560:	31 ff                	xor    edi,edi
c0006562:	56                   	push   esi
c0006563:	53                   	push   ebx
c0006564:	83 ec 0c             	sub    esp,0xc
c0006567:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000656b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000656f:	74 43                	je     c00065b4 <strnicmp+0x56>
c0006571:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006575:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006579:	85 c0                	test   eax,eax
c000657b:	74 37                	je     c00065b4 <strnicmp+0x56>
c000657d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006581:	85 d2                	test   edx,edx
c0006583:	74 2f                	je     c00065b4 <strnicmp+0x56>
c0006585:	39 d0                	cmp    eax,edx
c0006587:	8d 6f 01             	lea    ebp,[edi+0x1]
c000658a:	75 04                	jne    c0006590 <strnicmp+0x32>
c000658c:	89 ef                	mov    edi,ebp
c000658e:	eb db                	jmp    c000656b <strnicmp+0xd>
c0006590:	83 ec 0c             	sub    esp,0xc
c0006593:	50                   	push   eax
c0006594:	e8 b7 a3 ff ff       	call   c0000950 <tolower>
c0006599:	89 c3                	mov    ebx,eax
c000659b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000659f:	89 ef                	mov    edi,ebp
c00065a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00065a4:	e8 a7 a3 ff ff       	call   c0000950 <tolower>
c00065a9:	83 c4 10             	add    esp,0x10
c00065ac:	29 c3                	sub    ebx,eax
c00065ae:	89 d8                	mov    eax,ebx
c00065b0:	74 b9                	je     c000656b <strnicmp+0xd>
c00065b2:	eb 02                	jmp    c00065b6 <strnicmp+0x58>
c00065b4:	31 c0                	xor    eax,eax
c00065b6:	83 c4 0c             	add    esp,0xc
c00065b9:	5b                   	pop    ebx
c00065ba:	5e                   	pop    esi
c00065bb:	5f                   	pop    edi
c00065bc:	5d                   	pop    ebp
c00065bd:	c3                   	ret    

c00065be <find_object>:
c00065be:	55                   	push   ebp
c00065bf:	57                   	push   edi
c00065c0:	89 c7                	mov    edi,eax
c00065c2:	56                   	push   esi
c00065c3:	53                   	push   ebx
c00065c4:	89 d3                	mov    ebx,edx
c00065c6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00065cc:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00065d3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00065d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065db:	83 3d 94 86 03 c0 00 	cmp    DWORD PTR ds:0xc0038694,0x0
c00065e2:	74 0b                	je     c00065ef <find_object+0x31>
c00065e4:	89 fa                	mov    edx,edi
c00065e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065ea:	e8 89 fc ff ff       	call   c0006278 <utf2ucs>
c00065ef:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00065f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00065f6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00065fb:	7e 11                	jle    c000660e <find_object+0x50>
c00065fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006601:	e8 46 ff ff ff       	call   c000654c <biread>
c0006606:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000660a:	85 c0                	test   eax,eax
c000660c:	79 07                	jns    c0006615 <find_object+0x57>
c000660e:	31 db                	xor    ebx,ebx
c0006610:	e9 56 01 00 00       	jmp    c000676b <find_object+0x1ad>
c0006615:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000661d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006621:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006625:	8b 04 85 80 70 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc8f80]
c000662c:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c0006630:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006633:	85 f6                	test   esi,esi
c0006635:	75 0e                	jne    c0006645 <find_object+0x87>
c0006637:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000663b:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c0006643:	eb b1                	jmp    c00065f6 <find_object+0x38>
c0006645:	8b 2d 94 86 03 c0    	mov    ebp,DWORD PTR ds:0xc0038694
c000664b:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c000664f:	85 ed                	test   ebp,ebp
c0006651:	89 c8                	mov    eax,ecx
c0006653:	74 2b                	je     c0006680 <find_object+0xc2>
c0006655:	8d 43 21             	lea    eax,[ebx+0x21]
c0006658:	8d 54 24 20          	lea    edx,[esp+0x20]
c000665c:	e8 07 fd ff ff       	call   c0006368 <ucscompare>
c0006661:	85 c0                	test   eax,eax
c0006663:	0f 84 bf 00 00 00    	je     c0006728 <find_object+0x16a>
c0006669:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000666c:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006670:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006678:	0f 8e da 00 00 00    	jle    c0006758 <find_object+0x19a>
c000667e:	eb b7                	jmp    c0006637 <find_object+0x79>
c0006680:	29 ce                	sub    esi,ecx
c0006682:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006686:	a8 01                	test   al,0x1
c0006688:	74 05                	je     c000668f <find_object+0xd1>
c000668a:	83 ee 21             	sub    esi,0x21
c000668d:	eb 5a                	jmp    c00066e9 <find_object+0x12b>
c000668f:	42                   	inc    edx
c0006690:	83 ee 22             	sub    esi,0x22
c0006693:	eb 54                	jmp    c00066e9 <find_object+0x12b>
c0006695:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006698:	48                   	dec    eax
c0006699:	3c 01                	cmp    al,0x1
c000669b:	77 51                	ja     c00066ee <find_object+0x130>
c000669d:	50                   	push   eax
c000669e:	6a 02                	push   0x2
c00066a0:	68 1d 01 03 c0       	push   0xc003011d
c00066a5:	52                   	push   edx
c00066a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00066aa:	e8 31 a1 ff ff       	call   c00007e0 <strncmp>
c00066af:	83 c4 10             	add    esp,0x10
c00066b2:	85 c0                	test   eax,eax
c00066b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00066b8:	75 27                	jne    c00066e1 <find_object+0x123>
c00066ba:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00066be:	8d 68 fb             	lea    ebp,[eax-0x5]
c00066c1:	50                   	push   eax
c00066c2:	8d 42 05             	lea    eax,[edx+0x5]
c00066c5:	55                   	push   ebp
c00066c6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00066ca:	50                   	push   eax
c00066cb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00066cf:	50                   	push   eax
c00066d0:	e8 ab 9f ff ff       	call   c0000680 <strncpy>
c00066d5:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c00066da:	83 c4 10             	add    esp,0x10
c00066dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00066e1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00066e5:	29 c6                	sub    esi,eax
c00066e7:	01 c2                	add    edx,eax
c00066e9:	83 fe 03             	cmp    esi,0x3
c00066ec:	7f a7                	jg     c0006695 <find_object+0xd7>
c00066ee:	85 ed                	test   ebp,ebp
c00066f0:	7e 40                	jle    c0006732 <find_object+0x174>
c00066f2:	51                   	push   ecx
c00066f3:	51                   	push   ecx
c00066f4:	6a 2f                	push   0x2f
c00066f6:	57                   	push   edi
c00066f7:	e8 a4 a0 ff ff       	call   c00007a0 <strchr>
c00066fc:	83 c4 10             	add    esp,0x10
c00066ff:	85 c0                	test   eax,eax
c0006701:	74 04                	je     c0006707 <find_object+0x149>
c0006703:	29 f8                	sub    eax,edi
c0006705:	eb 0c                	jmp    c0006713 <find_object+0x155>
c0006707:	83 ec 0c             	sub    esp,0xc
c000670a:	57                   	push   edi
c000670b:	e8 60 9e ff ff       	call   c0000570 <strlen>
c0006710:	83 c4 10             	add    esp,0x10
c0006713:	52                   	push   edx
c0006714:	50                   	push   eax
c0006715:	57                   	push   edi
c0006716:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000671a:	50                   	push   eax
c000671b:	e8 3e fe ff ff       	call   c000655e <strnicmp>
c0006720:	83 c4 10             	add    esp,0x10
c0006723:	e9 39 ff ff ff       	jmp    c0006661 <find_object+0xa3>
c0006728:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c000672c:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c0006730:	eb 1e                	jmp    c0006750 <find_object+0x192>
c0006732:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006736:	8d 43 21             	lea    eax,[ebx+0x21]
c0006739:	89 f9                	mov    ecx,edi
c000673b:	e8 a7 fc ff ff       	call   c00063e7 <fncompare>
c0006740:	85 c0                	test   eax,eax
c0006742:	0f 85 21 ff ff ff    	jne    c0006669 <find_object+0xab>
c0006748:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c000674c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006750:	0f 85 13 ff ff ff    	jne    c0006669 <find_object+0xab>
c0006756:	eb 13                	jmp    c000676b <find_object+0x1ad>
c0006758:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000675c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006760:	0f 8f b7 fe ff ff    	jg     c000661d <find_object+0x5f>
c0006766:	e9 cc fe ff ff       	jmp    c0006637 <find_object+0x79>
c000676b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006771:	89 d8                	mov    eax,ebx
c0006773:	5b                   	pop    ebx
c0006774:	5e                   	pop    esi
c0006775:	5f                   	pop    edi
c0006776:	5d                   	pop    ebp
c0006777:	c3                   	ret    

c0006778 <find_object_path>:
c0006778:	55                   	push   ebp
c0006779:	57                   	push   edi
c000677a:	89 d7                	mov    edi,edx
c000677c:	56                   	push   esi
c000677d:	89 c6                	mov    esi,eax
c000677f:	53                   	push   ebx
c0006780:	89 cb                	mov    ebx,ecx
c0006782:	83 ec 0c             	sub    esp,0xc
c0006785:	50                   	push   eax
c0006786:	50                   	push   eax
c0006787:	6a 2f                	push   0x2f
c0006789:	56                   	push   esi
c000678a:	e8 11 a0 ff ff       	call   c00007a0 <strchr>
c000678f:	83 c4 10             	add    esp,0x10
c0006792:	89 c5                	mov    ebp,eax
c0006794:	85 c0                	test   eax,eax
c0006796:	74 3a                	je     c00067d2 <find_object_path+0x5a>
c0006798:	39 ee                	cmp    esi,ebp
c000679a:	74 31                	je     c00067cd <find_object_path+0x55>
c000679c:	8d 43 0a             	lea    eax,[ebx+0xa]
c000679f:	e8 a6 fb ff ff       	call   c000634a <iso_733>
c00067a4:	89 c2                	mov    edx,eax
c00067a6:	8d 43 02             	lea    eax,[ebx+0x2]
c00067a9:	e8 9c fb ff ff       	call   c000634a <iso_733>
c00067ae:	83 ec 0c             	sub    esp,0xc
c00067b1:	89 c1                	mov    ecx,eax
c00067b3:	52                   	push   edx
c00067b4:	89 f0                	mov    eax,esi
c00067b6:	ba 01 00 00 00       	mov    edx,0x1
c00067bb:	e8 fe fd ff ff       	call   c00065be <find_object>
c00067c0:	83 c4 10             	add    esp,0x10
c00067c3:	89 c3                	mov    ebx,eax
c00067c5:	85 c0                	test   eax,eax
c00067c7:	75 04                	jne    c00067cd <find_object_path+0x55>
c00067c9:	31 db                	xor    ebx,ebx
c00067cb:	eb 36                	jmp    c0006803 <find_object_path+0x8b>
c00067cd:	8d 75 01             	lea    esi,[ebp+0x1]
c00067d0:	eb b3                	jmp    c0006785 <find_object_path+0xd>
c00067d2:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00067d5:	74 28                	je     c00067ff <find_object_path+0x87>
c00067d7:	8d 43 0a             	lea    eax,[ebx+0xa]
c00067da:	e8 6b fb ff ff       	call   c000634a <iso_733>
c00067df:	89 c2                	mov    edx,eax
c00067e1:	8d 43 02             	lea    eax,[ebx+0x2]
c00067e4:	e8 61 fb ff ff       	call   c000634a <iso_733>
c00067e9:	83 ec 0c             	sub    esp,0xc
c00067ec:	89 c1                	mov    ecx,eax
c00067ee:	52                   	push   edx
c00067ef:	89 f0                	mov    eax,esi
c00067f1:	89 fa                	mov    edx,edi
c00067f3:	e8 c6 fd ff ff       	call   c00065be <find_object>
c00067f8:	83 c4 10             	add    esp,0x10
c00067fb:	89 c3                	mov    ebx,eax
c00067fd:	eb 04                	jmp    c0006803 <find_object_path+0x8b>
c00067ff:	85 ff                	test   edi,edi
c0006801:	74 c6                	je     c00067c9 <find_object_path+0x51>
c0006803:	83 c4 0c             	add    esp,0xc
c0006806:	89 d8                	mov    eax,ebx
c0006808:	5b                   	pop    ebx
c0006809:	5e                   	pop    esi
c000680a:	5f                   	pop    edi
c000680b:	5d                   	pop    ebp
c000680c:	c3                   	ret    

c000680d <stricmp>:
c000680d:	57                   	push   edi
c000680e:	56                   	push   esi
c000680f:	31 f6                	xor    esi,esi
c0006811:	53                   	push   ebx
c0006812:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006816:	83 ec 0c             	sub    esp,0xc
c0006819:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c000681d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006821:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c0006825:	50                   	push   eax
c0006826:	e8 05 a1 ff ff       	call   c0000930 <toupper>
c000682b:	89 04 24             	mov    DWORD PTR [esp],eax
c000682e:	e8 1d a1 ff ff       	call   c0000950 <tolower>
c0006833:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006836:	89 c3                	mov    ebx,eax
c0006838:	e8 f3 a0 ff ff       	call   c0000930 <toupper>
c000683d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006840:	e8 0b a1 ff ff       	call   c0000950 <tolower>
c0006845:	83 c4 10             	add    esp,0x10
c0006848:	39 c3                	cmp    ebx,eax
c000684a:	75 05                	jne    c0006851 <stricmp+0x44>
c000684c:	46                   	inc    esi
c000684d:	85 db                	test   ebx,ebx
c000684f:	75 c1                	jne    c0006812 <stricmp+0x5>
c0006851:	29 c3                	sub    ebx,eax
c0006853:	89 d8                	mov    eax,ebx
c0006855:	5b                   	pop    ebx
c0006856:	5e                   	pop    esi
c0006857:	5f                   	pop    edi
c0006858:	c3                   	ret    

c0006859 <iso_open>:
c0006859:	57                   	push   edi
c000685a:	31 c0                	xor    eax,eax
c000685c:	56                   	push   esi
c000685d:	b9 60 86 03 c0       	mov    ecx,0xc0038660
c0006862:	53                   	push   ebx
c0006863:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006868:	0f 95 c0             	setne  al
c000686b:	89 c2                	mov    edx,eax
c000686d:	89 c6                	mov    esi,eax
c000686f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006873:	e8 00 ff ff ff       	call   c0006778 <find_object_path>
c0006878:	83 ca ff             	or     edx,0xffffffff
c000687b:	85 c0                	test   eax,eax
c000687d:	74 5e                	je     c00068dd <iso_open+0x84>
c000687f:	89 c1                	mov    ecx,eax
c0006881:	31 d2                	xor    edx,edx
c0006883:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006889:	83 bf 20 7d 03 c0 00 	cmp    DWORD PTR [edi-0x3ffc82e0],0x0
c0006890:	75 42                	jne    c00068d4 <iso_open+0x7b>
c0006892:	8d 41 02             	lea    eax,[ecx+0x2]
c0006895:	c7 87 20 7d 03 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffc82e0],0xffffffff
c000689f:	e8 a6 fa ff ff       	call   c000634a <iso_733>
c00068a4:	89 b7 24 7d 03 c0    	mov    DWORD PTR [edi-0x3ffc82dc],esi
c00068aa:	89 87 20 7d 03 c0    	mov    DWORD PTR [edi-0x3ffc82e0],eax
c00068b0:	c7 87 28 7d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc82d8],0x0
c00068ba:	8d 41 0a             	lea    eax,[ecx+0xa]
c00068bd:	e8 88 fa ff ff       	call   c000634a <iso_733>
c00068c2:	c7 87 b0 7d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc8250],0x0
c00068cc:	89 87 2c 7d 03 c0    	mov    DWORD PTR [edi-0x3ffc82d4],eax
c00068d2:	eb 09                	jmp    c00068dd <iso_open+0x84>
c00068d4:	42                   	inc    edx
c00068d5:	83 fa 10             	cmp    edx,0x10
c00068d8:	75 a9                	jne    c0006883 <iso_open+0x2a>
c00068da:	83 ca ff             	or     edx,0xffffffff
c00068dd:	5b                   	pop    ebx
c00068de:	89 d0                	mov    eax,edx
c00068e0:	5e                   	pop    esi
c00068e1:	5f                   	pop    edi
c00068e2:	c3                   	ret    

c00068e3 <iso_close>:
c00068e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00068e7:	83 f8 0f             	cmp    eax,0xf
c00068ea:	7f 10                	jg     c00068fc <iso_close+0x19>
c00068ec:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00068f2:	c7 80 20 7d 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc82e0],0x0
c00068fc:	e9 5e fb ff ff       	jmp    c000645f <bclear_cache>

c0006901 <iso_read>:
c0006901:	55                   	push   ebp
c0006902:	57                   	push   edi
c0006903:	56                   	push   esi
c0006904:	53                   	push   ebx
c0006905:	83 ec 1c             	sub    esp,0x1c
c0006908:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000690c:	83 fd 0f             	cmp    ebp,0xf
c000690f:	7e 0a                	jle    c000691b <iso_read+0x1a>
c0006911:	83 c8 ff             	or     eax,0xffffffff
c0006914:	89 c2                	mov    edx,eax
c0006916:	e9 f4 00 00 00       	jmp    c0006a0f <iso_read+0x10e>
c000691b:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c0006921:	83 bd 20 7d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc82e0],0x0
c0006928:	74 e7                	je     c0006911 <iso_read+0x10>
c000692a:	8b 95 b0 7d 03 c0    	mov    edx,DWORD PTR [ebp-0x3ffc8250]
c0006930:	85 d2                	test   edx,edx
c0006932:	75 dd                	jne    c0006911 <iso_read+0x10>
c0006934:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0006939:	0f 84 cd 00 00 00    	je     c0006a0c <iso_read+0x10b>
c000693f:	8b 85 28 7d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc82d8]
c0006945:	8b 8d 2c 7d 03 c0    	mov    ecx,DWORD PTR [ebp-0x3ffc82d4]
c000694b:	29 c1                	sub    ecx,eax
c000694d:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006951:	76 04                	jbe    c0006957 <iso_read+0x56>
c0006953:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006957:	85 c9                	test   ecx,ecx
c0006959:	0f 84 ad 00 00 00    	je     c0006a0c <iso_read+0x10b>
c000695f:	89 c6                	mov    esi,eax
c0006961:	bb 00 08 00 00       	mov    ebx,0x800
c0006966:	81 e6 ff 07 00 00    	and    esi,0x7ff
c000696c:	c1 e8 0b             	shr    eax,0xb
c000696f:	29 f3                	sub    ebx,esi
c0006971:	03 85 20 7d 03 c0    	add    eax,DWORD PTR [ebp-0x3ffc82e0]
c0006977:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000697d:	7e 3f                	jle    c00069be <iso_read+0xbd>
c000697f:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006985:	75 37                	jne    c00069be <iso_read+0xbd>
c0006987:	be 20 00 00 00       	mov    esi,0x20
c000698c:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006992:	7f 05                	jg     c0006999 <iso_read+0x98>
c0006994:	89 ce                	mov    esi,ecx
c0006996:	c1 fe 0b             	sar    esi,0xb
c0006999:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000699d:	89 f3                	mov    ebx,esi
c000699f:	c1 e3 0b             	shl    ebx,0xb
c00069a2:	52                   	push   edx
c00069a3:	56                   	push   esi
c00069a4:	50                   	push   eax
c00069a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00069a9:	e8 15 fb ff ff       	call   c00064c3 <isoReadDiscSector>
c00069ae:	83 c4 10             	add    esp,0x10
c00069b1:	85 c0                	test   eax,eax
c00069b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069b7:	7f 3e                	jg     c00069f7 <iso_read+0xf6>
c00069b9:	e9 53 ff ff ff       	jmp    c0006911 <iso_read+0x10>
c00069be:	39 cb                	cmp    ebx,ecx
c00069c0:	7e 02                	jle    c00069c4 <iso_read+0xc3>
c00069c2:	89 cb                	mov    ebx,ecx
c00069c4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00069c8:	e8 88 fb ff ff       	call   c0006555 <bdread>
c00069cd:	85 c0                	test   eax,eax
c00069cf:	0f 88 3c ff ff ff    	js     c0006911 <iso_read+0x10>
c00069d5:	8b 0c 85 20 70 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc8fe0]
c00069dc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00069e0:	8b 85 28 7d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc82d8]
c00069e6:	25 ff 07 00 00       	and    eax,0x7ff
c00069eb:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00069ef:	89 d9                	mov    ecx,ebx
c00069f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00069f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069f7:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00069fb:	01 9d 28 7d 03 c0    	add    DWORD PTR [ebp-0x3ffc82d8],ebx
c0006a01:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c0006a05:	01 da                	add    edx,ebx
c0006a07:	e9 28 ff ff ff       	jmp    c0006934 <iso_read+0x33>
c0006a0c:	89 d0                	mov    eax,edx
c0006a0e:	99                   	cdq    
c0006a0f:	83 c4 1c             	add    esp,0x1c
c0006a12:	5b                   	pop    ebx
c0006a13:	5e                   	pop    esi
c0006a14:	5f                   	pop    edi
c0006a15:	5d                   	pop    ebp
c0006a16:	c3                   	ret    

c0006a17 <iso_seek>:
c0006a17:	55                   	push   ebp
c0006a18:	83 c8 ff             	or     eax,0xffffffff
c0006a1b:	57                   	push   edi
c0006a1c:	89 c2                	mov    edx,eax
c0006a1e:	56                   	push   esi
c0006a1f:	53                   	push   ebx
c0006a20:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006a24:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0006a28:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006a2c:	83 fe 0f             	cmp    esi,0xf
c0006a2f:	7f 65                	jg     c0006a96 <iso_seek+0x7f>
c0006a31:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006a37:	8d 8d 20 7d 03 c0    	lea    ecx,[ebp-0x3ffc82e0]
c0006a3d:	83 bd 20 7d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc82e0],0x0
c0006a44:	74 50                	je     c0006a96 <iso_seek+0x7f>
c0006a46:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006a4d:	75 47                	jne    c0006a96 <iso_seek+0x7f>
c0006a4f:	83 fb 01             	cmp    ebx,0x1
c0006a52:	74 0e                	je     c0006a62 <iso_seek+0x4b>
c0006a54:	83 fb 02             	cmp    ebx,0x2
c0006a57:	74 0e                	je     c0006a67 <iso_seek+0x50>
c0006a59:	85 db                	test   ebx,ebx
c0006a5b:	75 39                	jne    c0006a96 <iso_seek+0x7f>
c0006a5d:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006a60:	eb 0d                	jmp    c0006a6f <iso_seek+0x58>
c0006a62:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006a65:	eb 08                	jmp    c0006a6f <iso_seek+0x58>
c0006a67:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006a6a:	01 f8                	add    eax,edi
c0006a6c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006a6f:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006a75:	8b 88 2c 7d 03 c0    	mov    ecx,DWORD PTR [eax-0x3ffc82d4]
c0006a7b:	05 20 7d 03 c0       	add    eax,0xc0037d20
c0006a80:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006a83:	76 03                	jbe    c0006a88 <iso_seek+0x71>
c0006a85:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006a88:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006a8e:	8b 82 28 7d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc82d8]
c0006a94:	31 d2                	xor    edx,edx
c0006a96:	5b                   	pop    ebx
c0006a97:	5e                   	pop    esi
c0006a98:	5f                   	pop    edi
c0006a99:	5d                   	pop    ebp
c0006a9a:	c3                   	ret    

c0006a9b <iso_tell>:
c0006a9b:	83 c8 ff             	or     eax,0xffffffff
c0006a9e:	53                   	push   ebx
c0006a9f:	89 c2                	mov    edx,eax
c0006aa1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006aa5:	83 f9 0f             	cmp    ecx,0xf
c0006aa8:	7f 20                	jg     c0006aca <iso_tell+0x2f>
c0006aaa:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006ab0:	83 bb 20 7d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc82e0],0x0
c0006ab7:	74 11                	je     c0006aca <iso_tell+0x2f>
c0006ab9:	83 bb b0 7d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc8250],0x0
c0006ac0:	75 08                	jne    c0006aca <iso_tell+0x2f>
c0006ac2:	8b 83 28 7d 03 c0    	mov    eax,DWORD PTR [ebx-0x3ffc82d8]
c0006ac8:	31 d2                	xor    edx,edx
c0006aca:	5b                   	pop    ebx
c0006acb:	c3                   	ret    

c0006acc <iso_total>:
c0006acc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006ad0:	83 c8 ff             	or     eax,0xffffffff
c0006ad3:	83 fa 0f             	cmp    edx,0xf
c0006ad6:	7f 1e                	jg     c0006af6 <iso_total+0x2a>
c0006ad8:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006ade:	83 ba 20 7d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc82e0],0x0
c0006ae5:	74 0f                	je     c0006af6 <iso_total+0x2a>
c0006ae7:	83 ba b0 7d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc8250],0x0
c0006aee:	75 06                	jne    c0006af6 <iso_total+0x2a>
c0006af0:	8b 82 2c 7d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc82d4]
c0006af6:	c3                   	ret    

c0006af7 <fn_postprocess>:
c0006af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006afb:	89 d0                	mov    eax,edx
c0006afd:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0006b00:	83 f9 3b             	cmp    ecx,0x3b
c0006b03:	74 07                	je     c0006b0c <fn_postprocess+0x15>
c0006b05:	85 c9                	test   ecx,ecx
c0006b07:	74 03                	je     c0006b0c <fn_postprocess+0x15>
c0006b09:	40                   	inc    eax
c0006b0a:	eb f1                	jmp    c0006afd <fn_postprocess+0x6>
c0006b0c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006b0f:	39 d0                	cmp    eax,edx
c0006b11:	76 0a                	jbe    c0006b1d <fn_postprocess+0x26>
c0006b13:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c0006b17:	75 04                	jne    c0006b1d <fn_postprocess+0x26>
c0006b19:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c0006b1d:	c3                   	ret    

c0006b1e <iso_readdir>:
c0006b1e:	55                   	push   ebp
c0006b1f:	57                   	push   edi
c0006b20:	56                   	push   esi
c0006b21:	53                   	push   ebx
c0006b22:	83 ec 1c             	sub    esp,0x1c
c0006b25:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006b29:	83 fb 0f             	cmp    ebx,0xf
c0006b2c:	7f 28                	jg     c0006b56 <iso_readdir+0x38>
c0006b2e:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b34:	8d b8 20 7d 03 c0    	lea    edi,[eax-0x3ffc82e0]
c0006b3a:	83 b8 20 7d 03 c0 00 	cmp    DWORD PTR [eax-0x3ffc82e0],0x0
c0006b41:	74 13                	je     c0006b56 <iso_readdir+0x38>
c0006b43:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006b47:	74 0d                	je     c0006b56 <iso_readdir+0x38>
c0006b49:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006b50:	0f 84 b1 00 00 00    	je     c0006c07 <iso_readdir+0xe9>
c0006b56:	83 ec 0c             	sub    esp,0xc
c0006b59:	68 20 01 03 c0       	push   0xc0030120
c0006b5e:	e8 d5 2d 02 00       	call   c0029938 <iso_kprintf>
c0006b63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006b66:	e8 e9 2d 02 00       	call   c0029954 <iso_kprintfd>
c0006b6b:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006b71:	c7 04 24 25 01 03 c0 	mov    DWORD PTR [esp],0xc0030125
c0006b78:	e8 bb 2d 02 00       	call   c0029938 <iso_kprintf>
c0006b7d:	5d                   	pop    ebp
c0006b7e:	ff b3 20 7d 03 c0    	push   DWORD PTR [ebx-0x3ffc82e0]
c0006b84:	e8 cb 2d 02 00       	call   c0029954 <iso_kprintfd>
c0006b89:	c7 04 24 2b 01 03 c0 	mov    DWORD PTR [esp],0xc003012b
c0006b90:	e8 a3 2d 02 00       	call   c0029938 <iso_kprintf>
c0006b95:	58                   	pop    eax
c0006b96:	ff b3 24 7d 03 c0    	push   DWORD PTR [ebx-0x3ffc82dc]
c0006b9c:	e8 b3 2d 02 00       	call   c0029954 <iso_kprintfd>
c0006ba1:	c7 04 24 31 01 03 c0 	mov    DWORD PTR [esp],0xc0030131
c0006ba8:	e8 8b 2d 02 00       	call   c0029938 <iso_kprintf>
c0006bad:	58                   	pop    eax
c0006bae:	ff b3 b0 7d 03 c0    	push   DWORD PTR [ebx-0x3ffc8250]
c0006bb4:	e8 9b 2d 02 00       	call   c0029954 <iso_kprintfd>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	eb 42                	jmp    c0006c00 <iso_readdir+0xe2>
c0006bbe:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006bc1:	8b 34 85 80 70 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc8f80]
c0006bc8:	89 d1                	mov    ecx,edx
c0006bca:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006bd0:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006bd4:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006bd7:	75 35                	jne    c0006c0e <iso_readdir+0xf0>
c0006bd9:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006bdf:	81 c2 00 08 00 00    	add    edx,0x800
c0006be5:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006be8:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006beb:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006bee:	73 1e                	jae    c0006c0e <iso_readdir+0xf0>
c0006bf0:	c1 ea 0b             	shr    edx,0xb
c0006bf3:	8b 07                	mov    eax,DWORD PTR [edi]
c0006bf5:	01 d0                	add    eax,edx
c0006bf7:	e8 50 f9 ff ff       	call   c000654c <biread>
c0006bfc:	85 c0                	test   eax,eax
c0006bfe:	79 be                	jns    c0006bbe <iso_readdir+0xa0>
c0006c00:	31 c0                	xor    eax,eax
c0006c02:	e9 66 01 00 00       	jmp    c0006d6d <iso_readdir+0x24f>
c0006c07:	31 f6                	xor    esi,esi
c0006c09:	83 c8 ff             	or     eax,0xffffffff
c0006c0c:	eb da                	jmp    c0006be8 <iso_readdir+0xca>
c0006c0e:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006c14:	8b ba 28 7d 03 c0    	mov    edi,DWORD PTR [edx-0x3ffc82d8]
c0006c1a:	81 c2 20 7d 03 c0    	add    edx,0xc0037d20
c0006c20:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006c23:	73 db                	jae    c0006c00 <iso_readdir+0xe2>
c0006c25:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006c29:	75 34                	jne    c0006c5f <iso_readdir+0x141>
c0006c2b:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006c2f:	75 2e                	jne    c0006c5f <iso_readdir+0x141>
c0006c31:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006c34:	8b 34 85 80 70 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc8f80]
c0006c3b:	01 f9                	add    ecx,edi
c0006c3d:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006c40:	89 c8                	mov    eax,ecx
c0006c42:	25 ff 07 00 00       	and    eax,0x7ff
c0006c47:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006c4c:	01 c8                	add    eax,ecx
c0006c4e:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006c51:	25 ff 07 00 00       	and    eax,0x7ff
c0006c56:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006c5a:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006c5d:	74 a1                	je     c0006c00 <iso_readdir+0xe2>
c0006c5f:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006c65:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006c69:	8d 56 21             	lea    edx,[esi+0x21]
c0006c6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006c70:	8d a8 38 7d 03 c0    	lea    ebp,[eax-0x3ffc82c8]
c0006c76:	83 3d 94 86 03 c0 00 	cmp    DWORD PTR ds:0xc0038694,0x0
c0006c7d:	74 0c                	je     c0006c8b <iso_readdir+0x16d>
c0006c7f:	89 e8                	mov    eax,ebp
c0006c81:	e8 14 f6 ff ff       	call   c000629a <ucs2utfn>
c0006c86:	e9 a6 00 00 00       	jmp    c0006d31 <iso_readdir+0x213>
c0006c8b:	57                   	push   edi
c0006c8c:	51                   	push   ecx
c0006c8d:	52                   	push   edx
c0006c8e:	55                   	push   ebp
c0006c8f:	e8 ec 99 ff ff       	call   c0000680 <strncpy>
c0006c94:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006c98:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006c9e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006ca1:	c6 84 01 38 7d 03 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffc82c8],0x0
c0006ca9:	e8 49 fe ff ff       	call   c0006af7 <fn_postprocess>
c0006cae:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006cb2:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006cb5:	83 c4 10             	add    esp,0x10
c0006cb8:	29 d0                	sub    eax,edx
c0006cba:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006cbe:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006cc2:	74 05                	je     c0006cc9 <iso_readdir+0x1ab>
c0006cc4:	83 e8 21             	sub    eax,0x21
c0006cc7:	eb 04                	jmp    c0006ccd <iso_readdir+0x1af>
c0006cc9:	47                   	inc    edi
c0006cca:	83 e8 22             	sub    eax,0x22
c0006ccd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006cd1:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006cd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006cdb:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006ce0:	7e 4f                	jle    c0006d31 <iso_readdir+0x213>
c0006ce2:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006ce5:	48                   	dec    eax
c0006ce6:	3c 01                	cmp    al,0x1
c0006ce8:	77 47                	ja     c0006d31 <iso_readdir+0x213>
c0006cea:	52                   	push   edx
c0006ceb:	6a 02                	push   0x2
c0006ced:	68 1d 01 03 c0       	push   0xc003011d
c0006cf2:	57                   	push   edi
c0006cf3:	e8 e8 9a ff ff       	call   c00007e0 <strncmp>
c0006cf8:	83 c4 10             	add    esp,0x10
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 26                	jne    c0006d25 <iso_readdir+0x207>
c0006cff:	50                   	push   eax
c0006d00:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006d04:	83 e8 05             	sub    eax,0x5
c0006d07:	50                   	push   eax
c0006d08:	8d 47 05             	lea    eax,[edi+0x5]
c0006d0b:	50                   	push   eax
c0006d0c:	55                   	push   ebp
c0006d0d:	e8 6e 99 ff ff       	call   c0000680 <strncpy>
c0006d12:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006d16:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006d1a:	83 c4 10             	add    esp,0x10
c0006d1d:	c6 84 08 33 7d 03 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffc82cd],0x0
c0006d25:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006d29:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006d2d:	01 c7                	add    edi,eax
c0006d2f:	eb aa                	jmp    c0006cdb <iso_readdir+0x1bd>
c0006d31:	83 c8 ff             	or     eax,0xffffffff
c0006d34:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006d38:	89 c2                	mov    edx,eax
c0006d3a:	75 0a                	jne    c0006d46 <iso_readdir+0x228>
c0006d3c:	8d 46 0a             	lea    eax,[esi+0xa]
c0006d3f:	e8 06 f6 ff ff       	call   c000634a <iso_733>
c0006d44:	31 d2                	xor    edx,edx
c0006d46:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006d4c:	89 83 30 7d 03 c0    	mov    DWORD PTR [ebx-0x3ffc82d0],eax
c0006d52:	89 93 34 7d 03 c0    	mov    DWORD PTR [ebx-0x3ffc82cc],edx
c0006d58:	81 c3 20 7d 03 c0    	add    ebx,0xc0037d20
c0006d5e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006d61:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006d64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d68:	05 30 7d 03 c0       	add    eax,0xc0037d30
c0006d6d:	83 c4 1c             	add    esp,0x1c
c0006d70:	5b                   	pop    ebx
c0006d71:	5e                   	pop    esi
c0006d72:	5f                   	pop    edi
c0006d73:	5d                   	pop    ebp
c0006d74:	c3                   	ret    

c0006d75 <iso_reset>:
c0006d75:	83 ec 18             	sub    esp,0x18
c0006d78:	68 3a 01 03 c0       	push   0xc003013a
c0006d7d:	e8 b6 2b 02 00       	call   c0029938 <iso_kprintf>
c0006d82:	e8 10 f7 ff ff       	call   c0006497 <iso_break_all>
c0006d87:	e8 09 f7 ff ff       	call   c0006495 <bclear>
c0006d8c:	31 c0                	xor    eax,eax
c0006d8e:	83 c4 1c             	add    esp,0x1c
c0006d91:	c3                   	ret    

c0006d92 <init_percd>:
c0006d92:	57                   	push   edi
c0006d93:	56                   	push   esi
c0006d94:	53                   	push   ebx
c0006d95:	bb 01 00 00 00       	mov    ebx,0x1
c0006d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d9e:	a2 60 70 03 c0       	mov    ds:0xc0037060,al
c0006da3:	e8 cd ff ff ff       	call   c0006d75 <iso_reset>
c0006da8:	c7 05 94 86 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0038694,0x0
c0006db2:	a1 8c 86 03 c0       	mov    eax,ds:0xc003868c
c0006db7:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006dbb:	e8 8c f7 ff ff       	call   c000654c <biread>
c0006dc0:	89 c6                	mov    esi,eax
c0006dc2:	85 c0                	test   eax,eax
c0006dc4:	0f 88 ba 00 00 00    	js     c0006e84 <init_percd+0xf2>
c0006dca:	8b 04 85 80 70 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc8f80]
c0006dd1:	83 c0 04             	add    eax,0x4
c0006dd4:	52                   	push   edx
c0006dd5:	6a 06                	push   0x6
c0006dd7:	68 45 01 03 c0       	push   0xc0030145
c0006ddc:	50                   	push   eax
c0006ddd:	e8 9e 95 ff ff       	call   c0000380 <memcmp>
c0006de2:	83 c4 10             	add    esp,0x10
c0006de5:	85 c0                	test   eax,eax
c0006de7:	74 08                	je     c0006df1 <init_percd+0x5f>
c0006de9:	43                   	inc    ebx
c0006dea:	83 fb 04             	cmp    ebx,0x4
c0006ded:	75 c3                	jne    c0006db2 <init_percd+0x20>
c0006def:	eb 1a                	jmp    c0006e0b <init_percd+0x79>
c0006df1:	8b 04 b5 80 70 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc8f80]
c0006df8:	83 c0 5c             	add    eax,0x5c
c0006dfb:	e8 17 f5 ff ff       	call   c0006317 <isjoliet>
c0006e00:	a3 94 86 03 c0       	mov    ds:0xc0038694,eax
c0006e05:	85 c0                	test   eax,eax
c0006e07:	74 e0                	je     c0006de9 <init_percd+0x57>
c0006e09:	eb 3e                	jmp    c0006e49 <init_percd+0xb7>
c0006e0b:	83 3d 94 86 03 c0 00 	cmp    DWORD PTR ds:0xc0038694,0x0
c0006e12:	75 35                	jne    c0006e49 <init_percd+0xb7>
c0006e14:	a1 8c 86 03 c0       	mov    eax,ds:0xc003868c
c0006e19:	83 c0 10             	add    eax,0x10
c0006e1c:	e8 2b f7 ff ff       	call   c000654c <biread>
c0006e21:	89 c6                	mov    esi,eax
c0006e23:	85 c0                	test   eax,eax
c0006e25:	78 5f                	js     c0006e86 <init_percd+0xf4>
c0006e27:	83 cb ff             	or     ebx,0xffffffff
c0006e2a:	50                   	push   eax
c0006e2b:	8b 04 b5 80 70 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc8f80]
c0006e32:	6a 06                	push   0x6
c0006e34:	83 c0 04             	add    eax,0x4
c0006e37:	68 4c 01 03 c0       	push   0xc003014c
c0006e3c:	50                   	push   eax
c0006e3d:	e8 3e 95 ff ff       	call   c0000380 <memcmp>
c0006e42:	83 c4 10             	add    esp,0x10
c0006e45:	85 c0                	test   eax,eax
c0006e47:	75 3d                	jne    c0006e86 <init_percd+0xf4>
c0006e49:	8b 34 b5 80 70 03 c0 	mov    esi,DWORD PTR [esi*4-0x3ffc8f80]
c0006e50:	bf 60 86 03 c0       	mov    edi,0xc0038660
c0006e55:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006e5b:	b9 22 00 00 00       	mov    ecx,0x22
c0006e60:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006e62:	b8 62 86 03 c0       	mov    eax,0xc0038662
c0006e67:	31 db                	xor    ebx,ebx
c0006e69:	e8 dc f4 ff ff       	call   c000634a <iso_733>
c0006e6e:	a3 88 86 03 c0       	mov    ds:0xc0038688,eax
c0006e73:	b8 6a 86 03 c0       	mov    eax,0xc003866a
c0006e78:	e8 cd f4 ff ff       	call   c000634a <iso_733>
c0006e7d:	a3 84 86 03 c0       	mov    ds:0xc0038684,eax
c0006e82:	eb 02                	jmp    c0006e86 <init_percd+0xf4>
c0006e84:	89 c3                	mov    ebx,eax
c0006e86:	89 d8                	mov    eax,ebx
c0006e88:	5b                   	pop    ebx
c0006e89:	5e                   	pop    esi
c0006e8a:	5f                   	pop    edi
c0006e8b:	c3                   	ret    

c0006e8c <iso_ioctl>:
c0006e8c:	83 ec 18             	sub    esp,0x18
c0006e8f:	68 53 01 03 c0       	push   0xc0030153
c0006e94:	e8 9f 2a 02 00       	call   c0029938 <iso_kprintf>
c0006e99:	e8 d7 fe ff ff       	call   c0006d75 <iso_reset>
c0006e9e:	31 c0                	xor    eax,eax
c0006ea0:	83 c4 1c             	add    esp,0x1c
c0006ea3:	c3                   	ret    

c0006ea4 <fs_iso9660_init>:
c0006ea4:	53                   	push   ebx
c0006ea5:	31 db                	xor    ebx,ebx
c0006ea7:	83 ec 14             	sub    esp,0x14
c0006eaa:	68 5e 01 03 c0       	push   0xc003015e
c0006eaf:	e8 84 2a 02 00       	call   c0029938 <iso_kprintf>
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	68 40 09 00 00       	push   0x940
c0006ebc:	6a 00                	push   0x0
c0006ebe:	68 20 7d 03 c0       	push   0xc0037d20
c0006ec3:	e8 28 96 ff ff       	call   c00004f0 <memset>
c0006ec8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006ecf:	c7 05 20 7d 03 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0037d20,0xffffffff
c0006ed9:	e8 e9 f6 00 00       	call   c00165c7 <malloc>
c0006ede:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006ee5:	a3 90 86 03 c0       	mov    ds:0xc0038690,eax
c0006eea:	e8 d8 f6 00 00       	call   c00165c7 <malloc>
c0006eef:	83 c4 10             	add    esp,0x10
c0006ef2:	a3 00 7d 03 c0       	mov    ds:0xc0037d00,eax
c0006ef7:	83 ec 0c             	sub    esp,0xc
c0006efa:	68 04 08 00 00       	push   0x804
c0006eff:	e8 c3 f6 00 00       	call   c00165c7 <malloc>
c0006f04:	89 04 9d 80 70 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc8f80],eax
c0006f0b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006f11:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006f18:	e8 aa f6 00 00       	call   c00165c7 <malloc>
c0006f1d:	83 c4 10             	add    esp,0x10
c0006f20:	89 04 9d 20 70 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc8fe0],eax
c0006f27:	43                   	inc    ebx
c0006f28:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006f2e:	83 fb 10             	cmp    ebx,0x10
c0006f31:	75 c4                	jne    c0006ef7 <fs_iso9660_init+0x53>
c0006f33:	31 c0                	xor    eax,eax
c0006f35:	83 c4 08             	add    esp,0x8
c0006f38:	5b                   	pop    ebx
c0006f39:	c3                   	ret    

c0006f3a <fs_iso9660_shutdown>:
c0006f3a:	53                   	push   ebx
c0006f3b:	31 db                	xor    ebx,ebx
c0006f3d:	83 ec 08             	sub    esp,0x8
c0006f40:	83 ec 0c             	sub    esp,0xc
c0006f43:	ff 34 9d 80 70 03 c0 	push   DWORD PTR [ebx*4-0x3ffc8f80]
c0006f4a:	e8 88 f6 00 00       	call   c00165d7 <free>
c0006f4f:	58                   	pop    eax
c0006f50:	ff 34 9d 20 70 03 c0 	push   DWORD PTR [ebx*4-0x3ffc8fe0]
c0006f57:	43                   	inc    ebx
c0006f58:	e8 7a f6 00 00       	call   c00165d7 <free>
c0006f5d:	83 c4 10             	add    esp,0x10
c0006f60:	83 fb 10             	cmp    ebx,0x10
c0006f63:	75 db                	jne    c0006f40 <fs_iso9660_shutdown+0x6>
c0006f65:	a1 90 86 03 c0       	mov    eax,ds:0xc0038690
c0006f6a:	85 c0                	test   eax,eax
c0006f6c:	74 0c                	je     c0006f7a <fs_iso9660_shutdown+0x40>
c0006f6e:	83 ec 0c             	sub    esp,0xc
c0006f71:	50                   	push   eax
c0006f72:	e8 60 f6 00 00       	call   c00165d7 <free>
c0006f77:	83 c4 10             	add    esp,0x10
c0006f7a:	a1 00 7d 03 c0       	mov    eax,ds:0xc0037d00
c0006f7f:	85 c0                	test   eax,eax
c0006f81:	74 0c                	je     c0006f8f <fs_iso9660_shutdown+0x55>
c0006f83:	83 ec 0c             	sub    esp,0xc
c0006f86:	50                   	push   eax
c0006f87:	e8 4b f6 00 00       	call   c00165d7 <free>
c0006f8c:	83 c4 10             	add    esp,0x10
c0006f8f:	c7 05 00 7d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037d00,0x0
c0006f99:	c7 05 90 86 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0038690,0x0
c0006fa3:	31 c0                	xor    eax,eax
c0006fa5:	83 c4 08             	add    esp,0x8
c0006fa8:	5b                   	pop    ebx
c0006fa9:	c3                   	ret    
c0006faa:	66 90                	xchg   ax,ax

c0006fac <lwip_init>:
c0006fac:	83 ec 0c             	sub    esp,0xc
c0006faf:	e8 48 2c 00 00       	call   c0009bfc <stats_init>
c0006fb4:	e8 e3 9d ff ff       	call   c0000d9c <sys_init>
c0006fb9:	e8 ae 01 00 00       	call   c000716c <mem_init>
c0006fbe:	e8 05 0a 00 00       	call   c00079c8 <memp_init>
c0006fc3:	e8 e8 0c 00 00       	call   c0007cb0 <netif_init>
c0006fc8:	e8 6f 9c ff ff       	call   c0000c3c <lwip_socket_init>
c0006fcd:	e8 76 9d 00 00       	call   c0010d48 <sys_timeouts_init>
c0006fd2:	90                   	nop
c0006fd3:	83 c4 0c             	add    esp,0xc
c0006fd6:	c3                   	ret    
c0006fd7:	90                   	nop

c0006fd8 <plug_holes>:
c0006fd8:	83 ec 1c             	sub    esp,0x1c
c0006fdb:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c0006fe0:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006fe4:	73 16                	jae    c0006ffc <plug_holes+0x24>
c0006fe6:	83 ec 08             	sub    esp,0x8
c0006fe9:	68 6f 01 03 c0       	push   0xc003016f
c0006fee:	68 86 01 03 c0       	push   0xc0030186
c0006ff3:	e8 e0 8e 01 00       	call   c001fed8 <CPrintf>
c0006ff8:	83 c4 10             	add    esp,0x10
c0006ffb:	90                   	nop
c0006ffc:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c0007001:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007005:	72 15                	jb     c000701c <plug_holes+0x44>
c0007007:	83 ec 08             	sub    esp,0x8
c000700a:	68 93 01 03 c0       	push   0xc0030193
c000700f:	68 86 01 03 c0       	push   0xc0030186
c0007014:	e8 bf 8e 01 00       	call   c001fed8 <CPrintf>
c0007019:	83 c4 10             	add    esp,0x10
c000701c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007020:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007023:	0f b6 c0             	movzx  eax,al
c0007026:	85 c0                	test   eax,eax
c0007028:	74 16                	je     c0007040 <plug_holes+0x68>
c000702a:	83 ec 08             	sub    esp,0x8
c000702d:	68 ad 01 03 c0       	push   0xc00301ad
c0007032:	68 86 01 03 c0       	push   0xc0030186
c0007037:	e8 9c 8e 01 00       	call   c001fed8 <CPrintf>
c000703c:	83 c4 10             	add    esp,0x10
c000703f:	90                   	nop
c0007040:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007044:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007047:	0f b7 c0             	movzx  eax,ax
c000704a:	3d 40 06 00 00       	cmp    eax,0x640
c000704f:	76 17                	jbe    c0007068 <plug_holes+0x90>
c0007051:	83 ec 08             	sub    esp,0x8
c0007054:	68 40 02 03 c0       	push   0xc0030240
c0007059:	68 86 01 03 c0       	push   0xc0030186
c000705e:	e8 75 8e 01 00       	call   c001fed8 <CPrintf>
c0007063:	83 c4 10             	add    esp,0x10
c0007066:	66 90                	xchg   ax,ax
c0007068:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c000706e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007072:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007075:	0f b7 c0             	movzx  eax,ax
c0007078:	01 d0                	add    eax,edx
c000707a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000707e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007082:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007086:	74 64                	je     c00070ec <plug_holes+0x114>
c0007088:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000708c:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000708f:	0f b6 c0             	movzx  eax,al
c0007092:	85 c0                	test   eax,eax
c0007094:	75 56                	jne    c00070ec <plug_holes+0x114>
c0007096:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c000709b:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000709f:	74 4b                	je     c00070ec <plug_holes+0x114>
c00070a1:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c00070a6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00070aa:	75 0c                	jne    c00070b8 <plug_holes+0xe0>
c00070ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070b0:	a3 9c 86 03 c0       	mov    ds:0xc003869c,eax
c00070b5:	8d 76 00             	lea    esi,[esi+0x0]
c00070b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070bc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00070bf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00070c3:	66 89 02             	mov    WORD PTR [edx],ax
c00070c6:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c00070cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00070cf:	29 c2                	sub    edx,eax
c00070d1:	8b 0d a4 86 03 c0    	mov    ecx,DWORD PTR ds:0xc00386a4
c00070d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070db:	66 8b 00             	mov    ax,WORD PTR [eax]
c00070de:	0f b7 c0             	movzx  eax,ax
c00070e1:	01 c1                	add    ecx,eax
c00070e3:	89 d0                	mov    eax,edx
c00070e5:	66 89 41 02          	mov    WORD PTR [ecx+0x2],ax
c00070e9:	8d 76 00             	lea    esi,[esi+0x0]
c00070ec:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c00070f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070f6:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00070fa:	0f b7 c0             	movzx  eax,ax
c00070fd:	01 d0                	add    eax,edx
c00070ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007103:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007107:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000710b:	74 57                	je     c0007164 <plug_holes+0x18c>
c000710d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007111:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007114:	0f b6 c0             	movzx  eax,al
c0007117:	85 c0                	test   eax,eax
c0007119:	75 49                	jne    c0007164 <plug_holes+0x18c>
c000711b:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c0007120:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007124:	75 0a                	jne    c0007130 <plug_holes+0x158>
c0007126:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000712a:	a3 9c 86 03 c0       	mov    ds:0xc003869c,eax
c000712f:	90                   	nop
c0007130:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007134:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007137:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000713b:	66 89 02             	mov    WORD PTR [edx],ax
c000713e:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c0007143:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007147:	29 c2                	sub    edx,eax
c0007149:	8b 0d a4 86 03 c0    	mov    ecx,DWORD PTR ds:0xc00386a4
c000714f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007153:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007156:	0f b7 c0             	movzx  eax,ax
c0007159:	01 c1                	add    ecx,eax
c000715b:	89 d0                	mov    eax,edx
c000715d:	66 89 41 02          	mov    WORD PTR [ecx+0x2],ax
c0007161:	8d 76 00             	lea    esi,[esi+0x0]
c0007164:	90                   	nop
c0007165:	83 c4 1c             	add    esp,0x1c
c0007168:	c3                   	ret    
c0007169:	8d 76 00             	lea    esi,[esi+0x0]

c000716c <mem_init>:
c000716c:	83 ec 1c             	sub    esp,0x1c
c000716f:	c7 05 a4 86 03 c0 c0 70 03 c0 	mov    DWORD PTR ds:0xc00386a4,0xc00370c0
c0007179:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c000717e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007182:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007186:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c000718b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000718f:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0007195:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007199:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000719d:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c00071a2:	05 40 06 00 00       	add    eax,0x640
c00071a7:	a3 a0 86 03 c0       	mov    ds:0xc00386a0,eax
c00071ac:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c00071b1:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c00071b5:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c00071ba:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c00071bf:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c00071c4:	66 c7 40 02 40 06    	mov    WORD PTR [eax+0x2],0x640
c00071ca:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c00071cf:	a3 9c 86 03 c0       	mov    ds:0xc003869c,eax
c00071d4:	66 c7 05 c8 77 03 c0 40 06 	mov    WORD PTR ds:0xc00377c8,0x640
c00071dd:	83 ec 08             	sub    esp,0x8
c00071e0:	6a 01                	push   0x1
c00071e2:	68 98 86 03 c0       	push   0xc0038698
c00071e7:	e8 80 9a ff ff       	call   c0000c6c <sys_sem_new>
c00071ec:	83 c4 10             	add    esp,0x10
c00071ef:	0f be c0             	movsx  eax,al
c00071f2:	85 c0                	test   eax,eax
c00071f4:	74 16                	je     c000720c <mem_init+0xa0>
c00071f6:	83 ec 08             	sub    esp,0x8
c00071f9:	68 c8 01 03 c0       	push   0xc00301c8
c00071fe:	68 86 01 03 c0       	push   0xc0030186
c0007203:	e8 d0 8c 01 00       	call   c001fed8 <CPrintf>
c0007208:	83 c4 10             	add    esp,0x10
c000720b:	90                   	nop
c000720c:	90                   	nop
c000720d:	83 c4 1c             	add    esp,0x1c
c0007210:	c3                   	ret    
c0007211:	8d 76 00             	lea    esi,[esi+0x0]

c0007214 <mem_free>:
c0007214:	83 ec 1c             	sub    esp,0x1c
c0007217:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000721c:	0f 84 0e 01 00 00    	je     c0007330 <mem_free+0x11c>
c0007222:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c0007227:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000722b:	72 0b                	jb     c0007238 <mem_free+0x24>
c000722d:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c0007232:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007236:	72 18                	jb     c0007250 <mem_free+0x3c>
c0007238:	83 ec 08             	sub    esp,0x8
c000723b:	68 e3 01 03 c0       	push   0xc00301e3
c0007240:	68 86 01 03 c0       	push   0xc0030186
c0007245:	e8 8e 8c 01 00       	call   c001fed8 <CPrintf>
c000724a:	83 c4 10             	add    esp,0x10
c000724d:	8d 76 00             	lea    esi,[esi+0x0]
c0007250:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c0007255:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007259:	72 0d                	jb     c0007268 <mem_free+0x54>
c000725b:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c0007260:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007264:	72 22                	jb     c0007288 <mem_free+0x74>
c0007266:	66 90                	xchg   ax,ax
c0007268:	e8 5b 8c 01 00       	call   c001fec8 <CLockScheduler>
c000726d:	66 a1 d0 77 03 c0    	mov    ax,ds:0xc00377d0
c0007273:	83 c0 01             	add    eax,0x1
c0007276:	66 a3 d0 77 03 c0    	mov    ds:0xc00377d0,ax
c000727c:	e8 2b 8c 01 00       	call   c001feac <CUnlockScheduler>
c0007281:	e9 ae 00 00 00       	jmp    c0007334 <mem_free+0x120>
c0007286:	66 90                	xchg   ax,ax
c0007288:	83 ec 08             	sub    esp,0x8
c000728b:	6a 00                	push   0x0
c000728d:	68 98 86 03 c0       	push   0xc0038698
c0007292:	e8 2d 9a ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c0007297:	83 c4 10             	add    esp,0x10
c000729a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000729e:	83 e8 06             	sub    eax,0x6
c00072a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00072a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072a9:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00072ac:	0f b6 c0             	movzx  eax,al
c00072af:	85 c0                	test   eax,eax
c00072b1:	75 15                	jne    c00072c8 <mem_free+0xb4>
c00072b3:	83 ec 08             	sub    esp,0x8
c00072b6:	68 fa 01 03 c0       	push   0xc00301fa
c00072bb:	68 86 01 03 c0       	push   0xc0030186
c00072c0:	e8 13 8c 01 00       	call   c001fed8 <CPrintf>
c00072c5:	83 c4 10             	add    esp,0x10
c00072c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072cc:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00072d0:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c00072d5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00072d9:	73 09                	jae    c00072e4 <mem_free+0xd0>
c00072db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072df:	a3 9c 86 03 c0       	mov    ds:0xc003869c,eax
c00072e4:	66 a1 ca 77 03 c0    	mov    ax,ds:0xc00377ca
c00072ea:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c00072f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072f4:	29 d1                	sub    ecx,edx
c00072f6:	89 ca                	mov    edx,ecx
c00072f8:	89 d1                	mov    ecx,edx
c00072fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00072fe:	66 8b 12             	mov    dx,WORD PTR [edx]
c0007301:	29 d1                	sub    ecx,edx
c0007303:	89 ca                	mov    edx,ecx
c0007305:	01 d0                	add    eax,edx
c0007307:	66 a3 ca 77 03 c0    	mov    ds:0xc00377ca,ax
c000730d:	83 ec 0c             	sub    esp,0xc
c0007310:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007314:	e8 bf fc ff ff       	call   c0006fd8 <plug_holes>
c0007319:	83 c4 10             	add    esp,0x10
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	68 98 86 03 c0       	push   0xc0038698
c0007324:	e8 83 99 ff ff       	call   c0000cac <sys_sem_signal>
c0007329:	83 c4 10             	add    esp,0x10
c000732c:	eb 06                	jmp    c0007334 <mem_free+0x120>
c000732e:	66 90                	xchg   ax,ax
c0007330:	90                   	nop
c0007331:	8d 76 00             	lea    esi,[esi+0x0]
c0007334:	83 c4 1c             	add    esp,0x1c
c0007337:	c3                   	ret    

c0007338 <mem_trim>:
c0007338:	83 ec 2c             	sub    esp,0x2c
c000733b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000733f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0007344:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007349:	83 f8 0b             	cmp    eax,0xb
c000734c:	77 0a                	ja     c0007358 <mem_trim+0x20>
c000734e:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c0007355:	8d 76 00             	lea    esi,[esi+0x0]
c0007358:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000735d:	3d 40 06 00 00       	cmp    eax,0x640
c0007362:	76 0c                	jbe    c0007370 <mem_trim+0x38>
c0007364:	b8 00 00 00 00       	mov    eax,0x0
c0007369:	e9 d6 02 00 00       	jmp    c0007644 <mem_trim+0x30c>
c000736e:	66 90                	xchg   ax,ax
c0007370:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c0007375:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007379:	72 0d                	jb     c0007388 <mem_trim+0x50>
c000737b:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c0007380:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007384:	72 1a                	jb     c00073a0 <mem_trim+0x68>
c0007386:	66 90                	xchg   ax,ax
c0007388:	83 ec 08             	sub    esp,0x8
c000738b:	68 0e 02 03 c0       	push   0xc003020e
c0007390:	68 86 01 03 c0       	push   0xc0030186
c0007395:	e8 3e 8b 01 00       	call   c001fed8 <CPrintf>
c000739a:	83 c4 10             	add    esp,0x10
c000739d:	8d 76 00             	lea    esi,[esi+0x0]
c00073a0:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c00073a5:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00073a9:	72 0d                	jb     c00073b8 <mem_trim+0x80>
c00073ab:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c00073b0:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00073b4:	72 26                	jb     c00073dc <mem_trim+0xa4>
c00073b6:	66 90                	xchg   ax,ax
c00073b8:	e8 0b 8b 01 00       	call   c001fec8 <CLockScheduler>
c00073bd:	66 a1 d0 77 03 c0    	mov    ax,ds:0xc00377d0
c00073c3:	83 c0 01             	add    eax,0x1
c00073c6:	66 a3 d0 77 03 c0    	mov    ds:0xc00377d0,ax
c00073cc:	e8 db 8a 01 00       	call   c001feac <CUnlockScheduler>
c00073d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00073d5:	e9 6a 02 00 00       	jmp    c0007644 <mem_trim+0x30c>
c00073da:	66 90                	xchg   ax,ax
c00073dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00073e0:	83 e8 06             	sub    eax,0x6
c00073e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00073e7:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c00073ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00073f0:	29 c2                	sub    edx,eax
c00073f2:	89 d0                	mov    eax,edx
c00073f4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00073f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00073fd:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007400:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0007405:	89 d1                	mov    ecx,edx
c0007407:	29 c1                	sub    ecx,eax
c0007409:	89 c8                	mov    eax,ecx
c000740b:	83 e8 06             	sub    eax,0x6
c000740e:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0007413:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007418:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000741d:	39 c2                	cmp    edx,eax
c000741f:	76 17                	jbe    c0007438 <mem_trim+0x100>
c0007421:	83 ec 08             	sub    esp,0x8
c0007424:	68 6c 02 03 c0       	push   0xc003026c
c0007429:	68 86 01 03 c0       	push   0xc0030186
c000742e:	e8 a5 8a 01 00       	call   c001fed8 <CPrintf>
c0007433:	83 c4 10             	add    esp,0x10
c0007436:	66 90                	xchg   ax,ax
c0007438:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000743d:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007442:	39 c2                	cmp    edx,eax
c0007444:	76 0a                	jbe    c0007450 <mem_trim+0x118>
c0007446:	b8 00 00 00 00       	mov    eax,0x0
c000744b:	e9 f4 01 00 00       	jmp    c0007644 <mem_trim+0x30c>
c0007450:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007455:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000745a:	39 c2                	cmp    edx,eax
c000745c:	75 0a                	jne    c0007468 <mem_trim+0x130>
c000745e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007462:	e9 dd 01 00 00       	jmp    c0007644 <mem_trim+0x30c>
c0007467:	90                   	nop
c0007468:	83 ec 08             	sub    esp,0x8
c000746b:	6a 00                	push   0x0
c000746d:	68 98 86 03 c0       	push   0xc0038698
c0007472:	e8 4d 98 ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c0007477:	83 c4 10             	add    esp,0x10
c000747a:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c0007480:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007484:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007487:	0f b7 c0             	movzx  eax,ax
c000748a:	01 d0                	add    eax,edx
c000748c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007490:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007494:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007497:	0f b6 c0             	movzx  eax,al
c000749a:	85 c0                	test   eax,eax
c000749c:	0f 85 c6 00 00 00    	jne    c0007568 <mem_trim+0x230>
c00074a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00074a6:	66 8b 00             	mov    ax,WORD PTR [eax]
c00074a9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00074ae:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00074b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074b7:	01 d0                	add    eax,edx
c00074b9:	83 c0 06             	add    eax,0x6
c00074bc:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c00074c1:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c00074c6:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00074ca:	75 14                	jne    c00074e0 <mem_trim+0x1a8>
c00074cc:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c00074d2:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00074d7:	01 d0                	add    eax,edx
c00074d9:	a3 9c 86 03 c0       	mov    ds:0xc003869c,eax
c00074de:	66 90                	xchg   ax,ax
c00074e0:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c00074e6:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00074eb:	01 d0                	add    eax,edx
c00074ed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00074f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00074f5:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00074f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00074fd:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0007502:	66 89 02             	mov    WORD PTR [edx],ax
c0007505:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007509:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000750e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007512:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000751a:	66 89 02             	mov    WORD PTR [edx],ax
c000751d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007521:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007524:	0f b7 c0             	movzx  eax,ax
c0007527:	3d 40 06 00 00       	cmp    eax,0x640
c000752c:	74 1a                	je     c0007548 <mem_trim+0x210>
c000752e:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c0007534:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007538:	66 8b 00             	mov    ax,WORD PTR [eax]
c000753b:	0f b7 c0             	movzx  eax,ax
c000753e:	01 c2                	add    edx,eax
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007548:	66 a1 ca 77 03 c0    	mov    ax,ds:0xc00377ca
c000754e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007552:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007556:	29 d1                	sub    ecx,edx
c0007558:	89 ca                	mov    edx,ecx
c000755a:	01 d0                	add    eax,edx
c000755c:	66 a3 ca 77 03 c0    	mov    ds:0xc00377ca,ax
c0007562:	e9 c9 00 00 00       	jmp    c0007630 <mem_trim+0x2f8>
c0007567:	90                   	nop
c0007568:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000756d:	8d 50 12             	lea    edx,[eax+0x12]
c0007570:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007575:	39 c2                	cmp    edx,eax
c0007577:	0f 87 b3 00 00 00    	ja     c0007630 <mem_trim+0x2f8>
c000757d:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0007582:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007586:	01 d0                	add    eax,edx
c0007588:	83 c0 06             	add    eax,0x6
c000758b:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0007590:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c0007596:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c000759b:	01 d0                	add    eax,edx
c000759d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00075a1:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c00075a6:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00075aa:	73 0c                	jae    c00075b8 <mem_trim+0x280>
c00075ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075b0:	a3 9c 86 03 c0       	mov    ds:0xc003869c,eax
c00075b5:	8d 76 00             	lea    esi,[esi+0x0]
c00075b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075bc:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00075c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00075c4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00075c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075cb:	66 89 02             	mov    WORD PTR [edx],ax
c00075ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075d2:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00075d7:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00075db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00075df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075e3:	66 89 02             	mov    WORD PTR [edx],ax
c00075e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075ea:	66 8b 00             	mov    ax,WORD PTR [eax]
c00075ed:	0f b7 c0             	movzx  eax,ax
c00075f0:	3d 40 06 00 00       	cmp    eax,0x640
c00075f5:	74 1d                	je     c0007614 <mem_trim+0x2dc>
c00075f7:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c00075fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007601:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007604:	0f b7 c0             	movzx  eax,ax
c0007607:	01 c2                	add    edx,eax
c0007609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000760d:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007611:	8d 76 00             	lea    esi,[esi+0x0]
c0007614:	66 a1 ca 77 03 c0    	mov    ax,ds:0xc00377ca
c000761a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000761e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007622:	29 d1                	sub    ecx,edx
c0007624:	89 ca                	mov    edx,ecx
c0007626:	01 d0                	add    eax,edx
c0007628:	66 a3 ca 77 03 c0    	mov    ds:0xc00377ca,ax
c000762e:	66 90                	xchg   ax,ax
c0007630:	83 ec 0c             	sub    esp,0xc
c0007633:	68 98 86 03 c0       	push   0xc0038698
c0007638:	e8 6f 96 ff ff       	call   c0000cac <sys_sem_signal>
c000763d:	83 c4 10             	add    esp,0x10
c0007640:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007644:	83 c4 2c             	add    esp,0x2c
c0007647:	c3                   	ret    

c0007648 <mem_malloc>:
c0007648:	53                   	push   ebx
c0007649:	83 ec 28             	sub    esp,0x28
c000764c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007650:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0007655:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000765a:	85 c0                	test   eax,eax
c000765c:	75 0a                	jne    c0007668 <mem_malloc+0x20>
c000765e:	b8 00 00 00 00       	mov    eax,0x0
c0007663:	e9 f4 02 00 00       	jmp    c000795c <mem_malloc+0x314>
c0007668:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000766d:	83 f8 0b             	cmp    eax,0xb
c0007670:	77 0a                	ja     c000767c <mem_malloc+0x34>
c0007672:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c0007679:	8d 76 00             	lea    esi,[esi+0x0]
c000767c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007681:	3d 40 06 00 00       	cmp    eax,0x640
c0007686:	76 0c                	jbe    c0007694 <mem_malloc+0x4c>
c0007688:	b8 00 00 00 00       	mov    eax,0x0
c000768d:	e9 ca 02 00 00       	jmp    c000795c <mem_malloc+0x314>
c0007692:	66 90                	xchg   ax,ax
c0007694:	83 ec 08             	sub    esp,0x8
c0007697:	6a 00                	push   0x0
c0007699:	68 98 86 03 c0       	push   0xc0038698
c000769e:	e8 21 96 ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c00076a3:	83 c4 10             	add    esp,0x10
c00076a6:	8b 15 9c 86 03 c0    	mov    edx,DWORD PTR ds:0xc003869c
c00076ac:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c00076b1:	29 c2                	sub    edx,eax
c00076b3:	89 d0                	mov    eax,edx
c00076b5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00076ba:	e9 5d 02 00 00       	jmp    c000791c <mem_malloc+0x2d4>
c00076bf:	90                   	nop
c00076c0:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c00076c6:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00076cb:	01 d0                	add    eax,edx
c00076cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00076d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076d5:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00076d8:	0f b6 c0             	movzx  eax,al
c00076db:	85 c0                	test   eax,eax
c00076dd:	0f 85 21 02 00 00    	jne    c0007904 <mem_malloc+0x2bc>
c00076e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076e7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00076ea:	0f b7 d0             	movzx  edx,ax
c00076ed:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00076f2:	29 c2                	sub    edx,eax
c00076f4:	89 d0                	mov    eax,edx
c00076f6:	8d 50 fa             	lea    edx,[eax-0x6]
c00076f9:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00076fe:	39 c2                	cmp    edx,eax
c0007700:	0f 82 fe 01 00 00    	jb     c0007904 <mem_malloc+0x2bc>
c0007706:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000770a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000770d:	0f b7 d0             	movzx  edx,ax
c0007710:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007715:	29 c2                	sub    edx,eax
c0007717:	89 d0                	mov    eax,edx
c0007719:	8d 50 fa             	lea    edx,[eax-0x6]
c000771c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007721:	83 c0 12             	add    eax,0x12
c0007724:	39 c2                	cmp    edx,eax
c0007726:	0f 82 c4 00 00 00    	jb     c00077f0 <mem_malloc+0x1a8>
c000772c:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c0007731:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007735:	01 d0                	add    eax,edx
c0007737:	83 c0 06             	add    eax,0x6
c000773a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000773f:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c0007745:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000774a:	01 d0                	add    eax,edx
c000774c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007754:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007758:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000775c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000775f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007763:	66 89 02             	mov    WORD PTR [edx],ax
c0007766:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000776a:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000776f:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007773:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007777:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000777c:	66 89 02             	mov    WORD PTR [edx],ax
c000777f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007783:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0007787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000778b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000778e:	0f b7 c0             	movzx  eax,ax
c0007791:	3d 40 06 00 00       	cmp    eax,0x640
c0007796:	74 1c                	je     c00077b4 <mem_malloc+0x16c>
c0007798:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c000779e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00077a2:	66 8b 00             	mov    ax,WORD PTR [eax]
c00077a5:	0f b7 c0             	movzx  eax,ax
c00077a8:	01 c2                	add    edx,eax
c00077aa:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00077af:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00077b3:	90                   	nop
c00077b4:	66 a1 ca 77 03 c0    	mov    ax,ds:0xc00377ca
c00077ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00077be:	01 d0                	add    eax,edx
c00077c0:	83 c0 06             	add    eax,0x6
c00077c3:	66 a3 ca 77 03 c0    	mov    ds:0xc00377ca,ax
c00077c9:	66 8b 15 cc 77 03 c0 	mov    dx,WORD PTR ds:0xc00377cc
c00077d0:	66 a1 ca 77 03 c0    	mov    ax,ds:0xc00377ca
c00077d6:	0f b7 d2             	movzx  edx,dx
c00077d9:	0f b7 c0             	movzx  eax,ax
c00077dc:	39 c2                	cmp    edx,eax
c00077de:	73 60                	jae    c0007840 <mem_malloc+0x1f8>
c00077e0:	66 a1 ca 77 03 c0    	mov    ax,ds:0xc00377ca
c00077e6:	66 a3 cc 77 03 c0    	mov    ds:0xc00377cc,ax
c00077ec:	eb 52                	jmp    c0007840 <mem_malloc+0x1f8>
c00077ee:	66 90                	xchg   ax,ax
c00077f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00077f4:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c00077f8:	66 a1 ca 77 03 c0    	mov    ax,ds:0xc00377ca
c00077fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007802:	66 8b 12             	mov    dx,WORD PTR [edx]
c0007805:	8b 0d a4 86 03 c0    	mov    ecx,DWORD PTR ds:0xc00386a4
c000780b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000780f:	29 cb                	sub    ebx,ecx
c0007811:	89 d9                	mov    ecx,ebx
c0007813:	29 ca                	sub    edx,ecx
c0007815:	01 d0                	add    eax,edx
c0007817:	66 a3 ca 77 03 c0    	mov    ds:0xc00377ca,ax
c000781d:	66 8b 15 cc 77 03 c0 	mov    dx,WORD PTR ds:0xc00377cc
c0007824:	66 a1 ca 77 03 c0    	mov    ax,ds:0xc00377ca
c000782a:	0f b7 d2             	movzx  edx,dx
c000782d:	0f b7 c0             	movzx  eax,ax
c0007830:	39 c2                	cmp    edx,eax
c0007832:	73 0c                	jae    c0007840 <mem_malloc+0x1f8>
c0007834:	66 a1 ca 77 03 c0    	mov    ax,ds:0xc00377ca
c000783a:	66 a3 cc 77 03 c0    	mov    ds:0xc00377cc,ax
c0007840:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c0007845:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0007849:	75 71                	jne    c00078bc <mem_malloc+0x274>
c000784b:	eb 1b                	jmp    c0007868 <mem_malloc+0x220>
c000784d:	8d 76 00             	lea    esi,[esi+0x0]
c0007850:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c0007856:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c000785b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000785e:	0f b7 c0             	movzx  eax,ax
c0007861:	01 d0                	add    eax,edx
c0007863:	a3 9c 86 03 c0       	mov    ds:0xc003869c,eax
c0007868:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c000786d:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007870:	0f b6 c0             	movzx  eax,al
c0007873:	85 c0                	test   eax,eax
c0007875:	74 11                	je     c0007888 <mem_malloc+0x240>
c0007877:	8b 15 9c 86 03 c0    	mov    edx,DWORD PTR ds:0xc003869c
c000787d:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c0007882:	39 c2                	cmp    edx,eax
c0007884:	75 ca                	jne    c0007850 <mem_malloc+0x208>
c0007886:	66 90                	xchg   ax,ax
c0007888:	8b 15 9c 86 03 c0    	mov    edx,DWORD PTR ds:0xc003869c
c000788e:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c0007893:	39 c2                	cmp    edx,eax
c0007895:	74 25                	je     c00078bc <mem_malloc+0x274>
c0007897:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c000789c:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000789f:	0f b6 c0             	movzx  eax,al
c00078a2:	85 c0                	test   eax,eax
c00078a4:	74 16                	je     c00078bc <mem_malloc+0x274>
c00078a6:	83 ec 08             	sub    esp,0x8
c00078a9:	68 25 02 03 c0       	push   0xc0030225
c00078ae:	68 86 01 03 c0       	push   0xc0030186
c00078b3:	e8 20 86 01 00       	call   c001fed8 <CPrintf>
c00078b8:	83 c4 10             	add    esp,0x10
c00078bb:	90                   	nop
c00078bc:	83 ec 0c             	sub    esp,0xc
c00078bf:	68 98 86 03 c0       	push   0xc0038698
c00078c4:	e8 e3 93 ff ff       	call   c0000cac <sys_sem_signal>
c00078c9:	83 c4 10             	add    esp,0x10
c00078cc:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00078d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078d5:	01 d0                	add    eax,edx
c00078d7:	8d 50 06             	lea    edx,[eax+0x6]
c00078da:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c00078df:	39 c2                	cmp    edx,eax
c00078e1:	76 15                	jbe    c00078f8 <mem_malloc+0x2b0>
c00078e3:	83 ec 08             	sub    esp,0x8
c00078e6:	68 8c 02 03 c0       	push   0xc003028c
c00078eb:	68 86 01 03 c0       	push   0xc0030186
c00078f0:	e8 e3 85 01 00       	call   c001fed8 <CPrintf>
c00078f5:	83 c4 10             	add    esp,0x10
c00078f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078fc:	83 c0 06             	add    eax,0x6
c00078ff:	eb 5b                	jmp    c000795c <mem_malloc+0x314>
c0007901:	8d 76 00             	lea    esi,[esi+0x0]
c0007904:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c000790a:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000790f:	01 d0                	add    eax,edx
c0007911:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007914:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0007919:	8d 76 00             	lea    esi,[esi+0x0]
c000791c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007921:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007926:	b9 40 06 00 00       	mov    ecx,0x640
c000792b:	29 d1                	sub    ecx,edx
c000792d:	89 ca                	mov    edx,ecx
c000792f:	39 d0                	cmp    eax,edx
c0007931:	0f 8c 89 fd ff ff    	jl     c00076c0 <mem_malloc+0x78>
c0007937:	66 a1 ce 77 03 c0    	mov    ax,ds:0xc00377ce
c000793d:	83 c0 01             	add    eax,0x1
c0007940:	66 a3 ce 77 03 c0    	mov    ds:0xc00377ce,ax
c0007946:	83 ec 0c             	sub    esp,0xc
c0007949:	68 98 86 03 c0       	push   0xc0038698
c000794e:	e8 59 93 ff ff       	call   c0000cac <sys_sem_signal>
c0007953:	83 c4 10             	add    esp,0x10
c0007956:	b8 00 00 00 00       	mov    eax,0x0
c000795b:	90                   	nop
c000795c:	83 c4 28             	add    esp,0x28
c000795f:	5b                   	pop    ebx
c0007960:	c3                   	ret    
c0007961:	8d 76 00             	lea    esi,[esi+0x0]

c0007964 <mem_calloc>:
c0007964:	83 ec 2c             	sub    esp,0x2c
c0007967:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000796b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000796f:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0007974:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007979:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000797d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007981:	0f af c2             	imul   eax,edx
c0007984:	0f b7 c0             	movzx  eax,ax
c0007987:	83 ec 0c             	sub    esp,0xc
c000798a:	50                   	push   eax
c000798b:	e8 b8 fc ff ff       	call   c0007648 <mem_malloc>
c0007990:	83 c4 10             	add    esp,0x10
c0007993:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007997:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000799c:	74 22                	je     c00079c0 <mem_calloc+0x5c>
c000799e:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00079a3:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00079a8:	0f af c2             	imul   eax,edx
c00079ab:	83 ec 04             	sub    esp,0x4
c00079ae:	50                   	push   eax
c00079af:	6a 00                	push   0x0
c00079b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b5:	e8 36 8b ff ff       	call   c00004f0 <memset>
c00079ba:	83 c4 10             	add    esp,0x10
c00079bd:	8d 76 00             	lea    esi,[esi+0x0]
c00079c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00079c4:	83 c4 2c             	add    esp,0x2c
c00079c7:	c3                   	ret    

c00079c8 <memp_init>:
c00079c8:	83 ec 10             	sub    esp,0x10
c00079cb:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c00079d2:	eb 78                	jmp    c0007a4c <memp_init+0x84>
c00079d4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00079d9:	89 d0                	mov    eax,edx
c00079db:	c1 e0 02             	shl    eax,0x2
c00079de:	01 d0                	add    eax,edx
c00079e0:	01 c0                	add    eax,eax
c00079e2:	05 d4 77 03 c0       	add    eax,0xc00377d4
c00079e7:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c00079ec:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00079f1:	89 d0                	mov    eax,edx
c00079f3:	c1 e0 02             	shl    eax,0x2
c00079f6:	01 d0                	add    eax,edx
c00079f8:	01 c0                	add    eax,eax
c00079fa:	05 d6 77 03 c0       	add    eax,0xc00377d6
c00079ff:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007a04:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007a09:	89 d0                	mov    eax,edx
c0007a0b:	c1 e0 02             	shl    eax,0x2
c0007a0e:	01 d0                	add    eax,edx
c0007a10:	01 c0                	add    eax,eax
c0007a12:	05 d8 77 03 c0       	add    eax,0xc00377d8
c0007a17:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007a1c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a21:	0f b7 4c 24 0a       	movzx  ecx,WORD PTR [esp+0xa]
c0007a26:	66 8b 94 00 dc 02 03 c0 	mov    dx,WORD PTR [eax+eax*1-0x3ffcfd24]
c0007a2e:	89 c8                	mov    eax,ecx
c0007a30:	c1 e0 02             	shl    eax,0x2
c0007a33:	01 c8                	add    eax,ecx
c0007a35:	01 c0                	add    eax,eax
c0007a37:	05 d2 77 03 c0       	add    eax,0xc00377d2
c0007a3c:	66 89 10             	mov    WORD PTR [eax],dx
c0007a3f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0007a44:	83 c0 01             	add    eax,0x1
c0007a47:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0007a4c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a51:	83 f8 0d             	cmp    eax,0xd
c0007a54:	0f 86 7a ff ff ff    	jbe    c00079d4 <memp_init+0xc>
c0007a5a:	c7 44 24 0c c0 86 03 c0 	mov    DWORD PTR [esp+0xc],0xc00386c0
c0007a62:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c0007a69:	e9 8a 00 00 00       	jmp    c0007af8 <memp_init+0x130>
c0007a6e:	66 90                	xchg   ax,ax
c0007a70:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a75:	c7 04 85 60 b8 03 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffc47a0],0x0
c0007a80:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0007a87:	eb 47                	jmp    c0007ad0 <memp_init+0x108>
c0007a89:	8d 76 00             	lea    esi,[esi+0x0]
c0007a8c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a91:	8b 14 85 60 b8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc47a0]
c0007a98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a9c:	89 10                	mov    DWORD PTR [eax],edx
c0007a9e:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007aa3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007aa7:	89 14 85 60 b8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc47a0],edx
c0007aae:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007ab3:	66 8b 84 00 f8 02 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfd08]
c0007abb:	0f b7 c0             	movzx  eax,ax
c0007abe:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0007ac2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ac6:	83 c0 01             	add    eax,0x1
c0007ac9:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007ace:	66 90                	xchg   ax,ax
c0007ad0:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007ad5:	66 8b 84 00 dc 02 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfd24]
c0007add:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0007ae2:	0f b7 c0             	movzx  eax,ax
c0007ae5:	39 c2                	cmp    edx,eax
c0007ae7:	72 a3                	jb     c0007a8c <memp_init+0xc4>
c0007ae9:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0007aee:	83 c0 01             	add    eax,0x1
c0007af1:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0007af6:	66 90                	xchg   ax,ax
c0007af8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007afd:	83 f8 0d             	cmp    eax,0xd
c0007b00:	0f 86 6a ff ff ff    	jbe    c0007a70 <memp_init+0xa8>
c0007b06:	90                   	nop
c0007b07:	83 c4 10             	add    esp,0x10
c0007b0a:	c3                   	ret    
c0007b0b:	90                   	nop

c0007b0c <memp_malloc>:
c0007b0c:	83 ec 1c             	sub    esp,0x1c
c0007b0f:	83 7c 24 20 0d       	cmp    DWORD PTR [esp+0x20],0xd
c0007b14:	76 22                	jbe    c0007b38 <memp_malloc+0x2c>
c0007b16:	83 ec 08             	sub    esp,0x8
c0007b19:	68 bc 02 03 c0       	push   0xc00302bc
c0007b1e:	68 86 01 03 c0       	push   0xc0030186
c0007b23:	e8 b0 83 01 00       	call   c001fed8 <CPrintf>
c0007b28:	83 c4 10             	add    esp,0x10
c0007b2b:	b8 00 00 00 00       	mov    eax,0x0
c0007b30:	e9 ff 00 00 00       	jmp    c0007c34 <memp_malloc+0x128>
c0007b35:	8d 76 00             	lea    esi,[esi+0x0]
c0007b38:	e8 8b 83 01 00       	call   c001fec8 <CLockScheduler>
c0007b3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b41:	8b 04 85 60 b8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc47a0]
c0007b48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b4c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007b51:	0f 84 a1 00 00 00    	je     c0007bf8 <memp_malloc+0xec>
c0007b57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b5b:	8b 10                	mov    edx,DWORD PTR [eax]
c0007b5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b61:	89 14 85 60 b8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc47a0],edx
c0007b68:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007b6c:	89 d0                	mov    eax,edx
c0007b6e:	c1 e0 02             	shl    eax,0x2
c0007b71:	01 d0                	add    eax,edx
c0007b73:	01 c0                	add    eax,eax
c0007b75:	05 d4 77 03 c0       	add    eax,0xc00377d4
c0007b7a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007b7d:	83 c0 01             	add    eax,0x1
c0007b80:	89 c2                	mov    edx,eax
c0007b82:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b86:	89 c8                	mov    eax,ecx
c0007b88:	c1 e0 02             	shl    eax,0x2
c0007b8b:	01 c8                	add    eax,ecx
c0007b8d:	01 c0                	add    eax,eax
c0007b8f:	05 d4 77 03 c0       	add    eax,0xc00377d4
c0007b94:	66 89 10             	mov    WORD PTR [eax],dx
c0007b97:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007b9b:	89 d0                	mov    eax,edx
c0007b9d:	c1 e0 02             	shl    eax,0x2
c0007ba0:	01 d0                	add    eax,edx
c0007ba2:	01 c0                	add    eax,eax
c0007ba4:	05 d6 77 03 c0       	add    eax,0xc00377d6
c0007ba9:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007bac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bb0:	89 c8                	mov    eax,ecx
c0007bb2:	c1 e0 02             	shl    eax,0x2
c0007bb5:	01 c8                	add    eax,ecx
c0007bb7:	01 c0                	add    eax,eax
c0007bb9:	05 d4 77 03 c0       	add    eax,0xc00377d4
c0007bbe:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007bc1:	0f b7 d2             	movzx  edx,dx
c0007bc4:	0f b7 c0             	movzx  eax,ax
c0007bc7:	39 c2                	cmp    edx,eax
c0007bc9:	73 5d                	jae    c0007c28 <memp_malloc+0x11c>
c0007bcb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007bcf:	89 d0                	mov    eax,edx
c0007bd1:	c1 e0 02             	shl    eax,0x2
c0007bd4:	01 d0                	add    eax,edx
c0007bd6:	01 c0                	add    eax,eax
c0007bd8:	05 d4 77 03 c0       	add    eax,0xc00377d4
c0007bdd:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007be0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007be4:	89 c8                	mov    eax,ecx
c0007be6:	c1 e0 02             	shl    eax,0x2
c0007be9:	01 c8                	add    eax,ecx
c0007beb:	01 c0                	add    eax,eax
c0007bed:	05 d6 77 03 c0       	add    eax,0xc00377d6
c0007bf2:	66 89 10             	mov    WORD PTR [eax],dx
c0007bf5:	eb 31                	jmp    c0007c28 <memp_malloc+0x11c>
c0007bf7:	90                   	nop
c0007bf8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007bfc:	89 d0                	mov    eax,edx
c0007bfe:	c1 e0 02             	shl    eax,0x2
c0007c01:	01 d0                	add    eax,edx
c0007c03:	01 c0                	add    eax,eax
c0007c05:	05 d8 77 03 c0       	add    eax,0xc00377d8
c0007c0a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007c0d:	83 c0 01             	add    eax,0x1
c0007c10:	89 c2                	mov    edx,eax
c0007c12:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c16:	89 c8                	mov    eax,ecx
c0007c18:	c1 e0 02             	shl    eax,0x2
c0007c1b:	01 c8                	add    eax,ecx
c0007c1d:	01 c0                	add    eax,eax
c0007c1f:	05 d8 77 03 c0       	add    eax,0xc00377d8
c0007c24:	66 89 10             	mov    WORD PTR [eax],dx
c0007c27:	90                   	nop
c0007c28:	e8 7f 82 01 00       	call   c001feac <CUnlockScheduler>
c0007c2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c31:	8d 76 00             	lea    esi,[esi+0x0]
c0007c34:	83 c4 1c             	add    esp,0x1c
c0007c37:	c3                   	ret    

c0007c38 <memp_free>:
c0007c38:	83 ec 1c             	sub    esp,0x1c
c0007c3b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007c40:	74 66                	je     c0007ca8 <memp_free+0x70>
c0007c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007c46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c4a:	e8 79 82 01 00       	call   c001fec8 <CLockScheduler>
c0007c4f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007c53:	89 d0                	mov    eax,edx
c0007c55:	c1 e0 02             	shl    eax,0x2
c0007c58:	01 d0                	add    eax,edx
c0007c5a:	01 c0                	add    eax,eax
c0007c5c:	05 d4 77 03 c0       	add    eax,0xc00377d4
c0007c61:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007c64:	83 e8 01             	sub    eax,0x1
c0007c67:	89 c2                	mov    edx,eax
c0007c69:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c6d:	89 c8                	mov    eax,ecx
c0007c6f:	c1 e0 02             	shl    eax,0x2
c0007c72:	01 c8                	add    eax,ecx
c0007c74:	01 c0                	add    eax,eax
c0007c76:	05 d4 77 03 c0       	add    eax,0xc00377d4
c0007c7b:	66 89 10             	mov    WORD PTR [eax],dx
c0007c7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c82:	8b 14 85 60 b8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc47a0]
c0007c89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c8d:	89 10                	mov    DWORD PTR [eax],edx
c0007c8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c97:	89 14 85 60 b8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc47a0],edx
c0007c9e:	e8 09 82 01 00       	call   c001feac <CUnlockScheduler>
c0007ca3:	eb 07                	jmp    c0007cac <memp_free+0x74>
c0007ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0007ca8:	90                   	nop
c0007ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0007cac:	83 c4 1c             	add    esp,0x1c
c0007caf:	c3                   	ret    

c0007cb0 <netif_init>:
c0007cb0:	90                   	nop
c0007cb1:	c3                   	ret    
c0007cb2:	66 90                	xchg   ax,ax

c0007cb4 <netif_find>:
c0007cb4:	83 ec 10             	sub    esp,0x10
c0007cb7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007cbc:	75 0a                	jne    c0007cc8 <netif_find+0x14>
c0007cbe:	b8 00 00 00 00       	mov    eax,0x0
c0007cc3:	e9 80 00 00 00       	jmp    c0007d48 <netif_find+0x94>
c0007cc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007ccc:	83 c0 02             	add    eax,0x2
c0007ccf:	8a 00                	mov    al,BYTE PTR [eax]
c0007cd1:	83 e8 30             	sub    eax,0x30
c0007cd4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0007cd8:	a1 10 77 03 c0       	mov    eax,ds:0xc0037710
c0007cdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ce1:	eb 59                	jmp    c0007d3c <netif_find+0x88>
c0007ce3:	90                   	nop
c0007ce4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ce8:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0007ceb:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0007cf0:	0f b6 c0             	movzx  eax,al
c0007cf3:	39 c2                	cmp    edx,eax
c0007cf5:	75 39                	jne    c0007d30 <netif_find+0x7c>
c0007cf7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007cfb:	8a 10                	mov    dl,BYTE PTR [eax]
c0007cfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d01:	8a 40 2a             	mov    al,BYTE PTR [eax+0x2a]
c0007d04:	0f be d2             	movsx  edx,dl
c0007d07:	0f be c0             	movsx  eax,al
c0007d0a:	39 c2                	cmp    edx,eax
c0007d0c:	75 22                	jne    c0007d30 <netif_find+0x7c>
c0007d0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d12:	83 c0 01             	add    eax,0x1
c0007d15:	8a 10                	mov    dl,BYTE PTR [eax]
c0007d17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d1b:	8a 40 2b             	mov    al,BYTE PTR [eax+0x2b]
c0007d1e:	0f be d2             	movsx  edx,dl
c0007d21:	0f be c0             	movsx  eax,al
c0007d24:	39 c2                	cmp    edx,eax
c0007d26:	75 08                	jne    c0007d30 <netif_find+0x7c>
c0007d28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d2c:	eb 1a                	jmp    c0007d48 <netif_find+0x94>
c0007d2e:	66 90                	xchg   ax,ax
c0007d30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d34:	8b 00                	mov    eax,DWORD PTR [eax]
c0007d36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007d3a:	66 90                	xchg   ax,ax
c0007d3c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007d41:	75 a1                	jne    c0007ce4 <netif_find+0x30>
c0007d43:	b8 00 00 00 00       	mov    eax,0x0
c0007d48:	83 c4 10             	add    esp,0x10
c0007d4b:	c3                   	ret    

c0007d4c <netif_set_ipaddr>:
c0007d4c:	83 ec 1c             	sub    esp,0x1c
c0007d4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007d53:	8b 10                	mov    edx,DWORD PTR [eax]
c0007d55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d59:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007d5c:	39 c2                	cmp    edx,eax
c0007d5e:	0f 84 bc 00 00 00    	je     c0007e20 <netif_set_ipaddr+0xd4>
c0007d64:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c0007d69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007d6d:	eb 45                	jmp    c0007db4 <netif_set_ipaddr+0x68>
c0007d6f:	90                   	nop
c0007d70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d74:	8b 10                	mov    edx,DWORD PTR [eax]
c0007d76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007d7d:	39 c2                	cmp    edx,eax
c0007d7f:	75 27                	jne    c0007da8 <netif_set_ipaddr+0x5c>
c0007d81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d85:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007d88:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007d8c:	83 ec 0c             	sub    esp,0xc
c0007d8f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007d93:	e8 7c 36 00 00       	call   c000b414 <tcp_abort>
c0007d98:	83 c4 10             	add    esp,0x10
c0007d9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007da3:	eb 0f                	jmp    c0007db4 <netif_set_ipaddr+0x68>
c0007da5:	8d 76 00             	lea    esi,[esi+0x0]
c0007da8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007dac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007daf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007db3:	90                   	nop
c0007db4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007db9:	75 b5                	jne    c0007d70 <netif_set_ipaddr+0x24>
c0007dbb:	a1 78 78 03 c0       	mov    eax,ds:0xc0037878
c0007dc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc4:	eb 52                	jmp    c0007e18 <netif_set_ipaddr+0xcc>
c0007dc6:	66 90                	xchg   ax,ax
c0007dc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dcc:	85 c0                	test   eax,eax
c0007dce:	74 3c                	je     c0007e0c <netif_set_ipaddr+0xc0>
c0007dd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0007dd6:	85 c0                	test   eax,eax
c0007dd8:	74 32                	je     c0007e0c <netif_set_ipaddr+0xc0>
c0007dda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dde:	8b 10                	mov    edx,DWORD PTR [eax]
c0007de0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007de4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007de7:	39 c2                	cmp    edx,eax
c0007de9:	75 21                	jne    c0007e0c <netif_set_ipaddr+0xc0>
c0007deb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007df0:	74 0a                	je     c0007dfc <netif_set_ipaddr+0xb0>
c0007df2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007df6:	8b 00                	mov    eax,DWORD PTR [eax]
c0007df8:	eb 0a                	jmp    c0007e04 <netif_set_ipaddr+0xb8>
c0007dfa:	66 90                	xchg   ax,ax
c0007dfc:	b8 00 00 00 00       	mov    eax,0x0
c0007e01:	8d 76 00             	lea    esi,[esi+0x0]
c0007e04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e08:	89 02                	mov    DWORD PTR [edx],eax
c0007e0a:	66 90                	xchg   ax,ax
c0007e0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e10:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007e13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e17:	90                   	nop
c0007e18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e1d:	75 a9                	jne    c0007dc8 <netif_set_ipaddr+0x7c>
c0007e1f:	90                   	nop
c0007e20:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007e25:	74 09                	je     c0007e30 <netif_set_ipaddr+0xe4>
c0007e27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007e2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e2d:	eb 09                	jmp    c0007e38 <netif_set_ipaddr+0xec>
c0007e2f:	90                   	nop
c0007e30:	b8 00 00 00 00       	mov    eax,0x0
c0007e35:	8d 76 00             	lea    esi,[esi+0x0]
c0007e38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007e3c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0007e3f:	90                   	nop
c0007e40:	83 c4 1c             	add    esp,0x1c
c0007e43:	c3                   	ret    

c0007e44 <netif_set_gw>:
c0007e44:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e49:	74 09                	je     c0007e54 <netif_set_gw+0x10>
c0007e4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e51:	eb 09                	jmp    c0007e5c <netif_set_gw+0x18>
c0007e53:	90                   	nop
c0007e54:	b8 00 00 00 00       	mov    eax,0x0
c0007e59:	8d 76 00             	lea    esi,[esi+0x0]
c0007e5c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007e60:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0007e63:	90                   	nop
c0007e64:	c3                   	ret    
c0007e65:	8d 76 00             	lea    esi,[esi+0x0]

c0007e68 <netif_set_netmask>:
c0007e68:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e6d:	74 09                	je     c0007e78 <netif_set_netmask+0x10>
c0007e6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e73:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e75:	eb 09                	jmp    c0007e80 <netif_set_netmask+0x18>
c0007e77:	90                   	nop
c0007e78:	b8 00 00 00 00       	mov    eax,0x0
c0007e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0007e80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007e84:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0007e87:	90                   	nop
c0007e88:	c3                   	ret    
c0007e89:	8d 76 00             	lea    esi,[esi+0x0]

c0007e8c <netif_set_addr>:
c0007e8c:	83 ec 0c             	sub    esp,0xc
c0007e8f:	83 ec 08             	sub    esp,0x8
c0007e92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e9a:	e8 ad fe ff ff       	call   c0007d4c <netif_set_ipaddr>
c0007e9f:	83 c4 10             	add    esp,0x10
c0007ea2:	83 ec 08             	sub    esp,0x8
c0007ea5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007ea9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ead:	e8 b6 ff ff ff       	call   c0007e68 <netif_set_netmask>
c0007eb2:	83 c4 10             	add    esp,0x10
c0007eb5:	83 ec 08             	sub    esp,0x8
c0007eb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ec0:	e8 7f ff ff ff       	call   c0007e44 <netif_set_gw>
c0007ec5:	83 c4 10             	add    esp,0x10
c0007ec8:	90                   	nop
c0007ec9:	83 c4 0c             	add    esp,0xc
c0007ecc:	c3                   	ret    
c0007ecd:	8d 76 00             	lea    esi,[esi+0x0]

c0007ed0 <netif_add>:
c0007ed0:	83 ec 0c             	sub    esp,0xc
c0007ed3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007ed8:	75 16                	jne    c0007ef0 <netif_add+0x20>
c0007eda:	83 ec 08             	sub    esp,0x8
c0007edd:	68 14 03 03 c0       	push   0xc0030314
c0007ee2:	68 86 01 03 c0       	push   0xc0030186
c0007ee7:	e8 ec 7f 01 00       	call   c001fed8 <CPrintf>
c0007eec:	83 c4 10             	add    esp,0x10
c0007eef:	90                   	nop
c0007ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ef4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0007efb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007eff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0007f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f0a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0007f11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f15:	c6 40 29 00          	mov    BYTE PTR [eax+0x29],0x0
c0007f19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007f21:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0007f24:	a0 98 b8 03 c0       	mov    al,ds:0xc003b898
c0007f29:	8d 50 01             	lea    edx,[eax+0x1]
c0007f2c:	88 15 98 b8 03 c0    	mov    BYTE PTR ds:0xc003b898,dl
c0007f32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007f36:	88 42 2c             	mov    BYTE PTR [edx+0x2c],al
c0007f39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f3d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007f41:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0007f44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f54:	e8 33 ff ff ff       	call   c0007e8c <netif_set_addr>
c0007f59:	83 c4 10             	add    esp,0x10
c0007f5c:	83 ec 0c             	sub    esp,0xc
c0007f5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f67:	ff d0                	call   eax
c0007f69:	83 c4 10             	add    esp,0x10
c0007f6c:	0f be c0             	movsx  eax,al
c0007f6f:	85 c0                	test   eax,eax
c0007f71:	74 09                	je     c0007f7c <netif_add+0xac>
c0007f73:	b8 00 00 00 00       	mov    eax,0x0
c0007f78:	eb 1e                	jmp    c0007f98 <netif_add+0xc8>
c0007f7a:	66 90                	xchg   ax,ax
c0007f7c:	8b 15 10 77 03 c0    	mov    edx,DWORD PTR ds:0xc0037710
c0007f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f86:	89 10                	mov    DWORD PTR [eax],edx
c0007f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f8c:	a3 10 77 03 c0       	mov    ds:0xc0037710,eax
c0007f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f95:	8d 76 00             	lea    esi,[esi+0x0]
c0007f98:	83 c4 0c             	add    esp,0xc
c0007f9b:	c3                   	ret    

c0007f9c <netif_set_default>:
c0007f9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fa0:	a3 14 77 03 c0       	mov    ds:0xc0037714,eax
c0007fa5:	90                   	nop
c0007fa6:	c3                   	ret    
c0007fa7:	90                   	nop

c0007fa8 <netif_set_up>:
c0007fa8:	83 ec 0c             	sub    esp,0xc
c0007fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007faf:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fb2:	0f b6 c0             	movzx  eax,al
c0007fb5:	83 e0 01             	and    eax,0x1
c0007fb8:	75 4a                	jne    c0008004 <netif_set_up+0x5c>
c0007fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fbe:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fc1:	83 c8 01             	or     eax,0x1
c0007fc4:	88 c2                	mov    dl,al
c0007fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fca:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fd1:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fd4:	0f b6 c0             	movzx  eax,al
c0007fd7:	83 e0 10             	and    eax,0x10
c0007fda:	74 28                	je     c0008004 <netif_set_up+0x5c>
c0007fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fe0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fe3:	0f b6 c0             	movzx  eax,al
c0007fe6:	83 e0 20             	and    eax,0x20
c0007fe9:	74 19                	je     c0008004 <netif_set_up+0x5c>
c0007feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fef:	83 c0 04             	add    eax,0x4
c0007ff2:	83 ec 08             	sub    esp,0x8
c0007ff5:	50                   	push   eax
c0007ff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ffa:	e8 bd a5 00 00       	call   c00125bc <etharp_request>
c0007fff:	83 c4 10             	add    esp,0x10
c0008002:	66 90                	xchg   ax,ax
c0008004:	90                   	nop
c0008005:	83 c4 0c             	add    esp,0xc
c0008008:	c3                   	ret    
c0008009:	8d 76 00             	lea    esi,[esi+0x0]

c000800c <netif_set_down>:
c000800c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008010:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008013:	0f b6 c0             	movzx  eax,al
c0008016:	83 e0 01             	and    eax,0x1
c0008019:	74 15                	je     c0008030 <netif_set_down+0x24>
c000801b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000801f:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008022:	83 e0 fe             	and    eax,0xfffffffe
c0008025:	88 c2                	mov    dl,al
c0008027:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000802b:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c000802e:	66 90                	xchg   ax,ax
c0008030:	90                   	nop
c0008031:	c3                   	ret    
c0008032:	66 90                	xchg   ax,ax

c0008034 <netif_remove>:
c0008034:	83 ec 10             	sub    esp,0x10
c0008037:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000803c:	0f 84 92 00 00 00    	je     c00080d4 <netif_remove+0xa0>
c0008042:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008046:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008049:	83 e0 01             	and    eax,0x1
c000804c:	0f b6 c0             	movzx  eax,al
c000804f:	85 c0                	test   eax,eax
c0008051:	74 0d                	je     c0008060 <netif_remove+0x2c>
c0008053:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008057:	e8 b0 ff ff ff       	call   c000800c <netif_set_down>
c000805c:	83 c4 04             	add    esp,0x4
c000805f:	90                   	nop
c0008060:	a1 10 77 03 c0       	mov    eax,ds:0xc0037710
c0008065:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0008069:	75 0d                	jne    c0008078 <netif_remove+0x44>
c000806b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000806f:	8b 00                	mov    eax,DWORD PTR [eax]
c0008071:	a3 10 77 03 c0       	mov    ds:0xc0037710,eax
c0008076:	eb 44                	jmp    c00080bc <netif_remove+0x88>
c0008078:	a1 10 77 03 c0       	mov    eax,ds:0xc0037710
c000807d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008081:	eb 29                	jmp    c00080ac <netif_remove+0x78>
c0008083:	90                   	nop
c0008084:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008088:	8b 00                	mov    eax,DWORD PTR [eax]
c000808a:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000808e:	75 10                	jne    c00080a0 <netif_remove+0x6c>
c0008090:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008094:	8b 10                	mov    edx,DWORD PTR [eax]
c0008096:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000809a:	89 10                	mov    DWORD PTR [eax],edx
c000809c:	eb 16                	jmp    c00080b4 <netif_remove+0x80>
c000809e:	66 90                	xchg   ax,ax
c00080a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00080a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00080a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00080aa:	66 90                	xchg   ax,ax
c00080ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00080b1:	75 d1                	jne    c0008084 <netif_remove+0x50>
c00080b3:	90                   	nop
c00080b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00080b9:	74 1d                	je     c00080d8 <netif_remove+0xa4>
c00080bb:	90                   	nop
c00080bc:	a1 14 77 03 c0       	mov    eax,ds:0xc0037714
c00080c1:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00080c5:	75 15                	jne    c00080dc <netif_remove+0xa8>
c00080c7:	6a 00                	push   0x0
c00080c9:	e8 ce fe ff ff       	call   c0007f9c <netif_set_default>
c00080ce:	83 c4 04             	add    esp,0x4
c00080d1:	eb 09                	jmp    c00080dc <netif_remove+0xa8>
c00080d3:	90                   	nop
c00080d4:	90                   	nop
c00080d5:	eb 05                	jmp    c00080dc <netif_remove+0xa8>
c00080d7:	90                   	nop
c00080d8:	90                   	nop
c00080d9:	8d 76 00             	lea    esi,[esi+0x0]
c00080dc:	83 c4 10             	add    esp,0x10
c00080df:	c3                   	ret    

c00080e0 <netif_set_link_up>:
c00080e0:	83 ec 0c             	sub    esp,0xc
c00080e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e7:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00080ea:	0f b6 c0             	movzx  eax,al
c00080ed:	83 e0 10             	and    eax,0x10
c00080f0:	75 4a                	jne    c000813c <netif_set_link_up+0x5c>
c00080f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f6:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00080f9:	83 c8 10             	or     eax,0x10
c00080fc:	88 c2                	mov    dl,al
c00080fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008102:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0008105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008109:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000810c:	0f b6 c0             	movzx  eax,al
c000810f:	83 e0 01             	and    eax,0x1
c0008112:	74 28                	je     c000813c <netif_set_link_up+0x5c>
c0008114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008118:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000811b:	0f b6 c0             	movzx  eax,al
c000811e:	83 e0 20             	and    eax,0x20
c0008121:	74 19                	je     c000813c <netif_set_link_up+0x5c>
c0008123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008127:	83 c0 04             	add    eax,0x4
c000812a:	83 ec 08             	sub    esp,0x8
c000812d:	50                   	push   eax
c000812e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008132:	e8 85 a4 00 00       	call   c00125bc <etharp_request>
c0008137:	83 c4 10             	add    esp,0x10
c000813a:	66 90                	xchg   ax,ax
c000813c:	90                   	nop
c000813d:	83 c4 0c             	add    esp,0xc
c0008140:	c3                   	ret    
c0008141:	8d 76 00             	lea    esi,[esi+0x0]

c0008144 <netif_set_link_down>:
c0008144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008148:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000814b:	0f b6 c0             	movzx  eax,al
c000814e:	83 e0 10             	and    eax,0x10
c0008151:	74 15                	je     c0008168 <netif_set_link_down+0x24>
c0008153:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008157:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000815a:	83 e0 ef             	and    eax,0xffffffef
c000815d:	88 c2                	mov    dl,al
c000815f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008163:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0008166:	66 90                	xchg   ax,ax
c0008168:	90                   	nop
c0008169:	c3                   	ret    
c000816a:	66 90                	xchg   ax,ax

c000816c <pbuf_free_ooseq>:
c000816c:	83 ec 1c             	sub    esp,0x1c
c000816f:	e8 54 7d 01 00       	call   c001fec8 <CLockScheduler>
c0008174:	c6 05 99 b8 03 c0 00 	mov    BYTE PTR ds:0xc003b899,0x0
c000817b:	e8 2c 7d 01 00       	call   c001feac <CUnlockScheduler>
c0008180:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c0008185:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008189:	eb 41                	jmp    c00081cc <pbuf_free_ooseq+0x60>
c000818b:	90                   	nop
c000818c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008190:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c0008196:	85 c0                	test   eax,eax
c0008198:	74 26                	je     c00081c0 <pbuf_free_ooseq+0x54>
c000819a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000819e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c00081a4:	83 ec 0c             	sub    esp,0xc
c00081a7:	50                   	push   eax
c00081a8:	e8 03 20 00 00       	call   c000a1b0 <tcp_segs_free>
c00081ad:	83 c4 10             	add    esp,0x10
c00081b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00081b4:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c00081be:	eb 14                	jmp    c00081d4 <pbuf_free_ooseq+0x68>
c00081c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00081c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00081c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00081cb:	90                   	nop
c00081cc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00081d1:	75 b9                	jne    c000818c <pbuf_free_ooseq+0x20>
c00081d3:	90                   	nop
c00081d4:	83 c4 1c             	add    esp,0x1c
c00081d7:	c3                   	ret    

c00081d8 <pbuf_pool_is_empty>:
c00081d8:	83 ec 1c             	sub    esp,0x1c
c00081db:	e8 e8 7c 01 00       	call   c001fec8 <CLockScheduler>
c00081e0:	a0 99 b8 03 c0       	mov    al,ds:0xc003b899
c00081e5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00081e9:	c6 05 99 b8 03 c0 01 	mov    BYTE PTR ds:0xc003b899,0x1
c00081f0:	e8 b7 7c 01 00       	call   c001feac <CUnlockScheduler>
c00081f5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00081fa:	85 c0                	test   eax,eax
c00081fc:	75 2e                	jne    c000822c <pbuf_pool_is_empty+0x54>
c00081fe:	83 ec 04             	sub    esp,0x4
c0008201:	6a 00                	push   0x0
c0008203:	6a 00                	push   0x0
c0008205:	68 6c 81 00 c0       	push   0xc000816c
c000820a:	e8 45 8a ff ff       	call   c0000c54 <tcpip_callback_with_block>
c000820f:	83 c4 10             	add    esp,0x10
c0008212:	0f be c0             	movsx  eax,al
c0008215:	85 c0                	test   eax,eax
c0008217:	74 13                	je     c000822c <pbuf_pool_is_empty+0x54>
c0008219:	e8 aa 7c 01 00       	call   c001fec8 <CLockScheduler>
c000821e:	c6 05 99 b8 03 c0 00 	mov    BYTE PTR ds:0xc003b899,0x0
c0008225:	e8 82 7c 01 00       	call   c001feac <CUnlockScheduler>
c000822a:	66 90                	xchg   ax,ax
c000822c:	90                   	nop
c000822d:	83 c4 1c             	add    esp,0x1c
c0008230:	c3                   	ret    
c0008231:	8d 76 00             	lea    esi,[esi+0x0]

c0008234 <pbuf_alloced_custom>:
c0008234:	83 ec 2c             	sub    esp,0x2c
c0008237:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000823b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000823f:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0008244:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008249:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c0008250:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0008255:	74 29                	je     c0008280 <pbuf_alloced_custom+0x4c>
c0008257:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000825c:	74 12                	je     c0008270 <pbuf_alloced_custom+0x3c>
c000825e:	83 7c 24 30 02       	cmp    DWORD PTR [esp+0x30],0x2
c0008263:	74 2b                	je     c0008290 <pbuf_alloced_custom+0x5c>
c0008265:	83 7c 24 30 03       	cmp    DWORD PTR [esp+0x30],0x3
c000826a:	74 54                	je     c00082c0 <pbuf_alloced_custom+0x8c>
c000826c:	eb 32                	jmp    c00082a0 <pbuf_alloced_custom+0x6c>
c000826e:	66 90                	xchg   ax,ax
c0008270:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008275:	83 c0 14             	add    eax,0x14
c0008278:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000827d:	8d 76 00             	lea    esi,[esi+0x0]
c0008280:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008285:	83 c0 14             	add    eax,0x14
c0008288:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000828d:	8d 76 00             	lea    esi,[esi+0x0]
c0008290:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008295:	83 c0 0e             	add    eax,0xe
c0008298:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000829d:	eb 25                	jmp    c00082c4 <pbuf_alloced_custom+0x90>
c000829f:	90                   	nop
c00082a0:	83 ec 08             	sub    esp,0x8
c00082a3:	68 2c 03 03 c0       	push   0xc003032c
c00082a8:	68 86 01 03 c0       	push   0xc0030186
c00082ad:	e8 26 7c 01 00       	call   c001fed8 <CPrintf>
c00082b2:	83 c4 10             	add    esp,0x10
c00082b5:	b8 00 00 00 00       	mov    eax,0x0
c00082ba:	e9 95 00 00 00       	jmp    c0008354 <pbuf_alloced_custom+0x120>
c00082bf:	90                   	nop
c00082c0:	90                   	nop
c00082c1:	8d 76 00             	lea    esi,[esi+0x0]
c00082c4:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00082c9:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00082ce:	01 c2                	add    edx,eax
c00082d0:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00082d5:	39 c2                	cmp    edx,eax
c00082d7:	7d 07                	jge    c00082e0 <pbuf_alloced_custom+0xac>
c00082d9:	b8 00 00 00 00       	mov    eax,0x0
c00082de:	eb 74                	jmp    c0008354 <pbuf_alloced_custom+0x120>
c00082e0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00082e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00082ea:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00082ef:	74 17                	je     c0008308 <pbuf_alloced_custom+0xd4>
c00082f1:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00082f6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00082fa:	01 c2                	add    edx,eax
c00082fc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008300:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008303:	eb 0f                	jmp    c0008314 <pbuf_alloced_custom+0xe0>
c0008305:	8d 76 00             	lea    esi,[esi+0x0]
c0008308:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000830c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008313:	90                   	nop
c0008314:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008318:	c6 40 0d 02          	mov    BYTE PTR [eax+0xd],0x2
c000831c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0008320:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008324:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008328:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000832c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000832f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0008333:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008337:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000833b:	88 c2                	mov    dl,al
c000833d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008341:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008344:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008348:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c000834e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008352:	66 90                	xchg   ax,ax
c0008354:	83 c4 2c             	add    esp,0x2c
c0008357:	c3                   	ret    

c0008358 <pbuf_header>:
c0008358:	83 ec 2c             	sub    esp,0x2c
c000835b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000835f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008364:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008369:	75 15                	jne    c0008380 <pbuf_header+0x28>
c000836b:	83 ec 08             	sub    esp,0x8
c000836e:	68 b6 05 03 c0       	push   0xc00305b6
c0008373:	68 86 01 03 c0       	push   0xc0030186
c0008378:	e8 5b 7b 01 00       	call   c001fed8 <CPrintf>
c000837d:	83 c4 10             	add    esp,0x10
c0008380:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008385:	85 c0                	test   eax,eax
c0008387:	74 07                	je     c0008390 <pbuf_header+0x38>
c0008389:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000838e:	75 08                	jne    c0008398 <pbuf_header+0x40>
c0008390:	b0 00                	mov    al,0x0
c0008392:	e9 59 01 00 00       	jmp    c00084f0 <pbuf_header+0x198>
c0008397:	90                   	nop
c0008398:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c000839d:	85 c0                	test   eax,eax
c000839f:	79 3b                	jns    c00083dc <pbuf_header+0x84>
c00083a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a5:	f7 d8                	neg    eax
c00083a7:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00083ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00083b0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00083b4:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00083b9:	0f b7 c0             	movzx  eax,ax
c00083bc:	39 c2                	cmp    edx,eax
c00083be:	76 28                	jbe    c00083e8 <pbuf_header+0x90>
c00083c0:	83 ec 08             	sub    esp,0x8
c00083c3:	68 07 05 03 c0       	push   0xc0030507
c00083c8:	68 86 01 03 c0       	push   0xc0030186
c00083cd:	e8 06 7b 01 00       	call   c001fed8 <CPrintf>
c00083d2:	83 c4 10             	add    esp,0x10
c00083d5:	b0 01                	mov    al,0x1
c00083d7:	e9 14 01 00 00       	jmp    c00084f0 <pbuf_header+0x198>
c00083dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083e0:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00083e5:	8d 76 00             	lea    esi,[esi+0x0]
c00083e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00083ec:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00083ef:	0f b6 c0             	movzx  eax,al
c00083f2:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c00083f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00083fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00083fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008402:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008407:	85 c0                	test   eax,eax
c0008409:	74 0d                	je     c0008418 <pbuf_header+0xc0>
c000840b:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008410:	83 f8 03             	cmp    eax,0x3
c0008413:	75 3f                	jne    c0008454 <pbuf_header+0xfc>
c0008415:	8d 76 00             	lea    esi,[esi+0x0]
c0008418:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000841c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000841f:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c0008424:	f7 da                	neg    edx
c0008426:	01 c2                	add    edx,eax
c0008428:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000842c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000842f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008433:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008436:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000843a:	83 c2 10             	add    edx,0x10
c000843d:	39 d0                	cmp    eax,edx
c000843f:	73 7f                	jae    c00084c0 <pbuf_header+0x168>
c0008441:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008445:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008449:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000844c:	b0 01                	mov    al,0x1
c000844e:	e9 9d 00 00 00       	jmp    c00084f0 <pbuf_header+0x198>
c0008453:	90                   	nop
c0008454:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008459:	83 f8 02             	cmp    eax,0x2
c000845c:	74 0a                	je     c0008468 <pbuf_header+0x110>
c000845e:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008463:	83 f8 01             	cmp    eax,0x1
c0008466:	75 3c                	jne    c00084a4 <pbuf_header+0x14c>
c0008468:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c000846d:	85 c0                	test   eax,eax
c000846f:	79 2f                	jns    c00084a0 <pbuf_header+0x148>
c0008471:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008475:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008479:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000847e:	0f b7 c0             	movzx  eax,ax
c0008481:	39 c2                	cmp    edx,eax
c0008483:	77 1b                	ja     c00084a0 <pbuf_header+0x148>
c0008485:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008489:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000848c:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c0008491:	f7 da                	neg    edx
c0008493:	01 c2                	add    edx,eax
c0008495:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008499:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000849c:	eb 22                	jmp    c00084c0 <pbuf_header+0x168>
c000849e:	66 90                	xchg   ax,ax
c00084a0:	b0 01                	mov    al,0x1
c00084a2:	eb 4c                	jmp    c00084f0 <pbuf_header+0x198>
c00084a4:	83 ec 08             	sub    esp,0x8
c00084a7:	68 25 05 03 c0       	push   0xc0030525
c00084ac:	68 86 01 03 c0       	push   0xc0030186
c00084b1:	e8 22 7a 01 00       	call   c001fed8 <CPrintf>
c00084b6:	83 c4 10             	add    esp,0x10
c00084b9:	b0 01                	mov    al,0x1
c00084bb:	eb 33                	jmp    c00084f0 <pbuf_header+0x198>
c00084bd:	8d 76 00             	lea    esi,[esi+0x0]
c00084c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00084c4:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00084c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084cc:	01 d0                	add    eax,edx
c00084ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084d2:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00084d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00084da:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00084dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084e1:	01 d0                	add    eax,edx
c00084e3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084e7:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c00084eb:	b0 00                	mov    al,0x0
c00084ed:	8d 76 00             	lea    esi,[esi+0x0]
c00084f0:	83 c4 2c             	add    esp,0x2c
c00084f3:	c3                   	ret    

c00084f4 <pbuf_free>:
c00084f4:	83 ec 1c             	sub    esp,0x1c
c00084f7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00084fc:	75 26                	jne    c0008524 <pbuf_free+0x30>
c00084fe:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008503:	75 17                	jne    c000851c <pbuf_free+0x28>
c0008505:	83 ec 08             	sub    esp,0x8
c0008508:	68 b6 05 03 c0       	push   0xc00305b6
c000850d:	68 86 01 03 c0       	push   0xc0030186
c0008512:	e8 c1 79 01 00       	call   c001fed8 <CPrintf>
c0008517:	83 c4 10             	add    esp,0x10
c000851a:	66 90                	xchg   ax,ax
c000851c:	b0 00                	mov    al,0x0
c000851e:	e9 a5 01 00 00       	jmp    c00086c8 <pbuf_free+0x1d4>
c0008523:	90                   	nop
c0008524:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008528:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000852b:	0f b6 c0             	movzx  eax,al
c000852e:	85 c0                	test   eax,eax
c0008530:	74 42                	je     c0008574 <pbuf_free+0x80>
c0008532:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008536:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008539:	0f b6 c0             	movzx  eax,al
c000853c:	83 f8 01             	cmp    eax,0x1
c000853f:	74 33                	je     c0008574 <pbuf_free+0x80>
c0008541:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008545:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008548:	0f b6 c0             	movzx  eax,al
c000854b:	83 f8 02             	cmp    eax,0x2
c000854e:	74 24                	je     c0008574 <pbuf_free+0x80>
c0008550:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008554:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008557:	0f b6 c0             	movzx  eax,al
c000855a:	83 f8 03             	cmp    eax,0x3
c000855d:	74 15                	je     c0008574 <pbuf_free+0x80>
c000855f:	83 ec 08             	sub    esp,0x8
c0008562:	68 33 05 03 c0       	push   0xc0030533
c0008567:	68 86 01 03 c0       	push   0xc0030186
c000856c:	e8 67 79 01 00       	call   c001fed8 <CPrintf>
c0008571:	83 c4 10             	add    esp,0x10
c0008574:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008579:	e9 3a 01 00 00       	jmp    c00086b8 <pbuf_free+0x1c4>
c000857e:	66 90                	xchg   ax,ax
c0008580:	e8 43 79 01 00       	call   c001fec8 <CLockScheduler>
c0008585:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008589:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000858d:	0f b7 c0             	movzx  eax,ax
c0008590:	85 c0                	test   eax,eax
c0008592:	75 18                	jne    c00085ac <pbuf_free+0xb8>
c0008594:	83 ec 08             	sub    esp,0x8
c0008597:	68 48 05 03 c0       	push   0xc0030548
c000859c:	68 86 01 03 c0       	push   0xc0030186
c00085a1:	e8 32 79 01 00       	call   c001fed8 <CPrintf>
c00085a6:	83 c4 10             	add    esp,0x10
c00085a9:	8d 76 00             	lea    esi,[esi+0x0]
c00085ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085b0:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00085b4:	83 e8 01             	sub    eax,0x1
c00085b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00085bb:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c00085bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085c3:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00085c7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00085cc:	e8 db 78 01 00       	call   c001feac <CUnlockScheduler>
c00085d1:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00085d6:	85 c0                	test   eax,eax
c00085d8:	0f 85 d2 00 00 00    	jne    c00086b0 <pbuf_free+0x1bc>
c00085de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00085e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085ec:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00085ef:	0f b6 c0             	movzx  eax,al
c00085f2:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085fb:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00085fe:	0f b6 c0             	movzx  eax,al
c0008601:	83 e0 02             	and    eax,0x2
c0008604:	74 3a                	je     c0008640 <pbuf_free+0x14c>
c0008606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000860a:	89 04 24             	mov    DWORD PTR [esp],eax
c000860d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008610:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008613:	85 c0                	test   eax,eax
c0008615:	75 15                	jne    c000862c <pbuf_free+0x138>
c0008617:	83 ec 08             	sub    esp,0x8
c000861a:	68 50 03 03 c0       	push   0xc0030350
c000861f:	68 86 01 03 c0       	push   0xc0030186
c0008624:	e8 af 78 01 00       	call   c001fed8 <CPrintf>
c0008629:	83 c4 10             	add    esp,0x10
c000862c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000862f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008632:	83 ec 0c             	sub    esp,0xc
c0008635:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008639:	ff d0                	call   eax
c000863b:	83 c4 10             	add    esp,0x10
c000863e:	eb 58                	jmp    c0008698 <pbuf_free+0x1a4>
c0008640:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008645:	83 f8 03             	cmp    eax,0x3
c0008648:	75 16                	jne    c0008660 <pbuf_free+0x16c>
c000864a:	83 ec 08             	sub    esp,0x8
c000864d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008651:	6a 0d                	push   0xd
c0008653:	e8 e0 f5 ff ff       	call   c0007c38 <memp_free>
c0008658:	83 c4 10             	add    esp,0x10
c000865b:	eb 3b                	jmp    c0008698 <pbuf_free+0x1a4>
c000865d:	8d 76 00             	lea    esi,[esi+0x0]
c0008660:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008665:	83 f8 01             	cmp    eax,0x1
c0008668:	74 0a                	je     c0008674 <pbuf_free+0x180>
c000866a:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000866f:	83 f8 02             	cmp    eax,0x2
c0008672:	75 14                	jne    c0008688 <pbuf_free+0x194>
c0008674:	83 ec 08             	sub    esp,0x8
c0008677:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000867b:	6a 0c                	push   0xc
c000867d:	e8 b6 f5 ff ff       	call   c0007c38 <memp_free>
c0008682:	83 c4 10             	add    esp,0x10
c0008685:	eb 11                	jmp    c0008698 <pbuf_free+0x1a4>
c0008687:	90                   	nop
c0008688:	83 ec 0c             	sub    esp,0xc
c000868b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000868f:	e8 80 eb ff ff       	call   c0007214 <mem_free>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	90                   	nop
c0008698:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000869c:	83 c0 01             	add    eax,0x1
c000869f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00086a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00086a7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086ab:	eb 0b                	jmp    c00086b8 <pbuf_free+0x1c4>
c00086ad:	8d 76 00             	lea    esi,[esi+0x0]
c00086b0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00086b8:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00086bd:	0f 85 bd fe ff ff    	jne    c0008580 <pbuf_free+0x8c>
c00086c3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00086c7:	90                   	nop
c00086c8:	83 c4 1c             	add    esp,0x1c
c00086cb:	c3                   	ret    

c00086cc <pbuf_alloc>:
c00086cc:	83 ec 3c             	sub    esp,0x3c
c00086cf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00086d3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00086d8:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c00086df:	83 7c 24 40 01       	cmp    DWORD PTR [esp+0x40],0x1
c00086e4:	74 2a                	je     c0008710 <pbuf_alloc+0x44>
c00086e6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00086eb:	74 13                	je     c0008700 <pbuf_alloc+0x34>
c00086ed:	83 7c 24 40 02       	cmp    DWORD PTR [esp+0x40],0x2
c00086f2:	74 2c                	je     c0008720 <pbuf_alloc+0x54>
c00086f4:	83 7c 24 40 03       	cmp    DWORD PTR [esp+0x40],0x3
c00086f9:	74 55                	je     c0008750 <pbuf_alloc+0x84>
c00086fb:	eb 33                	jmp    c0008730 <pbuf_alloc+0x64>
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]
c0008700:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008705:	83 c0 14             	add    eax,0x14
c0008708:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000870d:	8d 76 00             	lea    esi,[esi+0x0]
c0008710:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008715:	83 c0 14             	add    eax,0x14
c0008718:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000871d:	8d 76 00             	lea    esi,[esi+0x0]
c0008720:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008725:	83 c0 0e             	add    eax,0xe
c0008728:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000872d:	eb 25                	jmp    c0008754 <pbuf_alloc+0x88>
c000872f:	90                   	nop
c0008730:	83 ec 08             	sub    esp,0x8
c0008733:	68 5e 05 03 c0       	push   0xc003055e
c0008738:	68 86 01 03 c0       	push   0xc0030186
c000873d:	e8 96 77 01 00       	call   c001fed8 <CPrintf>
c0008742:	83 c4 10             	add    esp,0x10
c0008745:	b8 00 00 00 00       	mov    eax,0x0
c000874a:	e9 71 03 00 00       	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c000874f:	90                   	nop
c0008750:	90                   	nop
c0008751:	8d 76 00             	lea    esi,[esi+0x0]
c0008754:	83 7c 24 48 02       	cmp    DWORD PTR [esp+0x48],0x2
c0008759:	77 11                	ja     c000876c <pbuf_alloc+0xa0>
c000875b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0008760:	0f 85 c6 02 00 00    	jne    c0008a2c <pbuf_alloc+0x360>
c0008766:	e9 41 02 00 00       	jmp    c00089ac <pbuf_alloc+0x2e0>
c000876b:	90                   	nop
c000876c:	83 7c 24 48 03       	cmp    DWORD PTR [esp+0x48],0x3
c0008771:	0f 85 15 03 00 00    	jne    c0008a8c <pbuf_alloc+0x3c0>
c0008777:	83 ec 0c             	sub    esp,0xc
c000877a:	6a 0d                	push   0xd
c000877c:	e8 8b f3 ff ff       	call   c0007b0c <memp_malloc>
c0008781:	83 c4 10             	add    esp,0x10
c0008784:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008788:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000878d:	75 11                	jne    c00087a0 <pbuf_alloc+0xd4>
c000878f:	e8 44 fa ff ff       	call   c00081d8 <pbuf_pool_is_empty>
c0008794:	b8 00 00 00 00       	mov    eax,0x0
c0008799:	e9 22 03 00 00       	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c000879e:	66 90                	xchg   ax,ax
c00087a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00087a4:	88 c2                	mov    dl,al
c00087a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087aa:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00087ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00087b7:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00087bc:	8d 50 10             	lea    edx,[eax+0x10]
c00087bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087c3:	01 c2                	add    edx,eax
c00087c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087c9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00087cc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00087d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d4:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c00087d8:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00087dd:	ba 4e 02 00 00       	mov    edx,0x24e
c00087e2:	29 c2                	sub    edx,eax
c00087e4:	89 d0                	mov    eax,edx
c00087e6:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00087eb:	39 d0                	cmp    eax,edx
c00087ed:	7e 05                	jle    c00087f4 <pbuf_alloc+0x128>
c00087ef:	89 d0                	mov    eax,edx
c00087f1:	8d 76 00             	lea    esi,[esi+0x0]
c00087f4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00087f8:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00087fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008800:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008803:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008807:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000880b:	0f b7 c0             	movzx  eax,ax
c000880e:	01 c2                	add    edx,eax
c0008810:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008814:	05 5e 02 00 00       	add    eax,0x25e
c0008819:	39 c2                	cmp    edx,eax
c000881b:	76 17                	jbe    c0008834 <pbuf_alloc+0x168>
c000881d:	83 ec 08             	sub    esp,0x8
c0008820:	68 74 03 03 c0       	push   0xc0030374
c0008825:	68 86 01 03 c0       	push   0xc0030186
c000882a:	e8 a9 76 01 00       	call   c001fed8 <CPrintf>
c000882f:	83 c4 10             	add    esp,0x10
c0008832:	66 90                	xchg   ax,ax
c0008834:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008839:	ba 4e 02 00 00       	mov    edx,0x24e
c000883e:	29 c2                	sub    edx,eax
c0008840:	89 d0                	mov    eax,edx
c0008842:	85 c0                	test   eax,eax
c0008844:	7f 16                	jg     c000885c <pbuf_alloc+0x190>
c0008846:	83 ec 08             	sub    esp,0x8
c0008849:	68 a8 03 03 c0       	push   0xc00303a8
c000884e:	68 86 01 03 c0       	push   0xc0030186
c0008853:	e8 80 76 01 00       	call   c001fed8 <CPrintf>
c0008858:	83 c4 10             	add    esp,0x10
c000885b:	90                   	nop
c000885c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008860:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008866:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000886a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000886e:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008873:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008877:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000887b:	0f b7 c0             	movzx  eax,ax
c000887e:	29 c2                	sub    edx,eax
c0008880:	89 d0                	mov    eax,edx
c0008882:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008886:	e9 11 01 00 00       	jmp    c000899c <pbuf_alloc+0x2d0>
c000888b:	90                   	nop
c000888c:	83 ec 0c             	sub    esp,0xc
c000888f:	6a 0d                	push   0xd
c0008891:	e8 76 f2 ff ff       	call   c0007b0c <memp_malloc>
c0008896:	83 c4 10             	add    esp,0x10
c0008899:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000889d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00088a2:	75 20                	jne    c00088c4 <pbuf_alloc+0x1f8>
c00088a4:	e8 2f f9 ff ff       	call   c00081d8 <pbuf_pool_is_empty>
c00088a9:	83 ec 0c             	sub    esp,0xc
c00088ac:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00088b0:	e8 3f fc ff ff       	call   c00084f4 <pbuf_free>
c00088b5:	83 c4 10             	add    esp,0x10
c00088b8:	b8 00 00 00 00       	mov    eax,0x0
c00088bd:	e9 fe 01 00 00       	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c00088c2:	66 90                	xchg   ax,ax
c00088c4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00088c8:	88 c2                	mov    dl,al
c00088ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088ce:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00088d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088d5:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c00088d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00088e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00088e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00088eb:	89 10                	mov    DWORD PTR [eax],edx
c00088ed:	81 7c 24 20 fe ff 00 00 	cmp    DWORD PTR [esp+0x20],0xfffe
c00088f5:	7e 15                	jle    c000890c <pbuf_alloc+0x240>
c00088f7:	83 ec 08             	sub    esp,0x8
c00088fa:	68 79 05 03 c0       	push   0xc0030579
c00088ff:	68 86 01 03 c0       	push   0xc0030186
c0008904:	e8 cf 75 01 00       	call   c001fed8 <CPrintf>
c0008909:	83 c4 10             	add    esp,0x10
c000890c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008910:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008914:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000891c:	0f b7 d0             	movzx  edx,ax
c000891f:	81 fa 4e 02 00 00    	cmp    edx,0x24e
c0008925:	76 05                	jbe    c000892c <pbuf_alloc+0x260>
c0008927:	b8 4e 02 00 00       	mov    eax,0x24e
c000892c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008930:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008934:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008938:	8d 50 10             	lea    edx,[eax+0x10]
c000893b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000893f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008946:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008949:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000894d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008951:	0f b7 c0             	movzx  eax,ax
c0008954:	01 c2                	add    edx,eax
c0008956:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000895a:	05 5e 02 00 00       	add    eax,0x25e
c000895f:	39 c2                	cmp    edx,eax
c0008961:	76 15                	jbe    c0008978 <pbuf_alloc+0x2ac>
c0008963:	83 ec 08             	sub    esp,0x8
c0008966:	68 74 03 03 c0       	push   0xc0030374
c000896b:	68 86 01 03 c0       	push   0xc0030186
c0008970:	e8 63 75 01 00       	call   c001fed8 <CPrintf>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000897c:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008982:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008986:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000898a:	0f b7 c0             	movzx  eax,ax
c000898d:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c0008991:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008995:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0008999:	8d 76 00             	lea    esi,[esi+0x0]
c000899c:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00089a1:	0f 8f e5 fe ff ff    	jg     c000888c <pbuf_alloc+0x1c0>
c00089a7:	e9 fc 00 00 00       	jmp    c0008aa8 <pbuf_alloc+0x3dc>
c00089ac:	66 8b 54 24 26       	mov    dx,WORD PTR [esp+0x26]
c00089b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00089b5:	01 d0                	add    eax,edx
c00089b7:	83 c0 10             	add    eax,0x10
c00089ba:	0f b7 c0             	movzx  eax,ax
c00089bd:	83 ec 0c             	sub    esp,0xc
c00089c0:	50                   	push   eax
c00089c1:	e8 82 ec ff ff       	call   c0007648 <mem_malloc>
c00089c6:	83 c4 10             	add    esp,0x10
c00089c9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00089cd:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00089d2:	75 0c                	jne    c00089e0 <pbuf_alloc+0x314>
c00089d4:	b8 00 00 00 00       	mov    eax,0x0
c00089d9:	e9 e2 00 00 00       	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c00089de:	66 90                	xchg   ax,ax
c00089e0:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00089e5:	8d 50 10             	lea    edx,[eax+0x10]
c00089e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00089ec:	01 c2                	add    edx,eax
c00089ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00089f2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00089f5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00089f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00089fd:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008a01:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a05:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008a08:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008a0c:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008a10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a1a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008a1e:	88 c2                	mov    dl,al
c0008a20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a24:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008a27:	eb 7f                	jmp    c0008aa8 <pbuf_alloc+0x3dc>
c0008a29:	8d 76 00             	lea    esi,[esi+0x0]
c0008a2c:	83 ec 0c             	sub    esp,0xc
c0008a2f:	6a 0c                	push   0xc
c0008a31:	e8 d6 f0 ff ff       	call   c0007b0c <memp_malloc>
c0008a36:	83 c4 10             	add    esp,0x10
c0008a39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008a3d:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0008a42:	75 08                	jne    c0008a4c <pbuf_alloc+0x380>
c0008a44:	b8 00 00 00 00       	mov    eax,0x0
c0008a49:	eb 75                	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c0008a4b:	90                   	nop
c0008a4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008a57:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008a5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a5f:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008a63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a67:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008a6a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008a6e:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008a72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a76:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a7c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008a80:	88 c2                	mov    dl,al
c0008a82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a86:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008a89:	eb 1d                	jmp    c0008aa8 <pbuf_alloc+0x3dc>
c0008a8b:	90                   	nop
c0008a8c:	83 ec 08             	sub    esp,0x8
c0008a8f:	68 8d 05 03 c0       	push   0xc003058d
c0008a94:	68 86 01 03 c0       	push   0xc0030186
c0008a99:	e8 3a 74 01 00       	call   c001fed8 <CPrintf>
c0008a9e:	83 c4 10             	add    esp,0x10
c0008aa1:	b8 00 00 00 00       	mov    eax,0x0
c0008aa6:	eb 18                	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c0008aa8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008aac:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008ab2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ab6:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c0008aba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008abe:	66 90                	xchg   ax,ax
c0008ac0:	83 c4 3c             	add    esp,0x3c
c0008ac3:	c3                   	ret    

c0008ac4 <pbuf_realloc>:
c0008ac4:	83 ec 2c             	sub    esp,0x2c
c0008ac7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008acb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008ad0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008ad5:	75 15                	jne    c0008aec <pbuf_realloc+0x28>
c0008ad7:	83 ec 08             	sub    esp,0x8
c0008ada:	68 a8 05 03 c0       	push   0xc00305a8
c0008adf:	68 86 01 03 c0       	push   0xc0030186
c0008ae4:	e8 ef 73 01 00       	call   c001fed8 <CPrintf>
c0008ae9:	83 c4 10             	add    esp,0x10
c0008aec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008af0:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008af3:	0f b6 c0             	movzx  eax,al
c0008af6:	83 f8 03             	cmp    eax,0x3
c0008af9:	74 41                	je     c0008b3c <pbuf_realloc+0x78>
c0008afb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008aff:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b02:	0f b6 c0             	movzx  eax,al
c0008b05:	83 f8 01             	cmp    eax,0x1
c0008b08:	74 32                	je     c0008b3c <pbuf_realloc+0x78>
c0008b0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0e:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b11:	0f b6 c0             	movzx  eax,al
c0008b14:	85 c0                	test   eax,eax
c0008b16:	74 24                	je     c0008b3c <pbuf_realloc+0x78>
c0008b18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b1c:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b1f:	0f b6 c0             	movzx  eax,al
c0008b22:	83 f8 02             	cmp    eax,0x2
c0008b25:	74 15                	je     c0008b3c <pbuf_realloc+0x78>
c0008b27:	83 ec 08             	sub    esp,0x8
c0008b2a:	68 c0 05 03 c0       	push   0xc00305c0
c0008b2f:	68 86 01 03 c0       	push   0xc0030186
c0008b34:	e8 9f 73 01 00       	call   c001fed8 <CPrintf>
c0008b39:	83 c4 10             	add    esp,0x10
c0008b3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b40:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008b43:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008b48:	0f b7 c0             	movzx  eax,ax
c0008b4b:	39 c2                	cmp    edx,eax
c0008b4d:	0f 83 6d 01 00 00    	jae    c0008cc0 <pbuf_realloc+0x1fc>
c0008b53:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008b58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008b5f:	0f b7 c0             	movzx  eax,ax
c0008b62:	29 c2                	sub    edx,eax
c0008b64:	89 d0                	mov    eax,edx
c0008b66:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008b6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b6e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008b73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b77:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b7b:	eb 77                	jmp    c0008bf4 <pbuf_realloc+0x130>
c0008b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0008b80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b84:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008b88:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0008b8d:	89 d1                	mov    ecx,edx
c0008b8f:	29 c1                	sub    ecx,eax
c0008b91:	89 c8                	mov    eax,ecx
c0008b93:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008b98:	81 7c 24 14 fe ff 00 00 	cmp    DWORD PTR [esp+0x14],0xfffe
c0008ba0:	7e 16                	jle    c0008bb8 <pbuf_realloc+0xf4>
c0008ba2:	83 ec 08             	sub    esp,0x8
c0008ba5:	68 db 05 03 c0       	push   0xc00305db
c0008baa:	68 86 01 03 c0       	push   0xc0030186
c0008baf:	e8 24 73 01 00       	call   c001fed8 <CPrintf>
c0008bb4:	83 c4 10             	add    esp,0x10
c0008bb7:	90                   	nop
c0008bb8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008bbf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008bc3:	01 d0                	add    eax,edx
c0008bc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008bc9:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008bcd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bd3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bd7:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008bdc:	75 16                	jne    c0008bf4 <pbuf_realloc+0x130>
c0008bde:	83 ec 08             	sub    esp,0x8
c0008be1:	68 ec 05 03 c0       	push   0xc00305ec
c0008be6:	68 86 01 03 c0       	push   0xc0030186
c0008beb:	e8 e8 72 01 00       	call   c001fed8 <CPrintf>
c0008bf0:	83 c4 10             	add    esp,0x10
c0008bf3:	90                   	nop
c0008bf4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bf8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008bfc:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008c01:	0f b7 c0             	movzx  eax,ax
c0008c04:	39 c2                	cmp    edx,eax
c0008c06:	0f 87 74 ff ff ff    	ja     c0008b80 <pbuf_realloc+0xbc>
c0008c0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c10:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008c13:	0f b6 c0             	movzx  eax,al
c0008c16:	85 c0                	test   eax,eax
c0008c18:	75 5e                	jne    c0008c78 <pbuf_realloc+0x1b4>
c0008c1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c1e:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c22:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008c27:	0f b7 c0             	movzx  eax,ax
c0008c2a:	39 c2                	cmp    edx,eax
c0008c2c:	74 4a                	je     c0008c78 <pbuf_realloc+0x1b4>
c0008c2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c35:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0008c39:	89 c2                	mov    edx,eax
c0008c3b:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0008c40:	01 d0                	add    eax,edx
c0008c42:	0f b7 c0             	movzx  eax,ax
c0008c45:	83 ec 08             	sub    esp,0x8
c0008c48:	50                   	push   eax
c0008c49:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008c4d:	e8 e6 e6 ff ff       	call   c0007338 <mem_trim>
c0008c52:	83 c4 10             	add    esp,0x10
c0008c55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008c59:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008c5e:	75 18                	jne    c0008c78 <pbuf_realloc+0x1b4>
c0008c60:	83 ec 08             	sub    esp,0x8
c0008c63:	68 04 06 03 c0       	push   0xc0030604
c0008c68:	68 86 01 03 c0       	push   0xc0030186
c0008c6d:	e8 66 72 01 00       	call   c001fed8 <CPrintf>
c0008c72:	83 c4 10             	add    esp,0x10
c0008c75:	8d 76 00             	lea    esi,[esi+0x0]
c0008c78:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008c7c:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0008c81:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008c85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c89:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c8d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008c91:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008c95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c99:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c9b:	85 c0                	test   eax,eax
c0008c9d:	74 15                	je     c0008cb4 <pbuf_realloc+0x1f0>
c0008c9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ca3:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ca5:	83 ec 0c             	sub    esp,0xc
c0008ca8:	50                   	push   eax
c0008ca9:	e8 46 f8 ff ff       	call   c00084f4 <pbuf_free>
c0008cae:	83 c4 10             	add    esp,0x10
c0008cb1:	8d 76 00             	lea    esi,[esi+0x0]
c0008cb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008cb8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008cbe:	eb 04                	jmp    c0008cc4 <pbuf_realloc+0x200>
c0008cc0:	90                   	nop
c0008cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0008cc4:	83 c4 2c             	add    esp,0x2c
c0008cc7:	c3                   	ret    

c0008cc8 <pbuf_clen>:
c0008cc8:	83 ec 10             	sub    esp,0x10
c0008ccb:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008cd0:	eb 1a                	jmp    c0008cec <pbuf_clen+0x24>
c0008cd2:	66 90                	xchg   ax,ax
c0008cd4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008cd8:	83 c0 01             	add    eax,0x1
c0008cdb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008cdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008ce3:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ce5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0008cec:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008cf1:	75 e1                	jne    c0008cd4 <pbuf_clen+0xc>
c0008cf3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008cf7:	83 c4 10             	add    esp,0x10
c0008cfa:	c3                   	ret    
c0008cfb:	90                   	nop

c0008cfc <pbuf_ref>:
c0008cfc:	83 ec 0c             	sub    esp,0xc
c0008cff:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0008d04:	74 1e                	je     c0008d24 <pbuf_ref+0x28>
c0008d06:	e8 bd 71 01 00       	call   c001fec8 <CLockScheduler>
c0008d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0f:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008d13:	83 c0 01             	add    eax,0x1
c0008d16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008d1a:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c0008d1e:	e8 89 71 01 00       	call   c001feac <CUnlockScheduler>
c0008d23:	90                   	nop
c0008d24:	90                   	nop
c0008d25:	83 c4 0c             	add    esp,0xc
c0008d28:	c3                   	ret    
c0008d29:	8d 76 00             	lea    esi,[esi+0x0]

c0008d2c <pbuf_cat>:
c0008d2c:	83 ec 1c             	sub    esp,0x1c
c0008d2f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008d34:	74 0a                	je     c0008d40 <pbuf_cat+0x14>
c0008d36:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008d3b:	75 1f                	jne    c0008d5c <pbuf_cat+0x30>
c0008d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0008d40:	83 ec 08             	sub    esp,0x8
c0008d43:	68 dc 03 03 c0       	push   0xc00303dc
c0008d48:	68 86 01 03 c0       	push   0xc0030186
c0008d4d:	e8 86 71 01 00       	call   c001fed8 <CPrintf>
c0008d52:	83 c4 10             	add    esp,0x10
c0008d55:	e9 ae 00 00 00       	jmp    c0008e08 <pbuf_cat+0xdc>
c0008d5a:	66 90                	xchg   ax,ax
c0008d5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008d64:	eb 26                	jmp    c0008d8c <pbuf_cat+0x60>
c0008d66:	66 90                	xchg   ax,ax
c0008d68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d6c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d73:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008d76:	01 d0                	add    eax,edx
c0008d78:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008d7c:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008d80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d84:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008d8a:	66 90                	xchg   ax,ax
c0008d8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d90:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d92:	85 c0                	test   eax,eax
c0008d94:	75 d2                	jne    c0008d68 <pbuf_cat+0x3c>
c0008d96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008da1:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008da5:	0f b7 d2             	movzx  edx,dx
c0008da8:	0f b7 c0             	movzx  eax,ax
c0008dab:	39 c2                	cmp    edx,eax
c0008dad:	74 15                	je     c0008dc4 <pbuf_cat+0x98>
c0008daf:	83 ec 08             	sub    esp,0x8
c0008db2:	68 14 04 03 c0       	push   0xc0030414
c0008db7:	68 86 01 03 c0       	push   0xc0030186
c0008dbc:	e8 17 71 01 00       	call   c001fed8 <CPrintf>
c0008dc1:	83 c4 10             	add    esp,0x10
c0008dc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008dc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0008dca:	85 c0                	test   eax,eax
c0008dcc:	74 16                	je     c0008de4 <pbuf_cat+0xb8>
c0008dce:	83 ec 08             	sub    esp,0x8
c0008dd1:	68 20 06 03 c0       	push   0xc0030620
c0008dd6:	68 86 01 03 c0       	push   0xc0030186
c0008ddb:	e8 f8 70 01 00       	call   c001fed8 <CPrintf>
c0008de0:	83 c4 10             	add    esp,0x10
c0008de3:	90                   	nop
c0008de4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008de8:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008deb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008def:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008df2:	01 d0                	add    eax,edx
c0008df4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008df8:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008dfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008e00:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e04:	89 10                	mov    DWORD PTR [eax],edx
c0008e06:	66 90                	xchg   ax,ax
c0008e08:	83 c4 1c             	add    esp,0x1c
c0008e0b:	c3                   	ret    

c0008e0c <pbuf_chain>:
c0008e0c:	83 ec 0c             	sub    esp,0xc
c0008e0f:	83 ec 08             	sub    esp,0x8
c0008e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e1a:	e8 0d ff ff ff       	call   c0008d2c <pbuf_cat>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	83 ec 0c             	sub    esp,0xc
c0008e25:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e29:	e8 ce fe ff ff       	call   c0008cfc <pbuf_ref>
c0008e2e:	83 c4 10             	add    esp,0x10
c0008e31:	90                   	nop
c0008e32:	83 c4 0c             	add    esp,0xc
c0008e35:	c3                   	ret    
c0008e36:	66 90                	xchg   ax,ax

c0008e38 <pbuf_dechain>:
c0008e38:	83 ec 1c             	sub    esp,0x1c
c0008e3b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0008e40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e44:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e4a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008e4f:	0f 84 8b 00 00 00    	je     c0008ee0 <pbuf_dechain+0xa8>
c0008e55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008e59:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e5c:	0f b7 d0             	movzx  edx,ax
c0008e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e63:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e66:	0f b7 c8             	movzx  ecx,ax
c0008e69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e6d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e71:	0f b7 c0             	movzx  eax,ax
c0008e74:	29 c1                	sub    ecx,eax
c0008e76:	89 c8                	mov    eax,ecx
c0008e78:	39 c2                	cmp    edx,eax
c0008e7a:	74 18                	je     c0008e94 <pbuf_dechain+0x5c>
c0008e7c:	83 ec 08             	sub    esp,0x8
c0008e7f:	68 44 04 03 c0       	push   0xc0030444
c0008e84:	68 86 01 03 c0       	push   0xc0030186
c0008e89:	e8 4a 70 01 00       	call   c001fed8 <CPrintf>
c0008e8e:	83 c4 10             	add    esp,0x10
c0008e91:	8d 76 00             	lea    esi,[esi+0x0]
c0008e94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008e9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e9f:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ea3:	89 d1                	mov    ecx,edx
c0008ea5:	29 c1                	sub    ecx,eax
c0008ea7:	89 c8                	mov    eax,ecx
c0008ea9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008ead:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008eb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008eb5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008ebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ebf:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ec3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008ec7:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008ecb:	83 ec 0c             	sub    esp,0xc
c0008ece:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed2:	e8 1d f6 ff ff       	call   c00084f4 <pbuf_free>
c0008ed7:	83 c4 10             	add    esp,0x10
c0008eda:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008ede:	66 90                	xchg   ax,ax
c0008ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ee4:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008ee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008eeb:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008eef:	0f b7 d2             	movzx  edx,dx
c0008ef2:	0f b7 c0             	movzx  eax,ax
c0008ef5:	39 c2                	cmp    edx,eax
c0008ef7:	74 17                	je     c0008f10 <pbuf_dechain+0xd8>
c0008ef9:	83 ec 08             	sub    esp,0x8
c0008efc:	68 30 06 03 c0       	push   0xc0030630
c0008f01:	68 86 01 03 c0       	push   0xc0030186
c0008f06:	e8 cd 6f 01 00       	call   c001fed8 <CPrintf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	66 90                	xchg   ax,ax
c0008f10:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0008f15:	85 c0                	test   eax,eax
c0008f17:	75 07                	jne    c0008f20 <pbuf_dechain+0xe8>
c0008f19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008f1d:	eb 09                	jmp    c0008f28 <pbuf_dechain+0xf0>
c0008f1f:	90                   	nop
c0008f20:	b8 00 00 00 00       	mov    eax,0x0
c0008f25:	8d 76 00             	lea    esi,[esi+0x0]
c0008f28:	83 c4 1c             	add    esp,0x1c
c0008f2b:	c3                   	ret    

c0008f2c <pbuf_copy>:
c0008f2c:	53                   	push   ebx
c0008f2d:	83 ec 18             	sub    esp,0x18
c0008f30:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008f37:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008f3e:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008f43:	74 1f                	je     c0008f64 <pbuf_copy+0x38>
c0008f45:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008f4a:	74 18                	je     c0008f64 <pbuf_copy+0x38>
c0008f4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f50:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008f53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f5a:	0f b7 d2             	movzx  edx,dx
c0008f5d:	0f b7 c0             	movzx  eax,ax
c0008f60:	39 c2                	cmp    edx,eax
c0008f62:	73 1c                	jae    c0008f80 <pbuf_copy+0x54>
c0008f64:	83 ec 08             	sub    esp,0x8
c0008f67:	68 68 04 03 c0       	push   0xc0030468
c0008f6c:	68 86 01 03 c0       	push   0xc0030186
c0008f71:	e8 62 6f 01 00       	call   c001fed8 <CPrintf>
c0008f76:	83 c4 10             	add    esp,0x10
c0008f79:	b0 f2                	mov    al,0xf2
c0008f7b:	e9 0c 02 00 00       	jmp    c000918c <pbuf_copy+0x260>
c0008f80:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008f85:	75 15                	jne    c0008f9c <pbuf_copy+0x70>
c0008f87:	83 ec 08             	sub    esp,0x8
c0008f8a:	68 45 06 03 c0       	push   0xc0030645
c0008f8f:	68 86 01 03 c0       	push   0xc0030186
c0008f94:	e8 3f 6f 01 00       	call   c001fed8 <CPrintf>
c0008f99:	83 c4 10             	add    esp,0x10
c0008f9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fa0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008fa4:	0f b7 d0             	movzx  edx,ax
c0008fa7:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0008fac:	89 d1                	mov    ecx,edx
c0008fae:	29 c1                	sub    ecx,eax
c0008fb0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008fb4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008fb8:	0f b7 d0             	movzx  edx,ax
c0008fbb:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008fc0:	29 c2                	sub    edx,eax
c0008fc2:	89 d0                	mov    eax,edx
c0008fc4:	39 c1                	cmp    ecx,eax
c0008fc6:	7c 1c                	jl     c0008fe4 <pbuf_copy+0xb8>
c0008fc8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008fcc:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008fd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008fd4:	89 d3                	mov    ebx,edx
c0008fd6:	29 c3                	sub    ebx,eax
c0008fd8:	89 d8                	mov    eax,ebx
c0008fda:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008fdf:	eb 1b                	jmp    c0008ffc <pbuf_copy+0xd0>
c0008fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0008fe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fe8:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008fec:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0008ff1:	89 d3                	mov    ebx,edx
c0008ff3:	29 c3                	sub    ebx,eax
c0008ff5:	89 d8                	mov    eax,ebx
c0008ff7:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008ffc:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0009001:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009005:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0009008:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000900d:	01 d1                	add    ecx,edx
c000900f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009013:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0009016:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000901b:	01 da                	add    edx,ebx
c000901d:	83 ec 04             	sub    esp,0x4
c0009020:	50                   	push   eax
c0009021:	51                   	push   ecx
c0009022:	52                   	push   edx
c0009023:	e8 52 73 ff ff       	call   c000037a <memcpy>
c0009028:	83 c4 10             	add    esp,0x10
c000902b:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0009030:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0009035:	01 d0                	add    eax,edx
c0009037:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000903c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009040:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0009045:	01 d0                	add    eax,edx
c0009047:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000904c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009050:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009054:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009059:	0f b7 c0             	movzx  eax,ax
c000905c:	39 c2                	cmp    edx,eax
c000905e:	76 18                	jbe    c0009078 <pbuf_copy+0x14c>
c0009060:	83 ec 08             	sub    esp,0x8
c0009063:	68 52 06 03 c0       	push   0xc0030652
c0009068:	68 86 01 03 c0       	push   0xc0030186
c000906d:	e8 66 6e 01 00       	call   c001fed8 <CPrintf>
c0009072:	83 c4 10             	add    esp,0x10
c0009075:	8d 76 00             	lea    esi,[esi+0x0]
c0009078:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000907c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009080:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009085:	0f b7 c0             	movzx  eax,ax
c0009088:	39 c2                	cmp    edx,eax
c000908a:	75 14                	jne    c00090a0 <pbuf_copy+0x174>
c000908c:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0009093:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009097:	8b 00                	mov    eax,DWORD PTR [eax]
c0009099:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000909d:	8d 76 00             	lea    esi,[esi+0x0]
c00090a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090a4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090a8:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00090ad:	0f b7 c0             	movzx  eax,ax
c00090b0:	39 c2                	cmp    edx,eax
c00090b2:	76 18                	jbe    c00090cc <pbuf_copy+0x1a0>
c00090b4:	83 ec 08             	sub    esp,0x8
c00090b7:	68 69 06 03 c0       	push   0xc0030669
c00090bc:	68 86 01 03 c0       	push   0xc0030186
c00090c1:	e8 12 6e 01 00       	call   c001fed8 <CPrintf>
c00090c6:	83 c4 10             	add    esp,0x10
c00090c9:	8d 76 00             	lea    esi,[esi+0x0]
c00090cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090d0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090d4:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00090d9:	0f b7 c0             	movzx  eax,ax
c00090dc:	39 c2                	cmp    edx,eax
c00090de:	72 14                	jb     c00090f4 <pbuf_copy+0x1c8>
c00090e0:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c00090e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00090ed:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00090f1:	8d 76 00             	lea    esi,[esi+0x0]
c00090f4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00090f9:	74 3d                	je     c0009138 <pbuf_copy+0x20c>
c00090fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090ff:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009103:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009107:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000910a:	0f b7 d2             	movzx  edx,dx
c000910d:	0f b7 c0             	movzx  eax,ax
c0009110:	39 c2                	cmp    edx,eax
c0009112:	75 24                	jne    c0009138 <pbuf_copy+0x20c>
c0009114:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009118:	8b 00                	mov    eax,DWORD PTR [eax]
c000911a:	85 c0                	test   eax,eax
c000911c:	74 1a                	je     c0009138 <pbuf_copy+0x20c>
c000911e:	83 ec 08             	sub    esp,0x8
c0009121:	68 98 04 03 c0       	push   0xc0030498
c0009126:	68 86 01 03 c0       	push   0xc0030186
c000912b:	e8 a8 6d 01 00       	call   c001fed8 <CPrintf>
c0009130:	83 c4 10             	add    esp,0x10
c0009133:	b0 fa                	mov    al,0xfa
c0009135:	eb 55                	jmp    c000918c <pbuf_copy+0x260>
c0009137:	90                   	nop
c0009138:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000913d:	74 3d                	je     c000917c <pbuf_copy+0x250>
c000913f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009143:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009147:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000914b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000914e:	0f b7 d2             	movzx  edx,dx
c0009151:	0f b7 c0             	movzx  eax,ax
c0009154:	39 c2                	cmp    edx,eax
c0009156:	75 24                	jne    c000917c <pbuf_copy+0x250>
c0009158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000915c:	8b 00                	mov    eax,DWORD PTR [eax]
c000915e:	85 c0                	test   eax,eax
c0009160:	74 1a                	je     c000917c <pbuf_copy+0x250>
c0009162:	83 ec 08             	sub    esp,0x8
c0009165:	68 98 04 03 c0       	push   0xc0030498
c000916a:	68 86 01 03 c0       	push   0xc0030186
c000916f:	e8 64 6d 01 00       	call   c001fed8 <CPrintf>
c0009174:	83 c4 10             	add    esp,0x10
c0009177:	b0 fa                	mov    al,0xfa
c0009179:	eb 11                	jmp    c000918c <pbuf_copy+0x260>
c000917b:	90                   	nop
c000917c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0009181:	0f 85 f9 fd ff ff    	jne    c0008f80 <pbuf_copy+0x54>
c0009187:	b0 00                	mov    al,0x0
c0009189:	8d 76 00             	lea    esi,[esi+0x0]
c000918c:	83 c4 18             	add    esp,0x18
c000918f:	5b                   	pop    ebx
c0009190:	c3                   	ret    
c0009191:	8d 76 00             	lea    esi,[esi+0x0]

c0009194 <pbuf_copy_partial>:
c0009194:	53                   	push   ebx
c0009195:	83 ec 28             	sub    esp,0x28
c0009198:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000919c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00091a0:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00091a5:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00091aa:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00091b1:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00091b6:	75 20                	jne    c00091d8 <pbuf_copy_partial+0x44>
c00091b8:	83 ec 08             	sub    esp,0x8
c00091bb:	68 c4 04 03 c0       	push   0xc00304c4
c00091c0:	68 86 01 03 c0       	push   0xc0030186
c00091c5:	e8 0e 6d 01 00       	call   c001fed8 <CPrintf>
c00091ca:	83 c4 10             	add    esp,0x10
c00091cd:	b8 00 00 00 00       	mov    eax,0x0
c00091d2:	e9 59 01 00 00       	jmp    c0009330 <pbuf_copy_partial+0x19c>
c00091d7:	90                   	nop
c00091d8:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00091dd:	75 21                	jne    c0009200 <pbuf_copy_partial+0x6c>
c00091df:	83 ec 08             	sub    esp,0x8
c00091e2:	68 e4 04 03 c0       	push   0xc00304e4
c00091e7:	68 86 01 03 c0       	push   0xc0030186
c00091ec:	e8 e7 6c 01 00       	call   c001fed8 <CPrintf>
c00091f1:	83 c4 10             	add    esp,0x10
c00091f4:	b8 00 00 00 00       	mov    eax,0x0
c00091f9:	e9 32 01 00 00       	jmp    c0009330 <pbuf_copy_partial+0x19c>
c00091fe:	66 90                	xchg   ax,ax
c0009200:	66 c7 44 24 1a 00 00 	mov    WORD PTR [esp+0x1a],0x0
c0009207:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000920c:	74 0a                	je     c0009218 <pbuf_copy_partial+0x84>
c000920e:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009213:	75 0f                	jne    c0009224 <pbuf_copy_partial+0x90>
c0009215:	8d 76 00             	lea    esi,[esi+0x0]
c0009218:	b8 00 00 00 00       	mov    eax,0x0
c000921d:	e9 0e 01 00 00       	jmp    c0009330 <pbuf_copy_partial+0x19c>
c0009222:	66 90                	xchg   ax,ax
c0009224:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009228:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000922c:	e9 e3 00 00 00       	jmp    c0009314 <pbuf_copy_partial+0x180>
c0009231:	8d 76 00             	lea    esi,[esi+0x0]
c0009234:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0009239:	85 c0                	test   eax,eax
c000923b:	74 33                	je     c0009270 <pbuf_copy_partial+0xdc>
c000923d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009241:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009245:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000924a:	0f b7 c0             	movzx  eax,ax
c000924d:	39 c2                	cmp    edx,eax
c000924f:	72 1f                	jb     c0009270 <pbuf_copy_partial+0xdc>
c0009251:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009255:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009259:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000925d:	89 d3                	mov    ebx,edx
c000925f:	29 c3                	sub    ebx,eax
c0009261:	89 d8                	mov    eax,ebx
c0009263:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0009268:	e9 9b 00 00 00       	jmp    c0009308 <pbuf_copy_partial+0x174>
c000926d:	8d 76 00             	lea    esi,[esi+0x0]
c0009270:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009274:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009278:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000927c:	89 d1                	mov    ecx,edx
c000927e:	29 c1                	sub    ecx,eax
c0009280:	89 c8                	mov    eax,ecx
c0009282:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009287:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000928c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009291:	39 c2                	cmp    edx,eax
c0009293:	76 0b                	jbe    c00092a0 <pbuf_copy_partial+0x10c>
c0009295:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009299:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000929e:	66 90                	xchg   ax,ax
c00092a0:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00092a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00092a9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00092ac:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00092b1:	01 d1                	add    ecx,edx
c00092b3:	0f b7 5c 24 1a       	movzx  ebx,WORD PTR [esp+0x1a]
c00092b8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00092bc:	01 da                	add    edx,ebx
c00092be:	83 ec 04             	sub    esp,0x4
c00092c1:	50                   	push   eax
c00092c2:	51                   	push   ecx
c00092c3:	52                   	push   edx
c00092c4:	e8 b1 70 ff ff       	call   c000037a <memcpy>
c00092c9:	83 c4 10             	add    esp,0x10
c00092cc:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00092d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00092d5:	01 d0                	add    eax,edx
c00092d7:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00092dc:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00092e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00092e5:	01 d0                	add    eax,edx
c00092e7:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00092ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00092f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00092f4:	89 d3                	mov    ebx,edx
c00092f6:	29 c3                	sub    ebx,eax
c00092f8:	89 d8                	mov    eax,ebx
c00092fa:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00092ff:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0009306:	66 90                	xchg   ax,ax
c0009308:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930c:	8b 00                	mov    eax,DWORD PTR [eax]
c000930e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009312:	66 90                	xchg   ax,ax
c0009314:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009319:	85 c0                	test   eax,eax
c000931b:	74 0b                	je     c0009328 <pbuf_copy_partial+0x194>
c000931d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009322:	0f 85 0c ff ff ff    	jne    c0009234 <pbuf_copy_partial+0xa0>
c0009328:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000932d:	8d 76 00             	lea    esi,[esi+0x0]
c0009330:	83 c4 28             	add    esp,0x28
c0009333:	5b                   	pop    ebx
c0009334:	c3                   	ret    
c0009335:	8d 76 00             	lea    esi,[esi+0x0]

c0009338 <pbuf_take>:
c0009338:	83 ec 2c             	sub    esp,0x2c
c000933b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000933f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009344:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009348:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000934d:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0009354:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009359:	75 1d                	jne    c0009378 <pbuf_take+0x40>
c000935b:	83 ec 08             	sub    esp,0x8
c000935e:	68 84 06 03 c0       	push   0xc0030684
c0009363:	68 86 01 03 c0       	push   0xc0030186
c0009368:	e8 6b 6b 01 00       	call   c001fed8 <CPrintf>
c000936d:	83 c4 10             	add    esp,0x10
c0009370:	b0 00                	mov    al,0x0
c0009372:	e9 3d 01 00 00       	jmp    c00094b4 <pbuf_take+0x17c>
c0009377:	90                   	nop
c0009378:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000937d:	75 1d                	jne    c000939c <pbuf_take+0x64>
c000937f:	83 ec 08             	sub    esp,0x8
c0009382:	68 9b 06 03 c0       	push   0xc003069b
c0009387:	68 86 01 03 c0       	push   0xc0030186
c000938c:	e8 47 6b 01 00       	call   c001fed8 <CPrintf>
c0009391:	83 c4 10             	add    esp,0x10
c0009394:	b0 00                	mov    al,0x0
c0009396:	e9 19 01 00 00       	jmp    c00094b4 <pbuf_take+0x17c>
c000939b:	90                   	nop
c000939c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00093a1:	74 1d                	je     c00093c0 <pbuf_take+0x88>
c00093a3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00093a8:	74 16                	je     c00093c0 <pbuf_take+0x88>
c00093aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00093b1:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00093b6:	0f b7 c0             	movzx  eax,ax
c00093b9:	39 c2                	cmp    edx,eax
c00093bb:	76 0b                	jbe    c00093c8 <pbuf_take+0x90>
c00093bd:	8d 76 00             	lea    esi,[esi+0x0]
c00093c0:	b0 f2                	mov    al,0xf2
c00093c2:	e9 ed 00 00 00       	jmp    c00094b4 <pbuf_take+0x17c>
c00093c7:	90                   	nop
c00093c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00093d0:	e9 9f 00 00 00       	jmp    c0009474 <pbuf_take+0x13c>
c00093d5:	8d 76 00             	lea    esi,[esi+0x0]
c00093d8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00093dd:	75 15                	jne    c00093f4 <pbuf_take+0xbc>
c00093df:	83 ec 08             	sub    esp,0x8
c00093e2:	68 b6 06 03 c0       	push   0xc00306b6
c00093e7:	68 86 01 03 c0       	push   0xc0030186
c00093ec:	e8 e7 6a 01 00       	call   c001fed8 <CPrintf>
c00093f1:	83 c4 10             	add    esp,0x10
c00093f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00093f8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00093fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009401:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009405:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c000940a:	0f b7 c0             	movzx  eax,ax
c000940d:	39 c2                	cmp    edx,eax
c000940f:	76 0f                	jbe    c0009420 <pbuf_take+0xe8>
c0009411:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009415:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009419:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000941e:	66 90                	xchg   ax,ax
c0009420:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0009425:	0f b7 4c 24 16       	movzx  ecx,WORD PTR [esp+0x16]
c000942a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000942e:	01 c1                	add    ecx,eax
c0009430:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009434:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009437:	83 ec 04             	sub    esp,0x4
c000943a:	52                   	push   edx
c000943b:	51                   	push   ecx
c000943c:	50                   	push   eax
c000943d:	e8 38 6f ff ff       	call   c000037a <memcpy>
c0009442:	83 c4 10             	add    esp,0x10
c0009445:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009449:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000944e:	89 d1                	mov    ecx,edx
c0009450:	29 c1                	sub    ecx,eax
c0009452:	89 c8                	mov    eax,ecx
c0009454:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009459:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000945e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0009463:	01 d0                	add    eax,edx
c0009465:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000946a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000946e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009470:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009474:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009479:	85 c0                	test   eax,eax
c000947b:	0f 85 57 ff ff ff    	jne    c00093d8 <pbuf_take+0xa0>
c0009481:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009486:	85 c0                	test   eax,eax
c0009488:	75 0e                	jne    c0009498 <pbuf_take+0x160>
c000948a:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c000948f:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009494:	39 c2                	cmp    edx,eax
c0009496:	74 18                	je     c00094b0 <pbuf_take+0x178>
c0009498:	83 ec 08             	sub    esp,0x8
c000949b:	68 ce 06 03 c0       	push   0xc00306ce
c00094a0:	68 86 01 03 c0       	push   0xc0030186
c00094a5:	e8 2e 6a 01 00       	call   c001fed8 <CPrintf>
c00094aa:	83 c4 10             	add    esp,0x10
c00094ad:	8d 76 00             	lea    esi,[esi+0x0]
c00094b0:	b0 00                	mov    al,0x0
c00094b2:	66 90                	xchg   ax,ax
c00094b4:	83 c4 2c             	add    esp,0x2c
c00094b7:	c3                   	ret    

c00094b8 <pbuf_coalesce>:
c00094b8:	83 ec 1c             	sub    esp,0x1c
c00094bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 07                	jne    c00094cc <pbuf_coalesce+0x14>
c00094c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094c9:	eb 7d                	jmp    c0009548 <pbuf_coalesce+0x90>
c00094cb:	90                   	nop
c00094cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00094d3:	0f b7 c0             	movzx  eax,ax
c00094d6:	83 ec 04             	sub    esp,0x4
c00094d9:	6a 00                	push   0x0
c00094db:	50                   	push   eax
c00094dc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00094e0:	e8 e7 f1 ff ff       	call   c00086cc <pbuf_alloc>
c00094e5:	83 c4 10             	add    esp,0x10
c00094e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00094ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00094f1:	75 09                	jne    c00094fc <pbuf_coalesce+0x44>
c00094f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094f7:	eb 4f                	jmp    c0009548 <pbuf_coalesce+0x90>
c00094f9:	8d 76 00             	lea    esi,[esi+0x0]
c00094fc:	83 ec 08             	sub    esp,0x8
c00094ff:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009503:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009507:	e8 20 fa ff ff       	call   c0008f2c <pbuf_copy>
c000950c:	83 c4 10             	add    esp,0x10
c000950f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009513:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c0009518:	85 c0                	test   eax,eax
c000951a:	74 18                	je     c0009534 <pbuf_coalesce+0x7c>
c000951c:	83 ec 08             	sub    esp,0x8
c000951f:	68 e4 06 03 c0       	push   0xc00306e4
c0009524:	68 86 01 03 c0       	push   0xc0030186
c0009529:	e8 aa 69 01 00       	call   c001fed8 <CPrintf>
c000952e:	83 c4 10             	add    esp,0x10
c0009531:	8d 76 00             	lea    esi,[esi+0x0]
c0009534:	83 ec 0c             	sub    esp,0xc
c0009537:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000953b:	e8 b4 ef ff ff       	call   c00084f4 <pbuf_free>
c0009540:	83 c4 10             	add    esp,0x10
c0009543:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009547:	90                   	nop
c0009548:	83 c4 1c             	add    esp,0x1c
c000954b:	c3                   	ret    

c000954c <pbuf_get_at>:
c000954c:	83 ec 14             	sub    esp,0x14
c000954f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009553:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009557:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000955a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000955f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009563:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009567:	eb 27                	jmp    c0009590 <pbuf_get_at+0x44>
c0009569:	8d 76 00             	lea    esi,[esi+0x0]
c000956c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009570:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009574:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0009579:	89 d1                	mov    ecx,edx
c000957b:	29 c1                	sub    ecx,eax
c000957d:	89 c8                	mov    eax,ecx
c000957f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0009584:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009588:	8b 00                	mov    eax,DWORD PTR [eax]
c000958a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000958e:	66 90                	xchg   ax,ax
c0009590:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009595:	74 15                	je     c00095ac <pbuf_get_at+0x60>
c0009597:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000959b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000959f:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c00095a4:	0f b7 c0             	movzx  eax,ax
c00095a7:	39 c2                	cmp    edx,eax
c00095a9:	73 c1                	jae    c000956c <pbuf_get_at+0x20>
c00095ab:	90                   	nop
c00095ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00095b1:	74 29                	je     c00095dc <pbuf_get_at+0x90>
c00095b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095b7:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00095bb:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c00095c0:	0f b7 c0             	movzx  eax,ax
c00095c3:	39 c2                	cmp    edx,eax
c00095c5:	73 15                	jae    c00095dc <pbuf_get_at+0x90>
c00095c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095cb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00095ce:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00095d3:	01 d0                	add    eax,edx
c00095d5:	8a 00                	mov    al,BYTE PTR [eax]
c00095d7:	eb 07                	jmp    c00095e0 <pbuf_get_at+0x94>
c00095d9:	8d 76 00             	lea    esi,[esi+0x0]
c00095dc:	b0 00                	mov    al,0x0
c00095de:	66 90                	xchg   ax,ax
c00095e0:	83 c4 14             	add    esp,0x14
c00095e3:	c3                   	ret    

c00095e4 <pbuf_memcmp>:
c00095e4:	83 ec 18             	sub    esp,0x18
c00095e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00095eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00095ef:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00095f4:	66 89 04 24          	mov    WORD PTR [esp],ax
c00095f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095fc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009601:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009605:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009609:	eb 25                	jmp    c0009630 <pbuf_memcmp+0x4c>
c000960b:	90                   	nop
c000960c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009610:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009614:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009619:	89 d1                	mov    ecx,edx
c000961b:	29 c1                	sub    ecx,eax
c000961d:	89 c8                	mov    eax,ecx
c000961f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009628:	8b 00                	mov    eax,DWORD PTR [eax]
c000962a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000962e:	66 90                	xchg   ax,ax
c0009630:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009635:	74 15                	je     c000964c <pbuf_memcmp+0x68>
c0009637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000963b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000963f:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009644:	0f b7 c0             	movzx  eax,ax
c0009647:	39 c2                	cmp    edx,eax
c0009649:	73 c1                	jae    c000960c <pbuf_memcmp+0x28>
c000964b:	90                   	nop
c000964c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009651:	0f 84 8d 00 00 00    	je     c00096e4 <pbuf_memcmp+0x100>
c0009657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000965b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000965f:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009664:	0f b7 c0             	movzx  eax,ax
c0009667:	39 c2                	cmp    edx,eax
c0009669:	73 79                	jae    c00096e4 <pbuf_memcmp+0x100>
c000966b:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0009672:	eb 5c                	jmp    c00096d0 <pbuf_memcmp+0xec>
c0009674:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009679:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000967e:	01 d0                	add    eax,edx
c0009680:	0f b7 c0             	movzx  eax,ax
c0009683:	50                   	push   eax
c0009684:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009688:	e8 bf fe ff ff       	call   c000954c <pbuf_get_at>
c000968d:	83 c4 08             	add    esp,0x8
c0009690:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0009694:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009699:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000969d:	01 d0                	add    eax,edx
c000969f:	8a 00                	mov    al,BYTE PTR [eax]
c00096a1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00096a5:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
c00096aa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00096af:	39 c2                	cmp    edx,eax
c00096b1:	74 0d                	je     c00096c0 <pbuf_memcmp+0xdc>
c00096b3:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00096b8:	83 c0 01             	add    eax,0x1
c00096bb:	eb 2f                	jmp    c00096ec <pbuf_memcmp+0x108>
c00096bd:	8d 76 00             	lea    esi,[esi+0x0]
c00096c0:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00096c5:	83 c0 01             	add    eax,0x1
c00096c8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00096cd:	8d 76 00             	lea    esi,[esi+0x0]
c00096d0:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c00096d5:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00096d9:	39 c2                	cmp    edx,eax
c00096db:	72 97                	jb     c0009674 <pbuf_memcmp+0x90>
c00096dd:	b8 00 00 00 00       	mov    eax,0x0
c00096e2:	eb 08                	jmp    c00096ec <pbuf_memcmp+0x108>
c00096e4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00096e9:	8d 76 00             	lea    esi,[esi+0x0]
c00096ec:	83 c4 18             	add    esp,0x18
c00096ef:	c3                   	ret    

c00096f0 <pbuf_memfind>:
c00096f0:	83 ec 18             	sub    esp,0x18
c00096f3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00096f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00096fb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0009700:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009704:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009708:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000970b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000970f:	89 d1                	mov    ecx,edx
c0009711:	29 c1                	sub    ecx,eax
c0009713:	89 c8                	mov    eax,ecx
c0009715:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c000971a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000971e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009721:	0f b7 c0             	movzx  eax,ax
c0009724:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c0009729:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c000972d:	01 ca                	add    edx,ecx
c000972f:	39 d0                	cmp    eax,edx
c0009731:	7c 65                	jl     c0009798 <pbuf_memfind+0xa8>
c0009733:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009736:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000973b:	eb 4b                	jmp    c0009788 <pbuf_memfind+0x98>
c000973d:	8d 76 00             	lea    esi,[esi+0x0]
c0009740:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0009745:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000974a:	52                   	push   edx
c000974b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000974f:	50                   	push   eax
c0009750:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009754:	e8 8b fe ff ff       	call   c00095e4 <pbuf_memcmp>
c0009759:	83 c4 10             	add    esp,0x10
c000975c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0009761:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0009766:	85 c0                	test   eax,eax
c0009768:	75 0a                	jne    c0009774 <pbuf_memfind+0x84>
c000976a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000976f:	eb 2f                	jmp    c00097a0 <pbuf_memfind+0xb0>
c0009771:	8d 76 00             	lea    esi,[esi+0x0]
c0009774:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009779:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000977e:	01 d0                	add    eax,edx
c0009780:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009785:	8d 76 00             	lea    esi,[esi+0x0]
c0009788:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c000978d:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0009792:	39 c2                	cmp    edx,eax
c0009794:	76 aa                	jbe    c0009740 <pbuf_memfind+0x50>
c0009796:	66 90                	xchg   ax,ax
c0009798:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000979d:	8d 76 00             	lea    esi,[esi+0x0]
c00097a0:	83 c4 18             	add    esp,0x18
c00097a3:	c3                   	ret    

c00097a4 <pbuf_strstr>:
c00097a4:	83 ec 1c             	sub    esp,0x1c
c00097a7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00097ac:	74 1e                	je     c00097cc <pbuf_strstr+0x28>
c00097ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00097b2:	8a 00                	mov    al,BYTE PTR [eax]
c00097b4:	0f be c0             	movsx  eax,al
c00097b7:	85 c0                	test   eax,eax
c00097b9:	74 11                	je     c00097cc <pbuf_strstr+0x28>
c00097bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00097bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00097c2:	0f b7 c0             	movzx  eax,ax
c00097c5:	3d ff ff 00 00       	cmp    eax,0xffff
c00097ca:	75 08                	jne    c00097d4 <pbuf_strstr+0x30>
c00097cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00097d1:	eb 41                	jmp    c0009814 <pbuf_strstr+0x70>
c00097d3:	90                   	nop
c00097d4:	83 ec 0c             	sub    esp,0xc
c00097d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097db:	e8 90 6d ff ff       	call   c0000570 <strlen>
c00097e0:	83 c4 10             	add    esp,0x10
c00097e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00097e7:	81 7c 24 0c fe ff 00 00 	cmp    DWORD PTR [esp+0xc],0xfffe
c00097ef:	76 07                	jbe    c00097f8 <pbuf_strstr+0x54>
c00097f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00097f6:	eb 1c                	jmp    c0009814 <pbuf_strstr+0x70>
c00097f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097fc:	0f b7 c0             	movzx  eax,ax
c00097ff:	6a 00                	push   0x0
c0009801:	50                   	push   eax
c0009802:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009806:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000980a:	e8 e1 fe ff ff       	call   c00096f0 <pbuf_memfind>
c000980f:	83 c4 10             	add    esp,0x10
c0009812:	66 90                	xchg   ax,ax
c0009814:	83 c4 1c             	add    esp,0x1c
c0009817:	c3                   	ret    

c0009818 <raw_input>:
c0009818:	83 ec 2c             	sub    esp,0x2c
c000981b:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0009820:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009824:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009827:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000982b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000982f:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0009832:	0f b6 c0             	movzx  eax,al
c0009835:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000983a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009842:	a1 9c b8 03 c0       	mov    eax,ds:0xc003b89c
c0009847:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000984b:	e9 b8 00 00 00       	jmp    c0009908 <raw_input+0xf0>
c0009850:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009854:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0009857:	0f b6 d0             	movzx  edx,al
c000985a:	0f bf 44 24 0e       	movsx  eax,WORD PTR [esp+0xe]
c000985f:	39 c2                	cmp    edx,eax
c0009861:	0f 85 8d 00 00 00    	jne    c00098f4 <raw_input+0xdc>
c0009867:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000986b:	85 c0                	test   eax,eax
c000986d:	74 19                	je     c0009888 <raw_input+0x70>
c000986f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009873:	8b 00                	mov    eax,DWORD PTR [eax]
c0009875:	85 c0                	test   eax,eax
c0009877:	74 0f                	je     c0009888 <raw_input+0x70>
c0009879:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000987d:	8b 10                	mov    edx,DWORD PTR [eax]
c000987f:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c0009884:	39 c2                	cmp    edx,eax
c0009886:	75 6c                	jne    c00098f4 <raw_input+0xdc>
c0009888:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000988c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000988f:	85 c0                	test   eax,eax
c0009891:	74 61                	je     c00098f4 <raw_input+0xdc>
c0009893:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009897:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000989a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000989e:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c00098a1:	68 90 78 03 c0       	push   0xc0037890
c00098a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00098aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ae:	52                   	push   edx
c00098af:	ff d0                	call   eax
c00098b1:	83 c4 10             	add    esp,0x10
c00098b4:	0f b6 c0             	movzx  eax,al
c00098b7:	85 c0                	test   eax,eax
c00098b9:	74 39                	je     c00098f4 <raw_input+0xdc>
c00098bb:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00098c3:	c6 44 24 17 01       	mov    BYTE PTR [esp+0x17],0x1
c00098c8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00098cd:	74 25                	je     c00098f4 <raw_input+0xdc>
c00098cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098d3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00098d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00098da:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00098dd:	8b 15 9c b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b89c
c00098e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098e7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00098ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098ee:	a3 9c b8 03 c0       	mov    ds:0xc003b89c,eax
c00098f3:	90                   	nop
c00098f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009900:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009903:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009907:	90                   	nop
c0009908:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000990d:	85 c0                	test   eax,eax
c000990f:	75 0b                	jne    c000991c <raw_input+0x104>
c0009911:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009916:	0f 85 34 ff ff ff    	jne    c0009850 <raw_input+0x38>
c000991c:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0009920:	83 c4 2c             	add    esp,0x2c
c0009923:	c3                   	ret    

c0009924 <raw_bind>:
c0009924:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009929:	74 09                	je     c0009934 <raw_bind+0x10>
c000992b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000992f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009931:	eb 09                	jmp    c000993c <raw_bind+0x18>
c0009933:	90                   	nop
c0009934:	b8 00 00 00 00       	mov    eax,0x0
c0009939:	8d 76 00             	lea    esi,[esi+0x0]
c000993c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009940:	89 02                	mov    DWORD PTR [edx],eax
c0009942:	b0 00                	mov    al,0x0
c0009944:	c3                   	ret    
c0009945:	8d 76 00             	lea    esi,[esi+0x0]

c0009948 <raw_connect>:
c0009948:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000994d:	74 09                	je     c0009958 <raw_connect+0x10>
c000994f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009953:	8b 00                	mov    eax,DWORD PTR [eax]
c0009955:	eb 09                	jmp    c0009960 <raw_connect+0x18>
c0009957:	90                   	nop
c0009958:	b8 00 00 00 00       	mov    eax,0x0
c000995d:	8d 76 00             	lea    esi,[esi+0x0]
c0009960:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009964:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009967:	b0 00                	mov    al,0x0
c0009969:	c3                   	ret    
c000996a:	66 90                	xchg   ax,ax

c000996c <raw_recv>:
c000996c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009970:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009974:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0009977:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000997b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000997f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009982:	90                   	nop
c0009983:	c3                   	ret    

c0009984 <raw_sendto>:
c0009984:	83 ec 1c             	sub    esp,0x1c
c0009987:	83 ec 08             	sub    esp,0x8
c000998a:	6a 14                	push   0x14
c000998c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009990:	e8 c3 e9 ff ff       	call   c0008358 <pbuf_header>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	0f b6 c0             	movzx  eax,al
c000999b:	85 c0                	test   eax,eax
c000999d:	74 49                	je     c00099e8 <raw_sendto+0x64>
c000999f:	83 ec 04             	sub    esp,0x4
c00099a2:	6a 00                	push   0x0
c00099a4:	6a 00                	push   0x0
c00099a6:	6a 01                	push   0x1
c00099a8:	e8 1f ed ff ff       	call   c00086cc <pbuf_alloc>
c00099ad:	83 c4 10             	add    esp,0x10
c00099b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00099b4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00099b9:	75 09                	jne    c00099c4 <raw_sendto+0x40>
c00099bb:	b0 ff                	mov    al,0xff
c00099bd:	e9 2a 01 00 00       	jmp    c0009aec <raw_sendto+0x168>
c00099c2:	66 90                	xchg   ax,ax
c00099c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00099c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00099cb:	0f b7 c0             	movzx  eax,ax
c00099ce:	85 c0                	test   eax,eax
c00099d0:	74 52                	je     c0009a24 <raw_sendto+0xa0>
c00099d2:	83 ec 08             	sub    esp,0x8
c00099d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099dd:	e8 2a f4 ff ff       	call   c0008e0c <pbuf_chain>
c00099e2:	83 c4 10             	add    esp,0x10
c00099e5:	eb 3d                	jmp    c0009a24 <raw_sendto+0xa0>
c00099e7:	90                   	nop
c00099e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00099ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00099f0:	83 ec 08             	sub    esp,0x8
c00099f3:	6a ec                	push   0xffffffec
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	e8 5a e9 ff ff       	call   c0008358 <pbuf_header>
c00099fe:	83 c4 10             	add    esp,0x10
c0009a01:	0f b6 c0             	movzx  eax,al
c0009a04:	85 c0                	test   eax,eax
c0009a06:	74 1c                	je     c0009a24 <raw_sendto+0xa0>
c0009a08:	83 ec 08             	sub    esp,0x8
c0009a0b:	68 f8 06 03 c0       	push   0xc00306f8
c0009a10:	68 86 01 03 c0       	push   0xc0030186
c0009a15:	e8 be 64 01 00       	call   c001fed8 <CPrintf>
c0009a1a:	83 c4 10             	add    esp,0x10
c0009a1d:	b0 ff                	mov    al,0xff
c0009a1f:	e9 c8 00 00 00       	jmp    c0009aec <raw_sendto+0x168>
c0009a24:	83 ec 0c             	sub    esp,0xc
c0009a27:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a2b:	e8 6c 9d 00 00       	call   c001379c <ip_route>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a37:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0009a3c:	75 22                	jne    c0009a60 <raw_sendto+0xdc>
c0009a3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a42:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0009a46:	74 10                	je     c0009a58 <raw_sendto+0xd4>
c0009a48:	83 ec 0c             	sub    esp,0xc
c0009a4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a4f:	e8 a0 ea ff ff       	call   c00084f4 <pbuf_free>
c0009a54:	83 c4 10             	add    esp,0x10
c0009a57:	90                   	nop
c0009a58:	b0 fc                	mov    al,0xfc
c0009a5a:	e9 8d 00 00 00       	jmp    c0009aec <raw_sendto+0x168>
c0009a5f:	90                   	nop
c0009a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a64:	85 c0                	test   eax,eax
c0009a66:	74 0c                	je     c0009a74 <raw_sendto+0xf0>
c0009a68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a6e:	85 c0                	test   eax,eax
c0009a70:	75 12                	jne    c0009a84 <raw_sendto+0x100>
c0009a72:	66 90                	xchg   ax,ax
c0009a74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a78:	83 c0 04             	add    eax,0x4
c0009a7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a7f:	eb 0b                	jmp    c0009a8c <raw_sendto+0x108>
c0009a81:	8d 76 00             	lea    esi,[esi+0x0]
c0009a84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a90:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0009a93:	0f b6 c8             	movzx  ecx,al
c0009a96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a9a:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0009a9d:	0f b6 d0             	movzx  edx,al
c0009aa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009aa4:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0009aa7:	0f b6 c0             	movzx  eax,al
c0009aaa:	83 ec 04             	sub    esp,0x4
c0009aad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009ab1:	51                   	push   ecx
c0009ab2:	52                   	push   edx
c0009ab3:	50                   	push   eax
c0009ab4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ab8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009abc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac0:	e8 af a1 00 00       	call   c0013c74 <ip_output_if>
c0009ac5:	83 c4 20             	add    esp,0x20
c0009ac8:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0009acc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ad0:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0009ad4:	74 12                	je     c0009ae8 <raw_sendto+0x164>
c0009ad6:	83 ec 0c             	sub    esp,0xc
c0009ad9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009add:	e8 12 ea ff ff       	call   c00084f4 <pbuf_free>
c0009ae2:	83 c4 10             	add    esp,0x10
c0009ae5:	8d 76 00             	lea    esi,[esi+0x0]
c0009ae8:	8a 44 24 03          	mov    al,BYTE PTR [esp+0x3]
c0009aec:	83 c4 1c             	add    esp,0x1c
c0009aef:	c3                   	ret    

c0009af0 <raw_send>:
c0009af0:	83 ec 0c             	sub    esp,0xc
c0009af3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009af7:	83 c0 04             	add    eax,0x4
c0009afa:	83 ec 04             	sub    esp,0x4
c0009afd:	50                   	push   eax
c0009afe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b06:	e8 79 fe ff ff       	call   c0009984 <raw_sendto>
c0009b0b:	83 c4 10             	add    esp,0x10
c0009b0e:	83 c4 0c             	add    esp,0xc
c0009b11:	c3                   	ret    
c0009b12:	66 90                	xchg   ax,ax

c0009b14 <raw_remove>:
c0009b14:	83 ec 1c             	sub    esp,0x1c
c0009b17:	a1 9c b8 03 c0       	mov    eax,ds:0xc003b89c
c0009b1c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0009b20:	75 12                	jne    c0009b34 <raw_remove+0x20>
c0009b22:	a1 9c b8 03 c0       	mov    eax,ds:0xc003b89c
c0009b27:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b2a:	a3 9c b8 03 c0       	mov    ds:0xc003b89c,eax
c0009b2f:	eb 4b                	jmp    c0009b7c <raw_remove+0x68>
c0009b31:	8d 76 00             	lea    esi,[esi+0x0]
c0009b34:	a1 9c b8 03 c0       	mov    eax,ds:0xc003b89c
c0009b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b3d:	eb 35                	jmp    c0009b74 <raw_remove+0x60>
c0009b3f:	90                   	nop
c0009b40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b44:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b47:	85 c0                	test   eax,eax
c0009b49:	74 1d                	je     c0009b68 <raw_remove+0x54>
c0009b4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b4f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b52:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0009b56:	75 10                	jne    c0009b68 <raw_remove+0x54>
c0009b58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b5c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0009b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b63:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009b66:	66 90                	xchg   ax,ax
c0009b68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b6c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b73:	90                   	nop
c0009b74:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009b79:	75 c5                	jne    c0009b40 <raw_remove+0x2c>
c0009b7b:	90                   	nop
c0009b7c:	83 ec 08             	sub    esp,0x8
c0009b7f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009b83:	6a 00                	push   0x0
c0009b85:	e8 ae e0 ff ff       	call   c0007c38 <memp_free>
c0009b8a:	83 c4 10             	add    esp,0x10
c0009b8d:	90                   	nop
c0009b8e:	83 c4 1c             	add    esp,0x1c
c0009b91:	c3                   	ret    
c0009b92:	66 90                	xchg   ax,ax

c0009b94 <raw_new>:
c0009b94:	83 ec 2c             	sub    esp,0x2c
c0009b97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b9b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009b9f:	83 ec 0c             	sub    esp,0xc
c0009ba2:	6a 00                	push   0x0
c0009ba4:	e8 63 df ff ff       	call   c0007b0c <memp_malloc>
c0009ba9:	83 c4 10             	add    esp,0x10
c0009bac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009bb0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009bb5:	74 3d                	je     c0009bf4 <raw_new+0x60>
c0009bb7:	83 ec 04             	sub    esp,0x4
c0009bba:	6a 1c                	push   0x1c
c0009bbc:	6a 00                	push   0x0
c0009bbe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009bc2:	e8 29 69 ff ff       	call   c00004f0 <memset>
c0009bc7:	83 c4 10             	add    esp,0x10
c0009bca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bce:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009bd2:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0009bd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bd9:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0009bdd:	8b 15 9c b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b89c
c0009be3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009be7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009bea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bee:	a3 9c b8 03 c0       	mov    ds:0xc003b89c,eax
c0009bf3:	90                   	nop
c0009bf4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bf8:	83 c4 2c             	add    esp,0x2c
c0009bfb:	c3                   	ret    

c0009bfc <stats_init>:
c0009bfc:	90                   	nop
c0009bfd:	c3                   	ret    
c0009bfe:	66 90                	xchg   ax,ax

c0009c00 <sys_msleep>:
c0009c00:	83 ec 1c             	sub    esp,0x1c
c0009c03:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0009c08:	74 46                	je     c0009c50 <sys_msleep+0x50>
c0009c0a:	83 ec 08             	sub    esp,0x8
c0009c0d:	6a 00                	push   0x0
c0009c0f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c13:	50                   	push   eax
c0009c14:	e8 53 70 ff ff       	call   c0000c6c <sys_sem_new>
c0009c19:	83 c4 10             	add    esp,0x10
c0009c1c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009c20:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0009c25:	85 c0                	test   eax,eax
c0009c27:	75 27                	jne    c0009c50 <sys_msleep+0x50>
c0009c29:	83 ec 08             	sub    esp,0x8
c0009c2c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009c30:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c34:	50                   	push   eax
c0009c35:	e8 8a 70 ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c0009c3a:	83 c4 10             	add    esp,0x10
c0009c3d:	83 ec 0c             	sub    esp,0xc
c0009c40:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c44:	50                   	push   eax
c0009c45:	e8 4a 70 ff ff       	call   c0000c94 <sys_sem_free>
c0009c4a:	83 c4 10             	add    esp,0x10
c0009c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0009c50:	90                   	nop
c0009c51:	83 c4 1c             	add    esp,0x1c
c0009c54:	c3                   	ret    
c0009c55:	66 90                	xchg   ax,ax
c0009c57:	90                   	nop

c0009c58 <tcp_accept_null>:
c0009c58:	83 ec 04             	sub    esp,0x4
c0009c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c5f:	88 04 24             	mov    BYTE PTR [esp],al
c0009c62:	b0 f6                	mov    al,0xf6
c0009c64:	83 c4 04             	add    esp,0x4
c0009c67:	c3                   	ret    

c0009c68 <tcp_listen_with_backlog>:
c0009c68:	83 ec 2c             	sub    esp,0x2c
c0009c6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009c6f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009c73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c77:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009c7a:	85 c0                	test   eax,eax
c0009c7c:	74 22                	je     c0009ca0 <tcp_listen_with_backlog+0x38>
c0009c7e:	83 ec 08             	sub    esp,0x8
c0009c81:	68 20 07 03 c0       	push   0xc0030720
c0009c86:	68 86 01 03 c0       	push   0xc0030186
c0009c8b:	e8 48 62 01 00       	call   c001fed8 <CPrintf>
c0009c90:	83 c4 10             	add    esp,0x10
c0009c93:	b8 00 00 00 00       	mov    eax,0x0
c0009c98:	e9 77 01 00 00       	jmp    c0009e14 <tcp_listen_with_backlog+0x1ac>
c0009c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0009ca0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ca4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009ca7:	83 f8 01             	cmp    eax,0x1
c0009caa:	75 0c                	jne    c0009cb8 <tcp_listen_with_backlog+0x50>
c0009cac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cb0:	e9 5f 01 00 00       	jmp    c0009e14 <tcp_listen_with_backlog+0x1ac>
c0009cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0009cb8:	83 ec 0c             	sub    esp,0xc
c0009cbb:	6a 03                	push   0x3
c0009cbd:	e8 4a de ff ff       	call   c0007b0c <memp_malloc>
c0009cc2:	83 c4 10             	add    esp,0x10
c0009cc5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cc9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009cce:	75 0c                	jne    c0009cdc <tcp_listen_with_backlog+0x74>
c0009cd0:	b8 00 00 00 00       	mov    eax,0x0
c0009cd5:	e9 3a 01 00 00       	jmp    c0009e14 <tcp_listen_with_backlog+0x1ac>
c0009cda:	66 90                	xchg   ax,ax
c0009cdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ce0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0009ce3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ce7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009cea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cee:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009cf1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009cf5:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c0009cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009cfd:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
c0009d04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d08:	8a 50 14             	mov    dl,BYTE PTR [eax+0x14]
c0009d0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d0f:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c0009d12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d16:	8a 50 08             	mov    dl,BYTE PTR [eax+0x8]
c0009d19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d1d:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009d20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d24:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c0009d27:	83 c8 02             	or     eax,0x2
c0009d2a:	88 c2                	mov    dl,al
c0009d2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d30:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009d33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d37:	8a 50 0a             	mov    dl,BYTE PTR [eax+0xa]
c0009d3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d3e:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c0009d41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d45:	8a 50 09             	mov    dl,BYTE PTR [eax+0x9]
c0009d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d4c:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0009d4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d53:	8b 10                	mov    edx,DWORD PTR [eax]
c0009d55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d59:	89 10                	mov    DWORD PTR [eax],edx
c0009d5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d5f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009d62:	0f b7 c0             	movzx  eax,ax
c0009d65:	85 c0                	test   eax,eax
c0009d67:	74 6f                	je     c0009dd8 <tcp_listen_with_backlog+0x170>
c0009d69:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c0009d6e:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009d72:	75 10                	jne    c0009d84 <tcp_listen_with_backlog+0x11c>
c0009d74:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c0009d79:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009d7c:	a3 80 78 03 c0       	mov    ds:0xc0037880,eax
c0009d81:	eb 49                	jmp    c0009dcc <tcp_listen_with_backlog+0x164>
c0009d83:	90                   	nop
c0009d84:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c0009d89:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c0009d8e:	eb 30                	jmp    c0009dc0 <tcp_listen_with_backlog+0x158>
c0009d90:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c0009d95:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009d98:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009d9c:	75 12                	jne    c0009db0 <tcp_listen_with_backlog+0x148>
c0009d9e:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c0009da3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009da7:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009daa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009dad:	eb 1d                	jmp    c0009dcc <tcp_listen_with_backlog+0x164>
c0009daf:	90                   	nop
c0009db0:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c0009db5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009db8:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c0009dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0009dc0:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c0009dc5:	85 c0                	test   eax,eax
c0009dc7:	75 c7                	jne    c0009d90 <tcp_listen_with_backlog+0x128>
c0009dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0009dcc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dd0:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0009dd7:	90                   	nop
c0009dd8:	83 ec 08             	sub    esp,0x8
c0009ddb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009ddf:	6a 02                	push   0x2
c0009de1:	e8 52 de ff ff       	call   c0007c38 <memp_free>
c0009de6:	83 c4 10             	add    esp,0x10
c0009de9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ded:	c7 40 1c 58 9c 00 c0 	mov    DWORD PTR [eax+0x1c],0xc0009c58
c0009df4:	8b 15 78 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037878
c0009dfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009dfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e05:	a3 78 78 03 c0       	mov    ds:0xc0037878,eax
c0009e0a:	e8 a5 6e 00 00       	call   c0010cb4 <tcp_timer_needed>
c0009e0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e13:	90                   	nop
c0009e14:	83 c4 2c             	add    esp,0x2c
c0009e17:	c3                   	ret    

c0009e18 <tcp_update_rcv_ann_wnd>:
c0009e18:	83 ec 1c             	sub    esp,0x1c
c0009e1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e1f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009e22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e26:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009e29:	0f b7 c0             	movzx  eax,ax
c0009e2c:	01 d0                	add    eax,edx
c0009e2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e36:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009e39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e3d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009e40:	0f b7 c8             	movzx  ecx,ax
c0009e43:	81 f9 30 04 00 00    	cmp    ecx,0x430
c0009e49:	76 05                	jbe    c0009e50 <tcp_update_rcv_ann_wnd+0x38>
c0009e4b:	b8 30 04 00 00       	mov    eax,0x430
c0009e50:	0f b7 c0             	movzx  eax,ax
c0009e53:	01 c2                	add    edx,eax
c0009e55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e59:	29 d0                	sub    eax,edx
c0009e5b:	78 23                	js     c0009e80 <tcp_update_rcv_ann_wnd+0x68>
c0009e5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e61:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009e64:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009e68:	66 89 42 2e          	mov    WORD PTR [edx+0x2e],ax
c0009e6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e70:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009e73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009e77:	29 c2                	sub    edx,eax
c0009e79:	89 d0                	mov    eax,edx
c0009e7b:	eb 73                	jmp    c0009ef0 <tcp_update_rcv_ann_wnd+0xd8>
c0009e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0009e80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e84:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009e87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e8b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009e8e:	29 c2                	sub    edx,eax
c0009e90:	89 d0                	mov    eax,edx
c0009e92:	85 c0                	test   eax,eax
c0009e94:	7e 0e                	jle    c0009ea4 <tcp_update_rcv_ann_wnd+0x8c>
c0009e96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e9a:	66 c7 40 2e 00 00    	mov    WORD PTR [eax+0x2e],0x0
c0009ea0:	eb 46                	jmp    c0009ee8 <tcp_update_rcv_ann_wnd+0xd0>
c0009ea2:	66 90                	xchg   ax,ax
c0009ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ea8:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009eab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eaf:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0009eb2:	29 c2                	sub    edx,eax
c0009eb4:	89 d0                	mov    eax,edx
c0009eb6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eba:	81 7c 24 08 ff ff 00 00 	cmp    DWORD PTR [esp+0x8],0xffff
c0009ec2:	76 18                	jbe    c0009edc <tcp_update_rcv_ann_wnd+0xc4>
c0009ec4:	83 ec 08             	sub    esp,0x8
c0009ec7:	68 54 09 03 c0       	push   0xc0030954
c0009ecc:	68 86 01 03 c0       	push   0xc0030186
c0009ed1:	e8 02 60 01 00       	call   c001fed8 <CPrintf>
c0009ed6:	83 c4 10             	add    esp,0x10
c0009ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0009edc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ee0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009ee4:	66 89 42 2e          	mov    WORD PTR [edx+0x2e],ax
c0009ee8:	b8 00 00 00 00       	mov    eax,0x0
c0009eed:	8d 76 00             	lea    esi,[esi+0x0]
c0009ef0:	83 c4 1c             	add    esp,0x1c
c0009ef3:	c3                   	ret    

c0009ef4 <tcp_recved>:
c0009ef4:	83 ec 2c             	sub    esp,0x2c
c0009ef7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009efb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009f00:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009f05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f09:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009f0c:	0f b7 c0             	movzx  eax,ax
c0009f0f:	b9 ff ff 00 00       	mov    ecx,0xffff
c0009f14:	29 c1                	sub    ecx,eax
c0009f16:	89 c8                	mov    eax,ecx
c0009f18:	39 c2                	cmp    edx,eax
c0009f1a:	7e 18                	jle    c0009f34 <tcp_recved+0x40>
c0009f1c:	83 ec 08             	sub    esp,0x8
c0009f1f:	68 44 07 03 c0       	push   0xc0030744
c0009f24:	68 86 01 03 c0       	push   0xc0030186
c0009f29:	e8 aa 5f 01 00       	call   c001fed8 <CPrintf>
c0009f2e:	83 c4 10             	add    esp,0x10
c0009f31:	8d 76 00             	lea    esi,[esi+0x0]
c0009f34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f38:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009f3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f3f:	01 d0                	add    eax,edx
c0009f41:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f45:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c0009f49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f4d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009f50:	0f b7 c0             	movzx  eax,ax
c0009f53:	3d 60 08 00 00       	cmp    eax,0x860
c0009f58:	76 0a                	jbe    c0009f64 <tcp_recved+0x70>
c0009f5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f5e:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c0009f64:	83 ec 0c             	sub    esp,0xc
c0009f67:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f6b:	e8 a8 fe ff ff       	call   c0009e18 <tcp_update_rcv_ann_wnd>
c0009f70:	83 c4 10             	add    esp,0x10
c0009f73:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009f77:	81 7c 24 1c 17 02 00 00 	cmp    DWORD PTR [esp+0x1c],0x217
c0009f7f:	7e 23                	jle    c0009fa4 <tcp_recved+0xb0>
c0009f81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f85:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0009f88:	83 c8 02             	or     eax,0x2
c0009f8b:	88 c2                	mov    dl,al
c0009f8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f91:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0009f94:	83 ec 0c             	sub    esp,0xc
c0009f97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f9b:	e8 84 60 00 00       	call   c0010024 <tcp_output>
c0009fa0:	83 c4 10             	add    esp,0x10
c0009fa3:	90                   	nop
c0009fa4:	90                   	nop
c0009fa5:	83 c4 2c             	add    esp,0x2c
c0009fa8:	c3                   	ret    
c0009fa9:	8d 76 00             	lea    esi,[esi+0x0]

c0009fac <tcp_new_port>:
c0009fac:	83 ec 10             	sub    esp,0x10
c0009faf:	90                   	nop
c0009fb0:	66 a1 e0 43 03 c0    	mov    ax,ds:0xc00343e0
c0009fb6:	8d 50 01             	lea    edx,[eax+0x1]
c0009fb9:	66 89 15 e0 43 03 c0 	mov    WORD PTR ds:0xc00343e0,dx
c0009fc0:	0f b7 c0             	movzx  eax,ax
c0009fc3:	3d ff ff 00 00       	cmp    eax,0xffff
c0009fc8:	75 0a                	jne    c0009fd4 <tcp_new_port+0x28>
c0009fca:	66 c7 05 e0 43 03 c0 00 c0 	mov    WORD PTR ds:0xc00343e0,0xc000
c0009fd3:	90                   	nop
c0009fd4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009fdc:	eb 4a                	jmp    c000a028 <tcp_new_port+0x7c>
c0009fde:	66 90                	xchg   ax,ax
c0009fe0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009fe4:	8b 04 85 60 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf5a0]
c0009feb:	8b 00                	mov    eax,DWORD PTR [eax]
c0009fed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ff1:	eb 29                	jmp    c000a01c <tcp_new_port+0x70>
c0009ff3:	90                   	nop
c0009ff4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ff8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0009ffb:	66 a1 e0 43 03 c0    	mov    ax,ds:0xc00343e0
c000a001:	0f b7 d2             	movzx  edx,dx
c000a004:	0f b7 c0             	movzx  eax,ax
c000a007:	39 c2                	cmp    edx,eax
c000a009:	75 05                	jne    c000a010 <tcp_new_port+0x64>
c000a00b:	eb a3                	jmp    c0009fb0 <tcp_new_port+0x4>
c000a00d:	8d 76 00             	lea    esi,[esi+0x0]
c000a010:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a014:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a017:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a01b:	90                   	nop
c000a01c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000a021:	75 d1                	jne    c0009ff4 <tcp_new_port+0x48>
c000a023:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000a028:	83 7c 24 0c 03       	cmp    DWORD PTR [esp+0xc],0x3
c000a02d:	7e b1                	jle    c0009fe0 <tcp_new_port+0x34>
c000a02f:	66 a1 e0 43 03 c0    	mov    ax,ds:0xc00343e0
c000a035:	83 c4 10             	add    esp,0x10
c000a038:	c3                   	ret    
c000a039:	8d 76 00             	lea    esi,[esi+0x0]

c000a03c <tcp_bind>:
c000a03c:	83 ec 2c             	sub    esp,0x2c
c000a03f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a043:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000a048:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000a050:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a054:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a057:	85 c0                	test   eax,eax
c000a059:	74 1d                	je     c000a078 <tcp_bind+0x3c>
c000a05b:	83 ec 08             	sub    esp,0x8
c000a05e:	68 68 07 03 c0       	push   0xc0030768
c000a063:	68 86 01 03 c0       	push   0xc0030186
c000a068:	e8 6b 5e 01 00       	call   c001fed8 <CPrintf>
c000a06d:	83 c4 10             	add    esp,0x10
c000a070:	b0 fa                	mov    al,0xfa
c000a072:	e9 f1 00 00 00       	jmp    c000a168 <tcp_bind+0x12c>
c000a077:	90                   	nop
c000a078:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000a07d:	85 c0                	test   eax,eax
c000a07f:	75 0b                	jne    c000a08c <tcp_bind+0x50>
c000a081:	e8 26 ff ff ff       	call   c0009fac <tcp_new_port>
c000a086:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000a08b:	90                   	nop
c000a08c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a094:	eb 7a                	jmp    c000a110 <tcp_bind+0xd4>
c000a096:	66 90                	xchg   ax,ax
c000a098:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a09c:	8b 04 85 60 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf5a0]
c000a0a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0a9:	eb 59                	jmp    c000a104 <tcp_bind+0xc8>
c000a0ab:	90                   	nop
c000a0ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0b0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a0b3:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000a0b8:	0f b7 c0             	movzx  eax,ax
c000a0bb:	39 c2                	cmp    edx,eax
c000a0bd:	75 39                	jne    c000a0f8 <tcp_bind+0xbc>
c000a0bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0c3:	85 c0                	test   eax,eax
c000a0c5:	74 2d                	je     c000a0f4 <tcp_bind+0xb8>
c000a0c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0cb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0cd:	85 c0                	test   eax,eax
c000a0cf:	74 23                	je     c000a0f4 <tcp_bind+0xb8>
c000a0d1:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000a0d6:	74 1c                	je     c000a0f4 <tcp_bind+0xb8>
c000a0d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0de:	85 c0                	test   eax,eax
c000a0e0:	74 12                	je     c000a0f4 <tcp_bind+0xb8>
c000a0e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0e6:	8b 10                	mov    edx,DWORD PTR [eax]
c000a0e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0ec:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0ee:	39 c2                	cmp    edx,eax
c000a0f0:	75 06                	jne    c000a0f8 <tcp_bind+0xbc>
c000a0f2:	66 90                	xchg   ax,ax
c000a0f4:	b0 f8                	mov    al,0xf8
c000a0f6:	eb 70                	jmp    c000a168 <tcp_bind+0x12c>
c000a0f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a103:	90                   	nop
c000a104:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a109:	75 a1                	jne    c000a0ac <tcp_bind+0x70>
c000a10b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a110:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a114:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c000a118:	0f 8c 7a ff ff ff    	jl     c000a098 <tcp_bind+0x5c>
c000a11e:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000a123:	74 17                	je     c000a13c <tcp_bind+0x100>
c000a125:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a129:	8b 00                	mov    eax,DWORD PTR [eax]
c000a12b:	85 c0                	test   eax,eax
c000a12d:	74 0d                	je     c000a13c <tcp_bind+0x100>
c000a12f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a133:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a137:	8b 12                	mov    edx,DWORD PTR [edx]
c000a139:	89 10                	mov    DWORD PTR [eax],edx
c000a13b:	90                   	nop
c000a13c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a140:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a144:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000a148:	8b 15 80 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037880
c000a14e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a152:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a155:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a159:	a3 80 78 03 c0       	mov    ds:0xc0037880,eax
c000a15e:	e8 51 6b 00 00       	call   c0010cb4 <tcp_timer_needed>
c000a163:	b0 00                	mov    al,0x0
c000a165:	8d 76 00             	lea    esi,[esi+0x0]
c000a168:	83 c4 2c             	add    esp,0x2c
c000a16b:	c3                   	ret    

c000a16c <tcp_seg_free>:
c000a16c:	83 ec 0c             	sub    esp,0xc
c000a16f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000a174:	74 32                	je     c000a1a8 <tcp_seg_free+0x3c>
c000a176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a17a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a17d:	85 c0                	test   eax,eax
c000a17f:	74 13                	je     c000a194 <tcp_seg_free+0x28>
c000a181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a185:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a188:	83 ec 0c             	sub    esp,0xc
c000a18b:	50                   	push   eax
c000a18c:	e8 63 e3 ff ff       	call   c00084f4 <pbuf_free>
c000a191:	83 c4 10             	add    esp,0x10
c000a194:	83 ec 08             	sub    esp,0x8
c000a197:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a19b:	6a 04                	push   0x4
c000a19d:	e8 96 da ff ff       	call   c0007c38 <memp_free>
c000a1a2:	83 c4 10             	add    esp,0x10
c000a1a5:	8d 76 00             	lea    esi,[esi+0x0]
c000a1a8:	90                   	nop
c000a1a9:	83 c4 0c             	add    esp,0xc
c000a1ac:	c3                   	ret    
c000a1ad:	8d 76 00             	lea    esi,[esi+0x0]

c000a1b0 <tcp_segs_free>:
c000a1b0:	83 ec 1c             	sub    esp,0x1c
c000a1b3:	eb 27                	jmp    c000a1dc <tcp_segs_free+0x2c>
c000a1b5:	8d 76 00             	lea    esi,[esi+0x0]
c000a1b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a1bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000a1be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a1c2:	83 ec 0c             	sub    esp,0xc
c000a1c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1c9:	e8 9e ff ff ff       	call   c000a16c <tcp_seg_free>
c000a1ce:	83 c4 10             	add    esp,0x10
c000a1d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1d5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a1d9:	8d 76 00             	lea    esi,[esi+0x0]
c000a1dc:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000a1e1:	75 d5                	jne    c000a1b8 <tcp_segs_free+0x8>
c000a1e3:	90                   	nop
c000a1e4:	83 c4 1c             	add    esp,0x1c
c000a1e7:	c3                   	ret    

c000a1e8 <tcp_setprio>:
c000a1e8:	83 ec 04             	sub    esp,0x4
c000a1eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1ef:	88 04 24             	mov    BYTE PTR [esp],al
c000a1f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a1f6:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a1f9:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000a1fc:	90                   	nop
c000a1fd:	83 c4 04             	add    esp,0x4
c000a200:	c3                   	ret    
c000a201:	8d 76 00             	lea    esi,[esi+0x0]

c000a204 <tcp_seg_copy>:
c000a204:	83 ec 1c             	sub    esp,0x1c
c000a207:	83 ec 0c             	sub    esp,0xc
c000a20a:	6a 04                	push   0x4
c000a20c:	e8 fb d8 ff ff       	call   c0007b0c <memp_malloc>
c000a211:	83 c4 10             	add    esp,0x10
c000a214:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a218:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a21d:	75 09                	jne    c000a228 <tcp_seg_copy+0x24>
c000a21f:	b8 00 00 00 00       	mov    eax,0x0
c000a224:	eb 2e                	jmp    c000a254 <tcp_seg_copy+0x50>
c000a226:	66 90                	xchg   ax,ax
c000a228:	83 ec 04             	sub    esp,0x4
c000a22b:	6a 10                	push   0x10
c000a22d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a231:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a235:	e8 40 61 ff ff       	call   c000037a <memcpy>
c000a23a:	83 c4 10             	add    esp,0x10
c000a23d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a241:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a244:	83 ec 0c             	sub    esp,0xc
c000a247:	50                   	push   eax
c000a248:	e8 af ea ff ff       	call   c0008cfc <pbuf_ref>
c000a24d:	83 c4 10             	add    esp,0x10
c000a250:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a254:	83 c4 1c             	add    esp,0x1c
c000a257:	c3                   	ret    

c000a258 <tcp_arg>:
c000a258:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a25c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a260:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a263:	90                   	nop
c000a264:	c3                   	ret    
c000a265:	8d 76 00             	lea    esi,[esi+0x0]

c000a268 <tcp_recv>:
c000a268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a26c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a270:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
c000a276:	90                   	nop
c000a277:	c3                   	ret    

c000a278 <tcp_sent>:
c000a278:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a27c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a280:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c000a286:	90                   	nop
c000a287:	c3                   	ret    

c000a288 <tcp_err>:
c000a288:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a28c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a290:	89 90 98 00 00 00    	mov    DWORD PTR [eax+0x98],edx
c000a296:	90                   	nop
c000a297:	c3                   	ret    

c000a298 <tcp_accept>:
c000a298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a29c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a2a0:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000a2a3:	90                   	nop
c000a2a4:	c3                   	ret    
c000a2a5:	8d 76 00             	lea    esi,[esi+0x0]

c000a2a8 <tcp_poll>:
c000a2a8:	83 ec 04             	sub    esp,0x4
c000a2ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2af:	88 04 24             	mov    BYTE PTR [esp],al
c000a2b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a2b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a2ba:	89 90 94 00 00 00    	mov    DWORD PTR [eax+0x94],edx
c000a2c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a2c4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a2c7:	88 50 39             	mov    BYTE PTR [eax+0x39],dl
c000a2ca:	90                   	nop
c000a2cb:	83 c4 04             	add    esp,0x4
c000a2ce:	c3                   	ret    
c000a2cf:	90                   	nop

c000a2d0 <tcp_pcb_purge>:
c000a2d0:	83 ec 0c             	sub    esp,0xc
c000a2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2d7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2da:	85 c0                	test   eax,eax
c000a2dc:	0f 84 ca 00 00 00    	je     c000a3ac <tcp_pcb_purge+0xdc>
c000a2e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2e6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2e9:	83 f8 0a             	cmp    eax,0xa
c000a2ec:	0f 84 ba 00 00 00    	je     c000a3ac <tcp_pcb_purge+0xdc>
c000a2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2f6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2f9:	83 f8 01             	cmp    eax,0x1
c000a2fc:	0f 84 aa 00 00 00    	je     c000a3ac <tcp_pcb_purge+0xdc>
c000a302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a306:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a30c:	85 c0                	test   eax,eax
c000a30e:	74 24                	je     c000a334 <tcp_pcb_purge+0x64>
c000a310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a314:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a31a:	83 ec 0c             	sub    esp,0xc
c000a31d:	50                   	push   eax
c000a31e:	e8 d1 e1 ff ff       	call   c00084f4 <pbuf_free>
c000a323:	83 c4 10             	add    esp,0x10
c000a326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a32a:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000a334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a338:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a33e:	83 ec 0c             	sub    esp,0xc
c000a341:	50                   	push   eax
c000a342:	e8 69 fe ff ff       	call   c000a1b0 <tcp_segs_free>
c000a347:	83 c4 10             	add    esp,0x10
c000a34a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a34e:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a35c:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000a362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a366:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000a369:	83 ec 0c             	sub    esp,0xc
c000a36c:	50                   	push   eax
c000a36d:	e8 3e fe ff ff       	call   c000a1b0 <tcp_segs_free>
c000a372:	83 c4 10             	add    esp,0x10
c000a375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a379:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a37c:	83 ec 0c             	sub    esp,0xc
c000a37f:	50                   	push   eax
c000a380:	e8 2b fe ff ff       	call   c000a1b0 <tcp_segs_free>
c000a385:	83 c4 10             	add    esp,0x10
c000a388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a38c:	c7 40 78 00 00 00 00 	mov    DWORD PTR [eax+0x78],0x0
c000a393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a397:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c000a39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a39e:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000a3a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3a5:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000a3ab:	90                   	nop
c000a3ac:	90                   	nop
c000a3ad:	83 c4 0c             	add    esp,0xc
c000a3b0:	c3                   	ret    
c000a3b1:	8d 76 00             	lea    esi,[esi+0x0]

c000a3b4 <tcp_slowtmr>:
c000a3b4:	57                   	push   edi
c000a3b5:	56                   	push   esi
c000a3b6:	53                   	push   ebx
c000a3b7:	83 ec 20             	sub    esp,0x20
c000a3ba:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a3bf:	a1 74 78 03 c0       	mov    eax,ds:0xc0037874
c000a3c4:	83 c0 01             	add    eax,0x1
c000a3c7:	a3 74 78 03 c0       	mov    ds:0xc0037874,eax
c000a3cc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a3d4:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000a3d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a3dd:	e9 16 06 00 00       	jmp    c000a9f8 <tcp_slowtmr+0x644>
c000a3e2:	66 90                	xchg   ax,ax
c000a3e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3e8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a3eb:	85 c0                	test   eax,eax
c000a3ed:	75 15                	jne    c000a404 <tcp_slowtmr+0x50>
c000a3ef:	83 ec 08             	sub    esp,0x8
c000a3f2:	68 90 07 03 c0       	push   0xc0030790
c000a3f7:	68 86 01 03 c0       	push   0xc0030186
c000a3fc:	e8 d7 5a 01 00       	call   c001fed8 <CPrintf>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a408:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a40b:	83 f8 01             	cmp    eax,0x1
c000a40e:	75 18                	jne    c000a428 <tcp_slowtmr+0x74>
c000a410:	83 ec 08             	sub    esp,0x8
c000a413:	68 bc 07 03 c0       	push   0xc00307bc
c000a418:	68 86 01 03 c0       	push   0xc0030186
c000a41d:	e8 b6 5a 01 00       	call   c001fed8 <CPrintf>
c000a422:	83 c4 10             	add    esp,0x10
c000a425:	8d 76 00             	lea    esi,[esi+0x0]
c000a428:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a42c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a42f:	83 f8 0a             	cmp    eax,0xa
c000a432:	75 18                	jne    c000a44c <tcp_slowtmr+0x98>
c000a434:	83 ec 08             	sub    esp,0x8
c000a437:	68 e8 07 03 c0       	push   0xc00307e8
c000a43c:	68 86 01 03 c0       	push   0xc0030186
c000a441:	e8 92 5a 01 00       	call   c001fed8 <CPrintf>
c000a446:	83 c4 10             	add    esp,0x10
c000a449:	8d 76 00             	lea    esi,[esi+0x0]
c000a44c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a451:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000a456:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a45a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a45d:	83 f8 02             	cmp    eax,0x2
c000a460:	75 22                	jne    c000a484 <tcp_slowtmr+0xd0>
c000a462:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a466:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a469:	0f b6 c0             	movzx  eax,al
c000a46c:	83 f8 06             	cmp    eax,0x6
c000a46f:	75 13                	jne    c000a484 <tcp_slowtmr+0xd0>
c000a471:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a475:	83 c0 01             	add    eax,0x1
c000a478:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a47c:	e9 df 01 00 00       	jmp    c000a660 <tcp_slowtmr+0x2ac>
c000a481:	8d 76 00             	lea    esi,[esi+0x0]
c000a484:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a488:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a48b:	0f b6 c0             	movzx  eax,al
c000a48e:	83 f8 0c             	cmp    eax,0xc
c000a491:	75 11                	jne    c000a4a4 <tcp_slowtmr+0xf0>
c000a493:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a497:	83 c0 01             	add    eax,0x1
c000a49a:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a49e:	e9 bd 01 00 00       	jmp    c000a660 <tcp_slowtmr+0x2ac>
c000a4a3:	90                   	nop
c000a4a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4a8:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a4ae:	0f b6 c0             	movzx  eax,al
c000a4b1:	85 c0                	test   eax,eax
c000a4b3:	0f 84 8f 00 00 00    	je     c000a548 <tcp_slowtmr+0x194>
c000a4b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4bd:	8b 80 a0 00 00 00    	mov    eax,DWORD PTR [eax+0xa0]
c000a4c3:	8d 50 01             	lea    edx,[eax+0x1]
c000a4c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4ca:	89 90 a0 00 00 00    	mov    DWORD PTR [eax+0xa0],edx
c000a4d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4d4:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
c000a4da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4de:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a4e4:	0f b6 c0             	movzx  eax,al
c000a4e7:	83 e8 01             	sub    eax,0x1
c000a4ea:	8a 80 70 0a 03 c0    	mov    al,BYTE PTR [eax-0x3ffcf590]
c000a4f0:	0f b6 c0             	movzx  eax,al
c000a4f3:	39 c2                	cmp    edx,eax
c000a4f5:	0f 82 65 01 00 00    	jb     c000a660 <tcp_slowtmr+0x2ac>
c000a4fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4ff:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c000a509:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a50d:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a513:	0f b6 c0             	movzx  eax,al
c000a516:	83 f8 06             	cmp    eax,0x6
c000a519:	77 19                	ja     c000a534 <tcp_slowtmr+0x180>
c000a51b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a51f:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a525:	83 c0 01             	add    eax,0x1
c000a528:	88 c2                	mov    dl,al
c000a52a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a52e:	88 90 a4 00 00 00    	mov    BYTE PTR [eax+0xa4],dl
c000a534:	83 ec 0c             	sub    esp,0xc
c000a537:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a53b:	e8 e8 63 00 00       	call   c0010928 <tcp_zero_window_probe>
c000a540:	83 c4 10             	add    esp,0x10
c000a543:	e9 18 01 00 00       	jmp    c000a660 <tcp_slowtmr+0x2ac>
c000a548:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a54c:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a550:	98                   	cwde   
c000a551:	85 c0                	test   eax,eax
c000a553:	78 13                	js     c000a568 <tcp_slowtmr+0x1b4>
c000a555:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a559:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a55d:	83 c0 01             	add    eax,0x1
c000a560:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a564:	66 89 42 3a          	mov    WORD PTR [edx+0x3a],ax
c000a568:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a56c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a56f:	85 c0                	test   eax,eax
c000a571:	0f 84 e9 00 00 00    	je     c000a660 <tcp_slowtmr+0x2ac>
c000a577:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a57b:	66 8b 50 3a          	mov    dx,WORD PTR [eax+0x3a]
c000a57f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a583:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a586:	0f bf d2             	movsx  edx,dx
c000a589:	98                   	cwde   
c000a58a:	39 c2                	cmp    edx,eax
c000a58c:	0f 8c ce 00 00 00    	jl     c000a660 <tcp_slowtmr+0x2ac>
c000a592:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a596:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a599:	83 f8 02             	cmp    eax,0x2
c000a59c:	74 3a                	je     c000a5d8 <tcp_slowtmr+0x224>
c000a59e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5a2:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000a5a5:	98                   	cwde   
c000a5a6:	c1 f8 03             	sar    eax,0x3
c000a5a9:	0f bf d0             	movsx  edx,ax
c000a5ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5b0:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000a5b4:	98                   	cwde   
c000a5b5:	01 c2                	add    edx,eax
c000a5b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5bb:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a5be:	0f b6 c0             	movzx  eax,al
c000a5c1:	8a 80 78 0a 03 c0    	mov    al,BYTE PTR [eax-0x3ffcf588]
c000a5c7:	0f b6 c0             	movzx  eax,al
c000a5ca:	88 c1                	mov    cl,al
c000a5cc:	d3 e2                	shl    edx,cl
c000a5ce:	89 d0                	mov    eax,edx
c000a5d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a5d4:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000a5d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5dc:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000a5e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5e6:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000a5e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a5ed:	66 8b 52 56          	mov    dx,WORD PTR [edx+0x56]
c000a5f1:	0f b7 d8             	movzx  ebx,ax
c000a5f4:	0f b7 ca             	movzx  ecx,dx
c000a5f7:	39 cb                	cmp    ebx,ecx
c000a5f9:	76 05                	jbe    c000a600 <tcp_slowtmr+0x24c>
c000a5fb:	89 d0                	mov    eax,edx
c000a5fd:	8d 76 00             	lea    esi,[esi+0x0]
c000a600:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000a605:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000a60a:	d1 e8                	shr    eax,1
c000a60c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a610:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000a614:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a618:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000a61b:	0f b7 d0             	movzx  edx,ax
c000a61e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a622:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a625:	0f b7 c0             	movzx  eax,ax
c000a628:	01 c0                	add    eax,eax
c000a62a:	39 c2                	cmp    edx,eax
c000a62c:	7d 12                	jge    c000a640 <tcp_slowtmr+0x28c>
c000a62e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a632:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a635:	d1 e0                	shl    eax,1
c000a637:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a63b:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000a63f:	90                   	nop
c000a640:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a644:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a647:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a64b:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000a64f:	83 ec 0c             	sub    esp,0xc
c000a652:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a656:	e8 c9 5f 00 00       	call   c0010624 <tcp_rexmit_rto>
c000a65b:	83 c4 10             	add    esp,0x10
c000a65e:	66 90                	xchg   ax,ax
c000a660:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a664:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a667:	83 f8 06             	cmp    eax,0x6
c000a66a:	75 24                	jne    c000a690 <tcp_slowtmr+0x2dc>
c000a66c:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000a672:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a676:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a679:	29 c2                	sub    edx,eax
c000a67b:	89 d0                	mov    eax,edx
c000a67d:	83 f8 28             	cmp    eax,0x28
c000a680:	76 0e                	jbe    c000a690 <tcp_slowtmr+0x2dc>
c000a682:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a686:	83 c0 01             	add    eax,0x1
c000a689:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a68d:	8d 76 00             	lea    esi,[esi+0x0]
c000a690:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a694:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000a697:	0f b6 c0             	movzx  eax,al
c000a69a:	83 e0 08             	and    eax,0x8
c000a69d:	0f 84 e1 00 00 00    	je     c000a784 <tcp_slowtmr+0x3d0>
c000a6a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a6aa:	83 f8 04             	cmp    eax,0x4
c000a6ad:	74 11                	je     c000a6c0 <tcp_slowtmr+0x30c>
c000a6af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6b3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a6b6:	83 f8 07             	cmp    eax,0x7
c000a6b9:	0f 85 c5 00 00 00    	jne    c000a784 <tcp_slowtmr+0x3d0>
c000a6bf:	90                   	nop
c000a6c0:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000a6c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6ca:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a6cd:	89 d1                	mov    ecx,edx
c000a6cf:	29 c1                	sub    ecx,eax
c000a6d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6d5:	8b 80 9c 00 00 00    	mov    eax,DWORD PTR [eax+0x9c]
c000a6db:	05 b8 4c 0a 00       	add    eax,0xa4cb8
c000a6e0:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a6e5:	f7 e2                	mul    edx
c000a6e7:	89 d0                	mov    eax,edx
c000a6e9:	c1 e8 05             	shr    eax,0x5
c000a6ec:	39 c1                	cmp    ecx,eax
c000a6ee:	76 18                	jbe    c000a708 <tcp_slowtmr+0x354>
c000a6f0:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a6f4:	83 c0 01             	add    eax,0x1
c000a6f7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a6fb:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c000a6ff:	83 c0 01             	add    eax,0x1
c000a702:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c000a706:	eb 7c                	jmp    c000a784 <tcp_slowtmr+0x3d0>
c000a708:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000a70e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a712:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a715:	89 d3                	mov    ebx,edx
c000a717:	29 c3                	sub    ebx,eax
c000a719:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a71d:	8b 88 9c 00 00 00    	mov    ecx,DWORD PTR [eax+0x9c]
c000a723:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a727:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a72d:	0f b6 d0             	movzx  edx,al
c000a730:	89 d0                	mov    eax,edx
c000a732:	c1 e0 03             	shl    eax,0x3
c000a735:	01 d0                	add    eax,edx
c000a737:	c1 e0 03             	shl    eax,0x3
c000a73a:	01 d0                	add    eax,edx
c000a73c:	c1 e0 02             	shl    eax,0x2
c000a73f:	01 d0                	add    eax,edx
c000a741:	c1 e0 05             	shl    eax,0x5
c000a744:	29 d0                	sub    eax,edx
c000a746:	c1 e0 03             	shl    eax,0x3
c000a749:	01 c8                	add    eax,ecx
c000a74b:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a750:	f7 e2                	mul    edx
c000a752:	89 d0                	mov    eax,edx
c000a754:	c1 e8 05             	shr    eax,0x5
c000a757:	39 c3                	cmp    ebx,eax
c000a759:	76 29                	jbe    c000a784 <tcp_slowtmr+0x3d0>
c000a75b:	83 ec 0c             	sub    esp,0xc
c000a75e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a762:	e8 f9 60 00 00       	call   c0010860 <tcp_keepalive>
c000a767:	83 c4 10             	add    esp,0x10
c000a76a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a76e:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a774:	83 c0 01             	add    eax,0x1
c000a777:	88 c2                	mov    dl,al
c000a779:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a77d:	88 90 a5 00 00 00    	mov    BYTE PTR [eax+0xa5],dl
c000a783:	90                   	nop
c000a784:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a788:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a78e:	85 c0                	test   eax,eax
c000a790:	74 4e                	je     c000a7e0 <tcp_slowtmr+0x42c>
c000a792:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000a798:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a79c:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a79f:	89 d1                	mov    ecx,edx
c000a7a1:	29 c1                	sub    ecx,eax
c000a7a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7a7:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a7aa:	0f bf d0             	movsx  edx,ax
c000a7ad:	89 d0                	mov    eax,edx
c000a7af:	01 c0                	add    eax,eax
c000a7b1:	01 d0                	add    eax,edx
c000a7b3:	01 c0                	add    eax,eax
c000a7b5:	39 c1                	cmp    ecx,eax
c000a7b7:	72 27                	jb     c000a7e0 <tcp_slowtmr+0x42c>
c000a7b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7bd:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a7c3:	83 ec 0c             	sub    esp,0xc
c000a7c6:	50                   	push   eax
c000a7c7:	e8 e4 f9 ff ff       	call   c000a1b0 <tcp_segs_free>
c000a7cc:	83 c4 10             	add    esp,0x10
c000a7cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7d3:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a7dd:	8d 76 00             	lea    esi,[esi+0x0]
c000a7e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7e4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a7e7:	83 f8 03             	cmp    eax,0x3
c000a7ea:	75 24                	jne    c000a810 <tcp_slowtmr+0x45c>
c000a7ec:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000a7f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7f6:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a7f9:	29 c2                	sub    edx,eax
c000a7fb:	89 d0                	mov    eax,edx
c000a7fd:	83 f8 28             	cmp    eax,0x28
c000a800:	76 0e                	jbe    c000a810 <tcp_slowtmr+0x45c>
c000a802:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a806:	83 c0 01             	add    eax,0x1
c000a809:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a80d:	8d 76 00             	lea    esi,[esi+0x0]
c000a810:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a814:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a817:	83 f8 09             	cmp    eax,0x9
c000a81a:	75 24                	jne    c000a840 <tcp_slowtmr+0x48c>
c000a81c:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000a822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a826:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a829:	29 c2                	sub    edx,eax
c000a82b:	89 d0                	mov    eax,edx
c000a82d:	3d f0 00 00 00       	cmp    eax,0xf0
c000a832:	76 0c                	jbe    c000a840 <tcp_slowtmr+0x48c>
c000a834:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a838:	83 c0 01             	add    eax,0x1
c000a83b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a83f:	90                   	nop
c000a840:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a845:	85 c0                	test   eax,eax
c000a847:	0f 84 13 01 00 00    	je     c000a960 <tcp_slowtmr+0x5ac>
c000a84d:	83 ec 0c             	sub    esp,0xc
c000a850:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a854:	e8 77 fa ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000a859:	83 c4 10             	add    esp,0x10
c000a85c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a861:	74 31                	je     c000a894 <tcp_slowtmr+0x4e0>
c000a863:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000a868:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a86c:	75 16                	jne    c000a884 <tcp_slowtmr+0x4d0>
c000a86e:	83 ec 08             	sub    esp,0x8
c000a871:	68 18 08 03 c0       	push   0xc0030818
c000a876:	68 86 01 03 c0       	push   0xc0030186
c000a87b:	e8 58 56 01 00       	call   c001fed8 <CPrintf>
c000a880:	83 c4 10             	add    esp,0x10
c000a883:	90                   	nop
c000a884:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a888:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a88b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a88f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a892:	eb 2c                	jmp    c000a8c0 <tcp_slowtmr+0x50c>
c000a894:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000a899:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a89d:	74 15                	je     c000a8b4 <tcp_slowtmr+0x500>
c000a89f:	83 ec 08             	sub    esp,0x8
c000a8a2:	68 44 08 03 c0       	push   0xc0030844
c000a8a7:	68 86 01 03 c0       	push   0xc0030186
c000a8ac:	e8 27 56 01 00       	call   c001fed8 <CPrintf>
c000a8b1:	83 c4 10             	add    esp,0x10
c000a8b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a8bb:	a3 70 78 03 c0       	mov    ds:0xc0037870,eax
c000a8c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8c4:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a8ca:	85 c0                	test   eax,eax
c000a8cc:	74 1e                	je     c000a8ec <tcp_slowtmr+0x538>
c000a8ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d2:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a8d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8dc:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a8df:	83 ec 08             	sub    esp,0x8
c000a8e2:	6a f6                	push   0xfffffff6
c000a8e4:	52                   	push   edx
c000a8e5:	ff d0                	call   eax
c000a8e7:	83 c4 10             	add    esp,0x10
c000a8ea:	66 90                	xchg   ax,ax
c000a8ec:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000a8f1:	85 c0                	test   eax,eax
c000a8f3:	74 3f                	je     c000a934 <tcp_slowtmr+0x580>
c000a8f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8f9:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000a8fd:	0f b7 f0             	movzx  esi,ax
c000a900:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a904:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a907:	0f b7 d8             	movzx  ebx,ax
c000a90a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a90e:	8d 78 04             	lea    edi,[eax+0x4]
c000a911:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a915:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a919:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a91c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a920:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000a923:	83 ec 08             	sub    esp,0x8
c000a926:	56                   	push   esi
c000a927:	53                   	push   ebx
c000a928:	57                   	push   edi
c000a929:	51                   	push   ecx
c000a92a:	52                   	push   edx
c000a92b:	50                   	push   eax
c000a92c:	e8 7f 5b 00 00       	call   c00104b0 <tcp_rst>
c000a931:	83 c4 20             	add    esp,0x20
c000a934:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a938:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a93c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a940:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a943:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a947:	83 ec 08             	sub    esp,0x8
c000a94a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a94e:	6a 02                	push   0x2
c000a950:	e8 e3 d2 ff ff       	call   c0007c38 <memp_free>
c000a955:	83 c4 10             	add    esp,0x10
c000a958:	e9 9b 00 00 00       	jmp    c000a9f8 <tcp_slowtmr+0x644>
c000a95d:	8d 76 00             	lea    esi,[esi+0x0]
c000a960:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a964:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a968:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a96c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a96f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a973:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a977:	8a 40 38             	mov    al,BYTE PTR [eax+0x38]
c000a97a:	83 c0 01             	add    eax,0x1
c000a97d:	88 c2                	mov    dl,al
c000a97f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a983:	88 50 38             	mov    BYTE PTR [eax+0x38],dl
c000a986:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a98a:	8a 50 38             	mov    dl,BYTE PTR [eax+0x38]
c000a98d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a991:	8a 40 39             	mov    al,BYTE PTR [eax+0x39]
c000a994:	0f b6 d2             	movzx  edx,dl
c000a997:	0f b6 c0             	movzx  eax,al
c000a99a:	39 c2                	cmp    edx,eax
c000a99c:	72 5a                	jb     c000a9f8 <tcp_slowtmr+0x644>
c000a99e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9a2:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000a9a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9aa:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a9b0:	85 c0                	test   eax,eax
c000a9b2:	74 24                	je     c000a9d8 <tcp_slowtmr+0x624>
c000a9b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9b8:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a9be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a9c2:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a9c5:	83 ec 08             	sub    esp,0x8
c000a9c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a9cc:	52                   	push   edx
c000a9cd:	ff d0                	call   eax
c000a9cf:	83 c4 10             	add    esp,0x10
c000a9d2:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000a9d6:	eb 08                	jmp    c000a9e0 <tcp_slowtmr+0x62c>
c000a9d8:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a9dd:	8d 76 00             	lea    esi,[esi+0x0]
c000a9e0:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c000a9e5:	85 c0                	test   eax,eax
c000a9e7:	75 0f                	jne    c000a9f8 <tcp_slowtmr+0x644>
c000a9e9:	83 ec 0c             	sub    esp,0xc
c000a9ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a9f0:	e8 2f 56 00 00       	call   c0010024 <tcp_output>
c000a9f5:	83 c4 10             	add    esp,0x10
c000a9f8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a9fd:	0f 85 e1 f9 ff ff    	jne    c000a3e4 <tcp_slowtmr+0x30>
c000aa03:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000aa0b:	a1 84 78 03 c0       	mov    eax,ds:0xc0037884
c000aa10:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000aa14:	e9 0b 01 00 00       	jmp    c000ab24 <tcp_slowtmr+0x770>
c000aa19:	8d 76 00             	lea    esi,[esi+0x0]
c000aa1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa23:	83 f8 0a             	cmp    eax,0xa
c000aa26:	74 18                	je     c000aa40 <tcp_slowtmr+0x68c>
c000aa28:	83 ec 08             	sub    esp,0x8
c000aa2b:	68 70 08 03 c0       	push   0xc0030870
c000aa30:	68 86 01 03 c0       	push   0xc0030186
c000aa35:	e8 9e 54 01 00       	call   c001fed8 <CPrintf>
c000aa3a:	83 c4 10             	add    esp,0x10
c000aa3d:	8d 76 00             	lea    esi,[esi+0x0]
c000aa40:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000aa45:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000aa4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa4f:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000aa52:	29 c2                	sub    edx,eax
c000aa54:	89 d0                	mov    eax,edx
c000aa56:	3d f0 00 00 00       	cmp    eax,0xf0
c000aa5b:	76 0b                	jbe    c000aa68 <tcp_slowtmr+0x6b4>
c000aa5d:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000aa61:	83 c0 01             	add    eax,0x1
c000aa64:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000aa68:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000aa6d:	85 c0                	test   eax,eax
c000aa6f:	0f 84 9b 00 00 00    	je     c000ab10 <tcp_slowtmr+0x75c>
c000aa75:	83 ec 0c             	sub    esp,0xc
c000aa78:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa7c:	e8 4f f8 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000aa81:	83 c4 10             	add    esp,0x10
c000aa84:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000aa89:	74 31                	je     c000aabc <tcp_slowtmr+0x708>
c000aa8b:	a1 84 78 03 c0       	mov    eax,ds:0xc0037884
c000aa90:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000aa94:	75 16                	jne    c000aaac <tcp_slowtmr+0x6f8>
c000aa96:	83 ec 08             	sub    esp,0x8
c000aa99:	68 a0 08 03 c0       	push   0xc00308a0
c000aa9e:	68 86 01 03 c0       	push   0xc0030186
c000aaa3:	e8 30 54 01 00       	call   c001fed8 <CPrintf>
c000aaa8:	83 c4 10             	add    esp,0x10
c000aaab:	90                   	nop
c000aaac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aab0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000aab3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aab7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aaba:	eb 2c                	jmp    c000aae8 <tcp_slowtmr+0x734>
c000aabc:	a1 84 78 03 c0       	mov    eax,ds:0xc0037884
c000aac1:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000aac5:	74 15                	je     c000aadc <tcp_slowtmr+0x728>
c000aac7:	83 ec 08             	sub    esp,0x8
c000aaca:	68 c8 08 03 c0       	push   0xc00308c8
c000aacf:	68 86 01 03 c0       	push   0xc0030186
c000aad4:	e8 ff 53 01 00       	call   c001fed8 <CPrintf>
c000aad9:	83 c4 10             	add    esp,0x10
c000aadc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aae0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000aae3:	a3 84 78 03 c0       	mov    ds:0xc0037884,eax
c000aae8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aaec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaf0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aaf4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000aaf7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ab02:	6a 02                	push   0x2
c000ab04:	e8 2f d1 ff ff       	call   c0007c38 <memp_free>
c000ab09:	83 c4 10             	add    esp,0x10
c000ab0c:	eb 16                	jmp    c000ab24 <tcp_slowtmr+0x770>
c000ab0e:	66 90                	xchg   ax,ax
c000ab10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab14:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab1c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab1f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab23:	90                   	nop
c000ab24:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000ab29:	0f 85 ed fe ff ff    	jne    c000aa1c <tcp_slowtmr+0x668>
c000ab2f:	90                   	nop
c000ab30:	83 c4 20             	add    esp,0x20
c000ab33:	5b                   	pop    ebx
c000ab34:	5e                   	pop    esi
c000ab35:	5f                   	pop    edi
c000ab36:	c3                   	ret    
c000ab37:	90                   	nop

c000ab38 <tcp_pcb_remove>:
c000ab38:	83 ec 0c             	sub    esp,0xc
c000ab3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab3f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab41:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000ab45:	75 11                	jne    c000ab58 <tcp_pcb_remove+0x20>
c000ab47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab4d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ab50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab54:	89 10                	mov    DWORD PTR [eax],edx
c000ab56:	eb 4c                	jmp    c000aba4 <tcp_pcb_remove+0x6c>
c000ab58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab5c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab5e:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000ab63:	eb 33                	jmp    c000ab98 <tcp_pcb_remove+0x60>
c000ab65:	8d 76 00             	lea    esi,[esi+0x0]
c000ab68:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ab6d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab70:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000ab74:	75 12                	jne    c000ab88 <tcp_pcb_remove+0x50>
c000ab76:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ab7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab7f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ab82:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ab85:	eb 1d                	jmp    c000aba4 <tcp_pcb_remove+0x6c>
c000ab87:	90                   	nop
c000ab88:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ab8d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab90:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000ab95:	8d 76 00             	lea    esi,[esi+0x0]
c000ab98:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ab9d:	85 c0                	test   eax,eax
c000ab9f:	75 c7                	jne    c000ab68 <tcp_pcb_remove+0x30>
c000aba1:	8d 76 00             	lea    esi,[esi+0x0]
c000aba4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aba8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000abaf:	83 ec 0c             	sub    esp,0xc
c000abb2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000abb6:	e8 15 f7 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000abbb:	83 c4 10             	add    esp,0x10
c000abbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abc2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000abc5:	83 f8 0a             	cmp    eax,0xa
c000abc8:	74 3e                	je     c000ac08 <tcp_pcb_remove+0xd0>
c000abca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000abd1:	83 f8 01             	cmp    eax,0x1
c000abd4:	74 32                	je     c000ac08 <tcp_pcb_remove+0xd0>
c000abd6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abda:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000abdd:	0f b6 c0             	movzx  eax,al
c000abe0:	83 e0 01             	and    eax,0x1
c000abe3:	74 23                	je     c000ac08 <tcp_pcb_remove+0xd0>
c000abe5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abe9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000abec:	83 c8 02             	or     eax,0x2
c000abef:	88 c2                	mov    dl,al
c000abf1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abf5:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000abf8:	83 ec 0c             	sub    esp,0xc
c000abfb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000abff:	e8 20 54 00 00       	call   c0010024 <tcp_output>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac0c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ac0f:	83 f8 01             	cmp    eax,0x1
c000ac12:	74 64                	je     c000ac78 <tcp_pcb_remove+0x140>
c000ac14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac18:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ac1b:	85 c0                	test   eax,eax
c000ac1d:	74 15                	je     c000ac34 <tcp_pcb_remove+0xfc>
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	68 6e 09 03 c0       	push   0xc003096e
c000ac27:	68 86 01 03 c0       	push   0xc0030186
c000ac2c:	e8 a7 52 01 00       	call   c001fed8 <CPrintf>
c000ac31:	83 c4 10             	add    esp,0x10
c000ac34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac38:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ac3b:	85 c0                	test   eax,eax
c000ac3d:	74 15                	je     c000ac54 <tcp_pcb_remove+0x11c>
c000ac3f:	83 ec 08             	sub    esp,0x8
c000ac42:	68 86 09 03 c0       	push   0xc0030986
c000ac47:	68 86 01 03 c0       	push   0xc0030186
c000ac4c:	e8 87 52 01 00       	call   c001fed8 <CPrintf>
c000ac51:	83 c4 10             	add    esp,0x10
c000ac54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac58:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ac5e:	85 c0                	test   eax,eax
c000ac60:	74 16                	je     c000ac78 <tcp_pcb_remove+0x140>
c000ac62:	83 ec 08             	sub    esp,0x8
c000ac65:	68 9f 09 03 c0       	push   0xc003099f
c000ac6a:	68 86 01 03 c0       	push   0xc0030186
c000ac6f:	e8 64 52 01 00       	call   c001fed8 <CPrintf>
c000ac74:	83 c4 10             	add    esp,0x10
c000ac77:	90                   	nop
c000ac78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac7c:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ac83:	90                   	nop
c000ac84:	83 c4 0c             	add    esp,0xc
c000ac87:	c3                   	ret    

c000ac88 <tcp_close_shutdown>:
c000ac88:	57                   	push   edi
c000ac89:	56                   	push   esi
c000ac8a:	53                   	push   ebx
c000ac8b:	83 ec 20             	sub    esp,0x20
c000ac8e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ac92:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ac96:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ac9b:	85 c0                	test   eax,eax
c000ac9d:	0f 84 41 01 00 00    	je     c000ade4 <tcp_close_shutdown+0x15c>
c000aca3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aca7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000acaa:	83 f8 01             	cmp    eax,0x1
c000acad:	0f 84 31 01 00 00    	je     c000ade4 <tcp_close_shutdown+0x15c>
c000acb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acb7:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000acbd:	85 c0                	test   eax,eax
c000acbf:	75 17                	jne    c000acd8 <tcp_close_shutdown+0x50>
c000acc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acc5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000acc8:	0f b7 c0             	movzx  eax,ax
c000accb:	3d 60 08 00 00       	cmp    eax,0x860
c000acd0:	0f 84 0e 01 00 00    	je     c000ade4 <tcp_close_shutdown+0x15c>
c000acd6:	66 90                	xchg   ax,ax
c000acd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acdc:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000acdf:	0f b6 c0             	movzx  eax,al
c000ace2:	83 e0 10             	and    eax,0x10
c000ace5:	75 15                	jne    c000acfc <tcp_close_shutdown+0x74>
c000ace7:	83 ec 08             	sub    esp,0x8
c000acea:	68 b6 09 03 c0       	push   0xc00309b6
c000acef:	68 86 01 03 c0       	push   0xc0030186
c000acf4:	e8 df 51 01 00       	call   c001fed8 <CPrintf>
c000acf9:	83 c4 10             	add    esp,0x10
c000acfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad00:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ad04:	0f b7 f0             	movzx  esi,ax
c000ad07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad0b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ad0e:	0f b7 d8             	movzx  ebx,ax
c000ad11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad15:	8d 78 04             	lea    edi,[eax+0x4]
c000ad18:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ad1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad20:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ad23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad27:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000ad2a:	83 ec 08             	sub    esp,0x8
c000ad2d:	56                   	push   esi
c000ad2e:	53                   	push   ebx
c000ad2f:	57                   	push   edi
c000ad30:	51                   	push   ecx
c000ad31:	52                   	push   edx
c000ad32:	50                   	push   eax
c000ad33:	e8 78 57 00 00       	call   c00104b0 <tcp_rst>
c000ad38:	83 c4 20             	add    esp,0x20
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad42:	e8 89 f5 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000ad47:	83 c4 10             	add    esp,0x10
c000ad4a:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000ad4f:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ad53:	75 0f                	jne    c000ad64 <tcp_close_shutdown+0xdc>
c000ad55:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000ad5a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ad5d:	a3 70 78 03 c0       	mov    ds:0xc0037870,eax
c000ad62:	eb 48                	jmp    c000adac <tcp_close_shutdown+0x124>
c000ad64:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000ad69:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000ad6e:	eb 30                	jmp    c000ada0 <tcp_close_shutdown+0x118>
c000ad70:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ad75:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ad78:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ad7c:	75 12                	jne    c000ad90 <tcp_close_shutdown+0x108>
c000ad7e:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ad83:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ad87:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ad8a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ad8d:	eb 1d                	jmp    c000adac <tcp_close_shutdown+0x124>
c000ad8f:	90                   	nop
c000ad90:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ad95:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ad98:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000ad9d:	8d 76 00             	lea    esi,[esi+0x0]
c000ada0:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ada5:	85 c0                	test   eax,eax
c000ada7:	75 c7                	jne    c000ad70 <tcp_close_shutdown+0xe8>
c000ada9:	8d 76 00             	lea    esi,[esi+0x0]
c000adac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adb0:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000adb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adbb:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000adc2:	8b 15 84 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037884
c000adc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adcc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000adcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000add3:	a3 84 78 03 c0       	mov    ds:0xc0037884,eax
c000add8:	e8 d7 5e 00 00       	call   c0010cb4 <tcp_timer_needed>
c000addd:	b0 00                	mov    al,0x0
c000addf:	e9 f4 01 00 00       	jmp    c000afd8 <tcp_close_shutdown+0x350>
c000ade4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ade8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000adeb:	83 f8 07             	cmp    eax,0x7
c000adee:	0f 87 a4 01 00 00    	ja     c000af98 <tcp_close_shutdown+0x310>
c000adf4:	8b 04 85 40 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf5c0]
c000adfb:	ff e0                	jmp    eax
c000adfd:	8d 76 00             	lea    esi,[esi+0x0]
c000ae00:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ae05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae09:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ae0c:	0f b7 c0             	movzx  eax,ax
c000ae0f:	85 c0                	test   eax,eax
c000ae11:	74 71                	je     c000ae84 <tcp_close_shutdown+0x1fc>
c000ae13:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c000ae18:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ae1c:	75 12                	jne    c000ae30 <tcp_close_shutdown+0x1a8>
c000ae1e:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c000ae23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae26:	a3 80 78 03 c0       	mov    ds:0xc0037880,eax
c000ae2b:	eb 4b                	jmp    c000ae78 <tcp_close_shutdown+0x1f0>
c000ae2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ae30:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c000ae35:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000ae3a:	eb 30                	jmp    c000ae6c <tcp_close_shutdown+0x1e4>
c000ae3c:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ae41:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae44:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ae48:	75 12                	jne    c000ae5c <tcp_close_shutdown+0x1d4>
c000ae4a:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ae4f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ae53:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ae56:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ae59:	eb 1d                	jmp    c000ae78 <tcp_close_shutdown+0x1f0>
c000ae5b:	90                   	nop
c000ae5c:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ae61:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae64:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000ae69:	8d 76 00             	lea    esi,[esi+0x0]
c000ae6c:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ae71:	85 c0                	test   eax,eax
c000ae73:	75 c7                	jne    c000ae3c <tcp_close_shutdown+0x1b4>
c000ae75:	8d 76 00             	lea    esi,[esi+0x0]
c000ae78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae7c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ae83:	90                   	nop
c000ae84:	83 ec 08             	sub    esp,0x8
c000ae87:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ae8b:	6a 02                	push   0x2
c000ae8d:	e8 a6 cd ff ff       	call   c0007c38 <memp_free>
c000ae92:	83 c4 10             	add    esp,0x10
c000ae95:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ae9d:	e9 12 01 00 00       	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000aea2:	66 90                	xchg   ax,ax
c000aea4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000aea9:	83 ec 08             	sub    esp,0x8
c000aeac:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aeb0:	68 78 78 03 c0       	push   0xc0037878
c000aeb5:	e8 7e fc ff ff       	call   c000ab38 <tcp_pcb_remove>
c000aeba:	83 c4 10             	add    esp,0x10
c000aebd:	83 ec 08             	sub    esp,0x8
c000aec0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aec4:	6a 03                	push   0x3
c000aec6:	e8 6d cd ff ff       	call   c0007c38 <memp_free>
c000aecb:	83 c4 10             	add    esp,0x10
c000aece:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000aed6:	e9 d9 00 00 00       	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000aedb:	90                   	nop
c000aedc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000aee1:	83 ec 08             	sub    esp,0x8
c000aee4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aee8:	68 70 78 03 c0       	push   0xc0037870
c000aeed:	e8 46 fc ff ff       	call   c000ab38 <tcp_pcb_remove>
c000aef2:	83 c4 10             	add    esp,0x10
c000aef5:	83 ec 08             	sub    esp,0x8
c000aef8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aefc:	6a 02                	push   0x2
c000aefe:	e8 35 cd ff ff       	call   c0007c38 <memp_free>
c000af03:	83 c4 10             	add    esp,0x10
c000af06:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000af0e:	e9 a1 00 00 00       	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000af13:	90                   	nop
c000af14:	83 ec 0c             	sub    esp,0xc
c000af17:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af1b:	e8 54 4d 00 00       	call   c000fc74 <tcp_send_fin>
c000af20:	83 c4 10             	add    esp,0x10
c000af23:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000af27:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000af2c:	85 c0                	test   eax,eax
c000af2e:	75 78                	jne    c000afa8 <tcp_close_shutdown+0x320>
c000af30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af34:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000af3b:	eb 6b                	jmp    c000afa8 <tcp_close_shutdown+0x320>
c000af3d:	8d 76 00             	lea    esi,[esi+0x0]
c000af40:	83 ec 0c             	sub    esp,0xc
c000af43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af47:	e8 28 4d 00 00       	call   c000fc74 <tcp_send_fin>
c000af4c:	83 c4 10             	add    esp,0x10
c000af4f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000af53:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000af58:	85 c0                	test   eax,eax
c000af5a:	75 50                	jne    c000afac <tcp_close_shutdown+0x324>
c000af5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af60:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000af67:	eb 43                	jmp    c000afac <tcp_close_shutdown+0x324>
c000af69:	8d 76 00             	lea    esi,[esi+0x0]
c000af6c:	83 ec 0c             	sub    esp,0xc
c000af6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af73:	e8 fc 4c 00 00       	call   c000fc74 <tcp_send_fin>
c000af78:	83 c4 10             	add    esp,0x10
c000af7b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000af7f:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000af84:	85 c0                	test   eax,eax
c000af86:	75 28                	jne    c000afb0 <tcp_close_shutdown+0x328>
c000af88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af8c:	c7 40 10 09 00 00 00 	mov    DWORD PTR [eax+0x10],0x9
c000af93:	eb 1b                	jmp    c000afb0 <tcp_close_shutdown+0x328>
c000af95:	8d 76 00             	lea    esi,[esi+0x0]
c000af98:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000af9d:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000afa5:	eb 0d                	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000afa7:	90                   	nop
c000afa8:	90                   	nop
c000afa9:	eb 09                	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000afab:	90                   	nop
c000afac:	90                   	nop
c000afad:	eb 05                	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000afaf:	90                   	nop
c000afb0:	90                   	nop
c000afb1:	8d 76 00             	lea    esi,[esi+0x0]
c000afb4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000afb9:	74 19                	je     c000afd4 <tcp_close_shutdown+0x34c>
c000afbb:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000afc0:	85 c0                	test   eax,eax
c000afc2:	75 10                	jne    c000afd4 <tcp_close_shutdown+0x34c>
c000afc4:	83 ec 0c             	sub    esp,0xc
c000afc7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000afcb:	e8 54 50 00 00       	call   c0010024 <tcp_output>
c000afd0:	83 c4 10             	add    esp,0x10
c000afd3:	90                   	nop
c000afd4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000afd8:	83 c4 20             	add    esp,0x20
c000afdb:	5b                   	pop    ebx
c000afdc:	5e                   	pop    esi
c000afdd:	5f                   	pop    edi
c000afde:	c3                   	ret    
c000afdf:	90                   	nop

c000afe0 <tcp_close>:
c000afe0:	83 ec 0c             	sub    esp,0xc
c000afe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afe7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000afea:	83 f8 01             	cmp    eax,0x1
c000afed:	74 15                	je     c000b004 <tcp_close+0x24>
c000afef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aff6:	83 c8 10             	or     eax,0x10
c000aff9:	88 c2                	mov    dl,al
c000affb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afff:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b002:	66 90                	xchg   ax,ax
c000b004:	83 ec 08             	sub    esp,0x8
c000b007:	6a 01                	push   0x1
c000b009:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b00d:	e8 76 fc ff ff       	call   c000ac88 <tcp_close_shutdown>
c000b012:	83 c4 10             	add    esp,0x10
c000b015:	83 c4 0c             	add    esp,0xc
c000b018:	c3                   	ret    
c000b019:	8d 76 00             	lea    esi,[esi+0x0]

c000b01c <tcp_recv_null>:
c000b01c:	83 ec 1c             	sub    esp,0x1c
c000b01f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b023:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b027:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b02c:	74 2e                	je     c000b05c <tcp_recv_null+0x40>
c000b02e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b032:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b035:	0f b7 c0             	movzx  eax,ax
c000b038:	83 ec 08             	sub    esp,0x8
c000b03b:	50                   	push   eax
c000b03c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b040:	e8 af ee ff ff       	call   c0009ef4 <tcp_recved>
c000b045:	83 c4 10             	add    esp,0x10
c000b048:	83 ec 0c             	sub    esp,0xc
c000b04b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b04f:	e8 a0 d4 ff ff       	call   c00084f4 <pbuf_free>
c000b054:	83 c4 10             	add    esp,0x10
c000b057:	eb 1f                	jmp    c000b078 <tcp_recv_null+0x5c>
c000b059:	8d 76 00             	lea    esi,[esi+0x0]
c000b05c:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c000b061:	85 c0                	test   eax,eax
c000b063:	75 13                	jne    c000b078 <tcp_recv_null+0x5c>
c000b065:	83 ec 0c             	sub    esp,0xc
c000b068:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b06c:	e8 6f ff ff ff       	call   c000afe0 <tcp_close>
c000b071:	83 c4 10             	add    esp,0x10
c000b074:	eb 06                	jmp    c000b07c <tcp_recv_null+0x60>
c000b076:	66 90                	xchg   ax,ax
c000b078:	b0 00                	mov    al,0x0
c000b07a:	66 90                	xchg   ax,ax
c000b07c:	83 c4 1c             	add    esp,0x1c
c000b07f:	c3                   	ret    

c000b080 <tcp_fasttmr>:
c000b080:	83 ec 1c             	sub    esp,0x1c
c000b083:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000b088:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b08c:	e9 03 01 00 00       	jmp    c000b194 <tcp_fasttmr+0x114>
c000b091:	8d 76 00             	lea    esi,[esi+0x0]
c000b094:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b098:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b09b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b09f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0a3:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b0a9:	85 c0                	test   eax,eax
c000b0ab:	0f 84 8f 00 00 00    	je     c000b140 <tcp_fasttmr+0xc0>
c000b0b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0b5:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000b0bb:	85 c0                	test   eax,eax
c000b0bd:	74 31                	je     c000b0f0 <tcp_fasttmr+0x70>
c000b0bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0c3:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000b0c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b0cd:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000b0d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b0d7:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000b0da:	6a 00                	push   0x0
c000b0dc:	51                   	push   ecx
c000b0dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e1:	52                   	push   edx
c000b0e2:	ff d0                	call   eax
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000b0eb:	eb 23                	jmp    c000b110 <tcp_fasttmr+0x90>
c000b0ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b0f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0f4:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b0fa:	6a 00                	push   0x0
c000b0fc:	50                   	push   eax
c000b0fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b101:	6a 00                	push   0x0
c000b103:	e8 14 ff ff ff       	call   c000b01c <tcp_recv_null>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000b10f:	90                   	nop
c000b110:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000b115:	85 c0                	test   eax,eax
c000b117:	75 13                	jne    c000b12c <tcp_fasttmr+0xac>
c000b119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b11d:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000b127:	eb 17                	jmp    c000b140 <tcp_fasttmr+0xc0>
c000b129:	8d 76 00             	lea    esi,[esi+0x0]
c000b12c:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000b131:	83 f8 f6             	cmp    eax,0xfffffff6
c000b134:	75 0a                	jne    c000b140 <tcp_fasttmr+0xc0>
c000b136:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b13e:	66 90                	xchg   ax,ax
c000b140:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b145:	74 45                	je     c000b18c <tcp_fasttmr+0x10c>
c000b147:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b14b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b14e:	0f b6 c0             	movzx  eax,al
c000b151:	83 e0 01             	and    eax,0x1
c000b154:	74 36                	je     c000b18c <tcp_fasttmr+0x10c>
c000b156:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b15a:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b15d:	83 c8 02             	or     eax,0x2
c000b160:	88 c2                	mov    dl,al
c000b162:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b166:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b169:	83 ec 0c             	sub    esp,0xc
c000b16c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b170:	e8 af 4e 00 00       	call   c0010024 <tcp_output>
c000b175:	83 c4 10             	add    esp,0x10
c000b178:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b17c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b17f:	83 e0 fc             	and    eax,0xfffffffc
c000b182:	88 c2                	mov    dl,al
c000b184:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b188:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b18b:	90                   	nop
c000b18c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b190:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b194:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b199:	0f 85 f5 fe ff ff    	jne    c000b094 <tcp_fasttmr+0x14>
c000b19f:	90                   	nop
c000b1a0:	83 c4 1c             	add    esp,0x1c
c000b1a3:	c3                   	ret    

c000b1a4 <tcp_tmr>:
c000b1a4:	83 ec 0c             	sub    esp,0xc
c000b1a7:	e8 d4 fe ff ff       	call   c000b080 <tcp_fasttmr>
c000b1ac:	a0 a0 b8 03 c0       	mov    al,ds:0xc003b8a0
c000b1b1:	83 c0 01             	add    eax,0x1
c000b1b4:	a2 a0 b8 03 c0       	mov    ds:0xc003b8a0,al
c000b1b9:	a0 a0 b8 03 c0       	mov    al,ds:0xc003b8a0
c000b1be:	0f b6 c0             	movzx  eax,al
c000b1c1:	83 e0 01             	and    eax,0x1
c000b1c4:	74 06                	je     c000b1cc <tcp_tmr+0x28>
c000b1c6:	e8 e9 f1 ff ff       	call   c000a3b4 <tcp_slowtmr>
c000b1cb:	90                   	nop
c000b1cc:	90                   	nop
c000b1cd:	83 c4 0c             	add    esp,0xc
c000b1d0:	c3                   	ret    
c000b1d1:	8d 76 00             	lea    esi,[esi+0x0]

c000b1d4 <tcp_shutdown>:
c000b1d4:	83 ec 0c             	sub    esp,0xc
c000b1d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b1de:	83 f8 01             	cmp    eax,0x1
c000b1e1:	75 09                	jne    c000b1ec <tcp_shutdown+0x18>
c000b1e3:	b0 f3                	mov    al,0xf3
c000b1e5:	e9 92 00 00 00       	jmp    c000b27c <tcp_shutdown+0xa8>
c000b1ea:	66 90                	xchg   ax,ax
c000b1ec:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b1f1:	74 49                	je     c000b23c <tcp_shutdown+0x68>
c000b1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f7:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b1fd:	85 c0                	test   eax,eax
c000b1ff:	74 27                	je     c000b228 <tcp_shutdown+0x54>
c000b201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b205:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b20b:	83 ec 0c             	sub    esp,0xc
c000b20e:	50                   	push   eax
c000b20f:	e8 e0 d2 ff ff       	call   c00084f4 <pbuf_free>
c000b214:	83 c4 10             	add    esp,0x10
c000b217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b21b:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000b225:	8d 76 00             	lea    esi,[esi+0x0]
c000b228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b22c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b22f:	83 c8 10             	or     eax,0x10
c000b232:	88 c2                	mov    dl,al
c000b234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b238:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b23b:	90                   	nop
c000b23c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b241:	74 2d                	je     c000b270 <tcp_shutdown+0x9c>
c000b243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b247:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b24a:	83 f8 03             	cmp    eax,0x3
c000b24d:	72 25                	jb     c000b274 <tcp_shutdown+0xa0>
c000b24f:	83 f8 04             	cmp    eax,0x4
c000b252:	76 08                	jbe    c000b25c <tcp_shutdown+0x88>
c000b254:	83 f8 07             	cmp    eax,0x7
c000b257:	75 1b                	jne    c000b274 <tcp_shutdown+0xa0>
c000b259:	8d 76 00             	lea    esi,[esi+0x0]
c000b25c:	83 ec 08             	sub    esp,0x8
c000b25f:	6a 00                	push   0x0
c000b261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b265:	e8 1e fa ff ff       	call   c000ac88 <tcp_close_shutdown>
c000b26a:	83 c4 10             	add    esp,0x10
c000b26d:	eb 0d                	jmp    c000b27c <tcp_shutdown+0xa8>
c000b26f:	90                   	nop
c000b270:	90                   	nop
c000b271:	eb 05                	jmp    c000b278 <tcp_shutdown+0xa4>
c000b273:	90                   	nop
c000b274:	90                   	nop
c000b275:	8d 76 00             	lea    esi,[esi+0x0]
c000b278:	b0 00                	mov    al,0x0
c000b27a:	66 90                	xchg   ax,ax
c000b27c:	83 c4 0c             	add    esp,0xc
c000b27f:	c3                   	ret    

c000b280 <tcp_abandon>:
c000b280:	83 ec 2c             	sub    esp,0x2c
c000b283:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b287:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b28a:	83 f8 01             	cmp    eax,0x1
c000b28d:	75 15                	jne    c000b2a4 <tcp_abandon+0x24>
c000b28f:	83 ec 08             	sub    esp,0x8
c000b292:	68 f0 08 03 c0       	push   0xc00308f0
c000b297:	68 86 01 03 c0       	push   0xc0030186
c000b29c:	e8 37 4c 01 00       	call   c001fed8 <CPrintf>
c000b2a1:	83 c4 10             	add    esp,0x10
c000b2a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b2ab:	83 f8 0a             	cmp    eax,0xa
c000b2ae:	75 2c                	jne    c000b2dc <tcp_abandon+0x5c>
c000b2b0:	83 ec 08             	sub    esp,0x8
c000b2b3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b2b7:	68 84 78 03 c0       	push   0xc0037884
c000b2bc:	e8 77 f8 ff ff       	call   c000ab38 <tcp_pcb_remove>
c000b2c1:	83 c4 10             	add    esp,0x10
c000b2c4:	83 ec 08             	sub    esp,0x8
c000b2c7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b2cb:	6a 02                	push   0x2
c000b2cd:	e8 66 c9 ff ff       	call   c0007c38 <memp_free>
c000b2d2:	83 c4 10             	add    esp,0x10
c000b2d5:	e9 32 01 00 00       	jmp    c000b40c <tcp_abandon+0x18c>
c000b2da:	66 90                	xchg   ax,ax
c000b2dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2e0:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000b2e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b2e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2eb:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b2ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b2f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000b2f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b2fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b300:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b303:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b307:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b30b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b30e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000b313:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b317:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000b31b:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c000b320:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b324:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000b32a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b32e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b332:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000b335:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b339:	83 ec 08             	sub    esp,0x8
c000b33c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b340:	68 70 78 03 c0       	push   0xc0037870
c000b345:	e8 ee f7 ff ff       	call   c000ab38 <tcp_pcb_remove>
c000b34a:	83 c4 10             	add    esp,0x10
c000b34d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b351:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b354:	85 c0                	test   eax,eax
c000b356:	74 14                	je     c000b36c <tcp_abandon+0xec>
c000b358:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b35c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b35f:	83 ec 0c             	sub    esp,0xc
c000b362:	50                   	push   eax
c000b363:	e8 48 ee ff ff       	call   c000a1b0 <tcp_segs_free>
c000b368:	83 c4 10             	add    esp,0x10
c000b36b:	90                   	nop
c000b36c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b370:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b373:	85 c0                	test   eax,eax
c000b375:	74 15                	je     c000b38c <tcp_abandon+0x10c>
c000b377:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b37b:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b37e:	83 ec 0c             	sub    esp,0xc
c000b381:	50                   	push   eax
c000b382:	e8 29 ee ff ff       	call   c000a1b0 <tcp_segs_free>
c000b387:	83 c4 10             	add    esp,0x10
c000b38a:	66 90                	xchg   ax,ax
c000b38c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b390:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b396:	85 c0                	test   eax,eax
c000b398:	74 16                	je     c000b3b0 <tcp_abandon+0x130>
c000b39a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b39e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b3a4:	83 ec 0c             	sub    esp,0xc
c000b3a7:	50                   	push   eax
c000b3a8:	e8 03 ee ff ff       	call   c000a1b0 <tcp_segs_free>
c000b3ad:	83 c4 10             	add    esp,0x10
c000b3b0:	83 ec 08             	sub    esp,0x8
c000b3b3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b3b7:	6a 02                	push   0x2
c000b3b9:	e8 7a c8 ff ff       	call   c0007c38 <memp_free>
c000b3be:	83 c4 10             	add    esp,0x10
c000b3c1:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b3c6:	74 14                	je     c000b3dc <tcp_abandon+0x15c>
c000b3c8:	83 ec 08             	sub    esp,0x8
c000b3cb:	6a f6                	push   0xfffffff6
c000b3cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b3d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3d5:	ff d0                	call   eax
c000b3d7:	83 c4 10             	add    esp,0x10
c000b3da:	66 90                	xchg   ax,ax
c000b3dc:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b3e1:	74 29                	je     c000b40c <tcp_abandon+0x18c>
c000b3e3:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c000b3e8:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000b3ed:	83 ec 08             	sub    esp,0x8
c000b3f0:	52                   	push   edx
c000b3f1:	50                   	push   eax
c000b3f2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3f6:	50                   	push   eax
c000b3f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3fb:	50                   	push   eax
c000b3fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b400:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b404:	e8 a7 50 00 00       	call   c00104b0 <tcp_rst>
c000b409:	83 c4 20             	add    esp,0x20
c000b40c:	90                   	nop
c000b40d:	83 c4 2c             	add    esp,0x2c
c000b410:	c3                   	ret    
c000b411:	8d 76 00             	lea    esi,[esi+0x0]

c000b414 <tcp_abort>:
c000b414:	83 ec 0c             	sub    esp,0xc
c000b417:	83 ec 08             	sub    esp,0x8
c000b41a:	6a 01                	push   0x1
c000b41c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b420:	e8 5b fe ff ff       	call   c000b280 <tcp_abandon>
c000b425:	83 c4 10             	add    esp,0x10
c000b428:	90                   	nop
c000b429:	83 c4 0c             	add    esp,0xc
c000b42c:	c3                   	ret    
c000b42d:	8d 76 00             	lea    esi,[esi+0x0]

c000b430 <tcp_kill_prio>:
c000b430:	83 ec 2c             	sub    esp,0x2c
c000b433:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b437:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b43b:	c6 44 24 13 7f       	mov    BYTE PTR [esp+0x13],0x7f
c000b440:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b448:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b450:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000b455:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b459:	eb 75                	jmp    c000b4d0 <tcp_kill_prio+0xa0>
c000b45b:	90                   	nop
c000b45c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b460:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b463:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c000b468:	0f b6 c0             	movzx  eax,al
c000b46b:	39 c2                	cmp    edx,eax
c000b46d:	72 55                	jb     c000b4c4 <tcp_kill_prio+0x94>
c000b46f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b473:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b476:	0f b6 54 24 13       	movzx  edx,BYTE PTR [esp+0x13]
c000b47b:	0f b6 c0             	movzx  eax,al
c000b47e:	39 c2                	cmp    edx,eax
c000b480:	72 42                	jb     c000b4c4 <tcp_kill_prio+0x94>
c000b482:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000b488:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b48c:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b48f:	29 c2                	sub    edx,eax
c000b491:	89 d0                	mov    eax,edx
c000b493:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000b497:	77 2b                	ja     c000b4c4 <tcp_kill_prio+0x94>
c000b499:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000b49f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4a3:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b4a6:	29 c2                	sub    edx,eax
c000b4a8:	89 d0                	mov    eax,edx
c000b4aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b4ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b4b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4ba:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b4bd:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b4c1:	8d 76 00             	lea    esi,[esi+0x0]
c000b4c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4c8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b4cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b4cf:	90                   	nop
c000b4d0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b4d5:	75 85                	jne    c000b45c <tcp_kill_prio+0x2c>
c000b4d7:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b4dc:	74 12                	je     c000b4f0 <tcp_kill_prio+0xc0>
c000b4de:	83 ec 0c             	sub    esp,0xc
c000b4e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b4e5:	e8 2a ff ff ff       	call   c000b414 <tcp_abort>
c000b4ea:	83 c4 10             	add    esp,0x10
c000b4ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b4f0:	90                   	nop
c000b4f1:	83 c4 2c             	add    esp,0x2c
c000b4f4:	c3                   	ret    
c000b4f5:	8d 76 00             	lea    esi,[esi+0x0]

c000b4f8 <tcp_kill_timewait>:
c000b4f8:	83 ec 1c             	sub    esp,0x1c
c000b4fb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b503:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b50b:	a1 84 78 03 c0       	mov    eax,ds:0xc0037884
c000b510:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b514:	eb 42                	jmp    c000b558 <tcp_kill_timewait+0x60>
c000b516:	66 90                	xchg   ax,ax
c000b518:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000b51e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b522:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b525:	29 c2                	sub    edx,eax
c000b527:	89 d0                	mov    eax,edx
c000b529:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b52d:	77 1d                	ja     c000b54c <tcp_kill_timewait+0x54>
c000b52f:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000b535:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b539:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b53c:	29 c2                	sub    edx,eax
c000b53e:	89 d0                	mov    eax,edx
c000b540:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b544:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b548:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b54c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b550:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b553:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b557:	90                   	nop
c000b558:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b55d:	75 b9                	jne    c000b518 <tcp_kill_timewait+0x20>
c000b55f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b564:	74 12                	je     c000b578 <tcp_kill_timewait+0x80>
c000b566:	83 ec 0c             	sub    esp,0xc
c000b569:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56d:	e8 a2 fe ff ff       	call   c000b414 <tcp_abort>
c000b572:	83 c4 10             	add    esp,0x10
c000b575:	8d 76 00             	lea    esi,[esi+0x0]
c000b578:	90                   	nop
c000b579:	83 c4 1c             	add    esp,0x1c
c000b57c:	c3                   	ret    
c000b57d:	8d 76 00             	lea    esi,[esi+0x0]

c000b580 <tcp_next_iss>:
c000b580:	8b 15 dc 43 03 c0    	mov    edx,DWORD PTR ds:0xc00343dc
c000b586:	a1 74 78 03 c0       	mov    eax,ds:0xc0037874
c000b58b:	01 d0                	add    eax,edx
c000b58d:	a3 dc 43 03 c0       	mov    ds:0xc00343dc,eax
c000b592:	a1 dc 43 03 c0       	mov    eax,ds:0xc00343dc
c000b597:	c3                   	ret    

c000b598 <tcp_alloc>:
c000b598:	83 ec 2c             	sub    esp,0x2c
c000b59b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b59f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b5a3:	83 ec 0c             	sub    esp,0xc
c000b5a6:	6a 02                	push   0x2
c000b5a8:	e8 5f c5 ff ff       	call   c0007b0c <memp_malloc>
c000b5ad:	83 c4 10             	add    esp,0x10
c000b5b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5b4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b5b9:	75 6d                	jne    c000b628 <tcp_alloc+0x90>
c000b5bb:	e8 38 ff ff ff       	call   c000b4f8 <tcp_kill_timewait>
c000b5c0:	83 ec 0c             	sub    esp,0xc
c000b5c3:	6a 02                	push   0x2
c000b5c5:	e8 42 c5 ff ff       	call   c0007b0c <memp_malloc>
c000b5ca:	83 c4 10             	add    esp,0x10
c000b5cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5d1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b5d6:	75 38                	jne    c000b610 <tcp_alloc+0x78>
c000b5d8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b5dd:	83 ec 0c             	sub    esp,0xc
c000b5e0:	50                   	push   eax
c000b5e1:	e8 4a fe ff ff       	call   c000b430 <tcp_kill_prio>
c000b5e6:	83 c4 10             	add    esp,0x10
c000b5e9:	83 ec 0c             	sub    esp,0xc
c000b5ec:	6a 02                	push   0x2
c000b5ee:	e8 19 c5 ff ff       	call   c0007b0c <memp_malloc>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5fa:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b5ff:	74 0f                	je     c000b610 <tcp_alloc+0x78>
c000b601:	66 a1 ec 77 03 c0    	mov    ax,ds:0xc00377ec
c000b607:	83 e8 01             	sub    eax,0x1
c000b60a:	66 a3 ec 77 03 c0    	mov    ds:0xc00377ec,ax
c000b610:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b615:	74 11                	je     c000b628 <tcp_alloc+0x90>
c000b617:	66 a1 ec 77 03 c0    	mov    ax,ds:0xc00377ec
c000b61d:	83 e8 01             	sub    eax,0x1
c000b620:	66 a3 ec 77 03 c0    	mov    ds:0xc00377ec,ax
c000b626:	66 90                	xchg   ax,ax
c000b628:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b62d:	0f 84 09 01 00 00    	je     c000b73c <tcp_alloc+0x1a4>
c000b633:	83 ec 04             	sub    esp,0x4
c000b636:	68 a8 00 00 00       	push   0xa8
c000b63b:	6a 00                	push   0x0
c000b63d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b641:	e8 aa 4e ff ff       	call   c00004f0 <memset>
c000b646:	83 c4 10             	add    esp,0x10
c000b649:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b64d:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000b651:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000b654:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b658:	66 c7 40 72 00 01    	mov    WORD PTR [eax+0x72],0x100
c000b65e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b662:	66 c7 40 74 00 00    	mov    WORD PTR [eax+0x74],0x0
c000b668:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b66c:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b672:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b676:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b67c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b680:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
c000b684:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b688:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c000b68c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b690:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b696:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b69a:	66 c7 40 4c 06 00    	mov    WORD PTR [eax+0x4c],0x6
c000b6a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6a4:	66 c7 40 48 00 00    	mov    WORD PTR [eax+0x48],0x0
c000b6aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6ae:	66 c7 40 4a 06 00    	mov    WORD PTR [eax+0x4a],0x6
c000b6b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6b8:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000b6be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6c2:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b6c8:	e8 b3 fe ff ff       	call   c000b580 <tcp_next_iss>
c000b6cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b6d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b6d9:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000b6dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b6e4:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b6e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b6ef:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b6f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6f6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b6fa:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b6fd:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000b703:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b707:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b70a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b70e:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000b712:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b716:	c7 80 8c 00 00 00 1c b0 00 c0 	mov    DWORD PTR [eax+0x8c],0xc000b01c
c000b720:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b724:	c7 80 9c 00 00 00 00 dd 6d 00 	mov    DWORD PTR [eax+0x9c],0x6ddd00
c000b72e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b732:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000b739:	8d 76 00             	lea    esi,[esi+0x0]
c000b73c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b740:	83 c4 2c             	add    esp,0x2c
c000b743:	c3                   	ret    

c000b744 <tcp_new>:
c000b744:	83 ec 0c             	sub    esp,0xc
c000b747:	83 ec 0c             	sub    esp,0xc
c000b74a:	6a 40                	push   0x40
c000b74c:	e8 47 fe ff ff       	call   c000b598 <tcp_alloc>
c000b751:	83 c4 10             	add    esp,0x10
c000b754:	83 c4 0c             	add    esp,0xc
c000b757:	c3                   	ret    

c000b758 <tcp_eff_send_mss>:
c000b758:	53                   	push   ebx
c000b759:	83 ec 28             	sub    esp,0x28
c000b75c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b760:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b765:	83 ec 0c             	sub    esp,0xc
c000b768:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b76c:	e8 2b 80 00 00       	call   c001379c <ip_route>
c000b771:	83 c4 10             	add    esp,0x10
c000b774:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b778:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b77d:	74 3d                	je     c000b7bc <tcp_eff_send_mss+0x64>
c000b77f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b783:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b786:	0f b7 c0             	movzx  eax,ax
c000b789:	85 c0                	test   eax,eax
c000b78b:	74 2f                	je     c000b7bc <tcp_eff_send_mss+0x64>
c000b78d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b791:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b794:	83 e8 28             	sub    eax,0x28
c000b797:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b79c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7a0:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000b7a5:	0f b7 d8             	movzx  ebx,ax
c000b7a8:	0f b7 ca             	movzx  ecx,dx
c000b7ab:	39 cb                	cmp    ebx,ecx
c000b7ad:	76 05                	jbe    c000b7b4 <tcp_eff_send_mss+0x5c>
c000b7af:	89 d0                	mov    eax,edx
c000b7b1:	8d 76 00             	lea    esi,[esi+0x0]
c000b7b4:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b7b9:	8d 76 00             	lea    esi,[esi+0x0]
c000b7bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7c0:	83 c4 28             	add    esp,0x28
c000b7c3:	5b                   	pop    ebx
c000b7c4:	c3                   	ret    
c000b7c5:	8d 76 00             	lea    esi,[esi+0x0]

c000b7c8 <tcp_connect>:
c000b7c8:	83 ec 2c             	sub    esp,0x2c
c000b7cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b7cf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b7d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7d8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b7db:	85 c0                	test   eax,eax
c000b7dd:	74 1d                	je     c000b7fc <tcp_connect+0x34>
c000b7df:	83 ec 08             	sub    esp,0x8
c000b7e2:	68 24 09 03 c0       	push   0xc0030924
c000b7e7:	68 86 01 03 c0       	push   0xc0030186
c000b7ec:	e8 e7 46 01 00       	call   c001fed8 <CPrintf>
c000b7f1:	83 c4 10             	add    esp,0x10
c000b7f4:	b0 f7                	mov    al,0xf7
c000b7f6:	e9 39 02 00 00       	jmp    c000ba34 <tcp_connect+0x26c>
c000b7fb:	90                   	nop
c000b7fc:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b801:	74 25                	je     c000b828 <tcp_connect+0x60>
c000b803:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b807:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b80b:	8b 12                	mov    edx,DWORD PTR [edx]
c000b80d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b810:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b814:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b818:	66 89 42 22          	mov    WORD PTR [edx+0x22],ax
c000b81c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b820:	85 c0                	test   eax,eax
c000b822:	74 18                	je     c000b83c <tcp_connect+0x74>
c000b824:	eb 0a                	jmp    c000b830 <tcp_connect+0x68>
c000b826:	66 90                	xchg   ax,ax
c000b828:	b0 fa                	mov    al,0xfa
c000b82a:	e9 05 02 00 00       	jmp    c000ba34 <tcp_connect+0x26c>
c000b82f:	90                   	nop
c000b830:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b834:	8b 00                	mov    eax,DWORD PTR [eax]
c000b836:	85 c0                	test   eax,eax
c000b838:	75 3a                	jne    c000b874 <tcp_connect+0xac>
c000b83a:	66 90                	xchg   ax,ax
c000b83c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b840:	83 c0 04             	add    eax,0x4
c000b843:	83 ec 0c             	sub    esp,0xc
c000b846:	50                   	push   eax
c000b847:	e8 50 7f 00 00       	call   c001379c <ip_route>
c000b84c:	83 c4 10             	add    esp,0x10
c000b84f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b853:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b858:	75 0a                	jne    c000b864 <tcp_connect+0x9c>
c000b85a:	b0 fc                	mov    al,0xfc
c000b85c:	e9 d3 01 00 00       	jmp    c000ba34 <tcp_connect+0x26c>
c000b861:	8d 76 00             	lea    esi,[esi+0x0]
c000b864:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b868:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b86b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b86f:	89 10                	mov    DWORD PTR [eax],edx
c000b871:	8d 76 00             	lea    esi,[esi+0x0]
c000b874:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b878:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b87b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b880:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b884:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b887:	0f b7 c0             	movzx  eax,ax
c000b88a:	85 c0                	test   eax,eax
c000b88c:	75 0e                	jne    c000b89c <tcp_connect+0xd4>
c000b88e:	e8 19 e7 ff ff       	call   c0009fac <tcp_new_port>
c000b893:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b897:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000b89b:	90                   	nop
c000b89c:	e8 df fc ff ff       	call   c000b580 <tcp_next_iss>
c000b8a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8a9:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c000b8b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b8b8:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b8bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8bf:	8d 50 ff             	lea    edx,[eax-0x1]
c000b8c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8c6:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b8c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8cd:	8d 50 ff             	lea    edx,[eax-0x1]
c000b8d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8d4:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b8d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8db:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b8e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8e5:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b8eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8ef:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000b8f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8f6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000b8f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8fd:	66 c7 40 60 60 08    	mov    WORD PTR [eax+0x60],0x860
c000b903:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b907:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b90d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b911:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b914:	0f b7 c0             	movzx  eax,ax
c000b917:	83 ec 08             	sub    esp,0x8
c000b91a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b91e:	50                   	push   eax
c000b91f:	e8 34 fe ff ff       	call   c000b758 <tcp_eff_send_mss>
c000b924:	83 c4 10             	add    esp,0x10
c000b927:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b92b:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000b92f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b933:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b939:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b93d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b940:	89 c2                	mov    edx,eax
c000b942:	c1 e2 02             	shl    edx,0x2
c000b945:	01 d0                	add    eax,edx
c000b947:	d1 e0                	shl    eax,1
c000b949:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b94d:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000b951:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b955:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b959:	89 90 90 00 00 00    	mov    DWORD PTR [eax+0x90],edx
c000b95f:	83 ec 08             	sub    esp,0x8
c000b962:	6a 02                	push   0x2
c000b964:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b968:	e8 1b 40 00 00       	call   c000f988 <tcp_enqueue_flags>
c000b96d:	83 c4 10             	add    esp,0x10
c000b970:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b974:	0f be 44 24 13       	movsx  eax,BYTE PTR [esp+0x13]
c000b979:	85 c0                	test   eax,eax
c000b97b:	0f 85 af 00 00 00    	jne    c000ba30 <tcp_connect+0x268>
c000b981:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b985:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b98c:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c000b991:	85 c0                	test   eax,eax
c000b993:	74 6f                	je     c000ba04 <tcp_connect+0x23c>
c000b995:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c000b99a:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b99e:	75 10                	jne    c000b9b0 <tcp_connect+0x1e8>
c000b9a0:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c000b9a5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9a8:	a3 80 78 03 c0       	mov    ds:0xc0037880,eax
c000b9ad:	eb 49                	jmp    c000b9f8 <tcp_connect+0x230>
c000b9af:	90                   	nop
c000b9b0:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c000b9b5:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000b9ba:	eb 30                	jmp    c000b9ec <tcp_connect+0x224>
c000b9bc:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000b9c1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9c4:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b9c8:	75 12                	jne    c000b9dc <tcp_connect+0x214>
c000b9ca:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000b9cf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b9d3:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000b9d6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b9d9:	eb 1d                	jmp    c000b9f8 <tcp_connect+0x230>
c000b9db:	90                   	nop
c000b9dc:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000b9e1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9e4:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000b9e9:	8d 76 00             	lea    esi,[esi+0x0]
c000b9ec:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000b9f1:	85 c0                	test   eax,eax
c000b9f3:	75 c7                	jne    c000b9bc <tcp_connect+0x1f4>
c000b9f5:	8d 76 00             	lea    esi,[esi+0x0]
c000b9f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b9fc:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ba03:	90                   	nop
c000ba04:	8b 15 70 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037870
c000ba0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba0e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ba11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba15:	a3 70 78 03 c0       	mov    ds:0xc0037870,eax
c000ba1a:	e8 95 52 00 00       	call   c0010cb4 <tcp_timer_needed>
c000ba1f:	83 ec 0c             	sub    esp,0xc
c000ba22:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ba26:	e8 f9 45 00 00       	call   c0010024 <tcp_output>
c000ba2b:	83 c4 10             	add    esp,0x10
c000ba2e:	66 90                	xchg   ax,ax
c000ba30:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c000ba34:	83 c4 2c             	add    esp,0x2c
c000ba37:	c3                   	ret    

c000ba38 <tcp_debug_state_str>:
c000ba38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba3c:	8b 04 85 a0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf560]
c000ba43:	c3                   	ret    

c000ba44 <tcp_timewait_input>:
c000ba44:	53                   	push   ebx
c000ba45:	83 ec 08             	sub    esp,0x8
c000ba48:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000ba4d:	0f b6 c0             	movzx  eax,al
c000ba50:	83 e0 04             	and    eax,0x4
c000ba53:	74 07                	je     c000ba5c <tcp_timewait_input+0x18>
c000ba55:	b0 00                	mov    al,0x0
c000ba57:	e9 e8 00 00 00       	jmp    c000bb44 <tcp_timewait_input+0x100>
c000ba5c:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000ba61:	0f b6 c0             	movzx  eax,al
c000ba64:	83 e0 02             	and    eax,0x2
c000ba67:	0f 84 83 00 00 00    	je     c000baf0 <tcp_timewait_input+0xac>
c000ba6d:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000ba73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba77:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ba7a:	29 c2                	sub    edx,eax
c000ba7c:	89 d0                	mov    eax,edx
c000ba7e:	0f 88 88 00 00 00    	js     c000bb0c <tcp_timewait_input+0xc8>
c000ba84:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000ba8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba8e:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000ba91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba95:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ba98:	0f b7 c0             	movzx  eax,ax
c000ba9b:	01 c8                	add    eax,ecx
c000ba9d:	29 c2                	sub    edx,eax
c000ba9f:	89 d0                	mov    eax,edx
c000baa1:	85 c0                	test   eax,eax
c000baa3:	7f 67                	jg     c000bb0c <tcp_timewait_input+0xc8>
c000baa5:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000baaa:	66 8b 00             	mov    ax,WORD PTR [eax]
c000baad:	0f b7 c8             	movzx  ecx,ax
c000bab0:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000bab5:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000bab9:	0f b7 d0             	movzx  edx,ax
c000babc:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000bac2:	0f b7 d8             	movzx  ebx,ax
c000bac5:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000baca:	01 c3                	add    ebx,eax
c000bacc:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000bad1:	83 ec 08             	sub    esp,0x8
c000bad4:	51                   	push   ecx
c000bad5:	52                   	push   edx
c000bad6:	68 90 78 03 c0       	push   0xc0037890
c000badb:	68 98 78 03 c0       	push   0xc0037898
c000bae0:	53                   	push   ebx
c000bae1:	50                   	push   eax
c000bae2:	e8 c9 49 00 00       	call   c00104b0 <tcp_rst>
c000bae7:	83 c4 20             	add    esp,0x20
c000baea:	b0 00                	mov    al,0x0
c000baec:	eb 56                	jmp    c000bb44 <tcp_timewait_input+0x100>
c000baee:	66 90                	xchg   ax,ax
c000baf0:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000baf5:	0f b6 c0             	movzx  eax,al
c000baf8:	83 e0 01             	and    eax,0x1
c000bafb:	74 0f                	je     c000bb0c <tcp_timewait_input+0xc8>
c000bafd:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000bb03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb07:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000bb0a:	66 90                	xchg   ax,ax
c000bb0c:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000bb12:	0f b7 c0             	movzx  eax,ax
c000bb15:	85 c0                	test   eax,eax
c000bb17:	74 27                	je     c000bb40 <tcp_timewait_input+0xfc>
c000bb19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb1d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bb20:	83 c8 02             	or     eax,0x2
c000bb23:	88 c2                	mov    dl,al
c000bb25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb29:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bb2c:	83 ec 0c             	sub    esp,0xc
c000bb2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb33:	e8 ec 44 00 00       	call   c0010024 <tcp_output>
c000bb38:	83 c4 10             	add    esp,0x10
c000bb3b:	eb 07                	jmp    c000bb44 <tcp_timewait_input+0x100>
c000bb3d:	8d 76 00             	lea    esi,[esi+0x0]
c000bb40:	b0 00                	mov    al,0x0
c000bb42:	66 90                	xchg   ax,ax
c000bb44:	83 c4 08             	add    esp,0x8
c000bb47:	5b                   	pop    ebx
c000bb48:	c3                   	ret    
c000bb49:	8d 76 00             	lea    esi,[esi+0x0]

c000bb4c <tcp_oos_insert_segment>:
c000bb4c:	53                   	push   ebx
c000bb4d:	83 ec 18             	sub    esp,0x18
c000bb50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb54:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bb57:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bb5b:	0f b7 c0             	movzx  eax,ax
c000bb5e:	83 ec 0c             	sub    esp,0xc
c000bb61:	50                   	push   eax
c000bb62:	e8 81 50 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000bb67:	83 c4 10             	add    esp,0x10
c000bb6a:	0f b7 c0             	movzx  eax,ax
c000bb6d:	83 e0 01             	and    eax,0x1
c000bb70:	0f 84 8e 00 00 00    	je     c000bc04 <tcp_oos_insert_segment+0xb8>
c000bb76:	83 ec 0c             	sub    esp,0xc
c000bb79:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bb7d:	e8 2e e6 ff ff       	call   c000a1b0 <tcp_segs_free>
c000bb82:	83 c4 10             	add    esp,0x10
c000bb85:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000bb8d:	e9 16 01 00 00       	jmp    c000bca8 <tcp_oos_insert_segment+0x15c>
c000bb92:	66 90                	xchg   ax,ax
c000bb94:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bb98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bb9b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bb9f:	0f b7 c0             	movzx  eax,ax
c000bba2:	83 ec 0c             	sub    esp,0xc
c000bba5:	50                   	push   eax
c000bba6:	e8 3d 50 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000bbab:	83 c4 10             	add    esp,0x10
c000bbae:	0f b7 c0             	movzx  eax,ax
c000bbb1:	83 e0 01             	and    eax,0x1
c000bbb4:	74 2a                	je     c000bbe0 <tcp_oos_insert_segment+0x94>
c000bbb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bbbd:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000bbc1:	83 ec 0c             	sub    esp,0xc
c000bbc4:	6a 01                	push   0x1
c000bbc6:	e8 1d 50 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000bbcb:	83 c4 10             	add    esp,0x10
c000bbce:	89 c1                	mov    ecx,eax
c000bbd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbd4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000bbd7:	89 d8                	mov    eax,ebx
c000bbd9:	09 c8                	or     eax,ecx
c000bbdb:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000bbdf:	90                   	nop
c000bbe0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bbe4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bbe8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bbec:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbee:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bbf2:	83 ec 0c             	sub    esp,0xc
c000bbf5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbf9:	e8 6e e5 ff ff       	call   c000a16c <tcp_seg_free>
c000bbfe:	83 c4 10             	add    esp,0x10
c000bc01:	8d 76 00             	lea    esi,[esi+0x0]
c000bc04:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000bc09:	74 35                	je     c000bc40 <tcp_oos_insert_segment+0xf4>
c000bc0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc0f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc12:	0f b7 d0             	movzx  edx,ax
c000bc15:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000bc1a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000bc1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc21:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc24:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bc27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc2b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc2e:	0f b7 c0             	movzx  eax,ax
c000bc31:	01 d0                	add    eax,edx
c000bc33:	29 c1                	sub    ecx,eax
c000bc35:	89 c8                	mov    eax,ecx
c000bc37:	0f 89 57 ff ff ff    	jns    c000bb94 <tcp_oos_insert_segment+0x48>
c000bc3d:	8d 76 00             	lea    esi,[esi+0x0]
c000bc40:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000bc45:	74 61                	je     c000bca8 <tcp_oos_insert_segment+0x15c>
c000bc47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc4b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc4e:	0f b7 d0             	movzx  edx,ax
c000bc51:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000bc56:	01 c2                	add    edx,eax
c000bc58:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bc62:	29 c2                	sub    edx,eax
c000bc64:	89 d0                	mov    eax,edx
c000bc66:	85 c0                	test   eax,eax
c000bc68:	7e 3e                	jle    c000bca8 <tcp_oos_insert_segment+0x15c>
c000bc6a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc6e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bc74:	89 c2                	mov    edx,eax
c000bc76:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000bc7b:	89 d3                	mov    ebx,edx
c000bc7d:	29 c3                	sub    ebx,eax
c000bc7f:	89 d8                	mov    eax,ebx
c000bc81:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bc85:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000bc89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc8d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc90:	0f b7 d0             	movzx  edx,ax
c000bc93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bc9a:	83 ec 08             	sub    esp,0x8
c000bc9d:	52                   	push   edx
c000bc9e:	50                   	push   eax
c000bc9f:	e8 20 ce ff ff       	call   c0008ac4 <pbuf_realloc>
c000bca4:	83 c4 10             	add    esp,0x10
c000bca7:	90                   	nop
c000bca8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcac:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bcb0:	89 10                	mov    DWORD PTR [eax],edx
c000bcb2:	90                   	nop
c000bcb3:	83 c4 18             	add    esp,0x18
c000bcb6:	5b                   	pop    ebx
c000bcb7:	c3                   	ret    

c000bcb8 <tcp_receive>:
c000bcb8:	57                   	push   edi
c000bcb9:	56                   	push   esi
c000bcba:	53                   	push   ebx
c000bcbb:	83 ec 30             	sub    esp,0x30
c000bcbe:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bcc6:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000bccb:	0f b6 c0             	movzx  eax,al
c000bcce:	83 e0 10             	and    eax,0x10
c000bcd1:	0f 84 e5 07 00 00    	je     c000c4bc <tcp_receive+0x804>
c000bcd7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcdb:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bcde:	0f b7 d0             	movzx  edx,ax
c000bce1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bce5:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000bce8:	01 d0                	add    eax,edx
c000bcea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bcee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcf2:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bcf5:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000bcfa:	29 c2                	sub    edx,eax
c000bcfc:	89 d0                	mov    eax,edx
c000bcfe:	78 50                	js     c000bd50 <tcp_receive+0x98>
c000bd00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd04:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bd07:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000bd0c:	39 c2                	cmp    edx,eax
c000bd0e:	75 14                	jne    c000bd24 <tcp_receive+0x6c>
c000bd10:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd14:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bd17:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000bd1c:	29 c2                	sub    edx,eax
c000bd1e:	89 d0                	mov    eax,edx
c000bd20:	78 2e                	js     c000bd50 <tcp_receive+0x98>
c000bd22:	66 90                	xchg   ax,ax
c000bd24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd28:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bd2b:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000bd30:	39 c2                	cmp    edx,eax
c000bd32:	75 74                	jne    c000bda8 <tcp_receive+0xf0>
c000bd34:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000bd39:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000bd3d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd41:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bd44:	0f b7 d2             	movzx  edx,dx
c000bd47:	0f b7 c0             	movzx  eax,ax
c000bd4a:	39 c2                	cmp    edx,eax
c000bd4c:	76 5a                	jbe    c000bda8 <tcp_receive+0xf0>
c000bd4e:	66 90                	xchg   ax,ax
c000bd50:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000bd55:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000bd59:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bd5d:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000bd61:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000bd67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd6b:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000bd6e:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000bd74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd78:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000bd7b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd7f:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bd82:	0f b7 c0             	movzx  eax,ax
c000bd85:	85 c0                	test   eax,eax
c000bd87:	74 1f                	je     c000bda8 <tcp_receive+0xf0>
c000bd89:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd8d:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000bd93:	0f b6 c0             	movzx  eax,al
c000bd96:	85 c0                	test   eax,eax
c000bd98:	74 0e                	je     c000bda8 <tcp_receive+0xf0>
c000bd9a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd9e:	c6 80 a4 00 00 00 00 	mov    BYTE PTR [eax+0xa4],0x0
c000bda5:	8d 76 00             	lea    esi,[esi+0x0]
c000bda8:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000bdae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdb2:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bdb5:	29 c2                	sub    edx,eax
c000bdb7:	89 d0                	mov    eax,edx
c000bdb9:	85 c0                	test   eax,eax
c000bdbb:	0f 8f ff 00 00 00    	jg     c000bec0 <tcp_receive+0x208>
c000bdc1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdc5:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000bdcb:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000bdd1:	0f b7 c0             	movzx  eax,ax
c000bdd4:	85 c0                	test   eax,eax
c000bdd6:	0f 85 cc 00 00 00    	jne    c000bea8 <tcp_receive+0x1f0>
c000bddc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bde0:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bde3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bde7:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bdea:	0f b7 c0             	movzx  eax,ax
c000bded:	01 d0                	add    eax,edx
c000bdef:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000bdf3:	0f 85 af 00 00 00    	jne    c000bea8 <tcp_receive+0x1f0>
c000bdf9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdfd:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000be01:	98                   	cwde   
c000be02:	85 c0                	test   eax,eax
c000be04:	0f 88 9e 00 00 00    	js     c000bea8 <tcp_receive+0x1f0>
c000be0a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be0e:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000be11:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000be16:	39 c2                	cmp    edx,eax
c000be18:	0f 85 8a 00 00 00    	jne    c000bea8 <tcp_receive+0x1f0>
c000be1e:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000be26:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be2a:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000be2d:	83 c0 01             	add    eax,0x1
c000be30:	88 c2                	mov    dl,al
c000be32:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be36:	88 50 54             	mov    BYTE PTR [eax+0x54],dl
c000be39:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be3d:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000be40:	0f b6 c0             	movzx  eax,al
c000be43:	83 f8 03             	cmp    eax,0x3
c000be46:	76 40                	jbe    c000be88 <tcp_receive+0x1d0>
c000be48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be4c:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be50:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be54:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be57:	01 d0                	add    eax,edx
c000be59:	89 c2                	mov    edx,eax
c000be5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be5f:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000be63:	0f b7 d2             	movzx  edx,dx
c000be66:	0f b7 c0             	movzx  eax,ax
c000be69:	39 c2                	cmp    edx,eax
c000be6b:	76 3b                	jbe    c000bea8 <tcp_receive+0x1f0>
c000be6d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be71:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be75:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be79:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be7c:	01 d0                	add    eax,edx
c000be7e:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000be82:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000be86:	eb 20                	jmp    c000bea8 <tcp_receive+0x1f0>
c000be88:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be8c:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000be8f:	0f b6 c0             	movzx  eax,al
c000be92:	83 f8 03             	cmp    eax,0x3
c000be95:	75 11                	jne    c000bea8 <tcp_receive+0x1f0>
c000be97:	83 ec 0c             	sub    esp,0xc
c000be9a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be9e:	e8 d9 48 00 00       	call   c001077c <tcp_rexmit_fast>
c000bea3:	83 c4 10             	add    esp,0x10
c000bea6:	66 90                	xchg   ax,ax
c000bea8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bead:	0f 85 99 04 00 00    	jne    c000c34c <tcp_receive+0x694>
c000beb3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000beb7:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bebb:	e9 8c 04 00 00       	jmp    c000c34c <tcp_receive+0x694>
c000bec0:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000bec6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000beca:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000becd:	29 c2                	sub    edx,eax
c000becf:	89 d0                	mov    eax,edx
c000bed1:	83 e8 01             	sub    eax,0x1
c000bed4:	0f 88 4a 03 00 00    	js     c000c224 <tcp_receive+0x56c>
c000beda:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000bee0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bee4:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000bee7:	29 c2                	sub    edx,eax
c000bee9:	89 d0                	mov    eax,edx
c000beeb:	85 c0                	test   eax,eax
c000beed:	0f 8f 31 03 00 00    	jg     c000c224 <tcp_receive+0x56c>
c000bef3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bef7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000befa:	0f b6 c0             	movzx  eax,al
c000befd:	83 e0 04             	and    eax,0x4
c000bf00:	74 22                	je     c000bf24 <tcp_receive+0x26c>
c000bf02:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf06:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bf09:	83 e0 fb             	and    eax,0xfffffffb
c000bf0c:	88 c2                	mov    dl,al
c000bf0e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf12:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bf15:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf19:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000bf1c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf20:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000bf24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf28:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000bf2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf30:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000bf33:	98                   	cwde   
c000bf34:	c1 f8 03             	sar    eax,0x3
c000bf37:	89 c2                	mov    edx,eax
c000bf39:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf3d:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000bf41:	01 d0                	add    eax,edx
c000bf43:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf47:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000bf4b:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000bf50:	89 c2                	mov    edx,eax
c000bf52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf56:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bf59:	89 d7                	mov    edi,edx
c000bf5b:	29 c7                	sub    edi,eax
c000bf5d:	89 f8                	mov    eax,edi
c000bf5f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf63:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000bf67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf6b:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000bf6f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf73:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bf76:	01 d0                	add    eax,edx
c000bf78:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf7c:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000bf80:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf84:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bf88:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000bf8e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf92:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000bf95:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf99:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bf9c:	83 f8 03             	cmp    eax,0x3
c000bf9f:	0f 86 db 01 00 00    	jbe    c000c180 <tcp_receive+0x4c8>
c000bfa5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfa9:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bfad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfb1:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000bfb4:	0f b7 d2             	movzx  edx,dx
c000bfb7:	0f b7 c0             	movzx  eax,ax
c000bfba:	39 c2                	cmp    edx,eax
c000bfbc:	73 4a                	jae    c000c008 <tcp_receive+0x350>
c000bfbe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfc2:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bfc6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bfcd:	01 d0                	add    eax,edx
c000bfcf:	89 c2                	mov    edx,eax
c000bfd1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfd5:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bfd9:	0f b7 d2             	movzx  edx,dx
c000bfdc:	0f b7 c0             	movzx  eax,ax
c000bfdf:	39 c2                	cmp    edx,eax
c000bfe1:	0f 86 99 01 00 00    	jbe    c000c180 <tcp_receive+0x4c8>
c000bfe7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfeb:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bfef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bff3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bff6:	01 d0                	add    eax,edx
c000bff8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bffc:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000c000:	e9 7b 01 00 00       	jmp    c000c180 <tcp_receive+0x4c8>
c000c005:	8d 76 00             	lea    esi,[esi+0x0]
c000c008:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c00c:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c000c010:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c014:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c017:	0f b7 d0             	movzx  edx,ax
c000c01a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c01e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c021:	0f b7 c0             	movzx  eax,ax
c000c024:	0f af d0             	imul   edx,eax
c000c027:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c02b:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000c02f:	0f b7 d8             	movzx  ebx,ax
c000c032:	89 d0                	mov    eax,edx
c000c034:	89 c2                	mov    edx,eax
c000c036:	c1 fa 1f             	sar    edx,0x1f
c000c039:	f7 fb                	idiv   ebx
c000c03b:	01 c8                	add    eax,ecx
c000c03d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000c042:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c046:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000c04a:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c000c04f:	0f b7 c0             	movzx  eax,ax
c000c052:	39 c2                	cmp    edx,eax
c000c054:	0f 86 26 01 00 00    	jbe    c000c180 <tcp_receive+0x4c8>
c000c05a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c05e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000c063:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000c067:	e9 14 01 00 00       	jmp    c000c180 <tcp_receive+0x4c8>
c000c06c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c070:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c073:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c077:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c07b:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c07e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c080:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c084:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000c087:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c08b:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c08e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c092:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c095:	83 ec 0c             	sub    esp,0xc
c000c098:	50                   	push   eax
c000c099:	e8 2a cc ff ff       	call   c0008cc8 <pbuf_clen>
c000c09e:	83 c4 10             	add    esp,0x10
c000c0a1:	0f b6 c0             	movzx  eax,al
c000c0a4:	0f b7 d3             	movzx  edx,bx
c000c0a7:	0f b7 c0             	movzx  eax,ax
c000c0aa:	39 c2                	cmp    edx,eax
c000c0ac:	73 16                	jae    c000c0c4 <tcp_receive+0x40c>
c000c0ae:	83 ec 08             	sub    esp,0x8
c000c0b1:	68 cc 0a 03 c0       	push   0xc0030acc
c000c0b6:	68 86 01 03 c0       	push   0xc0030186
c000c0bb:	e8 18 3e 01 00       	call   c001fed8 <CPrintf>
c000c0c0:	83 c4 10             	add    esp,0x10
c000c0c3:	90                   	nop
c000c0c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0c8:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c0cb:	0f b7 c0             	movzx  eax,ax
c000c0ce:	85 c0                	test   eax,eax
c000c0d0:	74 36                	je     c000c108 <tcp_receive+0x450>
c000c0d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c0d6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c0d9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c0dd:	0f b7 c0             	movzx  eax,ax
c000c0e0:	83 ec 0c             	sub    esp,0xc
c000c0e3:	50                   	push   eax
c000c0e4:	e8 ff 4a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c0e9:	83 c4 10             	add    esp,0x10
c000c0ec:	0f b7 c0             	movzx  eax,ax
c000c0ef:	83 e0 01             	and    eax,0x1
c000c0f2:	74 14                	je     c000c108 <tcp_receive+0x450>
c000c0f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0f8:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c0fb:	83 e8 01             	sub    eax,0x1
c000c0fe:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c102:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000c106:	66 90                	xchg   ax,ax
c000c108:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c10c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c10f:	83 ec 0c             	sub    esp,0xc
c000c112:	50                   	push   eax
c000c113:	e8 b0 cb ff ff       	call   c0008cc8 <pbuf_clen>
c000c118:	83 c4 10             	add    esp,0x10
c000c11b:	88 c1                	mov    cl,al
c000c11d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c121:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c124:	0f b6 c1             	movzx  eax,cl
c000c127:	89 d7                	mov    edi,edx
c000c129:	29 c7                	sub    edi,eax
c000c12b:	89 f8                	mov    eax,edi
c000c12d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c131:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000c135:	83 ec 0c             	sub    esp,0xc
c000c138:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c13c:	e8 2b e0 ff ff       	call   c000a16c <tcp_seg_free>
c000c141:	83 c4 10             	add    esp,0x10
c000c144:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c148:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c14b:	0f b7 c0             	movzx  eax,ax
c000c14e:	85 c0                	test   eax,eax
c000c150:	74 2e                	je     c000c180 <tcp_receive+0x4c8>
c000c152:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c156:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c159:	85 c0                	test   eax,eax
c000c15b:	75 23                	jne    c000c180 <tcp_receive+0x4c8>
c000c15d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c161:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c164:	85 c0                	test   eax,eax
c000c166:	75 18                	jne    c000c180 <tcp_receive+0x4c8>
c000c168:	83 ec 08             	sub    esp,0x8
c000c16b:	68 f4 0a 03 c0       	push   0xc0030af4
c000c170:	68 86 01 03 c0       	push   0xc0030186
c000c175:	e8 5e 3d 01 00       	call   c001fed8 <CPrintf>
c000c17a:	83 c4 10             	add    esp,0x10
c000c17d:	8d 76 00             	lea    esi,[esi+0x0]
c000c180:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c184:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c187:	85 c0                	test   eax,eax
c000c189:	74 69                	je     c000c1f4 <tcp_receive+0x53c>
c000c18b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c18f:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c192:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c195:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c198:	83 ec 0c             	sub    esp,0xc
c000c19b:	50                   	push   eax
c000c19c:	e8 6b 4a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000c1a1:	83 c4 10             	add    esp,0x10
c000c1a4:	89 c3                	mov    ebx,eax
c000c1a6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1aa:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1ad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c1b0:	0f b7 f0             	movzx  esi,ax
c000c1b3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1b7:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1ba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c1bd:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c1c1:	0f b7 c0             	movzx  eax,ax
c000c1c4:	83 ec 0c             	sub    esp,0xc
c000c1c7:	50                   	push   eax
c000c1c8:	e8 1b 4a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	0f b7 c0             	movzx  eax,ax
c000c1d3:	83 e0 03             	and    eax,0x3
c000c1d6:	0f 95 c0             	setne  al
c000c1d9:	0f b6 c0             	movzx  eax,al
c000c1dc:	01 f0                	add    eax,esi
c000c1de:	8d 14 03             	lea    edx,[ebx+eax*1]
c000c1e1:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000c1e6:	29 c2                	sub    edx,eax
c000c1e8:	89 d0                	mov    eax,edx
c000c1ea:	85 c0                	test   eax,eax
c000c1ec:	0f 8e 7a fe ff ff    	jle    c000c06c <tcp_receive+0x3b4>
c000c1f2:	66 90                	xchg   ax,ax
c000c1f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1f8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1fb:	85 c0                	test   eax,eax
c000c1fd:	75 0d                	jne    c000c20c <tcp_receive+0x554>
c000c1ff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c203:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000c209:	eb 0d                	jmp    c000c218 <tcp_receive+0x560>
c000c20b:	90                   	nop
c000c20c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c210:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000c216:	66 90                	xchg   ax,ax
c000c218:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c21c:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000c220:	eb 0e                	jmp    c000c230 <tcp_receive+0x578>
c000c222:	66 90                	xchg   ax,ax
c000c224:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c228:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000c22e:	66 90                	xchg   ax,ax
c000c230:	e9 17 01 00 00       	jmp    c000c34c <tcp_receive+0x694>
c000c235:	8d 76 00             	lea    esi,[esi+0x0]
c000c238:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c23c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c23f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c243:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c247:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c24a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c24c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c250:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000c253:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c257:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c25a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c25e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c261:	83 ec 0c             	sub    esp,0xc
c000c264:	50                   	push   eax
c000c265:	e8 5e ca ff ff       	call   c0008cc8 <pbuf_clen>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	0f b6 c0             	movzx  eax,al
c000c270:	0f b7 d3             	movzx  edx,bx
c000c273:	0f b7 c0             	movzx  eax,ax
c000c276:	39 c2                	cmp    edx,eax
c000c278:	73 16                	jae    c000c290 <tcp_receive+0x5d8>
c000c27a:	83 ec 08             	sub    esp,0x8
c000c27d:	68 cc 0a 03 c0       	push   0xc0030acc
c000c282:	68 86 01 03 c0       	push   0xc0030186
c000c287:	e8 4c 3c 01 00       	call   c001fed8 <CPrintf>
c000c28c:	83 c4 10             	add    esp,0x10
c000c28f:	90                   	nop
c000c290:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c294:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c297:	0f b7 c0             	movzx  eax,ax
c000c29a:	85 c0                	test   eax,eax
c000c29c:	74 36                	je     c000c2d4 <tcp_receive+0x61c>
c000c29e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c2a2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2a5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c2a9:	0f b7 c0             	movzx  eax,ax
c000c2ac:	83 ec 0c             	sub    esp,0xc
c000c2af:	50                   	push   eax
c000c2b0:	e8 33 49 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c2b5:	83 c4 10             	add    esp,0x10
c000c2b8:	0f b7 c0             	movzx  eax,ax
c000c2bb:	83 e0 01             	and    eax,0x1
c000c2be:	74 14                	je     c000c2d4 <tcp_receive+0x61c>
c000c2c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2c4:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c2c7:	83 e8 01             	sub    eax,0x1
c000c2ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2ce:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000c2d2:	66 90                	xchg   ax,ax
c000c2d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c2d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c2db:	83 ec 0c             	sub    esp,0xc
c000c2de:	50                   	push   eax
c000c2df:	e8 e4 c9 ff ff       	call   c0008cc8 <pbuf_clen>
c000c2e4:	83 c4 10             	add    esp,0x10
c000c2e7:	88 c1                	mov    cl,al
c000c2e9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2ed:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c2f0:	0f b6 c1             	movzx  eax,cl
c000c2f3:	89 d6                	mov    esi,edx
c000c2f5:	29 c6                	sub    esi,eax
c000c2f7:	89 f0                	mov    eax,esi
c000c2f9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2fd:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000c301:	83 ec 0c             	sub    esp,0xc
c000c304:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c308:	e8 5f de ff ff       	call   c000a16c <tcp_seg_free>
c000c30d:	83 c4 10             	add    esp,0x10
c000c310:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c314:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c317:	0f b7 c0             	movzx  eax,ax
c000c31a:	85 c0                	test   eax,eax
c000c31c:	74 2e                	je     c000c34c <tcp_receive+0x694>
c000c31e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c322:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c325:	85 c0                	test   eax,eax
c000c327:	75 23                	jne    c000c34c <tcp_receive+0x694>
c000c329:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c32d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c330:	85 c0                	test   eax,eax
c000c332:	75 18                	jne    c000c34c <tcp_receive+0x694>
c000c334:	83 ec 08             	sub    esp,0x8
c000c337:	68 f4 0a 03 c0       	push   0xc0030af4
c000c33c:	68 86 01 03 c0       	push   0xc0030186
c000c341:	e8 92 3b 01 00       	call   c001fed8 <CPrintf>
c000c346:	83 c4 10             	add    esp,0x10
c000c349:	8d 76 00             	lea    esi,[esi+0x0]
c000c34c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c350:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c353:	85 c0                	test   eax,eax
c000c355:	74 7d                	je     c000c3d4 <tcp_receive+0x71c>
c000c357:	8b 1d b0 b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8b0
c000c35d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c361:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c364:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c367:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c36a:	83 ec 0c             	sub    esp,0xc
c000c36d:	50                   	push   eax
c000c36e:	e8 99 48 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000c373:	83 c4 10             	add    esp,0x10
c000c376:	89 c6                	mov    esi,eax
c000c378:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c37c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c37f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c382:	0f b7 f8             	movzx  edi,ax
c000c385:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c389:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c38c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c38f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c393:	0f b7 c0             	movzx  eax,ax
c000c396:	83 ec 0c             	sub    esp,0xc
c000c399:	50                   	push   eax
c000c39a:	e8 49 48 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c39f:	83 c4 10             	add    esp,0x10
c000c3a2:	0f b7 c0             	movzx  eax,ax
c000c3a5:	83 e0 03             	and    eax,0x3
c000c3a8:	0f 95 c0             	setne  al
c000c3ab:	0f b6 c0             	movzx  eax,al
c000c3ae:	01 f8                	add    eax,edi
c000c3b0:	01 f0                	add    eax,esi
c000c3b2:	29 c3                	sub    ebx,eax
c000c3b4:	89 d8                	mov    eax,ebx
c000c3b6:	78 1c                	js     c000c3d4 <tcp_receive+0x71c>
c000c3b8:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000c3be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3c2:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000c3c5:	29 c2                	sub    edx,eax
c000c3c7:	89 d0                	mov    eax,edx
c000c3c9:	85 c0                	test   eax,eax
c000c3cb:	0f 8e 67 fe ff ff    	jle    c000c238 <tcp_receive+0x580>
c000c3d1:	8d 76 00             	lea    esi,[esi+0x0]
c000c3d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c3db:	85 c0                	test   eax,eax
c000c3dd:	0f 84 d9 00 00 00    	je     c000c4bc <tcp_receive+0x804>
c000c3e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3e7:	8b 50 44             	mov    edx,DWORD PTR [eax+0x44]
c000c3ea:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000c3ef:	29 c2                	sub    edx,eax
c000c3f1:	89 d0                	mov    eax,edx
c000c3f3:	0f 89 c3 00 00 00    	jns    c000c4bc <tcp_receive+0x804>
c000c3f9:	a1 74 78 03 c0       	mov    eax,ds:0xc0037874
c000c3fe:	89 c2                	mov    edx,eax
c000c400:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c404:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c407:	89 d7                	mov    edi,edx
c000c409:	29 c7                	sub    edi,eax
c000c40b:	89 f8                	mov    eax,edi
c000c40d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c412:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c417:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c41b:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c41e:	98                   	cwde   
c000c41f:	c1 f8 03             	sar    eax,0x3
c000c422:	89 d6                	mov    esi,edx
c000c424:	29 c6                	sub    esi,eax
c000c426:	89 f0                	mov    eax,esi
c000c428:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c42d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c431:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c434:	89 c2                	mov    edx,eax
c000c436:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c43b:	01 d0                	add    eax,edx
c000c43d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c441:	66 89 42 48          	mov    WORD PTR [edx+0x48],ax
c000c445:	0f bf 44 24 1e       	movsx  eax,WORD PTR [esp+0x1e]
c000c44a:	85 c0                	test   eax,eax
c000c44c:	79 0e                	jns    c000c45c <tcp_receive+0x7a4>
c000c44e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c453:	f7 d8                	neg    eax
c000c455:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c45a:	66 90                	xchg   ax,ax
c000c45c:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c461:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c465:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c469:	98                   	cwde   
c000c46a:	c1 f8 02             	sar    eax,0x2
c000c46d:	89 d7                	mov    edi,edx
c000c46f:	29 c7                	sub    edi,eax
c000c471:	89 f8                	mov    eax,edi
c000c473:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c478:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c47c:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c480:	89 c2                	mov    edx,eax
c000c482:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c487:	01 d0                	add    eax,edx
c000c489:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c48d:	66 89 42 4a          	mov    WORD PTR [edx+0x4a],ax
c000c491:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c495:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c498:	98                   	cwde   
c000c499:	c1 f8 03             	sar    eax,0x3
c000c49c:	89 c2                	mov    edx,eax
c000c49e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4a2:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c4a6:	01 d0                	add    eax,edx
c000c4a8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c4ac:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000c4b0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4b4:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c000c4bb:	90                   	nop
c000c4bc:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000c4c2:	0f b7 c0             	movzx  eax,ax
c000c4c5:	85 c0                	test   eax,eax
c000c4c7:	0f 84 2f 0e 00 00    	je     c000d2fc <tcp_receive+0x1644>
c000c4cd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4d1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c4d4:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000c4d9:	29 c2                	sub    edx,eax
c000c4db:	89 d0                	mov    eax,edx
c000c4dd:	83 e8 01             	sub    eax,0x1
c000c4e0:	0f 88 c6 01 00 00    	js     c000c6ac <tcp_receive+0x9f4>
c000c4e6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4ea:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c4ed:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000c4f3:	0f b7 c8             	movzx  ecx,ax
c000c4f6:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000c4fb:	01 c8                	add    eax,ecx
c000c4fd:	29 c2                	sub    edx,eax
c000c4ff:	89 d0                	mov    eax,edx
c000c501:	83 c0 01             	add    eax,0x1
c000c504:	85 c0                	test   eax,eax
c000c506:	0f 8f a0 01 00 00    	jg     c000c6ac <tcp_receive+0x9f4>
c000c50c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c510:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c513:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000c518:	29 c2                	sub    edx,eax
c000c51a:	89 d0                	mov    eax,edx
c000c51c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c520:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000c525:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c529:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000c52e:	85 c0                	test   eax,eax
c000c530:	75 16                	jne    c000c548 <tcp_receive+0x890>
c000c532:	83 ec 08             	sub    esp,0x8
c000c535:	68 f1 0c 03 c0       	push   0xc0030cf1
c000c53a:	68 86 01 03 c0       	push   0xc0030186
c000c53f:	e8 94 39 01 00       	call   c001fed8 <CPrintf>
c000c544:	83 c4 10             	add    esp,0x10
c000c547:	90                   	nop
c000c548:	81 7c 24 20 fe 7f 00 00 	cmp    DWORD PTR [esp+0x20],0x7ffe
c000c550:	7e 16                	jle    c000c568 <tcp_receive+0x8b0>
c000c552:	83 ec 08             	sub    esp,0x8
c000c555:	68 01 0d 03 c0       	push   0xc0030d01
c000c55a:	68 86 01 03 c0       	push   0xc0030186
c000c55f:	e8 74 39 01 00       	call   c001fed8 <CPrintf>
c000c564:	83 c4 10             	add    esp,0x10
c000c567:	90                   	nop
c000c568:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000c56d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c571:	0f b7 c0             	movzx  eax,ax
c000c574:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c578:	0f 8e b6 00 00 00    	jle    c000c634 <tcp_receive+0x97c>
c000c57e:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000c583:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c586:	0f b7 c0             	movzx  eax,ax
c000c589:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c58d:	7e 15                	jle    c000c5a4 <tcp_receive+0x8ec>
c000c58f:	83 ec 08             	sub    esp,0x8
c000c592:	68 10 0d 03 c0       	push   0xc0030d10
c000c597:	68 86 01 03 c0       	push   0xc0030186
c000c59c:	e8 37 39 01 00       	call   c001fed8 <CPrintf>
c000c5a1:	83 c4 10             	add    esp,0x10
c000c5a4:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000c5a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c5ac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c5b0:	29 d0                	sub    eax,edx
c000c5b2:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000c5b7:	eb 33                	jmp    c000c5ec <tcp_receive+0x934>
c000c5b9:	8d 76 00             	lea    esi,[esi+0x0]
c000c5bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c5c0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c5c4:	0f b7 c0             	movzx  eax,ax
c000c5c7:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c000c5cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c5cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5d3:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000c5d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c5db:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c000c5e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c5e5:	8b 00                	mov    eax,DWORD PTR [eax]
c000c5e7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c5eb:	90                   	nop
c000c5ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c5f0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c5f4:	0f b7 c0             	movzx  eax,ax
c000c5f7:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c5fb:	7f bf                	jg     c000c5bc <tcp_receive+0x904>
c000c5fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c601:	f7 d8                	neg    eax
c000c603:	98                   	cwde   
c000c604:	83 ec 08             	sub    esp,0x8
c000c607:	50                   	push   eax
c000c608:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c60c:	e8 47 bd ff ff       	call   c0008358 <pbuf_header>
c000c611:	83 c4 10             	add    esp,0x10
c000c614:	0f b6 c0             	movzx  eax,al
c000c617:	85 c0                	test   eax,eax
c000c619:	74 51                	je     c000c66c <tcp_receive+0x9b4>
c000c61b:	83 ec 08             	sub    esp,0x8
c000c61e:	68 20 0d 03 c0       	push   0xc0030d20
c000c623:	68 86 01 03 c0       	push   0xc0030186
c000c628:	e8 ab 38 01 00       	call   c001fed8 <CPrintf>
c000c62d:	83 c4 10             	add    esp,0x10
c000c630:	eb 3a                	jmp    c000c66c <tcp_receive+0x9b4>
c000c632:	66 90                	xchg   ax,ax
c000c634:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c638:	f7 d8                	neg    eax
c000c63a:	0f bf d0             	movsx  edx,ax
c000c63d:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000c642:	83 ec 08             	sub    esp,0x8
c000c645:	52                   	push   edx
c000c646:	50                   	push   eax
c000c647:	e8 0c bd ff ff       	call   c0008358 <pbuf_header>
c000c64c:	83 c4 10             	add    esp,0x10
c000c64f:	0f b6 c0             	movzx  eax,al
c000c652:	85 c0                	test   eax,eax
c000c654:	74 16                	je     c000c66c <tcp_receive+0x9b4>
c000c656:	83 ec 08             	sub    esp,0x8
c000c659:	68 20 0d 03 c0       	push   0xc0030d20
c000c65e:	68 86 01 03 c0       	push   0xc0030186
c000c663:	e8 70 38 01 00       	call   c001fed8 <CPrintf>
c000c668:	83 c4 10             	add    esp,0x10
c000c66b:	90                   	nop
c000c66c:	a1 c8 b8 03 c0       	mov    eax,ds:0xc003b8c8
c000c671:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000c677:	89 d1                	mov    ecx,edx
c000c679:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c67d:	8b 52 28             	mov    edx,DWORD PTR [edx+0x28]
c000c680:	89 ce                	mov    esi,ecx
c000c682:	29 d6                	sub    esi,edx
c000c684:	89 f2                	mov    edx,esi
c000c686:	01 d0                	add    eax,edx
c000c688:	66 a3 c8 b8 03 c0    	mov    ds:0xc003b8c8,ax
c000c68e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c692:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c695:	a3 b4 b8 03 c0       	mov    ds:0xc003b8b4,eax
c000c69a:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c69f:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000c6a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000c6a8:	eb 2a                	jmp    c000c6d4 <tcp_receive+0xa1c>
c000c6aa:	66 90                	xchg   ax,ax
c000c6ac:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000c6b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6b6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c6b9:	29 c2                	sub    edx,eax
c000c6bb:	89 d0                	mov    eax,edx
c000c6bd:	79 15                	jns    c000c6d4 <tcp_receive+0xa1c>
c000c6bf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6c3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000c6c6:	83 c8 02             	or     eax,0x2
c000c6c9:	88 c2                	mov    dl,al
c000c6cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6cf:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000c6d2:	66 90                	xchg   ax,ax
c000c6d4:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000c6da:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6de:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c6e1:	29 c2                	sub    edx,eax
c000c6e3:	89 d0                	mov    eax,edx
c000c6e5:	0f 88 fd 0b 00 00    	js     c000d2e8 <tcp_receive+0x1630>
c000c6eb:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000c6f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6f5:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000c6f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6fc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c6ff:	0f b7 c0             	movzx  eax,ax
c000c702:	01 c8                	add    eax,ecx
c000c704:	29 c2                	sub    edx,eax
c000c706:	89 d0                	mov    eax,edx
c000c708:	83 c0 01             	add    eax,0x1
c000c70b:	85 c0                	test   eax,eax
c000c70d:	0f 8f d5 0b 00 00    	jg     c000d2e8 <tcp_receive+0x1630>
c000c713:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c717:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c71a:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000c71f:	39 c2                	cmp    edx,eax
c000c721:	0f 85 1d 07 00 00    	jne    c000ce44 <tcp_receive+0x118c>
c000c727:	8b 1d c8 b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8c8
c000c72d:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c732:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c736:	0f b7 c0             	movzx  eax,ax
c000c739:	83 ec 0c             	sub    esp,0xc
c000c73c:	50                   	push   eax
c000c73d:	e8 a6 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	0f b7 c0             	movzx  eax,ax
c000c748:	83 e0 03             	and    eax,0x3
c000c74b:	0f 95 c0             	setne  al
c000c74e:	0f b6 c0             	movzx  eax,al
c000c751:	01 d8                	add    eax,ebx
c000c753:	66 a3 aa b8 03 c0    	mov    ds:0xc003b8aa,ax
c000c759:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c75d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c760:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000c766:	0f b7 d2             	movzx  edx,dx
c000c769:	0f b7 c0             	movzx  eax,ax
c000c76c:	39 c2                	cmp    edx,eax
c000c76e:	0f 83 2c 01 00 00    	jae    c000c8a0 <tcp_receive+0xbe8>
c000c774:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c779:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c77d:	0f b7 c0             	movzx  eax,ax
c000c780:	83 ec 0c             	sub    esp,0xc
c000c783:	50                   	push   eax
c000c784:	e8 5f 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c789:	83 c4 10             	add    esp,0x10
c000c78c:	0f b7 c0             	movzx  eax,ax
c000c78f:	83 e0 01             	and    eax,0x1
c000c792:	74 44                	je     c000c7d8 <tcp_receive+0xb20>
c000c794:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c799:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c79d:	80 e4 c0             	and    ah,0xc0
c000c7a0:	89 c3                	mov    ebx,eax
c000c7a2:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c7a7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7ab:	0f b7 c0             	movzx  eax,ax
c000c7ae:	83 ec 0c             	sub    esp,0xc
c000c7b1:	50                   	push   eax
c000c7b2:	e8 31 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c7b7:	83 c4 10             	add    esp,0x10
c000c7ba:	0f b7 c0             	movzx  eax,ax
c000c7bd:	83 e0 3e             	and    eax,0x3e
c000c7c0:	83 ec 0c             	sub    esp,0xc
c000c7c3:	50                   	push   eax
c000c7c4:	e8 1f 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c7c9:	83 c4 10             	add    esp,0x10
c000c7cc:	09 d8                	or     eax,ebx
c000c7ce:	8b 15 cc b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8cc
c000c7d4:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000c7d8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7dc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c7df:	66 a3 c8 b8 03 c0    	mov    ds:0xc003b8c8,ax
c000c7e5:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c7ea:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7ee:	0f b7 c0             	movzx  eax,ax
c000c7f1:	83 ec 0c             	sub    esp,0xc
c000c7f4:	50                   	push   eax
c000c7f5:	e8 ee 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c7fa:	83 c4 10             	add    esp,0x10
c000c7fd:	0f b7 c0             	movzx  eax,ax
c000c800:	83 e0 02             	and    eax,0x2
c000c803:	74 0f                	je     c000c814 <tcp_receive+0xb5c>
c000c805:	a1 c8 b8 03 c0       	mov    eax,ds:0xc003b8c8
c000c80a:	83 e8 01             	sub    eax,0x1
c000c80d:	66 a3 c8 b8 03 c0    	mov    ds:0xc003b8c8,ax
c000c813:	90                   	nop
c000c814:	a1 c8 b8 03 c0       	mov    eax,ds:0xc003b8c8
c000c819:	0f b7 d0             	movzx  edx,ax
c000c81c:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000c821:	83 ec 08             	sub    esp,0x8
c000c824:	52                   	push   edx
c000c825:	50                   	push   eax
c000c826:	e8 99 c2 ff ff       	call   c0008ac4 <pbuf_realloc>
c000c82b:	83 c4 10             	add    esp,0x10
c000c82e:	8b 1d c8 b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8c8
c000c834:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c839:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c83d:	0f b7 c0             	movzx  eax,ax
c000c840:	83 ec 0c             	sub    esp,0xc
c000c843:	50                   	push   eax
c000c844:	e8 9f 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c849:	83 c4 10             	add    esp,0x10
c000c84c:	0f b7 c0             	movzx  eax,ax
c000c84f:	83 e0 03             	and    eax,0x3
c000c852:	0f 95 c0             	setne  al
c000c855:	0f b6 c0             	movzx  eax,al
c000c858:	01 d8                	add    eax,ebx
c000c85a:	66 a3 aa b8 03 c0    	mov    ds:0xc003b8aa,ax
c000c860:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000c866:	0f b7 d0             	movzx  edx,ax
c000c869:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000c86e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c871:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c875:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c878:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c87c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c87f:	0f b7 c0             	movzx  eax,ax
c000c882:	01 d0                	add    eax,edx
c000c884:	39 c1                	cmp    ecx,eax
c000c886:	74 18                	je     c000c8a0 <tcp_receive+0xbe8>
c000c888:	83 ec 08             	sub    esp,0x8
c000c88b:	68 14 0b 03 c0       	push   0xc0030b14
c000c890:	68 86 01 03 c0       	push   0xc0030186
c000c895:	e8 3e 36 01 00       	call   c001fed8 <CPrintf>
c000c89a:	83 c4 10             	add    esp,0x10
c000c89d:	8d 76 00             	lea    esi,[esi+0x0]
c000c8a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8a4:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c8aa:	85 c0                	test   eax,eax
c000c8ac:	0f 84 7e 02 00 00    	je     c000cb30 <tcp_receive+0xe78>
c000c8b2:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c8b7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c8bb:	0f b7 c0             	movzx  eax,ax
c000c8be:	83 ec 0c             	sub    esp,0xc
c000c8c1:	50                   	push   eax
c000c8c2:	e8 21 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c8c7:	83 c4 10             	add    esp,0x10
c000c8ca:	0f b7 c0             	movzx  eax,ax
c000c8cd:	83 e0 01             	and    eax,0x1
c000c8d0:	74 4a                	je     c000c91c <tcp_receive+0xc64>
c000c8d2:	eb 34                	jmp    c000c908 <tcp_receive+0xc50>
c000c8d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8d8:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c8de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c8e2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8e6:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c8ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000c8ee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8f2:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c8f8:	83 ec 0c             	sub    esp,0xc
c000c8fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c8ff:	e8 68 d8 ff ff       	call   c000a16c <tcp_seg_free>
c000c904:	83 c4 10             	add    esp,0x10
c000c907:	90                   	nop
c000c908:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c90c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c912:	85 c0                	test   eax,eax
c000c914:	75 be                	jne    c000c8d4 <tcp_receive+0xc1c>
c000c916:	e9 15 02 00 00       	jmp    c000cb30 <tcp_receive+0xe78>
c000c91b:	90                   	nop
c000c91c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c920:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c926:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c92a:	e9 bd 00 00 00       	jmp    c000c9ec <tcp_receive+0xd34>
c000c92f:	90                   	nop
c000c930:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c934:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c937:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c93b:	0f b7 c0             	movzx  eax,ax
c000c93e:	83 ec 0c             	sub    esp,0xc
c000c941:	50                   	push   eax
c000c942:	e8 a1 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c947:	83 c4 10             	add    esp,0x10
c000c94a:	0f b7 c0             	movzx  eax,ax
c000c94d:	83 e0 01             	and    eax,0x1
c000c950:	74 76                	je     c000c9c8 <tcp_receive+0xd10>
c000c952:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c957:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c95b:	0f b7 c0             	movzx  eax,ax
c000c95e:	83 ec 0c             	sub    esp,0xc
c000c961:	50                   	push   eax
c000c962:	e8 81 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c967:	83 c4 10             	add    esp,0x10
c000c96a:	0f b7 c0             	movzx  eax,ax
c000c96d:	83 e0 02             	and    eax,0x2
c000c970:	75 56                	jne    c000c9c8 <tcp_receive+0xd10>
c000c972:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c977:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000c97b:	83 ec 0c             	sub    esp,0xc
c000c97e:	6a 01                	push   0x1
c000c980:	e8 63 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c985:	83 c4 10             	add    esp,0x10
c000c988:	8b 15 cc b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8cc
c000c98e:	09 d8                	or     eax,ebx
c000c990:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000c994:	8b 1d c8 b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8c8
c000c99a:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c99f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c9a3:	0f b7 c0             	movzx  eax,ax
c000c9a6:	83 ec 0c             	sub    esp,0xc
c000c9a9:	50                   	push   eax
c000c9aa:	e8 39 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c9af:	83 c4 10             	add    esp,0x10
c000c9b2:	0f b7 c0             	movzx  eax,ax
c000c9b5:	83 e0 03             	and    eax,0x3
c000c9b8:	0f 95 c0             	setne  al
c000c9bb:	0f b6 c0             	movzx  eax,al
c000c9be:	01 d8                	add    eax,ebx
c000c9c0:	66 a3 aa b8 03 c0    	mov    ds:0xc003b8aa,ax
c000c9c6:	66 90                	xchg   ax,ax
c000c9c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c9cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c9d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000c9d6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9da:	83 ec 0c             	sub    esp,0xc
c000c9dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9e1:	e8 86 d7 ff ff       	call   c000a16c <tcp_seg_free>
c000c9e6:	83 c4 10             	add    esp,0x10
c000c9e9:	8d 76 00             	lea    esi,[esi+0x0]
c000c9ec:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c9f1:	74 31                	je     c000ca24 <tcp_receive+0xd6c>
c000c9f3:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000c9f9:	0f b7 d0             	movzx  edx,ax
c000c9fc:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000ca01:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ca04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca0b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ca0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca12:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca15:	0f b7 c0             	movzx  eax,ax
c000ca18:	01 d0                	add    eax,edx
c000ca1a:	29 c1                	sub    ecx,eax
c000ca1c:	89 c8                	mov    eax,ecx
c000ca1e:	0f 89 0c ff ff ff    	jns    c000c930 <tcp_receive+0xc78>
c000ca24:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000ca29:	0f 84 f1 00 00 00    	je     c000cb20 <tcp_receive+0xe68>
c000ca2f:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000ca35:	0f b7 d0             	movzx  edx,ax
c000ca38:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000ca3d:	01 c2                	add    edx,eax
c000ca3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ca49:	29 c2                	sub    edx,eax
c000ca4b:	89 d0                	mov    eax,edx
c000ca4d:	85 c0                	test   eax,eax
c000ca4f:	0f 8e cb 00 00 00    	jle    c000cb20 <tcp_receive+0xe68>
c000ca55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca59:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ca5f:	89 c2                	mov    edx,eax
c000ca61:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000ca66:	89 d7                	mov    edi,edx
c000ca68:	29 c7                	sub    edi,eax
c000ca6a:	89 f8                	mov    eax,edi
c000ca6c:	66 a3 c8 b8 03 c0    	mov    ds:0xc003b8c8,ax
c000ca72:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000ca77:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ca7b:	0f b7 c0             	movzx  eax,ax
c000ca7e:	83 ec 0c             	sub    esp,0xc
c000ca81:	50                   	push   eax
c000ca82:	e8 61 41 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ca87:	83 c4 10             	add    esp,0x10
c000ca8a:	0f b7 c0             	movzx  eax,ax
c000ca8d:	83 e0 02             	and    eax,0x2
c000ca90:	74 0e                	je     c000caa0 <tcp_receive+0xde8>
c000ca92:	a1 c8 b8 03 c0       	mov    eax,ds:0xc003b8c8
c000ca97:	83 e8 01             	sub    eax,0x1
c000ca9a:	66 a3 c8 b8 03 c0    	mov    ds:0xc003b8c8,ax
c000caa0:	a1 c8 b8 03 c0       	mov    eax,ds:0xc003b8c8
c000caa5:	0f b7 d0             	movzx  edx,ax
c000caa8:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000caad:	83 ec 08             	sub    esp,0x8
c000cab0:	52                   	push   edx
c000cab1:	50                   	push   eax
c000cab2:	e8 0d c0 ff ff       	call   c0008ac4 <pbuf_realloc>
c000cab7:	83 c4 10             	add    esp,0x10
c000caba:	8b 1d c8 b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8c8
c000cac0:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000cac5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cac9:	0f b7 c0             	movzx  eax,ax
c000cacc:	83 ec 0c             	sub    esp,0xc
c000cacf:	50                   	push   eax
c000cad0:	e8 13 41 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cad5:	83 c4 10             	add    esp,0x10
c000cad8:	0f b7 c0             	movzx  eax,ax
c000cadb:	83 e0 03             	and    eax,0x3
c000cade:	0f 95 c0             	setne  al
c000cae1:	0f b6 c0             	movzx  eax,al
c000cae4:	01 d8                	add    eax,ebx
c000cae6:	66 a3 aa b8 03 c0    	mov    ds:0xc003b8aa,ax
c000caec:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000caf2:	0f b7 d0             	movzx  edx,ax
c000caf5:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000cafa:	01 c2                	add    edx,eax
c000cafc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb00:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cb03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cb06:	39 c2                	cmp    edx,eax
c000cb08:	74 16                	je     c000cb20 <tcp_receive+0xe68>
c000cb0a:	83 ec 08             	sub    esp,0x8
c000cb0d:	68 4c 0b 03 c0       	push   0xc0030b4c
c000cb12:	68 86 01 03 c0       	push   0xc0030186
c000cb17:	e8 bc 33 01 00       	call   c001fed8 <CPrintf>
c000cb1c:	83 c4 10             	add    esp,0x10
c000cb1f:	90                   	nop
c000cb20:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb24:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cb28:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cb2e:	66 90                	xchg   ax,ax
c000cb30:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000cb36:	0f b7 d0             	movzx  edx,ax
c000cb39:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000cb3e:	01 c2                	add    edx,eax
c000cb40:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb44:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000cb47:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb4b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000cb4e:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000cb54:	0f b7 d2             	movzx  edx,dx
c000cb57:	0f b7 c0             	movzx  eax,ax
c000cb5a:	39 c2                	cmp    edx,eax
c000cb5c:	73 16                	jae    c000cb74 <tcp_receive+0xebc>
c000cb5e:	83 ec 08             	sub    esp,0x8
c000cb61:	68 88 0b 03 c0       	push   0xc0030b88
c000cb66:	68 86 01 03 c0       	push   0xc0030186
c000cb6b:	e8 68 33 01 00       	call   c001fed8 <CPrintf>
c000cb70:	83 c4 10             	add    esp,0x10
c000cb73:	90                   	nop
c000cb74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb78:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000cb7b:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000cb81:	89 d6                	mov    esi,edx
c000cb83:	29 c6                	sub    esi,eax
c000cb85:	89 f0                	mov    eax,esi
c000cb87:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000cb8b:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000cb8f:	83 ec 0c             	sub    esp,0xc
c000cb92:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cb96:	e8 7d d2 ff ff       	call   c0009e18 <tcp_update_rcv_ann_wnd>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000cba3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cba6:	0f b7 c0             	movzx  eax,ax
c000cba9:	85 c0                	test   eax,eax
c000cbab:	74 17                	je     c000cbc4 <tcp_receive+0xf0c>
c000cbad:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000cbb2:	a3 a4 b8 03 c0       	mov    ds:0xc003b8a4,eax
c000cbb7:	c7 05 c4 b8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b8c4,0x0
c000cbc1:	8d 76 00             	lea    esi,[esi+0x0]
c000cbc4:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000cbc9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cbcd:	0f b7 c0             	movzx  eax,ax
c000cbd0:	83 ec 0c             	sub    esp,0xc
c000cbd3:	50                   	push   eax
c000cbd4:	e8 0f 40 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cbd9:	83 c4 10             	add    esp,0x10
c000cbdc:	0f b7 c0             	movzx  eax,ax
c000cbdf:	83 e0 01             	and    eax,0x1
c000cbe2:	0f 84 d8 01 00 00    	je     c000cdc0 <tcp_receive+0x1108>
c000cbe8:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000cbed:	83 c8 20             	or     eax,0x20
c000cbf0:	a2 a8 b8 03 c0       	mov    ds:0xc003b8a8,al
c000cbf5:	e9 c6 01 00 00       	jmp    c000cdc0 <tcp_receive+0x1108>
c000cbfa:	66 90                	xchg   ax,ax
c000cbfc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc00:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc0a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc0e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc14:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cc1a:	a3 b4 b8 03 c0       	mov    ds:0xc003b8b4,eax
c000cc1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc23:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cc26:	0f b7 d8             	movzx  ebx,ax
c000cc29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc2d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc30:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cc34:	0f b7 c0             	movzx  eax,ax
c000cc37:	83 ec 0c             	sub    esp,0xc
c000cc3a:	50                   	push   eax
c000cc3b:	e8 a8 3f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cc40:	83 c4 10             	add    esp,0x10
c000cc43:	0f b7 c0             	movzx  eax,ax
c000cc46:	83 e0 03             	and    eax,0x3
c000cc49:	0f 95 c0             	setne  al
c000cc4c:	0f b6 c0             	movzx  eax,al
c000cc4f:	8d 14 03             	lea    edx,[ebx+eax*1]
c000cc52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc56:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cc59:	01 c2                	add    edx,eax
c000cc5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc5f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000cc62:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc66:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cc69:	0f b7 d8             	movzx  ebx,ax
c000cc6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc70:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cc73:	0f b7 f0             	movzx  esi,ax
c000cc76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc7a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc7d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cc81:	0f b7 c0             	movzx  eax,ax
c000cc84:	83 ec 0c             	sub    esp,0xc
c000cc87:	50                   	push   eax
c000cc88:	e8 5b 3f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cc8d:	83 c4 10             	add    esp,0x10
c000cc90:	0f b7 c0             	movzx  eax,ax
c000cc93:	83 e0 03             	and    eax,0x3
c000cc96:	0f 95 c0             	setne  al
c000cc99:	0f b6 c0             	movzx  eax,al
c000cc9c:	01 f0                	add    eax,esi
c000cc9e:	39 c3                	cmp    ebx,eax
c000cca0:	7d 16                	jge    c000ccb8 <tcp_receive+0x1000>
c000cca2:	83 ec 08             	sub    esp,0x8
c000cca5:	68 a8 0b 03 c0       	push   0xc0030ba8
c000ccaa:	68 86 01 03 c0       	push   0xc0030186
c000ccaf:	e8 24 32 01 00       	call   c001fed8 <CPrintf>
c000ccb4:	83 c4 10             	add    esp,0x10
c000ccb7:	90                   	nop
c000ccb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ccbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ccbf:	0f b7 d8             	movzx  ebx,ax
c000ccc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ccc6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ccc9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cccd:	0f b7 c0             	movzx  eax,ax
c000ccd0:	83 ec 0c             	sub    esp,0xc
c000ccd3:	50                   	push   eax
c000ccd4:	e8 0f 3f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ccd9:	83 c4 10             	add    esp,0x10
c000ccdc:	0f b7 c0             	movzx  eax,ax
c000ccdf:	83 e0 03             	and    eax,0x3
c000cce2:	0f 95 c0             	setne  al
c000cce5:	0f b6 c0             	movzx  eax,al
c000cce8:	8d 14 03             	lea    edx,[ebx+eax*1]
c000cceb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccef:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ccf2:	29 d0                	sub    eax,edx
c000ccf4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ccf8:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000ccfc:	83 ec 0c             	sub    esp,0xc
c000ccff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd03:	e8 10 d1 ff ff       	call   c0009e18 <tcp_update_rcv_ann_wnd>
c000cd08:	83 c4 10             	add    esp,0x10
c000cd0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd12:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cd15:	0f b7 c0             	movzx  eax,ax
c000cd18:	85 c0                	test   eax,eax
c000cd1a:	74 3c                	je     c000cd58 <tcp_receive+0x10a0>
c000cd1c:	a1 a4 b8 03 c0       	mov    eax,ds:0xc003b8a4
c000cd21:	85 c0                	test   eax,eax
c000cd23:	74 1b                	je     c000cd40 <tcp_receive+0x1088>
c000cd25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd29:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cd2c:	a1 a4 b8 03 c0       	mov    eax,ds:0xc003b8a4
c000cd31:	83 ec 08             	sub    esp,0x8
c000cd34:	52                   	push   edx
c000cd35:	50                   	push   eax
c000cd36:	e8 f1 bf ff ff       	call   c0008d2c <pbuf_cat>
c000cd3b:	83 c4 10             	add    esp,0x10
c000cd3e:	eb 0c                	jmp    c000cd4c <tcp_receive+0x1094>
c000cd40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd47:	a3 a4 b8 03 c0       	mov    ds:0xc003b8a4,eax
c000cd4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cd57:	90                   	nop
c000cd58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cd5f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cd63:	0f b7 c0             	movzx  eax,ax
c000cd66:	83 ec 0c             	sub    esp,0xc
c000cd69:	50                   	push   eax
c000cd6a:	e8 79 3e ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cd6f:	83 c4 10             	add    esp,0x10
c000cd72:	0f b7 c0             	movzx  eax,ax
c000cd75:	83 e0 01             	and    eax,0x1
c000cd78:	74 26                	je     c000cda0 <tcp_receive+0x10e8>
c000cd7a:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000cd7f:	83 c8 20             	or     eax,0x20
c000cd82:	a2 a8 b8 03 c0       	mov    ds:0xc003b8a8,al
c000cd87:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd8b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000cd8e:	83 f8 04             	cmp    eax,0x4
c000cd91:	75 0d                	jne    c000cda0 <tcp_receive+0x10e8>
c000cd93:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd97:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000cd9e:	66 90                	xchg   ax,ax
c000cda0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cda4:	8b 10                	mov    edx,DWORD PTR [eax]
c000cda6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdaa:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cdb0:	83 ec 0c             	sub    esp,0xc
c000cdb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb7:	e8 b0 d3 ff ff       	call   c000a16c <tcp_seg_free>
c000cdbc:	83 c4 10             	add    esp,0x10
c000cdbf:	90                   	nop
c000cdc0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdc4:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cdca:	85 c0                	test   eax,eax
c000cdcc:	74 22                	je     c000cdf0 <tcp_receive+0x1138>
c000cdce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdd2:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cdd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cddb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cdde:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cde2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cde5:	39 c2                	cmp    edx,eax
c000cde7:	0f 84 0f fe ff ff    	je     c000cbfc <tcp_receive+0xf44>
c000cded:	8d 76 00             	lea    esi,[esi+0x0]
c000cdf0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdf4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cdf7:	0f b6 c0             	movzx  eax,al
c000cdfa:	83 e0 01             	and    eax,0x1
c000cdfd:	74 2d                	je     c000ce2c <tcp_receive+0x1174>
c000cdff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce03:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce06:	83 e0 fe             	and    eax,0xfffffffe
c000ce09:	88 c2                	mov    dl,al
c000ce0b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce0f:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ce12:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce16:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce19:	83 c8 02             	or     eax,0x2
c000ce1c:	88 c2                	mov    dl,al
c000ce1e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce22:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ce25:	e9 22 05 00 00       	jmp    c000d34c <tcp_receive+0x1694>
c000ce2a:	66 90                	xchg   ax,ax
c000ce2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce30:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce33:	83 c8 01             	or     eax,0x1
c000ce36:	88 c2                	mov    dl,al
c000ce38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce3c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ce3f:	e9 08 05 00 00       	jmp    c000d34c <tcp_receive+0x1694>
c000ce44:	83 ec 0c             	sub    esp,0xc
c000ce47:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce4b:	e8 c4 2e 00 00       	call   c000fd14 <tcp_send_empty_ack>
c000ce50:	83 c4 10             	add    esp,0x10
c000ce53:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce57:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ce5d:	85 c0                	test   eax,eax
c000ce5f:	75 23                	jne    c000ce84 <tcp_receive+0x11cc>
c000ce61:	83 ec 0c             	sub    esp,0xc
c000ce64:	68 c0 b8 03 c0       	push   0xc003b8c0
c000ce69:	e8 96 d3 ff ff       	call   c000a204 <tcp_seg_copy>
c000ce6e:	83 c4 10             	add    esp,0x10
c000ce71:	89 c2                	mov    edx,eax
c000ce73:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce77:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000ce7d:	e9 ca 04 00 00       	jmp    c000d34c <tcp_receive+0x1694>
c000ce82:	66 90                	xchg   ax,ax
c000ce84:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000ce8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce90:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ce96:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce9a:	e9 21 04 00 00       	jmp    c000d2c0 <tcp_receive+0x1608>
c000ce9f:	90                   	nop
c000cea0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cea4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cea7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ceaa:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000ceaf:	39 c2                	cmp    edx,eax
c000ceb1:	75 75                	jne    c000cf28 <tcp_receive+0x1270>
c000ceb3:	8b 15 c8 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8c8
c000ceb9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cebd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cec0:	0f b7 d2             	movzx  edx,dx
c000cec3:	0f b7 c0             	movzx  eax,ax
c000cec6:	39 c2                	cmp    edx,eax
c000cec8:	0f 86 02 04 00 00    	jbe    c000d2d0 <tcp_receive+0x1618>
c000cece:	83 ec 0c             	sub    esp,0xc
c000ced1:	68 c0 b8 03 c0       	push   0xc003b8c0
c000ced6:	e8 29 d3 ff ff       	call   c000a204 <tcp_seg_copy>
c000cedb:	83 c4 10             	add    esp,0x10
c000cede:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cee2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cee7:	0f 84 e7 03 00 00    	je     c000d2d4 <tcp_receive+0x161c>
c000ceed:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cef2:	74 0c                	je     c000cf00 <tcp_receive+0x1248>
c000cef4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cef8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cefc:	89 10                	mov    DWORD PTR [eax],edx
c000cefe:	eb 10                	jmp    c000cf10 <tcp_receive+0x1258>
c000cf00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf08:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cf0e:	66 90                	xchg   ax,ax
c000cf10:	83 ec 08             	sub    esp,0x8
c000cf13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf1b:	e8 2c ec ff ff       	call   c000bb4c <tcp_oos_insert_segment>
c000cf20:	83 c4 10             	add    esp,0x10
c000cf23:	e9 ac 03 00 00       	jmp    c000d2d4 <tcp_receive+0x161c>
c000cf28:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cf2d:	75 61                	jne    c000cf90 <tcp_receive+0x12d8>
c000cf2f:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000cf35:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf39:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cf3f:	29 c2                	sub    edx,eax
c000cf41:	89 d0                	mov    eax,edx
c000cf43:	0f 89 27 01 00 00    	jns    c000d070 <tcp_receive+0x13b8>
c000cf49:	83 ec 0c             	sub    esp,0xc
c000cf4c:	68 c0 b8 03 c0       	push   0xc003b8c0
c000cf51:	e8 ae d2 ff ff       	call   c000a204 <tcp_seg_copy>
c000cf56:	83 c4 10             	add    esp,0x10
c000cf59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf5d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cf62:	0f 84 70 03 00 00    	je     c000d2d8 <tcp_receive+0x1620>
c000cf68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf70:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cf76:	83 ec 08             	sub    esp,0x8
c000cf79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf81:	e8 c6 eb ff ff       	call   c000bb4c <tcp_oos_insert_segment>
c000cf86:	83 c4 10             	add    esp,0x10
c000cf89:	e9 4a 03 00 00       	jmp    c000d2d8 <tcp_receive+0x1620>
c000cf8e:	66 90                	xchg   ax,ax
c000cf90:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000cf96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf9a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf9d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cfa0:	29 c2                	sub    edx,eax
c000cfa2:	89 d0                	mov    eax,edx
c000cfa4:	83 e8 01             	sub    eax,0x1
c000cfa7:	0f 88 c3 00 00 00    	js     c000d070 <tcp_receive+0x13b8>
c000cfad:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000cfb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfb7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cfba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cfbd:	29 c2                	sub    edx,eax
c000cfbf:	89 d0                	mov    eax,edx
c000cfc1:	83 c0 01             	add    eax,0x1
c000cfc4:	85 c0                	test   eax,eax
c000cfc6:	0f 8f a4 00 00 00    	jg     c000d070 <tcp_receive+0x13b8>
c000cfcc:	83 ec 0c             	sub    esp,0xc
c000cfcf:	68 c0 b8 03 c0       	push   0xc003b8c0
c000cfd4:	e8 2b d2 ff ff       	call   c000a204 <tcp_seg_copy>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfe0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cfe5:	0f 84 f1 02 00 00    	je     c000d2dc <tcp_receive+0x1624>
c000cfeb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cfef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cff2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cff5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cff9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cffc:	0f b7 c0             	movzx  eax,ax
c000cfff:	01 c2                	add    edx,eax
c000d001:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d006:	29 c2                	sub    edx,eax
c000d008:	89 d0                	mov    eax,edx
c000d00a:	85 c0                	test   eax,eax
c000d00c:	7e 3e                	jle    c000d04c <tcp_receive+0x1394>
c000d00e:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d013:	89 c2                	mov    edx,eax
c000d015:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d019:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d01c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d01f:	89 d7                	mov    edi,edx
c000d021:	29 c7                	sub    edi,eax
c000d023:	89 f8                	mov    eax,edi
c000d025:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d029:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000d02d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d031:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d034:	0f b7 d0             	movzx  edx,ax
c000d037:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d03b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d03e:	83 ec 08             	sub    esp,0x8
c000d041:	52                   	push   edx
c000d042:	50                   	push   eax
c000d043:	e8 7c ba ff ff       	call   c0008ac4 <pbuf_realloc>
c000d048:	83 c4 10             	add    esp,0x10
c000d04b:	90                   	nop
c000d04c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d050:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d054:	89 10                	mov    DWORD PTR [eax],edx
c000d056:	83 ec 08             	sub    esp,0x8
c000d059:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d061:	e8 e6 ea ff ff       	call   c000bb4c <tcp_oos_insert_segment>
c000d066:	83 c4 10             	add    esp,0x10
c000d069:	e9 6e 02 00 00       	jmp    c000d2dc <tcp_receive+0x1624>
c000d06e:	66 90                	xchg   ax,ax
c000d070:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d074:	8b 00                	mov    eax,DWORD PTR [eax]
c000d076:	85 c0                	test   eax,eax
c000d078:	0f 85 2e 02 00 00    	jne    c000d2ac <tcp_receive+0x15f4>
c000d07e:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000d084:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d088:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d08b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d08e:	29 c2                	sub    edx,eax
c000d090:	89 d0                	mov    eax,edx
c000d092:	85 c0                	test   eax,eax
c000d094:	0f 8e 12 02 00 00    	jle    c000d2ac <tcp_receive+0x15f4>
c000d09a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d09e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d0a1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d0a5:	0f b7 c0             	movzx  eax,ax
c000d0a8:	83 ec 0c             	sub    esp,0xc
c000d0ab:	50                   	push   eax
c000d0ac:	e8 37 3b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d0b1:	83 c4 10             	add    esp,0x10
c000d0b4:	0f b7 c0             	movzx  eax,ax
c000d0b7:	83 e0 01             	and    eax,0x1
c000d0ba:	0f 85 20 02 00 00    	jne    c000d2e0 <tcp_receive+0x1628>
c000d0c0:	83 ec 0c             	sub    esp,0xc
c000d0c3:	68 c0 b8 03 c0       	push   0xc003b8c0
c000d0c8:	e8 37 d1 ff ff       	call   c000a204 <tcp_seg_copy>
c000d0cd:	83 c4 10             	add    esp,0x10
c000d0d0:	89 c2                	mov    edx,eax
c000d0d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0d6:	89 10                	mov    DWORD PTR [eax],edx
c000d0d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0de:	85 c0                	test   eax,eax
c000d0e0:	0f 84 fe 01 00 00    	je     c000d2e4 <tcp_receive+0x162c>
c000d0e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0ea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d0ed:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d0f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d0f7:	0f b7 c0             	movzx  eax,ax
c000d0fa:	01 c2                	add    edx,eax
c000d0fc:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d101:	29 c2                	sub    edx,eax
c000d103:	89 d0                	mov    eax,edx
c000d105:	85 c0                	test   eax,eax
c000d107:	7e 3f                	jle    c000d148 <tcp_receive+0x1490>
c000d109:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d10e:	89 c2                	mov    edx,eax
c000d110:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d114:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d117:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d11a:	89 d6                	mov    esi,edx
c000d11c:	29 c6                	sub    esi,eax
c000d11e:	89 f0                	mov    eax,esi
c000d120:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d124:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000d128:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d12c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d12f:	0f b7 d0             	movzx  edx,ax
c000d132:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d136:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d139:	83 ec 08             	sub    esp,0x8
c000d13c:	52                   	push   edx
c000d13d:	50                   	push   eax
c000d13e:	e8 81 b9 ff ff       	call   c0008ac4 <pbuf_realloc>
c000d143:	83 c4 10             	add    esp,0x10
c000d146:	66 90                	xchg   ax,ax
c000d148:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000d14e:	0f b7 d0             	movzx  edx,ax
c000d151:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d156:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d159:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d15d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d160:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d164:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d167:	0f b7 c0             	movzx  eax,ax
c000d16a:	01 d0                	add    eax,edx
c000d16c:	39 c1                	cmp    ecx,eax
c000d16e:	0f 86 70 01 00 00    	jbe    c000d2e4 <tcp_receive+0x162c>
c000d174:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d178:	8b 00                	mov    eax,DWORD PTR [eax]
c000d17a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d17d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d181:	0f b7 c0             	movzx  eax,ax
c000d184:	83 ec 0c             	sub    esp,0xc
c000d187:	50                   	push   eax
c000d188:	e8 5b 3a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d18d:	83 c4 10             	add    esp,0x10
c000d190:	0f b7 c0             	movzx  eax,ax
c000d193:	83 e0 01             	and    eax,0x1
c000d196:	74 50                	je     c000d1e8 <tcp_receive+0x1530>
c000d198:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d19c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d19e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d1a1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d1a5:	80 e4 c0             	and    ah,0xc0
c000d1a8:	89 c3                	mov    ebx,eax
c000d1aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d1ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000d1b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d1b3:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d1b7:	0f b7 c0             	movzx  eax,ax
c000d1ba:	83 ec 0c             	sub    esp,0xc
c000d1bd:	50                   	push   eax
c000d1be:	e8 25 3a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d1c3:	83 c4 10             	add    esp,0x10
c000d1c6:	0f b7 c0             	movzx  eax,ax
c000d1c9:	83 e0 3e             	and    eax,0x3e
c000d1cc:	83 ec 0c             	sub    esp,0xc
c000d1cf:	50                   	push   eax
c000d1d0:	e8 13 3a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d1d5:	83 c4 10             	add    esp,0x10
c000d1d8:	09 d8                	or     eax,ebx
c000d1da:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d1de:	8b 12                	mov    edx,DWORD PTR [edx]
c000d1e0:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000d1e3:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000d1e7:	90                   	nop
c000d1e8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1ec:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d1ef:	89 c2                	mov    edx,eax
c000d1f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1f5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d1f8:	01 d0                	add    eax,edx
c000d1fa:	89 c3                	mov    ebx,eax
c000d1fc:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d201:	89 c1                	mov    ecx,eax
c000d203:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d207:	8b 10                	mov    edx,DWORD PTR [eax]
c000d209:	89 d8                	mov    eax,ebx
c000d20b:	29 c8                	sub    eax,ecx
c000d20d:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000d211:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d215:	8b 00                	mov    eax,DWORD PTR [eax]
c000d217:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d21a:	0f b7 d0             	movzx  edx,ax
c000d21d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d221:	8b 00                	mov    eax,DWORD PTR [eax]
c000d223:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d226:	83 ec 08             	sub    esp,0x8
c000d229:	52                   	push   edx
c000d22a:	50                   	push   eax
c000d22b:	e8 94 b8 ff ff       	call   c0008ac4 <pbuf_realloc>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d237:	8b 00                	mov    eax,DWORD PTR [eax]
c000d239:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
c000d23c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d240:	8b 00                	mov    eax,DWORD PTR [eax]
c000d242:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d245:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d249:	0f b7 c0             	movzx  eax,ax
c000d24c:	83 ec 0c             	sub    esp,0xc
c000d24f:	50                   	push   eax
c000d250:	e8 93 39 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d255:	83 c4 10             	add    esp,0x10
c000d258:	0f b7 c0             	movzx  eax,ax
c000d25b:	83 e0 03             	and    eax,0x3
c000d25e:	0f 95 c0             	setne  al
c000d261:	0f b6 c0             	movzx  eax,al
c000d264:	01 d8                	add    eax,ebx
c000d266:	66 a3 aa b8 03 c0    	mov    ds:0xc003b8aa,ax
c000d26c:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000d272:	0f b7 d0             	movzx  edx,ax
c000d275:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d27a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d27d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d281:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d284:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d288:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d28b:	0f b7 c0             	movzx  eax,ax
c000d28e:	01 d0                	add    eax,edx
c000d290:	39 c1                	cmp    ecx,eax
c000d292:	74 50                	je     c000d2e4 <tcp_receive+0x162c>
c000d294:	83 ec 08             	sub    esp,0x8
c000d297:	68 14 0b 03 c0       	push   0xc0030b14
c000d29c:	68 86 01 03 c0       	push   0xc0030186
c000d2a1:	e8 32 2c 01 00       	call   c001fed8 <CPrintf>
c000d2a6:	83 c4 10             	add    esp,0x10
c000d2a9:	eb 39                	jmp    c000d2e4 <tcp_receive+0x162c>
c000d2ab:	90                   	nop
c000d2ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d2b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d2b8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d2ba:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2be:	66 90                	xchg   ax,ax
c000d2c0:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000d2c5:	0f 85 d5 fb ff ff    	jne    c000cea0 <tcp_receive+0x11e8>
c000d2cb:	eb 7f                	jmp    c000d34c <tcp_receive+0x1694>
c000d2cd:	8d 76 00             	lea    esi,[esi+0x0]
c000d2d0:	90                   	nop
c000d2d1:	eb 79                	jmp    c000d34c <tcp_receive+0x1694>
c000d2d3:	90                   	nop
c000d2d4:	90                   	nop
c000d2d5:	eb 75                	jmp    c000d34c <tcp_receive+0x1694>
c000d2d7:	90                   	nop
c000d2d8:	90                   	nop
c000d2d9:	eb 71                	jmp    c000d34c <tcp_receive+0x1694>
c000d2db:	90                   	nop
c000d2dc:	90                   	nop
c000d2dd:	eb 6d                	jmp    c000d34c <tcp_receive+0x1694>
c000d2df:	90                   	nop
c000d2e0:	90                   	nop
c000d2e1:	eb 69                	jmp    c000d34c <tcp_receive+0x1694>
c000d2e3:	90                   	nop
c000d2e4:	90                   	nop
c000d2e5:	eb 65                	jmp    c000d34c <tcp_receive+0x1694>
c000d2e7:	90                   	nop
c000d2e8:	83 ec 0c             	sub    esp,0xc
c000d2eb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d2ef:	e8 20 2a 00 00       	call   c000fd14 <tcp_send_empty_ack>
c000d2f4:	83 c4 10             	add    esp,0x10
c000d2f7:	eb 53                	jmp    c000d34c <tcp_receive+0x1694>
c000d2f9:	8d 76 00             	lea    esi,[esi+0x0]
c000d2fc:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000d302:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d306:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d309:	29 c2                	sub    edx,eax
c000d30b:	89 d0                	mov    eax,edx
c000d30d:	78 25                	js     c000d334 <tcp_receive+0x167c>
c000d30f:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000d315:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d319:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d31c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d320:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d323:	0f b7 c0             	movzx  eax,ax
c000d326:	01 c8                	add    eax,ecx
c000d328:	29 c2                	sub    edx,eax
c000d32a:	89 d0                	mov    eax,edx
c000d32c:	83 c0 01             	add    eax,0x1
c000d32f:	85 c0                	test   eax,eax
c000d331:	7e 19                	jle    c000d34c <tcp_receive+0x1694>
c000d333:	90                   	nop
c000d334:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d338:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d33b:	83 c8 02             	or     eax,0x2
c000d33e:	88 c2                	mov    dl,al
c000d340:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d344:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d347:	eb 03                	jmp    c000d34c <tcp_receive+0x1694>
c000d349:	8d 76 00             	lea    esi,[esi+0x0]
c000d34c:	90                   	nop
c000d34d:	83 c4 30             	add    esp,0x30
c000d350:	5b                   	pop    ebx
c000d351:	5e                   	pop    esi
c000d352:	5f                   	pop    edi
c000d353:	c3                   	ret    

c000d354 <tcp_parseopt>:
c000d354:	83 ec 1c             	sub    esp,0x1c
c000d357:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000d35c:	83 c0 14             	add    eax,0x14
c000d35f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d363:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000d368:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d36c:	0f b7 c0             	movzx  eax,ax
c000d36f:	83 ec 0c             	sub    esp,0xc
c000d372:	50                   	push   eax
c000d373:	e8 70 38 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d378:	83 c4 10             	add    esp,0x10
c000d37b:	0f b7 c0             	movzx  eax,ax
c000d37e:	c1 e8 0c             	shr    eax,0xc
c000d381:	0f b7 c0             	movzx  eax,ax
c000d384:	83 f8 05             	cmp    eax,0x5
c000d387:	0f 86 6f 01 00 00    	jbe    c000d4fc <tcp_parseopt+0x1a8>
c000d38d:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000d392:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d396:	0f b7 c0             	movzx  eax,ax
c000d399:	83 ec 0c             	sub    esp,0xc
c000d39c:	50                   	push   eax
c000d39d:	e8 46 38 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d3a2:	83 c4 10             	add    esp,0x10
c000d3a5:	0f b7 c0             	movzx  eax,ax
c000d3a8:	c1 e8 0c             	shr    eax,0xc
c000d3ab:	83 e8 05             	sub    eax,0x5
c000d3ae:	c1 e0 02             	shl    eax,0x2
c000d3b1:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000d3b6:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c000d3bd:	e9 1e 01 00 00       	jmp    c000d4e0 <tcp_parseopt+0x18c>
c000d3c2:	66 90                	xchg   ax,ax
c000d3c4:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d3c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d3cd:	01 d0                	add    eax,edx
c000d3cf:	8a 00                	mov    al,BYTE PTR [eax]
c000d3d1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000d3d5:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c000d3da:	83 f8 01             	cmp    eax,0x1
c000d3dd:	74 15                	je     c000d3f4 <tcp_parseopt+0xa0>
c000d3df:	83 f8 02             	cmp    eax,0x2
c000d3e2:	74 24                	je     c000d408 <tcp_parseopt+0xb4>
c000d3e4:	85 c0                	test   eax,eax
c000d3e6:	0f 85 bc 00 00 00    	jne    c000d4a8 <tcp_parseopt+0x154>
c000d3ec:	e9 0b 01 00 00       	jmp    c000d4fc <tcp_parseopt+0x1a8>
c000d3f1:	8d 76 00             	lea    esi,[esi+0x0]
c000d3f4:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d3f9:	83 c0 01             	add    eax,0x1
c000d3fc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d401:	e9 da 00 00 00       	jmp    c000d4e0 <tcp_parseopt+0x18c>
c000d406:	66 90                	xchg   ax,ax
c000d408:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d40d:	8d 50 01             	lea    edx,[eax+0x1]
c000d410:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d414:	01 d0                	add    eax,edx
c000d416:	8a 00                	mov    al,BYTE PTR [eax]
c000d418:	0f b6 c0             	movzx  eax,al
c000d41b:	83 f8 04             	cmp    eax,0x4
c000d41e:	0f 85 d0 00 00 00    	jne    c000d4f4 <tcp_parseopt+0x1a0>
c000d424:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d429:	8d 50 03             	lea    edx,[eax+0x3]
c000d42c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d431:	39 c2                	cmp    edx,eax
c000d433:	0f 8d bb 00 00 00    	jge    c000d4f4 <tcp_parseopt+0x1a0>
c000d439:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d43e:	8d 50 02             	lea    edx,[eax+0x2]
c000d441:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d445:	01 d0                	add    eax,edx
c000d447:	8a 00                	mov    al,BYTE PTR [eax]
c000d449:	0f b6 c0             	movzx  eax,al
c000d44c:	c1 e0 08             	shl    eax,0x8
c000d44f:	89 c2                	mov    edx,eax
c000d451:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d456:	8d 48 03             	lea    ecx,[eax+0x3]
c000d459:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d45d:	01 c8                	add    eax,ecx
c000d45f:	8a 00                	mov    al,BYTE PTR [eax]
c000d461:	0f b6 c0             	movzx  eax,al
c000d464:	09 d0                	or     eax,edx
c000d466:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c000d46b:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d470:	3d 18 02 00 00       	cmp    eax,0x218
c000d475:	77 11                	ja     c000d488 <tcp_parseopt+0x134>
c000d477:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d47c:	85 c0                	test   eax,eax
c000d47e:	74 08                	je     c000d488 <tcp_parseopt+0x134>
c000d480:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c000d485:	eb 09                	jmp    c000d490 <tcp_parseopt+0x13c>
c000d487:	90                   	nop
c000d488:	b8 18 02 00 00       	mov    eax,0x218
c000d48d:	8d 76 00             	lea    esi,[esi+0x0]
c000d490:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d494:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d498:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d49d:	83 c0 04             	add    eax,0x4
c000d4a0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d4a5:	eb 39                	jmp    c000d4e0 <tcp_parseopt+0x18c>
c000d4a7:	90                   	nop
c000d4a8:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d4ad:	8d 50 01             	lea    edx,[eax+0x1]
c000d4b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d4b4:	01 d0                	add    eax,edx
c000d4b6:	8a 00                	mov    al,BYTE PTR [eax]
c000d4b8:	0f b6 c0             	movzx  eax,al
c000d4bb:	85 c0                	test   eax,eax
c000d4bd:	74 39                	je     c000d4f8 <tcp_parseopt+0x1a4>
c000d4bf:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d4c4:	8d 50 01             	lea    edx,[eax+0x1]
c000d4c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d4cb:	01 d0                	add    eax,edx
c000d4cd:	8a 00                	mov    al,BYTE PTR [eax]
c000d4cf:	0f b6 c0             	movzx  eax,al
c000d4d2:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c000d4d7:	01 d0                	add    eax,edx
c000d4d9:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d4de:	66 90                	xchg   ax,ax
c000d4e0:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d4e5:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d4ea:	39 c2                	cmp    edx,eax
c000d4ec:	0f 82 d2 fe ff ff    	jb     c000d3c4 <tcp_parseopt+0x70>
c000d4f2:	eb 08                	jmp    c000d4fc <tcp_parseopt+0x1a8>
c000d4f4:	90                   	nop
c000d4f5:	eb 05                	jmp    c000d4fc <tcp_parseopt+0x1a8>
c000d4f7:	90                   	nop
c000d4f8:	90                   	nop
c000d4f9:	8d 76 00             	lea    esi,[esi+0x0]
c000d4fc:	83 c4 1c             	add    esp,0x1c
c000d4ff:	c3                   	ret    

c000d500 <tcp_listen_input>:
c000d500:	53                   	push   ebx
c000d501:	83 ec 18             	sub    esp,0x18
c000d504:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000d509:	0f b6 c0             	movzx  eax,al
c000d50c:	83 e0 10             	and    eax,0x10
c000d50f:	74 4f                	je     c000d560 <tcp_listen_input+0x60>
c000d511:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000d516:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d519:	0f b7 c8             	movzx  ecx,ax
c000d51c:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000d521:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d525:	0f b7 d0             	movzx  edx,ax
c000d528:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000d52e:	0f b7 d8             	movzx  ebx,ax
c000d531:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d536:	01 c3                	add    ebx,eax
c000d538:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000d53d:	83 c0 01             	add    eax,0x1
c000d540:	83 ec 08             	sub    esp,0x8
c000d543:	51                   	push   ecx
c000d544:	52                   	push   edx
c000d545:	68 90 78 03 c0       	push   0xc0037890
c000d54a:	68 98 78 03 c0       	push   0xc0037898
c000d54f:	53                   	push   ebx
c000d550:	50                   	push   eax
c000d551:	e8 5a 2f 00 00       	call   c00104b0 <tcp_rst>
c000d556:	83 c4 20             	add    esp,0x20
c000d559:	e9 a2 01 00 00       	jmp    c000d700 <tcp_listen_input+0x200>
c000d55e:	66 90                	xchg   ax,ax
c000d560:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000d565:	0f b6 c0             	movzx  eax,al
c000d568:	83 e0 02             	and    eax,0x2
c000d56b:	0f 84 8f 01 00 00    	je     c000d700 <tcp_listen_input+0x200>
c000d571:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d575:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000d578:	0f b6 c0             	movzx  eax,al
c000d57b:	83 ec 0c             	sub    esp,0xc
c000d57e:	50                   	push   eax
c000d57f:	e8 14 e0 ff ff       	call   c000b598 <tcp_alloc>
c000d584:	83 c4 10             	add    esp,0x10
c000d587:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d58b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d590:	75 16                	jne    c000d5a8 <tcp_listen_input+0xa8>
c000d592:	66 a1 bc 77 03 c0    	mov    ax,ds:0xc00377bc
c000d598:	83 c0 01             	add    eax,0x1
c000d59b:	66 a3 bc 77 03 c0    	mov    ds:0xc00377bc,ax
c000d5a1:	b0 ff                	mov    al,0xff
c000d5a3:	e9 5c 01 00 00       	jmp    c000d704 <tcp_listen_input+0x204>
c000d5a8:	8b 15 98 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037898
c000d5ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5b2:	89 10                	mov    DWORD PTR [eax],edx
c000d5b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d5bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d5bf:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000d5c3:	8b 15 90 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037890
c000d5c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5cd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d5d0:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000d5d5:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d5d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d5dc:	66 89 42 22          	mov    WORD PTR [edx+0x22],ax
c000d5e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5e4:	c7 40 10 03 00 00 00 	mov    DWORD PTR [eax+0x10],0x3
c000d5eb:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d5f0:	8d 50 01             	lea    edx,[eax+0x1]
c000d5f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5f7:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d5fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5fe:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d601:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d605:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d608:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000d60d:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000d611:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d615:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000d619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d61d:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000d620:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d624:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000d628:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d62d:	8d 50 ff             	lea    edx,[eax-0x1]
c000d630:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d634:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d637:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d63b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000d63e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d642:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000d645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d649:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
c000d64c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d650:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000d653:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d657:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000d65a:	83 e0 8c             	and    eax,0xffffff8c
c000d65d:	88 c2                	mov    dl,al
c000d65f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d663:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c000d666:	8b 15 70 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037870
c000d66c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d670:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d673:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d677:	a3 70 78 03 c0       	mov    ds:0xc0037870,eax
c000d67c:	e8 33 36 00 00       	call   c0010cb4 <tcp_timer_needed>
c000d681:	83 ec 0c             	sub    esp,0xc
c000d684:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d688:	e8 c7 fc ff ff       	call   c000d354 <tcp_parseopt>
c000d68d:	83 c4 10             	add    esp,0x10
c000d690:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d694:	8d 50 04             	lea    edx,[eax+0x4]
c000d697:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d69b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d69e:	0f b7 c0             	movzx  eax,ax
c000d6a1:	83 ec 08             	sub    esp,0x8
c000d6a4:	52                   	push   edx
c000d6a5:	50                   	push   eax
c000d6a6:	e8 ad e0 ff ff       	call   c000b758 <tcp_eff_send_mss>
c000d6ab:	83 c4 10             	add    esp,0x10
c000d6ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d6b2:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d6b6:	83 ec 08             	sub    esp,0x8
c000d6b9:	6a 12                	push   0x12
c000d6bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d6bf:	e8 c4 22 00 00       	call   c000f988 <tcp_enqueue_flags>
c000d6c4:	83 c4 10             	add    esp,0x10
c000d6c7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d6cb:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000d6d0:	85 c0                	test   eax,eax
c000d6d2:	74 18                	je     c000d6ec <tcp_listen_input+0x1ec>
c000d6d4:	83 ec 08             	sub    esp,0x8
c000d6d7:	6a 00                	push   0x0
c000d6d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d6dd:	e8 9e db ff ff       	call   c000b280 <tcp_abandon>
c000d6e2:	83 c4 10             	add    esp,0x10
c000d6e5:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d6e9:	eb 19                	jmp    c000d704 <tcp_listen_input+0x204>
c000d6eb:	90                   	nop
c000d6ec:	83 ec 0c             	sub    esp,0xc
c000d6ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d6f3:	e8 2c 29 00 00       	call   c0010024 <tcp_output>
c000d6f8:	83 c4 10             	add    esp,0x10
c000d6fb:	eb 07                	jmp    c000d704 <tcp_listen_input+0x204>
c000d6fd:	8d 76 00             	lea    esi,[esi+0x0]
c000d700:	b0 00                	mov    al,0x0
c000d702:	66 90                	xchg   ax,ax
c000d704:	83 c4 18             	add    esp,0x18
c000d707:	5b                   	pop    ebx
c000d708:	c3                   	ret    
c000d709:	8d 76 00             	lea    esi,[esi+0x0]

c000d70c <tcp_process>:
c000d70c:	53                   	push   ebx
c000d70d:	83 ec 18             	sub    esp,0x18
c000d710:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000d715:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d71a:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000d71f:	0f b6 c0             	movzx  eax,al
c000d722:	83 e0 04             	and    eax,0x4
c000d725:	0f 84 bd 00 00 00    	je     c000d7e8 <tcp_process+0xdc>
c000d72b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d72f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d732:	83 f8 02             	cmp    eax,0x2
c000d735:	75 19                	jne    c000d750 <tcp_process+0x44>
c000d737:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d73b:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000d73e:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000d743:	39 c2                	cmp    edx,eax
c000d745:	75 45                	jne    c000d78c <tcp_process+0x80>
c000d747:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d74c:	eb 3e                	jmp    c000d78c <tcp_process+0x80>
c000d74e:	66 90                	xchg   ax,ax
c000d750:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000d756:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d75a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d75d:	29 c2                	sub    edx,eax
c000d75f:	89 d0                	mov    eax,edx
c000d761:	78 29                	js     c000d78c <tcp_process+0x80>
c000d763:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000d769:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d76d:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d770:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d774:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d777:	0f b7 c0             	movzx  eax,ax
c000d77a:	01 c8                	add    eax,ecx
c000d77c:	29 c2                	sub    edx,eax
c000d77e:	89 d0                	mov    eax,edx
c000d780:	85 c0                	test   eax,eax
c000d782:	7f 08                	jg     c000d78c <tcp_process+0x80>
c000d784:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d789:	8d 76 00             	lea    esi,[esi+0x0]
c000d78c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000d791:	85 c0                	test   eax,eax
c000d793:	74 4b                	je     c000d7e0 <tcp_process+0xd4>
c000d795:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d799:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d79c:	85 c0                	test   eax,eax
c000d79e:	75 18                	jne    c000d7b8 <tcp_process+0xac>
c000d7a0:	83 ec 08             	sub    esp,0x8
c000d7a3:	68 d0 0b 03 c0       	push   0xc0030bd0
c000d7a8:	68 86 01 03 c0       	push   0xc0030186
c000d7ad:	e8 26 27 01 00       	call   c001fed8 <CPrintf>
c000d7b2:	83 c4 10             	add    esp,0x10
c000d7b5:	8d 76 00             	lea    esi,[esi+0x0]
c000d7b8:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000d7bd:	83 c8 08             	or     eax,0x8
c000d7c0:	a2 a8 b8 03 c0       	mov    ds:0xc003b8a8,al
c000d7c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7c9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d7cc:	83 e0 fe             	and    eax,0xfffffffe
c000d7cf:	88 c2                	mov    dl,al
c000d7d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d5:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d7d8:	b0 f5                	mov    al,0xf5
c000d7da:	e9 bd 08 00 00       	jmp    c000e09c <tcp_process+0x990>
c000d7df:	90                   	nop
c000d7e0:	b0 00                	mov    al,0x0
c000d7e2:	e9 b5 08 00 00       	jmp    c000e09c <tcp_process+0x990>
c000d7e7:	90                   	nop
c000d7e8:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000d7ed:	0f b6 c0             	movzx  eax,al
c000d7f0:	83 e0 02             	and    eax,0x2
c000d7f3:	74 33                	je     c000d828 <tcp_process+0x11c>
c000d7f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d7fc:	83 f8 02             	cmp    eax,0x2
c000d7ff:	74 27                	je     c000d828 <tcp_process+0x11c>
c000d801:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d805:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d808:	83 f8 03             	cmp    eax,0x3
c000d80b:	74 1b                	je     c000d828 <tcp_process+0x11c>
c000d80d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d811:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d814:	83 c8 02             	or     eax,0x2
c000d817:	88 c2                	mov    dl,al
c000d819:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d81d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d820:	b0 00                	mov    al,0x0
c000d822:	e9 75 08 00 00       	jmp    c000e09c <tcp_process+0x990>
c000d827:	90                   	nop
c000d828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d82c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d82f:	0f b6 c0             	movzx  eax,al
c000d832:	83 e0 10             	and    eax,0x10
c000d835:	75 0d                	jne    c000d844 <tcp_process+0x138>
c000d837:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000d83d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d841:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000d844:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d848:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000d84f:	83 ec 0c             	sub    esp,0xc
c000d852:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d856:	e8 f9 fa ff ff       	call   c000d354 <tcp_parseopt>
c000d85b:	83 c4 10             	add    esp,0x10
c000d85e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d862:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d865:	83 f8 09             	cmp    eax,0x9
c000d868:	0f 87 0a 08 00 00    	ja     c000e078 <tcp_process+0x96c>
c000d86e:	8b 04 85 78 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf288]
c000d875:	ff e0                	jmp    eax
c000d877:	90                   	nop
c000d878:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000d87d:	0f b6 c0             	movzx  eax,al
c000d880:	83 e0 10             	and    eax,0x10
c000d883:	0f 84 ff 01 00 00    	je     c000da88 <tcp_process+0x37c>
c000d889:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000d88e:	0f b6 c0             	movzx  eax,al
c000d891:	83 e0 02             	and    eax,0x2
c000d894:	0f 84 ee 01 00 00    	je     c000da88 <tcp_process+0x37c>
c000d89a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d89e:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d8a1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d8a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d8a7:	83 ec 0c             	sub    esp,0xc
c000d8aa:	50                   	push   eax
c000d8ab:	e8 5c 33 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000d8b0:	83 c4 10             	add    esp,0x10
c000d8b3:	8d 50 01             	lea    edx,[eax+0x1]
c000d8b6:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000d8bb:	39 c2                	cmp    edx,eax
c000d8bd:	0f 85 c5 01 00 00    	jne    c000da88 <tcp_process+0x37c>
c000d8c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8c7:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000d8cb:	83 c0 01             	add    eax,0x1
c000d8ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d8d2:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000d8d6:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d8db:	8d 50 01             	lea    edx,[eax+0x1]
c000d8de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8e2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d8e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8e9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d8ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8f0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d8f3:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000d8f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8fd:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000d900:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000d905:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000d909:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d90d:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000d911:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d916:	8d 50 ff             	lea    edx,[eax-0x1]
c000d919:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d91d:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d920:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d924:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d92b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d92f:	8d 50 04             	lea    edx,[eax+0x4]
c000d932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d936:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d939:	0f b7 c0             	movzx  eax,ax
c000d93c:	83 ec 08             	sub    esp,0x8
c000d93f:	52                   	push   edx
c000d940:	50                   	push   eax
c000d941:	e8 12 de ff ff       	call   c000b758 <tcp_eff_send_mss>
c000d946:	83 c4 10             	add    esp,0x10
c000d949:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d94d:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d951:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d955:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d958:	89 c2                	mov    edx,eax
c000d95a:	c1 e2 02             	shl    edx,0x2
c000d95d:	01 d0                	add    eax,edx
c000d95f:	d1 e0                	shl    eax,1
c000d961:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d965:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000d969:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d96d:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000d971:	0f b7 c0             	movzx  eax,ax
c000d974:	83 f8 01             	cmp    eax,0x1
c000d977:	75 0b                	jne    c000d984 <tcp_process+0x278>
c000d979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d97d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d980:	d1 e0                	shl    eax,1
c000d982:	eb 08                	jmp    c000d98c <tcp_process+0x280>
c000d984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d988:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d98b:	90                   	nop
c000d98c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d990:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000d994:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d998:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d99b:	0f b7 c0             	movzx  eax,ax
c000d99e:	85 c0                	test   eax,eax
c000d9a0:	75 16                	jne    c000d9b8 <tcp_process+0x2ac>
c000d9a2:	83 ec 08             	sub    esp,0x8
c000d9a5:	68 33 0d 03 c0       	push   0xc0030d33
c000d9aa:	68 86 01 03 c0       	push   0xc0030186
c000d9af:	e8 24 25 01 00       	call   c001fed8 <CPrintf>
c000d9b4:	83 c4 10             	add    esp,0x10
c000d9b7:	90                   	nop
c000d9b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9bc:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d9bf:	83 e8 01             	sub    eax,0x1
c000d9c2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d9c6:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000d9ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9ce:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d9d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d9d9:	8b 10                	mov    edx,DWORD PTR [eax]
c000d9db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9df:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000d9e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e6:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d9e9:	85 c0                	test   eax,eax
c000d9eb:	75 0f                	jne    c000d9fc <tcp_process+0x2f0>
c000d9ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9f1:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000d9f7:	eb 17                	jmp    c000da10 <tcp_process+0x304>
c000d9f9:	8d 76 00             	lea    esi,[esi+0x0]
c000d9fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da00:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000da06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da0a:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000da0e:	66 90                	xchg   ax,ax
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da17:	e8 50 c7 ff ff       	call   c000a16c <tcp_seg_free>
c000da1c:	83 c4 10             	add    esp,0x10
c000da1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da23:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000da29:	85 c0                	test   eax,eax
c000da2b:	74 27                	je     c000da54 <tcp_process+0x348>
c000da2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da31:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000da37:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000da3b:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000da3e:	83 ec 04             	sub    esp,0x4
c000da41:	6a 00                	push   0x0
c000da43:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da47:	52                   	push   edx
c000da48:	ff d0                	call   eax
c000da4a:	83 c4 10             	add    esp,0x10
c000da4d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000da51:	eb 09                	jmp    c000da5c <tcp_process+0x350>
c000da53:	90                   	nop
c000da54:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000da59:	8d 76 00             	lea    esi,[esi+0x0]
c000da5c:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000da61:	83 f8 f6             	cmp    eax,0xfffffff6
c000da64:	75 0a                	jne    c000da70 <tcp_process+0x364>
c000da66:	b0 f6                	mov    al,0xf6
c000da68:	e9 2f 06 00 00       	jmp    c000e09c <tcp_process+0x990>
c000da6d:	8d 76 00             	lea    esi,[esi+0x0]
c000da70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da74:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000da77:	83 c8 02             	or     eax,0x2
c000da7a:	88 c2                	mov    dl,al
c000da7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da80:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000da83:	e9 f4 05 00 00       	jmp    c000e07c <tcp_process+0x970>
c000da88:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000da8d:	0f b6 c0             	movzx  eax,al
c000da90:	83 e0 10             	and    eax,0x10
c000da93:	0f 84 e3 05 00 00    	je     c000e07c <tcp_process+0x970>
c000da99:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000da9e:	66 8b 00             	mov    ax,WORD PTR [eax]
c000daa1:	0f b7 c8             	movzx  ecx,ax
c000daa4:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000daa9:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000daad:	0f b7 d0             	movzx  edx,ax
c000dab0:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000dab6:	0f b7 d8             	movzx  ebx,ax
c000dab9:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000dabe:	01 c3                	add    ebx,eax
c000dac0:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000dac5:	83 ec 08             	sub    esp,0x8
c000dac8:	51                   	push   ecx
c000dac9:	52                   	push   edx
c000daca:	68 90 78 03 c0       	push   0xc0037890
c000dacf:	68 98 78 03 c0       	push   0xc0037898
c000dad4:	53                   	push   ebx
c000dad5:	50                   	push   eax
c000dad6:	e8 d5 29 00 00       	call   c00104b0 <tcp_rst>
c000dadb:	83 c4 20             	add    esp,0x20
c000dade:	e9 99 05 00 00       	jmp    c000e07c <tcp_process+0x970>
c000dae3:	90                   	nop
c000dae4:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000dae9:	0f b6 c0             	movzx  eax,al
c000daec:	83 e0 10             	and    eax,0x10
c000daef:	0f 84 a7 01 00 00    	je     c000dc9c <tcp_process+0x590>
c000daf5:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000dafb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daff:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000db02:	29 c2                	sub    edx,eax
c000db04:	89 d0                	mov    eax,edx
c000db06:	83 e8 01             	sub    eax,0x1
c000db09:	0f 88 41 01 00 00    	js     c000dc50 <tcp_process+0x544>
c000db0f:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000db15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db19:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000db1c:	29 c2                	sub    edx,eax
c000db1e:	89 d0                	mov    eax,edx
c000db20:	85 c0                	test   eax,eax
c000db22:	0f 8f 28 01 00 00    	jg     c000dc50 <tcp_process+0x544>
c000db28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db2c:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000db33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db37:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000db3a:	85 c0                	test   eax,eax
c000db3c:	75 16                	jne    c000db54 <tcp_process+0x448>
c000db3e:	83 ec 08             	sub    esp,0x8
c000db41:	68 49 0d 03 c0       	push   0xc0030d49
c000db46:	68 86 01 03 c0       	push   0xc0030186
c000db4b:	e8 88 23 01 00       	call   c001fed8 <CPrintf>
c000db50:	83 c4 10             	add    esp,0x10
c000db53:	90                   	nop
c000db54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db58:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000db5b:	85 c0                	test   eax,eax
c000db5d:	74 25                	je     c000db84 <tcp_process+0x478>
c000db5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db63:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000db66:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000db6a:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000db6d:	83 ec 04             	sub    esp,0x4
c000db70:	6a 00                	push   0x0
c000db72:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000db76:	52                   	push   edx
c000db77:	ff d0                	call   eax
c000db79:	83 c4 10             	add    esp,0x10
c000db7c:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000db80:	eb 0a                	jmp    c000db8c <tcp_process+0x480>
c000db82:	66 90                	xchg   ax,ax
c000db84:	c6 44 24 0e f2       	mov    BYTE PTR [esp+0xe],0xf2
c000db89:	8d 76 00             	lea    esi,[esi+0x0]
c000db8c:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000db91:	85 c0                	test   eax,eax
c000db93:	74 23                	je     c000dbb8 <tcp_process+0x4ac>
c000db95:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000db9a:	83 f8 f6             	cmp    eax,0xfffffff6
c000db9d:	74 11                	je     c000dbb0 <tcp_process+0x4a4>
c000db9f:	83 ec 0c             	sub    esp,0xc
c000dba2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dba6:	e8 69 d8 ff ff       	call   c000b414 <tcp_abort>
c000dbab:	83 c4 10             	add    esp,0x10
c000dbae:	66 90                	xchg   ax,ax
c000dbb0:	b0 f6                	mov    al,0xf6
c000dbb2:	e9 e5 04 00 00       	jmp    c000e09c <tcp_process+0x990>
c000dbb7:	90                   	nop
c000dbb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbbc:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000dbc0:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000dbc5:	83 ec 0c             	sub    esp,0xc
c000dbc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dbcc:	e8 e7 e0 ff ff       	call   c000bcb8 <tcp_receive>
c000dbd1:	83 c4 10             	add    esp,0x10
c000dbd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbd8:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000dbdb:	0f b7 c0             	movzx  eax,ax
c000dbde:	85 c0                	test   eax,eax
c000dbe0:	74 12                	je     c000dbf4 <tcp_process+0x4e8>
c000dbe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbe6:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000dbe9:	83 e8 01             	sub    eax,0x1
c000dbec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dbf0:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000dbf4:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000dbf9:	83 f8 01             	cmp    eax,0x1
c000dbfc:	75 0e                	jne    c000dc0c <tcp_process+0x500>
c000dbfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc02:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000dc05:	d1 e0                	shl    eax,1
c000dc07:	eb 0b                	jmp    c000dc14 <tcp_process+0x508>
c000dc09:	8d 76 00             	lea    esi,[esi+0x0]
c000dc0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc10:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000dc13:	90                   	nop
c000dc14:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dc18:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000dc1c:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000dc21:	0f b6 c0             	movzx  eax,al
c000dc24:	83 e0 20             	and    eax,0x20
c000dc27:	0f 84 ab 00 00 00    	je     c000dcd8 <tcp_process+0x5cc>
c000dc2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc31:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dc34:	83 c8 02             	or     eax,0x2
c000dc37:	88 c2                	mov    dl,al
c000dc39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc3d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dc40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc44:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000dc4b:	e9 88 00 00 00       	jmp    c000dcd8 <tcp_process+0x5cc>
c000dc50:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000dc55:	66 8b 00             	mov    ax,WORD PTR [eax]
c000dc58:	0f b7 c8             	movzx  ecx,ax
c000dc5b:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000dc60:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000dc64:	0f b7 d0             	movzx  edx,ax
c000dc67:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000dc6d:	0f b7 d8             	movzx  ebx,ax
c000dc70:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000dc75:	01 c3                	add    ebx,eax
c000dc77:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000dc7c:	83 ec 08             	sub    esp,0x8
c000dc7f:	51                   	push   ecx
c000dc80:	52                   	push   edx
c000dc81:	68 90 78 03 c0       	push   0xc0037890
c000dc86:	68 98 78 03 c0       	push   0xc0037898
c000dc8b:	53                   	push   ebx
c000dc8c:	50                   	push   eax
c000dc8d:	e8 1e 28 00 00       	call   c00104b0 <tcp_rst>
c000dc92:	83 c4 20             	add    esp,0x20
c000dc95:	e9 e6 03 00 00       	jmp    c000e080 <tcp_process+0x974>
c000dc9a:	66 90                	xchg   ax,ax
c000dc9c:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000dca1:	0f b6 c0             	movzx  eax,al
c000dca4:	83 e0 02             	and    eax,0x2
c000dca7:	0f 84 d3 03 00 00    	je     c000e080 <tcp_process+0x974>
c000dcad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcb1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dcb4:	8d 50 ff             	lea    edx,[eax-0x1]
c000dcb7:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000dcbc:	39 c2                	cmp    edx,eax
c000dcbe:	0f 85 bc 03 00 00    	jne    c000e080 <tcp_process+0x974>
c000dcc4:	83 ec 0c             	sub    esp,0xc
c000dcc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dccb:	e8 e4 29 00 00       	call   c00106b4 <tcp_rexmit>
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	e9 a8 03 00 00       	jmp    c000e080 <tcp_process+0x974>
c000dcd8:	90                   	nop
c000dcd9:	e9 a2 03 00 00       	jmp    c000e080 <tcp_process+0x974>
c000dcde:	66 90                	xchg   ax,ax
c000dce0:	83 ec 0c             	sub    esp,0xc
c000dce3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dce7:	e8 cc df ff ff       	call   c000bcb8 <tcp_receive>
c000dcec:	83 c4 10             	add    esp,0x10
c000dcef:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000dcf4:	0f b6 c0             	movzx  eax,al
c000dcf7:	83 e0 20             	and    eax,0x20
c000dcfa:	0f 84 84 03 00 00    	je     c000e084 <tcp_process+0x978>
c000dd00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd04:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dd07:	83 c8 02             	or     eax,0x2
c000dd0a:	88 c2                	mov    dl,al
c000dd0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd10:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dd13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd17:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000dd1e:	e9 61 03 00 00       	jmp    c000e084 <tcp_process+0x978>
c000dd23:	90                   	nop
c000dd24:	83 ec 0c             	sub    esp,0xc
c000dd27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd2b:	e8 88 df ff ff       	call   c000bcb8 <tcp_receive>
c000dd30:	83 c4 10             	add    esp,0x10
c000dd33:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000dd38:	0f b6 c0             	movzx  eax,al
c000dd3b:	83 e0 20             	and    eax,0x20
c000dd3e:	0f 84 08 01 00 00    	je     c000de4c <tcp_process+0x740>
c000dd44:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000dd49:	0f b6 c0             	movzx  eax,al
c000dd4c:	83 e0 10             	and    eax,0x10
c000dd4f:	0f 84 d3 00 00 00    	je     c000de28 <tcp_process+0x71c>
c000dd55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd59:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dd5c:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000dd61:	39 c2                	cmp    edx,eax
c000dd63:	0f 85 bf 00 00 00    	jne    c000de28 <tcp_process+0x71c>
c000dd69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd6d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dd70:	83 c8 02             	or     eax,0x2
c000dd73:	88 c2                	mov    dl,al
c000dd75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd79:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dd7c:	83 ec 0c             	sub    esp,0xc
c000dd7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd83:	e8 48 c5 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000dd88:	83 c4 10             	add    esp,0x10
c000dd8b:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000dd90:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dd94:	75 12                	jne    c000dda8 <tcp_process+0x69c>
c000dd96:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000dd9b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd9e:	a3 70 78 03 c0       	mov    ds:0xc0037870,eax
c000dda3:	eb 4b                	jmp    c000ddf0 <tcp_process+0x6e4>
c000dda5:	8d 76 00             	lea    esi,[esi+0x0]
c000dda8:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000ddad:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000ddb2:	eb 30                	jmp    c000dde4 <tcp_process+0x6d8>
c000ddb4:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ddb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ddbc:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000ddc0:	75 12                	jne    c000ddd4 <tcp_process+0x6c8>
c000ddc2:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ddc7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ddcb:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ddce:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ddd1:	eb 1d                	jmp    c000ddf0 <tcp_process+0x6e4>
c000ddd3:	90                   	nop
c000ddd4:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ddd9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dddc:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000dde1:	8d 76 00             	lea    esi,[esi+0x0]
c000dde4:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000dde9:	85 c0                	test   eax,eax
c000ddeb:	75 c7                	jne    c000ddb4 <tcp_process+0x6a8>
c000dded:	8d 76 00             	lea    esi,[esi+0x0]
c000ddf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddf4:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ddfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddff:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000de06:	8b 15 84 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037884
c000de0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de10:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000de13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de17:	a3 84 78 03 c0       	mov    ds:0xc0037884,eax
c000de1c:	e8 93 2e 00 00       	call   c0010cb4 <tcp_timer_needed>
c000de21:	e9 62 02 00 00       	jmp    c000e088 <tcp_process+0x97c>
c000de26:	66 90                	xchg   ax,ax
c000de28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de2c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000de2f:	83 c8 02             	or     eax,0x2
c000de32:	88 c2                	mov    dl,al
c000de34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de38:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000de3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de3f:	c7 40 10 08 00 00 00 	mov    DWORD PTR [eax+0x10],0x8
c000de46:	e9 3d 02 00 00       	jmp    c000e088 <tcp_process+0x97c>
c000de4b:	90                   	nop
c000de4c:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000de51:	0f b6 c0             	movzx  eax,al
c000de54:	83 e0 10             	and    eax,0x10
c000de57:	0f 84 2b 02 00 00    	je     c000e088 <tcp_process+0x97c>
c000de5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de61:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000de64:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000de69:	39 c2                	cmp    edx,eax
c000de6b:	0f 85 17 02 00 00    	jne    c000e088 <tcp_process+0x97c>
c000de71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de75:	c7 40 10 06 00 00 00 	mov    DWORD PTR [eax+0x10],0x6
c000de7c:	e9 07 02 00 00       	jmp    c000e088 <tcp_process+0x97c>
c000de81:	8d 76 00             	lea    esi,[esi+0x0]
c000de84:	83 ec 0c             	sub    esp,0xc
c000de87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de8b:	e8 28 de ff ff       	call   c000bcb8 <tcp_receive>
c000de90:	83 c4 10             	add    esp,0x10
c000de93:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000de98:	0f b6 c0             	movzx  eax,al
c000de9b:	83 e0 20             	and    eax,0x20
c000de9e:	0f 84 e8 01 00 00    	je     c000e08c <tcp_process+0x980>
c000dea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dea8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000deab:	83 c8 02             	or     eax,0x2
c000deae:	88 c2                	mov    dl,al
c000deb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000deb4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000deb7:	83 ec 0c             	sub    esp,0xc
c000deba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000debe:	e8 0d c4 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000dec3:	83 c4 10             	add    esp,0x10
c000dec6:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000decb:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000decf:	75 0f                	jne    c000dee0 <tcp_process+0x7d4>
c000ded1:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000ded6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ded9:	a3 70 78 03 c0       	mov    ds:0xc0037870,eax
c000dede:	eb 48                	jmp    c000df28 <tcp_process+0x81c>
c000dee0:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000dee5:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000deea:	eb 30                	jmp    c000df1c <tcp_process+0x810>
c000deec:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000def1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000def4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000def8:	75 12                	jne    c000df0c <tcp_process+0x800>
c000defa:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000deff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000df03:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000df06:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000df09:	eb 1d                	jmp    c000df28 <tcp_process+0x81c>
c000df0b:	90                   	nop
c000df0c:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000df11:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000df14:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000df19:	8d 76 00             	lea    esi,[esi+0x0]
c000df1c:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000df21:	85 c0                	test   eax,eax
c000df23:	75 c7                	jne    c000deec <tcp_process+0x7e0>
c000df25:	8d 76 00             	lea    esi,[esi+0x0]
c000df28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df2c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000df33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df37:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000df3e:	8b 15 84 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037884
c000df44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df48:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000df4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df4f:	a3 84 78 03 c0       	mov    ds:0xc0037884,eax
c000df54:	e8 5b 2d 00 00       	call   c0010cb4 <tcp_timer_needed>
c000df59:	e9 2e 01 00 00       	jmp    c000e08c <tcp_process+0x980>
c000df5e:	66 90                	xchg   ax,ax
c000df60:	83 ec 0c             	sub    esp,0xc
c000df63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df67:	e8 4c dd ff ff       	call   c000bcb8 <tcp_receive>
c000df6c:	83 c4 10             	add    esp,0x10
c000df6f:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000df74:	0f b6 c0             	movzx  eax,al
c000df77:	83 e0 10             	and    eax,0x10
c000df7a:	0f 84 10 01 00 00    	je     c000e090 <tcp_process+0x984>
c000df80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df84:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000df87:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000df8c:	39 c2                	cmp    edx,eax
c000df8e:	0f 85 fc 00 00 00    	jne    c000e090 <tcp_process+0x984>
c000df94:	83 ec 0c             	sub    esp,0xc
c000df97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df9b:	e8 30 c3 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000dfa0:	83 c4 10             	add    esp,0x10
c000dfa3:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000dfa8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dfac:	75 12                	jne    c000dfc0 <tcp_process+0x8b4>
c000dfae:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000dfb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dfb6:	a3 70 78 03 c0       	mov    ds:0xc0037870,eax
c000dfbb:	eb 4b                	jmp    c000e008 <tcp_process+0x8fc>
c000dfbd:	8d 76 00             	lea    esi,[esi+0x0]
c000dfc0:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000dfc5:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000dfca:	eb 30                	jmp    c000dffc <tcp_process+0x8f0>
c000dfcc:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000dfd1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dfd4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dfd8:	75 12                	jne    c000dfec <tcp_process+0x8e0>
c000dfda:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000dfdf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dfe3:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000dfe6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dfe9:	eb 1d                	jmp    c000e008 <tcp_process+0x8fc>
c000dfeb:	90                   	nop
c000dfec:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000dff1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dff4:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000dff9:	8d 76 00             	lea    esi,[esi+0x0]
c000dffc:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000e001:	85 c0                	test   eax,eax
c000e003:	75 c7                	jne    c000dfcc <tcp_process+0x8c0>
c000e005:	8d 76 00             	lea    esi,[esi+0x0]
c000e008:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e00c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000e013:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e017:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000e01e:	8b 15 84 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037884
c000e024:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e028:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e02b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e02f:	a3 84 78 03 c0       	mov    ds:0xc0037884,eax
c000e034:	e8 7b 2c 00 00       	call   c0010cb4 <tcp_timer_needed>
c000e039:	eb 55                	jmp    c000e090 <tcp_process+0x984>
c000e03b:	90                   	nop
c000e03c:	83 ec 0c             	sub    esp,0xc
c000e03f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e043:	e8 70 dc ff ff       	call   c000bcb8 <tcp_receive>
c000e048:	83 c4 10             	add    esp,0x10
c000e04b:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000e050:	0f b6 c0             	movzx  eax,al
c000e053:	83 e0 10             	and    eax,0x10
c000e056:	74 3c                	je     c000e094 <tcp_process+0x988>
c000e058:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e05c:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000e05f:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000e064:	39 c2                	cmp    edx,eax
c000e066:	75 2c                	jne    c000e094 <tcp_process+0x988>
c000e068:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000e06d:	83 c8 10             	or     eax,0x10
c000e070:	a2 a8 b8 03 c0       	mov    ds:0xc003b8a8,al
c000e075:	eb 1d                	jmp    c000e094 <tcp_process+0x988>
c000e077:	90                   	nop
c000e078:	90                   	nop
c000e079:	eb 1d                	jmp    c000e098 <tcp_process+0x98c>
c000e07b:	90                   	nop
c000e07c:	90                   	nop
c000e07d:	eb 19                	jmp    c000e098 <tcp_process+0x98c>
c000e07f:	90                   	nop
c000e080:	90                   	nop
c000e081:	eb 15                	jmp    c000e098 <tcp_process+0x98c>
c000e083:	90                   	nop
c000e084:	90                   	nop
c000e085:	eb 11                	jmp    c000e098 <tcp_process+0x98c>
c000e087:	90                   	nop
c000e088:	90                   	nop
c000e089:	eb 0d                	jmp    c000e098 <tcp_process+0x98c>
c000e08b:	90                   	nop
c000e08c:	90                   	nop
c000e08d:	eb 09                	jmp    c000e098 <tcp_process+0x98c>
c000e08f:	90                   	nop
c000e090:	90                   	nop
c000e091:	eb 05                	jmp    c000e098 <tcp_process+0x98c>
c000e093:	90                   	nop
c000e094:	90                   	nop
c000e095:	8d 76 00             	lea    esi,[esi+0x0]
c000e098:	b0 00                	mov    al,0x0
c000e09a:	66 90                	xchg   ax,ax
c000e09c:	83 c4 18             	add    esp,0x18
c000e09f:	5b                   	pop    ebx
c000e0a0:	c3                   	ret    
c000e0a1:	8d 76 00             	lea    esi,[esi+0x0]

c000e0a4 <tcp_input>:
c000e0a4:	53                   	push   ebx
c000e0a5:	83 ec 18             	sub    esp,0x18
c000e0a8:	66 a1 b2 77 03 c0    	mov    ax,ds:0xc00377b2
c000e0ae:	83 c0 01             	add    eax,0x1
c000e0b1:	66 a3 b2 77 03 c0    	mov    ds:0xc00377b2,ax
c000e0b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e0be:	a3 b8 b8 03 c0       	mov    ds:0xc003b8b8,eax
c000e0c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0c7:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000e0ca:	a1 b8 b8 03 c0       	mov    eax,ds:0xc003b8b8
c000e0cf:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e0d2:	0f b7 c0             	movzx  eax,ax
c000e0d5:	83 ec 0c             	sub    esp,0xc
c000e0d8:	50                   	push   eax
c000e0d9:	e8 0a 2b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e0de:	83 c4 10             	add    esp,0x10
c000e0e1:	0f b7 c0             	movzx  eax,ax
c000e0e4:	c1 e8 08             	shr    eax,0x8
c000e0e7:	0f b7 c0             	movzx  eax,ax
c000e0ea:	83 e0 0f             	and    eax,0xf
c000e0ed:	c1 e0 02             	shl    eax,0x2
c000e0f0:	01 d8                	add    eax,ebx
c000e0f2:	a3 bc b8 03 c0       	mov    ds:0xc003b8bc,eax
c000e0f7:	a1 b8 b8 03 c0       	mov    eax,ds:0xc003b8b8
c000e0fc:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e0ff:	0f b7 c0             	movzx  eax,ax
c000e102:	83 ec 0c             	sub    esp,0xc
c000e105:	50                   	push   eax
c000e106:	e8 dd 2a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e10b:	83 c4 10             	add    esp,0x10
c000e10e:	0f b7 c0             	movzx  eax,ax
c000e111:	c1 e8 08             	shr    eax,0x8
c000e114:	83 e0 0f             	and    eax,0xf
c000e117:	c1 e0 02             	shl    eax,0x2
c000e11a:	f7 d8                	neg    eax
c000e11c:	98                   	cwde   
c000e11d:	83 ec 08             	sub    esp,0x8
c000e120:	50                   	push   eax
c000e121:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e125:	e8 2e a2 ff ff       	call   c0008358 <pbuf_header>
c000e12a:	83 c4 10             	add    esp,0x10
c000e12d:	0f b6 c0             	movzx  eax,al
c000e130:	85 c0                	test   eax,eax
c000e132:	75 10                	jne    c000e144 <tcp_input+0xa0>
c000e134:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e138:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e13b:	0f b7 c0             	movzx  eax,ax
c000e13e:	83 f8 13             	cmp    eax,0x13
c000e141:	77 35                	ja     c000e178 <tcp_input+0xd4>
c000e143:	90                   	nop
c000e144:	66 a1 ba 77 03 c0    	mov    ax,ds:0xc00377ba
c000e14a:	83 c0 01             	add    eax,0x1
c000e14d:	66 a3 ba 77 03 c0    	mov    ds:0xc00377ba,ax
c000e153:	66 a1 b6 77 03 c0    	mov    ax,ds:0xc00377b6
c000e159:	83 c0 01             	add    eax,0x1
c000e15c:	66 a3 b6 77 03 c0    	mov    ds:0xc00377b6,ax
c000e162:	83 ec 0c             	sub    esp,0xc
c000e165:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e169:	e8 86 a3 ff ff       	call   c00084f4 <pbuf_free>
c000e16e:	83 c4 10             	add    esp,0x10
c000e171:	e9 fa 09 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e176:	66 90                	xchg   ax,ax
c000e178:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c000e17d:	83 ec 08             	sub    esp,0x8
c000e180:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e184:	50                   	push   eax
c000e185:	e8 5e 5e 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c000e18a:	83 c4 10             	add    esp,0x10
c000e18d:	0f b6 c0             	movzx  eax,al
c000e190:	85 c0                	test   eax,eax
c000e192:	75 14                	jne    c000e1a8 <tcp_input+0x104>
c000e194:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c000e199:	25 f0 00 00 00       	and    eax,0xf0
c000e19e:	3d e0 00 00 00       	cmp    eax,0xe0
c000e1a3:	75 37                	jne    c000e1dc <tcp_input+0x138>
c000e1a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e1a8:	66 a1 c0 77 03 c0    	mov    ax,ds:0xc00377c0
c000e1ae:	83 c0 01             	add    eax,0x1
c000e1b1:	66 a3 c0 77 03 c0    	mov    ds:0xc00377c0,ax
c000e1b7:	66 a1 b6 77 03 c0    	mov    ax,ds:0xc00377b6
c000e1bd:	83 c0 01             	add    eax,0x1
c000e1c0:	66 a3 b6 77 03 c0    	mov    ds:0xc00377b6,ax
c000e1c6:	83 ec 0c             	sub    esp,0xc
c000e1c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e1cd:	e8 22 a3 ff ff       	call   c00084f4 <pbuf_free>
c000e1d2:	83 c4 10             	add    esp,0x10
c000e1d5:	e9 96 09 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e1da:	66 90                	xchg   ax,ax
c000e1dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e1e3:	0f b7 c0             	movzx  eax,ax
c000e1e6:	83 ec 0c             	sub    esp,0xc
c000e1e9:	50                   	push   eax
c000e1ea:	6a 06                	push   0x6
c000e1ec:	68 98 78 03 c0       	push   0xc0037898
c000e1f1:	68 90 78 03 c0       	push   0xc0037890
c000e1f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e1fa:	e8 11 51 00 00       	call   c0013310 <inet_chksum_pseudo>
c000e1ff:	83 c4 20             	add    esp,0x20
c000e202:	0f b7 c0             	movzx  eax,ax
c000e205:	85 c0                	test   eax,eax
c000e207:	74 33                	je     c000e23c <tcp_input+0x198>
c000e209:	66 a1 b8 77 03 c0    	mov    ax,ds:0xc00377b8
c000e20f:	83 c0 01             	add    eax,0x1
c000e212:	66 a3 b8 77 03 c0    	mov    ds:0xc00377b8,ax
c000e218:	66 a1 b6 77 03 c0    	mov    ax,ds:0xc00377b6
c000e21e:	83 c0 01             	add    eax,0x1
c000e221:	66 a3 b6 77 03 c0    	mov    ds:0xc00377b6,ax
c000e227:	83 ec 0c             	sub    esp,0xc
c000e22a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e22e:	e8 c1 a2 ff ff       	call   c00084f4 <pbuf_free>
c000e233:	83 c4 10             	add    esp,0x10
c000e236:	e9 35 09 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e23b:	90                   	nop
c000e23c:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e241:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e245:	0f b7 c0             	movzx  eax,ax
c000e248:	83 ec 0c             	sub    esp,0xc
c000e24b:	50                   	push   eax
c000e24c:	e8 97 29 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e251:	83 c4 10             	add    esp,0x10
c000e254:	0f b7 c0             	movzx  eax,ax
c000e257:	c1 e8 0c             	shr    eax,0xc
c000e25a:	88 44 24 02          	mov    BYTE PTR [esp+0x2],al
c000e25e:	0f b6 44 24 02       	movzx  eax,BYTE PTR [esp+0x2]
c000e263:	ba 00 00 00 00       	mov    edx,0x0
c000e268:	89 d1                	mov    ecx,edx
c000e26a:	29 c1                	sub    ecx,eax
c000e26c:	89 c8                	mov    eax,ecx
c000e26e:	c1 e0 02             	shl    eax,0x2
c000e271:	98                   	cwde   
c000e272:	83 ec 08             	sub    esp,0x8
c000e275:	50                   	push   eax
c000e276:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e27a:	e8 d9 a0 ff ff       	call   c0008358 <pbuf_header>
c000e27f:	83 c4 10             	add    esp,0x10
c000e282:	0f b6 c0             	movzx  eax,al
c000e285:	85 c0                	test   eax,eax
c000e287:	74 33                	je     c000e2bc <tcp_input+0x218>
c000e289:	66 a1 ba 77 03 c0    	mov    ax,ds:0xc00377ba
c000e28f:	83 c0 01             	add    eax,0x1
c000e292:	66 a3 ba 77 03 c0    	mov    ds:0xc00377ba,ax
c000e298:	66 a1 b6 77 03 c0    	mov    ax,ds:0xc00377b6
c000e29e:	83 c0 01             	add    eax,0x1
c000e2a1:	66 a3 b6 77 03 c0    	mov    ds:0xc00377b6,ax
c000e2a7:	83 ec 0c             	sub    esp,0xc
c000e2aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ae:	e8 41 a2 ff ff       	call   c00084f4 <pbuf_free>
c000e2b3:	83 c4 10             	add    esp,0x10
c000e2b6:	e9 b5 08 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e2bb:	90                   	nop
c000e2bc:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e2c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e2c4:	0f b7 c0             	movzx  eax,ax
c000e2c7:	8b 1d bc b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8bc
c000e2cd:	83 ec 0c             	sub    esp,0xc
c000e2d0:	50                   	push   eax
c000e2d1:	e8 12 29 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e2d6:	83 c4 10             	add    esp,0x10
c000e2d9:	66 89 03             	mov    WORD PTR [ebx],ax
c000e2dc:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e2e1:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e2e5:	0f b7 c0             	movzx  eax,ax
c000e2e8:	8b 1d bc b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8bc
c000e2ee:	83 ec 0c             	sub    esp,0xc
c000e2f1:	50                   	push   eax
c000e2f2:	e8 f1 28 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e2f7:	83 c4 10             	add    esp,0x10
c000e2fa:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000e2fe:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e303:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e306:	8b 1d bc b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8bc
c000e30c:	83 ec 0c             	sub    esp,0xc
c000e30f:	50                   	push   eax
c000e310:	e8 f7 28 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e31b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e31e:	a3 b4 b8 03 c0       	mov    ds:0xc003b8b4,eax
c000e323:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e328:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e32b:	8b 1d bc b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8bc
c000e331:	83 ec 0c             	sub    esp,0xc
c000e334:	50                   	push   eax
c000e335:	e8 d2 28 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000e33a:	83 c4 10             	add    esp,0x10
c000e33d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000e340:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e343:	a3 b0 b8 03 c0       	mov    ds:0xc003b8b0,eax
c000e348:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e34d:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000e351:	0f b7 c0             	movzx  eax,ax
c000e354:	8b 1d bc b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8bc
c000e35a:	83 ec 0c             	sub    esp,0xc
c000e35d:	50                   	push   eax
c000e35e:	e8 85 28 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e363:	83 c4 10             	add    esp,0x10
c000e366:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000e36a:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e36f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e373:	0f b7 c0             	movzx  eax,ax
c000e376:	83 ec 0c             	sub    esp,0xc
c000e379:	50                   	push   eax
c000e37a:	e8 69 28 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e37f:	83 c4 10             	add    esp,0x10
c000e382:	83 e0 3f             	and    eax,0x3f
c000e385:	a2 ac b8 03 c0       	mov    ds:0xc003b8ac,al
c000e38a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e38e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000e391:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000e396:	0f b6 c0             	movzx  eax,al
c000e399:	83 e0 03             	and    eax,0x3
c000e39c:	0f 95 c0             	setne  al
c000e39f:	0f b6 c0             	movzx  eax,al
c000e3a2:	01 d0                	add    eax,edx
c000e3a4:	66 a3 aa b8 03 c0    	mov    ds:0xc003b8aa,ax
c000e3aa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e3b2:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000e3b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e3bb:	e9 50 01 00 00       	jmp    c000e510 <tcp_input+0x46c>
c000e3c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3c4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e3c7:	85 c0                	test   eax,eax
c000e3c9:	75 15                	jne    c000e3e0 <tcp_input+0x33c>
c000e3cb:	83 ec 08             	sub    esp,0x8
c000e3ce:	68 f0 0b 03 c0       	push   0xc0030bf0
c000e3d3:	68 86 01 03 c0       	push   0xc0030186
c000e3d8:	e8 fb 1a 01 00       	call   c001fed8 <CPrintf>
c000e3dd:	83 c4 10             	add    esp,0x10
c000e3e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3e4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e3e7:	83 f8 0a             	cmp    eax,0xa
c000e3ea:	75 18                	jne    c000e404 <tcp_input+0x360>
c000e3ec:	83 ec 08             	sub    esp,0x8
c000e3ef:	68 18 0c 03 c0       	push   0xc0030c18
c000e3f4:	68 86 01 03 c0       	push   0xc0030186
c000e3f9:	e8 da 1a 01 00       	call   c001fed8 <CPrintf>
c000e3fe:	83 c4 10             	add    esp,0x10
c000e401:	8d 76 00             	lea    esi,[esi+0x0]
c000e404:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e408:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e40b:	83 f8 01             	cmp    eax,0x1
c000e40e:	75 18                	jne    c000e428 <tcp_input+0x384>
c000e410:	83 ec 08             	sub    esp,0x8
c000e413:	68 44 0c 03 c0       	push   0xc0030c44
c000e418:	68 86 01 03 c0       	push   0xc0030186
c000e41d:	e8 b6 1a 01 00       	call   c001fed8 <CPrintf>
c000e422:	83 c4 10             	add    esp,0x10
c000e425:	8d 76 00             	lea    esi,[esi+0x0]
c000e428:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e42c:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e430:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e435:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e438:	0f b7 d2             	movzx  edx,dx
c000e43b:	0f b7 c0             	movzx  eax,ax
c000e43e:	39 c2                	cmp    edx,eax
c000e440:	0f 85 b6 00 00 00    	jne    c000e4fc <tcp_input+0x458>
c000e446:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e44a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e44d:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e452:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e456:	0f b7 d2             	movzx  edx,dx
c000e459:	0f b7 c0             	movzx  eax,ax
c000e45c:	39 c2                	cmp    edx,eax
c000e45e:	0f 85 98 00 00 00    	jne    c000e4fc <tcp_input+0x458>
c000e464:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e468:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e46b:	a1 90 78 03 c0       	mov    eax,ds:0xc0037890
c000e470:	39 c2                	cmp    edx,eax
c000e472:	0f 85 84 00 00 00    	jne    c000e4fc <tcp_input+0x458>
c000e478:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e47c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e47e:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c000e483:	39 c2                	cmp    edx,eax
c000e485:	75 75                	jne    c000e4fc <tcp_input+0x458>
c000e487:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e48b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e48e:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e492:	75 18                	jne    c000e4ac <tcp_input+0x408>
c000e494:	83 ec 08             	sub    esp,0x8
c000e497:	68 6c 0c 03 c0       	push   0xc0030c6c
c000e49c:	68 86 01 03 c0       	push   0xc0030186
c000e4a1:	e8 32 1a 01 00       	call   c001fed8 <CPrintf>
c000e4a6:	83 c4 10             	add    esp,0x10
c000e4a9:	8d 76 00             	lea    esi,[esi+0x0]
c000e4ac:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e4b1:	74 25                	je     c000e4d8 <tcp_input+0x434>
c000e4b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4b7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e4ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e4be:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e4c1:	8b 15 70 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037870
c000e4c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e4ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4d2:	a3 70 78 03 c0       	mov    ds:0xc0037870,eax
c000e4d7:	90                   	nop
c000e4d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e4df:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e4e3:	75 3b                	jne    c000e520 <tcp_input+0x47c>
c000e4e5:	83 ec 08             	sub    esp,0x8
c000e4e8:	68 98 0c 03 c0       	push   0xc0030c98
c000e4ed:	68 86 01 03 c0       	push   0xc0030186
c000e4f2:	e8 e1 19 01 00       	call   c001fed8 <CPrintf>
c000e4f7:	83 c4 10             	add    esp,0x10
c000e4fa:	eb 24                	jmp    c000e520 <tcp_input+0x47c>
c000e4fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e500:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e504:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e508:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e50b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e50f:	90                   	nop
c000e510:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e515:	0f 85 a5 fe ff ff    	jne    c000e3c0 <tcp_input+0x31c>
c000e51b:	eb 07                	jmp    c000e524 <tcp_input+0x480>
c000e51d:	8d 76 00             	lea    esi,[esi+0x0]
c000e520:	90                   	nop
c000e521:	8d 76 00             	lea    esi,[esi+0x0]
c000e524:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e529:	0f 85 89 01 00 00    	jne    c000e6b8 <tcp_input+0x614>
c000e52f:	a1 84 78 03 c0       	mov    eax,ds:0xc0037884
c000e534:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e538:	e9 ab 00 00 00       	jmp    c000e5e8 <tcp_input+0x544>
c000e53d:	8d 76 00             	lea    esi,[esi+0x0]
c000e540:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e544:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e547:	83 f8 0a             	cmp    eax,0xa
c000e54a:	74 18                	je     c000e564 <tcp_input+0x4c0>
c000e54c:	83 ec 08             	sub    esp,0x8
c000e54f:	68 c4 0c 03 c0       	push   0xc0030cc4
c000e554:	68 86 01 03 c0       	push   0xc0030186
c000e559:	e8 7a 19 01 00       	call   c001fed8 <CPrintf>
c000e55e:	83 c4 10             	add    esp,0x10
c000e561:	8d 76 00             	lea    esi,[esi+0x0]
c000e564:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e568:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e56c:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e571:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e574:	0f b7 d2             	movzx  edx,dx
c000e577:	0f b7 c0             	movzx  eax,ax
c000e57a:	39 c2                	cmp    edx,eax
c000e57c:	75 5e                	jne    c000e5dc <tcp_input+0x538>
c000e57e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e582:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e585:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e58a:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e58e:	0f b7 d2             	movzx  edx,dx
c000e591:	0f b7 c0             	movzx  eax,ax
c000e594:	39 c2                	cmp    edx,eax
c000e596:	75 44                	jne    c000e5dc <tcp_input+0x538>
c000e598:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e59c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e59f:	a1 90 78 03 c0       	mov    eax,ds:0xc0037890
c000e5a4:	39 c2                	cmp    edx,eax
c000e5a6:	75 34                	jne    c000e5dc <tcp_input+0x538>
c000e5a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e5ae:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c000e5b3:	39 c2                	cmp    edx,eax
c000e5b5:	75 25                	jne    c000e5dc <tcp_input+0x538>
c000e5b7:	83 ec 0c             	sub    esp,0xc
c000e5ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e5be:	e8 81 d4 ff ff       	call   c000ba44 <tcp_timewait_input>
c000e5c3:	83 c4 10             	add    esp,0x10
c000e5c6:	83 ec 0c             	sub    esp,0xc
c000e5c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e5cd:	e8 22 9f ff ff       	call   c00084f4 <pbuf_free>
c000e5d2:	83 c4 10             	add    esp,0x10
c000e5d5:	e9 96 05 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e5da:	66 90                	xchg   ax,ax
c000e5dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e5e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5e7:	90                   	nop
c000e5e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e5ed:	0f 85 4d ff ff ff    	jne    c000e540 <tcp_input+0x49c>
c000e5f3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e5fb:	a1 78 78 03 c0       	mov    eax,ds:0xc0037878
c000e600:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e604:	eb 52                	jmp    c000e658 <tcp_input+0x5b4>
c000e606:	66 90                	xchg   ax,ax
c000e608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e60c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e60f:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e614:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e618:	0f b7 d2             	movzx  edx,dx
c000e61b:	0f b7 c0             	movzx  eax,ax
c000e61e:	39 c2                	cmp    edx,eax
c000e620:	75 22                	jne    c000e644 <tcp_input+0x5a0>
c000e622:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e626:	8b 10                	mov    edx,DWORD PTR [eax]
c000e628:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c000e62d:	39 c2                	cmp    edx,eax
c000e62f:	74 2f                	je     c000e660 <tcp_input+0x5bc>
c000e631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e635:	85 c0                	test   eax,eax
c000e637:	74 27                	je     c000e660 <tcp_input+0x5bc>
c000e639:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e63d:	8b 00                	mov    eax,DWORD PTR [eax]
c000e63f:	85 c0                	test   eax,eax
c000e641:	74 1d                	je     c000e660 <tcp_input+0x5bc>
c000e643:	90                   	nop
c000e644:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e648:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e64c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e650:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e653:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e657:	90                   	nop
c000e658:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e65d:	75 a9                	jne    c000e608 <tcp_input+0x564>
c000e65f:	90                   	nop
c000e660:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e665:	74 51                	je     c000e6b8 <tcp_input+0x614>
c000e667:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e66c:	74 26                	je     c000e694 <tcp_input+0x5f0>
c000e66e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e672:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e675:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e679:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e67c:	8b 15 78 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037878
c000e682:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e686:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e689:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e68d:	a3 78 78 03 c0       	mov    ds:0xc0037878,eax
c000e692:	66 90                	xchg   ax,ax
c000e694:	83 ec 0c             	sub    esp,0xc
c000e697:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e69b:	e8 60 ee ff ff       	call   c000d500 <tcp_listen_input>
c000e6a0:	83 c4 10             	add    esp,0x10
c000e6a3:	83 ec 0c             	sub    esp,0xc
c000e6a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e6aa:	e8 45 9e ff ff       	call   c00084f4 <pbuf_free>
c000e6af:	83 c4 10             	add    esp,0x10
c000e6b2:	e9 b9 04 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e6b7:	90                   	nop
c000e6b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e6bd:	0f 84 19 04 00 00    	je     c000eadc <tcp_input+0xa38>
c000e6c3:	c7 05 c0 b8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b8c0,0x0
c000e6cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e6d4:	66 a3 c8 b8 03 c0    	mov    ds:0xc003b8c8,ax
c000e6da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6de:	a3 c4 b8 03 c0       	mov    ds:0xc003b8c4,eax
c000e6e3:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e6e8:	a3 cc b8 03 c0       	mov    ds:0xc003b8cc,eax
c000e6ed:	c7 05 a4 b8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b8a4,0x0
c000e6f7:	c6 05 a8 b8 03 c0 00 	mov    BYTE PTR ds:0xc003b8a8,0x0
c000e6fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e702:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e708:	85 c0                	test   eax,eax
c000e70a:	0f 84 b4 00 00 00    	je     c000e7c4 <tcp_input+0x720>
c000e710:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e714:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e71a:	85 c0                	test   eax,eax
c000e71c:	74 2e                	je     c000e74c <tcp_input+0x6a8>
c000e71e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e722:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e728:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e72c:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000e732:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e736:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e739:	6a 00                	push   0x0
c000e73b:	51                   	push   ecx
c000e73c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e740:	52                   	push   edx
c000e741:	ff d0                	call   eax
c000e743:	83 c4 10             	add    esp,0x10
c000e746:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e74a:	eb 20                	jmp    c000e76c <tcp_input+0x6c8>
c000e74c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e750:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e756:	6a 00                	push   0x0
c000e758:	50                   	push   eax
c000e759:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e75d:	6a 00                	push   0x0
c000e75f:	e8 b8 c8 ff ff       	call   c000b01c <tcp_recv_null>
c000e764:	83 c4 10             	add    esp,0x10
c000e767:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e76b:	90                   	nop
c000e76c:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e771:	85 c0                	test   eax,eax
c000e773:	75 13                	jne    c000e788 <tcp_input+0x6e4>
c000e775:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e779:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000e783:	eb 3f                	jmp    c000e7c4 <tcp_input+0x720>
c000e785:	8d 76 00             	lea    esi,[esi+0x0]
c000e788:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e78d:	83 f8 f6             	cmp    eax,0xfffffff6
c000e790:	74 0e                	je     c000e7a0 <tcp_input+0x6fc>
c000e792:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000e798:	0f b7 c0             	movzx  eax,ax
c000e79b:	85 c0                	test   eax,eax
c000e79d:	74 25                	je     c000e7c4 <tcp_input+0x720>
c000e79f:	90                   	nop
c000e7a0:	66 a1 b6 77 03 c0    	mov    ax,ds:0xc00377b6
c000e7a6:	83 c0 01             	add    eax,0x1
c000e7a9:	66 a3 b6 77 03 c0    	mov    ds:0xc00377b6,ax
c000e7af:	83 ec 0c             	sub    esp,0xc
c000e7b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e7b6:	e8 39 9d ff ff       	call   c00084f4 <pbuf_free>
c000e7bb:	83 c4 10             	add    esp,0x10
c000e7be:	e9 ad 03 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e7c3:	90                   	nop
c000e7c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7c8:	a3 88 78 03 c0       	mov    ds:0xc0037888,eax
c000e7cd:	83 ec 0c             	sub    esp,0xc
c000e7d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e7d4:	e8 33 ef ff ff       	call   c000d70c <tcp_process>
c000e7d9:	83 c4 10             	add    esp,0x10
c000e7dc:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e7e0:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e7e5:	83 f8 f6             	cmp    eax,0xfffffff6
c000e7e8:	0f 84 9a 02 00 00    	je     c000ea88 <tcp_input+0x9e4>
c000e7ee:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000e7f3:	0f b6 c0             	movzx  eax,al
c000e7f6:	83 e0 08             	and    eax,0x8
c000e7f9:	74 59                	je     c000e854 <tcp_input+0x7b0>
c000e7fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7ff:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e805:	85 c0                	test   eax,eax
c000e807:	74 1f                	je     c000e828 <tcp_input+0x784>
c000e809:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e80d:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e813:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e817:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e81a:	83 ec 08             	sub    esp,0x8
c000e81d:	6a f5                	push   0xfffffff5
c000e81f:	52                   	push   edx
c000e820:	ff d0                	call   eax
c000e822:	83 c4 10             	add    esp,0x10
c000e825:	8d 76 00             	lea    esi,[esi+0x0]
c000e828:	83 ec 08             	sub    esp,0x8
c000e82b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e82f:	68 70 78 03 c0       	push   0xc0037870
c000e834:	e8 ff c2 ff ff       	call   c000ab38 <tcp_pcb_remove>
c000e839:	83 c4 10             	add    esp,0x10
c000e83c:	83 ec 08             	sub    esp,0x8
c000e83f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e843:	6a 02                	push   0x2
c000e845:	e8 ee 93 ff ff       	call   c0007c38 <memp_free>
c000e84a:	83 c4 10             	add    esp,0x10
c000e84d:	e9 46 02 00 00       	jmp    c000ea98 <tcp_input+0x9f4>
c000e852:	66 90                	xchg   ax,ax
c000e854:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000e859:	0f b6 c0             	movzx  eax,al
c000e85c:	83 e0 10             	and    eax,0x10
c000e85f:	74 2b                	je     c000e88c <tcp_input+0x7e8>
c000e861:	83 ec 08             	sub    esp,0x8
c000e864:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e868:	68 70 78 03 c0       	push   0xc0037870
c000e86d:	e8 c6 c2 ff ff       	call   c000ab38 <tcp_pcb_remove>
c000e872:	83 c4 10             	add    esp,0x10
c000e875:	83 ec 08             	sub    esp,0x8
c000e878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e87c:	6a 02                	push   0x2
c000e87e:	e8 b5 93 ff ff       	call   c0007c38 <memp_free>
c000e883:	83 c4 10             	add    esp,0x10
c000e886:	e9 0d 02 00 00       	jmp    c000ea98 <tcp_input+0x9f4>
c000e88b:	90                   	nop
c000e88c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e891:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e895:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e898:	0f b7 c0             	movzx  eax,ax
c000e89b:	85 c0                	test   eax,eax
c000e89d:	74 55                	je     c000e8f4 <tcp_input+0x850>
c000e89f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8a3:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e8a9:	85 c0                	test   eax,eax
c000e8ab:	74 2f                	je     c000e8dc <tcp_input+0x838>
c000e8ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8b1:	8b 90 88 00 00 00    	mov    edx,DWORD PTR [eax+0x88]
c000e8b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8bb:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e8be:	0f b7 c8             	movzx  ecx,ax
c000e8c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8c5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000e8c8:	83 ec 04             	sub    esp,0x4
c000e8cb:	51                   	push   ecx
c000e8cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8d0:	50                   	push   eax
c000e8d1:	ff d2                	call   edx
c000e8d3:	83 c4 10             	add    esp,0x10
c000e8d6:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e8da:	eb 08                	jmp    c000e8e4 <tcp_input+0x840>
c000e8dc:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e8e1:	8d 76 00             	lea    esi,[esi+0x0]
c000e8e4:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e8e9:	83 f8 f6             	cmp    eax,0xfffffff6
c000e8ec:	0f 84 9a 01 00 00    	je     c000ea8c <tcp_input+0x9e8>
c000e8f2:	66 90                	xchg   ax,ax
c000e8f4:	a1 a4 b8 03 c0       	mov    eax,ds:0xc003b8a4
c000e8f9:	85 c0                	test   eax,eax
c000e8fb:	0f 84 f3 00 00 00    	je     c000e9f4 <tcp_input+0x950>
c000e901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e905:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e90b:	85 c0                	test   eax,eax
c000e90d:	74 15                	je     c000e924 <tcp_input+0x880>
c000e90f:	83 ec 08             	sub    esp,0x8
c000e912:	68 5d 0d 03 c0       	push   0xc0030d5d
c000e917:	68 86 01 03 c0       	push   0xc0030186
c000e91c:	e8 b7 15 01 00       	call   c001fed8 <CPrintf>
c000e921:	83 c4 10             	add    esp,0x10
c000e924:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e928:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000e92b:	0f b6 c0             	movzx  eax,al
c000e92e:	83 e0 10             	and    eax,0x10
c000e931:	74 25                	je     c000e958 <tcp_input+0x8b4>
c000e933:	a1 a4 b8 03 c0       	mov    eax,ds:0xc003b8a4
c000e938:	83 ec 0c             	sub    esp,0xc
c000e93b:	50                   	push   eax
c000e93c:	e8 b3 9b ff ff       	call   c00084f4 <pbuf_free>
c000e941:	83 c4 10             	add    esp,0x10
c000e944:	83 ec 0c             	sub    esp,0xc
c000e947:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e94b:	e8 c4 ca ff ff       	call   c000b414 <tcp_abort>
c000e950:	83 c4 10             	add    esp,0x10
c000e953:	e9 40 01 00 00       	jmp    c000ea98 <tcp_input+0x9f4>
c000e958:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000e95d:	0f b6 c0             	movzx  eax,al
c000e960:	83 e0 08             	and    eax,0x8
c000e963:	74 13                	je     c000e978 <tcp_input+0x8d4>
c000e965:	a1 a4 b8 03 c0       	mov    eax,ds:0xc003b8a4
c000e96a:	8a 50 0d             	mov    dl,BYTE PTR [eax+0xd]
c000e96d:	a1 a4 b8 03 c0       	mov    eax,ds:0xc003b8a4
c000e972:	83 ca 01             	or     edx,0x1
c000e975:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
c000e978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e97c:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e982:	85 c0                	test   eax,eax
c000e984:	74 2a                	je     c000e9b0 <tcp_input+0x90c>
c000e986:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e98a:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e990:	8b 0d a4 b8 03 c0    	mov    ecx,DWORD PTR ds:0xc003b8a4
c000e996:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e99a:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e99d:	6a 00                	push   0x0
c000e99f:	51                   	push   ecx
c000e9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e9a4:	52                   	push   edx
c000e9a5:	ff d0                	call   eax
c000e9a7:	83 c4 10             	add    esp,0x10
c000e9aa:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e9ae:	eb 1c                	jmp    c000e9cc <tcp_input+0x928>
c000e9b0:	a1 a4 b8 03 c0       	mov    eax,ds:0xc003b8a4
c000e9b5:	6a 00                	push   0x0
c000e9b7:	50                   	push   eax
c000e9b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e9bc:	6a 00                	push   0x0
c000e9be:	e8 59 c6 ff ff       	call   c000b01c <tcp_recv_null>
c000e9c3:	83 c4 10             	add    esp,0x10
c000e9c6:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e9ca:	66 90                	xchg   ax,ax
c000e9cc:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e9d1:	83 f8 f6             	cmp    eax,0xfffffff6
c000e9d4:	0f 84 b6 00 00 00    	je     c000ea90 <tcp_input+0x9ec>
c000e9da:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e9df:	85 c0                	test   eax,eax
c000e9e1:	74 11                	je     c000e9f4 <tcp_input+0x950>
c000e9e3:	8b 15 a4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8a4
c000e9e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9ed:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
c000e9f3:	90                   	nop
c000e9f4:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000e9f9:	0f b6 c0             	movzx  eax,al
c000e9fc:	83 e0 20             	and    eax,0x20
c000e9ff:	74 6b                	je     c000ea6c <tcp_input+0x9c8>
c000ea01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea05:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ea08:	0f b7 c0             	movzx  eax,ax
c000ea0b:	3d 60 08 00 00       	cmp    eax,0x860
c000ea10:	74 12                	je     c000ea24 <tcp_input+0x980>
c000ea12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea16:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ea19:	83 c0 01             	add    eax,0x1
c000ea1c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea20:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000ea24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea28:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000ea2e:	85 c0                	test   eax,eax
c000ea30:	74 26                	je     c000ea58 <tcp_input+0x9b4>
c000ea32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea36:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000ea3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea40:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000ea43:	6a 00                	push   0x0
c000ea45:	6a 00                	push   0x0
c000ea47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea4b:	52                   	push   edx
c000ea4c:	ff d0                	call   eax
c000ea4e:	83 c4 10             	add    esp,0x10
c000ea51:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ea55:	eb 09                	jmp    c000ea60 <tcp_input+0x9bc>
c000ea57:	90                   	nop
c000ea58:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000ea5d:	8d 76 00             	lea    esi,[esi+0x0]
c000ea60:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000ea65:	83 f8 f6             	cmp    eax,0xfffffff6
c000ea68:	74 2a                	je     c000ea94 <tcp_input+0x9f0>
c000ea6a:	66 90                	xchg   ax,ax
c000ea6c:	c7 05 88 78 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037888,0x0
c000ea76:	83 ec 0c             	sub    esp,0xc
c000ea79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea7d:	e8 a2 15 00 00       	call   c0010024 <tcp_output>
c000ea82:	83 c4 10             	add    esp,0x10
c000ea85:	eb 11                	jmp    c000ea98 <tcp_input+0x9f4>
c000ea87:	90                   	nop
c000ea88:	90                   	nop
c000ea89:	eb 0d                	jmp    c000ea98 <tcp_input+0x9f4>
c000ea8b:	90                   	nop
c000ea8c:	90                   	nop
c000ea8d:	eb 09                	jmp    c000ea98 <tcp_input+0x9f4>
c000ea8f:	90                   	nop
c000ea90:	90                   	nop
c000ea91:	eb 05                	jmp    c000ea98 <tcp_input+0x9f4>
c000ea93:	90                   	nop
c000ea94:	90                   	nop
c000ea95:	8d 76 00             	lea    esi,[esi+0x0]
c000ea98:	c7 05 88 78 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037888,0x0
c000eaa2:	c7 05 a4 b8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b8a4,0x0
c000eaac:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000eab1:	85 c0                	test   eax,eax
c000eab3:	0f 84 b7 00 00 00    	je     c000eb70 <tcp_input+0xacc>
c000eab9:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000eabe:	83 ec 0c             	sub    esp,0xc
c000eac1:	50                   	push   eax
c000eac2:	e8 2d 9a ff ff       	call   c00084f4 <pbuf_free>
c000eac7:	83 c4 10             	add    esp,0x10
c000eaca:	c7 05 c4 b8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b8c4,0x0
c000ead4:	e9 97 00 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000ead9:	8d 76 00             	lea    esi,[esi+0x0]
c000eadc:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000eae1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000eae5:	0f b7 c0             	movzx  eax,ax
c000eae8:	83 ec 0c             	sub    esp,0xc
c000eaeb:	50                   	push   eax
c000eaec:	e8 f7 20 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000eaf1:	83 c4 10             	add    esp,0x10
c000eaf4:	0f b7 c0             	movzx  eax,ax
c000eaf7:	83 e0 04             	and    eax,0x4
c000eafa:	75 64                	jne    c000eb60 <tcp_input+0xabc>
c000eafc:	66 a1 c0 77 03 c0    	mov    ax,ds:0xc00377c0
c000eb02:	83 c0 01             	add    eax,0x1
c000eb05:	66 a3 c0 77 03 c0    	mov    ds:0xc00377c0,ax
c000eb0b:	66 a1 b6 77 03 c0    	mov    ax,ds:0xc00377b6
c000eb11:	83 c0 01             	add    eax,0x1
c000eb14:	66 a3 b6 77 03 c0    	mov    ds:0xc00377b6,ax
c000eb1a:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000eb1f:	66 8b 00             	mov    ax,WORD PTR [eax]
c000eb22:	0f b7 c8             	movzx  ecx,ax
c000eb25:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000eb2a:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000eb2e:	0f b7 d0             	movzx  edx,ax
c000eb31:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000eb37:	0f b7 d8             	movzx  ebx,ax
c000eb3a:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000eb3f:	01 c3                	add    ebx,eax
c000eb41:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000eb46:	83 ec 08             	sub    esp,0x8
c000eb49:	51                   	push   ecx
c000eb4a:	52                   	push   edx
c000eb4b:	68 90 78 03 c0       	push   0xc0037890
c000eb50:	68 98 78 03 c0       	push   0xc0037898
c000eb55:	53                   	push   ebx
c000eb56:	50                   	push   eax
c000eb57:	e8 54 19 00 00       	call   c00104b0 <tcp_rst>
c000eb5c:	83 c4 20             	add    esp,0x20
c000eb5f:	90                   	nop
c000eb60:	83 ec 0c             	sub    esp,0xc
c000eb63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eb67:	e8 88 99 ff ff       	call   c00084f4 <pbuf_free>
c000eb6c:	83 c4 10             	add    esp,0x10
c000eb6f:	90                   	nop
c000eb70:	83 c4 18             	add    esp,0x18
c000eb73:	5b                   	pop    ebx
c000eb74:	c3                   	ret    
c000eb75:	66 90                	xchg   ax,ax
c000eb77:	90                   	nop

c000eb78 <tcp_output_alloc_header>:
c000eb78:	83 ec 2c             	sub    esp,0x2c
c000eb7b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eb7f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eb83:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000eb88:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000eb8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb95:	01 d0                	add    eax,edx
c000eb97:	83 c0 14             	add    eax,0x14
c000eb9a:	0f b7 c0             	movzx  eax,ax
c000eb9d:	83 ec 04             	sub    esp,0x4
c000eba0:	6a 00                	push   0x0
c000eba2:	50                   	push   eax
c000eba3:	6a 01                	push   0x1
c000eba5:	e8 22 9b ff ff       	call   c00086cc <pbuf_alloc>
c000ebaa:	83 c4 10             	add    esp,0x10
c000ebad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ebb1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000ebb6:	0f 84 10 01 00 00    	je     c000eccc <tcp_output_alloc_header+0x154>
c000ebbc:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ebc1:	8d 50 13             	lea    edx,[eax+0x13]
c000ebc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ebc8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000ebcc:	0f b7 c0             	movzx  eax,ax
c000ebcf:	39 c2                	cmp    edx,eax
c000ebd1:	7c 15                	jl     c000ebe8 <tcp_output_alloc_header+0x70>
c000ebd3:	83 ec 08             	sub    esp,0x8
c000ebd6:	68 a0 0d 03 c0       	push   0xc0030da0
c000ebdb:	68 86 01 03 c0       	push   0xc0030186
c000ebe0:	e8 f3 12 01 00       	call   c001fed8 <CPrintf>
c000ebe5:	83 c4 10             	add    esp,0x10
c000ebe8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ebec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ebef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ebf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebf7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ebfa:	0f b7 c0             	movzx  eax,ax
c000ebfd:	83 ec 0c             	sub    esp,0xc
c000ec00:	50                   	push   eax
c000ec01:	e8 e2 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec06:	83 c4 10             	add    esp,0x10
c000ec09:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec0d:	66 89 02             	mov    WORD PTR [edx],ax
c000ec10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec14:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ec18:	0f b7 c0             	movzx  eax,ax
c000ec1b:	83 ec 0c             	sub    esp,0xc
c000ec1e:	50                   	push   eax
c000ec1f:	e8 c4 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec24:	83 c4 10             	add    esp,0x10
c000ec27:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec2b:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ec2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec33:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ec37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ec3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec3e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ec41:	83 ec 0c             	sub    esp,0xc
c000ec44:	50                   	push   eax
c000ec45:	e8 c2 1f ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000ec4a:	83 c4 10             	add    esp,0x10
c000ec4d:	89 c2                	mov    edx,eax
c000ec4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec53:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ec56:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ec5b:	c1 e8 02             	shr    eax,0x2
c000ec5e:	83 c0 05             	add    eax,0x5
c000ec61:	c1 e0 0c             	shl    eax,0xc
c000ec64:	83 c8 10             	or     eax,0x10
c000ec67:	0f b7 c0             	movzx  eax,ax
c000ec6a:	83 ec 0c             	sub    esp,0xc
c000ec6d:	50                   	push   eax
c000ec6e:	e8 75 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec73:	83 c4 10             	add    esp,0x10
c000ec76:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec7a:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000ec7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec82:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000ec86:	0f b7 c0             	movzx  eax,ax
c000ec89:	83 ec 0c             	sub    esp,0xc
c000ec8c:	50                   	push   eax
c000ec8d:	e8 56 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec92:	83 c4 10             	add    esp,0x10
c000ec95:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec99:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c000ec9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eca1:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000eca7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecab:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ecb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecb5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ecb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecbc:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000ecc0:	0f b7 c0             	movzx  eax,ax
c000ecc3:	01 c2                	add    edx,eax
c000ecc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecc9:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000eccc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ecd0:	83 c4 2c             	add    esp,0x2c
c000ecd3:	c3                   	ret    

c000ecd4 <tcp_create_segment>:
c000ecd4:	53                   	push   ebx
c000ecd5:	83 ec 28             	sub    esp,0x28
c000ecd8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ecdc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ece0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000ece4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ece8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000eced:	c1 e0 02             	shl    eax,0x2
c000ecf0:	83 e0 04             	and    eax,0x4
c000ecf3:	88 c2                	mov    dl,al
c000ecf5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ecfa:	83 e0 02             	and    eax,0x2
c000ecfd:	74 05                	je     c000ed04 <tcp_create_segment+0x30>
c000ecff:	b0 0c                	mov    al,0xc
c000ed01:	eb 05                	jmp    c000ed08 <tcp_create_segment+0x34>
c000ed03:	90                   	nop
c000ed04:	b0 00                	mov    al,0x0
c000ed06:	66 90                	xchg   ax,ax
c000ed08:	01 d0                	add    eax,edx
c000ed0a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ed0e:	83 ec 0c             	sub    esp,0xc
c000ed11:	6a 04                	push   0x4
c000ed13:	e8 f4 8d ff ff       	call   c0007b0c <memp_malloc>
c000ed18:	83 c4 10             	add    esp,0x10
c000ed1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ed1f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ed24:	75 1a                	jne    c000ed40 <tcp_create_segment+0x6c>
c000ed26:	83 ec 0c             	sub    esp,0xc
c000ed29:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ed2d:	e8 c2 97 ff ff       	call   c00084f4 <pbuf_free>
c000ed32:	83 c4 10             	add    esp,0x10
c000ed35:	b8 00 00 00 00       	mov    eax,0x0
c000ed3a:	e9 31 01 00 00       	jmp    c000ee70 <tcp_create_segment+0x19c>
c000ed3f:	90                   	nop
c000ed40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed44:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c000ed48:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c000ed4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed4f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed59:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ed5d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ed60:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed64:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ed67:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ed6c:	89 d1                	mov    ecx,edx
c000ed6e:	29 c1                	sub    ecx,eax
c000ed70:	89 c8                	mov    eax,ecx
c000ed72:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed76:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000ed7a:	83 ec 08             	sub    esp,0x8
c000ed7d:	6a 14                	push   0x14
c000ed7f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ed83:	e8 d0 95 ff ff       	call   c0008358 <pbuf_header>
c000ed88:	83 c4 10             	add    esp,0x10
c000ed8b:	0f b6 c0             	movzx  eax,al
c000ed8e:	85 c0                	test   eax,eax
c000ed90:	74 2a                	je     c000edbc <tcp_create_segment+0xe8>
c000ed92:	66 a1 c4 77 03 c0    	mov    ax,ds:0xc00377c4
c000ed98:	83 c0 01             	add    eax,0x1
c000ed9b:	66 a3 c4 77 03 c0    	mov    ds:0xc00377c4,ax
c000eda1:	83 ec 0c             	sub    esp,0xc
c000eda4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eda8:	e8 bf b3 ff ff       	call   c000a16c <tcp_seg_free>
c000edad:	83 c4 10             	add    esp,0x10
c000edb0:	b8 00 00 00 00       	mov    eax,0x0
c000edb5:	e9 b6 00 00 00       	jmp    c000ee70 <tcp_create_segment+0x19c>
c000edba:	66 90                	xchg   ax,ax
c000edbc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edc3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000edc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edca:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000edcd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edd1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000edd4:	0f b7 c0             	movzx  eax,ax
c000edd7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eddb:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000edde:	83 ec 0c             	sub    esp,0xc
c000ede1:	50                   	push   eax
c000ede2:	e8 01 1e ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ede7:	83 c4 10             	add    esp,0x10
c000edea:	66 89 03             	mov    WORD PTR [ebx],ax
c000eded:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edf1:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000edf5:	0f b7 c0             	movzx  eax,ax
c000edf8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edfc:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000edff:	83 ec 0c             	sub    esp,0xc
c000ee02:	50                   	push   eax
c000ee03:	e8 e0 1d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ee08:	83 c4 10             	add    esp,0x10
c000ee0b:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000ee0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee13:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ee16:	83 ec 0c             	sub    esp,0xc
c000ee19:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ee1d:	e8 ea 1d ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000ee22:	83 c4 10             	add    esp,0x10
c000ee25:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ee28:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ee2d:	c1 e8 02             	shr    eax,0x2
c000ee30:	0f b6 c0             	movzx  eax,al
c000ee33:	83 c0 05             	add    eax,0x5
c000ee36:	c1 e0 0c             	shl    eax,0xc
c000ee39:	89 c2                	mov    edx,eax
c000ee3b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ee40:	09 d0                	or     eax,edx
c000ee42:	0f b7 c0             	movzx  eax,ax
c000ee45:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee49:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ee4c:	83 ec 0c             	sub    esp,0xc
c000ee4f:	50                   	push   eax
c000ee50:	e8 93 1d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ee55:	83 c4 10             	add    esp,0x10
c000ee58:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c000ee5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ee63:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ee69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee6d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee70:	83 c4 28             	add    esp,0x28
c000ee73:	5b                   	pop    ebx
c000ee74:	c3                   	ret    
c000ee75:	8d 76 00             	lea    esi,[esi+0x0]

c000ee78 <tcp_pbuf_prealloc>:
c000ee78:	53                   	push   ebx
c000ee79:	83 ec 28             	sub    esp,0x28
c000ee7c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ee80:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee84:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ee88:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000ee8c:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000ee91:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ee96:	88 d8                	mov    al,bl
c000ee98:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ee9c:	88 c8                	mov    al,cl
c000ee9e:	88 04 24             	mov    BYTE PTR [esp],al
c000eea1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eea5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000eeaa:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000eeaf:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000eeb4:	39 c2                	cmp    edx,eax
c000eeb6:	73 64                	jae    c000ef1c <tcp_pbuf_prealloc+0xa4>
c000eeb8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000eebd:	83 e0 02             	and    eax,0x2
c000eec0:	75 2e                	jne    c000eef0 <tcp_pbuf_prealloc+0x78>
c000eec2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eec6:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000eec9:	0f b6 c0             	movzx  eax,al
c000eecc:	83 e0 40             	and    eax,0x40
c000eecf:	75 4b                	jne    c000ef1c <tcp_pbuf_prealloc+0xa4>
c000eed1:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000eed5:	85 c0                	test   eax,eax
c000eed7:	74 17                	je     c000eef0 <tcp_pbuf_prealloc+0x78>
c000eed9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eedd:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000eee0:	85 c0                	test   eax,eax
c000eee2:	75 0c                	jne    c000eef0 <tcp_pbuf_prealloc+0x78>
c000eee4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eee8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000eeeb:	85 c0                	test   eax,eax
c000eeed:	74 2d                	je     c000ef1c <tcp_pbuf_prealloc+0xa4>
c000eeef:	90                   	nop
c000eef0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000eef5:	8d 90 17 02 00 00    	lea    edx,[eax+0x217]
c000eefb:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ef00:	39 c2                	cmp    edx,eax
c000ef02:	7d 0c                	jge    c000ef10 <tcp_pbuf_prealloc+0x98>
c000ef04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef08:	05 18 02 00 00       	add    eax,0x218
c000ef0d:	eb 05                	jmp    c000ef14 <tcp_pbuf_prealloc+0x9c>
c000ef0f:	90                   	nop
c000ef10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef14:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ef19:	8d 76 00             	lea    esi,[esi+0x0]
c000ef1c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000ef21:	83 ec 04             	sub    esp,0x4
c000ef24:	6a 00                	push   0x0
c000ef26:	50                   	push   eax
c000ef27:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ef2b:	e8 9c 97 ff ff       	call   c00086cc <pbuf_alloc>
c000ef30:	83 c4 10             	add    esp,0x10
c000ef33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef37:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ef3c:	75 0a                	jne    c000ef48 <tcp_pbuf_prealloc+0xd0>
c000ef3e:	b8 00 00 00 00       	mov    eax,0x0
c000ef43:	eb 5b                	jmp    c000efa0 <tcp_pbuf_prealloc+0x128>
c000ef45:	8d 76 00             	lea    esi,[esi+0x0]
c000ef48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef4c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef4e:	85 c0                	test   eax,eax
c000ef50:	74 16                	je     c000ef68 <tcp_pbuf_prealloc+0xf0>
c000ef52:	83 ec 08             	sub    esp,0x8
c000ef55:	68 24 10 03 c0       	push   0xc0031024
c000ef5a:	68 86 01 03 c0       	push   0xc0030186
c000ef5f:	e8 74 0f 01 00       	call   c001fed8 <CPrintf>
c000ef64:	83 c4 10             	add    esp,0x10
c000ef67:	90                   	nop
c000ef68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef6c:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000ef70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef74:	89 d1                	mov    ecx,edx
c000ef76:	29 c1                	sub    ecx,eax
c000ef78:	89 c8                	mov    eax,ecx
c000ef7a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ef7e:	66 89 02             	mov    WORD PTR [edx],ax
c000ef81:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ef85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef89:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000ef8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef91:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ef94:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ef98:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000ef9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000efa0:	83 c4 28             	add    esp,0x28
c000efa3:	5b                   	pop    ebx
c000efa4:	c3                   	ret    
c000efa5:	8d 76 00             	lea    esi,[esi+0x0]

c000efa8 <tcp_write_checks>:
c000efa8:	83 ec 1c             	sub    esp,0x1c
c000efab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efaf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000efb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efb8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000efbb:	83 f8 04             	cmp    eax,0x4
c000efbe:	74 2c                	je     c000efec <tcp_write_checks+0x44>
c000efc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efc4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000efc7:	83 f8 07             	cmp    eax,0x7
c000efca:	74 20                	je     c000efec <tcp_write_checks+0x44>
c000efcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efd0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000efd3:	83 f8 02             	cmp    eax,0x2
c000efd6:	74 14                	je     c000efec <tcp_write_checks+0x44>
c000efd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efdc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000efdf:	83 f8 03             	cmp    eax,0x3
c000efe2:	74 08                	je     c000efec <tcp_write_checks+0x44>
c000efe4:	b0 f3                	mov    al,0xf3
c000efe6:	e9 f9 00 00 00       	jmp    c000f0e4 <tcp_write_checks+0x13c>
c000efeb:	90                   	nop
c000efec:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000eff1:	85 c0                	test   eax,eax
c000eff3:	75 07                	jne    c000effc <tcp_write_checks+0x54>
c000eff5:	b0 00                	mov    al,0x0
c000eff7:	e9 e8 00 00 00       	jmp    c000f0e4 <tcp_write_checks+0x13c>
c000effc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f000:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000f004:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f009:	0f b7 c0             	movzx  eax,ax
c000f00c:	39 c2                	cmp    edx,eax
c000f00e:	76 1c                	jbe    c000f02c <tcp_write_checks+0x84>
c000f010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f014:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f017:	83 c8 80             	or     eax,0xffffff80
c000f01a:	88 c2                	mov    dl,al
c000f01c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f020:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f023:	b0 ff                	mov    al,0xff
c000f025:	e9 ba 00 00 00       	jmp    c000f0e4 <tcp_write_checks+0x13c>
c000f02a:	66 90                	xchg   ax,ax
c000f02c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f030:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f033:	0f b7 c0             	movzx  eax,ax
c000f036:	83 f8 01             	cmp    eax,0x1
c000f039:	77 11                	ja     c000f04c <tcp_write_checks+0xa4>
c000f03b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f03f:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f042:	0f b7 c0             	movzx  eax,ax
c000f045:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f04a:	76 28                	jbe    c000f074 <tcp_write_checks+0xcc>
c000f04c:	66 a1 bc 77 03 c0    	mov    ax,ds:0xc00377bc
c000f052:	83 c0 01             	add    eax,0x1
c000f055:	66 a3 bc 77 03 c0    	mov    ds:0xc00377bc,ax
c000f05b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f05f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f062:	83 c8 80             	or     eax,0xffffff80
c000f065:	88 c2                	mov    dl,al
c000f067:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f06b:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f06e:	b0 ff                	mov    al,0xff
c000f070:	eb 72                	jmp    c000f0e4 <tcp_write_checks+0x13c>
c000f072:	66 90                	xchg   ax,ax
c000f074:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f078:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f07b:	0f b7 c0             	movzx  eax,ax
c000f07e:	85 c0                	test   eax,eax
c000f080:	74 2e                	je     c000f0b0 <tcp_write_checks+0x108>
c000f082:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f086:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f089:	85 c0                	test   eax,eax
c000f08b:	75 53                	jne    c000f0e0 <tcp_write_checks+0x138>
c000f08d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f091:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f094:	85 c0                	test   eax,eax
c000f096:	75 48                	jne    c000f0e0 <tcp_write_checks+0x138>
c000f098:	83 ec 08             	sub    esp,0x8
c000f09b:	68 d0 0d 03 c0       	push   0xc0030dd0
c000f0a0:	68 86 01 03 c0       	push   0xc0030186
c000f0a5:	e8 2e 0e 01 00       	call   c001fed8 <CPrintf>
c000f0aa:	83 c4 10             	add    esp,0x10
c000f0ad:	eb 31                	jmp    c000f0e0 <tcp_write_checks+0x138>
c000f0af:	90                   	nop
c000f0b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0b4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f0b7:	85 c0                	test   eax,eax
c000f0b9:	75 0d                	jne    c000f0c8 <tcp_write_checks+0x120>
c000f0bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0bf:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f0c2:	85 c0                	test   eax,eax
c000f0c4:	74 1a                	je     c000f0e0 <tcp_write_checks+0x138>
c000f0c6:	66 90                	xchg   ax,ax
c000f0c8:	83 ec 08             	sub    esp,0x8
c000f0cb:	68 0c 0e 03 c0       	push   0xc0030e0c
c000f0d0:	68 86 01 03 c0       	push   0xc0030186
c000f0d5:	e8 fe 0d 01 00       	call   c001fed8 <CPrintf>
c000f0da:	83 c4 10             	add    esp,0x10
c000f0dd:	8d 76 00             	lea    esi,[esi+0x0]
c000f0e0:	b0 00                	mov    al,0x0
c000f0e2:	66 90                	xchg   ax,ax
c000f0e4:	83 c4 1c             	add    esp,0x1c
c000f0e7:	c3                   	ret    

c000f0e8 <tcp_write>:
c000f0e8:	56                   	push   esi
c000f0e9:	53                   	push   ebx
c000f0ea:	83 ec 54             	sub    esp,0x54
c000f0ed:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f0f1:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000f0f5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f0fa:	88 d0                	mov    al,dl
c000f0fc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f100:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f108:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000f110:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000f118:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000f120:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000f128:	66 c7 44 24 3a 00 00 	mov    WORD PTR [esp+0x3a],0x0
c000f12f:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000f134:	c6 44 24 2a 00       	mov    BYTE PTR [esp+0x2a],0x0
c000f139:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000f140:	66 c7 44 24 36 00 00 	mov    WORD PTR [esp+0x36],0x0
c000f147:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
c000f14c:	75 1e                	jne    c000f16c <tcp_write+0x84>
c000f14e:	83 ec 08             	sub    esp,0x8
c000f151:	68 40 0e 03 c0       	push   0xc0030e40
c000f156:	68 86 01 03 c0       	push   0xc0030186
c000f15b:	e8 78 0d 01 00       	call   c001fed8 <CPrintf>
c000f160:	83 c4 10             	add    esp,0x10
c000f163:	b0 f2                	mov    al,0xf2
c000f165:	e9 16 08 00 00       	jmp    c000f980 <tcp_write+0x898>
c000f16a:	66 90                	xchg   ax,ax
c000f16c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f171:	83 ec 08             	sub    esp,0x8
c000f174:	50                   	push   eax
c000f175:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f179:	e8 2a fe ff ff       	call   c000efa8 <tcp_write_checks>
c000f17e:	83 c4 10             	add    esp,0x10
c000f181:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c000f185:	0f be 44 24 29       	movsx  eax,BYTE PTR [esp+0x29]
c000f18a:	85 c0                	test   eax,eax
c000f18c:	74 0a                	je     c000f198 <tcp_write+0xb0>
c000f18e:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c000f192:	e9 e9 07 00 00       	jmp    c000f980 <tcp_write+0x898>
c000f197:	90                   	nop
c000f198:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f19c:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f19f:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f1a4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f1a8:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f1ab:	85 c0                	test   eax,eax
c000f1ad:	0f 84 79 02 00 00    	je     c000f42c <tcp_write+0x344>
c000f1b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f1b7:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f1ba:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f1be:	eb 0c                	jmp    c000f1cc <tcp_write+0xe4>
c000f1c0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f1c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1c6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f1ca:	66 90                	xchg   ax,ax
c000f1cc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f1d0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1d2:	85 c0                	test   eax,eax
c000f1d4:	75 ea                	jne    c000f1c0 <tcp_write+0xd8>
c000f1d6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f1da:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f1dd:	0f b6 c0             	movzx  eax,al
c000f1e0:	c1 e0 02             	shl    eax,0x2
c000f1e3:	83 e0 04             	and    eax,0x4
c000f1e6:	89 c2                	mov    edx,eax
c000f1e8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f1ec:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f1ef:	0f b6 c0             	movzx  eax,al
c000f1f2:	83 e0 02             	and    eax,0x2
c000f1f5:	74 09                	je     c000f200 <tcp_write+0x118>
c000f1f7:	b8 0c 00 00 00       	mov    eax,0xc
c000f1fc:	eb 0a                	jmp    c000f208 <tcp_write+0x120>
c000f1fe:	66 90                	xchg   ax,ax
c000f200:	b8 00 00 00 00       	mov    eax,0x0
c000f205:	8d 76 00             	lea    esi,[esi+0x0]
c000f208:	01 d0                	add    eax,edx
c000f20a:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000f20f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f213:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f216:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f21a:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000f21d:	66 8b 4c 24 26       	mov    cx,WORD PTR [esp+0x26]
c000f222:	01 ca                	add    edx,ecx
c000f224:	29 d0                	sub    eax,edx
c000f226:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f22b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f22f:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f233:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f238:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f23d:	0f b7 c0             	movzx  eax,ax
c000f240:	85 c0                	test   eax,eax
c000f242:	0f 84 84 00 00 00    	je     c000f2cc <tcp_write+0x1e4>
c000f248:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f24d:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f252:	39 c2                	cmp    edx,eax
c000f254:	76 16                	jbe    c000f26c <tcp_write+0x184>
c000f256:	83 ec 08             	sub    esp,0x8
c000f259:	68 74 0e 03 c0       	push   0xc0030e74
c000f25e:	68 86 01 03 c0       	push   0xc0030186
c000f263:	e8 70 0c 01 00       	call   c001fed8 <CPrintf>
c000f268:	83 c4 10             	add    esp,0x10
c000f26b:	90                   	nop
c000f26c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f270:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f274:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f279:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f27d:	0f b7 d8             	movzx  ebx,ax
c000f280:	0f b7 ca             	movzx  ecx,dx
c000f283:	39 cb                	cmp    ebx,ecx
c000f285:	76 05                	jbe    c000f28c <tcp_write+0x1a4>
c000f287:	89 d0                	mov    eax,edx
c000f289:	8d 76 00             	lea    esi,[esi+0x0]
c000f28c:	66 89 44 24 36       	mov    WORD PTR [esp+0x36],ax
c000f291:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f296:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f29b:	01 d0                	add    eax,edx
c000f29d:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f2a2:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f2a7:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f2ac:	89 d6                	mov    esi,edx
c000f2ae:	29 c6                	sub    esi,eax
c000f2b0:	89 f0                	mov    eax,esi
c000f2b2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f2b7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000f2bb:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f2c0:	89 d6                	mov    esi,edx
c000f2c2:	29 c6                	sub    esi,eax
c000f2c4:	89 f0                	mov    eax,esi
c000f2c6:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f2cb:	90                   	nop
c000f2cc:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f2d1:	0f b7 c0             	movzx  eax,ax
c000f2d4:	85 c0                	test   eax,eax
c000f2d6:	74 24                	je     c000f2fc <tcp_write+0x214>
c000f2d8:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f2dd:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f2e2:	39 c2                	cmp    edx,eax
c000f2e4:	74 16                	je     c000f2fc <tcp_write+0x214>
c000f2e6:	83 ec 08             	sub    esp,0x8
c000f2e9:	68 38 10 03 c0       	push   0xc0031038
c000f2ee:	68 86 01 03 c0       	push   0xc0030186
c000f2f3:	e8 e0 0b 01 00       	call   c001fed8 <CPrintf>
c000f2f8:	83 c4 10             	add    esp,0x10
c000f2fb:	90                   	nop
c000f2fc:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f301:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f306:	39 c2                	cmp    edx,eax
c000f308:	0f 83 ce 03 00 00    	jae    c000f6dc <tcp_write+0x5f4>
c000f30e:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f313:	85 c0                	test   eax,eax
c000f315:	0f 84 c1 03 00 00    	je     c000f6dc <tcp_write+0x5f4>
c000f31b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f31f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f322:	0f b7 c0             	movzx  eax,ax
c000f325:	85 c0                	test   eax,eax
c000f327:	0f 84 af 03 00 00    	je     c000f6dc <tcp_write+0x5f4>
c000f32d:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f332:	0f b7 44 24 3a       	movzx  eax,WORD PTR [esp+0x3a]
c000f337:	29 c2                	sub    edx,eax
c000f339:	89 d0                	mov    eax,edx
c000f33b:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f340:	39 d0                	cmp    eax,edx
c000f342:	7e 04                	jle    c000f348 <tcp_write+0x260>
c000f344:	89 d0                	mov    eax,edx
c000f346:	66 90                	xchg   ax,ax
c000f348:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c000f34d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f351:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f355:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f35a:	83 e0 01             	and    eax,0x1
c000f35d:	74 61                	je     c000f3c0 <tcp_write+0x2d8>
c000f35f:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f364:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f369:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f36e:	83 ec 04             	sub    esp,0x4
c000f371:	6a 01                	push   0x1
c000f373:	51                   	push   ecx
c000f374:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f378:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f37c:	51                   	push   ecx
c000f37d:	52                   	push   edx
c000f37e:	50                   	push   eax
c000f37f:	6a 03                	push   0x3
c000f381:	e8 f2 fa ff ff       	call   c000ee78 <tcp_pbuf_prealloc>
c000f386:	83 c4 20             	add    esp,0x20
c000f389:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f38d:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f392:	0f 84 44 05 00 00    	je     c000f8dc <tcp_write+0x7f4>
c000f398:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000f39d:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f3a2:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f3a6:	01 c1                	add    ecx,eax
c000f3a8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f3ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f3af:	83 ec 04             	sub    esp,0x4
c000f3b2:	52                   	push   edx
c000f3b3:	51                   	push   ecx
c000f3b4:	50                   	push   eax
c000f3b5:	e8 c0 0f ff ff       	call   c000037a <memcpy>
c000f3ba:	83 c4 10             	add    esp,0x10
c000f3bd:	eb 39                	jmp    c000f3f8 <tcp_write+0x310>
c000f3bf:	90                   	nop
c000f3c0:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f3c5:	83 ec 04             	sub    esp,0x4
c000f3c8:	6a 01                	push   0x1
c000f3ca:	50                   	push   eax
c000f3cb:	6a 03                	push   0x3
c000f3cd:	e8 fa 92 ff ff       	call   c00086cc <pbuf_alloc>
c000f3d2:	83 c4 10             	add    esp,0x10
c000f3d5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f3d9:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f3de:	0f 84 fc 04 00 00    	je     c000f8e0 <tcp_write+0x7f8>
c000f3e4:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f3e9:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f3ed:	01 c2                	add    edx,eax
c000f3ef:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f3f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f3f6:	66 90                	xchg   ax,ax
c000f3f8:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f3fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f401:	01 d0                	add    eax,edx
c000f403:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f408:	83 ec 0c             	sub    esp,0xc
c000f40b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f40f:	e8 b4 98 ff ff       	call   c0008cc8 <pbuf_clen>
c000f414:	83 c4 10             	add    esp,0x10
c000f417:	0f b6 c0             	movzx  eax,al
c000f41a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f41e:	01 d0                	add    eax,edx
c000f420:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f425:	e9 b2 02 00 00       	jmp    c000f6dc <tcp_write+0x5f4>
c000f42a:	66 90                	xchg   ax,ax
c000f42c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f430:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f434:	0f b7 c0             	movzx  eax,ax
c000f437:	85 c0                	test   eax,eax
c000f439:	0f 84 9d 02 00 00    	je     c000f6dc <tcp_write+0x5f4>
c000f43f:	83 ec 08             	sub    esp,0x8
c000f442:	68 94 0e 03 c0       	push   0xc0030e94
c000f447:	68 86 01 03 c0       	push   0xc0030186
c000f44c:	e8 87 0a 01 00       	call   c001fed8 <CPrintf>
c000f451:	83 c4 10             	add    esp,0x10
c000f454:	e9 83 02 00 00       	jmp    c000f6dc <tcp_write+0x5f4>
c000f459:	8d 76 00             	lea    esi,[esi+0x0]
c000f45c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f460:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c000f465:	89 d6                	mov    esi,edx
c000f467:	29 c6                	sub    esi,eax
c000f469:	89 f0                	mov    eax,esi
c000f46b:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c000f470:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f474:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f477:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f47c:	89 d3                	mov    ebx,edx
c000f47e:	29 c3                	sub    ebx,eax
c000f480:	89 d8                	mov    eax,ebx
c000f482:	66 89 44 24 20       	mov    WORD PTR [esp+0x20],ax
c000f487:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f48b:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c000f490:	0f b7 d8             	movzx  ebx,ax
c000f493:	0f b7 ca             	movzx  ecx,dx
c000f496:	39 cb                	cmp    ebx,ecx
c000f498:	76 02                	jbe    c000f49c <tcp_write+0x3b4>
c000f49a:	89 d0                	mov    eax,edx
c000f49c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000f4a1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f4a6:	83 e0 01             	and    eax,0x1
c000f4a9:	0f 84 b1 00 00 00    	je     c000f560 <tcp_write+0x478>
c000f4af:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f4b4:	0f 94 c0             	sete   al
c000f4b7:	0f b6 f0             	movzx  esi,al
c000f4ba:	0f b6 5c 24 08       	movzx  ebx,BYTE PTR [esp+0x8]
c000f4bf:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f4c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f4c6:	0f b7 c8             	movzx  ecx,ax
c000f4c9:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f4ce:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000f4d3:	01 d0                	add    eax,edx
c000f4d5:	0f b7 c0             	movzx  eax,ax
c000f4d8:	83 ec 04             	sub    esp,0x4
c000f4db:	56                   	push   esi
c000f4dc:	53                   	push   ebx
c000f4dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f4e1:	8d 54 24 26          	lea    edx,[esp+0x26]
c000f4e5:	52                   	push   edx
c000f4e6:	51                   	push   ecx
c000f4e7:	50                   	push   eax
c000f4e8:	6a 00                	push   0x0
c000f4ea:	e8 89 f9 ff ff       	call   c000ee78 <tcp_pbuf_prealloc>
c000f4ef:	83 c4 20             	add    esp,0x20
c000f4f2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f4f6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f4fb:	0f 84 e3 03 00 00    	je     c000f8e4 <tcp_write+0x7fc>
c000f501:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f505:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f509:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000f50e:	0f b7 c0             	movzx  eax,ax
c000f511:	39 c2                	cmp    edx,eax
c000f513:	76 17                	jbe    c000f52c <tcp_write+0x444>
c000f515:	83 ec 08             	sub    esp,0x8
c000f518:	68 c4 0e 03 c0       	push   0xc0030ec4
c000f51d:	68 86 01 03 c0       	push   0xc0030186
c000f522:	e8 b1 09 01 00       	call   c001fed8 <CPrintf>
c000f527:	83 c4 10             	add    esp,0x10
c000f52a:	66 90                	xchg   ax,ax
c000f52c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f531:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f536:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000f53a:	01 d1                	add    ecx,edx
c000f53c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f540:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000f543:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000f548:	01 da                	add    edx,ebx
c000f54a:	83 ec 04             	sub    esp,0x4
c000f54d:	50                   	push   eax
c000f54e:	51                   	push   ecx
c000f54f:	52                   	push   edx
c000f550:	e8 25 0e ff ff       	call   c000037a <memcpy>
c000f555:	83 c4 10             	add    esp,0x10
c000f558:	e9 a7 00 00 00       	jmp    c000f604 <tcp_write+0x51c>
c000f55d:	8d 76 00             	lea    esi,[esi+0x0]
c000f560:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f565:	0f b7 c0             	movzx  eax,ax
c000f568:	85 c0                	test   eax,eax
c000f56a:	74 18                	je     c000f584 <tcp_write+0x49c>
c000f56c:	83 ec 08             	sub    esp,0x8
c000f56f:	68 56 10 03 c0       	push   0xc0031056
c000f574:	68 86 01 03 c0       	push   0xc0030186
c000f579:	e8 5a 09 01 00       	call   c001fed8 <CPrintf>
c000f57e:	83 c4 10             	add    esp,0x10
c000f581:	8d 76 00             	lea    esi,[esi+0x0]
c000f584:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f589:	83 ec 04             	sub    esp,0x4
c000f58c:	6a 01                	push   0x1
c000f58e:	50                   	push   eax
c000f58f:	6a 00                	push   0x0
c000f591:	e8 36 91 ff ff       	call   c00086cc <pbuf_alloc>
c000f596:	83 c4 10             	add    esp,0x10
c000f599:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f59d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f5a2:	0f 84 40 03 00 00    	je     c000f8e8 <tcp_write+0x800>
c000f5a8:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f5ad:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f5b1:	01 c2                	add    edx,eax
c000f5b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f5b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f5ba:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f5bf:	83 ec 04             	sub    esp,0x4
c000f5c2:	6a 00                	push   0x0
c000f5c4:	50                   	push   eax
c000f5c5:	6a 00                	push   0x0
c000f5c7:	e8 00 91 ff ff       	call   c00086cc <pbuf_alloc>
c000f5cc:	83 c4 10             	add    esp,0x10
c000f5cf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f5d3:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f5d8:	75 16                	jne    c000f5f0 <tcp_write+0x508>
c000f5da:	83 ec 0c             	sub    esp,0xc
c000f5dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f5e1:	e8 0e 8f ff ff       	call   c00084f4 <pbuf_free>
c000f5e6:	83 c4 10             	add    esp,0x10
c000f5e9:	e9 02 03 00 00       	jmp    c000f8f0 <tcp_write+0x808>
c000f5ee:	66 90                	xchg   ax,ax
c000f5f0:	83 ec 08             	sub    esp,0x8
c000f5f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f5f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f5fb:	e8 2c 97 ff ff       	call   c0008d2c <pbuf_cat>
c000f600:	83 c4 10             	add    esp,0x10
c000f603:	90                   	nop
c000f604:	83 ec 0c             	sub    esp,0xc
c000f607:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f60b:	e8 b8 96 ff ff       	call   c0008cc8 <pbuf_clen>
c000f610:	83 c4 10             	add    esp,0x10
c000f613:	0f b6 c0             	movzx  eax,al
c000f616:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f61a:	01 d0                	add    eax,edx
c000f61c:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f621:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f626:	83 f8 02             	cmp    eax,0x2
c000f629:	77 0d                	ja     c000f638 <tcp_write+0x550>
c000f62b:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f630:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f635:	76 15                	jbe    c000f64c <tcp_write+0x564>
c000f637:	90                   	nop
c000f638:	83 ec 0c             	sub    esp,0xc
c000f63b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f63f:	e8 b0 8e ff ff       	call   c00084f4 <pbuf_free>
c000f644:	83 c4 10             	add    esp,0x10
c000f647:	e9 a4 02 00 00       	jmp    c000f8f0 <tcp_write+0x808>
c000f64c:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c000f651:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f655:	8b 4a 6c             	mov    ecx,DWORD PTR [edx+0x6c]
c000f658:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f65d:	01 ca                	add    edx,ecx
c000f65f:	83 ec 0c             	sub    esp,0xc
c000f662:	50                   	push   eax
c000f663:	52                   	push   edx
c000f664:	6a 00                	push   0x0
c000f666:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f66a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000f66e:	e8 61 f6 ff ff       	call   c000ecd4 <tcp_create_segment>
c000f673:	83 c4 20             	add    esp,0x20
c000f676:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f67a:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f67f:	0f 84 67 02 00 00    	je     c000f8ec <tcp_write+0x804>
c000f685:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f68a:	75 0c                	jne    c000f698 <tcp_write+0x5b0>
c000f68c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f690:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f694:	eb 2a                	jmp    c000f6c0 <tcp_write+0x5d8>
c000f696:	66 90                	xchg   ax,ax
c000f698:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f69d:	75 15                	jne    c000f6b4 <tcp_write+0x5cc>
c000f69f:	83 ec 08             	sub    esp,0x8
c000f6a2:	68 64 10 03 c0       	push   0xc0031064
c000f6a7:	68 86 01 03 c0       	push   0xc0030186
c000f6ac:	e8 27 08 01 00       	call   c001fed8 <CPrintf>
c000f6b1:	83 c4 10             	add    esp,0x10
c000f6b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f6b8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f6bc:	89 10                	mov    DWORD PTR [eax],edx
c000f6be:	66 90                	xchg   ax,ax
c000f6c0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f6c4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f6c8:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f6cd:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000f6d2:	01 d0                	add    eax,edx
c000f6d4:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f6d9:	8d 76 00             	lea    esi,[esi+0x0]
c000f6dc:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f6e1:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f6e6:	39 c2                	cmp    edx,eax
c000f6e8:	0f 82 6e fd ff ff    	jb     c000f45c <tcp_write+0x374>
c000f6ee:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f6f3:	85 c0                	test   eax,eax
c000f6f5:	0f 84 9d 00 00 00    	je     c000f798 <tcp_write+0x6b0>
c000f6fb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f6ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f702:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f706:	eb 70                	jmp    c000f778 <tcp_write+0x690>
c000f708:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f70c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f70f:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f714:	01 d0                	add    eax,edx
c000f716:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f71a:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f71e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f722:	8b 00                	mov    eax,DWORD PTR [eax]
c000f724:	85 c0                	test   eax,eax
c000f726:	75 44                	jne    c000f76c <tcp_write+0x684>
c000f728:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f72d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f731:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000f734:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f738:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f73c:	0f b7 c0             	movzx  eax,ax
c000f73f:	01 c8                	add    eax,ecx
c000f741:	83 ec 04             	sub    esp,0x4
c000f744:	52                   	push   edx
c000f745:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f749:	50                   	push   eax
c000f74a:	e8 2b 0c ff ff       	call   c000037a <memcpy>
c000f74f:	83 c4 10             	add    esp,0x10
c000f752:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f756:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f75a:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f75f:	01 d0                	add    eax,edx
c000f761:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f765:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000f769:	8d 76 00             	lea    esi,[esi+0x0]
c000f76c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f770:	8b 00                	mov    eax,DWORD PTR [eax]
c000f772:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f776:	66 90                	xchg   ax,ax
c000f778:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000f77d:	75 89                	jne    c000f708 <tcp_write+0x620>
c000f77f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f783:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f786:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f78b:	01 d0                	add    eax,edx
c000f78d:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f791:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f795:	8d 76 00             	lea    esi,[esi+0x0]
c000f798:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f79d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f7a1:	66 89 42 76          	mov    WORD PTR [edx+0x76],ax
c000f7a5:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f7aa:	74 4c                	je     c000f7f8 <tcp_write+0x710>
c000f7ac:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f7b1:	75 15                	jne    c000f7c8 <tcp_write+0x6e0>
c000f7b3:	83 ec 08             	sub    esp,0x8
c000f7b6:	68 04 0f 03 c0       	push   0xc0030f04
c000f7bb:	68 86 01 03 c0       	push   0xc0030186
c000f7c0:	e8 13 07 01 00       	call   c001fed8 <CPrintf>
c000f7c5:	83 c4 10             	add    esp,0x10
c000f7c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f7cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f7cf:	83 ec 08             	sub    esp,0x8
c000f7d2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000f7d6:	50                   	push   eax
c000f7d7:	e8 50 95 ff ff       	call   c0008d2c <pbuf_cat>
c000f7dc:	83 c4 10             	add    esp,0x10
c000f7df:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f7e3:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000f7e6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f7ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f7ed:	01 d0                	add    eax,edx
c000f7ef:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f7f3:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f7f7:	90                   	nop
c000f7f8:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f7fd:	75 0d                	jne    c000f80c <tcp_write+0x724>
c000f7ff:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f803:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f807:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f80a:	eb 0c                	jmp    c000f818 <tcp_write+0x730>
c000f80c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f810:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f814:	89 10                	mov    DWORD PTR [eax],edx
c000f816:	66 90                	xchg   ax,ax
c000f818:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f81c:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f81f:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f824:	01 c2                	add    edx,eax
c000f826:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f82a:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000f82d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f831:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000f835:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f839:	89 d6                	mov    esi,edx
c000f83b:	29 c6                	sub    esi,eax
c000f83d:	89 f0                	mov    eax,esi
c000f83f:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f843:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000f847:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f84b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f84f:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000f853:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f857:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f85a:	0f b7 c0             	movzx  eax,ax
c000f85d:	85 c0                	test   eax,eax
c000f85f:	74 2b                	je     c000f88c <tcp_write+0x7a4>
c000f861:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f865:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f868:	85 c0                	test   eax,eax
c000f86a:	75 20                	jne    c000f88c <tcp_write+0x7a4>
c000f86c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f870:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f873:	85 c0                	test   eax,eax
c000f875:	75 15                	jne    c000f88c <tcp_write+0x7a4>
c000f877:	83 ec 08             	sub    esp,0x8
c000f87a:	68 75 10 03 c0       	push   0xc0031075
c000f87f:	68 86 01 03 c0       	push   0xc0030186
c000f884:	e8 4f 06 01 00       	call   c001fed8 <CPrintf>
c000f889:	83 c4 10             	add    esp,0x10
c000f88c:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f891:	74 41                	je     c000f8d4 <tcp_write+0x7ec>
c000f893:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f897:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f89a:	85 c0                	test   eax,eax
c000f89c:	74 36                	je     c000f8d4 <tcp_write+0x7ec>
c000f89e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f8a3:	83 e0 02             	and    eax,0x2
c000f8a6:	75 2c                	jne    c000f8d4 <tcp_write+0x7ec>
c000f8a8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f8ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f8af:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000f8b3:	83 ec 0c             	sub    esp,0xc
c000f8b6:	6a 08                	push   0x8
c000f8b8:	e8 2b 13 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000f8bd:	83 c4 10             	add    esp,0x10
c000f8c0:	89 c1                	mov    ecx,eax
c000f8c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f8c6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f8c9:	89 d8                	mov    eax,ebx
c000f8cb:	09 c8                	or     eax,ecx
c000f8cd:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000f8d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f8d4:	b0 00                	mov    al,0x0
c000f8d6:	e9 a5 00 00 00       	jmp    c000f980 <tcp_write+0x898>
c000f8db:	90                   	nop
c000f8dc:	90                   	nop
c000f8dd:	eb 11                	jmp    c000f8f0 <tcp_write+0x808>
c000f8df:	90                   	nop
c000f8e0:	90                   	nop
c000f8e1:	eb 0d                	jmp    c000f8f0 <tcp_write+0x808>
c000f8e3:	90                   	nop
c000f8e4:	90                   	nop
c000f8e5:	eb 09                	jmp    c000f8f0 <tcp_write+0x808>
c000f8e7:	90                   	nop
c000f8e8:	90                   	nop
c000f8e9:	eb 05                	jmp    c000f8f0 <tcp_write+0x808>
c000f8eb:	90                   	nop
c000f8ec:	90                   	nop
c000f8ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f8f0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8f4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f8f7:	83 c8 80             	or     eax,0xffffff80
c000f8fa:	88 c2                	mov    dl,al
c000f8fc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f900:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f903:	66 a1 bc 77 03 c0    	mov    ax,ds:0xc00377bc
c000f909:	83 c0 01             	add    eax,0x1
c000f90c:	66 a3 bc 77 03 c0    	mov    ds:0xc00377bc,ax
c000f912:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f917:	74 0f                	je     c000f928 <tcp_write+0x840>
c000f919:	83 ec 0c             	sub    esp,0xc
c000f91c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f920:	e8 cf 8b ff ff       	call   c00084f4 <pbuf_free>
c000f925:	83 c4 10             	add    esp,0x10
c000f928:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f92d:	74 11                	je     c000f940 <tcp_write+0x858>
c000f92f:	83 ec 0c             	sub    esp,0xc
c000f932:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f936:	e8 75 a8 ff ff       	call   c000a1b0 <tcp_segs_free>
c000f93b:	83 c4 10             	add    esp,0x10
c000f93e:	66 90                	xchg   ax,ax
c000f940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f944:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f947:	0f b7 c0             	movzx  eax,ax
c000f94a:	85 c0                	test   eax,eax
c000f94c:	74 2e                	je     c000f97c <tcp_write+0x894>
c000f94e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f952:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f955:	85 c0                	test   eax,eax
c000f957:	75 23                	jne    c000f97c <tcp_write+0x894>
c000f959:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f95d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f960:	85 c0                	test   eax,eax
c000f962:	75 18                	jne    c000f97c <tcp_write+0x894>
c000f964:	83 ec 08             	sub    esp,0x8
c000f967:	68 75 10 03 c0       	push   0xc0031075
c000f96c:	68 86 01 03 c0       	push   0xc0030186
c000f971:	e8 62 05 01 00       	call   c001fed8 <CPrintf>
c000f976:	83 c4 10             	add    esp,0x10
c000f979:	8d 76 00             	lea    esi,[esi+0x0]
c000f97c:	b0 ff                	mov    al,0xff
c000f97e:	66 90                	xchg   ax,ax
c000f980:	83 c4 54             	add    esp,0x54
c000f983:	5b                   	pop    ebx
c000f984:	5e                   	pop    esi
c000f985:	c3                   	ret    
c000f986:	66 90                	xchg   ax,ax

c000f988 <tcp_enqueue_flags>:
c000f988:	83 ec 3c             	sub    esp,0x3c
c000f98b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f98f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000f993:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f998:	c6 44 24 27 00       	mov    BYTE PTR [esp+0x27],0x0
c000f99d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f9a2:	83 e0 03             	and    eax,0x3
c000f9a5:	75 15                	jne    c000f9bc <tcp_enqueue_flags+0x34>
c000f9a7:	83 ec 08             	sub    esp,0x8
c000f9aa:	68 3c 0f 03 c0       	push   0xc0030f3c
c000f9af:	68 86 01 03 c0       	push   0xc0030186
c000f9b4:	e8 1f 05 01 00       	call   c001fed8 <CPrintf>
c000f9b9:	83 c4 10             	add    esp,0x10
c000f9bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9c0:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f9c3:	0f b7 c0             	movzx  eax,ax
c000f9c6:	83 f8 01             	cmp    eax,0x1
c000f9c9:	77 11                	ja     c000f9dc <tcp_enqueue_flags+0x54>
c000f9cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9cf:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f9d2:	0f b7 c0             	movzx  eax,ax
c000f9d5:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f9da:	76 2c                	jbe    c000fa08 <tcp_enqueue_flags+0x80>
c000f9dc:	66 a1 bc 77 03 c0    	mov    ax,ds:0xc00377bc
c000f9e2:	83 c0 01             	add    eax,0x1
c000f9e5:	66 a3 bc 77 03 c0    	mov    ds:0xc00377bc,ax
c000f9eb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9ef:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f9f2:	83 c8 80             	or     eax,0xffffff80
c000f9f5:	88 c2                	mov    dl,al
c000f9f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9fb:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f9fe:	b0 ff                	mov    al,0xff
c000fa00:	e9 6b 02 00 00       	jmp    c000fc70 <tcp_enqueue_flags+0x2e8>
c000fa05:	8d 76 00             	lea    esi,[esi+0x0]
c000fa08:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fa0d:	83 e0 02             	and    eax,0x2
c000fa10:	74 06                	je     c000fa18 <tcp_enqueue_flags+0x90>
c000fa12:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000fa17:	90                   	nop
c000fa18:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000fa1d:	c1 e0 02             	shl    eax,0x2
c000fa20:	83 e0 04             	and    eax,0x4
c000fa23:	88 c2                	mov    dl,al
c000fa25:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000fa2a:	83 e0 02             	and    eax,0x2
c000fa2d:	74 05                	je     c000fa34 <tcp_enqueue_flags+0xac>
c000fa2f:	b0 0c                	mov    al,0xc
c000fa31:	eb 05                	jmp    c000fa38 <tcp_enqueue_flags+0xb0>
c000fa33:	90                   	nop
c000fa34:	b0 00                	mov    al,0x0
c000fa36:	66 90                	xchg   ax,ax
c000fa38:	01 d0                	add    eax,edx
c000fa3a:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c000fa3e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa42:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000fa46:	0f b7 c0             	movzx  eax,ax
c000fa49:	85 c0                	test   eax,eax
c000fa4b:	75 17                	jne    c000fa64 <tcp_enqueue_flags+0xdc>
c000fa4d:	66 a1 bc 77 03 c0    	mov    ax,ds:0xc00377bc
c000fa53:	83 c0 01             	add    eax,0x1
c000fa56:	66 a3 bc 77 03 c0    	mov    ds:0xc00377bc,ax
c000fa5c:	b0 ff                	mov    al,0xff
c000fa5e:	e9 0d 02 00 00       	jmp    c000fc70 <tcp_enqueue_flags+0x2e8>
c000fa63:	90                   	nop
c000fa64:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000fa69:	83 ec 04             	sub    esp,0x4
c000fa6c:	6a 00                	push   0x0
c000fa6e:	50                   	push   eax
c000fa6f:	6a 00                	push   0x0
c000fa71:	e8 56 8c ff ff       	call   c00086cc <pbuf_alloc>
c000fa76:	83 c4 10             	add    esp,0x10
c000fa79:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fa7d:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000fa82:	75 2c                	jne    c000fab0 <tcp_enqueue_flags+0x128>
c000fa84:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa88:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fa8b:	83 c8 80             	or     eax,0xffffff80
c000fa8e:	88 c2                	mov    dl,al
c000fa90:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa94:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fa97:	66 a1 bc 77 03 c0    	mov    ax,ds:0xc00377bc
c000fa9d:	83 c0 01             	add    eax,0x1
c000faa0:	66 a3 bc 77 03 c0    	mov    ds:0xc00377bc,ax
c000faa6:	b0 ff                	mov    al,0xff
c000faa8:	e9 c3 01 00 00       	jmp    c000fc70 <tcp_enqueue_flags+0x2e8>
c000faad:	8d 76 00             	lea    esi,[esi+0x0]
c000fab0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fab4:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000fab8:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000fabd:	0f b7 d2             	movzx  edx,dx
c000fac0:	0f b7 c0             	movzx  eax,ax
c000fac3:	39 c2                	cmp    edx,eax
c000fac5:	73 15                	jae    c000fadc <tcp_enqueue_flags+0x154>
c000fac7:	83 ec 08             	sub    esp,0x8
c000faca:	68 94 0f 03 c0       	push   0xc0030f94
c000facf:	68 86 01 03 c0       	push   0xc0030186
c000fad4:	e8 ff 03 01 00       	call   c001fed8 <CPrintf>
c000fad9:	83 c4 10             	add    esp,0x10
c000fadc:	0f b6 4c 24 2f       	movzx  ecx,BYTE PTR [esp+0x2f]
c000fae1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fae5:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000fae8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000faed:	83 ec 0c             	sub    esp,0xc
c000faf0:	51                   	push   ecx
c000faf1:	52                   	push   edx
c000faf2:	50                   	push   eax
c000faf3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000faf7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000fafb:	e8 d4 f1 ff ff       	call   c000ecd4 <tcp_create_segment>
c000fb00:	83 c4 20             	add    esp,0x20
c000fb03:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fb07:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fb0c:	75 2a                	jne    c000fb38 <tcp_enqueue_flags+0x1b0>
c000fb0e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb12:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fb15:	83 c8 80             	or     eax,0xffffff80
c000fb18:	88 c2                	mov    dl,al
c000fb1a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb1e:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fb21:	66 a1 bc 77 03 c0    	mov    ax,ds:0xc00377bc
c000fb27:	83 c0 01             	add    eax,0x1
c000fb2a:	66 a3 bc 77 03 c0    	mov    ds:0xc00377bc,ax
c000fb30:	b0 ff                	mov    al,0xff
c000fb32:	e9 39 01 00 00       	jmp    c000fc70 <tcp_enqueue_flags+0x2e8>
c000fb37:	90                   	nop
c000fb38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fb3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fb3f:	0f b7 c0             	movzx  eax,ax
c000fb42:	85 c0                	test   eax,eax
c000fb44:	74 16                	je     c000fb5c <tcp_enqueue_flags+0x1d4>
c000fb46:	83 ec 08             	sub    esp,0x8
c000fb49:	68 d0 0f 03 c0       	push   0xc0030fd0
c000fb4e:	68 86 01 03 c0       	push   0xc0030186
c000fb53:	e8 80 03 01 00       	call   c001fed8 <CPrintf>
c000fb58:	83 c4 10             	add    esp,0x10
c000fb5b:	90                   	nop
c000fb5c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb60:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fb63:	85 c0                	test   eax,eax
c000fb65:	75 0d                	jne    c000fb74 <tcp_enqueue_flags+0x1ec>
c000fb67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb6b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fb6f:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000fb72:	eb 30                	jmp    c000fba4 <tcp_enqueue_flags+0x21c>
c000fb74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb78:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fb7b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb7f:	eb 0f                	jmp    c000fb90 <tcp_enqueue_flags+0x208>
c000fb81:	8d 76 00             	lea    esi,[esi+0x0]
c000fb84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fb88:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb8a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb8e:	66 90                	xchg   ax,ax
c000fb90:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fb94:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb96:	85 c0                	test   eax,eax
c000fb98:	75 ea                	jne    c000fb84 <tcp_enqueue_flags+0x1fc>
c000fb9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fb9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fba2:	89 10                	mov    DWORD PTR [eax],edx
c000fba4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fba8:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000fbae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fbb3:	83 e0 02             	and    eax,0x2
c000fbb6:	75 0c                	jne    c000fbc4 <tcp_enqueue_flags+0x23c>
c000fbb8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fbbd:	83 e0 01             	and    eax,0x1
c000fbc0:	74 26                	je     c000fbe8 <tcp_enqueue_flags+0x260>
c000fbc2:	66 90                	xchg   ax,ax
c000fbc4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbc8:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
c000fbcb:	8d 50 01             	lea    edx,[eax+0x1]
c000fbce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbd2:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000fbd5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbd9:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000fbdd:	83 e8 01             	sub    eax,0x1
c000fbe0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000fbe4:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000fbe8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fbed:	83 e0 01             	and    eax,0x1
c000fbf0:	74 16                	je     c000fc08 <tcp_enqueue_flags+0x280>
c000fbf2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbf6:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fbf9:	83 c8 20             	or     eax,0x20
c000fbfc:	88 c2                	mov    dl,al
c000fbfe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc02:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fc05:	8d 76 00             	lea    esi,[esi+0x0]
c000fc08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fc0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc0f:	83 ec 0c             	sub    esp,0xc
c000fc12:	50                   	push   eax
c000fc13:	e8 b0 90 ff ff       	call   c0008cc8 <pbuf_clen>
c000fc18:	83 c4 10             	add    esp,0x10
c000fc1b:	88 c1                	mov    cl,al
c000fc1d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc21:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000fc24:	0f b6 c1             	movzx  eax,cl
c000fc27:	01 d0                	add    eax,edx
c000fc29:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000fc2d:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000fc31:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc35:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000fc38:	0f b7 c0             	movzx  eax,ax
c000fc3b:	85 c0                	test   eax,eax
c000fc3d:	74 2d                	je     c000fc6c <tcp_enqueue_flags+0x2e4>
c000fc3f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc43:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000fc46:	85 c0                	test   eax,eax
c000fc48:	75 22                	jne    c000fc6c <tcp_enqueue_flags+0x2e4>
c000fc4a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc4e:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fc51:	85 c0                	test   eax,eax
c000fc53:	75 17                	jne    c000fc6c <tcp_enqueue_flags+0x2e4>
c000fc55:	83 ec 08             	sub    esp,0x8
c000fc58:	68 fc 0f 03 c0       	push   0xc0030ffc
c000fc5d:	68 86 01 03 c0       	push   0xc0030186
c000fc62:	e8 71 02 01 00       	call   c001fed8 <CPrintf>
c000fc67:	83 c4 10             	add    esp,0x10
c000fc6a:	66 90                	xchg   ax,ax
c000fc6c:	b0 00                	mov    al,0x0
c000fc6e:	66 90                	xchg   ax,ax
c000fc70:	83 c4 3c             	add    esp,0x3c
c000fc73:	c3                   	ret    

c000fc74 <tcp_send_fin>:
c000fc74:	53                   	push   ebx
c000fc75:	83 ec 18             	sub    esp,0x18
c000fc78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc7c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fc7f:	85 c0                	test   eax,eax
c000fc81:	74 75                	je     c000fcf8 <tcp_send_fin+0x84>
c000fc83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc87:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fc8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc8e:	eb 0c                	jmp    c000fc9c <tcp_send_fin+0x28>
c000fc90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc94:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc9a:	66 90                	xchg   ax,ax
c000fc9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fca0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fca2:	85 c0                	test   eax,eax
c000fca4:	75 ea                	jne    c000fc90 <tcp_send_fin+0x1c>
c000fca6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcaa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fcad:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000fcb1:	0f b7 c0             	movzx  eax,ax
c000fcb4:	83 ec 0c             	sub    esp,0xc
c000fcb7:	50                   	push   eax
c000fcb8:	e8 2b 0f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fcbd:	83 c4 10             	add    esp,0x10
c000fcc0:	0f b7 c0             	movzx  eax,ax
c000fcc3:	83 e0 07             	and    eax,0x7
c000fcc6:	75 30                	jne    c000fcf8 <tcp_send_fin+0x84>
c000fcc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fccc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fccf:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000fcd3:	83 ec 0c             	sub    esp,0xc
c000fcd6:	6a 01                	push   0x1
c000fcd8:	e8 0b 0f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fcdd:	83 c4 10             	add    esp,0x10
c000fce0:	89 c1                	mov    ecx,eax
c000fce2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fce6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fce9:	89 d8                	mov    eax,ebx
c000fceb:	09 c8                	or     eax,ecx
c000fced:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000fcf1:	b0 00                	mov    al,0x0
c000fcf3:	eb 17                	jmp    c000fd0c <tcp_send_fin+0x98>
c000fcf5:	8d 76 00             	lea    esi,[esi+0x0]
c000fcf8:	83 ec 08             	sub    esp,0x8
c000fcfb:	6a 01                	push   0x1
c000fcfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fd01:	e8 82 fc ff ff       	call   c000f988 <tcp_enqueue_flags>
c000fd06:	83 c4 10             	add    esp,0x10
c000fd09:	8d 76 00             	lea    esi,[esi+0x0]
c000fd0c:	83 c4 18             	add    esp,0x18
c000fd0f:	5b                   	pop    ebx
c000fd10:	c3                   	ret    
c000fd11:	8d 76 00             	lea    esi,[esi+0x0]

c000fd14 <tcp_send_empty_ack>:
c000fd14:	53                   	push   ebx
c000fd15:	83 ec 18             	sub    esp,0x18
c000fd18:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fd1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd21:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000fd24:	83 ec 0c             	sub    esp,0xc
c000fd27:	50                   	push   eax
c000fd28:	e8 df 0e ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fd2d:	83 c4 10             	add    esp,0x10
c000fd30:	89 c2                	mov    edx,eax
c000fd32:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fd37:	52                   	push   edx
c000fd38:	6a 00                	push   0x0
c000fd3a:	50                   	push   eax
c000fd3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fd3f:	e8 34 ee ff ff       	call   c000eb78 <tcp_output_alloc_header>
c000fd44:	83 c4 10             	add    esp,0x10
c000fd47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fd4b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fd50:	75 0a                	jne    c000fd5c <tcp_send_empty_ack+0x48>
c000fd52:	b0 fe                	mov    al,0xfe
c000fd54:	e9 97 00 00 00       	jmp    c000fdf0 <tcp_send_empty_ack+0xdc>
c000fd59:	8d 76 00             	lea    esi,[esi+0x0]
c000fd5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fd67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd6b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fd6e:	83 e0 fc             	and    eax,0xfffffffc
c000fd71:	88 c2                	mov    dl,al
c000fd73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd77:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fd7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd7e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fd81:	0f b7 d0             	movzx  edx,ax
c000fd84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd88:	8d 48 04             	lea    ecx,[eax+0x4]
c000fd8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd8f:	83 ec 0c             	sub    esp,0xc
c000fd92:	52                   	push   edx
c000fd93:	6a 06                	push   0x6
c000fd95:	51                   	push   ecx
c000fd96:	50                   	push   eax
c000fd97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd9b:	e8 70 35 00 00       	call   c0013310 <inet_chksum_pseudo>
c000fda0:	83 c4 20             	add    esp,0x20
c000fda3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000fda7:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c000fdab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdaf:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fdb2:	0f b6 c8             	movzx  ecx,al
c000fdb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdb9:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fdbc:	0f b6 d0             	movzx  edx,al
c000fdbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdc3:	8d 58 04             	lea    ebx,[eax+0x4]
c000fdc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdca:	83 ec 08             	sub    esp,0x8
c000fdcd:	6a 06                	push   0x6
c000fdcf:	51                   	push   ecx
c000fdd0:	52                   	push   edx
c000fdd1:	53                   	push   ebx
c000fdd2:	50                   	push   eax
c000fdd3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fdd7:	e8 68 41 00 00       	call   c0013f44 <ip_output>
c000fddc:	83 c4 20             	add    esp,0x20
c000fddf:	83 ec 0c             	sub    esp,0xc
c000fde2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fde6:	e8 09 87 ff ff       	call   c00084f4 <pbuf_free>
c000fdeb:	83 c4 10             	add    esp,0x10
c000fdee:	b0 00                	mov    al,0x0
c000fdf0:	83 c4 18             	add    esp,0x18
c000fdf3:	5b                   	pop    ebx
c000fdf4:	c3                   	ret    
c000fdf5:	8d 76 00             	lea    esi,[esi+0x0]

c000fdf8 <tcp_output_segment>:
c000fdf8:	56                   	push   esi
c000fdf9:	53                   	push   ebx
c000fdfa:	83 ec 14             	sub    esp,0x14
c000fdfd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe01:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000fe04:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fe08:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fe0b:	83 ec 0c             	sub    esp,0xc
c000fe0e:	50                   	push   eax
c000fe0f:	e8 f8 0d ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fe14:	83 c4 10             	add    esp,0x10
c000fe17:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000fe1a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe1e:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fe22:	0f b7 c0             	movzx  eax,ax
c000fe25:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fe29:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fe2c:	83 ec 0c             	sub    esp,0xc
c000fe2f:	50                   	push   eax
c000fe30:	e8 b3 0d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fe35:	83 c4 10             	add    esp,0x10
c000fe38:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000fe3c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe40:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000fe43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe47:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fe4b:	0f b7 c0             	movzx  eax,ax
c000fe4e:	01 c2                	add    edx,eax
c000fe50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe54:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000fe57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe5b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fe5e:	83 c0 14             	add    eax,0x14
c000fe61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe69:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fe6c:	0f b6 c0             	movzx  eax,al
c000fe6f:	83 e0 01             	and    eax,0x1
c000fe72:	74 10                	je     c000fe84 <tcp_output_segment+0x8c>
c000fe74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe78:	c7 00 02 04 02 18    	mov    DWORD PTR [eax],0x18020402
c000fe7e:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c000fe83:	90                   	nop
c000fe84:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe88:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000fe8c:	98                   	cwde   
c000fe8d:	83 f8 ff             	cmp    eax,0xffffffff
c000fe90:	75 0a                	jne    c000fe9c <tcp_output_segment+0xa4>
c000fe92:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe96:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000fe9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fea0:	85 c0                	test   eax,eax
c000fea2:	74 0c                	je     c000feb0 <tcp_output_segment+0xb8>
c000fea4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fea8:	8b 00                	mov    eax,DWORD PTR [eax]
c000feaa:	85 c0                	test   eax,eax
c000feac:	75 32                	jne    c000fee0 <tcp_output_segment+0xe8>
c000feae:	66 90                	xchg   ax,ax
c000feb0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000feb4:	83 c0 04             	add    eax,0x4
c000feb7:	83 ec 0c             	sub    esp,0xc
c000feba:	50                   	push   eax
c000febb:	e8 dc 38 00 00       	call   c001379c <ip_route>
c000fec0:	83 c4 10             	add    esp,0x10
c000fec3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fec7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fecc:	0f 84 46 01 00 00    	je     c0010018 <tcp_output_segment+0x220>
c000fed2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fed6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000fed9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fedd:	89 10                	mov    DWORD PTR [eax],edx
c000fedf:	90                   	nop
c000fee0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fee4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fee7:	85 c0                	test   eax,eax
c000fee9:	75 2d                	jne    c000ff18 <tcp_output_segment+0x120>
c000feeb:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000fef1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fef5:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000fef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fefc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000feff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff02:	83 ec 0c             	sub    esp,0xc
c000ff05:	50                   	push   eax
c000ff06:	e8 01 0d ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000ff0b:	83 c4 10             	add    esp,0x10
c000ff0e:	89 c2                	mov    edx,eax
c000ff10:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff14:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c000ff17:	90                   	nop
c000ff18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff1c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ff1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff29:	29 c2                	sub    edx,eax
c000ff2b:	89 d0                	mov    eax,edx
c000ff2d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000ff32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff39:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000ff3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff41:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ff44:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000ff49:	89 d6                	mov    esi,edx
c000ff4b:	29 c6                	sub    esi,eax
c000ff4d:	89 f0                	mov    eax,esi
c000ff4f:	66 89 41 0a          	mov    WORD PTR [ecx+0xa],ax
c000ff53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff5a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ff5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff61:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ff64:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000ff69:	89 d6                	mov    esi,edx
c000ff6b:	29 c6                	sub    esi,eax
c000ff6d:	89 f0                	mov    eax,esi
c000ff6f:	66 89 41 08          	mov    WORD PTR [ecx+0x8],ax
c000ff73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff7a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ff7e:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ff81:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ff84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff88:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ff8b:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000ff91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff98:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ff9b:	0f b7 c8             	movzx  ecx,ax
c000ff9e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffa2:	8d 70 04             	lea    esi,[eax+0x4]
c000ffa5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ffa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffb0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ffb4:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c000ffb7:	83 ec 0c             	sub    esp,0xc
c000ffba:	51                   	push   ecx
c000ffbb:	6a 06                	push   0x6
c000ffbd:	56                   	push   esi
c000ffbe:	52                   	push   edx
c000ffbf:	50                   	push   eax
c000ffc0:	e8 4b 33 00 00       	call   c0013310 <inet_chksum_pseudo>
c000ffc5:	83 c4 20             	add    esp,0x20
c000ffc8:	66 89 43 10          	mov    WORD PTR [ebx+0x10],ax
c000ffcc:	66 a1 b0 77 03 c0    	mov    ax,ds:0xc00377b0
c000ffd2:	83 c0 01             	add    eax,0x1
c000ffd5:	66 a3 b0 77 03 c0    	mov    ds:0xc00377b0,ax
c000ffdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffdf:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000ffe2:	0f b6 d8             	movzx  ebx,al
c000ffe5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffe9:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000ffec:	0f b6 c8             	movzx  ecx,al
c000ffef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fff3:	8d 70 04             	lea    esi,[eax+0x4]
c000fff6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fffa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fffe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010001:	83 ec 08             	sub    esp,0x8
c0010004:	6a 06                	push   0x6
c0010006:	53                   	push   ebx
c0010007:	51                   	push   ecx
c0010008:	56                   	push   esi
c0010009:	52                   	push   edx
c001000a:	50                   	push   eax
c001000b:	e8 34 3f 00 00       	call   c0013f44 <ip_output>
c0010010:	83 c4 20             	add    esp,0x20
c0010013:	eb 07                	jmp    c001001c <tcp_output_segment+0x224>
c0010015:	8d 76 00             	lea    esi,[esi+0x0]
c0010018:	90                   	nop
c0010019:	8d 76 00             	lea    esi,[esi+0x0]
c001001c:	83 c4 14             	add    esp,0x14
c001001f:	5b                   	pop    ebx
c0010020:	5e                   	pop    esi
c0010021:	c3                   	ret    
c0010022:	66 90                	xchg   ax,ax

c0010024 <tcp_output>:
c0010024:	56                   	push   esi
c0010025:	53                   	push   ebx
c0010026:	83 ec 24             	sub    esp,0x24
c0010029:	a1 88 78 03 c0       	mov    eax,ds:0xc0037888
c001002e:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0010032:	75 08                	jne    c001003c <tcp_output+0x18>
c0010034:	b0 00                	mov    al,0x0
c0010036:	e9 6d 04 00 00       	jmp    c00104a8 <tcp_output+0x484>
c001003b:	90                   	nop
c001003c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010040:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c0010044:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010048:	8b 52 60             	mov    edx,DWORD PTR [edx+0x60]
c001004b:	0f b7 d8             	movzx  ebx,ax
c001004e:	0f b7 ca             	movzx  ecx,dx
c0010051:	39 cb                	cmp    ebx,ecx
c0010053:	76 03                	jbe    c0010058 <tcp_output+0x34>
c0010055:	89 d0                	mov    eax,edx
c0010057:	90                   	nop
c0010058:	0f b7 c0             	movzx  eax,ax
c001005b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001005f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010063:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010066:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001006a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001006e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010071:	0f b6 c0             	movzx  eax,al
c0010074:	83 e0 02             	and    eax,0x2
c0010077:	74 4f                	je     c00100c8 <tcp_output+0xa4>
c0010079:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001007e:	74 34                	je     c00100b4 <tcp_output+0x90>
c0010080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010084:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010087:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001008a:	83 ec 0c             	sub    esp,0xc
c001008d:	50                   	push   eax
c001008e:	e8 79 0b ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010093:	83 c4 10             	add    esp,0x10
c0010096:	89 c2                	mov    edx,eax
c0010098:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001009c:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c001009f:	29 c2                	sub    edx,eax
c00100a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100a5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00100a8:	0f b7 c0             	movzx  eax,ax
c00100ab:	01 d0                	add    eax,edx
c00100ad:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00100b1:	73 15                	jae    c00100c8 <tcp_output+0xa4>
c00100b3:	90                   	nop
c00100b4:	83 ec 0c             	sub    esp,0xc
c00100b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00100bb:	e8 54 fc ff ff       	call   c000fd14 <tcp_send_empty_ack>
c00100c0:	83 c4 10             	add    esp,0x10
c00100c3:	e9 e0 03 00 00       	jmp    c00104a8 <tcp_output+0x484>
c00100c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100cc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00100cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100d3:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00100d8:	0f 84 ea 02 00 00    	je     c00103c8 <tcp_output+0x3a4>
c00100de:	eb 0c                	jmp    c00100ec <tcp_output+0xc8>
c00100e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00100e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00100e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100ea:	66 90                	xchg   ax,ax
c00100ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00100f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00100f2:	85 c0                	test   eax,eax
c00100f4:	75 ea                	jne    c00100e0 <tcp_output+0xbc>
c00100f6:	e9 cd 02 00 00       	jmp    c00103c8 <tcp_output+0x3a4>
c00100fb:	90                   	nop
c00100fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010100:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010103:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010107:	0f b7 c0             	movzx  eax,ax
c001010a:	83 ec 0c             	sub    esp,0xc
c001010d:	50                   	push   eax
c001010e:	e8 d5 0a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010113:	83 c4 10             	add    esp,0x10
c0010116:	0f b7 c0             	movzx  eax,ax
c0010119:	83 e0 04             	and    eax,0x4
c001011c:	74 16                	je     c0010134 <tcp_output+0x110>
c001011e:	83 ec 08             	sub    esp,0x8
c0010121:	68 93 10 03 c0       	push   0xc0031093
c0010126:	68 86 01 03 c0       	push   0xc0030186
c001012b:	e8 a8 fd 00 00       	call   c001fed8 <CPrintf>
c0010130:	83 c4 10             	add    esp,0x10
c0010133:	90                   	nop
c0010134:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010138:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001013b:	85 c0                	test   eax,eax
c001013d:	74 45                	je     c0010184 <tcp_output+0x160>
c001013f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010143:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010146:	0f b6 c0             	movzx  eax,al
c0010149:	83 e0 44             	and    eax,0x44
c001014c:	75 36                	jne    c0010184 <tcp_output+0x160>
c001014e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010152:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010155:	85 c0                	test   eax,eax
c0010157:	74 33                	je     c001018c <tcp_output+0x168>
c0010159:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001015d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010160:	8b 00                	mov    eax,DWORD PTR [eax]
c0010162:	85 c0                	test   eax,eax
c0010164:	75 1e                	jne    c0010184 <tcp_output+0x160>
c0010166:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001016a:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c001016d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0010170:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010174:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010177:	0f b7 d2             	movzx  edx,dx
c001017a:	0f b7 c0             	movzx  eax,ax
c001017d:	39 c2                	cmp    edx,eax
c001017f:	72 0b                	jb     c001018c <tcp_output+0x168>
c0010181:	8d 76 00             	lea    esi,[esi+0x0]
c0010184:	b8 01 00 00 00       	mov    eax,0x1
c0010189:	eb 09                	jmp    c0010194 <tcp_output+0x170>
c001018b:	90                   	nop
c001018c:	b8 00 00 00 00       	mov    eax,0x0
c0010191:	8d 76 00             	lea    esi,[esi+0x0]
c0010194:	85 c0                	test   eax,eax
c0010196:	75 18                	jne    c00101b0 <tcp_output+0x18c>
c0010198:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001019c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001019f:	0f b6 c0             	movzx  eax,al
c00101a2:	25 a0 00 00 00       	and    eax,0xa0
c00101a7:	0f 84 5b 02 00 00    	je     c0010408 <tcp_output+0x3e4>
c00101ad:	8d 76 00             	lea    esi,[esi+0x0]
c00101b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101b4:	8b 10                	mov    edx,DWORD PTR [eax]
c00101b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101ba:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c00101bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101c1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00101c4:	83 f8 02             	cmp    eax,0x2
c00101c7:	74 3f                	je     c0010208 <tcp_output+0x1e4>
c00101c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101cd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00101d0:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c00101d4:	83 ec 0c             	sub    esp,0xc
c00101d7:	6a 10                	push   0x10
c00101d9:	e8 0a 0a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00101de:	83 c4 10             	add    esp,0x10
c00101e1:	89 c1                	mov    ecx,eax
c00101e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101e7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00101ea:	89 d8                	mov    eax,ebx
c00101ec:	09 c8                	or     eax,ecx
c00101ee:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c00101f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101f6:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00101f9:	83 e0 fc             	and    eax,0xfffffffc
c00101fc:	88 c2                	mov    dl,al
c00101fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010202:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0010205:	8d 76 00             	lea    esi,[esi+0x0]
c0010208:	83 ec 08             	sub    esp,0x8
c001020b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001020f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010213:	e8 e0 fb ff ff       	call   c000fdf8 <tcp_output_segment>
c0010218:	83 c4 10             	add    esp,0x10
c001021b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001021f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010222:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010225:	83 ec 0c             	sub    esp,0xc
c0010228:	50                   	push   eax
c0010229:	e8 de 09 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001022e:	83 c4 10             	add    esp,0x10
c0010231:	89 c3                	mov    ebx,eax
c0010233:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010237:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001023a:	0f b7 f0             	movzx  esi,ax
c001023d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010241:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010244:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010248:	0f b7 c0             	movzx  eax,ax
c001024b:	83 ec 0c             	sub    esp,0xc
c001024e:	50                   	push   eax
c001024f:	e8 94 09 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010254:	83 c4 10             	add    esp,0x10
c0010257:	0f b7 c0             	movzx  eax,ax
c001025a:	83 e0 03             	and    eax,0x3
c001025d:	0f 95 c0             	setne  al
c0010260:	0f b6 c0             	movzx  eax,al
c0010263:	01 f0                	add    eax,esi
c0010265:	01 d8                	add    eax,ebx
c0010267:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001026b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001026f:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c0010272:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0010276:	79 0c                	jns    c0010284 <tcp_output+0x260>
c0010278:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001027c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010280:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c0010283:	90                   	nop
c0010284:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010288:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001028b:	0f b7 d8             	movzx  ebx,ax
c001028e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010292:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010295:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010299:	0f b7 c0             	movzx  eax,ax
c001029c:	83 ec 0c             	sub    esp,0xc
c001029f:	50                   	push   eax
c00102a0:	e8 43 09 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00102a5:	83 c4 10             	add    esp,0x10
c00102a8:	0f b7 c0             	movzx  eax,ax
c00102ab:	83 e0 03             	and    eax,0x3
c00102ae:	0f 95 c0             	setne  al
c00102b1:	0f b6 c0             	movzx  eax,al
c00102b4:	01 d8                	add    eax,ebx
c00102b6:	85 c0                	test   eax,eax
c00102b8:	0f 8e ee 00 00 00    	jle    c00103ac <tcp_output+0x388>
c00102be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00102c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102cc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00102cf:	85 c0                	test   eax,eax
c00102d1:	75 19                	jne    c00102ec <tcp_output+0x2c8>
c00102d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00102db:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c00102de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102e6:	e9 d1 00 00 00       	jmp    c00103bc <tcp_output+0x398>
c00102eb:	90                   	nop
c00102ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00102f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00102f6:	83 ec 0c             	sub    esp,0xc
c00102f9:	50                   	push   eax
c00102fa:	e8 0d 09 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00102ff:	83 c4 10             	add    esp,0x10
c0010302:	89 c3                	mov    ebx,eax
c0010304:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010308:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001030b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001030e:	83 ec 0c             	sub    esp,0xc
c0010311:	50                   	push   eax
c0010312:	e8 f5 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010317:	83 c4 10             	add    esp,0x10
c001031a:	29 c3                	sub    ebx,eax
c001031c:	89 d8                	mov    eax,ebx
c001031e:	79 74                	jns    c0010394 <tcp_output+0x370>
c0010320:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010324:	83 c0 7c             	add    eax,0x7c
c0010327:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001032b:	eb 0f                	jmp    c001033c <tcp_output+0x318>
c001032d:	8d 76 00             	lea    esi,[esi+0x0]
c0010330:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010334:	8b 00                	mov    eax,DWORD PTR [eax]
c0010336:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001033a:	66 90                	xchg   ax,ax
c001033c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010340:	8b 00                	mov    eax,DWORD PTR [eax]
c0010342:	85 c0                	test   eax,eax
c0010344:	74 36                	je     c001037c <tcp_output+0x358>
c0010346:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001034a:	8b 00                	mov    eax,DWORD PTR [eax]
c001034c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001034f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010352:	83 ec 0c             	sub    esp,0xc
c0010355:	50                   	push   eax
c0010356:	e8 b1 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001035b:	83 c4 10             	add    esp,0x10
c001035e:	89 c3                	mov    ebx,eax
c0010360:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010364:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010367:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001036a:	83 ec 0c             	sub    esp,0xc
c001036d:	50                   	push   eax
c001036e:	e8 99 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010373:	83 c4 10             	add    esp,0x10
c0010376:	29 c3                	sub    ebx,eax
c0010378:	89 d8                	mov    eax,ebx
c001037a:	78 b4                	js     c0010330 <tcp_output+0x30c>
c001037c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010380:	8b 10                	mov    edx,DWORD PTR [eax]
c0010382:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010386:	89 10                	mov    DWORD PTR [eax],edx
c0010388:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001038c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010390:	89 10                	mov    DWORD PTR [eax],edx
c0010392:	eb 28                	jmp    c00103bc <tcp_output+0x398>
c0010394:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010398:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001039c:	89 10                	mov    DWORD PTR [eax],edx
c001039e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00103a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00103a8:	eb 12                	jmp    c00103bc <tcp_output+0x398>
c00103aa:	66 90                	xchg   ax,ax
c00103ac:	83 ec 0c             	sub    esp,0xc
c00103af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00103b3:	e8 b4 9d ff ff       	call   c000a16c <tcp_seg_free>
c00103b8:	83 c4 10             	add    esp,0x10
c00103bb:	90                   	nop
c00103bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00103c0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00103c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00103c7:	90                   	nop
c00103c8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00103cd:	74 3d                	je     c001040c <tcp_output+0x3e8>
c00103cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00103d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00103d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00103d9:	83 ec 0c             	sub    esp,0xc
c00103dc:	50                   	push   eax
c00103dd:	e8 2a 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00103e2:	83 c4 10             	add    esp,0x10
c00103e5:	89 c2                	mov    edx,eax
c00103e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00103eb:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c00103ee:	29 c2                	sub    edx,eax
c00103f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00103f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00103f7:	0f b7 c0             	movzx  eax,ax
c00103fa:	01 d0                	add    eax,edx
c00103fc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0010400:	0f 83 f6 fc ff ff    	jae    c00100fc <tcp_output+0xd8>
c0010406:	eb 04                	jmp    c001040c <tcp_output+0x3e8>
c0010408:	90                   	nop
c0010409:	8d 76 00             	lea    esi,[esi+0x0]
c001040c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010410:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010413:	85 c0                	test   eax,eax
c0010415:	75 0d                	jne    c0010424 <tcp_output+0x400>
c0010417:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001041b:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c0010421:	8d 76 00             	lea    esi,[esi+0x0]
c0010424:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010429:	74 65                	je     c0010490 <tcp_output+0x46c>
c001042b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001042f:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c0010435:	0f b6 c0             	movzx  eax,al
c0010438:	85 c0                	test   eax,eax
c001043a:	75 54                	jne    c0010490 <tcp_output+0x46c>
c001043c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010440:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010443:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010446:	83 ec 0c             	sub    esp,0xc
c0010449:	50                   	push   eax
c001044a:	e8 bd 07 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001044f:	83 c4 10             	add    esp,0x10
c0010452:	89 c2                	mov    edx,eax
c0010454:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010458:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c001045b:	29 c2                	sub    edx,eax
c001045d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010461:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010464:	0f b7 c0             	movzx  eax,ax
c0010467:	01 c2                	add    edx,eax
c0010469:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001046d:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010470:	0f b7 c0             	movzx  eax,ax
c0010473:	39 c2                	cmp    edx,eax
c0010475:	76 19                	jbe    c0010490 <tcp_output+0x46c>
c0010477:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001047b:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c0010485:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010489:	c6 80 a4 00 00 00 01 	mov    BYTE PTR [eax+0xa4],0x1
c0010490:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010494:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010497:	83 e0 7f             	and    eax,0x7f
c001049a:	88 c2                	mov    dl,al
c001049c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104a0:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c00104a3:	b0 00                	mov    al,0x0
c00104a5:	8d 76 00             	lea    esi,[esi+0x0]
c00104a8:	83 c4 24             	add    esp,0x24
c00104ab:	5b                   	pop    ebx
c00104ac:	5e                   	pop    esi
c00104ad:	c3                   	ret    
c00104ae:	66 90                	xchg   ax,ax

c00104b0 <tcp_rst>:
c00104b0:	83 ec 2c             	sub    esp,0x2c
c00104b3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00104b7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00104bb:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00104c0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00104c5:	83 ec 04             	sub    esp,0x4
c00104c8:	6a 00                	push   0x0
c00104ca:	6a 14                	push   0x14
c00104cc:	6a 01                	push   0x1
c00104ce:	e8 f9 81 ff ff       	call   c00086cc <pbuf_alloc>
c00104d3:	83 c4 10             	add    esp,0x10
c00104d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00104da:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00104df:	0f 84 37 01 00 00    	je     c001061c <tcp_rst+0x16c>
c00104e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00104e9:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00104ed:	0f b7 c0             	movzx  eax,ax
c00104f0:	83 f8 13             	cmp    eax,0x13
c00104f3:	77 17                	ja     c001050c <tcp_rst+0x5c>
c00104f5:	83 ec 08             	sub    esp,0x8
c00104f8:	68 a0 0d 03 c0       	push   0xc0030da0
c00104fd:	68 86 01 03 c0       	push   0xc0030186
c0010502:	e8 d1 f9 00 00       	call   c001fed8 <CPrintf>
c0010507:	83 c4 10             	add    esp,0x10
c001050a:	66 90                	xchg   ax,ax
c001050c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010510:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010513:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010517:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001051c:	83 ec 0c             	sub    esp,0xc
c001051f:	50                   	push   eax
c0010520:	e8 c3 06 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010525:	83 c4 10             	add    esp,0x10
c0010528:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001052c:	66 89 02             	mov    WORD PTR [edx],ax
c001052f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0010534:	83 ec 0c             	sub    esp,0xc
c0010537:	50                   	push   eax
c0010538:	e8 ab 06 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001053d:	83 c4 10             	add    esp,0x10
c0010540:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010544:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0010548:	83 ec 0c             	sub    esp,0xc
c001054b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001054f:	e8 b8 06 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010554:	83 c4 10             	add    esp,0x10
c0010557:	89 c2                	mov    edx,eax
c0010559:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001055d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010560:	83 ec 0c             	sub    esp,0xc
c0010563:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010567:	e8 a0 06 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001056c:	83 c4 10             	add    esp,0x10
c001056f:	89 c2                	mov    edx,eax
c0010571:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010575:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010578:	83 ec 0c             	sub    esp,0xc
c001057b:	68 14 50 00 00       	push   0x5014
c0010580:	e8 63 06 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010585:	83 c4 10             	add    esp,0x10
c0010588:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001058c:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c0010590:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010594:	66 c7 40 0e 08 60    	mov    WORD PTR [eax+0xe],0x6008
c001059a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001059e:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c00105a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00105a8:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c00105ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00105b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00105b5:	0f b7 c0             	movzx  eax,ax
c00105b8:	83 ec 0c             	sub    esp,0xc
c00105bb:	50                   	push   eax
c00105bc:	6a 06                	push   0x6
c00105be:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00105c2:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00105c6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00105ca:	e8 41 2d 00 00       	call   c0013310 <inet_chksum_pseudo>
c00105cf:	83 c4 20             	add    esp,0x20
c00105d2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00105d6:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c00105da:	66 a1 b0 77 03 c0    	mov    ax,ds:0xc00377b0
c00105e0:	83 c0 01             	add    eax,0x1
c00105e3:	66 a3 b0 77 03 c0    	mov    ds:0xc00377b0,ax
c00105e9:	83 ec 08             	sub    esp,0x8
c00105ec:	6a 06                	push   0x6
c00105ee:	6a 00                	push   0x0
c00105f0:	68 ff 00 00 00       	push   0xff
c00105f5:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00105f9:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00105fd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010601:	e8 3e 39 00 00       	call   c0013f44 <ip_output>
c0010606:	83 c4 20             	add    esp,0x20
c0010609:	83 ec 0c             	sub    esp,0xc
c001060c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010610:	e8 df 7e ff ff       	call   c00084f4 <pbuf_free>
c0010615:	83 c4 10             	add    esp,0x10
c0010618:	eb 06                	jmp    c0010620 <tcp_rst+0x170>
c001061a:	66 90                	xchg   ax,ax
c001061c:	90                   	nop
c001061d:	8d 76 00             	lea    esi,[esi+0x0]
c0010620:	83 c4 2c             	add    esp,0x2c
c0010623:	c3                   	ret    

c0010624 <tcp_rexmit_rto>:
c0010624:	83 ec 1c             	sub    esp,0x1c
c0010627:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001062b:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001062e:	85 c0                	test   eax,eax
c0010630:	74 7a                	je     c00106ac <tcp_rexmit_rto+0x88>
c0010632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010636:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010639:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001063d:	eb 0d                	jmp    c001064c <tcp_rexmit_rto+0x28>
c001063f:	90                   	nop
c0010640:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010644:	8b 00                	mov    eax,DWORD PTR [eax]
c0010646:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001064a:	66 90                	xchg   ax,ax
c001064c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010650:	8b 00                	mov    eax,DWORD PTR [eax]
c0010652:	85 c0                	test   eax,eax
c0010654:	75 ea                	jne    c0010640 <tcp_rexmit_rto+0x1c>
c0010656:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001065a:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c001065d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010661:	89 10                	mov    DWORD PTR [eax],edx
c0010663:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010667:	8b 50 7c             	mov    edx,DWORD PTR [eax+0x7c]
c001066a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001066e:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c0010671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010675:	c7 40 7c 00 00 00 00 	mov    DWORD PTR [eax+0x7c],0x0
c001067c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010680:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c0010683:	83 c0 01             	add    eax,0x1
c0010686:	88 c2                	mov    dl,al
c0010688:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001068c:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c001068f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010693:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001069a:	83 ec 0c             	sub    esp,0xc
c001069d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00106a1:	e8 7e f9 ff ff       	call   c0010024 <tcp_output>
c00106a6:	83 c4 10             	add    esp,0x10
c00106a9:	eb 05                	jmp    c00106b0 <tcp_rexmit_rto+0x8c>
c00106ab:	90                   	nop
c00106ac:	90                   	nop
c00106ad:	8d 76 00             	lea    esi,[esi+0x0]
c00106b0:	83 c4 1c             	add    esp,0x1c
c00106b3:	c3                   	ret    

c00106b4 <tcp_rexmit>:
c00106b4:	53                   	push   ebx
c00106b5:	83 ec 18             	sub    esp,0x18
c00106b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106bc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00106bf:	85 c0                	test   eax,eax
c00106c1:	0f 84 a9 00 00 00    	je     c0010770 <tcp_rexmit+0xbc>
c00106c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106cb:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00106ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00106d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00106d6:	8b 10                	mov    edx,DWORD PTR [eax]
c00106d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106dc:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c00106df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106e3:	83 c0 78             	add    eax,0x78
c00106e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106ea:	eb 0c                	jmp    c00106f8 <tcp_rexmit+0x44>
c00106ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00106f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106f6:	66 90                	xchg   ax,ax
c00106f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00106fe:	85 c0                	test   eax,eax
c0010700:	74 36                	je     c0010738 <tcp_rexmit+0x84>
c0010702:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010706:	8b 00                	mov    eax,DWORD PTR [eax]
c0010708:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001070b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001070e:	83 ec 0c             	sub    esp,0xc
c0010711:	50                   	push   eax
c0010712:	e8 f5 04 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010717:	83 c4 10             	add    esp,0x10
c001071a:	89 c3                	mov    ebx,eax
c001071c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010720:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010723:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010726:	83 ec 0c             	sub    esp,0xc
c0010729:	50                   	push   eax
c001072a:	e8 dd 04 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001072f:	83 c4 10             	add    esp,0x10
c0010732:	29 c3                	sub    ebx,eax
c0010734:	89 d8                	mov    eax,ebx
c0010736:	78 b4                	js     c00106ec <tcp_rexmit+0x38>
c0010738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001073c:	8b 10                	mov    edx,DWORD PTR [eax]
c001073e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010742:	89 10                	mov    DWORD PTR [eax],edx
c0010744:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010748:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001074c:	89 10                	mov    DWORD PTR [eax],edx
c001074e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010752:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c0010755:	83 c0 01             	add    eax,0x1
c0010758:	88 c2                	mov    dl,al
c001075a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001075e:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c0010761:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010765:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001076c:	eb 06                	jmp    c0010774 <tcp_rexmit+0xc0>
c001076e:	66 90                	xchg   ax,ax
c0010770:	90                   	nop
c0010771:	8d 76 00             	lea    esi,[esi+0x0]
c0010774:	83 c4 18             	add    esp,0x18
c0010777:	5b                   	pop    ebx
c0010778:	c3                   	ret    
c0010779:	8d 76 00             	lea    esi,[esi+0x0]

c001077c <tcp_rexmit_fast>:
c001077c:	83 ec 0c             	sub    esp,0xc
c001077f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010783:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010786:	85 c0                	test   eax,eax
c0010788:	0f 84 ca 00 00 00    	je     c0010858 <tcp_rexmit_fast+0xdc>
c001078e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010792:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010795:	0f b6 c0             	movzx  eax,al
c0010798:	83 e0 04             	and    eax,0x4
c001079b:	0f 85 b7 00 00 00    	jne    c0010858 <tcp_rexmit_fast+0xdc>
c00107a1:	83 ec 0c             	sub    esp,0xc
c00107a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107a8:	e8 07 ff ff ff       	call   c00106b4 <tcp_rexmit>
c00107ad:	83 c4 10             	add    esp,0x10
c00107b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107b4:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c00107b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107bc:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c00107bf:	0f b7 d2             	movzx  edx,dx
c00107c2:	0f b7 c0             	movzx  eax,ax
c00107c5:	39 c2                	cmp    edx,eax
c00107c7:	76 17                	jbe    c00107e0 <tcp_rexmit_fast+0x64>
c00107c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107cd:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c00107d0:	0f b7 c0             	movzx  eax,ax
c00107d3:	d1 e8                	shr    eax,1
c00107d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107d9:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c00107dd:	eb 19                	jmp    c00107f8 <tcp_rexmit_fast+0x7c>
c00107df:	90                   	nop
c00107e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107e4:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c00107e8:	0f b7 c0             	movzx  eax,ax
c00107eb:	d1 e8                	shr    eax,1
c00107ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107f1:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c00107f5:	8d 76 00             	lea    esi,[esi+0x0]
c00107f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107fc:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c00107ff:	0f b7 d0             	movzx  edx,ax
c0010802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010806:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010809:	0f b7 c0             	movzx  eax,ax
c001080c:	01 c0                	add    eax,eax
c001080e:	39 c2                	cmp    edx,eax
c0010810:	7d 12                	jge    c0010824 <tcp_rexmit_fast+0xa8>
c0010812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010816:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010819:	d1 e0                	shl    eax,1
c001081b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001081f:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c0010823:	90                   	nop
c0010824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010828:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c001082b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010832:	89 c1                	mov    ecx,eax
c0010834:	d1 e1                	shl    ecx,1
c0010836:	01 c8                	add    eax,ecx
c0010838:	01 d0                	add    eax,edx
c001083a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001083e:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c0010842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010846:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010849:	83 c8 04             	or     eax,0x4
c001084c:	88 c2                	mov    dl,al
c001084e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010852:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0010855:	8d 76 00             	lea    esi,[esi+0x0]
c0010858:	90                   	nop
c0010859:	83 c4 0c             	add    esp,0xc
c001085c:	c3                   	ret    
c001085d:	8d 76 00             	lea    esi,[esi+0x0]

c0010860 <tcp_keepalive>:
c0010860:	83 ec 1c             	sub    esp,0x1c
c0010863:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010867:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c001086a:	83 e8 01             	sub    eax,0x1
c001086d:	83 ec 0c             	sub    esp,0xc
c0010870:	50                   	push   eax
c0010871:	e8 96 03 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010876:	83 c4 10             	add    esp,0x10
c0010879:	50                   	push   eax
c001087a:	6a 00                	push   0x0
c001087c:	6a 00                	push   0x0
c001087e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010882:	e8 f1 e2 ff ff       	call   c000eb78 <tcp_output_alloc_header>
c0010887:	83 c4 10             	add    esp,0x10
c001088a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001088e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010893:	0f 84 87 00 00 00    	je     c0010920 <tcp_keepalive+0xc0>
c0010899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001089d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00108a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00108a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00108a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00108ab:	0f b7 d0             	movzx  edx,ax
c00108ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108b2:	8d 48 04             	lea    ecx,[eax+0x4]
c00108b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108b9:	83 ec 0c             	sub    esp,0xc
c00108bc:	52                   	push   edx
c00108bd:	6a 06                	push   0x6
c00108bf:	51                   	push   ecx
c00108c0:	50                   	push   eax
c00108c1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00108c5:	e8 46 2a 00 00       	call   c0013310 <inet_chksum_pseudo>
c00108ca:	83 c4 20             	add    esp,0x20
c00108cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108d1:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c00108d5:	66 a1 b0 77 03 c0    	mov    ax,ds:0xc00377b0
c00108db:	83 c0 01             	add    eax,0x1
c00108de:	66 a3 b0 77 03 c0    	mov    ds:0xc00377b0,ax
c00108e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108e8:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c00108eb:	0f b6 d0             	movzx  edx,al
c00108ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108f2:	8d 48 04             	lea    ecx,[eax+0x4]
c00108f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108f9:	83 ec 08             	sub    esp,0x8
c00108fc:	6a 06                	push   0x6
c00108fe:	6a 00                	push   0x0
c0010900:	52                   	push   edx
c0010901:	51                   	push   ecx
c0010902:	50                   	push   eax
c0010903:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010907:	e8 38 36 00 00       	call   c0013f44 <ip_output>
c001090c:	83 c4 20             	add    esp,0x20
c001090f:	83 ec 0c             	sub    esp,0xc
c0010912:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010916:	e8 d9 7b ff ff       	call   c00084f4 <pbuf_free>
c001091b:	83 c4 10             	add    esp,0x10
c001091e:	eb 04                	jmp    c0010924 <tcp_keepalive+0xc4>
c0010920:	90                   	nop
c0010921:	8d 76 00             	lea    esi,[esi+0x0]
c0010924:	83 c4 1c             	add    esp,0x1c
c0010927:	c3                   	ret    

c0010928 <tcp_zero_window_probe>:
c0010928:	53                   	push   ebx
c0010929:	83 ec 28             	sub    esp,0x28
c001092c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010930:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010933:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010937:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001093c:	75 0e                	jne    c001094c <tcp_zero_window_probe+0x24>
c001093e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010942:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010945:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010949:	8d 76 00             	lea    esi,[esi+0x0]
c001094c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010951:	0f 84 95 01 00 00    	je     c0010aec <tcp_zero_window_probe+0x1c4>
c0010957:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001095b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001095e:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010962:	0f b7 c0             	movzx  eax,ax
c0010965:	83 ec 0c             	sub    esp,0xc
c0010968:	50                   	push   eax
c0010969:	e8 7a 02 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001096e:	83 c4 10             	add    esp,0x10
c0010971:	0f b7 c0             	movzx  eax,ax
c0010974:	83 e0 01             	and    eax,0x1
c0010977:	74 17                	je     c0010990 <tcp_zero_window_probe+0x68>
c0010979:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001097d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010980:	0f b7 c0             	movzx  eax,ax
c0010983:	85 c0                	test   eax,eax
c0010985:	75 09                	jne    c0010990 <tcp_zero_window_probe+0x68>
c0010987:	b8 01 00 00 00       	mov    eax,0x1
c001098c:	eb 0a                	jmp    c0010998 <tcp_zero_window_probe+0x70>
c001098e:	66 90                	xchg   ax,ax
c0010990:	b8 00 00 00 00       	mov    eax,0x0
c0010995:	8d 76 00             	lea    esi,[esi+0x0]
c0010998:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001099c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00109a1:	85 c0                	test   eax,eax
c00109a3:	0f 94 c0             	sete   al
c00109a6:	0f b6 c0             	movzx  eax,al
c00109a9:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00109ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00109b2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00109b5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00109b8:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00109bd:	52                   	push   edx
c00109be:	50                   	push   eax
c00109bf:	6a 00                	push   0x0
c00109c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00109c5:	e8 ae e1 ff ff       	call   c000eb78 <tcp_output_alloc_header>
c00109ca:	83 c4 10             	add    esp,0x10
c00109cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00109d1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00109d6:	0f 84 14 01 00 00    	je     c0010af0 <tcp_zero_window_probe+0x1c8>
c00109dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00109e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00109e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00109e7:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00109ec:	85 c0                	test   eax,eax
c00109ee:	74 28                	je     c0010a18 <tcp_zero_window_probe+0xf0>
c00109f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109f4:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00109f8:	80 e4 c0             	and    ah,0xc0
c00109fb:	89 c3                	mov    ebx,eax
c00109fd:	83 ec 0c             	sub    esp,0xc
c0010a00:	6a 11                	push   0x11
c0010a02:	e8 e1 01 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010a07:	83 c4 10             	add    esp,0x10
c0010a0a:	09 d8                	or     eax,ebx
c0010a0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010a10:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c0010a14:	eb 5a                	jmp    c0010a70 <tcp_zero_window_probe+0x148>
c0010a16:	66 90                	xchg   ax,ax
c0010a18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010a26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a2d:	83 c0 14             	add    eax,0x14
c0010a30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a38:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010a3c:	0f b7 c0             	movzx  eax,ax
c0010a3f:	83 ec 0c             	sub    esp,0xc
c0010a42:	50                   	push   eax
c0010a43:	e8 a0 01 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010a48:	83 c4 10             	add    esp,0x10
c0010a4b:	0f b7 c0             	movzx  eax,ax
c0010a4e:	c1 e8 0c             	shr    eax,0xc
c0010a51:	c1 e0 02             	shl    eax,0x2
c0010a54:	0f b7 d0             	movzx  edx,ax
c0010a57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a5e:	52                   	push   edx
c0010a5f:	6a 01                	push   0x1
c0010a61:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010a65:	50                   	push   eax
c0010a66:	e8 29 87 ff ff       	call   c0009194 <pbuf_copy_partial>
c0010a6b:	83 c4 10             	add    esp,0x10
c0010a6e:	66 90                	xchg   ax,ax
c0010a70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010a77:	0f b7 d0             	movzx  edx,ax
c0010a7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010a7e:	8d 48 04             	lea    ecx,[eax+0x4]
c0010a81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010a85:	83 ec 0c             	sub    esp,0xc
c0010a88:	52                   	push   edx
c0010a89:	6a 06                	push   0x6
c0010a8b:	51                   	push   ecx
c0010a8c:	50                   	push   eax
c0010a8d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010a91:	e8 7a 28 00 00       	call   c0013310 <inet_chksum_pseudo>
c0010a96:	83 c4 20             	add    esp,0x20
c0010a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010a9d:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c0010aa1:	66 a1 b0 77 03 c0    	mov    ax,ds:0xc00377b0
c0010aa7:	83 c0 01             	add    eax,0x1
c0010aaa:	66 a3 b0 77 03 c0    	mov    ds:0xc00377b0,ax
c0010ab0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010ab4:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0010ab7:	0f b6 d0             	movzx  edx,al
c0010aba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010abe:	8d 48 04             	lea    ecx,[eax+0x4]
c0010ac1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010ac5:	83 ec 08             	sub    esp,0x8
c0010ac8:	6a 06                	push   0x6
c0010aca:	6a 00                	push   0x0
c0010acc:	52                   	push   edx
c0010acd:	51                   	push   ecx
c0010ace:	50                   	push   eax
c0010acf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010ad3:	e8 6c 34 00 00       	call   c0013f44 <ip_output>
c0010ad8:	83 c4 20             	add    esp,0x20
c0010adb:	83 ec 0c             	sub    esp,0xc
c0010ade:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ae2:	e8 0d 7a ff ff       	call   c00084f4 <pbuf_free>
c0010ae7:	83 c4 10             	add    esp,0x10
c0010aea:	eb 08                	jmp    c0010af4 <tcp_zero_window_probe+0x1cc>
c0010aec:	90                   	nop
c0010aed:	eb 05                	jmp    c0010af4 <tcp_zero_window_probe+0x1cc>
c0010aef:	90                   	nop
c0010af0:	90                   	nop
c0010af1:	8d 76 00             	lea    esi,[esi+0x0]
c0010af4:	83 c4 28             	add    esp,0x28
c0010af7:	5b                   	pop    ebx
c0010af8:	c3                   	ret    
c0010af9:	66 90                	xchg   ax,ax
c0010afb:	90                   	nop

c0010afc <sys_timeout>:
c0010afc:	83 ec 1c             	sub    esp,0x1c
c0010aff:	83 ec 0c             	sub    esp,0xc
c0010b02:	6a 0b                	push   0xb
c0010b04:	e8 03 70 ff ff       	call   c0007b0c <memp_malloc>
c0010b09:	83 c4 10             	add    esp,0x10
c0010b0c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010b10:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010b15:	75 25                	jne    c0010b3c <sys_timeout+0x40>
c0010b17:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010b1c:	0f 85 3e 01 00 00    	jne    c0010c60 <sys_timeout+0x164>
c0010b22:	83 ec 08             	sub    esp,0x8
c0010b25:	68 ac 10 03 c0       	push   0xc00310ac
c0010b2a:	68 86 01 03 c0       	push   0xc0030186
c0010b2f:	e8 a4 f3 00 00       	call   c001fed8 <CPrintf>
c0010b34:	83 c4 10             	add    esp,0x10
c0010b37:	e9 24 01 00 00       	jmp    c0010c60 <sys_timeout+0x164>
c0010b3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b40:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b4a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010b4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010b51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b55:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010b59:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010b5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b60:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010b64:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b67:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010b6c:	85 c0                	test   eax,eax
c0010b6e:	75 10                	jne    c0010b80 <sys_timeout+0x84>
c0010b70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b74:	a3 d4 b8 03 c0       	mov    ds:0xc003b8d4,eax
c0010b79:	e9 e6 00 00 00       	jmp    c0010c64 <sys_timeout+0x168>
c0010b7e:	66 90                	xchg   ax,ax
c0010b80:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010b85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b88:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010b8c:	73 2e                	jae    c0010bbc <sys_timeout+0xc0>
c0010b8e:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010b93:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010b96:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010b9b:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0010b9f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010ba2:	8b 15 d4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8d4
c0010ba8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bac:	89 10                	mov    DWORD PTR [eax],edx
c0010bae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bb2:	a3 d4 b8 03 c0       	mov    ds:0xc003b8d4,eax
c0010bb7:	e9 a8 00 00 00       	jmp    c0010c64 <sys_timeout+0x168>
c0010bbc:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010bc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010bc5:	e9 86 00 00 00       	jmp    c0010c50 <sys_timeout+0x154>
c0010bca:	66 90                	xchg   ax,ax
c0010bcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bd0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010bd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bda:	29 c2                	sub    edx,eax
c0010bdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010be0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010be3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010be7:	8b 00                	mov    eax,DWORD PTR [eax]
c0010be9:	85 c0                	test   eax,eax
c0010beb:	74 17                	je     c0010c04 <sys_timeout+0x108>
c0010bed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bf1:	8b 00                	mov    eax,DWORD PTR [eax]
c0010bf3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010bf6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bfa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bfd:	39 c2                	cmp    edx,eax
c0010bff:	76 43                	jbe    c0010c44 <sys_timeout+0x148>
c0010c01:	8d 76 00             	lea    esi,[esi+0x0]
c0010c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c08:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c0a:	85 c0                	test   eax,eax
c0010c0c:	74 1e                	je     c0010c2c <sys_timeout+0x130>
c0010c0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c12:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c14:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010c17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c1b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010c1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c22:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c24:	29 d1                	sub    ecx,edx
c0010c26:	89 ca                	mov    edx,ecx
c0010c28:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c2b:	90                   	nop
c0010c2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c30:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c36:	89 10                	mov    DWORD PTR [eax],edx
c0010c38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c40:	89 10                	mov    DWORD PTR [eax],edx
c0010c42:	eb 20                	jmp    c0010c64 <sys_timeout+0x168>
c0010c44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c48:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c4e:	66 90                	xchg   ax,ax
c0010c50:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010c55:	0f 85 71 ff ff ff    	jne    c0010bcc <sys_timeout+0xd0>
c0010c5b:	eb 07                	jmp    c0010c64 <sys_timeout+0x168>
c0010c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0010c60:	90                   	nop
c0010c61:	8d 76 00             	lea    esi,[esi+0x0]
c0010c64:	83 c4 1c             	add    esp,0x1c
c0010c67:	c3                   	ret    

c0010c68 <tcpip_tcp_timer>:
c0010c68:	83 ec 0c             	sub    esp,0xc
c0010c6b:	e8 34 a5 ff ff       	call   c000b1a4 <tcp_tmr>
c0010c70:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c0010c75:	85 c0                	test   eax,eax
c0010c77:	75 0b                	jne    c0010c84 <tcpip_tcp_timer+0x1c>
c0010c79:	a1 84 78 03 c0       	mov    eax,ds:0xc0037884
c0010c7e:	85 c0                	test   eax,eax
c0010c80:	74 1e                	je     c0010ca0 <tcpip_tcp_timer+0x38>
c0010c82:	66 90                	xchg   ax,ax
c0010c84:	83 ec 04             	sub    esp,0x4
c0010c87:	6a 00                	push   0x0
c0010c89:	68 68 0c 01 c0       	push   0xc0010c68
c0010c8e:	68 fa 00 00 00       	push   0xfa
c0010c93:	e8 64 fe ff ff       	call   c0010afc <sys_timeout>
c0010c98:	83 c4 10             	add    esp,0x10
c0010c9b:	eb 0f                	jmp    c0010cac <tcpip_tcp_timer+0x44>
c0010c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0010ca0:	c7 05 d0 b8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b8d0,0x0
c0010caa:	66 90                	xchg   ax,ax
c0010cac:	90                   	nop
c0010cad:	83 c4 0c             	add    esp,0xc
c0010cb0:	c3                   	ret    
c0010cb1:	8d 76 00             	lea    esi,[esi+0x0]

c0010cb4 <tcp_timer_needed>:
c0010cb4:	83 ec 0c             	sub    esp,0xc
c0010cb7:	a1 d0 b8 03 c0       	mov    eax,ds:0xc003b8d0
c0010cbc:	85 c0                	test   eax,eax
c0010cbe:	75 38                	jne    c0010cf8 <tcp_timer_needed+0x44>
c0010cc0:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c0010cc5:	85 c0                	test   eax,eax
c0010cc7:	75 0b                	jne    c0010cd4 <tcp_timer_needed+0x20>
c0010cc9:	a1 84 78 03 c0       	mov    eax,ds:0xc0037884
c0010cce:	85 c0                	test   eax,eax
c0010cd0:	74 26                	je     c0010cf8 <tcp_timer_needed+0x44>
c0010cd2:	66 90                	xchg   ax,ax
c0010cd4:	c7 05 d0 b8 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003b8d0,0x1
c0010cde:	83 ec 04             	sub    esp,0x4
c0010ce1:	6a 00                	push   0x0
c0010ce3:	68 68 0c 01 c0       	push   0xc0010c68
c0010ce8:	68 fa 00 00 00       	push   0xfa
c0010ced:	e8 0a fe ff ff       	call   c0010afc <sys_timeout>
c0010cf2:	83 c4 10             	add    esp,0x10
c0010cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0010cf8:	90                   	nop
c0010cf9:	83 c4 0c             	add    esp,0xc
c0010cfc:	c3                   	ret    
c0010cfd:	8d 76 00             	lea    esi,[esi+0x0]

c0010d00 <ip_reass_timer>:
c0010d00:	83 ec 0c             	sub    esp,0xc
c0010d03:	e8 f0 3a 00 00       	call   c00147f8 <ip_reass_tmr>
c0010d08:	83 ec 04             	sub    esp,0x4
c0010d0b:	6a 00                	push   0x0
c0010d0d:	68 00 0d 01 c0       	push   0xc0010d00
c0010d12:	68 e8 03 00 00       	push   0x3e8
c0010d17:	e8 e0 fd ff ff       	call   c0010afc <sys_timeout>
c0010d1c:	83 c4 10             	add    esp,0x10
c0010d1f:	90                   	nop
c0010d20:	83 c4 0c             	add    esp,0xc
c0010d23:	c3                   	ret    

c0010d24 <arp_timer>:
c0010d24:	83 ec 0c             	sub    esp,0xc
c0010d27:	e8 60 0d 00 00       	call   c0011a8c <etharp_tmr>
c0010d2c:	83 ec 04             	sub    esp,0x4
c0010d2f:	6a 00                	push   0x0
c0010d31:	68 24 0d 01 c0       	push   0xc0010d24
c0010d36:	68 88 13 00 00       	push   0x1388
c0010d3b:	e8 bc fd ff ff       	call   c0010afc <sys_timeout>
c0010d40:	83 c4 10             	add    esp,0x10
c0010d43:	90                   	nop
c0010d44:	83 c4 0c             	add    esp,0xc
c0010d47:	c3                   	ret    

c0010d48 <sys_timeouts_init>:
c0010d48:	83 ec 0c             	sub    esp,0xc
c0010d4b:	83 ec 04             	sub    esp,0x4
c0010d4e:	6a 00                	push   0x0
c0010d50:	68 00 0d 01 c0       	push   0xc0010d00
c0010d55:	68 e8 03 00 00       	push   0x3e8
c0010d5a:	e8 9d fd ff ff       	call   c0010afc <sys_timeout>
c0010d5f:	83 c4 10             	add    esp,0x10
c0010d62:	83 ec 04             	sub    esp,0x4
c0010d65:	6a 00                	push   0x0
c0010d67:	68 24 0d 01 c0       	push   0xc0010d24
c0010d6c:	68 88 13 00 00       	push   0x1388
c0010d71:	e8 86 fd ff ff       	call   c0010afc <sys_timeout>
c0010d76:	83 c4 10             	add    esp,0x10
c0010d79:	90                   	nop
c0010d7a:	83 c4 0c             	add    esp,0xc
c0010d7d:	c3                   	ret    
c0010d7e:	66 90                	xchg   ax,ax

c0010d80 <sys_untimeout>:
c0010d80:	83 ec 1c             	sub    esp,0x1c
c0010d83:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010d88:	85 c0                	test   eax,eax
c0010d8a:	0f 84 b4 00 00 00    	je     c0010e44 <sys_untimeout+0xc4>
c0010d90:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010d95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d99:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010da1:	e9 8e 00 00 00       	jmp    c0010e34 <sys_untimeout+0xb4>
c0010da6:	66 90                	xchg   ax,ax
c0010da8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010dac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010daf:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010db3:	75 6b                	jne    c0010e20 <sys_untimeout+0xa0>
c0010db5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010db9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010dbc:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0010dc0:	75 5e                	jne    c0010e20 <sys_untimeout+0xa0>
c0010dc2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010dc7:	75 0f                	jne    c0010dd8 <sys_untimeout+0x58>
c0010dc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010dcd:	8b 00                	mov    eax,DWORD PTR [eax]
c0010dcf:	a3 d4 b8 03 c0       	mov    ds:0xc003b8d4,eax
c0010dd4:	eb 0e                	jmp    c0010de4 <sys_untimeout+0x64>
c0010dd6:	66 90                	xchg   ax,ax
c0010dd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ddc:	8b 10                	mov    edx,DWORD PTR [eax]
c0010dde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010de2:	89 10                	mov    DWORD PTR [eax],edx
c0010de4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010de8:	8b 00                	mov    eax,DWORD PTR [eax]
c0010dea:	85 c0                	test   eax,eax
c0010dec:	74 1e                	je     c0010e0c <sys_untimeout+0x8c>
c0010dee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010df2:	8b 00                	mov    eax,DWORD PTR [eax]
c0010df4:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010df7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010dfb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010dfe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e02:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e04:	01 ca                	add    edx,ecx
c0010e06:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e09:	8d 76 00             	lea    esi,[esi+0x0]
c0010e0c:	83 ec 08             	sub    esp,0x8
c0010e0f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010e13:	6a 0b                	push   0xb
c0010e15:	e8 1e 6e ff ff       	call   c0007c38 <memp_free>
c0010e1a:	83 c4 10             	add    esp,0x10
c0010e1d:	eb 29                	jmp    c0010e48 <sys_untimeout+0xc8>
c0010e1f:	90                   	nop
c0010e20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e32:	66 90                	xchg   ax,ax
c0010e34:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010e39:	0f 85 69 ff ff ff    	jne    c0010da8 <sys_untimeout+0x28>
c0010e3f:	90                   	nop
c0010e40:	eb 06                	jmp    c0010e48 <sys_untimeout+0xc8>
c0010e42:	66 90                	xchg   ax,ax
c0010e44:	90                   	nop
c0010e45:	8d 76 00             	lea    esi,[esi+0x0]
c0010e48:	83 c4 1c             	add    esp,0x1c
c0010e4b:	c3                   	ret    

c0010e4c <sys_timeouts_mbox_fetch>:
c0010e4c:	83 ec 1c             	sub    esp,0x1c
c0010e4f:	90                   	nop
c0010e50:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010e55:	85 c0                	test   eax,eax
c0010e57:	75 1f                	jne    c0010e78 <sys_timeouts_mbox_fetch+0x2c>
c0010e59:	83 ec 04             	sub    esp,0x4
c0010e5c:	6a 00                	push   0x0
c0010e5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e66:	e8 c1 fe fe ff       	call   c0000d2c <sys_arch_mbox_fetch>
c0010e6b:	83 c4 10             	add    esp,0x10
c0010e6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e72:	e9 cd 00 00 00       	jmp    c0010f44 <sys_timeouts_mbox_fetch+0xf8>
c0010e77:	90                   	nop
c0010e78:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010e7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e80:	85 c0                	test   eax,eax
c0010e82:	74 24                	je     c0010ea8 <sys_timeouts_mbox_fetch+0x5c>
c0010e84:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010e89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e8c:	83 ec 04             	sub    esp,0x4
c0010e8f:	50                   	push   eax
c0010e90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e94:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e98:	e8 8f fe fe ff       	call   c0000d2c <sys_arch_mbox_fetch>
c0010e9d:	83 c4 10             	add    esp,0x10
c0010ea0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ea4:	eb 0a                	jmp    c0010eb0 <sys_timeouts_mbox_fetch+0x64>
c0010ea6:	66 90                	xchg   ax,ax
c0010ea8:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0010eb0:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0010eb5:	75 5d                	jne    c0010f14 <sys_timeouts_mbox_fetch+0xc8>
c0010eb7:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010ebc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ec4:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ec6:	a3 d4 b8 03 c0       	mov    ds:0xc003b8d4,eax
c0010ecb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ecf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010ed2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010ed6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010eda:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010edd:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ee0:	83 ec 08             	sub    esp,0x8
c0010ee3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ee7:	6a 0b                	push   0xb
c0010ee9:	e8 4a 6d ff ff       	call   c0007c38 <memp_free>
c0010eee:	83 c4 10             	add    esp,0x10
c0010ef1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0010ef6:	0f 84 54 ff ff ff    	je     c0010e50 <sys_timeouts_mbox_fetch+0x4>
c0010efc:	83 ec 0c             	sub    esp,0xc
c0010eff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010f03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010f07:	ff d0                	call   eax
c0010f09:	83 c4 10             	add    esp,0x10
c0010f0c:	e9 3f ff ff ff       	jmp    c0010e50 <sys_timeouts_mbox_fetch+0x4>
c0010f11:	8d 76 00             	lea    esi,[esi+0x0]
c0010f14:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010f19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f1c:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0010f20:	73 16                	jae    c0010f38 <sys_timeouts_mbox_fetch+0xec>
c0010f22:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010f27:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010f2a:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010f2f:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010f33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f36:	eb 0c                	jmp    c0010f44 <sys_timeouts_mbox_fetch+0xf8>
c0010f38:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010f3d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010f44:	90                   	nop
c0010f45:	83 c4 1c             	add    esp,0x1c
c0010f48:	c3                   	ret    
c0010f49:	66 90                	xchg   ax,ax
c0010f4b:	90                   	nop

c0010f4c <udp_input>:
c0010f4c:	53                   	push   ebx
c0010f4d:	83 ec 28             	sub    esp,0x28
c0010f50:	66 a1 9a 77 03 c0    	mov    ax,ds:0xc003779a
c0010f56:	83 c0 01             	add    eax,0x1
c0010f59:	66 a3 9a 77 03 c0    	mov    ds:0xc003779a,ax
c0010f5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010f63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010f6e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010f71:	0f b7 d8             	movzx  ebx,ax
c0010f74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f78:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010f7b:	0f b7 c0             	movzx  eax,ax
c0010f7e:	83 ec 0c             	sub    esp,0xc
c0010f81:	50                   	push   eax
c0010f82:	e8 61 fc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010f87:	83 c4 10             	add    esp,0x10
c0010f8a:	0f b7 c0             	movzx  eax,ax
c0010f8d:	c1 e8 08             	shr    eax,0x8
c0010f90:	0f b7 c0             	movzx  eax,ax
c0010f93:	83 e0 0f             	and    eax,0xf
c0010f96:	83 c0 02             	add    eax,0x2
c0010f99:	c1 e0 02             	shl    eax,0x2
c0010f9c:	39 c3                	cmp    ebx,eax
c0010f9e:	7c 3c                	jl     c0010fdc <udp_input+0x90>
c0010fa0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fa4:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010fa7:	0f b7 c0             	movzx  eax,ax
c0010faa:	83 ec 0c             	sub    esp,0xc
c0010fad:	50                   	push   eax
c0010fae:	e8 35 fc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010fb3:	83 c4 10             	add    esp,0x10
c0010fb6:	0f b7 c0             	movzx  eax,ax
c0010fb9:	c1 e8 08             	shr    eax,0x8
c0010fbc:	83 e0 0f             	and    eax,0xf
c0010fbf:	c1 e0 02             	shl    eax,0x2
c0010fc2:	f7 d8                	neg    eax
c0010fc4:	98                   	cwde   
c0010fc5:	83 ec 08             	sub    esp,0x8
c0010fc8:	50                   	push   eax
c0010fc9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010fcd:	e8 86 73 ff ff       	call   c0008358 <pbuf_header>
c0010fd2:	83 c4 10             	add    esp,0x10
c0010fd5:	0f b6 c0             	movzx  eax,al
c0010fd8:	85 c0                	test   eax,eax
c0010fda:	74 34                	je     c0011010 <udp_input+0xc4>
c0010fdc:	66 a1 a2 77 03 c0    	mov    ax,ds:0xc00377a2
c0010fe2:	83 c0 01             	add    eax,0x1
c0010fe5:	66 a3 a2 77 03 c0    	mov    ds:0xc00377a2,ax
c0010feb:	66 a1 9e 77 03 c0    	mov    ax,ds:0xc003779e
c0010ff1:	83 c0 01             	add    eax,0x1
c0010ff4:	66 a3 9e 77 03 c0    	mov    ds:0xc003779e,ax
c0010ffa:	83 ec 0c             	sub    esp,0xc
c0010ffd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011001:	e8 ee 74 ff ff       	call   c00084f4 <pbuf_free>
c0011006:	83 c4 10             	add    esp,0x10
c0011009:	e9 aa 03 00 00       	jmp    c00113b8 <udp_input+0x46c>
c001100e:	66 90                	xchg   ax,ax
c0011010:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011014:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011017:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001101b:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c0011020:	83 ec 08             	sub    esp,0x8
c0011023:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011027:	50                   	push   eax
c0011028:	e8 bb 2f 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c001102d:	83 c4 10             	add    esp,0x10
c0011030:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0011034:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011038:	66 8b 00             	mov    ax,WORD PTR [eax]
c001103b:	0f b7 c0             	movzx  eax,ax
c001103e:	83 ec 0c             	sub    esp,0xc
c0011041:	50                   	push   eax
c0011042:	e8 a1 fb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011047:	83 c4 10             	add    esp,0x10
c001104a:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c001104f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011053:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0011057:	0f b7 c0             	movzx  eax,ax
c001105a:	83 ec 0c             	sub    esp,0xc
c001105d:	50                   	push   eax
c001105e:	e8 85 fb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011063:	83 c4 10             	add    esp,0x10
c0011066:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c001106b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011073:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0011078:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011080:	a1 8c 78 03 c0       	mov    eax,ds:0xc003788c
c0011085:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011089:	e9 0a 01 00 00       	jmp    c0011198 <udp_input+0x24c>
c001108e:	66 90                	xchg   ax,ax
c0011090:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0011095:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011099:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c001109d:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c00110a2:	0f b7 c0             	movzx  eax,ax
c00110a5:	39 c2                	cmp    edx,eax
c00110a7:	75 57                	jne    c0011100 <udp_input+0x1b4>
c00110a9:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c00110ae:	85 c0                	test   eax,eax
c00110b0:	75 12                	jne    c00110c4 <udp_input+0x178>
c00110b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110b6:	85 c0                	test   eax,eax
c00110b8:	74 22                	je     c00110dc <udp_input+0x190>
c00110ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110be:	8b 00                	mov    eax,DWORD PTR [eax]
c00110c0:	85 c0                	test   eax,eax
c00110c2:	74 18                	je     c00110dc <udp_input+0x190>
c00110c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00110ca:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c00110cf:	39 c2                	cmp    edx,eax
c00110d1:	74 09                	je     c00110dc <udp_input+0x190>
c00110d3:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c00110d8:	85 c0                	test   eax,eax
c00110da:	74 24                	je     c0011100 <udp_input+0x1b4>
c00110dc:	c6 44 24 13 01       	mov    BYTE PTR [esp+0x13],0x1
c00110e1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00110e6:	75 18                	jne    c0011100 <udp_input+0x1b4>
c00110e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110ec:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00110ef:	0f b6 c0             	movzx  eax,al
c00110f2:	83 e0 04             	and    eax,0x4
c00110f5:	75 09                	jne    c0011100 <udp_input+0x1b4>
c00110f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110fb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00110ff:	90                   	nop
c0011100:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0011105:	85 c0                	test   eax,eax
c0011107:	74 7b                	je     c0011184 <udp_input+0x238>
c0011109:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001110d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011110:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0011115:	0f b7 c0             	movzx  eax,ax
c0011118:	39 c2                	cmp    edx,eax
c001111a:	75 68                	jne    c0011184 <udp_input+0x238>
c001111c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011120:	83 c0 04             	add    eax,0x4
c0011123:	74 1b                	je     c0011140 <udp_input+0x1f4>
c0011125:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011129:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001112c:	85 c0                	test   eax,eax
c001112e:	74 10                	je     c0011140 <udp_input+0x1f4>
c0011130:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011134:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011137:	a1 90 78 03 c0       	mov    eax,ds:0xc0037890
c001113c:	39 c2                	cmp    edx,eax
c001113e:	75 44                	jne    c0011184 <udp_input+0x238>
c0011140:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011145:	74 29                	je     c0011170 <udp_input+0x224>
c0011147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001114b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001114e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011152:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011155:	8b 15 8c 78 03 c0    	mov    edx,DWORD PTR ds:0xc003788c
c001115b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001115f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011162:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011166:	a3 8c 78 03 c0       	mov    ds:0xc003788c,eax
c001116b:	eb 37                	jmp    c00111a4 <udp_input+0x258>
c001116d:	8d 76 00             	lea    esi,[esi+0x0]
c0011170:	66 a1 ae 77 03 c0    	mov    ax,ds:0xc00377ae
c0011176:	83 c0 01             	add    eax,0x1
c0011179:	66 a3 ae 77 03 c0    	mov    ds:0xc00377ae,ax
c001117f:	eb 23                	jmp    c00111a4 <udp_input+0x258>
c0011181:	8d 76 00             	lea    esi,[esi+0x0]
c0011184:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011188:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001118c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011190:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011193:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011197:	90                   	nop
c0011198:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001119d:	0f 85 ed fe ff ff    	jne    c0011090 <udp_input+0x144>
c00111a3:	90                   	nop
c00111a4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00111a9:	75 09                	jne    c00111b4 <udp_input+0x268>
c00111ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00111af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00111b3:	90                   	nop
c00111b4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00111b9:	75 15                	jne    c00111d0 <udp_input+0x284>
c00111bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00111bf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00111c2:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c00111c7:	39 c2                	cmp    edx,eax
c00111c9:	0f 85 d9 01 00 00    	jne    c00113a8 <udp_input+0x45c>
c00111cf:	90                   	nop
c00111d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111d4:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00111d8:	0f b7 c0             	movzx  eax,ax
c00111db:	85 c0                	test   eax,eax
c00111dd:	74 61                	je     c0011240 <udp_input+0x2f4>
c00111df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00111e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00111e6:	0f b7 c0             	movzx  eax,ax
c00111e9:	83 ec 0c             	sub    esp,0xc
c00111ec:	50                   	push   eax
c00111ed:	6a 11                	push   0x11
c00111ef:	68 98 78 03 c0       	push   0xc0037898
c00111f4:	68 90 78 03 c0       	push   0xc0037890
c00111f9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00111fd:	e8 0e 21 00 00       	call   c0013310 <inet_chksum_pseudo>
c0011202:	83 c4 20             	add    esp,0x20
c0011205:	0f b7 c0             	movzx  eax,ax
c0011208:	85 c0                	test   eax,eax
c001120a:	74 34                	je     c0011240 <udp_input+0x2f4>
c001120c:	66 a1 a0 77 03 c0    	mov    ax,ds:0xc00377a0
c0011212:	83 c0 01             	add    eax,0x1
c0011215:	66 a3 a0 77 03 c0    	mov    ds:0xc00377a0,ax
c001121b:	66 a1 9e 77 03 c0    	mov    ax,ds:0xc003779e
c0011221:	83 c0 01             	add    eax,0x1
c0011224:	66 a3 9e 77 03 c0    	mov    ds:0xc003779e,ax
c001122a:	83 ec 0c             	sub    esp,0xc
c001122d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011231:	e8 be 72 ff ff       	call   c00084f4 <pbuf_free>
c0011236:	83 c4 10             	add    esp,0x10
c0011239:	e9 7a 01 00 00       	jmp    c00113b8 <udp_input+0x46c>
c001123e:	66 90                	xchg   ax,ax
c0011240:	83 ec 08             	sub    esp,0x8
c0011243:	6a f8                	push   0xfffffff8
c0011245:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011249:	e8 0a 71 ff ff       	call   c0008358 <pbuf_header>
c001124e:	83 c4 10             	add    esp,0x10
c0011251:	0f b6 c0             	movzx  eax,al
c0011254:	85 c0                	test   eax,eax
c0011256:	74 38                	je     c0011290 <udp_input+0x344>
c0011258:	83 ec 08             	sub    esp,0x8
c001125b:	68 e9 10 03 c0       	push   0xc00310e9
c0011260:	68 86 01 03 c0       	push   0xc0030186
c0011265:	e8 6e ec 00 00       	call   c001fed8 <CPrintf>
c001126a:	83 c4 10             	add    esp,0x10
c001126d:	66 a1 9e 77 03 c0    	mov    ax,ds:0xc003779e
c0011273:	83 c0 01             	add    eax,0x1
c0011276:	66 a3 9e 77 03 c0    	mov    ds:0xc003779e,ax
c001127c:	83 ec 0c             	sub    esp,0xc
c001127f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011283:	e8 6c 72 ff ff       	call   c00084f4 <pbuf_free>
c0011288:	83 c4 10             	add    esp,0x10
c001128b:	e9 28 01 00 00       	jmp    c00113b8 <udp_input+0x46c>
c0011290:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011295:	74 51                	je     c00112e8 <udp_input+0x39c>
c0011297:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001129b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001129e:	85 c0                	test   eax,eax
c00112a0:	74 32                	je     c00112d4 <udp_input+0x388>
c00112a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112a6:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00112a9:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c00112ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00112b2:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00112b5:	83 ec 0c             	sub    esp,0xc
c00112b8:	51                   	push   ecx
c00112b9:	68 90 78 03 c0       	push   0xc0037890
c00112be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00112c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00112c6:	52                   	push   edx
c00112c7:	ff d0                	call   eax
c00112c9:	83 c4 20             	add    esp,0x20
c00112cc:	e9 e7 00 00 00       	jmp    c00113b8 <udp_input+0x46c>
c00112d1:	8d 76 00             	lea    esi,[esi+0x0]
c00112d4:	83 ec 0c             	sub    esp,0xc
c00112d7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00112db:	e8 14 72 ff ff       	call   c00084f4 <pbuf_free>
c00112e0:	83 c4 10             	add    esp,0x10
c00112e3:	e9 d0 00 00 00       	jmp    c00113b8 <udp_input+0x46c>
c00112e8:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c00112ed:	85 c0                	test   eax,eax
c00112ef:	0f 85 83 00 00 00    	jne    c0011378 <udp_input+0x42c>
c00112f5:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c00112fa:	25 f0 00 00 00       	and    eax,0xf0
c00112ff:	3d e0 00 00 00       	cmp    eax,0xe0
c0011304:	74 72                	je     c0011378 <udp_input+0x42c>
c0011306:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001130a:	66 8b 00             	mov    ax,WORD PTR [eax]
c001130d:	0f b7 c0             	movzx  eax,ax
c0011310:	83 ec 0c             	sub    esp,0xc
c0011313:	50                   	push   eax
c0011314:	e8 cf f8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011319:	83 c4 10             	add    esp,0x10
c001131c:	0f b7 c0             	movzx  eax,ax
c001131f:	c1 e8 08             	shr    eax,0x8
c0011322:	0f b7 c0             	movzx  eax,ax
c0011325:	83 e0 0f             	and    eax,0xf
c0011328:	83 c0 02             	add    eax,0x2
c001132b:	c1 e0 02             	shl    eax,0x2
c001132e:	98                   	cwde   
c001132f:	83 ec 08             	sub    esp,0x8
c0011332:	50                   	push   eax
c0011333:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011337:	e8 1c 70 ff ff       	call   c0008358 <pbuf_header>
c001133c:	83 c4 10             	add    esp,0x10
c001133f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011343:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011346:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001134a:	74 18                	je     c0011364 <udp_input+0x418>
c001134c:	83 ec 08             	sub    esp,0x8
c001134f:	68 fd 10 03 c0       	push   0xc00310fd
c0011354:	68 86 01 03 c0       	push   0xc0030186
c0011359:	e8 7a eb 00 00       	call   c001fed8 <CPrintf>
c001135e:	83 c4 10             	add    esp,0x10
c0011361:	8d 76 00             	lea    esi,[esi+0x0]
c0011364:	83 ec 08             	sub    esp,0x8
c0011367:	6a 03                	push   0x3
c0011369:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001136d:	e8 5e 1e 00 00       	call   c00131d0 <icmp_dest_unreach>
c0011372:	83 c4 10             	add    esp,0x10
c0011375:	8d 76 00             	lea    esi,[esi+0x0]
c0011378:	66 a1 a8 77 03 c0    	mov    ax,ds:0xc00377a8
c001137e:	83 c0 01             	add    eax,0x1
c0011381:	66 a3 a8 77 03 c0    	mov    ds:0xc00377a8,ax
c0011387:	66 a1 9e 77 03 c0    	mov    ax,ds:0xc003779e
c001138d:	83 c0 01             	add    eax,0x1
c0011390:	66 a3 9e 77 03 c0    	mov    ds:0xc003779e,ax
c0011396:	83 ec 0c             	sub    esp,0xc
c0011399:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001139d:	e8 52 71 ff ff       	call   c00084f4 <pbuf_free>
c00113a2:	83 c4 10             	add    esp,0x10
c00113a5:	eb 11                	jmp    c00113b8 <udp_input+0x46c>
c00113a7:	90                   	nop
c00113a8:	83 ec 0c             	sub    esp,0xc
c00113ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00113af:	e8 40 71 ff ff       	call   c00084f4 <pbuf_free>
c00113b4:	83 c4 10             	add    esp,0x10
c00113b7:	90                   	nop
c00113b8:	90                   	nop
c00113b9:	83 c4 28             	add    esp,0x28
c00113bc:	5b                   	pop    ebx
c00113bd:	c3                   	ret    
c00113be:	66 90                	xchg   ax,ax

c00113c0 <udp_bind>:
c00113c0:	83 ec 2c             	sub    esp,0x2c
c00113c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00113c7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00113cc:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c00113d1:	a1 8c 78 03 c0       	mov    eax,ds:0xc003788c
c00113d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00113da:	e9 8d 00 00 00       	jmp    c001146c <udp_bind+0xac>
c00113df:	90                   	nop
c00113e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113e4:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00113e8:	75 26                	jne    c0011410 <udp_bind+0x50>
c00113ea:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00113ef:	85 c0                	test   eax,eax
c00113f1:	74 15                	je     c0011408 <udp_bind+0x48>
c00113f3:	83 ec 08             	sub    esp,0x8
c00113f6:	68 11 11 03 c0       	push   0xc0031111
c00113fb:	68 86 01 03 c0       	push   0xc0030186
c0011400:	e8 d3 ea 00 00       	call   c001fed8 <CPrintf>
c0011405:	83 c4 10             	add    esp,0x10
c0011408:	c6 44 24 1b 01       	mov    BYTE PTR [esp+0x1b],0x1
c001140d:	eb 51                	jmp    c0011460 <udp_bind+0xa0>
c001140f:	90                   	nop
c0011410:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011414:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011418:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c001141d:	0f b7 c0             	movzx  eax,ax
c0011420:	39 c2                	cmp    edx,eax
c0011422:	75 3c                	jne    c0011460 <udp_bind+0xa0>
c0011424:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011428:	85 c0                	test   eax,eax
c001142a:	74 2c                	je     c0011458 <udp_bind+0x98>
c001142c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011430:	8b 00                	mov    eax,DWORD PTR [eax]
c0011432:	85 c0                	test   eax,eax
c0011434:	74 22                	je     c0011458 <udp_bind+0x98>
c0011436:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001143b:	74 1b                	je     c0011458 <udp_bind+0x98>
c001143d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011441:	8b 00                	mov    eax,DWORD PTR [eax]
c0011443:	85 c0                	test   eax,eax
c0011445:	74 11                	je     c0011458 <udp_bind+0x98>
c0011447:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001144b:	8b 10                	mov    edx,DWORD PTR [eax]
c001144d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011451:	8b 00                	mov    eax,DWORD PTR [eax]
c0011453:	39 c2                	cmp    edx,eax
c0011455:	75 09                	jne    c0011460 <udp_bind+0xa0>
c0011457:	90                   	nop
c0011458:	b0 f8                	mov    al,0xf8
c001145a:	e9 dd 00 00 00       	jmp    c001153c <udp_bind+0x17c>
c001145f:	90                   	nop
c0011460:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011464:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011467:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001146b:	90                   	nop
c001146c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011471:	0f 85 69 ff ff ff    	jne    c00113e0 <udp_bind+0x20>
c0011477:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001147c:	74 0a                	je     c0011488 <udp_bind+0xc8>
c001147e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011482:	8b 00                	mov    eax,DWORD PTR [eax]
c0011484:	eb 0a                	jmp    c0011490 <udp_bind+0xd0>
c0011486:	66 90                	xchg   ax,ax
c0011488:	b8 00 00 00 00       	mov    eax,0x0
c001148d:	8d 76 00             	lea    esi,[esi+0x0]
c0011490:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011494:	89 02                	mov    DWORD PTR [edx],eax
c0011496:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001149b:	85 c0                	test   eax,eax
c001149d:	75 6d                	jne    c001150c <udp_bind+0x14c>
c001149f:	66 c7 44 24 0c 00 c0 	mov    WORD PTR [esp+0xc],0xc000
c00114a6:	a1 8c 78 03 c0       	mov    eax,ds:0xc003788c
c00114ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114af:	eb 3b                	jmp    c00114ec <udp_bind+0x12c>
c00114b1:	8d 76 00             	lea    esi,[esi+0x0]
c00114b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114b8:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00114bc:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00114c1:	0f b7 c0             	movzx  eax,ax
c00114c4:	39 c2                	cmp    edx,eax
c00114c6:	75 18                	jne    c00114e0 <udp_bind+0x120>
c00114c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114cc:	83 c0 01             	add    eax,0x1
c00114cf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00114d4:	a1 8c 78 03 c0       	mov    eax,ds:0xc003788c
c00114d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114dd:	eb 0d                	jmp    c00114ec <udp_bind+0x12c>
c00114df:	90                   	nop
c00114e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00114e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114eb:	90                   	nop
c00114ec:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00114f1:	74 0d                	je     c0011500 <udp_bind+0x140>
c00114f3:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00114f8:	3d ff ff 00 00       	cmp    eax,0xffff
c00114fd:	75 b5                	jne    c00114b4 <udp_bind+0xf4>
c00114ff:	90                   	nop
c0011500:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011505:	74 05                	je     c001150c <udp_bind+0x14c>
c0011507:	b0 f8                	mov    al,0xf8
c0011509:	eb 31                	jmp    c001153c <udp_bind+0x17c>
c001150b:	90                   	nop
c001150c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011510:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011514:	66 89 42 12          	mov    WORD PTR [edx+0x12],ax
c0011518:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001151d:	85 c0                	test   eax,eax
c001151f:	75 17                	jne    c0011538 <udp_bind+0x178>
c0011521:	8b 15 8c 78 03 c0    	mov    edx,DWORD PTR ds:0xc003788c
c0011527:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001152b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001152e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011532:	a3 8c 78 03 c0       	mov    ds:0xc003788c,eax
c0011537:	90                   	nop
c0011538:	b0 00                	mov    al,0x0
c001153a:	66 90                	xchg   ax,ax
c001153c:	83 c4 2c             	add    esp,0x2c
c001153f:	c3                   	ret    

c0011540 <udp_sendto_if>:
c0011540:	83 ec 2c             	sub    esp,0x2c
c0011543:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011547:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001154c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011550:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011554:	0f b7 c0             	movzx  eax,ax
c0011557:	85 c0                	test   eax,eax
c0011559:	75 39                	jne    c0011594 <udp_sendto_if+0x54>
c001155b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001155f:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011563:	0f b7 d0             	movzx  edx,ax
c0011566:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001156a:	83 ec 04             	sub    esp,0x4
c001156d:	52                   	push   edx
c001156e:	50                   	push   eax
c001156f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011573:	e8 48 fe ff ff       	call   c00113c0 <udp_bind>
c0011578:	83 c4 10             	add    esp,0x10
c001157b:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001157f:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c0011584:	85 c0                	test   eax,eax
c0011586:	74 0c                	je     c0011594 <udp_sendto_if+0x54>
c0011588:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c001158c:	e9 2b 02 00 00       	jmp    c00117bc <udp_sendto_if+0x27c>
c0011591:	8d 76 00             	lea    esi,[esi+0x0]
c0011594:	83 ec 08             	sub    esp,0x8
c0011597:	6a 08                	push   0x8
c0011599:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001159d:	e8 b6 6d ff ff       	call   c0008358 <pbuf_header>
c00115a2:	83 c4 10             	add    esp,0x10
c00115a5:	0f b6 c0             	movzx  eax,al
c00115a8:	85 c0                	test   eax,eax
c00115aa:	74 48                	je     c00115f4 <udp_sendto_if+0xb4>
c00115ac:	83 ec 04             	sub    esp,0x4
c00115af:	6a 00                	push   0x0
c00115b1:	6a 08                	push   0x8
c00115b3:	6a 01                	push   0x1
c00115b5:	e8 12 71 ff ff       	call   c00086cc <pbuf_alloc>
c00115ba:	83 c4 10             	add    esp,0x10
c00115bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00115c1:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00115c6:	75 08                	jne    c00115d0 <udp_sendto_if+0x90>
c00115c8:	b0 ff                	mov    al,0xff
c00115ca:	e9 ed 01 00 00       	jmp    c00117bc <udp_sendto_if+0x27c>
c00115cf:	90                   	nop
c00115d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00115d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00115d7:	0f b7 c0             	movzx  eax,ax
c00115da:	85 c0                	test   eax,eax
c00115dc:	74 1e                	je     c00115fc <udp_sendto_if+0xbc>
c00115de:	83 ec 08             	sub    esp,0x8
c00115e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00115e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00115e9:	e8 1e 78 ff ff       	call   c0008e0c <pbuf_chain>
c00115ee:	83 c4 10             	add    esp,0x10
c00115f1:	eb 09                	jmp    c00115fc <udp_sendto_if+0xbc>
c00115f3:	90                   	nop
c00115f4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00115f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00115fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011600:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0011604:	0f b7 c0             	movzx  eax,ax
c0011607:	83 f8 07             	cmp    eax,0x7
c001160a:	77 18                	ja     c0011624 <udp_sendto_if+0xe4>
c001160c:	83 ec 08             	sub    esp,0x8
c001160f:	68 20 11 03 c0       	push   0xc0031120
c0011614:	68 86 01 03 c0       	push   0xc0030186
c0011619:	e8 ba e8 00 00       	call   c001fed8 <CPrintf>
c001161e:	83 c4 10             	add    esp,0x10
c0011621:	8d 76 00             	lea    esi,[esi+0x0]
c0011624:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011628:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001162b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001162f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011633:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011637:	0f b7 c0             	movzx  eax,ax
c001163a:	83 ec 0c             	sub    esp,0xc
c001163d:	50                   	push   eax
c001163e:	e8 a5 f5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011643:	83 c4 10             	add    esp,0x10
c0011646:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001164a:	66 89 02             	mov    WORD PTR [edx],ax
c001164d:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011652:	83 ec 0c             	sub    esp,0xc
c0011655:	50                   	push   eax
c0011656:	e8 8d f5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001165b:	83 c4 10             	add    esp,0x10
c001165e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011662:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0011666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001166a:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0011670:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011674:	85 c0                	test   eax,eax
c0011676:	74 0c                	je     c0011684 <udp_sendto_if+0x144>
c0011678:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001167c:	8b 00                	mov    eax,DWORD PTR [eax]
c001167e:	85 c0                	test   eax,eax
c0011680:	75 12                	jne    c0011694 <udp_sendto_if+0x154>
c0011682:	66 90                	xchg   ax,ax
c0011684:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011688:	83 c0 04             	add    eax,0x4
c001168b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001168f:	eb 47                	jmp    c00116d8 <udp_sendto_if+0x198>
c0011691:	8d 76 00             	lea    esi,[esi+0x0]
c0011694:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011698:	8b 10                	mov    edx,DWORD PTR [eax]
c001169a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001169e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116a1:	39 c2                	cmp    edx,eax
c00116a3:	74 2b                	je     c00116d0 <udp_sendto_if+0x190>
c00116a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00116a9:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00116ad:	74 19                	je     c00116c8 <udp_sendto_if+0x188>
c00116af:	83 ec 0c             	sub    esp,0xc
c00116b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00116b6:	e8 39 6e ff ff       	call   c00084f4 <pbuf_free>
c00116bb:	83 c4 10             	add    esp,0x10
c00116be:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00116c6:	66 90                	xchg   ax,ax
c00116c8:	b0 fa                	mov    al,0xfa
c00116ca:	e9 ed 00 00 00       	jmp    c00117bc <udp_sendto_if+0x27c>
c00116cf:	90                   	nop
c00116d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00116d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00116dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00116df:	0f b7 c0             	movzx  eax,ax
c00116e2:	83 ec 0c             	sub    esp,0xc
c00116e5:	50                   	push   eax
c00116e6:	e8 fd f4 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00116eb:	83 c4 10             	add    esp,0x10
c00116ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00116f2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00116f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116fa:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00116fd:	0f b6 c0             	movzx  eax,al
c0011700:	83 e0 01             	and    eax,0x1
c0011703:	75 4b                	jne    c0011750 <udp_sendto_if+0x210>
c0011705:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011709:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001170c:	0f b7 c0             	movzx  eax,ax
c001170f:	83 ec 0c             	sub    esp,0xc
c0011712:	50                   	push   eax
c0011713:	6a 11                	push   0x11
c0011715:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011719:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001171d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011721:	e8 ea 1b 00 00       	call   c0013310 <inet_chksum_pseudo>
c0011726:	83 c4 20             	add    esp,0x20
c0011729:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001172e:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0011733:	85 c0                	test   eax,eax
c0011735:	75 09                	jne    c0011740 <udp_sendto_if+0x200>
c0011737:	66 c7 44 24 16 ff ff 	mov    WORD PTR [esp+0x16],0xffff
c001173e:	66 90                	xchg   ax,ax
c0011740:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011744:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0011749:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c001174d:	8d 76 00             	lea    esi,[esi+0x0]
c0011750:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011754:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0011757:	0f b6 d0             	movzx  edx,al
c001175a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001175e:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0011761:	0f b6 c0             	movzx  eax,al
c0011764:	83 ec 04             	sub    esp,0x4
c0011767:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001176b:	6a 11                	push   0x11
c001176d:	52                   	push   edx
c001176e:	50                   	push   eax
c001176f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011773:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011777:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001177b:	e8 f4 24 00 00       	call   c0013c74 <ip_output_if>
c0011780:	83 c4 20             	add    esp,0x20
c0011783:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0011787:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001178b:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001178f:	74 17                	je     c00117a8 <udp_sendto_if+0x268>
c0011791:	83 ec 0c             	sub    esp,0xc
c0011794:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011798:	e8 57 6d ff ff       	call   c00084f4 <pbuf_free>
c001179d:	83 c4 10             	add    esp,0x10
c00117a0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00117a8:	66 a1 98 77 03 c0    	mov    ax,ds:0xc0037798
c00117ae:	83 c0 01             	add    eax,0x1
c00117b1:	66 a3 98 77 03 c0    	mov    ds:0xc0037798,ax
c00117b7:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00117bb:	90                   	nop
c00117bc:	83 c4 2c             	add    esp,0x2c
c00117bf:	c3                   	ret    

c00117c0 <udp_sendto>:
c00117c0:	83 ec 2c             	sub    esp,0x2c
c00117c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00117c7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00117cc:	83 ec 0c             	sub    esp,0xc
c00117cf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00117d3:	e8 c4 1f 00 00       	call   c001379c <ip_route>
c00117d8:	83 c4 10             	add    esp,0x10
c00117db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00117df:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00117e4:	75 16                	jne    c00117fc <udp_sendto+0x3c>
c00117e6:	66 a1 a6 77 03 c0    	mov    ax,ds:0xc00377a6
c00117ec:	83 c0 01             	add    eax,0x1
c00117ef:	66 a3 a6 77 03 c0    	mov    ds:0xc00377a6,ax
c00117f5:	b0 fc                	mov    al,0xfc
c00117f7:	eb 27                	jmp    c0011820 <udp_sendto+0x60>
c00117f9:	8d 76 00             	lea    esi,[esi+0x0]
c00117fc:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011801:	83 ec 0c             	sub    esp,0xc
c0011804:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011808:	50                   	push   eax
c0011809:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001180d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011811:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011815:	e8 26 fd ff ff       	call   c0011540 <udp_sendto_if>
c001181a:	83 c4 20             	add    esp,0x20
c001181d:	8d 76 00             	lea    esi,[esi+0x0]
c0011820:	83 c4 2c             	add    esp,0x2c
c0011823:	c3                   	ret    

c0011824 <udp_send>:
c0011824:	83 ec 0c             	sub    esp,0xc
c0011827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001182b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001182e:	0f b7 c0             	movzx  eax,ax
c0011831:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011835:	83 c2 04             	add    edx,0x4
c0011838:	50                   	push   eax
c0011839:	52                   	push   edx
c001183a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001183e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011842:	e8 79 ff ff ff       	call   c00117c0 <udp_sendto>
c0011847:	83 c4 10             	add    esp,0x10
c001184a:	83 c4 0c             	add    esp,0xc
c001184d:	c3                   	ret    
c001184e:	66 90                	xchg   ax,ax

c0011850 <udp_connect>:
c0011850:	83 ec 2c             	sub    esp,0x2c
c0011853:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011857:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001185c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011860:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011864:	0f b7 c0             	movzx  eax,ax
c0011867:	85 c0                	test   eax,eax
c0011869:	75 39                	jne    c00118a4 <udp_connect+0x54>
c001186b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001186f:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011873:	0f b7 d0             	movzx  edx,ax
c0011876:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001187a:	83 ec 04             	sub    esp,0x4
c001187d:	52                   	push   edx
c001187e:	50                   	push   eax
c001187f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011883:	e8 38 fb ff ff       	call   c00113c0 <udp_bind>
c0011888:	83 c4 10             	add    esp,0x10
c001188b:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001188f:	0f be 44 24 1b       	movsx  eax,BYTE PTR [esp+0x1b]
c0011894:	85 c0                	test   eax,eax
c0011896:	74 0c                	je     c00118a4 <udp_connect+0x54>
c0011898:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001189c:	e9 8b 00 00 00       	jmp    c001192c <udp_connect+0xdc>
c00118a1:	8d 76 00             	lea    esi,[esi+0x0]
c00118a4:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00118a9:	74 09                	je     c00118b4 <udp_connect+0x64>
c00118ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00118af:	8b 00                	mov    eax,DWORD PTR [eax]
c00118b1:	eb 09                	jmp    c00118bc <udp_connect+0x6c>
c00118b3:	90                   	nop
c00118b4:	b8 00 00 00 00       	mov    eax,0x0
c00118b9:	8d 76 00             	lea    esi,[esi+0x0]
c00118bc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00118c0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00118c3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00118c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118cb:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c00118cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118d3:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00118d6:	83 c8 04             	or     eax,0x4
c00118d9:	88 c2                	mov    dl,al
c00118db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118df:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c00118e2:	a1 8c 78 03 c0       	mov    eax,ds:0xc003788c
c00118e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00118eb:	eb 1f                	jmp    c001190c <udp_connect+0xbc>
c00118ed:	8d 76 00             	lea    esi,[esi+0x0]
c00118f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118f4:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00118f8:	75 06                	jne    c0011900 <udp_connect+0xb0>
c00118fa:	b0 00                	mov    al,0x0
c00118fc:	eb 2e                	jmp    c001192c <udp_connect+0xdc>
c00118fe:	66 90                	xchg   ax,ax
c0011900:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011904:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011907:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001190b:	90                   	nop
c001190c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011911:	75 dd                	jne    c00118f0 <udp_connect+0xa0>
c0011913:	8b 15 8c 78 03 c0    	mov    edx,DWORD PTR ds:0xc003788c
c0011919:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001191d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011920:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011924:	a3 8c 78 03 c0       	mov    ds:0xc003788c,eax
c0011929:	b0 00                	mov    al,0x0
c001192b:	90                   	nop
c001192c:	83 c4 2c             	add    esp,0x2c
c001192f:	c3                   	ret    

c0011930 <udp_disconnect>:
c0011930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011934:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001193b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001193f:	66 c7 40 14 00 00    	mov    WORD PTR [eax+0x14],0x0
c0011945:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011949:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c001194c:	83 e0 fb             	and    eax,0xfffffffb
c001194f:	88 c2                	mov    dl,al
c0011951:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011955:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0011958:	90                   	nop
c0011959:	c3                   	ret    
c001195a:	66 90                	xchg   ax,ax

c001195c <udp_recv>:
c001195c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011960:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011964:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011967:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001196b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001196f:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011972:	90                   	nop
c0011973:	c3                   	ret    

c0011974 <udp_remove>:
c0011974:	83 ec 1c             	sub    esp,0x1c
c0011977:	a1 8c 78 03 c0       	mov    eax,ds:0xc003788c
c001197c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0011980:	75 12                	jne    c0011994 <udp_remove+0x20>
c0011982:	a1 8c 78 03 c0       	mov    eax,ds:0xc003788c
c0011987:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001198a:	a3 8c 78 03 c0       	mov    ds:0xc003788c,eax
c001198f:	eb 4b                	jmp    c00119dc <udp_remove+0x68>
c0011991:	8d 76 00             	lea    esi,[esi+0x0]
c0011994:	a1 8c 78 03 c0       	mov    eax,ds:0xc003788c
c0011999:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001199d:	eb 35                	jmp    c00119d4 <udp_remove+0x60>
c001199f:	90                   	nop
c00119a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119a4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00119a7:	85 c0                	test   eax,eax
c00119a9:	74 1d                	je     c00119c8 <udp_remove+0x54>
c00119ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119af:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00119b2:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00119b6:	75 10                	jne    c00119c8 <udp_remove+0x54>
c00119b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00119bc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00119bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119c3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00119c6:	66 90                	xchg   ax,ax
c00119c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00119cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119d3:	90                   	nop
c00119d4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00119d9:	75 c5                	jne    c00119a0 <udp_remove+0x2c>
c00119db:	90                   	nop
c00119dc:	83 ec 08             	sub    esp,0x8
c00119df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00119e3:	6a 01                	push   0x1
c00119e5:	e8 4e 62 ff ff       	call   c0007c38 <memp_free>
c00119ea:	83 c4 10             	add    esp,0x10
c00119ed:	90                   	nop
c00119ee:	83 c4 1c             	add    esp,0x1c
c00119f1:	c3                   	ret    
c00119f2:	66 90                	xchg   ax,ax

c00119f4 <udp_new>:
c00119f4:	83 ec 1c             	sub    esp,0x1c
c00119f7:	83 ec 0c             	sub    esp,0xc
c00119fa:	6a 01                	push   0x1
c00119fc:	e8 0b 61 ff ff       	call   c0007b0c <memp_malloc>
c0011a01:	83 c4 10             	add    esp,0x10
c0011a04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a08:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0011a0d:	74 1d                	je     c0011a2c <udp_new+0x38>
c0011a0f:	83 ec 04             	sub    esp,0x4
c0011a12:	6a 20                	push   0x20
c0011a14:	6a 00                	push   0x0
c0011a16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011a1a:	e8 d1 ea fe ff       	call   c00004f0 <memset>
c0011a1f:	83 c4 10             	add    esp,0x10
c0011a22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a26:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0011a2a:	66 90                	xchg   ax,ax
c0011a2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a30:	83 c4 1c             	add    esp,0x1c
c0011a33:	c3                   	ret    

c0011a34 <free_entry>:
c0011a34:	83 ec 0c             	sub    esp,0xc
c0011a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a3b:	c1 e0 04             	shl    eax,0x4
c0011a3e:	05 00 b9 03 c0       	add    eax,0xc003b900
c0011a43:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a45:	85 c0                	test   eax,eax
c0011a47:	74 2f                	je     c0011a78 <free_entry+0x44>
c0011a49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a4d:	c1 e0 04             	shl    eax,0x4
c0011a50:	05 00 b9 03 c0       	add    eax,0xc003b900
c0011a55:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a57:	83 ec 0c             	sub    esp,0xc
c0011a5a:	50                   	push   eax
c0011a5b:	e8 94 6a ff ff       	call   c00084f4 <pbuf_free>
c0011a60:	83 c4 10             	add    esp,0x10
c0011a63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a67:	c1 e0 04             	shl    eax,0x4
c0011a6a:	05 00 b9 03 c0       	add    eax,0xc003b900
c0011a6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011a75:	8d 76 00             	lea    esi,[esi+0x0]
c0011a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a7c:	c1 e0 04             	shl    eax,0x4
c0011a7f:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0011a84:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011a87:	90                   	nop
c0011a88:	83 c4 0c             	add    esp,0xc
c0011a8b:	c3                   	ret    

c0011a8c <etharp_tmr>:
c0011a8c:	83 ec 1c             	sub    esp,0x1c
c0011a8f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011a94:	e9 a7 00 00 00       	jmp    c0011b40 <etharp_tmr+0xb4>
c0011a99:	8d 76 00             	lea    esi,[esi+0x0]
c0011a9c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011aa1:	c1 e0 04             	shl    eax,0x4
c0011aa4:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0011aa9:	8a 00                	mov    al,BYTE PTR [eax]
c0011aab:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0011aaf:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0011ab4:	85 c0                	test   eax,eax
c0011ab6:	74 7c                	je     c0011b34 <etharp_tmr+0xa8>
c0011ab8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011abd:	89 c2                	mov    edx,eax
c0011abf:	c1 e2 04             	shl    edx,0x4
c0011ac2:	81 c2 0f b9 03 c0    	add    edx,0xc003b90f
c0011ac8:	8a 12                	mov    dl,BYTE PTR [edx]
c0011aca:	83 c2 01             	add    edx,0x1
c0011acd:	c1 e0 04             	shl    eax,0x4
c0011ad0:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011ad5:	88 10                	mov    BYTE PTR [eax],dl
c0011ad7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011adc:	c1 e0 04             	shl    eax,0x4
c0011adf:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011ae4:	8a 00                	mov    al,BYTE PTR [eax]
c0011ae6:	0f b6 c0             	movzx  eax,al
c0011ae9:	3d ef 00 00 00       	cmp    eax,0xef
c0011aee:	77 30                	ja     c0011b20 <etharp_tmr+0x94>
c0011af0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011af5:	c1 e0 04             	shl    eax,0x4
c0011af8:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0011afd:	8a 00                	mov    al,BYTE PTR [eax]
c0011aff:	0f b6 c0             	movzx  eax,al
c0011b02:	83 f8 01             	cmp    eax,0x1
c0011b05:	75 2d                	jne    c0011b34 <etharp_tmr+0xa8>
c0011b07:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b0c:	c1 e0 04             	shl    eax,0x4
c0011b0f:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011b14:	8a 00                	mov    al,BYTE PTR [eax]
c0011b16:	0f b6 c0             	movzx  eax,al
c0011b19:	83 f8 01             	cmp    eax,0x1
c0011b1c:	76 16                	jbe    c0011b34 <etharp_tmr+0xa8>
c0011b1e:	66 90                	xchg   ax,ax
c0011b20:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b25:	83 ec 0c             	sub    esp,0xc
c0011b28:	50                   	push   eax
c0011b29:	e8 06 ff ff ff       	call   c0011a34 <free_entry>
c0011b2e:	83 c4 10             	add    esp,0x10
c0011b31:	8d 76 00             	lea    esi,[esi+0x0]
c0011b34:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011b38:	83 c0 01             	add    eax,0x1
c0011b3b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011b3f:	90                   	nop
c0011b40:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b45:	83 f8 09             	cmp    eax,0x9
c0011b48:	0f 86 4e ff ff ff    	jbe    c0011a9c <etharp_tmr+0x10>
c0011b4e:	90                   	nop
c0011b4f:	83 c4 1c             	add    esp,0x1c
c0011b52:	c3                   	ret    
c0011b53:	90                   	nop

c0011b54 <find_entry>:
c0011b54:	83 ec 2c             	sub    esp,0x2c
c0011b57:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b5b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011b5f:	c6 44 24 1f 0a       	mov    BYTE PTR [esp+0x1f],0xa
c0011b64:	c6 44 24 1e 0a       	mov    BYTE PTR [esp+0x1e],0xa
c0011b69:	c6 44 24 1d 0a       	mov    BYTE PTR [esp+0x1d],0xa
c0011b6e:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0011b73:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0011b78:	c6 44 24 1a 00       	mov    BYTE PTR [esp+0x1a],0x0
c0011b7d:	c6 44 24 19 0a       	mov    BYTE PTR [esp+0x19],0xa
c0011b82:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
c0011b87:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0011b8c:	e9 7f 01 00 00       	jmp    c0011d10 <find_entry+0x1bc>
c0011b91:	8d 76 00             	lea    esi,[esi+0x0]
c0011b94:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b99:	c1 e0 04             	shl    eax,0x4
c0011b9c:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0011ba1:	8a 00                	mov    al,BYTE PTR [eax]
c0011ba3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0011ba7:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011bac:	83 f8 0a             	cmp    eax,0xa
c0011baf:	75 17                	jne    c0011bc8 <find_entry+0x74>
c0011bb1:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011bb6:	85 c0                	test   eax,eax
c0011bb8:	75 0e                	jne    c0011bc8 <find_entry+0x74>
c0011bba:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011bbe:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0011bc2:	e9 3d 01 00 00       	jmp    c0011d04 <find_entry+0x1b0>
c0011bc7:	90                   	nop
c0011bc8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011bcd:	85 c0                	test   eax,eax
c0011bcf:	0f 84 2f 01 00 00    	je     c0011d04 <find_entry+0x1b0>
c0011bd5:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011bda:	83 f8 01             	cmp    eax,0x1
c0011bdd:	74 21                	je     c0011c00 <find_entry+0xac>
c0011bdf:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011be4:	83 f8 02             	cmp    eax,0x2
c0011be7:	74 17                	je     c0011c00 <find_entry+0xac>
c0011be9:	83 ec 08             	sub    esp,0x8
c0011bec:	68 50 11 03 c0       	push   0xc0031150
c0011bf1:	68 86 01 03 c0       	push   0xc0030186
c0011bf6:	e8 dd e2 00 00       	call   c001fed8 <CPrintf>
c0011bfb:	83 c4 10             	add    esp,0x10
c0011bfe:	66 90                	xchg   ax,ax
c0011c00:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011c05:	74 25                	je     c0011c2c <find_entry+0xd8>
c0011c07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c0b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c0d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c12:	c1 e0 04             	shl    eax,0x4
c0011c15:	05 04 b9 03 c0       	add    eax,0xc003b904
c0011c1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c1c:	39 c2                	cmp    edx,eax
c0011c1e:	75 0c                	jne    c0011c2c <find_entry+0xd8>
c0011c20:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011c24:	e9 53 02 00 00       	jmp    c0011e7c <find_entry+0x328>
c0011c29:	8d 76 00             	lea    esi,[esi+0x0]
c0011c2c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011c31:	83 f8 01             	cmp    eax,0x1
c0011c34:	0f 85 8a 00 00 00    	jne    c0011cc4 <find_entry+0x170>
c0011c3a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c3f:	c1 e0 04             	shl    eax,0x4
c0011c42:	05 00 b9 03 c0       	add    eax,0xc003b900
c0011c47:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c49:	85 c0                	test   eax,eax
c0011c4b:	74 3f                	je     c0011c8c <find_entry+0x138>
c0011c4d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c52:	c1 e0 04             	shl    eax,0x4
c0011c55:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011c5a:	8a 00                	mov    al,BYTE PTR [eax]
c0011c5c:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0011c61:	0f b6 c0             	movzx  eax,al
c0011c64:	39 c2                	cmp    edx,eax
c0011c66:	0f 87 98 00 00 00    	ja     c0011d04 <find_entry+0x1b0>
c0011c6c:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011c70:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0011c74:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c79:	c1 e0 04             	shl    eax,0x4
c0011c7c:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011c81:	8a 00                	mov    al,BYTE PTR [eax]
c0011c83:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0011c87:	eb 7b                	jmp    c0011d04 <find_entry+0x1b0>
c0011c89:	8d 76 00             	lea    esi,[esi+0x0]
c0011c8c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c91:	c1 e0 04             	shl    eax,0x4
c0011c94:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011c99:	8a 00                	mov    al,BYTE PTR [eax]
c0011c9b:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011ca0:	0f b6 c0             	movzx  eax,al
c0011ca3:	39 c2                	cmp    edx,eax
c0011ca5:	77 5d                	ja     c0011d04 <find_entry+0x1b0>
c0011ca7:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011cab:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011caf:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cb4:	c1 e0 04             	shl    eax,0x4
c0011cb7:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011cbc:	8a 00                	mov    al,BYTE PTR [eax]
c0011cbe:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0011cc2:	eb 40                	jmp    c0011d04 <find_entry+0x1b0>
c0011cc4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011cc9:	83 f8 02             	cmp    eax,0x2
c0011ccc:	75 36                	jne    c0011d04 <find_entry+0x1b0>
c0011cce:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cd3:	c1 e0 04             	shl    eax,0x4
c0011cd6:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011cdb:	8a 00                	mov    al,BYTE PTR [eax]
c0011cdd:	0f b6 54 24 1a       	movzx  edx,BYTE PTR [esp+0x1a]
c0011ce2:	0f b6 c0             	movzx  eax,al
c0011ce5:	39 c2                	cmp    edx,eax
c0011ce7:	77 1b                	ja     c0011d04 <find_entry+0x1b0>
c0011ce9:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011ced:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0011cf1:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cf6:	c1 e0 04             	shl    eax,0x4
c0011cf9:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011cfe:	8a 00                	mov    al,BYTE PTR [eax]
c0011d00:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0011d04:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011d08:	83 c0 01             	add    eax,0x1
c0011d0b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011d0f:	90                   	nop
c0011d10:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d15:	83 f8 09             	cmp    eax,0x9
c0011d18:	0f 86 76 fe ff ff    	jbe    c0011b94 <find_entry+0x40>
c0011d1e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011d23:	83 e0 02             	and    eax,0x2
c0011d26:	75 14                	jne    c0011d3c <find_entry+0x1e8>
c0011d28:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011d2d:	83 f8 0a             	cmp    eax,0xa
c0011d30:	75 12                	jne    c0011d44 <find_entry+0x1f0>
c0011d32:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011d37:	83 e0 01             	and    eax,0x1
c0011d3a:	75 08                	jne    c0011d44 <find_entry+0x1f0>
c0011d3c:	b0 ff                	mov    al,0xff
c0011d3e:	e9 39 01 00 00       	jmp    c0011e7c <find_entry+0x328>
c0011d43:	90                   	nop
c0011d44:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011d49:	83 f8 09             	cmp    eax,0x9
c0011d4c:	7f 0e                	jg     c0011d5c <find_entry+0x208>
c0011d4e:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0011d52:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011d56:	e9 a1 00 00 00       	jmp    c0011dfc <find_entry+0x2a8>
c0011d5b:	90                   	nop
c0011d5c:	0f be 44 24 1e       	movsx  eax,BYTE PTR [esp+0x1e]
c0011d61:	83 f8 09             	cmp    eax,0x9
c0011d64:	7f 32                	jg     c0011d98 <find_entry+0x244>
c0011d66:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c0011d6a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011d6e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d73:	c1 e0 04             	shl    eax,0x4
c0011d76:	05 00 b9 03 c0       	add    eax,0xc003b900
c0011d7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d7d:	85 c0                	test   eax,eax
c0011d7f:	74 47                	je     c0011dc8 <find_entry+0x274>
c0011d81:	83 ec 08             	sub    esp,0x8
c0011d84:	68 c9 12 03 c0       	push   0xc00312c9
c0011d89:	68 86 01 03 c0       	push   0xc0030186
c0011d8e:	e8 45 e1 00 00       	call   c001fed8 <CPrintf>
c0011d93:	83 c4 10             	add    esp,0x10
c0011d96:	eb 30                	jmp    c0011dc8 <find_entry+0x274>
c0011d98:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011d9d:	83 f8 09             	cmp    eax,0x9
c0011da0:	7f 0a                	jg     c0011dac <find_entry+0x258>
c0011da2:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011da6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011daa:	eb 1c                	jmp    c0011dc8 <find_entry+0x274>
c0011dac:	0f be 44 24 19       	movsx  eax,BYTE PTR [esp+0x19]
c0011db1:	83 f8 09             	cmp    eax,0x9
c0011db4:	7f 0a                	jg     c0011dc0 <find_entry+0x26c>
c0011db6:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0011dba:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011dbe:	eb 08                	jmp    c0011dc8 <find_entry+0x274>
c0011dc0:	b0 ff                	mov    al,0xff
c0011dc2:	e9 b5 00 00 00       	jmp    c0011e7c <find_entry+0x328>
c0011dc7:	90                   	nop
c0011dc8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011dcd:	83 f8 09             	cmp    eax,0x9
c0011dd0:	76 16                	jbe    c0011de8 <find_entry+0x294>
c0011dd2:	83 ec 08             	sub    esp,0x8
c0011dd5:	68 e0 12 03 c0       	push   0xc00312e0
c0011dda:	68 86 01 03 c0       	push   0xc0030186
c0011ddf:	e8 f4 e0 00 00       	call   c001fed8 <CPrintf>
c0011de4:	83 c4 10             	add    esp,0x10
c0011de7:	90                   	nop
c0011de8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ded:	83 ec 0c             	sub    esp,0xc
c0011df0:	50                   	push   eax
c0011df1:	e8 3e fc ff ff       	call   c0011a34 <free_entry>
c0011df6:	83 c4 10             	add    esp,0x10
c0011df9:	8d 76 00             	lea    esi,[esi+0x0]
c0011dfc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e01:	83 f8 09             	cmp    eax,0x9
c0011e04:	76 16                	jbe    c0011e1c <find_entry+0x2c8>
c0011e06:	83 ec 08             	sub    esp,0x8
c0011e09:	68 e0 12 03 c0       	push   0xc00312e0
c0011e0e:	68 86 01 03 c0       	push   0xc0030186
c0011e13:	e8 c0 e0 00 00       	call   c001fed8 <CPrintf>
c0011e18:	83 c4 10             	add    esp,0x10
c0011e1b:	90                   	nop
c0011e1c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e21:	c1 e0 04             	shl    eax,0x4
c0011e24:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0011e29:	8a 00                	mov    al,BYTE PTR [eax]
c0011e2b:	0f b6 c0             	movzx  eax,al
c0011e2e:	85 c0                	test   eax,eax
c0011e30:	74 16                	je     c0011e48 <find_entry+0x2f4>
c0011e32:	83 ec 08             	sub    esp,0x8
c0011e35:	68 90 11 03 c0       	push   0xc0031190
c0011e3a:	68 86 01 03 c0       	push   0xc0030186
c0011e3f:	e8 94 e0 00 00       	call   c001fed8 <CPrintf>
c0011e44:	83 c4 10             	add    esp,0x10
c0011e47:	90                   	nop
c0011e48:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011e4d:	74 19                	je     c0011e68 <find_entry+0x314>
c0011e4f:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c0011e54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e58:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e5a:	c1 e2 04             	shl    edx,0x4
c0011e5d:	81 c2 04 b9 03 c0    	add    edx,0xc003b904
c0011e63:	89 02                	mov    DWORD PTR [edx],eax
c0011e65:	8d 76 00             	lea    esi,[esi+0x0]
c0011e68:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e6d:	c1 e0 04             	shl    eax,0x4
c0011e70:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011e75:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011e78:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011e7c:	83 c4 2c             	add    esp,0x2c
c0011e7f:	c3                   	ret    

c0011e80 <etharp_send_ip>:
c0011e80:	83 ec 1c             	sub    esp,0x1c
c0011e83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011e87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011e8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e92:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011e95:	0f b6 c0             	movzx  eax,al
c0011e98:	83 f8 06             	cmp    eax,0x6
c0011e9b:	74 17                	je     c0011eb4 <etharp_send_ip+0x34>
c0011e9d:	83 ec 08             	sub    esp,0x8
c0011ea0:	68 bc 11 03 c0       	push   0xc00311bc
c0011ea5:	68 86 01 03 c0       	push   0xc0030186
c0011eaa:	e8 29 e0 00 00       	call   c001fed8 <CPrintf>
c0011eaf:	83 c4 10             	add    esp,0x10
c0011eb2:	66 90                	xchg   ax,ax
c0011eb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011eb8:	83 ec 04             	sub    esp,0x4
c0011ebb:	6a 06                	push   0x6
c0011ebd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011ec1:	50                   	push   eax
c0011ec2:	e8 b3 e4 fe ff       	call   c000037a <memcpy>
c0011ec7:	83 c4 10             	add    esp,0x10
c0011eca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ece:	83 c0 06             	add    eax,0x6
c0011ed1:	83 ec 04             	sub    esp,0x4
c0011ed4:	6a 06                	push   0x6
c0011ed6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011eda:	50                   	push   eax
c0011edb:	e8 9a e4 fe ff       	call   c000037a <memcpy>
c0011ee0:	83 c4 10             	add    esp,0x10
c0011ee3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ee7:	66 c7 40 0c 08 00    	mov    WORD PTR [eax+0xc],0x8
c0011eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ef1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011ef4:	83 ec 08             	sub    esp,0x8
c0011ef7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011efb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011eff:	ff d0                	call   eax
c0011f01:	83 c4 10             	add    esp,0x10
c0011f04:	83 c4 1c             	add    esp,0x1c
c0011f07:	c3                   	ret    

c0011f08 <update_arp_entry>:
c0011f08:	83 ec 2c             	sub    esp,0x2c
c0011f0b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011f0f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011f13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f17:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011f1a:	0f b6 c0             	movzx  eax,al
c0011f1d:	83 f8 06             	cmp    eax,0x6
c0011f20:	74 16                	je     c0011f38 <update_arp_entry+0x30>
c0011f22:	83 ec 08             	sub    esp,0x8
c0011f25:	68 00 12 03 c0       	push   0xc0031200
c0011f2a:	68 86 01 03 c0       	push   0xc0030186
c0011f2f:	e8 a4 df 00 00       	call   c001fed8 <CPrintf>
c0011f34:	83 c4 10             	add    esp,0x10
c0011f37:	90                   	nop
c0011f38:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011f3d:	74 39                	je     c0011f78 <update_arp_entry+0x70>
c0011f3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f43:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f45:	85 c0                	test   eax,eax
c0011f47:	74 2f                	je     c0011f78 <update_arp_entry+0x70>
c0011f49:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f4f:	83 ec 08             	sub    esp,0x8
c0011f52:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011f56:	50                   	push   eax
c0011f57:	e8 8c 20 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0011f5c:	83 c4 10             	add    esp,0x10
c0011f5f:	0f b6 c0             	movzx  eax,al
c0011f62:	85 c0                	test   eax,eax
c0011f64:	75 12                	jne    c0011f78 <update_arp_entry+0x70>
c0011f66:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f6c:	25 f0 00 00 00       	and    eax,0xf0
c0011f71:	3d e0 00 00 00       	cmp    eax,0xe0
c0011f76:	75 08                	jne    c0011f80 <update_arp_entry+0x78>
c0011f78:	b0 f2                	mov    al,0xf2
c0011f7a:	e9 d9 00 00 00       	jmp    c0012058 <update_arp_entry+0x150>
c0011f7f:	90                   	nop
c0011f80:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011f85:	83 ec 08             	sub    esp,0x8
c0011f88:	50                   	push   eax
c0011f89:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011f8d:	e8 c2 fb ff ff       	call   c0011b54 <find_entry>
c0011f92:	83 c4 10             	add    esp,0x10
c0011f95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011f99:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011f9e:	85 c0                	test   eax,eax
c0011fa0:	79 0a                	jns    c0011fac <update_arp_entry+0xa4>
c0011fa2:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011fa6:	e9 ad 00 00 00       	jmp    c0012058 <update_arp_entry+0x150>
c0011fab:	90                   	nop
c0011fac:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011fb1:	c1 e0 04             	shl    eax,0x4
c0011fb4:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0011fb9:	c6 00 02             	mov    BYTE PTR [eax],0x2
c0011fbc:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011fc1:	c1 e0 04             	shl    eax,0x4
c0011fc4:	05 00 b9 03 c0       	add    eax,0xc003b900
c0011fc9:	83 c0 08             	add    eax,0x8
c0011fcc:	83 ec 04             	sub    esp,0x4
c0011fcf:	6a 06                	push   0x6
c0011fd1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011fd5:	50                   	push   eax
c0011fd6:	e8 9f e3 fe ff       	call   c000037a <memcpy>
c0011fdb:	83 c4 10             	add    esp,0x10
c0011fde:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011fe3:	c1 e0 04             	shl    eax,0x4
c0011fe6:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011feb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011fee:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011ff3:	c1 e0 04             	shl    eax,0x4
c0011ff6:	05 00 b9 03 c0       	add    eax,0xc003b900
c0011ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ffd:	85 c0                	test   eax,eax
c0011fff:	74 53                	je     c0012054 <update_arp_entry+0x14c>
c0012001:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0012006:	c1 e0 04             	shl    eax,0x4
c0012009:	05 00 b9 03 c0       	add    eax,0xc003b900
c001200e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012010:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012014:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0012019:	c1 e0 04             	shl    eax,0x4
c001201c:	05 00 b9 03 c0       	add    eax,0xc003b900
c0012021:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012027:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001202b:	83 c0 23             	add    eax,0x23
c001202e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012032:	50                   	push   eax
c0012033:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012037:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001203b:	e8 40 fe ff ff       	call   c0011e80 <etharp_send_ip>
c0012040:	83 c4 10             	add    esp,0x10
c0012043:	83 ec 0c             	sub    esp,0xc
c0012046:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001204a:	e8 a5 64 ff ff       	call   c00084f4 <pbuf_free>
c001204f:	83 c4 10             	add    esp,0x10
c0012052:	66 90                	xchg   ax,ax
c0012054:	b0 00                	mov    al,0x0
c0012056:	66 90                	xchg   ax,ax
c0012058:	83 c4 2c             	add    esp,0x2c
c001205b:	c3                   	ret    

c001205c <etharp_find_addr>:
c001205c:	83 ec 1c             	sub    esp,0x1c
c001205f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0012064:	74 0a                	je     c0012070 <etharp_find_addr+0x14>
c0012066:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001206b:	75 1b                	jne    c0012088 <etharp_find_addr+0x2c>
c001206d:	8d 76 00             	lea    esi,[esi+0x0]
c0012070:	83 ec 08             	sub    esp,0x8
c0012073:	68 28 12 03 c0       	push   0xc0031228
c0012078:	68 86 01 03 c0       	push   0xc0030186
c001207d:	e8 56 de 00 00       	call   c001fed8 <CPrintf>
c0012082:	83 c4 10             	add    esp,0x10
c0012085:	8d 76 00             	lea    esi,[esi+0x0]
c0012088:	83 ec 08             	sub    esp,0x8
c001208b:	6a 02                	push   0x2
c001208d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012091:	e8 be fa ff ff       	call   c0011b54 <find_entry>
c0012096:	83 c4 10             	add    esp,0x10
c0012099:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001209d:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00120a2:	85 c0                	test   eax,eax
c00120a4:	78 4a                	js     c00120f0 <etharp_find_addr+0x94>
c00120a6:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00120ab:	c1 e0 04             	shl    eax,0x4
c00120ae:	05 0e b9 03 c0       	add    eax,0xc003b90e
c00120b3:	8a 00                	mov    al,BYTE PTR [eax]
c00120b5:	0f b6 c0             	movzx  eax,al
c00120b8:	83 f8 02             	cmp    eax,0x2
c00120bb:	75 33                	jne    c00120f0 <etharp_find_addr+0x94>
c00120bd:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00120c2:	c1 e0 04             	shl    eax,0x4
c00120c5:	05 00 b9 03 c0       	add    eax,0xc003b900
c00120ca:	8d 50 08             	lea    edx,[eax+0x8]
c00120cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00120d1:	89 10                	mov    DWORD PTR [eax],edx
c00120d3:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00120d8:	c1 e0 04             	shl    eax,0x4
c00120db:	05 00 b9 03 c0       	add    eax,0xc003b900
c00120e0:	8d 50 04             	lea    edx,[eax+0x4]
c00120e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00120e7:	89 10                	mov    DWORD PTR [eax],edx
c00120e9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00120ed:	eb 05                	jmp    c00120f4 <etharp_find_addr+0x98>
c00120ef:	90                   	nop
c00120f0:	b0 ff                	mov    al,0xff
c00120f2:	66 90                	xchg   ax,ax
c00120f4:	83 c4 1c             	add    esp,0x1c
c00120f7:	c3                   	ret    

c00120f8 <etharp_arp_input>:
c00120f8:	83 ec 2c             	sub    esp,0x2c
c00120fb:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0012100:	75 1a                	jne    c001211c <etharp_arp_input+0x24>
c0012102:	83 ec 08             	sub    esp,0x8
c0012105:	68 f3 12 03 c0       	push   0xc00312f3
c001210a:	68 86 01 03 c0       	push   0xc0030186
c001210f:	e8 c4 dd 00 00       	call   c001fed8 <CPrintf>
c0012114:	83 c4 10             	add    esp,0x10
c0012117:	e9 d0 02 00 00       	jmp    c00123ec <etharp_arp_input+0x2f4>
c001211c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012120:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012124:	0f b7 c0             	movzx  eax,ax
c0012127:	83 f8 29             	cmp    eax,0x29
c001212a:	77 34                	ja     c0012160 <etharp_arp_input+0x68>
c001212c:	66 a1 42 77 03 c0    	mov    ax,ds:0xc0037742
c0012132:	83 c0 01             	add    eax,0x1
c0012135:	66 a3 42 77 03 c0    	mov    ds:0xc0037742,ax
c001213b:	66 a1 3e 77 03 c0    	mov    ax,ds:0xc003773e
c0012141:	83 c0 01             	add    eax,0x1
c0012144:	66 a3 3e 77 03 c0    	mov    ds:0xc003773e,ax
c001214a:	83 ec 0c             	sub    esp,0xc
c001214d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012151:	e8 9e 63 ff ff       	call   c00084f4 <pbuf_free>
c0012156:	83 c4 10             	add    esp,0x10
c0012159:	e9 8e 02 00 00       	jmp    c00123ec <etharp_arp_input+0x2f4>
c001215e:	66 90                	xchg   ax,ax
c0012160:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012164:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001216b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001216f:	83 c0 0e             	add    eax,0xe
c0012172:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012176:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001217a:	66 8b 00             	mov    ax,WORD PTR [eax]
c001217d:	0f b7 c0             	movzx  eax,ax
c0012180:	3d 00 01 00 00       	cmp    eax,0x100
c0012185:	75 31                	jne    c00121b8 <etharp_arp_input+0xc0>
c0012187:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001218b:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c001218e:	0f b6 c0             	movzx  eax,al
c0012191:	83 f8 06             	cmp    eax,0x6
c0012194:	75 22                	jne    c00121b8 <etharp_arp_input+0xc0>
c0012196:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001219a:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
c001219d:	0f b6 c0             	movzx  eax,al
c00121a0:	83 f8 04             	cmp    eax,0x4
c00121a3:	75 13                	jne    c00121b8 <etharp_arp_input+0xc0>
c00121a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121a9:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00121ad:	0f b7 c0             	movzx  eax,ax
c00121b0:	83 f8 08             	cmp    eax,0x8
c00121b3:	74 37                	je     c00121ec <etharp_arp_input+0xf4>
c00121b5:	8d 76 00             	lea    esi,[esi+0x0]
c00121b8:	66 a1 48 77 03 c0    	mov    ax,ds:0xc0037748
c00121be:	83 c0 01             	add    eax,0x1
c00121c1:	66 a3 48 77 03 c0    	mov    ds:0xc0037748,ax
c00121c7:	66 a1 3e 77 03 c0    	mov    ax,ds:0xc003773e
c00121cd:	83 c0 01             	add    eax,0x1
c00121d0:	66 a3 3e 77 03 c0    	mov    ds:0xc003773e,ax
c00121d6:	83 ec 0c             	sub    esp,0xc
c00121d9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00121dd:	e8 12 63 ff ff       	call   c00084f4 <pbuf_free>
c00121e2:	83 c4 10             	add    esp,0x10
c00121e5:	e9 02 02 00 00       	jmp    c00123ec <etharp_arp_input+0x2f4>
c00121ea:	66 90                	xchg   ax,ax
c00121ec:	66 a1 3a 77 03 c0    	mov    ax,ds:0xc003773a
c00121f2:	83 c0 01             	add    eax,0x1
c00121f5:	66 a3 3a 77 03 c0    	mov    ds:0xc003773a,ax
c00121fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121ff:	83 c0 0e             	add    eax,0xe
c0012202:	83 ec 04             	sub    esp,0x4
c0012205:	6a 04                	push   0x4
c0012207:	50                   	push   eax
c0012208:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001220c:	50                   	push   eax
c001220d:	e8 68 e1 fe ff       	call   c000037a <memcpy>
c0012212:	83 c4 10             	add    esp,0x10
c0012215:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012219:	83 c0 18             	add    eax,0x18
c001221c:	83 ec 04             	sub    esp,0x4
c001221f:	6a 04                	push   0x4
c0012221:	50                   	push   eax
c0012222:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012226:	50                   	push   eax
c0012227:	e8 4e e1 fe ff       	call   c000037a <memcpy>
c001222c:	83 c4 10             	add    esp,0x10
c001222f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012233:	83 c0 04             	add    eax,0x4
c0012236:	74 0c                	je     c0012244 <etharp_arp_input+0x14c>
c0012238:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001223c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001223f:	85 c0                	test   eax,eax
c0012241:	75 09                	jne    c001224c <etharp_arp_input+0x154>
c0012243:	90                   	nop
c0012244:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012249:	eb 15                	jmp    c0012260 <etharp_arp_input+0x168>
c001224b:	90                   	nop
c001224c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012250:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012254:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012257:	39 c2                	cmp    edx,eax
c0012259:	0f 94 c0             	sete   al
c001225c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012260:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0012265:	85 c0                	test   eax,eax
c0012267:	74 07                	je     c0012270 <etharp_arp_input+0x178>
c0012269:	b8 01 00 00 00       	mov    eax,0x1
c001226e:	eb 08                	jmp    c0012278 <etharp_arp_input+0x180>
c0012270:	b8 02 00 00 00       	mov    eax,0x2
c0012275:	8d 76 00             	lea    esi,[esi+0x0]
c0012278:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001227c:	83 c2 08             	add    edx,0x8
c001227f:	50                   	push   eax
c0012280:	52                   	push   edx
c0012281:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012285:	50                   	push   eax
c0012286:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001228a:	e8 79 fc ff ff       	call   c0011f08 <update_arp_entry>
c001228f:	83 c4 10             	add    esp,0x10
c0012292:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012296:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c001229a:	0f b7 c0             	movzx  eax,ax
c001229d:	3d 00 01 00 00       	cmp    eax,0x100
c00122a2:	74 10                	je     c00122b4 <etharp_arp_input+0x1bc>
c00122a4:	3d 00 02 00 00       	cmp    eax,0x200
c00122a9:	0f 84 29 01 00 00    	je     c00123d8 <etharp_arp_input+0x2e0>
c00122af:	e9 10 01 00 00       	jmp    c00123c4 <etharp_arp_input+0x2cc>
c00122b4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c00122b9:	85 c0                	test   eax,eax
c00122bb:	0f 84 f7 00 00 00    	je     c00123b8 <etharp_arp_input+0x2c0>
c00122c1:	83 ec 0c             	sub    esp,0xc
c00122c4:	6a 02                	push   0x2
c00122c6:	e8 1d e9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00122cb:	83 c4 10             	add    esp,0x10
c00122ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00122d2:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00122d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122da:	8d 50 0e             	lea    edx,[eax+0xe]
c00122dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122e1:	83 c0 18             	add    eax,0x18
c00122e4:	83 ec 04             	sub    esp,0x4
c00122e7:	6a 04                	push   0x4
c00122e9:	52                   	push   edx
c00122ea:	50                   	push   eax
c00122eb:	e8 8a e0 fe ff       	call   c000037a <memcpy>
c00122f0:	83 c4 10             	add    esp,0x10
c00122f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122f7:	8d 50 04             	lea    edx,[eax+0x4]
c00122fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122fe:	83 c0 0e             	add    eax,0xe
c0012301:	83 ec 04             	sub    esp,0x4
c0012304:	6a 04                	push   0x4
c0012306:	52                   	push   edx
c0012307:	50                   	push   eax
c0012308:	e8 6d e0 fe ff       	call   c000037a <memcpy>
c001230d:	83 c4 10             	add    esp,0x10
c0012310:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012314:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0012317:	0f b6 c0             	movzx  eax,al
c001231a:	83 f8 06             	cmp    eax,0x6
c001231d:	74 15                	je     c0012334 <etharp_arp_input+0x23c>
c001231f:	83 ec 08             	sub    esp,0x8
c0012322:	68 bc 11 03 c0       	push   0xc00311bc
c0012327:	68 86 01 03 c0       	push   0xc0030186
c001232c:	e8 a7 db 00 00       	call   c001fed8 <CPrintf>
c0012331:	83 c4 10             	add    esp,0x10
c0012334:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012338:	8d 50 08             	lea    edx,[eax+0x8]
c001233b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001233f:	83 c0 12             	add    eax,0x12
c0012342:	83 ec 04             	sub    esp,0x4
c0012345:	6a 06                	push   0x6
c0012347:	52                   	push   edx
c0012348:	50                   	push   eax
c0012349:	e8 2c e0 fe ff       	call   c000037a <memcpy>
c001234e:	83 c4 10             	add    esp,0x10
c0012351:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012355:	8d 50 08             	lea    edx,[eax+0x8]
c0012358:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001235c:	83 ec 04             	sub    esp,0x4
c001235f:	6a 06                	push   0x6
c0012361:	52                   	push   edx
c0012362:	50                   	push   eax
c0012363:	e8 12 e0 fe ff       	call   c000037a <memcpy>
c0012368:	83 c4 10             	add    esp,0x10
c001236b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001236f:	83 c0 08             	add    eax,0x8
c0012372:	83 ec 04             	sub    esp,0x4
c0012375:	6a 06                	push   0x6
c0012377:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001237b:	50                   	push   eax
c001237c:	e8 f9 df fe ff       	call   c000037a <memcpy>
c0012381:	83 c4 10             	add    esp,0x10
c0012384:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012388:	83 c0 06             	add    eax,0x6
c001238b:	83 ec 04             	sub    esp,0x4
c001238e:	6a 06                	push   0x6
c0012390:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012394:	50                   	push   eax
c0012395:	e8 e0 df fe ff       	call   c000037a <memcpy>
c001239a:	83 c4 10             	add    esp,0x10
c001239d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123a1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00123a4:	83 ec 08             	sub    esp,0x8
c00123a7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00123ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123af:	ff d0                	call   eax
c00123b1:	83 c4 10             	add    esp,0x10
c00123b4:	eb 26                	jmp    c00123dc <etharp_arp_input+0x2e4>
c00123b6:	66 90                	xchg   ax,ax
c00123b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123bc:	83 c0 04             	add    eax,0x4
c00123bf:	eb 1b                	jmp    c00123dc <etharp_arp_input+0x2e4>
c00123c1:	8d 76 00             	lea    esi,[esi+0x0]
c00123c4:	66 a1 4c 77 03 c0    	mov    ax,ds:0xc003774c
c00123ca:	83 c0 01             	add    eax,0x1
c00123cd:	66 a3 4c 77 03 c0    	mov    ds:0xc003774c,ax
c00123d3:	eb 07                	jmp    c00123dc <etharp_arp_input+0x2e4>
c00123d5:	8d 76 00             	lea    esi,[esi+0x0]
c00123d8:	90                   	nop
c00123d9:	8d 76 00             	lea    esi,[esi+0x0]
c00123dc:	83 ec 0c             	sub    esp,0xc
c00123df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00123e3:	e8 0c 61 ff ff       	call   c00084f4 <pbuf_free>
c00123e8:	83 c4 10             	add    esp,0x10
c00123eb:	90                   	nop
c00123ec:	83 c4 2c             	add    esp,0x2c
c00123ef:	c3                   	ret    

c00123f0 <etharp_raw>:
c00123f0:	83 ec 2c             	sub    esp,0x2c
c00123f3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00123f7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00123fc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012401:	83 ec 04             	sub    esp,0x4
c0012404:	6a 00                	push   0x0
c0012406:	6a 2a                	push   0x2a
c0012408:	6a 03                	push   0x3
c001240a:	e8 bd 62 ff ff       	call   c00086cc <pbuf_alloc>
c001240f:	83 c4 10             	add    esp,0x10
c0012412:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012416:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001241b:	75 17                	jne    c0012434 <etharp_raw+0x44>
c001241d:	66 a1 44 77 03 c0    	mov    ax,ds:0xc0037744
c0012423:	83 c0 01             	add    eax,0x1
c0012426:	66 a3 44 77 03 c0    	mov    ds:0xc0037744,ax
c001242c:	b0 ff                	mov    al,0xff
c001242e:	e9 85 01 00 00       	jmp    c00125b8 <etharp_raw+0x1c8>
c0012433:	90                   	nop
c0012434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012438:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001243c:	0f b7 c0             	movzx  eax,ax
c001243f:	83 f8 29             	cmp    eax,0x29
c0012442:	77 18                	ja     c001245c <etharp_raw+0x6c>
c0012444:	83 ec 08             	sub    esp,0x8
c0012447:	68 4c 12 03 c0       	push   0xc003124c
c001244c:	68 86 01 03 c0       	push   0xc0030186
c0012451:	e8 82 da 00 00       	call   c001fed8 <CPrintf>
c0012456:	83 c4 10             	add    esp,0x10
c0012459:	8d 76 00             	lea    esi,[esi+0x0]
c001245c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012460:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012463:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012467:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001246b:	83 c0 0e             	add    eax,0xe
c001246e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012472:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0012477:	83 ec 0c             	sub    esp,0xc
c001247a:	50                   	push   eax
c001247b:	e8 68 e7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0012480:	83 c4 10             	add    esp,0x10
c0012483:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012487:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c001248b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001248f:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0012492:	0f b6 c0             	movzx  eax,al
c0012495:	83 f8 06             	cmp    eax,0x6
c0012498:	74 16                	je     c00124b0 <etharp_raw+0xc0>
c001249a:	83 ec 08             	sub    esp,0x8
c001249d:	68 bc 11 03 c0       	push   0xc00311bc
c00124a2:	68 86 01 03 c0       	push   0xc0030186
c00124a7:	e8 2c da 00 00       	call   c001fed8 <CPrintf>
c00124ac:	83 c4 10             	add    esp,0x10
c00124af:	90                   	nop
c00124b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124b4:	83 c0 08             	add    eax,0x8
c00124b7:	83 ec 04             	sub    esp,0x4
c00124ba:	6a 06                	push   0x6
c00124bc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00124c0:	50                   	push   eax
c00124c1:	e8 b4 de fe ff       	call   c000037a <memcpy>
c00124c6:	83 c4 10             	add    esp,0x10
c00124c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124cd:	83 c0 12             	add    eax,0x12
c00124d0:	83 ec 04             	sub    esp,0x4
c00124d3:	6a 06                	push   0x6
c00124d5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124d9:	50                   	push   eax
c00124da:	e8 9b de fe ff       	call   c000037a <memcpy>
c00124df:	83 c4 10             	add    esp,0x10
c00124e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124e6:	83 ec 04             	sub    esp,0x4
c00124e9:	6a 06                	push   0x6
c00124eb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00124ef:	50                   	push   eax
c00124f0:	e8 85 de fe ff       	call   c000037a <memcpy>
c00124f5:	83 c4 10             	add    esp,0x10
c00124f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124fc:	83 c0 06             	add    eax,0x6
c00124ff:	83 ec 04             	sub    esp,0x4
c0012502:	6a 06                	push   0x6
c0012504:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012508:	50                   	push   eax
c0012509:	e8 6c de fe ff       	call   c000037a <memcpy>
c001250e:	83 c4 10             	add    esp,0x10
c0012511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012515:	83 c0 0e             	add    eax,0xe
c0012518:	83 ec 04             	sub    esp,0x4
c001251b:	6a 04                	push   0x4
c001251d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012521:	50                   	push   eax
c0012522:	e8 53 de fe ff       	call   c000037a <memcpy>
c0012527:	83 c4 10             	add    esp,0x10
c001252a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001252e:	83 c0 18             	add    eax,0x18
c0012531:	83 ec 04             	sub    esp,0x4
c0012534:	6a 04                	push   0x4
c0012536:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001253a:	50                   	push   eax
c001253b:	e8 3a de fe ff       	call   c000037a <memcpy>
c0012540:	83 c4 10             	add    esp,0x10
c0012543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012547:	66 c7 00 00 01       	mov    WORD PTR [eax],0x100
c001254c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012550:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0012556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001255a:	c6 40 04 06          	mov    BYTE PTR [eax+0x4],0x6
c001255e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012562:	c6 40 05 04          	mov    BYTE PTR [eax+0x5],0x4
c0012566:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001256a:	66 c7 40 0c 08 06    	mov    WORD PTR [eax+0xc],0x608
c0012570:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012574:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012577:	83 ec 08             	sub    esp,0x8
c001257a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001257e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012582:	ff d0                	call   eax
c0012584:	83 c4 10             	add    esp,0x10
c0012587:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001258b:	66 a1 38 77 03 c0    	mov    ax,ds:0xc0037738
c0012591:	83 c0 01             	add    eax,0x1
c0012594:	66 a3 38 77 03 c0    	mov    ds:0xc0037738,ax
c001259a:	83 ec 0c             	sub    esp,0xc
c001259d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00125a1:	e8 4e 5f ff ff       	call   c00084f4 <pbuf_free>
c00125a6:	83 c4 10             	add    esp,0x10
c00125a9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00125b1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00125b5:	8d 76 00             	lea    esi,[esi+0x0]
c00125b8:	83 c4 2c             	add    esp,0x2c
c00125bb:	c3                   	ret    

c00125bc <etharp_request>:
c00125bc:	83 ec 0c             	sub    esp,0xc
c00125bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125c3:	8d 48 04             	lea    ecx,[eax+0x4]
c00125c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125ca:	8d 50 23             	lea    edx,[eax+0x23]
c00125cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125d1:	83 c0 23             	add    eax,0x23
c00125d4:	6a 01                	push   0x1
c00125d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00125da:	68 1c 13 03 c0       	push   0xc003131c
c00125df:	51                   	push   ecx
c00125e0:	52                   	push   edx
c00125e1:	68 24 13 03 c0       	push   0xc0031324
c00125e6:	50                   	push   eax
c00125e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00125eb:	e8 00 fe ff ff       	call   c00123f0 <etharp_raw>
c00125f0:	83 c4 20             	add    esp,0x20
c00125f3:	83 c4 0c             	add    esp,0xc
c00125f6:	c3                   	ret    
c00125f7:	90                   	nop

c00125f8 <etharp_query>:
c00125f8:	83 ec 2c             	sub    esp,0x2c
c00125fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125ff:	83 c0 23             	add    eax,0x23
c0012602:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012606:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c001260b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001260f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012611:	83 ec 08             	sub    esp,0x8
c0012614:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012618:	50                   	push   eax
c0012619:	e8 ca 19 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c001261e:	83 c4 10             	add    esp,0x10
c0012621:	0f b6 c0             	movzx  eax,al
c0012624:	85 c0                	test   eax,eax
c0012626:	75 24                	jne    c001264c <etharp_query+0x54>
c0012628:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001262c:	8b 00                	mov    eax,DWORD PTR [eax]
c001262e:	25 f0 00 00 00       	and    eax,0xf0
c0012633:	3d e0 00 00 00       	cmp    eax,0xe0
c0012638:	74 12                	je     c001264c <etharp_query+0x54>
c001263a:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001263f:	74 0b                	je     c001264c <etharp_query+0x54>
c0012641:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012645:	8b 00                	mov    eax,DWORD PTR [eax]
c0012647:	85 c0                	test   eax,eax
c0012649:	75 09                	jne    c0012654 <etharp_query+0x5c>
c001264b:	90                   	nop
c001264c:	b0 f2                	mov    al,0xf2
c001264e:	e9 dd 02 00 00       	jmp    c0012930 <etharp_query+0x338>
c0012653:	90                   	nop
c0012654:	83 ec 08             	sub    esp,0x8
c0012657:	6a 01                	push   0x1
c0012659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001265d:	e8 f2 f4 ff ff       	call   c0011b54 <find_entry>
c0012662:	83 c4 10             	add    esp,0x10
c0012665:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012669:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001266e:	85 c0                	test   eax,eax
c0012670:	79 22                	jns    c0012694 <etharp_query+0x9c>
c0012672:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0012677:	74 0f                	je     c0012688 <etharp_query+0x90>
c0012679:	66 a1 44 77 03 c0    	mov    ax,ds:0xc0037744
c001267f:	83 c0 01             	add    eax,0x1
c0012682:	66 a3 44 77 03 c0    	mov    ds:0xc0037744,ax
c0012688:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001268c:	e9 9f 02 00 00       	jmp    c0012930 <etharp_query+0x338>
c0012691:	8d 76 00             	lea    esi,[esi+0x0]
c0012694:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012699:	c1 e0 04             	shl    eax,0x4
c001269c:	05 0e b9 03 c0       	add    eax,0xc003b90e
c00126a1:	8a 00                	mov    al,BYTE PTR [eax]
c00126a3:	0f b6 c0             	movzx  eax,al
c00126a6:	85 c0                	test   eax,eax
c00126a8:	75 12                	jne    c00126bc <etharp_query+0xc4>
c00126aa:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00126af:	c1 e0 04             	shl    eax,0x4
c00126b2:	05 0e b9 03 c0       	add    eax,0xc003b90e
c00126b7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00126ba:	66 90                	xchg   ax,ax
c00126bc:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00126c1:	c1 e0 04             	shl    eax,0x4
c00126c4:	05 0e b9 03 c0       	add    eax,0xc003b90e
c00126c9:	8a 00                	mov    al,BYTE PTR [eax]
c00126cb:	0f b6 c0             	movzx  eax,al
c00126ce:	83 f8 01             	cmp    eax,0x1
c00126d1:	74 2d                	je     c0012700 <etharp_query+0x108>
c00126d3:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00126d8:	c1 e0 04             	shl    eax,0x4
c00126db:	05 0e b9 03 c0       	add    eax,0xc003b90e
c00126e0:	8a 00                	mov    al,BYTE PTR [eax]
c00126e2:	0f b6 c0             	movzx  eax,al
c00126e5:	83 f8 02             	cmp    eax,0x2
c00126e8:	74 16                	je     c0012700 <etharp_query+0x108>
c00126ea:	83 ec 08             	sub    esp,0x8
c00126ed:	68 80 12 03 c0       	push   0xc0031280
c00126f2:	68 86 01 03 c0       	push   0xc0030186
c00126f7:	e8 dc d7 00 00       	call   c001fed8 <CPrintf>
c00126fc:	83 c4 10             	add    esp,0x10
c00126ff:	90                   	nop
c0012700:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012705:	c1 e0 04             	shl    eax,0x4
c0012708:	05 0e b9 03 c0       	add    eax,0xc003b90e
c001270d:	8a 00                	mov    al,BYTE PTR [eax]
c001270f:	0f b6 c0             	movzx  eax,al
c0012712:	83 f8 01             	cmp    eax,0x1
c0012715:	74 09                	je     c0012720 <etharp_query+0x128>
c0012717:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001271c:	75 2a                	jne    c0012748 <etharp_query+0x150>
c001271e:	66 90                	xchg   ax,ax
c0012720:	83 ec 08             	sub    esp,0x8
c0012723:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012727:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001272b:	e8 8c fe ff ff       	call   c00125bc <etharp_request>
c0012730:	83 c4 10             	add    esp,0x10
c0012733:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012737:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001273c:	75 0a                	jne    c0012748 <etharp_query+0x150>
c001273e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012742:	e9 e9 01 00 00       	jmp    c0012930 <etharp_query+0x338>
c0012747:	90                   	nop
c0012748:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001274d:	75 15                	jne    c0012764 <etharp_query+0x16c>
c001274f:	83 ec 08             	sub    esp,0x8
c0012752:	68 fa 05 03 c0       	push   0xc00305fa
c0012757:	68 86 01 03 c0       	push   0xc0030186
c001275c:	e8 77 d7 00 00       	call   c001fed8 <CPrintf>
c0012761:	83 c4 10             	add    esp,0x10
c0012764:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012769:	c1 e0 04             	shl    eax,0x4
c001276c:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0012771:	8a 00                	mov    al,BYTE PTR [eax]
c0012773:	0f b6 c0             	movzx  eax,al
c0012776:	83 f8 02             	cmp    eax,0x2
c0012779:	75 39                	jne    c00127b4 <etharp_query+0x1bc>
c001277b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001277f:	a2 e0 b8 03 c0       	mov    ds:0xc003b8e0,al
c0012784:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012789:	c1 e0 04             	shl    eax,0x4
c001278c:	05 00 b9 03 c0       	add    eax,0xc003b900
c0012791:	83 c0 08             	add    eax,0x8
c0012794:	50                   	push   eax
c0012795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012799:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001279d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00127a1:	e8 da f6 ff ff       	call   c0011e80 <etharp_send_ip>
c00127a6:	83 c4 10             	add    esp,0x10
c00127a9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00127ad:	e9 7a 01 00 00       	jmp    c001292c <etharp_query+0x334>
c00127b2:	66 90                	xchg   ax,ax
c00127b4:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00127b9:	c1 e0 04             	shl    eax,0x4
c00127bc:	05 0e b9 03 c0       	add    eax,0xc003b90e
c00127c1:	8a 00                	mov    al,BYTE PTR [eax]
c00127c3:	0f b6 c0             	movzx  eax,al
c00127c6:	83 f8 01             	cmp    eax,0x1
c00127c9:	0f 85 5d 01 00 00    	jne    c001292c <etharp_query+0x334>
c00127cf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00127d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00127db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127df:	eb 63                	jmp    c0012844 <etharp_query+0x24c>
c00127e1:	8d 76 00             	lea    esi,[esi+0x0]
c00127e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127e8:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00127ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00127f3:	0f b7 d2             	movzx  edx,dx
c00127f6:	0f b7 c0             	movzx  eax,ax
c00127f9:	39 c2                	cmp    edx,eax
c00127fb:	75 1f                	jne    c001281c <etharp_query+0x224>
c00127fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012801:	8b 00                	mov    eax,DWORD PTR [eax]
c0012803:	85 c0                	test   eax,eax
c0012805:	74 15                	je     c001281c <etharp_query+0x224>
c0012807:	83 ec 08             	sub    esp,0x8
c001280a:	68 01 13 03 c0       	push   0xc0031301
c001280f:	68 86 01 03 c0       	push   0xc0030186
c0012814:	e8 bf d6 00 00       	call   c001fed8 <CPrintf>
c0012819:	83 c4 10             	add    esp,0x10
c001281c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012820:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0012823:	0f b6 c0             	movzx  eax,al
c0012826:	83 f8 01             	cmp    eax,0x1
c0012829:	74 0d                	je     c0012838 <etharp_query+0x240>
c001282b:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [esp+0x14],0x1
c0012833:	eb 17                	jmp    c001284c <etharp_query+0x254>
c0012835:	8d 76 00             	lea    esi,[esi+0x0]
c0012838:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001283c:	8b 00                	mov    eax,DWORD PTR [eax]
c001283e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012842:	66 90                	xchg   ax,ax
c0012844:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012849:	75 99                	jne    c00127e4 <etharp_query+0x1ec>
c001284b:	90                   	nop
c001284c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012851:	74 59                	je     c00128ac <etharp_query+0x2b4>
c0012853:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012857:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001285a:	0f b7 c0             	movzx  eax,ax
c001285d:	83 ec 04             	sub    esp,0x4
c0012860:	6a 00                	push   0x0
c0012862:	50                   	push   eax
c0012863:	6a 03                	push   0x3
c0012865:	e8 62 5e ff ff       	call   c00086cc <pbuf_alloc>
c001286a:	83 c4 10             	add    esp,0x10
c001286d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012871:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012876:	74 4c                	je     c00128c4 <etharp_query+0x2cc>
c0012878:	83 ec 08             	sub    esp,0x8
c001287b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001287f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012883:	e8 a4 66 ff ff       	call   c0008f2c <pbuf_copy>
c0012888:	83 c4 10             	add    esp,0x10
c001288b:	0f be c0             	movsx  eax,al
c001288e:	85 c0                	test   eax,eax
c0012890:	74 32                	je     c00128c4 <etharp_query+0x2cc>
c0012892:	83 ec 0c             	sub    esp,0xc
c0012895:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012899:	e8 56 5c ff ff       	call   c00084f4 <pbuf_free>
c001289e:	83 c4 10             	add    esp,0x10
c00128a1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00128a9:	eb 19                	jmp    c00128c4 <etharp_query+0x2cc>
c00128ab:	90                   	nop
c00128ac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00128b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00128b4:	83 ec 0c             	sub    esp,0xc
c00128b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00128bb:	e8 3c 64 ff ff       	call   c0008cfc <pbuf_ref>
c00128c0:	83 c4 10             	add    esp,0x10
c00128c3:	90                   	nop
c00128c4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00128c9:	74 4d                	je     c0012918 <etharp_query+0x320>
c00128cb:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00128d0:	c1 e0 04             	shl    eax,0x4
c00128d3:	05 00 b9 03 c0       	add    eax,0xc003b900
c00128d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00128da:	85 c0                	test   eax,eax
c00128dc:	74 1e                	je     c00128fc <etharp_query+0x304>
c00128de:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00128e3:	c1 e0 04             	shl    eax,0x4
c00128e6:	05 00 b9 03 c0       	add    eax,0xc003b900
c00128eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00128ed:	83 ec 0c             	sub    esp,0xc
c00128f0:	50                   	push   eax
c00128f1:	e8 fe 5b ff ff       	call   c00084f4 <pbuf_free>
c00128f6:	83 c4 10             	add    esp,0x10
c00128f9:	8d 76 00             	lea    esi,[esi+0x0]
c00128fc:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012901:	c1 e0 04             	shl    eax,0x4
c0012904:	8d 90 00 b9 03 c0    	lea    edx,[eax-0x3ffc4700]
c001290a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001290e:	89 02                	mov    DWORD PTR [edx],eax
c0012910:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012915:	eb 15                	jmp    c001292c <etharp_query+0x334>
c0012917:	90                   	nop
c0012918:	66 a1 44 77 03 c0    	mov    ax,ds:0xc0037744
c001291e:	83 c0 01             	add    eax,0x1
c0012921:	66 a3 44 77 03 c0    	mov    ds:0xc0037744,ax
c0012927:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c001292c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012930:	83 c4 2c             	add    esp,0x2c
c0012933:	c3                   	ret    

c0012934 <etharp_output>:
c0012934:	83 ec 1c             	sub    esp,0x1c
c0012937:	83 ec 08             	sub    esp,0x8
c001293a:	6a 0e                	push   0xe
c001293c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012940:	e8 13 5a ff ff       	call   c0008358 <pbuf_header>
c0012945:	83 c4 10             	add    esp,0x10
c0012948:	0f b6 c0             	movzx  eax,al
c001294b:	85 c0                	test   eax,eax
c001294d:	74 19                	je     c0012968 <etharp_output+0x34>
c001294f:	66 a1 2a 77 03 c0    	mov    ax,ds:0xc003772a
c0012955:	83 c0 01             	add    eax,0x1
c0012958:	66 a3 2a 77 03 c0    	mov    ds:0xc003772a,ax
c001295e:	b0 fe                	mov    al,0xfe
c0012960:	e9 8b 01 00 00       	jmp    c0012af0 <etharp_output+0x1bc>
c0012965:	8d 76 00             	lea    esi,[esi+0x0]
c0012968:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012970:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012974:	8b 00                	mov    eax,DWORD PTR [eax]
c0012976:	83 ec 08             	sub    esp,0x8
c0012979:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001297d:	50                   	push   eax
c001297e:	e8 65 16 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0012983:	83 c4 10             	add    esp,0x10
c0012986:	0f b6 c0             	movzx  eax,al
c0012989:	85 c0                	test   eax,eax
c001298b:	74 0f                	je     c001299c <etharp_output+0x68>
c001298d:	c7 44 24 0c 24 13 03 c0 	mov    DWORD PTR [esp+0xc],0xc0031324
c0012995:	e9 3a 01 00 00       	jmp    c0012ad4 <etharp_output+0x1a0>
c001299a:	66 90                	xchg   ax,ax
c001299c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00129a2:	25 f0 00 00 00       	and    eax,0xf0
c00129a7:	3d e0 00 00 00       	cmp    eax,0xe0
c00129ac:	75 42                	jne    c00129f0 <etharp_output+0xbc>
c00129ae:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c00129b3:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c00129b8:	c6 44 24 08 5e       	mov    BYTE PTR [esp+0x8],0x5e
c00129bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129c1:	83 c0 01             	add    eax,0x1
c00129c4:	8a 00                	mov    al,BYTE PTR [eax]
c00129c6:	83 e0 7f             	and    eax,0x7f
c00129c9:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00129cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129d1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c00129d4:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00129d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129dc:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
c00129df:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00129e3:	8d 44 24 06          	lea    eax,[esp+0x6]
c00129e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129eb:	e9 e4 00 00 00       	jmp    c0012ad4 <etharp_output+0x1a0>
c00129f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00129f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129fd:	31 c2                	xor    edx,eax
c00129ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a03:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012a06:	21 d0                	and    eax,edx
c0012a08:	74 3a                	je     c0012a44 <etharp_output+0x110>
c0012a0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a10:	0f b7 c0             	movzx  eax,ax
c0012a13:	3d a9 fe 00 00       	cmp    eax,0xfea9
c0012a18:	74 2a                	je     c0012a44 <etharp_output+0x110>
c0012a1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a1e:	83 c0 0c             	add    eax,0xc
c0012a21:	74 19                	je     c0012a3c <etharp_output+0x108>
c0012a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a27:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012a2a:	85 c0                	test   eax,eax
c0012a2c:	74 0e                	je     c0012a3c <etharp_output+0x108>
c0012a2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a32:	83 c0 0c             	add    eax,0xc
c0012a35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012a39:	eb 09                	jmp    c0012a44 <etharp_output+0x110>
c0012a3b:	90                   	nop
c0012a3c:	b0 fc                	mov    al,0xfc
c0012a3e:	e9 ad 00 00 00       	jmp    c0012af0 <etharp_output+0x1bc>
c0012a43:	90                   	nop
c0012a44:	a0 e0 b8 03 c0       	mov    al,ds:0xc003b8e0
c0012a49:	0f b6 c0             	movzx  eax,al
c0012a4c:	c1 e0 04             	shl    eax,0x4
c0012a4f:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0012a54:	8a 00                	mov    al,BYTE PTR [eax]
c0012a56:	0f b6 c0             	movzx  eax,al
c0012a59:	83 f8 02             	cmp    eax,0x2
c0012a5c:	75 5a                	jne    c0012ab8 <etharp_output+0x184>
c0012a5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a62:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a64:	a0 e0 b8 03 c0       	mov    al,ds:0xc003b8e0
c0012a69:	0f b6 c0             	movzx  eax,al
c0012a6c:	c1 e0 04             	shl    eax,0x4
c0012a6f:	05 04 b9 03 c0       	add    eax,0xc003b904
c0012a74:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a76:	39 c2                	cmp    edx,eax
c0012a78:	75 3e                	jne    c0012ab8 <etharp_output+0x184>
c0012a7a:	66 a1 4e 77 03 c0    	mov    ax,ds:0xc003774e
c0012a80:	83 c0 01             	add    eax,0x1
c0012a83:	66 a3 4e 77 03 c0    	mov    ds:0xc003774e,ax
c0012a89:	a0 e0 b8 03 c0       	mov    al,ds:0xc003b8e0
c0012a8e:	0f b6 c0             	movzx  eax,al
c0012a91:	c1 e0 04             	shl    eax,0x4
c0012a94:	05 00 b9 03 c0       	add    eax,0xc003b900
c0012a99:	8d 50 08             	lea    edx,[eax+0x8]
c0012a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012aa0:	83 c0 23             	add    eax,0x23
c0012aa3:	52                   	push   edx
c0012aa4:	50                   	push   eax
c0012aa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012aa9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012aad:	e8 ce f3 ff ff       	call   c0011e80 <etharp_send_ip>
c0012ab2:	83 c4 10             	add    esp,0x10
c0012ab5:	eb 39                	jmp    c0012af0 <etharp_output+0x1bc>
c0012ab7:	90                   	nop
c0012ab8:	83 ec 04             	sub    esp,0x4
c0012abb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012abf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012ac3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ac7:	e8 2c fb ff ff       	call   c00125f8 <etharp_query>
c0012acc:	83 c4 10             	add    esp,0x10
c0012acf:	eb 1f                	jmp    c0012af0 <etharp_output+0x1bc>
c0012ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0012ad4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ad8:	83 c0 23             	add    eax,0x23
c0012adb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012adf:	50                   	push   eax
c0012ae0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ae4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ae8:	e8 93 f3 ff ff       	call   c0011e80 <etharp_send_ip>
c0012aed:	83 c4 10             	add    esp,0x10
c0012af0:	83 c4 1c             	add    esp,0x1c
c0012af3:	c3                   	ret    

c0012af4 <ethernet_input>:
c0012af4:	83 ec 1c             	sub    esp,0x1c
c0012af7:	66 c7 44 24 0e 0e 00 	mov    WORD PTR [esp+0xe],0xe
c0012afe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b02:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012b06:	0f b7 c0             	movzx  eax,ax
c0012b09:	83 f8 0e             	cmp    eax,0xe
c0012b0c:	77 26                	ja     c0012b34 <ethernet_input+0x40>
c0012b0e:	66 a1 48 77 03 c0    	mov    ax,ds:0xc0037748
c0012b14:	83 c0 01             	add    eax,0x1
c0012b17:	66 a3 48 77 03 c0    	mov    ds:0xc0037748,ax
c0012b1d:	66 a1 3e 77 03 c0    	mov    ax,ds:0xc003773e
c0012b23:	83 c0 01             	add    eax,0x1
c0012b26:	66 a3 3e 77 03 c0    	mov    ds:0xc003773e,ax
c0012b2c:	e9 ef 00 00 00       	jmp    c0012c20 <ethernet_input+0x12c>
c0012b31:	8d 76 00             	lea    esi,[esi+0x0]
c0012b34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b43:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0012b47:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0012b4c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0012b51:	83 f8 08             	cmp    eax,0x8
c0012b54:	74 0e                	je     c0012b64 <ethernet_input+0x70>
c0012b56:	3d 08 06 00 00       	cmp    eax,0x608
c0012b5b:	74 6b                	je     c0012bc8 <ethernet_input+0xd4>
c0012b5d:	e9 92 00 00 00       	jmp    c0012bf4 <ethernet_input+0x100>
c0012b62:	66 90                	xchg   ax,ax
c0012b64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b68:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012b6b:	0f b6 c0             	movzx  eax,al
c0012b6e:	83 e0 20             	and    eax,0x20
c0012b71:	0f 84 a1 00 00 00    	je     c0012c18 <ethernet_input+0x124>
c0012b77:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0012b7c:	f7 d8                	neg    eax
c0012b7e:	98                   	cwde   
c0012b7f:	83 ec 08             	sub    esp,0x8
c0012b82:	50                   	push   eax
c0012b83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b87:	e8 cc 57 ff ff       	call   c0008358 <pbuf_header>
c0012b8c:	83 c4 10             	add    esp,0x10
c0012b8f:	0f b6 c0             	movzx  eax,al
c0012b92:	85 c0                	test   eax,eax
c0012b94:	74 1a                	je     c0012bb0 <ethernet_input+0xbc>
c0012b96:	83 ec 08             	sub    esp,0x8
c0012b99:	68 a8 12 03 c0       	push   0xc00312a8
c0012b9e:	68 86 01 03 c0       	push   0xc0030186
c0012ba3:	e8 30 d3 00 00       	call   c001fed8 <CPrintf>
c0012ba8:	83 c4 10             	add    esp,0x10
c0012bab:	eb 73                	jmp    c0012c20 <ethernet_input+0x12c>
c0012bad:	8d 76 00             	lea    esi,[esi+0x0]
c0012bb0:	83 ec 08             	sub    esp,0x8
c0012bb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012bb7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012bbb:	e8 70 0c 00 00       	call   c0013830 <ip_input>
c0012bc0:	83 c4 10             	add    esp,0x10
c0012bc3:	eb 4f                	jmp    c0012c14 <ethernet_input+0x120>
c0012bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0012bc8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012bcc:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012bcf:	0f b6 c0             	movzx  eax,al
c0012bd2:	83 e0 20             	and    eax,0x20
c0012bd5:	74 45                	je     c0012c1c <ethernet_input+0x128>
c0012bd7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012bdb:	83 c0 23             	add    eax,0x23
c0012bde:	83 ec 04             	sub    esp,0x4
c0012be1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012be5:	50                   	push   eax
c0012be6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012bea:	e8 09 f5 ff ff       	call   c00120f8 <etharp_arp_input>
c0012bef:	83 c4 10             	add    esp,0x10
c0012bf2:	eb 20                	jmp    c0012c14 <ethernet_input+0x120>
c0012bf4:	66 a1 48 77 03 c0    	mov    ax,ds:0xc0037748
c0012bfa:	83 c0 01             	add    eax,0x1
c0012bfd:	66 a3 48 77 03 c0    	mov    ds:0xc0037748,ax
c0012c03:	66 a1 3e 77 03 c0    	mov    ax,ds:0xc003773e
c0012c09:	83 c0 01             	add    eax,0x1
c0012c0c:	66 a3 3e 77 03 c0    	mov    ds:0xc003773e,ax
c0012c12:	eb 0c                	jmp    c0012c20 <ethernet_input+0x12c>
c0012c14:	b0 00                	mov    al,0x0
c0012c16:	eb 1c                	jmp    c0012c34 <ethernet_input+0x140>
c0012c18:	90                   	nop
c0012c19:	eb 05                	jmp    c0012c20 <ethernet_input+0x12c>
c0012c1b:	90                   	nop
c0012c1c:	90                   	nop
c0012c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0012c20:	83 ec 0c             	sub    esp,0xc
c0012c23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c27:	e8 c8 58 ff ff       	call   c00084f4 <pbuf_free>
c0012c2c:	83 c4 10             	add    esp,0x10
c0012c2f:	b0 00                	mov    al,0x0
c0012c31:	8d 76 00             	lea    esi,[esi+0x0]
c0012c34:	83 c4 1c             	add    esp,0x1c
c0012c37:	c3                   	ret    

c0012c38 <icmp_input>:
c0012c38:	83 ec 2c             	sub    esp,0x2c
c0012c3b:	66 a1 82 77 03 c0    	mov    ax,ds:0xc0037782
c0012c41:	83 c0 01             	add    eax,0x1
c0012c44:	66 a3 82 77 03 c0    	mov    ds:0xc0037782,ax
c0012c4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c59:	66 8b 00             	mov    ax,WORD PTR [eax]
c0012c5c:	0f b7 c0             	movzx  eax,ax
c0012c5f:	83 ec 0c             	sub    esp,0xc
c0012c62:	50                   	push   eax
c0012c63:	e8 80 df fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0012c68:	83 c4 10             	add    esp,0x10
c0012c6b:	0f b7 c0             	movzx  eax,ax
c0012c6e:	c1 e8 08             	shr    eax,0x8
c0012c71:	83 e0 0f             	and    eax,0xf
c0012c74:	c1 e0 02             	shl    eax,0x2
c0012c77:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0012c7c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012c81:	f7 d8                	neg    eax
c0012c83:	98                   	cwde   
c0012c84:	83 ec 08             	sub    esp,0x8
c0012c87:	50                   	push   eax
c0012c88:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c8c:	e8 c7 56 ff ff       	call   c0008358 <pbuf_header>
c0012c91:	83 c4 10             	add    esp,0x10
c0012c94:	0f b6 c0             	movzx  eax,al
c0012c97:	85 c0                	test   eax,eax
c0012c99:	0f 85 a9 03 00 00    	jne    c0013048 <icmp_input+0x410>
c0012c9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ca3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012ca6:	0f b7 c0             	movzx  eax,ax
c0012ca9:	83 f8 03             	cmp    eax,0x3
c0012cac:	0f 86 96 03 00 00    	jbe    c0013048 <icmp_input+0x410>
c0012cb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012cb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cb9:	8a 00                	mov    al,BYTE PTR [eax]
c0012cbb:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012cbf:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012cc4:	85 c0                	test   eax,eax
c0012cc6:	0f 84 64 03 00 00    	je     c0013030 <icmp_input+0x3f8>
c0012ccc:	83 f8 08             	cmp    eax,0x8
c0012ccf:	0f 85 3b 03 00 00    	jne    c0013010 <icmp_input+0x3d8>
c0012cd5:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0012cdd:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c0012ce2:	25 f0 00 00 00       	and    eax,0xf0
c0012ce7:	3d e0 00 00 00       	cmp    eax,0xe0
c0012cec:	75 0a                	jne    c0012cf8 <icmp_input+0xc0>
c0012cee:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012cf6:	66 90                	xchg   ax,ax
c0012cf8:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c0012cfd:	83 ec 08             	sub    esp,0x8
c0012d00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d04:	50                   	push   eax
c0012d05:	e8 de 12 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0012d0a:	83 c4 10             	add    esp,0x10
c0012d0d:	0f b6 c0             	movzx  eax,al
c0012d10:	85 c0                	test   eax,eax
c0012d12:	74 08                	je     c0012d1c <icmp_input+0xe4>
c0012d14:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012d1c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012d21:	75 25                	jne    c0012d48 <icmp_input+0x110>
c0012d23:	66 a1 94 77 03 c0    	mov    ax,ds:0xc0037794
c0012d29:	83 c0 01             	add    eax,0x1
c0012d2c:	66 a3 94 77 03 c0    	mov    ds:0xc0037794,ax
c0012d32:	83 ec 0c             	sub    esp,0xc
c0012d35:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d39:	e8 b6 57 ff ff       	call   c00084f4 <pbuf_free>
c0012d3e:	83 c4 10             	add    esp,0x10
c0012d41:	e9 4e 03 00 00       	jmp    c0013094 <icmp_input+0x45c>
c0012d46:	66 90                	xchg   ax,ax
c0012d48:	90                   	nop
c0012d49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d4d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012d50:	0f b7 c0             	movzx  eax,ax
c0012d53:	83 f8 07             	cmp    eax,0x7
c0012d56:	0f 86 f0 02 00 00    	jbe    c001304c <icmp_input+0x414>
c0012d5c:	83 ec 0c             	sub    esp,0xc
c0012d5f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d63:	e8 50 09 00 00       	call   c00136b8 <inet_chksum_pbuf>
c0012d68:	83 c4 10             	add    esp,0x10
c0012d6b:	0f b7 c0             	movzx  eax,ax
c0012d6e:	85 c0                	test   eax,eax
c0012d70:	74 26                	je     c0012d98 <icmp_input+0x160>
c0012d72:	83 ec 0c             	sub    esp,0xc
c0012d75:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d79:	e8 76 57 ff ff       	call   c00084f4 <pbuf_free>
c0012d7e:	83 c4 10             	add    esp,0x10
c0012d81:	66 a1 88 77 03 c0    	mov    ax,ds:0xc0037788
c0012d87:	83 c0 01             	add    eax,0x1
c0012d8a:	66 a3 88 77 03 c0    	mov    ds:0xc0037788,ax
c0012d90:	e9 ff 02 00 00       	jmp    c0013094 <icmp_input+0x45c>
c0012d95:	8d 76 00             	lea    esi,[esi+0x0]
c0012d98:	83 ec 08             	sub    esp,0x8
c0012d9b:	6a 22                	push   0x22
c0012d9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012da1:	e8 b2 55 ff ff       	call   c0008358 <pbuf_header>
c0012da6:	83 c4 10             	add    esp,0x10
c0012da9:	0f b6 c0             	movzx  eax,al
c0012dac:	85 c0                	test   eax,eax
c0012dae:	0f 84 24 01 00 00    	je     c0012ed8 <icmp_input+0x2a0>
c0012db4:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012db9:	83 ec 08             	sub    esp,0x8
c0012dbc:	50                   	push   eax
c0012dbd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012dc1:	e8 92 55 ff ff       	call   c0008358 <pbuf_header>
c0012dc6:	83 c4 10             	add    esp,0x10
c0012dc9:	0f b6 c0             	movzx  eax,al
c0012dcc:	85 c0                	test   eax,eax
c0012dce:	74 1c                	je     c0012dec <icmp_input+0x1b4>
c0012dd0:	83 ec 08             	sub    esp,0x8
c0012dd3:	68 2c 13 03 c0       	push   0xc003132c
c0012dd8:	68 86 01 03 c0       	push   0xc0030186
c0012ddd:	e8 f6 d0 00 00       	call   c001fed8 <CPrintf>
c0012de2:	83 c4 10             	add    esp,0x10
c0012de5:	e9 8a 02 00 00       	jmp    c0013074 <icmp_input+0x43c>
c0012dea:	66 90                	xchg   ax,ax
c0012dec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012df0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012df3:	0f b7 c0             	movzx  eax,ax
c0012df6:	83 ec 04             	sub    esp,0x4
c0012df9:	6a 00                	push   0x0
c0012dfb:	50                   	push   eax
c0012dfc:	6a 02                	push   0x2
c0012dfe:	e8 c9 58 ff ff       	call   c00086cc <pbuf_alloc>
c0012e03:	83 c4 10             	add    esp,0x10
c0012e06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012e0a:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012e0f:	0f 84 5b 02 00 00    	je     c0013070 <icmp_input+0x438>
c0012e15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e19:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012e1d:	0f b7 c0             	movzx  eax,ax
c0012e20:	0f bf 54 24 16       	movsx  edx,WORD PTR [esp+0x16]
c0012e25:	83 c2 08             	add    edx,0x8
c0012e28:	39 d0                	cmp    eax,edx
c0012e2a:	73 18                	jae    c0012e44 <icmp_input+0x20c>
c0012e2c:	83 ec 08             	sub    esp,0x8
c0012e2f:	68 60 13 03 c0       	push   0xc0031360
c0012e34:	68 86 01 03 c0       	push   0xc0030186
c0012e39:	e8 9a d0 00 00       	call   c001fed8 <CPrintf>
c0012e3e:	83 c4 10             	add    esp,0x10
c0012e41:	8d 76 00             	lea    esi,[esi+0x0]
c0012e44:	83 ec 08             	sub    esp,0x8
c0012e47:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e4f:	e8 d8 60 ff ff       	call   c0008f2c <pbuf_copy>
c0012e54:	83 c4 10             	add    esp,0x10
c0012e57:	0f be c0             	movsx  eax,al
c0012e5a:	85 c0                	test   eax,eax
c0012e5c:	74 1a                	je     c0012e78 <icmp_input+0x240>
c0012e5e:	83 ec 08             	sub    esp,0x8
c0012e61:	68 98 13 03 c0       	push   0xc0031398
c0012e66:	68 86 01 03 c0       	push   0xc0030186
c0012e6b:	e8 68 d0 00 00       	call   c001fed8 <CPrintf>
c0012e70:	83 c4 10             	add    esp,0x10
c0012e73:	e9 fc 01 00 00       	jmp    c0013074 <icmp_input+0x43c>
c0012e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e7f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012e83:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012e88:	f7 d8                	neg    eax
c0012e8a:	98                   	cwde   
c0012e8b:	83 ec 08             	sub    esp,0x8
c0012e8e:	50                   	push   eax
c0012e8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e93:	e8 c0 54 ff ff       	call   c0008358 <pbuf_header>
c0012e98:	83 c4 10             	add    esp,0x10
c0012e9b:	0f b6 c0             	movzx  eax,al
c0012e9e:	85 c0                	test   eax,eax
c0012ea0:	74 1a                	je     c0012ebc <icmp_input+0x284>
c0012ea2:	83 ec 08             	sub    esp,0x8
c0012ea5:	68 c0 13 03 c0       	push   0xc00313c0
c0012eaa:	68 86 01 03 c0       	push   0xc0030186
c0012eaf:	e8 24 d0 00 00       	call   c001fed8 <CPrintf>
c0012eb4:	83 c4 10             	add    esp,0x10
c0012eb7:	e9 b8 01 00 00       	jmp    c0013074 <icmp_input+0x43c>
c0012ebc:	83 ec 0c             	sub    esp,0xc
c0012ebf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ec3:	e8 2c 56 ff ff       	call   c00084f4 <pbuf_free>
c0012ec8:	83 c4 10             	add    esp,0x10
c0012ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ecf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012ed3:	eb 37                	jmp    c0012f0c <icmp_input+0x2d4>
c0012ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ed8:	83 ec 08             	sub    esp,0x8
c0012edb:	6a de                	push   0xffffffde
c0012edd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ee1:	e8 72 54 ff ff       	call   c0008358 <pbuf_header>
c0012ee6:	83 c4 10             	add    esp,0x10
c0012ee9:	0f b6 c0             	movzx  eax,al
c0012eec:	85 c0                	test   eax,eax
c0012eee:	74 1c                	je     c0012f0c <icmp_input+0x2d4>
c0012ef0:	83 ec 08             	sub    esp,0x8
c0012ef3:	68 c0 13 03 c0       	push   0xc00313c0
c0012ef8:	68 86 01 03 c0       	push   0xc0030186
c0012efd:	e8 d6 cf 00 00       	call   c001fed8 <CPrintf>
c0012f02:	83 c4 10             	add    esp,0x10
c0012f05:	e9 6a 01 00 00       	jmp    c0013074 <icmp_input+0x43c>
c0012f0a:	66 90                	xchg   ax,ax
c0012f0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012f17:	8b 15 98 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037898
c0012f1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f21:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012f24:	8b 15 90 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037890
c0012f2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f2e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012f31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f35:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f3c:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012f40:	0f b7 c0             	movzx  eax,ax
c0012f43:	3d f6 ff 00 00       	cmp    eax,0xfff6
c0012f48:	76 16                	jbe    c0012f60 <icmp_input+0x328>
c0012f4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f4e:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012f52:	83 c0 09             	add    eax,0x9
c0012f55:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012f59:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012f5d:	eb 15                	jmp    c0012f74 <icmp_input+0x33c>
c0012f5f:	90                   	nop
c0012f60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f64:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012f68:	83 c0 08             	add    eax,0x8
c0012f6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012f6f:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012f73:	90                   	nop
c0012f74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f78:	c6 40 08 ff          	mov    BYTE PTR [eax+0x8],0xff
c0012f7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f80:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0012f86:	83 ec 08             	sub    esp,0x8
c0012f89:	6a 14                	push   0x14
c0012f8b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012f8f:	e8 fc 06 00 00       	call   c0013690 <inet_chksum>
c0012f94:	83 c4 10             	add    esp,0x10
c0012f97:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012f9b:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0012f9f:	66 a1 80 77 03 c0    	mov    ax,ds:0xc0037780
c0012fa5:	83 c0 01             	add    eax,0x1
c0012fa8:	66 a3 80 77 03 c0    	mov    ds:0xc0037780,ax
c0012fae:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012fb3:	83 ec 08             	sub    esp,0x8
c0012fb6:	50                   	push   eax
c0012fb7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012fbb:	e8 98 53 ff ff       	call   c0008358 <pbuf_header>
c0012fc0:	83 c4 10             	add    esp,0x10
c0012fc3:	0f b6 c0             	movzx  eax,al
c0012fc6:	85 c0                	test   eax,eax
c0012fc8:	74 1a                	je     c0012fe4 <icmp_input+0x3ac>
c0012fca:	83 ec 08             	sub    esp,0x8
c0012fcd:	68 a8 12 03 c0       	push   0xc00312a8
c0012fd2:	68 86 01 03 c0       	push   0xc0030186
c0012fd7:	e8 fc ce 00 00       	call   c001fed8 <CPrintf>
c0012fdc:	83 c4 10             	add    esp,0x10
c0012fdf:	eb 53                	jmp    c0013034 <icmp_input+0x3fc>
c0012fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0012fe4:	83 ec 04             	sub    esp,0x4
c0012fe7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012feb:	6a 01                	push   0x1
c0012fed:	6a 00                	push   0x0
c0012fef:	68 ff 00 00 00       	push   0xff
c0012ff4:	6a 00                	push   0x0
c0012ff6:	68 98 78 03 c0       	push   0xc0037898
c0012ffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012fff:	e8 70 0c 00 00       	call   c0013c74 <ip_output_if>
c0013004:	83 c4 20             	add    esp,0x20
c0013007:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001300b:	eb 27                	jmp    c0013034 <icmp_input+0x3fc>
c001300d:	8d 76 00             	lea    esi,[esi+0x0]
c0013010:	66 a1 90 77 03 c0    	mov    ax,ds:0xc0037790
c0013016:	83 c0 01             	add    eax,0x1
c0013019:	66 a3 90 77 03 c0    	mov    ds:0xc0037790,ax
c001301f:	66 a1 86 77 03 c0    	mov    ax,ds:0xc0037786
c0013025:	83 c0 01             	add    eax,0x1
c0013028:	66 a3 86 77 03 c0    	mov    ds:0xc0037786,ax
c001302e:	eb 04                	jmp    c0013034 <icmp_input+0x3fc>
c0013030:	90                   	nop
c0013031:	8d 76 00             	lea    esi,[esi+0x0]
c0013034:	83 ec 0c             	sub    esp,0xc
c0013037:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001303b:	e8 b4 54 ff ff       	call   c00084f4 <pbuf_free>
c0013040:	83 c4 10             	add    esp,0x10
c0013043:	eb 4f                	jmp    c0013094 <icmp_input+0x45c>
c0013045:	8d 76 00             	lea    esi,[esi+0x0]
c0013048:	90                   	nop
c0013049:	eb 05                	jmp    c0013050 <icmp_input+0x418>
c001304b:	90                   	nop
c001304c:	90                   	nop
c001304d:	8d 76 00             	lea    esi,[esi+0x0]
c0013050:	83 ec 0c             	sub    esp,0xc
c0013053:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013057:	e8 98 54 ff ff       	call   c00084f4 <pbuf_free>
c001305c:	83 c4 10             	add    esp,0x10
c001305f:	66 a1 8a 77 03 c0    	mov    ax,ds:0xc003778a
c0013065:	83 c0 01             	add    eax,0x1
c0013068:	66 a3 8a 77 03 c0    	mov    ds:0xc003778a,ax
c001306e:	eb 24                	jmp    c0013094 <icmp_input+0x45c>
c0013070:	90                   	nop
c0013071:	8d 76 00             	lea    esi,[esi+0x0]
c0013074:	83 ec 0c             	sub    esp,0xc
c0013077:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001307b:	e8 74 54 ff ff       	call   c00084f4 <pbuf_free>
c0013080:	83 c4 10             	add    esp,0x10
c0013083:	66 a1 94 77 03 c0    	mov    ax,ds:0xc0037794
c0013089:	83 c0 01             	add    eax,0x1
c001308c:	66 a3 94 77 03 c0    	mov    ds:0xc0037794,ax
c0013092:	90                   	nop
c0013093:	90                   	nop
c0013094:	83 c4 2c             	add    esp,0x2c
c0013097:	c3                   	ret    

c0013098 <icmp_send_response>:
c0013098:	83 ec 2c             	sub    esp,0x2c
c001309b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001309f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00130a3:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00130a7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00130ab:	83 ec 04             	sub    esp,0x4
c00130ae:	6a 00                	push   0x0
c00130b0:	6a 24                	push   0x24
c00130b2:	6a 01                	push   0x1
c00130b4:	e8 13 56 ff ff       	call   c00086cc <pbuf_alloc>
c00130b9:	83 c4 10             	add    esp,0x10
c00130bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00130c0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00130c5:	0f 84 fd 00 00 00    	je     c00131c8 <icmp_send_response+0x130>
c00130cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130cf:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00130d3:	0f b7 c0             	movzx  eax,ax
c00130d6:	83 f8 23             	cmp    eax,0x23
c00130d9:	77 15                	ja     c00130f0 <icmp_send_response+0x58>
c00130db:	83 ec 08             	sub    esp,0x8
c00130de:	68 f4 13 03 c0       	push   0xc00313f4
c00130e3:	68 86 01 03 c0       	push   0xc0030186
c00130e8:	e8 eb cd 00 00       	call   c001fed8 <CPrintf>
c00130ed:	83 c4 10             	add    esp,0x10
c00130f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00130f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00130fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013102:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013106:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001310a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001310e:	88 10                	mov    BYTE PTR [eax],dl
c0013110:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013114:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0013118:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001311b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001311f:	66 c7 40 04 00 00    	mov    WORD PTR [eax+0x4],0x0
c0013125:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013129:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c001312f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013133:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013136:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001313a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001313d:	83 c2 08             	add    edx,0x8
c0013140:	83 ec 04             	sub    esp,0x4
c0013143:	6a 1c                	push   0x1c
c0013145:	50                   	push   eax
c0013146:	52                   	push   edx
c0013147:	e8 2e d2 fe ff       	call   c000037a <memcpy>
c001314c:	83 c4 10             	add    esp,0x10
c001314f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013153:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0013159:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001315d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013161:	0f b7 c0             	movzx  eax,ax
c0013164:	83 ec 08             	sub    esp,0x8
c0013167:	50                   	push   eax
c0013168:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001316c:	e8 1f 05 00 00       	call   c0013690 <inet_chksum>
c0013171:	83 c4 10             	add    esp,0x10
c0013174:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013178:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c001317c:	66 a1 80 77 03 c0    	mov    ax,ds:0xc0037780
c0013182:	83 c0 01             	add    eax,0x1
c0013185:	66 a3 80 77 03 c0    	mov    ds:0xc0037780,ax
c001318b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001318f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013192:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013196:	83 ec 08             	sub    esp,0x8
c0013199:	6a 01                	push   0x1
c001319b:	6a 00                	push   0x0
c001319d:	68 ff 00 00 00       	push   0xff
c00131a2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00131a6:	50                   	push   eax
c00131a7:	6a 00                	push   0x0
c00131a9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00131ad:	e8 92 0d 00 00       	call   c0013f44 <ip_output>
c00131b2:	83 c4 20             	add    esp,0x20
c00131b5:	83 ec 0c             	sub    esp,0xc
c00131b8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00131bc:	e8 33 53 ff ff       	call   c00084f4 <pbuf_free>
c00131c1:	83 c4 10             	add    esp,0x10
c00131c4:	eb 06                	jmp    c00131cc <icmp_send_response+0x134>
c00131c6:	66 90                	xchg   ax,ax
c00131c8:	90                   	nop
c00131c9:	8d 76 00             	lea    esi,[esi+0x0]
c00131cc:	83 c4 2c             	add    esp,0x2c
c00131cf:	c3                   	ret    

c00131d0 <icmp_dest_unreach>:
c00131d0:	83 ec 0c             	sub    esp,0xc
c00131d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131d7:	0f b6 c0             	movzx  eax,al
c00131da:	83 ec 04             	sub    esp,0x4
c00131dd:	50                   	push   eax
c00131de:	6a 03                	push   0x3
c00131e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131e4:	e8 af fe ff ff       	call   c0013098 <icmp_send_response>
c00131e9:	83 c4 10             	add    esp,0x10
c00131ec:	90                   	nop
c00131ed:	83 c4 0c             	add    esp,0xc
c00131f0:	c3                   	ret    
c00131f1:	8d 76 00             	lea    esi,[esi+0x0]

c00131f4 <icmp_time_exceeded>:
c00131f4:	83 ec 0c             	sub    esp,0xc
c00131f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131fb:	0f b6 c0             	movzx  eax,al
c00131fe:	83 ec 04             	sub    esp,0x4
c0013201:	50                   	push   eax
c0013202:	6a 0b                	push   0xb
c0013204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013208:	e8 8b fe ff ff       	call   c0013098 <icmp_send_response>
c001320d:	83 c4 10             	add    esp,0x10
c0013210:	90                   	nop
c0013211:	83 c4 0c             	add    esp,0xc
c0013214:	c3                   	ret    
c0013215:	66 90                	xchg   ax,ax
c0013217:	90                   	nop

c0013218 <lwip_standard_chksum>:
c0013218:	83 ec 2c             	sub    esp,0x2c
c001321b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001321f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013223:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c001322a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013232:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013236:	83 e0 01             	and    eax,0x1
c0013239:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001323d:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013242:	74 24                	je     c0013268 <lwip_standard_chksum+0x50>
c0013244:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013249:	7e 1d                	jle    c0013268 <lwip_standard_chksum+0x50>
c001324b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001324f:	8d 42 01             	lea    eax,[edx+0x1]
c0013252:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013256:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001325a:	83 c0 01             	add    eax,0x1
c001325d:	8a 12                	mov    dl,BYTE PTR [edx]
c001325f:	88 10                	mov    BYTE PTR [eax],dl
c0013261:	83 6c 24 34 01       	sub    DWORD PTR [esp+0x34],0x1
c0013266:	66 90                	xchg   ax,ax
c0013268:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001326c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013270:	eb 1e                	jmp    c0013290 <lwip_standard_chksum+0x78>
c0013272:	66 90                	xchg   ax,ax
c0013274:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013278:	8d 50 02             	lea    edx,[eax+0x2]
c001327b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001327f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013282:	0f b7 c0             	movzx  eax,ax
c0013285:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013289:	83 6c 24 34 02       	sub    DWORD PTR [esp+0x34],0x2
c001328e:	66 90                	xchg   ax,ax
c0013290:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c0013295:	7f dd                	jg     c0013274 <lwip_standard_chksum+0x5c>
c0013297:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001329c:	7e 0e                	jle    c00132ac <lwip_standard_chksum+0x94>
c001329e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00132a2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00132a6:	8a 12                	mov    dl,BYTE PTR [edx]
c00132a8:	88 10                	mov    BYTE PTR [eax],dl
c00132aa:	66 90                	xchg   ax,ax
c00132ac:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00132b1:	0f b7 c0             	movzx  eax,ax
c00132b4:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00132b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132bc:	c1 e8 10             	shr    eax,0x10
c00132bf:	89 c2                	mov    edx,eax
c00132c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132c5:	0f b7 c0             	movzx  eax,ax
c00132c8:	01 d0                	add    eax,edx
c00132ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00132ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132d2:	c1 e8 10             	shr    eax,0x10
c00132d5:	89 c2                	mov    edx,eax
c00132d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132db:	0f b7 c0             	movzx  eax,ax
c00132de:	01 d0                	add    eax,edx
c00132e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00132e4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00132e9:	74 1d                	je     c0013308 <lwip_standard_chksum+0xf0>
c00132eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132ef:	0f b7 c0             	movzx  eax,ax
c00132f2:	83 ec 0c             	sub    esp,0xc
c00132f5:	50                   	push   eax
c00132f6:	e8 ed d8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00132fb:	83 c4 10             	add    esp,0x10
c00132fe:	0f b7 c0             	movzx  eax,ax
c0013301:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013305:	8d 76 00             	lea    esi,[esi+0x0]
c0013308:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001330c:	83 c4 2c             	add    esp,0x2c
c001330f:	c3                   	ret    

c0013310 <inet_chksum_pseudo>:
c0013310:	83 ec 2c             	sub    esp,0x2c
c0013313:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013317:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001331b:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001331f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013324:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001332c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013331:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013335:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013339:	e9 8a 00 00 00       	jmp    c00133c8 <inet_chksum_pseudo+0xb8>
c001333e:	66 90                	xchg   ax,ax
c0013340:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013344:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013348:	0f b7 d0             	movzx  edx,ax
c001334b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001334f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013352:	83 ec 08             	sub    esp,0x8
c0013355:	52                   	push   edx
c0013356:	50                   	push   eax
c0013357:	e8 bc fe ff ff       	call   c0013218 <lwip_standard_chksum>
c001335c:	83 c4 10             	add    esp,0x10
c001335f:	0f b7 c0             	movzx  eax,ax
c0013362:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013366:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001336a:	c1 e8 10             	shr    eax,0x10
c001336d:	89 c2                	mov    edx,eax
c001336f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013373:	0f b7 c0             	movzx  eax,ax
c0013376:	01 d0                	add    eax,edx
c0013378:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001337c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013380:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013384:	83 e0 01             	and    eax,0x1
c0013387:	0f b7 c0             	movzx  eax,ax
c001338a:	85 c0                	test   eax,eax
c001338c:	74 2e                	je     c00133bc <inet_chksum_pseudo+0xac>
c001338e:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0013392:	ba 01 00 00 00       	mov    edx,0x1
c0013397:	29 c2                	sub    edx,eax
c0013399:	89 d0                	mov    eax,edx
c001339b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001339f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133a3:	0f b7 c0             	movzx  eax,ax
c00133a6:	83 ec 0c             	sub    esp,0xc
c00133a9:	50                   	push   eax
c00133aa:	e8 39 d8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00133af:	83 c4 10             	add    esp,0x10
c00133b2:	0f b7 c0             	movzx  eax,ax
c00133b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133b9:	8d 76 00             	lea    esi,[esi+0x0]
c00133bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00133c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00133c6:	66 90                	xchg   ax,ax
c00133c8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00133cd:	0f 85 6d ff ff ff    	jne    c0013340 <inet_chksum_pseudo+0x30>
c00133d3:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00133d8:	85 c0                	test   eax,eax
c00133da:	74 1c                	je     c00133f8 <inet_chksum_pseudo+0xe8>
c00133dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133e0:	0f b7 c0             	movzx  eax,ax
c00133e3:	83 ec 0c             	sub    esp,0xc
c00133e6:	50                   	push   eax
c00133e7:	e8 fc d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00133ec:	83 c4 10             	add    esp,0x10
c00133ef:	0f b7 c0             	movzx  eax,ax
c00133f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133f6:	66 90                	xchg   ax,ax
c00133f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00133fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00133fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013406:	0f b7 c0             	movzx  eax,ax
c0013409:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001340d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013411:	c1 e8 10             	shr    eax,0x10
c0013414:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013418:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001341c:	8b 00                	mov    eax,DWORD PTR [eax]
c001341e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013426:	0f b7 c0             	movzx  eax,ax
c0013429:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001342d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013431:	c1 e8 10             	shr    eax,0x10
c0013434:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013438:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001343d:	83 ec 0c             	sub    esp,0xc
c0013440:	50                   	push   eax
c0013441:	e8 a2 d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013446:	83 c4 10             	add    esp,0x10
c0013449:	0f b7 c0             	movzx  eax,ax
c001344c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013450:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0013455:	83 ec 0c             	sub    esp,0xc
c0013458:	50                   	push   eax
c0013459:	e8 8a d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001345e:	83 c4 10             	add    esp,0x10
c0013461:	0f b7 c0             	movzx  eax,ax
c0013464:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013468:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001346c:	c1 e8 10             	shr    eax,0x10
c001346f:	89 c2                	mov    edx,eax
c0013471:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013475:	0f b7 c0             	movzx  eax,ax
c0013478:	01 d0                	add    eax,edx
c001347a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001347e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013482:	c1 e8 10             	shr    eax,0x10
c0013485:	89 c2                	mov    edx,eax
c0013487:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001348b:	0f b7 c0             	movzx  eax,ax
c001348e:	01 d0                	add    eax,edx
c0013490:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013494:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013498:	f7 d0                	not    eax
c001349a:	83 c4 2c             	add    esp,0x2c
c001349d:	c3                   	ret    
c001349e:	66 90                	xchg   ax,ax

c00134a0 <inet_chksum_pseudo_partial>:
c00134a0:	83 ec 2c             	sub    esp,0x2c
c00134a3:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00134a7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00134ab:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00134af:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00134b3:	66 89 54 24 08       	mov    WORD PTR [esp+0x8],dx
c00134b8:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00134bd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00134c5:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00134ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00134d2:	e9 d9 00 00 00       	jmp    c00135b0 <inet_chksum_pseudo_partial+0x110>
c00134d7:	90                   	nop
c00134d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134dc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00134e0:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00134e5:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c00134ea:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00134ef:	39 c2                	cmp    edx,eax
c00134f1:	76 09                	jbe    c00134fc <inet_chksum_pseudo_partial+0x5c>
c00134f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134f7:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00134fc:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c0013501:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013505:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013508:	83 ec 08             	sub    esp,0x8
c001350b:	52                   	push   edx
c001350c:	50                   	push   eax
c001350d:	e8 06 fd ff ff       	call   c0013218 <lwip_standard_chksum>
c0013512:	83 c4 10             	add    esp,0x10
c0013515:	0f b7 c0             	movzx  eax,ax
c0013518:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001351c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013520:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013524:	89 d1                	mov    ecx,edx
c0013526:	29 c1                	sub    ecx,eax
c0013528:	89 c8                	mov    eax,ecx
c001352a:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c001352f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013534:	3d fe 7f 00 00       	cmp    eax,0x7ffe
c0013539:	76 15                	jbe    c0013550 <inet_chksum_pseudo_partial+0xb0>
c001353b:	83 ec 08             	sub    esp,0x8
c001353e:	68 20 14 03 c0       	push   0xc0031420
c0013543:	68 86 01 03 c0       	push   0xc0030186
c0013548:	e8 8b c9 00 00       	call   c001fed8 <CPrintf>
c001354d:	83 c4 10             	add    esp,0x10
c0013550:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013554:	c1 e8 10             	shr    eax,0x10
c0013557:	89 c2                	mov    edx,eax
c0013559:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001355d:	0f b7 c0             	movzx  eax,ax
c0013560:	01 d0                	add    eax,edx
c0013562:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013566:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001356a:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001356e:	83 e0 01             	and    eax,0x1
c0013571:	0f b7 c0             	movzx  eax,ax
c0013574:	85 c0                	test   eax,eax
c0013576:	74 2c                	je     c00135a4 <inet_chksum_pseudo_partial+0x104>
c0013578:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001357c:	ba 01 00 00 00       	mov    edx,0x1
c0013581:	29 c2                	sub    edx,eax
c0013583:	89 d0                	mov    eax,edx
c0013585:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0013589:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001358d:	0f b7 c0             	movzx  eax,ax
c0013590:	83 ec 0c             	sub    esp,0xc
c0013593:	50                   	push   eax
c0013594:	e8 4f d6 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013599:	83 c4 10             	add    esp,0x10
c001359c:	0f b7 c0             	movzx  eax,ax
c001359f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00135a3:	90                   	nop
c00135a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00135aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00135ae:	66 90                	xchg   ax,ax
c00135b0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00135b5:	74 0d                	je     c00135c4 <inet_chksum_pseudo_partial+0x124>
c00135b7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00135bc:	85 c0                	test   eax,eax
c00135be:	0f 85 14 ff ff ff    	jne    c00134d8 <inet_chksum_pseudo_partial+0x38>
c00135c4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00135c9:	85 c0                	test   eax,eax
c00135cb:	74 1b                	je     c00135e8 <inet_chksum_pseudo_partial+0x148>
c00135cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135d1:	0f b7 c0             	movzx  eax,ax
c00135d4:	83 ec 0c             	sub    esp,0xc
c00135d7:	50                   	push   eax
c00135d8:	e8 0b d6 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00135dd:	83 c4 10             	add    esp,0x10
c00135e0:	0f b7 c0             	movzx  eax,ax
c00135e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00135e7:	90                   	nop
c00135e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00135ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00135ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00135f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135f6:	0f b7 c0             	movzx  eax,ax
c00135f9:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00135fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013601:	c1 e8 10             	shr    eax,0x10
c0013604:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013608:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001360c:	8b 00                	mov    eax,DWORD PTR [eax]
c001360e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013616:	0f b7 c0             	movzx  eax,ax
c0013619:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001361d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013621:	c1 e8 10             	shr    eax,0x10
c0013624:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013628:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001362d:	83 ec 0c             	sub    esp,0xc
c0013630:	50                   	push   eax
c0013631:	e8 b2 d5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013636:	83 c4 10             	add    esp,0x10
c0013639:	0f b7 c0             	movzx  eax,ax
c001363c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013640:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0013645:	83 ec 0c             	sub    esp,0xc
c0013648:	50                   	push   eax
c0013649:	e8 9a d5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001364e:	83 c4 10             	add    esp,0x10
c0013651:	0f b7 c0             	movzx  eax,ax
c0013654:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013658:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001365c:	c1 e8 10             	shr    eax,0x10
c001365f:	89 c2                	mov    edx,eax
c0013661:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013665:	0f b7 c0             	movzx  eax,ax
c0013668:	01 d0                	add    eax,edx
c001366a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001366e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013672:	c1 e8 10             	shr    eax,0x10
c0013675:	89 c2                	mov    edx,eax
c0013677:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001367b:	0f b7 c0             	movzx  eax,ax
c001367e:	01 d0                	add    eax,edx
c0013680:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013684:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013688:	f7 d0                	not    eax
c001368a:	83 c4 2c             	add    esp,0x2c
c001368d:	c3                   	ret    
c001368e:	66 90                	xchg   ax,ax

c0013690 <inet_chksum>:
c0013690:	83 ec 1c             	sub    esp,0x1c
c0013693:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013697:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001369c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00136a1:	83 ec 08             	sub    esp,0x8
c00136a4:	50                   	push   eax
c00136a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00136a9:	e8 6a fb ff ff       	call   c0013218 <lwip_standard_chksum>
c00136ae:	83 c4 10             	add    esp,0x10
c00136b1:	f7 d0                	not    eax
c00136b3:	83 c4 1c             	add    esp,0x1c
c00136b6:	c3                   	ret    
c00136b7:	90                   	nop

c00136b8 <inet_chksum_pbuf>:
c00136b8:	83 ec 1c             	sub    esp,0x1c
c00136bb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00136c3:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c00136c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00136d0:	e9 8b 00 00 00       	jmp    c0013760 <inet_chksum_pbuf+0xa8>
c00136d5:	8d 76 00             	lea    esi,[esi+0x0]
c00136d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00136dc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00136e0:	0f b7 d0             	movzx  edx,ax
c00136e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00136e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136ea:	83 ec 08             	sub    esp,0x8
c00136ed:	52                   	push   edx
c00136ee:	50                   	push   eax
c00136ef:	e8 24 fb ff ff       	call   c0013218 <lwip_standard_chksum>
c00136f4:	83 c4 10             	add    esp,0x10
c00136f7:	0f b7 c0             	movzx  eax,ax
c00136fa:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00136fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013702:	c1 e8 10             	shr    eax,0x10
c0013705:	89 c2                	mov    edx,eax
c0013707:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001370b:	0f b7 c0             	movzx  eax,ax
c001370e:	01 d0                	add    eax,edx
c0013710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013714:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013718:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001371c:	83 e0 01             	and    eax,0x1
c001371f:	0f b7 c0             	movzx  eax,ax
c0013722:	85 c0                	test   eax,eax
c0013724:	74 2e                	je     c0013754 <inet_chksum_pbuf+0x9c>
c0013726:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001372a:	ba 01 00 00 00       	mov    edx,0x1
c001372f:	29 c2                	sub    edx,eax
c0013731:	89 d0                	mov    eax,edx
c0013733:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013737:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001373b:	0f b7 c0             	movzx  eax,ax
c001373e:	83 ec 0c             	sub    esp,0xc
c0013741:	50                   	push   eax
c0013742:	e8 a1 d4 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013747:	83 c4 10             	add    esp,0x10
c001374a:	0f b7 c0             	movzx  eax,ax
c001374d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013751:	8d 76 00             	lea    esi,[esi+0x0]
c0013754:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013758:	8b 00                	mov    eax,DWORD PTR [eax]
c001375a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001375e:	66 90                	xchg   ax,ax
c0013760:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013765:	0f 85 6d ff ff ff    	jne    c00136d8 <inet_chksum_pbuf+0x20>
c001376b:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0013770:	85 c0                	test   eax,eax
c0013772:	74 1c                	je     c0013790 <inet_chksum_pbuf+0xd8>
c0013774:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013778:	0f b7 c0             	movzx  eax,ax
c001377b:	83 ec 0c             	sub    esp,0xc
c001377e:	50                   	push   eax
c001377f:	e8 64 d4 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013784:	83 c4 10             	add    esp,0x10
c0013787:	0f b7 c0             	movzx  eax,ax
c001378a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001378e:	66 90                	xchg   ax,ax
c0013790:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013794:	f7 d0                	not    eax
c0013796:	83 c4 1c             	add    esp,0x1c
c0013799:	c3                   	ret    
c001379a:	66 90                	xchg   ax,ax

c001379c <ip_route>:
c001379c:	83 ec 10             	sub    esp,0x10
c001379f:	a1 10 77 03 c0       	mov    eax,ds:0xc0037710
c00137a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137a8:	eb 42                	jmp    c00137ec <ip_route+0x50>
c00137aa:	66 90                	xchg   ax,ax
c00137ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137b0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00137b3:	83 e0 01             	and    eax,0x1
c00137b6:	0f b6 c0             	movzx  eax,al
c00137b9:	85 c0                	test   eax,eax
c00137bb:	74 23                	je     c00137e0 <ip_route+0x44>
c00137bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137c1:	8b 10                	mov    edx,DWORD PTR [eax]
c00137c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00137ca:	31 c2                	xor    edx,eax
c00137cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00137d3:	21 d0                	and    eax,edx
c00137d5:	75 09                	jne    c00137e0 <ip_route+0x44>
c00137d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137db:	eb 4f                	jmp    c001382c <ip_route+0x90>
c00137dd:	8d 76 00             	lea    esi,[esi+0x0]
c00137e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00137e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137ea:	66 90                	xchg   ax,ax
c00137ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00137f1:	75 b9                	jne    c00137ac <ip_route+0x10>
c00137f3:	a1 14 77 03 c0       	mov    eax,ds:0xc0037714
c00137f8:	85 c0                	test   eax,eax
c00137fa:	74 10                	je     c001380c <ip_route+0x70>
c00137fc:	a1 14 77 03 c0       	mov    eax,ds:0xc0037714
c0013801:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013804:	0f b6 c0             	movzx  eax,al
c0013807:	83 e0 01             	and    eax,0x1
c001380a:	75 18                	jne    c0013824 <ip_route+0x88>
c001380c:	66 a1 76 77 03 c0    	mov    ax,ds:0xc0037776
c0013812:	83 c0 01             	add    eax,0x1
c0013815:	66 a3 76 77 03 c0    	mov    ds:0xc0037776,ax
c001381b:	b8 00 00 00 00       	mov    eax,0x0
c0013820:	eb 0a                	jmp    c001382c <ip_route+0x90>
c0013822:	66 90                	xchg   ax,ax
c0013824:	a1 14 77 03 c0       	mov    eax,ds:0xc0037714
c0013829:	8d 76 00             	lea    esi,[esi+0x0]
c001382c:	83 c4 10             	add    esp,0x10
c001382f:	c3                   	ret    

c0013830 <ip_input>:
c0013830:	83 ec 1c             	sub    esp,0x1c
c0013833:	66 a1 6a 77 03 c0    	mov    ax,ds:0xc003776a
c0013839:	83 c0 01             	add    eax,0x1
c001383c:	66 a3 6a 77 03 c0    	mov    ds:0xc003776a,ax
c0013842:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013846:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013849:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001384d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013851:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013854:	0f b7 c0             	movzx  eax,ax
c0013857:	83 ec 0c             	sub    esp,0xc
c001385a:	50                   	push   eax
c001385b:	e8 88 d3 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013860:	83 c4 10             	add    esp,0x10
c0013863:	0f b7 c0             	movzx  eax,ax
c0013866:	c1 e8 0c             	shr    eax,0xc
c0013869:	0f b7 c0             	movzx  eax,ax
c001386c:	83 f8 04             	cmp    eax,0x4
c001386f:	74 37                	je     c00138a8 <ip_input+0x78>
c0013871:	83 ec 0c             	sub    esp,0xc
c0013874:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013878:	e8 77 4c ff ff       	call   c00084f4 <pbuf_free>
c001387d:	83 c4 10             	add    esp,0x10
c0013880:	66 a1 7c 77 03 c0    	mov    ax,ds:0xc003777c
c0013886:	83 c0 01             	add    eax,0x1
c0013889:	66 a3 7c 77 03 c0    	mov    ds:0xc003777c,ax
c001388f:	66 a1 6e 77 03 c0    	mov    ax,ds:0xc003776e
c0013895:	83 c0 01             	add    eax,0x1
c0013898:	66 a3 6e 77 03 c0    	mov    ds:0xc003776e,ax
c001389e:	b0 00                	mov    al,0x0
c00138a0:	e9 cb 03 00 00       	jmp    c0013c70 <ip_input+0x440>
c00138a5:	8d 76 00             	lea    esi,[esi+0x0]
c00138a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00138af:	0f b7 c0             	movzx  eax,ax
c00138b2:	83 ec 0c             	sub    esp,0xc
c00138b5:	50                   	push   eax
c00138b6:	e8 2d d3 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00138bb:	83 c4 10             	add    esp,0x10
c00138be:	0f b7 c0             	movzx  eax,ax
c00138c1:	c1 e8 08             	shr    eax,0x8
c00138c4:	83 e0 0f             	and    eax,0xf
c00138c7:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c00138cc:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c00138d1:	c1 e0 02             	shl    eax,0x2
c00138d4:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c00138d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138dd:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00138e1:	0f b7 c0             	movzx  eax,ax
c00138e4:	83 ec 0c             	sub    esp,0xc
c00138e7:	50                   	push   eax
c00138e8:	e8 fb d2 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00138ed:	83 c4 10             	add    esp,0x10
c00138f0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00138f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00138f8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00138fc:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0013901:	0f b7 c0             	movzx  eax,ax
c0013904:	39 c2                	cmp    edx,eax
c0013906:	77 14                	ja     c001391c <ip_input+0xec>
c0013908:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001390c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001390f:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c0013913:	0f b7 c0             	movzx  eax,ax
c0013916:	39 c2                	cmp    edx,eax
c0013918:	76 36                	jbe    c0013950 <ip_input+0x120>
c001391a:	66 90                	xchg   ax,ax
c001391c:	83 ec 0c             	sub    esp,0xc
c001391f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013923:	e8 cc 4b ff ff       	call   c00084f4 <pbuf_free>
c0013928:	83 c4 10             	add    esp,0x10
c001392b:	66 a1 72 77 03 c0    	mov    ax,ds:0xc0037772
c0013931:	83 c0 01             	add    eax,0x1
c0013934:	66 a3 72 77 03 c0    	mov    ds:0xc0037772,ax
c001393a:	66 a1 6e 77 03 c0    	mov    ax,ds:0xc003776e
c0013940:	83 c0 01             	add    eax,0x1
c0013943:	66 a3 6e 77 03 c0    	mov    ds:0xc003776e,ax
c0013949:	b0 00                	mov    al,0x0
c001394b:	e9 20 03 00 00       	jmp    c0013c70 <ip_input+0x440>
c0013950:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c0013955:	83 ec 08             	sub    esp,0x8
c0013958:	50                   	push   eax
c0013959:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001395d:	e8 2e fd ff ff       	call   c0013690 <inet_chksum>
c0013962:	83 c4 10             	add    esp,0x10
c0013965:	0f b7 c0             	movzx  eax,ax
c0013968:	85 c0                	test   eax,eax
c001396a:	74 34                	je     c00139a0 <ip_input+0x170>
c001396c:	83 ec 0c             	sub    esp,0xc
c001396f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013973:	e8 7c 4b ff ff       	call   c00084f4 <pbuf_free>
c0013978:	83 c4 10             	add    esp,0x10
c001397b:	66 a1 70 77 03 c0    	mov    ax,ds:0xc0037770
c0013981:	83 c0 01             	add    eax,0x1
c0013984:	66 a3 70 77 03 c0    	mov    ds:0xc0037770,ax
c001398a:	66 a1 6e 77 03 c0    	mov    ax,ds:0xc003776e
c0013990:	83 c0 01             	add    eax,0x1
c0013993:	66 a3 6e 77 03 c0    	mov    ds:0xc003776e,ax
c0013999:	b0 00                	mov    al,0x0
c001399b:	e9 d0 02 00 00       	jmp    c0013c70 <ip_input+0x440>
c00139a0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00139a4:	83 ec 08             	sub    esp,0x8
c00139a7:	50                   	push   eax
c00139a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139ac:	e8 13 51 ff ff       	call   c0008ac4 <pbuf_realloc>
c00139b1:	83 c4 10             	add    esp,0x10
c00139b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00139bb:	a3 98 78 03 c0       	mov    ds:0xc0037898,eax
c00139c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00139c7:	a3 90 78 03 c0       	mov    ds:0xc0037890,eax
c00139cc:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00139d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00139d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00139dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00139e0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00139e3:	83 e0 01             	and    eax,0x1
c00139e6:	0f b6 c0             	movzx  eax,al
c00139e9:	85 c0                	test   eax,eax
c00139eb:	74 43                	je     c0013a30 <ip_input+0x200>
c00139ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00139f1:	83 c0 04             	add    eax,0x4
c00139f4:	74 3a                	je     c0013a30 <ip_input+0x200>
c00139f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00139fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00139fd:	85 c0                	test   eax,eax
c00139ff:	74 2f                	je     c0013a30 <ip_input+0x200>
c0013a01:	8b 15 98 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037898
c0013a07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013a0e:	39 c2                	cmp    edx,eax
c0013a10:	74 66                	je     c0013a78 <ip_input+0x248>
c0013a12:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c0013a17:	83 ec 08             	sub    esp,0x8
c0013a1a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013a1e:	50                   	push   eax
c0013a1f:	e8 c4 05 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0013a24:	83 c4 10             	add    esp,0x10
c0013a27:	0f b6 c0             	movzx  eax,al
c0013a2a:	85 c0                	test   eax,eax
c0013a2c:	75 4a                	jne    c0013a78 <ip_input+0x248>
c0013a2e:	66 90                	xchg   ax,ax
c0013a30:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0013a35:	74 15                	je     c0013a4c <ip_input+0x21c>
c0013a37:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013a3f:	a1 10 77 03 c0       	mov    eax,ds:0xc0037710
c0013a44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a48:	eb 0e                	jmp    c0013a58 <ip_input+0x228>
c0013a4a:	66 90                	xchg   ax,ax
c0013a4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a50:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a56:	66 90                	xchg   ax,ax
c0013a58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a5c:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0013a60:	75 0a                	jne    c0013a6c <ip_input+0x23c>
c0013a62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a66:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a6c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013a71:	0f 85 65 ff ff ff    	jne    c00139dc <ip_input+0x1ac>
c0013a77:	90                   	nop
c0013a78:	a1 90 78 03 c0       	mov    eax,ds:0xc0037890
c0013a7d:	83 ec 08             	sub    esp,0x8
c0013a80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a84:	50                   	push   eax
c0013a85:	e8 5e 05 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0013a8a:	83 c4 10             	add    esp,0x10
c0013a8d:	0f b6 c0             	movzx  eax,al
c0013a90:	85 c0                	test   eax,eax
c0013a92:	75 14                	jne    c0013aa8 <ip_input+0x278>
c0013a94:	a1 90 78 03 c0       	mov    eax,ds:0xc0037890
c0013a99:	25 f0 00 00 00       	and    eax,0xf0
c0013a9e:	3d e0 00 00 00       	cmp    eax,0xe0
c0013aa3:	75 2b                	jne    c0013ad0 <ip_input+0x2a0>
c0013aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0013aa8:	83 ec 0c             	sub    esp,0xc
c0013aab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013aaf:	e8 40 4a ff ff       	call   c00084f4 <pbuf_free>
c0013ab4:	83 c4 10             	add    esp,0x10
c0013ab7:	66 a1 6e 77 03 c0    	mov    ax,ds:0xc003776e
c0013abd:	83 c0 01             	add    eax,0x1
c0013ac0:	66 a3 6e 77 03 c0    	mov    ds:0xc003776e,ax
c0013ac6:	b0 00                	mov    al,0x0
c0013ac8:	e9 a3 01 00 00       	jmp    c0013c70 <ip_input+0x440>
c0013acd:	8d 76 00             	lea    esi,[esi+0x0]
c0013ad0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013ad5:	75 19                	jne    c0013af0 <ip_input+0x2c0>
c0013ad7:	83 ec 0c             	sub    esp,0xc
c0013ada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ade:	e8 11 4a ff ff       	call   c00084f4 <pbuf_free>
c0013ae3:	83 c4 10             	add    esp,0x10
c0013ae6:	b0 00                	mov    al,0x0
c0013ae8:	e9 83 01 00 00       	jmp    c0013c70 <ip_input+0x440>
c0013aed:	8d 76 00             	lea    esi,[esi+0x0]
c0013af0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013af4:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0013af8:	0f b7 c0             	movzx  eax,ax
c0013afb:	25 3f ff 00 00       	and    eax,0xff3f
c0013b00:	74 2e                	je     c0013b30 <ip_input+0x300>
c0013b02:	83 ec 0c             	sub    esp,0xc
c0013b05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b09:	e8 7a 13 00 00       	call   c0014e88 <ip_reass>
c0013b0e:	83 c4 10             	add    esp,0x10
c0013b11:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013b15:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0013b1a:	75 08                	jne    c0013b24 <ip_input+0x2f4>
c0013b1c:	b0 00                	mov    al,0x0
c0013b1e:	e9 4d 01 00 00       	jmp    c0013c70 <ip_input+0x440>
c0013b23:	90                   	nop
c0013b24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013b2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b2f:	90                   	nop
c0013b30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013b34:	a3 94 78 03 c0       	mov    ds:0xc0037894,eax
c0013b39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b3d:	a3 9c 78 03 c0       	mov    ds:0xc003789c,eax
c0013b42:	83 ec 08             	sub    esp,0x8
c0013b45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b4d:	e8 c6 5c ff ff       	call   c0009818 <raw_input>
c0013b52:	83 c4 10             	add    esp,0x10
c0013b55:	0f b6 c0             	movzx  eax,al
c0013b58:	85 c0                	test   eax,eax
c0013b5a:	0f 85 e0 00 00 00    	jne    c0013c40 <ip_input+0x410>
c0013b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b64:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0013b67:	0f b6 c0             	movzx  eax,al
c0013b6a:	83 f8 06             	cmp    eax,0x6
c0013b6d:	74 25                	je     c0013b94 <ip_input+0x364>
c0013b6f:	83 f8 11             	cmp    eax,0x11
c0013b72:	74 08                	je     c0013b7c <ip_input+0x34c>
c0013b74:	83 f8 01             	cmp    eax,0x1
c0013b77:	74 33                	je     c0013bac <ip_input+0x37c>
c0013b79:	eb 49                	jmp    c0013bc4 <ip_input+0x394>
c0013b7b:	90                   	nop
c0013b7c:	83 ec 08             	sub    esp,0x8
c0013b7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b87:	e8 c0 d3 ff ff       	call   c0010f4c <udp_input>
c0013b8c:	83 c4 10             	add    esp,0x10
c0013b8f:	e9 b0 00 00 00       	jmp    c0013c44 <ip_input+0x414>
c0013b94:	83 ec 08             	sub    esp,0x8
c0013b97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b9f:	e8 00 a5 ff ff       	call   c000e0a4 <tcp_input>
c0013ba4:	83 c4 10             	add    esp,0x10
c0013ba7:	e9 98 00 00 00       	jmp    c0013c44 <ip_input+0x414>
c0013bac:	83 ec 08             	sub    esp,0x8
c0013baf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bb7:	e8 7c f0 ff ff       	call   c0012c38 <icmp_input>
c0013bbc:	83 c4 10             	add    esp,0x10
c0013bbf:	e9 80 00 00 00       	jmp    c0013c44 <ip_input+0x414>
c0013bc4:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c0013bc9:	83 ec 08             	sub    esp,0x8
c0013bcc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bd0:	50                   	push   eax
c0013bd1:	e8 12 04 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0013bd6:	83 c4 10             	add    esp,0x10
c0013bd9:	0f b6 c0             	movzx  eax,al
c0013bdc:	85 c0                	test   eax,eax
c0013bde:	75 30                	jne    c0013c10 <ip_input+0x3e0>
c0013be0:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c0013be5:	25 f0 00 00 00       	and    eax,0xf0
c0013bea:	3d e0 00 00 00       	cmp    eax,0xe0
c0013bef:	74 1f                	je     c0013c10 <ip_input+0x3e0>
c0013bf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bf5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013bf9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013bfc:	83 ec 08             	sub    esp,0x8
c0013bff:	6a 02                	push   0x2
c0013c01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c05:	e8 c6 f5 ff ff       	call   c00131d0 <icmp_dest_unreach>
c0013c0a:	83 c4 10             	add    esp,0x10
c0013c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0013c10:	83 ec 0c             	sub    esp,0xc
c0013c13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c17:	e8 d8 48 ff ff       	call   c00084f4 <pbuf_free>
c0013c1c:	83 c4 10             	add    esp,0x10
c0013c1f:	66 a1 78 77 03 c0    	mov    ax,ds:0xc0037778
c0013c25:	83 c0 01             	add    eax,0x1
c0013c28:	66 a3 78 77 03 c0    	mov    ds:0xc0037778,ax
c0013c2e:	66 a1 6e 77 03 c0    	mov    ax,ds:0xc003776e
c0013c34:	83 c0 01             	add    eax,0x1
c0013c37:	66 a3 6e 77 03 c0    	mov    ds:0xc003776e,ax
c0013c3d:	eb 05                	jmp    c0013c44 <ip_input+0x414>
c0013c3f:	90                   	nop
c0013c40:	90                   	nop
c0013c41:	8d 76 00             	lea    esi,[esi+0x0]
c0013c44:	c7 05 94 78 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037894,0x0
c0013c4e:	c7 05 9c 78 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003789c,0x0
c0013c58:	c7 05 90 78 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037890,0x0
c0013c62:	c7 05 98 78 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037898,0x0
c0013c6c:	b0 00                	mov    al,0x0
c0013c6e:	66 90                	xchg   ax,ax
c0013c70:	83 c4 1c             	add    esp,0x1c
c0013c73:	c3                   	ret    

c0013c74 <ip_output_if>:
c0013c74:	83 ec 2c             	sub    esp,0x2c
c0013c77:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013c7b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013c7f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013c83:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013c87:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c0013c8b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013c8f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013c97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c9b:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013c9f:	0f b7 c0             	movzx  eax,ax
c0013ca2:	83 f8 01             	cmp    eax,0x1
c0013ca5:	74 15                	je     c0013cbc <ip_output_if+0x48>
c0013ca7:	83 ec 08             	sub    esp,0x8
c0013caa:	68 2a 14 03 c0       	push   0xc003142a
c0013caf:	68 86 01 03 c0       	push   0xc0030186
c0013cb4:	e8 1f c2 00 00       	call   c001fed8 <CPrintf>
c0013cb9:	83 c4 10             	add    esp,0x10
c0013cbc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0013cc1:	0f 84 ed 01 00 00    	je     c0013eb4 <ip_output_if+0x240>
c0013cc7:	66 c7 44 24 1a 14 00 	mov    WORD PTR [esp+0x1a],0x14
c0013cce:	83 ec 08             	sub    esp,0x8
c0013cd1:	6a 14                	push   0x14
c0013cd3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013cd7:	e8 7c 46 ff ff       	call   c0008358 <pbuf_header>
c0013cdc:	83 c4 10             	add    esp,0x10
c0013cdf:	0f b6 c0             	movzx  eax,al
c0013ce2:	85 c0                	test   eax,eax
c0013ce4:	74 16                	je     c0013cfc <ip_output_if+0x88>
c0013ce6:	66 a1 7c 77 03 c0    	mov    ax,ds:0xc003777c
c0013cec:	83 c0 01             	add    eax,0x1
c0013cef:	66 a3 7c 77 03 c0    	mov    ds:0xc003777c,ax
c0013cf5:	b0 fe                	mov    al,0xfe
c0013cf7:	e9 44 02 00 00       	jmp    c0013f40 <ip_output_if+0x2cc>
c0013cfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013d03:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d0b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013d0f:	0f b7 c0             	movzx  eax,ax
c0013d12:	83 f8 13             	cmp    eax,0x13
c0013d15:	77 15                	ja     c0013d2c <ip_output_if+0xb8>
c0013d17:	83 ec 08             	sub    esp,0x8
c0013d1a:	68 38 14 03 c0       	push   0xc0031438
c0013d1f:	68 86 01 03 c0       	push   0xc0030186
c0013d24:	e8 af c1 00 00       	call   c001fed8 <CPrintf>
c0013d29:	83 c4 10             	add    esp,0x10
c0013d2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d30:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013d34:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0013d37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d3b:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013d3f:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0013d42:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0013d47:	c1 e0 08             	shl    eax,0x8
c0013d4a:	89 c2                	mov    edx,eax
c0013d4c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013d51:	09 d0                	or     eax,edx
c0013d53:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013d5b:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d61:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013d64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d68:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013d6b:	0f b7 c0             	movzx  eax,ax
c0013d6e:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d76:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013d79:	c1 e8 10             	shr    eax,0x10
c0013d7c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d80:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0013d85:	c1 e8 02             	shr    eax,0x2
c0013d88:	0f b7 c0             	movzx  eax,ax
c0013d8b:	c1 e0 08             	shl    eax,0x8
c0013d8e:	80 cc 40             	or     ah,0x40
c0013d91:	89 c2                	mov    edx,eax
c0013d93:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013d98:	09 d0                	or     eax,edx
c0013d9a:	0f b7 c0             	movzx  eax,ax
c0013d9d:	83 ec 0c             	sub    esp,0xc
c0013da0:	50                   	push   eax
c0013da1:	e8 42 ce fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013da6:	83 c4 10             	add    esp,0x10
c0013da9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013dad:	66 89 02             	mov    WORD PTR [edx],ax
c0013db0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013db4:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013db7:	0f b7 c0             	movzx  eax,ax
c0013dba:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013dbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dc2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013dc5:	0f b7 c0             	movzx  eax,ax
c0013dc8:	83 ec 0c             	sub    esp,0xc
c0013dcb:	50                   	push   eax
c0013dcc:	e8 17 ce fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013dd1:	83 c4 10             	add    esp,0x10
c0013dd4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013dd8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0013ddc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013de0:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013de4:	0f b7 c0             	movzx  eax,ax
c0013de7:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013def:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0013df5:	66 a1 a0 b9 03 c0    	mov    ax,ds:0xc003b9a0
c0013dfb:	0f b7 c0             	movzx  eax,ax
c0013dfe:	83 ec 0c             	sub    esp,0xc
c0013e01:	50                   	push   eax
c0013e02:	e8 e1 cd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013e07:	83 c4 10             	add    esp,0x10
c0013e0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013e0e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0013e12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e16:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0013e1a:	0f b7 c0             	movzx  eax,ax
c0013e1d:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e21:	66 a1 a0 b9 03 c0    	mov    ax,ds:0xc003b9a0
c0013e27:	83 c0 01             	add    eax,0x1
c0013e2a:	66 a3 a0 b9 03 c0    	mov    ds:0xc003b9a0,ax
c0013e30:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013e35:	74 0d                	je     c0013e44 <ip_output_if+0x1d0>
c0013e37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0013e3d:	85 c0                	test   eax,eax
c0013e3f:	75 13                	jne    c0013e54 <ip_output_if+0x1e0>
c0013e41:	8d 76 00             	lea    esi,[esi+0x0]
c0013e44:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013e48:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013e4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e4f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013e52:	eb 10                	jmp    c0013e64 <ip_output_if+0x1f0>
c0013e54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e58:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e5e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013e61:	8d 76 00             	lea    esi,[esi+0x0]
c0013e64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e68:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e6b:	0f b7 c0             	movzx  eax,ax
c0013e6e:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e76:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e79:	c1 e8 10             	shr    eax,0x10
c0013e7c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e84:	c1 e8 10             	shr    eax,0x10
c0013e87:	89 c2                	mov    edx,eax
c0013e89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e8d:	0f b7 c0             	movzx  eax,ax
c0013e90:	01 d0                	add    eax,edx
c0013e92:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e9a:	c1 e8 10             	shr    eax,0x10
c0013e9d:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013ea1:	f7 54 24 1c          	not    DWORD PTR [esp+0x1c]
c0013ea5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ea9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013ead:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0013eb1:	eb 21                	jmp    c0013ed4 <ip_output_if+0x260>
c0013eb3:	90                   	nop
c0013eb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013eb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013ebb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ebf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ec3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013ec6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013eca:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013ece:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013ed2:	66 90                	xchg   ax,ax
c0013ed4:	66 a1 68 77 03 c0    	mov    ax,ds:0xc0037768
c0013eda:	83 c0 01             	add    eax,0x1
c0013edd:	66 a3 68 77 03 c0    	mov    ds:0xc0037768,ax
c0013ee3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013ee7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013eea:	0f b7 c0             	movzx  eax,ax
c0013eed:	85 c0                	test   eax,eax
c0013eef:	74 33                	je     c0013f24 <ip_output_if+0x2b0>
c0013ef1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ef5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0013ef8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013efc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013eff:	0f b7 d2             	movzx  edx,dx
c0013f02:	0f b7 c0             	movzx  eax,ax
c0013f05:	39 c2                	cmp    edx,eax
c0013f07:	76 1b                	jbe    c0013f24 <ip_output_if+0x2b0>
c0013f09:	83 ec 04             	sub    esp,0x4
c0013f0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013f10:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013f14:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013f18:	e8 2b 14 00 00       	call   c0015348 <ip_frag>
c0013f1d:	83 c4 10             	add    esp,0x10
c0013f20:	eb 1e                	jmp    c0013f40 <ip_output_if+0x2cc>
c0013f22:	66 90                	xchg   ax,ax
c0013f24:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013f28:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0013f2b:	83 ec 04             	sub    esp,0x4
c0013f2e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013f32:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0013f36:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013f3a:	ff d0                	call   eax
c0013f3c:	83 c4 10             	add    esp,0x10
c0013f3f:	90                   	nop
c0013f40:	83 c4 2c             	add    esp,0x2c
c0013f43:	c3                   	ret    

c0013f44 <ip_output>:
c0013f44:	83 ec 2c             	sub    esp,0x2c
c0013f47:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013f4b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013f4f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013f53:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013f57:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c0013f5b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013f5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f63:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013f67:	0f b7 c0             	movzx  eax,ax
c0013f6a:	83 f8 01             	cmp    eax,0x1
c0013f6d:	74 15                	je     c0013f84 <ip_output+0x40>
c0013f6f:	83 ec 08             	sub    esp,0x8
c0013f72:	68 2a 14 03 c0       	push   0xc003142a
c0013f77:	68 86 01 03 c0       	push   0xc0030186
c0013f7c:	e8 57 bf 00 00       	call   c001fed8 <CPrintf>
c0013f81:	83 c4 10             	add    esp,0x10
c0013f84:	83 ec 0c             	sub    esp,0xc
c0013f87:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013f8b:	e8 0c f8 ff ff       	call   c001379c <ip_route>
c0013f90:	83 c4 10             	add    esp,0x10
c0013f93:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013f97:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013f9c:	75 16                	jne    c0013fb4 <ip_output+0x70>
c0013f9e:	66 a1 76 77 03 c0    	mov    ax,ds:0xc0037776
c0013fa4:	83 c0 01             	add    eax,0x1
c0013fa7:	66 a3 76 77 03 c0    	mov    ds:0xc0037776,ax
c0013fad:	b0 fc                	mov    al,0xfc
c0013faf:	eb 33                	jmp    c0013fe4 <ip_output+0xa0>
c0013fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0013fb4:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013fb9:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013fbe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013fc3:	83 ec 04             	sub    esp,0x4
c0013fc6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013fca:	51                   	push   ecx
c0013fcb:	52                   	push   edx
c0013fcc:	50                   	push   eax
c0013fcd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013fd1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013fd5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013fd9:	e8 96 fc ff ff       	call   c0013c74 <ip_output_if>
c0013fde:	83 c4 20             	add    esp,0x20
c0013fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0013fe4:	83 c4 2c             	add    esp,0x2c
c0013fe7:	c3                   	ret    

c0013fe8 <ip4_addr_isbroadcast>:
c0013fe8:	83 ec 10             	sub    esp,0x10
c0013feb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013fef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ff3:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0013ff8:	74 0a                	je     c0014004 <ip4_addr_isbroadcast+0x1c>
c0013ffa:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013fff:	75 07                	jne    c0014008 <ip4_addr_isbroadcast+0x20>
c0014001:	8d 76 00             	lea    esi,[esi+0x0]
c0014004:	b0 01                	mov    al,0x1
c0014006:	eb 64                	jmp    c001406c <ip4_addr_isbroadcast+0x84>
c0014008:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001400c:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c001400f:	0f b6 c0             	movzx  eax,al
c0014012:	83 e0 02             	and    eax,0x2
c0014015:	75 05                	jne    c001401c <ip4_addr_isbroadcast+0x34>
c0014017:	b0 00                	mov    al,0x0
c0014019:	eb 51                	jmp    c001406c <ip4_addr_isbroadcast+0x84>
c001401b:	90                   	nop
c001401c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014020:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014023:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0014027:	75 07                	jne    c0014030 <ip4_addr_isbroadcast+0x48>
c0014029:	b0 00                	mov    al,0x0
c001402b:	eb 3f                	jmp    c001406c <ip4_addr_isbroadcast+0x84>
c001402d:	8d 76 00             	lea    esi,[esi+0x0]
c0014030:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014034:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001403b:	31 c2                	xor    edx,eax
c001403d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014041:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0014044:	21 d0                	and    eax,edx
c0014046:	75 20                	jne    c0014068 <ip4_addr_isbroadcast+0x80>
c0014048:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001404c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001404f:	f7 d0                	not    eax
c0014051:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0014055:	89 c2                	mov    edx,eax
c0014057:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001405b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001405e:	f7 d0                	not    eax
c0014060:	39 c2                	cmp    edx,eax
c0014062:	75 04                	jne    c0014068 <ip4_addr_isbroadcast+0x80>
c0014064:	b0 01                	mov    al,0x1
c0014066:	eb 04                	jmp    c001406c <ip4_addr_isbroadcast+0x84>
c0014068:	b0 00                	mov    al,0x0
c001406a:	66 90                	xchg   ax,ax
c001406c:	83 c4 10             	add    esp,0x10
c001406f:	c3                   	ret    

c0014070 <ip4_addr_netmask_valid>:
c0014070:	83 ec 1c             	sub    esp,0x1c
c0014073:	83 ec 0c             	sub    esp,0xc
c0014076:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001407a:	e8 8d cb fe ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001407f:	83 c4 10             	add    esp,0x10
c0014082:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014086:	c7 44 24 0c 00 00 00 80 	mov    DWORD PTR [esp+0xc],0x80000000
c001408e:	eb 10                	jmp    c00140a0 <ip4_addr_netmask_valid+0x30>
c0014090:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014094:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0014098:	74 12                	je     c00140ac <ip4_addr_netmask_valid+0x3c>
c001409a:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c001409e:	66 90                	xchg   ax,ax
c00140a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00140a5:	75 e9                	jne    c0014090 <ip4_addr_netmask_valid+0x20>
c00140a7:	eb 1b                	jmp    c00140c4 <ip4_addr_netmask_valid+0x54>
c00140a9:	8d 76 00             	lea    esi,[esi+0x0]
c00140ac:	90                   	nop
c00140ad:	eb 15                	jmp    c00140c4 <ip4_addr_netmask_valid+0x54>
c00140af:	90                   	nop
c00140b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00140b4:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c00140b8:	74 06                	je     c00140c0 <ip4_addr_netmask_valid+0x50>
c00140ba:	b0 00                	mov    al,0x0
c00140bc:	eb 12                	jmp    c00140d0 <ip4_addr_netmask_valid+0x60>
c00140be:	66 90                	xchg   ax,ax
c00140c0:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c00140c4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00140c9:	75 e5                	jne    c00140b0 <ip4_addr_netmask_valid+0x40>
c00140cb:	b0 01                	mov    al,0x1
c00140cd:	8d 76 00             	lea    esi,[esi+0x0]
c00140d0:	83 c4 1c             	add    esp,0x1c
c00140d3:	c3                   	ret    

c00140d4 <ipaddr_aton>:
c00140d4:	83 ec 2c             	sub    esp,0x2c
c00140d7:	8d 44 24 04          	lea    eax,[esp+0x4]
c00140db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00140df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00140e3:	8a 00                	mov    al,BYTE PTR [eax]
c00140e5:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00140e9:	8d 76 00             	lea    esi,[esi+0x0]
c00140ec:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00140f0:	0f b6 c0             	movzx  eax,al
c00140f3:	83 f8 2f             	cmp    eax,0x2f
c00140f6:	76 0c                	jbe    c0014104 <ipaddr_aton+0x30>
c00140f8:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00140fc:	0f b6 c0             	movzx  eax,al
c00140ff:	83 f8 39             	cmp    eax,0x39
c0014102:	76 0c                	jbe    c0014110 <ipaddr_aton+0x3c>
c0014104:	b8 00 00 00 00       	mov    eax,0x0
c0014109:	e9 f2 02 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c001410e:	66 90                	xchg   ax,ax
c0014110:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014118:	c6 44 24 1b 0a       	mov    BYTE PTR [esp+0x1b],0xa
c001411d:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014122:	83 f8 30             	cmp    eax,0x30
c0014125:	75 45                	jne    c001416c <ipaddr_aton+0x98>
c0014127:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c001412c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014130:	8a 00                	mov    al,BYTE PTR [eax]
c0014132:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014136:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001413b:	83 f8 78             	cmp    eax,0x78
c001413e:	74 0c                	je     c001414c <ipaddr_aton+0x78>
c0014140:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014145:	83 f8 58             	cmp    eax,0x58
c0014148:	75 1a                	jne    c0014164 <ipaddr_aton+0x90>
c001414a:	66 90                	xchg   ax,ax
c001414c:	c6 44 24 1b 10       	mov    BYTE PTR [esp+0x1b],0x10
c0014151:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014156:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001415a:	8a 00                	mov    al,BYTE PTR [eax]
c001415c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014160:	eb 0a                	jmp    c001416c <ipaddr_aton+0x98>
c0014162:	66 90                	xchg   ax,ax
c0014164:	c6 44 24 1b 08       	mov    BYTE PTR [esp+0x1b],0x8
c0014169:	8d 76 00             	lea    esi,[esi+0x0]
c001416c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014170:	0f b6 c0             	movzx  eax,al
c0014173:	83 f8 2f             	cmp    eax,0x2f
c0014176:	76 3c                	jbe    c00141b4 <ipaddr_aton+0xe0>
c0014178:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001417c:	0f b6 c0             	movzx  eax,al
c001417f:	83 f8 39             	cmp    eax,0x39
c0014182:	77 30                	ja     c00141b4 <ipaddr_aton+0xe0>
c0014184:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0014189:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c001418e:	89 c2                	mov    edx,eax
c0014190:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014195:	01 d0                	add    eax,edx
c0014197:	83 e8 30             	sub    eax,0x30
c001419a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001419e:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00141a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00141a7:	8a 00                	mov    al,BYTE PTR [eax]
c00141a9:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00141ad:	e9 ae 00 00 00       	jmp    c0014260 <ipaddr_aton+0x18c>
c00141b2:	66 90                	xchg   ax,ax
c00141b4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00141b9:	83 f8 10             	cmp    eax,0x10
c00141bc:	0f 85 a6 00 00 00    	jne    c0014268 <ipaddr_aton+0x194>
c00141c2:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141c6:	0f b6 c0             	movzx  eax,al
c00141c9:	83 f8 2f             	cmp    eax,0x2f
c00141cc:	76 0e                	jbe    c00141dc <ipaddr_aton+0x108>
c00141ce:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141d2:	0f b6 c0             	movzx  eax,al
c00141d5:	83 f8 39             	cmp    eax,0x39
c00141d8:	76 32                	jbe    c001420c <ipaddr_aton+0x138>
c00141da:	66 90                	xchg   ax,ax
c00141dc:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141e0:	0f b6 c0             	movzx  eax,al
c00141e3:	83 f8 60             	cmp    eax,0x60
c00141e6:	76 0c                	jbe    c00141f4 <ipaddr_aton+0x120>
c00141e8:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141ec:	0f b6 c0             	movzx  eax,al
c00141ef:	83 f8 66             	cmp    eax,0x66
c00141f2:	76 18                	jbe    c001420c <ipaddr_aton+0x138>
c00141f4:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141f8:	0f b6 c0             	movzx  eax,al
c00141fb:	83 f8 40             	cmp    eax,0x40
c00141fe:	76 68                	jbe    c0014268 <ipaddr_aton+0x194>
c0014200:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014204:	0f b6 c0             	movzx  eax,al
c0014207:	83 f8 46             	cmp    eax,0x46
c001420a:	77 5c                	ja     c0014268 <ipaddr_aton+0x194>
c001420c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014210:	c1 e0 04             	shl    eax,0x4
c0014213:	89 c2                	mov    edx,eax
c0014215:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001421a:	8d 48 0a             	lea    ecx,[eax+0xa]
c001421d:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014221:	0f b6 c0             	movzx  eax,al
c0014224:	83 f8 60             	cmp    eax,0x60
c0014227:	76 13                	jbe    c001423c <ipaddr_aton+0x168>
c0014229:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001422d:	0f b6 c0             	movzx  eax,al
c0014230:	83 f8 7a             	cmp    eax,0x7a
c0014233:	77 07                	ja     c001423c <ipaddr_aton+0x168>
c0014235:	b8 61 00 00 00       	mov    eax,0x61
c001423a:	eb 08                	jmp    c0014244 <ipaddr_aton+0x170>
c001423c:	b8 41 00 00 00       	mov    eax,0x41
c0014241:	8d 76 00             	lea    esi,[esi+0x0]
c0014244:	29 c1                	sub    ecx,eax
c0014246:	89 c8                	mov    eax,ecx
c0014248:	09 d0                	or     eax,edx
c001424a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001424e:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014253:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014257:	8a 00                	mov    al,BYTE PTR [eax]
c0014259:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001425d:	8d 76 00             	lea    esi,[esi+0x0]
c0014260:	e9 07 ff ff ff       	jmp    c001416c <ipaddr_aton+0x98>
c0014265:	8d 76 00             	lea    esi,[esi+0x0]
c0014268:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001426d:	83 f8 2e             	cmp    eax,0x2e
c0014270:	75 42                	jne    c00142b4 <ipaddr_aton+0x1e0>
c0014272:	8d 44 24 04          	lea    eax,[esp+0x4]
c0014276:	83 c0 0c             	add    eax,0xc
c0014279:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c001427d:	72 0d                	jb     c001428c <ipaddr_aton+0x1b8>
c001427f:	b8 00 00 00 00       	mov    eax,0x0
c0014284:	e9 77 01 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c0014289:	8d 76 00             	lea    esi,[esi+0x0]
c001428c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014290:	8d 50 04             	lea    edx,[eax+0x4]
c0014293:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014297:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001429b:	89 10                	mov    DWORD PTR [eax],edx
c001429d:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00142a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00142a6:	8a 00                	mov    al,BYTE PTR [eax]
c00142a8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00142ac:	e9 3b fe ff ff       	jmp    c00140ec <ipaddr_aton+0x18>
c00142b1:	8d 76 00             	lea    esi,[esi+0x0]
c00142b4:	90                   	nop
c00142b5:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142ba:	85 c0                	test   eax,eax
c00142bc:	74 46                	je     c0014304 <ipaddr_aton+0x230>
c00142be:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142c3:	83 f8 20             	cmp    eax,0x20
c00142c6:	74 3c                	je     c0014304 <ipaddr_aton+0x230>
c00142c8:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142cd:	83 f8 0c             	cmp    eax,0xc
c00142d0:	74 32                	je     c0014304 <ipaddr_aton+0x230>
c00142d2:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142d7:	83 f8 0a             	cmp    eax,0xa
c00142da:	74 28                	je     c0014304 <ipaddr_aton+0x230>
c00142dc:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142e1:	83 f8 0d             	cmp    eax,0xd
c00142e4:	74 1e                	je     c0014304 <ipaddr_aton+0x230>
c00142e6:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142eb:	83 f8 09             	cmp    eax,0x9
c00142ee:	74 14                	je     c0014304 <ipaddr_aton+0x230>
c00142f0:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142f5:	83 f8 0b             	cmp    eax,0xb
c00142f8:	74 0a                	je     c0014304 <ipaddr_aton+0x230>
c00142fa:	b8 00 00 00 00       	mov    eax,0x0
c00142ff:	e9 fc 00 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c0014304:	8d 44 24 04          	lea    eax,[esp+0x4]
c0014308:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001430c:	29 c2                	sub    edx,eax
c001430e:	89 d0                	mov    eax,edx
c0014310:	c1 f8 02             	sar    eax,0x2
c0014313:	83 c0 01             	add    eax,0x1
c0014316:	83 f8 04             	cmp    eax,0x4
c0014319:	0f 87 9d 00 00 00    	ja     c00143bc <ipaddr_aton+0x2e8>
c001431f:	8b 04 85 70 14 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceb90]
c0014326:	ff e0                	jmp    eax
c0014328:	b8 00 00 00 00       	mov    eax,0x0
c001432d:	e9 ce 00 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c0014332:	66 90                	xchg   ax,ax
c0014334:	81 7c 24 1c ff ff ff 00 	cmp    DWORD PTR [esp+0x1c],0xffffff
c001433c:	76 0a                	jbe    c0014348 <ipaddr_aton+0x274>
c001433e:	b8 00 00 00 00       	mov    eax,0x0
c0014343:	e9 b8 00 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c0014348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001434c:	c1 e0 18             	shl    eax,0x18
c001434f:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014353:	e9 80 00 00 00       	jmp    c00143d8 <ipaddr_aton+0x304>
c0014358:	81 7c 24 1c ff ff 00 00 	cmp    DWORD PTR [esp+0x1c],0xffff
c0014360:	76 0a                	jbe    c001436c <ipaddr_aton+0x298>
c0014362:	b8 00 00 00 00       	mov    eax,0x0
c0014367:	e9 94 00 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c001436c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014370:	c1 e0 18             	shl    eax,0x18
c0014373:	89 c2                	mov    edx,eax
c0014375:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014379:	c1 e0 10             	shl    eax,0x10
c001437c:	09 d0                	or     eax,edx
c001437e:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014382:	eb 54                	jmp    c00143d8 <ipaddr_aton+0x304>
c0014384:	81 7c 24 1c ff 00 00 00 	cmp    DWORD PTR [esp+0x1c],0xff
c001438c:	76 0a                	jbe    c0014398 <ipaddr_aton+0x2c4>
c001438e:	b8 00 00 00 00       	mov    eax,0x0
c0014393:	eb 6b                	jmp    c0014400 <ipaddr_aton+0x32c>
c0014395:	8d 76 00             	lea    esi,[esi+0x0]
c0014398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001439c:	c1 e0 18             	shl    eax,0x18
c001439f:	89 c2                	mov    edx,eax
c00143a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00143a5:	c1 e0 10             	shl    eax,0x10
c00143a8:	09 c2                	or     edx,eax
c00143aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00143ae:	c1 e0 08             	shl    eax,0x8
c00143b1:	09 d0                	or     eax,edx
c00143b3:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c00143b7:	eb 1f                	jmp    c00143d8 <ipaddr_aton+0x304>
c00143b9:	8d 76 00             	lea    esi,[esi+0x0]
c00143bc:	83 ec 08             	sub    esp,0x8
c00143bf:	68 65 14 03 c0       	push   0xc0031465
c00143c4:	68 86 01 03 c0       	push   0xc0030186
c00143c9:	e8 0a bb 00 00       	call   c001fed8 <CPrintf>
c00143ce:	83 c4 10             	add    esp,0x10
c00143d1:	eb 05                	jmp    c00143d8 <ipaddr_aton+0x304>
c00143d3:	90                   	nop
c00143d4:	90                   	nop
c00143d5:	8d 76 00             	lea    esi,[esi+0x0]
c00143d8:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00143dd:	74 19                	je     c00143f8 <ipaddr_aton+0x324>
c00143df:	83 ec 0c             	sub    esp,0xc
c00143e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00143e6:	e8 21 c8 fe ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00143eb:	83 c4 10             	add    esp,0x10
c00143ee:	89 c2                	mov    edx,eax
c00143f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00143f4:	89 10                	mov    DWORD PTR [eax],edx
c00143f6:	66 90                	xchg   ax,ax
c00143f8:	b8 01 00 00 00       	mov    eax,0x1
c00143fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014400:	83 c4 2c             	add    esp,0x2c
c0014403:	c3                   	ret    

c0014404 <ipaddr_addr>:
c0014404:	83 ec 1c             	sub    esp,0x1c
c0014407:	83 ec 08             	sub    esp,0x8
c001440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001440e:	50                   	push   eax
c001440f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014413:	e8 bc fc ff ff       	call   c00140d4 <ipaddr_aton>
c0014418:	83 c4 10             	add    esp,0x10
c001441b:	85 c0                	test   eax,eax
c001441d:	74 09                	je     c0014428 <ipaddr_addr+0x24>
c001441f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014423:	eb 0b                	jmp    c0014430 <ipaddr_addr+0x2c>
c0014425:	8d 76 00             	lea    esi,[esi+0x0]
c0014428:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001442d:	8d 76 00             	lea    esi,[esi+0x0]
c0014430:	83 c4 1c             	add    esp,0x1c
c0014433:	c3                   	ret    

c0014434 <ipaddr_ntoa_r>:
c0014434:	83 ec 20             	sub    esp,0x20
c0014437:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001443f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014443:	8b 00                	mov    eax,DWORD PTR [eax]
c0014445:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014449:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001444d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014451:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014455:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014459:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001445e:	e9 f9 00 00 00       	jmp    c001455c <ipaddr_ntoa_r+0x128>
c0014463:	90                   	nop
c0014464:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0014469:	8d 76 00             	lea    esi,[esi+0x0]
c001446c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014470:	8a 00                	mov    al,BYTE PTR [eax]
c0014472:	0f b6 c8             	movzx  ecx,al
c0014475:	ba cd cc cc cc       	mov    edx,0xcccccccd
c001447a:	89 c8                	mov    eax,ecx
c001447c:	f7 e2                	mul    edx
c001447e:	c1 ea 03             	shr    edx,0x3
c0014481:	89 d0                	mov    eax,edx
c0014483:	c1 e0 02             	shl    eax,0x2
c0014486:	01 d0                	add    eax,edx
c0014488:	01 c0                	add    eax,eax
c001448a:	29 c1                	sub    ecx,eax
c001448c:	89 c8                	mov    eax,ecx
c001448e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014492:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014496:	8a 00                	mov    al,BYTE PTR [eax]
c0014498:	0f b6 c0             	movzx  eax,al
c001449b:	ba cd cc cc cc       	mov    edx,0xcccccccd
c00144a0:	f7 e2                	mul    edx
c00144a2:	89 d0                	mov    eax,edx
c00144a4:	c1 e8 03             	shr    eax,0x3
c00144a7:	88 c2                	mov    dl,al
c00144a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144ad:	88 10                	mov    BYTE PTR [eax],dl
c00144af:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00144b3:	83 c0 30             	add    eax,0x30
c00144b6:	88 c1                	mov    cl,al
c00144b8:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c00144bc:	8d 50 01             	lea    edx,[eax+0x1]
c00144bf:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c00144c3:	0f b6 c0             	movzx  eax,al
c00144c6:	88 ca                	mov    dl,cl
c00144c8:	88 54 04 05          	mov    BYTE PTR [esp+eax*1+0x5],dl
c00144cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144d0:	8a 00                	mov    al,BYTE PTR [eax]
c00144d2:	0f b6 c0             	movzx  eax,al
c00144d5:	85 c0                	test   eax,eax
c00144d7:	75 93                	jne    c001446c <ipaddr_ntoa_r+0x38>
c00144d9:	eb 35                	jmp    c0014510 <ipaddr_ntoa_r+0xdc>
c00144db:	90                   	nop
c00144dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144e0:	8d 50 01             	lea    edx,[eax+0x1]
c00144e3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00144e7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00144eb:	7f 0b                	jg     c00144f8 <ipaddr_ntoa_r+0xc4>
c00144ed:	b8 00 00 00 00       	mov    eax,0x0
c00144f2:	e9 85 00 00 00       	jmp    c001457c <ipaddr_ntoa_r+0x148>
c00144f7:	90                   	nop
c00144f8:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00144fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014501:	8d 48 01             	lea    ecx,[eax+0x1]
c0014504:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014508:	8a 54 14 05          	mov    dl,BYTE PTR [esp+edx*1+0x5]
c001450c:	88 10                	mov    BYTE PTR [eax],dl
c001450e:	66 90                	xchg   ax,ax
c0014510:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c0014514:	8d 50 ff             	lea    edx,[eax-0x1]
c0014517:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c001451b:	0f b6 c0             	movzx  eax,al
c001451e:	85 c0                	test   eax,eax
c0014520:	75 ba                	jne    c00144dc <ipaddr_ntoa_r+0xa8>
c0014522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014526:	8d 50 01             	lea    edx,[eax+0x1]
c0014529:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001452d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0014531:	7f 09                	jg     c001453c <ipaddr_ntoa_r+0x108>
c0014533:	b8 00 00 00 00       	mov    eax,0x0
c0014538:	eb 42                	jmp    c001457c <ipaddr_ntoa_r+0x148>
c001453a:	66 90                	xchg   ax,ax
c001453c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014540:	8d 50 01             	lea    edx,[eax+0x1]
c0014543:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014547:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
c001454a:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001454f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0014553:	83 c0 01             	add    eax,0x1
c0014556:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001455a:	66 90                	xchg   ax,ax
c001455c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0014561:	83 f8 03             	cmp    eax,0x3
c0014564:	0f 86 fa fe ff ff    	jbe    c0014464 <ipaddr_ntoa_r+0x30>
c001456a:	83 6c 24 1c 01       	sub    DWORD PTR [esp+0x1c],0x1
c001456f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014573:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014576:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001457a:	66 90                	xchg   ax,ax
c001457c:	83 c4 20             	add    esp,0x20
c001457f:	c3                   	ret    

c0014580 <ipaddr_ntoa>:
c0014580:	6a 10                	push   0x10
c0014582:	68 a4 b9 03 c0       	push   0xc003b9a4
c0014587:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001458b:	e8 a4 fe ff ff       	call   c0014434 <ipaddr_ntoa_r>
c0014590:	83 c4 0c             	add    esp,0xc
c0014593:	c3                   	ret    

c0014594 <ip_reass_dequeue_datagram>:
c0014594:	83 ec 0c             	sub    esp,0xc
c0014597:	a1 b8 b9 03 c0       	mov    eax,ds:0xc003b9b8
c001459c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00145a0:	75 0e                	jne    c00145b0 <ip_reass_dequeue_datagram+0x1c>
c00145a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00145a8:	a3 b8 b9 03 c0       	mov    ds:0xc003b9b8,eax
c00145ad:	eb 29                	jmp    c00145d8 <ip_reass_dequeue_datagram+0x44>
c00145af:	90                   	nop
c00145b0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00145b5:	75 15                	jne    c00145cc <ip_reass_dequeue_datagram+0x38>
c00145b7:	83 ec 08             	sub    esp,0x8
c00145ba:	68 8c 14 03 c0       	push   0xc003148c
c00145bf:	68 86 01 03 c0       	push   0xc0030186
c00145c4:	e8 0f b9 00 00       	call   c001fed8 <CPrintf>
c00145c9:	83 c4 10             	add    esp,0x10
c00145cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00145d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145d6:	89 10                	mov    DWORD PTR [eax],edx
c00145d8:	83 ec 08             	sub    esp,0x8
c00145db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145df:	6a 05                	push   0x5
c00145e1:	e8 52 36 ff ff       	call   c0007c38 <memp_free>
c00145e6:	83 c4 10             	add    esp,0x10
c00145e9:	90                   	nop
c00145ea:	83 c4 0c             	add    esp,0xc
c00145ed:	c3                   	ret    
c00145ee:	66 90                	xchg   ax,ax

c00145f0 <ip_reass_free_complete_datagram>:
c00145f0:	83 ec 2c             	sub    esp,0x2c
c00145f3:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c00145fa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00145fe:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0014602:	75 18                	jne    c001461c <ip_reass_free_complete_datagram+0x2c>
c0014604:	83 ec 08             	sub    esp,0x8
c0014607:	68 a5 14 03 c0       	push   0xc00314a5
c001460c:	68 86 01 03 c0       	push   0xc0030186
c0014611:	e8 c2 b8 00 00       	call   c001fed8 <CPrintf>
c0014616:	83 c4 10             	add    esp,0x10
c0014619:	8d 76 00             	lea    esi,[esi+0x0]
c001461c:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0014621:	74 21                	je     c0014644 <ip_reass_free_complete_datagram+0x54>
c0014623:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014627:	8b 00                	mov    eax,DWORD PTR [eax]
c0014629:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c001462d:	74 15                	je     c0014644 <ip_reass_free_complete_datagram+0x54>
c001462f:	83 ec 08             	sub    esp,0x8
c0014632:	68 b1 14 03 c0       	push   0xc00314b1
c0014637:	68 86 01 03 c0       	push   0xc0030186
c001463c:	e8 97 b8 00 00       	call   c001fed8 <CPrintf>
c0014641:	83 c4 10             	add    esp,0x10
c0014644:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014648:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001464b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001464e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014652:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014656:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001465a:	0f b7 c0             	movzx  eax,ax
c001465d:	85 c0                	test   eax,eax
c001465f:	0f 85 a3 00 00 00    	jne    c0014708 <ip_reass_free_complete_datagram+0x118>
c0014665:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014669:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001466c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014670:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014674:	8b 10                	mov    edx,DWORD PTR [eax]
c0014676:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001467a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001467d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014681:	8d 50 08             	lea    edx,[eax+0x8]
c0014684:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014688:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001468b:	83 ec 04             	sub    esp,0x4
c001468e:	6a 14                	push   0x14
c0014690:	52                   	push   edx
c0014691:	50                   	push   eax
c0014692:	e8 e3 bc fe ff       	call   c000037a <memcpy>
c0014697:	83 c4 10             	add    esp,0x10
c001469a:	83 ec 08             	sub    esp,0x8
c001469d:	6a 01                	push   0x1
c001469f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00146a3:	e8 4c eb ff ff       	call   c00131f4 <icmp_time_exceeded>
c00146a8:	83 c4 10             	add    esp,0x10
c00146ab:	83 ec 0c             	sub    esp,0xc
c00146ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00146b2:	e8 11 46 ff ff       	call   c0008cc8 <pbuf_clen>
c00146b7:	83 c4 10             	add    esp,0x10
c00146ba:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00146be:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00146c3:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00146c8:	01 d0                	add    eax,edx
c00146ca:	3d ff ff 00 00       	cmp    eax,0xffff
c00146cf:	7e 17                	jle    c00146e8 <ip_reass_free_complete_datagram+0xf8>
c00146d1:	83 ec 08             	sub    esp,0x8
c00146d4:	68 c3 14 03 c0       	push   0xc00314c3
c00146d9:	68 86 01 03 c0       	push   0xc0030186
c00146de:	e8 f5 b7 00 00       	call   c001fed8 <CPrintf>
c00146e3:	83 c4 10             	add    esp,0x10
c00146e6:	66 90                	xchg   ax,ax
c00146e8:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00146ed:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c00146f2:	01 d0                	add    eax,edx
c00146f4:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00146f9:	83 ec 0c             	sub    esp,0xc
c00146fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014700:	e8 ef 3d ff ff       	call   c00084f4 <pbuf_free>
c0014705:	83 c4 10             	add    esp,0x10
c0014708:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001470c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001470f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014713:	eb 7b                	jmp    c0014790 <ip_reass_free_complete_datagram+0x1a0>
c0014715:	8d 76 00             	lea    esi,[esi+0x0]
c0014718:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001471c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001471f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014723:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014727:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001472b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001472f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014731:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014735:	83 ec 0c             	sub    esp,0xc
c0014738:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001473c:	e8 87 45 ff ff       	call   c0008cc8 <pbuf_clen>
c0014741:	83 c4 10             	add    esp,0x10
c0014744:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0014748:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c001474d:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014752:	01 d0                	add    eax,edx
c0014754:	3d ff ff 00 00       	cmp    eax,0xffff
c0014759:	7e 15                	jle    c0014770 <ip_reass_free_complete_datagram+0x180>
c001475b:	83 ec 08             	sub    esp,0x8
c001475e:	68 c3 14 03 c0       	push   0xc00314c3
c0014763:	68 86 01 03 c0       	push   0xc0030186
c0014768:	e8 6b b7 00 00       	call   c001fed8 <CPrintf>
c001476d:	83 c4 10             	add    esp,0x10
c0014770:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014775:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c001477a:	01 d0                	add    eax,edx
c001477c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0014781:	83 ec 0c             	sub    esp,0xc
c0014784:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014788:	e8 67 3d ff ff       	call   c00084f4 <pbuf_free>
c001478d:	83 c4 10             	add    esp,0x10
c0014790:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014795:	75 81                	jne    c0014718 <ip_reass_free_complete_datagram+0x128>
c0014797:	83 ec 08             	sub    esp,0x8
c001479a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001479e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00147a2:	e8 ed fd ff ff       	call   c0014594 <ip_reass_dequeue_datagram>
c00147a7:	83 c4 10             	add    esp,0x10
c00147aa:	66 a1 b4 b9 03 c0    	mov    ax,ds:0xc003b9b4
c00147b0:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00147b5:	0f b7 c0             	movzx  eax,ax
c00147b8:	39 c2                	cmp    edx,eax
c00147ba:	76 18                	jbe    c00147d4 <ip_reass_free_complete_datagram+0x1e4>
c00147bc:	83 ec 08             	sub    esp,0x8
c00147bf:	68 e0 14 03 c0       	push   0xc00314e0
c00147c4:	68 86 01 03 c0       	push   0xc0030186
c00147c9:	e8 0a b7 00 00       	call   c001fed8 <CPrintf>
c00147ce:	83 c4 10             	add    esp,0x10
c00147d1:	8d 76 00             	lea    esi,[esi+0x0]
c00147d4:	66 8b 15 b4 b9 03 c0 	mov    dx,WORD PTR ds:0xc003b9b4
c00147db:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00147e0:	89 d1                	mov    ecx,edx
c00147e2:	29 c1                	sub    ecx,eax
c00147e4:	89 c8                	mov    eax,ecx
c00147e6:	66 a3 b4 b9 03 c0    	mov    ds:0xc003b9b4,ax
c00147ec:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00147f1:	83 c4 2c             	add    esp,0x2c
c00147f4:	c3                   	ret    
c00147f5:	8d 76 00             	lea    esi,[esi+0x0]

c00147f8 <ip_reass_tmr>:
c00147f8:	83 ec 1c             	sub    esp,0x1c
c00147fb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014803:	a1 b8 b9 03 c0       	mov    eax,ds:0xc003b9b8
c0014808:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001480c:	eb 62                	jmp    c0014870 <ip_reass_tmr+0x78>
c001480e:	66 90                	xchg   ax,ax
c0014810:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014814:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c0014817:	0f b6 c0             	movzx  eax,al
c001481a:	85 c0                	test   eax,eax
c001481c:	74 2a                	je     c0014848 <ip_reass_tmr+0x50>
c001481e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014822:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c0014825:	83 e8 01             	sub    eax,0x1
c0014828:	88 c2                	mov    dl,al
c001482a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001482e:	88 50 1f             	mov    BYTE PTR [eax+0x1f],dl
c0014831:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014835:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014839:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001483d:	8b 00                	mov    eax,DWORD PTR [eax]
c001483f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014843:	eb 2b                	jmp    c0014870 <ip_reass_tmr+0x78>
c0014845:	8d 76 00             	lea    esi,[esi+0x0]
c0014848:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001484c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014850:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014854:	8b 00                	mov    eax,DWORD PTR [eax]
c0014856:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001485a:	83 ec 08             	sub    esp,0x8
c001485d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014861:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014865:	e8 86 fd ff ff       	call   c00145f0 <ip_reass_free_complete_datagram>
c001486a:	83 c4 10             	add    esp,0x10
c001486d:	8d 76 00             	lea    esi,[esi+0x0]
c0014870:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014875:	75 99                	jne    c0014810 <ip_reass_tmr+0x18>
c0014877:	90                   	nop
c0014878:	83 c4 1c             	add    esp,0x1c
c001487b:	c3                   	ret    

c001487c <ip_reass_remove_oldest_datagram>:
c001487c:	83 ec 2c             	sub    esp,0x2c
c001487f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014887:	90                   	nop
c0014888:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014890:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014898:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00148a0:	a1 b8 b9 03 c0       	mov    eax,ds:0xc003b9b8
c00148a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00148a9:	e9 9a 00 00 00       	jmp    c0014948 <ip_reass_remove_oldest_datagram+0xcc>
c00148ae:	66 90                	xchg   ax,ax
c00148b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148b4:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c00148b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00148be:	39 c2                	cmp    edx,eax
c00148c0:	75 2e                	jne    c00148f0 <ip_reass_remove_oldest_datagram+0x74>
c00148c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148c6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00148c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00148d0:	39 c2                	cmp    edx,eax
c00148d2:	75 1c                	jne    c00148f0 <ip_reass_remove_oldest_datagram+0x74>
c00148d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148d8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00148db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148df:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00148e3:	0f b7 d2             	movzx  edx,dx
c00148e6:	0f b7 c0             	movzx  eax,ax
c00148e9:	39 c2                	cmp    edx,eax
c00148eb:	74 3b                	je     c0014928 <ip_reass_remove_oldest_datagram+0xac>
c00148ed:	8d 76 00             	lea    esi,[esi+0x0]
c00148f0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00148f5:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00148fa:	75 0c                	jne    c0014908 <ip_reass_remove_oldest_datagram+0x8c>
c00148fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014900:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014904:	eb 22                	jmp    c0014928 <ip_reass_remove_oldest_datagram+0xac>
c0014906:	66 90                	xchg   ax,ax
c0014908:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001490c:	8a 50 1f             	mov    dl,BYTE PTR [eax+0x1f]
c001490f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014913:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c0014916:	0f b6 d2             	movzx  edx,dl
c0014919:	0f b6 c0             	movzx  eax,al
c001491c:	39 c2                	cmp    edx,eax
c001491e:	77 08                	ja     c0014928 <ip_reass_remove_oldest_datagram+0xac>
c0014920:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014924:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014928:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001492c:	8b 00                	mov    eax,DWORD PTR [eax]
c001492e:	85 c0                	test   eax,eax
c0014930:	74 0a                	je     c001493c <ip_reass_remove_oldest_datagram+0xc0>
c0014932:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014936:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001493a:	66 90                	xchg   ax,ax
c001493c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014940:	8b 00                	mov    eax,DWORD PTR [eax]
c0014942:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014946:	66 90                	xchg   ax,ax
c0014948:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001494d:	0f 85 5d ff ff ff    	jne    c00148b0 <ip_reass_remove_oldest_datagram+0x34>
c0014953:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014958:	74 22                	je     c001497c <ip_reass_remove_oldest_datagram+0x100>
c001495a:	83 ec 08             	sub    esp,0x8
c001495d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014961:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014965:	e8 86 fc ff ff       	call   c00145f0 <ip_reass_free_complete_datagram>
c001496a:	83 c4 10             	add    esp,0x10
c001496d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014971:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014975:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0014979:	8d 76 00             	lea    esi,[esi+0x0]
c001497c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014980:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0014984:	7d 0e                	jge    c0014994 <ip_reass_remove_oldest_datagram+0x118>
c0014986:	83 7c 24 0c 01       	cmp    DWORD PTR [esp+0xc],0x1
c001498b:	0f 8f f7 fe ff ff    	jg     c0014888 <ip_reass_remove_oldest_datagram+0xc>
c0014991:	8d 76 00             	lea    esi,[esi+0x0]
c0014994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014998:	83 c4 2c             	add    esp,0x2c
c001499b:	c3                   	ret    

c001499c <ip_reass_enqueue_new_datagram>:
c001499c:	83 ec 1c             	sub    esp,0x1c
c001499f:	83 ec 0c             	sub    esp,0xc
c00149a2:	6a 05                	push   0x5
c00149a4:	e8 63 31 ff ff       	call   c0007b0c <memp_malloc>
c00149a9:	83 c4 10             	add    esp,0x10
c00149ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00149b0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00149b5:	75 4d                	jne    c0014a04 <ip_reass_enqueue_new_datagram+0x68>
c00149b7:	83 ec 08             	sub    esp,0x8
c00149ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00149be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00149c2:	e8 b5 fe ff ff       	call   c001487c <ip_reass_remove_oldest_datagram>
c00149c7:	83 c4 10             	add    esp,0x10
c00149ca:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c00149ce:	7f 14                	jg     c00149e4 <ip_reass_enqueue_new_datagram+0x48>
c00149d0:	83 ec 0c             	sub    esp,0xc
c00149d3:	6a 05                	push   0x5
c00149d5:	e8 32 31 ff ff       	call   c0007b0c <memp_malloc>
c00149da:	83 c4 10             	add    esp,0x10
c00149dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00149e1:	8d 76 00             	lea    esi,[esi+0x0]
c00149e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00149e9:	75 19                	jne    c0014a04 <ip_reass_enqueue_new_datagram+0x68>
c00149eb:	66 a1 5c 77 03 c0    	mov    ax,ds:0xc003775c
c00149f1:	83 c0 01             	add    eax,0x1
c00149f4:	66 a3 5c 77 03 c0    	mov    ds:0xc003775c,ax
c00149fa:	b8 00 00 00 00       	mov    eax,0x0
c00149ff:	eb 53                	jmp    c0014a54 <ip_reass_enqueue_new_datagram+0xb8>
c0014a01:	8d 76 00             	lea    esi,[esi+0x0]
c0014a04:	83 ec 04             	sub    esp,0x4
c0014a07:	6a 20                	push   0x20
c0014a09:	6a 00                	push   0x0
c0014a0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014a0f:	e8 dc ba fe ff       	call   c00004f0 <memset>
c0014a14:	83 c4 10             	add    esp,0x10
c0014a17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a1b:	c6 40 1f 03          	mov    BYTE PTR [eax+0x1f],0x3
c0014a1f:	8b 15 b8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9b8
c0014a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a29:	89 10                	mov    DWORD PTR [eax],edx
c0014a2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a2f:	a3 b8 b9 03 c0       	mov    ds:0xc003b9b8,eax
c0014a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a38:	83 c0 08             	add    eax,0x8
c0014a3b:	83 ec 04             	sub    esp,0x4
c0014a3e:	6a 14                	push   0x14
c0014a40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014a44:	50                   	push   eax
c0014a45:	e8 30 b9 fe ff       	call   c000037a <memcpy>
c0014a4a:	83 c4 10             	add    esp,0x10
c0014a4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a51:	8d 76 00             	lea    esi,[esi+0x0]
c0014a54:	83 c4 1c             	add    esp,0x1c
c0014a57:	c3                   	ret    

c0014a58 <ip_reass_chain_frag_into_datagram_and_validate>:
c0014a58:	53                   	push   ebx
c0014a59:	83 ec 28             	sub    esp,0x28
c0014a5c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014a64:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c0014a6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014a70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014a73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a7b:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014a7f:	0f b7 c0             	movzx  eax,ax
c0014a82:	83 ec 0c             	sub    esp,0xc
c0014a85:	50                   	push   eax
c0014a86:	e8 5d c1 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014a8b:	83 c4 10             	add    esp,0x10
c0014a8e:	89 c3                	mov    ebx,eax
c0014a90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a94:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014a97:	0f b7 c0             	movzx  eax,ax
c0014a9a:	83 ec 0c             	sub    esp,0xc
c0014a9d:	50                   	push   eax
c0014a9e:	e8 45 c1 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014aa3:	83 c4 10             	add    esp,0x10
c0014aa6:	0f b7 c0             	movzx  eax,ax
c0014aa9:	c1 e8 08             	shr    eax,0x8
c0014aac:	83 e0 0f             	and    eax,0xf
c0014aaf:	c1 e0 02             	shl    eax,0x2
c0014ab2:	89 d9                	mov    ecx,ebx
c0014ab4:	29 c1                	sub    ecx,eax
c0014ab6:	89 c8                	mov    eax,ecx
c0014ab8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0014abd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014ac1:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014ac5:	0f b7 c0             	movzx  eax,ax
c0014ac8:	83 ec 0c             	sub    esp,0xc
c0014acb:	50                   	push   eax
c0014acc:	e8 17 c1 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014ad1:	83 c4 10             	add    esp,0x10
c0014ad4:	25 ff 1f 00 00       	and    eax,0x1fff
c0014ad9:	c1 e0 03             	shl    eax,0x3
c0014adc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0014ae1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014ae5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014ae8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014aec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014af0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014af6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014afa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014afe:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0014b02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014b06:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0014b0b:	01 d0                	add    eax,edx
c0014b0d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014b11:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0014b15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b20:	e9 13 01 00 00       	jmp    c0014c38 <ip_reass_chain_frag_into_datagram_and_validate+0x1e0>
c0014b25:	8d 76 00             	lea    esi,[esi+0x0]
c0014b28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b2f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b37:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014b3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b3f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b43:	0f b7 d2             	movzx  edx,dx
c0014b46:	0f b7 c0             	movzx  eax,ax
c0014b49:	39 c2                	cmp    edx,eax
c0014b4b:	73 6f                	jae    c0014bbc <ip_reass_chain_frag_into_datagram_and_validate+0x164>
c0014b4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014b55:	89 10                	mov    DWORD PTR [eax],edx
c0014b57:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014b5c:	74 4e                	je     c0014bac <ip_reass_chain_frag_into_datagram_and_validate+0x154>
c0014b5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b62:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014b66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b6a:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014b6e:	0f b7 d2             	movzx  edx,dx
c0014b71:	0f b7 c0             	movzx  eax,ax
c0014b74:	39 c2                	cmp    edx,eax
c0014b76:	0f 82 bc 02 00 00    	jb     c0014e38 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014b7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b80:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014b84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b88:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b8c:	0f b7 d2             	movzx  edx,dx
c0014b8f:	0f b7 c0             	movzx  eax,ax
c0014b92:	39 c2                	cmp    edx,eax
c0014b94:	0f 87 9e 02 00 00    	ja     c0014e38 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014b9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b9e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014ba2:	89 10                	mov    DWORD PTR [eax],edx
c0014ba4:	e9 9b 00 00 00       	jmp    c0014c44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014ba9:	8d 76 00             	lea    esi,[esi+0x0]
c0014bac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bb0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014bb4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014bb7:	e9 88 00 00 00       	jmp    c0014c44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014bbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bc0:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014bc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014bc8:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014bcc:	0f b7 d2             	movzx  edx,dx
c0014bcf:	0f b7 c0             	movzx  eax,ax
c0014bd2:	39 c2                	cmp    edx,eax
c0014bd4:	0f 84 62 02 00 00    	je     c0014e3c <ip_reass_chain_frag_into_datagram_and_validate+0x3e4>
c0014bda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bde:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014be2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014be6:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014bea:	0f b7 d2             	movzx  edx,dx
c0014bed:	0f b7 c0             	movzx  eax,ax
c0014bf0:	39 c2                	cmp    edx,eax
c0014bf2:	0f 82 48 02 00 00    	jb     c0014e40 <ip_reass_chain_frag_into_datagram_and_validate+0x3e8>
c0014bf8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014bfd:	74 25                	je     c0014c24 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014bff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c03:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c0b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014c0f:	0f b7 d2             	movzx  edx,dx
c0014c12:	0f b7 c0             	movzx  eax,ax
c0014c15:	39 c2                	cmp    edx,eax
c0014c17:	74 0b                	je     c0014c24 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014c19:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014c21:	8d 76 00             	lea    esi,[esi+0x0]
c0014c24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c28:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c2a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c36:	66 90                	xchg   ax,ax
c0014c38:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014c3d:	0f 85 e5 fe ff ff    	jne    c0014b28 <ip_reass_chain_frag_into_datagram_and_validate+0xd0>
c0014c43:	90                   	nop
c0014c44:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014c49:	0f 85 95 00 00 00    	jne    c0014ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014c4f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014c54:	74 62                	je     c0014cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x260>
c0014c56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c5a:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c62:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014c66:	0f b7 d2             	movzx  edx,dx
c0014c69:	0f b7 c0             	movzx  eax,ax
c0014c6c:	39 c2                	cmp    edx,eax
c0014c6e:	76 18                	jbe    c0014c88 <ip_reass_chain_frag_into_datagram_and_validate+0x230>
c0014c70:	83 ec 08             	sub    esp,0x8
c0014c73:	68 fb 14 03 c0       	push   0xc00314fb
c0014c78:	68 86 01 03 c0       	push   0xc0030186
c0014c7d:	e8 56 b2 00 00       	call   c001fed8 <CPrintf>
c0014c82:	83 c4 10             	add    esp,0x10
c0014c85:	8d 76 00             	lea    esi,[esi+0x0]
c0014c88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c8c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014c90:	89 10                	mov    DWORD PTR [eax],edx
c0014c92:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c96:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c9e:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014ca2:	0f b7 d2             	movzx  edx,dx
c0014ca5:	0f b7 c0             	movzx  eax,ax
c0014ca8:	39 c2                	cmp    edx,eax
c0014caa:	74 38                	je     c0014ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014cac:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014cb4:	eb 2e                	jmp    c0014ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014cb6:	66 90                	xchg   ax,ax
c0014cb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014cbf:	85 c0                	test   eax,eax
c0014cc1:	74 15                	je     c0014cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
c0014cc3:	83 ec 08             	sub    esp,0x8
c0014cc6:	68 3c 15 03 c0       	push   0xc003153c
c0014ccb:	68 86 01 03 c0       	push   0xc0030186
c0014cd0:	e8 03 b2 00 00       	call   c001fed8 <CPrintf>
c0014cd5:	83 c4 10             	add    esp,0x10
c0014cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cdc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014ce0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014ce3:	90                   	nop
c0014ce4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ce8:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014ceb:	0f b6 c0             	movzx  eax,al
c0014cee:	83 e0 01             	and    eax,0x1
c0014cf1:	0f 84 39 01 00 00    	je     c0014e30 <ip_reass_chain_frag_into_datagram_and_validate+0x3d8>
c0014cf7:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014cfc:	0f 84 26 01 00 00    	je     c0014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014d02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d09:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d0c:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014d10:	0f b7 c0             	movzx  eax,ax
c0014d13:	85 c0                	test   eax,eax
c0014d15:	74 0d                	je     c0014d24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>
c0014d17:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014d1f:	e9 04 01 00 00       	jmp    c0014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014d24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d30:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d36:	eb 44                	jmp    c0014d7c <ip_reass_chain_frag_into_datagram_and_validate+0x324>
c0014d38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014d3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d3f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014d43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d47:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014d4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d4f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014d53:	0f b7 d2             	movzx  edx,dx
c0014d56:	0f b7 c0             	movzx  eax,ax
c0014d59:	39 c2                	cmp    edx,eax
c0014d5b:	74 0b                	je     c0014d68 <ip_reass_chain_frag_into_datagram_and_validate+0x310>
c0014d5d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014d65:	eb 1d                	jmp    c0014d84 <ip_reass_chain_frag_into_datagram_and_validate+0x32c>
c0014d67:	90                   	nop
c0014d68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d6c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d74:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d76:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d7a:	66 90                	xchg   ax,ax
c0014d7c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014d81:	75 b5                	jne    c0014d38 <ip_reass_chain_frag_into_datagram_and_validate+0x2e0>
c0014d83:	90                   	nop
c0014d84:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014d89:	0f 84 99 00 00 00    	je     c0014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014d8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d96:	85 c0                	test   eax,eax
c0014d98:	75 16                	jne    c0014db0 <ip_reass_chain_frag_into_datagram_and_validate+0x358>
c0014d9a:	83 ec 08             	sub    esp,0x8
c0014d9d:	68 19 15 03 c0       	push   0xc0031519
c0014da2:	68 86 01 03 c0       	push   0xc0030186
c0014da7:	e8 2c b1 00 00       	call   c001fed8 <CPrintf>
c0014dac:	83 c4 10             	add    esp,0x10
c0014daf:	90                   	nop
c0014db0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014db4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014db7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014dba:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0014dbe:	75 18                	jne    c0014dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x380>
c0014dc0:	83 ec 08             	sub    esp,0x8
c0014dc3:	68 19 15 03 c0       	push   0xc0031519
c0014dc8:	68 86 01 03 c0       	push   0xc0030186
c0014dcd:	e8 06 b1 00 00       	call   c001fed8 <CPrintf>
c0014dd2:	83 c4 10             	add    esp,0x10
c0014dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0014dd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ddc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dde:	85 c0                	test   eax,eax
c0014de0:	74 16                	je     c0014df8 <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
c0014de2:	83 ec 08             	sub    esp,0x8
c0014de5:	68 74 15 03 c0       	push   0xc0031574
c0014dea:	68 86 01 03 c0       	push   0xc0030186
c0014def:	e8 e4 b0 00 00       	call   c001fed8 <CPrintf>
c0014df4:	83 c4 10             	add    esp,0x10
c0014df7:	90                   	nop
c0014df8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014dfc:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014e00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014e04:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014e07:	0f b7 d2             	movzx  edx,dx
c0014e0a:	0f b7 c0             	movzx  eax,ax
c0014e0d:	39 c2                	cmp    edx,eax
c0014e0f:	74 17                	je     c0014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014e11:	83 ec 08             	sub    esp,0x8
c0014e14:	68 98 15 03 c0       	push   0xc0031598
c0014e19:	68 86 01 03 c0       	push   0xc0030186
c0014e1e:	e8 b5 b0 00 00       	call   c001fed8 <CPrintf>
c0014e23:	83 c4 10             	add    esp,0x10
c0014e26:	66 90                	xchg   ax,ax
c0014e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e2c:	eb 52                	jmp    c0014e80 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014e2e:	66 90                	xchg   ax,ax
c0014e30:	b8 00 00 00 00       	mov    eax,0x0
c0014e35:	eb 49                	jmp    c0014e80 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014e37:	90                   	nop
c0014e38:	90                   	nop
c0014e39:	eb 09                	jmp    c0014e44 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014e3b:	90                   	nop
c0014e3c:	90                   	nop
c0014e3d:	eb 05                	jmp    c0014e44 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014e3f:	90                   	nop
c0014e40:	90                   	nop
c0014e41:	8d 76 00             	lea    esi,[esi+0x0]
c0014e44:	83 ec 0c             	sub    esp,0xc
c0014e47:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014e4b:	e8 78 3e ff ff       	call   c0008cc8 <pbuf_clen>
c0014e50:	83 c4 10             	add    esp,0x10
c0014e53:	66 8b 15 b4 b9 03 c0 	mov    dx,WORD PTR ds:0xc003b9b4
c0014e5a:	0f b6 c0             	movzx  eax,al
c0014e5d:	89 d3                	mov    ebx,edx
c0014e5f:	29 c3                	sub    ebx,eax
c0014e61:	89 d8                	mov    eax,ebx
c0014e63:	66 a3 b4 b9 03 c0    	mov    ds:0xc003b9b4,ax
c0014e69:	83 ec 0c             	sub    esp,0xc
c0014e6c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014e70:	e8 7f 36 ff ff       	call   c00084f4 <pbuf_free>
c0014e75:	83 c4 10             	add    esp,0x10
c0014e78:	b8 00 00 00 00       	mov    eax,0x0
c0014e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0014e80:	83 c4 28             	add    esp,0x28
c0014e83:	5b                   	pop    ebx
c0014e84:	c3                   	ret    
c0014e85:	8d 76 00             	lea    esi,[esi+0x0]

c0014e88 <ip_reass>:
c0014e88:	53                   	push   ebx
c0014e89:	83 ec 28             	sub    esp,0x28
c0014e8c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014e94:	66 a1 52 77 03 c0    	mov    ax,ds:0xc0037752
c0014e9a:	83 c0 01             	add    eax,0x1
c0014e9d:	66 a3 52 77 03 c0    	mov    ds:0xc0037752,ax
c0014ea3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ea7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014eaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014eb2:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014eb5:	0f b7 c0             	movzx  eax,ax
c0014eb8:	83 ec 0c             	sub    esp,0xc
c0014ebb:	50                   	push   eax
c0014ebc:	e8 27 bd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014ec1:	83 c4 10             	add    esp,0x10
c0014ec4:	0f b7 c0             	movzx  eax,ax
c0014ec7:	c1 e8 08             	shr    eax,0x8
c0014eca:	0f b7 c0             	movzx  eax,ax
c0014ecd:	83 e0 0f             	and    eax,0xf
c0014ed0:	c1 e0 02             	shl    eax,0x2
c0014ed3:	83 f8 14             	cmp    eax,0x14
c0014ed6:	74 14                	je     c0014eec <ip_reass+0x64>
c0014ed8:	66 a1 64 77 03 c0    	mov    ax,ds:0xc0037764
c0014ede:	83 c0 01             	add    eax,0x1
c0014ee1:	66 a3 64 77 03 c0    	mov    ds:0xc0037764,ax
c0014ee7:	e9 68 03 00 00       	jmp    c0015254 <ip_reass+0x3cc>
c0014eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ef0:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014ef4:	0f b7 c0             	movzx  eax,ax
c0014ef7:	83 ec 0c             	sub    esp,0xc
c0014efa:	50                   	push   eax
c0014efb:	e8 e8 bc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014f00:	83 c4 10             	add    esp,0x10
c0014f03:	25 ff 1f 00 00       	and    eax,0x1fff
c0014f08:	c1 e0 03             	shl    eax,0x3
c0014f0b:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0014f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f14:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014f18:	0f b7 c0             	movzx  eax,ax
c0014f1b:	83 ec 0c             	sub    esp,0xc
c0014f1e:	50                   	push   eax
c0014f1f:	e8 c4 bc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014f24:	83 c4 10             	add    esp,0x10
c0014f27:	89 c3                	mov    ebx,eax
c0014f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f2d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014f30:	0f b7 c0             	movzx  eax,ax
c0014f33:	83 ec 0c             	sub    esp,0xc
c0014f36:	50                   	push   eax
c0014f37:	e8 ac bc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014f3c:	83 c4 10             	add    esp,0x10
c0014f3f:	0f b7 c0             	movzx  eax,ax
c0014f42:	c1 e8 08             	shr    eax,0x8
c0014f45:	83 e0 0f             	and    eax,0xf
c0014f48:	c1 e0 02             	shl    eax,0x2
c0014f4b:	89 d9                	mov    ecx,ebx
c0014f4d:	29 c1                	sub    ecx,eax
c0014f4f:	89 c8                	mov    eax,ecx
c0014f51:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0014f56:	83 ec 0c             	sub    esp,0xc
c0014f59:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014f5d:	e8 66 3d ff ff       	call   c0008cc8 <pbuf_clen>
c0014f62:	83 c4 10             	add    esp,0x10
c0014f65:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0014f69:	66 a1 b4 b9 03 c0    	mov    ax,ds:0xc003b9b4
c0014f6f:	0f b7 d0             	movzx  edx,ax
c0014f72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014f77:	01 d0                	add    eax,edx
c0014f79:	83 f8 0a             	cmp    eax,0xa
c0014f7c:	7e 42                	jle    c0014fc0 <ip_reass+0x138>
c0014f7e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014f83:	83 ec 08             	sub    esp,0x8
c0014f86:	50                   	push   eax
c0014f87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f8b:	e8 ec f8 ff ff       	call   c001487c <ip_reass_remove_oldest_datagram>
c0014f90:	83 c4 10             	add    esp,0x10
c0014f93:	85 c0                	test   eax,eax
c0014f95:	74 15                	je     c0014fac <ip_reass+0x124>
c0014f97:	66 a1 b4 b9 03 c0    	mov    ax,ds:0xc003b9b4
c0014f9d:	0f b7 d0             	movzx  edx,ax
c0014fa0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014fa5:	01 d0                	add    eax,edx
c0014fa7:	83 f8 0a             	cmp    eax,0xa
c0014faa:	7e 14                	jle    c0014fc0 <ip_reass+0x138>
c0014fac:	66 a1 5c 77 03 c0    	mov    ax,ds:0xc003775c
c0014fb2:	83 c0 01             	add    eax,0x1
c0014fb5:	66 a3 5c 77 03 c0    	mov    ds:0xc003775c,ax
c0014fbb:	e9 94 02 00 00       	jmp    c0015254 <ip_reass+0x3cc>
c0014fc0:	a1 b8 b9 03 c0       	mov    eax,ds:0xc003b9b8
c0014fc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014fc9:	eb 65                	jmp    c0015030 <ip_reass+0x1a8>
c0014fcb:	90                   	nop
c0014fcc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fd0:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c0014fd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fd7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014fda:	39 c2                	cmp    edx,eax
c0014fdc:	75 3e                	jne    c001501c <ip_reass+0x194>
c0014fde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fe2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014fe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fe9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014fec:	39 c2                	cmp    edx,eax
c0014fee:	75 2c                	jne    c001501c <ip_reass+0x194>
c0014ff0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ff4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ffb:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014fff:	0f b7 d2             	movzx  edx,dx
c0015002:	0f b7 c0             	movzx  eax,ax
c0015005:	39 c2                	cmp    edx,eax
c0015007:	75 13                	jne    c001501c <ip_reass+0x194>
c0015009:	66 a1 66 77 03 c0    	mov    ax,ds:0xc0037766
c001500f:	83 c0 01             	add    eax,0x1
c0015012:	66 a3 66 77 03 c0    	mov    ds:0xc0037766,ax
c0015018:	eb 1e                	jmp    c0015038 <ip_reass+0x1b0>
c001501a:	66 90                	xchg   ax,ax
c001501c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015020:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015024:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015028:	8b 00                	mov    eax,DWORD PTR [eax]
c001502a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001502e:	66 90                	xchg   ax,ax
c0015030:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0015035:	75 95                	jne    c0014fcc <ip_reass+0x144>
c0015037:	90                   	nop
c0015038:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001503d:	75 25                	jne    c0015064 <ip_reass+0x1dc>
c001503f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0015044:	83 ec 08             	sub    esp,0x8
c0015047:	50                   	push   eax
c0015048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001504c:	e8 4b f9 ff ff       	call   c001499c <ip_reass_enqueue_new_datagram>
c0015051:	83 c4 10             	add    esp,0x10
c0015054:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015058:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001505d:	75 61                	jne    c00150c0 <ip_reass+0x238>
c001505f:	e9 f0 01 00 00       	jmp    c0015254 <ip_reass+0x3cc>
c0015064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015068:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c001506c:	0f b7 c0             	movzx  eax,ax
c001506f:	83 ec 0c             	sub    esp,0xc
c0015072:	50                   	push   eax
c0015073:	e8 70 bb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015078:	83 c4 10             	add    esp,0x10
c001507b:	0f b7 c0             	movzx  eax,ax
c001507e:	25 ff 1f 00 00       	and    eax,0x1fff
c0015083:	75 3b                	jne    c00150c0 <ip_reass+0x238>
c0015085:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015089:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c001508d:	0f b7 c0             	movzx  eax,ax
c0015090:	83 ec 0c             	sub    esp,0xc
c0015093:	50                   	push   eax
c0015094:	e8 4f bb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015099:	83 c4 10             	add    esp,0x10
c001509c:	0f b7 c0             	movzx  eax,ax
c001509f:	25 ff 1f 00 00       	and    eax,0x1fff
c00150a4:	74 1a                	je     c00150c0 <ip_reass+0x238>
c00150a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150aa:	83 c0 08             	add    eax,0x8
c00150ad:	83 ec 04             	sub    esp,0x4
c00150b0:	6a 14                	push   0x14
c00150b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00150b6:	50                   	push   eax
c00150b7:	e8 be b2 fe ff       	call   c000037a <memcpy>
c00150bc:	83 c4 10             	add    esp,0x10
c00150bf:	90                   	nop
c00150c0:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c00150c5:	66 a1 b4 b9 03 c0    	mov    ax,ds:0xc003b9b4
c00150cb:	01 d0                	add    eax,edx
c00150cd:	66 a3 b4 b9 03 c0    	mov    ds:0xc003b9b4,ax
c00150d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150d7:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00150db:	0f b7 c0             	movzx  eax,ax
c00150de:	83 e0 20             	and    eax,0x20
c00150e1:	75 29                	jne    c001510c <ip_reass+0x284>
c00150e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150e7:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c00150ea:	83 c8 01             	or     eax,0x1
c00150ed:	88 c2                	mov    dl,al
c00150ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150f3:	88 50 1e             	mov    BYTE PTR [eax+0x1e],dl
c00150f6:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00150fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00150ff:	01 d0                	add    eax,edx
c0015101:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015105:	66 89 42 1c          	mov    WORD PTR [edx+0x1c],ax
c0015109:	8d 76 00             	lea    esi,[esi+0x0]
c001510c:	83 ec 08             	sub    esp,0x8
c001510f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0015113:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015117:	e8 3c f9 ff ff       	call   c0014a58 <ip_reass_chain_frag_into_datagram_and_validate>
c001511c:	83 c4 10             	add    esp,0x10
c001511f:	85 c0                	test   eax,eax
c0015121:	0f 84 25 01 00 00    	je     c001524c <ip_reass+0x3c4>
c0015127:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001512b:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001512e:	83 c0 14             	add    eax,0x14
c0015131:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015135:	66 89 42 1c          	mov    WORD PTR [edx+0x1c],ax
c0015139:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001513d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015140:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015143:	8b 00                	mov    eax,DWORD PTR [eax]
c0015145:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015149:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001514d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015150:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015153:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015157:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001515b:	83 c0 08             	add    eax,0x8
c001515e:	83 ec 04             	sub    esp,0x4
c0015161:	6a 14                	push   0x14
c0015163:	50                   	push   eax
c0015164:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015168:	e8 0d b2 fe ff       	call   c000037a <memcpy>
c001516d:	83 c4 10             	add    esp,0x10
c0015170:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015174:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015177:	0f b7 c0             	movzx  eax,ax
c001517a:	83 ec 0c             	sub    esp,0xc
c001517d:	50                   	push   eax
c001517e:	e8 65 ba fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015183:	83 c4 10             	add    esp,0x10
c0015186:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001518a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c001518e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015192:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0015198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001519c:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c00151a2:	83 ec 08             	sub    esp,0x8
c00151a5:	6a 14                	push   0x14
c00151a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151ab:	e8 e0 e4 ff ff       	call   c0013690 <inet_chksum>
c00151b0:	83 c4 10             	add    esp,0x10
c00151b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00151b7:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00151bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00151c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00151c6:	eb 3c                	jmp    c0015204 <ip_reass+0x37c>
c00151c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00151cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00151cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00151d3:	83 ec 08             	sub    esp,0x8
c00151d6:	6a ec                	push   0xffffffec
c00151d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00151dc:	e8 77 31 ff ff       	call   c0008358 <pbuf_header>
c00151e1:	83 c4 10             	add    esp,0x10
c00151e4:	83 ec 08             	sub    esp,0x8
c00151e7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00151eb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00151ef:	e8 38 3b ff ff       	call   c0008d2c <pbuf_cat>
c00151f4:	83 c4 10             	add    esp,0x10
c00151f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00151fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00151fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015201:	8d 76 00             	lea    esi,[esi+0x0]
c0015204:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015209:	75 bd                	jne    c00151c8 <ip_reass+0x340>
c001520b:	83 ec 08             	sub    esp,0x8
c001520e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015212:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015216:	e8 79 f3 ff ff       	call   c0014594 <ip_reass_dequeue_datagram>
c001521b:	83 c4 10             	add    esp,0x10
c001521e:	83 ec 0c             	sub    esp,0xc
c0015221:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015225:	e8 9e 3a ff ff       	call   c0008cc8 <pbuf_clen>
c001522a:	83 c4 10             	add    esp,0x10
c001522d:	66 8b 15 b4 b9 03 c0 	mov    dx,WORD PTR ds:0xc003b9b4
c0015234:	0f b6 c0             	movzx  eax,al
c0015237:	89 d3                	mov    ebx,edx
c0015239:	29 c3                	sub    ebx,eax
c001523b:	89 d8                	mov    eax,ebx
c001523d:	66 a3 b4 b9 03 c0    	mov    ds:0xc003b9b4,ax
c0015243:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015247:	eb 2f                	jmp    c0015278 <ip_reass+0x3f0>
c0015249:	8d 76 00             	lea    esi,[esi+0x0]
c001524c:	b8 00 00 00 00       	mov    eax,0x0
c0015251:	eb 25                	jmp    c0015278 <ip_reass+0x3f0>
c0015253:	90                   	nop
c0015254:	66 a1 56 77 03 c0    	mov    ax,ds:0xc0037756
c001525a:	83 c0 01             	add    eax,0x1
c001525d:	66 a3 56 77 03 c0    	mov    ds:0xc0037756,ax
c0015263:	83 ec 0c             	sub    esp,0xc
c0015266:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001526a:	e8 85 32 ff ff       	call   c00084f4 <pbuf_free>
c001526f:	83 c4 10             	add    esp,0x10
c0015272:	b8 00 00 00 00       	mov    eax,0x0
c0015277:	90                   	nop
c0015278:	83 c4 28             	add    esp,0x28
c001527b:	5b                   	pop    ebx
c001527c:	c3                   	ret    
c001527d:	8d 76 00             	lea    esi,[esi+0x0]

c0015280 <ip_frag_alloc_pbuf_custom_ref>:
c0015280:	83 ec 0c             	sub    esp,0xc
c0015283:	83 ec 0c             	sub    esp,0xc
c0015286:	6a 06                	push   0x6
c0015288:	e8 7f 28 ff ff       	call   c0007b0c <memp_malloc>
c001528d:	83 c4 10             	add    esp,0x10
c0015290:	83 c4 0c             	add    esp,0xc
c0015293:	c3                   	ret    

c0015294 <ip_frag_free_pbuf_custom_ref>:
c0015294:	83 ec 0c             	sub    esp,0xc
c0015297:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001529c:	75 16                	jne    c00152b4 <ip_frag_free_pbuf_custom_ref+0x20>
c001529e:	83 ec 08             	sub    esp,0x8
c00152a1:	68 b6 05 03 c0       	push   0xc00305b6
c00152a6:	68 86 01 03 c0       	push   0xc0030186
c00152ab:	e8 28 ac 00 00       	call   c001fed8 <CPrintf>
c00152b0:	83 c4 10             	add    esp,0x10
c00152b3:	90                   	nop
c00152b4:	83 ec 08             	sub    esp,0x8
c00152b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152bb:	6a 06                	push   0x6
c00152bd:	e8 76 29 ff ff       	call   c0007c38 <memp_free>
c00152c2:	83 c4 10             	add    esp,0x10
c00152c5:	90                   	nop
c00152c6:	83 c4 0c             	add    esp,0xc
c00152c9:	c3                   	ret    
c00152ca:	66 90                	xchg   ax,ax

c00152cc <ipfrag_free_pbuf_custom>:
c00152cc:	83 ec 1c             	sub    esp,0x1c
c00152cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00152d7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00152dc:	75 16                	jne    c00152f4 <ipfrag_free_pbuf_custom+0x28>
c00152de:	83 ec 08             	sub    esp,0x8
c00152e1:	68 26 15 03 c0       	push   0xc0031526
c00152e6:	68 86 01 03 c0       	push   0xc0030186
c00152eb:	e8 e8 ab 00 00       	call   c001fed8 <CPrintf>
c00152f0:	83 c4 10             	add    esp,0x10
c00152f3:	90                   	nop
c00152f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00152f8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00152fc:	74 16                	je     c0015314 <ipfrag_free_pbuf_custom+0x48>
c00152fe:	83 ec 08             	sub    esp,0x8
c0015301:	68 32 15 03 c0       	push   0xc0031532
c0015306:	68 86 01 03 c0       	push   0xc0030186
c001530b:	e8 c8 ab 00 00       	call   c001fed8 <CPrintf>
c0015310:	83 c4 10             	add    esp,0x10
c0015313:	90                   	nop
c0015314:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015318:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001531b:	85 c0                	test   eax,eax
c001531d:	74 15                	je     c0015334 <ipfrag_free_pbuf_custom+0x68>
c001531f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015323:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015326:	83 ec 0c             	sub    esp,0xc
c0015329:	50                   	push   eax
c001532a:	e8 c5 31 ff ff       	call   c00084f4 <pbuf_free>
c001532f:	83 c4 10             	add    esp,0x10
c0015332:	66 90                	xchg   ax,ax
c0015334:	83 ec 0c             	sub    esp,0xc
c0015337:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001533b:	e8 54 ff ff ff       	call   c0015294 <ip_frag_free_pbuf_custom_ref>
c0015340:	83 c4 10             	add    esp,0x10
c0015343:	90                   	nop
c0015344:	83 c4 1c             	add    esp,0x1c
c0015347:	c3                   	ret    

c0015348 <ip_frag>:
c0015348:	53                   	push   ebx
c0015349:	83 ec 38             	sub    esp,0x38
c001534c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0015350:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015353:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c0015358:	66 c7 44 24 2a 14 00 	mov    WORD PTR [esp+0x2a],0x14
c001535f:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c0015366:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001536a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001536d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015371:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015375:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015379:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001537d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0015381:	0f b7 c0             	movzx  eax,ax
c0015384:	83 ec 0c             	sub    esp,0xc
c0015387:	50                   	push   eax
c0015388:	e8 5b b8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001538d:	83 c4 10             	add    esp,0x10
c0015390:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015395:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015399:	25 ff 1f 00 00       	and    eax,0x1fff
c001539e:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00153a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00153a7:	25 00 20 00 00       	and    eax,0x2000
c00153ac:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00153b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00153b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00153b8:	83 e8 14             	sub    eax,0x14
c00153bb:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c00153c0:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c00153c5:	83 e8 14             	sub    eax,0x14
c00153c8:	79 06                	jns    c00153d0 <ip_frag+0x88>
c00153ca:	83 c0 07             	add    eax,0x7
c00153cd:	8d 76 00             	lea    esi,[esi+0x0]
c00153d0:	c1 f8 03             	sar    eax,0x3
c00153d3:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00153d8:	e9 03 03 00 00       	jmp    c00156e0 <ip_frag+0x398>
c00153dd:	8d 76 00             	lea    esi,[esi+0x0]
c00153e0:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c00153e5:	8d 50 ed             	lea    edx,[eax-0x13]
c00153e8:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c00153ed:	39 c2                	cmp    edx,eax
c00153ef:	0f 9f c0             	setg   al
c00153f2:	0f b6 c0             	movzx  eax,al
c00153f5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00153fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00153fe:	25 ff 1f 00 00       	and    eax,0x1fff
c0015403:	89 c2                	mov    edx,eax
c0015405:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c001540a:	09 d0                	or     eax,edx
c001540c:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015411:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0015416:	85 c0                	test   eax,eax
c0015418:	75 0e                	jne    c0015428 <ip_frag+0xe0>
c001541a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001541e:	80 cc 20             	or     ah,0x20
c0015421:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015426:	66 90                	xchg   ax,ax
c0015428:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c001542d:	85 c0                	test   eax,eax
c001542f:	75 0b                	jne    c001543c <ip_frag+0xf4>
c0015431:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015435:	c1 e0 03             	shl    eax,0x3
c0015438:	eb 0a                	jmp    c0015444 <ip_frag+0xfc>
c001543a:	66 90                	xchg   ax,ax
c001543c:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0015441:	8d 76 00             	lea    esi,[esi+0x0]
c0015444:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0015449:	83 ec 04             	sub    esp,0x4
c001544c:	6a 00                	push   0x0
c001544e:	6a 14                	push   0x14
c0015450:	6a 02                	push   0x2
c0015452:	e8 75 32 ff ff       	call   c00086cc <pbuf_alloc>
c0015457:	83 c4 10             	add    esp,0x10
c001545a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001545e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015463:	75 07                	jne    c001546c <ip_frag+0x124>
c0015465:	b0 ff                	mov    al,0xff
c0015467:	e9 84 02 00 00       	jmp    c00156f0 <ip_frag+0x3a8>
c001546c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015470:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0015474:	0f b7 c0             	movzx  eax,ax
c0015477:	83 f8 13             	cmp    eax,0x13
c001547a:	77 18                	ja     c0015494 <ip_frag+0x14c>
c001547c:	83 ec 08             	sub    esp,0x8
c001547f:	68 c8 15 03 c0       	push   0xc00315c8
c0015484:	68 86 01 03 c0       	push   0xc0030186
c0015489:	e8 4a aa 00 00       	call   c001fed8 <CPrintf>
c001548e:	83 c4 10             	add    esp,0x10
c0015491:	8d 76 00             	lea    esi,[esi+0x0]
c0015494:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015498:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001549b:	83 ec 04             	sub    esp,0x4
c001549e:	6a 14                	push   0x14
c00154a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00154a4:	50                   	push   eax
c00154a5:	e8 d0 ae fe ff       	call   c000037a <memcpy>
c00154aa:	83 c4 10             	add    esp,0x10
c00154ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00154b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00154b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00154b8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00154bc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00154bf:	0f b7 44 24 2a       	movzx  eax,WORD PTR [esp+0x2a]
c00154c4:	01 c2                	add    edx,eax
c00154c6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00154ca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00154cd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00154d1:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00154d5:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c00154da:	89 d1                	mov    ecx,edx
c00154dc:	29 c1                	sub    ecx,eax
c00154de:	89 c8                	mov    eax,ecx
c00154e0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00154e4:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00154e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154ec:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c00154f1:	e9 1a 01 00 00       	jmp    c0015610 <ip_frag+0x2c8>
c00154f6:	66 90                	xchg   ax,ax
c00154f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00154fc:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0015500:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015504:	0f b7 d8             	movzx  ebx,ax
c0015507:	0f b7 ca             	movzx  ecx,dx
c001550a:	39 cb                	cmp    ebx,ecx
c001550c:	76 02                	jbe    c0015510 <ip_frag+0x1c8>
c001550e:	89 d0                	mov    eax,edx
c0015510:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0015515:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c001551a:	85 c0                	test   eax,eax
c001551c:	75 12                	jne    c0015530 <ip_frag+0x1e8>
c001551e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015522:	8b 00                	mov    eax,DWORD PTR [eax]
c0015524:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015528:	e9 e3 00 00 00       	jmp    c0015610 <ip_frag+0x2c8>
c001552d:	8d 76 00             	lea    esi,[esi+0x0]
c0015530:	e8 4b fd ff ff       	call   c0015280 <ip_frag_alloc_pbuf_custom_ref>
c0015535:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015539:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001553e:	75 18                	jne    c0015558 <ip_frag+0x210>
c0015540:	83 ec 0c             	sub    esp,0xc
c0015543:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015547:	e8 a8 2f ff ff       	call   c00084f4 <pbuf_free>
c001554c:	83 c4 10             	add    esp,0x10
c001554f:	b0 ff                	mov    al,0xff
c0015551:	e9 9a 01 00 00       	jmp    c00156f0 <ip_frag+0x3a8>
c0015556:	66 90                	xchg   ax,ax
c0015558:	0f b7 5c 24 26       	movzx  ebx,WORD PTR [esp+0x26]
c001555d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015561:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015564:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015568:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c001556d:	83 ec 08             	sub    esp,0x8
c0015570:	53                   	push   ebx
c0015571:	51                   	push   ecx
c0015572:	52                   	push   edx
c0015573:	6a 02                	push   0x2
c0015575:	50                   	push   eax
c0015576:	6a 03                	push   0x3
c0015578:	e8 b7 2c ff ff       	call   c0008234 <pbuf_alloced_custom>
c001557d:	83 c4 20             	add    esp,0x20
c0015580:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015584:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0015589:	75 25                	jne    c00155b0 <ip_frag+0x268>
c001558b:	83 ec 0c             	sub    esp,0xc
c001558e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015592:	e8 fd fc ff ff       	call   c0015294 <ip_frag_free_pbuf_custom_ref>
c0015597:	83 c4 10             	add    esp,0x10
c001559a:	83 ec 0c             	sub    esp,0xc
c001559d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00155a1:	e8 4e 2f ff ff       	call   c00084f4 <pbuf_free>
c00155a6:	83 c4 10             	add    esp,0x10
c00155a9:	b0 ff                	mov    al,0xff
c00155ab:	e9 40 01 00 00       	jmp    c00156f0 <ip_frag+0x3a8>
c00155b0:	83 ec 0c             	sub    esp,0xc
c00155b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00155b7:	e8 40 37 ff ff       	call   c0008cfc <pbuf_ref>
c00155bc:	83 c4 10             	add    esp,0x10
c00155bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00155c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00155c7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00155ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00155ce:	c7 40 10 cc 52 01 c0 	mov    DWORD PTR [eax+0x10],0xc00152cc
c00155d5:	83 ec 08             	sub    esp,0x8
c00155d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00155dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00155e0:	e8 47 37 ff ff       	call   c0008d2c <pbuf_cat>
c00155e5:	83 c4 10             	add    esp,0x10
c00155e8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00155ec:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00155f1:	89 d3                	mov    ebx,edx
c00155f3:	29 c3                	sub    ebx,eax
c00155f5:	89 d8                	mov    eax,ebx
c00155f7:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c00155fc:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c0015601:	85 c0                	test   eax,eax
c0015603:	74 0b                	je     c0015610 <ip_frag+0x2c8>
c0015605:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015609:	8b 00                	mov    eax,DWORD PTR [eax]
c001560b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001560f:	90                   	nop
c0015610:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c0015615:	85 c0                	test   eax,eax
c0015617:	0f 85 db fe ff ff    	jne    c00154f8 <ip_frag+0x1b0>
c001561d:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0015622:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0015627:	0f b7 44 24 28       	movzx  eax,WORD PTR [esp+0x28]
c001562c:	83 ec 0c             	sub    esp,0xc
c001562f:	50                   	push   eax
c0015630:	e8 b3 b5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015635:	83 c4 10             	add    esp,0x10
c0015638:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001563c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0015640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015644:	83 c0 14             	add    eax,0x14
c0015647:	0f b7 c0             	movzx  eax,ax
c001564a:	83 ec 0c             	sub    esp,0xc
c001564d:	50                   	push   eax
c001564e:	e8 95 b5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015653:	83 c4 10             	add    esp,0x10
c0015656:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001565a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c001565e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015662:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0015668:	83 ec 08             	sub    esp,0x8
c001566b:	6a 14                	push   0x14
c001566d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015671:	e8 1a e0 ff ff       	call   c0013690 <inet_chksum>
c0015676:	83 c4 10             	add    esp,0x10
c0015679:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001567d:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0015681:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0015685:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015688:	83 ec 04             	sub    esp,0x4
c001568b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001568f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015693:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0015697:	ff d0                	call   eax
c0015699:	83 c4 10             	add    esp,0x10
c001569c:	66 a1 50 77 03 c0    	mov    ax,ds:0xc0037750
c00156a2:	83 c0 01             	add    eax,0x1
c00156a5:	66 a3 50 77 03 c0    	mov    ds:0xc0037750,ax
c00156ab:	83 ec 0c             	sub    esp,0xc
c00156ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00156b2:	e8 3d 2e ff ff       	call   c00084f4 <pbuf_free>
c00156b7:	83 c4 10             	add    esp,0x10
c00156ba:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c00156bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156c3:	89 d1                	mov    ecx,edx
c00156c5:	29 c1                	sub    ecx,eax
c00156c7:	89 c8                	mov    eax,ecx
c00156c9:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c00156ce:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00156d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00156d6:	01 d0                	add    eax,edx
c00156d8:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00156dd:	8d 76 00             	lea    esi,[esi+0x0]
c00156e0:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c00156e5:	85 c0                	test   eax,eax
c00156e7:	0f 85 f3 fc ff ff    	jne    c00153e0 <ip_frag+0x98>
c00156ed:	b0 00                	mov    al,0x0
c00156ef:	90                   	nop
c00156f0:	83 c4 38             	add    esp,0x38
c00156f3:	5b                   	pop    ebx
c00156f4:	c3                   	ret    
c00156f5:	90                   	nop

c00156f6 <Computer::close(int, int, void*)>:
c00156f6:	53                   	push   ebx
c00156f7:	83 ec 08             	sub    esp,0x8
c00156fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156fe:	e8 65 a6 00 00       	call   c001fd68 <KeExecuteAtexit()>
c0015703:	83 ec 0c             	sub    esp,0xc
c0015706:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c001570c:	50                   	push   eax
c001570d:	e8 68 61 00 00       	call   c001b87a <Device::closeAll()>
c0015712:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0015718:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001571c:	8b 10                	mov    edx,DWORD PTR [eax]
c001571e:	51                   	push   ecx
c001571f:	68 0f 27 00 00       	push   0x270f
c0015724:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015728:	53                   	push   ebx
c0015729:	50                   	push   eax
c001572a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001572d:	83 c4 14             	add    esp,0x14
c0015730:	68 e8 15 03 c0       	push   0xc00315e8
c0015735:	e8 54 b0 00 00       	call   c002078e <KePanic(char const*)>
c001573a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001573f:	83 c4 18             	add    esp,0x18
c0015742:	5b                   	pop    ebx
c0015743:	c3                   	ret    

c0015744 <Krnl::firstTask()>:
c0015744:	53                   	push   ebx
c0015745:	83 ec 14             	sub    esp,0x14
c0015748:	fb                   	sti    
c0015749:	68 fe 15 03 c0       	push   0xc00315fe
c001574e:	e8 f4 a6 00 00       	call   c001fe47 <KeSetBootMessage(char const*)>
c0015753:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c001575a:	e8 68 0e 00 00       	call   c00165c7 <malloc>
c001575f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015766:	89 c3                	mov    ebx,eax
c0015768:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c001576d:	50                   	push   eax
c001576e:	68 17 16 03 c0       	push   0xc0031617
c0015773:	6a 01                	push   0x1
c0015775:	53                   	push   ebx
c0015776:	e8 a9 fb 00 00       	call   c0025324 <Process::Process(bool, char const*, Process*, char**)>
c001577b:	83 c4 20             	add    esp,0x20
c001577e:	68 ff 00 00 00       	push   0xff
c0015783:	6a 00                	push   0x0
c0015785:	68 93 5f 01 c0       	push   0xc0015f93
c001578a:	53                   	push   ebx
c001578b:	e8 bc fd 00 00       	call   c002554c <Process::createThread(void (*)(void*), void*, int)>
c0015790:	8b 15 f8 11 04 c0    	mov    edx,DWORD PTR ds:0xc00411f8
c0015796:	6a 7a                	push   0x7a
c0015798:	6a 00                	push   0x0
c001579a:	68 14 5e 02 c0       	push   0xc0025e14
c001579f:	52                   	push   edx
c00157a0:	e8 a7 fd 00 00       	call   c002554c <Process::createThread(void (*)(void*), void*, int)>
c00157a5:	83 c4 14             	add    esp,0x14
c00157a8:	a3 b0 11 04 c0       	mov    ds:0xc00411b0,eax
c00157ad:	68 1c 17 03 c0       	push   0xc003171c
c00157b2:	e8 90 a6 00 00       	call   c001fe47 <KeSetBootMessage(char const*)>
c00157b7:	c6 05 c1 b9 03 c0 01 	mov    BYTE PTR ds:0xc003b9c1,0x1
c00157be:	e8 84 b1 00 00       	call   c0020947 <KeInitRand()>
c00157c3:	e8 e3 09 01 00       	call   c00261ab <Vm::initialise8086()>
c00157c8:	e8 6d 4b 00 00       	call   c001a33a <Fs::initVFS()>
c00157cd:	c7 04 24 24 16 03 c0 	mov    DWORD PTR [esp],0xc0031624
c00157d4:	e8 6e a6 00 00       	call   c001fe47 <KeSetBootMessage(char const*)>
c00157d9:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c00157de:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00157e4:	8b 10                	mov    edx,DWORD PTR [eax]
c00157e6:	6a 00                	push   0x0
c00157e8:	6a 00                	push   0x0
c00157ea:	6a 00                	push   0x0
c00157ec:	50                   	push   eax
c00157ed:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00157f0:	83 c4 14             	add    esp,0x14
c00157f3:	68 1c 17 03 c0       	push   0xc003171c
c00157f8:	e8 4a a6 00 00       	call   c001fe47 <KeSetBootMessage(char const*)>
c00157fd:	e8 d2 42 00 00       	call   c0019ad4 <KeInitialiseSymlinks()>
c0015802:	e8 eb ab 00 00       	call   c00203f2 <KeLoadSystemEnv()>
c0015807:	e8 47 b0 00 00       	call   c0020853 <KeSetupPowerManager()>
c001580c:	c7 04 24 3e 16 03 c0 	mov    DWORD PTR [esp],0xc003163e
c0015813:	e8 2f a6 00 00       	call   c001fe47 <KeSetBootMessage(char const*)>
c0015818:	e8 37 57 00 00       	call   c001af54 <User::loadClockSettings()>
c001581d:	c7 04 24 40 17 03 c0 	mov    DWORD PTR [esp],0xc0031740
c0015824:	e8 1e a6 00 00       	call   c001fe47 <KeSetBootMessage(char const*)>
c0015829:	59                   	pop    ecx
c001582a:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001582f:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0015835:	53                   	push   ebx
c0015836:	e8 f3 5e 00 00       	call   c001b72e <Device::loadDriversForAll()>
c001583b:	e8 6c 17 ff ff       	call   c0006fac <lwip_init>
c0015840:	c7 04 24 58 16 03 c0 	mov    DWORD PTR [esp],0xc0031658
c0015847:	e8 fb a5 00 00       	call   c001fe47 <KeSetBootMessage(char const*)>
c001584c:	58                   	pop    eax
c001584d:	8b 1d bc b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9bc
c0015853:	5a                   	pop    edx
c0015854:	6a 01                	push   0x1
c0015856:	68 69 16 03 c0       	push   0xc0031669
c001585b:	e8 b6 f4 00 00       	call   c0024d16 <Thr::loadDLL(char const*, bool)>
c0015860:	59                   	pop    ecx
c0015861:	5a                   	pop    edx
c0015862:	53                   	push   ebx
c0015863:	50                   	push   eax
c0015864:	e8 ff f6 00 00       	call   c0024f68 <Thr::executeDLL(unsigned long, void*)>
c0015869:	83 c4 10             	add    esp,0x10
c001586c:	83 ec 0c             	sub    esp,0xc
c001586f:	6a 02                	push   0x2
c0015871:	e8 e2 ff 00 00       	call   c0025858 <blockTask(TaskState)>
c0015876:	83 c4 10             	add    esp,0x10
c0015879:	eb f1                	jmp    c001586c <Krnl::firstTask()+0x128>
c001587b:	90                   	nop

c001587c <Computer::Computer()>:
c001587c:	83 ec 0c             	sub    esp,0xc
c001587f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015883:	83 ec 08             	sub    esp,0x8
c0015886:	68 85 16 03 c0       	push   0xc0031685
c001588b:	50                   	push   eax
c001588c:	e8 e3 5e 00 00       	call   c001b774 <Device::Device(char const*)>
c0015891:	83 c4 10             	add    esp,0x10
c0015894:	ba 8c 17 03 c0       	mov    edx,0xc003178c
c0015899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001589d:	89 10                	mov    DWORD PTR [eax],edx
c001589f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158a3:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00158ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158b1:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c00158bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158bf:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00158c5:	83 ca 04             	or     edx,0x4
c00158c8:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00158ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158d2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00158d8:	0f b6 d0             	movzx  edx,al
c00158db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158df:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c00158e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158ea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00158f0:	0f b6 d0             	movzx  edx,al
c00158f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158f7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00158fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015900:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0015906:	8d 50 01             	lea    edx,[eax+0x1]
c0015909:	88 d1                	mov    cl,dl
c001590b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001590f:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0015915:	0f b6 d0             	movzx  edx,al
c0015918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001591c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0015920:	83 e1 3f             	and    ecx,0x3f
c0015923:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0015927:	90                   	nop
c0015928:	83 c4 0c             	add    esp,0xc
c001592b:	c3                   	ret    

c001592c <Computer::setBootMessage(char const*)>:
c001592c:	c3                   	ret    
c001592d:	90                   	nop

c001592e <Computer::detectFeatures()>:
c001592e:	55                   	push   ebp
c001592f:	57                   	push   edi
c0015930:	56                   	push   esi
c0015931:	53                   	push   ebx
c0015932:	83 ec 1c             	sub    esp,0x1c
c0015935:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015939:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001593f:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0015945:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001594b:	e8 a9 a8 fe ff       	call   c00001f9 <detectCPUID>
c0015950:	31 d2                	xor    edx,edx
c0015952:	85 c0                	test   eax,eax
c0015954:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c001595a:	0f 95 c2             	setne  dl
c001595d:	83 e0 fd             	and    eax,0xfffffffd
c0015960:	d1 e2                	shl    edx,1
c0015962:	09 d0                	or     eax,edx
c0015964:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c001596a:	a8 02                	test   al,0x2
c001596c:	75 51                	jne    c00159bf <Computer::detectFeatures()+0x91>
c001596e:	f6 05 d5 b9 03 c0 04 	test   BYTE PTR ds:0xc003b9d5,0x4
c0015975:	74 0f                	je     c0015986 <Computer::detectFeatures()+0x58>
c0015977:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c001597d:	83 e0 fb             	and    eax,0xfffffffb
c0015980:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015986:	e8 1b 90 01 00       	call   c002e9a6 <x87Detect>
c001598b:	83 e0 01             	and    eax,0x1
c001598e:	c1 e0 04             	shl    eax,0x4
c0015991:	89 c2                	mov    edx,eax
c0015993:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015999:	83 e0 ef             	and    eax,0xffffffef
c001599c:	09 d0                	or     eax,edx
c001599e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00159a4:	88 c2                	mov    dl,al
c00159a6:	a8 10                	test   al,0x10
c00159a8:	0f 85 33 01 00 00    	jne    c0015ae1 <Computer::detectFeatures()+0x1b3>
c00159ae:	80 e2 80             	and    dl,0x80
c00159b1:	0f 85 4c 01 00 00    	jne    c0015b03 <Computer::detectFeatures()+0x1d5>
c00159b7:	83 c4 1c             	add    esp,0x1c
c00159ba:	5b                   	pop    ebx
c00159bb:	5e                   	pop    esi
c00159bc:	5f                   	pop    edi
c00159bd:	5d                   	pop    ebp
c00159be:	c3                   	ret    
c00159bf:	83 ec 0c             	sub    esp,0xc
c00159c2:	6a 20                	push   0x20
c00159c4:	e8 b7 98 00 00       	call   c001f280 <CPU::cpuidCheckEDX(unsigned int)>
c00159c9:	83 e0 01             	and    eax,0x1
c00159cc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00159d3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00159d9:	83 e0 f7             	and    eax,0xfffffff7
c00159dc:	09 d0                	or     eax,edx
c00159de:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00159e4:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c00159eb:	e8 90 98 00 00       	call   c001f280 <CPU::cpuidCheckEDX(unsigned int)>
c00159f0:	89 c2                	mov    edx,eax
c00159f2:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00159f8:	83 e2 01             	and    edx,0x1
c00159fb:	83 e0 fe             	and    eax,0xfffffffe
c00159fe:	09 d0                	or     eax,edx
c0015a00:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015a06:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0015a0d:	e8 6e 98 00 00       	call   c001f280 <CPU::cpuidCheckEDX(unsigned int)>
c0015a12:	89 c2                	mov    edx,eax
c0015a14:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015a1a:	c1 e2 07             	shl    edx,0x7
c0015a1d:	83 e0 7f             	and    eax,0x7f
c0015a20:	09 d0                	or     eax,edx
c0015a22:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015a28:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0015a2f:	e8 4c 98 00 00       	call   c001f280 <CPU::cpuidCheckEDX(unsigned int)>
c0015a34:	83 c4 10             	add    esp,0x10
c0015a37:	83 e0 01             	and    eax,0x1
c0015a3a:	c1 e0 05             	shl    eax,0x5
c0015a3d:	89 c2                	mov    edx,eax
c0015a3f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015a45:	83 e0 df             	and    eax,0xffffffdf
c0015a48:	09 d0                	or     eax,edx
c0015a4a:	f7 05 d4 b9 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003b9d4,0x401
c0015a54:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015a5a:	0f 84 c9 00 00 00    	je     c0015b29 <Computer::detectFeatures()+0x1fb>
c0015a60:	83 e0 fe             	and    eax,0xfffffffe
c0015a63:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015a69:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015a6f:	89 c2                	mov    edx,eax
c0015a71:	83 e2 09             	and    edx,0x9
c0015a74:	83 fa 01             	cmp    edx,0x1
c0015a77:	75 09                	jne    c0015a82 <Computer::detectFeatures()+0x154>
c0015a79:	83 e0 fe             	and    eax,0xfffffffe
c0015a7c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015a82:	83 ec 0c             	sub    esp,0xc
c0015a85:	8d 44 24 18          	lea    eax,[esp+0x18]
c0015a89:	50                   	push   eax
c0015a8a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0015a8e:	55                   	push   ebp
c0015a8f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0015a93:	57                   	push   edi
c0015a94:	8d 74 24 18          	lea    esi,[esp+0x18]
c0015a98:	56                   	push   esi
c0015a99:	68 00 00 00 80       	push   0x80000000
c0015a9e:	e8 59 97 00 00       	call   c001f1fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015aa3:	83 c4 20             	add    esp,0x20
c0015aa6:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0015aad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0015ab1:	0f 86 b7 fe ff ff    	jbe    c001596e <Computer::detectFeatures()+0x40>
c0015ab7:	83 ec 0c             	sub    esp,0xc
c0015aba:	50                   	push   eax
c0015abb:	55                   	push   ebp
c0015abc:	57                   	push   edi
c0015abd:	56                   	push   esi
c0015abe:	68 01 00 00 80       	push   0x80000001
c0015ac3:	e8 34 97 00 00       	call   c001f1fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015ac8:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0015ace:	83 c4 20             	add    esp,0x20
c0015ad1:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0015ad6:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0015adc:	e9 8d fe ff ff       	jmp    c001596e <Computer::detectFeatures()+0x40>
c0015ae1:	e8 7a 8e 01 00       	call   c002e960 <sseDetect>
c0015ae6:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0015aec:	c1 e0 07             	shl    eax,0x7
c0015aef:	83 e2 7f             	and    edx,0x7f
c0015af2:	09 c2                	or     edx,eax
c0015af4:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0015afa:	80 e2 80             	and    dl,0x80
c0015afd:	0f 84 b4 fe ff ff    	je     c00159b7 <Computer::detectFeatures()+0x89>
c0015b03:	e8 e8 8a 01 00       	call   c002e5f0 <avxDetect>
c0015b08:	83 e0 01             	and    eax,0x1
c0015b0b:	c1 e0 05             	shl    eax,0x5
c0015b0e:	89 c2                	mov    edx,eax
c0015b10:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015b16:	83 e0 df             	and    eax,0xffffffdf
c0015b19:	09 d0                	or     eax,edx
c0015b1b:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015b21:	83 c4 1c             	add    esp,0x1c
c0015b24:	5b                   	pop    ebx
c0015b25:	5e                   	pop    esi
c0015b26:	5f                   	pop    edi
c0015b27:	5d                   	pop    ebp
c0015b28:	c3                   	ret    
c0015b29:	83 ec 0c             	sub    esp,0xc
c0015b2c:	68 00 02 00 00       	push   0x200
c0015b31:	e8 4a 97 00 00       	call   c001f280 <CPU::cpuidCheckEDX(unsigned int)>
c0015b36:	83 c4 10             	add    esp,0x10
c0015b39:	89 c2                	mov    edx,eax
c0015b3b:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015b41:	83 e2 01             	and    edx,0x1
c0015b44:	83 e0 fe             	and    eax,0xfffffffe
c0015b47:	09 d0                	or     eax,edx
c0015b49:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015b4f:	e9 15 ff ff ff       	jmp    c0015a69 <Computer::detectFeatures()+0x13b>

c0015b54 <Computer::displayFeatures()>:
c0015b54:	c3                   	ret    
c0015b55:	90                   	nop

c0015b56 <Computer::rdmsr(unsigned int)>:
c0015b56:	83 ec 0c             	sub    esp,0xc
c0015b59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b5d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015b64:	74 0a                	je     c0015b70 <Computer::rdmsr(unsigned int)+0x1a>
c0015b66:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015b6a:	0f 32                	rdmsr  
c0015b6c:	83 c4 0c             	add    esp,0xc
c0015b6f:	c3                   	ret    
c0015b70:	83 ec 0c             	sub    esp,0xc
c0015b73:	68 8e 16 03 c0       	push   0xc003168e
c0015b78:	e8 11 ac 00 00       	call   c002078e <KePanic(char const*)>
c0015b7d:	83 c4 10             	add    esp,0x10
c0015b80:	eb e4                	jmp    c0015b66 <Computer::rdmsr(unsigned int)+0x10>

c0015b82 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0015b82:	57                   	push   edi
c0015b83:	56                   	push   esi
c0015b84:	83 ec 04             	sub    esp,0x4
c0015b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b8b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015b8f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0015b93:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015b9a:	74 10                	je     c0015bac <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0015b9c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015ba0:	89 f0                	mov    eax,esi
c0015ba2:	89 fa                	mov    edx,edi
c0015ba4:	0f 30                	wrmsr  
c0015ba6:	83 c4 04             	add    esp,0x4
c0015ba9:	5e                   	pop    esi
c0015baa:	5f                   	pop    edi
c0015bab:	c3                   	ret    
c0015bac:	83 ec 0c             	sub    esp,0xc
c0015baf:	68 94 16 03 c0       	push   0xc0031694
c0015bb4:	e8 d5 ab 00 00       	call   c002078e <KePanic(char const*)>
c0015bb9:	83 c4 10             	add    esp,0x10
c0015bbc:	eb de                	jmp    c0015b9c <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0015bbe <Computer::shutdown()>:
c0015bbe:	83 ec 0c             	sub    esp,0xc
c0015bc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bc5:	8b 10                	mov    edx,DWORD PTR [eax]
c0015bc7:	6a 00                	push   0x0
c0015bc9:	6a 00                	push   0x0
c0015bcb:	6a 00                	push   0x0
c0015bcd:	50                   	push   eax
c0015bce:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015bd1:	83 c4 1c             	add    esp,0x1c
c0015bd4:	c3                   	ret    
c0015bd5:	90                   	nop

c0015bd6 <Computer::restart()>:
c0015bd6:	83 ec 0c             	sub    esp,0xc
c0015bd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bdd:	8b 10                	mov    edx,DWORD PTR [eax]
c0015bdf:	6a 00                	push   0x0
c0015be1:	6a 00                	push   0x0
c0015be3:	6a 01                	push   0x1
c0015be5:	50                   	push   eax
c0015be6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015be9:	83 c4 1c             	add    esp,0x1c
c0015bec:	c3                   	ret    
c0015bed:	90                   	nop

c0015bee <Computer::sleep()>:
c0015bee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015bf2:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0015bf8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015bfc:	e9 97 90 00 00       	jmp    c001ec98 <ACPI::sleep()>
c0015c01:	90                   	nop

c0015c02 <Computer::nmiEnabled()>:
c0015c02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c06:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0015c0c:	c3                   	ret    
c0015c0d:	90                   	nop

c0015c0e <Computer::readCMOS(unsigned char)>:
c0015c0e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c16:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0015c1d:	75 09                	jne    c0015c28 <Computer::readCMOS(unsigned char)+0x1a>
c0015c1f:	b2 80                	mov    dl,0x80
c0015c21:	09 d0                	or     eax,edx
c0015c23:	e6 70                	out    0x70,al
c0015c25:	e4 71                	in     al,0x71
c0015c27:	c3                   	ret    
c0015c28:	31 d2                	xor    edx,edx
c0015c2a:	eb f5                	jmp    c0015c21 <Computer::readCMOS(unsigned char)+0x13>

c0015c2c <Computer::enableNMI(bool)>:
c0015c2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015c30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c34:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0015c3a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0015c42:	eb ca                	jmp    c0015c0e <Computer::readCMOS(unsigned char)>

c0015c44 <Computer::open(int, int, void*)>:
c0015c44:	56                   	push   esi
c0015c45:	53                   	push   ebx
c0015c46:	83 ec 10             	sub    esp,0x10
c0015c49:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015c4d:	f6 05 d4 b9 03 c0 04 	test   BYTE PTR ds:0xc003b9d4,0x4
c0015c54:	68 9a 16 03 c0       	push   0xc003169a
c0015c59:	0f 94 05 00 44 03 c0 	sete   BYTE PTR ds:0xc0034400
c0015c60:	e8 e2 a1 00 00       	call   c001fe47 <KeSetBootMessage(char const*)>
c0015c65:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0015c6c:	e8 56 09 00 00       	call   c00165c7 <malloc>
c0015c71:	89 04 24             	mov    DWORD PTR [esp],eax
c0015c74:	89 c6                	mov    esi,eax
c0015c76:	e8 91 8b 00 00       	call   c001e80c <ACPI::ACPI()>
c0015c7b:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0015c81:	58                   	pop    eax
c0015c82:	5a                   	pop    edx
c0015c83:	56                   	push   esi
c0015c84:	53                   	push   ebx
c0015c85:	e8 88 59 00 00       	call   c001b612 <Device::addChild(Device*)>
c0015c8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c8d:	e8 9c fc ff ff       	call   c001592e <Computer::detectFeatures()>
c0015c92:	59                   	pop    ecx
c0015c93:	5e                   	pop    esi
c0015c94:	6a 01                	push   0x1
c0015c96:	53                   	push   ebx
c0015c97:	e8 90 ff ff ff       	call   c0015c2c <Computer::enableNMI(bool)>
c0015c9c:	c7 04 24 b2 16 03 c0 	mov    DWORD PTR [esp],0xc00316b2
c0015ca3:	e8 9f a1 00 00       	call   c001fe47 <KeSetBootMessage(char const*)>
c0015ca8:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0015caf:	e8 13 09 00 00       	call   c00165c7 <malloc>
c0015cb4:	89 04 24             	mov    DWORD PTR [esp],eax
c0015cb7:	89 c6                	mov    esi,eax
c0015cb9:	e8 7a 96 00 00       	call   c001f338 <CPU::CPU()>
c0015cbe:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0015cc4:	58                   	pop    eax
c0015cc5:	5a                   	pop    edx
c0015cc6:	56                   	push   esi
c0015cc7:	53                   	push   ebx
c0015cc8:	e8 45 59 00 00       	call   c001b612 <Device::addChild(Device*)>
c0015ccd:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015cd3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015cd7:	8b 10                	mov    edx,DWORD PTR [eax]
c0015cd9:	51                   	push   ecx
c0015cda:	6a 00                	push   0x0
c0015cdc:	6a 00                	push   0x0
c0015cde:	50                   	push   eax
c0015cdf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015ce2:	83 c4 14             	add    esp,0x14
c0015ce5:	68 60 17 03 c0       	push   0xc0031760
c0015cea:	e8 58 a1 00 00       	call   c001fe47 <KeSetBootMessage(char const*)>
c0015cef:	e8 cd 17 01 00       	call   c00274c1 <HalInitialiseCoprocessor()>
c0015cf4:	c7 04 24 cc 16 03 c0 	mov    DWORD PTR [esp],0xc00316cc
c0015cfb:	e8 47 a1 00 00       	call   c001fe47 <KeSetBootMessage(char const*)>
c0015d00:	c7 04 24 44 57 01 c0 	mov    DWORD PTR [esp],0xc0015744
c0015d07:	e8 6c f9 00 00       	call   c0025678 <setupMultitasking(void (*)())>
c0015d0c:	83 c4 14             	add    esp,0x14
c0015d0f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d14:	5b                   	pop    ebx
c0015d15:	5e                   	pop    esi
c0015d16:	c3                   	ret    
c0015d17:	90                   	nop

c0015d18 <Computer::disableNMI()>:
c0015d18:	6a 00                	push   0x0
c0015d1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d1e:	50                   	push   eax
c0015d1f:	e8 08 ff ff ff       	call   c0015c2c <Computer::enableNMI(bool)>
c0015d24:	5a                   	pop    edx
c0015d25:	59                   	pop    ecx
c0015d26:	c3                   	ret    
c0015d27:	90                   	nop

c0015d28 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0015d28:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015d2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d30:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d34:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c0015d3b:	75 0b                	jne    c0015d48 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c0015d3d:	b1 80                	mov    cl,0x80
c0015d3f:	09 c8                	or     eax,ecx
c0015d41:	e6 70                	out    0x70,al
c0015d43:	88 d0                	mov    al,dl
c0015d45:	e6 71                	out    0x71,al
c0015d47:	c3                   	ret    
c0015d48:	31 c9                	xor    ecx,ecx
c0015d4a:	eb f3                	jmp    c0015d3f <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c0015d4c <Computer::handleNMI()>:
c0015d4c:	56                   	push   esi
c0015d4d:	53                   	push   ebx
c0015d4e:	83 ec 10             	sub    esp,0x10
c0015d51:	e4 92                	in     al,0x92
c0015d53:	89 c6                	mov    esi,eax
c0015d55:	e4 61                	in     al,0x61
c0015d57:	68 e7 16 03 c0       	push   0xc00316e7
c0015d5c:	88 c3                	mov    bl,al
c0015d5e:	e8 f2 36 00 00       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0015d63:	83 c4 10             	add    esp,0x10
c0015d66:	83 e6 10             	and    esi,0x10
c0015d69:	75 10                	jne    c0015d7b <Computer::handleNMI()+0x2f>
c0015d6b:	f6 c3 40             	test   bl,0x40
c0015d6e:	75 20                	jne    c0015d90 <Computer::handleNMI()+0x44>
c0015d70:	80 e3 80             	and    bl,0x80
c0015d73:	75 30                	jne    c0015da5 <Computer::handleNMI()+0x59>
c0015d75:	83 c4 04             	add    esp,0x4
c0015d78:	5b                   	pop    ebx
c0015d79:	5e                   	pop    esi
c0015d7a:	c3                   	ret    
c0015d7b:	83 ec 0c             	sub    esp,0xc
c0015d7e:	68 f8 16 03 c0       	push   0xc00316f8
c0015d83:	e8 06 aa 00 00       	call   c002078e <KePanic(char const*)>
c0015d88:	83 c4 10             	add    esp,0x10
c0015d8b:	f6 c3 40             	test   bl,0x40
c0015d8e:	74 e0                	je     c0015d70 <Computer::handleNMI()+0x24>
c0015d90:	83 ec 0c             	sub    esp,0xc
c0015d93:	68 05 17 03 c0       	push   0xc0031705
c0015d98:	e8 f1 a9 00 00       	call   c002078e <KePanic(char const*)>
c0015d9d:	83 c4 10             	add    esp,0x10
c0015da0:	80 e3 80             	and    bl,0x80
c0015da3:	74 d0                	je     c0015d75 <Computer::handleNMI()+0x29>
c0015da5:	c7 44 24 10 0f 17 03 c0 	mov    DWORD PTR [esp+0x10],0xc003170f
c0015dad:	83 c4 04             	add    esp,0x4
c0015db0:	5b                   	pop    ebx
c0015db1:	5e                   	pop    esi
c0015db2:	e9 d7 a9 00 00       	jmp    c002078e <KePanic(char const*)>
c0015db7:	90                   	nop

c0015db8 <GDTEntry::setBase(unsigned int)>:
c0015db8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015dbc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015dc0:	89 c1                	mov    ecx,eax
c0015dc2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0015dc6:	c1 e9 10             	shr    ecx,0x10
c0015dc9:	c1 e8 18             	shr    eax,0x18
c0015dcc:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0015dcf:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0015dd2:	c3                   	ret    
c0015dd3:	90                   	nop

c0015dd4 <GDTEntry::setLimit(unsigned int)>:
c0015dd4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015dd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ddc:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0015ddf:	66 89 01             	mov    WORD PTR [ecx],ax
c0015de2:	83 e2 f0             	and    edx,0xfffffff0
c0015de5:	c1 e8 10             	shr    eax,0x10
c0015de8:	83 e0 0f             	and    eax,0xf
c0015deb:	09 d0                	or     eax,edx
c0015ded:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0015df0:	c3                   	ret    
c0015df1:	90                   	nop

c0015df2 <GDT::GDT()>:
c0015df2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015df6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015dfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015e06:	90                   	nop
c0015e07:	c3                   	ret    

c0015e08 <GDT::addEntry(GDTEntry)>:
c0015e08:	53                   	push   ebx
c0015e09:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015e0d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015e11:	8b 02                	mov    eax,DWORD PTR [edx]
c0015e13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e17:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0015e1b:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0015e1f:	8d 48 01             	lea    ecx,[eax+0x1]
c0015e22:	c1 e0 03             	shl    eax,0x3
c0015e25:	89 0a                	mov    DWORD PTR [edx],ecx
c0015e27:	5b                   	pop    ebx
c0015e28:	c3                   	ret    
c0015e29:	90                   	nop

c0015e2a <GDT::getNumberOfEntries()>:
c0015e2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015e30:	c3                   	ret    
c0015e31:	90                   	nop

c0015e32 <GDT::flush()>:
c0015e32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e36:	8b 10                	mov    edx,DWORD PTR [eax]
c0015e38:	83 c0 04             	add    eax,0x4
c0015e3b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0015e42:	a3 c6 b9 03 c0       	mov    ds:0xc003b9c6,eax
c0015e47:	66 89 15 c4 b9 03 c0 	mov    WORD PTR ds:0xc003b9c4,dx
c0015e4e:	e9 07 a5 fe ff       	jmp    c000035a <loadGDT>
c0015e53:	90                   	nop

c0015e54 <GDT::setup()>:
c0015e54:	57                   	push   edi
c0015e55:	56                   	push   esi
c0015e56:	53                   	push   ebx
c0015e57:	83 ec 30             	sub    esp,0x30
c0015e5a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015e5e:	6a 00                	push   0x0
c0015e60:	8d 74 24 14          	lea    esi,[esp+0x14]
c0015e64:	56                   	push   esi
c0015e65:	e8 4e ff ff ff       	call   c0015db8 <GDTEntry::setBase(unsigned int)>
c0015e6a:	6a 00                	push   0x0
c0015e6c:	56                   	push   esi
c0015e6d:	e8 62 ff ff ff       	call   c0015dd4 <GDTEntry::setLimit(unsigned int)>
c0015e72:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0015e7a:	6a 00                	push   0x0
c0015e7c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015e80:	56                   	push   esi
c0015e81:	e8 32 ff ff ff       	call   c0015db8 <GDTEntry::setBase(unsigned int)>
c0015e86:	68 ff ff ff 00       	push   0xffffff
c0015e8b:	56                   	push   esi
c0015e8c:	e8 43 ff ff ff       	call   c0015dd4 <GDTEntry::setLimit(unsigned int)>
c0015e91:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015e95:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015e99:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015e9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0015ea1:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0015ea6:	0d 00 9a c0 00       	or     eax,0xc09a00
c0015eab:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015eaf:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0015eb3:	89 f8                	mov    eax,edi
c0015eb5:	89 fa                	mov    edx,edi
c0015eb7:	80 e4 f7             	and    ah,0xf7
c0015eba:	80 ce 60             	or     dh,0x60
c0015ebd:	89 c7                	mov    edi,eax
c0015ebf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015ec3:	80 cc 60             	or     ah,0x60
c0015ec6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015eca:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015ece:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0015ed2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015ed6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015eda:	83 c4 20             	add    esp,0x20
c0015edd:	6a 00                	push   0x0
c0015edf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015ee3:	50                   	push   eax
c0015ee4:	e8 cf fe ff ff       	call   c0015db8 <GDTEntry::setBase(unsigned int)>
c0015ee9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0015eed:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0015ef1:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0015ef5:	83 e0 3f             	and    eax,0x3f
c0015ef8:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015efc:	6a 00                	push   0x0
c0015efe:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015f02:	50                   	push   eax
c0015f03:	e8 b0 fe ff ff       	call   c0015db8 <GDTEntry::setBase(unsigned int)>
c0015f08:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0015f0c:	83 e0 3f             	and    eax,0x3f
c0015f0f:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0015f13:	83 c4 0c             	add    esp,0xc
c0015f16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015f1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015f1e:	53                   	push   ebx
c0015f1f:	e8 e4 fe ff ff       	call   c0015e08 <GDT::addEntry(GDTEntry)>
c0015f24:	83 c4 0c             	add    esp,0xc
c0015f27:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015f2b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015f2f:	53                   	push   ebx
c0015f30:	e8 d3 fe ff ff       	call   c0015e08 <GDT::addEntry(GDTEntry)>
c0015f35:	83 c4 0c             	add    esp,0xc
c0015f38:	57                   	push   edi
c0015f39:	56                   	push   esi
c0015f3a:	53                   	push   ebx
c0015f3b:	e8 c8 fe ff ff       	call   c0015e08 <GDT::addEntry(GDTEntry)>
c0015f40:	83 c4 0c             	add    esp,0xc
c0015f43:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015f47:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015f4b:	53                   	push   ebx
c0015f4c:	e8 b7 fe ff ff       	call   c0015e08 <GDT::addEntry(GDTEntry)>
c0015f51:	83 c4 0c             	add    esp,0xc
c0015f54:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015f58:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015f5c:	53                   	push   ebx
c0015f5d:	e8 a6 fe ff ff       	call   c0015e08 <GDT::addEntry(GDTEntry)>
c0015f62:	83 c4 0c             	add    esp,0xc
c0015f65:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015f69:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015f6d:	53                   	push   ebx
c0015f6e:	e8 95 fe ff ff       	call   c0015e08 <GDT::addEntry(GDTEntry)>
c0015f73:	83 c4 0c             	add    esp,0xc
c0015f76:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f7a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f7e:	53                   	push   ebx
c0015f7f:	e8 84 fe ff ff       	call   c0015e08 <GDT::addEntry(GDTEntry)>
c0015f84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f87:	e8 a6 fe ff ff       	call   c0015e32 <GDT::flush()>
c0015f8c:	83 c4 40             	add    esp,0x40
c0015f8f:	5b                   	pop    ebx
c0015f90:	5e                   	pop    esi
c0015f91:	5f                   	pop    edi
c0015f92:	c3                   	ret    

c0015f93 <idleFunction(void*)>:
c0015f93:	83 ec 0c             	sub    esp,0xc
c0015f96:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0015f9b:	48                   	dec    eax
c0015f9c:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0015fa1:	75 01                	jne    c0015fa4 <idleFunction(void*)+0x11>
c0015fa3:	fb                   	sti    
c0015fa4:	e8 e4 11 01 00       	call   c002718d <HalSystemIdle()>
c0015fa9:	e8 b4 8f 01 00       	call   c002ef62 <idleCommon()>
c0015fae:	eb f4                	jmp    c0015fa4 <idleFunction(void*)+0x11>

c0015fb0 <IDTEntry::IDTEntry(bool)>:
c0015fb0:	53                   	push   ebx
c0015fb1:	83 ec 04             	sub    esp,0x4
c0015fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fb8:	88 04 24             	mov    BYTE PTR [esp],al
c0015fbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fbf:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0015fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fc9:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0015fcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fd1:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015fd4:	83 e2 f0             	and    edx,0xfffffff0
c0015fd7:	83 ca 0e             	or     edx,0xe
c0015fda:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015fdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fe1:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015fe4:	83 e2 ef             	and    edx,0xffffffef
c0015fe7:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015fea:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0015fee:	85 c0                	test   eax,eax
c0015ff0:	74 06                	je     c0015ff8 <IDTEntry::IDTEntry(bool)+0x48>
c0015ff2:	b2 03                	mov    dl,0x3
c0015ff4:	eb 06                	jmp    c0015ffc <IDTEntry::IDTEntry(bool)+0x4c>
c0015ff6:	66 90                	xchg   ax,ax
c0015ff8:	b2 00                	mov    dl,0x0
c0015ffa:	66 90                	xchg   ax,ax
c0015ffc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016000:	83 e2 03             	and    edx,0x3
c0016003:	89 d3                	mov    ebx,edx
c0016005:	c1 e3 05             	shl    ebx,0x5
c0016008:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c001600b:	83 e2 9f             	and    edx,0xffffff9f
c001600e:	88 d1                	mov    cl,dl
c0016010:	88 da                	mov    dl,bl
c0016012:	09 ca                	or     edx,ecx
c0016014:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0016017:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001601b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c001601e:	83 ca 80             	or     edx,0xffffff80
c0016021:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0016024:	90                   	nop
c0016025:	83 c4 04             	add    esp,0x4
c0016028:	5b                   	pop    ebx
c0016029:	c3                   	ret    

c001602a <IDTEntry::setOffset(unsigned int)>:
c001602a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001602e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016032:	66 89 02             	mov    WORD PTR [edx],ax
c0016035:	c1 e8 10             	shr    eax,0x10
c0016038:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c001603c:	c3                   	ret    
c001603d:	90                   	nop
c001603e:	66 90                	xchg   ax,ax

c0016040 <IDT::IDT()>:
c0016040:	90                   	nop
c0016041:	c3                   	ret    

c0016042 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0016042:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016046:	83 c0 30             	add    eax,0x30
c0016049:	c3                   	ret    

c001604a <IDT::addEntry(IDTEntry, int)>:
c001604a:	53                   	push   ebx
c001604b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001604f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016057:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001605b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c001605e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0016062:	5b                   	pop    ebx
c0016063:	c3                   	ret    

c0016064 <IDT::addEntry(int, void (*)(), bool)>:
c0016064:	53                   	push   ebx
c0016065:	83 ec 10             	sub    esp,0x10
c0016068:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c001606d:	50                   	push   eax
c001606e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0016072:	53                   	push   ebx
c0016073:	e8 38 ff ff ff       	call   c0015fb0 <IDTEntry::IDTEntry(bool)>
c0016078:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001607c:	53                   	push   ebx
c001607d:	e8 a8 ff ff ff       	call   c001602a <IDTEntry::setOffset(unsigned int)>
c0016082:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016086:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001608a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001608e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016092:	e8 b3 ff ff ff       	call   c001604a <IDT::addEntry(IDTEntry, int)>
c0016097:	83 c4 30             	add    esp,0x30
c001609a:	5b                   	pop    ebx
c001609b:	c3                   	ret    

c001609c <IDT::flush()>:
c001609c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00160a0:	66 c7 05 cc b9 03 c0 ff 07 	mov    WORD PTR ds:0xc003b9cc,0x7ff
c00160a9:	a3 ce b9 03 c0       	mov    ds:0xc003b9ce,eax
c00160ae:	0f 01 1d cc b9 03 c0 	lidtd  ds:0xc003b9cc
c00160b5:	c3                   	ret    

c00160b6 <IDT::setup()>:
c00160b6:	57                   	push   edi
c00160b7:	56                   	push   esi
c00160b8:	53                   	push   ebx
c00160b9:	83 ec 10             	sub    esp,0x10
c00160bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00160c0:	6a 00                	push   0x0
c00160c2:	68 60 e6 02 c0       	push   0xc002e660
c00160c7:	6a 00                	push   0x0
c00160c9:	53                   	push   ebx
c00160ca:	e8 95 ff ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c00160cf:	6a 00                	push   0x0
c00160d1:	68 70 e6 02 c0       	push   0xc002e670
c00160d6:	6a 01                	push   0x1
c00160d8:	53                   	push   ebx
c00160d9:	e8 86 ff ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c00160de:	83 c4 20             	add    esp,0x20
c00160e1:	6a 00                	push   0x0
c00160e3:	68 7a e6 02 c0       	push   0xc002e67a
c00160e8:	6a 02                	push   0x2
c00160ea:	53                   	push   ebx
c00160eb:	e8 74 ff ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c00160f0:	6a 00                	push   0x0
c00160f2:	68 84 e6 02 c0       	push   0xc002e684
c00160f7:	6a 03                	push   0x3
c00160f9:	53                   	push   ebx
c00160fa:	e8 65 ff ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c00160ff:	83 c4 20             	add    esp,0x20
c0016102:	6a 00                	push   0x0
c0016104:	68 8e e6 02 c0       	push   0xc002e68e
c0016109:	6a 04                	push   0x4
c001610b:	53                   	push   ebx
c001610c:	e8 53 ff ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c0016111:	6a 00                	push   0x0
c0016113:	68 98 e6 02 c0       	push   0xc002e698
c0016118:	6a 05                	push   0x5
c001611a:	53                   	push   ebx
c001611b:	e8 44 ff ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c0016120:	83 c4 20             	add    esp,0x20
c0016123:	6a 00                	push   0x0
c0016125:	68 a2 e6 02 c0       	push   0xc002e6a2
c001612a:	6a 06                	push   0x6
c001612c:	53                   	push   ebx
c001612d:	e8 32 ff ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c0016132:	6a 00                	push   0x0
c0016134:	68 ac e6 02 c0       	push   0xc002e6ac
c0016139:	6a 07                	push   0x7
c001613b:	53                   	push   ebx
c001613c:	e8 23 ff ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c0016141:	83 c4 20             	add    esp,0x20
c0016144:	6a 00                	push   0x0
c0016146:	68 b6 e6 02 c0       	push   0xc002e6b6
c001614b:	6a 08                	push   0x8
c001614d:	53                   	push   ebx
c001614e:	e8 11 ff ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c0016153:	6a 00                	push   0x0
c0016155:	68 be e6 02 c0       	push   0xc002e6be
c001615a:	6a 09                	push   0x9
c001615c:	53                   	push   ebx
c001615d:	e8 02 ff ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c0016162:	83 c4 20             	add    esp,0x20
c0016165:	6a 00                	push   0x0
c0016167:	68 c8 e6 02 c0       	push   0xc002e6c8
c001616c:	6a 0a                	push   0xa
c001616e:	53                   	push   ebx
c001616f:	e8 f0 fe ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c0016174:	6a 00                	push   0x0
c0016176:	68 d0 e6 02 c0       	push   0xc002e6d0
c001617b:	6a 0b                	push   0xb
c001617d:	53                   	push   ebx
c001617e:	e8 e1 fe ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c0016183:	83 c4 20             	add    esp,0x20
c0016186:	6a 00                	push   0x0
c0016188:	68 d8 e6 02 c0       	push   0xc002e6d8
c001618d:	6a 0c                	push   0xc
c001618f:	53                   	push   ebx
c0016190:	e8 cf fe ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c0016195:	6a 00                	push   0x0
c0016197:	68 e0 e6 02 c0       	push   0xc002e6e0
c001619c:	6a 0d                	push   0xd
c001619e:	53                   	push   ebx
c001619f:	e8 c0 fe ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c00161a4:	83 c4 20             	add    esp,0x20
c00161a7:	6a 00                	push   0x0
c00161a9:	68 fa e6 02 c0       	push   0xc002e6fa
c00161ae:	6a 0e                	push   0xe
c00161b0:	53                   	push   ebx
c00161b1:	e8 ae fe ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c00161b6:	6a 00                	push   0x0
c00161b8:	68 02 e7 02 c0       	push   0xc002e702
c00161bd:	6a 0f                	push   0xf
c00161bf:	53                   	push   ebx
c00161c0:	e8 9f fe ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c00161c5:	83 c4 20             	add    esp,0x20
c00161c8:	6a 00                	push   0x0
c00161ca:	68 0c e7 02 c0       	push   0xc002e70c
c00161cf:	6a 10                	push   0x10
c00161d1:	53                   	push   ebx
c00161d2:	e8 8d fe ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c00161d7:	6a 00                	push   0x0
c00161d9:	68 16 e7 02 c0       	push   0xc002e716
c00161de:	6a 11                	push   0x11
c00161e0:	53                   	push   ebx
c00161e1:	e8 7e fe ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c00161e6:	83 c4 20             	add    esp,0x20
c00161e9:	6a 00                	push   0x0
c00161eb:	68 20 e7 02 c0       	push   0xc002e720
c00161f0:	6a 12                	push   0x12
c00161f2:	53                   	push   ebx
c00161f3:	e8 6c fe ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c00161f8:	6a 01                	push   0x1
c00161fa:	68 ba e7 02 c0       	push   0xc002e7ba
c00161ff:	6a 60                	push   0x60
c0016201:	53                   	push   ebx
c0016202:	e8 5d fe ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c0016207:	83 c4 20             	add    esp,0x20
c001620a:	6a 00                	push   0x0
c001620c:	68 c1 e7 02 c0       	push   0xc002e7c1
c0016211:	6a 20                	push   0x20
c0016213:	53                   	push   ebx
c0016214:	e8 4b fe ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c0016219:	6a 00                	push   0x0
c001621b:	68 ac e7 02 c0       	push   0xc002e7ac
c0016220:	6a 21                	push   0x21
c0016222:	53                   	push   ebx
c0016223:	e8 3c fe ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c0016228:	83 c4 20             	add    esp,0x20
c001622b:	6a 00                	push   0x0
c001622d:	68 b3 e7 02 c0       	push   0xc002e7b3
c0016232:	6a 22                	push   0x22
c0016234:	53                   	push   ebx
c0016235:	e8 2a fe ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c001623a:	6a 00                	push   0x0
c001623c:	68 2a e7 02 c0       	push   0xc002e72a
c0016241:	6a 23                	push   0x23
c0016243:	53                   	push   ebx
c0016244:	e8 1b fe ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c0016249:	83 c4 20             	add    esp,0x20
c001624c:	6a 00                	push   0x0
c001624e:	68 34 e7 02 c0       	push   0xc002e734
c0016253:	6a 24                	push   0x24
c0016255:	53                   	push   ebx
c0016256:	e8 09 fe ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c001625b:	6a 00                	push   0x0
c001625d:	68 3e e7 02 c0       	push   0xc002e73e
c0016262:	6a 25                	push   0x25
c0016264:	53                   	push   ebx
c0016265:	e8 fa fd ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c001626a:	83 c4 20             	add    esp,0x20
c001626d:	6a 00                	push   0x0
c001626f:	68 48 e7 02 c0       	push   0xc002e748
c0016274:	6a 26                	push   0x26
c0016276:	53                   	push   ebx
c0016277:	e8 e8 fd ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c001627c:	6a 00                	push   0x0
c001627e:	68 52 e7 02 c0       	push   0xc002e752
c0016283:	6a 27                	push   0x27
c0016285:	53                   	push   ebx
c0016286:	e8 d9 fd ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c001628b:	83 c4 20             	add    esp,0x20
c001628e:	6a 00                	push   0x0
c0016290:	68 5c e7 02 c0       	push   0xc002e75c
c0016295:	6a 28                	push   0x28
c0016297:	53                   	push   ebx
c0016298:	e8 c7 fd ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c001629d:	6a 00                	push   0x0
c001629f:	68 66 e7 02 c0       	push   0xc002e766
c00162a4:	6a 29                	push   0x29
c00162a6:	53                   	push   ebx
c00162a7:	e8 b8 fd ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c00162ac:	83 c4 20             	add    esp,0x20
c00162af:	6a 00                	push   0x0
c00162b1:	68 70 e7 02 c0       	push   0xc002e770
c00162b6:	6a 2a                	push   0x2a
c00162b8:	53                   	push   ebx
c00162b9:	e8 a6 fd ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c00162be:	6a 00                	push   0x0
c00162c0:	68 7a e7 02 c0       	push   0xc002e77a
c00162c5:	6a 2b                	push   0x2b
c00162c7:	53                   	push   ebx
c00162c8:	e8 97 fd ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c00162cd:	83 c4 20             	add    esp,0x20
c00162d0:	6a 00                	push   0x0
c00162d2:	68 84 e7 02 c0       	push   0xc002e784
c00162d7:	6a 2c                	push   0x2c
c00162d9:	53                   	push   ebx
c00162da:	e8 85 fd ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c00162df:	6a 00                	push   0x0
c00162e1:	68 8e e7 02 c0       	push   0xc002e78e
c00162e6:	6a 2d                	push   0x2d
c00162e8:	53                   	push   ebx
c00162e9:	e8 76 fd ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c00162ee:	83 c4 20             	add    esp,0x20
c00162f1:	6a 00                	push   0x0
c00162f3:	68 98 e7 02 c0       	push   0xc002e798
c00162f8:	6a 2e                	push   0x2e
c00162fa:	53                   	push   ebx
c00162fb:	e8 64 fd ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c0016300:	6a 00                	push   0x0
c0016302:	68 a2 e7 02 c0       	push   0xc002e7a2
c0016307:	6a 2f                	push   0x2f
c0016309:	53                   	push   ebx
c001630a:	e8 55 fd ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c001630f:	83 c4 20             	add    esp,0x20
c0016312:	6a 00                	push   0x0
c0016314:	68 fc e8 02 c0       	push   0xc002e8fc
c0016319:	6a 30                	push   0x30
c001631b:	53                   	push   ebx
c001631c:	e8 43 fd ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c0016321:	6a 00                	push   0x0
c0016323:	68 06 e9 02 c0       	push   0xc002e906
c0016328:	6a 31                	push   0x31
c001632a:	53                   	push   ebx
c001632b:	e8 34 fd ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c0016330:	83 c4 20             	add    esp,0x20
c0016333:	6a 00                	push   0x0
c0016335:	68 10 e9 02 c0       	push   0xc002e910
c001633a:	6a 32                	push   0x32
c001633c:	53                   	push   ebx
c001633d:	e8 22 fd ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c0016342:	6a 00                	push   0x0
c0016344:	68 1a e9 02 c0       	push   0xc002e91a
c0016349:	6a 33                	push   0x33
c001634b:	53                   	push   ebx
c001634c:	e8 13 fd ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c0016351:	83 c4 20             	add    esp,0x20
c0016354:	6a 00                	push   0x0
c0016356:	68 24 e9 02 c0       	push   0xc002e924
c001635b:	6a 34                	push   0x34
c001635d:	53                   	push   ebx
c001635e:	e8 01 fd ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c0016363:	6a 00                	push   0x0
c0016365:	68 2e e9 02 c0       	push   0xc002e92e
c001636a:	6a 35                	push   0x35
c001636c:	53                   	push   ebx
c001636d:	e8 f2 fc ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c0016372:	83 c4 20             	add    esp,0x20
c0016375:	6a 00                	push   0x0
c0016377:	68 38 e9 02 c0       	push   0xc002e938
c001637c:	6a 36                	push   0x36
c001637e:	53                   	push   ebx
c001637f:	e8 e0 fc ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c0016384:	6a 00                	push   0x0
c0016386:	68 42 e9 02 c0       	push   0xc002e942
c001638b:	6a 37                	push   0x37
c001638d:	53                   	push   ebx
c001638e:	e8 d1 fc ff ff       	call   c0016064 <IDT::addEntry(int, void (*)(), bool)>
c0016393:	83 c4 1c             	add    esp,0x1c
c0016396:	6a 03                	push   0x3
c0016398:	6a 02                	push   0x2
c001639a:	ff 35 b0 ba 03 c0    	push   DWORD PTR ds:0xc003bab0
c00163a0:	e8 8f 25 00 00       	call   c0018934 <VAS::allocatePages(int, int)>
c00163a5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00163ac:	89 c6                	mov    esi,eax
c00163ae:	e8 14 02 00 00       	call   c00165c7 <malloc>
c00163b3:	81 c6 00 20 00 00    	add    esi,0x2000
c00163b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00163bc:	89 c7                	mov    edi,eax
c00163be:	e8 91 16 00 00       	call   c0017a54 <TSS::TSS()>
c00163c3:	83 c4 0c             	add    esp,0xc
c00163c6:	68 b6 e6 02 c0       	push   0xc002e6b6
c00163cb:	56                   	push   esi
c00163cc:	57                   	push   edi
c00163cd:	e8 c6 16 00 00       	call   c0017a98 <TSS::setup(unsigned long, unsigned long)>
c00163d2:	89 c6                	mov    esi,eax
c00163d4:	58                   	pop    eax
c00163d5:	5a                   	pop    edx
c00163d6:	6a 00                	push   0x0
c00163d8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00163dc:	50                   	push   eax
c00163dd:	e8 ce fb ff ff       	call   c0015fb0 <IDTEntry::IDTEntry(bool)>
c00163e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00163e6:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00163eb:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00163f2:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00163f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00163fc:	80 ce 05             	or     dh,0x5
c00163ff:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0016402:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016406:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001640a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c001640d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016410:	e8 87 fc ff ff       	call   c001609c <IDT::flush()>
c0016415:	83 c4 20             	add    esp,0x20
c0016418:	5b                   	pop    ebx
c0016419:	5e                   	pop    esi
c001641a:	5f                   	pop    edi
c001641b:	c3                   	ret    

c001641c <sbrk>:
c001641c:	55                   	push   ebp
c001641d:	57                   	push   edi
c001641e:	56                   	push   esi
c001641f:	53                   	push   ebx
c0016420:	83 ec 1c             	sub    esp,0x1c
c0016423:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016427:	85 c0                	test   eax,eax
c0016429:	74 61                	je     c001648c <sbrk+0x70>
c001642b:	78 66                	js     c0016493 <sbrk+0x77>
c001642d:	8b 15 e4 43 03 c0    	mov    edx,DWORD PTR ds:0xc00343e4
c0016433:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016437:	05 ff 0f 00 00       	add    eax,0xfff
c001643c:	89 c5                	mov    ebp,eax
c001643e:	78 6b                	js     c00164ab <sbrk+0x8f>
c0016440:	c1 fd 0c             	sar    ebp,0xc
c0016443:	bb 00 00 00 00       	mov    ebx,0x0
c0016448:	8b 35 b0 ba 03 c0    	mov    esi,DWORD PTR ds:0xc003bab0
c001644e:	8b 3d e4 43 03 c0    	mov    edi,DWORD PTR ds:0xc00343e4
c0016454:	e8 77 04 00 00       	call   c00168d0 <Phys::allocatePage()>
c0016459:	68 01 04 00 00       	push   0x401
c001645e:	57                   	push   edi
c001645f:	50                   	push   eax
c0016460:	56                   	push   esi
c0016461:	e8 ca 23 00 00       	call   c0018830 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016466:	81 05 e4 43 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc00343e4,0x1000
c0016470:	83 c3 01             	add    ebx,0x1
c0016473:	83 c4 10             	add    esp,0x10
c0016476:	39 dd                	cmp    ebp,ebx
c0016478:	75 ce                	jne    c0016448 <sbrk+0x2c>
c001647a:	0f 20 d8             	mov    eax,cr3
c001647d:	0f 22 d8             	mov    cr3,eax
c0016480:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016484:	83 c4 1c             	add    esp,0x1c
c0016487:	5b                   	pop    ebx
c0016488:	5e                   	pop    esi
c0016489:	5f                   	pop    edi
c001648a:	5d                   	pop    ebp
c001648b:	c3                   	ret    
c001648c:	a1 e4 43 03 c0       	mov    eax,ds:0xc00343e4
c0016491:	eb f1                	jmp    c0016484 <sbrk+0x68>
c0016493:	83 ec 08             	sub    esp,0x8
c0016496:	50                   	push   eax
c0016497:	68 b0 17 03 c0       	push   0xc00317b0
c001649c:	e8 b4 2f 00 00       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c00164a1:	83 c4 10             	add    esp,0x10
c00164a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00164a9:	eb d9                	jmp    c0016484 <sbrk+0x68>
c00164ab:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c00164b1:	eb 8d                	jmp    c0016440 <sbrk+0x24>

c00164b3 <sbrk_thunk>:
c00164b3:	83 ec 0c             	sub    esp,0xc
c00164b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164ba:	3d ff bf 00 00       	cmp    eax,0xbfff
c00164bf:	7f 10                	jg     c00164d1 <sbrk_thunk+0x1e>
c00164c1:	83 ec 0c             	sub    esp,0xc
c00164c4:	50                   	push   eax
c00164c5:	e8 52 ff ff ff       	call   c001641c <sbrk>
c00164ca:	83 c4 10             	add    esp,0x10
c00164cd:	83 c4 0c             	add    esp,0xc
c00164d0:	c3                   	ret    
c00164d1:	83 ec 08             	sub    esp,0x8
c00164d4:	50                   	push   eax
c00164d5:	68 e0 17 03 c0       	push   0xc00317e0
c00164da:	e8 76 2f 00 00       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c00164df:	83 c4 10             	add    esp,0x10
c00164e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00164e7:	eb e4                	jmp    c00164cd <sbrk_thunk+0x1a>

c00164e9 <mmap>:
c00164e9:	55                   	push   ebp
c00164ea:	57                   	push   edi
c00164eb:	56                   	push   esi
c00164ec:	53                   	push   ebx
c00164ed:	83 ec 18             	sub    esp,0x18
c00164f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00164f4:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00164fa:	89 fb                	mov    ebx,edi
c00164fc:	c1 eb 0c             	shr    ebx,0xc
c00164ff:	53                   	push   ebx
c0016500:	e8 18 1c 00 00       	call   c001811d <Virt::allocateKernelVirtualPages(int)>
c0016505:	89 c5                	mov    ebp,eax
c0016507:	83 c4 10             	add    esp,0x10
c001650a:	85 db                	test   ebx,ebx
c001650c:	7e 2f                	jle    c001653d <mmap+0x54>
c001650e:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c0016514:	01 c7                	add    edi,eax
c0016516:	89 c3                	mov    ebx,eax
c0016518:	8b 35 b0 ba 03 c0    	mov    esi,DWORD PTR ds:0xc003bab0
c001651e:	e8 ad 03 00 00       	call   c00168d0 <Phys::allocatePage()>
c0016523:	68 01 04 00 00       	push   0x401
c0016528:	53                   	push   ebx
c0016529:	50                   	push   eax
c001652a:	56                   	push   esi
c001652b:	e8 00 23 00 00       	call   c0018830 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016530:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016536:	83 c4 10             	add    esp,0x10
c0016539:	39 fb                	cmp    ebx,edi
c001653b:	75 db                	jne    c0016518 <mmap+0x2f>
c001653d:	89 e8                	mov    eax,ebp
c001653f:	83 c4 0c             	add    esp,0xc
c0016542:	5b                   	pop    ebx
c0016543:	5e                   	pop    esi
c0016544:	5f                   	pop    edi
c0016545:	5d                   	pop    ebp
c0016546:	c3                   	ret    

c0016547 <munmap>:
c0016547:	83 ec 18             	sub    esp,0x18
c001654a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001654e:	e8 e8 1e 00 00       	call   c001843b <Virt::freeKernelVirtualPages(unsigned long)>
c0016553:	b8 00 00 00 00       	mov    eax,0x0
c0016558:	83 c4 1c             	add    esp,0x1c
c001655b:	c3                   	ret    

c001655c <liballoc_lock()>:
c001655c:	fa                   	cli    
c001655d:	83 05 d0 11 04 c0 01 	add    DWORD PTR ds:0xc00411d0,0x1
c0016564:	b8 00 00 00 00       	mov    eax,0x0
c0016569:	c3                   	ret    

c001656a <liballoc_unlock()>:
c001656a:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001656f:	83 e8 01             	sub    eax,0x1
c0016572:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0016577:	75 01                	jne    c001657a <liballoc_unlock()+0x10>
c0016579:	fb                   	sti    
c001657a:	b8 00 00 00 00       	mov    eax,0x0
c001657f:	c3                   	ret    

c0016580 <liballoc_alloc(int)>:
c0016580:	83 ec 10             	sub    esp,0x10
c0016583:	6a 01                	push   0x1
c0016585:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016589:	ff 35 b0 ba 03 c0    	push   DWORD PTR ds:0xc003bab0
c001658f:	e8 a0 23 00 00       	call   c0018934 <VAS::allocatePages(int, int)>
c0016594:	83 c4 1c             	add    esp,0x1c
c0016597:	c3                   	ret    

c0016598 <liballoc_free(void*, int)>:
c0016598:	83 ec 14             	sub    esp,0x14
c001659b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001659f:	ff 35 b0 ba 03 c0    	push   DWORD PTR ds:0xc003bab0
c00165a5:	e8 ce 1f 00 00       	call   c0018578 <VAS::freeAllocatedPages(unsigned long)>
c00165aa:	b8 00 00 00 00       	mov    eax,0x0
c00165af:	83 c4 1c             	add    esp,0x1c
c00165b2:	c3                   	ret    

c00165b3 <realloc>:
c00165b3:	83 ec 14             	sub    esp,0x14
c00165b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165be:	e8 4a b3 fe ff       	call   c000190d <dlrealloc>
c00165c3:	83 c4 1c             	add    esp,0x1c
c00165c6:	c3                   	ret    

c00165c7 <malloc>:
c00165c7:	83 ec 18             	sub    esp,0x18
c00165ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165ce:	e8 fd ad fe ff       	call   c00013d0 <dlmalloc>
c00165d3:	83 c4 1c             	add    esp,0x1c
c00165d6:	c3                   	ret    

c00165d7 <free>:
c00165d7:	83 ec 18             	sub    esp,0x18
c00165da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165de:	e8 26 a9 fe ff       	call   c0000f09 <dlfree>
c00165e3:	83 c4 1c             	add    esp,0x1c
c00165e6:	c3                   	ret    

c00165e7 <rfree>:
c00165e7:	83 ec 18             	sub    esp,0x18
c00165ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165ee:	e8 16 a9 fe ff       	call   c0000f09 <dlfree>
c00165f3:	83 c4 1c             	add    esp,0x1c
c00165f6:	c3                   	ret    

c00165f7 <calloc>:
c00165f7:	56                   	push   esi
c00165f8:	53                   	push   ebx
c00165f9:	83 ec 10             	sub    esp,0x10
c00165fc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016600:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0016605:	53                   	push   ebx
c0016606:	e8 bc ff ff ff       	call   c00165c7 <malloc>
c001660b:	89 c6                	mov    esi,eax
c001660d:	83 c4 0c             	add    esp,0xc
c0016610:	53                   	push   ebx
c0016611:	6a 00                	push   0x0
c0016613:	50                   	push   eax
c0016614:	e8 d7 9e fe ff       	call   c00004f0 <memset>
c0016619:	89 f0                	mov    eax,esi
c001661b:	83 c4 14             	add    esp,0x14
c001661e:	5b                   	pop    ebx
c001661f:	5e                   	pop    esi
c0016620:	c3                   	ret    

c0016621 <KeEntryPoint>:
c0016621:	57                   	push   edi
c0016622:	bf f9 03 00 00       	mov    edi,0x3f9
c0016627:	56                   	push   esi
c0016628:	89 fa                	mov    edx,edi
c001662a:	53                   	push   ebx
c001662b:	31 f6                	xor    esi,esi
c001662d:	83 ec 2c             	sub    esp,0x2c
c0016630:	a1 00 05 00 00       	mov    eax,ds:0x500
c0016635:	a3 d4 b9 03 c0       	mov    ds:0xc003b9d4,eax
c001663a:	89 f0                	mov    eax,esi
c001663c:	ee                   	out    dx,al
c001663d:	bb fb 03 00 00       	mov    ebx,0x3fb
c0016642:	b0 80                	mov    al,0x80
c0016644:	89 da                	mov    edx,ebx
c0016646:	ee                   	out    dx,al
c0016647:	b1 03                	mov    cl,0x3
c0016649:	ba f8 03 00 00       	mov    edx,0x3f8
c001664e:	88 c8                	mov    al,cl
c0016650:	ee                   	out    dx,al
c0016651:	89 f0                	mov    eax,esi
c0016653:	89 fa                	mov    edx,edi
c0016655:	ee                   	out    dx,al
c0016656:	88 c8                	mov    al,cl
c0016658:	89 da                	mov    edx,ebx
c001665a:	ee                   	out    dx,al
c001665b:	b0 c7                	mov    al,0xc7
c001665d:	ba fa 03 00 00       	mov    edx,0x3fa
c0016662:	ee                   	out    dx,al
c0016663:	b0 0b                	mov    al,0xb
c0016665:	ba fc 03 00 00       	mov    edx,0x3fc
c001666a:	ee                   	out    dx,al
c001666b:	68 ef 17 03 c0       	push   0xc00317ef
c0016670:	e8 e0 2d 00 00       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0016675:	e8 51 97 00 00       	call   c001fdcb <KeDisplaySplashScreen()>
c001667a:	a1 24 05 00 00       	mov    eax,ds:0x524
c001667f:	05 ff 0f 00 00       	add    eax,0xfff
c0016684:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016689:	89 04 24             	mov    DWORD PTR [esp],eax
c001668c:	e8 ad 03 00 00       	call   c0016a3e <Phys::physicalMemorySetup(unsigned int)>
c0016691:	e8 65 1c 00 00       	call   c00182fb <Virt::virtualMemorySetup()>
c0016696:	e8 7a 96 00 00       	call   c001fd15 <KeInitialiseAtexit()>
c001669b:	58                   	pop    eax
c001669c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c00166a0:	53                   	push   ebx
c00166a1:	e8 52 1f 00 00       	call   c00185f8 <VAS::VAS()>
c00166a6:	89 1d b0 ba 03 c0    	mov    DWORD PTR ds:0xc003bab0,ebx
c00166ac:	e8 49 88 01 00       	call   c002eefa <_init>
c00166b1:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00166b8:	e8 0a ff ff ff       	call   c00165c7 <malloc>
c00166bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00166c0:	89 c6                	mov    esi,eax
c00166c2:	e8 b5 f1 ff ff       	call   c001587c <Computer::Computer()>
c00166c7:	53                   	push   ebx
c00166c8:	89 35 bc b9 03 c0    	mov    DWORD PTR ds:0xc003b9bc,esi
c00166ce:	6a 00                	push   0x0
c00166d0:	6a 00                	push   0x0
c00166d2:	56                   	push   esi
c00166d3:	e8 6c f5 ff ff       	call   c0015c44 <Computer::open(int, int, void*)>
c00166d8:	83 c4 14             	add    esp,0x14
c00166db:	53                   	push   ebx
c00166dc:	e8 e1 1f 00 00       	call   c00186c2 <VAS::~VAS()>
c00166e1:	83 c4 30             	add    esp,0x30
c00166e4:	5b                   	pop    ebx
c00166e5:	5e                   	pop    esi
c00166e6:	5f                   	pop    edi
c00166e7:	c3                   	ret    

c00166e8 <Phys::allocateDMA(unsigned long)>:
c00166e8:	55                   	push   ebp
c00166e9:	31 ed                	xor    ebp,ebp
c00166eb:	57                   	push   edi
c00166ec:	56                   	push   esi
c00166ed:	53                   	push   ebx
c00166ee:	31 db                	xor    ebx,ebx
c00166f0:	83 ec 1c             	sub    esp,0x1c
c00166f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166f7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00166ff:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0016705:	31 c0                	xor    eax,eax
c0016707:	c1 ef 0c             	shr    edi,0xc
c001670a:	eb 1b                	jmp    c0016727 <Phys::allocateDMA(unsigned long)+0x3f>
c001670c:	85 c0                	test   eax,eax
c001670e:	75 06                	jne    c0016716 <Phys::allocateDMA(unsigned long)+0x2e>
c0016710:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016714:	89 dd                	mov    ebp,ebx
c0016716:	8d 70 01             	lea    esi,[eax+0x1]
c0016719:	39 f7                	cmp    edi,esi
c001671b:	74 37                	je     c0016754 <Phys::allocateDMA(unsigned long)+0x6c>
c001671d:	89 f0                	mov    eax,esi
c001671f:	83 c3 01             	add    ebx,0x1
c0016722:	83 fb 0f             	cmp    ebx,0xf
c0016725:	7f 13                	jg     c001673a <Phys::allocateDMA(unsigned long)+0x52>
c0016727:	80 bb f0 b9 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffc4610],0x0
c001672e:	74 dc                	je     c001670c <Phys::allocateDMA(unsigned long)+0x24>
c0016730:	31 c0                	xor    eax,eax
c0016732:	83 c3 01             	add    ebx,0x1
c0016735:	83 fb 0f             	cmp    ebx,0xf
c0016738:	7e ed                	jle    c0016727 <Phys::allocateDMA(unsigned long)+0x3f>
c001673a:	83 ec 0c             	sub    esp,0xc
c001673d:	68 08 18 03 c0       	push   0xc0031808
c0016742:	e8 47 a0 00 00       	call   c002078e <KePanic(char const*)>
c0016747:	83 c4 10             	add    esp,0x10
c001674a:	31 c0                	xor    eax,eax
c001674c:	83 c4 1c             	add    esp,0x1c
c001674f:	5b                   	pop    ebx
c0016750:	5e                   	pop    esi
c0016751:	5f                   	pop    edi
c0016752:	5d                   	pop    ebp
c0016753:	c3                   	ret    
c0016754:	89 e9                	mov    ecx,ebp
c0016756:	c1 f9 04             	sar    ecx,0x4
c0016759:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001675d:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0016761:	89 ca                	mov    edx,ecx
c0016763:	83 ea 01             	sub    edx,0x1
c0016766:	79 03                	jns    c001676b <Phys::allocateDMA(unsigned long)+0x83>
c0016768:	8d 51 0e             	lea    edx,[ecx+0xe]
c001676b:	c1 fa 04             	sar    edx,0x4
c001676e:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0016772:	74 08                	je     c001677c <Phys::allocateDMA(unsigned long)+0x94>
c0016774:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016778:	31 c0                	xor    eax,eax
c001677a:	eb b6                	jmp    c0016732 <Phys::allocateDMA(unsigned long)+0x4a>
c001677c:	85 f6                	test   esi,esi
c001677e:	74 17                	je     c0016797 <Phys::allocateDMA(unsigned long)+0xaf>
c0016780:	8d 95 f0 b9 03 c0    	lea    edx,[ebp-0x3ffc4610]
c0016786:	8d 84 05 f1 b9 03 c0 	lea    eax,[ebp+eax*1-0x3ffc460f]
c001678d:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0016790:	83 c2 01             	add    edx,0x1
c0016793:	39 d0                	cmp    eax,edx
c0016795:	75 f6                	jne    c001678d <Phys::allocateDMA(unsigned long)+0xa5>
c0016797:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c001679c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167a0:	01 f8                	add    eax,edi
c00167a2:	85 d2                	test   edx,edx
c00167a4:	a3 e8 b9 03 c0       	mov    ds:0xc003b9e8,eax
c00167a9:	74 17                	je     c00167c2 <Phys::allocateDMA(unsigned long)+0xda>
c00167ab:	83 ec 0c             	sub    esp,0xc
c00167ae:	68 08 18 03 c0       	push   0xc0031808
c00167b3:	e8 d6 9f 00 00       	call   c002078e <KePanic(char const*)>
c00167b8:	83 c4 10             	add    esp,0x10
c00167bb:	89 f0                	mov    eax,esi
c00167bd:	e9 5d ff ff ff       	jmp    c001671f <Phys::allocateDMA(unsigned long)+0x37>
c00167c2:	c1 e5 0c             	shl    ebp,0xc
c00167c5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00167cb:	e9 7c ff ff ff       	jmp    c001674c <Phys::allocateDMA(unsigned long)+0x64>

c00167d0 <Phys::freeDMA(unsigned long, unsigned long)>:
c00167d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00167d4:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00167da:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c00167df:	c1 ea 0c             	shr    edx,0xc
c00167e2:	29 d0                	sub    eax,edx
c00167e4:	a3 e8 b9 03 c0       	mov    ds:0xc003b9e8,eax
c00167e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167ed:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00167f2:	c1 e8 0c             	shr    eax,0xc
c00167f5:	85 d2                	test   edx,edx
c00167f7:	74 11                	je     c001680a <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c00167f9:	05 f0 b9 03 c0       	add    eax,0xc003b9f0
c00167fe:	01 c2                	add    edx,eax
c0016800:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016803:	83 c0 01             	add    eax,0x1
c0016806:	39 d0                	cmp    eax,edx
c0016808:	75 f6                	jne    c0016800 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c001680a:	c3                   	ret    

c001680b <Phys::setPageState(unsigned long, bool)>:
c001680b:	57                   	push   edi
c001680c:	56                   	push   esi
c001680d:	8b 35 e8 43 03 c0    	mov    esi,DWORD PTR ds:0xc00343e8
c0016813:	53                   	push   ebx
c0016814:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0016819:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001681d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016821:	0f b6 c0             	movzx  eax,al
c0016824:	89 ca                	mov    edx,ecx
c0016826:	83 e1 07             	and    ecx,0x7
c0016829:	c1 ea 03             	shr    edx,0x3
c001682c:	d3 c3                	rol    ebx,cl
c001682e:	01 d6                	add    esi,edx
c0016830:	d3 e0                	shl    eax,cl
c0016832:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0016835:	21 fb                	and    ebx,edi
c0016837:	88 1e                	mov    BYTE PTR [esi],bl
c0016839:	8b 1d e8 43 03 c0    	mov    ebx,DWORD PTR ds:0xc00343e8
c001683f:	01 da                	add    edx,ebx
c0016841:	8a 0a                	mov    cl,BYTE PTR [edx]
c0016843:	09 c8                	or     eax,ecx
c0016845:	88 02                	mov    BYTE PTR [edx],al
c0016847:	5b                   	pop    ebx
c0016848:	5e                   	pop    esi
c0016849:	5f                   	pop    edi
c001684a:	c3                   	ret    

c001684b <Phys::getPageState(unsigned long)>:
c001684b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001684f:	8b 15 e8 43 03 c0    	mov    edx,DWORD PTR ds:0xc00343e8
c0016855:	89 c8                	mov    eax,ecx
c0016857:	83 e1 07             	and    ecx,0x7
c001685a:	c1 e8 03             	shr    eax,0x3
c001685d:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0016861:	d3 f8                	sar    eax,cl
c0016863:	83 e0 01             	and    eax,0x1
c0016866:	c3                   	ret    

c0016867 <Phys::freePage(unsigned long)>:
c0016867:	53                   	push   ebx
c0016868:	83 ec 08             	sub    esp,0x8
c001686b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001686f:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0016875:	81 fa ff ff 00 00    	cmp    edx,0xffff
c001687b:	76 41                	jbe    c00168be <Phys::freePage(unsigned long)+0x57>
c001687d:	c1 e8 0c             	shr    eax,0xc
c0016880:	50                   	push   eax
c0016881:	89 c3                	mov    ebx,eax
c0016883:	e8 c3 ff ff ff       	call   c001684b <Phys::getPageState(unsigned long)>
c0016888:	5a                   	pop    edx
c0016889:	84 c0                	test   al,al
c001688b:	74 20                	je     c00168ad <Phys::freePage(unsigned long)+0x46>
c001688d:	83 ec 08             	sub    esp,0x8
c0016890:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c0016895:	6a 00                	push   0x0
c0016897:	83 e8 01             	sub    eax,0x1
c001689a:	53                   	push   ebx
c001689b:	a3 e8 b9 03 c0       	mov    ds:0xc003b9e8,eax
c00168a0:	e8 66 ff ff ff       	call   c001680b <Phys::setPageState(unsigned long, bool)>
c00168a5:	83 c4 10             	add    esp,0x10
c00168a8:	83 c4 08             	add    esp,0x8
c00168ab:	5b                   	pop    ebx
c00168ac:	c3                   	ret    
c00168ad:	c7 44 24 10 ad 18 03 c0 	mov    DWORD PTR [esp+0x10],0xc00318ad
c00168b5:	83 c4 08             	add    esp,0x8
c00168b8:	5b                   	pop    ebx
c00168b9:	e9 d0 9e 00 00       	jmp    c002078e <KePanic(char const*)>
c00168be:	68 00 10 00 00       	push   0x1000
c00168c3:	50                   	push   eax
c00168c4:	e8 07 ff ff ff       	call   c00167d0 <Phys::freeDMA(unsigned long, unsigned long)>
c00168c9:	59                   	pop    ecx
c00168ca:	5b                   	pop    ebx
c00168cb:	83 c4 08             	add    esp,0x8
c00168ce:	5b                   	pop    ebx
c00168cf:	c3                   	ret    

c00168d0 <Phys::allocatePage()>:
c00168d0:	56                   	push   esi
c00168d1:	53                   	push   ebx
c00168d2:	83 ec 14             	sub    esp,0x14
c00168d5:	8b 35 dc b9 03 c0    	mov    esi,DWORD PTR ds:0xc003b9dc
c00168db:	89 f3                	mov    ebx,esi
c00168dd:	eb 0a                	jmp    c00168e9 <Phys::allocatePage()+0x19>
c00168df:	89 1d dc b9 03 c0    	mov    DWORD PTR ds:0xc003b9dc,ebx
c00168e5:	39 de                	cmp    esi,ebx
c00168e7:	74 26                	je     c001690f <Phys::allocatePage()+0x3f>
c00168e9:	53                   	push   ebx
c00168ea:	e8 5c ff ff ff       	call   c001684b <Phys::getPageState(unsigned long)>
c00168ef:	5a                   	pop    edx
c00168f0:	84 c0                	test   al,al
c00168f2:	74 67                	je     c001695b <Phys::allocatePage()+0x8b>
c00168f4:	83 c3 01             	add    ebx,0x1
c00168f7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00168fd:	75 e0                	jne    c00168df <Phys::allocatePage()+0xf>
c00168ff:	31 db                	xor    ebx,ebx
c0016901:	c7 05 dc b9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b9dc,0x0
c001690b:	39 de                	cmp    esi,ebx
c001690d:	75 da                	jne    c00168e9 <Phys::allocatePage()+0x19>
c001690f:	83 ec 0c             	sub    esp,0xc
c0016912:	a0 00 ba 03 c0       	mov    al,ds:0xc003ba00
c0016917:	83 f0 01             	xor    eax,0x1
c001691a:	a2 00 ba 03 c0       	mov    ds:0xc003ba00,al
c001691f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016924:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016927:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001692d:	50                   	push   eax
c001692e:	e8 a7 27 00 00       	call   c00190da <VAS::scanForEviction()>
c0016933:	83 c4 10             	add    esp,0x10
c0016936:	85 c0                	test   eax,eax
c0016938:	75 48                	jne    c0016982 <Phys::allocatePage()+0xb2>
c001693a:	83 ec 0c             	sub    esp,0xc
c001693d:	68 30 18 03 c0       	push   0xc0031830
c0016942:	e8 47 9e 00 00       	call   c002078e <KePanic(char const*)>
c0016947:	83 c4 10             	add    esp,0x10
c001694a:	8b 1d dc b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9dc
c0016950:	53                   	push   ebx
c0016951:	e8 f5 fe ff ff       	call   c001684b <Phys::getPageState(unsigned long)>
c0016956:	5a                   	pop    edx
c0016957:	84 c0                	test   al,al
c0016959:	75 99                	jne    c00168f4 <Phys::allocatePage()+0x24>
c001695b:	6a 01                	push   0x1
c001695d:	53                   	push   ebx
c001695e:	e8 a8 fe ff ff       	call   c001680b <Phys::setPageState(unsigned long, bool)>
c0016963:	8b 15 e8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9e8
c0016969:	a1 dc b9 03 c0       	mov    eax,ds:0xc003b9dc
c001696e:	83 c2 01             	add    edx,0x1
c0016971:	59                   	pop    ecx
c0016972:	89 15 e8 b9 03 c0    	mov    DWORD PTR ds:0xc003b9e8,edx
c0016978:	c1 e0 0c             	shl    eax,0xc
c001697b:	5b                   	pop    ebx
c001697c:	83 c4 14             	add    esp,0x14
c001697f:	5b                   	pop    ebx
c0016980:	5e                   	pop    esi
c0016981:	c3                   	ret    
c0016982:	83 ec 08             	sub    esp,0x8
c0016985:	89 c2                	mov    edx,eax
c0016987:	6a 01                	push   0x1
c0016989:	c1 ea 0c             	shr    edx,0xc
c001698c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016990:	52                   	push   edx
c0016991:	e8 75 fe ff ff       	call   c001680b <Phys::setPageState(unsigned long, bool)>
c0016996:	83 c4 10             	add    esp,0x10
c0016999:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001699d:	eb dd                	jmp    c001697c <Phys::allocatePage()+0xac>

c001699f <Phys::allocateContiguousPages(int)>:
c001699f:	57                   	push   edi
c00169a0:	56                   	push   esi
c00169a1:	53                   	push   ebx
c00169a2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00169a6:	fa                   	cli    
c00169a7:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00169ac:	31 db                	xor    ebx,ebx
c00169ae:	83 c0 01             	add    eax,0x1
c00169b1:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00169b6:	85 db                	test   ebx,ebx
c00169b8:	75 11                	jne    c00169cb <Phys::allocateContiguousPages(int)+0x2c>
c00169ba:	e8 11 ff ff ff       	call   c00168d0 <Phys::allocatePage()>
c00169bf:	83 fe 01             	cmp    esi,0x1
c00169c2:	89 c7                	mov    edi,eax
c00169c4:	74 21                	je     c00169e7 <Phys::allocateContiguousPages(int)+0x48>
c00169c6:	bb 01 00 00 00       	mov    ebx,0x1
c00169cb:	e8 00 ff ff ff       	call   c00168d0 <Phys::allocatePage()>
c00169d0:	89 da                	mov    edx,ebx
c00169d2:	c1 e2 0c             	shl    edx,0xc
c00169d5:	01 fa                	add    edx,edi
c00169d7:	39 c2                	cmp    edx,eax
c00169d9:	74 22                	je     c00169fd <Phys::allocateContiguousPages(int)+0x5e>
c00169db:	bb 01 00 00 00       	mov    ebx,0x1
c00169e0:	89 c7                	mov    edi,eax
c00169e2:	83 fe 01             	cmp    esi,0x1
c00169e5:	75 e4                	jne    c00169cb <Phys::allocateContiguousPages(int)+0x2c>
c00169e7:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00169ec:	83 e8 01             	sub    eax,0x1
c00169ef:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00169f4:	75 01                	jne    c00169f7 <Phys::allocateContiguousPages(int)+0x58>
c00169f6:	fb                   	sti    
c00169f7:	89 f8                	mov    eax,edi
c00169f9:	5b                   	pop    ebx
c00169fa:	5e                   	pop    esi
c00169fb:	5f                   	pop    edi
c00169fc:	c3                   	ret    
c00169fd:	83 c3 01             	add    ebx,0x1
c0016a00:	39 f3                	cmp    ebx,esi
c0016a02:	75 b2                	jne    c00169b6 <Phys::allocateContiguousPages(int)+0x17>
c0016a04:	eb e1                	jmp    c00169e7 <Phys::allocateContiguousPages(int)+0x48>

c0016a06 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0016a06:	56                   	push   esi
c0016a07:	53                   	push   ebx
c0016a08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a0c:	39 1d e0 b9 03 c0    	cmp    DWORD PTR ds:0xc003b9e0,ebx
c0016a12:	73 06                	jae    c0016a1a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0016a14:	89 1d e0 b9 03 c0    	mov    DWORD PTR ds:0xc003b9e0,ebx
c0016a1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a1e:	c1 eb 0c             	shr    ebx,0xc
c0016a21:	c1 e8 0c             	shr    eax,0xc
c0016a24:	39 d8                	cmp    eax,ebx
c0016a26:	73 13                	jae    c0016a3b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0016a28:	6a 00                	push   0x0
c0016a2a:	8d 70 01             	lea    esi,[eax+0x1]
c0016a2d:	50                   	push   eax
c0016a2e:	e8 d8 fd ff ff       	call   c001680b <Phys::setPageState(unsigned long, bool)>
c0016a33:	5a                   	pop    edx
c0016a34:	89 f0                	mov    eax,esi
c0016a36:	59                   	pop    ecx
c0016a37:	39 f3                	cmp    ebx,esi
c0016a39:	75 ed                	jne    c0016a28 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0016a3b:	5b                   	pop    ebx
c0016a3c:	5e                   	pop    esi
c0016a3d:	c3                   	ret    

c0016a3e <Phys::physicalMemorySetup(unsigned int)>:
c0016a3e:	55                   	push   ebp
c0016a3f:	57                   	push   edi
c0016a40:	56                   	push   esi
c0016a41:	53                   	push   ebx
c0016a42:	83 ec 40             	sub    esp,0x40
c0016a45:	6a 10                	push   0x10
c0016a47:	6a 00                	push   0x0
c0016a49:	68 f0 b9 03 c0       	push   0xc003b9f0
c0016a4e:	e8 9d 9a fe ff       	call   c00004f0 <memset>
c0016a53:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0016a57:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016a5c:	05 00 10 00 00       	add    eax,0x1000
c0016a61:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016a65:	5b                   	pop    ebx
c0016a66:	31 db                	xor    ebx,ebx
c0016a68:	5e                   	pop    esi
c0016a69:	50                   	push   eax
c0016a6a:	68 c3 18 03 c0       	push   0xc00318c3
c0016a6f:	e8 e1 29 00 00       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0016a74:	83 c4 10             	add    esp,0x10
c0016a77:	83 ec 08             	sub    esp,0x8
c0016a7a:	6a 01                	push   0x1
c0016a7c:	53                   	push   ebx
c0016a7d:	83 c3 01             	add    ebx,0x1
c0016a80:	e8 86 fd ff ff       	call   c001680b <Phys::setPageState(unsigned long, bool)>
c0016a85:	83 c4 10             	add    esp,0x10
c0016a88:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0016a8e:	75 e7                	jne    c0016a77 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0016a90:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0016a97:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0016a9e:	c1 e0 08             	shl    eax,0x8
c0016aa1:	09 c2                	or     edx,eax
c0016aa3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0016aa7:	0f 84 98 01 00 00    	je     c0016c45 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0016aad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ab1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016ab9:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0016abe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016ac2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016aca:	eb 1c                	jmp    c0016ae8 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0016acc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016ad0:	83 c3 18             	add    ebx,0x18
c0016ad3:	83 c6 01             	add    esi,0x1
c0016ad6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0016ada:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ade:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0016ae2:	0f 84 6d 01 00 00    	je     c0016c55 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0016ae8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016aeb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016aee:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0016af1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016af5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016af9:	8b 33                	mov    esi,DWORD PTR [ebx]
c0016afb:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0016afe:	01 f0                	add    eax,esi
c0016b00:	55                   	push   ebp
c0016b01:	11 fa                	adc    edx,edi
c0016b03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b07:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016b0b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b0f:	51                   	push   ecx
c0016b10:	56                   	push   esi
c0016b11:	68 60 18 03 c0       	push   0xc0031860
c0016b16:	e8 3a 29 00 00       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0016b1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b1f:	83 c4 10             	add    esp,0x10
c0016b22:	09 f8                	or     eax,edi
c0016b24:	0f 85 2b 01 00 00    	jne    c0016c55 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0016b2a:	83 fd 01             	cmp    ebp,0x1
c0016b2d:	75 9d                	jne    c0016acc <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016b2f:	ba 00 00 08 00       	mov    edx,0x80000
c0016b34:	89 c1                	mov    ecx,eax
c0016b36:	39 f2                	cmp    edx,esi
c0016b38:	19 f9                	sbb    ecx,edi
c0016b3a:	0f 82 ab 00 00 00    	jb     c0016beb <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0016b40:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0016b44:	89 c1                	mov    ecx,eax
c0016b46:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0016b4a:	0f 83 9b 00 00 00    	jae    c0016beb <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0016b50:	ba 00 00 0a 00       	mov    edx,0xa0000
c0016b55:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016b59:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0016b5d:	39 fa                	cmp    edx,edi
c0016b5f:	19 e8                	sbb    eax,ebp
c0016b61:	0f 82 b0 01 00 00    	jb     c0016d17 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0016b67:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016b6b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0016b6f:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0016b75:	ba ff 1f 00 00       	mov    edx,0x1fff
c0016b7a:	83 d5 ff             	adc    ebp,0xffffffff
c0016b7d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0016b81:	31 c0                	xor    eax,eax
c0016b83:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0016b87:	39 fa                	cmp    edx,edi
c0016b89:	89 c1                	mov    ecx,eax
c0016b8b:	19 e9                	sbb    ecx,ebp
c0016b8d:	0f 83 39 ff ff ff    	jae    c0016acc <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016b93:	be 00 00 08 00       	mov    esi,0x80000
c0016b98:	83 ec 04             	sub    esp,0x4
c0016b9b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016b9f:	57                   	push   edi
c0016ba0:	56                   	push   esi
c0016ba1:	68 84 18 03 c0       	push   0xc0031884
c0016ba6:	e8 aa 28 00 00       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0016bab:	5d                   	pop    ebp
c0016bac:	58                   	pop    eax
c0016bad:	57                   	push   edi
c0016bae:	56                   	push   esi
c0016baf:	e8 52 fe ff ff       	call   c0016a06 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0016bb4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016bb8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016bbc:	83 c4 0c             	add    esp,0xc
c0016bbf:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016bc3:	8b 15 ec b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9ec
c0016bc9:	01 d0                	add    eax,edx
c0016bcb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0016bd2:	a3 ec b9 03 c0       	mov    ds:0xc003b9ec,eax
c0016bd7:	52                   	push   edx
c0016bd8:	50                   	push   eax
c0016bd9:	68 e9 18 03 c0       	push   0xc00318e9
c0016bde:	e8 72 28 00 00       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0016be3:	83 c4 10             	add    esp,0x10
c0016be6:	e9 e1 fe ff ff       	jmp    c0016acc <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016beb:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0016bef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016bf3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016bf7:	39 ea                	cmp    edx,ebp
c0016bf9:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0016bfd:	0f 82 c9 fe ff ff    	jb     c0016acc <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016c03:	ba ff 1f 00 00       	mov    edx,0x1fff
c0016c08:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0016c0c:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0016c10:	0f 83 b6 fe ff ff    	jae    c0016acc <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016c16:	39 ee                	cmp    esi,ebp
c0016c18:	89 f8                	mov    eax,edi
c0016c1a:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0016c1e:	0f 83 74 ff ff ff    	jae    c0016b98 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0016c24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c28:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c2c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0016c30:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0016c34:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0016c38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016c3c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016c40:	e9 53 ff ff ff       	jmp    c0016b98 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0016c45:	83 ec 0c             	sub    esp,0xc
c0016c48:	68 db 18 03 c0       	push   0xc00318db
c0016c4d:	e8 3c 9b 00 00       	call   c002078e <KePanic(char const*)>
c0016c52:	83 c4 10             	add    esp,0x10
c0016c55:	83 ec 08             	sub    esp,0x8
c0016c58:	bb 60 00 00 00       	mov    ebx,0x60
c0016c5d:	6a 00                	push   0x0
c0016c5f:	6a 06                	push   0x6
c0016c61:	e8 a5 fb ff ff       	call   c001680b <Phys::setPageState(unsigned long, bool)>
c0016c66:	58                   	pop    eax
c0016c67:	5a                   	pop    edx
c0016c68:	6a 00                	push   0x0
c0016c6a:	6a 07                	push   0x7
c0016c6c:	e8 9a fb ff ff       	call   c001680b <Phys::setPageState(unsigned long, bool)>
c0016c71:	8b 0d ec b9 03 c0    	mov    ecx,DWORD PTR ds:0xc003b9ec
c0016c77:	83 c4 10             	add    esp,0x10
c0016c7a:	83 c1 02             	add    ecx,0x2
c0016c7d:	89 0d ec b9 03 c0    	mov    DWORD PTR ds:0xc003b9ec,ecx
c0016c83:	83 ec 08             	sub    esp,0x8
c0016c86:	6a 00                	push   0x0
c0016c88:	53                   	push   ebx
c0016c89:	83 c3 01             	add    ebx,0x1
c0016c8c:	e8 7a fb ff ff       	call   c001680b <Phys::setPageState(unsigned long, bool)>
c0016c91:	83 c4 10             	add    esp,0x10
c0016c94:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0016c9a:	75 e7                	jne    c0016c83 <Phys::physicalMemorySetup(unsigned int)+0x245>
c0016c9c:	a1 ec b9 03 c0       	mov    eax,ds:0xc003b9ec
c0016ca1:	bb 40 01 00 00       	mov    ebx,0x140
c0016ca6:	83 c0 20             	add    eax,0x20
c0016ca9:	a3 ec b9 03 c0       	mov    ds:0xc003b9ec,eax
c0016cae:	eb 26                	jmp    c0016cd6 <Phys::physicalMemorySetup(unsigned int)+0x298>
c0016cb0:	83 ec 08             	sub    esp,0x8
c0016cb3:	6a 00                	push   0x0
c0016cb5:	53                   	push   ebx
c0016cb6:	83 c3 01             	add    ebx,0x1
c0016cb9:	e8 4d fb ff ff       	call   c001680b <Phys::setPageState(unsigned long, bool)>
c0016cbe:	a1 ec b9 03 c0       	mov    eax,ds:0xc003b9ec
c0016cc3:	83 c4 10             	add    esp,0x10
c0016cc6:	83 c0 01             	add    eax,0x1
c0016cc9:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0016ccf:	a3 ec b9 03 c0       	mov    ds:0xc003b9ec,eax
c0016cd4:	74 07                	je     c0016cdd <Phys::physicalMemorySetup(unsigned int)+0x29f>
c0016cd6:	3d ff 03 00 00       	cmp    eax,0x3ff
c0016cdb:	7e d3                	jle    c0016cb0 <Phys::physicalMemorySetup(unsigned int)+0x272>
c0016cdd:	bb d0 01 00 00       	mov    ebx,0x1d0
c0016ce2:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016ce7:	7f 26                	jg     c0016d0f <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c0016ce9:	83 ec 08             	sub    esp,0x8
c0016cec:	6a 00                	push   0x0
c0016cee:	53                   	push   ebx
c0016cef:	83 c3 01             	add    ebx,0x1
c0016cf2:	e8 14 fb ff ff       	call   c001680b <Phys::setPageState(unsigned long, bool)>
c0016cf7:	a1 ec b9 03 c0       	mov    eax,ds:0xc003b9ec
c0016cfc:	83 c4 10             	add    esp,0x10
c0016cff:	83 c0 01             	add    eax,0x1
c0016d02:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0016d08:	a3 ec b9 03 c0       	mov    ds:0xc003b9ec,eax
c0016d0d:	75 d3                	jne    c0016ce2 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c0016d0f:	83 c4 3c             	add    esp,0x3c
c0016d12:	5b                   	pop    ebx
c0016d13:	5e                   	pop    esi
c0016d14:	5f                   	pop    edi
c0016d15:	5d                   	pop    ebp
c0016d16:	c3                   	ret    
c0016d17:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0016d1f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016d27:	e9 3b fe ff ff       	jmp    c0016b67 <Phys::physicalMemorySetup(unsigned int)+0x129>

c0016d2c <Pipe::isAtty()>:
c0016d2c:	31 c0                	xor    eax,eax
c0016d2e:	c3                   	ret    
c0016d2f:	90                   	nop

c0016d30 <Pipe::~Pipe()>:
c0016d30:	83 ec 0c             	sub    esp,0xc
c0016d33:	ba 48 19 03 c0       	mov    edx,0xc0031948
c0016d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d3c:	89 10                	mov    DWORD PTR [eax],edx
c0016d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d42:	83 ec 0c             	sub    esp,0xc
c0016d45:	50                   	push   eax
c0016d46:	e8 69 11 00 00       	call   c0017eb4 <UnixFile::~UnixFile()>
c0016d4b:	83 c4 10             	add    esp,0x10
c0016d4e:	90                   	nop
c0016d4f:	83 c4 0c             	add    esp,0xc
c0016d52:	c3                   	ret    
c0016d53:	90                   	nop

c0016d54 <Pipe::~Pipe()>:
c0016d54:	83 ec 0c             	sub    esp,0xc
c0016d57:	83 ec 0c             	sub    esp,0xc
c0016d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d5e:	e8 cd ff ff ff       	call   c0016d30 <Pipe::~Pipe()>
c0016d63:	83 c4 10             	add    esp,0x10
c0016d66:	83 ec 08             	sub    esp,0x8
c0016d69:	6a 20                	push   0x20
c0016d6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d6f:	e8 b4 25 00 00       	call   c0019328 <operator delete(void*, unsigned long)>
c0016d74:	83 c4 10             	add    esp,0x10
c0016d77:	83 c4 0c             	add    esp,0xc
c0016d7a:	c3                   	ret    
c0016d7b:	90                   	nop

c0016d7c <Pipe::write(unsigned long long, void*, int*)>:
c0016d7c:	55                   	push   ebp
c0016d7d:	57                   	push   edi
c0016d7e:	56                   	push   esi
c0016d7f:	53                   	push   ebx
c0016d80:	83 ec 1c             	sub    esp,0x1c
c0016d83:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016d87:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d8b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0016d8e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016d92:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d95:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016d99:	89 d8                	mov    eax,ebx
c0016d9b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016d9e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016da2:	89 d6                	mov    esi,edx
c0016da4:	89 d7                	mov    edi,edx
c0016da6:	c1 ff 1f             	sar    edi,0x1f
c0016da9:	03 34 24             	add    esi,DWORD PTR [esp]
c0016dac:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0016db0:	c1 f8 1f             	sar    eax,0x1f
c0016db3:	39 f3                	cmp    ebx,esi
c0016db5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016db9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016dbd:	19 f8                	sbb    eax,edi
c0016dbf:	b8 01 00 00 00       	mov    eax,0x1
c0016dc4:	72 6e                	jb     c0016e34 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0016dc6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016dc9:	01 d0                	add    eax,edx
c0016dcb:	99                   	cdq    
c0016dcc:	f7 fb                	idiv   ebx
c0016dce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dd2:	29 d3                	sub    ebx,edx
c0016dd4:	89 d7                	mov    edi,edx
c0016dd6:	89 de                	mov    esi,ebx
c0016dd8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016ddb:	c1 fb 1f             	sar    ebx,0x1f
c0016dde:	39 f2                	cmp    edx,esi
c0016de0:	19 d8                	sbb    eax,ebx
c0016de2:	b8 00 00 00 00       	mov    eax,0x0
c0016de7:	72 04                	jb     c0016ded <Pipe::write(unsigned long long, void*, int*)+0x71>
c0016de9:	89 d0                	mov    eax,edx
c0016deb:	29 f0                	sub    eax,esi
c0016ded:	89 d3                	mov    ebx,edx
c0016def:	29 c3                	sub    ebx,eax
c0016df1:	74 0b                	je     c0016dfe <Pipe::write(unsigned long long, void*, int*)+0x82>
c0016df3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0016df6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016dfa:	89 d9                	mov    ecx,ebx
c0016dfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016dfe:	85 c0                	test   eax,eax
c0016e00:	74 0d                	je     c0016e0f <Pipe::write(unsigned long long, void*, int*)+0x93>
c0016e02:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016e06:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016e09:	89 de                	mov    esi,ebx
c0016e0b:	89 c1                	mov    ecx,eax
c0016e0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e0f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0016e12:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016e17:	75 10                	jne    c0016e29 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0016e19:	83 ec 0c             	sub    esp,0xc
c0016e1c:	68 05 19 03 c0       	push   0xc0031905
c0016e21:	e8 68 99 00 00       	call   c002078e <KePanic(char const*)>
c0016e26:	83 c4 10             	add    esp,0x10
c0016e29:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016e2d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016e30:	89 08                	mov    DWORD PTR [eax],ecx
c0016e32:	31 c0                	xor    eax,eax
c0016e34:	83 c4 1c             	add    esp,0x1c
c0016e37:	5b                   	pop    ebx
c0016e38:	5e                   	pop    esi
c0016e39:	5f                   	pop    edi
c0016e3a:	5d                   	pop    ebp
c0016e3b:	c3                   	ret    

c0016e3c <Pipe::read(unsigned long long, void*, int*)>:
c0016e3c:	55                   	push   ebp
c0016e3d:	57                   	push   edi
c0016e3e:	56                   	push   esi
c0016e3f:	53                   	push   ebx
c0016e40:	83 ec 1c             	sub    esp,0x1c
c0016e43:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016e47:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016e4b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0016e4f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0016e52:	89 c8                	mov    eax,ecx
c0016e54:	99                   	cdq    
c0016e55:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0016e59:	74 24                	je     c0016e7f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016e5b:	39 f9                	cmp    ecx,edi
c0016e5d:	89 d1                	mov    ecx,edx
c0016e5f:	19 f1                	sbb    ecx,esi
c0016e61:	73 1c                	jae    c0016e7f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016e63:	fa                   	cli    
c0016e64:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c0016e6a:	e8 2d e9 00 00       	call   c002579c <schedule()>
c0016e6f:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0016e74:	48                   	dec    eax
c0016e75:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0016e7a:	75 d3                	jne    c0016e4f <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016e7c:	fb                   	sti    
c0016e7d:	eb d0                	jmp    c0016e4f <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016e7f:	39 f8                	cmp    eax,edi
c0016e81:	89 d1                	mov    ecx,edx
c0016e83:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016e86:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016e8a:	19 f1                	sbb    ecx,esi
c0016e8c:	73 07                	jae    c0016e95 <Pipe::read(unsigned long long, void*, int*)+0x59>
c0016e8e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e91:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016e95:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0016e98:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0016e9b:	29 f7                	sub    edi,esi
c0016e9d:	89 f8                	mov    eax,edi
c0016e9f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016ea3:	99                   	cdq    
c0016ea4:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0016ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016eab:	19 d0                	sbb    eax,edx
c0016ead:	73 07                	jae    c0016eb6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0016eaf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016eb2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016eb6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0016eb9:	89 ea                	mov    edx,ebp
c0016ebb:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0016ebf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016ec4:	74 0d                	je     c0016ed3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c0016ec6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0016ec9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0016ecd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016ed1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ed3:	85 d2                	test   edx,edx
c0016ed5:	74 11                	je     c0016ee8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c0016ed7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016edb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0016ede:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016ee2:	89 d1                	mov    ecx,edx
c0016ee4:	89 c7                	mov    edi,eax
c0016ee6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ee8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016eeb:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0016eee:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0016ef1:	99                   	cdq    
c0016ef2:	89 f7                	mov    edi,esi
c0016ef4:	03 04 24             	add    eax,DWORD PTR [esp]
c0016ef7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0016efb:	c1 ff 1f             	sar    edi,0x1f
c0016efe:	57                   	push   edi
c0016eff:	56                   	push   esi
c0016f00:	52                   	push   edx
c0016f01:	50                   	push   eax
c0016f02:	e8 d9 7e 01 00       	call   c002ede0 <__umoddi3>
c0016f07:	83 c4 10             	add    esp,0x10
c0016f0a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016f0d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016f12:	75 10                	jne    c0016f24 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0016f14:	83 ec 0c             	sub    esp,0xc
c0016f17:	68 22 19 03 c0       	push   0xc0031922
c0016f1c:	e8 6d 98 00 00       	call   c002078e <KePanic(char const*)>
c0016f21:	83 c4 10             	add    esp,0x10
c0016f24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f28:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016f2b:	89 10                	mov    DWORD PTR [eax],edx
c0016f2d:	83 c4 1c             	add    esp,0x1c
c0016f30:	31 c0                	xor    eax,eax
c0016f32:	5b                   	pop    ebx
c0016f33:	5e                   	pop    esi
c0016f34:	5f                   	pop    edi
c0016f35:	5d                   	pop    ebp
c0016f36:	c3                   	ret    
c0016f37:	90                   	nop

c0016f38 <Pipe::Pipe(int)>:
c0016f38:	83 ec 0c             	sub    esp,0xc
c0016f3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f3f:	83 ec 08             	sub    esp,0x8
c0016f42:	6a 00                	push   0x0
c0016f44:	50                   	push   eax
c0016f45:	e8 84 0d 00 00       	call   c0017cce <UnixFile::UnixFile(int)>
c0016f4a:	83 c4 10             	add    esp,0x10
c0016f4d:	ba 48 19 03 c0       	mov    edx,0xc0031948
c0016f52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f56:	89 10                	mov    DWORD PTR [eax],edx
c0016f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f5c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016f60:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f67:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0016f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f72:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0016f79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016f7d:	83 ec 0c             	sub    esp,0xc
c0016f80:	50                   	push   eax
c0016f81:	e8 41 f6 ff ff       	call   c00165c7 <malloc>
c0016f86:	83 c4 10             	add    esp,0x10
c0016f89:	89 c2                	mov    edx,eax
c0016f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f8f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f96:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0016f9a:	90                   	nop
c0016f9b:	83 c4 0c             	add    esp,0xc
c0016f9e:	c3                   	ret    
c0016f9f:	90                   	nop

c0016fa0 <VgaText::isAtty()>:
c0016fa0:	b0 01                	mov    al,0x1
c0016fa2:	c3                   	ret    
c0016fa3:	90                   	nop

c0016fa4 <VgaText::~VgaText()>:
c0016fa4:	83 ec 0c             	sub    esp,0xc
c0016fa7:	ba 90 19 03 c0       	mov    edx,0xc0031990
c0016fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fb0:	89 10                	mov    DWORD PTR [eax],edx
c0016fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fb6:	83 ec 0c             	sub    esp,0xc
c0016fb9:	50                   	push   eax
c0016fba:	e8 f5 0e 00 00       	call   c0017eb4 <UnixFile::~UnixFile()>
c0016fbf:	83 c4 10             	add    esp,0x10
c0016fc2:	90                   	nop
c0016fc3:	83 c4 0c             	add    esp,0xc
c0016fc6:	c3                   	ret    
c0016fc7:	90                   	nop

c0016fc8 <VgaText::~VgaText()>:
c0016fc8:	83 ec 0c             	sub    esp,0xc
c0016fcb:	83 ec 0c             	sub    esp,0xc
c0016fce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016fd2:	e8 cd ff ff ff       	call   c0016fa4 <VgaText::~VgaText()>
c0016fd7:	83 c4 10             	add    esp,0x10
c0016fda:	83 ec 08             	sub    esp,0x8
c0016fdd:	68 84 01 00 00       	push   0x184
c0016fe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016fe6:	e8 3d 23 00 00       	call   c0019328 <operator delete(void*, unsigned long)>
c0016feb:	83 c4 10             	add    esp,0x10
c0016fee:	83 c4 0c             	add    esp,0xc
c0016ff1:	c3                   	ret    

c0016ff2 <VgaText::read(unsigned long long, void*, int*)>:
c0016ff2:	83 ec 10             	sub    esp,0x10
c0016ff5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ff9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016ffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017001:	e8 f6 54 00 00       	call   c001c4fc <readKeyboard(VgaText*, char*, unsigned long)>
c0017006:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001700a:	89 02                	mov    DWORD PTR [edx],eax
c001700c:	31 c0                	xor    eax,eax
c001700e:	83 c4 1c             	add    esp,0x1c
c0017011:	c3                   	ret    

c0017012 <setTerminalScrollLock(bool)>:
c0017012:	c3                   	ret    

c0017013 <doTerminalCycle()>:
c0017013:	c3                   	ret    

c0017014 <addToTerminalCycle(VgaText*)>:
c0017014:	c3                   	ret    

c0017015 <scrollTerminalScrollLock(int)>:
c0017015:	c3                   	ret    

c0017016 <VgaText::updateTitle()>:
c0017016:	c3                   	ret    
c0017017:	90                   	nop

c0017018 <VgaText::load()>:
c0017018:	c3                   	ret    
c0017019:	90                   	nop

c001701a <VgaText::updateCursor()>:
c001701a:	83 ec 14             	sub    esp,0x14
c001701d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017021:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0017024:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0017027:	e8 58 13 01 00       	call   c0028384 <HalConsoleCursorUpdate(int, int)>
c001702c:	83 c4 1c             	add    esp,0x1c
c001702f:	c3                   	ret    

c0017030 <VgaText::doANSI_SGR(int)>:
c0017030:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017034:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017038:	85 d2                	test   edx,edx
c001703a:	75 0b                	jne    c0017047 <VgaText::doANSI_SGR(int)+0x17>
c001703c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001703f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0017042:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0017045:	eb 59                	jmp    c00170a0 <VgaText::doANSI_SGR(int)+0x70>
c0017047:	83 fa 07             	cmp    edx,0x7
c001704a:	75 0b                	jne    c0017057 <VgaText::doANSI_SGR(int)+0x27>
c001704c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001704f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0017052:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0017055:	eb 49                	jmp    c00170a0 <VgaText::doANSI_SGR(int)+0x70>
c0017057:	83 fa 1b             	cmp    edx,0x1b
c001705a:	74 e0                	je     c001703c <VgaText::doANSI_SGR(int)+0xc>
c001705c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001705f:	83 f9 07             	cmp    ecx,0x7
c0017062:	77 09                	ja     c001706d <VgaText::doANSI_SGR(int)+0x3d>
c0017064:	8b 14 8d 20 44 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcbbe0]
c001706b:	eb 20                	jmp    c001708d <VgaText::doANSI_SGR(int)+0x5d>
c001706d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0017070:	83 f9 07             	cmp    ecx,0x7
c0017073:	77 09                	ja     c001707e <VgaText::doANSI_SGR(int)+0x4e>
c0017075:	8b 14 8d 20 44 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcbbe0]
c001707c:	eb 22                	jmp    c00170a0 <VgaText::doANSI_SGR(int)+0x70>
c001707e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0017081:	83 f9 07             	cmp    ecx,0x7
c0017084:	77 0b                	ja     c0017091 <VgaText::doANSI_SGR(int)+0x61>
c0017086:	8b 14 95 d8 42 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcbd28]
c001708d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0017090:	c3                   	ret    
c0017091:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0017094:	83 f9 07             	cmp    ecx,0x7
c0017097:	77 0a                	ja     c00170a3 <VgaText::doANSI_SGR(int)+0x73>
c0017099:	8b 14 95 b0 42 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcbd50]
c00170a0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00170a3:	c3                   	ret    

c00170a4 <VgaText::setDefaultBgColour(VgaColour)>:
c00170a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00170ac:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00170af:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00170b2:	c3                   	ret    
c00170b3:	90                   	nop

c00170b4 <VgaText::setDefaultFgColour(VgaColour)>:
c00170b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00170bc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00170bf:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00170c2:	c3                   	ret    
c00170c3:	90                   	nop

c00170c4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00170c4:	53                   	push   ebx
c00170c5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00170c9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00170cd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00170d1:	51                   	push   ecx
c00170d2:	e8 cd ff ff ff       	call   c00170a4 <VgaText::setDefaultBgColour(VgaColour)>
c00170d7:	58                   	pop    eax
c00170d8:	5a                   	pop    edx
c00170d9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00170dd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00170e1:	5b                   	pop    ebx
c00170e2:	eb d0                	jmp    c00170b4 <VgaText::setDefaultFgColour(VgaColour)>

c00170e4 <VgaText::setTitleTextColour(VgaColour)>:
c00170e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00170ec:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00170ef:	c3                   	ret    

c00170f0 <VgaText::setTitleColour(VgaColour)>:
c00170f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00170f8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00170fb:	c3                   	ret    

c00170fc <VgaText::setTitle(char*)>:
c00170fc:	c3                   	ret    
c00170fd:	90                   	nop

c00170fe <VgaText::combineColours(unsigned char, unsigned char)>:
c00170fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017102:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0017107:	83 e0 0f             	and    eax,0xf
c001710a:	c1 e2 04             	shl    edx,0x4
c001710d:	09 d0                	or     eax,edx
c001710f:	c3                   	ret    

c0017110 <VgaText::scrollScreen()>:
c0017110:	55                   	push   ebp
c0017111:	57                   	push   edi
c0017112:	56                   	push   esi
c0017113:	be 01 00 00 00       	mov    esi,0x1
c0017118:	53                   	push   ebx
c0017119:	83 ec 0c             	sub    esp,0xc
c001711c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017120:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0017123:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0017129:	31 ff                	xor    edi,edi
c001712b:	01 e9                	add    ecx,ebp
c001712d:	8a 01                	mov    al,BYTE PTR [ecx]
c001712f:	83 fe 18             	cmp    esi,0x18
c0017132:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0017138:	75 20                	jne    c001715a <VgaText::scrollScreen()+0x4a>
c001713a:	f7 c7 01 00 00 00    	test   edi,0x1
c0017140:	74 15                	je     c0017157 <VgaText::scrollScreen()+0x47>
c0017142:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0017146:	50                   	push   eax
c0017147:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001714b:	50                   	push   eax
c001714c:	e8 ad ff ff ff       	call   c00170fe <VgaText::combineColours(unsigned char, unsigned char)>
c0017151:	5a                   	pop    edx
c0017152:	5a                   	pop    edx
c0017153:	88 01                	mov    BYTE PTR [ecx],al
c0017155:	eb 03                	jmp    c001715a <VgaText::scrollScreen()+0x4a>
c0017157:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c001715a:	47                   	inc    edi
c001715b:	41                   	inc    ecx
c001715c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0017162:	75 c9                	jne    c001712d <VgaText::scrollScreen()+0x1d>
c0017164:	46                   	inc    esi
c0017165:	83 fe 19             	cmp    esi,0x19
c0017168:	75 b9                	jne    c0017123 <VgaText::scrollScreen()+0x13>
c001716a:	39 1d 08 ba 03 c0    	cmp    DWORD PTR ds:0xc003ba08,ebx
c0017170:	75 1f                	jne    c0017191 <VgaText::scrollScreen()+0x81>
c0017172:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0017176:	74 05                	je     c001717d <VgaText::scrollScreen()+0x6d>
c0017178:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001717b:	eb 14                	jmp    c0017191 <VgaText::scrollScreen()+0x81>
c001717d:	50                   	push   eax
c001717e:	50                   	push   eax
c001717f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0017183:	50                   	push   eax
c0017184:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0017188:	50                   	push   eax
c0017189:	e8 8a 10 01 00       	call   c0028218 <HalConsoleScroll(int, int)>
c001718e:	83 c4 10             	add    esp,0x10
c0017191:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0017195:	83 c4 0c             	add    esp,0xc
c0017198:	5b                   	pop    ebx
c0017199:	5e                   	pop    esi
c001719a:	5f                   	pop    edi
c001719b:	5d                   	pop    ebp
c001719c:	e9 79 fe ff ff       	jmp    c001701a <VgaText::updateCursor()>
c00171a1:	90                   	nop

c00171a2 <VgaText::combineCharAndColour(char, unsigned char)>:
c00171a2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00171a7:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00171ac:	c1 e0 08             	shl    eax,0x8
c00171af:	09 d0                	or     eax,edx
c00171b1:	c3                   	ret    

c00171b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00171b2:	55                   	push   ebp
c00171b3:	57                   	push   edi
c00171b4:	56                   	push   esi
c00171b5:	53                   	push   ebx
c00171b6:	83 ec 1c             	sub    esp,0x1c
c00171b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00171bd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00171c1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00171c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171c9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00171cd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00171d1:	0f b6 c3             	movzx  eax,bl
c00171d4:	50                   	push   eax
c00171d5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00171da:	50                   	push   eax
c00171db:	e8 1e ff ff ff       	call   c00170fe <VgaText::combineColours(unsigned char, unsigned char)>
c00171e0:	5a                   	pop    edx
c00171e1:	0f b6 c0             	movzx  eax,al
c00171e4:	59                   	pop    ecx
c00171e5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00171ea:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00171ee:	50                   	push   eax
c00171ef:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00171f3:	e8 aa ff ff ff       	call   c00171a2 <VgaText::combineCharAndColour(char, unsigned char)>
c00171f8:	5a                   	pop    edx
c00171f9:	6b d7 50             	imul   edx,edi,0x50
c00171fc:	59                   	pop    ecx
c00171fd:	01 f2                	add    edx,esi
c00171ff:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0017202:	0f b7 d2             	movzx  edx,dx
c0017205:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0017209:	39 2d 08 ba 03 c0    	cmp    DWORD PTR ds:0xc003ba08,ebp
c001720f:	75 28                	jne    c0017239 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0017211:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017215:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0017219:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c001721d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0017221:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017225:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017229:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001722d:	83 c4 1c             	add    esp,0x1c
c0017230:	5b                   	pop    ebx
c0017231:	5e                   	pop    esi
c0017232:	5f                   	pop    edi
c0017233:	5d                   	pop    ebp
c0017234:	e9 e7 10 01 00       	jmp    c0028320 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0017239:	83 c4 1c             	add    esp,0x1c
c001723c:	5b                   	pop    ebx
c001723d:	5e                   	pop    esi
c001723e:	5f                   	pop    edi
c001723f:	5d                   	pop    ebp
c0017240:	c3                   	ret    
c0017241:	90                   	nop

c0017242 <VgaText::getCursorX()>:
c0017242:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017246:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017249:	c3                   	ret    

c001724a <VgaText::getCursorY()>:
c001724a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001724e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017251:	c3                   	ret    

c0017252 <VgaText::setCursor(int, int)>:
c0017252:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017256:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001725a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001725d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017261:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017264:	e9 b1 fd ff ff       	jmp    c001701a <VgaText::updateCursor()>

c0017269 <setActiveTerminal(VgaText*)>:
c0017269:	53                   	push   ebx
c001726a:	83 ec 08             	sub    esp,0x8
c001726d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017271:	85 db                	test   ebx,ebx
c0017273:	75 11                	jne    c0017286 <setActiveTerminal(VgaText*)+0x1d>
c0017275:	c7 44 24 10 5c 19 03 c0 	mov    DWORD PTR [esp+0x10],0xc003195c
c001727d:	83 c4 08             	add    esp,0x8
c0017280:	5b                   	pop    ebx
c0017281:	e9 08 95 00 00       	jmp    c002078e <KePanic(char const*)>
c0017286:	a1 08 ba 03 c0       	mov    eax,ds:0xc003ba08
c001728b:	85 c0                	test   eax,eax
c001728d:	74 0c                	je     c001729b <setActiveTerminal(VgaText*)+0x32>
c001728f:	83 ec 0c             	sub    esp,0xc
c0017292:	50                   	push   eax
c0017293:	e8 82 fd ff ff       	call   c001701a <VgaText::updateCursor()>
c0017298:	83 c4 10             	add    esp,0x10
c001729b:	89 1d 08 ba 03 c0    	mov    DWORD PTR ds:0xc003ba08,ebx
c00172a1:	50                   	push   eax
c00172a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00172a5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00172a8:	53                   	push   ebx
c00172a9:	e8 a4 ff ff ff       	call   c0017252 <VgaText::setCursor(int, int)>
c00172ae:	83 c4 18             	add    esp,0x18
c00172b1:	5b                   	pop    ebx
c00172b2:	c3                   	ret    
c00172b3:	90                   	nop

c00172b4 <VgaText::clearScreen()>:
c00172b4:	57                   	push   edi
c00172b5:	56                   	push   esi
c00172b6:	31 f6                	xor    esi,esi
c00172b8:	53                   	push   ebx
c00172b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00172bd:	52                   	push   edx
c00172be:	6a 00                	push   0x0
c00172c0:	6a 00                	push   0x0
c00172c2:	53                   	push   ebx
c00172c3:	e8 8a ff ff ff       	call   c0017252 <VgaText::setCursor(int, int)>
c00172c8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00172cf:	83 c4 10             	add    esp,0x10
c00172d2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00172d5:	7e 20                	jle    c00172f7 <VgaText::clearScreen()+0x43>
c00172d7:	31 ff                	xor    edi,edi
c00172d9:	50                   	push   eax
c00172da:	50                   	push   eax
c00172db:	56                   	push   esi
c00172dc:	57                   	push   edi
c00172dd:	47                   	inc    edi
c00172de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00172e1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00172e4:	6a 20                	push   0x20
c00172e6:	53                   	push   ebx
c00172e7:	e8 c6 fe ff ff       	call   c00171b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00172ec:	83 c4 20             	add    esp,0x20
c00172ef:	83 ff 50             	cmp    edi,0x50
c00172f2:	75 e5                	jne    c00172d9 <VgaText::clearScreen()+0x25>
c00172f4:	46                   	inc    esi
c00172f5:	eb db                	jmp    c00172d2 <VgaText::clearScreen()+0x1e>
c00172f7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00172fe:	5b                   	pop    ebx
c00172ff:	5e                   	pop    esi
c0017300:	5f                   	pop    edi
c0017301:	c3                   	ret    

c0017302 <VgaText::setCursorX(int)>:
c0017302:	83 ec 10             	sub    esp,0x10
c0017305:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017309:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001730c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017310:	50                   	push   eax
c0017311:	e8 3c ff ff ff       	call   c0017252 <VgaText::setCursor(int, int)>
c0017316:	83 c4 1c             	add    esp,0x1c
c0017319:	c3                   	ret    

c001731a <VgaText::setCursorY(int)>:
c001731a:	83 ec 10             	sub    esp,0x10
c001731d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017321:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017325:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0017328:	50                   	push   eax
c0017329:	e8 24 ff ff ff       	call   c0017252 <VgaText::setCursor(int, int)>
c001732e:	83 c4 1c             	add    esp,0x1c
c0017331:	c3                   	ret    

c0017332 <VgaText::incrementCursor(bool)>:
c0017332:	56                   	push   esi
c0017333:	53                   	push   ebx
c0017334:	51                   	push   ecx
c0017335:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017339:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001733d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017340:	40                   	inc    eax
c0017341:	83 f8 50             	cmp    eax,0x50
c0017344:	74 05                	je     c001734b <VgaText::incrementCursor(bool)+0x19>
c0017346:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017349:	eb 24                	jmp    c001736f <VgaText::incrementCursor(bool)+0x3d>
c001734b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001734e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017355:	8d 50 01             	lea    edx,[eax+0x1]
c0017358:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001735b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001735e:	75 0f                	jne    c001736f <VgaText::incrementCursor(bool)+0x3d>
c0017360:	83 ec 0c             	sub    esp,0xc
c0017363:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017366:	53                   	push   ebx
c0017367:	e8 a4 fd ff ff       	call   c0017110 <VgaText::scrollScreen()>
c001736c:	83 c4 10             	add    esp,0x10
c001736f:	89 f0                	mov    eax,esi
c0017371:	84 c0                	test   al,al
c0017373:	74 0c                	je     c0017381 <VgaText::incrementCursor(bool)+0x4f>
c0017375:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017379:	5a                   	pop    edx
c001737a:	5b                   	pop    ebx
c001737b:	5e                   	pop    esi
c001737c:	e9 99 fc ff ff       	jmp    c001701a <VgaText::updateCursor()>
c0017381:	58                   	pop    eax
c0017382:	5b                   	pop    ebx
c0017383:	5e                   	pop    esi
c0017384:	c3                   	ret    
c0017385:	90                   	nop

c0017386 <VgaText::decrementCursor(bool)>:
c0017386:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001738a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001738e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0017391:	85 c0                	test   eax,eax
c0017393:	74 04                	je     c0017399 <VgaText::decrementCursor(bool)+0x13>
c0017395:	48                   	dec    eax
c0017396:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0017399:	84 c9                	test   cl,cl
c001739b:	74 09                	je     c00173a6 <VgaText::decrementCursor(bool)+0x20>
c001739d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00173a1:	e9 74 fc ff ff       	jmp    c001701a <VgaText::updateCursor()>
c00173a6:	c3                   	ret    
c00173a7:	90                   	nop

c00173a8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00173a8:	53                   	push   ebx
c00173a9:	83 ec 08             	sub    esp,0x8
c00173ac:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00173b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00173b5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00173b9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00173bd:	83 f8 07             	cmp    eax,0x7
c00173c0:	75 21                	jne    c00173e3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00173c2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00173ca:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00173d2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00173da:	83 c4 08             	add    esp,0x8
c00173dd:	5b                   	pop    ebx
c00173de:	e9 18 3b 00 00       	jmp    c001aefb <Krnl::beep(int, int, bool)>
c00173e3:	83 f8 0d             	cmp    eax,0xd
c00173e6:	75 09                	jne    c00173f1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00173e8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00173ef:	eb 2d                	jmp    c001741e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00173f1:	83 f8 0a             	cmp    eax,0xa
c00173f4:	75 31                	jne    c0017427 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00173f6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00173f9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017400:	8d 50 01             	lea    edx,[eax+0x1]
c0017403:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0017406:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0017409:	75 0f                	jne    c001741a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c001740b:	83 ec 0c             	sub    esp,0xc
c001740e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017411:	53                   	push   ebx
c0017412:	e8 f9 fc ff ff       	call   c0017110 <VgaText::scrollScreen()>
c0017417:	83 c4 10             	add    esp,0x10
c001741a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001741e:	83 c4 08             	add    esp,0x8
c0017421:	5b                   	pop    ebx
c0017422:	e9 f3 fb ff ff       	jmp    c001701a <VgaText::updateCursor()>
c0017427:	83 f8 08             	cmp    eax,0x8
c001742a:	75 25                	jne    c0017451 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c001742c:	50                   	push   eax
c001742d:	50                   	push   eax
c001742e:	6a 01                	push   0x1
c0017430:	53                   	push   ebx
c0017431:	e8 50 ff ff ff       	call   c0017386 <VgaText::decrementCursor(bool)>
c0017436:	5a                   	pop    edx
c0017437:	59                   	pop    ecx
c0017438:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001743b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001743e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017441:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017444:	6a 20                	push   0x20
c0017446:	53                   	push   ebx
c0017447:	e8 66 fd ff ff       	call   c00171b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001744c:	83 c4 28             	add    esp,0x28
c001744f:	5b                   	pop    ebx
c0017450:	c3                   	ret    
c0017451:	83 ec 08             	sub    esp,0x8
c0017454:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017457:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001745a:	51                   	push   ecx
c001745b:	52                   	push   edx
c001745c:	50                   	push   eax
c001745d:	53                   	push   ebx
c001745e:	e8 4f fd ff ff       	call   c00171b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017463:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0017467:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001746f:	83 c4 28             	add    esp,0x28
c0017472:	5b                   	pop    ebx
c0017473:	e9 ba fe ff ff       	jmp    c0017332 <VgaText::incrementCursor(bool)>

c0017478 <VgaText::putchar(char)>:
c0017478:	57                   	push   edi
c0017479:	56                   	push   esi
c001747a:	53                   	push   ebx
c001747b:	83 ec 10             	sub    esp,0x10
c001747e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0017482:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017486:	89 f8                	mov    eax,edi
c0017488:	0f be c0             	movsx  eax,al
c001748b:	83 f8 5b             	cmp    eax,0x5b
c001748e:	75 18                	jne    c00174a8 <VgaText::putchar(char)+0x30>
c0017490:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0017494:	74 20                	je     c00174b6 <VgaText::putchar(char)+0x3e>
c0017496:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001749c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00174a3:	e9 c1 00 00 00       	jmp    c0017569 <VgaText::putchar(char)+0xf1>
c00174a8:	83 f8 1b             	cmp    eax,0x1b
c00174ab:	75 09                	jne    c00174b6 <VgaText::putchar(char)+0x3e>
c00174ad:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00174b1:	e9 b3 00 00 00       	jmp    c0017569 <VgaText::putchar(char)+0xf1>
c00174b6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00174b9:	84 c9                	test   cl,cl
c00174bb:	0f 84 98 00 00 00    	je     c0017559 <VgaText::putchar(char)+0xe1>
c00174c1:	8d 77 c0             	lea    esi,[edi-0x40]
c00174c4:	89 f2                	mov    edx,esi
c00174c6:	80 fa 3e             	cmp    dl,0x3e
c00174c9:	77 78                	ja     c0017543 <VgaText::putchar(char)+0xcb>
c00174cb:	83 f8 6d             	cmp    eax,0x6d
c00174ce:	75 47                	jne    c0017517 <VgaText::putchar(char)+0x9f>
c00174d0:	31 f6                	xor    esi,esi
c00174d2:	31 d2                	xor    edx,edx
c00174d4:	31 c0                	xor    eax,eax
c00174d6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00174d9:	7e 2d                	jle    c0017508 <VgaText::putchar(char)+0x90>
c00174db:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00174e0:	83 fa 3b             	cmp    edx,0x3b
c00174e3:	75 17                	jne    c00174fc <VgaText::putchar(char)+0x84>
c00174e5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00174e9:	50                   	push   eax
c00174ea:	53                   	push   ebx
c00174eb:	e8 40 fb ff ff       	call   c0017030 <VgaText::doANSI_SGR(int)>
c00174f0:	59                   	pop    ecx
c00174f1:	31 d2                	xor    edx,edx
c00174f3:	5f                   	pop    edi
c00174f4:	31 c0                	xor    eax,eax
c00174f6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00174fa:	eb 09                	jmp    c0017505 <VgaText::putchar(char)+0x8d>
c00174fc:	6b c0 0a             	imul   eax,eax,0xa
c00174ff:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0017503:	88 ca                	mov    dl,cl
c0017505:	46                   	inc    esi
c0017506:	eb ce                	jmp    c00174d6 <VgaText::putchar(char)+0x5e>
c0017508:	84 d2                	test   dl,dl
c001750a:	74 2f                	je     c001753b <VgaText::putchar(char)+0xc3>
c001750c:	50                   	push   eax
c001750d:	53                   	push   ebx
c001750e:	e8 1d fb ff ff       	call   c0017030 <VgaText::doANSI_SGR(int)>
c0017513:	58                   	pop    eax
c0017514:	5a                   	pop    edx
c0017515:	eb 24                	jmp    c001753b <VgaText::putchar(char)+0xc3>
c0017517:	83 f8 4a             	cmp    eax,0x4a
c001751a:	75 1f                	jne    c001753b <VgaText::putchar(char)+0xc3>
c001751c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0017520:	75 19                	jne    c001753b <VgaText::putchar(char)+0xc3>
c0017522:	83 ec 0c             	sub    esp,0xc
c0017525:	53                   	push   ebx
c0017526:	e8 89 fd ff ff       	call   c00172b4 <VgaText::clearScreen()>
c001752b:	83 c4 0c             	add    esp,0xc
c001752e:	6a 00                	push   0x0
c0017530:	6a 00                	push   0x0
c0017532:	53                   	push   ebx
c0017533:	e8 1a fd ff ff       	call   c0017252 <VgaText::setCursor(int, int)>
c0017538:	83 c4 10             	add    esp,0x10
c001753b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0017541:	eb 26                	jmp    c0017569 <VgaText::putchar(char)+0xf1>
c0017543:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0017546:	83 f8 0e             	cmp    eax,0xe
c0017549:	7f 1e                	jg     c0017569 <VgaText::putchar(char)+0xf1>
c001754b:	8d 48 01             	lea    ecx,[eax+0x1]
c001754e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0017551:	89 f9                	mov    ecx,edi
c0017553:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0017557:	eb 10                	jmp    c0017569 <VgaText::putchar(char)+0xf1>
c0017559:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001755c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001755f:	50                   	push   eax
c0017560:	53                   	push   ebx
c0017561:	e8 42 fe ff ff       	call   c00173a8 <VgaText::putchar(char, VgaColour, VgaColour)>
c0017566:	83 c4 10             	add    esp,0x10
c0017569:	83 c4 10             	add    esp,0x10
c001756c:	5b                   	pop    ebx
c001756d:	5e                   	pop    esi
c001756e:	5f                   	pop    edi
c001756f:	c3                   	ret    

c0017570 <VgaText::putx(unsigned int)>:
c0017570:	57                   	push   edi
c0017571:	b9 11 00 00 00       	mov    ecx,0x11
c0017576:	56                   	push   esi
c0017577:	be 6a 19 03 c0       	mov    esi,0xc003196a
c001757c:	53                   	push   ebx
c001757d:	83 ec 20             	sub    esp,0x20
c0017580:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0017584:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0017588:	fc                   	cld    
c0017589:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001758b:	be 08 00 00 00       	mov    esi,0x8
c0017590:	50                   	push   eax
c0017591:	50                   	push   eax
c0017592:	89 d8                	mov    eax,ebx
c0017594:	c1 e3 04             	shl    ebx,0x4
c0017597:	c1 e8 1c             	shr    eax,0x1c
c001759a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001759f:	50                   	push   eax
c00175a0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00175a4:	e8 cf fe ff ff       	call   c0017478 <VgaText::putchar(char)>
c00175a9:	83 c4 10             	add    esp,0x10
c00175ac:	4e                   	dec    esi
c00175ad:	75 e1                	jne    c0017590 <VgaText::putx(unsigned int)+0x20>
c00175af:	83 c4 20             	add    esp,0x20
c00175b2:	5b                   	pop    ebx
c00175b3:	5e                   	pop    esi
c00175b4:	5f                   	pop    edi
c00175b5:	c3                   	ret    

c00175b6 <VgaText::puts(char const*)>:
c00175b6:	53                   	push   ebx
c00175b7:	83 ec 08             	sub    esp,0x8
c00175ba:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00175be:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00175c1:	85 c0                	test   eax,eax
c00175c3:	74 12                	je     c00175d7 <VgaText::puts(char const*)+0x21>
c00175c5:	43                   	inc    ebx
c00175c6:	51                   	push   ecx
c00175c7:	51                   	push   ecx
c00175c8:	50                   	push   eax
c00175c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175cd:	e8 a6 fe ff ff       	call   c0017478 <VgaText::putchar(char)>
c00175d2:	83 c4 10             	add    esp,0x10
c00175d5:	eb e7                	jmp    c00175be <VgaText::puts(char const*)+0x8>
c00175d7:	83 c4 08             	add    esp,0x8
c00175da:	5b                   	pop    ebx
c00175db:	c3                   	ret    

c00175dc <VgaText::write(unsigned long long, void*, int*)>:
c00175dc:	55                   	push   ebp
c00175dd:	57                   	push   edi
c00175de:	56                   	push   esi
c00175df:	53                   	push   ebx
c00175e0:	83 ec 0c             	sub    esp,0xc
c00175e3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00175e7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00175eb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00175ef:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00175f6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00175f9:	39 eb                	cmp    ebx,ebp
c00175fb:	74 13                	je     c0017610 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00175fd:	43                   	inc    ebx
c00175fe:	50                   	push   eax
c00175ff:	50                   	push   eax
c0017600:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0017604:	50                   	push   eax
c0017605:	56                   	push   esi
c0017606:	e8 6d fe ff ff       	call   c0017478 <VgaText::putchar(char)>
c001760b:	83 c4 10             	add    esp,0x10
c001760e:	eb e9                	jmp    c00175f9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0017610:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0017617:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001761b:	89 38                	mov    DWORD PTR [eax],edi
c001761d:	83 c4 0c             	add    esp,0xc
c0017620:	31 c0                	xor    eax,eax
c0017622:	5b                   	pop    ebx
c0017623:	5e                   	pop    esi
c0017624:	5f                   	pop    edi
c0017625:	5d                   	pop    ebp
c0017626:	c3                   	ret    
c0017627:	90                   	nop

c0017628 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0017628:	55                   	push   ebp
c0017629:	57                   	push   edi
c001762a:	56                   	push   esi
c001762b:	53                   	push   ebx
c001762c:	83 ec 0c             	sub    esp,0xc
c001762f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017633:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017638:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001763f:	50                   	push   eax
c0017640:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017645:	50                   	push   eax
c0017646:	e8 b3 fa ff ff       	call   c00170fe <VgaText::combineColours(unsigned char, unsigned char)>
c001764b:	5a                   	pop    edx
c001764c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0017650:	59                   	pop    ecx
c0017651:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0017654:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0017658:	0f b7 f6             	movzx  esi,si
c001765b:	0f b6 e8             	movzx  ebp,al
c001765e:	01 f6                	add    esi,esi
c0017660:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0017663:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0017666:	85 c0                	test   eax,eax
c0017668:	0f 84 ef 00 00 00    	je     c001775d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c001766e:	83 f8 0d             	cmp    eax,0xd
c0017671:	75 0c                	jne    c001767f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0017673:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001767a:	e9 d8 00 00 00       	jmp    c0017757 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001767f:	83 f8 0a             	cmp    eax,0xa
c0017682:	75 44                	jne    c00176c8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0017684:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017687:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001768e:	8d 48 01             	lea    ecx,[eax+0x1]
c0017691:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0017694:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0017697:	75 0f                	jne    c00176a8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0017699:	83 ec 0c             	sub    esp,0xc
c001769c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001769f:	53                   	push   ebx
c00176a0:	e8 6b fa ff ff       	call   c0017110 <VgaText::scrollScreen()>
c00176a5:	83 c4 10             	add    esp,0x10
c00176a8:	83 ec 0c             	sub    esp,0xc
c00176ab:	53                   	push   ebx
c00176ac:	e8 69 f9 ff ff       	call   c001701a <VgaText::updateCursor()>
c00176b1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00176b5:	83 c4 10             	add    esp,0x10
c00176b8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00176bb:	0f b7 f6             	movzx  esi,si
c00176be:	01 f6                	add    esi,esi
c00176c0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00176c3:	e9 8f 00 00 00       	jmp    c0017757 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00176c8:	83 f8 08             	cmp    eax,0x8
c00176cb:	75 34                	jne    c0017701 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c00176cd:	51                   	push   ecx
c00176ce:	51                   	push   ecx
c00176cf:	6a 01                	push   0x1
c00176d1:	53                   	push   ebx
c00176d2:	e8 af fc ff ff       	call   c0017386 <VgaText::decrementCursor(bool)>
c00176d7:	5e                   	pop    esi
c00176d8:	58                   	pop    eax
c00176d9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00176dc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00176df:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00176e2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00176e5:	6a 20                	push   0x20
c00176e7:	53                   	push   ebx
c00176e8:	e8 c5 fa ff ff       	call   c00171b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00176ed:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00176f1:	83 c4 20             	add    esp,0x20
c00176f4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00176f7:	0f b7 f6             	movzx  esi,si
c00176fa:	01 f6                	add    esi,esi
c00176fc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00176ff:	eb 56                	jmp    c0017757 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017701:	52                   	push   edx
c0017702:	52                   	push   edx
c0017703:	55                   	push   ebp
c0017704:	50                   	push   eax
c0017705:	e8 98 fa ff ff       	call   c00171a2 <VgaText::combineCharAndColour(char, unsigned char)>
c001770a:	83 c4 10             	add    esp,0x10
c001770d:	66 89 06             	mov    WORD PTR [esi],ax
c0017710:	39 1d 08 ba 03 c0    	cmp    DWORD PTR ds:0xc003ba08,ebx
c0017716:	75 1d                	jne    c0017735 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0017718:	83 ec 0c             	sub    esp,0xc
c001771b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001771e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017721:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017725:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017729:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001772c:	50                   	push   eax
c001772d:	e8 ee 0b 01 00       	call   c0028320 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0017732:	83 c4 20             	add    esp,0x20
c0017735:	83 c6 02             	add    esi,0x2
c0017738:	50                   	push   eax
c0017739:	50                   	push   eax
c001773a:	6a 00                	push   0x0
c001773c:	53                   	push   ebx
c001773d:	e8 f0 fb ff ff       	call   c0017332 <VgaText::incrementCursor(bool)>
c0017742:	83 c4 10             	add    esp,0x10
c0017745:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0017749:	75 0c                	jne    c0017757 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001774b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c001774f:	0f b7 f6             	movzx  esi,si
c0017752:	01 f6                	add    esi,esi
c0017754:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0017757:	47                   	inc    edi
c0017758:	e9 06 ff ff ff       	jmp    c0017663 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c001775d:	83 ec 0c             	sub    esp,0xc
c0017760:	53                   	push   ebx
c0017761:	e8 b4 f8 ff ff       	call   c001701a <VgaText::updateCursor()>
c0017766:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001776d:	83 c4 1c             	add    esp,0x1c
c0017770:	5b                   	pop    ebx
c0017771:	5e                   	pop    esi
c0017772:	5f                   	pop    edi
c0017773:	5d                   	pop    ebp
c0017774:	c3                   	ret    
c0017775:	90                   	nop

c0017776 <VgaText::VgaText(char const*)>:
c0017776:	56                   	push   esi
c0017777:	53                   	push   ebx
c0017778:	83 ec 04             	sub    esp,0x4
c001777b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001777f:	83 ec 08             	sub    esp,0x8
c0017782:	6a 00                	push   0x0
c0017784:	50                   	push   eax
c0017785:	e8 44 05 00 00       	call   c0017cce <UnixFile::UnixFile(int)>
c001778a:	83 c4 10             	add    esp,0x10
c001778d:	ba 90 19 03 c0       	mov    edx,0xc0031990
c0017792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017796:	89 10                	mov    DWORD PTR [eax],edx
c0017798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001779c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00177a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177a7:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00177ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177b2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00177b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177ba:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00177be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177c2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00177c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177cd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00177d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177d8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00177df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177e3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00177ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177ee:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00177f5:	83 ec 0c             	sub    esp,0xc
c00177f8:	6a 01                	push   0x1
c00177fa:	e8 1e 09 00 00       	call   c001811d <Virt::allocateKernelVirtualPages(int)>
c00177ff:	83 c4 10             	add    esp,0x10
c0017802:	89 c2                	mov    edx,eax
c0017804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017808:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001780b:	8b 1d b0 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003bab0
c0017811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017815:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017818:	89 c6                	mov    esi,eax
c001781a:	e8 b1 f0 ff ff       	call   c00168d0 <Phys::allocatePage()>
c001781f:	68 05 0c 00 00       	push   0xc05
c0017824:	56                   	push   esi
c0017825:	50                   	push   eax
c0017826:	53                   	push   ebx
c0017827:	e8 04 10 00 00       	call   c0018830 <VAS::mapPage(unsigned long, unsigned long, int)>
c001782c:	83 c4 10             	add    esp,0x10
c001782f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017833:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017836:	83 ec 04             	sub    esp,0x4
c0017839:	68 a0 0f 00 00       	push   0xfa0
c001783e:	6a 00                	push   0x0
c0017840:	50                   	push   eax
c0017841:	e8 aa 8c fe ff       	call   c00004f0 <memset>
c0017846:	83 c4 10             	add    esp,0x10
c0017849:	83 ec 04             	sub    esp,0x4
c001784c:	6a 00                	push   0x0
c001784e:	6a 07                	push   0x7
c0017850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017854:	e8 6b f8 ff ff       	call   c00170c4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017859:	83 c4 10             	add    esp,0x10
c001785c:	83 ec 04             	sub    esp,0x4
c001785f:	6a 00                	push   0x0
c0017861:	6a 00                	push   0x0
c0017863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017867:	e8 e6 f9 ff ff       	call   c0017252 <VgaText::setCursor(int, int)>
c001786c:	83 c4 10             	add    esp,0x10
c001786f:	83 ec 0c             	sub    esp,0xc
c0017872:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017876:	e8 39 fa ff ff       	call   c00172b4 <VgaText::clearScreen()>
c001787b:	83 c4 10             	add    esp,0x10
c001787e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017882:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0017886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001788a:	05 82 00 00 00       	add    eax,0x82
c001788f:	83 ec 04             	sub    esp,0x4
c0017892:	68 80 00 00 00       	push   0x80
c0017897:	6a 00                	push   0x0
c0017899:	50                   	push   eax
c001789a:	e8 51 8c fe ff       	call   c00004f0 <memset>
c001789f:	83 c4 10             	add    esp,0x10
c00178a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178a6:	05 02 01 00 00       	add    eax,0x102
c00178ab:	83 ec 04             	sub    esp,0x4
c00178ae:	68 80 00 00 00       	push   0x80
c00178b3:	6a 00                	push   0x0
c00178b5:	50                   	push   eax
c00178b6:	e8 35 8c fe ff       	call   c00004f0 <memset>
c00178bb:	83 c4 10             	add    esp,0x10
c00178be:	90                   	nop
c00178bf:	83 c4 04             	add    esp,0x4
c00178c2:	5b                   	pop    ebx
c00178c3:	5e                   	pop    esi
c00178c4:	c3                   	ret    
c00178c5:	90                   	nop

c00178c6 <VgaText::receiveKey(unsigned char)>:
c00178c6:	55                   	push   ebp
c00178c7:	57                   	push   edi
c00178c8:	56                   	push   esi
c00178c9:	53                   	push   ebx
c00178ca:	83 ec 2c             	sub    esp,0x2c
c00178cd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00178d1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00178d5:	89 ef                	mov    edi,ebp
c00178d7:	81 e7 ff 00 00 00    	and    edi,0xff
c00178dd:	0f 84 66 01 00 00    	je     c0017a49 <VgaText::receiveKey(unsigned char)+0x183>
c00178e3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c00178e9:	83 ff 08             	cmp    edi,0x8
c00178ec:	75 73                	jne    c0017961 <VgaText::receiveKey(unsigned char)+0x9b>
c00178ee:	83 ec 0c             	sub    esp,0xc
c00178f1:	56                   	push   esi
c00178f2:	e8 79 8c fe ff       	call   c0000570 <strlen>
c00178f7:	83 c4 10             	add    esp,0x10
c00178fa:	85 c0                	test   eax,eax
c00178fc:	0f 84 02 01 00 00    	je     c0017a04 <VgaText::receiveKey(unsigned char)+0x13e>
c0017902:	50                   	push   eax
c0017903:	50                   	push   eax
c0017904:	6a 08                	push   0x8
c0017906:	53                   	push   ebx
c0017907:	e8 6c fb ff ff       	call   c0017478 <VgaText::putchar(char)>
c001790c:	89 34 24             	mov    DWORD PTR [esp],esi
c001790f:	e8 5c 8c fe ff       	call   c0000570 <strlen>
c0017914:	83 c4 10             	add    esp,0x10
c0017917:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c001791f:	83 fa 0d             	cmp    edx,0xd
c0017922:	89 d0                	mov    eax,edx
c0017924:	0f 95 c1             	setne  cl
c0017927:	83 fa 1f             	cmp    edx,0x1f
c001792a:	0f 9e c2             	setle  dl
c001792d:	0f b6 d2             	movzx  edx,dl
c0017930:	85 ca                	test   edx,ecx
c0017932:	74 17                	je     c001794b <VgaText::receiveKey(unsigned char)+0x85>
c0017934:	83 e8 08             	sub    eax,0x8
c0017937:	3c 02                	cmp    al,0x2
c0017939:	76 10                	jbe    c001794b <VgaText::receiveKey(unsigned char)+0x85>
c001793b:	55                   	push   ebp
c001793c:	55                   	push   ebp
c001793d:	68 7b 19 03 c0       	push   0xc003197b
c0017942:	53                   	push   ebx
c0017943:	e8 6e fc ff ff       	call   c00175b6 <VgaText::puts(char const*)>
c0017948:	83 c4 10             	add    esp,0x10
c001794b:	83 ec 0c             	sub    esp,0xc
c001794e:	56                   	push   esi
c001794f:	e8 1c 8c fe ff       	call   c0000570 <strlen>
c0017954:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c001795c:	e9 a0 00 00 00       	jmp    c0017a01 <VgaText::receiveKey(unsigned char)+0x13b>
c0017961:	83 ec 0c             	sub    esp,0xc
c0017964:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c001796a:	50                   	push   eax
c001796b:	e8 00 8c fe ff       	call   c0000570 <strlen>
c0017970:	89 34 24             	mov    DWORD PTR [esp],esi
c0017973:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017977:	e8 f4 8b fe ff       	call   c0000570 <strlen>
c001797c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017980:	83 c4 10             	add    esp,0x10
c0017983:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0017987:	3d 80 00 00 00       	cmp    eax,0x80
c001798c:	0f 87 b7 00 00 00    	ja     c0017a49 <VgaText::receiveKey(unsigned char)+0x183>
c0017992:	8d 45 ff             	lea    eax,[ebp-0x1]
c0017995:	8d 55 f7             	lea    edx,[ebp-0x9]
c0017998:	3c 1e                	cmp    al,0x1e
c001799a:	0f 96 c0             	setbe  al
c001799d:	80 fa 01             	cmp    dl,0x1
c00179a0:	0f 97 c2             	seta   dl
c00179a3:	0f b6 d2             	movzx  edx,dl
c00179a6:	85 c2                	test   edx,eax
c00179a8:	74 2e                	je     c00179d8 <VgaText::receiveKey(unsigned char)+0x112>
c00179aa:	83 ff 0d             	cmp    edi,0xd
c00179ad:	74 29                	je     c00179d8 <VgaText::receiveKey(unsigned char)+0x112>
c00179af:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00179b2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00179b5:	68 81 19 03 c0       	push   0xc0031981
c00179ba:	53                   	push   ebx
c00179bb:	e8 68 fc ff ff       	call   c0017628 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00179c0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00179c3:	8d 45 40             	lea    eax,[ebp+0x40]
c00179c6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00179c9:	0f b6 c0             	movzx  eax,al
c00179cc:	50                   	push   eax
c00179cd:	53                   	push   ebx
c00179ce:	e8 d5 f9 ff ff       	call   c00173a8 <VgaText::putchar(char, VgaColour, VgaColour)>
c00179d3:	83 c4 20             	add    esp,0x20
c00179d6:	eb 11                	jmp    c00179e9 <VgaText::receiveKey(unsigned char)+0x123>
c00179d8:	89 e8                	mov    eax,ebp
c00179da:	51                   	push   ecx
c00179db:	0f be c0             	movsx  eax,al
c00179de:	51                   	push   ecx
c00179df:	50                   	push   eax
c00179e0:	53                   	push   ebx
c00179e1:	e8 92 fa ff ff       	call   c0017478 <VgaText::putchar(char)>
c00179e6:	83 c4 10             	add    esp,0x10
c00179e9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00179ee:	89 e8                	mov    eax,ebp
c00179f0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00179f4:	52                   	push   edx
c00179f5:	52                   	push   edx
c00179f6:	8d 44 24 26          	lea    eax,[esp+0x26]
c00179fa:	50                   	push   eax
c00179fb:	56                   	push   esi
c00179fc:	e8 3f 8e fe ff       	call   c0000840 <strcat>
c0017a01:	83 c4 10             	add    esp,0x10
c0017a04:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0017a0a:	b0 01                	mov    al,0x1
c0017a0c:	83 ff 1c             	cmp    edi,0x1c
c0017a0f:	77 0e                	ja     c0017a1f <VgaText::receiveKey(unsigned char)+0x159>
c0017a11:	b8 08 04 00 10       	mov    eax,0x10000408
c0017a16:	89 f9                	mov    ecx,edi
c0017a18:	d3 e8                	shr    eax,cl
c0017a1a:	f7 d0                	not    eax
c0017a1c:	83 e0 01             	and    eax,0x1
c0017a1f:	84 c0                	test   al,al
c0017a21:	74 04                	je     c0017a27 <VgaText::receiveKey(unsigned char)+0x161>
c0017a23:	84 d2                	test   dl,dl
c0017a25:	74 22                	je     c0017a49 <VgaText::receiveKey(unsigned char)+0x183>
c0017a27:	81 c3 02 01 00 00    	add    ebx,0x102
c0017a2d:	50                   	push   eax
c0017a2e:	50                   	push   eax
c0017a2f:	56                   	push   esi
c0017a30:	53                   	push   ebx
c0017a31:	e8 0a 8e fe ff       	call   c0000840 <strcat>
c0017a36:	83 c4 0c             	add    esp,0xc
c0017a39:	68 80 00 00 00       	push   0x80
c0017a3e:	6a 00                	push   0x0
c0017a40:	56                   	push   esi
c0017a41:	e8 aa 8a fe ff       	call   c00004f0 <memset>
c0017a46:	83 c4 10             	add    esp,0x10
c0017a49:	83 c4 2c             	add    esp,0x2c
c0017a4c:	5b                   	pop    ebx
c0017a4d:	5e                   	pop    esi
c0017a4e:	5f                   	pop    edi
c0017a4f:	5d                   	pop    ebp
c0017a50:	c3                   	ret    
c0017a51:	90                   	nop

c0017a52 <VgaText::doUpdate()>:
c0017a52:	c3                   	ret    
c0017a53:	90                   	nop

c0017a54 <TSS::TSS()>:
c0017a54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a58:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017a5f:	90                   	nop
c0017a60:	c3                   	ret    
c0017a61:	90                   	nop
c0017a62:	66 90                	xchg   ax,ax

c0017a64 <TSS::setESP(unsigned long)>:
c0017a64:	55                   	push   ebp
c0017a65:	89 e5                	mov    ebp,esp
c0017a67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a6d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017a70:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017a73:	90                   	nop
c0017a74:	5d                   	pop    ebp
c0017a75:	c3                   	ret    
c0017a76:	66 90                	xchg   ax,ax

c0017a78 <TSS::flush()>:
c0017a78:	55                   	push   ebp
c0017a79:	89 e5                	mov    ebp,esp
c0017a7b:	83 ec 10             	sub    esp,0x10
c0017a7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a81:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a83:	83 c8 03             	or     eax,0x3
c0017a86:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017a8a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0017a8e:	66 89 d0             	mov    ax,dx
c0017a91:	0f 00 d8             	ltr    ax
c0017a94:	90                   	nop
c0017a95:	c9                   	leave  
c0017a96:	c3                   	ret    
c0017a97:	90                   	nop

c0017a98 <TSS::setup(unsigned long, unsigned long)>:
c0017a98:	55                   	push   ebp
c0017a99:	89 e5                	mov    ebp,esp
c0017a9b:	83 ec 18             	sub    esp,0x18
c0017a9e:	83 ec 0c             	sub    esp,0xc
c0017aa1:	6a 68                	push   0x68
c0017aa3:	e8 1f eb ff ff       	call   c00165c7 <malloc>
c0017aa8:	83 c4 10             	add    esp,0x10
c0017aab:	89 c2                	mov    edx,eax
c0017aad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ab0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017ab3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ab9:	83 ec 04             	sub    esp,0x4
c0017abc:	6a 68                	push   0x68
c0017abe:	6a 00                	push   0x0
c0017ac0:	50                   	push   eax
c0017ac1:	e8 2a 8a fe ff       	call   c00004f0 <memset>
c0017ac6:	83 c4 10             	add    esp,0x10
c0017ac9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017acc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017acf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0017ad5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ad8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017adb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0017ae1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ae4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ae7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017aea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017aed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017af0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017af3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0017af9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017afc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017aff:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0017b05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b0b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0017b11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b17:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0017b1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b23:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0017b29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b2f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0017b35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b3b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0017b3e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0017b41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b47:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017b4a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017b4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b53:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0017b5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b5d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b60:	0f 20 da             	mov    edx,cr3
c0017b63:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0017b66:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0017b69:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0017b6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b6f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b72:	83 ec 08             	sub    esp,0x8
c0017b75:	50                   	push   eax
c0017b76:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017b79:	50                   	push   eax
c0017b7a:	e8 39 e2 ff ff       	call   c0015db8 <GDTEntry::setBase(unsigned int)>
c0017b7f:	83 c4 10             	add    esp,0x10
c0017b82:	83 ec 08             	sub    esp,0x8
c0017b85:	6a 68                	push   0x68
c0017b87:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017b8a:	50                   	push   eax
c0017b8b:	e8 44 e2 ff ff       	call   c0015dd4 <GDTEntry::setLimit(unsigned int)>
c0017b90:	83 c4 10             	add    esp,0x10
c0017b93:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0017b97:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017b9a:	83 e0 0f             	and    eax,0xf
c0017b9d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017ba0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017ba3:	83 c8 40             	or     eax,0x40
c0017ba6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017ba9:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0017bae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017bb4:	05 78 01 00 00       	add    eax,0x178
c0017bb9:	83 ec 04             	sub    esp,0x4
c0017bbc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0017bbf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0017bc2:	50                   	push   eax
c0017bc3:	e8 40 e2 ff ff       	call   c0015e08 <GDT::addEntry(GDTEntry)>
c0017bc8:	83 c4 10             	add    esp,0x10
c0017bcb:	89 c2                	mov    edx,eax
c0017bcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bd0:	89 10                	mov    DWORD PTR [eax],edx
c0017bd2:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0017bd7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017bdd:	05 78 01 00 00       	add    eax,0x178
c0017be2:	83 ec 0c             	sub    esp,0xc
c0017be5:	50                   	push   eax
c0017be6:	e8 47 e2 ff ff       	call   c0015e32 <GDT::flush()>
c0017beb:	83 c4 10             	add    esp,0x10
c0017bee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bf1:	8b 00                	mov    eax,DWORD PTR [eax]
c0017bf3:	c9                   	leave  
c0017bf4:	c3                   	ret    
c0017bf5:	90                   	nop

c0017bf6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0017bf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017bfa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017bfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c01:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017c06:	75 08                	jne    c0017c10 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0017c08:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017c0e:	eb 38                	jmp    c0017c48 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0017c10:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017c15:	75 17                	jne    c0017c2e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0017c17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c1c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017c1f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c25:	8b 10                	mov    edx,DWORD PTR [eax]
c0017c27:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c2b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0017c2e:	89 c1                	mov    ecx,eax
c0017c30:	83 e1 fd             	and    ecx,0xfffffffd
c0017c33:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0017c39:	74 cd                	je     c0017c08 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017c3b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017c40:	83 e0 ef             	and    eax,0xffffffef
c0017c43:	83 f8 08             	cmp    eax,0x8
c0017c46:	76 c0                	jbe    c0017c08 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017c48:	31 c0                	xor    eax,eax
c0017c4a:	c3                   	ret    
c0017c4b:	90                   	nop

c0017c4c <ReservedFilename::isAtty()>:
c0017c4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c50:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017c53:	31 c0                	xor    eax,eax
c0017c55:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0017c5b:	74 09                	je     c0017c66 <ReservedFilename::isAtty()+0x1a>
c0017c5d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0017c63:	0f 94 c0             	sete   al
c0017c66:	c3                   	ret    
c0017c67:	90                   	nop

c0017c68 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0017c68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c6c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017c70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c77:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017c7c:	75 08                	jne    c0017c86 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0017c7e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017c84:	eb 3d                	jmp    c0017cc3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017c86:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017c8b:	75 17                	jne    c0017ca4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0017c8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c92:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017c95:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c9b:	8b 10                	mov    edx,DWORD PTR [eax]
c0017c9d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ca1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0017ca4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0017ca9:	75 04                	jne    c0017caf <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0017cab:	89 0a                	mov    DWORD PTR [edx],ecx
c0017cad:	eb 14                	jmp    c0017cc3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017caf:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0017cb4:	74 c8                	je     c0017c7e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017cb6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017cbb:	83 e0 ef             	and    eax,0xffffffef
c0017cbe:	83 f8 08             	cmp    eax,0x8
c0017cc1:	76 bb                	jbe    c0017c7e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017cc3:	31 c0                	xor    eax,eax
c0017cc5:	c3                   	ret    

c0017cc6 <UnixFile::getFileDescriptor()>:
c0017cc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ccd:	c3                   	ret    

c0017cce <UnixFile::UnixFile(int)>:
c0017cce:	53                   	push   ebx
c0017ccf:	83 ec 28             	sub    esp,0x28
c0017cd2:	ba 58 1a 03 c0       	mov    edx,0xc0031a58
c0017cd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cdb:	89 10                	mov    DWORD PTR [eax],edx
c0017cdd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0017ce5:	0f 8f 90 01 00 00    	jg     c0017e7b <UnixFile::UnixFile(int)+0x1ad>
c0017ceb:	a1 60 44 03 c0       	mov    eax,ds:0xc0034460
c0017cf0:	8d 50 01             	lea    edx,[eax+0x1]
c0017cf3:	89 15 60 44 03 c0    	mov    DWORD PTR ds:0xc0034460,edx
c0017cf9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017cfd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017d00:	83 ec 08             	sub    esp,0x8
c0017d03:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017d07:	68 98 ba 03 c0       	push   0xc003ba98
c0017d0c:	e8 b7 72 01 00       	call   c002efc8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017d11:	83 c4 10             	add    esp,0x10
c0017d14:	a0 94 ba 03 c0       	mov    al,ds:0xc003ba94
c0017d19:	83 f0 01             	xor    eax,0x1
c0017d1c:	0f b6 c0             	movzx  eax,al
c0017d1f:	85 c0                	test   eax,eax
c0017d21:	0f 84 55 01 00 00    	je     c0017e7c <UnixFile::UnixFile(int)+0x1ae>
c0017d27:	c6 05 94 ba 03 c0 01 	mov    BYTE PTR ds:0xc003ba94,0x1
c0017d2e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0017d36:	83 ec 0c             	sub    esp,0xc
c0017d39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d3d:	e8 85 e8 ff ff       	call   c00165c7 <malloc>
c0017d42:	83 c4 10             	add    esp,0x10
c0017d45:	89 c3                	mov    ebx,eax
c0017d47:	83 ec 08             	sub    esp,0x8
c0017d4a:	68 03 ff ff 0f       	push   0xfffff03
c0017d4f:	53                   	push   ebx
c0017d50:	e8 2d 01 00 00       	call   c0017e82 <ReservedFilename::ReservedFilename(int)>
c0017d55:	83 c4 10             	add    esp,0x10
c0017d58:	89 1d 8c ba 03 c0    	mov    DWORD PTR ds:0xc003ba8c,ebx
c0017d5e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0017d66:	83 ec 0c             	sub    esp,0xc
c0017d69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d6d:	e8 55 e8 ff ff       	call   c00165c7 <malloc>
c0017d72:	83 c4 10             	add    esp,0x10
c0017d75:	89 c3                	mov    ebx,eax
c0017d77:	83 ec 08             	sub    esp,0x8
c0017d7a:	68 01 ff ff 0f       	push   0xfffff01
c0017d7f:	53                   	push   ebx
c0017d80:	e8 fd 00 00 00       	call   c0017e82 <ReservedFilename::ReservedFilename(int)>
c0017d85:	83 c4 10             	add    esp,0x10
c0017d88:	89 1d 90 ba 03 c0    	mov    DWORD PTR ds:0xc003ba90,ebx
c0017d8e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0017d96:	83 ec 0c             	sub    esp,0xc
c0017d99:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017d9d:	e8 25 e8 ff ff       	call   c00165c7 <malloc>
c0017da2:	83 c4 10             	add    esp,0x10
c0017da5:	89 c3                	mov    ebx,eax
c0017da7:	83 ec 08             	sub    esp,0x8
c0017daa:	68 00 ff ff 0f       	push   0xfffff00
c0017daf:	53                   	push   ebx
c0017db0:	e8 cd 00 00 00       	call   c0017e82 <ReservedFilename::ReservedFilename(int)>
c0017db5:	83 c4 10             	add    esp,0x10
c0017db8:	89 1d 84 ba 03 c0    	mov    DWORD PTR ds:0xc003ba84,ebx
c0017dbe:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0017dc6:	83 ec 0c             	sub    esp,0xc
c0017dc9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017dcd:	e8 f5 e7 ff ff       	call   c00165c7 <malloc>
c0017dd2:	83 c4 10             	add    esp,0x10
c0017dd5:	89 c3                	mov    ebx,eax
c0017dd7:	83 ec 08             	sub    esp,0x8
c0017dda:	68 02 ff ff 0f       	push   0xfffff02
c0017ddf:	53                   	push   ebx
c0017de0:	e8 9d 00 00 00       	call   c0017e82 <ReservedFilename::ReservedFilename(int)>
c0017de5:	83 c4 10             	add    esp,0x10
c0017de8:	89 1d 88 ba 03 c0    	mov    DWORD PTR ds:0xc003ba88,ebx
c0017dee:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017df6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0017dfb:	7f 7f                	jg     c0017e7c <UnixFile::UnixFile(int)+0x1ae>
c0017dfd:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0017e05:	83 ec 0c             	sub    esp,0xc
c0017e08:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017e0c:	e8 b6 e7 ff ff       	call   c00165c7 <malloc>
c0017e11:	83 c4 10             	add    esp,0x10
c0017e14:	89 c3                	mov    ebx,eax
c0017e16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e1a:	05 10 ff ff 0f       	add    eax,0xfffff10
c0017e1f:	83 ec 08             	sub    esp,0x8
c0017e22:	50                   	push   eax
c0017e23:	53                   	push   ebx
c0017e24:	e8 59 00 00 00       	call   c0017e82 <ReservedFilename::ReservedFilename(int)>
c0017e29:	83 c4 10             	add    esp,0x10
c0017e2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e30:	89 1c 85 60 ba 03 c0 	mov    DWORD PTR [eax*4-0x3ffc45a0],ebx
c0017e37:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0017e3f:	83 ec 0c             	sub    esp,0xc
c0017e42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017e46:	e8 7c e7 ff ff       	call   c00165c7 <malloc>
c0017e4b:	83 c4 10             	add    esp,0x10
c0017e4e:	89 c3                	mov    ebx,eax
c0017e50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e54:	05 20 ff ff 0f       	add    eax,0xfffff20
c0017e59:	83 ec 08             	sub    esp,0x8
c0017e5c:	50                   	push   eax
c0017e5d:	53                   	push   ebx
c0017e5e:	e8 1f 00 00 00       	call   c0017e82 <ReservedFilename::ReservedFilename(int)>
c0017e63:	83 c4 10             	add    esp,0x10
c0017e66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e6a:	89 1c 85 20 ba 03 c0 	mov    DWORD PTR [eax*4-0x3ffc45e0],ebx
c0017e71:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0017e76:	e9 7b ff ff ff       	jmp    c0017df6 <UnixFile::UnixFile(int)+0x128>
c0017e7b:	90                   	nop
c0017e7c:	83 c4 28             	add    esp,0x28
c0017e7f:	5b                   	pop    ebx
c0017e80:	c3                   	ret    
c0017e81:	90                   	nop

c0017e82 <ReservedFilename::ReservedFilename(int)>:
c0017e82:	83 ec 0c             	sub    esp,0xc
c0017e85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e89:	83 ec 08             	sub    esp,0x8
c0017e8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e90:	50                   	push   eax
c0017e91:	e8 38 fe ff ff       	call   c0017cce <UnixFile::UnixFile(int)>
c0017e96:	83 c4 10             	add    esp,0x10
c0017e99:	ba 74 1a 03 c0       	mov    edx,0xc0031a74
c0017e9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ea2:	89 10                	mov    DWORD PTR [eax],edx
c0017ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ea8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017eac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017eaf:	90                   	nop
c0017eb0:	83 c4 0c             	add    esp,0xc
c0017eb3:	c3                   	ret    

c0017eb4 <UnixFile::~UnixFile()>:
c0017eb4:	83 ec 1c             	sub    esp,0x1c
c0017eb7:	ba 58 1a 03 c0       	mov    edx,0xc0031a58
c0017ebc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ec0:	89 10                	mov    DWORD PTR [eax],edx
c0017ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ec6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ec9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0017ece:	7f 76                	jg     c0017f46 <UnixFile::~UnixFile()+0x92>
c0017ed0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017ed8:	83 ec 0c             	sub    esp,0xc
c0017edb:	68 98 ba 03 c0       	push   0xc003ba98
c0017ee0:	e8 b7 71 01 00       	call   c002f09c <LinkedList<UnixFile>::getFirstElement()>
c0017ee5:	83 c4 10             	add    esp,0x10
c0017ee8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017eec:	83 ec 0c             	sub    esp,0xc
c0017eef:	68 98 ba 03 c0       	push   0xc003ba98
c0017ef4:	e8 ab 71 01 00       	call   c002f0a4 <LinkedList<UnixFile>::removeFirst()>
c0017ef9:	83 c4 10             	add    esp,0x10
c0017efc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f00:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0017f04:	74 43                	je     c0017f49 <UnixFile::~UnixFile()+0x95>
c0017f06:	83 ec 08             	sub    esp,0x8
c0017f09:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017f0d:	68 98 ba 03 c0       	push   0xc003ba98
c0017f12:	e8 b1 70 01 00       	call   c002efc8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017f17:	83 c4 10             	add    esp,0x10
c0017f1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f1e:	8d 50 01             	lea    edx,[eax+0x1]
c0017f21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017f25:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0017f2a:	0f 94 c0             	sete   al
c0017f2d:	0f b6 c0             	movzx  eax,al
c0017f30:	85 c0                	test   eax,eax
c0017f32:	74 a4                	je     c0017ed8 <UnixFile::~UnixFile()+0x24>
c0017f34:	83 ec 0c             	sub    esp,0xc
c0017f37:	68 30 1a 03 c0       	push   0xc0031a30
c0017f3c:	e8 4d 88 00 00       	call   c002078e <KePanic(char const*)>
c0017f41:	83 c4 10             	add    esp,0x10
c0017f44:	eb 92                	jmp    c0017ed8 <UnixFile::~UnixFile()+0x24>
c0017f46:	90                   	nop
c0017f47:	eb 01                	jmp    c0017f4a <UnixFile::~UnixFile()+0x96>
c0017f49:	90                   	nop
c0017f4a:	90                   	nop
c0017f4b:	83 c4 1c             	add    esp,0x1c
c0017f4e:	c3                   	ret    
c0017f4f:	90                   	nop

c0017f50 <UnixFile::~UnixFile()>:
c0017f50:	83 ec 0c             	sub    esp,0xc
c0017f53:	83 ec 0c             	sub    esp,0xc
c0017f56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f5a:	e8 55 ff ff ff       	call   c0017eb4 <UnixFile::~UnixFile()>
c0017f5f:	83 c4 10             	add    esp,0x10
c0017f62:	83 ec 08             	sub    esp,0x8
c0017f65:	6a 0c                	push   0xc
c0017f67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f6b:	e8 b8 13 00 00       	call   c0019328 <operator delete(void*, unsigned long)>
c0017f70:	83 c4 10             	add    esp,0x10
c0017f73:	83 c4 0c             	add    esp,0xc
c0017f76:	c3                   	ret    
c0017f77:	90                   	nop

c0017f78 <ReservedFilename::~ReservedFilename()>:
c0017f78:	83 ec 0c             	sub    esp,0xc
c0017f7b:	ba 74 1a 03 c0       	mov    edx,0xc0031a74
c0017f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f84:	89 10                	mov    DWORD PTR [eax],edx
c0017f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f8a:	83 ec 0c             	sub    esp,0xc
c0017f8d:	50                   	push   eax
c0017f8e:	e8 21 ff ff ff       	call   c0017eb4 <UnixFile::~UnixFile()>
c0017f93:	83 c4 10             	add    esp,0x10
c0017f96:	90                   	nop
c0017f97:	83 c4 0c             	add    esp,0xc
c0017f9a:	c3                   	ret    
c0017f9b:	90                   	nop

c0017f9c <ReservedFilename::~ReservedFilename()>:
c0017f9c:	83 ec 0c             	sub    esp,0xc
c0017f9f:	83 ec 0c             	sub    esp,0xc
c0017fa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fa6:	e8 cd ff ff ff       	call   c0017f78 <ReservedFilename::~ReservedFilename()>
c0017fab:	83 c4 10             	add    esp,0x10
c0017fae:	83 ec 08             	sub    esp,0x8
c0017fb1:	6a 0c                	push   0xc
c0017fb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fb7:	e8 6c 13 00 00       	call   c0019328 <operator delete(void*, unsigned long)>
c0017fbc:	83 c4 10             	add    esp,0x10
c0017fbf:	83 c4 0c             	add    esp,0xc
c0017fc2:	c3                   	ret    

c0017fc3 <KeGetFileFromDescriptor(int)>:
c0017fc3:	53                   	push   ebx
c0017fc4:	83 ec 08             	sub    esp,0x8
c0017fc7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017fcb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0017fd1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0017fd7:	7f 2c                	jg     c0018005 <KeGetFileFromDescriptor(int)+0x42>
c0017fd9:	83 ec 0c             	sub    esp,0xc
c0017fdc:	68 98 ba 03 c0       	push   0xc003ba98
c0017fe1:	e8 b6 70 01 00       	call   c002f09c <LinkedList<UnixFile>::getFirstElement()>
c0017fe6:	83 c4 10             	add    esp,0x10
c0017fe9:	85 c0                	test   eax,eax
c0017feb:	75 04                	jne    c0017ff1 <KeGetFileFromDescriptor(int)+0x2e>
c0017fed:	31 c0                	xor    eax,eax
c0017fef:	eb 6e                	jmp    c001805f <KeGetFileFromDescriptor(int)+0x9c>
c0017ff1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0017ff4:	74 69                	je     c001805f <KeGetFileFromDescriptor(int)+0x9c>
c0017ff6:	52                   	push   edx
c0017ff7:	52                   	push   edx
c0017ff8:	50                   	push   eax
c0017ff9:	68 98 ba 03 c0       	push   0xc003ba98
c0017ffe:	e8 43 71 01 00       	call   c002f146 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0018003:	eb e1                	jmp    c0017fe6 <KeGetFileFromDescriptor(int)+0x23>
c0018005:	a1 8c ba 03 c0       	mov    eax,ds:0xc003ba8c
c001800a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0018010:	74 4d                	je     c001805f <KeGetFileFromDescriptor(int)+0x9c>
c0018012:	a1 90 ba 03 c0       	mov    eax,ds:0xc003ba90
c0018017:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001801d:	74 40                	je     c001805f <KeGetFileFromDescriptor(int)+0x9c>
c001801f:	a1 88 ba 03 c0       	mov    eax,ds:0xc003ba88
c0018024:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001802a:	74 33                	je     c001805f <KeGetFileFromDescriptor(int)+0x9c>
c001802c:	a1 84 ba 03 c0       	mov    eax,ds:0xc003ba84
c0018031:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0018037:	74 26                	je     c001805f <KeGetFileFromDescriptor(int)+0x9c>
c0018039:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001803f:	83 f8 08             	cmp    eax,0x8
c0018042:	77 09                	ja     c001804d <KeGetFileFromDescriptor(int)+0x8a>
c0018044:	8b 04 85 60 ba 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc45a0]
c001804b:	eb 12                	jmp    c001805f <KeGetFileFromDescriptor(int)+0x9c>
c001804d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0018053:	83 fb 08             	cmp    ebx,0x8
c0018056:	77 95                	ja     c0017fed <KeGetFileFromDescriptor(int)+0x2a>
c0018058:	8b 04 9d 20 ba 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc45e0]
c001805f:	83 c4 08             	add    esp,0x8
c0018062:	5b                   	pop    ebx
c0018063:	c3                   	ret    

c0018064 <__static_initialization_and_destruction_0(int, int)>:
c0018064:	83 ec 0c             	sub    esp,0xc
c0018067:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001806c:	75 34                	jne    c00180a2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001806e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018076:	75 2a                	jne    c00180a2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0018078:	83 ec 0c             	sub    esp,0xc
c001807b:	68 98 ba 03 c0       	push   0xc003ba98
c0018080:	e8 01 6f 01 00       	call   c002ef86 <LinkedList<UnixFile>::LinkedList()>
c0018085:	83 c4 10             	add    esp,0x10
c0018088:	83 ec 04             	sub    esp,0x4
c001808b:	68 d8 43 03 c0       	push   0xc00343d8
c0018090:	68 98 ba 03 c0       	push   0xc003ba98
c0018095:	68 84 ef 02 c0       	push   0xc002ef84
c001809a:	e8 39 12 00 00       	call   c00192d8 <__cxa_atexit>
c001809f:	83 c4 10             	add    esp,0x10
c00180a2:	90                   	nop
c00180a3:	83 c4 0c             	add    esp,0xc
c00180a6:	c3                   	ret    

c00180a7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00180a7:	83 ec 0c             	sub    esp,0xc
c00180aa:	83 ec 08             	sub    esp,0x8
c00180ad:	68 ff ff 00 00       	push   0xffff
c00180b2:	6a 01                	push   0x1
c00180b4:	e8 ab ff ff ff       	call   c0018064 <__static_initialization_and_destruction_0(int, int)>
c00180b9:	83 c4 10             	add    esp,0x10
c00180bc:	83 c4 0c             	add    esp,0xc
c00180bf:	c3                   	ret    

c00180c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00180c0:	53                   	push   ebx
c00180c1:	8b 15 68 44 03 c0    	mov    edx,DWORD PTR ds:0xc0034468
c00180c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180cb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00180cf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00180d5:	89 d8                	mov    eax,ebx
c00180d7:	d1 e8                	shr    eax,1
c00180d9:	01 d0                	add    eax,edx
c00180db:	80 e3 01             	and    bl,0x1
c00180de:	8a 10                	mov    dl,BYTE PTR [eax]
c00180e0:	75 09                	jne    c00180eb <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00180e2:	83 e2 f0             	and    edx,0xfffffff0
c00180e5:	09 ca                	or     edx,ecx
c00180e7:	88 10                	mov    BYTE PTR [eax],dl
c00180e9:	5b                   	pop    ebx
c00180ea:	c3                   	ret    
c00180eb:	83 e2 0f             	and    edx,0xf
c00180ee:	0f b6 c9             	movzx  ecx,cl
c00180f1:	c1 e1 04             	shl    ecx,0x4
c00180f4:	09 ca                	or     edx,ecx
c00180f6:	88 10                	mov    BYTE PTR [eax],dl
c00180f8:	5b                   	pop    ebx
c00180f9:	c3                   	ret    

c00180fa <Virt::getPageState(unsigned long)>:
c00180fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180fe:	8b 0d 68 44 03 c0    	mov    ecx,DWORD PTR ds:0xc0034468
c0018104:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001810a:	89 d0                	mov    eax,edx
c001810c:	d1 e8                	shr    eax,1
c001810e:	80 e2 01             	and    dl,0x1
c0018111:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0018114:	74 03                	je     c0018119 <Virt::getPageState(unsigned long)+0x1f>
c0018116:	c1 e8 04             	shr    eax,0x4
c0018119:	83 e0 0f             	and    eax,0xf
c001811c:	c3                   	ret    

c001811d <Virt::allocateKernelVirtualPages(int)>:
c001811d:	55                   	push   ebp
c001811e:	31 ed                	xor    ebp,ebp
c0018120:	57                   	push   edi
c0018121:	31 ff                	xor    edi,edi
c0018123:	56                   	push   esi
c0018124:	53                   	push   ebx
c0018125:	31 db                	xor    ebx,ebx
c0018127:	83 ec 0c             	sub    esp,0xc
c001812a:	8b 35 64 44 03 c0    	mov    esi,DWORD PTR ds:0xc0034464
c0018130:	56                   	push   esi
c0018131:	e8 c4 ff ff ff       	call   c00180fa <Virt::getPageState(unsigned long)>
c0018136:	5a                   	pop    edx
c0018137:	84 c0                	test   al,al
c0018139:	75 41                	jne    c001817c <Virt::allocateKernelVirtualPages(int)+0x5f>
c001813b:	85 db                	test   ebx,ebx
c001813d:	75 02                	jne    c0018141 <Virt::allocateKernelVirtualPages(int)+0x24>
c001813f:	89 f5                	mov    ebp,esi
c0018141:	83 c3 01             	add    ebx,0x1
c0018144:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0018148:	74 5f                	je     c00181a9 <Virt::allocateKernelVirtualPages(int)+0x8c>
c001814a:	83 c6 01             	add    esi,0x1
c001814d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0018153:	76 34                	jbe    c0018189 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0018155:	c7 05 64 44 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0034464,0xc8000
c001815f:	f7 c7 01 00 00 00    	test   edi,0x1
c0018165:	75 2a                	jne    c0018191 <Virt::allocateKernelVirtualPages(int)+0x74>
c0018167:	be 00 80 0c 00       	mov    esi,0xc8000
c001816c:	bf 01 00 00 00       	mov    edi,0x1
c0018171:	56                   	push   esi
c0018172:	e8 83 ff ff ff       	call   c00180fa <Virt::getPageState(unsigned long)>
c0018177:	5a                   	pop    edx
c0018178:	84 c0                	test   al,al
c001817a:	74 bf                	je     c001813b <Virt::allocateKernelVirtualPages(int)+0x1e>
c001817c:	31 db                	xor    ebx,ebx
c001817e:	83 c6 01             	add    esi,0x1
c0018181:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0018187:	77 cc                	ja     c0018155 <Virt::allocateKernelVirtualPages(int)+0x38>
c0018189:	89 35 64 44 03 c0    	mov    DWORD PTR ds:0xc0034464,esi
c001818f:	eb 9f                	jmp    c0018130 <Virt::allocateKernelVirtualPages(int)+0x13>
c0018191:	83 ec 0c             	sub    esp,0xc
c0018194:	68 88 1a 03 c0       	push   0xc0031a88
c0018199:	e8 f0 85 00 00       	call   c002078e <KePanic(char const*)>
c001819e:	8b 35 64 44 03 c0    	mov    esi,DWORD PTR ds:0xc0034464
c00181a4:	83 c4 10             	add    esp,0x10
c00181a7:	eb 87                	jmp    c0018130 <Virt::allocateKernelVirtualPages(int)+0x13>
c00181a9:	89 2d 64 44 03 c0    	mov    DWORD PTR ds:0xc0034464,ebp
c00181af:	83 fb 01             	cmp    ebx,0x1
c00181b2:	74 6f                	je     c0018223 <Virt::allocateKernelVirtualPages(int)+0x106>
c00181b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00181b8:	85 c9                	test   ecx,ecx
c00181ba:	74 49                	je     c0018205 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00181bc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00181c0:	89 e8                	mov    eax,ebp
c00181c2:	31 db                	xor    ebx,ebx
c00181c4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00181c7:	eb 18                	jmp    c00181e1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00181c9:	6a 01                	push   0x1
c00181cb:	83 c3 01             	add    ebx,0x1
c00181ce:	50                   	push   eax
c00181cf:	e8 ec fe ff ff       	call   c00180c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00181d4:	58                   	pop    eax
c00181d5:	5a                   	pop    edx
c00181d6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00181da:	74 29                	je     c0018205 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00181dc:	a1 64 44 03 c0       	mov    eax,ds:0xc0034464
c00181e1:	8d 50 01             	lea    edx,[eax+0x1]
c00181e4:	85 db                	test   ebx,ebx
c00181e6:	89 15 64 44 03 c0    	mov    DWORD PTR ds:0xc0034464,edx
c00181ec:	74 24                	je     c0018212 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00181ee:	39 df                	cmp    edi,ebx
c00181f0:	75 d7                	jne    c00181c9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00181f2:	6a 03                	push   0x3
c00181f4:	83 c3 01             	add    ebx,0x1
c00181f7:	50                   	push   eax
c00181f8:	e8 c3 fe ff ff       	call   c00180c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00181fd:	59                   	pop    ecx
c00181fe:	5e                   	pop    esi
c00181ff:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0018203:	75 d7                	jne    c00181dc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0018205:	83 c4 0c             	add    esp,0xc
c0018208:	89 e8                	mov    eax,ebp
c001820a:	5b                   	pop    ebx
c001820b:	c1 e0 0c             	shl    eax,0xc
c001820e:	5e                   	pop    esi
c001820f:	5f                   	pop    edi
c0018210:	5d                   	pop    ebp
c0018211:	c3                   	ret    
c0018212:	6a 02                	push   0x2
c0018214:	bb 01 00 00 00       	mov    ebx,0x1
c0018219:	50                   	push   eax
c001821a:	e8 a1 fe ff ff       	call   c00180c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001821f:	58                   	pop    eax
c0018220:	5a                   	pop    edx
c0018221:	eb b9                	jmp    c00181dc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0018223:	6a 04                	push   0x4
c0018225:	8d 45 01             	lea    eax,[ebp+0x1]
c0018228:	55                   	push   ebp
c0018229:	a3 64 44 03 c0       	mov    ds:0xc0034464,eax
c001822e:	e8 8d fe ff ff       	call   c00180c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018233:	5b                   	pop    ebx
c0018234:	89 e8                	mov    eax,ebp
c0018236:	5e                   	pop    esi
c0018237:	c1 e0 0c             	shl    eax,0xc
c001823a:	83 c4 0c             	add    esp,0xc
c001823d:	5b                   	pop    ebx
c001823e:	5e                   	pop    esi
c001823f:	5f                   	pop    edi
c0018240:	5d                   	pop    ebp
c0018241:	c3                   	ret    

c0018242 <Virt::freeSwapfilePage(unsigned long)>:
c0018242:	53                   	push   ebx
c0018243:	8b 15 ac ba 03 c0    	mov    edx,DWORD PTR ds:0xc003baac
c0018249:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001824d:	b8 01 00 00 00       	mov    eax,0x1
c0018252:	89 cb                	mov    ebx,ecx
c0018254:	d3 e0                	shl    eax,cl
c0018256:	c1 eb 05             	shr    ebx,0x5
c0018259:	f7 d0                	not    eax
c001825b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c001825e:	21 c1                	and    ecx,eax
c0018260:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0018263:	5b                   	pop    ebx
c0018264:	c3                   	ret    

c0018265 <Virt::swapIDToSector(unsigned long)>:
c0018265:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018269:	8b 15 6c 44 03 c0    	mov    edx,DWORD PTR ds:0xc003446c
c001826f:	8b 0d 74 44 03 c0    	mov    ecx,DWORD PTR ds:0xc0034474
c0018275:	0f af c2             	imul   eax,edx
c0018278:	01 c8                	add    eax,ecx
c001827a:	c3                   	ret    

c001827b <Virt::allocateSwapfilePage()>:
c001827b:	55                   	push   ebp
c001827c:	31 d2                	xor    edx,edx
c001827e:	57                   	push   edi
c001827f:	56                   	push   esi
c0018280:	53                   	push   ebx
c0018281:	83 ec 0c             	sub    esp,0xc
c0018284:	8b 0d 6c 44 03 c0    	mov    ecx,DWORD PTR ds:0xc003446c
c001828a:	a1 70 44 03 c0       	mov    eax,ds:0xc0034470
c001828f:	f7 f1                	div    ecx
c0018291:	39 0d 70 44 03 c0    	cmp    DWORD PTR ds:0xc0034470,ecx
c0018297:	72 2f                	jb     c00182c8 <Virt::allocateSwapfilePage()+0x4d>
c0018299:	8b 35 ac ba 03 c0    	mov    esi,DWORD PTR ds:0xc003baac
c001829f:	8b 16                	mov    edx,DWORD PTR [esi]
c00182a1:	f6 c2 01             	test   dl,0x1
c00182a4:	74 3e                	je     c00182e4 <Virt::allocateSwapfilePage()+0x69>
c00182a6:	31 c9                	xor    ecx,ecx
c00182a8:	bf 01 00 00 00       	mov    edi,0x1
c00182ad:	eb 12                	jmp    c00182c1 <Virt::allocateSwapfilePage()+0x46>
c00182af:	89 fd                	mov    ebp,edi
c00182b1:	89 ca                	mov    edx,ecx
c00182b3:	d3 e5                	shl    ebp,cl
c00182b5:	c1 ea 05             	shr    edx,0x5
c00182b8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00182bb:	8b 13                	mov    edx,DWORD PTR [ebx]
c00182bd:	85 ea                	test   edx,ebp
c00182bf:	74 2c                	je     c00182ed <Virt::allocateSwapfilePage()+0x72>
c00182c1:	83 c1 01             	add    ecx,0x1
c00182c4:	39 c8                	cmp    eax,ecx
c00182c6:	77 e7                	ja     c00182af <Virt::allocateSwapfilePage()+0x34>
c00182c8:	83 ec 0c             	sub    esp,0xc
c00182cb:	68 1c 1d 03 c0       	push   0xc0031d1c
c00182d0:	e8 b9 84 00 00       	call   c002078e <KePanic(char const*)>
c00182d5:	83 c4 10             	add    esp,0x10
c00182d8:	31 c9                	xor    ecx,ecx
c00182da:	83 c4 0c             	add    esp,0xc
c00182dd:	89 c8                	mov    eax,ecx
c00182df:	5b                   	pop    ebx
c00182e0:	5e                   	pop    esi
c00182e1:	5f                   	pop    edi
c00182e2:	5d                   	pop    ebp
c00182e3:	c3                   	ret    
c00182e4:	89 f3                	mov    ebx,esi
c00182e6:	bd 01 00 00 00       	mov    ebp,0x1
c00182eb:	31 c9                	xor    ecx,ecx
c00182ed:	09 ea                	or     edx,ebp
c00182ef:	89 c8                	mov    eax,ecx
c00182f1:	89 13                	mov    DWORD PTR [ebx],edx
c00182f3:	83 c4 0c             	add    esp,0xc
c00182f6:	5b                   	pop    ebx
c00182f7:	5e                   	pop    esi
c00182f8:	5f                   	pop    edi
c00182f9:	5d                   	pop    ebp
c00182fa:	c3                   	ret    

c00182fb <Virt::virtualMemorySetup()>:
c00182fb:	53                   	push   ebx
c00182fc:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0018301:	6a 0f                	push   0xf
c0018303:	53                   	push   ebx
c0018304:	83 c3 01             	add    ebx,0x1
c0018307:	e8 b4 fd ff ff       	call   c00180c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001830c:	58                   	pop    eax
c001830d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0018313:	5a                   	pop    edx
c0018314:	75 eb                	jne    c0018301 <Virt::virtualMemorySetup()+0x6>
c0018316:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001831b:	6a 00                	push   0x0
c001831d:	53                   	push   ebx
c001831e:	83 c3 01             	add    ebx,0x1
c0018321:	e8 9a fd ff ff       	call   c00180c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018326:	59                   	pop    ecx
c0018327:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001832d:	58                   	pop    eax
c001832e:	75 eb                	jne    c001831b <Virt::virtualMemorySetup()+0x20>
c0018330:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0018335:	6a 0f                	push   0xf
c0018337:	53                   	push   ebx
c0018338:	83 c3 01             	add    ebx,0x1
c001833b:	e8 80 fd ff ff       	call   c00180c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018340:	58                   	pop    eax
c0018341:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0018347:	5a                   	pop    edx
c0018348:	75 eb                	jne    c0018335 <Virt::virtualMemorySetup()+0x3a>
c001834a:	5b                   	pop    ebx
c001834b:	c3                   	ret    

c001834c <Virt::setupPageSwapping(int)>:
c001834c:	53                   	push   ebx
c001834d:	83 ec 0c             	sub    esp,0xc
c0018350:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018354:	a1 88 03 04 c0       	mov    eax,ds:0xc0040388
c0018359:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001835f:	8b 10                	mov    edx,DWORD PTR [eax]
c0018361:	53                   	push   ebx
c0018362:	c1 e3 0b             	shl    ebx,0xb
c0018365:	68 33 1d 03 c0       	push   0xc0031d33
c001836a:	50                   	push   eax
c001836b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c001836e:	89 1d 70 44 03 c0    	mov    DWORD PTR ds:0xc0034470,ebx
c0018374:	c6 05 78 44 03 c0 43 	mov    BYTE PTR ds:0xc0034478,0x43
c001837b:	c1 eb 08             	shr    ebx,0x8
c001837e:	a3 74 44 03 c0       	mov    ds:0xc0034474,eax
c0018383:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018386:	c7 05 6c 44 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc003446c,0x8
c0018390:	e8 32 e2 ff ff       	call   c00165c7 <malloc>
c0018395:	83 c4 0c             	add    esp,0xc
c0018398:	89 c1                	mov    ecx,eax
c001839a:	a3 ac ba 03 c0       	mov    ds:0xc003baac,eax
c001839f:	31 d2                	xor    edx,edx
c00183a1:	a1 70 44 03 c0       	mov    eax,ds:0xc0034470
c00183a6:	f7 35 6c 44 03 c0    	div    DWORD PTR ds:0xc003446c
c00183ac:	c1 e8 05             	shr    eax,0x5
c00183af:	50                   	push   eax
c00183b0:	6a 00                	push   0x0
c00183b2:	51                   	push   ecx
c00183b3:	e8 38 81 fe ff       	call   c00004f0 <memset>
c00183b8:	83 c4 18             	add    esp,0x18
c00183bb:	5b                   	pop    ebx
c00183bc:	c3                   	ret    
c00183bd:	90                   	nop

c00183be <VAS::setCPUSpecific(unsigned long)>:
c00183be:	c3                   	ret    
c00183bf:	90                   	nop

c00183c0 <VAS::VAS(VAS*)>:
c00183c0:	83 ec 0c             	sub    esp,0xc
c00183c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00183ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183d2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00183d9:	83 ec 0c             	sub    esp,0xc
c00183dc:	68 a8 1a 03 c0       	push   0xc0031aa8
c00183e1:	e8 a8 83 00 00       	call   c002078e <KePanic(char const*)>
c00183e6:	83 c4 10             	add    esp,0x10
c00183e9:	90                   	nop
c00183ea:	83 c4 0c             	add    esp,0xc
c00183ed:	c3                   	ret    

c00183ee <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00183ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00183f2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00183f7:	89 c2                	mov    edx,eax
c00183f9:	c1 e8 0a             	shr    eax,0xa
c00183fc:	c1 ea 16             	shr    edx,0x16
c00183ff:	83 f9 01             	cmp    ecx,0x1
c0018402:	19 c9                	sbb    ecx,ecx
c0018404:	c1 e2 0c             	shl    edx,0xc
c0018407:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c001840d:	25 fc 0f 00 00       	and    eax,0xffc
c0018412:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0018419:	01 d0                	add    eax,edx
c001841b:	c3                   	ret    

c001841c <VAS::getPageTableEntry(unsigned long)>:
c001841c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018420:	89 ca                	mov    edx,ecx
c0018422:	c1 e9 0a             	shr    ecx,0xa
c0018425:	c1 ea 16             	shr    edx,0x16
c0018428:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001842e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0018434:	c1 e0 0c             	shl    eax,0xc
c0018437:	8d 04 08             	lea    eax,[eax+ecx*1]
c001843a:	c3                   	ret    

c001843b <Virt::freeKernelVirtualPages(unsigned long)>:
c001843b:	55                   	push   ebp
c001843c:	57                   	push   edi
c001843d:	bf 01 00 00 00       	mov    edi,0x1
c0018442:	56                   	push   esi
c0018443:	53                   	push   ebx
c0018444:	83 ec 1c             	sub    esp,0x1c
c0018447:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001844b:	c1 ee 0c             	shr    esi,0xc
c001844e:	eb 48                	jmp    c0018498 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0018450:	83 ec 08             	sub    esp,0x8
c0018453:	a1 b0 ba 03 c0       	mov    eax,ds:0xc003bab0
c0018458:	55                   	push   ebp
c0018459:	50                   	push   eax
c001845a:	e8 bd ff ff ff       	call   c001841c <VAS::getPageTableEntry(unsigned long)>
c001845f:	83 c4 10             	add    esp,0x10
c0018462:	8b 10                	mov    edx,DWORD PTR [eax]
c0018464:	f6 c6 04             	test   dh,0x4
c0018467:	75 70                	jne    c00184d9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0018469:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001846f:	83 fb 04             	cmp    ebx,0x4
c0018472:	0f 84 8a 00 00 00    	je     c0018502 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0018478:	83 fb 02             	cmp    ebx,0x2
c001847b:	0f 84 9a 00 00 00    	je     c001851b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0018481:	83 fb 03             	cmp    ebx,0x3
c0018484:	0f 84 be 00 00 00    	je     c0018548 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c001848a:	83 fb 01             	cmp    ebx,0x1
c001848d:	0f 84 a2 00 00 00    	je     c0018535 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0018493:	83 c6 01             	add    esi,0x1
c0018496:	31 ff                	xor    edi,edi
c0018498:	56                   	push   esi
c0018499:	89 f5                	mov    ebp,esi
c001849b:	e8 5a fc ff ff       	call   c00180fa <Virt::getPageState(unsigned long)>
c00184a0:	c1 e5 0c             	shl    ebp,0xc
c00184a3:	0f b6 d8             	movzx  ebx,al
c00184a6:	5a                   	pop    edx
c00184a7:	85 db                	test   ebx,ebx
c00184a9:	75 a5                	jne    c0018450 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00184ab:	83 ec 0c             	sub    esp,0xc
c00184ae:	68 4a 1d 03 c0       	push   0xc0031d4a
c00184b3:	e8 d6 82 00 00       	call   c002078e <KePanic(char const*)>
c00184b8:	5a                   	pop    edx
c00184b9:	59                   	pop    ecx
c00184ba:	55                   	push   ebp
c00184bb:	8b 2d b0 ba 03 c0    	mov    ebp,DWORD PTR ds:0xc003bab0
c00184c1:	55                   	push   ebp
c00184c2:	e8 55 ff ff ff       	call   c001841c <VAS::getPageTableEntry(unsigned long)>
c00184c7:	83 c4 10             	add    esp,0x10
c00184ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00184cc:	f6 c6 04             	test   dh,0x4
c00184cf:	75 08                	jne    c00184d9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00184d1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00184d7:	eb ba                	jmp    c0018493 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00184d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00184dd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00184e3:	83 ec 0c             	sub    esp,0xc
c00184e6:	52                   	push   edx
c00184e7:	e8 7b e3 ff ff       	call   c0016867 <Phys::freePage(unsigned long)>
c00184ec:	83 c4 10             	add    esp,0x10
c00184ef:	83 fb 04             	cmp    ebx,0x4
c00184f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184f6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00184fc:	0f 85 76 ff ff ff    	jne    c0018478 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0018502:	83 e7 01             	and    edi,0x1
c0018505:	75 46                	jne    c001854d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0018507:	c7 44 24 30 cc 1a 03 c0 	mov    DWORD PTR [esp+0x30],0xc0031acc
c001850f:	83 c4 1c             	add    esp,0x1c
c0018512:	5b                   	pop    ebx
c0018513:	5e                   	pop    esi
c0018514:	5f                   	pop    edi
c0018515:	5d                   	pop    ebp
c0018516:	e9 73 82 00 00       	jmp    c002078e <KePanic(char const*)>
c001851b:	83 e7 01             	and    edi,0x1
c001851e:	75 15                	jne    c0018535 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0018520:	83 ec 0c             	sub    esp,0xc
c0018523:	68 66 1d 03 c0       	push   0xc0031d66
c0018528:	e8 61 82 00 00       	call   c002078e <KePanic(char const*)>
c001852d:	83 c4 10             	add    esp,0x10
c0018530:	e9 5e ff ff ff       	jmp    c0018493 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0018535:	83 ec 08             	sub    esp,0x8
c0018538:	6a 00                	push   0x0
c001853a:	56                   	push   esi
c001853b:	e8 80 fb ff ff       	call   c00180c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018540:	83 c4 10             	add    esp,0x10
c0018543:	e9 4b ff ff ff       	jmp    c0018493 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0018548:	83 e7 01             	and    edi,0x1
c001854b:	75 16                	jne    c0018563 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c001854d:	83 ec 08             	sub    esp,0x8
c0018550:	6a 00                	push   0x0
c0018552:	56                   	push   esi
c0018553:	e8 68 fb ff ff       	call   c00180c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018558:	83 c4 10             	add    esp,0x10
c001855b:	83 c4 1c             	add    esp,0x1c
c001855e:	5b                   	pop    ebx
c001855f:	5e                   	pop    esi
c0018560:	5f                   	pop    edi
c0018561:	5d                   	pop    ebp
c0018562:	c3                   	ret    
c0018563:	c7 44 24 30 82 1d 03 c0 	mov    DWORD PTR [esp+0x30],0xc0031d82
c001856b:	83 c4 1c             	add    esp,0x1c
c001856e:	5b                   	pop    ebx
c001856f:	5e                   	pop    esi
c0018570:	5f                   	pop    edi
c0018571:	5d                   	pop    ebp
c0018572:	e9 17 82 00 00       	jmp    c002078e <KePanic(char const*)>
c0018577:	90                   	nop

c0018578 <VAS::freeAllocatedPages(unsigned long)>:
c0018578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001857c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018580:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0018584:	74 09                	je     c001858f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0018586:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001858a:	e9 ac fe ff ff       	jmp    c001843b <Virt::freeKernelVirtualPages(unsigned long)>
c001858f:	c7 44 24 04 f0 1a 03 c0 	mov    DWORD PTR [esp+0x4],0xc0031af0
c0018597:	e9 b9 0e 00 00       	jmp    c0019455 <Dbg::kprintf(char const*, ...)>

c001859c <VAS::virtualToPhysical(unsigned long)>:
c001859c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00185a0:	50                   	push   eax
c00185a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185a5:	52                   	push   edx
c00185a6:	e8 71 fe ff ff       	call   c001841c <VAS::getPageTableEntry(unsigned long)>
c00185ab:	59                   	pop    ecx
c00185ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00185ae:	5a                   	pop    edx
c00185af:	25 00 f0 ff ff       	and    eax,0xfffff000
c00185b4:	c3                   	ret    
c00185b5:	90                   	nop

c00185b6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00185b6:	55                   	push   ebp
c00185b7:	57                   	push   edi
c00185b8:	56                   	push   esi
c00185b9:	53                   	push   ebx
c00185ba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00185be:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00185c2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00185c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00185ca:	85 db                	test   ebx,ebx
c00185cc:	7e 24                	jle    c00185f2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c00185ce:	c1 e3 0c             	shl    ebx,0xc
c00185d1:	01 f3                	add    ebx,esi
c00185d3:	56                   	push   esi
c00185d4:	81 c6 00 10 00 00    	add    esi,0x1000
c00185da:	55                   	push   ebp
c00185db:	e8 3c fe ff ff       	call   c001841c <VAS::getPageTableEntry(unsigned long)>
c00185e0:	5a                   	pop    edx
c00185e1:	59                   	pop    ecx
c00185e2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00185e4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00185e8:	21 f9                	and    ecx,edi
c00185ea:	09 d1                	or     ecx,edx
c00185ec:	39 f3                	cmp    ebx,esi
c00185ee:	89 08                	mov    DWORD PTR [eax],ecx
c00185f0:	75 e1                	jne    c00185d3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00185f2:	5b                   	pop    ebx
c00185f3:	5e                   	pop    esi
c00185f4:	5f                   	pop    edi
c00185f5:	5d                   	pop    ebp
c00185f6:	c3                   	ret    
c00185f7:	90                   	nop

c00185f8 <VAS::VAS()>:
c00185f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00185fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018603:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018607:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001860e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018612:	a3 b0 ba 03 c0       	mov    ds:0xc003bab0,eax
c0018617:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001861b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001861f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018623:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0018626:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001862a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0018631:	ba 7d 60 03 c0       	mov    edx,0xc003607d
c0018636:	b8 00 60 03 c0       	mov    eax,0xc0036000
c001863b:	29 c2                	sub    edx,eax
c001863d:	89 d0                	mov    eax,edx
c001863f:	05 ff 0f 00 00       	add    eax,0xfff
c0018644:	c1 e8 0c             	shr    eax,0xc
c0018647:	89 c2                	mov    edx,eax
c0018649:	b8 00 60 03 c0       	mov    eax,0xc0036000
c001864e:	6a 04                	push   0x4
c0018650:	6a ff                	push   0xffffffff
c0018652:	52                   	push   edx
c0018653:	50                   	push   eax
c0018654:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018658:	e8 59 ff ff ff       	call   c00185b6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001865d:	83 c4 14             	add    esp,0x14
c0018660:	90                   	nop
c0018661:	c3                   	ret    

c0018662 <VAS::setToWriteCombining(unsigned long, int)>:
c0018662:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0018667:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001866d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0018674:	75 01                	jne    c0018677 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0018676:	c3                   	ret    
c0018677:	68 80 00 00 00       	push   0x80
c001867c:	6a ff                	push   0xffffffff
c001867e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018682:	50                   	push   eax
c0018683:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018687:	52                   	push   edx
c0018688:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001868c:	51                   	push   ecx
c001868d:	e8 24 ff ff ff       	call   c00185b6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0018692:	83 c4 14             	add    esp,0x14
c0018695:	c3                   	ret    

c0018696 <VAS::mapOtherVASIn(bool, VAS*)>:
c0018696:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001869a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001869d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186a1:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00186a4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00186a9:	83 f8 01             	cmp    eax,0x1
c00186ac:	19 c0                	sbb    eax,eax
c00186ae:	83 ca 03             	or     edx,0x3
c00186b1:	83 e0 fc             	and    eax,0xfffffffc
c00186b4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00186bb:	0f 20 d8             	mov    eax,cr3
c00186be:	0f 22 d8             	mov    cr3,eax
c00186c1:	c3                   	ret    

c00186c2 <VAS::~VAS()>:
c00186c2:	83 ec 2c             	sub    esp,0x2c
c00186c5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00186cd:	fa                   	cli    
c00186ce:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00186d3:	83 c0 01             	add    eax,0x1
c00186d6:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00186db:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00186e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00186e2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00186e5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00186eb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00186ef:	6a 01                	push   0x1
c00186f1:	50                   	push   eax
c00186f2:	e8 9f ff ff ff       	call   c0018696 <VAS::mapOtherVASIn(bool, VAS*)>
c00186f7:	83 c4 0c             	add    esp,0xc
c00186fa:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018702:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001870a:	0f 8f d8 00 00 00    	jg     c00187e8 <VAS::~VAS()+0x126>
c0018710:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018714:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018717:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001871b:	c1 e2 02             	shl    edx,0x2
c001871e:	01 d0                	add    eax,edx
c0018720:	8b 00                	mov    eax,DWORD PTR [eax]
c0018722:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001872a:	83 e0 01             	and    eax,0x1
c001872d:	0f 84 ab 00 00 00    	je     c00187de <VAS::~VAS()+0x11c>
c0018733:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001873b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0018743:	7f 74                	jg     c00187b9 <VAS::~VAS()+0xf7>
c0018745:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018749:	c1 e0 0a             	shl    eax,0xa
c001874c:	89 c2                	mov    edx,eax
c001874e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018752:	01 d0                	add    eax,edx
c0018754:	c1 e0 0c             	shl    eax,0xc
c0018757:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001875b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018760:	8b 00                	mov    eax,DWORD PTR [eax]
c0018762:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018765:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001876b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001876f:	6a 01                	push   0x1
c0018771:	50                   	push   eax
c0018772:	e8 77 fc ff ff       	call   c00183ee <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0018777:	83 c4 0c             	add    esp,0xc
c001877a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001877e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018782:	8b 00                	mov    eax,DWORD PTR [eax]
c0018784:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001878c:	25 01 04 00 00       	and    eax,0x401
c0018791:	3d 01 04 00 00       	cmp    eax,0x401
c0018796:	75 1a                	jne    c00187b2 <VAS::~VAS()+0xf0>
c0018798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001879c:	25 00 f0 ff ff       	and    eax,0xfffff000
c00187a1:	83 ec 0c             	sub    esp,0xc
c00187a4:	50                   	push   eax
c00187a5:	e8 bd e0 ff ff       	call   c0016867 <Phys::freePage(unsigned long)>
c00187aa:	83 c4 10             	add    esp,0x10
c00187ad:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00187b2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00187b7:	eb 82                	jmp    c001873b <VAS::~VAS()+0x79>
c00187b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187bd:	25 00 04 00 00       	and    eax,0x400
c00187c2:	74 1a                	je     c00187de <VAS::~VAS()+0x11c>
c00187c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187c8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00187cd:	83 ec 0c             	sub    esp,0xc
c00187d0:	50                   	push   eax
c00187d1:	e8 91 e0 ff ff       	call   c0016867 <Phys::freePage(unsigned long)>
c00187d6:	83 c4 10             	add    esp,0x10
c00187d9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00187de:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00187e3:	e9 1a ff ff ff       	jmp    c0018702 <VAS::~VAS()+0x40>
c00187e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00187ec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00187ef:	83 ec 0c             	sub    esp,0xc
c00187f2:	50                   	push   eax
c00187f3:	e8 43 fc ff ff       	call   c001843b <Virt::freeKernelVirtualPages(unsigned long)>
c00187f8:	83 c4 10             	add    esp,0x10
c00187fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00187ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018802:	83 ec 0c             	sub    esp,0xc
c0018805:	50                   	push   eax
c0018806:	e8 5c e0 ff ff       	call   c0016867 <Phys::freePage(unsigned long)>
c001880b:	83 c4 10             	add    esp,0x10
c001880e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018813:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0018818:	83 e8 01             	sub    eax,0x1
c001881b:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0018820:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0018825:	85 c0                	test   eax,eax
c0018827:	75 01                	jne    c001882a <VAS::~VAS()+0x168>
c0018829:	fb                   	sti    
c001882a:	90                   	nop
c001882b:	83 c4 2c             	add    esp,0x2c
c001882e:	c3                   	ret    
c001882f:	90                   	nop

c0018830 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0018830:	55                   	push   ebp
c0018831:	57                   	push   edi
c0018832:	56                   	push   esi
c0018833:	53                   	push   ebx
c0018834:	83 ec 1c             	sub    esp,0x1c
c0018837:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001883b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001883f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0018845:	77 08                	ja     c001884f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0018847:	0f 20 d8             	mov    eax,cr3
c001884a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c001884d:	75 49                	jne    c0018898 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c001884f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018853:	09 d8                	or     eax,ebx
c0018855:	a9 ff 0f 00 00       	test   eax,0xfff
c001885a:	75 59                	jne    c00188b5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c001885c:	89 de                	mov    esi,ebx
c001885e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018861:	c1 ee 16             	shr    esi,0x16
c0018864:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001886b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001886f:	74 56                	je     c00188c7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0018871:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018875:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018879:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001887f:	c1 eb 0a             	shr    ebx,0xa
c0018882:	c1 e6 0c             	shl    esi,0xc
c0018885:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001888b:	09 d0                	or     eax,edx
c001888d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0018890:	83 c4 1c             	add    esp,0x1c
c0018893:	5b                   	pop    ebx
c0018894:	5e                   	pop    esi
c0018895:	5f                   	pop    edi
c0018896:	5d                   	pop    ebp
c0018897:	c3                   	ret    
c0018898:	83 ec 0c             	sub    esp,0xc
c001889b:	68 14 1b 03 c0       	push   0xc0031b14
c00188a0:	e8 b0 0b 00 00       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c00188a5:	83 c4 10             	add    esp,0x10
c00188a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00188ac:	09 d8                	or     eax,ebx
c00188ae:	a9 ff 0f 00 00       	test   eax,0xfff
c00188b3:	74 a7                	je     c001885c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00188b5:	83 ec 0c             	sub    esp,0xc
c00188b8:	68 7c 1b 03 c0       	push   0xc0031b7c
c00188bd:	e8 cc 7e 00 00       	call   c002078e <KePanic(char const*)>
c00188c2:	83 c4 10             	add    esp,0x10
c00188c5:	eb 95                	jmp    c001885c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00188c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00188cb:	e8 00 e0 ff ff       	call   c00168d0 <Phys::allocatePage()>
c00188d0:	83 ec 0c             	sub    esp,0xc
c00188d3:	89 c5                	mov    ebp,eax
c00188d5:	8b 0d b0 ba 03 c0    	mov    ecx,DWORD PTR ds:0xc003bab0
c00188db:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00188df:	6a 01                	push   0x1
c00188e1:	e8 37 f8 ff ff       	call   c001811d <Virt::allocateKernelVirtualPages(int)>
c00188e6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00188ed:	6a 01                	push   0x1
c00188ef:	50                   	push   eax
c00188f0:	55                   	push   ebp
c00188f1:	81 cd 07 04 00 00    	or     ebp,0x407
c00188f7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00188fb:	51                   	push   ecx
c00188fc:	e8 29 01 00 00       	call   c0018a2a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018901:	83 c4 1c             	add    esp,0x1c
c0018904:	68 00 10 00 00       	push   0x1000
c0018909:	6a 00                	push   0x0
c001890b:	50                   	push   eax
c001890c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018910:	e8 db 7b fe ff       	call   c00004f0 <memset>
c0018915:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018919:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001891c:	e8 1a fb ff ff       	call   c001843b <Virt::freeKernelVirtualPages(unsigned long)>
c0018921:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018925:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018928:	83 c4 10             	add    esp,0x10
c001892b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001892e:	e9 3e ff ff ff       	jmp    c0018871 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0018933:	90                   	nop

c0018934 <VAS::allocatePages(int, int)>:
c0018934:	55                   	push   ebp
c0018935:	57                   	push   edi
c0018936:	56                   	push   esi
c0018937:	53                   	push   ebx
c0018938:	83 ec 1c             	sub    esp,0x1c
c001893b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001893f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018943:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0018947:	75 71                	jne    c00189ba <VAS::allocatePages(int, int)+0x86>
c0018949:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001894c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018950:	85 c0                	test   eax,eax
c0018952:	74 4d                	je     c00189a1 <VAS::allocatePages(int, int)+0x6d>
c0018954:	89 dd                	mov    ebp,ebx
c0018956:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001895a:	c1 e5 0c             	shl    ebp,0xc
c001895d:	01 c5                	add    ebp,eax
c001895f:	85 db                	test   ebx,ebx
c0018961:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0018964:	7e 29                	jle    c001898f <VAS::allocatePages(int, int)+0x5b>
c0018966:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001896a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001896e:	81 cf 00 04 00 00    	or     edi,0x400
c0018974:	e8 57 df ff ff       	call   c00168d0 <Phys::allocatePage()>
c0018979:	57                   	push   edi
c001897a:	53                   	push   ebx
c001897b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018981:	50                   	push   eax
c0018982:	56                   	push   esi
c0018983:	e8 a8 fe ff ff       	call   c0018830 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018988:	83 c4 10             	add    esp,0x10
c001898b:	39 dd                	cmp    ebp,ebx
c001898d:	75 e5                	jne    c0018974 <VAS::allocatePages(int, int)+0x40>
c001898f:	0f 20 d8             	mov    eax,cr3
c0018992:	0f 22 d8             	mov    cr3,eax
c0018995:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018999:	83 c4 1c             	add    esp,0x1c
c001899c:	5b                   	pop    ebx
c001899d:	5e                   	pop    esi
c001899e:	5f                   	pop    edi
c001899f:	5d                   	pop    ebp
c00189a0:	c3                   	ret    
c00189a1:	83 ec 0c             	sub    esp,0xc
c00189a4:	68 a0 1b 03 c0       	push   0xc0031ba0
c00189a9:	e8 e0 7d 00 00       	call   c002078e <KePanic(char const*)>
c00189ae:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00189b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00189b5:	83 c4 10             	add    esp,0x10
c00189b8:	eb 9a                	jmp    c0018954 <VAS::allocatePages(int, int)+0x20>
c00189ba:	83 ec 0c             	sub    esp,0xc
c00189bd:	53                   	push   ebx
c00189be:	e8 5a f7 ff ff       	call   c001811d <Virt::allocateKernelVirtualPages(int)>
c00189c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00189c7:	83 c4 10             	add    esp,0x10
c00189ca:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00189cf:	77 37                	ja     c0018a08 <VAS::allocatePages(int, int)+0xd4>
c00189d1:	85 db                	test   ebx,ebx
c00189d3:	7e ba                	jle    c001898f <VAS::allocatePages(int, int)+0x5b>
c00189d5:	c1 e3 0c             	shl    ebx,0xc
c00189d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00189dc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00189e0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c00189e3:	81 cf 00 04 00 00    	or     edi,0x400
c00189e9:	89 c3                	mov    ebx,eax
c00189eb:	e8 e0 de ff ff       	call   c00168d0 <Phys::allocatePage()>
c00189f0:	57                   	push   edi
c00189f1:	53                   	push   ebx
c00189f2:	81 c3 00 10 00 00    	add    ebx,0x1000
c00189f8:	50                   	push   eax
c00189f9:	56                   	push   esi
c00189fa:	e8 31 fe ff ff       	call   c0018830 <VAS::mapPage(unsigned long, unsigned long, int)>
c00189ff:	83 c4 10             	add    esp,0x10
c0018a02:	39 dd                	cmp    ebp,ebx
c0018a04:	75 e5                	jne    c00189eb <VAS::allocatePages(int, int)+0xb7>
c0018a06:	eb 87                	jmp    c001898f <VAS::allocatePages(int, int)+0x5b>
c0018a08:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0018a0d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018a13:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0018a1a:	74 b5                	je     c00189d1 <VAS::allocatePages(int, int)+0x9d>
c0018a1c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018a20:	80 ce 01             	or     dh,0x1
c0018a23:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0018a27:	eb a8                	jmp    c00189d1 <VAS::allocatePages(int, int)+0x9d>
c0018a29:	90                   	nop

c0018a2a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0018a2a:	55                   	push   ebp
c0018a2b:	57                   	push   edi
c0018a2c:	56                   	push   esi
c0018a2d:	53                   	push   ebx
c0018a2e:	83 ec 0c             	sub    esp,0xc
c0018a31:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018a35:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018a39:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0018a3d:	85 db                	test   ebx,ebx
c0018a3f:	7e 2f                	jle    c0018a70 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0018a41:	c1 e3 0c             	shl    ebx,0xc
c0018a44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018a48:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0018a4c:	01 d3                	add    ebx,edx
c0018a4e:	55                   	push   ebp
c0018a4f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018a53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a57:	29 c2                	sub    edx,eax
c0018a59:	01 f2                	add    edx,esi
c0018a5b:	52                   	push   edx
c0018a5c:	56                   	push   esi
c0018a5d:	81 c6 00 10 00 00    	add    esi,0x1000
c0018a63:	57                   	push   edi
c0018a64:	e8 c7 fd ff ff       	call   c0018830 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018a69:	83 c4 10             	add    esp,0x10
c0018a6c:	39 de                	cmp    esi,ebx
c0018a6e:	75 de                	jne    c0018a4e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0018a70:	0f 20 d8             	mov    eax,cr3
c0018a73:	0f 22 d8             	mov    cr3,eax
c0018a76:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a7a:	83 c4 0c             	add    esp,0xc
c0018a7d:	5b                   	pop    ebx
c0018a7e:	5e                   	pop    esi
c0018a7f:	5f                   	pop    edi
c0018a80:	5d                   	pop    ebp
c0018a81:	c3                   	ret    

c0018a82 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0018a82:	55                   	push   ebp
c0018a83:	57                   	push   edi
c0018a84:	56                   	push   esi
c0018a85:	53                   	push   ebx
c0018a86:	83 ec 1c             	sub    esp,0x1c
c0018a89:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018a8d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0018a91:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018a95:	09 f8                	or     eax,edi
c0018a97:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0018a9b:	a9 ff 0f 00 00       	test   eax,0xfff
c0018aa0:	75 4f                	jne    c0018af1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0018aa2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0018aa6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0018aa9:	c1 eb 16             	shr    ebx,0x16
c0018aac:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0018ab3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0018ab7:	74 52                	je     c0018b0b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0018ab9:	0f b6 f2             	movzx  esi,dl
c0018abc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018ac0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0018ac4:	c1 e8 0a             	shr    eax,0xa
c0018ac7:	83 fe 01             	cmp    esi,0x1
c0018aca:	19 d2                	sbb    edx,edx
c0018acc:	c1 e3 0c             	shl    ebx,0xc
c0018acf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0018ad5:	25 fc 0f 00 00       	and    eax,0xffc
c0018ada:	01 d8                	add    eax,ebx
c0018adc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0018ae0:	09 d9                	or     ecx,ebx
c0018ae2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0018ae9:	83 c4 1c             	add    esp,0x1c
c0018aec:	5b                   	pop    ebx
c0018aed:	5e                   	pop    esi
c0018aee:	5f                   	pop    edi
c0018aef:	5d                   	pop    ebp
c0018af0:	c3                   	ret    
c0018af1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018af5:	83 ec 0c             	sub    esp,0xc
c0018af8:	68 cc 1b 03 c0       	push   0xc0031bcc
c0018afd:	e8 8c 7c 00 00       	call   c002078e <KePanic(char const*)>
c0018b02:	83 c4 10             	add    esp,0x10
c0018b05:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b09:	eb 97                	jmp    c0018aa2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0018b0b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018b0f:	e8 bc dd ff ff       	call   c00168d0 <Phys::allocatePage()>
c0018b14:	83 ec 0c             	sub    esp,0xc
c0018b17:	89 c5                	mov    ebp,eax
c0018b19:	8b 0d b0 ba 03 c0    	mov    ecx,DWORD PTR ds:0xc003bab0
c0018b1f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0018b23:	6a 01                	push   0x1
c0018b25:	e8 f3 f5 ff ff       	call   c001811d <Virt::allocateKernelVirtualPages(int)>
c0018b2a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018b31:	6a 01                	push   0x1
c0018b33:	50                   	push   eax
c0018b34:	55                   	push   ebp
c0018b35:	81 cd 07 04 00 00    	or     ebp,0x407
c0018b3b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0018b3f:	51                   	push   ecx
c0018b40:	e8 e5 fe ff ff       	call   c0018a2a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018b45:	83 c4 1c             	add    esp,0x1c
c0018b48:	68 00 10 00 00       	push   0x1000
c0018b4d:	6a 00                	push   0x0
c0018b4f:	50                   	push   eax
c0018b50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018b54:	e8 97 79 fe ff       	call   c00004f0 <memset>
c0018b59:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018b5d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018b60:	e8 d6 f8 ff ff       	call   c001843b <Virt::freeKernelVirtualPages(unsigned long)>
c0018b65:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0018b68:	83 c4 10             	add    esp,0x10
c0018b6b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0018b6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018b72:	e9 42 ff ff ff       	jmp    c0018ab9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0018b77:	90                   	nop

c0018b78 <VAS::VAS(bool)>:
c0018b78:	53                   	push   ebx
c0018b79:	83 ec 28             	sub    esp,0x28
c0018b7c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018b80:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b88:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018b8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b93:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018b9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b9e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018ba2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0018ba5:	e8 26 dd ff ff       	call   c00168d0 <Phys::allocatePage()>
c0018baa:	89 c2                	mov    edx,eax
c0018bac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bb0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018bb3:	8b 1d b0 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003bab0
c0018bb9:	83 ec 0c             	sub    esp,0xc
c0018bbc:	6a 01                	push   0x1
c0018bbe:	e8 5a f5 ff ff       	call   c001811d <Virt::allocateKernelVirtualPages(int)>
c0018bc3:	83 c4 10             	add    esp,0x10
c0018bc6:	89 c2                	mov    edx,eax
c0018bc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018bcf:	83 ec 0c             	sub    esp,0xc
c0018bd2:	6a 03                	push   0x3
c0018bd4:	6a 01                	push   0x1
c0018bd6:	52                   	push   edx
c0018bd7:	50                   	push   eax
c0018bd8:	53                   	push   ebx
c0018bd9:	e8 4c fe ff ff       	call   c0018a2a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018bde:	83 c4 20             	add    esp,0x20
c0018be1:	89 c2                	mov    edx,eax
c0018be3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018be7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018bea:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018bf2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0018bfa:	7f 1d                	jg     c0018c19 <VAS::VAS(bool)+0xa1>
c0018bfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c00:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018c03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018c07:	c1 e2 02             	shl    edx,0x2
c0018c0a:	01 d0                	add    eax,edx
c0018c0c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018c12:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018c17:	eb d9                	jmp    c0018bf2 <VAS::VAS(bool)+0x7a>
c0018c19:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0018c21:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0018c29:	7f 7e                	jg     c0018ca9 <VAS::VAS(bool)+0x131>
c0018c2b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c2f:	2d 00 02 00 00       	sub    eax,0x200
c0018c34:	c1 e0 0c             	shl    eax,0xc
c0018c37:	83 c8 05             	or     eax,0x5
c0018c3a:	89 c2                	mov    edx,eax
c0018c3c:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0018c41:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018c47:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018c4d:	83 e0 10             	and    eax,0x10
c0018c50:	0f b6 c0             	movzx  eax,al
c0018c53:	85 c0                	test   eax,eax
c0018c55:	74 07                	je     c0018c5e <VAS::VAS(bool)+0xe6>
c0018c57:	b8 00 01 00 00       	mov    eax,0x100
c0018c5c:	eb 05                	jmp    c0018c63 <VAS::VAS(bool)+0xeb>
c0018c5e:	b8 00 00 00 00       	mov    eax,0x0
c0018c63:	09 d0                	or     eax,edx
c0018c65:	89 c1                	mov    ecx,eax
c0018c67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c6b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018c6e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018c72:	c1 e2 02             	shl    edx,0x2
c0018c75:	01 d0                	add    eax,edx
c0018c77:	89 ca                	mov    edx,ecx
c0018c79:	89 10                	mov    DWORD PTR [eax],edx
c0018c7b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c7f:	2d 40 03 00 00       	sub    eax,0x340
c0018c84:	83 f8 7f             	cmp    eax,0x7f
c0018c87:	77 16                	ja     c0018c9f <VAS::VAS(bool)+0x127>
c0018c89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c8d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018c90:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018c94:	c1 e2 02             	shl    edx,0x2
c0018c97:	01 d0                	add    eax,edx
c0018c99:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018c9f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0018ca4:	e9 78 ff ff ff       	jmp    c0018c21 <VAS::VAS(bool)+0xa9>
c0018ca9:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0018cae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018cb4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018cba:	83 e0 10             	and    eax,0x10
c0018cbd:	0f b6 c0             	movzx  eax,al
c0018cc0:	85 c0                	test   eax,eax
c0018cc2:	74 07                	je     c0018ccb <VAS::VAS(bool)+0x153>
c0018cc4:	b8 03 41 00 00       	mov    eax,0x4103
c0018cc9:	eb 05                	jmp    c0018cd0 <VAS::VAS(bool)+0x158>
c0018ccb:	b8 03 40 00 00       	mov    eax,0x4003
c0018cd0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018cd4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0018cd7:	81 c2 20 0c 00 00    	add    edx,0xc20
c0018cdd:	89 02                	mov    DWORD PTR [edx],eax
c0018cdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ce3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018ce6:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0018ceb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018cf1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018cf7:	83 e0 10             	and    eax,0x10
c0018cfa:	0f b6 c0             	movzx  eax,al
c0018cfd:	85 c0                	test   eax,eax
c0018cff:	74 07                	je     c0018d08 <VAS::VAS(bool)+0x190>
c0018d01:	b8 00 01 00 00       	mov    eax,0x100
c0018d06:	eb 05                	jmp    c0018d0d <VAS::VAS(bool)+0x195>
c0018d08:	b8 00 00 00 00       	mov    eax,0x0
c0018d0d:	09 c2                	or     edx,eax
c0018d0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018d13:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018d16:	05 fc 0f 00 00       	add    eax,0xffc
c0018d1b:	83 ca 03             	or     edx,0x3
c0018d1e:	89 10                	mov    DWORD PTR [eax],edx
c0018d20:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0018d25:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018d2b:	83 ec 0c             	sub    esp,0xc
c0018d2e:	50                   	push   eax
c0018d2f:	e8 3c 2b 00 00       	call   c001b870 <Device::getName()>
c0018d34:	83 c4 10             	add    esp,0x10
c0018d37:	83 ec 08             	sub    esp,0x8
c0018d3a:	68 9c 1d 03 c0       	push   0xc0031d9c
c0018d3f:	50                   	push   eax
c0018d40:	e8 0b 7a fe ff       	call   c0000750 <strcmp>
c0018d45:	83 c4 10             	add    esp,0x10
c0018d48:	85 c0                	test   eax,eax
c0018d4a:	0f 94 c0             	sete   al
c0018d4d:	0f b6 c0             	movzx  eax,al
c0018d50:	85 c0                	test   eax,eax
c0018d52:	74 68                	je     c0018dbc <VAS::VAS(bool)+0x244>
c0018d54:	fa                   	cli    
c0018d55:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0018d5a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018d60:	05 7c 09 00 00       	add    eax,0x97c
c0018d65:	83 ec 0c             	sub    esp,0xc
c0018d68:	50                   	push   eax
c0018d69:	e8 d4 d2 ff ff       	call   c0016042 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018d6e:	83 c4 10             	add    esp,0x10
c0018d71:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018d76:	89 c3                	mov    ebx,eax
c0018d78:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0018d7d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018d83:	05 7c 09 00 00       	add    eax,0x97c
c0018d88:	83 ec 0c             	sub    esp,0xc
c0018d8b:	50                   	push   eax
c0018d8c:	e8 b1 d2 ff ff       	call   c0016042 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018d91:	83 c4 10             	add    esp,0x10
c0018d94:	83 ec 08             	sub    esp,0x8
c0018d97:	50                   	push   eax
c0018d98:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018d9c:	e8 7b f6 ff ff       	call   c001841c <VAS::getPageTableEntry(unsigned long)>
c0018da1:	83 c4 10             	add    esp,0x10
c0018da4:	8b 00                	mov    eax,DWORD PTR [eax]
c0018da6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018dab:	6a 11                	push   0x11
c0018dad:	53                   	push   ebx
c0018dae:	50                   	push   eax
c0018daf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018db3:	e8 78 fa ff ff       	call   c0018830 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018db8:	83 c4 10             	add    esp,0x10
c0018dbb:	fb                   	sti    
c0018dbc:	90                   	nop
c0018dbd:	83 c4 28             	add    esp,0x28
c0018dc0:	5b                   	pop    ebx
c0018dc1:	c3                   	ret    

c0018dc2 <VAS::evict(unsigned long)>:
c0018dc2:	55                   	push   ebp
c0018dc3:	57                   	push   edi
c0018dc4:	56                   	push   esi
c0018dc5:	53                   	push   ebx
c0018dc6:	83 ec 1c             	sub    esp,0x1c
c0018dc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018dcd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018dd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018dd5:	e8 a1 f4 ff ff       	call   c001827b <Virt::allocateSwapfilePage()>
c0018dda:	89 c7                	mov    edi,eax
c0018ddc:	a1 6c 44 03 c0       	mov    eax,ds:0xc003446c
c0018de1:	85 c0                	test   eax,eax
c0018de3:	7e 40                	jle    c0018e25 <VAS::evict(unsigned long)+0x63>
c0018de5:	89 ee                	mov    esi,ebp
c0018de7:	31 db                	xor    ebx,ebx
c0018de9:	83 ec 0c             	sub    esp,0xc
c0018dec:	57                   	push   edi
c0018ded:	e8 73 f4 ff ff       	call   c0018265 <Virt::swapIDToSector(unsigned long)>
c0018df2:	89 34 24             	mov    DWORD PTR [esp],esi
c0018df5:	01 d8                	add    eax,ebx
c0018df7:	6a 01                	push   0x1
c0018df9:	31 d2                	xor    edx,edx
c0018dfb:	83 c3 01             	add    ebx,0x1
c0018dfe:	52                   	push   edx
c0018dff:	81 c6 00 02 00 00    	add    esi,0x200
c0018e05:	50                   	push   eax
c0018e06:	0f be 05 78 44 03 c0 	movsx  eax,BYTE PTR ds:0xc0034478
c0018e0d:	8b 04 85 7c 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd84]
c0018e14:	50                   	push   eax
c0018e15:	e8 56 3c 00 00       	call   c001ca70 <LogicalDisk::write(unsigned long long, int, void*)>
c0018e1a:	83 c4 20             	add    esp,0x20
c0018e1d:	39 1d 6c 44 03 c0    	cmp    DWORD PTR ds:0xc003446c,ebx
c0018e23:	7f c4                	jg     c0018de9 <VAS::evict(unsigned long)+0x27>
c0018e25:	83 ec 08             	sub    esp,0x8
c0018e28:	c1 e7 0c             	shl    edi,0xc
c0018e2b:	55                   	push   ebp
c0018e2c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e30:	50                   	push   eax
c0018e31:	e8 e6 f5 ff ff       	call   c001841c <VAS::getPageTableEntry(unsigned long)>
c0018e36:	8b 10                	mov    edx,DWORD PTR [eax]
c0018e38:	89 d3                	mov    ebx,edx
c0018e3a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0018e40:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018e46:	09 d7                	or     edi,edx
c0018e48:	89 38                	mov    DWORD PTR [eax],edi
c0018e4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018e4d:	8b 15 a8 ba 03 c0    	mov    edx,DWORD PTR ds:0xc003baa8
c0018e53:	83 c2 01             	add    edx,0x1
c0018e56:	89 15 a8 ba 03 c0    	mov    DWORD PTR ds:0xc003baa8,edx
c0018e5c:	e8 06 da ff ff       	call   c0016867 <Phys::freePage(unsigned long)>
c0018e61:	0f 20 d8             	mov    eax,cr3
c0018e64:	0f 22 d8             	mov    cr3,eax
c0018e67:	8b 0d a8 ba 03 c0    	mov    ecx,DWORD PTR ds:0xc003baa8
c0018e6d:	51                   	push   ecx
c0018e6e:	55                   	push   ebp
c0018e6f:	53                   	push   ebx
c0018e70:	68 f0 1b 03 c0       	push   0xc0031bf0
c0018e75:	e8 db 05 00 00       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0018e7a:	a1 a4 ba 03 c0       	mov    eax,ds:0xc003baa4
c0018e7f:	c7 44 24 50 aa 1d 03 c0 	mov    DWORD PTR [esp+0x50],0xc0031daa
c0018e87:	8d 50 01             	lea    edx,[eax+0x1]
c0018e8a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0018e8e:	89 15 a4 ba 03 c0    	mov    DWORD PTR ds:0xc003baa4,edx
c0018e94:	83 c4 3c             	add    esp,0x3c
c0018e97:	5b                   	pop    ebx
c0018e98:	5e                   	pop    esi
c0018e99:	5f                   	pop    edi
c0018e9a:	5d                   	pop    ebp
c0018e9b:	e9 b5 05 00 00       	jmp    c0019455 <Dbg::kprintf(char const*, ...)>

c0018ea0 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0018ea0:	55                   	push   ebp
c0018ea1:	57                   	push   edi
c0018ea2:	56                   	push   esi
c0018ea3:	53                   	push   ebx
c0018ea4:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0018eaa:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c0018eb1:	89 f3                	mov    ebx,esi
c0018eb3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018eb9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0018ebf:	77 22                	ja     c0018ee3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c0018ec1:	83 ec 08             	sub    esp,0x8
c0018ec4:	56                   	push   esi
c0018ec5:	68 cd 1d 03 c0       	push   0xc0031dcd
c0018eca:	e8 86 05 00 00       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0018ecf:	83 c4 10             	add    esp,0x10
c0018ed2:	85 db                	test   ebx,ebx
c0018ed4:	75 2a                	jne    c0018f00 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c0018ed6:	31 c0                	xor    eax,eax
c0018ed8:	81 c4 1c 10 00 00    	add    esp,0x101c
c0018ede:	5b                   	pop    ebx
c0018edf:	5e                   	pop    esi
c0018ee0:	5f                   	pop    edi
c0018ee1:	5d                   	pop    ebp
c0018ee2:	c3                   	ret    
c0018ee3:	83 ec 0c             	sub    esp,0xc
c0018ee6:	68 bb 1d 03 c0       	push   0xc0031dbb
c0018eeb:	e8 9e 78 00 00       	call   c002078e <KePanic(char const*)>
c0018ef0:	5f                   	pop    edi
c0018ef1:	5d                   	pop    ebp
c0018ef2:	56                   	push   esi
c0018ef3:	68 cd 1d 03 c0       	push   0xc0031dcd
c0018ef8:	e8 58 05 00 00       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0018efd:	83 c4 10             	add    esp,0x10
c0018f00:	83 ec 08             	sub    esp,0x8
c0018f03:	53                   	push   ebx
c0018f04:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c0018f0b:	51                   	push   ecx
c0018f0c:	e8 0b f5 ff ff       	call   c001841c <VAS::getPageTableEntry(unsigned long)>
c0018f11:	83 c4 10             	add    esp,0x10
c0018f14:	89 c2                	mov    edx,eax
c0018f16:	85 c0                	test   eax,eax
c0018f18:	74 bc                	je     c0018ed6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0018f1a:	8b 28                	mov    ebp,DWORD PTR [eax]
c0018f1c:	f7 c5 00 02 00 00    	test   ebp,0x200
c0018f22:	0f 85 c0 00 00 00    	jne    c0018fe8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c0018f28:	89 e8                	mov    eax,ebp
c0018f2a:	25 01 04 00 00       	and    eax,0x401
c0018f2f:	3d 00 04 00 00       	cmp    eax,0x400
c0018f34:	75 a0                	jne    c0018ed6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0018f36:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018f3a:	c1 ed 0c             	shr    ebp,0xc
c0018f3d:	e8 8e d9 ff ff       	call   c00168d0 <Phys::allocatePage()>
c0018f42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018f46:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018f48:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0018f4e:	09 c1                	or     ecx,eax
c0018f50:	81 c9 01 08 00 00    	or     ecx,0x801
c0018f56:	89 0a                	mov    DWORD PTR [edx],ecx
c0018f58:	8b 15 6c 44 03 c0    	mov    edx,DWORD PTR ds:0xc003446c
c0018f5e:	85 d2                	test   edx,edx
c0018f60:	7e 40                	jle    c0018fa2 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0018f62:	89 df                	mov    edi,ebx
c0018f64:	31 f6                	xor    esi,esi
c0018f66:	83 ec 0c             	sub    esp,0xc
c0018f69:	55                   	push   ebp
c0018f6a:	e8 f6 f2 ff ff       	call   c0018265 <Virt::swapIDToSector(unsigned long)>
c0018f6f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018f72:	01 f0                	add    eax,esi
c0018f74:	6a 01                	push   0x1
c0018f76:	31 d2                	xor    edx,edx
c0018f78:	83 c6 01             	add    esi,0x1
c0018f7b:	52                   	push   edx
c0018f7c:	81 c7 00 02 00 00    	add    edi,0x200
c0018f82:	50                   	push   eax
c0018f83:	0f be 05 78 44 03 c0 	movsx  eax,BYTE PTR ds:0xc0034478
c0018f8a:	8b 04 85 7c 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd84]
c0018f91:	50                   	push   eax
c0018f92:	e8 6d 3a 00 00       	call   c001ca04 <LogicalDisk::read(unsigned long long, int, void*)>
c0018f97:	83 c4 20             	add    esp,0x20
c0018f9a:	39 35 6c 44 03 c0    	cmp    DWORD PTR ds:0xc003446c,esi
c0018fa0:	7f c4                	jg     c0018f66 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c0018fa2:	83 ec 04             	sub    esp,0x4
c0018fa5:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c0018faa:	83 e8 01             	sub    eax,0x1
c0018fad:	50                   	push   eax
c0018fae:	a3 a8 ba 03 c0       	mov    ds:0xc003baa8,eax
c0018fb3:	53                   	push   ebx
c0018fb4:	68 e0 1d 03 c0       	push   0xc0031de0
c0018fb9:	e8 97 04 00 00       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0018fbe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018fc1:	e8 7c f2 ff ff       	call   c0018242 <Virt::freeSwapfilePage(unsigned long)>
c0018fc6:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0018fcb:	83 c4 10             	add    esp,0x10
c0018fce:	83 e8 01             	sub    eax,0x1
c0018fd1:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0018fd6:	85 c0                	test   eax,eax
c0018fd8:	75 01                	jne    c0018fdb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c0018fda:	fb                   	sti    
c0018fdb:	0f 20 d8             	mov    eax,cr3
c0018fde:	0f 22 d8             	mov    cr3,eax
c0018fe1:	b0 01                	mov    al,0x1
c0018fe3:	e9 f0 fe ff ff       	jmp    c0018ed8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c0018fe8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018fec:	bd 00 10 00 00       	mov    ebp,0x1000
c0018ff1:	83 ec 0c             	sub    esp,0xc
c0018ff4:	89 de                	mov    esi,ebx
c0018ff6:	68 20 1c 03 c0       	push   0xc0031c20
c0018ffb:	e8 55 04 00 00       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0019000:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0019004:	e8 c7 d8 ff ff       	call   c00168d0 <Phys::allocatePage()>
c0019009:	89 e9                	mov    ecx,ebp
c001900b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001900d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019011:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019013:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0019019:	09 c8                	or     eax,ecx
c001901b:	83 c8 02             	or     eax,0x2
c001901e:	89 02                	mov    DWORD PTR [edx],eax
c0019020:	0f 20 d8             	mov    eax,cr3
c0019023:	0f 22 d8             	mov    cr3,eax
c0019026:	8d 74 24 20          	lea    esi,[esp+0x20]
c001902a:	89 df                	mov    edi,ebx
c001902c:	89 e9                	mov    ecx,ebp
c001902e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019030:	b0 01                	mov    al,0x1
c0019032:	83 c4 10             	add    esp,0x10
c0019035:	e9 9e fe ff ff       	jmp    c0018ed8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c001903a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c001903a:	55                   	push   ebp
c001903b:	57                   	push   edi
c001903c:	56                   	push   esi
c001903d:	53                   	push   ebx
c001903e:	83 ec 28             	sub    esp,0x28
c0019041:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0019045:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019049:	50                   	push   eax
c001904a:	e8 ce f0 ff ff       	call   c001811d <Virt::allocateKernelVirtualPages(int)>
c001904f:	83 c4 0c             	add    esp,0xc
c0019052:	89 c5                	mov    ebp,eax
c0019054:	6a 07                	push   0x7
c0019056:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001905a:	52                   	push   edx
c001905b:	56                   	push   esi
c001905c:	e8 d3 f8 ff ff       	call   c0018934 <VAS::allocatePages(int, int)>
c0019061:	83 c4 10             	add    esp,0x10
c0019064:	89 c7                	mov    edi,eax
c0019066:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001906a:	85 c9                	test   ecx,ecx
c001906c:	74 2f                	je     c001909d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c001906e:	31 db                	xor    ebx,ebx
c0019070:	e8 5b d8 ff ff       	call   c00168d0 <Phys::allocatePage()>
c0019075:	83 c3 01             	add    ebx,0x1
c0019078:	6a 03                	push   0x3
c001907a:	55                   	push   ebp
c001907b:	50                   	push   eax
c001907c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019080:	56                   	push   esi
c0019081:	e8 aa f7 ff ff       	call   c0018830 <VAS::mapPage(unsigned long, unsigned long, int)>
c0019086:	6a 07                	push   0x7
c0019088:	57                   	push   edi
c0019089:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001908d:	50                   	push   eax
c001908e:	56                   	push   esi
c001908f:	e8 9c f7 ff ff       	call   c0018830 <VAS::mapPage(unsigned long, unsigned long, int)>
c0019094:	83 c4 20             	add    esp,0x20
c0019097:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c001909b:	75 d3                	jne    c0019070 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c001909d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00190a1:	89 28                	mov    DWORD PTR [eax],ebp
c00190a3:	83 c4 1c             	add    esp,0x1c
c00190a6:	89 f8                	mov    eax,edi
c00190a8:	5b                   	pop    ebx
c00190a9:	5e                   	pop    esi
c00190aa:	5f                   	pop    edi
c00190ab:	5d                   	pop    ebp
c00190ac:	c3                   	ret    
c00190ad:	90                   	nop

c00190ae <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c00190ae:	53                   	push   ebx
c00190af:	83 ec 14             	sub    esp,0x14
c00190b2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00190b6:	68 40 1c 03 c0       	push   0xc0031c40
c00190bb:	e8 95 03 00 00       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c00190c0:	c7 04 24 a0 1c 03 c0 	mov    DWORD PTR [esp],0xc0031ca0
c00190c7:	e8 89 03 00 00       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c00190cc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00190d0:	83 c4 18             	add    esp,0x18
c00190d3:	5b                   	pop    ebx
c00190d4:	e9 62 f3 ff ff       	jmp    c001843b <Virt::freeKernelVirtualPages(unsigned long)>
c00190d9:	90                   	nop

c00190da <VAS::scanForEviction()>:
c00190da:	57                   	push   edi
c00190db:	56                   	push   esi
c00190dc:	31 f6                	xor    esi,esi
c00190de:	53                   	push   ebx
c00190df:	83 ec 10             	sub    esp,0x10
c00190e2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00190e6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00190e9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00190ef:	75 0e                	jne    c00190ff <VAS::scanForEviction()+0x25>
c00190f1:	89 da                	mov    edx,ebx
c00190f3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00190f6:	c1 ea 16             	shr    edx,0x16
c00190f9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00190fd:	74 57                	je     c0019156 <VAS::scanForEviction()+0x7c>
c00190ff:	53                   	push   ebx
c0019100:	57                   	push   edi
c0019101:	e8 16 f3 ff ff       	call   c001841c <VAS::getPageTableEntry(unsigned long)>
c0019106:	5a                   	pop    edx
c0019107:	8b 10                	mov    edx,DWORD PTR [eax]
c0019109:	59                   	pop    ecx
c001910a:	89 d1                	mov    ecx,edx
c001910c:	c1 e9 0c             	shr    ecx,0xc
c001910f:	74 10                	je     c0019121 <VAS::scanForEviction()+0x47>
c0019111:	89 d1                	mov    ecx,edx
c0019113:	81 e1 01 08 00 00    	and    ecx,0x801
c0019119:	81 f9 01 08 00 00    	cmp    ecx,0x801
c001911f:	74 40                	je     c0019161 <VAS::scanForEviction()+0x87>
c0019121:	81 c3 00 10 00 00    	add    ebx,0x1000
c0019127:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c001912d:	76 2d                	jbe    c001915c <VAS::scanForEviction()+0x82>
c001912f:	83 c6 01             	add    esi,0x1
c0019132:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0019139:	83 fe 03             	cmp    esi,0x3
c001913c:	74 32                	je     c0019170 <VAS::scanForEviction()+0x96>
c001913e:	31 db                	xor    ebx,ebx
c0019140:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0019146:	75 b7                	jne    c00190ff <VAS::scanForEviction()+0x25>
c0019148:	89 da                	mov    edx,ebx
c001914a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001914d:	c1 ea 16             	shr    edx,0x16
c0019150:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0019154:	75 a9                	jne    c00190ff <VAS::scanForEviction()+0x25>
c0019156:	81 c3 00 00 40 00    	add    ebx,0x400000
c001915c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c001915f:	eb 88                	jmp    c00190e9 <VAS::scanForEviction()+0xf>
c0019161:	f6 c2 20             	test   dl,0x20
c0019164:	74 13                	je     c0019179 <VAS::scanForEviction()+0x9f>
c0019166:	83 e2 df             	and    edx,0xffffffdf
c0019169:	89 10                	mov    DWORD PTR [eax],edx
c001916b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001916e:	eb b1                	jmp    c0019121 <VAS::scanForEviction()+0x47>
c0019170:	83 c4 10             	add    esp,0x10
c0019173:	31 c0                	xor    eax,eax
c0019175:	5b                   	pop    ebx
c0019176:	5e                   	pop    esi
c0019177:	5f                   	pop    edi
c0019178:	c3                   	ret    
c0019179:	83 ec 08             	sub    esp,0x8
c001917c:	89 d0                	mov    eax,edx
c001917e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019183:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019187:	53                   	push   ebx
c0019188:	68 f5 1d 03 c0       	push   0xc0031df5
c001918d:	e8 c3 02 00 00       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0019192:	58                   	pop    eax
c0019193:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0019196:	5a                   	pop    edx
c0019197:	51                   	push   ecx
c0019198:	57                   	push   edi
c0019199:	e8 24 fc ff ff       	call   c0018dc2 <VAS::evict(unsigned long)>
c001919e:	5b                   	pop    ebx
c001919f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00191a2:	5e                   	pop    esi
c00191a3:	50                   	push   eax
c00191a4:	68 09 1e 03 c0       	push   0xc0031e09
c00191a9:	e8 a7 02 00 00       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c00191ae:	58                   	pop    eax
c00191af:	5a                   	pop    edx
c00191b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00191b4:	50                   	push   eax
c00191b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00191b9:	68 1c 1e 03 c0       	push   0xc0031e1c
c00191be:	e8 92 02 00 00       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c00191c3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00191c6:	83 c4 10             	add    esp,0x10
c00191c9:	81 c1 00 10 00 00    	add    ecx,0x1000
c00191cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00191d3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00191d6:	83 c4 10             	add    esp,0x10
c00191d9:	5b                   	pop    ebx
c00191da:	5e                   	pop    esi
c00191db:	5f                   	pop    edi
c00191dc:	c3                   	ret    

c00191dd <mapVASFirstTime>:
c00191dd:	55                   	push   ebp
c00191de:	57                   	push   edi
c00191df:	56                   	push   esi
c00191e0:	53                   	push   ebx
c00191e1:	83 ec 0c             	sub    esp,0xc
c00191e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191e9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00191ec:	83 fa 01             	cmp    edx,0x1
c00191ef:	0f 84 cb 00 00 00    	je     c00192c0 <mapVASFirstTime+0xe3>
c00191f5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00191f8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c00191fb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0019200:	c1 e5 15             	shl    ebp,0x15
c0019203:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0019208:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c001920e:	29 eb                	sub    ebx,ebp
c0019210:	29 ef                	sub    edi,ebp
c0019212:	e8 b9 d6 ff ff       	call   c00168d0 <Phys::allocatePage()>
c0019217:	83 ec 0c             	sub    esp,0xc
c001921a:	68 03 04 00 00       	push   0x403
c001921f:	6a 01                	push   0x1
c0019221:	53                   	push   ebx
c0019222:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0019228:	50                   	push   eax
c0019229:	56                   	push   esi
c001922a:	e8 fb f7 ff ff       	call   c0018a2a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001922f:	83 c4 20             	add    esp,0x20
c0019232:	39 fb                	cmp    ebx,edi
c0019234:	75 dc                	jne    c0019212 <mapVASFirstTime+0x35>
c0019236:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001923b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0019240:	29 eb                	sub    ebx,ebp
c0019242:	29 ef                	sub    edi,ebp
c0019244:	e8 87 d6 ff ff       	call   c00168d0 <Phys::allocatePage()>
c0019249:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c001924d:	83 fa 01             	cmp    edx,0x1
c0019250:	19 d2                	sbb    edx,edx
c0019252:	83 ec 0c             	sub    esp,0xc
c0019255:	83 e2 04             	and    edx,0x4
c0019258:	81 c2 03 04 00 00    	add    edx,0x403
c001925e:	52                   	push   edx
c001925f:	6a 01                	push   0x1
c0019261:	53                   	push   ebx
c0019262:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0019268:	50                   	push   eax
c0019269:	56                   	push   esi
c001926a:	e8 bb f7 ff ff       	call   c0018a2a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001926f:	83 c4 20             	add    esp,0x20
c0019272:	39 df                	cmp    edi,ebx
c0019274:	75 ce                	jne    c0019244 <mapVASFirstTime+0x67>
c0019276:	83 ec 0c             	sub    esp,0xc
c0019279:	bb 7c 70 03 c0       	mov    ebx,0xc003707c
c001927e:	6a 04                	push   0x4
c0019280:	81 eb 00 60 03 c0    	sub    ebx,0xc0036000
c0019286:	6a ff                	push   0xffffffff
c0019288:	c1 eb 0c             	shr    ebx,0xc
c001928b:	53                   	push   ebx
c001928c:	68 00 60 03 c0       	push   0xc0036000
c0019291:	56                   	push   esi
c0019292:	e8 1f f3 ff ff       	call   c00185b6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0019297:	83 c4 14             	add    esp,0x14
c001929a:	a1 b0 ba 03 c0       	mov    eax,ds:0xc003bab0
c001929f:	6a 04                	push   0x4
c00192a1:	6a ff                	push   0xffffffff
c00192a3:	53                   	push   ebx
c00192a4:	68 00 60 03 c0       	push   0xc0036000
c00192a9:	50                   	push   eax
c00192aa:	e8 07 f3 ff ff       	call   c00185b6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00192af:	0f 20 d8             	mov    eax,cr3
c00192b2:	0f 22 d8             	mov    cr3,eax
c00192b5:	83 c4 20             	add    esp,0x20
c00192b8:	83 c4 0c             	add    esp,0xc
c00192bb:	5b                   	pop    ebx
c00192bc:	5e                   	pop    esi
c00192bd:	5f                   	pop    edi
c00192be:	5d                   	pop    ebp
c00192bf:	c3                   	ret    
c00192c0:	83 ec 0c             	sub    esp,0xc
c00192c3:	68 29 1e 03 c0       	push   0xc0031e29
c00192c8:	e8 88 01 00 00       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c00192cd:	83 c4 10             	add    esp,0x10
c00192d0:	83 c4 0c             	add    esp,0xc
c00192d3:	5b                   	pop    ebx
c00192d4:	5e                   	pop    esi
c00192d5:	5f                   	pop    edi
c00192d6:	5d                   	pop    ebp
c00192d7:	c3                   	ret    

c00192d8 <__cxa_atexit>:
c00192d8:	31 c0                	xor    eax,eax
c00192da:	c3                   	ret    

c00192db <__cxa_finalize>:
c00192db:	c3                   	ret    

c00192dc <__stack_chk_fail>:
c00192dc:	55                   	push   ebp
c00192dd:	89 e5                	mov    ebp,esp
c00192df:	83 ec 10             	sub    esp,0x10
c00192e2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00192e5:	68 42 1e 03 c0       	push   0xc0031e42
c00192ea:	e8 66 01 00 00       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c00192ef:	58                   	pop    eax
c00192f0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00192f3:	5a                   	pop    edx
c00192f4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00192f7:	68 42 1e 03 c0       	push   0xc0031e42
c00192fc:	e8 54 01 00 00       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0019301:	c7 04 24 4a 1e 03 c0 	mov    DWORD PTR [esp],0xc0031e4a
c0019308:	e8 81 74 00 00       	call   c002078e <KePanic(char const*)>
c001930d:	83 c4 10             	add    esp,0x10
c0019310:	c9                   	leave  
c0019311:	c3                   	ret    

c0019312 <__cxa_pure_virtual>:
c0019312:	83 ec 18             	sub    esp,0x18
c0019315:	68 62 1e 03 c0       	push   0xc0031e62
c001931a:	e8 6f 74 00 00       	call   c002078e <KePanic(char const*)>
c001931f:	83 c4 1c             	add    esp,0x1c
c0019322:	c3                   	ret    

c0019323 <operator new[](unsigned long)>:
c0019323:	e9 9f d2 ff ff       	jmp    c00165c7 <malloc>

c0019328 <operator delete(void*, unsigned long)>:
c0019328:	e9 ba d2 ff ff       	jmp    c00165e7 <rfree>

c001932d <operator delete[](void*)>:
c001932d:	e9 b5 d2 ff ff       	jmp    c00165e7 <rfree>

c0019332 <operator delete[](void*, unsigned long)>:
c0019332:	e9 b0 d2 ff ff       	jmp    c00165e7 <rfree>

c0019337 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0019337:	55                   	push   ebp
c0019338:	57                   	push   edi
c0019339:	56                   	push   esi
c001933a:	be 6b 19 03 c0       	mov    esi,0xc003196b
c001933f:	53                   	push   ebx
c0019340:	83 ec 20             	sub    esp,0x20
c0019343:	a0 6a 19 03 c0       	mov    al,ds:0xc003196a
c0019348:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001934c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019350:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0019354:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0019358:	b8 10 00 00 00       	mov    eax,0x10
c001935d:	f7 c7 02 00 00 00    	test   edi,0x2
c0019363:	75 60                	jne    c00193c5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0019365:	89 c1                	mov    ecx,eax
c0019367:	c1 e9 02             	shr    ecx,0x2
c001936a:	fc                   	cld    
c001936b:	31 d2                	xor    edx,edx
c001936d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001936f:	a8 02                	test   al,0x2
c0019371:	74 0b                	je     c001937e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0019373:	66 8b 16             	mov    dx,WORD PTR [esi]
c0019376:	66 89 17             	mov    WORD PTR [edi],dx
c0019379:	ba 02 00 00 00       	mov    edx,0x2
c001937e:	a8 01                	test   al,0x1
c0019380:	74 06                	je     c0019388 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0019382:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0019385:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0019388:	89 ee                	mov    esi,ebp
c001938a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001938e:	eb 02                	jmp    c0019392 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0019390:	89 c6                	mov    esi,eax
c0019392:	31 d2                	xor    edx,edx
c0019394:	83 c1 01             	add    ecx,0x1
c0019397:	89 f0                	mov    eax,esi
c0019399:	f7 f3                	div    ebx
c001939b:	39 de                	cmp    esi,ebx
c001939d:	73 f1                	jae    c0019390 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c001939f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00193a2:	eb 02                	jmp    c00193a6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c00193a4:	89 c5                	mov    ebp,eax
c00193a6:	31 d2                	xor    edx,edx
c00193a8:	83 e9 01             	sub    ecx,0x1
c00193ab:	89 e8                	mov    eax,ebp
c00193ad:	f7 f3                	div    ebx
c00193af:	39 dd                	cmp    ebp,ebx
c00193b1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c00193b5:	88 11                	mov    BYTE PTR [ecx],dl
c00193b7:	73 eb                	jae    c00193a4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c00193b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00193bd:	83 c4 20             	add    esp,0x20
c00193c0:	5b                   	pop    ebx
c00193c1:	5e                   	pop    esi
c00193c2:	5f                   	pop    edi
c00193c3:	5d                   	pop    ebp
c00193c4:	c3                   	ret    
c00193c5:	66 8b 16             	mov    dx,WORD PTR [esi]
c00193c8:	83 c7 02             	add    edi,0x2
c00193cb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c00193cf:	83 c6 02             	add    esi,0x2
c00193d2:	83 e8 02             	sub    eax,0x2
c00193d5:	eb 8e                	jmp    c0019365 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c00193d7 <Dbg::logc(char)>:
c00193d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00193db:	f6 05 d4 b9 03 c0 10 	test   BYTE PTR ds:0xc003b9d4,0x10
c00193e2:	75 12                	jne    c00193f6 <Dbg::logc(char)+0x1f>
c00193e4:	ba fd 03 00 00       	mov    edx,0x3fd
c00193e9:	ec                   	in     al,dx
c00193ea:	a8 20                	test   al,0x20
c00193ec:	74 fb                	je     c00193e9 <Dbg::logc(char)+0x12>
c00193ee:	ba f8 03 00 00       	mov    edx,0x3f8
c00193f3:	88 c8                	mov    al,cl
c00193f5:	ee                   	out    dx,al
c00193f6:	c3                   	ret    

c00193f7 <Dbg::logs(char*)>:
c00193f7:	53                   	push   ebx
c00193f8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00193fc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00193ff:	85 c0                	test   eax,eax
c0019401:	74 11                	je     c0019414 <Dbg::logs(char*)+0x1d>
c0019403:	83 c3 01             	add    ebx,0x1
c0019406:	50                   	push   eax
c0019407:	e8 cb ff ff ff       	call   c00193d7 <Dbg::logc(char)>
c001940c:	58                   	pop    eax
c001940d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019410:	85 c0                	test   eax,eax
c0019412:	75 ef                	jne    c0019403 <Dbg::logs(char*)+0xc>
c0019414:	5b                   	pop    ebx
c0019415:	c3                   	ret    

c0019416 <Dbg::logWriteInt(unsigned int)>:
c0019416:	83 ec 10             	sub    esp,0x10
c0019419:	6a 0a                	push   0xa
c001941b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001941f:	50                   	push   eax
c0019420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019424:	50                   	push   eax
c0019425:	e8 0d ff ff ff       	call   c0019337 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001942a:	50                   	push   eax
c001942b:	e8 c7 ff ff ff       	call   c00193f7 <Dbg::logs(char*)>
c0019430:	83 c4 20             	add    esp,0x20
c0019433:	c3                   	ret    

c0019434 <Dbg::logWriteIntBase(unsigned int, int)>:
c0019434:	83 ec 10             	sub    esp,0x10
c0019437:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001943b:	50                   	push   eax
c001943c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019440:	50                   	push   eax
c0019441:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019445:	52                   	push   edx
c0019446:	e8 ec fe ff ff       	call   c0019337 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001944b:	50                   	push   eax
c001944c:	e8 a6 ff ff ff       	call   c00193f7 <Dbg::logs(char*)>
c0019451:	83 c4 20             	add    esp,0x20
c0019454:	c3                   	ret    

c0019455 <Dbg::kprintf(char const*, ...)>:
c0019455:	55                   	push   ebp
c0019456:	57                   	push   edi
c0019457:	56                   	push   esi
c0019458:	53                   	push   ebx
c0019459:	83 ec 0c             	sub    esp,0xc
c001945c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019460:	f6 05 d4 b9 03 c0 10 	test   BYTE PTR ds:0xc003b9d4,0x10
c0019467:	74 08                	je     c0019471 <Dbg::kprintf(char const*, ...)+0x1c>
c0019469:	83 c4 0c             	add    esp,0xc
c001946c:	5b                   	pop    ebx
c001946d:	5e                   	pop    esi
c001946e:	5f                   	pop    edi
c001946f:	5d                   	pop    ebp
c0019470:	c3                   	ret    
c0019471:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019475:	31 ff                	xor    edi,edi
c0019477:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001947b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001947e:	85 c0                	test   eax,eax
c0019480:	74 e7                	je     c0019469 <Dbg::kprintf(char const*, ...)+0x14>
c0019482:	8d 77 01             	lea    esi,[edi+0x1]
c0019485:	83 f8 25             	cmp    eax,0x25
c0019488:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c001948b:	75 47                	jne    c00194d4 <Dbg::kprintf(char const*, ...)+0x7f>
c001948d:	83 c7 02             	add    edi,0x2
c0019490:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0019493:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0019496:	83 e8 25             	sub    eax,0x25
c0019499:	0f b6 c0             	movzx  eax,al
c001949c:	83 f8 53             	cmp    eax,0x53
c001949f:	0f 87 ce 00 00 00    	ja     c0019573 <Dbg::kprintf(char const*, ...)+0x11e>
c00194a5:	ff 24 85 78 1e 03 c0 	jmp    DWORD PTR [eax*4-0x3ffce188]
c00194ac:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00194b0:	89 c8                	mov    eax,ecx
c00194b2:	83 c1 04             	add    ecx,0x4
c00194b5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00194b9:	8b 28                	mov    ebp,DWORD PTR [eax]
c00194bb:	55                   	push   ebp
c00194bc:	e8 55 ff ff ff       	call   c0019416 <Dbg::logWriteInt(unsigned int)>
c00194c1:	58                   	pop    eax
c00194c2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00194c5:	85 c0                	test   eax,eax
c00194c7:	74 a0                	je     c0019469 <Dbg::kprintf(char const*, ...)+0x14>
c00194c9:	8d 77 01             	lea    esi,[edi+0x1]
c00194cc:	83 f8 25             	cmp    eax,0x25
c00194cf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c00194d2:	74 b9                	je     c001948d <Dbg::kprintf(char const*, ...)+0x38>
c00194d4:	50                   	push   eax
c00194d5:	89 f7                	mov    edi,esi
c00194d7:	e8 fb fe ff ff       	call   c00193d7 <Dbg::logc(char)>
c00194dc:	89 ee                	mov    esi,ebp
c00194de:	58                   	pop    eax
c00194df:	eb e1                	jmp    c00194c2 <Dbg::kprintf(char const*, ...)+0x6d>
c00194e1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00194e5:	89 c8                	mov    eax,ecx
c00194e7:	83 c1 04             	add    ecx,0x4
c00194ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00194ec:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00194f0:	50                   	push   eax
c00194f1:	e8 01 ff ff ff       	call   c00193f7 <Dbg::logs(char*)>
c00194f6:	58                   	pop    eax
c00194f7:	eb c9                	jmp    c00194c2 <Dbg::kprintf(char const*, ...)+0x6d>
c00194f9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00194fd:	89 d0                	mov    eax,edx
c00194ff:	83 c2 04             	add    edx,0x4
c0019502:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019506:	8b 00                	mov    eax,DWORD PTR [eax]
c0019508:	50                   	push   eax
c0019509:	e8 08 ff ff ff       	call   c0019416 <Dbg::logWriteInt(unsigned int)>
c001950e:	58                   	pop    eax
c001950f:	eb b1                	jmp    c00194c2 <Dbg::kprintf(char const*, ...)+0x6d>
c0019511:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019515:	89 d0                	mov    eax,edx
c0019517:	83 c2 04             	add    edx,0x4
c001951a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001951d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019521:	50                   	push   eax
c0019522:	e8 b0 fe ff ff       	call   c00193d7 <Dbg::logc(char)>
c0019527:	58                   	pop    eax
c0019528:	eb 98                	jmp    c00194c2 <Dbg::kprintf(char const*, ...)+0x6d>
c001952a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001952e:	89 c8                	mov    eax,ecx
c0019530:	83 c1 04             	add    ecx,0x4
c0019533:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0019537:	6a 10                	push   0x10
c0019539:	8b 08                	mov    ecx,DWORD PTR [eax]
c001953b:	51                   	push   ecx
c001953c:	e8 f3 fe ff ff       	call   c0019434 <Dbg::logWriteIntBase(unsigned int, int)>
c0019541:	5d                   	pop    ebp
c0019542:	58                   	pop    eax
c0019543:	e9 7a ff ff ff       	jmp    c00194c2 <Dbg::kprintf(char const*, ...)+0x6d>
c0019548:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001954c:	89 d0                	mov    eax,edx
c001954e:	83 c2 08             	add    edx,0x8
c0019551:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019555:	6a 10                	push   0x10
c0019557:	8b 00                	mov    eax,DWORD PTR [eax]
c0019559:	50                   	push   eax
c001955a:	e8 d5 fe ff ff       	call   c0019434 <Dbg::logWriteIntBase(unsigned int, int)>
c001955f:	58                   	pop    eax
c0019560:	5a                   	pop    edx
c0019561:	e9 5c ff ff ff       	jmp    c00194c2 <Dbg::kprintf(char const*, ...)+0x6d>
c0019566:	6a 25                	push   0x25
c0019568:	e8 6a fe ff ff       	call   c00193d7 <Dbg::logc(char)>
c001956d:	5a                   	pop    edx
c001956e:	e9 4f ff ff ff       	jmp    c00194c2 <Dbg::kprintf(char const*, ...)+0x6d>
c0019573:	6a 25                	push   0x25
c0019575:	e8 5d fe ff ff       	call   c00193d7 <Dbg::logc(char)>
c001957a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001957e:	50                   	push   eax
c001957f:	e8 53 fe ff ff       	call   c00193d7 <Dbg::logc(char)>
c0019584:	5a                   	pop    edx
c0019585:	59                   	pop    ecx
c0019586:	e9 37 ff ff ff       	jmp    c00194c2 <Dbg::kprintf(char const*, ...)+0x6d>
c001958b:	90                   	nop

c001958c <KiUbsanPrintDetails(char const*, void*)>:
c001958c:	83 ec 1c             	sub    esp,0x1c
c001958f:	83 ec 08             	sub    esp,0x8
c0019592:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019596:	68 c8 1f 03 c0       	push   0xc0031fc8
c001959b:	e8 b5 fe ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c00195a0:	83 c4 10             	add    esp,0x10
c00195a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00195a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195af:	8b 00                	mov    eax,DWORD PTR [eax]
c00195b1:	83 ec 08             	sub    esp,0x8
c00195b4:	50                   	push   eax
c00195b5:	68 dc 1f 03 c0       	push   0xc0031fdc
c00195ba:	e8 96 fe ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c00195bf:	83 c4 10             	add    esp,0x10
c00195c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00195c9:	83 ec 08             	sub    esp,0x8
c00195cc:	50                   	push   eax
c00195cd:	68 e6 1f 03 c0       	push   0xc0031fe6
c00195d2:	e8 7e fe ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c00195d7:	83 c4 10             	add    esp,0x10
c00195da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00195e1:	83 ec 08             	sub    esp,0x8
c00195e4:	50                   	push   eax
c00195e5:	68 f0 1f 03 c0       	push   0xc0031ff0
c00195ea:	e8 66 fe ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c00195ef:	83 c4 10             	add    esp,0x10
c00195f2:	90                   	nop
c00195f3:	83 c4 1c             	add    esp,0x1c
c00195f6:	c3                   	ret    
c00195f7:	90                   	nop

c00195f8 <__ubsan_handle_type_mismatch_v1>:
c00195f8:	83 ec 0c             	sub    esp,0xc
c00195fb:	83 ec 08             	sub    esp,0x8
c00195fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019602:	68 34 21 03 c0       	push   0xc0032134
c0019607:	e8 80 ff ff ff       	call   c001958c <KiUbsanPrintDetails(char const*, void*)>
c001960c:	83 c4 10             	add    esp,0x10
c001960f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019614:	75 16                	jne    c001962c <__ubsan_handle_type_mismatch_v1+0x34>
c0019616:	83 ec 0c             	sub    esp,0xc
c0019619:	68 fa 1f 03 c0       	push   0xc0031ffa
c001961e:	e8 32 fe ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0019623:	83 c4 10             	add    esp,0x10
c0019626:	e9 91 00 00 00       	jmp    c00196bc <__ubsan_handle_type_mismatch_v1+0xc4>
c001962b:	90                   	nop
c001962c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019630:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019633:	85 c0                	test   eax,eax
c0019635:	74 29                	je     c0019660 <__ubsan_handle_type_mismatch_v1+0x68>
c0019637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001963b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001963e:	83 e8 01             	sub    eax,0x1
c0019641:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019645:	75 19                	jne    c0019660 <__ubsan_handle_type_mismatch_v1+0x68>
c0019647:	83 ec 08             	sub    esp,0x8
c001964a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001964e:	68 54 21 03 c0       	push   0xc0032154
c0019653:	e8 fd fd ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0019658:	83 c4 10             	add    esp,0x10
c001965b:	eb 5f                	jmp    c00196bc <__ubsan_handle_type_mismatch_v1+0xc4>
c001965d:	8d 76 00             	lea    esi,[esi+0x0]
c0019660:	83 ec 0c             	sub    esp,0xc
c0019663:	68 0f 20 03 c0       	push   0xc003200f
c0019668:	e8 e8 fd ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001966d:	83 c4 10             	add    esp,0x10
c0019670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019674:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0019677:	0f b6 c0             	movzx  eax,al
c001967a:	83 ec 08             	sub    esp,0x8
c001967d:	50                   	push   eax
c001967e:	68 29 20 03 c0       	push   0xc0032029
c0019683:	e8 cd fd ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0019688:	83 c4 10             	add    esp,0x10
c001968b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001968f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019692:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0019695:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019699:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001969d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00196a0:	0f b6 c0             	movzx  eax,al
c00196a3:	8b 04 85 80 44 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcbb80]
c00196aa:	51                   	push   ecx
c00196ab:	52                   	push   edx
c00196ac:	50                   	push   eax
c00196ad:	68 7c 21 03 c0       	push   0xc003217c
c00196b2:	e8 9e fd ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c00196b7:	83 c4 10             	add    esp,0x10
c00196ba:	66 90                	xchg   ax,ax
c00196bc:	83 ec 0c             	sub    esp,0xc
c00196bf:	68 34 21 03 c0       	push   0xc0032134
c00196c4:	e8 c5 70 00 00       	call   c002078e <KePanic(char const*)>
c00196c9:	83 c4 10             	add    esp,0x10
c00196cc:	90                   	nop
c00196cd:	83 c4 0c             	add    esp,0xc
c00196d0:	c3                   	ret    
c00196d1:	8d 76 00             	lea    esi,[esi+0x0]

c00196d4 <__ubsan_handle_pointer_overflow>:
c00196d4:	83 ec 0c             	sub    esp,0xc
c00196d7:	83 ec 08             	sub    esp,0x8
c00196da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196de:	68 c4 21 03 c0       	push   0xc00321c4
c00196e3:	e8 a4 fe ff ff       	call   c001958c <KiUbsanPrintDetails(char const*, void*)>
c00196e8:	83 c4 10             	add    esp,0x10
c00196eb:	83 ec 0c             	sub    esp,0xc
c00196ee:	68 c4 21 03 c0       	push   0xc00321c4
c00196f3:	e8 96 70 00 00       	call   c002078e <KePanic(char const*)>
c00196f8:	83 c4 10             	add    esp,0x10
c00196fb:	90                   	nop
c00196fc:	83 c4 0c             	add    esp,0xc
c00196ff:	c3                   	ret    

c0019700 <__ubsan_handle_out_of_bounds>:
c0019700:	83 ec 0c             	sub    esp,0xc
c0019703:	83 ec 08             	sub    esp,0x8
c0019706:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001970a:	68 34 20 03 c0       	push   0xc0032034
c001970f:	e8 78 fe ff ff       	call   c001958c <KiUbsanPrintDetails(char const*, void*)>
c0019714:	83 c4 10             	add    esp,0x10
c0019717:	83 ec 0c             	sub    esp,0xc
c001971a:	68 34 20 03 c0       	push   0xc0032034
c001971f:	e8 6a 70 00 00       	call   c002078e <KePanic(char const*)>
c0019724:	83 c4 10             	add    esp,0x10
c0019727:	90                   	nop
c0019728:	83 c4 0c             	add    esp,0xc
c001972b:	c3                   	ret    

c001972c <__ubsan_handle_add_overflow>:
c001972c:	83 ec 0c             	sub    esp,0xc
c001972f:	83 ec 08             	sub    esp,0x8
c0019732:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019736:	68 51 20 03 c0       	push   0xc0032051
c001973b:	e8 4c fe ff ff       	call   c001958c <KiUbsanPrintDetails(char const*, void*)>
c0019740:	83 c4 10             	add    esp,0x10
c0019743:	83 ec 0c             	sub    esp,0xc
c0019746:	68 51 20 03 c0       	push   0xc0032051
c001974b:	e8 3e 70 00 00       	call   c002078e <KePanic(char const*)>
c0019750:	83 c4 10             	add    esp,0x10
c0019753:	90                   	nop
c0019754:	83 c4 0c             	add    esp,0xc
c0019757:	c3                   	ret    

c0019758 <__ubsan_handle_load_invalid_value>:
c0019758:	83 ec 0c             	sub    esp,0xc
c001975b:	83 ec 08             	sub    esp,0x8
c001975e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019762:	68 e4 21 03 c0       	push   0xc00321e4
c0019767:	e8 20 fe ff ff       	call   c001958c <KiUbsanPrintDetails(char const*, void*)>
c001976c:	83 c4 10             	add    esp,0x10
c001976f:	83 ec 0c             	sub    esp,0xc
c0019772:	68 e4 21 03 c0       	push   0xc00321e4
c0019777:	e8 12 70 00 00       	call   c002078e <KePanic(char const*)>
c001977c:	83 c4 10             	add    esp,0x10
c001977f:	90                   	nop
c0019780:	83 c4 0c             	add    esp,0xc
c0019783:	c3                   	ret    

c0019784 <__ubsan_handle_divrem_overflow>:
c0019784:	83 ec 0c             	sub    esp,0xc
c0019787:	83 ec 08             	sub    esp,0x8
c001978a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001978e:	68 08 22 03 c0       	push   0xc0032208
c0019793:	e8 f4 fd ff ff       	call   c001958c <KiUbsanPrintDetails(char const*, void*)>
c0019798:	83 c4 10             	add    esp,0x10
c001979b:	83 ec 0c             	sub    esp,0xc
c001979e:	68 08 22 03 c0       	push   0xc0032208
c00197a3:	e8 e6 6f 00 00       	call   c002078e <KePanic(char const*)>
c00197a8:	83 c4 10             	add    esp,0x10
c00197ab:	90                   	nop
c00197ac:	83 c4 0c             	add    esp,0xc
c00197af:	c3                   	ret    

c00197b0 <__ubsan_handle_mul_overflow>:
c00197b0:	83 ec 0c             	sub    esp,0xc
c00197b3:	83 ec 08             	sub    esp,0x8
c00197b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197ba:	68 6d 20 03 c0       	push   0xc003206d
c00197bf:	e8 c8 fd ff ff       	call   c001958c <KiUbsanPrintDetails(char const*, void*)>
c00197c4:	83 c4 10             	add    esp,0x10
c00197c7:	83 ec 0c             	sub    esp,0xc
c00197ca:	68 6d 20 03 c0       	push   0xc003206d
c00197cf:	e8 ba 6f 00 00       	call   c002078e <KePanic(char const*)>
c00197d4:	83 c4 10             	add    esp,0x10
c00197d7:	90                   	nop
c00197d8:	83 c4 0c             	add    esp,0xc
c00197db:	c3                   	ret    

c00197dc <__ubsan_handle_sub_overflow>:
c00197dc:	83 ec 0c             	sub    esp,0xc
c00197df:	83 ec 08             	sub    esp,0x8
c00197e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197e6:	68 89 20 03 c0       	push   0xc0032089
c00197eb:	e8 9c fd ff ff       	call   c001958c <KiUbsanPrintDetails(char const*, void*)>
c00197f0:	83 c4 10             	add    esp,0x10
c00197f3:	83 ec 0c             	sub    esp,0xc
c00197f6:	68 89 20 03 c0       	push   0xc0032089
c00197fb:	e8 8e 6f 00 00       	call   c002078e <KePanic(char const*)>
c0019800:	83 c4 10             	add    esp,0x10
c0019803:	90                   	nop
c0019804:	83 c4 0c             	add    esp,0xc
c0019807:	c3                   	ret    

c0019808 <__ubsan_handle_shift_out_of_bounds>:
c0019808:	83 ec 0c             	sub    esp,0xc
c001980b:	83 ec 08             	sub    esp,0x8
c001980e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019812:	68 28 22 03 c0       	push   0xc0032228
c0019817:	e8 70 fd ff ff       	call   c001958c <KiUbsanPrintDetails(char const*, void*)>
c001981c:	83 c4 10             	add    esp,0x10
c001981f:	83 ec 0c             	sub    esp,0xc
c0019822:	68 28 22 03 c0       	push   0xc0032228
c0019827:	e8 62 6f 00 00       	call   c002078e <KePanic(char const*)>
c001982c:	83 c4 10             	add    esp,0x10
c001982f:	90                   	nop
c0019830:	83 c4 0c             	add    esp,0xc
c0019833:	c3                   	ret    

c0019834 <__ubsan_handle_negate_overflow>:
c0019834:	83 ec 0c             	sub    esp,0xc
c0019837:	83 ec 08             	sub    esp,0x8
c001983a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001983e:	68 4c 22 03 c0       	push   0xc003224c
c0019843:	e8 44 fd ff ff       	call   c001958c <KiUbsanPrintDetails(char const*, void*)>
c0019848:	83 c4 10             	add    esp,0x10
c001984b:	83 ec 0c             	sub    esp,0xc
c001984e:	68 4c 22 03 c0       	push   0xc003224c
c0019853:	e8 36 6f 00 00       	call   c002078e <KePanic(char const*)>
c0019858:	83 c4 10             	add    esp,0x10
c001985b:	90                   	nop
c001985c:	83 c4 0c             	add    esp,0xc
c001985f:	c3                   	ret    

c0019860 <KiIsHashInTable(unsigned short)>:
c0019860:	0f b7 d0             	movzx  edx,ax
c0019863:	83 e0 07             	and    eax,0x7
c0019866:	c1 fa 03             	sar    edx,0x3
c0019869:	88 c1                	mov    cl,al
c001986b:	0f b6 92 00 bf 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffc4100]
c0019872:	d3 fa                	sar    edx,cl
c0019874:	89 d0                	mov    eax,edx
c0019876:	83 e0 01             	and    eax,0x1
c0019879:	c3                   	ret    

c001987a <KiSetHashInTable(unsigned short, bool)>:
c001987a:	56                   	push   esi
c001987b:	53                   	push   ebx
c001987c:	0f b7 d8             	movzx  ebx,ax
c001987f:	83 e0 07             	and    eax,0x7
c0019882:	c1 fb 03             	sar    ebx,0x3
c0019885:	89 c1                	mov    ecx,eax
c0019887:	0f b6 b3 00 bf 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffc4100]
c001988e:	b8 01 00 00 00       	mov    eax,0x1
c0019893:	d3 e0                	shl    eax,cl
c0019895:	84 d2                	test   dl,dl
c0019897:	74 04                	je     c001989d <KiSetHashInTable(unsigned short, bool)+0x23>
c0019899:	09 f0                	or     eax,esi
c001989b:	eb 04                	jmp    c00198a1 <KiSetHashInTable(unsigned short, bool)+0x27>
c001989d:	f7 d0                	not    eax
c001989f:	21 f0                	and    eax,esi
c00198a1:	88 83 00 bf 03 c0    	mov    BYTE PTR [ebx-0x3ffc4100],al
c00198a7:	5b                   	pop    ebx
c00198a8:	5e                   	pop    esi
c00198a9:	c3                   	ret    

c00198aa <KiFlushSymlinkChanges()>:
c00198aa:	57                   	push   edi
c00198ab:	56                   	push   esi
c00198ac:	53                   	push   ebx
c00198ad:	83 ec 1c             	sub    esp,0x1c
c00198b0:	68 14 01 00 00       	push   0x114
c00198b5:	e8 0d cd ff ff       	call   c00165c7 <malloc>
c00198ba:	83 c4 0c             	add    esp,0xc
c00198bd:	89 c3                	mov    ebx,eax
c00198bf:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c00198c5:	68 6b 22 03 c0       	push   0xc003226b
c00198ca:	50                   	push   eax
c00198cb:	e8 8c 0d 00 00       	call   c001a65c <File::File(char const*, Process*)>
c00198d0:	83 c4 10             	add    esp,0x10
c00198d3:	85 db                	test   ebx,ebx
c00198d5:	75 10                	jne    c00198e7 <KiFlushSymlinkChanges()+0x3d>
c00198d7:	83 ec 0c             	sub    esp,0xc
c00198da:	68 89 22 03 c0       	push   0xc0032289
c00198df:	e8 aa 6e 00 00       	call   c002078e <KePanic(char const*)>
c00198e4:	83 c4 10             	add    esp,0x10
c00198e7:	50                   	push   eax
c00198e8:	50                   	push   eax
c00198e9:	6a 06                	push   0x6
c00198eb:	53                   	push   ebx
c00198ec:	e8 89 0d 00 00       	call   c001a67a <File::open(FileOpenMode)>
c00198f1:	83 c4 10             	add    esp,0x10
c00198f4:	85 c0                	test   eax,eax
c00198f6:	74 10                	je     c0019908 <KiFlushSymlinkChanges()+0x5e>
c00198f8:	83 ec 0c             	sub    esp,0xc
c00198fb:	68 a3 22 03 c0       	push   0xc00322a3
c0019900:	e8 89 6e 00 00       	call   c002078e <KePanic(char const*)>
c0019905:	83 c4 10             	add    esp,0x10
c0019908:	31 f6                	xor    esi,esi
c001990a:	39 35 c0 ba 03 c0    	cmp    DWORD PTR ds:0xc003bac0,esi
c0019910:	7e 70                	jle    c0019982 <KiFlushSymlinkChanges()+0xd8>
c0019912:	83 ec 0c             	sub    esp,0xc
c0019915:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019917:	8d 7c 24 18          	lea    edi,[esp+0x18]
c001991b:	89 f0                	mov    eax,esi
c001991d:	57                   	push   edi
c001991e:	c1 e0 08             	shl    eax,0x8
c0019921:	05 00 bb 03 c0       	add    eax,0xc003bb00
c0019926:	50                   	push   eax
c0019927:	6a 00                	push   0x0
c0019929:	68 00 01 00 00       	push   0x100
c001992e:	53                   	push   ebx
c001992f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0019932:	83 c4 20             	add    esp,0x20
c0019935:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c001993d:	74 10                	je     c001994f <KiFlushSymlinkChanges()+0xa5>
c001993f:	83 ec 0c             	sub    esp,0xc
c0019942:	68 bd 22 03 c0       	push   0xc00322bd
c0019947:	e8 42 6e 00 00       	call   c002078e <KePanic(char const*)>
c001994c:	83 c4 10             	add    esp,0x10
c001994f:	83 ec 0c             	sub    esp,0xc
c0019952:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019954:	8d 14 f5 e0 ba 03 c0 	lea    edx,[esi*8-0x3ffc4520]
c001995b:	57                   	push   edi
c001995c:	52                   	push   edx
c001995d:	6a 00                	push   0x0
c001995f:	6a 08                	push   0x8
c0019961:	53                   	push   ebx
c0019962:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019965:	83 c4 20             	add    esp,0x20
c0019968:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c001996d:	74 10                	je     c001997f <KiFlushSymlinkChanges()+0xd5>
c001996f:	83 ec 0c             	sub    esp,0xc
c0019972:	68 d7 22 03 c0       	push   0xc00322d7
c0019977:	e8 12 6e 00 00       	call   c002078e <KePanic(char const*)>
c001997c:	83 c4 10             	add    esp,0x10
c001997f:	46                   	inc    esi
c0019980:	eb 88                	jmp    c001990a <KiFlushSymlinkChanges()+0x60>
c0019982:	83 ec 0c             	sub    esp,0xc
c0019985:	53                   	push   ebx
c0019986:	e8 4d 0d 00 00       	call   c001a6d8 <File::close()>
c001998b:	83 c4 10             	add    esp,0x10
c001998e:	85 db                	test   ebx,ebx
c0019990:	74 0c                	je     c001999e <KiFlushSymlinkChanges()+0xf4>
c0019992:	83 ec 0c             	sub    esp,0xc
c0019995:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019997:	53                   	push   ebx
c0019998:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001999b:	83 c4 10             	add    esp,0x10
c001999e:	c7 05 c0 ba 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bac0,0x0
c00199a8:	83 c4 10             	add    esp,0x10
c00199ab:	5b                   	pop    ebx
c00199ac:	5e                   	pop    esi
c00199ad:	5f                   	pop    edi
c00199ae:	c3                   	ret    

c00199af <KiDeinitialiseSymlinks(void*)>:
c00199af:	e9 f6 fe ff ff       	jmp    c00198aa <KiFlushSymlinkChanges()>

c00199b4 <KiGetSymlinkHash(char const*)>:
c00199b4:	53                   	push   ebx
c00199b5:	89 c3                	mov    ebx,eax
c00199b7:	83 ec 14             	sub    esp,0x14
c00199ba:	50                   	push   eax
c00199bb:	e8 b0 6b fe ff       	call   c0000570 <strlen>
c00199c0:	5a                   	pop    edx
c00199c1:	59                   	pop    ecx
c00199c2:	50                   	push   eax
c00199c3:	53                   	push   ebx
c00199c4:	e8 48 65 00 00       	call   c001ff11 <KeCalculateCRC32(unsigned char*, int)>
c00199c9:	83 c4 18             	add    esp,0x18
c00199cc:	89 c2                	mov    edx,eax
c00199ce:	5b                   	pop    ebx
c00199cf:	c1 ea 10             	shr    edx,0x10
c00199d2:	31 d0                	xor    eax,edx
c00199d4:	c3                   	ret    

c00199d5 <KiCreateSymlinkID()>:
c00199d5:	55                   	push   ebp
c00199d6:	57                   	push   edi
c00199d7:	56                   	push   esi
c00199d8:	53                   	push   ebx
c00199d9:	31 db                	xor    ebx,ebx
c00199db:	83 ec 1c             	sub    esp,0x1c
c00199de:	e8 f9 6e 00 00       	call   c00208dc <KeRand()>
c00199e3:	43                   	inc    ebx
c00199e4:	8b 2d 00 df 03 c0    	mov    ebp,DWORD PTR ds:0xc003df00
c00199ea:	31 d2                	xor    edx,edx
c00199ec:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00199ef:	0f a4 c2 1f          	shld   edx,eax,0x1f
c00199f3:	89 0d 00 df 03 c0    	mov    DWORD PTR ds:0xc003df00,ecx
c00199f9:	c1 e0 1f             	shl    eax,0x1f
c00199fc:	89 d7                	mov    edi,edx
c00199fe:	89 c6                	mov    esi,eax
c0019a00:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0019a04:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019a0c:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0019a12:	75 10                	jne    c0019a24 <KiCreateSymlinkID()+0x4f>
c0019a14:	83 ec 0c             	sub    esp,0xc
c0019a17:	68 f1 22 03 c0       	push   0xc00322f1
c0019a1c:	e8 6d 6d 00 00       	call   c002078e <KePanic(char const*)>
c0019a21:	83 c4 10             	add    esp,0x10
c0019a24:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0019a28:	75 04                	jne    c0019a2e <KiCreateSymlinkID()+0x59>
c0019a2a:	39 f5                	cmp    ebp,esi
c0019a2c:	74 b0                	je     c00199de <KiCreateSymlinkID()+0x9>
c0019a2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019a36:	31 f0                	xor    eax,esi
c0019a38:	83 c4 1c             	add    esp,0x1c
c0019a3b:	31 fa                	xor    edx,edi
c0019a3d:	5b                   	pop    ebx
c0019a3e:	5e                   	pop    esi
c0019a3f:	5f                   	pop    edi
c0019a40:	5d                   	pop    ebp
c0019a41:	c3                   	ret    

c0019a42 <KeRegisterSymlink(char const*, unsigned long long)>:
c0019a42:	53                   	push   ebx
c0019a43:	83 ec 0c             	sub    esp,0xc
c0019a46:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019a4a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019a4e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019a52:	a1 c0 ba 03 c0       	mov    eax,ds:0xc003bac0
c0019a57:	68 00 01 00 00       	push   0x100
c0019a5c:	89 0c c5 e4 ba 03 c0 	mov    DWORD PTR [eax*8-0x3ffc451c],ecx
c0019a63:	6a 00                	push   0x0
c0019a65:	89 14 c5 e0 ba 03 c0 	mov    DWORD PTR [eax*8-0x3ffc4520],edx
c0019a6c:	c1 e0 08             	shl    eax,0x8
c0019a6f:	05 00 bb 03 c0       	add    eax,0xc003bb00
c0019a74:	50                   	push   eax
c0019a75:	e8 76 6a fe ff       	call   c00004f0 <memset>
c0019a7a:	58                   	pop    eax
c0019a7b:	a1 c0 ba 03 c0       	mov    eax,ds:0xc003bac0
c0019a80:	5a                   	pop    edx
c0019a81:	c1 e0 08             	shl    eax,0x8
c0019a84:	53                   	push   ebx
c0019a85:	05 00 bb 03 c0       	add    eax,0xc003bb00
c0019a8a:	50                   	push   eax
c0019a8b:	e8 b0 6b fe ff       	call   c0000640 <strcpy>
c0019a90:	89 d8                	mov    eax,ebx
c0019a92:	e8 1d ff ff ff       	call   c00199b4 <KiGetSymlinkHash(char const*)>
c0019a97:	59                   	pop    ecx
c0019a98:	0f b7 d8             	movzx  ebx,ax
c0019a9b:	58                   	pop    eax
c0019a9c:	53                   	push   ebx
c0019a9d:	68 fa 22 03 c0       	push   0xc00322fa
c0019aa2:	e8 ae f9 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0019aa7:	89 d8                	mov    eax,ebx
c0019aa9:	ba 01 00 00 00       	mov    edx,0x1
c0019aae:	e8 c7 fd ff ff       	call   c001987a <KiSetHashInTable(unsigned short, bool)>
c0019ab3:	a1 c0 ba 03 c0       	mov    eax,ds:0xc003bac0
c0019ab8:	83 c4 10             	add    esp,0x10
c0019abb:	40                   	inc    eax
c0019abc:	a3 c0 ba 03 c0       	mov    ds:0xc003bac0,eax
c0019ac1:	83 f8 03             	cmp    eax,0x3
c0019ac4:	7e 09                	jle    c0019acf <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c0019ac6:	83 c4 08             	add    esp,0x8
c0019ac9:	5b                   	pop    ebx
c0019aca:	e9 db fd ff ff       	jmp    c00198aa <KiFlushSymlinkChanges()>
c0019acf:	83 c4 08             	add    esp,0x8
c0019ad2:	5b                   	pop    ebx
c0019ad3:	c3                   	ret    

c0019ad4 <KeInitialiseSymlinks()>:
c0019ad4:	57                   	push   edi
c0019ad5:	56                   	push   esi
c0019ad6:	53                   	push   ebx
c0019ad7:	81 ec 14 01 00 00    	sub    esp,0x114
c0019add:	c7 05 00 df 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003df00,0x0
c0019ae7:	68 00 20 00 00       	push   0x2000
c0019aec:	c7 05 c0 ba 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bac0,0x0
c0019af6:	6a 00                	push   0x0
c0019af8:	68 00 bf 03 c0       	push   0xc003bf00
c0019afd:	e8 ee 69 fe ff       	call   c00004f0 <memset>
c0019b02:	59                   	pop    ecx
c0019b03:	5b                   	pop    ebx
c0019b04:	ff 35 00 df 03 c0    	push   DWORD PTR ds:0xc003df00
c0019b0a:	68 0e 23 03 c0       	push   0xc003230e
c0019b0f:	e8 41 f9 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0019b14:	5e                   	pop    esi
c0019b15:	5f                   	pop    edi
c0019b16:	6a 00                	push   0x0
c0019b18:	68 af 99 01 c0       	push   0xc00199af
c0019b1d:	e8 12 62 00 00       	call   c001fd34 <KeRegisterAtexit(void (*)(void*), void*)>
c0019b22:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019b29:	e8 99 ca ff ff       	call   c00165c7 <malloc>
c0019b2e:	83 c4 0c             	add    esp,0xc
c0019b31:	89 c3                	mov    ebx,eax
c0019b33:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0019b39:	68 6b 22 03 c0       	push   0xc003226b
c0019b3e:	50                   	push   eax
c0019b3f:	e8 18 0b 00 00       	call   c001a65c <File::File(char const*, Process*)>
c0019b44:	83 c4 10             	add    esp,0x10
c0019b47:	85 db                	test   ebx,ebx
c0019b49:	75 10                	jne    c0019b5b <KeInitialiseSymlinks()+0x87>
c0019b4b:	83 ec 0c             	sub    esp,0xc
c0019b4e:	68 2b 23 03 c0       	push   0xc003232b
c0019b53:	e8 36 6c 00 00       	call   c002078e <KePanic(char const*)>
c0019b58:	83 c4 10             	add    esp,0x10
c0019b5b:	83 ec 0c             	sub    esp,0xc
c0019b5e:	53                   	push   ebx
c0019b5f:	e8 da 0d 00 00       	call   c001a93e <File::exists()>
c0019b64:	83 c4 10             	add    esp,0x10
c0019b67:	84 c0                	test   al,al
c0019b69:	75 3a                	jne    c0019ba5 <KeInitialiseSymlinks()+0xd1>
c0019b6b:	52                   	push   edx
c0019b6c:	52                   	push   edx
c0019b6d:	6a 12                	push   0x12
c0019b6f:	53                   	push   ebx
c0019b70:	e8 05 0b 00 00       	call   c001a67a <File::open(FileOpenMode)>
c0019b75:	83 c4 10             	add    esp,0x10
c0019b78:	85 c0                	test   eax,eax
c0019b7a:	74 10                	je     c0019b8c <KeInitialiseSymlinks()+0xb8>
c0019b7c:	83 ec 0c             	sub    esp,0xc
c0019b7f:	68 48 23 03 c0       	push   0xc0032348
c0019b84:	e8 05 6c 00 00       	call   c002078e <KePanic(char const*)>
c0019b89:	83 c4 10             	add    esp,0x10
c0019b8c:	83 ec 0c             	sub    esp,0xc
c0019b8f:	53                   	push   ebx
c0019b90:	e8 43 0b 00 00       	call   c001a6d8 <File::close()>
c0019b95:	83 c4 10             	add    esp,0x10
c0019b98:	85 db                	test   ebx,ebx
c0019b9a:	0f 84 9e 00 00 00    	je     c0019c3e <KeInitialiseSymlinks()+0x16a>
c0019ba0:	e9 8d 00 00 00       	jmp    c0019c32 <KeInitialiseSymlinks()+0x15e>
c0019ba5:	50                   	push   eax
c0019ba6:	50                   	push   eax
c0019ba7:	6a 01                	push   0x1
c0019ba9:	53                   	push   ebx
c0019baa:	e8 cb 0a 00 00       	call   c001a67a <File::open(FileOpenMode)>
c0019baf:	83 c4 10             	add    esp,0x10
c0019bb2:	85 c0                	test   eax,eax
c0019bb4:	74 10                	je     c0019bc6 <KeInitialiseSymlinks()+0xf2>
c0019bb6:	83 ec 0c             	sub    esp,0xc
c0019bb9:	68 65 23 03 c0       	push   0xc0032365
c0019bbe:	e8 cb 6b 00 00       	call   c002078e <KePanic(char const*)>
c0019bc3:	83 c4 10             	add    esp,0x10
c0019bc6:	83 ec 0c             	sub    esp,0xc
c0019bc9:	ff 05 00 df 03 c0    	inc    DWORD PTR ds:0xc003df00
c0019bcf:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019bd3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bd5:	57                   	push   edi
c0019bd6:	8d 74 24 20          	lea    esi,[esp+0x20]
c0019bda:	56                   	push   esi
c0019bdb:	6a 00                	push   0x0
c0019bdd:	68 00 01 00 00       	push   0x100
c0019be2:	53                   	push   ebx
c0019be3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019be6:	83 c4 20             	add    esp,0x20
c0019be9:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019bf1:	75 33                	jne    c0019c26 <KeInitialiseSymlinks()+0x152>
c0019bf3:	83 ec 0c             	sub    esp,0xc
c0019bf6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bf8:	57                   	push   edi
c0019bf9:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019bfd:	52                   	push   edx
c0019bfe:	6a 00                	push   0x0
c0019c00:	6a 08                	push   0x8
c0019c02:	53                   	push   ebx
c0019c03:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c06:	83 c4 20             	add    esp,0x20
c0019c09:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019c0e:	75 16                	jne    c0019c26 <KeInitialiseSymlinks()+0x152>
c0019c10:	89 f0                	mov    eax,esi
c0019c12:	e8 9d fd ff ff       	call   c00199b4 <KiGetSymlinkHash(char const*)>
c0019c17:	ba 01 00 00 00       	mov    edx,0x1
c0019c1c:	0f b7 c0             	movzx  eax,ax
c0019c1f:	e8 56 fc ff ff       	call   c001987a <KiSetHashInTable(unsigned short, bool)>
c0019c24:	eb a0                	jmp    c0019bc6 <KeInitialiseSymlinks()+0xf2>
c0019c26:	83 ec 0c             	sub    esp,0xc
c0019c29:	53                   	push   ebx
c0019c2a:	e8 a9 0a 00 00       	call   c001a6d8 <File::close()>
c0019c2f:	83 c4 10             	add    esp,0x10
c0019c32:	83 ec 0c             	sub    esp,0xc
c0019c35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c37:	53                   	push   ebx
c0019c38:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019c3b:	83 c4 10             	add    esp,0x10
c0019c3e:	81 c4 10 01 00 00    	add    esp,0x110
c0019c44:	5b                   	pop    ebx
c0019c45:	5e                   	pop    esi
c0019c46:	5f                   	pop    edi
c0019c47:	c3                   	ret    

c0019c48 <KiIsSymlinkRegistered(char const*)>:
c0019c48:	55                   	push   ebp
c0019c49:	57                   	push   edi
c0019c4a:	56                   	push   esi
c0019c4b:	53                   	push   ebx
c0019c4c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019c52:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0019c59:	89 f0                	mov    eax,esi
c0019c5b:	e8 54 fd ff ff       	call   c00199b4 <KiGetSymlinkHash(char const*)>
c0019c60:	0f b7 c0             	movzx  eax,ax
c0019c63:	53                   	push   ebx
c0019c64:	56                   	push   esi
c0019c65:	50                   	push   eax
c0019c66:	68 80 23 03 c0       	push   0xc0032380
c0019c6b:	e8 e5 f7 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0019c70:	89 f0                	mov    eax,esi
c0019c72:	e8 3d fd ff ff       	call   c00199b4 <KiGetSymlinkHash(char const*)>
c0019c77:	0f b7 c0             	movzx  eax,ax
c0019c7a:	e8 e1 fb ff ff       	call   c0019860 <KiIsHashInTable(unsigned short)>
c0019c7f:	83 c4 10             	add    esp,0x10
c0019c82:	88 c1                	mov    cl,al
c0019c84:	31 d2                	xor    edx,edx
c0019c86:	31 c0                	xor    eax,eax
c0019c88:	84 c9                	test   cl,cl
c0019c8a:	0f 84 31 01 00 00    	je     c0019dc1 <KiIsSymlinkRegistered(char const*)+0x179>
c0019c90:	31 db                	xor    ebx,ebx
c0019c92:	39 1d c0 ba 03 c0    	cmp    DWORD PTR ds:0xc003bac0,ebx
c0019c98:	7e 30                	jle    c0019cca <KiIsSymlinkRegistered(char const*)+0x82>
c0019c9a:	89 d8                	mov    eax,ebx
c0019c9c:	51                   	push   ecx
c0019c9d:	c1 e0 08             	shl    eax,0x8
c0019ca0:	51                   	push   ecx
c0019ca1:	05 00 bb 03 c0       	add    eax,0xc003bb00
c0019ca6:	50                   	push   eax
c0019ca7:	56                   	push   esi
c0019ca8:	e8 a3 6a fe ff       	call   c0000750 <strcmp>
c0019cad:	83 c4 10             	add    esp,0x10
c0019cb0:	85 c0                	test   eax,eax
c0019cb2:	75 13                	jne    c0019cc7 <KiIsSymlinkRegistered(char const*)+0x7f>
c0019cb4:	8b 04 dd e0 ba 03 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffc4520]
c0019cbb:	8b 14 dd e4 ba 03 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffc451c]
c0019cc2:	e9 fa 00 00 00       	jmp    c0019dc1 <KiIsSymlinkRegistered(char const*)+0x179>
c0019cc7:	43                   	inc    ebx
c0019cc8:	eb c8                	jmp    c0019c92 <KiIsSymlinkRegistered(char const*)+0x4a>
c0019cca:	83 ec 0c             	sub    esp,0xc
c0019ccd:	68 14 01 00 00       	push   0x114
c0019cd2:	e8 f0 c8 ff ff       	call   c00165c7 <malloc>
c0019cd7:	83 c4 0c             	add    esp,0xc
c0019cda:	89 c3                	mov    ebx,eax
c0019cdc:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0019ce2:	68 6b 22 03 c0       	push   0xc003226b
c0019ce7:	50                   	push   eax
c0019ce8:	e8 6f 09 00 00       	call   c001a65c <File::File(char const*, Process*)>
c0019ced:	83 c4 10             	add    esp,0x10
c0019cf0:	85 db                	test   ebx,ebx
c0019cf2:	75 12                	jne    c0019d06 <KiIsSymlinkRegistered(char const*)+0xbe>
c0019cf4:	83 ec 0c             	sub    esp,0xc
c0019cf7:	68 95 23 03 c0       	push   0xc0032395
c0019cfc:	e8 8d 6a 00 00       	call   c002078e <KePanic(char const*)>
c0019d01:	83 c4 10             	add    esp,0x10
c0019d04:	eb 10                	jmp    c0019d16 <KiIsSymlinkRegistered(char const*)+0xce>
c0019d06:	83 ec 0c             	sub    esp,0xc
c0019d09:	53                   	push   ebx
c0019d0a:	e8 2f 0c 00 00       	call   c001a93e <File::exists()>
c0019d0f:	83 c4 10             	add    esp,0x10
c0019d12:	84 c0                	test   al,al
c0019d14:	74 de                	je     c0019cf4 <KiIsSymlinkRegistered(char const*)+0xac>
c0019d16:	52                   	push   edx
c0019d17:	52                   	push   edx
c0019d18:	6a 01                	push   0x1
c0019d1a:	53                   	push   ebx
c0019d1b:	e8 5a 09 00 00       	call   c001a67a <File::open(FileOpenMode)>
c0019d20:	83 c4 10             	add    esp,0x10
c0019d23:	85 c0                	test   eax,eax
c0019d25:	74 10                	je     c0019d37 <KiIsSymlinkRegistered(char const*)+0xef>
c0019d27:	83 ec 0c             	sub    esp,0xc
c0019d2a:	68 b0 23 03 c0       	push   0xc00323b0
c0019d2f:	e8 5a 6a 00 00       	call   c002078e <KePanic(char const*)>
c0019d34:	83 c4 10             	add    esp,0x10
c0019d37:	83 ec 0c             	sub    esp,0xc
c0019d3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d3c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0019d40:	55                   	push   ebp
c0019d41:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0019d45:	57                   	push   edi
c0019d46:	6a 00                	push   0x0
c0019d48:	68 00 01 00 00       	push   0x100
c0019d4d:	53                   	push   ebx
c0019d4e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019d51:	83 c4 20             	add    esp,0x20
c0019d54:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019d5c:	75 4b                	jne    c0019da9 <KiIsSymlinkRegistered(char const*)+0x161>
c0019d5e:	83 ec 0c             	sub    esp,0xc
c0019d61:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d63:	55                   	push   ebp
c0019d64:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019d68:	52                   	push   edx
c0019d69:	6a 00                	push   0x0
c0019d6b:	6a 08                	push   0x8
c0019d6d:	53                   	push   ebx
c0019d6e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019d71:	83 c4 20             	add    esp,0x20
c0019d74:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019d79:	75 2e                	jne    c0019da9 <KiIsSymlinkRegistered(char const*)+0x161>
c0019d7b:	50                   	push   eax
c0019d7c:	50                   	push   eax
c0019d7d:	57                   	push   edi
c0019d7e:	56                   	push   esi
c0019d7f:	e8 cc 69 fe ff       	call   c0000750 <strcmp>
c0019d84:	83 c4 10             	add    esp,0x10
c0019d87:	85 c0                	test   eax,eax
c0019d89:	75 ac                	jne    c0019d37 <KiIsSymlinkRegistered(char const*)+0xef>
c0019d8b:	83 ec 0c             	sub    esp,0xc
c0019d8e:	53                   	push   ebx
c0019d8f:	e8 44 09 00 00       	call   c001a6d8 <File::close()>
c0019d94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d99:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019d9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019da0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019da4:	83 c4 10             	add    esp,0x10
c0019da7:	eb 18                	jmp    c0019dc1 <KiIsSymlinkRegistered(char const*)+0x179>
c0019da9:	83 ec 0c             	sub    esp,0xc
c0019dac:	53                   	push   ebx
c0019dad:	e8 26 09 00 00       	call   c001a6d8 <File::close()>
c0019db2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019db4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019db7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019dba:	83 c4 10             	add    esp,0x10
c0019dbd:	31 c0                	xor    eax,eax
c0019dbf:	31 d2                	xor    edx,edx
c0019dc1:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019dc7:	5b                   	pop    ebx
c0019dc8:	5e                   	pop    esi
c0019dc9:	5f                   	pop    edi
c0019dca:	5d                   	pop    ebp
c0019dcb:	c3                   	ret    

c0019dcc <KeDereferenceSymlink(char const*, char*)>:
c0019dcc:	55                   	push   ebp
c0019dcd:	57                   	push   edi
c0019dce:	56                   	push   esi
c0019dcf:	53                   	push   ebx
c0019dd0:	83 ec 48             	sub    esp,0x48
c0019dd3:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019dd7:	56                   	push   esi
c0019dd8:	e8 6b fe ff ff       	call   c0019c48 <KiIsSymlinkRegistered(char const*)>
c0019ddd:	83 c4 10             	add    esp,0x10
c0019de0:	89 c7                	mov    edi,eax
c0019de2:	89 d0                	mov    eax,edx
c0019de4:	09 f8                	or     eax,edi
c0019de6:	75 07                	jne    c0019def <KeDereferenceSymlink(char const*, char*)+0x23>
c0019de8:	31 c0                	xor    eax,eax
c0019dea:	e9 7c 01 00 00       	jmp    c0019f6b <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019def:	83 ec 0c             	sub    esp,0xc
c0019df2:	89 d5                	mov    ebp,edx
c0019df4:	68 14 01 00 00       	push   0x114
c0019df9:	e8 c9 c7 ff ff       	call   c00165c7 <malloc>
c0019dfe:	83 c4 0c             	add    esp,0xc
c0019e01:	89 c3                	mov    ebx,eax
c0019e03:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0019e09:	56                   	push   esi
c0019e0a:	50                   	push   eax
c0019e0b:	e8 4c 08 00 00       	call   c001a65c <File::File(char const*, Process*)>
c0019e10:	83 c4 10             	add    esp,0x10
c0019e13:	85 db                	test   ebx,ebx
c0019e15:	0f 84 32 01 00 00    	je     c0019f4d <KeDereferenceSymlink(char const*, char*)+0x181>
c0019e1b:	56                   	push   esi
c0019e1c:	56                   	push   esi
c0019e1d:	6a 01                	push   0x1
c0019e1f:	53                   	push   ebx
c0019e20:	e8 55 08 00 00       	call   c001a67a <File::open(FileOpenMode)>
c0019e25:	83 c4 10             	add    esp,0x10
c0019e28:	85 c0                	test   eax,eax
c0019e2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e2c:	74 09                	je     c0019e37 <KeDereferenceSymlink(char const*, char*)+0x6b>
c0019e2e:	83 ec 0c             	sub    esp,0xc
c0019e31:	53                   	push   ebx
c0019e32:	e9 10 01 00 00       	jmp    c0019f47 <KeDereferenceSymlink(char const*, char*)+0x17b>
c0019e37:	83 ec 0c             	sub    esp,0xc
c0019e3a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019e3e:	56                   	push   esi
c0019e3f:	8d 54 24 37          	lea    edx,[esp+0x37]
c0019e43:	52                   	push   edx
c0019e44:	6a 00                	push   0x0
c0019e46:	6a 08                	push   0x8
c0019e48:	53                   	push   ebx
c0019e49:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019e4c:	83 c4 20             	add    esp,0x20
c0019e4f:	85 c0                	test   eax,eax
c0019e51:	0f 85 e2 00 00 00    	jne    c0019f39 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019e57:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019e5c:	0f 85 d7 00 00 00    	jne    c0019f39 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019e62:	83 ec 0c             	sub    esp,0xc
c0019e65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e67:	56                   	push   esi
c0019e68:	8d 54 24 20          	lea    edx,[esp+0x20]
c0019e6c:	52                   	push   edx
c0019e6d:	6a 00                	push   0x0
c0019e6f:	6a 08                	push   0x8
c0019e71:	53                   	push   ebx
c0019e72:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019e75:	83 c4 20             	add    esp,0x20
c0019e78:	85 c0                	test   eax,eax
c0019e7a:	0f 85 b9 00 00 00    	jne    c0019f39 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019e80:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019e85:	0f 85 ae 00 00 00    	jne    c0019f39 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019e8b:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0019e8f:	0f 85 53 ff ff ff    	jne    c0019de8 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019e95:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0019e99:	0f 85 49 ff ff ff    	jne    c0019de8 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019e9f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019ea7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019eaf:	51                   	push   ecx
c0019eb0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0019eb4:	50                   	push   eax
c0019eb5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019eb9:	50                   	push   eax
c0019eba:	53                   	push   ebx
c0019ebb:	e8 bc 0a 00 00       	call   c001a97c <File::stat(unsigned long long*, bool*)>
c0019ec0:	83 c4 10             	add    esp,0x10
c0019ec3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019ec8:	75 6f                	jne    c0019f39 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019eca:	31 c9                	xor    ecx,ecx
c0019ecc:	bf 0f 00 00 00       	mov    edi,0xf
c0019ed1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ed5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019ed9:	39 c7                	cmp    edi,eax
c0019edb:	89 cf                	mov    edi,ecx
c0019edd:	19 d7                	sbb    edi,edx
c0019edf:	73 58                	jae    c0019f39 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019ee1:	83 c0 f0             	add    eax,0xfffffff0
c0019ee4:	bf ff 00 00 00       	mov    edi,0xff
c0019ee9:	83 d2 ff             	adc    edx,0xffffffff
c0019eec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019ef0:	39 c7                	cmp    edi,eax
c0019ef2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019ef6:	19 d1                	sbb    ecx,edx
c0019ef8:	72 53                	jb     c0019f4d <KeDereferenceSymlink(char const*, char*)+0x181>
c0019efa:	40                   	inc    eax
c0019efb:	52                   	push   edx
c0019efc:	50                   	push   eax
c0019efd:	6a 00                	push   0x0
c0019eff:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0019f03:	e8 e8 65 fe ff       	call   c00004f0 <memset>
c0019f08:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f0a:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f0d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0019f11:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019f15:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019f19:	53                   	push   ebx
c0019f1a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019f1d:	83 c4 20             	add    esp,0x20
c0019f20:	85 c0                	test   eax,eax
c0019f22:	75 15                	jne    c0019f39 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019f24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f28:	89 c7                	mov    edi,eax
c0019f2a:	c1 ff 1f             	sar    edi,0x1f
c0019f2d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0019f31:	75 06                	jne    c0019f39 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019f33:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019f37:	74 19                	je     c0019f52 <KeDereferenceSymlink(char const*, char*)+0x186>
c0019f39:	83 ec 0c             	sub    esp,0xc
c0019f3c:	53                   	push   ebx
c0019f3d:	e8 96 07 00 00       	call   c001a6d8 <File::close()>
c0019f42:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f47:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019f4a:	83 c4 10             	add    esp,0x10
c0019f4d:	83 c8 ff             	or     eax,0xffffffff
c0019f50:	eb 19                	jmp    c0019f6b <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019f52:	83 ec 0c             	sub    esp,0xc
c0019f55:	53                   	push   ebx
c0019f56:	e8 7d 07 00 00       	call   c001a6d8 <File::close()>
c0019f5b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f60:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019f63:	83 c4 10             	add    esp,0x10
c0019f66:	b8 01 00 00 00       	mov    eax,0x1
c0019f6b:	83 c4 3c             	add    esp,0x3c
c0019f6e:	5b                   	pop    ebx
c0019f6f:	5e                   	pop    esi
c0019f70:	5f                   	pop    edi
c0019f71:	5d                   	pop    ebp
c0019f72:	c3                   	ret    

c0019f73 <KeCreateSymlink(char const*, char const*)>:
c0019f73:	55                   	push   ebp
c0019f74:	57                   	push   edi
c0019f75:	56                   	push   esi
c0019f76:	53                   	push   ebx
c0019f77:	83 ec 38             	sub    esp,0x38
c0019f7a:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0019f7e:	68 14 01 00 00       	push   0x114
c0019f83:	e8 3f c6 ff ff       	call   c00165c7 <malloc>
c0019f88:	6a 00                	push   0x0
c0019f8a:	89 c3                	mov    ebx,eax
c0019f8c:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0019f92:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019f96:	50                   	push   eax
c0019f97:	e8 e2 05 00 00       	call   c001a57e <File::File(char const*, Process*, bool)>
c0019f9c:	83 c4 20             	add    esp,0x20
c0019f9f:	b8 01 00 00 00       	mov    eax,0x1
c0019fa4:	85 db                	test   ebx,ebx
c0019fa6:	0f 84 19 01 00 00    	je     c001a0c5 <KeCreateSymlink(char const*, char const*)+0x152>
c0019fac:	52                   	push   edx
c0019fad:	52                   	push   edx
c0019fae:	6a 12                	push   0x12
c0019fb0:	53                   	push   ebx
c0019fb1:	e8 c4 06 00 00       	call   c001a67a <File::open(FileOpenMode)>
c0019fb6:	83 c4 10             	add    esp,0x10
c0019fb9:	85 c0                	test   eax,eax
c0019fbb:	74 0b                	je     c0019fc8 <KeCreateSymlink(char const*, char const*)+0x55>
c0019fbd:	83 ec 0c             	sub    esp,0xc
c0019fc0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fc2:	53                   	push   ebx
c0019fc3:	e9 f2 00 00 00       	jmp    c001a0ba <KeCreateSymlink(char const*, char const*)+0x147>
c0019fc8:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0019fcc:	be fd 23 03 c0       	mov    esi,0xc00323fd
c0019fd1:	b9 09 00 00 00       	mov    ecx,0x9
c0019fd6:	fc                   	cld    
c0019fd7:	83 ec 0c             	sub    esp,0xc
c0019fda:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019fdc:	8d 74 24 10          	lea    esi,[esp+0x10]
c0019fe0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fe2:	56                   	push   esi
c0019fe3:	8d 54 24 27          	lea    edx,[esp+0x27]
c0019fe7:	52                   	push   edx
c0019fe8:	6a 00                	push   0x0
c0019fea:	6a 08                	push   0x8
c0019fec:	53                   	push   ebx
c0019fed:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019ff0:	83 c4 20             	add    esp,0x20
c0019ff3:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019ff8:	0f 85 ae 00 00 00    	jne    c001a0ac <KeCreateSymlink(char const*, char const*)+0x139>
c0019ffe:	85 c0                	test   eax,eax
c001a000:	0f 85 a6 00 00 00    	jne    c001a0ac <KeCreateSymlink(char const*, char const*)+0x139>
c001a006:	e8 ca f9 ff ff       	call   c00199d5 <KiCreateSymlinkID()>
c001a00b:	83 ec 0c             	sub    esp,0xc
c001a00e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a012:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a016:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a018:	56                   	push   esi
c001a019:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a01d:	52                   	push   edx
c001a01e:	6a 00                	push   0x0
c001a020:	6a 08                	push   0x8
c001a022:	53                   	push   ebx
c001a023:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a026:	83 c4 20             	add    esp,0x20
c001a029:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c001a02e:	75 7c                	jne    c001a0ac <KeCreateSymlink(char const*, char const*)+0x139>
c001a030:	85 c0                	test   eax,eax
c001a032:	75 78                	jne    c001a0ac <KeCreateSymlink(char const*, char const*)+0x139>
c001a034:	83 ec 0c             	sub    esp,0xc
c001a037:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a039:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001a03c:	55                   	push   ebp
c001a03d:	e8 2e 65 fe ff       	call   c0000570 <strlen>
c001a042:	89 34 24             	mov    DWORD PTR [esp],esi
c001a045:	31 d2                	xor    edx,edx
c001a047:	55                   	push   ebp
c001a048:	52                   	push   edx
c001a049:	50                   	push   eax
c001a04a:	53                   	push   ebx
c001a04b:	ff d7                	call   edi
c001a04d:	83 c4 14             	add    esp,0x14
c001a050:	89 c6                	mov    esi,eax
c001a052:	55                   	push   ebp
c001a053:	e8 18 65 fe ff       	call   c0000570 <strlen>
c001a058:	83 c4 10             	add    esp,0x10
c001a05b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a05f:	75 4b                	jne    c001a0ac <KeCreateSymlink(char const*, char const*)+0x139>
c001a061:	85 f6                	test   esi,esi
c001a063:	75 47                	jne    c001a0ac <KeCreateSymlink(char const*, char const*)+0x139>
c001a065:	50                   	push   eax
c001a066:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a06a:	55                   	push   ebp
c001a06b:	68 cb 23 03 c0       	push   0xc00323cb
c001a070:	e8 e0 f3 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001a075:	83 c4 0c             	add    esp,0xc
c001a078:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a07c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a080:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001a084:	e8 b9 f9 ff ff       	call   c0019a42 <KeRegisterSymlink(char const*, unsigned long long)>
c001a089:	c7 04 24 f0 23 03 c0 	mov    DWORD PTR [esp],0xc00323f0
c001a090:	e8 c0 f3 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001a095:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a098:	e8 3b 06 00 00       	call   c001a6d8 <File::close()>
c001a09d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a09f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a0a5:	83 c4 10             	add    esp,0x10
c001a0a8:	31 c0                	xor    eax,eax
c001a0aa:	eb 19                	jmp    c001a0c5 <KeCreateSymlink(char const*, char const*)+0x152>
c001a0ac:	83 ec 0c             	sub    esp,0xc
c001a0af:	53                   	push   ebx
c001a0b0:	e8 23 06 00 00       	call   c001a6d8 <File::close()>
c001a0b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a0bd:	83 c4 10             	add    esp,0x10
c001a0c0:	b8 01 00 00 00       	mov    eax,0x1
c001a0c5:	83 c4 2c             	add    esp,0x2c
c001a0c8:	5b                   	pop    ebx
c001a0c9:	5e                   	pop    esi
c001a0ca:	5f                   	pop    edi
c001a0cb:	5d                   	pop    ebp
c001a0cc:	c3                   	ret    
c001a0cd:	90                   	nop

c001a0ce <File::read(unsigned long long, void*, int*)>:
c001a0ce:	53                   	push   ebx
c001a0cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0d3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a0d7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a0de:	83 f8 19             	cmp    eax,0x19
c001a0e1:	77 35                	ja     c001a118 <File::read(unsigned long long, void*, int*)+0x4a>
c001a0e3:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001a0ea:	85 c0                	test   eax,eax
c001a0ec:	74 2a                	je     c001a118 <File::read(unsigned long long, void*, int*)+0x4a>
c001a0ee:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a0f4:	85 c0                	test   eax,eax
c001a0f6:	74 20                	je     c001a118 <File::read(unsigned long long, void*, int*)+0x4a>
c001a0f8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a0fc:	74 21                	je     c001a11f <File::read(unsigned long long, void*, int*)+0x51>
c001a0fe:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a100:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a104:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a10a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a10e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a112:	5b                   	pop    ebx
c001a113:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001a116:	ff e0                	jmp    eax
c001a118:	b8 0b 00 00 00       	mov    eax,0xb
c001a11d:	eb 05                	jmp    c001a124 <File::read(unsigned long long, void*, int*)+0x56>
c001a11f:	b8 05 00 00 00       	mov    eax,0x5
c001a124:	5b                   	pop    ebx
c001a125:	c3                   	ret    

c001a126 <File::write(unsigned long long, void*, int*)>:
c001a126:	53                   	push   ebx
c001a127:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a12b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a12f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a136:	83 f8 19             	cmp    eax,0x19
c001a139:	77 35                	ja     c001a170 <File::write(unsigned long long, void*, int*)+0x4a>
c001a13b:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001a142:	85 c0                	test   eax,eax
c001a144:	74 2a                	je     c001a170 <File::write(unsigned long long, void*, int*)+0x4a>
c001a146:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a14c:	85 c0                	test   eax,eax
c001a14e:	74 20                	je     c001a170 <File::write(unsigned long long, void*, int*)+0x4a>
c001a150:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a154:	74 21                	je     c001a177 <File::write(unsigned long long, void*, int*)+0x51>
c001a156:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a158:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a15c:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a162:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a166:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a16a:	5b                   	pop    ebx
c001a16b:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001a16e:	ff e0                	jmp    eax
c001a170:	b8 0b 00 00 00       	mov    eax,0xb
c001a175:	eb 05                	jmp    c001a17c <File::write(unsigned long long, void*, int*)+0x56>
c001a177:	b8 05 00 00 00       	mov    eax,0x5
c001a17c:	5b                   	pop    ebx
c001a17d:	c3                   	ret    

c001a17e <Directory::read(unsigned long long, void*, int*)>:
c001a17e:	53                   	push   ebx
c001a17f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a183:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a187:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a18e:	83 f8 19             	cmp    eax,0x19
c001a191:	77 35                	ja     c001a1c8 <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a193:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001a19a:	85 c0                	test   eax,eax
c001a19c:	74 2a                	je     c001a1c8 <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a19e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a1a4:	85 c0                	test   eax,eax
c001a1a6:	74 20                	je     c001a1c8 <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a1a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a1ac:	74 21                	je     c001a1cf <Directory::read(unsigned long long, void*, int*)+0x51>
c001a1ae:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a1b0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a1b4:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a1ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a1be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a1c2:	5b                   	pop    ebx
c001a1c3:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c001a1c6:	ff e0                	jmp    eax
c001a1c8:	b8 0b 00 00 00       	mov    eax,0xb
c001a1cd:	eb 05                	jmp    c001a1d4 <Directory::read(unsigned long long, void*, int*)+0x56>
c001a1cf:	b8 05 00 00 00       	mov    eax,0x5
c001a1d4:	5b                   	pop    ebx
c001a1d5:	c3                   	ret    

c001a1d6 <Directory::write(unsigned long long, void*, int*)>:
c001a1d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1da:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001a1e1:	b8 0b 00 00 00       	mov    eax,0xb
c001a1e6:	83 fa 19             	cmp    edx,0x19
c001a1e9:	77 18                	ja     c001a203 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001a1eb:	8b 14 95 80 03 04 c0 	mov    edx,DWORD PTR [edx*4-0x3ffbfc80]
c001a1f2:	85 d2                	test   edx,edx
c001a1f4:	74 0d                	je     c001a203 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001a1f6:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c001a1fd:	19 c0                	sbb    eax,eax
c001a1ff:	83 e0 0a             	and    eax,0xa
c001a202:	40                   	inc    eax
c001a203:	c3                   	ret    

c001a204 <File::isAtty()>:
c001a204:	31 c0                	xor    eax,eax
c001a206:	c3                   	ret    
c001a207:	90                   	nop

c001a208 <Directory::isAtty()>:
c001a208:	31 c0                	xor    eax,eax
c001a20a:	c3                   	ret    
c001a20b:	90                   	nop

c001a20c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a20c:	b8 0a 00 00 00       	mov    eax,0xa
c001a211:	c3                   	ret    

c001a212 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001a212:	b8 0a 00 00 00       	mov    eax,0xa
c001a217:	c3                   	ret    

c001a218 <Filesystem::allocateSwapfile(char const*, int)>:
c001a218:	31 c0                	xor    eax,eax
c001a21a:	31 d2                	xor    edx,edx
c001a21c:	c3                   	ret    
c001a21d:	90                   	nop

c001a21e <File::~File()>:
c001a21e:	83 ec 0c             	sub    esp,0xc
c001a221:	ba bc 24 03 c0       	mov    edx,0xc00324bc
c001a226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a22a:	89 10                	mov    DWORD PTR [eax],edx
c001a22c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a230:	83 ec 0c             	sub    esp,0xc
c001a233:	50                   	push   eax
c001a234:	e8 7b dc ff ff       	call   c0017eb4 <UnixFile::~UnixFile()>
c001a239:	83 c4 10             	add    esp,0x10
c001a23c:	90                   	nop
c001a23d:	83 c4 0c             	add    esp,0xc
c001a240:	c3                   	ret    
c001a241:	90                   	nop

c001a242 <File::~File()>:
c001a242:	83 ec 0c             	sub    esp,0xc
c001a245:	83 ec 0c             	sub    esp,0xc
c001a248:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a24c:	e8 cd ff ff ff       	call   c001a21e <File::~File()>
c001a251:	83 c4 10             	add    esp,0x10
c001a254:	83 ec 08             	sub    esp,0x8
c001a257:	68 14 01 00 00       	push   0x114
c001a25c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a260:	e8 c3 f0 ff ff       	call   c0019328 <operator delete(void*, unsigned long)>
c001a265:	83 c4 10             	add    esp,0x10
c001a268:	83 c4 0c             	add    esp,0xc
c001a26b:	c3                   	ret    

c001a26c <Directory::~Directory()>:
c001a26c:	83 ec 0c             	sub    esp,0xc
c001a26f:	ba d8 24 03 c0       	mov    edx,0xc00324d8
c001a274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a278:	89 10                	mov    DWORD PTR [eax],edx
c001a27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a27e:	83 ec 0c             	sub    esp,0xc
c001a281:	50                   	push   eax
c001a282:	e8 2d dc ff ff       	call   c0017eb4 <UnixFile::~UnixFile()>
c001a287:	83 c4 10             	add    esp,0x10
c001a28a:	90                   	nop
c001a28b:	83 c4 0c             	add    esp,0xc
c001a28e:	c3                   	ret    
c001a28f:	90                   	nop

c001a290 <Directory::~Directory()>:
c001a290:	83 ec 0c             	sub    esp,0xc
c001a293:	83 ec 0c             	sub    esp,0xc
c001a296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a29a:	e8 cd ff ff ff       	call   c001a26c <Directory::~Directory()>
c001a29f:	83 c4 10             	add    esp,0x10
c001a2a2:	83 ec 08             	sub    esp,0x8
c001a2a5:	68 14 01 00 00       	push   0x114
c001a2aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2ae:	e8 75 f0 ff ff       	call   c0019328 <operator delete(void*, unsigned long)>
c001a2b3:	83 c4 10             	add    esp,0x10
c001a2b6:	83 c4 0c             	add    esp,0xc
c001a2b9:	c3                   	ret    

c001a2ba <Filesystem::Filesystem()>:
c001a2ba:	ba 50 24 03 c0       	mov    edx,0xc0032450
c001a2bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2c3:	89 10                	mov    DWORD PTR [eax],edx
c001a2c5:	8b 15 04 df 03 c0    	mov    edx,DWORD PTR ds:0xc003df04
c001a2cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2cf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a2d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2d6:	a3 04 df 03 c0       	mov    ds:0xc003df04,eax
c001a2db:	90                   	nop
c001a2dc:	c3                   	ret    
c001a2dd:	90                   	nop

c001a2de <Filesystem::~Filesystem()>:
c001a2de:	ba 50 24 03 c0       	mov    edx,0xc0032450
c001a2e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2e7:	89 10                	mov    DWORD PTR [eax],edx
c001a2e9:	90                   	nop
c001a2ea:	c3                   	ret    
c001a2eb:	90                   	nop

c001a2ec <Filesystem::~Filesystem()>:
c001a2ec:	83 ec 0c             	sub    esp,0xc
c001a2ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a2f3:	e8 e6 ff ff ff       	call   c001a2de <Filesystem::~Filesystem()>
c001a2f8:	83 c4 04             	add    esp,0x4
c001a2fb:	83 ec 08             	sub    esp,0x8
c001a2fe:	6a 08                	push   0x8
c001a300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a304:	e8 1f f0 ff ff       	call   c0019328 <operator delete(void*, unsigned long)>
c001a309:	83 c4 10             	add    esp,0x10
c001a30c:	83 c4 0c             	add    esp,0xc
c001a30f:	c3                   	ret    

c001a310 <Fs::getcwd(Process*, char*, int)>:
c001a310:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a314:	31 c0                	xor    eax,eax
c001a316:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a319:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001a31d:	7d 15                	jge    c001a334 <Fs::getcwd(Process*, char*, int)+0x24>
c001a31f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a323:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001a32a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001a32d:	84 c9                	test   cl,cl
c001a32f:	74 06                	je     c001a337 <Fs::getcwd(Process*, char*, int)+0x27>
c001a331:	40                   	inc    eax
c001a332:	eb e2                	jmp    c001a316 <Fs::getcwd(Process*, char*, int)+0x6>
c001a334:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001a337:	31 c0                	xor    eax,eax
c001a339:	c3                   	ret    

c001a33a <Fs::initVFS()>:
c001a33a:	83 ec 18             	sub    esp,0x18
c001a33d:	6a 08                	push   0x8
c001a33f:	e8 83 c2 ff ff       	call   c00165c7 <malloc>
c001a344:	89 04 24             	mov    DWORD PTR [esp],eax
c001a347:	e8 ec ed 00 00       	call   c0029138 <FAT::FAT()>
c001a34c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a353:	e8 6f c2 ff ff       	call   c00165c7 <malloc>
c001a358:	89 04 24             	mov    DWORD PTR [esp],eax
c001a35b:	e8 04 fd 00 00       	call   c002a064 <ISO9660::ISO9660()>
c001a360:	83 c4 1c             	add    esp,0x1c
c001a363:	c3                   	ret    

c001a364 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c001a364:	55                   	push   ebp
c001a365:	57                   	push   edi
c001a366:	56                   	push   esi
c001a367:	53                   	push   ebx
c001a368:	81 ec 10 04 00 00    	sub    esp,0x410
c001a36e:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c001a375:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c001a37c:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c001a384:	68 00 04 00 00       	push   0x400
c001a389:	6a 00                	push   0x0
c001a38b:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a38f:	57                   	push   edi
c001a390:	e8 5b 61 fe ff       	call   c00004f0 <memset>
c001a395:	83 c4 10             	add    esp,0x10
c001a398:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c001a39c:	75 0b                	jne    c001a3a9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c001a39e:	50                   	push   eax
c001a39f:	50                   	push   eax
c001a3a0:	55                   	push   ebp
c001a3a1:	57                   	push   edi
c001a3a2:	e8 99 62 fe ff       	call   c0000640 <strcpy>
c001a3a7:	eb 51                	jmp    c001a3fa <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c001a3a9:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001a3ad:	83 f8 5c             	cmp    eax,0x5c
c001a3b0:	74 05                	je     c001a3b7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c001a3b2:	83 f8 2f             	cmp    eax,0x2f
c001a3b5:	75 1e                	jne    c001a3d5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c001a3b7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001a3be:	8a 00                	mov    al,BYTE PTR [eax]
c001a3c0:	3c 60                	cmp    al,0x60
c001a3c2:	7e 03                	jle    c001a3c7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c001a3c4:	83 e8 20             	sub    eax,0x20
c001a3c7:	88 04 24             	mov    BYTE PTR [esp],al
c001a3ca:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001a3d1:	50                   	push   eax
c001a3d2:	50                   	push   eax
c001a3d3:	eb 1e                	jmp    c001a3f3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c001a3d5:	50                   	push   eax
c001a3d6:	50                   	push   eax
c001a3d7:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c001a3de:	57                   	push   edi
c001a3df:	e8 5c 62 fe ff       	call   c0000640 <strcpy>
c001a3e4:	58                   	pop    eax
c001a3e5:	5a                   	pop    edx
c001a3e6:	68 5f 36 03 c0       	push   0xc003365f
c001a3eb:	57                   	push   edi
c001a3ec:	e8 4f 64 fe ff       	call   c0000840 <strcat>
c001a3f1:	59                   	pop    ecx
c001a3f2:	58                   	pop    eax
c001a3f3:	55                   	push   ebp
c001a3f4:	57                   	push   edi
c001a3f5:	e8 46 64 fe ff       	call   c0000840 <strcat>
c001a3fa:	83 c4 10             	add    esp,0x10
c001a3fd:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a400:	3c 60                	cmp    al,0x60
c001a402:	7e 03                	jle    c001a407 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c001a404:	83 e8 20             	sub    eax,0x20
c001a407:	88 04 24             	mov    BYTE PTR [esp],al
c001a40a:	88 06                	mov    BYTE PTR [esi],al
c001a40c:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001a413:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c001a419:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c001a41d:	bf 03 00 00 00       	mov    edi,0x3
c001a422:	b8 03 00 00 00       	mov    eax,0x3
c001a427:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c001a42b:	89 e9                	mov    ecx,ebp
c001a42d:	85 ed                	test   ebp,ebp
c001a42f:	0f 84 97 00 00 00    	je     c001a4cc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c001a435:	8d 57 01             	lea    edx,[edi+0x1]
c001a438:	83 fd 5c             	cmp    ebp,0x5c
c001a43b:	74 05                	je     c001a442 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c001a43d:	83 fd 2f             	cmp    ebp,0x2f
c001a440:	75 12                	jne    c001a454 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a442:	89 c5                	mov    ebp,eax
c001a444:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c001a449:	74 09                	je     c001a454 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a44b:	40                   	inc    eax
c001a44c:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c001a450:	89 d7                	mov    edi,edx
c001a452:	eb d3                	jmp    c001a427 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c001a454:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c001a459:	0f be e9             	movsx  ebp,cl
c001a45c:	75 5e                	jne    c001a4bc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c001a45e:	83 fd 2e             	cmp    ebp,0x2e
c001a461:	75 59                	jne    c001a4bc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c001a463:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c001a467:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c001a46c:	74 18                	je     c001a486 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c001a46e:	83 fd 2e             	cmp    ebp,0x2e
c001a471:	74 53                	je     c001a4c6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c001a473:	89 fa                	mov    edx,edi
c001a475:	42                   	inc    edx
c001a476:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c001a47a:	83 f9 2f             	cmp    ecx,0x2f
c001a47d:	74 f6                	je     c001a475 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c001a47f:	83 f9 5c             	cmp    ecx,0x5c
c001a482:	74 f1                	je     c001a475 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c001a484:	eb ca                	jmp    c001a450 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a486:	83 fd 2e             	cmp    ebp,0x2e
c001a489:	74 3b                	je     c001a4c6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c001a48b:	83 f8 03             	cmp    eax,0x3
c001a48e:	74 c0                	je     c001a450 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a490:	42                   	inc    edx
c001a491:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c001a495:	83 f9 5c             	cmp    ecx,0x5c
c001a498:	74 f6                	je     c001a490 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c001a49a:	83 f9 2f             	cmp    ecx,0x2f
c001a49d:	74 f1                	je     c001a490 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c001a49f:	48                   	dec    eax
c001a4a0:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c001a4a4:	75 06                	jne    c001a4ac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c001a4a6:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a4aa:	eb f3                	jmp    c001a49f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c001a4ac:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c001a4b0:	74 07                	je     c001a4b9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c001a4b2:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a4b6:	48                   	dec    eax
c001a4b7:	eb f3                	jmp    c001a4ac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c001a4b9:	40                   	inc    eax
c001a4ba:	eb 94                	jmp    c001a450 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a4bc:	83 fd 5c             	cmp    ebp,0x5c
c001a4bf:	74 8f                	je     c001a450 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a4c1:	83 fd 2f             	cmp    ebp,0x2f
c001a4c4:	74 8a                	je     c001a450 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a4c6:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c001a4c9:	40                   	inc    eax
c001a4ca:	eb 84                	jmp    c001a450 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a4cc:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a4d0:	83 ec 0c             	sub    esp,0xc
c001a4d3:	56                   	push   esi
c001a4d4:	e8 97 60 fe ff       	call   c0000570 <strlen>
c001a4d9:	83 c4 10             	add    esp,0x10
c001a4dc:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c001a4e1:	74 17                	je     c001a4fa <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c001a4e3:	83 ec 0c             	sub    esp,0xc
c001a4e6:	56                   	push   esi
c001a4e7:	e8 84 60 fe ff       	call   c0000570 <strlen>
c001a4ec:	83 c4 10             	add    esp,0x10
c001a4ef:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c001a4f4:	74 04                	je     c001a4fa <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c001a4f6:	31 ff                	xor    edi,edi
c001a4f8:	eb 5c                	jmp    c001a556 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c001a4fa:	83 ec 0c             	sub    esp,0xc
c001a4fd:	56                   	push   esi
c001a4fe:	e8 6d 60 fe ff       	call   c0000570 <strlen>
c001a503:	83 c4 10             	add    esp,0x10
c001a506:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c001a50b:	74 e9                	je     c001a4f6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c001a50d:	83 ec 0c             	sub    esp,0xc
c001a510:	56                   	push   esi
c001a511:	e8 5a 60 fe ff       	call   c0000570 <strlen>
c001a516:	83 c4 10             	add    esp,0x10
c001a519:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c001a51e:	eb b0                	jmp    c001a4d0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c001a520:	52                   	push   edx
c001a521:	52                   	push   edx
c001a522:	56                   	push   esi
c001a523:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c001a527:	55                   	push   ebp
c001a528:	e8 13 61 fe ff       	call   c0000640 <strcpy>
c001a52d:	59                   	pop    ecx
c001a52e:	58                   	pop    eax
c001a52f:	56                   	push   esi
c001a530:	55                   	push   ebp
c001a531:	e8 96 f8 ff ff       	call   c0019dcc <KeDereferenceSymlink(char const*, char*)>
c001a536:	83 c4 10             	add    esp,0x10
c001a539:	48                   	dec    eax
c001a53a:	75 37                	jne    c001a573 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c001a53c:	50                   	push   eax
c001a53d:	56                   	push   esi
c001a53e:	55                   	push   ebp
c001a53f:	68 06 24 03 c0       	push   0xc0032406
c001a544:	e8 0c ef ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001a549:	83 c4 10             	add    esp,0x10
c001a54c:	8d 47 01             	lea    eax,[edi+0x1]
c001a54f:	83 ff 14             	cmp    edi,0x14
c001a552:	74 08                	je     c001a55c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c001a554:	89 c7                	mov    edi,eax
c001a556:	85 db                	test   ebx,ebx
c001a558:	75 c6                	jne    c001a520 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c001a55a:	eb 17                	jmp    c001a573 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c001a55c:	83 ec 0c             	sub    esp,0xc
c001a55f:	bf 15 00 00 00       	mov    edi,0x15
c001a564:	68 21 24 03 c0       	push   0xc0032421
c001a569:	e8 20 62 00 00       	call   c002078e <KePanic(char const*)>
c001a56e:	83 c4 10             	add    esp,0x10
c001a571:	eb e3                	jmp    c001a556 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c001a573:	81 c4 0c 04 00 00    	add    esp,0x40c
c001a579:	5b                   	pop    ebx
c001a57a:	5e                   	pop    esi
c001a57b:	5f                   	pop    edi
c001a57c:	5d                   	pop    ebp
c001a57d:	c3                   	ret    

c001a57e <File::File(char const*, Process*, bool)>:
c001a57e:	83 ec 1c             	sub    esp,0x1c
c001a581:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a585:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a589:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a58d:	83 ec 08             	sub    esp,0x8
c001a590:	6a 00                	push   0x0
c001a592:	50                   	push   eax
c001a593:	e8 36 d7 ff ff       	call   c0017cce <UnixFile::UnixFile(int)>
c001a598:	83 c4 10             	add    esp,0x10
c001a59b:	ba bc 24 03 c0       	mov    edx,0xc00324bc
c001a5a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5a4:	89 10                	mov    DWORD PTR [eax],edx
c001a5a6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a5ab:	85 c0                	test   eax,eax
c001a5ad:	74 0f                	je     c001a5be <File::File(char const*, Process*, bool)+0x40>
c001a5af:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c001a5b4:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a5b8:	74 04                	je     c001a5be <File::File(char const*, Process*, bool)+0x40>
c001a5ba:	b0 01                	mov    al,0x1
c001a5bc:	eb 02                	jmp    c001a5c0 <File::File(char const*, Process*, bool)+0x42>
c001a5be:	b0 00                	mov    al,0x0
c001a5c0:	0f b6 c0             	movzx  eax,al
c001a5c3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a5c7:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a5cd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a5d1:	83 c2 0d             	add    edx,0xd
c001a5d4:	50                   	push   eax
c001a5d5:	51                   	push   ecx
c001a5d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a5da:	52                   	push   edx
c001a5db:	e8 84 fd ff ff       	call   c001a364 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a5e0:	83 c4 10             	add    esp,0x10
c001a5e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5e7:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a5ea:	83 e8 41             	sub    eax,0x41
c001a5ed:	88 c2                	mov    dl,al
c001a5ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5f3:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a5f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5fd:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a601:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a605:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a60b:	0f b6 c0             	movzx  eax,al
c001a60e:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001a615:	85 c0                	test   eax,eax
c001a617:	74 3e                	je     c001a657 <File::File(char const*, Process*, bool)+0xd9>
c001a619:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a61d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a623:	0f b6 c0             	movzx  eax,al
c001a626:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001a62d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a633:	85 c0                	test   eax,eax
c001a635:	75 20                	jne    c001a657 <File::File(char const*, Process*, bool)+0xd9>
c001a637:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a63b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a641:	0f b6 c0             	movzx  eax,al
c001a644:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001a64b:	83 ec 0c             	sub    esp,0xc
c001a64e:	50                   	push   eax
c001a64f:	e8 ee 22 00 00       	call   c001c942 <LogicalDisk::mount()>
c001a654:	83 c4 10             	add    esp,0x10
c001a657:	90                   	nop
c001a658:	83 c4 1c             	add    esp,0x1c
c001a65b:	c3                   	ret    

c001a65c <File::File(char const*, Process*)>:
c001a65c:	83 ec 0c             	sub    esp,0xc
c001a65f:	6a 01                	push   0x1
c001a661:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a665:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a669:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a66d:	e8 0c ff ff ff       	call   c001a57e <File::File(char const*, Process*, bool)>
c001a672:	83 c4 10             	add    esp,0x10
c001a675:	90                   	nop
c001a676:	83 c4 0c             	add    esp,0xc
c001a679:	c3                   	ret    

c001a67a <File::open(FileOpenMode)>:
c001a67a:	53                   	push   ebx
c001a67b:	b8 0b 00 00 00       	mov    eax,0xb
c001a680:	83 ec 08             	sub    esp,0x8
c001a683:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a687:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001a68e:	83 fa 19             	cmp    edx,0x19
c001a691:	77 40                	ja     c001a6d3 <File::open(FileOpenMode)+0x59>
c001a693:	8b 14 95 80 03 04 c0 	mov    edx,DWORD PTR [edx*4-0x3ffbfc80]
c001a69a:	85 d2                	test   edx,edx
c001a69c:	74 35                	je     c001a6d3 <File::open(FileOpenMode)+0x59>
c001a69e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a6a4:	85 d2                	test   edx,edx
c001a6a6:	74 2b                	je     c001a6d3 <File::open(FileOpenMode)+0x59>
c001a6a8:	b8 06 00 00 00       	mov    eax,0x6
c001a6ad:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001a6b1:	75 20                	jne    c001a6d3 <File::open(FileOpenMode)+0x59>
c001a6b3:	8b 02                	mov    eax,DWORD PTR [edx]
c001a6b5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001a6bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a6bf:	51                   	push   ecx
c001a6c0:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001a6c3:	51                   	push   ecx
c001a6c4:	52                   	push   edx
c001a6c5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a6c8:	83 c4 10             	add    esp,0x10
c001a6cb:	85 c0                	test   eax,eax
c001a6cd:	75 04                	jne    c001a6d3 <File::open(FileOpenMode)+0x59>
c001a6cf:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001a6d3:	83 c4 08             	add    esp,0x8
c001a6d6:	5b                   	pop    ebx
c001a6d7:	c3                   	ret    

c001a6d8 <File::close()>:
c001a6d8:	53                   	push   ebx
c001a6d9:	b8 0b 00 00 00       	mov    eax,0xb
c001a6de:	83 ec 08             	sub    esp,0x8
c001a6e1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a6e5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a6ec:	83 f9 19             	cmp    ecx,0x19
c001a6ef:	77 41                	ja     c001a732 <File::close()+0x5a>
c001a6f1:	8b 1c 8d 80 03 04 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffbfc80]
c001a6f8:	85 db                	test   ebx,ebx
c001a6fa:	74 36                	je     c001a732 <File::close()+0x5a>
c001a6fc:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001a703:	74 2d                	je     c001a732 <File::close()+0x5a>
c001a705:	b8 05 00 00 00       	mov    eax,0x5
c001a70a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a70e:	74 22                	je     c001a732 <File::close()+0x5a>
c001a710:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001a714:	8b 04 8d 80 03 04 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffbfc80]
c001a71b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a721:	53                   	push   ebx
c001a722:	53                   	push   ebx
c001a723:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a725:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a72b:	50                   	push   eax
c001a72c:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c001a72f:	83 c4 10             	add    esp,0x10
c001a732:	83 c4 08             	add    esp,0x8
c001a735:	5b                   	pop    ebx
c001a736:	c3                   	ret    
c001a737:	90                   	nop

c001a738 <File::seek(unsigned long long)>:
c001a738:	56                   	push   esi
c001a739:	53                   	push   ebx
c001a73a:	b8 0b 00 00 00       	mov    eax,0xb
c001a73f:	51                   	push   ecx
c001a740:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a744:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a748:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a74f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a753:	83 fa 19             	cmp    edx,0x19
c001a756:	77 31                	ja     c001a789 <File::seek(unsigned long long)+0x51>
c001a758:	8b 14 95 80 03 04 c0 	mov    edx,DWORD PTR [edx*4-0x3ffbfc80]
c001a75f:	85 d2                	test   edx,edx
c001a761:	74 26                	je     c001a789 <File::seek(unsigned long long)+0x51>
c001a763:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a769:	85 d2                	test   edx,edx
c001a76b:	74 1c                	je     c001a789 <File::seek(unsigned long long)+0x51>
c001a76d:	b8 05 00 00 00       	mov    eax,0x5
c001a772:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a776:	74 11                	je     c001a789 <File::seek(unsigned long long)+0x51>
c001a778:	8b 02                	mov    eax,DWORD PTR [edx]
c001a77a:	53                   	push   ebx
c001a77b:	51                   	push   ecx
c001a77c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a782:	52                   	push   edx
c001a783:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a786:	83 c4 10             	add    esp,0x10
c001a789:	5a                   	pop    edx
c001a78a:	5b                   	pop    ebx
c001a78b:	5e                   	pop    esi
c001a78c:	c3                   	ret    
c001a78d:	90                   	nop

c001a78e <File::truncate(unsigned long long)>:
c001a78e:	56                   	push   esi
c001a78f:	53                   	push   ebx
c001a790:	b8 0b 00 00 00       	mov    eax,0xb
c001a795:	51                   	push   ecx
c001a796:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a79a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a79e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a7a5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a7a9:	83 fa 19             	cmp    edx,0x19
c001a7ac:	77 31                	ja     c001a7df <File::truncate(unsigned long long)+0x51>
c001a7ae:	8b 14 95 80 03 04 c0 	mov    edx,DWORD PTR [edx*4-0x3ffbfc80]
c001a7b5:	85 d2                	test   edx,edx
c001a7b7:	74 26                	je     c001a7df <File::truncate(unsigned long long)+0x51>
c001a7b9:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a7bf:	85 d2                	test   edx,edx
c001a7c1:	74 1c                	je     c001a7df <File::truncate(unsigned long long)+0x51>
c001a7c3:	b8 05 00 00 00       	mov    eax,0x5
c001a7c8:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a7cc:	74 11                	je     c001a7df <File::truncate(unsigned long long)+0x51>
c001a7ce:	8b 02                	mov    eax,DWORD PTR [edx]
c001a7d0:	53                   	push   ebx
c001a7d1:	51                   	push   ecx
c001a7d2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a7d8:	52                   	push   edx
c001a7d9:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001a7dc:	83 c4 10             	add    esp,0x10
c001a7df:	5a                   	pop    edx
c001a7e0:	5b                   	pop    ebx
c001a7e1:	5e                   	pop    esi
c001a7e2:	c3                   	ret    
c001a7e3:	90                   	nop

c001a7e4 <File::tell(unsigned long long*)>:
c001a7e4:	83 ec 0c             	sub    esp,0xc
c001a7e7:	b8 0b 00 00 00       	mov    eax,0xb
c001a7ec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a7f0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001a7f7:	83 fa 19             	cmp    edx,0x19
c001a7fa:	77 34                	ja     c001a830 <File::tell(unsigned long long*)+0x4c>
c001a7fc:	8b 14 95 80 03 04 c0 	mov    edx,DWORD PTR [edx*4-0x3ffbfc80]
c001a803:	85 d2                	test   edx,edx
c001a805:	74 29                	je     c001a830 <File::tell(unsigned long long*)+0x4c>
c001a807:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a80d:	85 d2                	test   edx,edx
c001a80f:	74 1f                	je     c001a830 <File::tell(unsigned long long*)+0x4c>
c001a811:	b8 05 00 00 00       	mov    eax,0x5
c001a816:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001a81a:	74 14                	je     c001a830 <File::tell(unsigned long long*)+0x4c>
c001a81c:	50                   	push   eax
c001a81d:	8b 02                	mov    eax,DWORD PTR [edx]
c001a81f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a823:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001a829:	52                   	push   edx
c001a82a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a82d:	83 c4 10             	add    esp,0x10
c001a830:	83 c4 0c             	add    esp,0xc
c001a833:	c3                   	ret    

c001a834 <File::rewind()>:
c001a834:	83 ec 10             	sub    esp,0x10
c001a837:	6a 00                	push   0x0
c001a839:	6a 00                	push   0x0
c001a83b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a83f:	e8 f4 fe ff ff       	call   c001a738 <File::seek(unsigned long long)>
c001a844:	83 c4 1c             	add    esp,0x1c
c001a847:	c3                   	ret    

c001a848 <File::unlink()>:
c001a848:	83 ec 0c             	sub    esp,0xc
c001a84b:	b8 0b 00 00 00       	mov    eax,0xb
c001a850:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a854:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a85b:	83 f9 19             	cmp    ecx,0x19
c001a85e:	77 2f                	ja     c001a88f <File::unlink()+0x47>
c001a860:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001a867:	85 c9                	test   ecx,ecx
c001a869:	74 24                	je     c001a88f <File::unlink()+0x47>
c001a86b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a871:	85 c9                	test   ecx,ecx
c001a873:	74 1a                	je     c001a88f <File::unlink()+0x47>
c001a875:	b8 06 00 00 00       	mov    eax,0x6
c001a87a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a87e:	75 0f                	jne    c001a88f <File::unlink()+0x47>
c001a880:	83 c2 0d             	add    edx,0xd
c001a883:	50                   	push   eax
c001a884:	50                   	push   eax
c001a885:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a887:	52                   	push   edx
c001a888:	51                   	push   ecx
c001a889:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001a88c:	83 c4 10             	add    esp,0x10
c001a88f:	83 c4 0c             	add    esp,0xc
c001a892:	c3                   	ret    
c001a893:	90                   	nop

c001a894 <File::rename(char const*)>:
c001a894:	83 ec 0c             	sub    esp,0xc
c001a897:	b8 0b 00 00 00       	mov    eax,0xb
c001a89c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a8a0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a8a7:	83 f9 19             	cmp    ecx,0x19
c001a8aa:	77 32                	ja     c001a8de <File::rename(char const*)+0x4a>
c001a8ac:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001a8b3:	85 c9                	test   ecx,ecx
c001a8b5:	74 27                	je     c001a8de <File::rename(char const*)+0x4a>
c001a8b7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a8bd:	85 c9                	test   ecx,ecx
c001a8bf:	74 1d                	je     c001a8de <File::rename(char const*)+0x4a>
c001a8c1:	b8 06 00 00 00       	mov    eax,0x6
c001a8c6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a8ca:	75 12                	jne    c001a8de <File::rename(char const*)+0x4a>
c001a8cc:	83 c2 0d             	add    edx,0xd
c001a8cf:	50                   	push   eax
c001a8d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a8d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a8d6:	52                   	push   edx
c001a8d7:	51                   	push   ecx
c001a8d8:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001a8db:	83 c4 10             	add    esp,0x10
c001a8de:	83 c4 0c             	add    esp,0xc
c001a8e1:	c3                   	ret    

c001a8e2 <File::chfatattr(unsigned char, unsigned char)>:
c001a8e2:	57                   	push   edi
c001a8e3:	b8 0b 00 00 00       	mov    eax,0xb
c001a8e8:	56                   	push   esi
c001a8e9:	53                   	push   ebx
c001a8ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a8ee:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a8f2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a8f9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a8fd:	83 f9 19             	cmp    ecx,0x19
c001a900:	77 37                	ja     c001a939 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a902:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001a909:	85 c9                	test   ecx,ecx
c001a90b:	74 2c                	je     c001a939 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a90d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a913:	85 c9                	test   ecx,ecx
c001a915:	74 22                	je     c001a939 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a917:	b8 06 00 00 00       	mov    eax,0x6
c001a91c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a920:	75 17                	jne    c001a939 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a922:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a924:	89 f0                	mov    eax,esi
c001a926:	83 c2 0d             	add    edx,0xd
c001a929:	0f b6 f0             	movzx  esi,al
c001a92c:	0f b6 db             	movzx  ebx,bl
c001a92f:	56                   	push   esi
c001a930:	53                   	push   ebx
c001a931:	52                   	push   edx
c001a932:	51                   	push   ecx
c001a933:	ff 57 38             	call   DWORD PTR [edi+0x38]
c001a936:	83 c4 10             	add    esp,0x10
c001a939:	5b                   	pop    ebx
c001a93a:	5e                   	pop    esi
c001a93b:	5f                   	pop    edi
c001a93c:	c3                   	ret    
c001a93d:	90                   	nop

c001a93e <File::exists()>:
c001a93e:	83 ec 0c             	sub    esp,0xc
c001a941:	31 c0                	xor    eax,eax
c001a943:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a947:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a94e:	83 f9 19             	cmp    ecx,0x19
c001a951:	77 24                	ja     c001a977 <File::exists()+0x39>
c001a953:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001a95a:	85 c9                	test   ecx,ecx
c001a95c:	74 19                	je     c001a977 <File::exists()+0x39>
c001a95e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a964:	85 c9                	test   ecx,ecx
c001a966:	74 0f                	je     c001a977 <File::exists()+0x39>
c001a968:	83 c2 0d             	add    edx,0xd
c001a96b:	50                   	push   eax
c001a96c:	50                   	push   eax
c001a96d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a96f:	52                   	push   edx
c001a970:	51                   	push   ecx
c001a971:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001a974:	83 c4 10             	add    esp,0x10
c001a977:	83 c4 0c             	add    esp,0xc
c001a97a:	c3                   	ret    
c001a97b:	90                   	nop

c001a97c <File::stat(unsigned long long*, bool*)>:
c001a97c:	56                   	push   esi
c001a97d:	53                   	push   ebx
c001a97e:	50                   	push   eax
c001a97f:	b8 0b 00 00 00       	mov    eax,0xb
c001a984:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a988:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a98c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a993:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a997:	83 f9 19             	cmp    ecx,0x19
c001a99a:	77 3d                	ja     c001a9d9 <File::stat(unsigned long long*, bool*)+0x5d>
c001a99c:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001a9a3:	85 c9                	test   ecx,ecx
c001a9a5:	74 32                	je     c001a9d9 <File::stat(unsigned long long*, bool*)+0x5d>
c001a9a7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a9ad:	85 c9                	test   ecx,ecx
c001a9af:	74 28                	je     c001a9d9 <File::stat(unsigned long long*, bool*)+0x5d>
c001a9b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a9b3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a9b7:	74 13                	je     c001a9cc <File::stat(unsigned long long*, bool*)+0x50>
c001a9b9:	83 ec 04             	sub    esp,0x4
c001a9bc:	56                   	push   esi
c001a9bd:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a9c3:	51                   	push   ecx
c001a9c4:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001a9c7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001a9ca:	eb 0a                	jmp    c001a9d6 <File::stat(unsigned long long*, bool*)+0x5a>
c001a9cc:	53                   	push   ebx
c001a9cd:	83 c2 0d             	add    edx,0xd
c001a9d0:	56                   	push   esi
c001a9d1:	52                   	push   edx
c001a9d2:	51                   	push   ecx
c001a9d3:	ff 50 34             	call   DWORD PTR [eax+0x34]
c001a9d6:	83 c4 10             	add    esp,0x10
c001a9d9:	5a                   	pop    edx
c001a9da:	5b                   	pop    ebx
c001a9db:	5e                   	pop    esi
c001a9dc:	c3                   	ret    

c001a9dd <Fs::setcwd(Process*, char*)>:
c001a9dd:	55                   	push   ebp
c001a9de:	57                   	push   edi
c001a9df:	56                   	push   esi
c001a9e0:	53                   	push   ebx
c001a9e1:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a9e7:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c001a9ee:	6a 00                	push   0x0
c001a9f0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001a9f6:	57                   	push   edi
c001a9f7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a9fe:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001aa02:	56                   	push   esi
c001aa03:	e8 5c f9 ff ff       	call   c001a364 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001aa08:	89 34 24             	mov    DWORD PTR [esp],esi
c001aa0b:	e8 60 5b fe ff       	call   c0000570 <strlen>
c001aa10:	83 c4 10             	add    esp,0x10
c001aa13:	83 f8 02             	cmp    eax,0x2
c001aa16:	77 15                	ja     c001aa2d <Fs::setcwd(Process*, char*)+0x50>
c001aa18:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c001aa1d:	83 eb 41             	sub    ebx,0x41
c001aa20:	8b 04 9d 80 03 04 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffbfc80]
c001aa27:	85 c0                	test   eax,eax
c001aa29:	75 1c                	jne    c001aa47 <Fs::setcwd(Process*, char*)+0x6a>
c001aa2b:	eb 2f                	jmp    c001aa5c <Fs::setcwd(Process*, char*)+0x7f>
c001aa2d:	83 ec 0c             	sub    esp,0xc
c001aa30:	56                   	push   esi
c001aa31:	e8 3a 5b fe ff       	call   c0000570 <strlen>
c001aa36:	83 c4 10             	add    esp,0x10
c001aa39:	83 f8 03             	cmp    eax,0x3
c001aa3c:	75 57                	jne    c001aa95 <Fs::setcwd(Process*, char*)+0xb8>
c001aa3e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001aa43:	75 50                	jne    c001aa95 <Fs::setcwd(Process*, char*)+0xb8>
c001aa45:	eb d1                	jmp    c001aa18 <Fs::setcwd(Process*, char*)+0x3b>
c001aa47:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c001aa4e:	75 0c                	jne    c001aa5c <Fs::setcwd(Process*, char*)+0x7f>
c001aa50:	83 ec 0c             	sub    esp,0xc
c001aa53:	50                   	push   eax
c001aa54:	e8 e9 1e 00 00       	call   c001c942 <LogicalDisk::mount()>
c001aa59:	83 c4 10             	add    esp,0x10
c001aa5c:	b8 03 00 00 00       	mov    eax,0x3
c001aa61:	83 fb 19             	cmp    ebx,0x19
c001aa64:	0f 87 c6 00 00 00    	ja     c001ab30 <Fs::setcwd(Process*, char*)+0x153>
c001aa6a:	8b 14 9d 80 03 04 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffbfc80]
c001aa71:	b8 05 00 00 00       	mov    eax,0x5
c001aa76:	85 d2                	test   edx,edx
c001aa78:	0f 84 b2 00 00 00    	je     c001ab30 <Fs::setcwd(Process*, char*)+0x153>
c001aa7e:	b8 06 00 00 00       	mov    eax,0x6
c001aa83:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c001aa8a:	0f 85 92 00 00 00    	jne    c001ab22 <Fs::setcwd(Process*, char*)+0x145>
c001aa90:	e9 9b 00 00 00       	jmp    c001ab30 <Fs::setcwd(Process*, char*)+0x153>
c001aa95:	83 ec 0c             	sub    esp,0xc
c001aa98:	68 14 01 00 00       	push   0x114
c001aa9d:	e8 25 bb ff ff       	call   c00165c7 <malloc>
c001aaa2:	83 c4 0c             	add    esp,0xc
c001aaa5:	89 c3                	mov    ebx,eax
c001aaa7:	55                   	push   ebp
c001aaa8:	56                   	push   esi
c001aaa9:	50                   	push   eax
c001aaaa:	e8 ad fb ff ff       	call   c001a65c <File::File(char const*, Process*)>
c001aaaf:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001aab4:	83 c4 0c             	add    esp,0xc
c001aab7:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001aabb:	50                   	push   eax
c001aabc:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aac0:	50                   	push   eax
c001aac1:	53                   	push   ebx
c001aac2:	e8 b5 fe ff ff       	call   c001a97c <File::stat(unsigned long long*, bool*)>
c001aac7:	83 c4 10             	add    esp,0x10
c001aaca:	83 f8 02             	cmp    eax,0x2
c001aacd:	74 27                	je     c001aaf6 <Fs::setcwd(Process*, char*)+0x119>
c001aacf:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001aad4:	75 1c                	jne    c001aaf2 <Fs::setcwd(Process*, char*)+0x115>
c001aad6:	b8 02 00 00 00       	mov    eax,0x2
c001aadb:	85 db                	test   ebx,ebx
c001aadd:	74 51                	je     c001ab30 <Fs::setcwd(Process*, char*)+0x153>
c001aadf:	83 ec 0c             	sub    esp,0xc
c001aae2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aae4:	53                   	push   ebx
c001aae5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aae8:	83 c4 10             	add    esp,0x10
c001aaeb:	b8 02 00 00 00       	mov    eax,0x2
c001aaf0:	eb 3e                	jmp    c001ab30 <Fs::setcwd(Process*, char*)+0x153>
c001aaf2:	85 c0                	test   eax,eax
c001aaf4:	74 1c                	je     c001ab12 <Fs::setcwd(Process*, char*)+0x135>
c001aaf6:	b8 01 00 00 00       	mov    eax,0x1
c001aafb:	85 db                	test   ebx,ebx
c001aafd:	74 31                	je     c001ab30 <Fs::setcwd(Process*, char*)+0x153>
c001aaff:	83 ec 0c             	sub    esp,0xc
c001ab02:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab04:	53                   	push   ebx
c001ab05:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab08:	83 c4 10             	add    esp,0x10
c001ab0b:	b8 01 00 00 00       	mov    eax,0x1
c001ab10:	eb 1e                	jmp    c001ab30 <Fs::setcwd(Process*, char*)+0x153>
c001ab12:	85 db                	test   ebx,ebx
c001ab14:	74 0c                	je     c001ab22 <Fs::setcwd(Process*, char*)+0x145>
c001ab16:	83 ec 0c             	sub    esp,0xc
c001ab19:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab1b:	53                   	push   ebx
c001ab1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab1f:	83 c4 10             	add    esp,0x10
c001ab22:	50                   	push   eax
c001ab23:	50                   	push   eax
c001ab24:	56                   	push   esi
c001ab25:	57                   	push   edi
c001ab26:	e8 15 5b fe ff       	call   c0000640 <strcpy>
c001ab2b:	83 c4 10             	add    esp,0x10
c001ab2e:	31 c0                	xor    eax,eax
c001ab30:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ab36:	5b                   	pop    ebx
c001ab37:	5e                   	pop    esi
c001ab38:	5f                   	pop    edi
c001ab39:	5d                   	pop    ebp
c001ab3a:	c3                   	ret    
c001ab3b:	90                   	nop

c001ab3c <Directory::Directory(char const*, Process*)>:
c001ab3c:	83 ec 0c             	sub    esp,0xc
c001ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab43:	83 ec 08             	sub    esp,0x8
c001ab46:	6a 00                	push   0x0
c001ab48:	50                   	push   eax
c001ab49:	e8 80 d1 ff ff       	call   c0017cce <UnixFile::UnixFile(int)>
c001ab4e:	83 c4 10             	add    esp,0x10
c001ab51:	ba d8 24 03 c0       	mov    edx,0xc00324d8
c001ab56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab5a:	89 10                	mov    DWORD PTR [eax],edx
c001ab5c:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c001ab61:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ab65:	0f 95 c0             	setne  al
c001ab68:	0f b6 c0             	movzx  eax,al
c001ab6b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ab6f:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001ab75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ab79:	83 c2 0d             	add    edx,0xd
c001ab7c:	50                   	push   eax
c001ab7d:	51                   	push   ecx
c001ab7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab82:	52                   	push   edx
c001ab83:	e8 dc f7 ff ff       	call   c001a364 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001ab88:	83 c4 10             	add    esp,0x10
c001ab8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab8f:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001ab92:	83 e8 41             	sub    eax,0x41
c001ab95:	88 c2                	mov    dl,al
c001ab97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab9b:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001aba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aba5:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001aba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abad:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001abb3:	0f b6 c0             	movzx  eax,al
c001abb6:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001abbd:	85 c0                	test   eax,eax
c001abbf:	74 3e                	je     c001abff <Directory::Directory(char const*, Process*)+0xc3>
c001abc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abc5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001abcb:	0f b6 c0             	movzx  eax,al
c001abce:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001abd5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001abdb:	85 c0                	test   eax,eax
c001abdd:	75 20                	jne    c001abff <Directory::Directory(char const*, Process*)+0xc3>
c001abdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abe3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001abe9:	0f b6 c0             	movzx  eax,al
c001abec:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001abf3:	83 ec 0c             	sub    esp,0xc
c001abf6:	50                   	push   eax
c001abf7:	e8 46 1d 00 00       	call   c001c942 <LogicalDisk::mount()>
c001abfc:	83 c4 10             	add    esp,0x10
c001abff:	90                   	nop
c001ac00:	83 c4 0c             	add    esp,0xc
c001ac03:	c3                   	ret    

c001ac04 <Directory::open()>:
c001ac04:	53                   	push   ebx
c001ac05:	b8 0b 00 00 00       	mov    eax,0xb
c001ac0a:	83 ec 08             	sub    esp,0x8
c001ac0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac11:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001ac18:	83 fa 19             	cmp    edx,0x19
c001ac1b:	77 3d                	ja     c001ac5a <Directory::open()+0x56>
c001ac1d:	8b 14 95 80 03 04 c0 	mov    edx,DWORD PTR [edx*4-0x3ffbfc80]
c001ac24:	85 d2                	test   edx,edx
c001ac26:	74 32                	je     c001ac5a <Directory::open()+0x56>
c001ac28:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001ac2e:	85 d2                	test   edx,edx
c001ac30:	74 28                	je     c001ac5a <Directory::open()+0x56>
c001ac32:	b8 06 00 00 00       	mov    eax,0x6
c001ac37:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001ac3b:	75 1d                	jne    c001ac5a <Directory::open()+0x56>
c001ac3d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001ac43:	50                   	push   eax
c001ac44:	8b 02                	mov    eax,DWORD PTR [edx]
c001ac46:	51                   	push   ecx
c001ac47:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001ac4a:	51                   	push   ecx
c001ac4b:	52                   	push   edx
c001ac4c:	ff 50 50             	call   DWORD PTR [eax+0x50]
c001ac4f:	83 c4 10             	add    esp,0x10
c001ac52:	85 c0                	test   eax,eax
c001ac54:	75 04                	jne    c001ac5a <Directory::open()+0x56>
c001ac56:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001ac5a:	83 c4 08             	add    esp,0x8
c001ac5d:	5b                   	pop    ebx
c001ac5e:	c3                   	ret    
c001ac5f:	90                   	nop

c001ac60 <Directory::close()>:
c001ac60:	53                   	push   ebx
c001ac61:	b8 0b 00 00 00       	mov    eax,0xb
c001ac66:	83 ec 08             	sub    esp,0x8
c001ac69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac6d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ac74:	83 f9 19             	cmp    ecx,0x19
c001ac77:	77 41                	ja     c001acba <Directory::close()+0x5a>
c001ac79:	8b 1c 8d 80 03 04 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffbfc80]
c001ac80:	85 db                	test   ebx,ebx
c001ac82:	74 36                	je     c001acba <Directory::close()+0x5a>
c001ac84:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001ac8b:	74 2d                	je     c001acba <Directory::close()+0x5a>
c001ac8d:	b8 05 00 00 00       	mov    eax,0x5
c001ac92:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ac96:	74 22                	je     c001acba <Directory::close()+0x5a>
c001ac98:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001ac9c:	8b 04 8d 80 03 04 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffbfc80]
c001aca3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001aca9:	53                   	push   ebx
c001acaa:	53                   	push   ebx
c001acab:	8b 08                	mov    ecx,DWORD PTR [eax]
c001acad:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001acb3:	50                   	push   eax
c001acb4:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c001acb7:	83 c4 10             	add    esp,0x10
c001acba:	83 c4 08             	add    esp,0x8
c001acbd:	5b                   	pop    ebx
c001acbe:	c3                   	ret    
c001acbf:	90                   	nop

c001acc0 <Directory::unlink()>:
c001acc0:	83 ec 0c             	sub    esp,0xc
c001acc3:	b8 0b 00 00 00       	mov    eax,0xb
c001acc8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001accc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001acd3:	83 f9 19             	cmp    ecx,0x19
c001acd6:	77 2f                	ja     c001ad07 <Directory::unlink()+0x47>
c001acd8:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001acdf:	85 c9                	test   ecx,ecx
c001ace1:	74 24                	je     c001ad07 <Directory::unlink()+0x47>
c001ace3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ace9:	85 c9                	test   ecx,ecx
c001aceb:	74 1a                	je     c001ad07 <Directory::unlink()+0x47>
c001aced:	b8 06 00 00 00       	mov    eax,0x6
c001acf2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001acf6:	75 0f                	jne    c001ad07 <Directory::unlink()+0x47>
c001acf8:	83 c2 0d             	add    edx,0xd
c001acfb:	50                   	push   eax
c001acfc:	50                   	push   eax
c001acfd:	8b 01                	mov    eax,DWORD PTR [ecx]
c001acff:	52                   	push   edx
c001ad00:	51                   	push   ecx
c001ad01:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001ad04:	83 c4 10             	add    esp,0x10
c001ad07:	83 c4 0c             	add    esp,0xc
c001ad0a:	c3                   	ret    
c001ad0b:	90                   	nop

c001ad0c <Directory::rename(char const*)>:
c001ad0c:	83 ec 0c             	sub    esp,0xc
c001ad0f:	b8 0b 00 00 00       	mov    eax,0xb
c001ad14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad18:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ad1f:	83 f9 19             	cmp    ecx,0x19
c001ad22:	77 32                	ja     c001ad56 <Directory::rename(char const*)+0x4a>
c001ad24:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001ad2b:	85 c9                	test   ecx,ecx
c001ad2d:	74 27                	je     c001ad56 <Directory::rename(char const*)+0x4a>
c001ad2f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ad35:	85 c9                	test   ecx,ecx
c001ad37:	74 1d                	je     c001ad56 <Directory::rename(char const*)+0x4a>
c001ad39:	b8 06 00 00 00       	mov    eax,0x6
c001ad3e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ad42:	75 12                	jne    c001ad56 <Directory::rename(char const*)+0x4a>
c001ad44:	83 c2 0d             	add    edx,0xd
c001ad47:	50                   	push   eax
c001ad48:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ad4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ad4e:	52                   	push   edx
c001ad4f:	51                   	push   ecx
c001ad50:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001ad53:	83 c4 10             	add    esp,0x10
c001ad56:	83 c4 0c             	add    esp,0xc
c001ad59:	c3                   	ret    

c001ad5a <Directory::exists()>:
c001ad5a:	83 ec 0c             	sub    esp,0xc
c001ad5d:	31 c0                	xor    eax,eax
c001ad5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad63:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ad6a:	83 f9 19             	cmp    ecx,0x19
c001ad6d:	77 24                	ja     c001ad93 <Directory::exists()+0x39>
c001ad6f:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001ad76:	85 c9                	test   ecx,ecx
c001ad78:	74 19                	je     c001ad93 <Directory::exists()+0x39>
c001ad7a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ad80:	85 c9                	test   ecx,ecx
c001ad82:	74 0f                	je     c001ad93 <Directory::exists()+0x39>
c001ad84:	83 c2 0d             	add    edx,0xd
c001ad87:	50                   	push   eax
c001ad88:	50                   	push   eax
c001ad89:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ad8b:	52                   	push   edx
c001ad8c:	51                   	push   ecx
c001ad8d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001ad90:	83 c4 10             	add    esp,0x10
c001ad93:	83 c4 0c             	add    esp,0xc
c001ad96:	c3                   	ret    
c001ad97:	90                   	nop

c001ad98 <Directory::read(dirent*)>:
c001ad98:	83 ec 1c             	sub    esp,0x1c
c001ad9b:	b8 0b 00 00 00       	mov    eax,0xb
c001ada0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ada4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001adab:	83 f9 19             	cmp    ecx,0x19
c001adae:	77 30                	ja     c001ade0 <Directory::read(dirent*)+0x48>
c001adb0:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001adb7:	85 c9                	test   ecx,ecx
c001adb9:	74 25                	je     c001ade0 <Directory::read(dirent*)+0x48>
c001adbb:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c001adc2:	74 1c                	je     c001ade0 <Directory::read(dirent*)+0x48>
c001adc4:	83 ec 0c             	sub    esp,0xc
c001adc7:	8b 02                	mov    eax,DWORD PTR [edx]
c001adc9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001adcd:	51                   	push   ecx
c001adce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001add2:	6a 00                	push   0x0
c001add4:	68 10 01 00 00       	push   0x110
c001add9:	52                   	push   edx
c001adda:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001addd:	83 c4 20             	add    esp,0x20
c001ade0:	83 c4 1c             	add    esp,0x1c
c001ade3:	c3                   	ret    

c001ade4 <Directory::create()>:
c001ade4:	83 ec 0c             	sub    esp,0xc
c001ade7:	b8 0b 00 00 00       	mov    eax,0xb
c001adec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001adf0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001adf7:	83 f9 19             	cmp    ecx,0x19
c001adfa:	77 2f                	ja     c001ae2b <Directory::create()+0x47>
c001adfc:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001ae03:	85 c9                	test   ecx,ecx
c001ae05:	74 24                	je     c001ae2b <Directory::create()+0x47>
c001ae07:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ae0d:	85 c9                	test   ecx,ecx
c001ae0f:	74 1a                	je     c001ae2b <Directory::create()+0x47>
c001ae11:	b8 06 00 00 00       	mov    eax,0x6
c001ae16:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ae1a:	75 0f                	jne    c001ae2b <Directory::create()+0x47>
c001ae1c:	83 c2 0d             	add    edx,0xd
c001ae1f:	50                   	push   eax
c001ae20:	50                   	push   eax
c001ae21:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae23:	52                   	push   edx
c001ae24:	51                   	push   ecx
c001ae25:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001ae28:	83 c4 10             	add    esp,0x10
c001ae2b:	83 c4 0c             	add    esp,0xc
c001ae2e:	c3                   	ret    
c001ae2f:	90                   	nop

c001ae30 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001ae30:	b8 0a 00 00 00       	mov    eax,0xa
c001ae35:	c3                   	ret    
c001ae36:	66 90                	xchg   ax,ax

c001ae38 <Bus::Bus(char const*)>:
c001ae38:	83 ec 0c             	sub    esp,0xc
c001ae3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae3f:	83 ec 08             	sub    esp,0x8
c001ae42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae46:	50                   	push   eax
c001ae47:	e8 28 09 00 00       	call   c001b774 <Device::Device(char const*)>
c001ae4c:	83 c4 10             	add    esp,0x10
c001ae4f:	ba f4 24 03 c0       	mov    edx,0xc00324f4
c001ae54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae58:	89 10                	mov    DWORD PTR [eax],edx
c001ae5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae5e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001ae68:	90                   	nop
c001ae69:	83 c4 0c             	add    esp,0xc
c001ae6c:	c3                   	ret    
c001ae6d:	90                   	nop
c001ae6e:	66 90                	xchg   ax,ax

c001ae70 <Bus::~Bus()>:
c001ae70:	83 ec 0c             	sub    esp,0xc
c001ae73:	ba f4 24 03 c0       	mov    edx,0xc00324f4
c001ae78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae7c:	89 10                	mov    DWORD PTR [eax],edx
c001ae7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae82:	83 ec 0c             	sub    esp,0xc
c001ae85:	50                   	push   eax
c001ae86:	e8 89 06 00 00       	call   c001b514 <Device::~Device()>
c001ae8b:	83 c4 10             	add    esp,0x10
c001ae8e:	90                   	nop
c001ae8f:	83 c4 0c             	add    esp,0xc
c001ae92:	c3                   	ret    
c001ae93:	90                   	nop

c001ae94 <Bus::~Bus()>:
c001ae94:	83 ec 0c             	sub    esp,0xc
c001ae97:	83 ec 0c             	sub    esp,0xc
c001ae9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae9e:	e8 cd ff ff ff       	call   c001ae70 <Bus::~Bus()>
c001aea3:	83 c4 10             	add    esp,0x10
c001aea6:	83 ec 08             	sub    esp,0x8
c001aea9:	68 58 01 00 00       	push   0x158
c001aeae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aeb2:	e8 71 e4 ff ff       	call   c0019328 <operator delete(void*, unsigned long)>
c001aeb7:	83 c4 10             	add    esp,0x10
c001aeba:	83 c4 0c             	add    esp,0xc
c001aebd:	c3                   	ret    

c001aebe <beepThread(void*)>:
c001aebe:	83 ec 0c             	sub    esp,0xc
c001aec1:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001aec6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aeca:	48                   	dec    eax
c001aecb:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001aed0:	75 01                	jne    c001aed3 <beepThread(void*)+0x15>
c001aed2:	fb                   	sti    
c001aed3:	83 ec 0c             	sub    esp,0xc
c001aed6:	6b c2 0a             	imul   eax,edx,0xa
c001aed9:	50                   	push   eax
c001aeda:	e8 95 aa 00 00       	call   c0025974 <milliTenthSleep(unsigned int)>
c001aedf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aee6:	e8 69 c9 00 00       	call   c0027854 <HalMakeBeep(int)>
c001aeeb:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001aef3:	83 c4 1c             	add    esp,0x1c
c001aef6:	e9 5d a9 00 00       	jmp    c0025858 <blockTask(TaskState)>

c001aefb <Krnl::beep(int, int, bool)>:
c001aefb:	56                   	push   esi
c001aefc:	53                   	push   ebx
c001aefd:	83 ec 10             	sub    esp,0x10
c001af00:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001af04:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af0c:	e8 43 c9 00 00       	call   c0027854 <HalMakeBeep(int)>
c001af11:	83 c4 10             	add    esp,0x10
c001af14:	89 f0                	mov    eax,esi
c001af16:	84 c0                	test   al,al
c001af18:	74 1e                	je     c001af38 <Krnl::beep(int, int, bool)+0x3d>
c001af1a:	83 ec 0c             	sub    esp,0xc
c001af1d:	6b db 0a             	imul   ebx,ebx,0xa
c001af20:	53                   	push   ebx
c001af21:	e8 4e aa 00 00       	call   c0025974 <milliTenthSleep(unsigned int)>
c001af26:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001af2e:	83 c4 14             	add    esp,0x14
c001af31:	5b                   	pop    ebx
c001af32:	5e                   	pop    esi
c001af33:	e9 1c c9 00 00       	jmp    c0027854 <HalMakeBeep(int)>
c001af38:	68 e6 00 00 00       	push   0xe6
c001af3d:	53                   	push   ebx
c001af3e:	68 be ae 01 c0       	push   0xc001aebe
c001af43:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c001af49:	e8 fe a5 00 00       	call   c002554c <Process::createThread(void (*)(void*), void*, int)>
c001af4e:	83 c4 14             	add    esp,0x14
c001af51:	5b                   	pop    ebx
c001af52:	5e                   	pop    esi
c001af53:	c3                   	ret    

c001af54 <User::loadClockSettings()>:
c001af54:	56                   	push   esi
c001af55:	53                   	push   ebx
c001af56:	81 ec 40 01 00 00    	sub    esp,0x140
c001af5c:	68 18 25 03 c0       	push   0xc0032518
c001af61:	e8 ef e4 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001af66:	c7 04 24 2e 25 03 c0 	mov    DWORD PTR [esp],0xc003252e
c001af6d:	c6 44 24 14 00       	mov    BYTE PTR [esp+0x14],0x0
c001af72:	e8 de e4 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001af77:	c7 04 24 44 25 03 c0 	mov    DWORD PTR [esp],0xc0032544
c001af7e:	e8 4d 73 00 00       	call   c00222d0 <CmOpen(char const*)>
c001af83:	c7 04 24 69 25 03 c0 	mov    DWORD PTR [esp],0xc0032569
c001af8a:	89 c3                	mov    ebx,eax
c001af8c:	e8 c4 e4 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001af91:	58                   	pop    eax
c001af92:	5a                   	pop    edx
c001af93:	68 7f 25 03 c0       	push   0xc003257f
c001af98:	53                   	push   ebx
c001af99:	e8 32 7f 00 00       	call   c0022ed0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001af9e:	c7 04 24 94 25 03 c0 	mov    DWORD PTR [esp],0xc0032594
c001afa5:	89 c6                	mov    esi,eax
c001afa7:	e8 a9 e4 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001afac:	83 c4 10             	add    esp,0x10
c001afaf:	85 f6                	test   esi,esi
c001afb1:	7e 1f                	jle    c001afd2 <User::loadClockSettings()+0x7e>
c001afb3:	83 ec 0c             	sub    esp,0xc
c001afb6:	68 aa 25 03 c0       	push   0xc00325aa
c001afbb:	e8 95 e4 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001afc0:	83 c4 0c             	add    esp,0xc
c001afc3:	8d 44 24 08          	lea    eax,[esp+0x8]
c001afc7:	50                   	push   eax
c001afc8:	56                   	push   esi
c001afc9:	53                   	push   ebx
c001afca:	e8 71 74 00 00       	call   c0022440 <CmGetString(Reghive_Tag*, int, char*)>
c001afcf:	83 c4 10             	add    esp,0x10
c001afd2:	83 ec 0c             	sub    esp,0xc
c001afd5:	68 c2 25 03 c0       	push   0xc00325c2
c001afda:	e8 76 e4 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001afdf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afe2:	e8 07 74 00 00       	call   c00223ee <CmClose(Reghive_Tag*)>
c001afe7:	c7 04 24 d8 25 03 c0 	mov    DWORD PTR [esp],0xc00325d8
c001afee:	e8 62 e4 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001aff3:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001aff7:	83 c4 10             	add    esp,0x10
c001affa:	83 e8 2b             	sub    eax,0x2b
c001affd:	a8 fd                	test   al,0xfd
c001afff:	0f 85 9f 00 00 00    	jne    c001b0a4 <User::loadClockSettings()+0x150>
c001b005:	83 ec 0c             	sub    esp,0xc
c001b008:	68 ee 25 03 c0       	push   0xc00325ee
c001b00d:	e8 43 e4 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001b012:	83 c4 10             	add    esp,0x10
c001b015:	c6 05 08 df 03 c0 00 	mov    BYTE PTR ds:0xc003df08,0x0
c001b01c:	80 7c 24 06 2e       	cmp    BYTE PTR [esp+0x6],0x2e
c001b021:	0f be 54 24 07       	movsx  edx,BYTE PTR [esp+0x7]
c001b026:	75 07                	jne    c001b02f <User::loadClockSettings()+0xdb>
c001b028:	b0 01                	mov    al,0x1
c001b02a:	83 fa 35             	cmp    edx,0x35
c001b02d:	74 0f                	je     c001b03e <User::loadClockSettings()+0xea>
c001b02f:	31 c0                	xor    eax,eax
c001b031:	83 fa 2e             	cmp    edx,0x2e
c001b034:	75 08                	jne    c001b03e <User::loadClockSettings()+0xea>
c001b036:	80 7c 24 08 35       	cmp    BYTE PTR [esp+0x8],0x35
c001b03b:	0f 94 c0             	sete   al
c001b03e:	83 ec 0c             	sub    esp,0xc
c001b041:	a2 09 df 03 c0       	mov    ds:0xc003df09,al
c001b046:	68 04 26 03 c0       	push   0xc0032604
c001b04b:	e8 05 e4 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001b050:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c001b055:	83 c4 10             	add    esp,0x10
c001b058:	83 e8 30             	sub    eax,0x30
c001b05b:	80 7c 24 07 2e       	cmp    BYTE PTR [esp+0x7],0x2e
c001b060:	a3 0c df 03 c0       	mov    ds:0xc003df0c,eax
c001b065:	75 11                	jne    c001b078 <User::loadClockSettings()+0x124>
c001b067:	0f be 54 24 06       	movsx  edx,BYTE PTR [esp+0x6]
c001b06c:	6b c0 0a             	imul   eax,eax,0xa
c001b06f:	8d 44 02 d0          	lea    eax,[edx+eax*1-0x30]
c001b073:	a3 0c df 03 c0       	mov    ds:0xc003df0c,eax
c001b078:	83 ec 0c             	sub    esp,0xc
c001b07b:	68 1a 26 03 c0       	push   0xc003261a
c001b080:	e8 d0 e3 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001b085:	83 c4 10             	add    esp,0x10
c001b088:	80 7c 24 04 2d       	cmp    BYTE PTR [esp+0x4],0x2d
c001b08d:	75 06                	jne    c001b095 <User::loadClockSettings()+0x141>
c001b08f:	f7 1d 0c df 03 c0    	neg    DWORD PTR ds:0xc003df0c
c001b095:	83 ec 0c             	sub    esp,0xc
c001b098:	68 30 26 03 c0       	push   0xc0032630
c001b09d:	e8 b3 e3 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001b0a2:	eb 25                	jmp    c001b0c9 <User::loadClockSettings()+0x175>
c001b0a4:	83 ec 0c             	sub    esp,0xc
c001b0a7:	68 ee 25 03 c0       	push   0xc00325ee
c001b0ac:	e8 a4 e3 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001b0b1:	c6 05 08 df 03 c0 00 	mov    BYTE PTR ds:0xc003df08,0x0
c001b0b8:	c6 05 09 df 03 c0 00 	mov    BYTE PTR ds:0xc003df09,0x0
c001b0bf:	c7 05 0c df 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003df0c,0x0
c001b0c9:	83 c4 10             	add    esp,0x10
c001b0cc:	83 ec 0c             	sub    esp,0xc
c001b0cf:	68 47 26 03 c0       	push   0xc0032647
c001b0d4:	e8 7c e3 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001b0d9:	81 c4 44 01 00 00    	add    esp,0x144
c001b0df:	5b                   	pop    ebx
c001b0e0:	5e                   	pop    esi
c001b0e1:	c3                   	ret    

c001b0e2 <Clock::Clock(char const*)>:
c001b0e2:	83 ec 0c             	sub    esp,0xc
c001b0e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0e9:	83 ec 08             	sub    esp,0x8
c001b0ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0f0:	50                   	push   eax
c001b0f1:	e8 7e 06 00 00       	call   c001b774 <Device::Device(char const*)>
c001b0f6:	83 c4 10             	add    esp,0x10
c001b0f9:	ba 68 26 03 c0       	mov    edx,0xc0032668
c001b0fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b102:	89 10                	mov    DWORD PTR [eax],edx
c001b104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b108:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001b112:	90                   	nop
c001b113:	83 c4 0c             	add    esp,0xc
c001b116:	c3                   	ret    
c001b117:	90                   	nop

c001b118 <Clock::~Clock()>:
c001b118:	83 ec 0c             	sub    esp,0xc
c001b11b:	ba 68 26 03 c0       	mov    edx,0xc0032668
c001b120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b124:	89 10                	mov    DWORD PTR [eax],edx
c001b126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b12a:	83 ec 0c             	sub    esp,0xc
c001b12d:	50                   	push   eax
c001b12e:	e8 e1 03 00 00       	call   c001b514 <Device::~Device()>
c001b133:	83 c4 10             	add    esp,0x10
c001b136:	90                   	nop
c001b137:	83 c4 0c             	add    esp,0xc
c001b13a:	c3                   	ret    
c001b13b:	90                   	nop

c001b13c <Clock::~Clock()>:
c001b13c:	83 ec 0c             	sub    esp,0xc
c001b13f:	83 ec 0c             	sub    esp,0xc
c001b142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b146:	e8 cd ff ff ff       	call   c001b118 <Clock::~Clock()>
c001b14b:	83 c4 10             	add    esp,0x10
c001b14e:	83 ec 08             	sub    esp,0x8
c001b151:	68 58 01 00 00       	push   0x158
c001b156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b15a:	e8 c9 e1 ff ff       	call   c0019328 <operator delete(void*, unsigned long)>
c001b15f:	83 c4 10             	add    esp,0x10
c001b162:	83 c4 0c             	add    esp,0xc
c001b165:	c3                   	ret    

c001b166 <Clock::timeInSecondsLocal()>:
c001b166:	53                   	push   ebx
c001b167:	83 ec 14             	sub    esp,0x14
c001b16a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b16e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b170:	50                   	push   eax
c001b171:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b174:	0f b6 0d 08 df 03 c0 	movzx  ecx,BYTE PTR ds:0xc003df08
c001b17b:	03 0d 0c df 03 c0    	add    ecx,DWORD PTR ds:0xc003df0c
c001b181:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001b187:	89 cb                	mov    ebx,ecx
c001b189:	c1 fb 1f             	sar    ebx,0x1f
c001b18c:	01 c8                	add    eax,ecx
c001b18e:	11 da                	adc    edx,ebx
c001b190:	83 c4 10             	add    esp,0x10
c001b193:	31 c9                	xor    ecx,ecx
c001b195:	80 3d 09 df 03 c0 00 	cmp    BYTE PTR ds:0xc003df09,0x0
c001b19c:	74 05                	je     c001b1a3 <Clock::timeInSecondsLocal()+0x3d>
c001b19e:	b9 08 07 00 00       	mov    ecx,0x708
c001b1a3:	31 db                	xor    ebx,ebx
c001b1a5:	01 c8                	add    eax,ecx
c001b1a7:	11 da                	adc    edx,ebx
c001b1a9:	83 c4 08             	add    esp,0x8
c001b1ac:	5b                   	pop    ebx
c001b1ad:	c3                   	ret    

c001b1ae <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001b1ae:	57                   	push   edi
c001b1af:	56                   	push   esi
c001b1b0:	53                   	push   ebx
c001b1b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b1b5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b1b9:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b1bb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b1bf:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001b1c2:	0f b6 05 08 df 03 c0 	movzx  eax,BYTE PTR ds:0xc003df08
c001b1c9:	03 05 0c df 03 c0    	add    eax,DWORD PTR ds:0xc003df0c
c001b1cf:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001b1d5:	99                   	cdq    
c001b1d6:	29 c6                	sub    esi,eax
c001b1d8:	19 d7                	sbb    edi,edx
c001b1da:	89 f0                	mov    eax,esi
c001b1dc:	89 fa                	mov    edx,edi
c001b1de:	31 f6                	xor    esi,esi
c001b1e0:	80 3d 09 df 03 c0 00 	cmp    BYTE PTR ds:0xc003df09,0x0
c001b1e7:	74 05                	je     c001b1ee <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001b1e9:	be 08 07 00 00       	mov    esi,0x708
c001b1ee:	31 ff                	xor    edi,edi
c001b1f0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b1f4:	29 f0                	sub    eax,esi
c001b1f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b1fa:	19 fa                	sbb    edx,edi
c001b1fc:	89 d8                	mov    eax,ebx
c001b1fe:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b202:	5b                   	pop    ebx
c001b203:	5e                   	pop    esi
c001b204:	5f                   	pop    edi
c001b205:	ff e0                	jmp    eax

c001b207 <datetimeToSeconds(datetime_t)>:
c001b207:	55                   	push   ebp
c001b208:	57                   	push   edi
c001b209:	56                   	push   esi
c001b20a:	53                   	push   ebx
c001b20b:	83 ec 0c             	sub    esp,0xc
c001b20e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b212:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b216:	89 d6                	mov    esi,edx
c001b218:	0f b6 c7             	movzx  eax,bh
c001b21b:	c1 ee 10             	shr    esi,0x10
c001b21e:	6b e8 3c             	imul   ebp,eax,0x3c
c001b221:	81 ee 6c 07 00 00    	sub    esi,0x76c
c001b227:	0f b6 ce             	movzx  ecx,dh
c001b22a:	89 df                	mov    edi,ebx
c001b22c:	49                   	dec    ecx
c001b22d:	c1 ef 10             	shr    edi,0x10
c001b230:	0f b6 db             	movzx  ebx,bl
c001b233:	89 f8                	mov    eax,edi
c001b235:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c001b23b:	0f b6 f8             	movzx  edi,al
c001b23e:	0f b6 d2             	movzx  edx,dl
c001b241:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c001b245:	01 d8                	add    eax,ebx
c001b247:	0f b7 de             	movzx  ebx,si
c001b24a:	89 04 24             	mov    DWORD PTR [esp],eax
c001b24d:	c1 f8 1f             	sar    eax,0x1f
c001b250:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b254:	0f b6 c1             	movzx  eax,cl
c001b257:	8b 0c 85 a0 26 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcd960]
c001b25e:	83 f8 01             	cmp    eax,0x1
c001b261:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001b265:	76 27                	jbe    c001b28e <datetimeToSeconds(datetime_t)+0x87>
c001b267:	83 e6 03             	and    esi,0x3
c001b26a:	75 22                	jne    c001b28e <datetimeToSeconds(datetime_t)+0x87>
c001b26c:	31 d2                	xor    edx,edx
c001b26e:	be 64 00 00 00       	mov    esi,0x64
c001b273:	89 d8                	mov    eax,ebx
c001b275:	f7 f6                	div    esi
c001b277:	85 d2                	test   edx,edx
c001b279:	75 12                	jne    c001b28d <datetimeToSeconds(datetime_t)+0x86>
c001b27b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001b281:	be 90 01 00 00       	mov    esi,0x190
c001b286:	99                   	cdq    
c001b287:	f7 fe                	idiv   esi
c001b289:	85 d2                	test   edx,edx
c001b28b:	75 01                	jne    c001b28e <datetimeToSeconds(datetime_t)+0x87>
c001b28d:	41                   	inc    ecx
c001b28e:	83 fb 46             	cmp    ebx,0x46
c001b291:	76 48                	jbe    c001b2db <datetimeToSeconds(datetime_t)+0xd4>
c001b293:	be 46 00 00 00       	mov    esi,0x46
c001b298:	bf 64 00 00 00       	mov    edi,0x64
c001b29d:	bd 90 01 00 00       	mov    ebp,0x190
c001b2a2:	b8 6d 01 00 00       	mov    eax,0x16d
c001b2a7:	f7 c6 03 00 00 00    	test   esi,0x3
c001b2ad:	75 23                	jne    c001b2d2 <datetimeToSeconds(datetime_t)+0xcb>
c001b2af:	89 f0                	mov    eax,esi
c001b2b1:	99                   	cdq    
c001b2b2:	f7 ff                	idiv   edi
c001b2b4:	b8 6e 01 00 00       	mov    eax,0x16e
c001b2b9:	85 d2                	test   edx,edx
c001b2bb:	75 15                	jne    c001b2d2 <datetimeToSeconds(datetime_t)+0xcb>
c001b2bd:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001b2c3:	99                   	cdq    
c001b2c4:	f7 fd                	idiv   ebp
c001b2c6:	83 fa 01             	cmp    edx,0x1
c001b2c9:	19 c0                	sbb    eax,eax
c001b2cb:	f7 d0                	not    eax
c001b2cd:	05 6e 01 00 00       	add    eax,0x16e
c001b2d2:	01 c1                	add    ecx,eax
c001b2d4:	46                   	inc    esi
c001b2d5:	39 de                	cmp    esi,ebx
c001b2d7:	7c c9                	jl     c001b2a2 <datetimeToSeconds(datetime_t)+0x9b>
c001b2d9:	eb 34                	jmp    c001b30f <datetimeToSeconds(datetime_t)+0x108>
c001b2db:	74 32                	je     c001b30f <datetimeToSeconds(datetime_t)+0x108>
c001b2dd:	b8 45 00 00 00       	mov    eax,0x45
c001b2e2:	89 c2                	mov    edx,eax
c001b2e4:	83 e2 03             	and    edx,0x3
c001b2e7:	39 d8                	cmp    eax,ebx
c001b2e9:	7e 0f                	jle    c001b2fa <datetimeToSeconds(datetime_t)+0xf3>
c001b2eb:	83 fa 01             	cmp    edx,0x1
c001b2ee:	19 d2                	sbb    edx,edx
c001b2f0:	48                   	dec    eax
c001b2f1:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001b2f8:	eb e8                	jmp    c001b2e2 <datetimeToSeconds(datetime_t)+0xdb>
c001b2fa:	b8 6d 01 00 00       	mov    eax,0x16d
c001b2ff:	85 d2                	test   edx,edx
c001b301:	75 0a                	jne    c001b30d <datetimeToSeconds(datetime_t)+0x106>
c001b303:	83 fb 01             	cmp    ebx,0x1
c001b306:	19 c0                	sbb    eax,eax
c001b308:	05 6e 01 00 00       	add    eax,0x16e
c001b30d:	29 c1                	sub    ecx,eax
c001b30f:	b8 80 51 01 00       	mov    eax,0x15180
c001b314:	f7 e9                	imul   ecx
c001b316:	03 04 24             	add    eax,DWORD PTR [esp]
c001b319:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001b31d:	83 c4 0c             	add    esp,0xc
c001b320:	5b                   	pop    ebx
c001b321:	5e                   	pop    esi
c001b322:	5f                   	pop    edi
c001b323:	5d                   	pop    ebp
c001b324:	c3                   	ret    
c001b325:	90                   	nop

c001b326 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001b326:	57                   	push   edi
c001b327:	56                   	push   esi
c001b328:	53                   	push   ebx
c001b329:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b32d:	8b 06                	mov    eax,DWORD PTR [esi]
c001b32f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001b332:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b336:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b33a:	e8 c8 fe ff ff       	call   c001b207 <datetimeToSeconds(datetime_t)>
c001b33f:	59                   	pop    ecx
c001b340:	0f b6 0d 08 df 03 c0 	movzx  ecx,BYTE PTR ds:0xc003df08
c001b347:	5b                   	pop    ebx
c001b348:	03 0d 0c df 03 c0    	add    ecx,DWORD PTR ds:0xc003df0c
c001b34e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001b354:	89 cb                	mov    ebx,ecx
c001b356:	c1 fb 1f             	sar    ebx,0x1f
c001b359:	29 c8                	sub    eax,ecx
c001b35b:	19 da                	sbb    edx,ebx
c001b35d:	31 c9                	xor    ecx,ecx
c001b35f:	80 3d 09 df 03 c0 00 	cmp    BYTE PTR ds:0xc003df09,0x0
c001b366:	74 05                	je     c001b36d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001b368:	b9 08 07 00 00       	mov    ecx,0x708
c001b36d:	31 db                	xor    ebx,ebx
c001b36f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b373:	29 c8                	sub    eax,ecx
c001b375:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b379:	19 da                	sbb    edx,ebx
c001b37b:	89 f8                	mov    eax,edi
c001b37d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b381:	5b                   	pop    ebx
c001b382:	5e                   	pop    esi
c001b383:	5f                   	pop    edi
c001b384:	ff e0                	jmp    eax

c001b386 <secondsToDatetime(unsigned long long)>:
c001b386:	55                   	push   ebp
c001b387:	57                   	push   edi
c001b388:	56                   	push   esi
c001b389:	53                   	push   ebx
c001b38a:	83 ec 1c             	sub    esp,0x1c
c001b38d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b391:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b395:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001b399:	6a 00                	push   0x0
c001b39b:	68 80 51 01 00       	push   0x15180
c001b3a0:	55                   	push   ebp
c001b3a1:	57                   	push   edi
c001b3a2:	e8 39 39 01 00       	call   c002ece0 <__udivdi3>
c001b3a7:	83 c4 10             	add    esp,0x10
c001b3aa:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001b3b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b3b4:	6a 00                	push   0x0
c001b3b6:	68 80 51 01 00       	push   0x15180
c001b3bb:	55                   	push   ebp
c001b3bc:	57                   	push   edi
c001b3bd:	bf 10 0e 00 00       	mov    edi,0xe10
c001b3c2:	e8 19 3a 01 00       	call   c002ede0 <__umoddi3>
c001b3c7:	83 c4 10             	add    esp,0x10
c001b3ca:	99                   	cdq    
c001b3cb:	f7 ff                	idiv   edi
c001b3cd:	bf 3c 00 00 00       	mov    edi,0x3c
c001b3d2:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001b3d5:	89 d0                	mov    eax,edx
c001b3d7:	99                   	cdq    
c001b3d8:	f7 ff                	idiv   edi
c001b3da:	85 db                	test   ebx,ebx
c001b3dc:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001b3df:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001b3e2:	79 11                	jns    c001b3f5 <secondsToDatetime(unsigned long long)+0x6f>
c001b3e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b3e8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001b3ee:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b3f3:	eb 07                	jmp    c001b3fc <secondsToDatetime(unsigned long long)+0x76>
c001b3f5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b3fa:	89 d8                	mov    eax,ebx
c001b3fc:	bf b4 05 00 00       	mov    edi,0x5b4
c001b401:	99                   	cdq    
c001b402:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001b407:	f7 f9                	idiv   ecx
c001b409:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001b40e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b412:	31 d2                	xor    edx,edx
c001b414:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001b41c:	01 c3                	add    ebx,eax
c001b41e:	89 d8                	mov    eax,ebx
c001b420:	f7 f1                	div    ecx
c001b422:	31 d2                	xor    edx,edx
c001b424:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001b427:	89 d8                	mov    eax,ebx
c001b429:	f7 f7                	div    edi
c001b42b:	31 d2                	xor    edx,edx
c001b42d:	29 c1                	sub    ecx,eax
c001b42f:	89 d8                	mov    eax,ebx
c001b431:	f7 f5                	div    ebp
c001b433:	bd 6d 01 00 00       	mov    ebp,0x16d
c001b438:	29 c1                	sub    ecx,eax
c001b43a:	31 d2                	xor    edx,edx
c001b43c:	89 c8                	mov    eax,ecx
c001b43e:	f7 f5                	div    ebp
c001b440:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001b445:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b449:	31 d2                	xor    edx,edx
c001b44b:	89 c8                	mov    eax,ecx
c001b44d:	f7 f5                	div    ebp
c001b44f:	31 d2                	xor    edx,edx
c001b451:	01 c3                	add    ebx,eax
c001b453:	89 c8                	mov    eax,ecx
c001b455:	f7 f7                	div    edi
c001b457:	bf 99 00 00 00       	mov    edi,0x99
c001b45c:	29 c3                	sub    ebx,eax
c001b45e:	31 d2                	xor    edx,edx
c001b460:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001b468:	29 c3                	sub    ebx,eax
c001b46a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001b46d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001b470:	bb 05 00 00 00       	mov    ebx,0x5
c001b475:	83 c1 02             	add    ecx,0x2
c001b478:	89 c8                	mov    eax,ecx
c001b47a:	f7 f7                	div    edi
c001b47c:	31 d2                	xor    edx,edx
c001b47e:	89 c7                	mov    edi,eax
c001b480:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001b486:	83 c0 02             	add    eax,0x2
c001b489:	f7 f3                	div    ebx
c001b48b:	89 eb                	mov    ebx,ebp
c001b48d:	29 c3                	sub    ebx,eax
c001b48f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001b495:	88 1e                	mov    BYTE PTR [esi],bl
c001b497:	19 c0                	sbb    eax,eax
c001b499:	31 d2                	xor    edx,edx
c001b49b:	83 e0 0c             	and    eax,0xc
c001b49e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001b4a2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001b4aa:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001b4ae:	83 f9 01             	cmp    ecx,0x1
c001b4b1:	0f 96 c2             	setbe  dl
c001b4b4:	41                   	inc    ecx
c001b4b5:	01 d0                	add    eax,edx
c001b4b7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001b4ba:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001b4be:	83 c4 1c             	add    esp,0x1c
c001b4c1:	89 f0                	mov    eax,esi
c001b4c3:	5b                   	pop    ebx
c001b4c4:	5e                   	pop    esi
c001b4c5:	5f                   	pop    edi
c001b4c6:	5d                   	pop    ebp
c001b4c7:	c2 04 00             	ret    0x4

c001b4ca <Clock::timeInDatetimeLocal()>:
c001b4ca:	53                   	push   ebx
c001b4cb:	83 ec 14             	sub    esp,0x14
c001b4ce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b4d2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b4d6:	e8 8b fc ff ff       	call   c001b166 <Clock::timeInSecondsLocal()>
c001b4db:	83 c4 0c             	add    esp,0xc
c001b4de:	52                   	push   edx
c001b4df:	50                   	push   eax
c001b4e0:	53                   	push   ebx
c001b4e1:	e8 a0 fe ff ff       	call   c001b386 <secondsToDatetime(unsigned long long)>
c001b4e6:	89 d8                	mov    eax,ebx
c001b4e8:	83 c4 14             	add    esp,0x14
c001b4eb:	5b                   	pop    ebx
c001b4ec:	c2 04 00             	ret    0x4
c001b4ef:	90                   	nop

c001b4f0 <Device::hibernate()>:
c001b4f0:	c3                   	ret    
c001b4f1:	90                   	nop

c001b4f2 <Device::wake()>:
c001b4f2:	c3                   	ret    
c001b4f3:	90                   	nop

c001b4f4 <Device::detect()>:
c001b4f4:	c3                   	ret    
c001b4f5:	90                   	nop

c001b4f6 <Device::disableLegacy()>:
c001b4f6:	c3                   	ret    
c001b4f7:	90                   	nop

c001b4f8 <Device::powerSaving(PowerSavingLevel)>:
c001b4f8:	c3                   	ret    
c001b4f9:	90                   	nop

c001b4fa <DriverlessDevice::close(int, int, void*)>:
c001b4fa:	31 c0                	xor    eax,eax
c001b4fc:	c3                   	ret    
c001b4fd:	90                   	nop

c001b4fe <DriverlessDevice::detect()>:
c001b4fe:	c3                   	ret    
c001b4ff:	90                   	nop

c001b500 <DriverlessDevice::open(int, int, void*)>:
c001b500:	83 ec 18             	sub    esp,0x18
c001b503:	68 d0 26 03 c0       	push   0xc00326d0
c001b508:	e8 81 52 00 00       	call   c002078e <KePanic(char const*)>
c001b50d:	83 c8 ff             	or     eax,0xffffffff
c001b510:	83 c4 1c             	add    esp,0x1c
c001b513:	c3                   	ret    

c001b514 <Device::~Device()>:
c001b514:	ba 3c 27 03 c0       	mov    edx,0xc003273c
c001b519:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b51d:	89 10                	mov    DWORD PTR [eax],edx
c001b51f:	90                   	nop
c001b520:	c3                   	ret    
c001b521:	90                   	nop

c001b522 <Device::~Device()>:
c001b522:	83 ec 0c             	sub    esp,0xc
c001b525:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b529:	e8 e6 ff ff ff       	call   c001b514 <Device::~Device()>
c001b52e:	83 c4 04             	add    esp,0x4
c001b531:	83 ec 08             	sub    esp,0x8
c001b534:	68 58 01 00 00       	push   0x158
c001b539:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b53d:	e8 e6 dd ff ff       	call   c0019328 <operator delete(void*, unsigned long)>
c001b542:	83 c4 10             	add    esp,0x10
c001b545:	83 c4 0c             	add    esp,0xc
c001b548:	c3                   	ret    
c001b549:	90                   	nop

c001b54a <Device::findAndLoadDriver()>:
c001b54a:	c7 44 24 04 ee 26 03 c0 	mov    DWORD PTR [esp+0x4],0xc00326ee
c001b552:	e9 fe de ff ff       	jmp    c0019455 <Dbg::kprintf(char const*, ...)>
c001b557:	90                   	nop

c001b558 <Device::preOpenPCI(PCIDeviceInfo)>:
c001b558:	57                   	push   edi
c001b559:	b9 09 00 00 00       	mov    ecx,0x9
c001b55e:	56                   	push   esi
c001b55f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b563:	8d 74 24 10          	lea    esi,[esp+0x10]
c001b567:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001b571:	81 c7 18 01 00 00    	add    edi,0x118
c001b577:	fc                   	cld    
c001b578:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b57a:	5e                   	pop    esi
c001b57b:	5f                   	pop    edi
c001b57c:	c3                   	ret    
c001b57d:	90                   	nop

c001b57e <Device::preOpenACPI(void*, char*, char*)>:
c001b57e:	57                   	push   edi
c001b57f:	b9 1e 00 00 00       	mov    ecx,0x1e
c001b584:	56                   	push   esi
c001b585:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b589:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b58d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c001b597:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c001b59d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c001b5a3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b5a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b5a9:	b9 0e 00 00 00       	mov    ecx,0xe
c001b5ae:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c001b5b4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b5b8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b5ba:	5e                   	pop    esi
c001b5bb:	5f                   	pop    edi
c001b5bc:	c3                   	ret    
c001b5bd:	90                   	nop

c001b5be <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b5be:	53                   	push   ebx
c001b5bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b5c3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b5c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b5cb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b5cf:	0f b6 c0             	movzx  eax,al
c001b5d2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b5d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b5da:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b5de:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b5e2:	5b                   	pop    ebx
c001b5e3:	e9 c0 05 00 00       	jmp    c001bba8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c001b5e8 <Device::getParent()>:
c001b5e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5ec:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c001b5f2:	c3                   	ret    
c001b5f3:	90                   	nop

c001b5f4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b5f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b5f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b5fc:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b601:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b605:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b609:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b60d:	e9 fe 06 00 00       	jmp    c001bd10 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c001b612 <Device::addChild(Device*)>:
c001b612:	53                   	push   ebx
c001b613:	83 ec 08             	sub    esp,0x8
c001b616:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b61a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b61e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001b624:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001b62a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b62c:	85 d2                	test   edx,edx
c001b62e:	74 04                	je     c001b634 <Device::addChild(Device*)+0x22>
c001b630:	89 d3                	mov    ebx,edx
c001b632:	eb f6                	jmp    c001b62a <Device::addChild(Device*)+0x18>
c001b634:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001b637:	83 ec 0c             	sub    esp,0xc
c001b63a:	6a 08                	push   0x8
c001b63c:	e8 86 af ff ff       	call   c00165c7 <malloc>
c001b641:	89 03                	mov    DWORD PTR [ebx],eax
c001b643:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b649:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b650:	83 c4 18             	add    esp,0x18
c001b653:	5b                   	pop    ebx
c001b654:	c3                   	ret    
c001b655:	90                   	nop

c001b656 <Device::removeAllChildren()>:
c001b656:	56                   	push   esi
c001b657:	53                   	push   ebx
c001b658:	52                   	push   edx
c001b659:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b65d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001b663:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b666:	74 17                	je     c001b67f <Device::removeAllChildren()+0x29>
c001b668:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b66b:	85 c0                	test   eax,eax
c001b66d:	74 0c                	je     c001b67b <Device::removeAllChildren()+0x25>
c001b66f:	83 ec 0c             	sub    esp,0xc
c001b672:	8b 10                	mov    edx,DWORD PTR [eax]
c001b674:	50                   	push   eax
c001b675:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b678:	83 c4 10             	add    esp,0x10
c001b67b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b67d:	eb e4                	jmp    c001b663 <Device::removeAllChildren()+0xd>
c001b67f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b685:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b68b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b691:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b698:	58                   	pop    eax
c001b699:	5b                   	pop    ebx
c001b69a:	5e                   	pop    esi
c001b69b:	c3                   	ret    

c001b69c <Device::hibernateAll()>:
c001b69c:	53                   	push   ebx
c001b69d:	83 ec 14             	sub    esp,0x14
c001b6a0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b6a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6a6:	53                   	push   ebx
c001b6a7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b6aa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b6b0:	83 c4 10             	add    esp,0x10
c001b6b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b6b6:	74 0f                	je     c001b6c7 <Device::hibernateAll()+0x2b>
c001b6b8:	83 ec 0c             	sub    esp,0xc
c001b6bb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b6be:	e8 d9 ff ff ff       	call   c001b69c <Device::hibernateAll()>
c001b6c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b6c5:	eb e9                	jmp    c001b6b0 <Device::hibernateAll()+0x14>
c001b6c7:	83 c4 08             	add    esp,0x8
c001b6ca:	5b                   	pop    ebx
c001b6cb:	c3                   	ret    

c001b6cc <Device::wakeAll()>:
c001b6cc:	53                   	push   ebx
c001b6cd:	83 ec 14             	sub    esp,0x14
c001b6d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b6d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6d6:	53                   	push   ebx
c001b6d7:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001b6da:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b6e0:	83 c4 10             	add    esp,0x10
c001b6e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b6e6:	74 0f                	je     c001b6f7 <Device::wakeAll()+0x2b>
c001b6e8:	83 ec 0c             	sub    esp,0xc
c001b6eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b6ee:	e8 d9 ff ff ff       	call   c001b6cc <Device::wakeAll()>
c001b6f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b6f5:	eb e9                	jmp    c001b6e0 <Device::wakeAll()+0x14>
c001b6f7:	83 c4 08             	add    esp,0x8
c001b6fa:	5b                   	pop    ebx
c001b6fb:	c3                   	ret    

c001b6fc <Device::detectAll()>:
c001b6fc:	53                   	push   ebx
c001b6fd:	83 ec 14             	sub    esp,0x14
c001b700:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b704:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b706:	53                   	push   ebx
c001b707:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b70a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b710:	83 c4 10             	add    esp,0x10
c001b713:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b716:	74 0f                	je     c001b727 <Device::detectAll()+0x2b>
c001b718:	83 ec 0c             	sub    esp,0xc
c001b71b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b71e:	e8 d9 ff ff ff       	call   c001b6fc <Device::detectAll()>
c001b723:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b725:	eb e9                	jmp    c001b710 <Device::detectAll()+0x14>
c001b727:	83 c4 08             	add    esp,0x8
c001b72a:	5b                   	pop    ebx
c001b72b:	c3                   	ret    

c001b72c <Device::disableLegacyAll()>:
c001b72c:	c3                   	ret    
c001b72d:	90                   	nop

c001b72e <Device::loadDriversForAll()>:
c001b72e:	c3                   	ret    
c001b72f:	90                   	nop

c001b730 <Device::powerSavingAll(PowerSavingLevel)>:
c001b730:	56                   	push   esi
c001b731:	53                   	push   ebx
c001b732:	83 ec 0c             	sub    esp,0xc
c001b735:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b739:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b73d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b73f:	56                   	push   esi
c001b740:	53                   	push   ebx
c001b741:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001b744:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b74a:	83 c4 10             	add    esp,0x10
c001b74d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b750:	74 0f                	je     c001b761 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001b752:	52                   	push   edx
c001b753:	52                   	push   edx
c001b754:	56                   	push   esi
c001b755:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b758:	e8 d3 ff ff ff       	call   c001b730 <Device::powerSavingAll(PowerSavingLevel)>
c001b75d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b75f:	eb e9                	jmp    c001b74a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001b761:	58                   	pop    eax
c001b762:	5b                   	pop    ebx
c001b763:	5e                   	pop    esi
c001b764:	c3                   	ret    
c001b765:	90                   	nop

c001b766 <Device::setName(char const*)>:
c001b766:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001b76e:	e9 cd 4e fe ff       	jmp    c0000640 <strcpy>
c001b773:	90                   	nop

c001b774 <Device::Device(char const*)>:
c001b774:	83 ec 1c             	sub    esp,0x1c
c001b777:	ba 3c 27 03 c0       	mov    edx,0xc003273c
c001b77c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b780:	89 10                	mov    DWORD PTR [eax],edx
c001b782:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b786:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001b790:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b794:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b79e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7a2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b7ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7b0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b7ba:	83 ec 08             	sub    esp,0x8
c001b7bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b7c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b7c5:	e8 9c ff ff ff       	call   c001b766 <Device::setName(char const*)>
c001b7ca:	83 c4 10             	add    esp,0x10
c001b7cd:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001b7d5:	83 ec 0c             	sub    esp,0xc
c001b7d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b7dc:	e8 e6 ad ff ff       	call   c00165c7 <malloc>
c001b7e1:	83 c4 10             	add    esp,0x10
c001b7e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b7ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b7f1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b7f5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001b7fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7ff:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b805:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b80b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b80f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b815:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b81c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b820:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001b827:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b82b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001b832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b836:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b840:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b844:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b84e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b852:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b85c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b860:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c001b86a:	90                   	nop
c001b86b:	83 c4 1c             	add    esp,0x1c
c001b86e:	c3                   	ret    
c001b86f:	90                   	nop

c001b870 <Device::getName()>:
c001b870:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b874:	05 d0 00 00 00       	add    eax,0xd0
c001b879:	c3                   	ret    

c001b87a <Device::closeAll()>:
c001b87a:	53                   	push   ebx
c001b87b:	83 ec 08             	sub    esp,0x8
c001b87e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b882:	53                   	push   ebx
c001b883:	e8 e8 ff ff ff       	call   c001b870 <Device::getName()>
c001b888:	52                   	push   edx
c001b889:	50                   	push   eax
c001b88a:	68 28 27 03 c0       	push   0xc0032728
c001b88f:	e8 c1 db ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001b894:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b896:	6a 00                	push   0x0
c001b898:	6a 00                	push   0x0
c001b89a:	6a 00                	push   0x0
c001b89c:	53                   	push   ebx
c001b89d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b8a0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b8a6:	83 c4 20             	add    esp,0x20
c001b8a9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b8ac:	74 12                	je     c001b8c0 <Device::closeAll()+0x46>
c001b8ae:	83 ec 0c             	sub    esp,0xc
c001b8b1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b8b4:	e8 c1 ff ff ff       	call   c001b87a <Device::closeAll()>
c001b8b9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b8bb:	83 c4 10             	add    esp,0x10
c001b8be:	eb e9                	jmp    c001b8a9 <Device::closeAll()+0x2f>
c001b8c0:	83 c4 08             	add    esp,0x8
c001b8c3:	5b                   	pop    ebx
c001b8c4:	c3                   	ret    
c001b8c5:	90                   	nop

c001b8c6 <DriverlessDevice::DriverlessDevice(char const*)>:
c001b8c6:	83 ec 0c             	sub    esp,0xc
c001b8c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8cd:	83 ec 08             	sub    esp,0x8
c001b8d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8d4:	50                   	push   eax
c001b8d5:	e8 9a fe ff ff       	call   c001b774 <Device::Device(char const*)>
c001b8da:	83 c4 10             	add    esp,0x10
c001b8dd:	ba 68 27 03 c0       	mov    edx,0xc0032768
c001b8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8e6:	89 10                	mov    DWORD PTR [eax],edx
c001b8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8ec:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001b8f6:	90                   	nop
c001b8f7:	83 c4 0c             	add    esp,0xc
c001b8fa:	c3                   	ret    
c001b8fb:	90                   	nop

c001b8fc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001b8fc:	57                   	push   edi
c001b8fd:	56                   	push   esi
c001b8fe:	53                   	push   ebx
c001b8ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b903:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b907:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b90b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001b911:	75 0c                	jne    c001b91f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001b913:	52                   	push   edx
c001b914:	52                   	push   edx
c001b915:	53                   	push   ebx
c001b916:	56                   	push   esi
c001b917:	e8 76 38 01 00       	call   c002f192 <LinkedList<Device>::addElement(Device*)>
c001b91c:	83 c4 10             	add    esp,0x10
c001b91f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b925:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b928:	74 12                	je     c001b93c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001b92a:	50                   	push   eax
c001b92b:	57                   	push   edi
c001b92c:	56                   	push   esi
c001b92d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b930:	e8 c7 ff ff ff       	call   c001b8fc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b935:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b937:	83 c4 10             	add    esp,0x10
c001b93a:	eb e9                	jmp    c001b925 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001b93c:	5b                   	pop    ebx
c001b93d:	5e                   	pop    esi
c001b93e:	5f                   	pop    edi
c001b93f:	c3                   	ret    

c001b940 <getDevicesOfType(DeviceType)>:
c001b940:	53                   	push   ebx
c001b941:	83 ec 14             	sub    esp,0x14
c001b944:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b948:	53                   	push   ebx
c001b949:	e8 20 39 01 00       	call   c002f26e <LinkedList<Device>::LinkedList()>
c001b94e:	83 c4 0c             	add    esp,0xc
c001b951:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b955:	53                   	push   ebx
c001b956:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c001b95c:	e8 9b ff ff ff       	call   c001b8fc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b961:	89 d8                	mov    eax,ebx
c001b963:	83 c4 18             	add    esp,0x18
c001b966:	5b                   	pop    ebx
c001b967:	c2 04 00             	ret    0x4
c001b96a:	66 90                	xchg   ax,ax

c001b96c <HardDiskController::HardDiskController(char const*)>:
c001b96c:	83 ec 0c             	sub    esp,0xc
c001b96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b973:	83 ec 08             	sub    esp,0x8
c001b976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b97a:	50                   	push   eax
c001b97b:	e8 f4 fd ff ff       	call   c001b774 <Device::Device(char const*)>
c001b980:	83 c4 10             	add    esp,0x10
c001b983:	ba 94 27 03 c0       	mov    edx,0xc0032794
c001b988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b98c:	89 10                	mov    DWORD PTR [eax],edx
c001b98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b992:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001b99c:	90                   	nop
c001b99d:	83 c4 0c             	add    esp,0xc
c001b9a0:	c3                   	ret    
c001b9a1:	90                   	nop
c001b9a2:	66 90                	xchg   ax,ax

c001b9a4 <HardDiskController::~HardDiskController()>:
c001b9a4:	83 ec 0c             	sub    esp,0xc
c001b9a7:	ba 94 27 03 c0       	mov    edx,0xc0032794
c001b9ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9b0:	89 10                	mov    DWORD PTR [eax],edx
c001b9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9b6:	83 ec 0c             	sub    esp,0xc
c001b9b9:	50                   	push   eax
c001b9ba:	e8 55 fb ff ff       	call   c001b514 <Device::~Device()>
c001b9bf:	83 c4 10             	add    esp,0x10
c001b9c2:	90                   	nop
c001b9c3:	83 c4 0c             	add    esp,0xc
c001b9c6:	c3                   	ret    
c001b9c7:	90                   	nop

c001b9c8 <HardDiskController::~HardDiskController()>:
c001b9c8:	83 ec 0c             	sub    esp,0xc
c001b9cb:	83 ec 0c             	sub    esp,0xc
c001b9ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9d2:	e8 cd ff ff ff       	call   c001b9a4 <HardDiskController::~HardDiskController()>
c001b9d7:	83 c4 10             	add    esp,0x10
c001b9da:	83 ec 08             	sub    esp,0x8
c001b9dd:	68 58 01 00 00       	push   0x158
c001b9e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9e6:	e8 3d d9 ff ff       	call   c0019328 <operator delete(void*, unsigned long)>
c001b9eb:	83 c4 10             	add    esp,0x10
c001b9ee:	83 c4 0c             	add    esp,0xc
c001b9f1:	c3                   	ret    

c001b9f2 <PhysicalDisk::eject()>:
c001b9f2:	83 c8 ff             	or     eax,0xffffffff
c001b9f5:	c3                   	ret    

c001b9f6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001b9f6:	83 ec 0c             	sub    esp,0xc
c001b9f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9fd:	83 ec 08             	sub    esp,0x8
c001ba00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba04:	50                   	push   eax
c001ba05:	e8 6a fd ff ff       	call   c001b774 <Device::Device(char const*)>
c001ba0a:	83 c4 10             	add    esp,0x10
c001ba0d:	ba c0 27 03 c0       	mov    edx,0xc00327c0
c001ba12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba16:	89 10                	mov    DWORD PTR [eax],edx
c001ba18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba1c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001ba23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba27:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001ba2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba32:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001ba3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba40:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ba44:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ba4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba4e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001ba58:	90                   	nop
c001ba59:	83 c4 0c             	add    esp,0xc
c001ba5c:	c3                   	ret    
c001ba5d:	90                   	nop

c001ba5e <PhysicalDisk::startCache()>:
c001ba5e:	56                   	push   esi
c001ba5f:	53                   	push   ebx
c001ba60:	83 ec 10             	sub    esp,0x10
c001ba63:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ba67:	6a 44                	push   0x44
c001ba69:	e8 59 ab ff ff       	call   c00165c7 <malloc>
c001ba6e:	89 c6                	mov    esi,eax
c001ba70:	58                   	pop    eax
c001ba71:	5a                   	pop    edx
c001ba72:	53                   	push   ebx
c001ba73:	56                   	push   esi
c001ba74:	e8 6f 17 00 00       	call   c001d1e8 <VCache::VCache(PhysicalDisk*)>
c001ba79:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001ba7f:	83 c4 14             	add    esp,0x14
c001ba82:	5b                   	pop    ebx
c001ba83:	5e                   	pop    esi
c001ba84:	c3                   	ret    
c001ba85:	90                   	nop

c001ba86 <PhysicalDisk::~PhysicalDisk()>:
c001ba86:	83 ec 0c             	sub    esp,0xc
c001ba89:	ba c0 27 03 c0       	mov    edx,0xc00327c0
c001ba8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba92:	89 10                	mov    DWORD PTR [eax],edx
c001ba94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba98:	83 ec 0c             	sub    esp,0xc
c001ba9b:	50                   	push   eax
c001ba9c:	e8 73 fa ff ff       	call   c001b514 <Device::~Device()>
c001baa1:	83 c4 10             	add    esp,0x10
c001baa4:	90                   	nop
c001baa5:	83 c4 0c             	add    esp,0xc
c001baa8:	c3                   	ret    
c001baa9:	90                   	nop

c001baaa <PhysicalDisk::~PhysicalDisk()>:
c001baaa:	83 ec 0c             	sub    esp,0xc
c001baad:	83 ec 0c             	sub    esp,0xc
c001bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bab4:	e8 cd ff ff ff       	call   c001ba86 <PhysicalDisk::~PhysicalDisk()>
c001bab9:	83 c4 10             	add    esp,0x10
c001babc:	83 ec 08             	sub    esp,0x8
c001babf:	68 6c 01 00 00       	push   0x16c
c001bac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bac8:	e8 5b d8 ff ff       	call   c0019328 <operator delete(void*, unsigned long)>
c001bacd:	83 c4 10             	add    esp,0x10
c001bad0:	83 c4 0c             	add    esp,0xc
c001bad3:	c3                   	ret    

c001bad4 <int_handler>:
c001bad4:	55                   	push   ebp
c001bad5:	57                   	push   edi
c001bad6:	56                   	push   esi
c001bad7:	53                   	push   ebx
c001bad8:	83 ec 0c             	sub    esp,0xc
c001badb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001badf:	80 3d 88 09 04 c0 00 	cmp    BYTE PTR ds:0xc0040988,0x0
c001bae6:	74 0b                	je     c001baf3 <int_handler+0x1f>
c001bae8:	fa                   	cli    
c001bae9:	f4                   	hlt    
c001baea:	80 3d 88 09 04 c0 00 	cmp    BYTE PTR ds:0xc0040988,0x0
c001baf1:	75 f5                	jne    c001bae8 <int_handler+0x14>
c001baf3:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001baf6:	8d 46 e0             	lea    eax,[esi-0x20]
c001baf9:	83 f8 17             	cmp    eax,0x17
c001bafc:	76 40                	jbe    c001bb3e <int_handler+0x6a>
c001bafe:	c1 e6 04             	shl    esi,0x4
c001bb01:	31 db                	xor    ebx,ebx
c001bb03:	8d ae 20 ef 03 c0    	lea    ebp,[esi-0x3ffc10e0]
c001bb09:	81 c6 20 df 03 c0    	add    esi,0xc003df20
c001bb0f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001bb13:	85 c0                	test   eax,eax
c001bb15:	74 13                	je     c001bb2a <int_handler+0x56>
c001bb17:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001bb1a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001bb1e:	74 2c                	je     c001bb4c <int_handler+0x78>
c001bb20:	83 ec 08             	sub    esp,0x8
c001bb23:	52                   	push   edx
c001bb24:	57                   	push   edi
c001bb25:	ff d0                	call   eax
c001bb27:	83 c4 10             	add    esp,0x10
c001bb2a:	83 c3 01             	add    ebx,0x1
c001bb2d:	83 fb 04             	cmp    ebx,0x4
c001bb30:	75 dd                	jne    c001bb0f <int_handler+0x3b>
c001bb32:	83 c4 0c             	add    esp,0xc
c001bb35:	31 c0                	xor    eax,eax
c001bb37:	5b                   	pop    ebx
c001bb38:	31 d2                	xor    edx,edx
c001bb3a:	5e                   	pop    esi
c001bb3b:	5f                   	pop    edi
c001bb3c:	5d                   	pop    ebp
c001bb3d:	c3                   	ret    
c001bb3e:	83 ec 0c             	sub    esp,0xc
c001bb41:	50                   	push   eax
c001bb42:	e8 4a bd 00 00       	call   c0027891 <HalEndOfInterrupt(int)>
c001bb47:	83 c4 10             	add    esp,0x10
c001bb4a:	eb b2                	jmp    c001bafe <int_handler+0x2a>
c001bb4c:	83 ec 08             	sub    esp,0x8
c001bb4f:	52                   	push   edx
c001bb50:	57                   	push   edi
c001bb51:	ff d0                	call   eax
c001bb53:	83 c4 10             	add    esp,0x10
c001bb56:	83 c4 0c             	add    esp,0xc
c001bb59:	5b                   	pop    ebx
c001bb5a:	5e                   	pop    esi
c001bb5b:	5f                   	pop    edi
c001bb5c:	5d                   	pop    ebp
c001bb5d:	c3                   	ret    

c001bb5e <installISRHandler(int, void (*)(regs*, void*), void*)>:
c001bb5e:	56                   	push   esi
c001bb5f:	31 c0                	xor    eax,eax
c001bb61:	53                   	push   ebx
c001bb62:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bb66:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb6a:	89 ca                	mov    edx,ecx
c001bb6c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bb70:	c1 e2 04             	shl    edx,0x4
c001bb73:	83 bc 82 20 ef 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffc10e0],0x0
c001bb7b:	74 17                	je     c001bb94 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001bb7d:	83 c0 01             	add    eax,0x1
c001bb80:	83 f8 04             	cmp    eax,0x4
c001bb83:	75 ee                	jne    c001bb73 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001bb85:	c7 44 24 0c f0 27 03 c0 	mov    DWORD PTR [esp+0xc],0xc00327f0
c001bb8d:	5b                   	pop    ebx
c001bb8e:	5e                   	pop    esi
c001bb8f:	e9 fa 4b 00 00       	jmp    c002078e <KePanic(char const*)>
c001bb94:	8d 04 88             	lea    eax,[eax+ecx*4]
c001bb97:	89 1c 85 20 ef 03 c0 	mov    DWORD PTR [eax*4-0x3ffc10e0],ebx
c001bb9e:	89 34 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],esi
c001bba5:	5b                   	pop    ebx
c001bba6:	5e                   	pop    esi
c001bba7:	c3                   	ret    

c001bba8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001bba8:	57                   	push   edi
c001bba9:	8b 15 bc b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9bc
c001bbaf:	56                   	push   esi
c001bbb0:	53                   	push   ebx
c001bbb1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bbb5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bbb9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bbc0:	74 54                	je     c001bc16 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c001bbc2:	89 c7                	mov    edi,eax
c001bbc4:	84 c0                	test   al,al
c001bbc6:	74 1d                	je     c001bbe5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c001bbc8:	83 fe 0f             	cmp    esi,0xf
c001bbcb:	0f 8f d5 00 00 00    	jg     c001bca6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c001bbd1:	0f b6 b6 a8 44 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffcbb58]
c001bbd8:	0f b7 bc 36 c0 06 04 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffbf940]
c001bbe0:	d1 ef                	shr    edi,1
c001bbe2:	83 e7 01             	and    edi,0x1
c001bbe5:	83 ec 08             	sub    esp,0x8
c001bbe8:	a1 c0 1b 04 c0       	mov    eax,ds:0xc0041bc0
c001bbed:	31 db                	xor    ebx,ebx
c001bbef:	50                   	push   eax
c001bbf0:	68 fd 27 03 c0       	push   0xc00327fd
c001bbf5:	e8 5b d8 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001bbfa:	83 c4 10             	add    esp,0x10
c001bbfd:	a1 c0 1b 04 c0       	mov    eax,ds:0xc0041bc0
c001bc02:	85 c0                	test   eax,eax
c001bc04:	7f 55                	jg     c001bc5b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c001bc06:	83 ec 0c             	sub    esp,0xc
c001bc09:	68 14 28 03 c0       	push   0xc0032814
c001bc0e:	e8 7b 4b 00 00       	call   c002078e <KePanic(char const*)>
c001bc13:	83 c4 10             	add    esp,0x10
c001bc16:	8d 7e 20             	lea    edi,[esi+0x20]
c001bc19:	89 f8                	mov    eax,edi
c001bc1b:	31 d2                	xor    edx,edx
c001bc1d:	c1 e0 04             	shl    eax,0x4
c001bc20:	8b 8c 90 20 ef 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffc10e0]
c001bc27:	85 c9                	test   ecx,ecx
c001bc29:	0f 84 8e 00 00 00    	je     c001bcbd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c001bc2f:	83 c2 01             	add    edx,0x1
c001bc32:	83 fa 04             	cmp    edx,0x4
c001bc35:	75 e9                	jne    c001bc20 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001bc37:	83 ec 0c             	sub    esp,0xc
c001bc3a:	68 68 28 03 c0       	push   0xc0032868
c001bc3f:	e8 4a 4b 00 00       	call   c002078e <KePanic(char const*)>
c001bc44:	83 c4 10             	add    esp,0x10
c001bc47:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc4c:	5b                   	pop    ebx
c001bc4d:	5e                   	pop    esi
c001bc4e:	5f                   	pop    edi
c001bc4f:	c3                   	ret    
c001bc50:	83 c3 01             	add    ebx,0x1
c001bc53:	39 1d c0 1b 04 c0    	cmp    DWORD PTR ds:0xc0041bc0,ebx
c001bc59:	7e ab                	jle    c001bc06 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c001bc5b:	83 ec 08             	sub    esp,0x8
c001bc5e:	8b 04 9d e0 1b 04 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffbe420]
c001bc65:	56                   	push   esi
c001bc66:	50                   	push   eax
c001bc67:	e8 74 24 01 00       	call   c002e0e0 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001bc6c:	83 c4 10             	add    esp,0x10
c001bc6f:	84 c0                	test   al,al
c001bc71:	74 dd                	je     c001bc50 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c001bc73:	83 ec 04             	sub    esp,0x4
c001bc76:	89 f8                	mov    eax,edi
c001bc78:	8b 1c 9d e0 1b 04 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffbe420]
c001bc7f:	0f b6 f8             	movzx  edi,al
c001bc82:	57                   	push   edi
c001bc83:	8d 7e 20             	lea    edi,[esi+0x20]
c001bc86:	6a 00                	push   0x0
c001bc88:	89 f8                	mov    eax,edi
c001bc8a:	0f b6 c0             	movzx  eax,al
c001bc8d:	50                   	push   eax
c001bc8e:	89 f0                	mov    eax,esi
c001bc90:	6a 00                	push   0x0
c001bc92:	0f b6 c0             	movzx  eax,al
c001bc95:	6a 00                	push   0x0
c001bc97:	50                   	push   eax
c001bc98:	53                   	push   ebx
c001bc99:	e8 ae 25 01 00       	call   c002e24c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001bc9e:	83 c4 20             	add    esp,0x20
c001bca1:	e9 73 ff ff ff       	jmp    c001bc19 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c001bca6:	83 ec 0c             	sub    esp,0xc
c001bca9:	31 ff                	xor    edi,edi
c001bcab:	68 30 28 03 c0       	push   0xc0032830
c001bcb0:	e8 d9 4a 00 00       	call   c002078e <KePanic(char const*)>
c001bcb5:	83 c4 10             	add    esp,0x10
c001bcb8:	e9 28 ff ff ff       	jmp    c001bbe5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c001bcbd:	8d 04 ba             	lea    eax,[edx+edi*4]
c001bcc0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bcc4:	89 14 85 20 ef 03 c0 	mov    DWORD PTR [eax*4-0x3ffc10e0],edx
c001bccb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bccf:	5b                   	pop    ebx
c001bcd0:	89 14 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],edx
c001bcd7:	89 f0                	mov    eax,esi
c001bcd9:	5e                   	pop    esi
c001bcda:	5f                   	pop    edi
c001bcdb:	c3                   	ret    

c001bcdc <uninstallISRHandler(int, void (*)(regs*, void*))>:
c001bcdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bce0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bce4:	c1 e0 04             	shl    eax,0x4
c001bce7:	8d 50 10             	lea    edx,[eax+0x10]
c001bcea:	39 88 20 ef 03 c0    	cmp    DWORD PTR [eax-0x3ffc10e0],ecx
c001bcf0:	74 08                	je     c001bcfa <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001bcf2:	83 c0 04             	add    eax,0x4
c001bcf5:	39 d0                	cmp    eax,edx
c001bcf7:	75 f1                	jne    c001bcea <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001bcf9:	c3                   	ret    
c001bcfa:	c7 80 20 ef 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc10e0],0x0
c001bd04:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001bd0e:	eb e2                	jmp    c001bcf2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001bd10 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001bd10:	53                   	push   ebx
c001bd11:	83 ec 08             	sub    esp,0x8
c001bd14:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bd18:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bd1d:	74 0e                	je     c001bd2d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001bd1f:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001bd24:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c001bd2b:	75 37                	jne    c001bd64 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c001bd2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd31:	83 c0 20             	add    eax,0x20
c001bd34:	c1 e0 04             	shl    eax,0x4
c001bd37:	8d 50 10             	lea    edx,[eax+0x10]
c001bd3a:	39 98 20 ef 03 c0    	cmp    DWORD PTR [eax-0x3ffc10e0],ebx
c001bd40:	74 0c                	je     c001bd4e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c001bd42:	83 c0 04             	add    eax,0x4
c001bd45:	39 d0                	cmp    eax,edx
c001bd47:	75 f1                	jne    c001bd3a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c001bd49:	83 c4 08             	add    esp,0x8
c001bd4c:	5b                   	pop    ebx
c001bd4d:	c3                   	ret    
c001bd4e:	c7 80 20 ef 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc10e0],0x0
c001bd58:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001bd62:	eb de                	jmp    c001bd42 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c001bd64:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001bd69:	7f 11                	jg     c001bd7c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c001bd6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd6f:	0f b6 80 a8 44 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcbb58]
c001bd76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bd7a:	eb b1                	jmp    c001bd2d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001bd7c:	83 ec 0c             	sub    esp,0xc
c001bd7f:	68 21 28 03 c0       	push   0xc0032821
c001bd84:	e8 05 4a 00 00       	call   c002078e <KePanic(char const*)>
c001bd89:	83 c4 10             	add    esp,0x10
c001bd8c:	eb 9f                	jmp    c001bd2d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c001bd8e <setupINTS()>:
c001bd8e:	31 c0                	xor    eax,eax
c001bd90:	c7 80 20 ef 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc10e0],0x0
c001bd9a:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001bda4:	c7 80 24 ef 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc10dc],0x0
c001bdae:	c7 80 24 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20dc],0x0
c001bdb8:	c7 80 28 ef 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc10d8],0x0
c001bdc2:	c7 80 28 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20d8],0x0
c001bdcc:	c7 80 2c ef 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc10d4],0x0
c001bdd6:	c7 80 2c df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20d4],0x0
c001bde0:	83 c0 10             	add    eax,0x10
c001bde3:	3d 00 10 00 00       	cmp    eax,0x1000
c001bde8:	75 a6                	jne    c001bd90 <setupINTS()+0x2>
c001bdea:	c3                   	ret    

c001bdeb <convertLegacyIRQNumber(int)>:
c001bdeb:	83 ec 0c             	sub    esp,0xc
c001bdee:	8b 15 bc b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9bc
c001bdf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdf8:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bdff:	74 0c                	je     c001be0d <convertLegacyIRQNumber(int)+0x22>
c001be01:	83 f8 0f             	cmp    eax,0xf
c001be04:	7f 0b                	jg     c001be11 <convertLegacyIRQNumber(int)+0x26>
c001be06:	0f b6 80 a8 44 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcbb58]
c001be0d:	83 c4 0c             	add    esp,0xc
c001be10:	c3                   	ret    
c001be11:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001be15:	83 ec 0c             	sub    esp,0xc
c001be18:	68 30 28 03 c0       	push   0xc0032830
c001be1d:	e8 6c 49 00 00       	call   c002078e <KePanic(char const*)>
c001be22:	83 c4 10             	add    esp,0x10
c001be25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be29:	83 c4 0c             	add    esp,0xc
c001be2c:	c3                   	ret    
c001be2d:	90                   	nop

c001be2e <startGUI(void*)>:
c001be2e:	55                   	push   ebp
c001be2f:	89 e5                	mov    ebp,esp
c001be31:	53                   	push   ebx
c001be32:	83 ec 04             	sub    esp,0x4
c001be35:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001be3a:	83 e8 01             	sub    eax,0x1
c001be3d:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001be42:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001be47:	85 c0                	test   eax,eax
c001be49:	75 01                	jne    c001be4c <startGUI(void*)+0x1e>
c001be4b:	fb                   	sti    
c001be4c:	8b 1d bc b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9bc
c001be52:	83 ec 08             	sub    esp,0x8
c001be55:	6a 01                	push   0x1
c001be57:	68 8d 28 03 c0       	push   0xc003288d
c001be5c:	e8 b5 8e 00 00       	call   c0024d16 <Thr::loadDLL(char const*, bool)>
c001be61:	83 c4 10             	add    esp,0x10
c001be64:	83 ec 08             	sub    esp,0x8
c001be67:	53                   	push   ebx
c001be68:	50                   	push   eax
c001be69:	e8 fa 90 00 00       	call   c0024f68 <Thr::executeDLL(unsigned long, void*)>
c001be6e:	83 c4 10             	add    esp,0x10
c001be71:	8b 1d bc b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9bc
c001be77:	83 ec 08             	sub    esp,0x8
c001be7a:	6a 01                	push   0x1
c001be7c:	68 a7 28 03 c0       	push   0xc00328a7
c001be81:	e8 90 8e 00 00       	call   c0024d16 <Thr::loadDLL(char const*, bool)>
c001be86:	83 c4 10             	add    esp,0x10
c001be89:	83 ec 08             	sub    esp,0x8
c001be8c:	53                   	push   ebx
c001be8d:	50                   	push   eax
c001be8e:	e8 d5 90 00 00       	call   c0024f68 <Thr::executeDLL(unsigned long, void*)>
c001be93:	83 c4 10             	add    esp,0x10
c001be96:	eb fe                	jmp    c001be96 <startGUI(void*)+0x68>

c001be98 <startGUIVESA(void*)>:
c001be98:	55                   	push   ebp
c001be99:	89 e5                	mov    ebp,esp
c001be9b:	53                   	push   ebx
c001be9c:	83 ec 04             	sub    esp,0x4
c001be9f:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001bea4:	83 e8 01             	sub    eax,0x1
c001bea7:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001beac:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001beb1:	85 c0                	test   eax,eax
c001beb3:	75 01                	jne    c001beb6 <startGUIVESA(void*)+0x1e>
c001beb5:	fb                   	sti    
c001beb6:	8b 1d bc b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9bc
c001bebc:	83 ec 08             	sub    esp,0x8
c001bebf:	6a 01                	push   0x1
c001bec1:	68 c5 28 03 c0       	push   0xc00328c5
c001bec6:	e8 4b 8e 00 00       	call   c0024d16 <Thr::loadDLL(char const*, bool)>
c001becb:	83 c4 10             	add    esp,0x10
c001bece:	83 ec 08             	sub    esp,0x8
c001bed1:	53                   	push   ebx
c001bed2:	50                   	push   eax
c001bed3:	e8 90 90 00 00       	call   c0024f68 <Thr::executeDLL(unsigned long, void*)>
c001bed8:	83 c4 10             	add    esp,0x10
c001bedb:	8b 1d bc b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9bc
c001bee1:	83 ec 08             	sub    esp,0x8
c001bee4:	6a 01                	push   0x1
c001bee6:	68 a7 28 03 c0       	push   0xc00328a7
c001beeb:	e8 26 8e 00 00       	call   c0024d16 <Thr::loadDLL(char const*, bool)>
c001bef0:	83 c4 10             	add    esp,0x10
c001bef3:	83 ec 08             	sub    esp,0x8
c001bef6:	53                   	push   ebx
c001bef7:	50                   	push   eax
c001bef8:	e8 6b 90 00 00       	call   c0024f68 <Thr::executeDLL(unsigned long, void*)>
c001befd:	83 c4 10             	add    esp,0x10
c001bf00:	eb fe                	jmp    c001bf00 <startGUIVESA(void*)+0x68>

c001bf02 <sendKeyToTerminal(unsigned char)>:
c001bf02:	55                   	push   ebp
c001bf03:	89 e5                	mov    ebp,esp
c001bf05:	83 ec 28             	sub    esp,0x28
c001bf08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf0b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001bf0e:	a1 08 ba 03 c0       	mov    eax,ds:0xc003ba08
c001bf13:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001bf17:	83 ec 08             	sub    esp,0x8
c001bf1a:	52                   	push   edx
c001bf1b:	50                   	push   eax
c001bf1c:	e8 a5 b9 ff ff       	call   c00178c6 <VgaText::receiveKey(unsigned char)>
c001bf21:	83 c4 10             	add    esp,0x10
c001bf24:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bf28:	83 f8 0a             	cmp    eax,0xa
c001bf2b:	74 16                	je     c001bf43 <sendKeyToTerminal(unsigned char)+0x41>
c001bf2d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bf31:	83 f8 03             	cmp    eax,0x3
c001bf34:	74 0d                	je     c001bf43 <sendKeyToTerminal(unsigned char)+0x41>
c001bf36:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bf3a:	83 f8 1c             	cmp    eax,0x1c
c001bf3d:	0f 85 97 00 00 00    	jne    c001bfda <sendKeyToTerminal(unsigned char)+0xd8>
c001bf43:	fa                   	cli    
c001bf44:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001bf49:	83 c0 01             	add    eax,0x1
c001bf4c:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001bf51:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c001bf56:	83 c0 01             	add    eax,0x1
c001bf59:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c001bf5e:	a1 20 ff 03 c0       	mov    eax,ds:0xc003ff20
c001bf63:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bf66:	c7 05 20 ff 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003ff20,0x0
c001bf70:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001bf74:	74 1f                	je     c001bf95 <sendKeyToTerminal(unsigned char)+0x93>
c001bf76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001bf79:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bf7c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bf7f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bf82:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bf85:	83 ec 0c             	sub    esp,0xc
c001bf88:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001bf8b:	e8 04 9b 00 00       	call   c0025a94 <unblockTask(ThreadControlBlock*)>
c001bf90:	83 c4 10             	add    esp,0x10
c001bf93:	eb db                	jmp    c001bf70 <sendKeyToTerminal(unsigned char)+0x6e>
c001bf95:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c001bf9a:	83 e8 01             	sub    eax,0x1
c001bf9d:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c001bfa2:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c001bfa7:	85 c0                	test   eax,eax
c001bfa9:	75 18                	jne    c001bfc3 <sendKeyToTerminal(unsigned char)+0xc1>
c001bfab:	a1 c8 11 04 c0       	mov    eax,ds:0xc00411c8
c001bfb0:	85 c0                	test   eax,eax
c001bfb2:	74 0f                	je     c001bfc3 <sendKeyToTerminal(unsigned char)+0xc1>
c001bfb4:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c001bfbe:	e8 d9 97 00 00       	call   c002579c <schedule()>
c001bfc3:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001bfc8:	83 e8 01             	sub    eax,0x1
c001bfcb:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001bfd0:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001bfd5:	85 c0                	test   eax,eax
c001bfd7:	75 01                	jne    c001bfda <sendKeyToTerminal(unsigned char)+0xd8>
c001bfd9:	fb                   	sti    
c001bfda:	90                   	nop
c001bfdb:	c9                   	leave  
c001bfdc:	c3                   	ret    

c001bfdd <sendKeyboardToken(KeyboardToken)>:
c001bfdd:	55                   	push   ebp
c001bfde:	89 e5                	mov    ebp,esp
c001bfe0:	83 ec 18             	sub    esp,0x18
c001bfe3:	e8 f6 47 00 00       	call   c00207de <KeUserIOReceived()>
c001bfe8:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001bfeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfee:	0f b7 c0             	movzx  eax,ax
c001bff1:	83 f2 01             	xor    edx,0x1
c001bff4:	88 90 40 ff 03 c0    	mov    BYTE PTR [eax-0x3ffc00c0],dl
c001bffa:	a1 28 ff 03 c0       	mov    eax,ds:0xc003ff28
c001bfff:	85 c0                	test   eax,eax
c001c001:	74 24                	je     c001c027 <sendKeyboardToken(KeyboardToken)+0x4a>
c001c003:	8b 0d 28 ff 03 c0    	mov    ecx,DWORD PTR ds:0xc003ff28
c001c009:	83 ec 04             	sub    esp,0x4
c001c00c:	68 40 ff 03 c0       	push   0xc003ff40
c001c011:	83 ec 08             	sub    esp,0x8
c001c014:	89 e2                	mov    edx,esp
c001c016:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c019:	89 02                	mov    DWORD PTR [edx],eax
c001c01b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c01e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001c022:	ff d1                	call   ecx
c001c024:	83 c4 10             	add    esp,0x10
c001c027:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001c02b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001c02e:	a0 48 03 04 c0       	mov    al,ds:0xc0040348
c001c033:	0f b6 d2             	movzx  edx,dl
c001c036:	0f b6 c0             	movzx  eax,al
c001c039:	39 c2                	cmp    edx,eax
c001c03b:	74 1c                	je     c001c059 <sendKeyboardToken(KeyboardToken)+0x7c>
c001c03d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001c040:	a2 48 03 04 c0       	mov    ds:0xc0040348,al
c001c045:	a0 48 03 04 c0       	mov    al,ds:0xc0040348
c001c04a:	0f b6 c0             	movzx  eax,al
c001c04d:	83 ec 0c             	sub    esp,0xc
c001c050:	50                   	push   eax
c001c051:	e8 bc af ff ff       	call   c0017012 <setTerminalScrollLock(bool)>
c001c056:	83 c4 10             	add    esp,0x10
c001c059:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001c05c:	0f b6 c0             	movzx  eax,al
c001c05f:	85 c0                	test   eax,eax
c001c061:	0f 84 da 00 00 00    	je     c001c141 <sendKeyboardToken(KeyboardToken)+0x164>
c001c067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c06a:	0f b7 c0             	movzx  eax,ax
c001c06d:	3d 18 03 00 00       	cmp    eax,0x318
c001c072:	75 06                	jne    c001c07a <sendKeyboardToken(KeyboardToken)+0x9d>
c001c074:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001c07a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c07d:	0f b7 c0             	movzx  eax,ax
c001c080:	3d 19 03 00 00       	cmp    eax,0x319
c001c085:	75 06                	jne    c001c08d <sendKeyboardToken(KeyboardToken)+0xb0>
c001c087:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001c08d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c090:	0f b7 c0             	movzx  eax,ax
c001c093:	3d 1a 03 00 00       	cmp    eax,0x31a
c001c098:	75 06                	jne    c001c0a0 <sendKeyboardToken(KeyboardToken)+0xc3>
c001c09a:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001c0a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0a3:	0f b7 c0             	movzx  eax,ax
c001c0a6:	3d 1b 03 00 00       	cmp    eax,0x31b
c001c0ab:	75 06                	jne    c001c0b3 <sendKeyboardToken(KeyboardToken)+0xd6>
c001c0ad:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001c0b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0b6:	0f b7 c0             	movzx  eax,ax
c001c0b9:	3d 1c 03 00 00       	cmp    eax,0x31c
c001c0be:	75 06                	jne    c001c0c6 <sendKeyboardToken(KeyboardToken)+0xe9>
c001c0c0:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001c0c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0c9:	0f b7 c0             	movzx  eax,ax
c001c0cc:	3d 1d 03 00 00       	cmp    eax,0x31d
c001c0d1:	75 06                	jne    c001c0d9 <sendKeyboardToken(KeyboardToken)+0xfc>
c001c0d3:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001c0d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0dc:	0f b7 c0             	movzx  eax,ax
c001c0df:	3d 1e 03 00 00       	cmp    eax,0x31e
c001c0e4:	75 06                	jne    c001c0ec <sendKeyboardToken(KeyboardToken)+0x10f>
c001c0e6:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001c0ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0ef:	0f b7 c0             	movzx  eax,ax
c001c0f2:	3d 1f 03 00 00       	cmp    eax,0x31f
c001c0f7:	75 06                	jne    c001c0ff <sendKeyboardToken(KeyboardToken)+0x122>
c001c0f9:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001c0ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c102:	0f b7 c0             	movzx  eax,ax
c001c105:	3d 20 03 00 00       	cmp    eax,0x320
c001c10a:	75 06                	jne    c001c112 <sendKeyboardToken(KeyboardToken)+0x135>
c001c10c:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001c112:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c115:	0f b7 c0             	movzx  eax,ax
c001c118:	3d 21 03 00 00       	cmp    eax,0x321
c001c11d:	75 06                	jne    c001c125 <sendKeyboardToken(KeyboardToken)+0x148>
c001c11f:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001c125:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c128:	0f b7 c0             	movzx  eax,ax
c001c12b:	3d 22 03 00 00       	cmp    eax,0x322
c001c130:	0f 85 f1 00 00 00    	jne    c001c227 <sendKeyboardToken(KeyboardToken)+0x24a>
c001c136:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001c13c:	e9 e6 00 00 00       	jmp    c001c227 <sendKeyboardToken(KeyboardToken)+0x24a>
c001c141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c144:	0f b7 c0             	movzx  eax,ax
c001c147:	3d 18 03 00 00       	cmp    eax,0x318
c001c14c:	75 0a                	jne    c001c158 <sendKeyboardToken(KeyboardToken)+0x17b>
c001c14e:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001c154:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c158:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c15b:	0f b7 c0             	movzx  eax,ax
c001c15e:	3d 19 03 00 00       	cmp    eax,0x319
c001c163:	75 0a                	jne    c001c16f <sendKeyboardToken(KeyboardToken)+0x192>
c001c165:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001c16b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c16f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c172:	0f b7 c0             	movzx  eax,ax
c001c175:	3d 1a 03 00 00       	cmp    eax,0x31a
c001c17a:	75 0a                	jne    c001c186 <sendKeyboardToken(KeyboardToken)+0x1a9>
c001c17c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001c182:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c186:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c189:	0f b7 c0             	movzx  eax,ax
c001c18c:	3d 1b 03 00 00       	cmp    eax,0x31b
c001c191:	75 0a                	jne    c001c19d <sendKeyboardToken(KeyboardToken)+0x1c0>
c001c193:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001c199:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c19d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1a0:	0f b7 c0             	movzx  eax,ax
c001c1a3:	3d 1c 03 00 00       	cmp    eax,0x31c
c001c1a8:	75 0a                	jne    c001c1b4 <sendKeyboardToken(KeyboardToken)+0x1d7>
c001c1aa:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001c1b0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c1b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1b7:	0f b7 c0             	movzx  eax,ax
c001c1ba:	3d 1d 03 00 00       	cmp    eax,0x31d
c001c1bf:	75 0a                	jne    c001c1cb <sendKeyboardToken(KeyboardToken)+0x1ee>
c001c1c1:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001c1c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c1cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1ce:	0f b7 c0             	movzx  eax,ax
c001c1d1:	3d 1e 03 00 00       	cmp    eax,0x31e
c001c1d6:	75 0a                	jne    c001c1e2 <sendKeyboardToken(KeyboardToken)+0x205>
c001c1d8:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001c1de:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c1e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1e5:	0f b7 c0             	movzx  eax,ax
c001c1e8:	3d 1f 03 00 00       	cmp    eax,0x31f
c001c1ed:	75 0a                	jne    c001c1f9 <sendKeyboardToken(KeyboardToken)+0x21c>
c001c1ef:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001c1f5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c1f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1fc:	0f b7 c0             	movzx  eax,ax
c001c1ff:	3d 20 03 00 00       	cmp    eax,0x320
c001c204:	75 0a                	jne    c001c210 <sendKeyboardToken(KeyboardToken)+0x233>
c001c206:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001c20c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c213:	0f b7 c0             	movzx  eax,ax
c001c216:	3d 21 03 00 00       	cmp    eax,0x321
c001c21b:	75 0a                	jne    c001c227 <sendKeyboardToken(KeyboardToken)+0x24a>
c001c21d:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001c223:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c22a:	0f b7 c0             	movzx  eax,ax
c001c22d:	3d 00 02 00 00       	cmp    eax,0x200
c001c232:	75 2f                	jne    c001c263 <sendKeyboardToken(KeyboardToken)+0x286>
c001c234:	a0 40 03 04 c0       	mov    al,ds:0xc0040340
c001c239:	83 f0 01             	xor    eax,0x1
c001c23c:	0f b6 c0             	movzx  eax,al
c001c23f:	85 c0                	test   eax,eax
c001c241:	74 20                	je     c001c263 <sendKeyboardToken(KeyboardToken)+0x286>
c001c243:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c001c248:	6a 01                	push   0x1
c001c24a:	6a 00                	push   0x0
c001c24c:	68 2e be 01 c0       	push   0xc001be2e
c001c251:	50                   	push   eax
c001c252:	e8 f5 92 00 00       	call   c002554c <Process::createThread(void (*)(void*), void*, int)>
c001c257:	83 c4 10             	add    esp,0x10
c001c25a:	c6 05 40 03 04 c0 01 	mov    BYTE PTR ds:0xc0040340,0x1
c001c261:	eb 3a                	jmp    c001c29d <sendKeyboardToken(KeyboardToken)+0x2c0>
c001c263:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c266:	0f b7 c0             	movzx  eax,ax
c001c269:	3d 01 02 00 00       	cmp    eax,0x201
c001c26e:	75 2d                	jne    c001c29d <sendKeyboardToken(KeyboardToken)+0x2c0>
c001c270:	a0 40 03 04 c0       	mov    al,ds:0xc0040340
c001c275:	83 f0 01             	xor    eax,0x1
c001c278:	0f b6 c0             	movzx  eax,al
c001c27b:	85 c0                	test   eax,eax
c001c27d:	74 1e                	je     c001c29d <sendKeyboardToken(KeyboardToken)+0x2c0>
c001c27f:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c001c284:	6a 01                	push   0x1
c001c286:	6a 00                	push   0x0
c001c288:	68 98 be 01 c0       	push   0xc001be98
c001c28d:	50                   	push   eax
c001c28e:	e8 b9 92 00 00       	call   c002554c <Process::createThread(void (*)(void*), void*, int)>
c001c293:	83 c4 10             	add    esp,0x10
c001c296:	c6 05 40 03 04 c0 01 	mov    BYTE PTR ds:0xc0040340,0x1
c001c29d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2a0:	0f b7 c0             	movzx  eax,ax
c001c2a3:	3d 25 03 00 00       	cmp    eax,0x325
c001c2a8:	75 06                	jne    c001c2b0 <sendKeyboardToken(KeyboardToken)+0x2d3>
c001c2aa:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001c2b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2b3:	0f b7 c0             	movzx  eax,ax
c001c2b6:	3d 24 03 00 00       	cmp    eax,0x324
c001c2bb:	75 06                	jne    c001c2c3 <sendKeyboardToken(KeyboardToken)+0x2e6>
c001c2bd:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001c2c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2c6:	0f b7 c0             	movzx  eax,ax
c001c2c9:	3d 23 03 00 00       	cmp    eax,0x323
c001c2ce:	75 06                	jne    c001c2d6 <sendKeyboardToken(KeyboardToken)+0x2f9>
c001c2d0:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001c2d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2d9:	0f b7 c0             	movzx  eax,ax
c001c2dc:	3d 26 03 00 00       	cmp    eax,0x326
c001c2e1:	75 06                	jne    c001c2e9 <sendKeyboardToken(KeyboardToken)+0x30c>
c001c2e3:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001c2e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2ec:	0f b7 c0             	movzx  eax,ax
c001c2ef:	3d 27 03 00 00       	cmp    eax,0x327
c001c2f4:	75 06                	jne    c001c2fc <sendKeyboardToken(KeyboardToken)+0x31f>
c001c2f6:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001c2fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2ff:	0f b7 c0             	movzx  eax,ax
c001c302:	3d 22 03 00 00       	cmp    eax,0x322
c001c307:	75 06                	jne    c001c30f <sendKeyboardToken(KeyboardToken)+0x332>
c001c309:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001c30f:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001c313:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c316:	83 f0 01             	xor    eax,0x1
c001c319:	0f b6 c0             	movzx  eax,al
c001c31c:	85 c0                	test   eax,eax
c001c31e:	74 7c                	je     c001c39c <sendKeyboardToken(KeyboardToken)+0x3bf>
c001c320:	a0 41 00 04 c0       	mov    al,ds:0xc0040041
c001c325:	0f b6 c0             	movzx  eax,al
c001c328:	85 c0                	test   eax,eax
c001c32a:	74 43                	je     c001c36f <sendKeyboardToken(KeyboardToken)+0x392>
c001c32c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c330:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001c334:	85 c0                	test   eax,eax
c001c336:	74 2b                	je     c001c363 <sendKeyboardToken(KeyboardToken)+0x386>
c001c338:	8b 15 44 03 04 c0    	mov    edx,DWORD PTR ds:0xc0040344
c001c33e:	89 d0                	mov    eax,edx
c001c340:	c1 e0 02             	shl    eax,0x2
c001c343:	01 d0                	add    eax,edx
c001c345:	01 c0                	add    eax,eax
c001c347:	a3 44 03 04 c0       	mov    ds:0xc0040344,eax
c001c34c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c34f:	0f b7 c0             	movzx  eax,ax
c001c352:	8d 50 d0             	lea    edx,[eax-0x30]
c001c355:	a1 44 03 04 c0       	mov    eax,ds:0xc0040344
c001c35a:	01 d0                	add    eax,edx
c001c35c:	a3 44 03 04 c0       	mov    ds:0xc0040344,eax
c001c361:	eb 71                	jmp    c001c3d4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c363:	c7 05 44 03 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040344,0x0
c001c36d:	eb 65                	jmp    c001c3d4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c36f:	a1 44 03 04 c0       	mov    eax,ds:0xc0040344
c001c374:	85 c0                	test   eax,eax
c001c376:	74 18                	je     c001c390 <sendKeyboardToken(KeyboardToken)+0x3b3>
c001c378:	a1 44 03 04 c0       	mov    eax,ds:0xc0040344
c001c37d:	0f b6 c0             	movzx  eax,al
c001c380:	83 ec 0c             	sub    esp,0xc
c001c383:	50                   	push   eax
c001c384:	e8 79 fb ff ff       	call   c001bf02 <sendKeyToTerminal(unsigned char)>
c001c389:	83 c4 10             	add    esp,0x10
c001c38c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c390:	c7 05 44 03 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040344,0x0
c001c39a:	eb 38                	jmp    c001c3d4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c39c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c39f:	0f b7 c0             	movzx  eax,ax
c001c3a2:	3d 01 01 00 00       	cmp    eax,0x101
c001c3a7:	75 2b                	jne    c001c3d4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c3a9:	a1 44 03 04 c0       	mov    eax,ds:0xc0040344
c001c3ae:	85 c0                	test   eax,eax
c001c3b0:	74 18                	je     c001c3ca <sendKeyboardToken(KeyboardToken)+0x3ed>
c001c3b2:	a1 44 03 04 c0       	mov    eax,ds:0xc0040344
c001c3b7:	0f b6 c0             	movzx  eax,al
c001c3ba:	83 ec 0c             	sub    esp,0xc
c001c3bd:	50                   	push   eax
c001c3be:	e8 3f fb ff ff       	call   c001bf02 <sendKeyToTerminal(unsigned char)>
c001c3c3:	83 c4 10             	add    esp,0x10
c001c3c6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c3ca:	c7 05 44 03 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040344,0x0
c001c3d4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c3d7:	83 f0 01             	xor    eax,0x1
c001c3da:	0f b6 c0             	movzx  eax,al
c001c3dd:	85 c0                	test   eax,eax
c001c3df:	74 5a                	je     c001c43b <sendKeyboardToken(KeyboardToken)+0x45e>
c001c3e1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c3e4:	83 f0 01             	xor    eax,0x1
c001c3e7:	0f b6 c0             	movzx  eax,al
c001c3ea:	85 c0                	test   eax,eax
c001c3ec:	74 4d                	je     c001c43b <sendKeyboardToken(KeyboardToken)+0x45e>
c001c3ee:	a0 40 00 04 c0       	mov    al,ds:0xc0040040
c001c3f3:	83 f0 01             	xor    eax,0x1
c001c3f6:	0f b6 c0             	movzx  eax,al
c001c3f9:	85 c0                	test   eax,eax
c001c3fb:	74 3e                	je     c001c43b <sendKeyboardToken(KeyboardToken)+0x45e>
c001c3fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c400:	0f b7 c0             	movzx  eax,ax
c001c403:	83 f8 1f             	cmp    eax,0x1f
c001c406:	76 0b                	jbe    c001c413 <sendKeyboardToken(KeyboardToken)+0x436>
c001c408:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c40b:	0f b7 c0             	movzx  eax,ax
c001c40e:	83 f8 7e             	cmp    eax,0x7e
c001c411:	76 16                	jbe    c001c429 <sendKeyboardToken(KeyboardToken)+0x44c>
c001c413:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c416:	0f b7 c0             	movzx  eax,ax
c001c419:	83 f8 0a             	cmp    eax,0xa
c001c41c:	74 0b                	je     c001c429 <sendKeyboardToken(KeyboardToken)+0x44c>
c001c41e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c421:	0f b7 c0             	movzx  eax,ax
c001c424:	83 f8 08             	cmp    eax,0x8
c001c427:	75 12                	jne    c001c43b <sendKeyboardToken(KeyboardToken)+0x45e>
c001c429:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c42c:	0f b6 c0             	movzx  eax,al
c001c42f:	83 ec 0c             	sub    esp,0xc
c001c432:	50                   	push   eax
c001c433:	e8 ca fa ff ff       	call   c001bf02 <sendKeyToTerminal(unsigned char)>
c001c438:	83 c4 10             	add    esp,0x10
c001c43b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c43e:	83 f0 01             	xor    eax,0x1
c001c441:	0f b6 c0             	movzx  eax,al
c001c444:	85 c0                	test   eax,eax
c001c446:	74 5d                	je     c001c4a5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c448:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c44b:	83 f0 01             	xor    eax,0x1
c001c44e:	0f b6 c0             	movzx  eax,al
c001c451:	85 c0                	test   eax,eax
c001c453:	74 50                	je     c001c4a5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c455:	a0 40 00 04 c0       	mov    al,ds:0xc0040040
c001c45a:	0f b6 c0             	movzx  eax,al
c001c45d:	85 c0                	test   eax,eax
c001c45f:	74 44                	je     c001c4a5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c461:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c464:	0f b7 c0             	movzx  eax,ax
c001c467:	83 f8 3f             	cmp    eax,0x3f
c001c46a:	76 39                	jbe    c001c4a5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c46c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c46f:	0f b7 c0             	movzx  eax,ax
c001c472:	83 f8 7f             	cmp    eax,0x7f
c001c475:	77 2e                	ja     c001c4a5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c47a:	88 c2                	mov    dl,al
c001c47c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c47f:	0f b7 c0             	movzx  eax,ax
c001c482:	83 f8 5f             	cmp    eax,0x5f
c001c485:	76 04                	jbe    c001c48b <sendKeyboardToken(KeyboardToken)+0x4ae>
c001c487:	b0 20                	mov    al,0x20
c001c489:	eb 02                	jmp    c001c48d <sendKeyboardToken(KeyboardToken)+0x4b0>
c001c48b:	b0 00                	mov    al,0x0
c001c48d:	89 d1                	mov    ecx,edx
c001c48f:	29 c1                	sub    ecx,eax
c001c491:	89 c8                	mov    eax,ecx
c001c493:	83 e8 40             	sub    eax,0x40
c001c496:	0f b6 c0             	movzx  eax,al
c001c499:	83 ec 0c             	sub    esp,0xc
c001c49c:	50                   	push   eax
c001c49d:	e8 60 fa ff ff       	call   c001bf02 <sendKeyToTerminal(unsigned char)>
c001c4a2:	83 c4 10             	add    esp,0x10
c001c4a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c4a8:	0f b7 c0             	movzx  eax,ax
c001c4ab:	3d 00 03 00 00       	cmp    eax,0x300
c001c4b0:	75 12                	jne    c001c4c4 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c4b2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c4b5:	83 f0 01             	xor    eax,0x1
c001c4b8:	0f b6 c0             	movzx  eax,al
c001c4bb:	85 c0                	test   eax,eax
c001c4bd:	74 05                	je     c001c4c4 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c4bf:	e8 4f ab ff ff       	call   c0017013 <doTerminalCycle()>
c001c4c4:	90                   	nop
c001c4c5:	c9                   	leave  
c001c4c6:	c3                   	ret    

c001c4c7 <clearInternalKeybuffer(VgaText*)>:
c001c4c7:	55                   	push   ebp
c001c4c8:	89 e5                	mov    ebp,esp
c001c4ca:	83 ec 08             	sub    esp,0x8
c001c4cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c4d0:	05 02 01 00 00       	add    eax,0x102
c001c4d5:	83 ec 0c             	sub    esp,0xc
c001c4d8:	50                   	push   eax
c001c4d9:	e8 92 40 fe ff       	call   c0000570 <strlen>
c001c4de:	83 c4 10             	add    esp,0x10
c001c4e1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c4e4:	81 c2 02 01 00 00    	add    edx,0x102
c001c4ea:	83 ec 04             	sub    esp,0x4
c001c4ed:	50                   	push   eax
c001c4ee:	6a 00                	push   0x0
c001c4f0:	52                   	push   edx
c001c4f1:	e8 fa 3f fe ff       	call   c00004f0 <memset>
c001c4f6:	83 c4 10             	add    esp,0x10
c001c4f9:	90                   	nop
c001c4fa:	c9                   	leave  
c001c4fb:	c3                   	ret    

c001c4fc <readKeyboard(VgaText*, char*, unsigned long)>:
c001c4fc:	55                   	push   ebp
c001c4fd:	89 e5                	mov    ebp,esp
c001c4ff:	83 ec 18             	sub    esp,0x18
c001c502:	a1 28 ff 03 c0       	mov    eax,ds:0xc003ff28
c001c507:	85 c0                	test   eax,eax
c001c509:	74 2a                	je     c001c535 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001c50b:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001c511:	8b 0d 28 ff 03 c0    	mov    ecx,DWORD PTR ds:0xc003ff28
c001c517:	83 ec 04             	sub    esp,0x4
c001c51a:	68 40 ff 03 c0       	push   0xc003ff40
c001c51f:	83 ec 08             	sub    esp,0x8
c001c522:	89 e2                	mov    edx,esp
c001c524:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001c527:	89 02                	mov    DWORD PTR [edx],eax
c001c529:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001c52c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001c530:	ff d1                	call   ecx
c001c532:	83 c4 10             	add    esp,0x10
c001c535:	fb                   	sti    
c001c536:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001c53d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001c541:	0f 84 0d 01 00 00    	je     c001c654 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c001c547:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c54a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c550:	0f be c0             	movsx  eax,al
c001c553:	85 c0                	test   eax,eax
c001c555:	75 2c                	jne    c001c583 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c001c557:	fa                   	cli    
c001c558:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001c55d:	83 c0 01             	add    eax,0x1
c001c560:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001c565:	e8 32 92 00 00       	call   c002579c <schedule()>
c001c56a:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001c56f:	83 e8 01             	sub    eax,0x1
c001c572:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001c577:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001c57c:	85 c0                	test   eax,eax
c001c57e:	75 c7                	jne    c001c547 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c580:	fb                   	sti    
c001c581:	eb c4                	jmp    c001c547 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c583:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c586:	8d 50 01             	lea    edx,[eax+0x1]
c001c589:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c58c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c58f:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c001c595:	88 10                	mov    BYTE PTR [eax],dl
c001c597:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c59a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c5a0:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001c5a3:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c5a7:	83 f8 03             	cmp    eax,0x3
c001c5aa:	75 1e                	jne    c001c5ca <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c001c5ac:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c5b1:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5b3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c5b6:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c5bc:	83 ec 08             	sub    esp,0x8
c001c5bf:	6a 02                	push   0x2
c001c5c1:	50                   	push   eax
c001c5c2:	e8 80 4a 00 00       	call   c0021047 <KeRaiseSignal(SigHandlerBlock*, int)>
c001c5c7:	83 c4 10             	add    esp,0x10
c001c5ca:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c5ce:	83 f8 1c             	cmp    eax,0x1c
c001c5d1:	75 1e                	jne    c001c5f1 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c001c5d3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c5d8:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c5dd:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c5e3:	83 ec 08             	sub    esp,0x8
c001c5e6:	6a 09                	push   0x9
c001c5e8:	50                   	push   eax
c001c5e9:	e8 59 4a 00 00       	call   c0021047 <KeRaiseSignal(SigHandlerBlock*, int)>
c001c5ee:	83 c4 10             	add    esp,0x10
c001c5f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c5f4:	05 02 01 00 00       	add    eax,0x102
c001c5f9:	83 ec 0c             	sub    esp,0xc
c001c5fc:	50                   	push   eax
c001c5fd:	e8 6e 3f fe ff       	call   c0000570 <strlen>
c001c602:	83 c4 10             	add    esp,0x10
c001c605:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c608:	81 c2 02 01 00 00    	add    edx,0x102
c001c60e:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c611:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c614:	81 c2 02 01 00 00    	add    edx,0x102
c001c61a:	83 ec 04             	sub    esp,0x4
c001c61d:	50                   	push   eax
c001c61e:	51                   	push   ecx
c001c61f:	52                   	push   edx
c001c620:	e8 ab 3d fe ff       	call   c00003d0 <memmove>
c001c625:	83 c4 10             	add    esp,0x10
c001c628:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c001c62c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c001c630:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c634:	83 f8 0a             	cmp    eax,0xa
c001c637:	74 16                	je     c001c64f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c639:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c63d:	83 f8 03             	cmp    eax,0x3
c001c640:	74 0d                	je     c001c64f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c642:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c646:	83 f8 1c             	cmp    eax,0x1c
c001c649:	0f 85 ee fe ff ff    	jne    c001c53d <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c001c64f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c652:	eb 03                	jmp    c001c657 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c001c654:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c657:	c9                   	leave  
c001c658:	c3                   	ret    
c001c659:	90                   	nop

c001c65a <Keyboard::Keyboard(char const*)>:
c001c65a:	83 ec 0c             	sub    esp,0xc
c001c65d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c661:	83 ec 08             	sub    esp,0x8
c001c664:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c668:	50                   	push   eax
c001c669:	e8 06 f1 ff ff       	call   c001b774 <Device::Device(char const*)>
c001c66e:	83 c4 10             	add    esp,0x10
c001c671:	ba e8 28 03 c0       	mov    edx,0xc00328e8
c001c676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c67a:	89 10                	mov    DWORD PTR [eax],edx
c001c67c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c680:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001c68a:	c6 05 24 ff 03 c0 01 	mov    BYTE PTR ds:0xc003ff24,0x1
c001c691:	90                   	nop
c001c692:	83 c4 0c             	add    esp,0xc
c001c695:	c3                   	ret    

c001c696 <Keyboard::~Keyboard()>:
c001c696:	83 ec 0c             	sub    esp,0xc
c001c699:	ba e8 28 03 c0       	mov    edx,0xc00328e8
c001c69e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6a2:	89 10                	mov    DWORD PTR [eax],edx
c001c6a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6a8:	83 ec 0c             	sub    esp,0xc
c001c6ab:	50                   	push   eax
c001c6ac:	e8 63 ee ff ff       	call   c001b514 <Device::~Device()>
c001c6b1:	83 c4 10             	add    esp,0x10
c001c6b4:	90                   	nop
c001c6b5:	83 c4 0c             	add    esp,0xc
c001c6b8:	c3                   	ret    
c001c6b9:	90                   	nop

c001c6ba <Keyboard::~Keyboard()>:
c001c6ba:	83 ec 0c             	sub    esp,0xc
c001c6bd:	83 ec 0c             	sub    esp,0xc
c001c6c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6c4:	e8 cd ff ff ff       	call   c001c696 <Keyboard::~Keyboard()>
c001c6c9:	83 c4 10             	add    esp,0x10
c001c6cc:	83 ec 08             	sub    esp,0x8
c001c6cf:	68 5c 01 00 00       	push   0x15c
c001c6d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6d8:	e8 4b cc ff ff       	call   c0019328 <operator delete(void*, unsigned long)>
c001c6dd:	83 c4 10             	add    esp,0x10
c001c6e0:	83 c4 0c             	add    esp,0xc
c001c6e3:	c3                   	ret    

c001c6e4 <LogicalDisk::close(int, int, void*)>:
c001c6e4:	83 c8 ff             	or     eax,0xffffffff
c001c6e7:	c3                   	ret    

c001c6e8 <LogicalDisk::~LogicalDisk()>:
c001c6e8:	83 ec 0c             	sub    esp,0xc
c001c6eb:	ba 60 29 03 c0       	mov    edx,0xc0032960
c001c6f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f4:	89 10                	mov    DWORD PTR [eax],edx
c001c6f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6fa:	83 ec 0c             	sub    esp,0xc
c001c6fd:	50                   	push   eax
c001c6fe:	e8 11 ee ff ff       	call   c001b514 <Device::~Device()>
c001c703:	83 c4 10             	add    esp,0x10
c001c706:	90                   	nop
c001c707:	83 c4 0c             	add    esp,0xc
c001c70a:	c3                   	ret    
c001c70b:	90                   	nop

c001c70c <LogicalDisk::~LogicalDisk()>:
c001c70c:	83 ec 0c             	sub    esp,0xc
c001c70f:	83 ec 0c             	sub    esp,0xc
c001c712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c716:	e8 cd ff ff ff       	call   c001c6e8 <LogicalDisk::~LogicalDisk()>
c001c71b:	83 c4 10             	add    esp,0x10
c001c71e:	83 ec 08             	sub    esp,0x8
c001c721:	68 78 01 00 00       	push   0x178
c001c726:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c72a:	e8 f9 cb ff ff       	call   c0019328 <operator delete(void*, unsigned long)>
c001c72f:	83 c4 10             	add    esp,0x10
c001c732:	83 c4 0c             	add    esp,0xc
c001c735:	c3                   	ret    

c001c736 <LogicalDisk::open(int, int, void*)>:
c001c736:	83 ec 18             	sub    esp,0x18
c001c739:	68 14 29 03 c0       	push   0xc0032914
c001c73e:	e8 4b 40 00 00       	call   c002078e <KePanic(char const*)>
c001c743:	83 c8 ff             	or     eax,0xffffffff
c001c746:	83 c4 1c             	add    esp,0x1c
c001c749:	c3                   	ret    

c001c74a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001c74a:	53                   	push   ebx
c001c74b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c74f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c753:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c757:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001c75d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001c763:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001c769:	77 10                	ja     c001c77b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001c76b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001c771:	89 d3                	mov    ebx,edx
c001c773:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001c779:	72 05                	jb     c001c780 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001c77b:	83 c8 ff             	or     eax,0xffffffff
c001c77e:	89 c2                	mov    edx,eax
c001c780:	5b                   	pop    ebx
c001c781:	c3                   	ret    

c001c782 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001c782:	56                   	push   esi
c001c783:	83 c8 ff             	or     eax,0xffffffff
c001c786:	53                   	push   ebx
c001c787:	89 c2                	mov    edx,eax
c001c789:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c78d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001c791:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c795:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c79b:	77 27                	ja     c001c7c4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c79d:	89 d8                	mov    eax,ebx
c001c79f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001c7a5:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001c7ab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c7b0:	89 c2                	mov    edx,eax
c001c7b2:	73 10                	jae    c001c7c4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c7b4:	89 c8                	mov    eax,ecx
c001c7b6:	89 da                	mov    edx,ebx
c001c7b8:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c7be:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001c7c4:	5b                   	pop    ebx
c001c7c5:	5e                   	pop    esi
c001c7c6:	c3                   	ret    
c001c7c7:	90                   	nop

c001c7c8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c7c8:	83 ec 1c             	sub    esp,0x1c
c001c7cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c7cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c7d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c7d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c7df:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c7e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c7ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7ee:	83 ec 08             	sub    esp,0x8
c001c7f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c7f5:	50                   	push   eax
c001c7f6:	e8 79 ef ff ff       	call   c001b774 <Device::Device(char const*)>
c001c7fb:	83 c4 10             	add    esp,0x10
c001c7fe:	ba 60 29 03 c0       	mov    edx,0xc0032960
c001c803:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c807:	89 10                	mov    DWORD PTR [eax],edx
c001c809:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c80d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c814:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c818:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c81f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c823:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c82a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c82e:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001c838:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c83c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c840:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c844:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001c84a:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001c850:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c854:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c857:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c85b:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001c861:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001c867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c86b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c86f:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001c875:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c879:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c883:	90                   	nop
c001c884:	83 c4 1c             	add    esp,0x1c
c001c887:	c3                   	ret    

c001c888 <LogicalDisk::assignDriveLetter()>:
c001c888:	55                   	push   ebp
c001c889:	57                   	push   edi
c001c88a:	56                   	push   esi
c001c88b:	53                   	push   ebx
c001c88c:	83 ec 14             	sub    esp,0x14
c001c88f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c893:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001c899:	b0 41                	mov    al,0x41
c001c89b:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c001c8a1:	84 d2                	test   dl,dl
c001c8a3:	75 02                	jne    c001c8a7 <LogicalDisk::assignDriveLetter()+0x1f>
c001c8a5:	b0 43                	mov    al,0x43
c001c8a7:	8b 3d 60 03 04 c0    	mov    edi,DWORD PTR ds:0xc0040360
c001c8ad:	0f b6 ca             	movzx  ecx,dl
c001c8b0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c8b4:	0f be e8             	movsx  ebp,al
c001c8b7:	8b 3d 64 03 04 c0    	mov    edi,DWORD PTR ds:0xc0040364
c001c8bd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c8c1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001c8c5:	3c 43                	cmp    al,0x43
c001c8c7:	75 10                	jne    c001c8d9 <LogicalDisk::assignDriveLetter()+0x51>
c001c8c9:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001c8d0:	75 5a                	jne    c001c92c <LogicalDisk::assignDriveLetter()+0xa4>
c001c8d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c8d7:	75 53                	jne    c001c92c <LogicalDisk::assignDriveLetter()+0xa4>
c001c8d9:	8d 75 bf             	lea    esi,[ebp-0x41]
c001c8dc:	ba 01 00 00 00       	mov    edx,0x1
c001c8e1:	89 34 24             	mov    DWORD PTR [esp],esi
c001c8e4:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001c8e7:	d3 e2                	shl    edx,cl
c001c8e9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c8ed:	89 d7                	mov    edi,edx
c001c8ef:	89 d6                	mov    esi,edx
c001c8f1:	c1 ff 1f             	sar    edi,0x1f
c001c8f4:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c001c8f8:	21 f9                	and    ecx,edi
c001c8fa:	09 d1                	or     ecx,edx
c001c8fc:	75 2e                	jne    c001c92c <LogicalDisk::assignDriveLetter()+0xa4>
c001c8fe:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c902:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c906:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001c90c:	09 f2                	or     edx,esi
c001c90e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c911:	89 15 60 03 04 c0    	mov    DWORD PTR ds:0xc0040360,edx
c001c917:	89 1c b5 80 03 04 c0 	mov    DWORD PTR [esi*4-0x3ffbfc80],ebx
c001c91e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c922:	09 fa                	or     edx,edi
c001c924:	89 15 64 03 04 c0    	mov    DWORD PTR ds:0xc0040364,edx
c001c92a:	eb 0d                	jmp    c001c939 <LogicalDisk::assignDriveLetter()+0xb1>
c001c92c:	8d 50 01             	lea    edx,[eax+0x1]
c001c92f:	45                   	inc    ebp
c001c930:	88 d0                	mov    al,dl
c001c932:	80 fa 5b             	cmp    dl,0x5b
c001c935:	75 8e                	jne    c001c8c5 <LogicalDisk::assignDriveLetter()+0x3d>
c001c937:	31 c0                	xor    eax,eax
c001c939:	83 c4 14             	add    esp,0x14
c001c93c:	5b                   	pop    ebx
c001c93d:	5e                   	pop    esi
c001c93e:	5f                   	pop    edi
c001c93f:	5d                   	pop    ebp
c001c940:	c3                   	ret    
c001c941:	90                   	nop

c001c942 <LogicalDisk::mount()>:
c001c942:	56                   	push   esi
c001c943:	53                   	push   ebx
c001c944:	53                   	push   ebx
c001c945:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c949:	8b 1d 04 df 03 c0    	mov    ebx,DWORD PTR ds:0xc003df04
c001c94f:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c001c959:	85 db                	test   ebx,ebx
c001c95b:	74 27                	je     c001c984 <LogicalDisk::mount()+0x42>
c001c95d:	51                   	push   ecx
c001c95e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001c965:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c967:	83 e8 41             	sub    eax,0x41
c001c96a:	50                   	push   eax
c001c96b:	56                   	push   esi
c001c96c:	53                   	push   ebx
c001c96d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c970:	83 c4 10             	add    esp,0x10
c001c973:	84 c0                	test   al,al
c001c975:	74 08                	je     c001c97f <LogicalDisk::mount()+0x3d>
c001c977:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c001c97d:	eb 07                	jmp    c001c986 <LogicalDisk::mount()+0x44>
c001c97f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001c982:	eb d5                	jmp    c001c959 <LogicalDisk::mount()+0x17>
c001c984:	31 c0                	xor    eax,eax
c001c986:	5a                   	pop    edx
c001c987:	5b                   	pop    ebx
c001c988:	5e                   	pop    esi
c001c989:	c3                   	ret    

c001c98a <LogicalDisk::unmount()>:
c001c98a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c98e:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c998:	c3                   	ret    
c001c999:	90                   	nop

c001c99a <LogicalDisk::eject()>:
c001c99a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c99e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c9a4:	8b 10                	mov    edx,DWORD PTR [eax]
c001c9a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c9aa:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001c9ad:	90                   	nop

c001c9ae <LogicalDisk::unassignDriveLetter()>:
c001c9ae:	57                   	push   edi
c001c9af:	56                   	push   esi
c001c9b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c9b4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001c9bb:	85 c9                	test   ecx,ecx
c001c9bd:	75 0f                	jne    c001c9ce <LogicalDisk::unassignDriveLetter()+0x20>
c001c9bf:	c7 44 24 0c 38 29 03 c0 	mov    DWORD PTR [esp+0xc],0xc0032938
c001c9c7:	5e                   	pop    esi
c001c9c8:	5f                   	pop    edi
c001c9c9:	e9 c0 3d 00 00       	jmp    c002078e <KePanic(char const*)>
c001c9ce:	83 e9 41             	sub    ecx,0x41
c001c9d1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001c9d8:	b8 01 00 00 00       	mov    eax,0x1
c001c9dd:	c7 04 8d 80 03 04 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffbfc80],0x0
c001c9e8:	d3 e0                	shl    eax,cl
c001c9ea:	89 c7                	mov    edi,eax
c001c9ec:	f7 d0                	not    eax
c001c9ee:	c1 ff 1f             	sar    edi,0x1f
c001c9f1:	21 05 60 03 04 c0    	and    DWORD PTR ds:0xc0040360,eax
c001c9f7:	89 fe                	mov    esi,edi
c001c9f9:	f7 d6                	not    esi
c001c9fb:	21 35 64 03 04 c0    	and    DWORD PTR ds:0xc0040364,esi
c001ca01:	5e                   	pop    esi
c001ca02:	5f                   	pop    edi
c001ca03:	c3                   	ret    

c001ca04 <LogicalDisk::read(unsigned long long, int, void*)>:
c001ca04:	57                   	push   edi
c001ca05:	56                   	push   esi
c001ca06:	53                   	push   ebx
c001ca07:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ca0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ca0f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ca13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca17:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001ca1d:	77 41                	ja     c001ca60 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001ca1f:	99                   	cdq    
c001ca20:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001ca26:	01 c8                	add    eax,ecx
c001ca28:	11 da                	adc    edx,ebx
c001ca2a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001ca30:	19 d7                	sbb    edi,edx
c001ca32:	72 33                	jb     c001ca67 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001ca34:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001ca3a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001ca40:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001ca44:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001ca48:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001ca4e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ca54:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ca58:	5b                   	pop    ebx
c001ca59:	5e                   	pop    esi
c001ca5a:	5f                   	pop    edi
c001ca5b:	e9 c8 0a 00 00       	jmp    c001d528 <VCache::read(unsigned long long, int, void*)>
c001ca60:	b8 05 00 00 00       	mov    eax,0x5
c001ca65:	eb 05                	jmp    c001ca6c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001ca67:	b8 07 00 00 00       	mov    eax,0x7
c001ca6c:	5b                   	pop    ebx
c001ca6d:	5e                   	pop    esi
c001ca6e:	5f                   	pop    edi
c001ca6f:	c3                   	ret    

c001ca70 <LogicalDisk::write(unsigned long long, int, void*)>:
c001ca70:	57                   	push   edi
c001ca71:	56                   	push   esi
c001ca72:	53                   	push   ebx
c001ca73:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ca77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ca7b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ca7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca83:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001ca89:	77 41                	ja     c001cacc <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001ca8b:	99                   	cdq    
c001ca8c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001ca92:	01 c8                	add    eax,ecx
c001ca94:	11 da                	adc    edx,ebx
c001ca96:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001ca9c:	19 d7                	sbb    edi,edx
c001ca9e:	72 33                	jb     c001cad3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001caa0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001caa6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001caac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001cab0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001cab4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001caba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cac0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cac4:	5b                   	pop    ebx
c001cac5:	5e                   	pop    esi
c001cac6:	5f                   	pop    edi
c001cac7:	e9 68 09 00 00       	jmp    c001d434 <VCache::write(unsigned long long, int, void*)>
c001cacc:	b8 05 00 00 00       	mov    eax,0x5
c001cad1:	eb 05                	jmp    c001cad8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001cad3:	b8 07 00 00 00       	mov    eax,0x7
c001cad8:	5b                   	pop    ebx
c001cad9:	5e                   	pop    esi
c001cada:	5f                   	pop    edi
c001cadb:	c3                   	ret    

c001cadc <Mouse::Mouse(char const*)>:
c001cadc:	83 ec 0c             	sub    esp,0xc
c001cadf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cae3:	83 ec 08             	sub    esp,0x8
c001cae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001caea:	50                   	push   eax
c001caeb:	e8 84 ec ff ff       	call   c001b774 <Device::Device(char const*)>
c001caf0:	83 c4 10             	add    esp,0x10
c001caf3:	ba 8c 29 03 c0       	mov    edx,0xc003298c
c001caf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cafc:	89 10                	mov    DWORD PTR [eax],edx
c001cafe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb02:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001cb0c:	90                   	nop
c001cb0d:	83 c4 0c             	add    esp,0xc
c001cb10:	c3                   	ret    
c001cb11:	90                   	nop
c001cb12:	66 90                	xchg   ax,ax

c001cb14 <Mouse::~Mouse()>:
c001cb14:	83 ec 0c             	sub    esp,0xc
c001cb17:	ba 8c 29 03 c0       	mov    edx,0xc003298c
c001cb1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb20:	89 10                	mov    DWORD PTR [eax],edx
c001cb22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb26:	83 ec 0c             	sub    esp,0xc
c001cb29:	50                   	push   eax
c001cb2a:	e8 e5 e9 ff ff       	call   c001b514 <Device::~Device()>
c001cb2f:	83 c4 10             	add    esp,0x10
c001cb32:	90                   	nop
c001cb33:	83 c4 0c             	add    esp,0xc
c001cb36:	c3                   	ret    
c001cb37:	90                   	nop

c001cb38 <Mouse::~Mouse()>:
c001cb38:	83 ec 0c             	sub    esp,0xc
c001cb3b:	83 ec 0c             	sub    esp,0xc
c001cb3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb42:	e8 cd ff ff ff       	call   c001cb14 <Mouse::~Mouse()>
c001cb47:	83 c4 10             	add    esp,0x10
c001cb4a:	83 ec 08             	sub    esp,0x8
c001cb4d:	68 58 01 00 00       	push   0x158
c001cb52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb56:	e8 cd c7 ff ff       	call   c0019328 <operator delete(void*, unsigned long)>
c001cb5b:	83 c4 10             	add    esp,0x10
c001cb5e:	83 c4 0c             	add    esp,0xc
c001cb61:	c3                   	ret    

c001cb62 <NIC::getMAC()>:
c001cb62:	31 c0                	xor    eax,eax
c001cb64:	31 d2                	xor    edx,edx
c001cb66:	c3                   	ret    
c001cb67:	90                   	nop

c001cb68 <NIC::write(int, unsigned char*, int*)>:
c001cb68:	b8 01 00 00 00       	mov    eax,0x1
c001cb6d:	c3                   	ret    

c001cb6e <NIC::NIC(char const*)>:
c001cb6e:	83 ec 0c             	sub    esp,0xc
c001cb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb75:	83 ec 08             	sub    esp,0x8
c001cb78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb7c:	50                   	push   eax
c001cb7d:	e8 f2 eb ff ff       	call   c001b774 <Device::Device(char const*)>
c001cb82:	83 c4 10             	add    esp,0x10
c001cb85:	ba b8 29 03 c0       	mov    edx,0xc00329b8
c001cb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb8e:	89 10                	mov    DWORD PTR [eax],edx
c001cb90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb94:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001cb9e:	90                   	nop
c001cb9f:	83 c4 0c             	add    esp,0xc
c001cba2:	c3                   	ret    
c001cba3:	90                   	nop

c001cba4 <NIC::~NIC()>:
c001cba4:	83 ec 0c             	sub    esp,0xc
c001cba7:	ba b8 29 03 c0       	mov    edx,0xc00329b8
c001cbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb0:	89 10                	mov    DWORD PTR [eax],edx
c001cbb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb6:	83 ec 0c             	sub    esp,0xc
c001cbb9:	50                   	push   eax
c001cbba:	e8 55 e9 ff ff       	call   c001b514 <Device::~Device()>
c001cbbf:	83 c4 10             	add    esp,0x10
c001cbc2:	90                   	nop
c001cbc3:	83 c4 0c             	add    esp,0xc
c001cbc6:	c3                   	ret    
c001cbc7:	90                   	nop

c001cbc8 <NIC::~NIC()>:
c001cbc8:	83 ec 0c             	sub    esp,0xc
c001cbcb:	83 ec 0c             	sub    esp,0xc
c001cbce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbd2:	e8 cd ff ff ff       	call   c001cba4 <NIC::~NIC()>
c001cbd7:	83 c4 10             	add    esp,0x10
c001cbda:	83 ec 08             	sub    esp,0x8
c001cbdd:	68 58 01 00 00       	push   0x158
c001cbe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbe6:	e8 3d c7 ff ff       	call   c0019328 <operator delete(void*, unsigned long)>
c001cbeb:	83 c4 10             	add    esp,0x10
c001cbee:	83 c4 0c             	add    esp,0xc
c001cbf1:	c3                   	ret    

c001cbf2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001cbf2:	55                   	push   ebp
c001cbf3:	57                   	push   edi
c001cbf4:	56                   	push   esi
c001cbf5:	53                   	push   ebx
c001cbf6:	81 ec 28 01 00 00    	sub    esp,0x128
c001cbfc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001cc03:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001cc0a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001cc11:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001cc18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc1c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cc20:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cc27:	e8 44 ec ff ff       	call   c001b870 <Device::getName()>
c001cc2c:	5a                   	pop    edx
c001cc2d:	59                   	pop    ecx
c001cc2e:	50                   	push   eax
c001cc2f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001cc33:	55                   	push   ebp
c001cc34:	e8 07 3a fe ff       	call   c0000640 <strcpy>
c001cc39:	5b                   	pop    ebx
c001cc3a:	58                   	pop    eax
c001cc3b:	68 e4 29 03 c0       	push   0xc00329e4
c001cc40:	55                   	push   ebp
c001cc41:	e8 fa 3b fe ff       	call   c0000840 <strcat>
c001cc46:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c001cc4d:	e8 75 99 ff ff       	call   c00165c7 <malloc>
c001cc52:	83 c4 0c             	add    esp,0xc
c001cc55:	89 c3                	mov    ebx,eax
c001cc57:	57                   	push   edi
c001cc58:	56                   	push   esi
c001cc59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc61:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001cc68:	55                   	push   ebp
c001cc69:	50                   	push   eax
c001cc6a:	e8 59 fb ff ff       	call   c001c7c8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001cc6f:	83 c4 14             	add    esp,0x14
c001cc72:	53                   	push   ebx
c001cc73:	e8 10 fc ff ff       	call   c001c888 <LogicalDisk::assignDriveLetter()>
c001cc78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc7b:	e8 c2 fc ff ff       	call   c001c942 <LogicalDisk::mount()>
c001cc80:	58                   	pop    eax
c001cc81:	5a                   	pop    edx
c001cc82:	53                   	push   ebx
c001cc83:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cc8a:	e8 83 e9 ff ff       	call   c001b612 <Device::addChild(Device*)>
c001cc8f:	81 c4 2c 01 00 00    	add    esp,0x12c
c001cc95:	5b                   	pop    ebx
c001cc96:	5e                   	pop    esi
c001cc97:	5f                   	pop    edi
c001cc98:	5d                   	pop    ebp
c001cc99:	c3                   	ret    

c001cc9a <createPartitionsForDisk(PhysicalDisk*)>:
c001cc9a:	55                   	push   ebp
c001cc9b:	57                   	push   edi
c001cc9c:	56                   	push   esi
c001cc9d:	53                   	push   ebx
c001cc9e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001cca4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001ccab:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001ccb1:	3d 00 02 00 00       	cmp    eax,0x200
c001ccb6:	74 27                	je     c001ccdf <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001ccb8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001ccbe:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001ccc4:	83 ec 10             	sub    esp,0x10
c001ccc7:	0f a4 f7 0a          	shld   edi,esi,0xa
c001cccb:	99                   	cdq    
c001cccc:	c1 e6 0a             	shl    esi,0xa
c001cccf:	52                   	push   edx
c001ccd0:	89 fd                	mov    ebp,edi
c001ccd2:	50                   	push   eax
c001ccd3:	55                   	push   ebp
c001ccd4:	56                   	push   esi
c001ccd5:	e8 06 20 01 00       	call   c002ece0 <__udivdi3>
c001ccda:	e9 b9 00 00 00       	jmp    c001cd98 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001ccdf:	83 ec 0c             	sub    esp,0xc
c001cce2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cce4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001cce8:	56                   	push   esi
c001cce9:	6a 01                	push   0x1
c001cceb:	6a 00                	push   0x0
c001cced:	6a 00                	push   0x0
c001ccef:	53                   	push   ebx
c001ccf0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ccf3:	83 c4 20             	add    esp,0x20
c001ccf6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001ccfe:	75 0a                	jne    c001cd0a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001cd00:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001cd08:	74 2c                	je     c001cd36 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001cd0a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cd10:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cd16:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cd1c:	83 ec 10             	sub    esp,0x10
c001cd1f:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cd23:	89 f7                	mov    edi,esi
c001cd25:	c1 e0 0a             	shl    eax,0xa
c001cd28:	c1 ff 1f             	sar    edi,0x1f
c001cd2b:	57                   	push   edi
c001cd2c:	56                   	push   esi
c001cd2d:	52                   	push   edx
c001cd2e:	50                   	push   eax
c001cd2f:	e8 ac 1f 01 00       	call   c002ece0 <__udivdi3>
c001cd34:	eb 62                	jmp    c001cd98 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001cd36:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001cd3d:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c001cd44:	89 cf                	mov    edi,ecx
c001cd46:	83 e2 7f             	and    edx,0x7f
c001cd49:	83 e7 7f             	and    edi,0x7f
c001cd4c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001cd53:	8d 0c 17             	lea    ecx,[edi+edx*1]
c001cd56:	83 e0 7f             	and    eax,0x7f
c001cd59:	8d 14 01             	lea    edx,[ecx+eax*1]
c001cd5c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001cd63:	83 e0 7f             	and    eax,0x7f
c001cd66:	01 d0                	add    eax,edx
c001cd68:	89 c5                	mov    ebp,eax
c001cd6a:	84 c0                	test   al,al
c001cd6c:	74 41                	je     c001cdaf <createPartitionsForDisk(PhysicalDisk*)+0x115>
c001cd6e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cd74:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cd7a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cd80:	83 ec 10             	sub    esp,0x10
c001cd83:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cd87:	89 f7                	mov    edi,esi
c001cd89:	c1 e0 0a             	shl    eax,0xa
c001cd8c:	c1 ff 1f             	sar    edi,0x1f
c001cd8f:	57                   	push   edi
c001cd90:	56                   	push   esi
c001cd91:	52                   	push   edx
c001cd92:	50                   	push   eax
c001cd93:	e8 48 1f 01 00       	call   c002ece0 <__udivdi3>
c001cd98:	83 c4 14             	add    esp,0x14
c001cd9b:	52                   	push   edx
c001cd9c:	50                   	push   eax
c001cd9d:	6a 00                	push   0x0
c001cd9f:	6a 00                	push   0x0
c001cda1:	53                   	push   ebx
c001cda2:	e8 4b fe ff ff       	call   c001cbf2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001cda7:	83 c4 20             	add    esp,0x20
c001cdaa:	e9 73 01 00 00       	jmp    c001cf22 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c001cdaf:	89 f0                	mov    eax,esi
c001cdb1:	31 c9                	xor    ecx,ecx
c001cdb3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001cdba:	75 02                	jne    c001cdbe <createPartitionsForDisk(PhysicalDisk*)+0x124>
c001cdbc:	89 cd                	mov    ebp,ecx
c001cdbe:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001cdc5:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c001cdcc:	c1 e2 08             	shl    edx,0x8
c001cdcf:	c1 e6 10             	shl    esi,0x10
c001cdd2:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c001cdda:	09 f2                	or     edx,esi
c001cddc:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c001cde4:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c001cdeb:	83 c0 10             	add    eax,0x10
c001cdee:	09 f2                	or     edx,esi
c001cdf0:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c001cdf7:	c1 e6 18             	shl    esi,0x18
c001cdfa:	09 f2                	or     edx,esi
c001cdfc:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c001ce03:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c001ce07:	c1 e6 10             	shl    esi,0x10
c001ce0a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001ce11:	c1 e2 08             	shl    edx,0x8
c001ce14:	09 f2                	or     edx,esi
c001ce16:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c001ce1d:	09 f2                	or     edx,esi
c001ce1f:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c001ce26:	c1 e6 18             	shl    esi,0x18
c001ce29:	09 f2                	or     edx,esi
c001ce2b:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c001ce2f:	41                   	inc    ecx
c001ce30:	83 f9 04             	cmp    ecx,0x4
c001ce33:	0f 85 7a ff ff ff    	jne    c001cdb3 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c001ce39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce3d:	83 f0 01             	xor    eax,0x1
c001ce40:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001ce44:	75 4f                	jne    c001ce95 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001ce46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ce4a:	83 f0 01             	xor    eax,0x1
c001ce4d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001ce51:	75 42                	jne    c001ce95 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001ce53:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ce5b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce63:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001ce69:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001ce6f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ce75:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ce79:	89 f7                	mov    edi,esi
c001ce7b:	c1 e0 0a             	shl    eax,0xa
c001ce7e:	c1 ff 1f             	sar    edi,0x1f
c001ce81:	57                   	push   edi
c001ce82:	56                   	push   esi
c001ce83:	52                   	push   edx
c001ce84:	50                   	push   eax
c001ce85:	e8 56 1e 01 00       	call   c002ece0 <__udivdi3>
c001ce8a:	83 c4 10             	add    esp,0x10
c001ce8d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ce91:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ce95:	89 e8                	mov    eax,ebp
c001ce97:	0f b6 e8             	movzx  ebp,al
c001ce9a:	85 ed                	test   ebp,ebp
c001ce9c:	74 50                	je     c001ceee <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001ce9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cea2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001cea6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ceaa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ceae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ceb2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ceb6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001ceba:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cebe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cec2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001cec6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ceca:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c001cece:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c001ced2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001ced6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001ceda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cede:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001cee2:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c001cee6:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c001ceea:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c001ceee:	31 ed                	xor    ebp,ebp
c001cef0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cef4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cef8:	89 f8                	mov    eax,edi
c001cefa:	09 f0                	or     eax,esi
c001cefc:	74 1e                	je     c001cf1c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cefe:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cf02:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cf06:	89 d1                	mov    ecx,edx
c001cf08:	09 c1                	or     ecx,eax
c001cf0a:	74 10                	je     c001cf1c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cf0c:	83 ec 0c             	sub    esp,0xc
c001cf0f:	57                   	push   edi
c001cf10:	56                   	push   esi
c001cf11:	52                   	push   edx
c001cf12:	50                   	push   eax
c001cf13:	53                   	push   ebx
c001cf14:	e8 d9 fc ff ff       	call   c001cbf2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001cf19:	83 c4 20             	add    esp,0x20
c001cf1c:	45                   	inc    ebp
c001cf1d:	83 fd 04             	cmp    ebp,0x4
c001cf20:	75 ce                	jne    c001cef0 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c001cf22:	81 c4 5c 02 00 00    	add    esp,0x25c
c001cf28:	5b                   	pop    ebx
c001cf29:	5e                   	pop    esi
c001cf2a:	5f                   	pop    edi
c001cf2b:	5d                   	pop    ebp
c001cf2c:	c3                   	ret    
c001cf2d:	66 90                	xchg   ax,ax
c001cf2f:	90                   	nop

c001cf30 <Serial::Serial(char const*)>:
c001cf30:	83 ec 0c             	sub    esp,0xc
c001cf33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf37:	83 ec 08             	sub    esp,0x8
c001cf3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf3e:	50                   	push   eax
c001cf3f:	e8 30 e8 ff ff       	call   c001b774 <Device::Device(char const*)>
c001cf44:	83 c4 10             	add    esp,0x10
c001cf47:	ba f8 29 03 c0       	mov    edx,0xc00329f8
c001cf4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf50:	89 10                	mov    DWORD PTR [eax],edx
c001cf52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf56:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001cf60:	90                   	nop
c001cf61:	83 c4 0c             	add    esp,0xc
c001cf64:	c3                   	ret    
c001cf65:	90                   	nop
c001cf66:	66 90                	xchg   ax,ax

c001cf68 <Serial::~Serial()>:
c001cf68:	83 ec 0c             	sub    esp,0xc
c001cf6b:	ba f8 29 03 c0       	mov    edx,0xc00329f8
c001cf70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf74:	89 10                	mov    DWORD PTR [eax],edx
c001cf76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf7a:	83 ec 0c             	sub    esp,0xc
c001cf7d:	50                   	push   eax
c001cf7e:	e8 91 e5 ff ff       	call   c001b514 <Device::~Device()>
c001cf83:	83 c4 10             	add    esp,0x10
c001cf86:	90                   	nop
c001cf87:	83 c4 0c             	add    esp,0xc
c001cf8a:	c3                   	ret    
c001cf8b:	90                   	nop

c001cf8c <Serial::~Serial()>:
c001cf8c:	83 ec 0c             	sub    esp,0xc
c001cf8f:	83 ec 0c             	sub    esp,0xc
c001cf92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf96:	e8 cd ff ff ff       	call   c001cf68 <Serial::~Serial()>
c001cf9b:	83 c4 10             	add    esp,0x10
c001cf9e:	83 ec 08             	sub    esp,0x8
c001cfa1:	68 58 01 00 00       	push   0x158
c001cfa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfaa:	e8 79 c3 ff ff       	call   c0019328 <operator delete(void*, unsigned long)>
c001cfaf:	83 c4 10             	add    esp,0x10
c001cfb2:	83 c4 0c             	add    esp,0xc
c001cfb5:	c3                   	ret    
c001cfb6:	66 90                	xchg   ax,ax

c001cfb8 <Timer::Timer(char const*)>:
c001cfb8:	83 ec 0c             	sub    esp,0xc
c001cfbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfbf:	83 ec 08             	sub    esp,0x8
c001cfc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfc6:	50                   	push   eax
c001cfc7:	e8 a8 e7 ff ff       	call   c001b774 <Device::Device(char const*)>
c001cfcc:	83 c4 10             	add    esp,0x10
c001cfcf:	ba 3c 2a 03 c0       	mov    edx,0xc0032a3c
c001cfd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfd8:	89 10                	mov    DWORD PTR [eax],edx
c001cfda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfde:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001cfe8:	90                   	nop
c001cfe9:	83 c4 0c             	add    esp,0xc
c001cfec:	c3                   	ret    
c001cfed:	90                   	nop
c001cfee:	66 90                	xchg   ax,ax

c001cff0 <Timer::~Timer()>:
c001cff0:	83 ec 0c             	sub    esp,0xc
c001cff3:	ba 3c 2a 03 c0       	mov    edx,0xc0032a3c
c001cff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cffc:	89 10                	mov    DWORD PTR [eax],edx
c001cffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d002:	83 ec 0c             	sub    esp,0xc
c001d005:	50                   	push   eax
c001d006:	e8 09 e5 ff ff       	call   c001b514 <Device::~Device()>
c001d00b:	83 c4 10             	add    esp,0x10
c001d00e:	90                   	nop
c001d00f:	83 c4 0c             	add    esp,0xc
c001d012:	c3                   	ret    
c001d013:	90                   	nop

c001d014 <Timer::~Timer()>:
c001d014:	83 ec 0c             	sub    esp,0xc
c001d017:	83 ec 0c             	sub    esp,0xc
c001d01a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d01e:	e8 cd ff ff ff       	call   c001cff0 <Timer::~Timer()>
c001d023:	83 c4 10             	add    esp,0x10
c001d026:	83 ec 08             	sub    esp,0x8
c001d029:	68 5c 01 00 00       	push   0x15c
c001d02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d032:	e8 f1 c2 ff ff       	call   c0019328 <operator delete(void*, unsigned long)>
c001d037:	83 c4 10             	add    esp,0x10
c001d03a:	83 c4 0c             	add    esp,0xc
c001d03d:	c3                   	ret    

c001d03e <Timer::read()>:
c001d03e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d042:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d048:	c3                   	ret    

c001d049 <setupTimer(int)>:
c001d049:	53                   	push   ebx
c001d04a:	83 ec 14             	sub    esp,0x14
c001d04d:	68 5c 01 00 00       	push   0x15c
c001d052:	e8 70 95 ff ff       	call   c00165c7 <malloc>
c001d057:	89 04 24             	mov    DWORD PTR [esp],eax
c001d05a:	89 c3                	mov    ebx,eax
c001d05c:	e8 07 15 01 00       	call   c002e568 <PIT::PIT()>
c001d061:	58                   	pop    eax
c001d062:	5a                   	pop    edx
c001d063:	53                   	push   ebx
c001d064:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c001d06a:	e8 a3 e5 ff ff       	call   c001b612 <Device::addChild(Device*)>
c001d06f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d071:	6a 00                	push   0x0
c001d073:	6a 00                	push   0x0
c001d075:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d079:	53                   	push   ebx
c001d07a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d07d:	89 d8                	mov    eax,ebx
c001d07f:	83 c4 28             	add    esp,0x28
c001d082:	5b                   	pop    ebx
c001d083:	c3                   	ret    

c001d084 <timerHandler(unsigned int)>:
c001d084:	57                   	push   edi
c001d085:	56                   	push   esi
c001d086:	53                   	push   ebx
c001d087:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d08b:	01 3d ec 03 04 c0    	add    DWORD PTR ds:0xc00403ec,edi
c001d091:	80 3d c1 b9 03 c0 00 	cmp    BYTE PTR ds:0xc003b9c1,0x0
c001d098:	0f 84 46 01 00 00    	je     c001d1e4 <timerHandler(unsigned int)+0x160>
c001d09e:	fa                   	cli    
c001d09f:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c001d0a5:	83 ec 0c             	sub    esp,0xc
c001d0a8:	ff 05 cc 11 04 c0    	inc    DWORD PTR ds:0xc00411cc
c001d0ae:	68 e0 11 04 c0       	push   0xc00411e0
c001d0b3:	e8 f8 21 01 00       	call   c002f2b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d0b8:	83 c4 10             	add    esp,0x10
c001d0bb:	84 c0                	test   al,al
c001d0bd:	0f 85 a1 00 00 00    	jne    c001d164 <timerHandler(unsigned int)+0xe0>
c001d0c3:	83 ec 0c             	sub    esp,0xc
c001d0c6:	68 e0 11 04 c0       	push   0xc00411e0
c001d0cb:	e8 fc 21 01 00       	call   c002f2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d0d0:	83 c4 10             	add    esp,0x10
c001d0d3:	89 c6                	mov    esi,eax
c001d0d5:	8d 76 00             	lea    esi,[esi+0x0]
c001d0d8:	83 ec 0c             	sub    esp,0xc
c001d0db:	68 e0 11 04 c0       	push   0xc00411e0
c001d0e0:	e8 e7 21 01 00       	call   c002f2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d0e5:	c7 04 24 e0 11 04 c0 	mov    DWORD PTR [esp],0xc00411e0
c001d0ec:	89 c3                	mov    ebx,eax
c001d0ee:	e8 e1 21 01 00       	call   c002f2d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d0f3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001d0f6:	83 c4 10             	add    esp,0x10
c001d0f9:	3b 05 ec 03 04 c0    	cmp    eax,DWORD PTR ds:0xc00403ec
c001d0ff:	77 23                	ja     c001d124 <timerHandler(unsigned int)+0xa0>
c001d101:	83 ec 0c             	sub    esp,0xc
c001d104:	53                   	push   ebx
c001d105:	e8 8a 89 00 00       	call   c0025a94 <unblockTask(ThreadControlBlock*)>
c001d10a:	83 c4 10             	add    esp,0x10
c001d10d:	39 de                	cmp    esi,ebx
c001d10f:	75 27                	jne    c001d138 <timerHandler(unsigned int)+0xb4>
c001d111:	83 ec 0c             	sub    esp,0xc
c001d114:	68 e0 11 04 c0       	push   0xc00411e0
c001d119:	e8 ae 21 01 00       	call   c002f2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d11e:	89 c6                	mov    esi,eax
c001d120:	eb 12                	jmp    c001d134 <timerHandler(unsigned int)+0xb0>
c001d122:	66 90                	xchg   ax,ax
c001d124:	50                   	push   eax
c001d125:	50                   	push   eax
c001d126:	53                   	push   ebx
c001d127:	68 e0 11 04 c0       	push   0xc00411e0
c001d12c:	e8 5f 22 01 00       	call   c002f390 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d131:	8d 76 00             	lea    esi,[esi+0x0]
c001d134:	83 c4 10             	add    esp,0x10
c001d137:	90                   	nop
c001d138:	83 ec 0c             	sub    esp,0xc
c001d13b:	68 e0 11 04 c0       	push   0xc00411e0
c001d140:	e8 6b 21 01 00       	call   c002f2b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d145:	83 c4 10             	add    esp,0x10
c001d148:	84 c0                	test   al,al
c001d14a:	75 18                	jne    c001d164 <timerHandler(unsigned int)+0xe0>
c001d14c:	83 ec 0c             	sub    esp,0xc
c001d14f:	68 e0 11 04 c0       	push   0xc00411e0
c001d154:	e8 73 21 01 00       	call   c002f2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d159:	83 c4 10             	add    esp,0x10
c001d15c:	39 f0                	cmp    eax,esi
c001d15e:	0f 85 74 ff ff ff    	jne    c001d0d8 <timerHandler(unsigned int)+0x54>
c001d164:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d169:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c001d16d:	74 3d                	je     c001d1ac <timerHandler(unsigned int)+0x128>
c001d16f:	80 3d c0 b9 03 c0 00 	cmp    BYTE PTR ds:0xc003b9c0,0x0
c001d176:	74 34                	je     c001d1ac <timerHandler(unsigned int)+0x128>
c001d178:	fa                   	cli    
c001d179:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c001d17f:	8b 15 ec 03 04 c0    	mov    edx,DWORD PTR ds:0xc00403ec
c001d185:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d18a:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c001d18d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d192:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c001d195:	77 05                	ja     c001d19c <timerHandler(unsigned int)+0x118>
c001d197:	e8 00 86 00 00       	call   c002579c <schedule()>
c001d19c:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001d1a1:	48                   	dec    eax
c001d1a2:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001d1a7:	75 03                	jne    c001d1ac <timerHandler(unsigned int)+0x128>
c001d1a9:	fb                   	sti    
c001d1aa:	66 90                	xchg   ax,ax
c001d1ac:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c001d1b1:	48                   	dec    eax
c001d1b2:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c001d1b7:	75 1b                	jne    c001d1d4 <timerHandler(unsigned int)+0x150>
c001d1b9:	83 3d c8 11 04 c0 00 	cmp    DWORD PTR ds:0xc00411c8,0x0
c001d1c0:	74 12                	je     c001d1d4 <timerHandler(unsigned int)+0x150>
c001d1c2:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c001d1cc:	e8 cb 85 00 00       	call   c002579c <schedule()>
c001d1d1:	8d 76 00             	lea    esi,[esi+0x0]
c001d1d4:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001d1d9:	48                   	dec    eax
c001d1da:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001d1df:	75 03                	jne    c001d1e4 <timerHandler(unsigned int)+0x160>
c001d1e1:	fb                   	sti    
c001d1e2:	66 90                	xchg   ax,ax
c001d1e4:	5b                   	pop    ebx
c001d1e5:	5e                   	pop    esi
c001d1e6:	5f                   	pop    edi
c001d1e7:	c3                   	ret    

c001d1e8 <VCache::VCache(PhysicalDisk*)>:
c001d1e8:	53                   	push   ebx
c001d1e9:	83 ec 18             	sub    esp,0x18
c001d1ec:	ba 6c 2a 03 c0       	mov    edx,0xc0032a6c
c001d1f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1f5:	89 10                	mov    DWORD PTR [eax],edx
c001d1f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1fb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001d202:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d206:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001d20d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d211:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001d218:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d21f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d223:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001d22a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001d231:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d235:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001d23c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d240:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001d244:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d248:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001d24f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001d256:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d25a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001d25e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d262:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001d266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d26a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001d26e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d272:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001d279:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001d281:	83 ec 0c             	sub    esp,0xc
c001d284:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d288:	e8 3a 93 ff ff       	call   c00165c7 <malloc>
c001d28d:	83 c4 10             	add    esp,0x10
c001d290:	89 c3                	mov    ebx,eax
c001d292:	83 ec 0c             	sub    esp,0xc
c001d295:	53                   	push   ebx
c001d296:	e8 d9 34 00 00       	call   c0020774 <Mutex::Mutex()>
c001d29b:	83 c4 10             	add    esp,0x10
c001d29e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2a2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001d2a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2a9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d2ad:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d2b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2b4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001d2bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2bf:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d2c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2c9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d2cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2d0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001d2d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d2e0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001d2e3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001d2e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2ea:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001d2ee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2f2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d2f8:	05 00 02 00 00       	add    eax,0x200
c001d2fd:	c1 e0 03             	shl    eax,0x3
c001d300:	83 ec 0c             	sub    esp,0xc
c001d303:	50                   	push   eax
c001d304:	e8 be 92 ff ff       	call   c00165c7 <malloc>
c001d309:	83 c4 10             	add    esp,0x10
c001d30c:	89 c2                	mov    edx,eax
c001d30e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d312:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001d315:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d319:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001d320:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d324:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001d328:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d32c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d332:	89 d0                	mov    eax,edx
c001d334:	c1 e0 02             	shl    eax,0x2
c001d337:	01 d0                	add    eax,edx
c001d339:	c1 e0 04             	shl    eax,0x4
c001d33c:	83 ec 0c             	sub    esp,0xc
c001d33f:	50                   	push   eax
c001d340:	e8 82 92 ff ff       	call   c00165c7 <malloc>
c001d345:	83 c4 10             	add    esp,0x10
c001d348:	89 c2                	mov    edx,eax
c001d34a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d34e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001d351:	90                   	nop
c001d352:	83 c4 18             	add    esp,0x18
c001d355:	5b                   	pop    ebx
c001d356:	c3                   	ret    
c001d357:	90                   	nop

c001d358 <VCache::invalidateReadBuffer()>:
c001d358:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d35c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001d362:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001d366:	c3                   	ret    
c001d367:	90                   	nop

c001d368 <VCache::writeWriteBuffer()>:
c001d368:	53                   	push   ebx
c001d369:	83 ec 08             	sub    esp,0x8
c001d36c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d370:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d374:	74 1e                	je     c001d394 <VCache::writeWriteBuffer()+0x2c>
c001d376:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d379:	83 ec 0c             	sub    esp,0xc
c001d37c:	8b 10                	mov    edx,DWORD PTR [eax]
c001d37e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001d381:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001d384:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001d387:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001d38a:	50                   	push   eax
c001d38b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d38e:	83 c4 20             	add    esp,0x20
c001d391:	8d 76 00             	lea    esi,[esi+0x0]
c001d394:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001d39b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001d3a2:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001d3a6:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001d3ad:	83 c4 08             	add    esp,0x8
c001d3b0:	5b                   	pop    ebx
c001d3b1:	c3                   	ret    
c001d3b2:	66 90                	xchg   ax,ax

c001d3b4 <VCache::~VCache()>:
c001d3b4:	83 ec 0c             	sub    esp,0xc
c001d3b7:	ba 6c 2a 03 c0       	mov    edx,0xc0032a6c
c001d3bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3c0:	89 10                	mov    DWORD PTR [eax],edx
c001d3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3c6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001d3c9:	0f b6 c0             	movzx  eax,al
c001d3cc:	85 c0                	test   eax,eax
c001d3ce:	74 10                	je     c001d3e0 <VCache::~VCache()+0x2c>
c001d3d0:	83 ec 0c             	sub    esp,0xc
c001d3d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3d7:	e8 8c ff ff ff       	call   c001d368 <VCache::writeWriteBuffer()>
c001d3dc:	83 c4 10             	add    esp,0x10
c001d3df:	90                   	nop
c001d3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3e4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001d3e7:	83 ec 0c             	sub    esp,0xc
c001d3ea:	50                   	push   eax
c001d3eb:	e8 e7 91 ff ff       	call   c00165d7 <free>
c001d3f0:	83 c4 10             	add    esp,0x10
c001d3f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3f7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d3fa:	83 ec 0c             	sub    esp,0xc
c001d3fd:	50                   	push   eax
c001d3fe:	e8 d4 91 ff ff       	call   c00165d7 <free>
c001d403:	83 c4 10             	add    esp,0x10
c001d406:	90                   	nop
c001d407:	83 c4 0c             	add    esp,0xc
c001d40a:	c3                   	ret    
c001d40b:	90                   	nop

c001d40c <VCache::~VCache()>:
c001d40c:	83 ec 0c             	sub    esp,0xc
c001d40f:	83 ec 0c             	sub    esp,0xc
c001d412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d416:	e8 99 ff ff ff       	call   c001d3b4 <VCache::~VCache()>
c001d41b:	83 c4 10             	add    esp,0x10
c001d41e:	83 ec 08             	sub    esp,0x8
c001d421:	6a 44                	push   0x44
c001d423:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d427:	e8 fc be ff ff       	call   c0019328 <operator delete(void*, unsigned long)>
c001d42c:	83 c4 10             	add    esp,0x10
c001d42f:	83 c4 0c             	add    esp,0xc
c001d432:	c3                   	ret    
c001d433:	90                   	nop

c001d434 <VCache::write(unsigned long long, int, void*)>:
c001d434:	55                   	push   ebp
c001d435:	57                   	push   edi
c001d436:	56                   	push   esi
c001d437:	53                   	push   ebx
c001d438:	83 ec 1c             	sub    esp,0x1c
c001d43b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d43f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d443:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d447:	e8 b8 80 00 00       	call   c0025504 <KeDisablePreemption()>
c001d44c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d450:	74 0e                	je     c001d460 <VCache::write(unsigned long long, int, void*)+0x2c>
c001d452:	83 ec 0c             	sub    esp,0xc
c001d455:	53                   	push   ebx
c001d456:	e8 fd fe ff ff       	call   c001d358 <VCache::invalidateReadBuffer()>
c001d45b:	83 c4 10             	add    esp,0x10
c001d45e:	66 90                	xchg   ax,ax
c001d460:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d464:	74 5e                	je     c001d4c4 <VCache::write(unsigned long long, int, void*)+0x90>
c001d466:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c001d469:	89 e8                	mov    eax,ebp
c001d46b:	99                   	cdq    
c001d46c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001d46f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001d472:	89 c1                	mov    ecx,eax
c001d474:	89 d0                	mov    eax,edx
c001d476:	31 f1                	xor    ecx,esi
c001d478:	31 f8                	xor    eax,edi
c001d47a:	09 c1                	or     ecx,eax
c001d47c:	75 3a                	jne    c001d4b8 <VCache::write(unsigned long long, int, void*)+0x84>
c001d47e:	83 7c 24 3c 01       	cmp    DWORD PTR [esp+0x3c],0x1
c001d483:	75 33                	jne    c001d4b8 <VCache::write(unsigned long long, int, void*)+0x84>
c001d485:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d488:	89 ef                	mov    edi,ebp
c001d48a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d490:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d494:	0f af f9             	imul   edi,ecx
c001d497:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001d49a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d49c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d49f:	40                   	inc    eax
c001d4a0:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001d4a3:	83 f8 50             	cmp    eax,0x50
c001d4a6:	75 70                	jne    c001d518 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d4a8:	83 ec 0c             	sub    esp,0xc
c001d4ab:	53                   	push   ebx
c001d4ac:	e8 b7 fe ff ff       	call   c001d368 <VCache::writeWriteBuffer()>
c001d4b1:	83 c4 10             	add    esp,0x10
c001d4b4:	eb 62                	jmp    c001d518 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d4b6:	66 90                	xchg   ax,ax
c001d4b8:	83 ec 0c             	sub    esp,0xc
c001d4bb:	53                   	push   ebx
c001d4bc:	e8 a7 fe ff ff       	call   c001d368 <VCache::writeWriteBuffer()>
c001d4c1:	83 c4 10             	add    esp,0x10
c001d4c4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d4c7:	83 7c 24 3c 4f       	cmp    DWORD PTR [esp+0x3c],0x4f
c001d4cc:	7f 22                	jg     c001d4f0 <VCache::write(unsigned long long, int, void*)+0xbc>
c001d4ce:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001d4d1:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001d4d4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d4d8:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001d4dc:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c001d4df:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001d4e2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d4e8:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d4ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d4ee:	eb 28                	jmp    c001d518 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d4f0:	83 ec 0c             	sub    esp,0xc
c001d4f3:	8b 10                	mov    edx,DWORD PTR [eax]
c001d4f5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d4f9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d4fd:	57                   	push   edi
c001d4fe:	56                   	push   esi
c001d4ff:	50                   	push   eax
c001d500:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d503:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d507:	83 c4 20             	add    esp,0x20
c001d50a:	e8 1d 80 00 00       	call   c002552c <KeRestorePreemption()>
c001d50f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d513:	eb 0b                	jmp    c001d520 <VCache::write(unsigned long long, int, void*)+0xec>
c001d515:	8d 76 00             	lea    esi,[esi+0x0]
c001d518:	e8 0f 80 00 00       	call   c002552c <KeRestorePreemption()>
c001d51d:	31 c0                	xor    eax,eax
c001d51f:	90                   	nop
c001d520:	83 c4 1c             	add    esp,0x1c
c001d523:	5b                   	pop    ebx
c001d524:	5e                   	pop    esi
c001d525:	5f                   	pop    edi
c001d526:	5d                   	pop    ebp
c001d527:	c3                   	ret    

c001d528 <VCache::read(unsigned long long, int, void*)>:
c001d528:	55                   	push   ebp
c001d529:	57                   	push   edi
c001d52a:	56                   	push   esi
c001d52b:	53                   	push   ebx
c001d52c:	83 ec 1c             	sub    esp,0x1c
c001d52f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d533:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d537:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d53b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d53f:	e8 c0 7f 00 00       	call   c0025504 <KeDisablePreemption()>
c001d544:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d548:	74 0e                	je     c001d558 <VCache::read(unsigned long long, int, void*)+0x30>
c001d54a:	83 ec 0c             	sub    esp,0xc
c001d54d:	53                   	push   ebx
c001d54e:	e8 15 fe ff ff       	call   c001d368 <VCache::writeWriteBuffer()>
c001d553:	83 c4 10             	add    esp,0x10
c001d556:	66 90                	xchg   ax,ax
c001d558:	83 fd 01             	cmp    ebp,0x1
c001d55b:	0f 85 97 00 00 00    	jne    c001d5f8 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d561:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d564:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d568:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001d56f:	0f 85 83 00 00 00    	jne    c001d5f8 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d575:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c001d578:	89 e9                	mov    ecx,ebp
c001d57a:	f7 d9                	neg    ecx
c001d57c:	89 c8                	mov    eax,ecx
c001d57e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d582:	c1 f8 1f             	sar    eax,0x1f
c001d585:	21 f1                	and    ecx,esi
c001d587:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d58b:	89 c8                	mov    eax,ecx
c001d58d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d591:	21 f9                	and    ecx,edi
c001d593:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d597:	89 ca                	mov    edx,ecx
c001d599:	74 31                	je     c001d5cc <VCache::read(unsigned long long, int, void*)+0xa4>
c001d59b:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001d59e:	75 2c                	jne    c001d5cc <VCache::read(unsigned long long, int, void*)+0xa4>
c001d5a0:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001d5a3:	75 27                	jne    c001d5cc <VCache::read(unsigned long long, int, void*)+0xa4>
c001d5a5:	8d 76 00             	lea    esi,[esi+0x0]
c001d5a8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d5ab:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d5af:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d5b5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d5b8:	48                   	dec    eax
c001d5b9:	21 c6                	and    esi,eax
c001d5bb:	0f af f1             	imul   esi,ecx
c001d5be:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c001d5c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d5c3:	e8 64 7f 00 00       	call   c002552c <KeRestorePreemption()>
c001d5c8:	31 c0                	xor    eax,eax
c001d5ca:	eb 58                	jmp    c001d624 <VCache::read(unsigned long long, int, void*)+0xfc>
c001d5cc:	83 ec 0c             	sub    esp,0xc
c001d5cf:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001d5d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d5d7:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c001d5da:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c001d5dd:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001d5df:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001d5e2:	55                   	push   ebp
c001d5e3:	52                   	push   edx
c001d5e4:	50                   	push   eax
c001d5e5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d5e9:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001d5ec:	83 c4 20             	add    esp,0x20
c001d5ef:	85 c0                	test   eax,eax
c001d5f1:	75 31                	jne    c001d624 <VCache::read(unsigned long long, int, void*)+0xfc>
c001d5f3:	eb b3                	jmp    c001d5a8 <VCache::read(unsigned long long, int, void*)+0x80>
c001d5f5:	8d 76 00             	lea    esi,[esi+0x0]
c001d5f8:	83 ec 0c             	sub    esp,0xc
c001d5fb:	53                   	push   ebx
c001d5fc:	e8 57 fd ff ff       	call   c001d358 <VCache::invalidateReadBuffer()>
c001d601:	5a                   	pop    edx
c001d602:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d605:	8b 10                	mov    edx,DWORD PTR [eax]
c001d607:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d60b:	55                   	push   ebp
c001d60c:	57                   	push   edi
c001d60d:	56                   	push   esi
c001d60e:	50                   	push   eax
c001d60f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001d612:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d616:	83 c4 20             	add    esp,0x20
c001d619:	e8 0e 7f 00 00       	call   c002552c <KeRestorePreemption()>
c001d61e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d622:	66 90                	xchg   ax,ax
c001d624:	83 c4 1c             	add    esp,0x1c
c001d627:	5b                   	pop    ebx
c001d628:	5e                   	pop    esi
c001d629:	5f                   	pop    edi
c001d62a:	5d                   	pop    ebp
c001d62b:	c3                   	ret    

c001d62c <Video::putrect(int, int, int, int, unsigned int)>:
c001d62c:	55                   	push   ebp
c001d62d:	57                   	push   edi
c001d62e:	56                   	push   esi
c001d62f:	53                   	push   ebx
c001d630:	83 ec 1c             	sub    esp,0x1c
c001d633:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d63b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d63f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001d643:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d647:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d64b:	01 df                	add    edi,ebx
c001d64d:	39 fb                	cmp    ebx,edi
c001d64f:	7d 1f                	jge    c001d670 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001d651:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d655:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001d659:	7d 12                	jge    c001d66d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001d65b:	8b 16                	mov    edx,DWORD PTR [esi]
c001d65d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d661:	53                   	push   ebx
c001d662:	55                   	push   ebp
c001d663:	45                   	inc    ebp
c001d664:	56                   	push   esi
c001d665:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001d668:	83 c4 10             	add    esp,0x10
c001d66b:	eb e8                	jmp    c001d655 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001d66d:	43                   	inc    ebx
c001d66e:	eb dd                	jmp    c001d64d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001d670:	83 c4 1c             	add    esp,0x1c
c001d673:	5b                   	pop    ebx
c001d674:	5e                   	pop    esi
c001d675:	5f                   	pop    edi
c001d676:	5d                   	pop    ebp
c001d677:	c3                   	ret    

c001d678 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001d678:	55                   	push   ebp
c001d679:	57                   	push   edi
c001d67a:	31 ff                	xor    edi,edi
c001d67c:	56                   	push   esi
c001d67d:	53                   	push   ebx
c001d67e:	83 ec 1c             	sub    esp,0x1c
c001d681:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001d685:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d689:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001d690:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001d695:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d699:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001d69d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d6a1:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001d6a4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d6a8:	01 f9                	add    ecx,edi
c001d6aa:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001d6ae:	7d 2f                	jge    c001d6df <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001d6b0:	31 f6                	xor    esi,esi
c001d6b2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d6b6:	01 f2                	add    edx,esi
c001d6b8:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001d6bc:	7d 1a                	jge    c001d6d8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001d6be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6c1:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001d6c4:	46                   	inc    esi
c001d6c5:	51                   	push   ecx
c001d6c6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d6ca:	52                   	push   edx
c001d6cb:	55                   	push   ebp
c001d6cc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d6cf:	83 c4 10             	add    esp,0x10
c001d6d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d6d6:	eb da                	jmp    c001d6b2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001d6d8:	47                   	inc    edi
c001d6d9:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d6dd:	eb c5                	jmp    c001d6a4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001d6df:	83 c4 1c             	add    esp,0x1c
c001d6e2:	5b                   	pop    ebx
c001d6e3:	5e                   	pop    esi
c001d6e4:	5f                   	pop    edi
c001d6e5:	5d                   	pop    ebp
c001d6e6:	c3                   	ret    
c001d6e7:	90                   	nop

c001d6e8 <Video::blit(unsigned int*, int, int, int, int)>:
c001d6e8:	55                   	push   ebp
c001d6e9:	57                   	push   edi
c001d6ea:	56                   	push   esi
c001d6eb:	53                   	push   ebx
c001d6ec:	83 ec 1c             	sub    esp,0x1c
c001d6ef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d6f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d6f7:	85 c0                	test   eax,eax
c001d6f9:	79 02                	jns    c001d6fd <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001d6fb:	31 c0                	xor    eax,eax
c001d6fd:	c1 e0 02             	shl    eax,0x2
c001d700:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d704:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d708:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d70c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001d710:	39 d8                	cmp    eax,ebx
c001d712:	7e 49                	jle    c001d75d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001d714:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d71a:	7c 41                	jl     c001d75d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001d71c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d720:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d724:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d728:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001d72c:	39 f9                	cmp    ecx,edi
c001d72e:	7e 22                	jle    c001d752 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001d730:	83 c5 04             	add    ebp,0x4
c001d733:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d739:	7c 14                	jl     c001d74f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001d73b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d73d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001d740:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d744:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d748:	56                   	push   esi
c001d749:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001d74c:	83 c4 10             	add    esp,0x10
c001d74f:	47                   	inc    edi
c001d750:	eb d2                	jmp    c001d724 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001d752:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d756:	43                   	inc    ebx
c001d757:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001d75b:	eb ab                	jmp    c001d708 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001d75d:	83 c4 1c             	add    esp,0x1c
c001d760:	5b                   	pop    ebx
c001d761:	5e                   	pop    esi
c001d762:	5f                   	pop    edi
c001d763:	5d                   	pop    ebp
c001d764:	c3                   	ret    
c001d765:	90                   	nop

c001d766 <Video::clearScreen(unsigned int)>:
c001d766:	57                   	push   edi
c001d767:	56                   	push   esi
c001d768:	53                   	push   ebx
c001d769:	31 db                	xor    ebx,ebx
c001d76b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d76f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d775:	7e 1f                	jle    c001d796 <Video::clearScreen(unsigned int)+0x30>
c001d777:	31 ff                	xor    edi,edi
c001d779:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d77f:	7e 12                	jle    c001d793 <Video::clearScreen(unsigned int)+0x2d>
c001d781:	8b 06                	mov    eax,DWORD PTR [esi]
c001d783:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d787:	53                   	push   ebx
c001d788:	57                   	push   edi
c001d789:	47                   	inc    edi
c001d78a:	56                   	push   esi
c001d78b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d78e:	83 c4 10             	add    esp,0x10
c001d791:	eb e6                	jmp    c001d779 <Video::clearScreen(unsigned int)+0x13>
c001d793:	43                   	inc    ebx
c001d794:	eb d9                	jmp    c001d76f <Video::clearScreen(unsigned int)+0x9>
c001d796:	5b                   	pop    ebx
c001d797:	5e                   	pop    esi
c001d798:	5f                   	pop    edi
c001d799:	c3                   	ret    

c001d79a <Video::putpixel(int, int, unsigned int)>:
c001d79a:	c7 44 24 04 74 2a 03 c0 	mov    DWORD PTR [esp+0x4],0xc0032a74
c001d7a2:	e9 e7 2f 00 00       	jmp    c002078e <KePanic(char const*)>
c001d7a7:	90                   	nop

c001d7a8 <Video::readPixelApprox(int, int)>:
c001d7a8:	83 ec 18             	sub    esp,0x18
c001d7ab:	68 95 2a 03 c0       	push   0xc0032a95
c001d7b0:	e8 d9 2f 00 00       	call   c002078e <KePanic(char const*)>
c001d7b5:	31 c0                	xor    eax,eax
c001d7b7:	83 c4 1c             	add    esp,0x1c
c001d7ba:	c3                   	ret    
c001d7bb:	90                   	nop

c001d7bc <Video::Video(char const*)>:
c001d7bc:	83 ec 0c             	sub    esp,0xc
c001d7bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7c3:	83 ec 08             	sub    esp,0x8
c001d7c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d7ca:	50                   	push   eax
c001d7cb:	e8 a4 df ff ff       	call   c001b774 <Device::Device(char const*)>
c001d7d0:	83 c4 10             	add    esp,0x10
c001d7d3:	ba 38 2b 03 c0       	mov    edx,0xc0032b38
c001d7d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7dc:	89 10                	mov    DWORD PTR [eax],edx
c001d7de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7e2:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001d7ec:	90                   	nop
c001d7ed:	83 c4 0c             	add    esp,0xc
c001d7f0:	c3                   	ret    
c001d7f1:	90                   	nop

c001d7f2 <Video::~Video()>:
c001d7f2:	83 ec 0c             	sub    esp,0xc
c001d7f5:	ba 38 2b 03 c0       	mov    edx,0xc0032b38
c001d7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7fe:	89 10                	mov    DWORD PTR [eax],edx
c001d800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d804:	83 ec 0c             	sub    esp,0xc
c001d807:	50                   	push   eax
c001d808:	e8 07 dd ff ff       	call   c001b514 <Device::~Device()>
c001d80d:	83 c4 10             	add    esp,0x10
c001d810:	90                   	nop
c001d811:	83 c4 0c             	add    esp,0xc
c001d814:	c3                   	ret    
c001d815:	90                   	nop

c001d816 <Video::~Video()>:
c001d816:	83 ec 0c             	sub    esp,0xc
c001d819:	83 ec 0c             	sub    esp,0xc
c001d81c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d820:	e8 cd ff ff ff       	call   c001d7f2 <Video::~Video()>
c001d825:	83 c4 10             	add    esp,0x10
c001d828:	83 ec 08             	sub    esp,0x8
c001d82b:	68 64 01 00 00       	push   0x164
c001d830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d834:	e8 ef ba ff ff       	call   c0019328 <operator delete(void*, unsigned long)>
c001d839:	83 c4 10             	add    esp,0x10
c001d83c:	83 c4 0c             	add    esp,0xc
c001d83f:	c3                   	ret    

c001d840 <Video::isMonochrome()>:
c001d840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d844:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001d84a:	c3                   	ret    
c001d84b:	90                   	nop

c001d84c <Video::getWidth()>:
c001d84c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d850:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d856:	c3                   	ret    
c001d857:	90                   	nop

c001d858 <Video::getHeight()>:
c001d858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d85c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d862:	c3                   	ret    
c001d863:	90                   	nop

c001d864 <Video::drawCursor(int, int, unsigned int*, int)>:
c001d864:	55                   	push   ebp
c001d865:	57                   	push   edi
c001d866:	56                   	push   esi
c001d867:	53                   	push   ebx
c001d868:	83 ec 2c             	sub    esp,0x2c
c001d86b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d86f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d873:	83 f8 01             	cmp    eax,0x1
c001d876:	19 c9                	sbb    ecx,ecx
c001d878:	31 db                	xor    ebx,ebx
c001d87a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001d87e:	89 cd                	mov    ebp,ecx
c001d880:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001d888:	f7 d5                	not    ebp
c001d88a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001d890:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d894:	01 d8                	add    eax,ebx
c001d896:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d89a:	56                   	push   esi
c001d89b:	e8 b8 ff ff ff       	call   c001d858 <Video::getHeight()>
c001d8a0:	59                   	pop    ecx
c001d8a1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001d8a5:	7e 70                	jle    c001d917 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c001d8a7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d8ab:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001d8af:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001d8b2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d8b6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d8ba:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001d8c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d8c5:	89 f8                	mov    eax,edi
c001d8c7:	83 c0 20             	add    eax,0x20
c001d8ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d8ce:	56                   	push   esi
c001d8cf:	e8 78 ff ff ff       	call   c001d84c <Video::getWidth()>
c001d8d4:	5a                   	pop    edx
c001d8d5:	39 c7                	cmp    edi,eax
c001d8d7:	7d 34                	jge    c001d90d <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c001d8d9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001d8de:	74 05                	je     c001d8e5 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c001d8e0:	8b 06                	mov    eax,DWORD PTR [esi]
c001d8e2:	55                   	push   ebp
c001d8e3:	eb 0d                	jmp    c001d8f2 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c001d8e5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001d8ea:	74 12                	je     c001d8fe <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c001d8ec:	8b 06                	mov    eax,DWORD PTR [esi]
c001d8ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d8f2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d8f6:	57                   	push   edi
c001d8f7:	56                   	push   esi
c001d8f8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d8fb:	83 c4 10             	add    esp,0x10
c001d8fe:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001d902:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001d906:	47                   	inc    edi
c001d907:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001d90b:	75 c1                	jne    c001d8ce <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c001d90d:	43                   	inc    ebx
c001d90e:	83 fb 20             	cmp    ebx,0x20
c001d911:	0f 85 79 ff ff ff    	jne    c001d890 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c001d917:	83 c4 2c             	add    esp,0x2c
c001d91a:	5b                   	pop    ebx
c001d91b:	5e                   	pop    esi
c001d91c:	5f                   	pop    edi
c001d91d:	5d                   	pop    ebp
c001d91e:	c3                   	ret    
c001d91f:	90                   	nop

c001d920 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001d920:	55                   	push   ebp
c001d921:	57                   	push   edi
c001d922:	56                   	push   esi
c001d923:	53                   	push   ebx
c001d924:	83 ec 48             	sub    esp,0x48
c001d927:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001d92b:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c001d92f:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c001d933:	c1 e0 08             	shl    eax,0x8
c001d936:	01 d0                	add    eax,edx
c001d938:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001d93c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d940:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001d944:	c1 e0 08             	shl    eax,0x8
c001d947:	01 d0                	add    eax,edx
c001d949:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d94d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d951:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c001d956:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d95a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d95e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001d965:	50                   	push   eax
c001d966:	e8 5c 8c ff ff       	call   c00165c7 <malloc>
c001d96b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d96f:	83 c4 10             	add    esp,0x10
c001d972:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001d977:	75 10                	jne    c001d989 <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c001d979:	83 ec 0c             	sub    esp,0xc
c001d97c:	68 c0 2a 03 c0       	push   0xc0032ac0
c001d981:	e8 08 2e 00 00       	call   c002078e <KePanic(char const*)>
c001d986:	83 c4 10             	add    esp,0x10
c001d989:	51                   	push   ecx
c001d98a:	51                   	push   ecx
c001d98b:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d98f:	50                   	push   eax
c001d990:	68 d0 2a 03 c0       	push   0xc0032ad0
c001d995:	e8 bb ba ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001d99a:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c001d99d:	83 e0 20             	and    eax,0x20
c001d9a0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001d9a4:	85 c0                	test   eax,eax
c001d9a6:	5e                   	pop    esi
c001d9a7:	0f 94 c0             	sete   al
c001d9aa:	5f                   	pop    edi
c001d9ab:	0f b6 c0             	movzx  eax,al
c001d9ae:	be 12 00 00 00       	mov    esi,0x12
c001d9b3:	50                   	push   eax
c001d9b4:	68 da 2a 03 c0       	push   0xc0032ada
c001d9b9:	e8 97 ba ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001d9be:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c001d9c2:	83 c4 10             	add    esp,0x10
c001d9c5:	89 d0                	mov    eax,edx
c001d9c7:	85 d2                	test   edx,edx
c001d9c9:	74 11                	je     c001d9dc <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c001d9cb:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001d9cf:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001d9d3:	c1 fe 03             	sar    esi,0x3
c001d9d6:	0f af f1             	imul   esi,ecx
c001d9d9:	83 c6 12             	add    esi,0x12
c001d9dc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d9e1:	74 07                	je     c001d9ea <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c001d9e3:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d9e8:	75 12                	jne    c001d9fc <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c001d9ea:	83 ec 0c             	sub    esp,0xc
c001d9ed:	68 e8 2a 03 c0       	push   0xc0032ae8
c001d9f2:	e8 5e ba ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001d9f7:	e9 a0 02 00 00       	jmp    c001dc9c <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c001d9fc:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001da00:	83 f9 02             	cmp    ecx,0x2
c001da03:	74 0e                	je     c001da13 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c001da05:	83 f9 0a             	cmp    ecx,0xa
c001da08:	0f 84 c8 00 00 00    	je     c001dad6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c001da0e:	e9 72 02 00 00       	jmp    c001dc85 <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c001da13:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001da18:	75 0e                	jne    c001da28 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c001da1a:	84 c0                	test   al,al
c001da1c:	75 0a                	jne    c001da28 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c001da1e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001da21:	83 e8 18             	sub    eax,0x18
c001da24:	a8 f7                	test   al,0xf7
c001da26:	74 0d                	je     c001da35 <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c001da28:	83 ec 0c             	sub    esp,0xc
c001da2b:	68 fd 2a 03 c0       	push   0xc0032afd
c001da30:	e9 58 02 00 00       	jmp    c001dc8d <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c001da35:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c001da3a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001da42:	31 c0                	xor    eax,eax
c001da44:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001da48:	89 c7                	mov    edi,eax
c001da4a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001da52:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001da57:	75 15                	jne    c001da6e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001da59:	99                   	cdq    
c001da5a:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001da5e:	85 d2                	test   edx,edx
c001da60:	75 0c                	jne    c001da6e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001da62:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001da66:	29 c7                	sub    edi,eax
c001da68:	4f                   	dec    edi
c001da69:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c001da6e:	31 d2                	xor    edx,edx
c001da70:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001da74:	75 08                	jne    c001da7e <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c001da76:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c001da7b:	c1 e2 18             	shl    edx,0x18
c001da7e:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c001da83:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001da87:	c1 e1 10             	shl    ecx,0x10
c001da8a:	8d 47 01             	lea    eax,[edi+0x1]
c001da8d:	89 cd                	mov    ebp,ecx
c001da8f:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c001da94:	c1 e1 08             	shl    ecx,0x8
c001da97:	09 e9                	or     ecx,ebp
c001da99:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001da9d:	09 e9                	or     ecx,ebp
c001da9f:	09 d1                	or     ecx,edx
c001daa1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001daa5:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c001daa8:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c001daac:	c1 fa 03             	sar    edx,0x3
c001daaf:	01 d6                	add    esi,edx
c001dab1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dab5:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001dab9:	7e 04                	jle    c001dabf <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c001dabb:	89 c7                	mov    edi,eax
c001dabd:	eb 93                	jmp    c001da52 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001dabf:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001dac3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dac7:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c001dacb:	0f 8f 77 ff ff ff    	jg     c001da48 <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c001dad1:	e9 d3 01 00 00       	jmp    c001dca9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001dad6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001dadb:	75 0e                	jne    c001daeb <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c001dadd:	85 d2                	test   edx,edx
c001dadf:	75 0a                	jne    c001daeb <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c001dae1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001dae4:	83 e8 18             	sub    eax,0x18
c001dae7:	a8 f7                	test   al,0xf7
c001dae9:	74 0d                	je     c001daf8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c001daeb:	83 ec 0c             	sub    esp,0xc
c001daee:	68 0b 2b 03 c0       	push   0xc0032b0b
c001daf3:	e9 95 01 00 00       	jmp    c001dc8d <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c001daf8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001db00:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001db08:	31 c9                	xor    ecx,ecx
c001db0a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001db0e:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c001db12:	0f 8e 91 01 00 00    	jle    c001dca9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001db18:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c001db1c:	0f 8d 87 01 00 00    	jge    c001dca9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001db22:	8d 46 01             	lea    eax,[esi+0x1]
c001db25:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001db29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001db2d:	83 fd 7f             	cmp    ebp,0x7f
c001db30:	89 e8                	mov    eax,ebp
c001db32:	0f 8e 9d 00 00 00    	jle    c001dbd5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c001db38:	83 e0 7f             	and    eax,0x7f
c001db3b:	31 d2                	xor    edx,edx
c001db3d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001db41:	40                   	inc    eax
c001db42:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001db46:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001db4a:	75 0a                	jne    c001db56 <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c001db4c:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c001db51:	89 ea                	mov    edx,ebp
c001db53:	c1 e2 18             	shl    edx,0x18
c001db56:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001db5b:	c1 e0 10             	shl    eax,0x10
c001db5e:	89 c7                	mov    edi,eax
c001db60:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c001db65:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001db69:	c1 e0 08             	shl    eax,0x8
c001db6c:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001db70:	09 f8                	or     eax,edi
c001db72:	31 f6                	xor    esi,esi
c001db74:	09 c5                	or     ebp,eax
c001db76:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c001db7b:	09 d5                	or     ebp,edx
c001db7d:	85 ff                	test   edi,edi
c001db7f:	75 1d                	jne    c001db9e <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c001db81:	89 c8                	mov    eax,ecx
c001db83:	99                   	cdq    
c001db84:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001db88:	85 d2                	test   edx,edx
c001db8a:	75 12                	jne    c001db9e <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c001db8c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001db90:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c001db94:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001db98:	49                   	dec    ecx
c001db99:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c001db9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dba2:	8d 51 01             	lea    edx,[ecx+0x1]
c001dba5:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c001dba8:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c001dbac:	8d 46 01             	lea    eax,[esi+0x1]
c001dbaf:	7e 06                	jle    c001dbb7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c001dbb1:	89 c6                	mov    esi,eax
c001dbb3:	89 d1                	mov    ecx,edx
c001dbb5:	eb c6                	jmp    c001db7d <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c001dbb7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001dbbb:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001dbbf:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c001dbc3:	c1 f8 03             	sar    eax,0x3
c001dbc6:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001dbca:	89 d1                	mov    ecx,edx
c001dbcc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001dbd0:	e9 35 ff ff ff       	jmp    c001db0a <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c001dbd5:	8d 45 01             	lea    eax,[ebp+0x1]
c001dbd8:	31 f6                	xor    esi,esi
c001dbda:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001dbde:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001dbe3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001dbe7:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001dbec:	75 1d                	jne    c001dc0b <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c001dbee:	89 c8                	mov    eax,ecx
c001dbf0:	99                   	cdq    
c001dbf1:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001dbf5:	85 d2                	test   edx,edx
c001dbf7:	75 12                	jne    c001dc0b <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c001dbf9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dbfd:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c001dc01:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001dc05:	49                   	dec    ecx
c001dc06:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c001dc0b:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c001dc13:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001dc17:	75 10                	jne    c001dc29 <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c001dc19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc1d:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c001dc22:	c1 e7 18             	shl    edi,0x18
c001dc25:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001dc29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc2d:	8d 51 01             	lea    edx,[ecx+0x1]
c001dc30:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c001dc35:	c1 e0 10             	shl    eax,0x10
c001dc38:	89 c7                	mov    edi,eax
c001dc3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc3e:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c001dc43:	c1 e0 08             	shl    eax,0x8
c001dc46:	09 f8                	or     eax,edi
c001dc48:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001dc4c:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c001dc50:	09 f8                	or     eax,edi
c001dc52:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001dc56:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c001dc5a:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c001dc5d:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001dc61:	c1 f8 03             	sar    eax,0x3
c001dc64:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001dc68:	8d 46 01             	lea    eax,[esi+0x1]
c001dc6b:	39 f5                	cmp    ebp,esi
c001dc6d:	7e 09                	jle    c001dc78 <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c001dc6f:	89 c6                	mov    esi,eax
c001dc71:	89 d1                	mov    ecx,edx
c001dc73:	e9 6f ff ff ff       	jmp    c001dbe7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c001dc78:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001dc7c:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c001dc80:	e9 45 ff ff ff       	jmp    c001dbca <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c001dc85:	52                   	push   edx
c001dc86:	52                   	push   edx
c001dc87:	51                   	push   ecx
c001dc88:	68 1a 2b 03 c0       	push   0xc0032b1a
c001dc8d:	e8 c3 b7 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001dc92:	58                   	pop    eax
c001dc93:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dc97:	e8 3b 89 ff ff       	call   c00165d7 <free>
c001dc9c:	83 c4 10             	add    esp,0x10
c001dc9f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001dca7:	eb 14                	jmp    c001dcbd <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c001dca9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001dcad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001dcb1:	89 18                	mov    DWORD PTR [eax],ebx
c001dcb3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001dcb7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dcbb:	89 18                	mov    DWORD PTR [eax],ebx
c001dcbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dcc1:	83 c4 3c             	add    esp,0x3c
c001dcc4:	5b                   	pop    ebx
c001dcc5:	5e                   	pop    esi
c001dcc6:	5f                   	pop    edi
c001dcc7:	5d                   	pop    ebp
c001dcc8:	c3                   	ret    
c001dcc9:	90                   	nop

c001dcca <Video::putTGA(int, int, unsigned char*, int)>:
c001dcca:	55                   	push   ebp
c001dccb:	57                   	push   edi
c001dccc:	56                   	push   esi
c001dccd:	53                   	push   ebx
c001dcce:	83 ec 28             	sub    esp,0x28
c001dcd1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001dcd5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dcd9:	50                   	push   eax
c001dcda:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dcde:	50                   	push   eax
c001dcdf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001dce3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001dce7:	57                   	push   edi
c001dce8:	e8 33 fc ff ff       	call   c001d920 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001dced:	83 c4 20             	add    esp,0x20
c001dcf0:	85 c0                	test   eax,eax
c001dcf2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001dcf6:	74 3a                	je     c001dd32 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c001dcf8:	89 c6                	mov    esi,eax
c001dcfa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dcfe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001dd02:	39 d8                	cmp    eax,ebx
c001dd04:	7e 2c                	jle    c001dd32 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c001dd06:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001dd0a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dd0e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dd12:	39 e8                	cmp    eax,ebp
c001dd14:	7e 19                	jle    c001dd2f <Video::putTGA(int, int, unsigned char*, int)+0x65>
c001dd16:	83 c6 04             	add    esi,0x4
c001dd19:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c001dd1c:	85 c0                	test   eax,eax
c001dd1e:	79 0c                	jns    c001dd2c <Video::putTGA(int, int, unsigned char*, int)+0x62>
c001dd20:	8b 17                	mov    edx,DWORD PTR [edi]
c001dd22:	50                   	push   eax
c001dd23:	53                   	push   ebx
c001dd24:	55                   	push   ebp
c001dd25:	57                   	push   edi
c001dd26:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001dd29:	83 c4 10             	add    esp,0x10
c001dd2c:	45                   	inc    ebp
c001dd2d:	eb db                	jmp    c001dd0a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001dd2f:	43                   	inc    ebx
c001dd30:	eb c8                	jmp    c001dcfa <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001dd32:	83 c4 1c             	add    esp,0x1c
c001dd35:	5b                   	pop    ebx
c001dd36:	5e                   	pop    esi
c001dd37:	5f                   	pop    edi
c001dd38:	5d                   	pop    ebp
c001dd39:	c3                   	ret    
c001dd3a:	66 90                	xchg   ax,ax

c001dd3c <ACPI::close(int, int, void*)>:
c001dd3c:	83 ec 1c             	sub    esp,0x1c
c001dd3f:	83 ec 0c             	sub    esp,0xc
c001dd42:	68 7c 2b 03 c0       	push   0xc0032b7c
c001dd47:	e8 09 b7 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001dd4c:	83 c4 10             	add    esp,0x10
c001dd4f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001dd57:	74 1b                	je     c001dd74 <ACPI::close(int, int, void*)+0x38>
c001dd59:	83 ec 0c             	sub    esp,0xc
c001dd5c:	68 8b 2b 03 c0       	push   0xc0032b8b
c001dd61:	e8 ef b6 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001dd66:	83 c4 10             	add    esp,0x10
c001dd69:	b8 00 00 00 00       	mov    eax,0x0
c001dd6e:	e9 01 01 00 00       	jmp    c001de74 <ACPI::close(int, int, void*)+0x138>
c001dd73:	90                   	nop
c001dd74:	83 ec 0c             	sub    esp,0xc
c001dd77:	68 9c 2b 03 c0       	push   0xc0032b9c
c001dd7c:	e8 d4 b6 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001dd81:	83 c4 10             	add    esp,0x10
c001dd84:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001dd89:	75 45                	jne    c001ddd0 <ACPI::close(int, int, void*)+0x94>
c001dd8b:	a1 08 04 04 c0       	mov    eax,ds:0xc0040408
c001dd90:	83 ec 08             	sub    esp,0x8
c001dd93:	50                   	push   eax
c001dd94:	68 ab 2b 03 c0       	push   0xc0032bab
c001dd99:	e8 b7 b6 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001dd9e:	83 c4 10             	add    esp,0x10
c001dda1:	a1 08 04 04 c0       	mov    eax,ds:0xc0040408
c001dda6:	85 c0                	test   eax,eax
c001dda8:	74 0a                	je     c001ddb4 <ACPI::close(int, int, void*)+0x78>
c001ddaa:	a1 08 04 04 c0       	mov    eax,ds:0xc0040408
c001ddaf:	ff d0                	call   eax
c001ddb1:	8d 76 00             	lea    esi,[esi+0x0]
c001ddb4:	83 ec 0c             	sub    esp,0xc
c001ddb7:	68 7c 2d 03 c0       	push   0xc0032d7c
c001ddbc:	e8 cd 29 00 00       	call   c002078e <KePanic(char const*)>
c001ddc1:	83 c4 10             	add    esp,0x10
c001ddc4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ddc9:	e9 a6 00 00 00       	jmp    c001de74 <ACPI::close(int, int, void*)+0x138>
c001ddce:	66 90                	xchg   ax,ax
c001ddd0:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001ddd5:	0f 85 81 00 00 00    	jne    c001de5c <ACPI::close(int, int, void*)+0x120>
c001dddb:	a1 08 04 04 c0       	mov    eax,ds:0xc0040408
c001dde0:	83 ec 08             	sub    esp,0x8
c001dde3:	50                   	push   eax
c001dde4:	68 c9 2b 03 c0       	push   0xc0032bc9
c001dde9:	e8 67 b6 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001ddee:	83 c4 10             	add    esp,0x10
c001ddf1:	a1 04 04 04 c0       	mov    eax,ds:0xc0040404
c001ddf6:	85 c0                	test   eax,eax
c001ddf8:	74 0a                	je     c001de04 <ACPI::close(int, int, void*)+0xc8>
c001ddfa:	a1 04 04 04 c0       	mov    eax,ds:0xc0040404
c001ddff:	ff d0                	call   eax
c001de01:	8d 76 00             	lea    esi,[esi+0x0]
c001de04:	83 ec 0c             	sub    esp,0xc
c001de07:	68 e4 2b 03 c0       	push   0xc0032be4
c001de0c:	e8 44 b6 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001de11:	83 c4 10             	add    esp,0x10
c001de14:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001de19:	8d 76 00             	lea    esi,[esi+0x0]
c001de1c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001de21:	83 e0 02             	and    eax,0x2
c001de24:	74 1e                	je     c001de44 <ACPI::close(int, int, void*)+0x108>
c001de26:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001de2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de31:	89 c2                	mov    edx,eax
c001de33:	ec                   	in     al,dx
c001de34:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001de38:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001de3c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001de40:	eb da                	jmp    c001de1c <ACPI::close(int, int, void*)+0xe0>
c001de42:	66 90                	xchg   ax,ax
c001de44:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001de4b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001de50:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001de54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de58:	ee                   	out    dx,al
c001de59:	8d 76 00             	lea    esi,[esi+0x0]
c001de5c:	83 ec 0c             	sub    esp,0xc
c001de5f:	68 f6 2b 03 c0       	push   0xc0032bf6
c001de64:	e8 ec b5 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001de69:	83 c4 10             	add    esp,0x10
c001de6c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001de71:	8d 76 00             	lea    esi,[esi+0x0]
c001de74:	83 c4 1c             	add    esp,0x1c
c001de77:	c3                   	ret    

c001de78 <findRSDP()>:
c001de78:	83 ec 1c             	sub    esp,0x1c
c001de7b:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001de80:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001de86:	83 e0 04             	and    eax,0x4
c001de89:	0f b6 c0             	movzx  eax,al
c001de8c:	85 c0                	test   eax,eax
c001de8e:	75 08                	jne    c001de98 <findRSDP()+0x20>
c001de90:	b8 00 00 00 00       	mov    eax,0x0
c001de95:	eb 75                	jmp    c001df0c <findRSDP()+0x94>
c001de97:	90                   	nop
c001de98:	a1 ec b9 03 c0       	mov    eax,ds:0xc003b9ec
c001de9d:	3d ff 07 00 00       	cmp    eax,0x7ff
c001dea2:	7f 1c                	jg     c001dec0 <findRSDP()+0x48>
c001dea4:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001dea9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001deaf:	83 e2 fb             	and    edx,0xfffffffb
c001deb2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001deb8:	b8 00 00 00 00       	mov    eax,0x0
c001debd:	eb 4d                	jmp    c001df0c <findRSDP()+0x94>
c001debf:	90                   	nop
c001dec0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001dec8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001ded0:	77 32                	ja     c001df04 <findRSDP()+0x8c>
c001ded2:	83 ec 04             	sub    esp,0x4
c001ded5:	6a 08                	push   0x8
c001ded7:	68 05 2c 03 c0       	push   0xc0032c05
c001dedc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dee0:	e8 9b 24 fe ff       	call   c0000380 <memcmp>
c001dee5:	83 c4 10             	add    esp,0x10
c001dee8:	85 c0                	test   eax,eax
c001deea:	0f 94 c0             	sete   al
c001deed:	0f b6 c0             	movzx  eax,al
c001def0:	85 c0                	test   eax,eax
c001def2:	74 08                	je     c001defc <findRSDP()+0x84>
c001def4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001def8:	eb 12                	jmp    c001df0c <findRSDP()+0x94>
c001defa:	66 90                	xchg   ax,ax
c001defc:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001df01:	eb c5                	jmp    c001dec8 <findRSDP()+0x50>
c001df03:	90                   	nop
c001df04:	b8 00 00 00 00       	mov    eax,0x0
c001df09:	8d 76 00             	lea    esi,[esi+0x0]
c001df0c:	83 c4 1c             	add    esp,0x1c
c001df0f:	c3                   	ret    

c001df10 <loadACPITables(unsigned char*)>:
c001df10:	57                   	push   edi
c001df11:	56                   	push   esi
c001df12:	53                   	push   ebx
c001df13:	83 ec 60             	sub    esp,0x60
c001df16:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001df1b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001df21:	83 e0 04             	and    eax,0x4
c001df24:	0f b6 c0             	movzx  eax,al
c001df27:	85 c0                	test   eax,eax
c001df29:	0f 84 41 02 00 00    	je     c001e170 <loadACPITables(unsigned char*)+0x260>
c001df2f:	a0 20 06 04 c0       	mov    al,ds:0xc0040620
c001df34:	0f b6 c0             	movzx  eax,al
c001df37:	85 c0                	test   eax,eax
c001df39:	74 79                	je     c001dfb4 <loadACPITables(unsigned char*)+0xa4>
c001df3b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001df3f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001df43:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001df47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001df4a:	83 e8 24             	sub    eax,0x24
c001df4d:	c1 e8 03             	shr    eax,0x3
c001df50:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001df54:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001df5c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001df60:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001df64:	0f 8d ba 00 00 00    	jge    c001e024 <loadACPITables(unsigned char*)+0x114>
c001df6a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001df6e:	83 c0 24             	add    eax,0x24
c001df71:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001df75:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001df79:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001df7d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001df81:	c1 e0 03             	shl    eax,0x3
c001df84:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001df88:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001df8c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001df8f:	8b 00                	mov    eax,DWORD PTR [eax]
c001df91:	89 c1                	mov    ecx,eax
c001df93:	a1 0c 04 04 c0       	mov    eax,ds:0xc004040c
c001df98:	8d 50 01             	lea    edx,[eax+0x1]
c001df9b:	89 15 0c 04 04 c0    	mov    DWORD PTR ds:0xc004040c,edx
c001dfa1:	89 ca                	mov    edx,ecx
c001dfa3:	89 14 c5 24 04 04 c0 	mov    DWORD PTR [eax*8-0x3ffbfbdc],edx
c001dfaa:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c001dfaf:	eb ab                	jmp    c001df5c <loadACPITables(unsigned char*)+0x4c>
c001dfb1:	8d 76 00             	lea    esi,[esi+0x0]
c001dfb4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dfb8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001dfbc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001dfc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dfc3:	83 e8 24             	sub    eax,0x24
c001dfc6:	c1 e8 02             	shr    eax,0x2
c001dfc9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001dfcd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001dfd5:	8d 76 00             	lea    esi,[esi+0x0]
c001dfd8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dfdc:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001dfe0:	7d 42                	jge    c001e024 <loadACPITables(unsigned char*)+0x114>
c001dfe2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dfe6:	83 c0 24             	add    eax,0x24
c001dfe9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001dfed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dff1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001dff5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dff9:	c1 e0 02             	shl    eax,0x2
c001dffc:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001e000:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e004:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e006:	a1 0c 04 04 c0       	mov    eax,ds:0xc004040c
c001e00b:	8d 50 01             	lea    edx,[eax+0x1]
c001e00e:	89 15 0c 04 04 c0    	mov    DWORD PTR ds:0xc004040c,edx
c001e014:	89 ca                	mov    edx,ecx
c001e016:	89 14 c5 24 04 04 c0 	mov    DWORD PTR [eax*8-0x3ffbfbdc],edx
c001e01d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c001e022:	eb b4                	jmp    c001dfd8 <loadACPITables(unsigned char*)+0xc8>
c001e024:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001e02c:	a1 0c 04 04 c0       	mov    eax,ds:0xc004040c
c001e031:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001e035:	0f 8d 39 01 00 00    	jge    c001e174 <loadACPITables(unsigned char*)+0x264>
c001e03b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e03f:	8b 04 c5 24 04 04 c0 	mov    eax,DWORD PTR [eax*8-0x3ffbfbdc]
c001e046:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e04a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e04e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e052:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e056:	25 ff 0f 00 00       	and    eax,0xfff
c001e05b:	89 c6                	mov    esi,eax
c001e05d:	8b 1d b0 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003bab0
c001e063:	83 ec 0c             	sub    esp,0xc
c001e066:	6a 01                	push   0x1
c001e068:	e8 b0 a0 ff ff       	call   c001811d <Virt::allocateKernelVirtualPages(int)>
c001e06d:	83 c4 10             	add    esp,0x10
c001e070:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e074:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e07a:	83 ec 0c             	sub    esp,0xc
c001e07d:	6a 01                	push   0x1
c001e07f:	6a 01                	push   0x1
c001e081:	50                   	push   eax
c001e082:	52                   	push   edx
c001e083:	53                   	push   ebx
c001e084:	e8 a1 a9 ff ff       	call   c0018a2a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e089:	83 c4 20             	add    esp,0x20
c001e08c:	09 f0                	or     eax,esi
c001e08e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e092:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e096:	c1 e0 03             	shl    eax,0x3
c001e099:	05 20 04 04 c0       	add    eax,0xc0040420
c001e09e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e0aa:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001e0b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e0ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e0be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e0c2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e0c6:	89 c6                	mov    esi,eax
c001e0c8:	89 d7                	mov    edi,edx
c001e0ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e0cc:	89 c8                	mov    eax,ecx
c001e0ce:	89 fa                	mov    edx,edi
c001e0d0:	89 f3                	mov    ebx,esi
c001e0d2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001e0d6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e0da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e0e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e0e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e0ed:	05 00 10 00 00       	add    eax,0x1000
c001e0f2:	c1 e8 0c             	shr    eax,0xc
c001e0f5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e0f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e101:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e105:	25 ff 0f 00 00       	and    eax,0xfff
c001e10a:	89 c6                	mov    esi,eax
c001e10c:	8b 1d b0 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003bab0
c001e112:	83 ec 0c             	sub    esp,0xc
c001e115:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e119:	e8 ff 9f ff ff       	call   c001811d <Virt::allocateKernelVirtualPages(int)>
c001e11e:	83 c4 10             	add    esp,0x10
c001e121:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e125:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e12b:	83 ec 0c             	sub    esp,0xc
c001e12e:	6a 01                	push   0x1
c001e130:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e134:	50                   	push   eax
c001e135:	52                   	push   edx
c001e136:	53                   	push   ebx
c001e137:	e8 ee a8 ff ff       	call   c0018a2a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e13c:	83 c4 20             	add    esp,0x20
c001e13f:	09 f0                	or     eax,esi
c001e141:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e145:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e149:	83 ec 0c             	sub    esp,0xc
c001e14c:	50                   	push   eax
c001e14d:	e8 e9 a2 ff ff       	call   c001843b <Virt::freeKernelVirtualPages(unsigned long)>
c001e152:	83 c4 10             	add    esp,0x10
c001e155:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e159:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e15d:	89 14 c5 24 04 04 c0 	mov    DWORD PTR [eax*8-0x3ffbfbdc],edx
c001e164:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c001e169:	e9 be fe ff ff       	jmp    c001e02c <loadACPITables(unsigned char*)+0x11c>
c001e16e:	66 90                	xchg   ax,ax
c001e170:	90                   	nop
c001e171:	8d 76 00             	lea    esi,[esi+0x0]
c001e174:	83 c4 60             	add    esp,0x60
c001e177:	5b                   	pop    ebx
c001e178:	5e                   	pop    esi
c001e179:	5f                   	pop    edi
c001e17a:	c3                   	ret    
c001e17b:	90                   	nop

c001e17c <findRSDT(unsigned char*)>:
c001e17c:	57                   	push   edi
c001e17d:	56                   	push   esi
c001e17e:	53                   	push   ebx
c001e17f:	83 ec 50             	sub    esp,0x50
c001e182:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001e187:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e18d:	83 e0 04             	and    eax,0x4
c001e190:	0f b6 c0             	movzx  eax,al
c001e193:	85 c0                	test   eax,eax
c001e195:	75 0d                	jne    c001e1a4 <findRSDT(unsigned char*)+0x28>
c001e197:	b8 00 00 00 00       	mov    eax,0x0
c001e19c:	e9 2b 01 00 00       	jmp    c001e2cc <findRSDT(unsigned char*)+0x150>
c001e1a1:	8d 76 00             	lea    esi,[esi+0x0]
c001e1a4:	89 e0                	mov    eax,esp
c001e1a6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001e1aa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001e1ae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001e1b2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001e1ba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e1be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e1c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e1c6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e1ca:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e1ce:	89 c6                	mov    esi,eax
c001e1d0:	89 d7                	mov    edi,edx
c001e1d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e1d4:	89 c8                	mov    eax,ecx
c001e1d6:	89 fa                	mov    edx,edi
c001e1d8:	89 f3                	mov    ebx,esi
c001e1da:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001e1de:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e1e2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e1e6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e1ea:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001e1ee:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001e1f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e1fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e1fe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e206:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001e20a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e20e:	25 ff 0f 00 00       	and    eax,0xfff
c001e213:	89 c6                	mov    esi,eax
c001e215:	8b 1d b0 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003bab0
c001e21b:	83 ec 0c             	sub    esp,0xc
c001e21e:	6a 02                	push   0x2
c001e220:	e8 f8 9e ff ff       	call   c001811d <Virt::allocateKernelVirtualPages(int)>
c001e225:	83 c4 10             	add    esp,0x10
c001e228:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001e22c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e232:	83 ec 0c             	sub    esp,0xc
c001e235:	6a 01                	push   0x1
c001e237:	6a 02                	push   0x2
c001e239:	50                   	push   eax
c001e23a:	52                   	push   edx
c001e23b:	53                   	push   ebx
c001e23c:	e8 e9 a7 ff ff       	call   c0018a2a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e241:	83 c4 20             	add    esp,0x20
c001e244:	09 f0                	or     eax,esi
c001e246:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e24a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e24e:	25 ff 0f 00 00       	and    eax,0xfff
c001e253:	89 c6                	mov    esi,eax
c001e255:	8b 1d b0 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003bab0
c001e25b:	83 ec 0c             	sub    esp,0xc
c001e25e:	6a 02                	push   0x2
c001e260:	e8 b8 9e ff ff       	call   c001811d <Virt::allocateKernelVirtualPages(int)>
c001e265:	83 c4 10             	add    esp,0x10
c001e268:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e26c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e272:	83 ec 0c             	sub    esp,0xc
c001e275:	6a 01                	push   0x1
c001e277:	6a 02                	push   0x2
c001e279:	50                   	push   eax
c001e27a:	52                   	push   edx
c001e27b:	53                   	push   ebx
c001e27c:	e8 a9 a7 ff ff       	call   c0018a2a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e281:	83 c4 20             	add    esp,0x20
c001e284:	09 f0                	or     eax,esi
c001e286:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001e28a:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001e28f:	85 c0                	test   eax,eax
c001e291:	75 11                	jne    c001e2a4 <findRSDT(unsigned char*)+0x128>
c001e293:	c6 05 20 06 04 c0 00 	mov    BYTE PTR ds:0xc0040620,0x0
c001e29a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e29e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e2a2:	eb 24                	jmp    c001e2c8 <findRSDT(unsigned char*)+0x14c>
c001e2a4:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001e2a9:	83 f8 02             	cmp    eax,0x2
c001e2ac:	75 12                	jne    c001e2c0 <findRSDT(unsigned char*)+0x144>
c001e2ae:	c6 05 20 06 04 c0 01 	mov    BYTE PTR ds:0xc0040620,0x1
c001e2b5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e2b9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e2bd:	eb 09                	jmp    c001e2c8 <findRSDT(unsigned char*)+0x14c>
c001e2bf:	90                   	nop
c001e2c0:	b8 00 00 00 00       	mov    eax,0x0
c001e2c5:	eb 05                	jmp    c001e2cc <findRSDT(unsigned char*)+0x150>
c001e2c7:	90                   	nop
c001e2c8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e2cc:	83 c4 50             	add    esp,0x50
c001e2cf:	5b                   	pop    ebx
c001e2d0:	5e                   	pop    esi
c001e2d1:	5f                   	pop    edi
c001e2d2:	c3                   	ret    
c001e2d3:	90                   	nop

c001e2d4 <findDataTable(unsigned char*, char*)>:
c001e2d4:	83 ec 1c             	sub    esp,0x1c
c001e2d7:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001e2dc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e2e2:	83 e0 04             	and    eax,0x4
c001e2e5:	0f b6 c0             	movzx  eax,al
c001e2e8:	85 c0                	test   eax,eax
c001e2ea:	75 08                	jne    c001e2f4 <findDataTable(unsigned char*, char*)+0x20>
c001e2ec:	b8 00 00 00 00       	mov    eax,0x0
c001e2f1:	eb 5d                	jmp    c001e350 <findDataTable(unsigned char*, char*)+0x7c>
c001e2f3:	90                   	nop
c001e2f4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e2fc:	a1 0c 04 04 c0       	mov    eax,ds:0xc004040c
c001e301:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001e305:	7d 41                	jge    c001e348 <findDataTable(unsigned char*, char*)+0x74>
c001e307:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e30b:	c1 e0 03             	shl    eax,0x3
c001e30e:	05 20 04 04 c0       	add    eax,0xc0040420
c001e313:	83 ec 04             	sub    esp,0x4
c001e316:	6a 04                	push   0x4
c001e318:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e31c:	50                   	push   eax
c001e31d:	e8 5e 20 fe ff       	call   c0000380 <memcmp>
c001e322:	83 c4 10             	add    esp,0x10
c001e325:	85 c0                	test   eax,eax
c001e327:	0f 94 c0             	sete   al
c001e32a:	0f b6 c0             	movzx  eax,al
c001e32d:	85 c0                	test   eax,eax
c001e32f:	74 0f                	je     c001e340 <findDataTable(unsigned char*, char*)+0x6c>
c001e331:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e335:	8b 04 c5 24 04 04 c0 	mov    eax,DWORD PTR [eax*8-0x3ffbfbdc]
c001e33c:	eb 12                	jmp    c001e350 <findDataTable(unsigned char*, char*)+0x7c>
c001e33e:	66 90                	xchg   ax,ax
c001e340:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001e345:	eb b5                	jmp    c001e2fc <findDataTable(unsigned char*, char*)+0x28>
c001e347:	90                   	nop
c001e348:	b8 00 00 00 00       	mov    eax,0x0
c001e34d:	8d 76 00             	lea    esi,[esi+0x0]
c001e350:	83 c4 1c             	add    esp,0x1c
c001e353:	c3                   	ret    

c001e354 <scanMADT()>:
c001e354:	53                   	push   ebx
c001e355:	83 ec 38             	sub    esp,0x38
c001e358:	a1 d4 b9 03 c0       	mov    eax,ds:0xc003b9d4
c001e35d:	25 00 04 00 00       	and    eax,0x400
c001e362:	74 14                	je     c001e378 <scanMADT()+0x24>
c001e364:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001e369:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e36f:	83 e2 fb             	and    edx,0xfffffffb
c001e372:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e378:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001e37d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e383:	83 e0 04             	and    eax,0x4
c001e386:	0f b6 c0             	movzx  eax,al
c001e389:	85 c0                	test   eax,eax
c001e38b:	0f 84 6b 04 00 00    	je     c001e7fc <scanMADT()+0x4a8>
c001e391:	e8 e2 fa ff ff       	call   c001de78 <findRSDP()>
c001e396:	a3 2c 06 04 c0       	mov    ds:0xc004062c,eax
c001e39b:	a1 2c 06 04 c0       	mov    eax,ds:0xc004062c
c001e3a0:	85 c0                	test   eax,eax
c001e3a2:	75 1c                	jne    c001e3c0 <scanMADT()+0x6c>
c001e3a4:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001e3a9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e3af:	83 e2 fb             	and    edx,0xfffffffb
c001e3b2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e3b8:	e9 47 04 00 00       	jmp    c001e804 <scanMADT()+0x4b0>
c001e3bd:	8d 76 00             	lea    esi,[esi+0x0]
c001e3c0:	a1 2c 06 04 c0       	mov    eax,ds:0xc004062c
c001e3c5:	83 ec 0c             	sub    esp,0xc
c001e3c8:	50                   	push   eax
c001e3c9:	e8 ae fd ff ff       	call   c001e17c <findRSDT(unsigned char*)>
c001e3ce:	83 c4 10             	add    esp,0x10
c001e3d1:	a3 28 06 04 c0       	mov    ds:0xc0040628,eax
c001e3d6:	a1 28 06 04 c0       	mov    eax,ds:0xc0040628
c001e3db:	85 c0                	test   eax,eax
c001e3dd:	75 19                	jne    c001e3f8 <scanMADT()+0xa4>
c001e3df:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001e3e4:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e3ea:	83 e2 fb             	and    edx,0xfffffffb
c001e3ed:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e3f3:	e9 0c 04 00 00       	jmp    c001e804 <scanMADT()+0x4b0>
c001e3f8:	a1 28 06 04 c0       	mov    eax,ds:0xc0040628
c001e3fd:	83 ec 0c             	sub    esp,0xc
c001e400:	50                   	push   eax
c001e401:	e8 0a fb ff ff       	call   c001df10 <loadACPITables(unsigned char*)>
c001e406:	83 c4 10             	add    esp,0x10
c001e409:	a1 28 06 04 c0       	mov    eax,ds:0xc0040628
c001e40e:	83 ec 08             	sub    esp,0x8
c001e411:	68 0e 2c 03 c0       	push   0xc0032c0e
c001e416:	50                   	push   eax
c001e417:	e8 b8 fe ff ff       	call   c001e2d4 <findDataTable(unsigned char*, char*)>
c001e41c:	83 c4 10             	add    esp,0x10
c001e41f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e423:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001e428:	75 1a                	jne    c001e444 <scanMADT()+0xf0>
c001e42a:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001e42f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e435:	83 e2 fe             	and    edx,0xfffffffe
c001e438:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e43e:	e9 c1 03 00 00       	jmp    c001e804 <scanMADT()+0x4b0>
c001e443:	90                   	nop
c001e444:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001e44c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e450:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e453:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e457:	0f 87 a7 03 00 00    	ja     c001e804 <scanMADT()+0x4b0>
c001e45d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001e465:	0f 87 99 03 00 00    	ja     c001e804 <scanMADT()+0x4b0>
c001e46b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e46f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e473:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e477:	8d 50 01             	lea    edx,[eax+0x1]
c001e47a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e47e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e482:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e486:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001e48a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e48e:	8d 50 01             	lea    edx,[eax+0x1]
c001e491:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e495:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e499:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e49d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001e4a1:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c001e4a6:	83 f8 02             	cmp    eax,0x2
c001e4a9:	0f 86 51 03 00 00    	jbe    c001e800 <scanMADT()+0x4ac>
c001e4af:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e4b4:	85 c0                	test   eax,eax
c001e4b6:	75 58                	jne    c001e510 <scanMADT()+0x1bc>
c001e4b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e4bc:	8d 50 01             	lea    edx,[eax+0x1]
c001e4bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e4c3:	8a 15 20 08 04 c0    	mov    dl,BYTE PTR ds:0xc0040820
c001e4c9:	0f b6 d2             	movzx  edx,dl
c001e4cc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e4d0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e4d4:	88 82 60 08 04 c0    	mov    BYTE PTR [edx-0x3ffbf7a0],al
c001e4da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e4de:	8d 50 01             	lea    edx,[eax+0x1]
c001e4e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e4e5:	8a 15 20 08 04 c0    	mov    dl,BYTE PTR ds:0xc0040820
c001e4eb:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e4ee:	88 0d 20 08 04 c0    	mov    BYTE PTR ds:0xc0040820,cl
c001e4f4:	0f b6 d2             	movzx  edx,dl
c001e4f7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e4fb:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e4ff:	88 82 40 08 04 c0    	mov    BYTE PTR [edx-0x3ffbf7c0],al
c001e505:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e50a:	e9 d9 02 00 00       	jmp    c001e7e8 <scanMADT()+0x494>
c001e50f:	90                   	nop
c001e510:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e515:	83 f8 01             	cmp    eax,0x1
c001e518:	0f 85 1a 01 00 00    	jne    c001e638 <scanMADT()+0x2e4>
c001e51e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e522:	8d 50 01             	lea    edx,[eax+0x1]
c001e525:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e529:	8a 15 e0 06 04 c0    	mov    dl,BYTE PTR ds:0xc00406e0
c001e52f:	0f b6 d2             	movzx  edx,dl
c001e532:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e536:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e53a:	88 82 00 07 04 c0    	mov    BYTE PTR [edx-0x3ffbf900],al
c001e540:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c001e545:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e549:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e54d:	01 d0                	add    eax,edx
c001e54f:	83 c0 2c             	add    eax,0x2c
c001e552:	8a 00                	mov    al,BYTE PTR [eax]
c001e554:	0f b6 d0             	movzx  edx,al
c001e557:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e55b:	8d 48 01             	lea    ecx,[eax+0x1]
c001e55e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e562:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e566:	0f b6 c0             	movzx  eax,al
c001e569:	c1 e0 08             	shl    eax,0x8
c001e56c:	89 d1                	mov    ecx,edx
c001e56e:	09 c1                	or     ecx,eax
c001e570:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e574:	8d 50 02             	lea    edx,[eax+0x2]
c001e577:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e57b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e57f:	0f b6 c0             	movzx  eax,al
c001e582:	c1 e0 10             	shl    eax,0x10
c001e585:	09 c1                	or     ecx,eax
c001e587:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e58b:	8d 50 03             	lea    edx,[eax+0x3]
c001e58e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e592:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e596:	0f b6 c0             	movzx  eax,al
c001e599:	c1 e0 18             	shl    eax,0x18
c001e59c:	09 c1                	or     ecx,eax
c001e59e:	89 ca                	mov    edx,ecx
c001e5a0:	a0 e0 06 04 c0       	mov    al,ds:0xc00406e0
c001e5a5:	0f b6 c0             	movzx  eax,al
c001e5a8:	89 14 85 20 07 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf8e0],edx
c001e5af:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e5b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e5b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5bc:	01 d0                	add    eax,edx
c001e5be:	83 c0 2c             	add    eax,0x2c
c001e5c1:	8a 00                	mov    al,BYTE PTR [eax]
c001e5c3:	0f b6 d0             	movzx  edx,al
c001e5c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5ca:	8d 48 01             	lea    ecx,[eax+0x1]
c001e5cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5d1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e5d5:	0f b6 c0             	movzx  eax,al
c001e5d8:	c1 e0 08             	shl    eax,0x8
c001e5db:	89 d1                	mov    ecx,edx
c001e5dd:	09 c1                	or     ecx,eax
c001e5df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5e3:	8d 50 02             	lea    edx,[eax+0x2]
c001e5e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5ea:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e5ee:	0f b6 c0             	movzx  eax,al
c001e5f1:	c1 e0 10             	shl    eax,0x10
c001e5f4:	09 c1                	or     ecx,eax
c001e5f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5fa:	8d 50 03             	lea    edx,[eax+0x3]
c001e5fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e601:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e605:	0f b6 c0             	movzx  eax,al
c001e608:	c1 e0 18             	shl    eax,0x18
c001e60b:	09 c1                	or     ecx,eax
c001e60d:	89 ca                	mov    edx,ecx
c001e60f:	a0 e0 06 04 c0       	mov    al,ds:0xc00406e0
c001e614:	0f b6 c0             	movzx  eax,al
c001e617:	89 14 85 a0 07 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf860],edx
c001e61e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e623:	a0 e0 06 04 c0       	mov    al,ds:0xc00406e0
c001e628:	83 c0 01             	add    eax,0x1
c001e62b:	a2 e0 06 04 c0       	mov    ds:0xc00406e0,al
c001e630:	e9 b3 01 00 00       	jmp    c001e7e8 <scanMADT()+0x494>
c001e635:	8d 76 00             	lea    esi,[esi+0x0]
c001e638:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e63d:	83 f8 02             	cmp    eax,0x2
c001e640:	0f 85 ea 00 00 00    	jne    c001e730 <scanMADT()+0x3dc>
c001e646:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e64a:	8d 50 01             	lea    edx,[eax+0x1]
c001e64d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e651:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e655:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e659:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001e65d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e661:	8d 50 01             	lea    edx,[eax+0x1]
c001e664:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e668:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e66c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e670:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e674:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e678:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e67c:	01 d0                	add    eax,edx
c001e67e:	83 c0 2c             	add    eax,0x2c
c001e681:	8a 00                	mov    al,BYTE PTR [eax]
c001e683:	0f b6 d0             	movzx  edx,al
c001e686:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e68a:	8d 48 01             	lea    ecx,[eax+0x1]
c001e68d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e691:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e695:	0f b6 c0             	movzx  eax,al
c001e698:	c1 e0 08             	shl    eax,0x8
c001e69b:	89 d1                	mov    ecx,edx
c001e69d:	09 c1                	or     ecx,eax
c001e69f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e6a3:	8d 50 02             	lea    edx,[eax+0x2]
c001e6a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e6aa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e6ae:	0f b6 c0             	movzx  eax,al
c001e6b1:	c1 e0 10             	shl    eax,0x10
c001e6b4:	09 c1                	or     ecx,eax
c001e6b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e6ba:	8d 50 03             	lea    edx,[eax+0x3]
c001e6bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e6c1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e6c5:	0f b6 c0             	movzx  eax,al
c001e6c8:	c1 e0 18             	shl    eax,0x18
c001e6cb:	09 c8                	or     eax,ecx
c001e6cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e6d1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e6d6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e6da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e6de:	01 d0                	add    eax,edx
c001e6e0:	83 c0 2c             	add    eax,0x2c
c001e6e3:	8a 00                	mov    al,BYTE PTR [eax]
c001e6e5:	0f b6 c0             	movzx  eax,al
c001e6e8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e6ec:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e6ef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e6f3:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001e6f7:	0f b6 d2             	movzx  edx,dl
c001e6fa:	c1 e2 08             	shl    edx,0x8
c001e6fd:	09 d0                	or     eax,edx
c001e6ff:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001e704:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e709:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e70e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e712:	88 90 a8 44 03 c0    	mov    BYTE PTR [eax-0x3ffcbb58],dl
c001e718:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001e71d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001e722:	66 89 84 12 c0 06 04 c0 	mov    WORD PTR [edx+edx*1-0x3ffbf940],ax
c001e72a:	e9 b9 00 00 00       	jmp    c001e7e8 <scanMADT()+0x494>
c001e72f:	90                   	nop
c001e730:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e735:	83 f8 04             	cmp    eax,0x4
c001e738:	0f 85 9a 00 00 00    	jne    c001e7d8 <scanMADT()+0x484>
c001e73e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e742:	8d 50 01             	lea    edx,[eax+0x1]
c001e745:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e749:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e74d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e751:	0f b6 c0             	movzx  eax,al
c001e754:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e758:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e75c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e760:	01 d0                	add    eax,edx
c001e762:	83 c0 2c             	add    eax,0x2c
c001e765:	8a 00                	mov    al,BYTE PTR [eax]
c001e767:	0f b6 d0             	movzx  edx,al
c001e76a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e76e:	8d 48 01             	lea    ecx,[eax+0x1]
c001e771:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e775:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e779:	0f b6 c0             	movzx  eax,al
c001e77c:	c1 e0 08             	shl    eax,0x8
c001e77f:	09 d0                	or     eax,edx
c001e781:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e785:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e78a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e78e:	8d 50 01             	lea    edx,[eax+0x1]
c001e791:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e795:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e799:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e79d:	0f b6 c0             	movzx  eax,al
c001e7a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7a8:	c1 e0 08             	shl    eax,0x8
c001e7ab:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001e7af:	89 c1                	mov    ecx,eax
c001e7b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e7b5:	c1 e0 18             	shl    eax,0x18
c001e7b8:	89 c3                	mov    ebx,eax
c001e7ba:	a1 30 06 04 c0       	mov    eax,ds:0xc0040630
c001e7bf:	8d 50 01             	lea    edx,[eax+0x1]
c001e7c2:	89 15 30 06 04 c0    	mov    DWORD PTR ds:0xc0040630,edx
c001e7c8:	09 d9                	or     ecx,ebx
c001e7ca:	89 ca                	mov    edx,ecx
c001e7cc:	89 14 85 40 06 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf9c0],edx
c001e7d3:	eb 13                	jmp    c001e7e8 <scanMADT()+0x494>
c001e7d5:	8d 76 00             	lea    esi,[esi+0x0]
c001e7d8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e7dd:	83 f8 05             	cmp    eax,0x5
c001e7e0:	75 06                	jne    c001e7e8 <scanMADT()+0x494>
c001e7e2:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001e7e7:	90                   	nop
c001e7e8:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001e7ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e7f1:	01 d0                	add    eax,edx
c001e7f3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e7f7:	e9 50 fc ff ff       	jmp    c001e44c <scanMADT()+0xf8>
c001e7fc:	90                   	nop
c001e7fd:	eb 05                	jmp    c001e804 <scanMADT()+0x4b0>
c001e7ff:	90                   	nop
c001e800:	90                   	nop
c001e801:	8d 76 00             	lea    esi,[esi+0x0]
c001e804:	83 c4 38             	add    esp,0x38
c001e807:	5b                   	pop    ebx
c001e808:	c3                   	ret    
c001e809:	90                   	nop
c001e80a:	66 90                	xchg   ax,ax

c001e80c <ACPI::ACPI()>:
c001e80c:	83 ec 0c             	sub    esp,0xc
c001e80f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e813:	83 ec 08             	sub    esp,0x8
c001e816:	68 13 2c 03 c0       	push   0xc0032c13
c001e81b:	50                   	push   eax
c001e81c:	e8 53 cf ff ff       	call   c001b774 <Device::Device(char const*)>
c001e821:	83 c4 10             	add    esp,0x10
c001e824:	ba 20 2e 03 c0       	mov    edx,0xc0032e20
c001e829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e82d:	89 10                	mov    DWORD PTR [eax],edx
c001e82f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e833:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e83e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001e848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e84c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001e856:	e8 f9 fa ff ff       	call   c001e354 <scanMADT()>
c001e85b:	90                   	nop
c001e85c:	83 c4 0c             	add    esp,0xc
c001e85f:	c3                   	ret    

c001e860 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001e860:	83 ec 2c             	sub    esp,0x2c
c001e863:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001e867:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e86b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e86f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001e873:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001e878:	88 d0                	mov    al,dl
c001e87a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e87e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e883:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001e88b:	90                   	nop
c001e88c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e890:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e896:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001e89a:	0f 8d b0 00 00 00    	jge    c001e950 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c001e8a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e8a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e8a8:	83 c2 2a             	add    edx,0x2a
c001e8ab:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001e8af:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8b4:	0f b7 c0             	movzx  eax,ax
c001e8b7:	39 c2                	cmp    edx,eax
c001e8b9:	0f 85 85 00 00 00    	jne    c001e944 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e8bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e8c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e8c7:	83 c2 2a             	add    edx,0x2a
c001e8ca:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001e8ce:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001e8d3:	0f b6 c0             	movzx  eax,al
c001e8d6:	39 c2                	cmp    edx,eax
c001e8d8:	75 6a                	jne    c001e944 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e8da:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e8df:	85 c0                	test   eax,eax
c001e8e1:	74 3d                	je     c001e920 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c001e8e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e8e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e8eb:	83 c2 2a             	add    edx,0x2a
c001e8ee:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001e8f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e8f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8f9:	39 c2                	cmp    edx,eax
c001e8fb:	74 13                	je     c001e910 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c001e8fd:	83 ec 0c             	sub    esp,0xc
c001e900:	68 a0 2d 03 c0       	push   0xc0032da0
c001e905:	e8 84 1e 00 00       	call   c002078e <KePanic(char const*)>
c001e90a:	83 c4 10             	add    esp,0x10
c001e90d:	8d 76 00             	lea    esi,[esi+0x0]
c001e910:	83 ec 0c             	sub    esp,0xc
c001e913:	68 18 2c 03 c0       	push   0xc0032c18
c001e918:	e8 71 1e 00 00       	call   c002078e <KePanic(char const*)>
c001e91d:	83 c4 10             	add    esp,0x10
c001e920:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e924:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e928:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e92c:	83 c2 2a             	add    edx,0x2a
c001e92f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001e933:	8b 02                	mov    eax,DWORD PTR [edx]
c001e935:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e938:	89 01                	mov    DWORD PTR [ecx],eax
c001e93a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e93d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e942:	66 90                	xchg   ax,ax
c001e944:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001e949:	e9 3e ff ff ff       	jmp    c001e88c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c001e94e:	66 90                	xchg   ax,ax
c001e950:	90                   	nop
c001e951:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e955:	83 c4 2c             	add    esp,0x2c
c001e958:	c2 04 00             	ret    0x4
c001e95b:	90                   	nop

c001e95c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001e95c:	83 ec 1c             	sub    esp,0x1c
c001e95f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e963:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001e967:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e96b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001e970:	88 c8                	mov    al,cl
c001e972:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e976:	88 d0                	mov    al,dl
c001e978:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e97c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e980:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e986:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e98a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e98d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001e991:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001e995:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e999:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e99f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e9a3:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001e9a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9aa:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001e9af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9b3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e9b9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e9bd:	83 c0 01             	add    eax,0x1
c001e9c0:	88 c1                	mov    cl,al
c001e9c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9c6:	83 c2 2a             	add    edx,0x2a
c001e9c9:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001e9cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9d1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e9d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9db:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e9de:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e9e2:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001e9e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9ea:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e9f0:	8d 50 01             	lea    edx,[eax+0x1]
c001e9f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9f7:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001e9fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea01:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001ea07:	3d 00 02 00 00       	cmp    eax,0x200
c001ea0c:	75 12                	jne    c001ea20 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c001ea0e:	83 ec 0c             	sub    esp,0xc
c001ea11:	68 27 2c 03 c0       	push   0xc0032c27
c001ea16:	e8 73 1d 00 00       	call   c002078e <KePanic(char const*)>
c001ea1b:	83 c4 10             	add    esp,0x10
c001ea1e:	66 90                	xchg   ax,ax
c001ea20:	90                   	nop
c001ea21:	83 c4 1c             	add    esp,0x1c
c001ea24:	c3                   	ret    
c001ea25:	90                   	nop
c001ea26:	66 90                	xchg   ax,ax

c001ea28 <ACPI::setScreenBrightnessLevel(void*, int)>:
c001ea28:	b8 00 00 00 00       	mov    eax,0x0
c001ea2d:	c3                   	ret    
c001ea2e:	66 90                	xchg   ax,ax

c001ea30 <ACPI::detectPCI()>:
c001ea30:	53                   	push   ebx
c001ea31:	83 ec 28             	sub    esp,0x28
c001ea34:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ea39:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c001ea3e:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001ea43:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ea49:	83 e0 04             	and    eax,0x4
c001ea4c:	0f b6 c0             	movzx  eax,al
c001ea4f:	85 c0                	test   eax,eax
c001ea51:	74 2d                	je     c001ea80 <ACPI::detectPCI()+0x50>
c001ea53:	a1 28 06 04 c0       	mov    eax,ds:0xc0040628
c001ea58:	83 ec 08             	sub    esp,0x8
c001ea5b:	68 44 2c 03 c0       	push   0xc0032c44
c001ea60:	50                   	push   eax
c001ea61:	e8 6e f8 ff ff       	call   c001e2d4 <findDataTable(unsigned char*, char*)>
c001ea66:	83 c4 10             	add    esp,0x10
c001ea69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ea6d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001ea72:	74 0c                	je     c001ea80 <ACPI::detectPCI()+0x50>
c001ea74:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001ea79:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001ea7e:	66 90                	xchg   ax,ax
c001ea80:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c001ea88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ea8c:	8a 00                	mov    al,BYTE PTR [eax]
c001ea8e:	0f b6 c0             	movzx  eax,al
c001ea91:	83 f8 01             	cmp    eax,0x1
c001ea94:	75 0e                	jne    c001eaa4 <ACPI::detectPCI()+0x74>
c001ea96:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001ea9b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001eaa0:	eb 2e                	jmp    c001ead0 <ACPI::detectPCI()+0xa0>
c001eaa2:	66 90                	xchg   ax,ax
c001eaa4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eaa8:	8a 00                	mov    al,BYTE PTR [eax]
c001eaaa:	0f b6 c0             	movzx  eax,al
c001eaad:	83 f8 02             	cmp    eax,0x2
c001eab0:	75 1e                	jne    c001ead0 <ACPI::detectPCI()+0xa0>
c001eab2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001eab7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001eabc:	85 c0                	test   eax,eax
c001eabe:	74 10                	je     c001ead0 <ACPI::detectPCI()+0xa0>
c001eac0:	83 ec 0c             	sub    esp,0xc
c001eac3:	68 d0 2d 03 c0       	push   0xc0032dd0
c001eac8:	e8 c1 1c 00 00       	call   c002078e <KePanic(char const*)>
c001eacd:	83 c4 10             	add    esp,0x10
c001ead0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001ead4:	83 f0 01             	xor    eax,0x1
c001ead7:	0f b6 c0             	movzx  eax,al
c001eada:	85 c0                	test   eax,eax
c001eadc:	74 46                	je     c001eb24 <ACPI::detectPCI()+0xf4>
c001eade:	e8 4d 16 fe ff       	call   c0000130 <manualPCIProbe>
c001eae3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001eae7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001eaec:	75 0e                	jne    c001eafc <ACPI::detectPCI()+0xcc>
c001eaee:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001eaf3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001eaf8:	eb 2a                	jmp    c001eb24 <ACPI::detectPCI()+0xf4>
c001eafa:	66 90                	xchg   ax,ax
c001eafc:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001eb01:	75 21                	jne    c001eb24 <ACPI::detectPCI()+0xf4>
c001eb03:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001eb08:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001eb0d:	85 c0                	test   eax,eax
c001eb0f:	74 13                	je     c001eb24 <ACPI::detectPCI()+0xf4>
c001eb11:	83 ec 0c             	sub    esp,0xc
c001eb14:	68 d0 2d 03 c0       	push   0xc0032dd0
c001eb19:	e8 70 1c 00 00       	call   c002078e <KePanic(char const*)>
c001eb1e:	83 c4 10             	add    esp,0x10
c001eb21:	8d 76 00             	lea    esi,[esi+0x0]
c001eb24:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001eb29:	85 c0                	test   eax,eax
c001eb2b:	0f 84 87 00 00 00    	je     c001ebb8 <ACPI::detectPCI()+0x188>
c001eb31:	83 ec 0c             	sub    esp,0xc
c001eb34:	68 49 2c 03 c0       	push   0xc0032c49
c001eb39:	e8 09 13 00 00       	call   c001fe47 <KeSetBootMessage(char const*)>
c001eb3e:	83 c4 10             	add    esp,0x10
c001eb41:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001eb49:	83 ec 0c             	sub    esp,0xc
c001eb4c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001eb50:	e8 72 7a ff ff       	call   c00165c7 <malloc>
c001eb55:	83 c4 10             	add    esp,0x10
c001eb58:	89 c3                	mov    ebx,eax
c001eb5a:	83 ec 0c             	sub    esp,0xc
c001eb5d:	53                   	push   ebx
c001eb5e:	e8 41 bb 00 00       	call   c002a6a4 <PCI::PCI()>
c001eb63:	83 c4 10             	add    esp,0x10
c001eb66:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001eb6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001eb6e:	83 ec 08             	sub    esp,0x8
c001eb71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001eb75:	50                   	push   eax
c001eb76:	e8 97 ca ff ff       	call   c001b612 <Device::addChild(Device*)>
c001eb7b:	83 c4 10             	add    esp,0x10
c001eb7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb82:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb84:	83 c0 08             	add    eax,0x8
c001eb87:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb89:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c001eb8e:	85 d2                	test   edx,edx
c001eb90:	74 0a                	je     c001eb9c <ACPI::detectPCI()+0x16c>
c001eb92:	ba 01 00 00 00       	mov    edx,0x1
c001eb97:	eb 0b                	jmp    c001eba4 <ACPI::detectPCI()+0x174>
c001eb99:	8d 76 00             	lea    esi,[esi+0x0]
c001eb9c:	ba 02 00 00 00       	mov    edx,0x2
c001eba1:	8d 76 00             	lea    esi,[esi+0x0]
c001eba4:	6a 00                	push   0x0
c001eba6:	6a 00                	push   0x0
c001eba8:	52                   	push   edx
c001eba9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ebad:	ff d0                	call   eax
c001ebaf:	83 c4 10             	add    esp,0x10
c001ebb2:	e9 91 00 00 00       	jmp    c001ec48 <ACPI::detectPCI()+0x218>
c001ebb7:	90                   	nop
c001ebb8:	83 ec 0c             	sub    esp,0xc
c001ebbb:	68 61 2c 03 c0       	push   0xc0032c61
c001ebc0:	e8 82 12 00 00       	call   c001fe47 <KeSetBootMessage(char const*)>
c001ebc5:	83 c4 10             	add    esp,0x10
c001ebc8:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c001ebcf:	83 ec 0c             	sub    esp,0xc
c001ebd2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ebd6:	e8 ec 79 ff ff       	call   c00165c7 <malloc>
c001ebdb:	83 c4 10             	add    esp,0x10
c001ebde:	89 c3                	mov    ebx,eax
c001ebe0:	83 ec 0c             	sub    esp,0xc
c001ebe3:	53                   	push   ebx
c001ebe4:	e8 c1 c6 00 00       	call   c002b2aa <IDE::IDE()>
c001ebe9:	83 c4 10             	add    esp,0x10
c001ebec:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ebf0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ebf4:	83 ec 08             	sub    esp,0x8
c001ebf7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ebfb:	50                   	push   eax
c001ebfc:	e8 11 ca ff ff       	call   c001b612 <Device::addChild(Device*)>
c001ec01:	83 c4 10             	add    esp,0x10
c001ec04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec08:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001ec12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec16:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001ec1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec23:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001ec2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec30:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec32:	83 c0 08             	add    eax,0x8
c001ec35:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec37:	6a 00                	push   0x0
c001ec39:	6a 00                	push   0x0
c001ec3b:	6a 00                	push   0x0
c001ec3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ec41:	ff d0                	call   eax
c001ec43:	83 c4 10             	add    esp,0x10
c001ec46:	66 90                	xchg   ax,ax
c001ec48:	90                   	nop
c001ec49:	83 c4 28             	add    esp,0x28
c001ec4c:	5b                   	pop    ebx
c001ec4d:	c3                   	ret    
c001ec4e:	66 90                	xchg   ax,ax

c001ec50 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001ec50:	83 ec 1c             	sub    esp,0x1c
c001ec53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ec57:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001ec5a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec5e:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001ec63:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001ec68:	83 ec 08             	sub    esp,0x8
c001ec6b:	52                   	push   edx
c001ec6c:	50                   	push   eax
c001ec6d:	e8 9c 6f ff ff       	call   c0015c0e <Computer::readCMOS(unsigned char)>
c001ec72:	83 c4 10             	add    esp,0x10
c001ec75:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001ec79:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001ec7e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001ec83:	83 ec 04             	sub    esp,0x4
c001ec86:	6a 01                	push   0x1
c001ec88:	52                   	push   edx
c001ec89:	50                   	push   eax
c001ec8a:	e8 99 70 ff ff       	call   c0015d28 <Computer::writeCMOS(unsigned char, unsigned char)>
c001ec8f:	83 c4 10             	add    esp,0x10
c001ec92:	90                   	nop
c001ec93:	83 c4 1c             	add    esp,0x1c
c001ec96:	c3                   	ret    
c001ec97:	90                   	nop

c001ec98 <ACPI::sleep()>:
c001ec98:	83 ec 0c             	sub    esp,0xc
c001ec9b:	a1 00 04 04 c0       	mov    eax,ds:0xc0040400
c001eca0:	85 c0                	test   eax,eax
c001eca2:	74 08                	je     c001ecac <ACPI::sleep()+0x14>
c001eca4:	a1 00 04 04 c0       	mov    eax,ds:0xc0040400
c001eca9:	ff d0                	call   eax
c001ecab:	90                   	nop
c001ecac:	90                   	nop
c001ecad:	83 c4 0c             	add    esp,0xc
c001ecb0:	c3                   	ret    
c001ecb1:	90                   	nop
c001ecb2:	66 90                	xchg   ax,ax

c001ecb4 <ACPI::open(int, int, void*)>:
c001ecb4:	57                   	push   edi
c001ecb5:	56                   	push   esi
c001ecb6:	53                   	push   ebx
c001ecb7:	81 ec 70 01 00 00    	sub    esp,0x170
c001ecbd:	83 ec 0c             	sub    esp,0xc
c001ecc0:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001ecc7:	e8 64 fd ff ff       	call   c001ea30 <ACPI::detectPCI()>
c001eccc:	83 c4 10             	add    esp,0x10
c001eccf:	83 ec 0c             	sub    esp,0xc
c001ecd2:	68 f8 2d 03 c0       	push   0xc0032df8
c001ecd7:	e8 6b 11 00 00       	call   c001fe47 <KeSetBootMessage(char const*)>
c001ecdc:	83 c4 10             	add    esp,0x10
c001ecdf:	b8 4c 05 00 00       	mov    eax,0x54c
c001ece4:	8a 00                	mov    al,BYTE PTR [eax]
c001ece6:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c001eced:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c001ecf5:	83 f8 01             	cmp    eax,0x1
c001ecf8:	75 12                	jne    c001ed0c <ACPI::open(int, int, void*)+0x58>
c001ecfa:	83 ec 0c             	sub    esp,0xc
c001ecfd:	68 76 2c 03 c0       	push   0xc0032c76
c001ed02:	e8 95 55 00 00       	call   c002429c <Thr::loadKernelSymbolTable(char const*)>
c001ed07:	83 c4 10             	add    esp,0x10
c001ed0a:	eb 34                	jmp    c001ed40 <ACPI::open(int, int, void*)+0x8c>
c001ed0c:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c001ed14:	3d bb 00 00 00       	cmp    eax,0xbb
c001ed19:	75 15                	jne    c001ed30 <ACPI::open(int, int, void*)+0x7c>
c001ed1b:	83 ec 0c             	sub    esp,0xc
c001ed1e:	68 94 2c 03 c0       	push   0xc0032c94
c001ed23:	e8 74 55 00 00       	call   c002429c <Thr::loadKernelSymbolTable(char const*)>
c001ed28:	83 c4 10             	add    esp,0x10
c001ed2b:	eb 13                	jmp    c001ed40 <ACPI::open(int, int, void*)+0x8c>
c001ed2d:	8d 76 00             	lea    esi,[esi+0x0]
c001ed30:	83 ec 0c             	sub    esp,0xc
c001ed33:	68 b2 2c 03 c0       	push   0xc0032cb2
c001ed38:	e8 51 1a 00 00       	call   c002078e <KePanic(char const*)>
c001ed3d:	83 c4 10             	add    esp,0x10
c001ed40:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c001ed48:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c001ed53:	83 ec 0c             	sub    esp,0xc
c001ed56:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001ed5d:	e8 65 78 ff ff       	call   c00165c7 <malloc>
c001ed62:	83 c4 10             	add    esp,0x10
c001ed65:	89 c3                	mov    ebx,eax
c001ed67:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c001ed6c:	83 ec 04             	sub    esp,0x4
c001ed6f:	50                   	push   eax
c001ed70:	68 cc 2c 03 c0       	push   0xc0032ccc
c001ed75:	53                   	push   ebx
c001ed76:	e8 e1 b8 ff ff       	call   c001a65c <File::File(char const*, Process*)>
c001ed7b:	83 c4 10             	add    esp,0x10
c001ed7e:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c001ed85:	83 ec 08             	sub    esp,0x8
c001ed88:	6a 01                	push   0x1
c001ed8a:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001ed91:	e8 e4 b8 ff ff       	call   c001a67a <File::open(FileOpenMode)>
c001ed96:	83 c4 10             	add    esp,0x10
c001ed99:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c001eda0:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c001eda8:	75 16                	jne    c001edc0 <ACPI::open(int, int, void*)+0x10c>
c001edaa:	83 ec 0c             	sub    esp,0xc
c001edad:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001edb4:	e8 1f b9 ff ff       	call   c001a6d8 <File::close()>
c001edb9:	83 c4 10             	add    esp,0x10
c001edbc:	eb 0a                	jmp    c001edc8 <ACPI::open(int, int, void*)+0x114>
c001edbe:	66 90                	xchg   ax,ax
c001edc0:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c001edc8:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c001edd0:	74 1e                	je     c001edf0 <ACPI::open(int, int, void*)+0x13c>
c001edd2:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c001edd9:	8b 00                	mov    eax,DWORD PTR [eax]
c001eddb:	83 c0 08             	add    eax,0x8
c001edde:	8b 00                	mov    eax,DWORD PTR [eax]
c001ede0:	83 ec 0c             	sub    esp,0xc
c001ede3:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001edea:	ff d0                	call   eax
c001edec:	83 c4 10             	add    esp,0x10
c001edef:	90                   	nop
c001edf0:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c001edf7:	83 f0 01             	xor    eax,0x1
c001edfa:	0f b6 c0             	movzx  eax,al
c001edfd:	85 c0                	test   eax,eax
c001edff:	74 43                	je     c001ee44 <ACPI::open(int, int, void*)+0x190>
c001ee01:	83 ec 0c             	sub    esp,0xc
c001ee04:	68 ea 2c 03 c0       	push   0xc0032cea
c001ee09:	e8 39 10 00 00       	call   c001fe47 <KeSetBootMessage(char const*)>
c001ee0e:	83 c4 10             	add    esp,0x10
c001ee11:	83 ec 04             	sub    esp,0x4
c001ee14:	6a 0c                	push   0xc
c001ee16:	68 05 2d 03 c0       	push   0xc0032d05
c001ee1b:	68 16 2d 03 c0       	push   0xc0032d16
c001ee20:	e8 be 46 00 00       	call   c00234e3 <Reg::readIntWithDefault(char*, char*, int)>
c001ee25:	83 c4 10             	add    esp,0x10
c001ee28:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c001ee2f:	83 ec 0c             	sub    esp,0xc
c001ee32:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c001ee39:	e8 0e 95 ff ff       	call   c001834c <Virt::setupPageSwapping(int)>
c001ee3e:	83 c4 10             	add    esp,0x10
c001ee41:	8d 76 00             	lea    esi,[esi+0x0]
c001ee44:	83 ec 0c             	sub    esp,0xc
c001ee47:	68 24 16 03 c0       	push   0xc0031624
c001ee4c:	e8 f6 0f 00 00       	call   c001fe47 <KeSetBootMessage(char const*)>
c001ee51:	83 c4 10             	add    esp,0x10
c001ee54:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c001ee5b:	83 ec 08             	sub    esp,0x8
c001ee5e:	6a 13                	push   0x13
c001ee60:	50                   	push   eax
c001ee61:	e8 da ca ff ff       	call   c001b940 <getDevicesOfType(DeviceType)>
c001ee66:	83 c4 0c             	add    esp,0xc
c001ee69:	8d 76 00             	lea    esi,[esi+0x0]
c001ee6c:	83 ec 0c             	sub    esp,0xc
c001ee6f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001ee76:	50                   	push   eax
c001ee77:	e8 44 06 01 00       	call   c002f4c0 <LinkedList<Device>::isEmpty()>
c001ee7c:	83 c4 10             	add    esp,0x10
c001ee7f:	83 f0 01             	xor    eax,0x1
c001ee82:	0f b6 c0             	movzx  eax,al
c001ee85:	85 c0                	test   eax,eax
c001ee87:	0f 84 47 01 00 00    	je     c001efd4 <ACPI::open(int, int, void*)+0x320>
c001ee8d:	83 ec 0c             	sub    esp,0xc
c001ee90:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001ee97:	50                   	push   eax
c001ee98:	e8 3f 06 01 00       	call   c002f4dc <LinkedList<Device>::getFirstElement()>
c001ee9d:	83 c4 10             	add    esp,0x10
c001eea0:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c001eea7:	83 ec 0c             	sub    esp,0xc
c001eeaa:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001eeb1:	50                   	push   eax
c001eeb2:	e8 2d 06 01 00       	call   c002f4e4 <LinkedList<Device>::removeFirst()>
c001eeb7:	83 c4 10             	add    esp,0x10
c001eeba:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c001eec1:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c001eec8:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c001eecf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eed3:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001eed9:	ba 09 00 00 00       	mov    edx,0x9
c001eede:	fc                   	cld    
c001eedf:	89 c7                	mov    edi,eax
c001eee1:	89 de                	mov    esi,ebx
c001eee3:	89 d1                	mov    ecx,edx
c001eee5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001eee7:	83 ec 08             	sub    esp,0x8
c001eeea:	8d 44 24 38          	lea    eax,[esp+0x38]
c001eeee:	50                   	push   eax
c001eeef:	83 ec 24             	sub    esp,0x24
c001eef2:	89 e0                	mov    eax,esp
c001eef4:	89 c3                	mov    ebx,eax
c001eef6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001eefa:	ba 09 00 00 00       	mov    edx,0x9
c001eeff:	89 df                	mov    edi,ebx
c001ef01:	89 c6                	mov    esi,eax
c001ef03:	89 d1                	mov    ecx,edx
c001ef05:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ef07:	e8 82 bc 00 00       	call   c002ab8e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001ef0c:	83 c4 30             	add    esp,0x30
c001ef0f:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001ef16:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c001ef1e:	0f 84 48 ff ff ff    	je     c001ee6c <ACPI::open(int, int, void*)+0x1b8>
c001ef24:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001ef2f:	83 ec 0c             	sub    esp,0xc
c001ef32:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ef39:	e8 89 76 ff ff       	call   c00165c7 <malloc>
c001ef3e:	83 c4 10             	add    esp,0x10
c001ef41:	89 c3                	mov    ebx,eax
c001ef43:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c001ef48:	83 ec 04             	sub    esp,0x4
c001ef4b:	50                   	push   eax
c001ef4c:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001ef53:	53                   	push   ebx
c001ef54:	e8 03 b7 ff ff       	call   c001a65c <File::File(char const*, Process*)>
c001ef59:	83 c4 10             	add    esp,0x10
c001ef5c:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c001ef63:	83 ec 0c             	sub    esp,0xc
c001ef66:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001ef6d:	e8 cc b9 ff ff       	call   c001a93e <File::exists()>
c001ef72:	83 c4 10             	add    esp,0x10
c001ef75:	0f b6 c0             	movzx  eax,al
c001ef78:	85 c0                	test   eax,eax
c001ef7a:	74 28                	je     c001efa4 <ACPI::open(int, int, void*)+0x2f0>
c001ef7c:	83 ec 08             	sub    esp,0x8
c001ef7f:	6a 01                	push   0x1
c001ef81:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001ef88:	e8 89 5d 00 00       	call   c0024d16 <Thr::loadDLL(char const*, bool)>
c001ef8d:	83 c4 10             	add    esp,0x10
c001ef90:	83 ec 08             	sub    esp,0x8
c001ef93:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001ef9a:	50                   	push   eax
c001ef9b:	e8 c8 5f 00 00       	call   c0024f68 <Thr::executeDLL(unsigned long, void*)>
c001efa0:	83 c4 10             	add    esp,0x10
c001efa3:	90                   	nop
c001efa4:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001efac:	0f 84 ba fe ff ff    	je     c001ee6c <ACPI::open(int, int, void*)+0x1b8>
c001efb2:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c001efb9:	8b 00                	mov    eax,DWORD PTR [eax]
c001efbb:	83 c0 08             	add    eax,0x8
c001efbe:	8b 00                	mov    eax,DWORD PTR [eax]
c001efc0:	83 ec 0c             	sub    esp,0xc
c001efc3:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001efca:	ff d0                	call   eax
c001efcc:	83 c4 10             	add    esp,0x10
c001efcf:	e9 98 fe ff ff       	jmp    c001ee6c <ACPI::open(int, int, void*)+0x1b8>
c001efd4:	83 ec 0c             	sub    esp,0xc
c001efd7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001efde:	50                   	push   eax
c001efdf:	e8 d8 04 01 00       	call   c002f4bc <LinkedList<Device>::~LinkedList()>
c001efe4:	83 c4 10             	add    esp,0x10
c001efe7:	8b 1d bc b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9bc
c001efed:	83 ec 08             	sub    esp,0x8
c001eff0:	6a 01                	push   0x1
c001eff2:	68 1d 2d 03 c0       	push   0xc0032d1d
c001eff7:	e8 1a 5d 00 00       	call   c0024d16 <Thr::loadDLL(char const*, bool)>
c001effc:	83 c4 10             	add    esp,0x10
c001efff:	83 ec 08             	sub    esp,0x8
c001f002:	53                   	push   ebx
c001f003:	50                   	push   eax
c001f004:	e8 5f 5f 00 00       	call   c0024f68 <Thr::executeDLL(unsigned long, void*)>
c001f009:	83 c4 10             	add    esp,0x10
c001f00c:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001f011:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001f017:	83 e0 04             	and    eax,0x4
c001f01a:	0f b6 c0             	movzx  eax,al
c001f01d:	85 c0                	test   eax,eax
c001f01f:	0f 84 1b 01 00 00    	je     c001f140 <ACPI::open(int, int, void*)+0x48c>
c001f025:	83 ec 0c             	sub    esp,0xc
c001f028:	68 3a 2d 03 c0       	push   0xc0032d3a
c001f02d:	e8 15 0e 00 00       	call   c001fe47 <KeSetBootMessage(char const*)>
c001f032:	83 c4 10             	add    esp,0x10
c001f035:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001f040:	83 ec 0c             	sub    esp,0xc
c001f043:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001f04a:	e8 78 75 ff ff       	call   c00165c7 <malloc>
c001f04f:	83 c4 10             	add    esp,0x10
c001f052:	89 c3                	mov    ebx,eax
c001f054:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c001f059:	83 ec 04             	sub    esp,0x4
c001f05c:	50                   	push   eax
c001f05d:	68 57 2d 03 c0       	push   0xc0032d57
c001f062:	53                   	push   ebx
c001f063:	e8 f4 b5 ff ff       	call   c001a65c <File::File(char const*, Process*)>
c001f068:	83 c4 10             	add    esp,0x10
c001f06b:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001f072:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001f07a:	74 20                	je     c001f09c <ACPI::open(int, int, void*)+0x3e8>
c001f07c:	83 ec 0c             	sub    esp,0xc
c001f07f:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001f086:	e8 b3 b8 ff ff       	call   c001a93e <File::exists()>
c001f08b:	83 c4 10             	add    esp,0x10
c001f08e:	0f b6 c0             	movzx  eax,al
c001f091:	85 c0                	test   eax,eax
c001f093:	74 07                	je     c001f09c <ACPI::open(int, int, void*)+0x3e8>
c001f095:	b0 01                	mov    al,0x1
c001f097:	eb 07                	jmp    c001f0a0 <ACPI::open(int, int, void*)+0x3ec>
c001f099:	8d 76 00             	lea    esi,[esi+0x0]
c001f09c:	b0 00                	mov    al,0x0
c001f09e:	66 90                	xchg   ax,ax
c001f0a0:	0f b6 c0             	movzx  eax,al
c001f0a3:	85 c0                	test   eax,eax
c001f0a5:	74 25                	je     c001f0cc <ACPI::open(int, int, void*)+0x418>
c001f0a7:	83 ec 08             	sub    esp,0x8
c001f0aa:	6a 01                	push   0x1
c001f0ac:	68 57 2d 03 c0       	push   0xc0032d57
c001f0b1:	e8 60 5c 00 00       	call   c0024d16 <Thr::loadDLL(char const*, bool)>
c001f0b6:	83 c4 10             	add    esp,0x10
c001f0b9:	83 ec 08             	sub    esp,0x8
c001f0bc:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c001f0c3:	50                   	push   eax
c001f0c4:	e8 9f 5e 00 00       	call   c0024f68 <Thr::executeDLL(unsigned long, void*)>
c001f0c9:	83 c4 10             	add    esp,0x10
c001f0cc:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001f0d4:	74 2a                	je     c001f100 <ACPI::open(int, int, void*)+0x44c>
c001f0d6:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001f0de:	74 20                	je     c001f100 <ACPI::open(int, int, void*)+0x44c>
c001f0e0:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001f0e7:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0e9:	83 c0 08             	add    eax,0x8
c001f0ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0ee:	83 ec 0c             	sub    esp,0xc
c001f0f1:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001f0f8:	ff d0                	call   eax
c001f0fa:	83 c4 10             	add    esp,0x10
c001f0fd:	8d 76 00             	lea    esi,[esi+0x0]
c001f100:	a1 28 06 04 c0       	mov    eax,ds:0xc0040628
c001f105:	83 ec 08             	sub    esp,0x8
c001f108:	68 74 2d 03 c0       	push   0xc0032d74
c001f10d:	50                   	push   eax
c001f10e:	e8 c1 f1 ff ff       	call   c001e2d4 <findDataTable(unsigned char*, char*)>
c001f113:	83 c4 10             	add    esp,0x10
c001f116:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c001f11d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001f125:	74 19                	je     c001f140 <ACPI::open(int, int, void*)+0x48c>
c001f127:	83 ec 08             	sub    esp,0x8
c001f12a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001f131:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001f138:	e8 13 fb ff ff       	call   c001ec50 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001f13d:	83 c4 10             	add    esp,0x10
c001f140:	b8 00 00 00 00       	mov    eax,0x0
c001f145:	81 c4 70 01 00 00    	add    esp,0x170
c001f14b:	5b                   	pop    ebx
c001f14c:	5e                   	pop    esi
c001f14d:	5f                   	pop    edi
c001f14e:	c3                   	ret    
c001f14f:	90                   	nop

c001f150 <CPU::close(int, int, void*)>:
c001f150:	31 c0                	xor    eax,eax
c001f152:	c3                   	ret    
c001f153:	90                   	nop

c001f154 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001f154:	60                   	pusha  
c001f155:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f159:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f15d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f161:	9c                   	pushf  
c001f162:	fa                   	cli    
c001f163:	0f 09                	wbinvd 
c001f165:	0f 30                	wrmsr  
c001f167:	9d                   	popf   
c001f168:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f16c:	89 02                	mov    DWORD PTR [edx],eax
c001f16e:	61                   	popa   
c001f16f:	c3                   	ret    

c001f170 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001f170:	60                   	pusha  
c001f171:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f175:	9c                   	pushf  
c001f176:	fa                   	cli    
c001f177:	0f 09                	wbinvd 
c001f179:	31 c0                	xor    eax,eax
c001f17b:	31 d2                	xor    edx,edx
c001f17d:	0f 32                	rdmsr  
c001f17f:	9d                   	popf   
c001f180:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f184:	89 02                	mov    DWORD PTR [edx],eax
c001f186:	61                   	popa   
c001f187:	c3                   	ret    

c001f188 <CPU::AMD_K6_writeback(int, int, int)>:
c001f188:	56                   	push   esi
c001f189:	53                   	push   ebx
c001f18a:	83 ec 10             	sub    esp,0x10
c001f18d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f191:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001f196:	75 5d                	jne    c001f1f5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001f198:	83 f8 08             	cmp    eax,0x8
c001f19b:	75 09                	jne    c001f1a6 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001f19d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001f1a2:	7e 13                	jle    c001f1b7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001f1a4:	eb 30                	jmp    c001f1d6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001f1a6:	83 f8 06             	cmp    eax,0x6
c001f1a9:	7c 4a                	jl     c001f1f5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001f1ab:	83 f8 07             	cmp    eax,0x7
c001f1ae:	7e 07                	jle    c001f1b7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001f1b0:	83 f8 09             	cmp    eax,0x9
c001f1b3:	74 21                	je     c001f1d6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001f1b5:	eb 3e                	jmp    c001f1f5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001f1b7:	89 e6                	mov    esi,esp
c001f1b9:	8b 1d e0 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9e0
c001f1bf:	56                   	push   esi
c001f1c0:	c1 eb 15             	shr    ebx,0x15
c001f1c3:	68 82 00 00 c0       	push   0xc0000082
c001f1c8:	83 e3 7e             	and    ebx,0x7e
c001f1cb:	e8 a0 ff ff ff       	call   c001f170 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001f1d0:	56                   	push   esi
c001f1d1:	6a 00                	push   0x0
c001f1d3:	53                   	push   ebx
c001f1d4:	eb 12                	jmp    c001f1e8 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001f1d6:	89 e3                	mov    ebx,esp
c001f1d8:	53                   	push   ebx
c001f1d9:	68 82 00 00 c0       	push   0xc0000082
c001f1de:	e8 8d ff ff ff       	call   c001f170 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001f1e3:	53                   	push   ebx
c001f1e4:	6a 00                	push   0x0
c001f1e6:	6a 00                	push   0x0
c001f1e8:	68 82 00 00 c0       	push   0xc0000082
c001f1ed:	e8 62 ff ff ff       	call   c001f154 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001f1f2:	83 c4 18             	add    esp,0x18
c001f1f5:	83 c4 10             	add    esp,0x10
c001f1f8:	5b                   	pop    ebx
c001f1f9:	5e                   	pop    esi
c001f1fa:	c3                   	ret    
c001f1fb:	90                   	nop

c001f1fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001f1fc:	55                   	push   ebp
c001f1fd:	57                   	push   edi
c001f1fe:	56                   	push   esi
c001f1ff:	53                   	push   ebx
c001f200:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f204:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f208:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f20c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001f210:	39 05 b8 44 03 c0    	cmp    DWORD PTR ds:0xc00344b8,eax
c001f216:	75 23                	jne    c001f23b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001f218:	a1 8c 08 04 c0       	mov    eax,ds:0xc004088c
c001f21d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f221:	89 06                	mov    DWORD PTR [esi],eax
c001f223:	a1 88 08 04 c0       	mov    eax,ds:0xc0040888
c001f228:	89 07                	mov    DWORD PTR [edi],eax
c001f22a:	a1 84 08 04 c0       	mov    eax,ds:0xc0040884
c001f22f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001f232:	a1 80 08 04 c0       	mov    eax,ds:0xc0040880
c001f237:	89 02                	mov    DWORD PTR [edx],eax
c001f239:	eb 3f                	jmp    c001f27a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001f23b:	31 c9                	xor    ecx,ecx
c001f23d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f241:	0f a2                	cpuid  
c001f243:	89 06                	mov    DWORD PTR [esi],eax
c001f245:	89 1f                	mov    DWORD PTR [edi],ebx
c001f247:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f24b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001f24e:	89 10                	mov    DWORD PTR [eax],edx
c001f250:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f254:	a3 b8 44 03 c0       	mov    ds:0xc00344b8,eax
c001f259:	8b 06                	mov    eax,DWORD PTR [esi]
c001f25b:	a3 8c 08 04 c0       	mov    ds:0xc004088c,eax
c001f260:	8b 07                	mov    eax,DWORD PTR [edi]
c001f262:	a3 88 08 04 c0       	mov    ds:0xc0040888,eax
c001f267:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f26a:	a3 84 08 04 c0       	mov    ds:0xc0040884,eax
c001f26f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f273:	8b 00                	mov    eax,DWORD PTR [eax]
c001f275:	a3 80 08 04 c0       	mov    ds:0xc0040880,eax
c001f27a:	5b                   	pop    ebx
c001f27b:	5e                   	pop    esi
c001f27c:	5f                   	pop    edi
c001f27d:	5d                   	pop    ebp
c001f27e:	c3                   	ret    
c001f27f:	90                   	nop

c001f280 <CPU::cpuidCheckEDX(unsigned int)>:
c001f280:	83 ec 10             	sub    esp,0x10
c001f283:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f287:	50                   	push   eax
c001f288:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f28c:	50                   	push   eax
c001f28d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f291:	50                   	push   eax
c001f292:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f296:	50                   	push   eax
c001f297:	6a 01                	push   0x1
c001f299:	e8 5e ff ff ff       	call   c001f1fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f29e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f2a2:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001f2a6:	0f 95 c0             	setne  al
c001f2a9:	83 c4 24             	add    esp,0x24
c001f2ac:	c3                   	ret    
c001f2ad:	90                   	nop

c001f2ae <CPU::cpuidCheckECX(unsigned int)>:
c001f2ae:	83 ec 10             	sub    esp,0x10
c001f2b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2b5:	50                   	push   eax
c001f2b6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2ba:	50                   	push   eax
c001f2bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2bf:	50                   	push   eax
c001f2c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2c4:	50                   	push   eax
c001f2c5:	6a 01                	push   0x1
c001f2c7:	e8 30 ff ff ff       	call   c001f1fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f2cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f2d0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001f2d4:	0f 95 c0             	setne  al
c001f2d7:	83 c4 24             	add    esp,0x24
c001f2da:	c3                   	ret    
c001f2db:	90                   	nop

c001f2dc <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001f2dc:	83 ec 10             	sub    esp,0x10
c001f2df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2e3:	50                   	push   eax
c001f2e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2e8:	50                   	push   eax
c001f2e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2ed:	50                   	push   eax
c001f2ee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2f2:	50                   	push   eax
c001f2f3:	6a 07                	push   0x7
c001f2f5:	e8 02 ff ff ff       	call   c001f1fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f2fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f2fe:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001f302:	0f 95 c0             	setne  al
c001f305:	83 c4 24             	add    esp,0x24
c001f308:	c3                   	ret    
c001f309:	90                   	nop

c001f30a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001f30a:	83 ec 10             	sub    esp,0x10
c001f30d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f311:	50                   	push   eax
c001f312:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f316:	50                   	push   eax
c001f317:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f31b:	50                   	push   eax
c001f31c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f320:	50                   	push   eax
c001f321:	6a 07                	push   0x7
c001f323:	e8 d4 fe ff ff       	call   c001f1fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f328:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f32c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001f330:	0f 95 c0             	setne  al
c001f333:	83 c4 24             	add    esp,0x24
c001f336:	c3                   	ret    
c001f337:	90                   	nop

c001f338 <CPU::CPU()>:
c001f338:	83 ec 0c             	sub    esp,0xc
c001f33b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f33f:	83 ec 08             	sub    esp,0x8
c001f342:	68 35 2f 03 c0       	push   0xc0032f35
c001f347:	50                   	push   eax
c001f348:	e8 27 c4 ff ff       	call   c001b774 <Device::Device(char const*)>
c001f34d:	83 c4 10             	add    esp,0x10
c001f350:	ba c8 2f 03 c0       	mov    edx,0xc0032fc8
c001f355:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f359:	89 10                	mov    DWORD PTR [eax],edx
c001f35b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f35f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001f369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f36d:	05 78 01 00 00       	add    eax,0x178
c001f372:	83 ec 0c             	sub    esp,0xc
c001f375:	50                   	push   eax
c001f376:	e8 77 6a ff ff       	call   c0015df2 <GDT::GDT()>
c001f37b:	83 c4 10             	add    esp,0x10
c001f37e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f382:	05 7c 09 00 00       	add    eax,0x97c
c001f387:	83 ec 0c             	sub    esp,0xc
c001f38a:	50                   	push   eax
c001f38b:	e8 b0 6c ff ff       	call   c0016040 <IDT::IDT()>
c001f390:	83 c4 10             	add    esp,0x10
c001f393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f397:	05 7c 11 00 00       	add    eax,0x117c
c001f39c:	83 ec 0c             	sub    esp,0xc
c001f39f:	50                   	push   eax
c001f3a0:	e8 af 86 ff ff       	call   c0017a54 <TSS::TSS()>
c001f3a5:	83 c4 10             	add    esp,0x10
c001f3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3ac:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001f3b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3b7:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001f3c1:	90                   	nop
c001f3c2:	83 c4 0c             	add    esp,0xc
c001f3c5:	c3                   	ret    

c001f3c6 <CPU::displayFeatures()>:
c001f3c6:	c3                   	ret    
c001f3c7:	90                   	nop

c001f3c8 <CPU::detectFeatures()>:
c001f3c8:	55                   	push   ebp
c001f3c9:	57                   	push   edi
c001f3ca:	56                   	push   esi
c001f3cb:	53                   	push   ebx
c001f3cc:	83 ec 30             	sub    esp,0x30
c001f3cf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f3d3:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001f3dd:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001f3e4:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001f3ea:	6a 0d                	push   0xd
c001f3ec:	6a 00                	push   0x0
c001f3ee:	55                   	push   ebp
c001f3ef:	e8 fc 10 fe ff       	call   c00004f0 <memset>
c001f3f4:	83 c4 10             	add    esp,0x10
c001f3f7:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001f3fc:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001f403:	0f 84 db 05 00 00    	je     c001f9e4 <CPU::detectFeatures()+0x61c>
c001f409:	83 ec 0c             	sub    esp,0xc
c001f40c:	89 ef                	mov    edi,ebp
c001f40e:	6a 10                	push   0x10
c001f410:	e8 6b fe ff ff       	call   c001f280 <CPU::cpuidCheckEDX(unsigned int)>
c001f415:	83 e0 01             	and    eax,0x1
c001f418:	8d 14 00             	lea    edx,[eax+eax*1]
c001f41b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f421:	83 e0 fd             	and    eax,0xfffffffd
c001f424:	09 d0                	or     eax,edx
c001f426:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f42c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001f433:	e8 48 fe ff ff       	call   c001f280 <CPU::cpuidCheckEDX(unsigned int)>
c001f438:	83 e0 01             	and    eax,0x1
c001f43b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f442:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f448:	83 e0 fb             	and    eax,0xfffffffb
c001f44b:	09 d0                	or     eax,edx
c001f44d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f453:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001f45a:	e8 21 fe ff ff       	call   c001f280 <CPU::cpuidCheckEDX(unsigned int)>
c001f45f:	83 e0 01             	and    eax,0x1
c001f462:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f469:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f46f:	83 e0 f7             	and    eax,0xfffffff7
c001f472:	09 d0                	or     eax,edx
c001f474:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f47a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001f481:	e8 fa fd ff ff       	call   c001f280 <CPU::cpuidCheckEDX(unsigned int)>
c001f486:	83 e0 01             	and    eax,0x1
c001f489:	c1 e0 04             	shl    eax,0x4
c001f48c:	89 c2                	mov    edx,eax
c001f48e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f494:	83 e0 ef             	and    eax,0xffffffef
c001f497:	09 d0                	or     eax,edx
c001f499:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f49f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001f4a6:	e8 d5 fd ff ff       	call   c001f280 <CPU::cpuidCheckEDX(unsigned int)>
c001f4ab:	83 e0 01             	and    eax,0x1
c001f4ae:	c1 e0 05             	shl    eax,0x5
c001f4b1:	89 c2                	mov    edx,eax
c001f4b3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f4b9:	83 e0 df             	and    eax,0xffffffdf
c001f4bc:	09 d0                	or     eax,edx
c001f4be:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f4c4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f4cb:	e8 b0 fd ff ff       	call   c001f280 <CPU::cpuidCheckEDX(unsigned int)>
c001f4d0:	83 e0 01             	and    eax,0x1
c001f4d3:	8d 14 00             	lea    edx,[eax+eax*1]
c001f4d6:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f4dc:	83 e0 fd             	and    eax,0xfffffffd
c001f4df:	09 d0                	or     eax,edx
c001f4e1:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f4e7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001f4ee:	e8 8d fd ff ff       	call   c001f280 <CPU::cpuidCheckEDX(unsigned int)>
c001f4f3:	83 e0 01             	and    eax,0x1
c001f4f6:	c1 e0 06             	shl    eax,0x6
c001f4f9:	89 c2                	mov    edx,eax
c001f4fb:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f501:	83 e0 bf             	and    eax,0xffffffbf
c001f504:	09 d0                	or     eax,edx
c001f506:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f50c:	58                   	pop    eax
c001f50d:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f511:	50                   	push   eax
c001f512:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f516:	50                   	push   eax
c001f517:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f51b:	56                   	push   esi
c001f51c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f520:	50                   	push   eax
c001f521:	6a 00                	push   0x0
c001f523:	e8 d4 fc ff ff       	call   c001f1fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f528:	b8 04 00 00 00       	mov    eax,0x4
c001f52d:	89 c1                	mov    ecx,eax
c001f52f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f531:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001f537:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001f53b:	89 c1                	mov    ecx,eax
c001f53d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f53f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001f545:	8d 74 24 38          	lea    esi,[esp+0x38]
c001f549:	89 c1                	mov    ecx,eax
c001f54b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f54d:	83 c4 18             	add    esp,0x18
c001f550:	68 44 2e 03 c0       	push   0xc0032e44
c001f555:	55                   	push   ebp
c001f556:	e8 f5 11 fe ff       	call   c0000750 <strcmp>
c001f55b:	83 c4 10             	add    esp,0x10
c001f55e:	85 c0                	test   eax,eax
c001f560:	75 0f                	jne    c001f571 <CPU::detectFeatures()+0x1a9>
c001f562:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001f56c:	e9 22 02 00 00       	jmp    c001f793 <CPU::detectFeatures()+0x3cb>
c001f571:	50                   	push   eax
c001f572:	50                   	push   eax
c001f573:	68 51 2e 03 c0       	push   0xc0032e51
c001f578:	55                   	push   ebp
c001f579:	e8 d2 11 fe ff       	call   c0000750 <strcmp>
c001f57e:	83 c4 10             	add    esp,0x10
c001f581:	85 c0                	test   eax,eax
c001f583:	74 dd                	je     c001f562 <CPU::detectFeatures()+0x19a>
c001f585:	50                   	push   eax
c001f586:	50                   	push   eax
c001f587:	68 5e 2e 03 c0       	push   0xc0032e5e
c001f58c:	55                   	push   ebp
c001f58d:	e8 be 11 fe ff       	call   c0000750 <strcmp>
c001f592:	83 c4 10             	add    esp,0x10
c001f595:	85 c0                	test   eax,eax
c001f597:	74 2a                	je     c001f5c3 <CPU::detectFeatures()+0x1fb>
c001f599:	50                   	push   eax
c001f59a:	50                   	push   eax
c001f59b:	68 6b 2e 03 c0       	push   0xc0032e6b
c001f5a0:	55                   	push   ebp
c001f5a1:	e8 aa 11 fe ff       	call   c0000750 <strcmp>
c001f5a6:	83 c4 10             	add    esp,0x10
c001f5a9:	85 c0                	test   eax,eax
c001f5ab:	74 16                	je     c001f5c3 <CPU::detectFeatures()+0x1fb>
c001f5ad:	50                   	push   eax
c001f5ae:	50                   	push   eax
c001f5af:	68 78 2e 03 c0       	push   0xc0032e78
c001f5b4:	55                   	push   ebp
c001f5b5:	e8 96 11 fe ff       	call   c0000750 <strcmp>
c001f5ba:	83 c4 10             	add    esp,0x10
c001f5bd:	85 c0                	test   eax,eax
c001f5bf:	74 48                	je     c001f609 <CPU::detectFeatures()+0x241>
c001f5c1:	eb 0f                	jmp    c001f5d2 <CPU::detectFeatures()+0x20a>
c001f5c3:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001f5cd:	e9 c1 01 00 00       	jmp    c001f793 <CPU::detectFeatures()+0x3cb>
c001f5d2:	50                   	push   eax
c001f5d3:	50                   	push   eax
c001f5d4:	68 85 2e 03 c0       	push   0xc0032e85
c001f5d9:	55                   	push   ebp
c001f5da:	e8 71 11 fe ff       	call   c0000750 <strcmp>
c001f5df:	83 c4 10             	add    esp,0x10
c001f5e2:	85 c0                	test   eax,eax
c001f5e4:	74 23                	je     c001f609 <CPU::detectFeatures()+0x241>
c001f5e6:	57                   	push   edi
c001f5e7:	57                   	push   edi
c001f5e8:	68 92 2e 03 c0       	push   0xc0032e92
c001f5ed:	55                   	push   ebp
c001f5ee:	e8 5d 11 fe ff       	call   c0000750 <strcmp>
c001f5f3:	83 c4 10             	add    esp,0x10
c001f5f6:	85 c0                	test   eax,eax
c001f5f8:	75 1e                	jne    c001f618 <CPU::detectFeatures()+0x250>
c001f5fa:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f604:	e9 8a 01 00 00       	jmp    c001f793 <CPU::detectFeatures()+0x3cb>
c001f609:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001f613:	e9 7b 01 00 00       	jmp    c001f793 <CPU::detectFeatures()+0x3cb>
c001f618:	56                   	push   esi
c001f619:	56                   	push   esi
c001f61a:	68 9f 2e 03 c0       	push   0xc0032e9f
c001f61f:	55                   	push   ebp
c001f620:	e8 2b 11 fe ff       	call   c0000750 <strcmp>
c001f625:	83 c4 10             	add    esp,0x10
c001f628:	85 c0                	test   eax,eax
c001f62a:	75 0f                	jne    c001f63b <CPU::detectFeatures()+0x273>
c001f62c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001f636:	e9 58 01 00 00       	jmp    c001f793 <CPU::detectFeatures()+0x3cb>
c001f63b:	51                   	push   ecx
c001f63c:	51                   	push   ecx
c001f63d:	68 5e 2e 03 c0       	push   0xc0032e5e
c001f642:	55                   	push   ebp
c001f643:	e8 08 11 fe ff       	call   c0000750 <strcmp>
c001f648:	83 c4 10             	add    esp,0x10
c001f64b:	85 c0                	test   eax,eax
c001f64d:	75 0f                	jne    c001f65e <CPU::detectFeatures()+0x296>
c001f64f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001f659:	e9 35 01 00 00       	jmp    c001f793 <CPU::detectFeatures()+0x3cb>
c001f65e:	52                   	push   edx
c001f65f:	52                   	push   edx
c001f660:	68 ac 2e 03 c0       	push   0xc0032eac
c001f665:	55                   	push   ebp
c001f666:	e8 e5 10 fe ff       	call   c0000750 <strcmp>
c001f66b:	83 c4 10             	add    esp,0x10
c001f66e:	85 c0                	test   eax,eax
c001f670:	75 0f                	jne    c001f681 <CPU::detectFeatures()+0x2b9>
c001f672:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001f67c:	e9 12 01 00 00       	jmp    c001f793 <CPU::detectFeatures()+0x3cb>
c001f681:	50                   	push   eax
c001f682:	50                   	push   eax
c001f683:	68 b9 2e 03 c0       	push   0xc0032eb9
c001f688:	55                   	push   ebp
c001f689:	e8 c2 10 fe ff       	call   c0000750 <strcmp>
c001f68e:	83 c4 10             	add    esp,0x10
c001f691:	85 c0                	test   eax,eax
c001f693:	75 0f                	jne    c001f6a4 <CPU::detectFeatures()+0x2dc>
c001f695:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001f69f:	e9 ef 00 00 00       	jmp    c001f793 <CPU::detectFeatures()+0x3cb>
c001f6a4:	50                   	push   eax
c001f6a5:	50                   	push   eax
c001f6a6:	68 c6 2e 03 c0       	push   0xc0032ec6
c001f6ab:	55                   	push   ebp
c001f6ac:	e8 9f 10 fe ff       	call   c0000750 <strcmp>
c001f6b1:	83 c4 10             	add    esp,0x10
c001f6b4:	85 c0                	test   eax,eax
c001f6b6:	75 0f                	jne    c001f6c7 <CPU::detectFeatures()+0x2ff>
c001f6b8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001f6c2:	e9 cc 00 00 00       	jmp    c001f793 <CPU::detectFeatures()+0x3cb>
c001f6c7:	50                   	push   eax
c001f6c8:	50                   	push   eax
c001f6c9:	68 d3 2e 03 c0       	push   0xc0032ed3
c001f6ce:	55                   	push   ebp
c001f6cf:	e8 7c 10 fe ff       	call   c0000750 <strcmp>
c001f6d4:	83 c4 10             	add    esp,0x10
c001f6d7:	85 c0                	test   eax,eax
c001f6d9:	75 0f                	jne    c001f6ea <CPU::detectFeatures()+0x322>
c001f6db:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001f6e5:	e9 a9 00 00 00       	jmp    c001f793 <CPU::detectFeatures()+0x3cb>
c001f6ea:	50                   	push   eax
c001f6eb:	50                   	push   eax
c001f6ec:	68 e0 2e 03 c0       	push   0xc0032ee0
c001f6f1:	55                   	push   ebp
c001f6f2:	e8 59 10 fe ff       	call   c0000750 <strcmp>
c001f6f7:	83 c4 10             	add    esp,0x10
c001f6fa:	85 c0                	test   eax,eax
c001f6fc:	75 0f                	jne    c001f70d <CPU::detectFeatures()+0x345>
c001f6fe:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001f708:	e9 86 00 00 00       	jmp    c001f793 <CPU::detectFeatures()+0x3cb>
c001f70d:	50                   	push   eax
c001f70e:	50                   	push   eax
c001f70f:	68 ed 2e 03 c0       	push   0xc0032eed
c001f714:	55                   	push   ebp
c001f715:	e8 36 10 fe ff       	call   c0000750 <strcmp>
c001f71a:	83 c4 10             	add    esp,0x10
c001f71d:	85 c0                	test   eax,eax
c001f71f:	75 0c                	jne    c001f72d <CPU::detectFeatures()+0x365>
c001f721:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001f72b:	eb 66                	jmp    c001f793 <CPU::detectFeatures()+0x3cb>
c001f72d:	50                   	push   eax
c001f72e:	50                   	push   eax
c001f72f:	68 fa 2e 03 c0       	push   0xc0032efa
c001f734:	55                   	push   ebp
c001f735:	e8 16 10 fe ff       	call   c0000750 <strcmp>
c001f73a:	83 c4 10             	add    esp,0x10
c001f73d:	85 c0                	test   eax,eax
c001f73f:	75 0c                	jne    c001f74d <CPU::detectFeatures()+0x385>
c001f741:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001f74b:	eb 46                	jmp    c001f793 <CPU::detectFeatures()+0x3cb>
c001f74d:	57                   	push   edi
c001f74e:	57                   	push   edi
c001f74f:	68 07 2f 03 c0       	push   0xc0032f07
c001f754:	55                   	push   ebp
c001f755:	e8 f6 0f fe ff       	call   c0000750 <strcmp>
c001f75a:	83 c4 10             	add    esp,0x10
c001f75d:	85 c0                	test   eax,eax
c001f75f:	74 e0                	je     c001f741 <CPU::detectFeatures()+0x379>
c001f761:	56                   	push   esi
c001f762:	56                   	push   esi
c001f763:	68 14 2f 03 c0       	push   0xc0032f14
c001f768:	55                   	push   ebp
c001f769:	e8 e2 0f fe ff       	call   c0000750 <strcmp>
c001f76e:	83 c4 10             	add    esp,0x10
c001f771:	85 c0                	test   eax,eax
c001f773:	74 cc                	je     c001f741 <CPU::detectFeatures()+0x379>
c001f775:	51                   	push   ecx
c001f776:	51                   	push   ecx
c001f777:	68 21 2f 03 c0       	push   0xc0032f21
c001f77c:	55                   	push   ebp
c001f77d:	e8 ce 0f fe ff       	call   c0000750 <strcmp>
c001f782:	83 c4 10             	add    esp,0x10
c001f785:	85 c0                	test   eax,eax
c001f787:	74 b8                	je     c001f741 <CPU::detectFeatures()+0x379>
c001f789:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001f793:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001f798:	0f 86 be 00 00 00    	jbe    c001f85c <CPU::detectFeatures()+0x494>
c001f79e:	83 ec 0c             	sub    esp,0xc
c001f7a1:	68 80 00 00 00       	push   0x80
c001f7a6:	e8 31 fb ff ff       	call   c001f2dc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f7ab:	83 e0 01             	and    eax,0x1
c001f7ae:	c1 e0 06             	shl    eax,0x6
c001f7b1:	89 c2                	mov    edx,eax
c001f7b3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f7b9:	83 e0 bf             	and    eax,0xffffffbf
c001f7bc:	09 d0                	or     eax,edx
c001f7be:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f7c4:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001f7cb:	e8 0c fb ff ff       	call   c001f2dc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f7d0:	83 e0 01             	and    eax,0x1
c001f7d3:	c1 e0 04             	shl    eax,0x4
c001f7d6:	89 c2                	mov    edx,eax
c001f7d8:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f7de:	83 e0 ef             	and    eax,0xffffffef
c001f7e1:	09 d0                	or     eax,edx
c001f7e3:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f7e9:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001f7f0:	e8 e7 fa ff ff       	call   c001f2dc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f7f5:	89 c2                	mov    edx,eax
c001f7f7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f7fd:	c1 e2 07             	shl    edx,0x7
c001f800:	83 e0 7f             	and    eax,0x7f
c001f803:	09 d0                	or     eax,edx
c001f805:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f80b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001f812:	e8 f3 fa ff ff       	call   c001f30a <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f817:	83 e0 01             	and    eax,0x1
c001f81a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f821:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f827:	83 e0 f7             	and    eax,0xfffffff7
c001f82a:	09 d0                	or     eax,edx
c001f82c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f832:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001f839:	e8 cc fa ff ff       	call   c001f30a <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f83e:	83 c4 10             	add    esp,0x10
c001f841:	83 e0 01             	and    eax,0x1
c001f844:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f84b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f851:	83 e0 fb             	and    eax,0xfffffffb
c001f854:	09 d0                	or     eax,edx
c001f856:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f85c:	83 ec 0c             	sub    esp,0xc
c001f85f:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f863:	50                   	push   eax
c001f864:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f868:	50                   	push   eax
c001f869:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001f86d:	57                   	push   edi
c001f86e:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f872:	56                   	push   esi
c001f873:	6a 01                	push   0x1
c001f875:	e8 82 f9 ff ff       	call   c001f1fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f87a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f87e:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001f884:	89 c1                	mov    ecx,eax
c001f886:	83 e2 f0             	and    edx,0xfffffff0
c001f889:	83 e1 0f             	and    ecx,0xf
c001f88c:	09 ca                	or     edx,ecx
c001f88e:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001f894:	89 c2                	mov    edx,eax
c001f896:	c1 ea 04             	shr    edx,0x4
c001f899:	83 e2 0f             	and    edx,0xf
c001f89c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f8a0:	89 d1                	mov    ecx,edx
c001f8a2:	83 c4 20             	add    esp,0x20
c001f8a5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001f8ab:	c1 e1 06             	shl    ecx,0x6
c001f8ae:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001f8b4:	09 ca                	or     edx,ecx
c001f8b6:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001f8bd:	89 c2                	mov    edx,eax
c001f8bf:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001f8c5:	c1 ea 08             	shr    edx,0x8
c001f8c8:	83 e1 3f             	and    ecx,0x3f
c001f8cb:	83 e2 0f             	and    edx,0xf
c001f8ce:	89 d5                	mov    ebp,edx
c001f8d0:	83 e5 03             	and    ebp,0x3
c001f8d3:	c1 e5 06             	shl    ebp,0x6
c001f8d6:	09 e9                	or     ecx,ebp
c001f8d8:	89 d5                	mov    ebp,edx
c001f8da:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001f8e0:	c1 ed 02             	shr    ebp,0x2
c001f8e3:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001f8e9:	83 e1 c0             	and    ecx,0xffffffc0
c001f8ec:	09 e9                	or     ecx,ebp
c001f8ee:	89 c5                	mov    ebp,eax
c001f8f0:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001f8f6:	c1 ed 08             	shr    ebp,0x8
c001f8f9:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001f8ff:	83 e5 30             	and    ebp,0x30
c001f902:	83 e1 cf             	and    ecx,0xffffffcf
c001f905:	09 e9                	or     ecx,ebp
c001f907:	83 fa 06             	cmp    edx,0x6
c001f90a:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001f910:	74 05                	je     c001f917 <CPU::detectFeatures()+0x54f>
c001f912:	83 fa 0f             	cmp    edx,0xf
c001f915:	75 64                	jne    c001f97b <CPU::detectFeatures()+0x5b3>
c001f917:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001f91d:	89 c1                	mov    ecx,eax
c001f91f:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c001f925:	c1 e9 10             	shr    ecx,0x10
c001f928:	c1 e1 04             	shl    ecx,0x4
c001f92b:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001f92f:	0f b6 c9             	movzx  ecx,cl
c001f932:	c1 e1 06             	shl    ecx,0x6
c001f935:	09 e9                	or     ecx,ebp
c001f937:	83 fa 0f             	cmp    edx,0xf
c001f93a:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001f941:	75 38                	jne    c001f97b <CPU::detectFeatures()+0x5b3>
c001f943:	c1 e8 14             	shr    eax,0x14
c001f946:	83 c0 0f             	add    eax,0xf
c001f949:	0f b6 c0             	movzx  eax,al
c001f94c:	89 c2                	mov    edx,eax
c001f94e:	c1 e8 02             	shr    eax,0x2
c001f951:	83 e2 03             	and    edx,0x3
c001f954:	89 d1                	mov    ecx,edx
c001f956:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001f95c:	c1 e1 06             	shl    ecx,0x6
c001f95f:	83 e2 3f             	and    edx,0x3f
c001f962:	09 ca                	or     edx,ecx
c001f964:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001f96a:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001f970:	83 e2 c0             	and    edx,0xffffffc0
c001f973:	09 d0                	or     eax,edx
c001f975:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001f97b:	83 ec 0c             	sub    esp,0xc
c001f97e:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f984:	83 c8 07             	or     eax,0x7
c001f987:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f98d:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f991:	50                   	push   eax
c001f992:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f996:	55                   	push   ebp
c001f997:	57                   	push   edi
c001f998:	56                   	push   esi
c001f999:	68 00 00 00 80       	push   0x80000000
c001f99e:	e8 59 f8 ff ff       	call   c001f1fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f9a3:	83 c4 20             	add    esp,0x20
c001f9a6:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001f9ae:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f9b2:	76 1e                	jbe    c001f9d2 <CPU::detectFeatures()+0x60a>
c001f9b4:	83 ec 0c             	sub    esp,0xc
c001f9b7:	50                   	push   eax
c001f9b8:	55                   	push   ebp
c001f9b9:	57                   	push   edi
c001f9ba:	56                   	push   esi
c001f9bb:	68 01 00 00 80       	push   0x80000001
c001f9c0:	e8 37 f8 ff ff       	call   c001f1fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f9c5:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001f9cf:	83 c4 20             	add    esp,0x20
c001f9d2:	52                   	push   edx
c001f9d3:	52                   	push   edx
c001f9d4:	68 2d 2f 03 c0       	push   0xc0032f2d
c001f9d9:	53                   	push   ebx
c001f9da:	e8 87 bd ff ff       	call   c001b766 <Device::setName(char const*)>
c001f9df:	83 c4 10             	add    esp,0x10
c001f9e2:	eb 69                	jmp    c001fa4d <CPU::detectFeatures()+0x685>
c001f9e4:	50                   	push   eax
c001f9e5:	50                   	push   eax
c001f9e6:	68 92 2e 03 c0       	push   0xc0032e92
c001f9eb:	55                   	push   ebp
c001f9ec:	e8 4f 0c fe ff       	call   c0000640 <strcpy>
c001f9f1:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f9fb:	e8 c3 07 fe ff       	call   c00001c3 <is486>
c001fa00:	83 c4 10             	add    esp,0x10
c001fa03:	85 c0                	test   eax,eax
c001fa05:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001fa0b:	74 1f                	je     c001fa2c <CPU::detectFeatures()+0x664>
c001fa0d:	83 c8 07             	or     eax,0x7
c001fa10:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001fa16:	0f 20 c0             	mov    eax,cr0
c001fa19:	83 e0 14             	and    eax,0x14
c001fa1c:	83 f8 04             	cmp    eax,0x4
c001fa1f:	75 10                	jne    c001fa31 <CPU::detectFeatures()+0x669>
c001fa21:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001fa27:	83 e0 fd             	and    eax,0xfffffffd
c001fa2a:	eb 1b                	jmp    c001fa47 <CPU::detectFeatures()+0x67f>
c001fa2c:	83 e0 f8             	and    eax,0xfffffff8
c001fa2f:	eb df                	jmp    c001fa10 <CPU::detectFeatures()+0x648>
c001fa31:	e8 68 07 fe ff       	call   c000019e <hasLegacyFPU>
c001fa36:	83 e0 01             	and    eax,0x1
c001fa39:	8d 14 00             	lea    edx,[eax+eax*1]
c001fa3c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001fa42:	83 e0 fd             	and    eax,0xfffffffd
c001fa45:	09 d0                	or     eax,edx
c001fa47:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001fa4d:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c001fa54:	74 17                	je     c001fa6d <CPU::detectFeatures()+0x6a5>
c001fa56:	8b 15 bc b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9bc
c001fa5c:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c001fa62:	83 c8 10             	or     eax,0x10
c001fa65:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001fa6b:	eb 20                	jmp    c001fa8d <CPU::detectFeatures()+0x6c5>
c001fa6d:	e8 2c 07 fe ff       	call   c000019e <hasLegacyFPU>
c001fa72:	83 e0 01             	and    eax,0x1
c001fa75:	8d 14 00             	lea    edx,[eax+eax*1]
c001fa78:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001fa7e:	83 e0 fd             	and    eax,0xfffffffd
c001fa81:	09 d0                	or     eax,edx
c001fa83:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001fa89:	a8 02                	test   al,0x2
c001fa8b:	75 c9                	jne    c001fa56 <CPU::detectFeatures()+0x68e>
c001fa8d:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001fa94:	83 c4 2c             	add    esp,0x2c
c001fa97:	5b                   	pop    ebx
c001fa98:	5e                   	pop    esi
c001fa99:	5f                   	pop    edi
c001fa9a:	5d                   	pop    ebp
c001fa9b:	c3                   	ret    

c001fa9c <CPU::setupSMEP()>:
c001fa9c:	0f 20 e0             	mov    eax,cr4
c001fa9f:	0d 00 00 10 00       	or     eax,0x100000
c001faa4:	0f 22 e0             	mov    cr4,eax
c001faa7:	c3                   	ret    

c001faa8 <CPU::setupUMIP()>:
c001faa8:	0f 20 e0             	mov    eax,cr4
c001faab:	80 cc 08             	or     ah,0x8
c001faae:	0f 22 e0             	mov    cr4,eax
c001fab1:	c3                   	ret    

c001fab2 <CPU::setupTSC()>:
c001fab2:	0f 20 e0             	mov    eax,cr4
c001fab5:	83 c8 04             	or     eax,0x4
c001fab8:	0f 22 e0             	mov    cr4,eax
c001fabb:	c3                   	ret    

c001fabc <CPU::setupLargePages()>:
c001fabc:	0f 20 e0             	mov    eax,cr4
c001fabf:	83 c8 10             	or     eax,0x10
c001fac2:	0f 22 e0             	mov    cr4,eax
c001fac5:	c3                   	ret    

c001fac6 <CPU::setupPAT()>:
c001fac6:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001facb:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001fad2:	74 2c                	je     c001fb00 <CPU::setupPAT()+0x3a>
c001fad4:	53                   	push   ebx
c001fad5:	83 ec 10             	sub    esp,0x10
c001fad8:	68 77 02 00 00       	push   0x277
c001fadd:	50                   	push   eax
c001fade:	e8 73 60 ff ff       	call   c0015b56 <Computer::rdmsr(unsigned int)>
c001fae3:	83 e2 f8             	and    edx,0xfffffff8
c001fae6:	83 ca 01             	or     edx,0x1
c001fae9:	52                   	push   edx
c001faea:	50                   	push   eax
c001faeb:	68 77 02 00 00       	push   0x277
c001faf0:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c001faf6:	e8 87 60 ff ff       	call   c0015b82 <Computer::wrmsr(unsigned int, unsigned long long)>
c001fafb:	83 c4 28             	add    esp,0x28
c001fafe:	5b                   	pop    ebx
c001faff:	c3                   	ret    
c001fb00:	c3                   	ret    
c001fb01:	90                   	nop

c001fb02 <CPU::setupMTRR()>:
c001fb02:	c3                   	ret    
c001fb03:	90                   	nop

c001fb04 <CPU::setupGlobalPages()>:
c001fb04:	0f 20 e0             	mov    eax,cr4
c001fb07:	0c 80                	or     al,0x80
c001fb09:	0f 22 e0             	mov    cr4,eax
c001fb0c:	c3                   	ret    
c001fb0d:	90                   	nop

c001fb0e <CPU::allowUsermodeDataAccess()>:
c001fb0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb12:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001fb19:	74 03                	je     c001fb1e <CPU::allowUsermodeDataAccess()+0x10>
c001fb1b:	0f 01 cb             	stac   
c001fb1e:	c3                   	ret    
c001fb1f:	90                   	nop

c001fb20 <CPU::prohibitUsermodeDataAccess()>:
c001fb20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb24:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001fb2b:	74 03                	je     c001fb30 <CPU::prohibitUsermodeDataAccess()+0x10>
c001fb2d:	0f 01 ca             	clac   
c001fb30:	c3                   	ret    
c001fb31:	90                   	nop

c001fb32 <CPU::setupSMAP()>:
c001fb32:	0f 20 e0             	mov    eax,cr4
c001fb35:	0d 00 00 20 00       	or     eax,0x200000
c001fb3a:	0f 22 e0             	mov    cr4,eax
c001fb3d:	eb e1                	jmp    c001fb20 <CPU::prohibitUsermodeDataAccess()>
c001fb3f:	90                   	nop

c001fb40 <CPU::setupFeatures()>:
c001fb40:	53                   	push   ebx
c001fb41:	83 ec 08             	sub    esp,0x8
c001fb44:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fb48:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001fb4f:	74 18                	je     c001fb69 <CPU::setupFeatures()+0x29>
c001fb51:	83 ec 0c             	sub    esp,0xc
c001fb54:	68 39 2f 03 c0       	push   0xc0032f39
c001fb59:	e8 f7 98 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001fb5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb61:	e8 42 ff ff ff       	call   c001faa8 <CPU::setupUMIP()>
c001fb66:	83 c4 10             	add    esp,0x10
c001fb69:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001fb70:	74 18                	je     c001fb8a <CPU::setupFeatures()+0x4a>
c001fb72:	83 ec 0c             	sub    esp,0xc
c001fb75:	68 43 2f 03 c0       	push   0xc0032f43
c001fb7a:	e8 d6 98 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001fb7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb82:	e8 2b ff ff ff       	call   c001fab2 <CPU::setupTSC()>
c001fb87:	83 c4 10             	add    esp,0x10
c001fb8a:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001fb91:	74 18                	je     c001fbab <CPU::setupFeatures()+0x6b>
c001fb93:	83 ec 0c             	sub    esp,0xc
c001fb96:	68 4c 2f 03 c0       	push   0xc0032f4c
c001fb9b:	e8 b5 98 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001fba0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fba3:	e8 14 ff ff ff       	call   c001fabc <CPU::setupLargePages()>
c001fba8:	83 c4 10             	add    esp,0x10
c001fbab:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001fbb2:	74 18                	je     c001fbcc <CPU::setupFeatures()+0x8c>
c001fbb4:	83 ec 0c             	sub    esp,0xc
c001fbb7:	68 55 2f 03 c0       	push   0xc0032f55
c001fbbc:	e8 94 98 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001fbc1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fbc4:	e8 3b ff ff ff       	call   c001fb04 <CPU::setupGlobalPages()>
c001fbc9:	83 c4 10             	add    esp,0x10
c001fbcc:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001fbd3:	74 18                	je     c001fbed <CPU::setupFeatures()+0xad>
c001fbd5:	83 ec 0c             	sub    esp,0xc
c001fbd8:	68 67 2f 03 c0       	push   0xc0032f67
c001fbdd:	e8 73 98 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001fbe2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fbe5:	e8 dc fe ff ff       	call   c001fac6 <CPU::setupPAT()>
c001fbea:	83 c4 10             	add    esp,0x10
c001fbed:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001fbf4:	74 11                	je     c001fc07 <CPU::setupFeatures()+0xc7>
c001fbf6:	c7 44 24 10 70 2f 03 c0 	mov    DWORD PTR [esp+0x10],0xc0032f70
c001fbfe:	83 c4 08             	add    esp,0x8
c001fc01:	5b                   	pop    ebx
c001fc02:	e9 4e 98 ff ff       	jmp    c0019455 <Dbg::kprintf(char const*, ...)>
c001fc07:	83 c4 08             	add    esp,0x8
c001fc0a:	5b                   	pop    ebx
c001fc0b:	c3                   	ret    

c001fc0c <CPU::open(int, int, void*)>:
c001fc0c:	55                   	push   ebp
c001fc0d:	57                   	push   edi
c001fc0e:	56                   	push   esi
c001fc0f:	53                   	push   ebx
c001fc10:	83 ec 18             	sub    esp,0x18
c001fc13:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001fc17:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001fc1b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001fc1f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001fc25:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001fc2b:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c001fc31:	50                   	push   eax
c001fc32:	e8 1d 62 ff ff       	call   c0015e54 <GDT::setup()>
c001fc37:	83 c4 0c             	add    esp,0xc
c001fc3a:	6a 00                	push   0x0
c001fc3c:	68 ef be ad de       	push   0xdeadbeef
c001fc41:	55                   	push   ebp
c001fc42:	e8 51 7e ff ff       	call   c0017a98 <TSS::setup(unsigned long, unsigned long)>
c001fc47:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001fc4a:	e8 29 7e ff ff       	call   c0017a78 <TSS::flush()>
c001fc4f:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001fc55:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc58:	e8 59 64 ff ff       	call   c00160b6 <IDT::setup()>
c001fc5d:	b8 00 04 00 00       	mov    eax,0x400
c001fc62:	0f 23 f8             	mov    db7,eax
c001fc65:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001fc6f:	e8 5c 6c ff ff       	call   c00168d0 <Phys::allocatePage()>
c001fc74:	83 c4 10             	add    esp,0x10
c001fc77:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001fc7d:	85 f6                	test   esi,esi
c001fc7f:	89 38                	mov    DWORD PTR [eax],edi
c001fc81:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fc87:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001fc8a:	74 10                	je     c001fc9c <CPU::open(int, int, void*)+0x90>
c001fc8c:	50                   	push   eax
c001fc8d:	50                   	push   eax
c001fc8e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc94:	56                   	push   esi
c001fc95:	e8 24 87 ff ff       	call   c00183be <VAS::setCPUSpecific(unsigned long)>
c001fc9a:	eb 0d                	jmp    c001fca9 <CPU::open(int, int, void*)+0x9d>
c001fc9c:	83 ec 0c             	sub    esp,0xc
c001fc9f:	68 7a 2f 03 c0       	push   0xc0032f7a
c001fca4:	e8 e5 0a 00 00       	call   c002078e <KePanic(char const*)>
c001fca9:	83 c4 10             	add    esp,0x10
c001fcac:	83 ec 0c             	sub    esp,0xc
c001fcaf:	68 88 2f 03 c0       	push   0xc0032f88
c001fcb4:	e8 8e 01 00 00       	call   c001fe47 <KeSetBootMessage(char const*)>
c001fcb9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fcbc:	e8 07 f7 ff ff       	call   c001f3c8 <CPU::detectFeatures()>
c001fcc1:	c7 04 24 ab 2f 03 c0 	mov    DWORD PTR [esp],0xc0032fab
c001fcc8:	e8 7a 01 00 00       	call   c001fe47 <KeSetBootMessage(char const*)>
c001fccd:	e8 cc 79 00 00       	call   c002769e <HalInitialise()>
c001fcd2:	a1 d4 b9 03 c0       	mov    eax,ds:0xc003b9d4
c001fcd7:	83 e0 10             	and    eax,0x10
c001fcda:	83 f8 01             	cmp    eax,0x1
c001fcdd:	19 c0                	sbb    eax,eax
c001fcdf:	83 e0 46             	and    eax,0x46
c001fce2:	83 c0 1e             	add    eax,0x1e
c001fce5:	89 04 24             	mov    DWORD PTR [esp],eax
c001fce8:	e8 5c d3 ff ff       	call   c001d049 <setupTimer(int)>
c001fced:	83 c4 10             	add    esp,0x10
c001fcf0:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001fcf6:	f6 05 d4 b9 03 c0 20 	test   BYTE PTR ds:0xc003b9d4,0x20
c001fcfd:	74 0c                	je     c001fd0b <CPU::open(int, int, void*)+0xff>
c001fcff:	83 ec 0c             	sub    esp,0xc
c001fd02:	53                   	push   ebx
c001fd03:	e8 38 fe ff ff       	call   c001fb40 <CPU::setupFeatures()>
c001fd08:	83 c4 10             	add    esp,0x10
c001fd0b:	83 c4 0c             	add    esp,0xc
c001fd0e:	31 c0                	xor    eax,eax
c001fd10:	5b                   	pop    ebx
c001fd11:	5e                   	pop    esi
c001fd12:	5f                   	pop    edi
c001fd13:	5d                   	pop    ebp
c001fd14:	c3                   	ret    

c001fd15 <KeInitialiseAtexit()>:
c001fd15:	83 ec 10             	sub    esp,0x10
c001fd18:	c7 05 a0 08 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00408a0,0x0
c001fd22:	6a 60                	push   0x60
c001fd24:	6a 00                	push   0x0
c001fd26:	68 20 09 04 c0       	push   0xc0040920
c001fd2b:	e8 c0 07 fe ff       	call   c00004f0 <memset>
c001fd30:	83 c4 1c             	add    esp,0x1c
c001fd33:	c3                   	ret    

c001fd34 <KeRegisterAtexit(void (*)(void*), void*)>:
c001fd34:	a1 a0 08 04 c0       	mov    eax,ds:0xc00408a0
c001fd39:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fd3d:	89 14 85 20 09 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf6e0],edx
c001fd44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fd48:	89 14 85 c0 08 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf740],edx
c001fd4f:	40                   	inc    eax
c001fd50:	a3 a0 08 04 c0       	mov    ds:0xc00408a0,eax
c001fd55:	83 f8 17             	cmp    eax,0x17
c001fd58:	7e 0d                	jle    c001fd67 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c001fd5a:	c7 44 24 04 ec 2f 03 c0 	mov    DWORD PTR [esp+0x4],0xc0032fec
c001fd62:	e9 27 0a 00 00       	jmp    c002078e <KePanic(char const*)>
c001fd67:	c3                   	ret    

c001fd68 <KeExecuteAtexit()>:
c001fd68:	53                   	push   ebx
c001fd69:	31 db                	xor    ebx,ebx
c001fd6b:	83 ec 08             	sub    esp,0x8
c001fd6e:	39 1d a0 08 04 c0    	cmp    DWORD PTR ds:0xc00408a0,ebx
c001fd74:	7e 50                	jle    c001fdc6 <KeExecuteAtexit()+0x5e>
c001fd76:	8b 04 9d 20 09 04 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffbf6e0]
c001fd7d:	85 c0                	test   eax,eax
c001fd7f:	74 42                	je     c001fdc3 <KeExecuteAtexit()+0x5b>
c001fd81:	51                   	push   ecx
c001fd82:	50                   	push   eax
c001fd83:	53                   	push   ebx
c001fd84:	68 05 30 03 c0       	push   0xc0033005
c001fd89:	e8 c7 96 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001fd8e:	58                   	pop    eax
c001fd8f:	ff 34 9d c0 08 04 c0 	push   DWORD PTR [ebx*4-0x3ffbf740]
c001fd96:	ff 14 9d 20 09 04 c0 	call   DWORD PTR [ebx*4-0x3ffbf6e0]
c001fd9d:	c7 04 24 27 30 03 c0 	mov    DWORD PTR [esp],0xc0033027
c001fda4:	e8 ac 96 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001fda9:	c7 04 24 53 42 03 c0 	mov    DWORD PTR [esp],0xc0034253
c001fdb0:	c7 04 9d 20 09 04 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffbf6e0],0x0
c001fdbb:	e8 95 96 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001fdc0:	83 c4 10             	add    esp,0x10
c001fdc3:	43                   	inc    ebx
c001fdc4:	eb a8                	jmp    c001fd6e <KeExecuteAtexit()+0x6>
c001fdc6:	83 c4 08             	add    esp,0x8
c001fdc9:	5b                   	pop    ebx
c001fdca:	c3                   	ret    

c001fdcb <KeDisplaySplashScreen()>:
c001fdcb:	55                   	push   ebp
c001fdcc:	bd 05 00 00 00       	mov    ebp,0x5
c001fdd1:	57                   	push   edi
c001fdd2:	bf 0a 00 00 00       	mov    edi,0xa
c001fdd7:	56                   	push   esi
c001fdd8:	31 f6                	xor    esi,esi
c001fdda:	53                   	push   ebx
c001fddb:	31 db                	xor    ebx,ebx
c001fddd:	83 ec 0c             	sub    esp,0xc
c001fde0:	0f b6 96 c0 44 03 c0 	movzx  edx,BYTE PTR [esi-0x3ffcbb40]
c001fde7:	89 d0                	mov    eax,edx
c001fde9:	85 d2                	test   edx,edx
c001fdeb:	74 52                	je     c001fe3f <KeDisplaySplashScreen()+0x74>
c001fded:	80 bb f6 44 03 c0 db 	cmp    BYTE PTR [ebx-0x3ffcbb0a],0xdb
c001fdf4:	75 13                	jne    c001fe09 <KeDisplaySplashScreen()+0x3e>
c001fdf6:	0f b6 8b f5 44 03 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffcbb0b]
c001fdfd:	83 e1 fe             	and    ecx,0xfffffffe
c001fe00:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c001fe06:	75 01                	jne    c001fe09 <KeDisplaySplashScreen()+0x3e>
c001fe08:	47                   	inc    edi
c001fe09:	83 fa 0d             	cmp    edx,0xd
c001fe0c:	74 28                	je     c001fe36 <KeDisplaySplashScreen()+0x6b>
c001fe0e:	83 fa 0a             	cmp    edx,0xa
c001fe11:	75 0a                	jne    c001fe1d <KeDisplaySplashScreen()+0x52>
c001fe13:	45                   	inc    ebp
c001fe14:	bf 0a 00 00 00       	mov    edi,0xa
c001fe19:	31 db                	xor    ebx,ebx
c001fe1b:	eb 19                	jmp    c001fe36 <KeDisplaySplashScreen()+0x6b>
c001fe1d:	83 ec 0c             	sub    esp,0xc
c001fe20:	8d 14 1f             	lea    edx,[edi+ebx*1]
c001fe23:	55                   	push   ebp
c001fe24:	0f be c0             	movsx  eax,al
c001fe27:	52                   	push   edx
c001fe28:	43                   	inc    ebx
c001fe29:	6a 00                	push   0x0
c001fe2b:	6a 0e                	push   0xe
c001fe2d:	50                   	push   eax
c001fe2e:	e8 ed 84 00 00       	call   c0028320 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001fe33:	83 c4 20             	add    esp,0x20
c001fe36:	46                   	inc    esi
c001fe37:	81 fe 42 01 00 00    	cmp    esi,0x142
c001fe3d:	75 a1                	jne    c001fde0 <KeDisplaySplashScreen()+0x15>
c001fe3f:	83 c4 0c             	add    esp,0xc
c001fe42:	5b                   	pop    ebx
c001fe43:	5e                   	pop    esi
c001fe44:	5f                   	pop    edi
c001fe45:	5d                   	pop    ebp
c001fe46:	c3                   	ret    

c001fe47 <KeSetBootMessage(char const*)>:
c001fe47:	57                   	push   edi
c001fe48:	56                   	push   esi
c001fe49:	53                   	push   ebx
c001fe4a:	81 ec a4 00 00 00    	sub    esp,0xa4
c001fe50:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c001fe57:	68 9e 00 00 00       	push   0x9e
c001fe5c:	6a 00                	push   0x0
c001fe5e:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001fe62:	56                   	push   esi
c001fe63:	e8 88 06 fe ff       	call   c00004f0 <memset>
c001fe68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fe6b:	e8 00 07 fe ff       	call   c0000570 <strlen>
c001fe70:	ba 50 00 00 00       	mov    edx,0x50
c001fe75:	83 c4 10             	add    esp,0x10
c001fe78:	29 c2                	sub    edx,eax
c001fe7a:	31 c9                	xor    ecx,ecx
c001fe7c:	83 e2 fe             	and    edx,0xfffffffe
c001fe7f:	01 f2                	add    edx,esi
c001fe81:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c001fe86:	84 c0                	test   al,al
c001fe88:	74 0a                	je     c001fe94 <KeSetBootMessage(char const*)+0x4d>
c001fe8a:	80 cc 0f             	or     ah,0xf
c001fe8d:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001fe91:	41                   	inc    ecx
c001fe92:	eb ed                	jmp    c001fe81 <KeSetBootMessage(char const*)+0x3a>
c001fe94:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c001fe99:	b9 9e 00 00 00       	mov    ecx,0x9e
c001fe9e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fea0:	81 c4 a0 00 00 00    	add    esp,0xa0
c001fea6:	5b                   	pop    ebx
c001fea7:	5e                   	pop    esi
c001fea8:	5f                   	pop    edi
c001fea9:	c3                   	ret    
c001feaa:	66 90                	xchg   ax,ax

c001feac <CUnlockScheduler>:
c001feac:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001feb1:	83 e8 01             	sub    eax,0x1
c001feb4:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001feb9:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001febe:	85 c0                	test   eax,eax
c001fec0:	75 02                	jne    c001fec4 <CUnlockScheduler+0x18>
c001fec2:	fb                   	sti    
c001fec3:	90                   	nop
c001fec4:	90                   	nop
c001fec5:	c3                   	ret    
c001fec6:	66 90                	xchg   ax,ax

c001fec8 <CLockScheduler>:
c001fec8:	fa                   	cli    
c001fec9:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001fece:	83 c0 01             	add    eax,0x1
c001fed1:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001fed6:	90                   	nop
c001fed7:	c3                   	ret    

c001fed8 <CPrintf>:
c001fed8:	83 ec 0c             	sub    esp,0xc
c001fedb:	83 ec 08             	sub    esp,0x8
c001fede:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fee2:	68 90 01 03 c0       	push   0xc0030190
c001fee7:	e8 69 95 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c001feec:	83 c4 10             	add    esp,0x10
c001feef:	90                   	nop
c001fef0:	83 c4 0c             	add    esp,0xc
c001fef3:	c3                   	ret    

c001fef4 <Krnl::handlePowerButton()>:
c001fef4:	83 ec 0c             	sub    esp,0xc
c001fef7:	e8 ed 08 00 00       	call   c00207e9 <KeHandlePowerButton()>
c001fefc:	90                   	nop
c001fefd:	83 c4 0c             	add    esp,0xc
c001ff00:	c3                   	ret    
c001ff01:	8d 76 00             	lea    esi,[esi+0x0]

c001ff04 <Krnl::handleSleepButton()>:
c001ff04:	83 ec 0c             	sub    esp,0xc
c001ff07:	e8 12 09 00 00       	call   c002081e <KeHandleSleepButton()>
c001ff0c:	90                   	nop
c001ff0d:	83 c4 0c             	add    esp,0xc
c001ff10:	c3                   	ret    

c001ff11 <KeCalculateCRC32(unsigned char*, int)>:
c001ff11:	53                   	push   ebx
c001ff12:	83 c8 ff             	or     eax,0xffffffff
c001ff15:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ff19:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ff1d:	01 cb                	add    ebx,ecx
c001ff1f:	39 d9                	cmp    ecx,ebx
c001ff21:	74 15                	je     c001ff38 <KeCalculateCRC32(unsigned char*, int)+0x27>
c001ff23:	41                   	inc    ecx
c001ff24:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c001ff27:	31 c2                	xor    edx,eax
c001ff29:	c1 e8 08             	shr    eax,0x8
c001ff2c:	0f b6 d2             	movzx  edx,dl
c001ff2f:	33 04 95 20 46 03 c0 	xor    eax,DWORD PTR [edx*4-0x3ffcb9e0]
c001ff36:	eb e7                	jmp    c001ff1f <KeCalculateCRC32(unsigned char*, int)+0xe>
c001ff38:	f7 d0                	not    eax
c001ff3a:	5b                   	pop    ebx
c001ff3b:	c3                   	ret    

c001ff3c <EnvVarContainer::getEnv(char const*)>:
c001ff3c:	57                   	push   edi
c001ff3d:	56                   	push   esi
c001ff3e:	53                   	push   ebx
c001ff3f:	31 db                	xor    ebx,ebx
c001ff41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ff45:	39 1e                	cmp    DWORD PTR [esi],ebx
c001ff47:	7e 2b                	jle    c001ff74 <EnvVarContainer::getEnv(char const*)+0x38>
c001ff49:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001ff50:	50                   	push   eax
c001ff51:	50                   	push   eax
c001ff52:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001ff55:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001ff58:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ff5c:	e8 ef 07 fe ff       	call   c0000750 <strcmp>
c001ff61:	83 c4 10             	add    esp,0x10
c001ff64:	85 c0                	test   eax,eax
c001ff66:	75 09                	jne    c001ff71 <EnvVarContainer::getEnv(char const*)+0x35>
c001ff68:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001ff6b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001ff6f:	eb 05                	jmp    c001ff76 <EnvVarContainer::getEnv(char const*)+0x3a>
c001ff71:	43                   	inc    ebx
c001ff72:	eb d1                	jmp    c001ff45 <EnvVarContainer::getEnv(char const*)+0x9>
c001ff74:	31 c0                	xor    eax,eax
c001ff76:	5b                   	pop    ebx
c001ff77:	5e                   	pop    esi
c001ff78:	5f                   	pop    edi
c001ff79:	c3                   	ret    

c001ff7a <EnvVarContainer::setEnv(char const*, char const*)>:
c001ff7a:	55                   	push   ebp
c001ff7b:	57                   	push   edi
c001ff7c:	56                   	push   esi
c001ff7d:	53                   	push   ebx
c001ff7e:	83 ec 28             	sub    esp,0x28
c001ff81:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001ff85:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001ff89:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001ff8d:	56                   	push   esi
c001ff8e:	e8 dd 05 fe ff       	call   c0000570 <strlen>
c001ff93:	40                   	inc    eax
c001ff94:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff97:	e8 2b 66 ff ff       	call   c00165c7 <malloc>
c001ff9c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ff9f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ffa3:	e8 c8 05 fe ff       	call   c0000570 <strlen>
c001ffa8:	40                   	inc    eax
c001ffa9:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffac:	e8 16 66 ff ff       	call   c00165c7 <malloc>
c001ffb1:	89 34 24             	mov    DWORD PTR [esp],esi
c001ffb4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ffb8:	e8 b3 05 fe ff       	call   c0000570 <strlen>
c001ffbd:	83 c4 0c             	add    esp,0xc
c001ffc0:	40                   	inc    eax
c001ffc1:	50                   	push   eax
c001ffc2:	6a 00                	push   0x0
c001ffc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ffc8:	e8 23 05 fe ff       	call   c00004f0 <memset>
c001ffcd:	89 34 24             	mov    DWORD PTR [esp],esi
c001ffd0:	e8 9b 05 fe ff       	call   c0000570 <strlen>
c001ffd5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ffd9:	8d 48 01             	lea    ecx,[eax+0x1]
c001ffdc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ffde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ffe1:	89 de                	mov    esi,ebx
c001ffe3:	e8 88 05 fe ff       	call   c0000570 <strlen>
c001ffe8:	83 c4 0c             	add    esp,0xc
c001ffeb:	40                   	inc    eax
c001ffec:	50                   	push   eax
c001ffed:	6a 00                	push   0x0
c001ffef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fff3:	e8 f8 04 fe ff       	call   c00004f0 <memset>
c001fff8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fffb:	e8 70 05 fe ff       	call   c0000570 <strlen>
c0020000:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020004:	8d 48 01             	lea    ecx,[eax+0x1]
c0020007:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020009:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002000c:	40                   	inc    eax
c002000d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0020010:	c1 e0 03             	shl    eax,0x3
c0020013:	5a                   	pop    edx
c0020014:	59                   	pop    ecx
c0020015:	50                   	push   eax
c0020016:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0020019:	e8 95 65 ff ff       	call   c00165b3 <realloc>
c002001e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0020022:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0020025:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0020028:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c002002c:	b9 08 00 00 00       	mov    ecx,0x8
c0020031:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020033:	83 c4 2c             	add    esp,0x2c
c0020036:	5b                   	pop    ebx
c0020037:	5e                   	pop    esi
c0020038:	5f                   	pop    edi
c0020039:	5d                   	pop    ebp
c002003a:	c3                   	ret    
c002003b:	90                   	nop

c002003c <EnvVarContainer::deleteEnv(char const*)>:
c002003c:	c3                   	ret    
c002003d:	90                   	nop

c002003e <EnvVarContainer::loadFrom(char const*, char const*)>:
c002003e:	55                   	push   ebp
c002003f:	57                   	push   edi
c0020040:	56                   	push   esi
c0020041:	53                   	push   ebx
c0020042:	81 ec 38 01 00 00    	sub    esp,0x138
c0020048:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c002004f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0020056:	68 14 01 00 00       	push   0x114
c002005b:	e8 67 65 ff ff       	call   c00165c7 <malloc>
c0020060:	83 c4 0c             	add    esp,0xc
c0020063:	89 c3                	mov    ebx,eax
c0020065:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020068:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002006f:	50                   	push   eax
c0020070:	e8 e7 a5 ff ff       	call   c001a65c <File::File(char const*, Process*)>
c0020075:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020078:	e8 c1 a8 ff ff       	call   c001a93e <File::exists()>
c002007d:	83 c4 10             	add    esp,0x10
c0020080:	84 c0                	test   al,al
c0020082:	75 31                	jne    c00200b5 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0020084:	50                   	push   eax
c0020085:	50                   	push   eax
c0020086:	6a 12                	push   0x12
c0020088:	53                   	push   ebx
c0020089:	e8 ec a5 ff ff       	call   c001a67a <File::open(FileOpenMode)>
c002008e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020090:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0020093:	89 34 24             	mov    DWORD PTR [esp],esi
c0020096:	e8 d5 04 fe ff       	call   c0000570 <strlen>
c002009b:	5a                   	pop    edx
c002009c:	31 d2                	xor    edx,edx
c002009e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00200a2:	51                   	push   ecx
c00200a3:	56                   	push   esi
c00200a4:	52                   	push   edx
c00200a5:	50                   	push   eax
c00200a6:	53                   	push   ebx
c00200a7:	ff d7                	call   edi
c00200a9:	83 c4 14             	add    esp,0x14
c00200ac:	53                   	push   ebx
c00200ad:	e8 26 a6 ff ff       	call   c001a6d8 <File::close()>
c00200b2:	83 c4 10             	add    esp,0x10
c00200b5:	56                   	push   esi
c00200b6:	31 f6                	xor    esi,esi
c00200b8:	68 00 01 00 00       	push   0x100
c00200bd:	6a 00                	push   0x0
c00200bf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00200c3:	50                   	push   eax
c00200c4:	e8 27 04 fe ff       	call   c00004f0 <memset>
c00200c9:	5f                   	pop    edi
c00200ca:	58                   	pop    eax
c00200cb:	6a 01                	push   0x1
c00200cd:	53                   	push   ebx
c00200ce:	e8 a7 a5 ff ff       	call   c001a67a <File::open(FileOpenMode)>
c00200d3:	83 c4 10             	add    esp,0x10
c00200d6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00200de:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00200e6:	83 ec 0c             	sub    esp,0xc
c00200e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00200eb:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00200ef:	51                   	push   ecx
c00200f0:	8d 54 24 23          	lea    edx,[esp+0x23]
c00200f4:	52                   	push   edx
c00200f5:	6a 00                	push   0x0
c00200f7:	6a 01                	push   0x1
c00200f9:	53                   	push   ebx
c00200fa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00200fd:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0020102:	83 c4 20             	add    esp,0x20
c0020105:	89 c2                	mov    edx,eax
c0020107:	85 c0                	test   eax,eax
c0020109:	0f 84 36 01 00 00    	je     c0020245 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c002010f:	83 f8 0d             	cmp    eax,0xd
c0020112:	0f 84 22 01 00 00    	je     c002023a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0020118:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002011d:	0f 84 f0 00 00 00    	je     c0020213 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0020123:	83 f8 0a             	cmp    eax,0xa
c0020126:	74 13                	je     c002013b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0020128:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002012d:	74 0c                	je     c002013b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c002012f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0020135:	0f 8e f6 00 00 00    	jle    c0020231 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c002013b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002013f:	83 ec 0c             	sub    esp,0xc
c0020142:	8d 78 01             	lea    edi,[eax+0x1]
c0020145:	57                   	push   edi
c0020146:	e8 7c 64 ff ff       	call   c00165c7 <malloc>
c002014b:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c002014f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0020153:	8d 56 04             	lea    edx,[esi+0x4]
c0020156:	89 14 24             	mov    DWORD PTR [esp],edx
c0020159:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002015d:	e8 65 64 ff ff       	call   c00165c7 <malloc>
c0020162:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0020166:	83 c4 0c             	add    esp,0xc
c0020169:	57                   	push   edi
c002016a:	6a 00                	push   0x0
c002016c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020170:	e8 7b 03 fe ff       	call   c00004f0 <memset>
c0020175:	8d 74 24 30          	lea    esi,[esp+0x30]
c0020179:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002017d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020181:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020183:	83 c4 0c             	add    esp,0xc
c0020186:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002018a:	52                   	push   edx
c002018b:	6a 00                	push   0x0
c002018d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020191:	e8 5a 03 fe ff       	call   c00004f0 <memset>
c0020196:	8d 74 24 30          	lea    esi,[esp+0x30]
c002019a:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c002019e:	89 34 24             	mov    DWORD PTR [esp],esi
c00201a1:	e8 ca 03 fe ff       	call   c0000570 <strlen>
c00201a6:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00201aa:	89 c1                	mov    ecx,eax
c00201ac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00201ae:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00201b1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00201b4:	40                   	inc    eax
c00201b5:	83 c4 10             	add    esp,0x10
c00201b8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00201bb:	85 d2                	test   edx,edx
c00201bd:	75 0c                	jne    c00201cb <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c00201bf:	83 ec 0c             	sub    esp,0xc
c00201c2:	6a 08                	push   0x8
c00201c4:	e8 fe 63 ff ff       	call   c00165c7 <malloc>
c00201c9:	eb 0c                	jmp    c00201d7 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c00201cb:	c1 e0 03             	shl    eax,0x3
c00201ce:	51                   	push   ecx
c00201cf:	51                   	push   ecx
c00201d0:	50                   	push   eax
c00201d1:	52                   	push   edx
c00201d2:	e8 dc 63 ff ff       	call   c00165b3 <realloc>
c00201d7:	83 c4 10             	add    esp,0x10
c00201da:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00201dd:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00201e0:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00201e3:	8d 74 24 18          	lea    esi,[esp+0x18]
c00201e7:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00201eb:	b9 08 00 00 00       	mov    ecx,0x8
c00201f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00201f2:	31 f6                	xor    esi,esi
c00201f4:	50                   	push   eax
c00201f5:	68 00 01 00 00       	push   0x100
c00201fa:	6a 00                	push   0x0
c00201fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0020200:	50                   	push   eax
c0020201:	e8 ea 02 fe ff       	call   c00004f0 <memset>
c0020206:	83 c4 10             	add    esp,0x10
c0020209:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020211:	eb 27                	jmp    c002023a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0020213:	83 f8 3d             	cmp    eax,0x3d
c0020216:	74 1e                	je     c0020236 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0020218:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002021e:	7f 07                	jg     c0020227 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0020220:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c0020224:	46                   	inc    esi
c0020225:	eb 13                	jmp    c002023a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0020227:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002022f:	eb 09                	jmp    c002023a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0020231:	83 f8 3d             	cmp    eax,0x3d
c0020234:	75 ea                	jne    c0020220 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0020236:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c002023a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002023f:	0f 85 99 fe ff ff    	jne    c00200de <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0020245:	83 ec 0c             	sub    esp,0xc
c0020248:	53                   	push   ebx
c0020249:	e8 8a a4 ff ff       	call   c001a6d8 <File::close()>
c002024e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020250:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020253:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0020256:	81 c4 3c 01 00 00    	add    esp,0x13c
c002025c:	5b                   	pop    ebx
c002025d:	5e                   	pop    esi
c002025e:	5f                   	pop    edi
c002025f:	5d                   	pop    ebp
c0020260:	c3                   	ret    
c0020261:	90                   	nop

c0020262 <EnvVarContainer::__loadSystem()>:
c0020262:	83 ec 10             	sub    esp,0x10
c0020265:	68 20 4a 03 c0       	push   0xc0034a20
c002026a:	68 2c 30 03 c0       	push   0xc003302c
c002026f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020273:	e8 c6 fd ff ff       	call   c002003e <EnvVarContainer::loadFrom(char const*, char const*)>
c0020278:	83 c4 1c             	add    esp,0x1c
c002027b:	c3                   	ret    

c002027c <EnvVarContainer::__loadUser()>:
c002027c:	c3                   	ret    
c002027d:	90                   	nop

c002027e <EnvVarContainer::EnvVarContainer(Process*)>:
c002027e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020282:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020288:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002028c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020290:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020297:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002029e:	90                   	nop
c002029f:	c3                   	ret    

c00202a0 <EnvVarContainer::~EnvVarContainer()>:
c00202a0:	83 ec 0c             	sub    esp,0xc
c00202a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00202aa:	85 c0                	test   eax,eax
c00202ac:	74 1d                	je     c00202cb <EnvVarContainer::~EnvVarContainer()+0x2b>
c00202ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00202b4:	85 c0                	test   eax,eax
c00202b6:	74 13                	je     c00202cb <EnvVarContainer::~EnvVarContainer()+0x2b>
c00202b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00202bf:	83 ec 0c             	sub    esp,0xc
c00202c2:	50                   	push   eax
c00202c3:	e8 0f 63 ff ff       	call   c00165d7 <free>
c00202c8:	83 c4 10             	add    esp,0x10
c00202cb:	90                   	nop
c00202cc:	83 c4 0c             	add    esp,0xc
c00202cf:	c3                   	ret    

c00202d0 <KeGetEnv(Process*, char const*)>:
c00202d0:	53                   	push   ebx
c00202d1:	83 ec 08             	sub    esp,0x8
c00202d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202d8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00202dc:	39 05 f8 11 04 c0    	cmp    DWORD PTR ds:0xc00411f8,eax
c00202e2:	74 04                	je     c00202e8 <KeGetEnv(Process*, char const*)+0x18>
c00202e4:	85 c0                	test   eax,eax
c00202e6:	75 0b                	jne    c00202f3 <KeGetEnv(Process*, char const*)+0x23>
c00202e8:	a1 80 09 04 c0       	mov    eax,ds:0xc0040980
c00202ed:	85 c0                	test   eax,eax
c00202ef:	75 19                	jne    c002030a <KeGetEnv(Process*, char const*)+0x3a>
c00202f1:	eb 27                	jmp    c002031a <KeGetEnv(Process*, char const*)+0x4a>
c00202f3:	52                   	push   edx
c00202f4:	52                   	push   edx
c00202f5:	53                   	push   ebx
c00202f6:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00202fc:	e8 3b fc ff ff       	call   c001ff3c <EnvVarContainer::getEnv(char const*)>
c0020301:	83 c4 10             	add    esp,0x10
c0020304:	85 c0                	test   eax,eax
c0020306:	75 28                	jne    c0020330 <KeGetEnv(Process*, char const*)+0x60>
c0020308:	eb de                	jmp    c00202e8 <KeGetEnv(Process*, char const*)+0x18>
c002030a:	52                   	push   edx
c002030b:	52                   	push   edx
c002030c:	53                   	push   ebx
c002030d:	50                   	push   eax
c002030e:	e8 29 fc ff ff       	call   c001ff3c <EnvVarContainer::getEnv(char const*)>
c0020313:	83 c4 10             	add    esp,0x10
c0020316:	85 c0                	test   eax,eax
c0020318:	75 16                	jne    c0020330 <KeGetEnv(Process*, char const*)+0x60>
c002031a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002031e:	a1 84 09 04 c0       	mov    eax,ds:0xc0040984
c0020323:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020327:	83 c4 08             	add    esp,0x8
c002032a:	5b                   	pop    ebx
c002032b:	e9 0c fc ff ff       	jmp    c001ff3c <EnvVarContainer::getEnv(char const*)>
c0020330:	83 c4 08             	add    esp,0x8
c0020333:	5b                   	pop    ebx
c0020334:	c3                   	ret    

c0020335 <KeSetEnvSystem(char const*, char const*)>:
c0020335:	83 ec 10             	sub    esp,0x10
c0020338:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002033c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020340:	ff 35 84 09 04 c0    	push   DWORD PTR ds:0xc0040984
c0020346:	e8 2f fc ff ff       	call   c001ff7a <EnvVarContainer::setEnv(char const*, char const*)>
c002034b:	83 c4 1c             	add    esp,0x1c
c002034e:	c3                   	ret    

c002034f <KeSetEnvUser(char const*, char const*)>:
c002034f:	a1 80 09 04 c0       	mov    eax,ds:0xc0040980
c0020354:	85 c0                	test   eax,eax
c0020356:	74 15                	je     c002036d <KeSetEnvUser(char const*, char const*)+0x1e>
c0020358:	83 ec 10             	sub    esp,0x10
c002035b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002035f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020363:	50                   	push   eax
c0020364:	e8 11 fc ff ff       	call   c001ff7a <EnvVarContainer::setEnv(char const*, char const*)>
c0020369:	83 c4 1c             	add    esp,0x1c
c002036c:	c3                   	ret    
c002036d:	c3                   	ret    

c002036e <KeSetEnvProcess(Process*, char const*, char const*)>:
c002036e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020372:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0020378:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002037c:	e9 f9 fb ff ff       	jmp    c001ff7a <EnvVarContainer::setEnv(char const*, char const*)>

c0020381 <KeDeleteEnvSystem(char const*)>:
c0020381:	c3                   	ret    

c0020382 <KeDeleteEnvUser(char const*)>:
c0020382:	c3                   	ret    

c0020383 <KeDeleteEnvProcess(Process*, char const*)>:
c0020383:	c3                   	ret    

c0020384 <KeNewProcessEnv(Process*)>:
c0020384:	83 ec 28             	sub    esp,0x28
c0020387:	6a 0c                	push   0xc
c0020389:	e8 39 62 ff ff       	call   c00165c7 <malloc>
c002038e:	5a                   	pop    edx
c002038f:	59                   	pop    ecx
c0020390:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020394:	50                   	push   eax
c0020395:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020399:	e8 e0 fe ff ff       	call   c002027e <EnvVarContainer::EnvVarContainer(Process*)>
c002039e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00203a2:	83 c4 2c             	add    esp,0x2c
c00203a5:	c3                   	ret    

c00203a6 <KeCopyProcessEnv(Process*, Process*)>:
c00203a6:	57                   	push   edi
c00203a7:	56                   	push   esi
c00203a8:	53                   	push   ebx
c00203a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203ad:	83 ec 0c             	sub    esp,0xc
c00203b0:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00203b6:	6a 0c                	push   0xc
c00203b8:	e8 0a 62 ff ff       	call   c00165c7 <malloc>
c00203bd:	89 c3                	mov    ebx,eax
c00203bf:	58                   	pop    eax
c00203c0:	5a                   	pop    edx
c00203c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203c5:	53                   	push   ebx
c00203c6:	e8 b3 fe ff ff       	call   c002027e <EnvVarContainer::EnvVarContainer(Process*)>
c00203cb:	8b 07                	mov    eax,DWORD PTR [edi]
c00203cd:	89 03                	mov    DWORD PTR [ebx],eax
c00203cf:	c1 e0 03             	shl    eax,0x3
c00203d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00203d5:	e8 ed 61 ff ff       	call   c00165c7 <malloc>
c00203da:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00203dd:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00203df:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00203e2:	c1 e1 03             	shl    ecx,0x3
c00203e5:	89 c7                	mov    edi,eax
c00203e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00203e9:	83 c4 10             	add    esp,0x10
c00203ec:	89 d8                	mov    eax,ebx
c00203ee:	5b                   	pop    ebx
c00203ef:	5e                   	pop    esi
c00203f0:	5f                   	pop    edi
c00203f1:	c3                   	ret    

c00203f2 <KeLoadSystemEnv()>:
c00203f2:	53                   	push   ebx
c00203f3:	83 ec 14             	sub    esp,0x14
c00203f6:	6a 0c                	push   0xc
c00203f8:	e8 ca 61 ff ff       	call   c00165c7 <malloc>
c00203fd:	89 c3                	mov    ebx,eax
c00203ff:	58                   	pop    eax
c0020400:	5a                   	pop    edx
c0020401:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0020407:	53                   	push   ebx
c0020408:	e8 71 fe ff ff       	call   c002027e <EnvVarContainer::EnvVarContainer(Process*)>
c002040d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020410:	89 1d 84 09 04 c0    	mov    DWORD PTR ds:0xc0040984,ebx
c0020416:	e8 47 fe ff ff       	call   c0020262 <EnvVarContainer::__loadSystem()>
c002041b:	83 c4 18             	add    esp,0x18
c002041e:	5b                   	pop    ebx
c002041f:	c3                   	ret    

c0020420 <KeLoadUserEnv()>:
c0020420:	53                   	push   ebx
c0020421:	83 ec 14             	sub    esp,0x14
c0020424:	6a 0c                	push   0xc
c0020426:	e8 9c 61 ff ff       	call   c00165c7 <malloc>
c002042b:	89 c3                	mov    ebx,eax
c002042d:	58                   	pop    eax
c002042e:	5a                   	pop    edx
c002042f:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0020435:	53                   	push   ebx
c0020436:	e8 43 fe ff ff       	call   c002027e <EnvVarContainer::EnvVarContainer(Process*)>
c002043b:	89 1d 80 09 04 c0    	mov    DWORD PTR ds:0xc0040980,ebx
c0020441:	83 c4 18             	add    esp,0x18
c0020444:	5b                   	pop    ebx
c0020445:	c3                   	ret    

c0020446 <KeFlushEnv()>:
c0020446:	c3                   	ret    

c0020447 <KeGetProcessTotalEnvCount(Process*)>:
c0020447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002044b:	8b 15 80 09 04 c0    	mov    edx,DWORD PTR ds:0xc0040980
c0020451:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0020457:	a1 84 09 04 c0       	mov    eax,ds:0xc0040984
c002045c:	8b 00                	mov    eax,DWORD PTR [eax]
c002045e:	03 01                	add    eax,DWORD PTR [ecx]
c0020460:	85 d2                	test   edx,edx
c0020462:	74 02                	je     c0020466 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0020464:	03 02                	add    eax,DWORD PTR [edx]
c0020466:	c3                   	ret    

c0020467 <KeGetProcessEnvPair(Process*, int)>:
c0020467:	57                   	push   edi
c0020468:	56                   	push   esi
c0020469:	8b 35 80 09 04 c0    	mov    esi,DWORD PTR ds:0xc0040980
c002046f:	53                   	push   ebx
c0020470:	85 f6                	test   esi,esi
c0020472:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020476:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002047a:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0020480:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020484:	8b 01                	mov    eax,DWORD PTR [ecx]
c0020486:	75 16                	jne    c002049e <KeGetProcessEnvPair(Process*, int)+0x37>
c0020488:	39 c2                	cmp    edx,eax
c002048a:	7c 16                	jl     c00204a2 <KeGetProcessEnvPair(Process*, int)+0x3b>
c002048c:	8b 0d 84 09 04 c0    	mov    ecx,DWORD PTR ds:0xc0040984
c0020492:	8b 31                	mov    esi,DWORD PTR [ecx]
c0020494:	01 c6                	add    esi,eax
c0020496:	39 d6                	cmp    esi,edx
c0020498:	7e 3c                	jle    c00204d6 <KeGetProcessEnvPair(Process*, int)+0x6f>
c002049a:	29 c2                	sub    edx,eax
c002049c:	eb 04                	jmp    c00204a2 <KeGetProcessEnvPair(Process*, int)+0x3b>
c002049e:	39 c2                	cmp    edx,eax
c00204a0:	7d 05                	jge    c00204a7 <KeGetProcessEnvPair(Process*, int)+0x40>
c00204a2:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00204a5:	eb 20                	jmp    c00204c7 <KeGetProcessEnvPair(Process*, int)+0x60>
c00204a7:	8b 3e                	mov    edi,DWORD PTR [esi]
c00204a9:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00204ac:	39 d1                	cmp    ecx,edx
c00204ae:	7e 04                	jle    c00204b4 <KeGetProcessEnvPair(Process*, int)+0x4d>
c00204b0:	29 c2                	sub    edx,eax
c00204b2:	eb 10                	jmp    c00204c4 <KeGetProcessEnvPair(Process*, int)+0x5d>
c00204b4:	8b 35 84 09 04 c0    	mov    esi,DWORD PTR ds:0xc0040984
c00204ba:	03 0e                	add    ecx,DWORD PTR [esi]
c00204bc:	39 d1                	cmp    ecx,edx
c00204be:	7e 16                	jle    c00204d6 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00204c0:	29 c2                	sub    edx,eax
c00204c2:	29 fa                	sub    edx,edi
c00204c4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00204c7:	8d 14 d0             	lea    edx,[eax+edx*8]
c00204ca:	8b 02                	mov    eax,DWORD PTR [edx]
c00204cc:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00204cf:	89 03                	mov    DWORD PTR [ebx],eax
c00204d1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00204d4:	eb 1d                	jmp    c00204f3 <KeGetProcessEnvPair(Process*, int)+0x8c>
c00204d6:	83 ec 0c             	sub    esp,0xc
c00204d9:	68 4e 30 03 c0       	push   0xc003304e
c00204de:	e8 ab 02 00 00       	call   c002078e <KePanic(char const*)>
c00204e3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00204e9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00204f0:	83 c4 10             	add    esp,0x10
c00204f3:	89 d8                	mov    eax,ebx
c00204f5:	5b                   	pop    ebx
c00204f6:	5e                   	pop    esi
c00204f7:	5f                   	pop    edi
c00204f8:	c2 04 00             	ret    0x4

c00204fb <CPU::current()>:
c00204fb:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0020500:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020506:	c3                   	ret    

c0020507 <operator new(unsigned long)>:
c0020507:	e9 bb 60 ff ff       	jmp    c00165c7 <malloc>

c002050c <operator delete(void*)>:
c002050c:	e9 d6 60 ff ff       	jmp    c00165e7 <rfree>

c0020511 <disableIRQs()>:
c0020511:	fa                   	cli    
c0020512:	c3                   	ret    

c0020513 <enableIRQs()>:
c0020513:	fb                   	sti    
c0020514:	c3                   	ret    

c0020515 <lockScheduler()>:
c0020515:	fa                   	cli    
c0020516:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c002051c:	c3                   	ret    

c002051d <unlockScheduler()>:
c002051d:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020522:	48                   	dec    eax
c0020523:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020528:	75 01                	jne    c002052b <unlockScheduler()+0xe>
c002052a:	fb                   	sti    
c002052b:	c3                   	ret    

c002052c <lockStuff()>:
c002052c:	fa                   	cli    
c002052d:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c0020533:	ff 05 cc 11 04 c0    	inc    DWORD PTR ds:0xc00411cc
c0020539:	c3                   	ret    

c002053a <unlockStuff()>:
c002053a:	83 ec 0c             	sub    esp,0xc
c002053d:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020542:	48                   	dec    eax
c0020543:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020548:	75 18                	jne    c0020562 <unlockStuff()+0x28>
c002054a:	83 3d c8 11 04 c0 00 	cmp    DWORD PTR ds:0xc00411c8,0x0
c0020551:	74 0f                	je     c0020562 <unlockStuff()+0x28>
c0020553:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c002055d:	e8 3a 52 00 00       	call   c002579c <schedule()>
c0020562:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020567:	48                   	dec    eax
c0020568:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002056d:	75 01                	jne    c0020570 <unlockStuff()+0x36>
c002056f:	fb                   	sti    
c0020570:	83 c4 0c             	add    esp,0xc
c0020573:	c3                   	ret    

c0020574 <Virt::getAKernelVAS()>:
c0020574:	a1 b0 ba 03 c0       	mov    eax,ds:0xc003bab0
c0020579:	c3                   	ret    

c002057a <__not_memcpy>:
c002057a:	57                   	push   edi
c002057b:	56                   	push   esi
c002057c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020580:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020584:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020588:	89 c7                	mov    edi,eax
c002058a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002058c:	5e                   	pop    esi
c002058d:	5f                   	pop    edi
c002058e:	c3                   	ret    
c002058f:	90                   	nop

c0020590 <KeMailboxTryPost(Mailbox*, void*)>:
c0020590:	83 ec 10             	sub    esp,0x10
c0020593:	fa                   	cli    
c0020594:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020599:	83 c0 01             	add    eax,0x1
c002059c:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00205a1:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00205a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00205aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00205ad:	85 c0                	test   eax,eax
c00205af:	75 23                	jne    c00205d4 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c00205b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00205b5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00205b9:	89 10                	mov    DWORD PTR [eax],edx
c00205bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00205bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00205c2:	8d 50 01             	lea    edx,[eax+0x1]
c00205c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00205c9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00205cc:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00205d1:	8d 76 00             	lea    esi,[esi+0x0]
c00205d4:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00205d9:	83 e8 01             	sub    eax,0x1
c00205dc:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00205e1:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00205e6:	85 c0                	test   eax,eax
c00205e8:	75 02                	jne    c00205ec <KeMailboxTryPost(Mailbox*, void*)+0x5c>
c00205ea:	fb                   	sti    
c00205eb:	90                   	nop
c00205ec:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00205f0:	83 c4 10             	add    esp,0x10
c00205f3:	c3                   	ret    

c00205f4 <KeMailboxTryGet(Mailbox*, void**)>:
c00205f4:	83 ec 10             	sub    esp,0x10
c00205f7:	fa                   	cli    
c00205f8:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00205fd:	83 c0 01             	add    eax,0x1
c0020600:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020605:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002060a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002060e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020611:	83 f8 01             	cmp    eax,0x1
c0020614:	75 22                	jne    c0020638 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c0020616:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002061a:	8b 10                	mov    edx,DWORD PTR [eax]
c002061c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020620:	89 10                	mov    DWORD PTR [eax],edx
c0020622:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020626:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020629:	8d 50 ff             	lea    edx,[eax-0x1]
c002062c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020630:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020633:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0020638:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002063d:	83 e8 01             	sub    eax,0x1
c0020640:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020645:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002064a:	85 c0                	test   eax,eax
c002064c:	75 02                	jne    c0020650 <KeMailboxTryGet(Mailbox*, void**)+0x5c>
c002064e:	fb                   	sti    
c002064f:	90                   	nop
c0020650:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0020654:	83 c4 10             	add    esp,0x10
c0020657:	c3                   	ret    

c0020658 <KeMailboxCreate()>:
c0020658:	83 ec 1c             	sub    esp,0x1c
c002065b:	83 ec 0c             	sub    esp,0xc
c002065e:	6a 08                	push   0x8
c0020660:	e8 62 5f ff ff       	call   c00165c7 <malloc>
c0020665:	83 c4 10             	add    esp,0x10
c0020668:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002066c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020670:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020676:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002067a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020681:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020685:	83 c4 1c             	add    esp,0x1c
c0020688:	c3                   	ret    
c0020689:	8d 76 00             	lea    esi,[esi+0x0]

c002068c <KeMailboxPost(Mailbox*, void*)>:
c002068c:	83 ec 1c             	sub    esp,0x1c
c002068f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0020694:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020698:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002069c:	e8 ef fe ff ff       	call   c0020590 <KeMailboxTryPost(Mailbox*, void*)>
c00206a1:	83 c4 08             	add    esp,0x8
c00206a4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00206a8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00206ac:	83 f0 01             	xor    eax,0x1
c00206af:	0f b6 c0             	movzx  eax,al
c00206b2:	85 c0                	test   eax,eax
c00206b4:	74 2a                	je     c00206e0 <KeMailboxPost(Mailbox*, void*)+0x54>
c00206b6:	fa                   	cli    
c00206b7:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00206bc:	83 c0 01             	add    eax,0x1
c00206bf:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00206c4:	e8 d3 50 00 00       	call   c002579c <schedule()>
c00206c9:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00206ce:	83 e8 01             	sub    eax,0x1
c00206d1:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00206d6:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00206db:	85 c0                	test   eax,eax
c00206dd:	75 01                	jne    c00206e0 <KeMailboxPost(Mailbox*, void*)+0x54>
c00206df:	fb                   	sti    
c00206e0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00206e5:	85 c0                	test   eax,eax
c00206e7:	75 03                	jne    c00206ec <KeMailboxPost(Mailbox*, void*)+0x60>
c00206e9:	eb a9                	jmp    c0020694 <KeMailboxPost(Mailbox*, void*)+0x8>
c00206eb:	90                   	nop
c00206ec:	90                   	nop
c00206ed:	83 c4 1c             	add    esp,0x1c
c00206f0:	c3                   	ret    
c00206f1:	8d 76 00             	lea    esi,[esi+0x0]

c00206f4 <KeMailboxGet(Mailbox*, void**)>:
c00206f4:	83 ec 1c             	sub    esp,0x1c
c00206f7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00206fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020700:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020704:	e8 eb fe ff ff       	call   c00205f4 <KeMailboxTryGet(Mailbox*, void**)>
c0020709:	83 c4 08             	add    esp,0x8
c002070c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0020710:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0020714:	83 f0 01             	xor    eax,0x1
c0020717:	0f b6 c0             	movzx  eax,al
c002071a:	85 c0                	test   eax,eax
c002071c:	74 2a                	je     c0020748 <KeMailboxGet(Mailbox*, void**)+0x54>
c002071e:	fa                   	cli    
c002071f:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020724:	83 c0 01             	add    eax,0x1
c0020727:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002072c:	e8 6b 50 00 00       	call   c002579c <schedule()>
c0020731:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020736:	83 e8 01             	sub    eax,0x1
c0020739:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002073e:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020743:	85 c0                	test   eax,eax
c0020745:	75 01                	jne    c0020748 <KeMailboxGet(Mailbox*, void**)+0x54>
c0020747:	fb                   	sti    
c0020748:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002074d:	85 c0                	test   eax,eax
c002074f:	75 03                	jne    c0020754 <KeMailboxGet(Mailbox*, void**)+0x60>
c0020751:	eb a9                	jmp    c00206fc <KeMailboxGet(Mailbox*, void**)+0x8>
c0020753:	90                   	nop
c0020754:	90                   	nop
c0020755:	83 c4 1c             	add    esp,0x1c
c0020758:	c3                   	ret    
c0020759:	8d 76 00             	lea    esi,[esi+0x0]

c002075c <KeMailboxDestroy(Mailbox*)>:
c002075c:	83 ec 0c             	sub    esp,0xc
c002075f:	83 ec 0c             	sub    esp,0xc
c0020762:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020766:	e8 6c 5e ff ff       	call   c00165d7 <free>
c002076b:	83 c4 10             	add    esp,0x10
c002076e:	90                   	nop
c002076f:	83 c4 0c             	add    esp,0xc
c0020772:	c3                   	ret    
c0020773:	90                   	nop

c0020774 <Mutex::Mutex()>:
c0020774:	83 ec 0c             	sub    esp,0xc
c0020777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002077b:	83 ec 08             	sub    esp,0x8
c002077e:	6a 01                	push   0x1
c0020780:	50                   	push   eax
c0020781:	e8 b2 03 00 00       	call   c0020b38 <Semaphore::Semaphore(int)>
c0020786:	83 c4 10             	add    esp,0x10
c0020789:	90                   	nop
c002078a:	83 c4 0c             	add    esp,0xc
c002078d:	c3                   	ret    

c002078e <KePanic(char const*)>:
c002078e:	c6 05 88 09 04 c0 01 	mov    BYTE PTR ds:0xc0040988,0x1
c0020795:	e9 d5 6d 00 00       	jmp    c002756f <HalPanic(char const*)>

c002079a <KePowerThread(void*)>:
c002079a:	83 ec 0c             	sub    esp,0xc
c002079d:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00207a2:	48                   	dec    eax
c00207a3:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00207a8:	75 01                	jne    c00207ab <KePowerThread(void*)+0x11>
c00207aa:	fb                   	sti    
c00207ab:	83 ec 0c             	sub    esp,0xc
c00207ae:	c6 05 a0 09 04 c0 00 	mov    BYTE PTR ds:0xc00409a0,0x0
c00207b5:	6a 0a                	push   0xa
c00207b7:	e8 cc 51 00 00       	call   c0025988 <sleep(unsigned int)>
c00207bc:	83 05 e4 09 04 c0 0a 	add    DWORD PTR ds:0xc00409e4,0xa
c00207c3:	83 c4 10             	add    esp,0x10
c00207c6:	eb e3                	jmp    c00207ab <KePowerThread(void*)+0x11>

c00207c8 <KeChangePowerSettings(PowerSettings)>:
c00207c8:	57                   	push   edi
c00207c9:	b9 09 00 00 00       	mov    ecx,0x9
c00207ce:	56                   	push   esi
c00207cf:	bf c0 09 04 c0       	mov    edi,0xc00409c0
c00207d4:	fc                   	cld    
c00207d5:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00207d9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00207db:	5e                   	pop    esi
c00207dc:	5f                   	pop    edi
c00207dd:	c3                   	ret    

c00207de <KeUserIOReceived()>:
c00207de:	c7 05 e4 09 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00409e4,0x0
c00207e8:	c3                   	ret    

c00207e9 <KeHandlePowerButton()>:
c00207e9:	83 ec 0c             	sub    esp,0xc
c00207ec:	a1 c0 09 04 c0       	mov    eax,ds:0xc00409c0
c00207f1:	83 f8 02             	cmp    eax,0x2
c00207f4:	75 10                	jne    c0020806 <KeHandlePowerButton()+0x1d>
c00207f6:	83 ec 0c             	sub    esp,0xc
c00207f9:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c00207ff:	e8 ba 53 ff ff       	call   c0015bbe <Computer::shutdown()>
c0020804:	eb 11                	jmp    c0020817 <KeHandlePowerButton()+0x2e>
c0020806:	48                   	dec    eax
c0020807:	75 11                	jne    c002081a <KeHandlePowerButton()+0x31>
c0020809:	83 ec 0c             	sub    esp,0xc
c002080c:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0020812:	e8 d7 53 ff ff       	call   c0015bee <Computer::sleep()>
c0020817:	83 c4 10             	add    esp,0x10
c002081a:	83 c4 0c             	add    esp,0xc
c002081d:	c3                   	ret    

c002081e <KeHandleSleepButton()>:
c002081e:	83 ec 0c             	sub    esp,0xc
c0020821:	a1 c4 09 04 c0       	mov    eax,ds:0xc00409c4
c0020826:	83 f8 02             	cmp    eax,0x2
c0020829:	75 10                	jne    c002083b <KeHandleSleepButton()+0x1d>
c002082b:	83 ec 0c             	sub    esp,0xc
c002082e:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0020834:	e8 85 53 ff ff       	call   c0015bbe <Computer::shutdown()>
c0020839:	eb 11                	jmp    c002084c <KeHandleSleepButton()+0x2e>
c002083b:	48                   	dec    eax
c002083c:	75 11                	jne    c002084f <KeHandleSleepButton()+0x31>
c002083e:	83 ec 0c             	sub    esp,0xc
c0020841:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0020847:	e8 a2 53 ff ff       	call   c0015bee <Computer::sleep()>
c002084c:	83 c4 10             	add    esp,0x10
c002084f:	83 c4 0c             	add    esp,0xc
c0020852:	c3                   	ret    

c0020853 <KeSetupPowerManager()>:
c0020853:	83 ec 0c             	sub    esp,0xc
c0020856:	c7 05 e4 09 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00409e4,0x0
c0020860:	68 f0 00 00 00       	push   0xf0
c0020865:	c6 05 a0 09 04 c0 00 	mov    BYTE PTR ds:0xc00409a0,0x0
c002086c:	6a 00                	push   0x0
c002086e:	68 9a 07 02 c0       	push   0xc002079a
c0020873:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0020879:	e8 ce 4c 00 00       	call   c002554c <Process::createThread(void (*)(void*), void*, int)>
c002087e:	c7 05 c0 09 04 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00409c0,0x2
c0020888:	c7 05 c4 09 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00409c4,0x1
c0020892:	c7 05 c8 09 04 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00409c8,0x3
c002089c:	c7 05 cc 09 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00409cc,0x0
c00208a6:	c7 05 d8 09 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00409d8,0x0
c00208b0:	c7 05 d0 09 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00409d0,0x0
c00208ba:	c7 05 dc 09 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00409dc,0x0
c00208c4:	c7 05 d4 09 04 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00409d4,0x3c
c00208ce:	c7 05 e0 09 04 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00409e0,0x3c
c00208d8:	83 c4 1c             	add    esp,0x1c
c00208db:	c3                   	ret    

c00208dc <KeRand()>:
c00208dc:	69 05 e8 09 04 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc00409e8,0x2875
c00208e6:	69 0d ec 09 04 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc00409ec,0xa2e7b175
c00208f0:	53                   	push   ebx
c00208f1:	01 c1                	add    ecx,eax
c00208f3:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00208f8:	f7 25 e8 09 04 c0    	mul    DWORD PTR ds:0xc00409e8
c00208fe:	01 ca                	add    edx,ecx
c0020900:	05 ef 04 b5 00       	add    eax,0xb504ef
c0020905:	83 d2 00             	adc    edx,0x0
c0020908:	a3 e8 09 04 c0       	mov    ds:0xc00409e8,eax
c002090d:	0f b7 da             	movzx  ebx,dx
c0020910:	89 da                	mov    edx,ebx
c0020912:	89 1d ec 09 04 c0    	mov    DWORD PTR ds:0xc00409ec,ebx
c0020918:	0f ac d0 0e          	shrd   eax,edx,0xe
c002091c:	5b                   	pop    ebx
c002091d:	c3                   	ret    

c002091e <KeSeedRand(unsigned int)>:
c002091e:	53                   	push   ebx
c002091f:	83 ec 08             	sub    esp,0x8
c0020922:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020926:	e8 63 6f 00 00       	call   c002788e <HalGetRand()>
c002092b:	c7 05 ec 09 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00409ec,0x0
c0020935:	31 d8                	xor    eax,ebx
c0020937:	a3 e8 09 04 c0       	mov    ds:0xc00409e8,eax
c002093c:	e8 9b ff ff ff       	call   c00208dc <KeRand()>
c0020941:	83 c4 08             	add    esp,0x8
c0020944:	5b                   	pop    ebx
c0020945:	eb 95                	jmp    c00208dc <KeRand()>

c0020947 <KeInitRand()>:
c0020947:	83 ec 0c             	sub    esp,0xc
c002094a:	e8 34 6d 00 00       	call   c0027683 <HalQueryPerformanceCounter()>
c002094f:	0f 20 da             	mov    edx,cr3
c0020952:	0f 22 da             	mov    cr3,edx
c0020955:	0f 20 da             	mov    edx,cr3
c0020958:	0f 22 da             	mov    cr3,edx
c002095b:	0f 20 da             	mov    edx,cr3
c002095e:	0f 22 da             	mov    cr3,edx
c0020961:	0f 20 da             	mov    edx,cr3
c0020964:	0f 22 da             	mov    cr3,edx
c0020967:	83 ec 0c             	sub    esp,0xc
c002096a:	35 03 8a 95 38       	xor    eax,0x38958a03
c002096f:	50                   	push   eax
c0020970:	e8 a9 ff ff ff       	call   c002091e <KeSeedRand(unsigned int)>
c0020975:	83 c4 1c             	add    esp,0x1c
c0020978:	c3                   	ret    
c0020979:	66 90                	xchg   ax,ax
c002097b:	90                   	nop

c002097c <KeResolveCompatibilitySymbol(char*)>:
c002097c:	83 ec 0c             	sub    esp,0xc
c002097f:	83 ec 08             	sub    esp,0x8
c0020982:	68 68 30 03 c0       	push   0xc0033068
c0020987:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002098b:	e8 c0 fd fd ff       	call   c0000750 <strcmp>
c0020990:	83 c4 10             	add    esp,0x10
c0020993:	85 c0                	test   eax,eax
c0020995:	0f 94 c0             	sete   al
c0020998:	0f b6 c0             	movzx  eax,al
c002099b:	85 c0                	test   eax,eax
c002099d:	74 0d                	je     c00209ac <KeResolveCompatibilitySymbol(char*)+0x30>
c002099f:	b8 bc b9 03 c0       	mov    eax,0xc003b9bc
c00209a4:	e9 8b 01 00 00       	jmp    c0020b34 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00209a9:	8d 76 00             	lea    esi,[esi+0x0]
c00209ac:	83 ec 08             	sub    esp,0x8
c00209af:	68 71 30 03 c0       	push   0xc0033071
c00209b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209b8:	e8 93 fd fd ff       	call   c0000750 <strcmp>
c00209bd:	83 c4 10             	add    esp,0x10
c00209c0:	85 c0                	test   eax,eax
c00209c2:	0f 94 c0             	sete   al
c00209c5:	0f b6 c0             	movzx  eax,al
c00209c8:	85 c0                	test   eax,eax
c00209ca:	74 0c                	je     c00209d8 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00209cc:	b8 e0 ec 02 c0       	mov    eax,0xc002ece0
c00209d1:	e9 5e 01 00 00       	jmp    c0020b34 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00209d6:	66 90                	xchg   ax,ax
c00209d8:	83 ec 08             	sub    esp,0x8
c00209db:	68 7b 30 03 c0       	push   0xc003307b
c00209e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209e4:	e8 67 fd fd ff       	call   c0000750 <strcmp>
c00209e9:	83 c4 10             	add    esp,0x10
c00209ec:	85 c0                	test   eax,eax
c00209ee:	0f 94 c0             	sete   al
c00209f1:	0f b6 c0             	movzx  eax,al
c00209f4:	85 c0                	test   eax,eax
c00209f6:	74 0c                	je     c0020a04 <KeResolveCompatibilitySymbol(char*)+0x88>
c00209f8:	b8 14 ea 02 c0       	mov    eax,0xc002ea14
c00209fd:	e9 32 01 00 00       	jmp    c0020b34 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020a02:	66 90                	xchg   ax,ax
c0020a04:	83 ec 08             	sub    esp,0x8
c0020a07:	68 84 30 03 c0       	push   0xc0033084
c0020a0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a10:	e8 3b fd fd ff       	call   c0000750 <strcmp>
c0020a15:	83 c4 10             	add    esp,0x10
c0020a18:	85 c0                	test   eax,eax
c0020a1a:	0f 94 c0             	sete   al
c0020a1d:	0f b6 c0             	movzx  eax,al
c0020a20:	85 c0                	test   eax,eax
c0020a22:	74 0c                	je     c0020a30 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0020a24:	b8 8e 07 02 c0       	mov    eax,0xc002078e
c0020a29:	e9 06 01 00 00       	jmp    c0020b34 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020a2e:	66 90                	xchg   ax,ax
c0020a30:	83 ec 08             	sub    esp,0x8
c0020a33:	68 97 30 03 c0       	push   0xc0033097
c0020a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a3c:	e8 0f fd fd ff       	call   c0000750 <strcmp>
c0020a41:	83 c4 10             	add    esp,0x10
c0020a44:	85 c0                	test   eax,eax
c0020a46:	0f 94 c0             	sete   al
c0020a49:	0f b6 c0             	movzx  eax,al
c0020a4c:	85 c0                	test   eax,eax
c0020a4e:	74 0c                	je     c0020a5c <KeResolveCompatibilitySymbol(char*)+0xe0>
c0020a50:	b8 47 fe 01 c0       	mov    eax,0xc001fe47
c0020a55:	e9 da 00 00 00       	jmp    c0020b34 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020a5a:	66 90                	xchg   ax,ax
c0020a5c:	83 ec 08             	sub    esp,0x8
c0020a5f:	68 b4 30 03 c0       	push   0xc00330b4
c0020a64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a68:	e8 e3 fc fd ff       	call   c0000750 <strcmp>
c0020a6d:	83 c4 10             	add    esp,0x10
c0020a70:	85 c0                	test   eax,eax
c0020a72:	0f 94 c0             	sete   al
c0020a75:	0f b6 c0             	movzx  eax,al
c0020a78:	85 c0                	test   eax,eax
c0020a7a:	74 0c                	je     c0020a88 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0020a7c:	b8 e0 ed 02 c0       	mov    eax,0xc002ede0
c0020a81:	e9 ae 00 00 00       	jmp    c0020b34 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020a86:	66 90                	xchg   ax,ax
c0020a88:	83 ec 08             	sub    esp,0x8
c0020a8b:	68 be 30 03 c0       	push   0xc00330be
c0020a90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a94:	e8 b7 fc fd ff       	call   c0000750 <strcmp>
c0020a99:	83 c4 10             	add    esp,0x10
c0020a9c:	85 c0                	test   eax,eax
c0020a9e:	0f 94 c0             	sete   al
c0020aa1:	0f b6 c0             	movzx  eax,al
c0020aa4:	85 c0                	test   eax,eax
c0020aa6:	74 0c                	je     c0020ab4 <KeResolveCompatibilitySymbol(char*)+0x138>
c0020aa8:	b8 60 eb 02 c0       	mov    eax,0xc002eb60
c0020aad:	e9 82 00 00 00       	jmp    c0020b34 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020ab2:	66 90                	xchg   ax,ax
c0020ab4:	83 ec 08             	sub    esp,0x8
c0020ab7:	68 c7 30 03 c0       	push   0xc00330c7
c0020abc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ac0:	e8 8b fc fd ff       	call   c0000750 <strcmp>
c0020ac5:	83 c4 10             	add    esp,0x10
c0020ac8:	85 c0                	test   eax,eax
c0020aca:	0f 94 c0             	sete   al
c0020acd:	0f b6 c0             	movzx  eax,al
c0020ad0:	85 c0                	test   eax,eax
c0020ad2:	74 08                	je     c0020adc <KeResolveCompatibilitySymbol(char*)+0x160>
c0020ad4:	b8 c0 b9 03 c0       	mov    eax,0xc003b9c0
c0020ad9:	eb 59                	jmp    c0020b34 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020adb:	90                   	nop
c0020adc:	83 ec 08             	sub    esp,0x8
c0020adf:	68 df 30 03 c0       	push   0xc00330df
c0020ae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ae8:	e8 63 fc fd ff       	call   c0000750 <strcmp>
c0020aed:	83 c4 10             	add    esp,0x10
c0020af0:	85 c0                	test   eax,eax
c0020af2:	0f 94 c0             	sete   al
c0020af5:	0f b6 c0             	movzx  eax,al
c0020af8:	85 c0                	test   eax,eax
c0020afa:	74 08                	je     c0020b04 <KeResolveCompatibilitySymbol(char*)+0x188>
c0020afc:	b8 c0 b9 03 c0       	mov    eax,0xc003b9c0
c0020b01:	eb 31                	jmp    c0020b34 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020b03:	90                   	nop
c0020b04:	83 ec 08             	sub    esp,0x8
c0020b07:	68 ec 30 03 c0       	push   0xc00330ec
c0020b0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b10:	e8 3b fc fd ff       	call   c0000750 <strcmp>
c0020b15:	83 c4 10             	add    esp,0x10
c0020b18:	85 c0                	test   eax,eax
c0020b1a:	0f 94 c0             	sete   al
c0020b1d:	0f b6 c0             	movzx  eax,al
c0020b20:	85 c0                	test   eax,eax
c0020b22:	74 08                	je     c0020b2c <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0020b24:	b8 c1 b9 03 c0       	mov    eax,0xc003b9c1
c0020b29:	eb 09                	jmp    c0020b34 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020b2b:	90                   	nop
c0020b2c:	b8 00 00 00 00       	mov    eax,0x0
c0020b31:	8d 76 00             	lea    esi,[esi+0x0]
c0020b34:	83 c4 0c             	add    esp,0xc
c0020b37:	c3                   	ret    

c0020b38 <Semaphore::Semaphore(int)>:
c0020b38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020b3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020b40:	89 10                	mov    DWORD PTR [eax],edx
c0020b42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020b46:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0020b4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020b51:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020b58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020b5c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020b63:	90                   	nop
c0020b64:	c3                   	ret    
c0020b65:	90                   	nop
c0020b66:	66 90                	xchg   ax,ax

c0020b68 <Semaphore::tryAcquire()>:
c0020b68:	83 ec 0c             	sub    esp,0xc
c0020b6b:	fa                   	cli    
c0020b6c:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020b71:	83 c0 01             	add    eax,0x1
c0020b74:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020b79:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020b7e:	83 c0 01             	add    eax,0x1
c0020b81:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b8a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020b8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b91:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b93:	39 c2                	cmp    edx,eax
c0020b95:	7d 5d                	jge    c0020bf4 <Semaphore::tryAcquire()+0x8c>
c0020b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b9b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020b9e:	8d 50 01             	lea    edx,[eax+0x1]
c0020ba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ba5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020ba8:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020bad:	83 e8 01             	sub    eax,0x1
c0020bb0:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020bb5:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020bba:	85 c0                	test   eax,eax
c0020bbc:	75 1a                	jne    c0020bd8 <Semaphore::tryAcquire()+0x70>
c0020bbe:	a1 c8 11 04 c0       	mov    eax,ds:0xc00411c8
c0020bc3:	85 c0                	test   eax,eax
c0020bc5:	74 11                	je     c0020bd8 <Semaphore::tryAcquire()+0x70>
c0020bc7:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c0020bd1:	e8 c6 4b 00 00       	call   c002579c <schedule()>
c0020bd6:	66 90                	xchg   ax,ax
c0020bd8:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020bdd:	83 e8 01             	sub    eax,0x1
c0020be0:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020be5:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020bea:	85 c0                	test   eax,eax
c0020bec:	75 02                	jne    c0020bf0 <Semaphore::tryAcquire()+0x88>
c0020bee:	fb                   	sti    
c0020bef:	90                   	nop
c0020bf0:	b0 01                	mov    al,0x1
c0020bf2:	eb 4c                	jmp    c0020c40 <Semaphore::tryAcquire()+0xd8>
c0020bf4:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020bf9:	83 e8 01             	sub    eax,0x1
c0020bfc:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020c01:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020c06:	85 c0                	test   eax,eax
c0020c08:	75 1a                	jne    c0020c24 <Semaphore::tryAcquire()+0xbc>
c0020c0a:	a1 c8 11 04 c0       	mov    eax,ds:0xc00411c8
c0020c0f:	85 c0                	test   eax,eax
c0020c11:	74 11                	je     c0020c24 <Semaphore::tryAcquire()+0xbc>
c0020c13:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c0020c1d:	e8 7a 4b 00 00       	call   c002579c <schedule()>
c0020c22:	66 90                	xchg   ax,ax
c0020c24:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020c29:	83 e8 01             	sub    eax,0x1
c0020c2c:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020c31:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020c36:	85 c0                	test   eax,eax
c0020c38:	75 02                	jne    c0020c3c <Semaphore::tryAcquire()+0xd4>
c0020c3a:	fb                   	sti    
c0020c3b:	90                   	nop
c0020c3c:	b0 00                	mov    al,0x0
c0020c3e:	66 90                	xchg   ax,ax
c0020c40:	83 c4 0c             	add    esp,0xc
c0020c43:	c3                   	ret    

c0020c44 <Semaphore::assertLocked(char const*)>:
c0020c44:	83 ec 0c             	sub    esp,0xc
c0020c47:	fa                   	cli    
c0020c48:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020c4d:	83 c0 01             	add    eax,0x1
c0020c50:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020c55:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020c5a:	83 c0 01             	add    eax,0x1
c0020c5d:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c66:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c6f:	39 c2                	cmp    edx,eax
c0020c71:	7d 11                	jge    c0020c84 <Semaphore::assertLocked(char const*)+0x40>
c0020c73:	83 ec 0c             	sub    esp,0xc
c0020c76:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020c7a:	e8 0f fb ff ff       	call   c002078e <KePanic(char const*)>
c0020c7f:	83 c4 10             	add    esp,0x10
c0020c82:	66 90                	xchg   ax,ax
c0020c84:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020c89:	83 e8 01             	sub    eax,0x1
c0020c8c:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020c91:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020c96:	85 c0                	test   eax,eax
c0020c98:	75 1a                	jne    c0020cb4 <Semaphore::assertLocked(char const*)+0x70>
c0020c9a:	a1 c8 11 04 c0       	mov    eax,ds:0xc00411c8
c0020c9f:	85 c0                	test   eax,eax
c0020ca1:	74 11                	je     c0020cb4 <Semaphore::assertLocked(char const*)+0x70>
c0020ca3:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c0020cad:	e8 ea 4a 00 00       	call   c002579c <schedule()>
c0020cb2:	66 90                	xchg   ax,ax
c0020cb4:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020cb9:	83 e8 01             	sub    eax,0x1
c0020cbc:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020cc1:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020cc6:	85 c0                	test   eax,eax
c0020cc8:	75 02                	jne    c0020ccc <Semaphore::assertLocked(char const*)+0x88>
c0020cca:	fb                   	sti    
c0020ccb:	90                   	nop
c0020ccc:	90                   	nop
c0020ccd:	83 c4 0c             	add    esp,0xc
c0020cd0:	c3                   	ret    
c0020cd1:	90                   	nop
c0020cd2:	66 90                	xchg   ax,ax

c0020cd4 <Semaphore::acquire(int)>:
c0020cd4:	83 ec 1c             	sub    esp,0x1c
c0020cd7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cdc:	0f 84 9a 00 00 00    	je     c0020d7c <Semaphore::acquire(int)+0xa8>
c0020ce2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020cea:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0020cef:	90                   	nop
c0020cf0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0020cf5:	85 c0                	test   eax,eax
c0020cf7:	74 77                	je     c0020d70 <Semaphore::acquire(int)+0x9c>
c0020cf9:	83 ec 0c             	sub    esp,0xc
c0020cfc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020d00:	e8 63 fe ff ff       	call   c0020b68 <Semaphore::tryAcquire()>
c0020d05:	83 c4 10             	add    esp,0x10
c0020d08:	83 f0 01             	xor    eax,0x1
c0020d0b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0020d0f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0020d13:	83 f0 01             	xor    eax,0x1
c0020d16:	0f b6 c0             	movzx  eax,al
c0020d19:	85 c0                	test   eax,eax
c0020d1b:	75 4f                	jne    c0020d6c <Semaphore::acquire(int)+0x98>
c0020d1d:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0020d22:	7f 2c                	jg     c0020d50 <Semaphore::acquire(int)+0x7c>
c0020d24:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020d28:	89 d0                	mov    eax,edx
c0020d2a:	c1 e0 02             	shl    eax,0x2
c0020d2d:	01 d0                	add    eax,edx
c0020d2f:	01 c0                	add    eax,eax
c0020d31:	83 ec 0c             	sub    esp,0xc
c0020d34:	50                   	push   eax
c0020d35:	e8 3a 4c 00 00       	call   c0025974 <milliTenthSleep(unsigned int)>
c0020d3a:	83 c4 10             	add    esp,0x10
c0020d3d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020d41:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0020d45:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0020d4d:	eb a1                	jmp    c0020cf0 <Semaphore::acquire(int)+0x1c>
c0020d4f:	90                   	nop
c0020d50:	83 ec 0c             	sub    esp,0xc
c0020d53:	68 90 01 00 00       	push   0x190
c0020d58:	e8 17 4c 00 00       	call   c0025974 <milliTenthSleep(unsigned int)>
c0020d5d:	83 c4 10             	add    esp,0x10
c0020d60:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0020d65:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0020d6a:	eb 84                	jmp    c0020cf0 <Semaphore::acquire(int)+0x1c>
c0020d6c:	90                   	nop
c0020d6d:	8d 76 00             	lea    esi,[esi+0x0]
c0020d70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d74:	e9 ff 00 00 00       	jmp    c0020e78 <Semaphore::acquire(int)+0x1a4>
c0020d79:	8d 76 00             	lea    esi,[esi+0x0]
c0020d7c:	fa                   	cli    
c0020d7d:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020d82:	83 c0 01             	add    eax,0x1
c0020d85:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020d8a:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020d8f:	83 c0 01             	add    eax,0x1
c0020d92:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020d97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d9b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020d9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020da2:	8b 00                	mov    eax,DWORD PTR [eax]
c0020da4:	39 c2                	cmp    edx,eax
c0020da6:	7d 14                	jge    c0020dbc <Semaphore::acquire(int)+0xe8>
c0020da8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020dac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020daf:	8d 50 01             	lea    edx,[eax+0x1]
c0020db2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020db6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020db9:	eb 6d                	jmp    c0020e28 <Semaphore::acquire(int)+0x154>
c0020dbb:	90                   	nop
c0020dbc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020dc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0020dc3:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020dca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020dce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020dd1:	85 c0                	test   eax,eax
c0020dd3:	75 13                	jne    c0020de8 <Semaphore::acquire(int)+0x114>
c0020dd5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020dda:	8b 10                	mov    edx,DWORD PTR [eax]
c0020ddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020de0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020de3:	eb 17                	jmp    c0020dfc <Semaphore::acquire(int)+0x128>
c0020de5:	8d 76 00             	lea    esi,[esi+0x0]
c0020de8:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0020ded:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020df1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020df4:	8b 12                	mov    edx,DWORD PTR [edx]
c0020df6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0020df9:	8d 76 00             	lea    esi,[esi+0x0]
c0020dfc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020e01:	8b 10                	mov    edx,DWORD PTR [eax]
c0020e03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e07:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020e0a:	83 ec 0c             	sub    esp,0xc
c0020e0d:	68 fc 30 03 c0       	push   0xc00330fc
c0020e12:	e8 3e 86 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0020e17:	83 c4 10             	add    esp,0x10
c0020e1a:	83 ec 0c             	sub    esp,0xc
c0020e1d:	6a 05                	push   0x5
c0020e1f:	e8 34 4a 00 00       	call   c0025858 <blockTask(TaskState)>
c0020e24:	83 c4 10             	add    esp,0x10
c0020e27:	90                   	nop
c0020e28:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020e2d:	83 e8 01             	sub    eax,0x1
c0020e30:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020e35:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020e3a:	85 c0                	test   eax,eax
c0020e3c:	75 1a                	jne    c0020e58 <Semaphore::acquire(int)+0x184>
c0020e3e:	a1 c8 11 04 c0       	mov    eax,ds:0xc00411c8
c0020e43:	85 c0                	test   eax,eax
c0020e45:	74 11                	je     c0020e58 <Semaphore::acquire(int)+0x184>
c0020e47:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c0020e51:	e8 46 49 00 00       	call   c002579c <schedule()>
c0020e56:	66 90                	xchg   ax,ax
c0020e58:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020e5d:	83 e8 01             	sub    eax,0x1
c0020e60:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020e65:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020e6a:	85 c0                	test   eax,eax
c0020e6c:	75 02                	jne    c0020e70 <Semaphore::acquire(int)+0x19c>
c0020e6e:	fb                   	sti    
c0020e6f:	90                   	nop
c0020e70:	b8 00 00 00 00       	mov    eax,0x0
c0020e75:	8d 76 00             	lea    esi,[esi+0x0]
c0020e78:	83 c4 1c             	add    esp,0x1c
c0020e7b:	c3                   	ret    

c0020e7c <Semaphore::acquire()>:
c0020e7c:	83 ec 0c             	sub    esp,0xc
c0020e7f:	83 ec 08             	sub    esp,0x8
c0020e82:	6a 00                	push   0x0
c0020e84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e88:	e8 47 fe ff ff       	call   c0020cd4 <Semaphore::acquire(int)>
c0020e8d:	83 c4 10             	add    esp,0x10
c0020e90:	90                   	nop
c0020e91:	83 c4 0c             	add    esp,0xc
c0020e94:	c3                   	ret    
c0020e95:	90                   	nop
c0020e96:	66 90                	xchg   ax,ax

c0020e98 <Semaphore::release()>:
c0020e98:	83 ec 1c             	sub    esp,0x1c
c0020e9b:	fa                   	cli    
c0020e9c:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020ea1:	83 c0 01             	add    eax,0x1
c0020ea4:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020ea9:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020eae:	83 c0 01             	add    eax,0x1
c0020eb1:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020eb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020eba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020ebd:	85 c0                	test   eax,eax
c0020ebf:	74 2b                	je     c0020eec <Semaphore::release()+0x54>
c0020ec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ec5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020ec8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ecc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ed0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0020ed3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ed7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020eda:	83 ec 0c             	sub    esp,0xc
c0020edd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ee1:	e8 ae 4b 00 00       	call   c0025a94 <unblockTask(ThreadControlBlock*)>
c0020ee6:	83 c4 10             	add    esp,0x10
c0020ee9:	eb 15                	jmp    c0020f00 <Semaphore::release()+0x68>
c0020eeb:	90                   	nop
c0020eec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ef0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020ef3:	8d 50 ff             	lea    edx,[eax-0x1]
c0020ef6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020efa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020efd:	8d 76 00             	lea    esi,[esi+0x0]
c0020f00:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020f05:	83 e8 01             	sub    eax,0x1
c0020f08:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020f0d:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020f12:	85 c0                	test   eax,eax
c0020f14:	75 1a                	jne    c0020f30 <Semaphore::release()+0x98>
c0020f16:	a1 c8 11 04 c0       	mov    eax,ds:0xc00411c8
c0020f1b:	85 c0                	test   eax,eax
c0020f1d:	74 11                	je     c0020f30 <Semaphore::release()+0x98>
c0020f1f:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c0020f29:	e8 6e 48 00 00       	call   c002579c <schedule()>
c0020f2e:	66 90                	xchg   ax,ax
c0020f30:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020f35:	83 e8 01             	sub    eax,0x1
c0020f38:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020f3d:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020f42:	85 c0                	test   eax,eax
c0020f44:	75 02                	jne    c0020f48 <Semaphore::release()+0xb0>
c0020f46:	fb                   	sti    
c0020f47:	90                   	nop
c0020f48:	90                   	nop
c0020f49:	83 c4 1c             	add    esp,0x1c
c0020f4c:	c3                   	ret    

c0020f4d <KiSigKill(int)>:
c0020f4d:	83 ec 0c             	sub    esp,0xc
c0020f50:	6a 00                	push   0x0
c0020f52:	6a 00                	push   0x0
c0020f54:	6a ff                	push   0xffffffff
c0020f56:	6a 01                	push   0x1
c0020f58:	e8 f5 50 01 00       	call   c0036052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020f5d:	83 c4 1c             	add    esp,0x1c
c0020f60:	c3                   	ret    

c0020f61 <KiDefaultSignalHandlerIgnore(int)>:
c0020f61:	c3                   	ret    

c0020f62 <KiDefaultSignalHandlerPause(int)>:
c0020f62:	57                   	push   edi
c0020f63:	b9 07 00 00 00       	mov    ecx,0x7
c0020f68:	56                   	push   esi
c0020f69:	be 57 31 03 c0       	mov    esi,0xc0033157
c0020f6e:	83 ec 24             	sub    esp,0x24
c0020f71:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020f75:	fc                   	cld    
c0020f76:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020f78:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020f7c:	50                   	push   eax
c0020f7d:	6a 00                	push   0x0
c0020f7f:	6a 00                	push   0x0
c0020f81:	6a 27                	push   0x27
c0020f83:	e8 ca 50 01 00       	call   c0036052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020f88:	83 c4 34             	add    esp,0x34
c0020f8b:	5e                   	pop    esi
c0020f8c:	5f                   	pop    edi
c0020f8d:	c3                   	ret    

c0020f8e <KiDefaultSignalHandlerResume(int)>:
c0020f8e:	57                   	push   edi
c0020f8f:	b9 1d 00 00 00       	mov    ecx,0x1d
c0020f94:	56                   	push   esi
c0020f95:	be 73 31 03 c0       	mov    esi,0xc0033173
c0020f9a:	83 ec 24             	sub    esp,0x24
c0020f9d:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0020fa1:	fc                   	cld    
c0020fa2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020fa4:	8d 44 24 03          	lea    eax,[esp+0x3]
c0020fa8:	50                   	push   eax
c0020fa9:	6a 00                	push   0x0
c0020fab:	6a 00                	push   0x0
c0020fad:	6a 27                	push   0x27
c0020faf:	e8 9e 50 01 00       	call   c0036052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020fb4:	83 c4 34             	add    esp,0x34
c0020fb7:	5e                   	pop    esi
c0020fb8:	5f                   	pop    edi
c0020fb9:	c3                   	ret    

c0020fba <KeDeinitSignals(SigHandlerBlock*)>:
c0020fba:	e9 18 56 ff ff       	jmp    c00165d7 <free>

c0020fbf <KeInitSignals()>:
c0020fbf:	53                   	push   ebx
c0020fc0:	83 ec 14             	sub    esp,0x14
c0020fc3:	68 c8 00 00 00       	push   0xc8
c0020fc8:	e8 fa 55 ff ff       	call   c00165c7 <malloc>
c0020fcd:	83 c4 0c             	add    esp,0xc
c0020fd0:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0020fda:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0020fe4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0020feb:	89 c3                	mov    ebx,eax
c0020fed:	6a 20                	push   0x20
c0020fef:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0020ff5:	6a 00                	push   0x0
c0020ff7:	50                   	push   eax
c0020ff8:	e8 f3 f4 fd ff       	call   c00004f0 <memset>
c0020ffd:	83 c4 0c             	add    esp,0xc
c0021000:	6a 44                	push   0x44
c0021002:	6a 00                	push   0x0
c0021004:	53                   	push   ebx
c0021005:	e8 e6 f4 fd ff       	call   c00004f0 <memset>
c002100a:	89 d8                	mov    eax,ebx
c002100c:	83 c4 18             	add    esp,0x18
c002100f:	5b                   	pop    ebx
c0021010:	c3                   	ret    

c0021011 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0021011:	53                   	push   ebx
c0021012:	b8 01 00 00 00       	mov    eax,0x1
c0021017:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002101b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002101f:	83 f9 10             	cmp    ecx,0x10
c0021022:	7f 21                	jg     c0021045 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0021024:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0021027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002102b:	89 03                	mov    DWORD PTR [ebx],eax
c002102d:	b8 01 00 00 00       	mov    eax,0x1
c0021032:	d3 e0                	shl    eax,cl
c0021034:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0021038:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c002103b:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0021043:	31 c0                	xor    eax,eax
c0021045:	5b                   	pop    ebx
c0021046:	c3                   	ret    

c0021047 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0021047:	55                   	push   ebp
c0021048:	57                   	push   edi
c0021049:	bf 08 00 00 00       	mov    edi,0x8
c002104e:	56                   	push   esi
c002104f:	53                   	push   ebx
c0021050:	83 ec 18             	sub    esp,0x18
c0021053:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021057:	68 90 31 03 c0       	push   0xc0033190
c002105c:	e8 f4 83 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0021061:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0021068:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c002106e:	83 c4 10             	add    esp,0x10
c0021071:	31 c9                	xor    ecx,ecx
c0021073:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021077:	99                   	cdq    
c0021078:	f7 ff                	idiv   edi
c002107a:	8d 42 24             	lea    eax,[edx+0x24]
c002107d:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0021081:	85 f6                	test   esi,esi
c0021083:	75 1a                	jne    c002109f <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0021085:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021089:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c002108d:	50                   	push   eax
c002108e:	50                   	push   eax
c002108f:	52                   	push   edx
c0021090:	68 a1 31 03 c0       	push   0xc00331a1
c0021095:	e8 bb 83 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c002109a:	83 c4 10             	add    esp,0x10
c002109d:	eb 1b                	jmp    c00210ba <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c002109f:	41                   	inc    ecx
c00210a0:	83 f9 08             	cmp    ecx,0x8
c00210a3:	75 ce                	jne    c0021073 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00210a5:	83 ec 0c             	sub    esp,0xc
c00210a8:	be 01 00 00 00       	mov    esi,0x1
c00210ad:	68 c2 31 03 c0       	push   0xc00331c2
c00210b2:	e8 9e 83 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c00210b7:	83 c4 10             	add    esp,0x10
c00210ba:	83 c4 0c             	add    esp,0xc
c00210bd:	89 f0                	mov    eax,esi
c00210bf:	5b                   	pop    ebx
c00210c0:	5e                   	pop    esi
c00210c1:	5f                   	pop    edi
c00210c2:	5d                   	pop    ebp
c00210c3:	c3                   	ret    

c00210c4 <KeCheckSignal(SigHandlerBlock*, int*)>:
c00210c4:	55                   	push   ebp
c00210c5:	57                   	push   edi
c00210c6:	56                   	push   esi
c00210c7:	53                   	push   ebx
c00210c8:	51                   	push   ecx
c00210c9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00210cd:	85 db                	test   ebx,ebx
c00210cf:	0f 84 bc 00 00 00    	je     c0021191 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00210d5:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00210dc:	0f 84 af 00 00 00    	je     c0021191 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00210e2:	31 c9                	xor    ecx,ecx
c00210e4:	bf 08 00 00 00       	mov    edi,0x8
c00210e9:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00210ef:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00210f2:	99                   	cdq    
c00210f3:	f7 ff                	idiv   edi
c00210f5:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00210fc:	85 ed                	test   ebp,ebp
c00210fe:	0f 84 9e 00 00 00    	je     c00211a2 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0021104:	89 e9                	mov    ecx,ebp
c0021106:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c002110c:	bf 01 00 00 00       	mov    edi,0x1
c0021111:	89 04 24             	mov    DWORD PTR [esp],eax
c0021114:	d3 e7                	shl    edi,cl
c0021116:	31 c9                	xor    ecx,ecx
c0021118:	b8 01 00 00 00       	mov    eax,0x1
c002111d:	d3 e0                	shl    eax,cl
c002111f:	85 04 24             	test   DWORD PTR [esp],eax
c0021122:	74 06                	je     c002112a <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0021124:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0021128:	75 67                	jne    c0021191 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c002112a:	41                   	inc    ecx
c002112b:	83 f9 11             	cmp    ecx,0x11
c002112e:	75 e8                	jne    c0021118 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0021130:	46                   	inc    esi
c0021131:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021134:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c002113a:	09 f8                	or     eax,edi
c002113c:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0021147:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c002114d:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0021154:	31 c0                	xor    eax,eax
c0021156:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c002115e:	74 09                	je     c0021169 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0021160:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0021167:	eb 06                	jmp    c002116f <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0021169:	40                   	inc    eax
c002116a:	83 f8 08             	cmp    eax,0x8
c002116d:	75 e7                	jne    c0021156 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c002116f:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0021172:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021176:	83 fd 09             	cmp    ebp,0x9
c0021179:	89 2a                	mov    DWORD PTR [edx],ebp
c002117b:	75 07                	jne    c0021184 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c002117d:	b8 4d 0f 02 c0       	mov    eax,0xc0020f4d
c0021182:	eb 31                	jmp    c00211b5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0021184:	83 f8 01             	cmp    eax,0x1
c0021187:	75 0c                	jne    c0021195 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0021189:	f7 d7                	not    edi
c002118b:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0021191:	31 c0                	xor    eax,eax
c0021193:	eb 20                	jmp    c00211b5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0021195:	85 c0                	test   eax,eax
c0021197:	75 1c                	jne    c00211b5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0021199:	8b 04 ad 80 4a 03 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffcb580]
c00211a0:	eb 13                	jmp    c00211b5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00211a2:	46                   	inc    esi
c00211a3:	41                   	inc    ecx
c00211a4:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00211aa:	83 f9 08             	cmp    ecx,0x8
c00211ad:	0f 85 36 ff ff ff    	jne    c00210e9 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c00211b3:	eb dc                	jmp    c0021191 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00211b5:	5a                   	pop    edx
c00211b6:	5b                   	pop    ebx
c00211b7:	5e                   	pop    esi
c00211b8:	5f                   	pop    edi
c00211b9:	5d                   	pop    ebp
c00211ba:	c3                   	ret    

c00211bb <KiCheckSignalZ>:
c00211bb:	83 ec 10             	sub    esp,0x10
c00211be:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00211c2:	50                   	push   eax
c00211c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00211c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00211cb:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00211d1:	e8 ee fe ff ff       	call   c00210c4 <KeCheckSignal(SigHandlerBlock*, int*)>
c00211d6:	5a                   	pop    edx
c00211d7:	31 d2                	xor    edx,edx
c00211d9:	59                   	pop    ecx
c00211da:	85 c0                	test   eax,eax
c00211dc:	74 19                	je     c00211f7 <KiCheckSignalZ+0x3c>
c00211de:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00211e4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00211e7:	89 02                	mov    DWORD PTR [edx],eax
c00211e9:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00211f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211f4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00211f7:	89 d0                	mov    eax,edx
c00211f9:	83 c4 10             	add    esp,0x10
c00211fc:	c3                   	ret    

c00211fd <KeCompleteSignal(SigHandlerBlock*, int)>:
c00211fd:	56                   	push   esi
c00211fe:	53                   	push   ebx
c00211ff:	bb 01 00 00 00       	mov    ebx,0x1
c0021204:	52                   	push   edx
c0021205:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021209:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002120d:	d3 e3                	shl    ebx,cl
c002120f:	83 f9 10             	cmp    ecx,0x10
c0021212:	7f 08                	jg     c002121c <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0021214:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c002121a:	75 10                	jne    c002122c <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c002121c:	83 ec 0c             	sub    esp,0xc
c002121f:	68 d3 31 03 c0       	push   0xc00331d3
c0021224:	e8 65 f5 ff ff       	call   c002078e <KePanic(char const*)>
c0021229:	83 c4 10             	add    esp,0x10
c002122c:	f7 d3                	not    ebx
c002122e:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0021234:	58                   	pop    eax
c0021235:	5b                   	pop    ebx
c0021236:	5e                   	pop    esi
c0021237:	c3                   	ret    

c0021238 <KiFinishSignalZ>:
c0021238:	53                   	push   ebx
c0021239:	83 ec 10             	sub    esp,0x10
c002123c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0021240:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0021243:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021248:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002124b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0021251:	e8 a7 ff ff ff       	call   c00211fd <KeCompleteSignal(SigHandlerBlock*, int)>
c0021256:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002125c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021263:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c002126a:	83 c4 18             	add    esp,0x18
c002126d:	5b                   	pop    ebx
c002126e:	c3                   	ret    

c002126f <SysSeekDir(regs*)>:
c002126f:	31 c0                	xor    eax,eax
c0021271:	31 d2                	xor    edx,edx
c0021273:	c3                   	ret    

c0021274 <SysTellDir(regs*)>:
c0021274:	31 c0                	xor    eax,eax
c0021276:	31 d2                	xor    edx,edx
c0021278:	c3                   	ret    

c0021279 <SysVerify(regs*)>:
c0021279:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002127d:	31 d2                	xor    edx,edx
c002127f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021282:	c3                   	ret    

c0021283 <SysGetArgc(regs*)>:
c0021283:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021288:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002128b:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0021291:	89 c2                	mov    edx,eax
c0021293:	c1 fa 1f             	sar    edx,0x1f
c0021296:	c3                   	ret    

c0021297 <SysTTYName(regs*)>:
c0021297:	b8 01 00 00 00       	mov    eax,0x1
c002129c:	31 d2                	xor    edx,edx
c002129e:	c3                   	ret    

c002129f <SysFormatDisk(regs*)>:
c002129f:	56                   	push   esi
c00212a0:	53                   	push   ebx
c00212a1:	83 ec 04             	sub    esp,0x4
c00212a4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00212a8:	8b 1d 04 df 03 c0    	mov    ebx,DWORD PTR ds:0xc003df04
c00212ae:	eb 28                	jmp    c00212d8 <SysFormatDisk(regs*)+0x39>
c00212b0:	83 ec 0c             	sub    esp,0xc
c00212b3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00212b6:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00212b9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00212bb:	51                   	push   ecx
c00212bc:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00212bf:	51                   	push   ecx
c00212c0:	50                   	push   eax
c00212c1:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c00212c8:	50                   	push   eax
c00212c9:	53                   	push   ebx
c00212ca:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c00212cd:	83 c4 20             	add    esp,0x20
c00212d0:	83 f8 08             	cmp    eax,0x8
c00212d3:	75 14                	jne    c00212e9 <SysFormatDisk(regs*)+0x4a>
c00212d5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00212d8:	85 db                	test   ebx,ebx
c00212da:	75 d4                	jne    c00212b0 <SysFormatDisk(regs*)+0x11>
c00212dc:	83 c4 04             	add    esp,0x4
c00212df:	b8 03 00 00 00       	mov    eax,0x3
c00212e4:	31 d2                	xor    edx,edx
c00212e6:	5b                   	pop    ebx
c00212e7:	5e                   	pop    esi
c00212e8:	c3                   	ret    
c00212e9:	85 c0                	test   eax,eax
c00212eb:	74 1f                	je     c002130c <SysFormatDisk(regs*)+0x6d>
c00212ed:	83 f8 09             	cmp    eax,0x9
c00212f0:	74 0d                	je     c00212ff <SysFormatDisk(regs*)+0x60>
c00212f2:	83 c4 04             	add    esp,0x4
c00212f5:	b8 02 00 00 00       	mov    eax,0x2
c00212fa:	31 d2                	xor    edx,edx
c00212fc:	5b                   	pop    ebx
c00212fd:	5e                   	pop    esi
c00212fe:	c3                   	ret    
c00212ff:	83 c4 04             	add    esp,0x4
c0021302:	b8 01 00 00 00       	mov    eax,0x1
c0021307:	31 d2                	xor    edx,edx
c0021309:	5b                   	pop    ebx
c002130a:	5e                   	pop    esi
c002130b:	c3                   	ret    
c002130c:	83 c4 04             	add    esp,0x4
c002130f:	31 c0                	xor    eax,eax
c0021311:	31 d2                	xor    edx,edx
c0021313:	5b                   	pop    ebx
c0021314:	5e                   	pop    esi
c0021315:	c3                   	ret    

c0021316 <SysSetDiskVolumeLabel(regs*)>:
c0021316:	56                   	push   esi
c0021317:	53                   	push   ebx
c0021318:	83 ec 04             	sub    esp,0x4
c002131b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002131f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0021322:	83 f8 19             	cmp    eax,0x19
c0021325:	77 33                	ja     c002135a <SysSetDiskVolumeLabel(regs*)+0x44>
c0021327:	8b 0c 85 80 03 04 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffbfc80]
c002132e:	85 c9                	test   ecx,ecx
c0021330:	74 28                	je     c002135a <SysSetDiskVolumeLabel(regs*)+0x44>
c0021332:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0021335:	85 db                	test   ebx,ebx
c0021337:	74 21                	je     c002135a <SysSetDiskVolumeLabel(regs*)+0x44>
c0021339:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c002133f:	85 d2                	test   edx,edx
c0021341:	74 17                	je     c002135a <SysSetDiskVolumeLabel(regs*)+0x44>
c0021343:	8b 32                	mov    esi,DWORD PTR [edx]
c0021345:	53                   	push   ebx
c0021346:	50                   	push   eax
c0021347:	51                   	push   ecx
c0021348:	52                   	push   edx
c0021349:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c002134c:	83 c4 10             	add    esp,0x10
c002134f:	89 c2                	mov    edx,eax
c0021351:	83 c4 04             	add    esp,0x4
c0021354:	c1 fa 1f             	sar    edx,0x1f
c0021357:	5b                   	pop    ebx
c0021358:	5e                   	pop    esi
c0021359:	c3                   	ret    
c002135a:	83 c4 04             	add    esp,0x4
c002135d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0021362:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021367:	5b                   	pop    ebx
c0021368:	5e                   	pop    esi
c0021369:	c3                   	ret    

c002136a <SysGetDiskVolumeLabel(regs*)>:
c002136a:	57                   	push   edi
c002136b:	56                   	push   esi
c002136c:	53                   	push   ebx
c002136d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021371:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021374:	83 fa 19             	cmp    edx,0x19
c0021377:	77 3c                	ja     c00213b5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0021379:	8b 0c 95 80 03 04 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffbfc80]
c0021380:	85 c9                	test   ecx,ecx
c0021382:	74 31                	je     c00213b5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0021384:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0021387:	85 db                	test   ebx,ebx
c0021389:	74 2a                	je     c00213b5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c002138b:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c002138e:	85 f6                	test   esi,esi
c0021390:	74 23                	je     c00213b5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0021392:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0021398:	85 c0                	test   eax,eax
c002139a:	74 19                	je     c00213b5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c002139c:	83 ec 0c             	sub    esp,0xc
c002139f:	8b 38                	mov    edi,DWORD PTR [eax]
c00213a1:	56                   	push   esi
c00213a2:	53                   	push   ebx
c00213a3:	52                   	push   edx
c00213a4:	51                   	push   ecx
c00213a5:	50                   	push   eax
c00213a6:	ff 57 58             	call   DWORD PTR [edi+0x58]
c00213a9:	83 c4 20             	add    esp,0x20
c00213ac:	89 c2                	mov    edx,eax
c00213ae:	5b                   	pop    ebx
c00213af:	c1 fa 1f             	sar    edx,0x1f
c00213b2:	5e                   	pop    esi
c00213b3:	5f                   	pop    edi
c00213b4:	c3                   	ret    
c00213b5:	5b                   	pop    ebx
c00213b6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00213bb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00213c0:	5e                   	pop    esi
c00213c1:	5f                   	pop    edi
c00213c2:	c3                   	ret    

c00213c3 <SysShutdown(regs*)>:
c00213c3:	83 ec 0c             	sub    esp,0xc
c00213c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213ca:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00213cd:	85 c0                	test   eax,eax
c00213cf:	74 18                	je     c00213e9 <SysShutdown(regs*)+0x26>
c00213d1:	83 f8 01             	cmp    eax,0x1
c00213d4:	74 38                	je     c002140e <SysShutdown(regs*)+0x4b>
c00213d6:	83 f8 02             	cmp    eax,0x2
c00213d9:	74 24                	je     c00213ff <SysShutdown(regs*)+0x3c>
c00213db:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00213e0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00213e5:	83 c4 0c             	add    esp,0xc
c00213e8:	c3                   	ret    
c00213e9:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c00213ee:	8b 10                	mov    edx,DWORD PTR [eax]
c00213f0:	6a 00                	push   0x0
c00213f2:	6a 00                	push   0x0
c00213f4:	6a 00                	push   0x0
c00213f6:	50                   	push   eax
c00213f7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00213fa:	83 c4 10             	add    esp,0x10
c00213fd:	eb dc                	jmp    c00213db <SysShutdown(regs*)+0x18>
c00213ff:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0021404:	8b 10                	mov    edx,DWORD PTR [eax]
c0021406:	6a 00                	push   0x0
c0021408:	6a 00                	push   0x0
c002140a:	6a 01                	push   0x1
c002140c:	eb e8                	jmp    c00213f6 <SysShutdown(regs*)+0x33>
c002140e:	a1 00 04 04 c0       	mov    eax,ds:0xc0040400
c0021413:	85 c0                	test   eax,eax
c0021415:	74 02                	je     c0021419 <SysShutdown(regs*)+0x56>
c0021417:	ff d0                	call   eax
c0021419:	31 c0                	xor    eax,eax
c002141b:	31 d2                	xor    edx,edx
c002141d:	83 c4 0c             	add    esp,0xc
c0021420:	c3                   	ret    

c0021421 <SysRealpath(regs*)>:
c0021421:	83 ec 0c             	sub    esp,0xc
c0021424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021428:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c002142b:	85 d2                	test   edx,edx
c002142d:	74 07                	je     c0021436 <SysRealpath(regs*)+0x15>
c002142f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021432:	85 c0                	test   eax,eax
c0021434:	75 0b                	jne    c0021441 <SysRealpath(regs*)+0x20>
c0021436:	b8 01 00 00 00       	mov    eax,0x1
c002143b:	31 d2                	xor    edx,edx
c002143d:	83 c4 0c             	add    esp,0xc
c0021440:	c3                   	ret    
c0021441:	6a 00                	push   0x0
c0021443:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0021449:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c002144c:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0021452:	51                   	push   ecx
c0021453:	52                   	push   edx
c0021454:	50                   	push   eax
c0021455:	e8 0a 8f ff ff       	call   c001a364 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c002145a:	83 c4 10             	add    esp,0x10
c002145d:	31 c0                	xor    eax,eax
c002145f:	31 d2                	xor    edx,edx
c0021461:	83 c4 0c             	add    esp,0xc
c0021464:	c3                   	ret    

c0021465 <SysReadDir(regs*)>:
c0021465:	53                   	push   ebx
c0021466:	83 ec 18             	sub    esp,0x18
c0021469:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002146d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0021470:	83 f8 02             	cmp    eax,0x2
c0021473:	76 61                	jbe    c00214d6 <SysReadDir(regs*)+0x71>
c0021475:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c002147c:	77 49                	ja     c00214c7 <SysReadDir(regs*)+0x62>
c002147e:	83 ec 0c             	sub    esp,0xc
c0021481:	50                   	push   eax
c0021482:	e8 3c 6b ff ff       	call   c0017fc3 <KeGetFileFromDescriptor(int)>
c0021487:	83 c4 10             	add    esp,0x10
c002148a:	85 c0                	test   eax,eax
c002148c:	74 39                	je     c00214c7 <SysReadDir(regs*)+0x62>
c002148e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021496:	83 ec 0c             	sub    esp,0xc
c0021499:	8b 10                	mov    edx,DWORD PTR [eax]
c002149b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c002149f:	51                   	push   ecx
c00214a0:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00214a3:	51                   	push   ecx
c00214a4:	6a 00                	push   0x0
c00214a6:	68 10 01 00 00       	push   0x110
c00214ab:	50                   	push   eax
c00214ac:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00214af:	83 c4 20             	add    esp,0x20
c00214b2:	85 c0                	test   eax,eax
c00214b4:	74 29                	je     c00214df <SysReadDir(regs*)+0x7a>
c00214b6:	83 f8 07             	cmp    eax,0x7
c00214b9:	74 1b                	je     c00214d6 <SysReadDir(regs*)+0x71>
c00214bb:	b8 02 00 00 00       	mov    eax,0x2
c00214c0:	31 d2                	xor    edx,edx
c00214c2:	83 c4 18             	add    esp,0x18
c00214c5:	5b                   	pop    ebx
c00214c6:	c3                   	ret    
c00214c7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00214cc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00214d1:	83 c4 18             	add    esp,0x18
c00214d4:	5b                   	pop    ebx
c00214d5:	c3                   	ret    
c00214d6:	b8 01 00 00 00       	mov    eax,0x1
c00214db:	31 d2                	xor    edx,edx
c00214dd:	eb e3                	jmp    c00214c2 <SysReadDir(regs*)+0x5d>
c00214df:	31 c0                	xor    eax,eax
c00214e1:	31 d2                	xor    edx,edx
c00214e3:	eb dd                	jmp    c00214c2 <SysReadDir(regs*)+0x5d>

c00214e5 <SysIsATTY(regs*)>:
c00214e5:	83 ec 0c             	sub    esp,0xc
c00214e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214ec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00214ef:	83 f8 02             	cmp    eax,0x2
c00214f2:	76 07                	jbe    c00214fb <SysIsATTY(regs*)+0x16>
c00214f4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00214f9:	75 26                	jne    c0021521 <SysIsATTY(regs*)+0x3c>
c00214fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021500:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021503:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0021509:	85 c0                	test   eax,eax
c002150b:	74 24                	je     c0021531 <SysIsATTY(regs*)+0x4c>
c002150d:	83 ec 0c             	sub    esp,0xc
c0021510:	8b 10                	mov    edx,DWORD PTR [eax]
c0021512:	50                   	push   eax
c0021513:	ff 12                	call   DWORD PTR [edx]
c0021515:	31 d2                	xor    edx,edx
c0021517:	0f b6 c0             	movzx  eax,al
c002151a:	83 c4 10             	add    esp,0x10
c002151d:	83 c4 0c             	add    esp,0xc
c0021520:	c3                   	ret    
c0021521:	83 ec 0c             	sub    esp,0xc
c0021524:	50                   	push   eax
c0021525:	e8 99 6a ff ff       	call   c0017fc3 <KeGetFileFromDescriptor(int)>
c002152a:	83 c4 10             	add    esp,0x10
c002152d:	85 c0                	test   eax,eax
c002152f:	75 dc                	jne    c002150d <SysIsATTY(regs*)+0x28>
c0021531:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021536:	ba ff ff ff ff       	mov    edx,0xffffffff
c002153b:	83 c4 0c             	add    esp,0xc
c002153e:	c3                   	ret    

c002153f <SysSeek(regs*)>:
c002153f:	53                   	push   ebx
c0021540:	83 ec 08             	sub    esp,0x8
c0021543:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021547:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002154a:	8d 50 fd             	lea    edx,[eax-0x3]
c002154d:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0021553:	77 32                	ja     c0021587 <SysSeek(regs*)+0x48>
c0021555:	83 ec 0c             	sub    esp,0xc
c0021558:	50                   	push   eax
c0021559:	e8 65 6a ff ff       	call   c0017fc3 <KeGetFileFromDescriptor(int)>
c002155e:	83 c4 0c             	add    esp,0xc
c0021561:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0021564:	31 db                	xor    ebx,ebx
c0021566:	53                   	push   ebx
c0021567:	51                   	push   ecx
c0021568:	50                   	push   eax
c0021569:	e8 ca 91 ff ff       	call   c001a738 <File::seek(unsigned long long)>
c002156e:	83 c4 10             	add    esp,0x10
c0021571:	85 c0                	test   eax,eax
c0021573:	0f 95 c0             	setne  al
c0021576:	31 d2                	xor    edx,edx
c0021578:	0f b6 c0             	movzx  eax,al
c002157b:	f7 d8                	neg    eax
c002157d:	83 d2 00             	adc    edx,0x0
c0021580:	83 c4 08             	add    esp,0x8
c0021583:	f7 da                	neg    edx
c0021585:	5b                   	pop    ebx
c0021586:	c3                   	ret    
c0021587:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002158c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021591:	83 c4 08             	add    esp,0x8
c0021594:	5b                   	pop    ebx
c0021595:	c3                   	ret    

c0021596 <SysTell(regs*)>:
c0021596:	53                   	push   ebx
c0021597:	83 ec 08             	sub    esp,0x8
c002159a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002159e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00215a1:	83 f8 02             	cmp    eax,0x2
c00215a4:	76 4e                	jbe    c00215f4 <SysTell(regs*)+0x5e>
c00215a6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00215ab:	76 19                	jbe    c00215c6 <SysTell(regs*)+0x30>
c00215ad:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00215b0:	31 d2                	xor    edx,edx
c00215b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00215b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00215bf:	31 c0                	xor    eax,eax
c00215c1:	83 c4 08             	add    esp,0x8
c00215c4:	5b                   	pop    ebx
c00215c5:	c3                   	ret    
c00215c6:	83 ec 0c             	sub    esp,0xc
c00215c9:	50                   	push   eax
c00215ca:	e8 f4 69 ff ff       	call   c0017fc3 <KeGetFileFromDescriptor(int)>
c00215cf:	5a                   	pop    edx
c00215d0:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00215d3:	59                   	pop    ecx
c00215d4:	53                   	push   ebx
c00215d5:	50                   	push   eax
c00215d6:	e8 09 92 ff ff       	call   c001a7e4 <File::tell(unsigned long long*)>
c00215db:	83 c4 10             	add    esp,0x10
c00215de:	85 c0                	test   eax,eax
c00215e0:	0f 95 c0             	setne  al
c00215e3:	31 d2                	xor    edx,edx
c00215e5:	0f b6 c0             	movzx  eax,al
c00215e8:	f7 d8                	neg    eax
c00215ea:	83 d2 00             	adc    edx,0x0
c00215ed:	83 c4 08             	add    esp,0x8
c00215f0:	f7 da                	neg    edx
c00215f2:	5b                   	pop    ebx
c00215f3:	c3                   	ret    
c00215f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00215f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00215fe:	83 c4 08             	add    esp,0x8
c0021601:	5b                   	pop    ebx
c0021602:	c3                   	ret    

c0021603 <SysSize(regs*)>:
c0021603:	53                   	push   ebx
c0021604:	83 ec 18             	sub    esp,0x18
c0021607:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002160b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002160e:	83 f8 02             	cmp    eax,0x2
c0021611:	76 54                	jbe    c0021667 <SysSize(regs*)+0x64>
c0021613:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021618:	76 19                	jbe    c0021633 <SysSize(regs*)+0x30>
c002161a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c002161d:	31 d2                	xor    edx,edx
c002161f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021625:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002162c:	31 c0                	xor    eax,eax
c002162e:	83 c4 18             	add    esp,0x18
c0021631:	5b                   	pop    ebx
c0021632:	c3                   	ret    
c0021633:	83 ec 0c             	sub    esp,0xc
c0021636:	50                   	push   eax
c0021637:	e8 87 69 ff ff       	call   c0017fc3 <KeGetFileFromDescriptor(int)>
c002163c:	83 c4 0c             	add    esp,0xc
c002163f:	8d 54 24 13          	lea    edx,[esp+0x13]
c0021643:	52                   	push   edx
c0021644:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021647:	52                   	push   edx
c0021648:	50                   	push   eax
c0021649:	e8 2e 93 ff ff       	call   c001a97c <File::stat(unsigned long long*, bool*)>
c002164e:	83 c4 10             	add    esp,0x10
c0021651:	85 c0                	test   eax,eax
c0021653:	0f 95 c0             	setne  al
c0021656:	31 d2                	xor    edx,edx
c0021658:	0f b6 c0             	movzx  eax,al
c002165b:	f7 d8                	neg    eax
c002165d:	83 d2 00             	adc    edx,0x0
c0021660:	83 c4 18             	add    esp,0x18
c0021663:	f7 da                	neg    edx
c0021665:	5b                   	pop    ebx
c0021666:	c3                   	ret    
c0021667:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002166c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021671:	83 c4 18             	add    esp,0x18
c0021674:	5b                   	pop    ebx
c0021675:	c3                   	ret    

c0021676 <SysSizeFromFilename(regs*)>:
c0021676:	55                   	push   ebp
c0021677:	57                   	push   edi
c0021678:	56                   	push   esi
c0021679:	53                   	push   ebx
c002167a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0021680:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0021687:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c002168a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c002168d:	85 f6                	test   esi,esi
c002168f:	74 34                	je     c00216c5 <SysSizeFromFilename(regs*)+0x4f>
c0021691:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0021697:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002169a:	83 f8 02             	cmp    eax,0x2
c002169d:	76 2d                	jbe    c00216cc <SysSizeFromFilename(regs*)+0x56>
c002169f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00216a4:	76 3b                	jbe    c00216e1 <SysSizeFromFilename(regs*)+0x6b>
c00216a6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00216a9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00216af:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00216b6:	81 c4 5c 02 00 00    	add    esp,0x25c
c00216bc:	31 c0                	xor    eax,eax
c00216be:	5b                   	pop    ebx
c00216bf:	31 d2                	xor    edx,edx
c00216c1:	5e                   	pop    esi
c00216c2:	5f                   	pop    edi
c00216c3:	5d                   	pop    ebp
c00216c4:	c3                   	ret    
c00216c5:	89 f8                	mov    eax,edi
c00216c7:	83 f8 02             	cmp    eax,0x2
c00216ca:	77 d3                	ja     c002169f <SysSizeFromFilename(regs*)+0x29>
c00216cc:	81 c4 5c 02 00 00    	add    esp,0x25c
c00216d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00216d7:	5b                   	pop    ebx
c00216d8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00216dd:	5e                   	pop    esi
c00216de:	5f                   	pop    edi
c00216df:	5d                   	pop    ebp
c00216e0:	c3                   	ret    
c00216e1:	83 ec 0c             	sub    esp,0xc
c00216e4:	68 14 01 00 00       	push   0x114
c00216e9:	e8 d9 4e ff ff       	call   c00165c7 <malloc>
c00216ee:	6a 01                	push   0x1
c00216f0:	89 c5                	mov    ebp,eax
c00216f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00216f7:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00216fa:	51                   	push   ecx
c00216fb:	57                   	push   edi
c00216fc:	55                   	push   ebp
c00216fd:	e8 7c 8e ff ff       	call   c001a57e <File::File(char const*, Process*, bool)>
c0021702:	83 c4 1c             	add    esp,0x1c
c0021705:	8d 44 24 23          	lea    eax,[esp+0x23]
c0021709:	50                   	push   eax
c002170a:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c002170d:	53                   	push   ebx
c002170e:	55                   	push   ebp
c002170f:	e8 68 92 ff ff       	call   c001a97c <File::stat(unsigned long long*, bool*)>
c0021714:	83 c4 10             	add    esp,0x10
c0021717:	85 ed                	test   ebp,ebp
c0021719:	74 15                	je     c0021730 <SysSizeFromFilename(regs*)+0xba>
c002171b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002171f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0021722:	83 ec 0c             	sub    esp,0xc
c0021725:	55                   	push   ebp
c0021726:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021729:	83 c4 10             	add    esp,0x10
c002172c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021730:	85 c0                	test   eax,eax
c0021732:	75 98                	jne    c00216cc <SysSizeFromFilename(regs*)+0x56>
c0021734:	6a 00                	push   0x0
c0021736:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002173b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002173e:	05 0c 01 00 00       	add    eax,0x10c
c0021743:	50                   	push   eax
c0021744:	57                   	push   edi
c0021745:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c002174c:	53                   	push   ebx
c002174d:	e8 12 8c ff ff       	call   c001a364 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021752:	58                   	pop    eax
c0021753:	5a                   	pop    edx
c0021754:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021758:	50                   	push   eax
c0021759:	53                   	push   ebx
c002175a:	e8 6d 86 ff ff       	call   c0019dcc <KeDereferenceSymlink(char const*, char*)>
c002175f:	83 c4 10             	add    esp,0x10
c0021762:	83 f8 01             	cmp    eax,0x1
c0021765:	74 1a                	je     c0021781 <SysSizeFromFilename(regs*)+0x10b>
c0021767:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c002176c:	74 26                	je     c0021794 <SysSizeFromFilename(regs*)+0x11e>
c002176e:	85 f6                	test   esi,esi
c0021770:	0f 84 40 ff ff ff    	je     c00216b6 <SysSizeFromFilename(regs*)+0x40>
c0021776:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c002177c:	e9 35 ff ff ff       	jmp    c00216b6 <SysSizeFromFilename(regs*)+0x40>
c0021781:	85 f6                	test   esi,esi
c0021783:	0f 84 2d ff ff ff    	je     c00216b6 <SysSizeFromFilename(regs*)+0x40>
c0021789:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c002178f:	e9 22 ff ff ff       	jmp    c00216b6 <SysSizeFromFilename(regs*)+0x40>
c0021794:	85 f6                	test   esi,esi
c0021796:	0f 84 1a ff ff ff    	je     c00216b6 <SysSizeFromFilename(regs*)+0x40>
c002179c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00217a2:	e9 0f ff ff ff       	jmp    c00216b6 <SysSizeFromFilename(regs*)+0x40>

c00217a7 <SysSizeFromFilenameNoSymlink(regs*)>:
c00217a7:	55                   	push   ebp
c00217a8:	57                   	push   edi
c00217a9:	56                   	push   esi
c00217aa:	53                   	push   ebx
c00217ab:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00217b1:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00217b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00217bb:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00217be:	85 f6                	test   esi,esi
c00217c0:	74 34                	je     c00217f6 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c00217c2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00217c8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00217cb:	83 f8 02             	cmp    eax,0x2
c00217ce:	76 2d                	jbe    c00217fd <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00217d0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00217d5:	76 3b                	jbe    c0021812 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c00217d7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00217da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00217e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00217e7:	81 c4 5c 02 00 00    	add    esp,0x25c
c00217ed:	31 c0                	xor    eax,eax
c00217ef:	5b                   	pop    ebx
c00217f0:	31 d2                	xor    edx,edx
c00217f2:	5e                   	pop    esi
c00217f3:	5f                   	pop    edi
c00217f4:	5d                   	pop    ebp
c00217f5:	c3                   	ret    
c00217f6:	89 f8                	mov    eax,edi
c00217f8:	83 f8 02             	cmp    eax,0x2
c00217fb:	77 d3                	ja     c00217d0 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c00217fd:	81 c4 5c 02 00 00    	add    esp,0x25c
c0021803:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021808:	5b                   	pop    ebx
c0021809:	ba ff ff ff ff       	mov    edx,0xffffffff
c002180e:	5e                   	pop    esi
c002180f:	5f                   	pop    edi
c0021810:	5d                   	pop    ebp
c0021811:	c3                   	ret    
c0021812:	83 ec 0c             	sub    esp,0xc
c0021815:	68 14 01 00 00       	push   0x114
c002181a:	e8 a8 4d ff ff       	call   c00165c7 <malloc>
c002181f:	6a 00                	push   0x0
c0021821:	89 c5                	mov    ebp,eax
c0021823:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021828:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c002182b:	51                   	push   ecx
c002182c:	57                   	push   edi
c002182d:	55                   	push   ebp
c002182e:	e8 4b 8d ff ff       	call   c001a57e <File::File(char const*, Process*, bool)>
c0021833:	83 c4 1c             	add    esp,0x1c
c0021836:	8d 44 24 23          	lea    eax,[esp+0x23]
c002183a:	50                   	push   eax
c002183b:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c002183e:	53                   	push   ebx
c002183f:	55                   	push   ebp
c0021840:	e8 37 91 ff ff       	call   c001a97c <File::stat(unsigned long long*, bool*)>
c0021845:	83 c4 10             	add    esp,0x10
c0021848:	85 ed                	test   ebp,ebp
c002184a:	74 15                	je     c0021861 <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c002184c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021850:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0021853:	83 ec 0c             	sub    esp,0xc
c0021856:	55                   	push   ebp
c0021857:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002185a:	83 c4 10             	add    esp,0x10
c002185d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021861:	85 c0                	test   eax,eax
c0021863:	75 98                	jne    c00217fd <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0021865:	6a 00                	push   0x0
c0021867:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002186c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002186f:	05 0c 01 00 00       	add    eax,0x10c
c0021874:	50                   	push   eax
c0021875:	57                   	push   edi
c0021876:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c002187d:	53                   	push   ebx
c002187e:	e8 e1 8a ff ff       	call   c001a364 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021883:	58                   	pop    eax
c0021884:	5a                   	pop    edx
c0021885:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021889:	50                   	push   eax
c002188a:	53                   	push   ebx
c002188b:	e8 3c 85 ff ff       	call   c0019dcc <KeDereferenceSymlink(char const*, char*)>
c0021890:	83 c4 10             	add    esp,0x10
c0021893:	83 f8 01             	cmp    eax,0x1
c0021896:	74 1a                	je     c00218b2 <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c0021898:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c002189d:	74 26                	je     c00218c5 <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c002189f:	85 f6                	test   esi,esi
c00218a1:	0f 84 40 ff ff ff    	je     c00217e7 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00218a7:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00218ad:	e9 35 ff ff ff       	jmp    c00217e7 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00218b2:	85 f6                	test   esi,esi
c00218b4:	0f 84 2d ff ff ff    	je     c00217e7 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00218ba:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00218c0:	e9 22 ff ff ff       	jmp    c00217e7 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00218c5:	85 f6                	test   esi,esi
c00218c7:	0f 84 1a ff ff ff    	je     c00217e7 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00218cd:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00218d3:	e9 0f ff ff ff       	jmp    c00217e7 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c00218d8 <SysClose(regs*)>:
c00218d8:	53                   	push   ebx
c00218d9:	83 ec 08             	sub    esp,0x8
c00218dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218e0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00218e3:	83 f8 02             	cmp    eax,0x2
c00218e6:	76 41                	jbe    c0021929 <SysClose(regs*)+0x51>
c00218e8:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00218ee:	83 fa 01             	cmp    edx,0x1
c00218f1:	76 2d                	jbe    c0021920 <SysClose(regs*)+0x48>
c00218f3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00218f8:	77 2f                	ja     c0021929 <SysClose(regs*)+0x51>
c00218fa:	83 ec 0c             	sub    esp,0xc
c00218fd:	50                   	push   eax
c00218fe:	e8 c0 66 ff ff       	call   c0017fc3 <KeGetFileFromDescriptor(int)>
c0021903:	89 c3                	mov    ebx,eax
c0021905:	89 04 24             	mov    DWORD PTR [esp],eax
c0021908:	e8 cb 8d ff ff       	call   c001a6d8 <File::close()>
c002190d:	83 c4 10             	add    esp,0x10
c0021910:	85 db                	test   ebx,ebx
c0021912:	74 0c                	je     c0021920 <SysClose(regs*)+0x48>
c0021914:	83 ec 0c             	sub    esp,0xc
c0021917:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021919:	53                   	push   ebx
c002191a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002191d:	83 c4 10             	add    esp,0x10
c0021920:	31 c0                	xor    eax,eax
c0021922:	31 d2                	xor    edx,edx
c0021924:	83 c4 08             	add    esp,0x8
c0021927:	5b                   	pop    ebx
c0021928:	c3                   	ret    
c0021929:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002192e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021933:	83 c4 08             	add    esp,0x8
c0021936:	5b                   	pop    ebx
c0021937:	c3                   	ret    

c0021938 <SysOpenDir(regs*)>:
c0021938:	56                   	push   esi
c0021939:	53                   	push   ebx
c002193a:	83 ec 04             	sub    esp,0x4
c002193d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021941:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0021944:	85 c9                	test   ecx,ecx
c0021946:	74 5d                	je     c00219a5 <SysOpenDir(regs*)+0x6d>
c0021948:	83 ec 0c             	sub    esp,0xc
c002194b:	68 14 01 00 00       	push   0x114
c0021950:	e8 72 4c ff ff       	call   c00165c7 <malloc>
c0021955:	83 c4 0c             	add    esp,0xc
c0021958:	89 c6                	mov    esi,eax
c002195a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002195f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021962:	50                   	push   eax
c0021963:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0021966:	52                   	push   edx
c0021967:	56                   	push   esi
c0021968:	e8 cf 91 ff ff       	call   c001ab3c <Directory::Directory(char const*, Process*)>
c002196d:	83 c4 10             	add    esp,0x10
c0021970:	85 f6                	test   esi,esi
c0021972:	74 31                	je     c00219a5 <SysOpenDir(regs*)+0x6d>
c0021974:	83 ec 0c             	sub    esp,0xc
c0021977:	56                   	push   esi
c0021978:	e8 87 92 ff ff       	call   c001ac04 <Directory::open()>
c002197d:	83 c4 10             	add    esp,0x10
c0021980:	85 c0                	test   eax,eax
c0021982:	75 21                	jne    c00219a5 <SysOpenDir(regs*)+0x6d>
c0021984:	83 ec 0c             	sub    esp,0xc
c0021987:	56                   	push   esi
c0021988:	e8 39 63 ff ff       	call   c0017cc6 <UnixFile::getFileDescriptor()>
c002198d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0021990:	83 c4 10             	add    esp,0x10
c0021993:	89 02                	mov    DWORD PTR [edx],eax
c0021995:	c1 f8 1f             	sar    eax,0x1f
c0021998:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c002199b:	83 c4 04             	add    esp,0x4
c002199e:	31 c0                	xor    eax,eax
c00219a0:	31 d2                	xor    edx,edx
c00219a2:	5b                   	pop    ebx
c00219a3:	5e                   	pop    esi
c00219a4:	c3                   	ret    
c00219a5:	83 c4 04             	add    esp,0x4
c00219a8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00219ad:	ba ff ff ff ff       	mov    edx,0xffffffff
c00219b2:	5b                   	pop    ebx
c00219b3:	5e                   	pop    esi
c00219b4:	c3                   	ret    

c00219b5 <SysMakeDir(regs*)>:
c00219b5:	56                   	push   esi
c00219b6:	53                   	push   ebx
c00219b7:	83 ec 10             	sub    esp,0x10
c00219ba:	68 14 01 00 00       	push   0x114
c00219bf:	e8 03 4c ff ff       	call   c00165c7 <malloc>
c00219c4:	83 c4 0c             	add    esp,0xc
c00219c7:	89 c3                	mov    ebx,eax
c00219c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00219ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00219d1:	50                   	push   eax
c00219d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00219d6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00219d9:	52                   	push   edx
c00219da:	53                   	push   ebx
c00219db:	e8 5c 91 ff ff       	call   c001ab3c <Directory::Directory(char const*, Process*)>
c00219e0:	83 c4 10             	add    esp,0x10
c00219e3:	85 db                	test   ebx,ebx
c00219e5:	74 2c                	je     c0021a13 <SysMakeDir(regs*)+0x5e>
c00219e7:	83 ec 0c             	sub    esp,0xc
c00219ea:	53                   	push   ebx
c00219eb:	e8 f4 93 ff ff       	call   c001ade4 <Directory::create()>
c00219f0:	89 c6                	mov    esi,eax
c00219f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00219f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00219f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00219fa:	83 c4 10             	add    esp,0x10
c00219fd:	31 c0                	xor    eax,eax
c00219ff:	85 f6                	test   esi,esi
c0021a01:	0f 95 c0             	setne  al
c0021a04:	31 d2                	xor    edx,edx
c0021a06:	f7 d8                	neg    eax
c0021a08:	83 d2 00             	adc    edx,0x0
c0021a0b:	83 c4 04             	add    esp,0x4
c0021a0e:	f7 da                	neg    edx
c0021a10:	5b                   	pop    ebx
c0021a11:	5e                   	pop    esi
c0021a12:	c3                   	ret    
c0021a13:	83 c4 04             	add    esp,0x4
c0021a16:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021a1b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021a20:	5b                   	pop    ebx
c0021a21:	5e                   	pop    esi
c0021a22:	c3                   	ret    

c0021a23 <SysCloseDir(regs*)>:
c0021a23:	53                   	push   ebx
c0021a24:	83 ec 08             	sub    esp,0x8
c0021a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a2b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021a2e:	8d 50 fd             	lea    edx,[eax-0x3]
c0021a31:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0021a37:	77 2f                	ja     c0021a68 <SysCloseDir(regs*)+0x45>
c0021a39:	83 ec 0c             	sub    esp,0xc
c0021a3c:	50                   	push   eax
c0021a3d:	e8 81 65 ff ff       	call   c0017fc3 <KeGetFileFromDescriptor(int)>
c0021a42:	89 c3                	mov    ebx,eax
c0021a44:	89 04 24             	mov    DWORD PTR [esp],eax
c0021a47:	e8 14 92 ff ff       	call   c001ac60 <Directory::close()>
c0021a4c:	83 c4 10             	add    esp,0x10
c0021a4f:	85 db                	test   ebx,ebx
c0021a51:	74 0c                	je     c0021a5f <SysCloseDir(regs*)+0x3c>
c0021a53:	83 ec 0c             	sub    esp,0xc
c0021a56:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021a58:	53                   	push   ebx
c0021a59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021a5c:	83 c4 10             	add    esp,0x10
c0021a5f:	31 c0                	xor    eax,eax
c0021a61:	31 d2                	xor    edx,edx
c0021a63:	83 c4 08             	add    esp,0x8
c0021a66:	5b                   	pop    ebx
c0021a67:	c3                   	ret    
c0021a68:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021a6d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021a72:	83 c4 08             	add    esp,0x8
c0021a75:	5b                   	pop    ebx
c0021a76:	c3                   	ret    

c0021a77 <SysWait(regs*)>:
c0021a77:	83 ec 10             	sub    esp,0x10
c0021a7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021a7e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0021a81:	52                   	push   edx
c0021a82:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0021a85:	51                   	push   ecx
c0021a86:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021a89:	50                   	push   eax
c0021a8a:	e8 01 3e 00 00       	call   c0025890 <waitTask(int, int*, int)>
c0021a8f:	83 c4 1c             	add    esp,0x1c
c0021a92:	89 c2                	mov    edx,eax
c0021a94:	c1 fa 1f             	sar    edx,0x1f
c0021a97:	c3                   	ret    

c0021a98 <SysNotImpl(regs*)>:
c0021a98:	83 ec 18             	sub    esp,0x18
c0021a9b:	68 e4 31 03 c0       	push   0xc00331e4
c0021aa0:	e8 e9 ec ff ff       	call   c002078e <KePanic(char const*)>
c0021aa5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021aaa:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021aaf:	83 c4 1c             	add    esp,0x1c
c0021ab2:	c3                   	ret    

c0021ab3 <SysPanic(regs*)>:
c0021ab3:	83 ec 18             	sub    esp,0x18
c0021ab6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021aba:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021abd:	50                   	push   eax
c0021abe:	e8 cb ec ff ff       	call   c002078e <KePanic(char const*)>
c0021ac3:	b8 01 00 00 00       	mov    eax,0x1
c0021ac8:	31 d2                	xor    edx,edx
c0021aca:	83 c4 1c             	add    esp,0x1c
c0021acd:	c3                   	ret    

c0021ace <SysRmdir(regs*)>:
c0021ace:	56                   	push   esi
c0021acf:	53                   	push   ebx
c0021ad0:	83 ec 20             	sub    esp,0x20
c0021ad3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021ad7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0021ada:	68 14 01 00 00       	push   0x114
c0021adf:	e8 e3 4a ff ff       	call   c00165c7 <malloc>
c0021ae4:	6a 00                	push   0x0
c0021ae6:	89 c3                	mov    ebx,eax
c0021ae8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021aed:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021af0:	50                   	push   eax
c0021af1:	56                   	push   esi
c0021af2:	53                   	push   ebx
c0021af3:	e8 86 8a ff ff       	call   c001a57e <File::File(char const*, Process*, bool)>
c0021af8:	83 c4 14             	add    esp,0x14
c0021afb:	53                   	push   ebx
c0021afc:	e8 47 8d ff ff       	call   c001a848 <File::unlink()>
c0021b01:	83 c4 10             	add    esp,0x10
c0021b04:	85 db                	test   ebx,ebx
c0021b06:	74 14                	je     c0021b1c <SysRmdir(regs*)+0x4e>
c0021b08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021b0c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021b0e:	83 ec 0c             	sub    esp,0xc
c0021b11:	53                   	push   ebx
c0021b12:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021b15:	83 c4 10             	add    esp,0x10
c0021b18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021b1c:	85 c0                	test   eax,eax
c0021b1e:	0f 95 c0             	setne  al
c0021b21:	31 d2                	xor    edx,edx
c0021b23:	0f b6 c0             	movzx  eax,al
c0021b26:	f7 d8                	neg    eax
c0021b28:	83 d2 00             	adc    edx,0x0
c0021b2b:	83 c4 14             	add    esp,0x14
c0021b2e:	f7 da                	neg    edx
c0021b30:	5b                   	pop    ebx
c0021b31:	5e                   	pop    esi
c0021b32:	c3                   	ret    

c0021b33 <SysUnlink(regs*)>:
c0021b33:	56                   	push   esi
c0021b34:	53                   	push   ebx
c0021b35:	83 ec 20             	sub    esp,0x20
c0021b38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021b3c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0021b3f:	68 14 01 00 00       	push   0x114
c0021b44:	e8 7e 4a ff ff       	call   c00165c7 <malloc>
c0021b49:	6a 00                	push   0x0
c0021b4b:	89 c3                	mov    ebx,eax
c0021b4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021b52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021b55:	50                   	push   eax
c0021b56:	56                   	push   esi
c0021b57:	53                   	push   ebx
c0021b58:	e8 21 8a ff ff       	call   c001a57e <File::File(char const*, Process*, bool)>
c0021b5d:	83 c4 14             	add    esp,0x14
c0021b60:	53                   	push   ebx
c0021b61:	e8 e2 8c ff ff       	call   c001a848 <File::unlink()>
c0021b66:	83 c4 10             	add    esp,0x10
c0021b69:	85 db                	test   ebx,ebx
c0021b6b:	74 14                	je     c0021b81 <SysUnlink(regs*)+0x4e>
c0021b6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021b71:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021b73:	83 ec 0c             	sub    esp,0xc
c0021b76:	53                   	push   ebx
c0021b77:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021b7a:	83 c4 10             	add    esp,0x10
c0021b7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021b81:	85 c0                	test   eax,eax
c0021b83:	0f 95 c0             	setne  al
c0021b86:	31 d2                	xor    edx,edx
c0021b88:	0f b6 c0             	movzx  eax,al
c0021b8b:	f7 d8                	neg    eax
c0021b8d:	83 d2 00             	adc    edx,0x0
c0021b90:	83 c4 14             	add    esp,0x14
c0021b93:	f7 da                	neg    edx
c0021b95:	5b                   	pop    ebx
c0021b96:	5e                   	pop    esi
c0021b97:	c3                   	ret    

c0021b98 <SysGetArgv(regs*)>:
c0021b98:	83 ec 0c             	sub    esp,0xc
c0021b9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021b9f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0021ba2:	85 c0                	test   eax,eax
c0021ba4:	78 2c                	js     c0021bd2 <SysGetArgv(regs*)+0x3a>
c0021ba6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0021bac:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0021baf:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0021bb5:	7d 1b                	jge    c0021bd2 <SysGetArgv(regs*)+0x3a>
c0021bb7:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0021bbe:	85 c0                	test   eax,eax
c0021bc0:	74 18                	je     c0021bda <SysGetArgv(regs*)+0x42>
c0021bc2:	83 ec 08             	sub    esp,0x8
c0021bc5:	50                   	push   eax
c0021bc6:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0021bc9:	50                   	push   eax
c0021bca:	e8 71 ea fd ff       	call   c0000640 <strcpy>
c0021bcf:	83 c4 10             	add    esp,0x10
c0021bd2:	31 c0                	xor    eax,eax
c0021bd4:	31 d2                	xor    edx,edx
c0021bd6:	83 c4 0c             	add    esp,0xc
c0021bd9:	c3                   	ret    
c0021bda:	b8 01 00 00 00       	mov    eax,0x1
c0021bdf:	31 d2                	xor    edx,edx
c0021be1:	83 c4 0c             	add    esp,0xc
c0021be4:	c3                   	ret    

c0021be5 <SysUSleep(regs*)>:
c0021be5:	83 ec 1c             	sub    esp,0x1c
c0021be8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0021bec:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0021bef:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0021bf2:	6a 00                	push   0x0
c0021bf4:	6a 64                	push   0x64
c0021bf6:	52                   	push   edx
c0021bf7:	50                   	push   eax
c0021bf8:	e8 e3 d0 00 00       	call   c002ece0 <__udivdi3>
c0021bfd:	83 c4 14             	add    esp,0x14
c0021c00:	50                   	push   eax
c0021c01:	e8 6e 3d 00 00       	call   c0025974 <milliTenthSleep(unsigned int)>
c0021c06:	31 c0                	xor    eax,eax
c0021c08:	31 d2                	xor    edx,edx
c0021c0a:	83 c4 1c             	add    esp,0x1c
c0021c0d:	c3                   	ret    

c0021c0e <SysSpawn(regs*)>:
c0021c0e:	56                   	push   esi
c0021c0f:	53                   	push   ebx
c0021c10:	83 ec 04             	sub    esp,0x4
c0021c13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021c17:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021c1a:	85 f6                	test   esi,esi
c0021c1c:	75 0a                	jne    c0021c28 <SysSpawn(regs*)+0x1a>
c0021c1e:	83 c4 04             	add    esp,0x4
c0021c21:	31 c0                	xor    eax,eax
c0021c23:	31 d2                	xor    edx,edx
c0021c25:	5b                   	pop    ebx
c0021c26:	5e                   	pop    esi
c0021c27:	c3                   	ret    
c0021c28:	83 ec 0c             	sub    esp,0xc
c0021c2b:	68 24 07 00 00       	push   0x724
c0021c30:	e8 92 49 ff ff       	call   c00165c7 <malloc>
c0021c35:	83 c4 10             	add    esp,0x10
c0021c38:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0021c3b:	89 c6                	mov    esi,eax
c0021c3d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021c40:	85 c9                	test   ecx,ecx
c0021c42:	75 39                	jne    c0021c7d <SysSpawn(regs*)+0x6f>
c0021c44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021c49:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021c4c:	52                   	push   edx
c0021c4d:	50                   	push   eax
c0021c4e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021c51:	50                   	push   eax
c0021c52:	56                   	push   esi
c0021c53:	e8 c0 34 00 00       	call   c0025118 <Process::Process(char const*, Process*, char**)>
c0021c58:	83 c4 10             	add    esp,0x10
c0021c5b:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0021c62:	75 ba                	jne    c0021c1e <SysSpawn(regs*)+0x10>
c0021c64:	83 ec 0c             	sub    esp,0xc
c0021c67:	56                   	push   esi
c0021c68:	e8 eb 39 00 00       	call   c0025658 <Process::createUserThread()>
c0021c6d:	8b 06                	mov    eax,DWORD PTR [esi]
c0021c6f:	83 c4 10             	add    esp,0x10
c0021c72:	89 c2                	mov    edx,eax
c0021c74:	83 c4 04             	add    esp,0x4
c0021c77:	c1 fa 1f             	sar    edx,0x1f
c0021c7a:	5b                   	pop    ebx
c0021c7b:	5e                   	pop    esi
c0021c7c:	c3                   	ret    
c0021c7d:	31 c0                	xor    eax,eax
c0021c7f:	eb cb                	jmp    c0021c4c <SysSpawn(regs*)+0x3e>

c0021c81 <SysGetEnv(regs*)>:
c0021c81:	57                   	push   edi
c0021c82:	56                   	push   esi
c0021c83:	53                   	push   ebx
c0021c84:	83 ec 1c             	sub    esp,0x1c
c0021c87:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021c8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021c90:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0021c93:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021c96:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0021c99:	51                   	push   ecx
c0021c9a:	e8 a8 e7 ff ff       	call   c0020447 <KeGetProcessTotalEnvCount(Process*)>
c0021c9f:	83 c4 10             	add    esp,0x10
c0021ca2:	39 c7                	cmp    edi,eax
c0021ca4:	7c 14                	jl     c0021cba <SysGetEnv(regs*)+0x39>
c0021ca6:	85 f6                	test   esi,esi
c0021ca8:	75 0b                	jne    c0021cb5 <SysGetEnv(regs*)+0x34>
c0021caa:	83 c4 10             	add    esp,0x10
c0021cad:	31 c0                	xor    eax,eax
c0021caf:	5b                   	pop    ebx
c0021cb0:	31 d2                	xor    edx,edx
c0021cb2:	5e                   	pop    esi
c0021cb3:	5f                   	pop    edi
c0021cb4:	c3                   	ret    
c0021cb5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021cb8:	eb f0                	jmp    c0021caa <SysGetEnv(regs*)+0x29>
c0021cba:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021cbe:	83 ec 04             	sub    esp,0x4
c0021cc1:	57                   	push   edi
c0021cc2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0021cc8:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0021ccb:	57                   	push   edi
c0021ccc:	50                   	push   eax
c0021ccd:	e8 95 e7 ff ff       	call   c0020467 <KeGetProcessEnvPair(Process*, int)>
c0021cd2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021cd5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021cd9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0021cdd:	83 c4 0c             	add    esp,0xc
c0021ce0:	85 d2                	test   edx,edx
c0021ce2:	75 23                	jne    c0021d07 <SysGetEnv(regs*)+0x86>
c0021ce4:	83 ec 0c             	sub    esp,0xc
c0021ce7:	50                   	push   eax
c0021ce8:	e8 83 e8 fd ff       	call   c0000570 <strlen>
c0021ced:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021cf0:	89 c3                	mov    ebx,eax
c0021cf2:	e8 79 e8 fd ff       	call   c0000570 <strlen>
c0021cf7:	83 c4 10             	add    esp,0x10
c0021cfa:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0021cfe:	83 c4 10             	add    esp,0x10
c0021d01:	31 d2                	xor    edx,edx
c0021d03:	5b                   	pop    ebx
c0021d04:	5e                   	pop    esi
c0021d05:	5f                   	pop    edi
c0021d06:	c3                   	ret    
c0021d07:	83 ec 08             	sub    esp,0x8
c0021d0a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021d0d:	50                   	push   eax
c0021d0e:	56                   	push   esi
c0021d0f:	e8 2c e9 fd ff       	call   c0000640 <strcpy>
c0021d14:	58                   	pop    eax
c0021d15:	5a                   	pop    edx
c0021d16:	68 fe 31 03 c0       	push   0xc00331fe
c0021d1b:	56                   	push   esi
c0021d1c:	e8 1f eb fd ff       	call   c0000840 <strcat>
c0021d21:	59                   	pop    ecx
c0021d22:	5b                   	pop    ebx
c0021d23:	57                   	push   edi
c0021d24:	56                   	push   esi
c0021d25:	e8 16 eb fd ff       	call   c0000840 <strcat>
c0021d2a:	83 c4 10             	add    esp,0x10
c0021d2d:	e9 78 ff ff ff       	jmp    c0021caa <SysGetEnv(regs*)+0x29>

c0021d32 <SysSetFatAttrib(regs*)>:
c0021d32:	57                   	push   edi
c0021d33:	56                   	push   esi
c0021d34:	53                   	push   ebx
c0021d35:	83 ec 1c             	sub    esp,0x1c
c0021d38:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021d3c:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0021d3f:	68 14 01 00 00       	push   0x114
c0021d44:	e8 7e 48 ff ff       	call   c00165c7 <malloc>
c0021d49:	83 c4 0c             	add    esp,0xc
c0021d4c:	89 c3                	mov    ebx,eax
c0021d4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021d53:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021d56:	50                   	push   eax
c0021d57:	57                   	push   edi
c0021d58:	53                   	push   ebx
c0021d59:	e8 fe 88 ff ff       	call   c001a65c <File::File(char const*, Process*)>
c0021d5e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0021d61:	83 c4 0c             	add    esp,0xc
c0021d64:	0f b6 d4             	movzx  edx,ah
c0021d67:	0f b6 c0             	movzx  eax,al
c0021d6a:	52                   	push   edx
c0021d6b:	50                   	push   eax
c0021d6c:	53                   	push   ebx
c0021d6d:	e8 70 8b ff ff       	call   c001a8e2 <File::chfatattr(unsigned char, unsigned char)>
c0021d72:	83 c4 10             	add    esp,0x10
c0021d75:	85 db                	test   ebx,ebx
c0021d77:	74 14                	je     c0021d8d <SysSetFatAttrib(regs*)+0x5b>
c0021d79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021d7d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021d7f:	83 ec 0c             	sub    esp,0xc
c0021d82:	53                   	push   ebx
c0021d83:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021d86:	83 c4 10             	add    esp,0x10
c0021d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d8d:	85 c0                	test   eax,eax
c0021d8f:	0f 95 c0             	setne  al
c0021d92:	31 d2                	xor    edx,edx
c0021d94:	0f b6 c0             	movzx  eax,al
c0021d97:	f7 d8                	neg    eax
c0021d99:	83 d2 00             	adc    edx,0x0
c0021d9c:	83 c4 10             	add    esp,0x10
c0021d9f:	f7 da                	neg    edx
c0021da1:	5b                   	pop    ebx
c0021da2:	5e                   	pop    esi
c0021da3:	5f                   	pop    edi
c0021da4:	c3                   	ret    

c0021da5 <SysPipe(regs*)>:
c0021da5:	57                   	push   edi
c0021da6:	56                   	push   esi
c0021da7:	53                   	push   ebx
c0021da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dac:	83 ec 0c             	sub    esp,0xc
c0021daf:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0021db2:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0021db5:	6a 20                	push   0x20
c0021db7:	e8 0b 48 ff ff       	call   c00165c7 <malloc>
c0021dbc:	89 c3                	mov    ebx,eax
c0021dbe:	58                   	pop    eax
c0021dbf:	5a                   	pop    edx
c0021dc0:	68 00 50 00 00       	push   0x5000
c0021dc5:	53                   	push   ebx
c0021dc6:	e8 6d 51 ff ff       	call   c0016f38 <Pipe::Pipe(int)>
c0021dcb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021dce:	e8 f3 5e ff ff       	call   c0017cc6 <UnixFile::getFileDescriptor()>
c0021dd3:	89 07                	mov    DWORD PTR [edi],eax
c0021dd5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021dd8:	e8 e9 5e ff ff       	call   c0017cc6 <UnixFile::getFileDescriptor()>
c0021ddd:	83 c4 10             	add    esp,0x10
c0021de0:	89 06                	mov    DWORD PTR [esi],eax
c0021de2:	31 d2                	xor    edx,edx
c0021de4:	5b                   	pop    ebx
c0021de5:	31 c0                	xor    eax,eax
c0021de7:	5e                   	pop    esi
c0021de8:	5f                   	pop    edi
c0021de9:	c3                   	ret    

c0021dea <SysGetUnixTime(regs*)>:
c0021dea:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0021def:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021df5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021df9:	e9 68 93 ff ff       	jmp    c001b166 <Clock::timeInSecondsLocal()>

c0021dfe <string_ends_with(char const*, char const*)>:
c0021dfe:	57                   	push   edi
c0021dff:	56                   	push   esi
c0021e00:	53                   	push   ebx
c0021e01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021e05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021e09:	83 ec 0c             	sub    esp,0xc
c0021e0c:	53                   	push   ebx
c0021e0d:	e8 5e e7 fd ff       	call   c0000570 <strlen>
c0021e12:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021e15:	89 c6                	mov    esi,eax
c0021e17:	e8 54 e7 fd ff       	call   c0000570 <strlen>
c0021e1c:	83 c4 10             	add    esp,0x10
c0021e1f:	39 c6                	cmp    esi,eax
c0021e21:	7d 06                	jge    c0021e29 <string_ends_with(char const*, char const*)+0x2b>
c0021e23:	5b                   	pop    ebx
c0021e24:	31 c0                	xor    eax,eax
c0021e26:	5e                   	pop    esi
c0021e27:	5f                   	pop    edi
c0021e28:	c3                   	ret    
c0021e29:	83 ec 08             	sub    esp,0x8
c0021e2c:	29 c6                	sub    esi,eax
c0021e2e:	57                   	push   edi
c0021e2f:	01 f3                	add    ebx,esi
c0021e31:	53                   	push   ebx
c0021e32:	e8 19 e9 fd ff       	call   c0000750 <strcmp>
c0021e37:	83 c4 10             	add    esp,0x10
c0021e3a:	85 c0                	test   eax,eax
c0021e3c:	5b                   	pop    ebx
c0021e3d:	0f 94 c0             	sete   al
c0021e40:	5e                   	pop    esi
c0021e41:	0f b6 c0             	movzx  eax,al
c0021e44:	5f                   	pop    edi
c0021e45:	c3                   	ret    

c0021e46 <SysOpen(regs*)>:
c0021e46:	56                   	push   esi
c0021e47:	53                   	push   ebx
c0021e48:	81 ec 04 01 00 00    	sub    esp,0x104
c0021e4e:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0021e55:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021e58:	85 c0                	test   eax,eax
c0021e5a:	0f 84 bc 01 00 00    	je     c002201c <SysOpen(regs*)+0x1d6>
c0021e60:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021e63:	85 c0                	test   eax,eax
c0021e65:	0f 84 b1 01 00 00    	je     c002201c <SysOpen(regs*)+0x1d6>
c0021e6b:	6a 00                	push   0x0
c0021e6d:	68 00 32 03 c0       	push   0xc0033200
c0021e72:	50                   	push   eax
c0021e73:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0021e77:	56                   	push   esi
c0021e78:	e8 e7 84 ff ff       	call   c001a364 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021e7d:	89 34 24             	mov    DWORD PTR [esp],esi
c0021e80:	e8 eb e6 fd ff       	call   c0000570 <strlen>
c0021e85:	83 c4 10             	add    esp,0x10
c0021e88:	83 e8 01             	sub    eax,0x1
c0021e8b:	74 21                	je     c0021eae <SysOpen(regs*)+0x68>
c0021e8d:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0021e91:	eb 12                	jmp    c0021ea5 <SysOpen(regs*)+0x5f>
c0021e93:	83 fa 3a             	cmp    edx,0x3a
c0021e96:	74 12                	je     c0021eaa <SysOpen(regs*)+0x64>
c0021e98:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0021e9c:	83 e8 01             	sub    eax,0x1
c0021e9f:	74 0d                	je     c0021eae <SysOpen(regs*)+0x68>
c0021ea1:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0021ea5:	83 fa 2e             	cmp    edx,0x2e
c0021ea8:	75 e9                	jne    c0021e93 <SysOpen(regs*)+0x4d>
c0021eaa:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0021eae:	83 ec 08             	sub    esp,0x8
c0021eb1:	68 04 32 03 c0       	push   0xc0033204
c0021eb6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021eb9:	50                   	push   eax
c0021eba:	e8 3f ff ff ff       	call   c0021dfe <string_ends_with(char const*, char const*)>
c0021ebf:	83 c4 10             	add    esp,0x10
c0021ec2:	85 c0                	test   eax,eax
c0021ec4:	74 1d                	je     c0021ee3 <SysOpen(regs*)+0x9d>
c0021ec6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021ec9:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0021ecf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021ed6:	81 c4 04 01 00 00    	add    esp,0x104
c0021edc:	31 c0                	xor    eax,eax
c0021ede:	31 d2                	xor    edx,edx
c0021ee0:	5b                   	pop    ebx
c0021ee1:	5e                   	pop    esi
c0021ee2:	c3                   	ret    
c0021ee3:	83 ec 08             	sub    esp,0x8
c0021ee6:	68 09 32 03 c0       	push   0xc0033209
c0021eeb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021eee:	50                   	push   eax
c0021eef:	e8 0a ff ff ff       	call   c0021dfe <string_ends_with(char const*, char const*)>
c0021ef4:	83 c4 10             	add    esp,0x10
c0021ef7:	85 c0                	test   eax,eax
c0021ef9:	75 cb                	jne    c0021ec6 <SysOpen(regs*)+0x80>
c0021efb:	83 ec 08             	sub    esp,0x8
c0021efe:	68 05 32 03 c0       	push   0xc0033205
c0021f03:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021f06:	50                   	push   eax
c0021f07:	e8 44 e8 fd ff       	call   c0000750 <strcmp>
c0021f0c:	83 c4 10             	add    esp,0x10
c0021f0f:	85 c0                	test   eax,eax
c0021f11:	74 b3                	je     c0021ec6 <SysOpen(regs*)+0x80>
c0021f13:	83 ec 08             	sub    esp,0x8
c0021f16:	68 04 32 03 c0       	push   0xc0033204
c0021f1b:	56                   	push   esi
c0021f1c:	e8 dd fe ff ff       	call   c0021dfe <string_ends_with(char const*, char const*)>
c0021f21:	83 c4 10             	add    esp,0x10
c0021f24:	85 c0                	test   eax,eax
c0021f26:	75 9e                	jne    c0021ec6 <SysOpen(regs*)+0x80>
c0021f28:	83 ec 08             	sub    esp,0x8
c0021f2b:	68 0e 32 03 c0       	push   0xc003320e
c0021f30:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021f33:	50                   	push   eax
c0021f34:	e8 c5 fe ff ff       	call   c0021dfe <string_ends_with(char const*, char const*)>
c0021f39:	83 c4 10             	add    esp,0x10
c0021f3c:	85 c0                	test   eax,eax
c0021f3e:	0f 85 eb 00 00 00    	jne    c002202f <SysOpen(regs*)+0x1e9>
c0021f44:	83 ec 08             	sub    esp,0x8
c0021f47:	68 13 32 03 c0       	push   0xc0033213
c0021f4c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021f4f:	50                   	push   eax
c0021f50:	e8 a9 fe ff ff       	call   c0021dfe <string_ends_with(char const*, char const*)>
c0021f55:	83 c4 10             	add    esp,0x10
c0021f58:	85 c0                	test   eax,eax
c0021f5a:	0f 85 cf 00 00 00    	jne    c002202f <SysOpen(regs*)+0x1e9>
c0021f60:	83 ec 08             	sub    esp,0x8
c0021f63:	68 0f 32 03 c0       	push   0xc003320f
c0021f68:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0021f6b:	51                   	push   ecx
c0021f6c:	e8 df e7 fd ff       	call   c0000750 <strcmp>
c0021f71:	83 c4 10             	add    esp,0x10
c0021f74:	85 c0                	test   eax,eax
c0021f76:	0f 84 b3 00 00 00    	je     c002202f <SysOpen(regs*)+0x1e9>
c0021f7c:	83 ec 08             	sub    esp,0x8
c0021f7f:	68 0e 32 03 c0       	push   0xc003320e
c0021f84:	56                   	push   esi
c0021f85:	e8 74 fe ff ff       	call   c0021dfe <string_ends_with(char const*, char const*)>
c0021f8a:	83 c4 10             	add    esp,0x10
c0021f8d:	85 c0                	test   eax,eax
c0021f8f:	0f 85 9a 00 00 00    	jne    c002202f <SysOpen(regs*)+0x1e9>
c0021f95:	83 ec 0c             	sub    esp,0xc
c0021f98:	68 14 01 00 00       	push   0x114
c0021f9d:	e8 25 46 ff ff       	call   c00165c7 <malloc>
c0021fa2:	83 c4 0c             	add    esp,0xc
c0021fa5:	89 c6                	mov    esi,eax
c0021fa7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021fac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021faf:	50                   	push   eax
c0021fb0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0021fb3:	52                   	push   edx
c0021fb4:	56                   	push   esi
c0021fb5:	e8 a2 86 ff ff       	call   c001a65c <File::File(char const*, Process*)>
c0021fba:	83 c4 10             	add    esp,0x10
c0021fbd:	85 f6                	test   esi,esi
c0021fbf:	74 5b                	je     c002201c <SysOpen(regs*)+0x1d6>
c0021fc1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021fc4:	0f b6 c2             	movzx  eax,dl
c0021fc7:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0021fca:	89 d0                	mov    eax,edx
c0021fcc:	83 e0 01             	and    eax,0x1
c0021fcf:	f6 c2 02             	test   dl,0x2
c0021fd2:	74 03                	je     c0021fd7 <SysOpen(regs*)+0x191>
c0021fd4:	83 c8 02             	or     eax,0x2
c0021fd7:	f6 c2 04             	test   dl,0x4
c0021fda:	74 03                	je     c0021fdf <SysOpen(regs*)+0x199>
c0021fdc:	83 c8 04             	or     eax,0x4
c0021fdf:	f6 c2 08             	test   dl,0x8
c0021fe2:	74 03                	je     c0021fe7 <SysOpen(regs*)+0x1a1>
c0021fe4:	83 c8 0a             	or     eax,0xa
c0021fe7:	80 e2 10             	and    dl,0x10
c0021fea:	74 03                	je     c0021fef <SysOpen(regs*)+0x1a9>
c0021fec:	83 c8 12             	or     eax,0x12
c0021fef:	83 ec 08             	sub    esp,0x8
c0021ff2:	50                   	push   eax
c0021ff3:	56                   	push   esi
c0021ff4:	e8 81 86 ff ff       	call   c001a67a <File::open(FileOpenMode)>
c0021ff9:	83 c4 10             	add    esp,0x10
c0021ffc:	85 c0                	test   eax,eax
c0021ffe:	75 1c                	jne    c002201c <SysOpen(regs*)+0x1d6>
c0022000:	83 ec 0c             	sub    esp,0xc
c0022003:	56                   	push   esi
c0022004:	e8 bd 5c ff ff       	call   c0017cc6 <UnixFile::getFileDescriptor()>
c0022009:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c002200c:	83 c4 10             	add    esp,0x10
c002200f:	89 02                	mov    DWORD PTR [edx],eax
c0022011:	c1 f8 1f             	sar    eax,0x1f
c0022014:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0022017:	e9 ba fe ff ff       	jmp    c0021ed6 <SysOpen(regs*)+0x90>
c002201c:	81 c4 04 01 00 00    	add    esp,0x104
c0022022:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0022027:	ba ff ff ff ff       	mov    edx,0xffffffff
c002202c:	5b                   	pop    ebx
c002202d:	5e                   	pop    esi
c002202e:	c3                   	ret    
c002202f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0022032:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0022038:	e9 92 fe ff ff       	jmp    c0021ecf <SysOpen(regs*)+0x89>

c002203d <KeSystemCall(regs*, void*)>:
c002203d:	53                   	push   ebx
c002203e:	83 ec 08             	sub    esp,0x8
c0022041:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022045:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0022048:	83 f8 3e             	cmp    eax,0x3e
c002204b:	77 16                	ja     c0022063 <KeSystemCall(regs*, void*)+0x26>
c002204d:	8b 14 85 e0 4a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcb520]
c0022054:	85 d2                	test   edx,edx
c0022056:	74 0b                	je     c0022063 <KeSystemCall(regs*, void*)+0x26>
c0022058:	83 ec 0c             	sub    esp,0xc
c002205b:	53                   	push   ebx
c002205c:	ff d2                	call   edx
c002205e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0022061:	eb 0d                	jmp    c0022070 <KeSystemCall(regs*, void*)+0x33>
c0022063:	52                   	push   edx
c0022064:	52                   	push   edx
c0022065:	50                   	push   eax
c0022066:	68 18 32 03 c0       	push   0xc0033218
c002206b:	e8 e5 73 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0022070:	83 c4 10             	add    esp,0x10
c0022073:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0022078:	31 d2                	xor    edx,edx
c002207a:	83 c4 08             	add    esp,0x8
c002207d:	5b                   	pop    ebx
c002207e:	c3                   	ret    
c002207f:	90                   	nop

c0022080 <KeSwitchEndian16(unsigned short)>:
c0022080:	83 ec 04             	sub    esp,0x4
c0022083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022087:	66 89 04 24          	mov    WORD PTR [esp],ax
c002208b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c002208f:	c1 f8 08             	sar    eax,0x8
c0022092:	89 c2                	mov    edx,eax
c0022094:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0022098:	c1 e0 08             	shl    eax,0x8
c002209b:	09 d0                	or     eax,edx
c002209d:	83 c4 04             	add    esp,0x4
c00220a0:	c3                   	ret    
c00220a1:	8d 76 00             	lea    esi,[esi+0x0]

c00220a4 <KeSwitchEndian32(unsigned int)>:
c00220a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220a8:	c1 e8 18             	shr    eax,0x18
c00220ab:	89 c2                	mov    edx,eax
c00220ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220b1:	c1 e0 08             	shl    eax,0x8
c00220b4:	25 00 00 ff 00       	and    eax,0xff0000
c00220b9:	09 c2                	or     edx,eax
c00220bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220bf:	c1 e8 08             	shr    eax,0x8
c00220c2:	25 00 ff 00 00       	and    eax,0xff00
c00220c7:	09 c2                	or     edx,eax
c00220c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220cd:	c1 e0 18             	shl    eax,0x18
c00220d0:	09 d0                	or     eax,edx
c00220d2:	c3                   	ret    
c00220d3:	90                   	nop

c00220d4 <EthernetCRC32(unsigned char*, int)>:
c00220d4:	83 ec 10             	sub    esp,0x10
c00220d7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00220dc:	75 0a                	jne    c00220e8 <EthernetCRC32(unsigned char*, int)+0x14>
c00220de:	b8 00 00 00 00       	mov    eax,0x0
c00220e3:	e9 8c 00 00 00       	jmp    c0022174 <EthernetCRC32(unsigned char*, int)+0xa0>
c00220e8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00220ed:	7f 09                	jg     c00220f8 <EthernetCRC32(unsigned char*, int)+0x24>
c00220ef:	b8 00 00 00 00       	mov    eax,0x0
c00220f4:	eb 7e                	jmp    c0022174 <EthernetCRC32(unsigned char*, int)+0xa0>
c00220f6:	66 90                	xchg   ax,ax
c00220f8:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0022100:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022108:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002210c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0022110:	7d 5a                	jge    c002216c <EthernetCRC32(unsigned char*, int)+0x98>
c0022112:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022116:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002211a:	01 d0                	add    eax,edx
c002211c:	8a 00                	mov    al,BYTE PTR [eax]
c002211e:	0f b6 c0             	movzx  eax,al
c0022121:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0022125:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002212d:	8d 76 00             	lea    esi,[esi+0x0]
c0022130:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0022135:	7f 2d                	jg     c0022164 <EthernetCRC32(unsigned char*, int)+0x90>
c0022137:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002213b:	83 e0 01             	and    eax,0x1
c002213e:	74 10                	je     c0022150 <EthernetCRC32(unsigned char*, int)+0x7c>
c0022140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022144:	d1 e8                	shr    eax,1
c0022146:	35 20 83 b8 ed       	xor    eax,0xedb88320
c002214b:	eb 0b                	jmp    c0022158 <EthernetCRC32(unsigned char*, int)+0x84>
c002214d:	8d 76 00             	lea    esi,[esi+0x0]
c0022150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022154:	d1 e8                	shr    eax,1
c0022156:	66 90                	xchg   ax,ax
c0022158:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002215c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0022161:	eb cd                	jmp    c0022130 <EthernetCRC32(unsigned char*, int)+0x5c>
c0022163:	90                   	nop
c0022164:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0022169:	eb 9d                	jmp    c0022108 <EthernetCRC32(unsigned char*, int)+0x34>
c002216b:	90                   	nop
c002216c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022170:	f7 d0                	not    eax
c0022172:	66 90                	xchg   ax,ax
c0022174:	83 c4 10             	add    esp,0x10
c0022177:	c3                   	ret    

c0022178 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0022178:	83 ec 2c             	sub    esp,0x2c
c002217b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002217f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0022184:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022188:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002218c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022190:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0022193:	0f b7 c0             	movzx  eax,ax
c0022196:	3d 06 08 00 00       	cmp    eax,0x806
c002219b:	75 13                	jne    c00221b0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c002219d:	83 ec 0c             	sub    esp,0xc
c00221a0:	68 2c 32 03 c0       	push   0xc003322c
c00221a5:	e8 ab 72 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c00221aa:	83 c4 10             	add    esp,0x10
c00221ad:	eb 25                	jmp    c00221d4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00221af:	90                   	nop
c00221b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00221b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00221b7:	0f b7 c0             	movzx  eax,ax
c00221ba:	3d 00 08 00 00       	cmp    eax,0x800
c00221bf:	75 13                	jne    c00221d4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00221c1:	83 ec 0c             	sub    esp,0xc
c00221c4:	68 42 32 03 c0       	push   0xc0033242
c00221c9:	e8 87 72 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c00221ce:	83 c4 10             	add    esp,0x10
c00221d1:	8d 76 00             	lea    esi,[esi+0x0]
c00221d4:	90                   	nop
c00221d5:	83 c4 2c             	add    esp,0x2c
c00221d8:	c3                   	ret    
c00221d9:	66 90                	xchg   ax,ax
c00221db:	90                   	nop

c00221dc <KeNetCreateSemaphore>:
c00221dc:	53                   	push   ebx
c00221dd:	83 ec 18             	sub    esp,0x18
c00221e0:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00221e8:	83 ec 0c             	sub    esp,0xc
c00221eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221ef:	e8 d3 43 ff ff       	call   c00165c7 <malloc>
c00221f4:	83 c4 10             	add    esp,0x10
c00221f7:	89 c3                	mov    ebx,eax
c00221f9:	83 ec 08             	sub    esp,0x8
c00221fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022200:	53                   	push   ebx
c0022201:	e8 32 e9 ff ff       	call   c0020b38 <Semaphore::Semaphore(int)>
c0022206:	83 c4 10             	add    esp,0x10
c0022209:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002220d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022211:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022215:	89 10                	mov    DWORD PTR [eax],edx
c0022217:	90                   	nop
c0022218:	83 c4 18             	add    esp,0x18
c002221b:	5b                   	pop    ebx
c002221c:	c3                   	ret    
c002221d:	8d 76 00             	lea    esi,[esi+0x0]

c0022220 <KeNetFreeSemaphore>:
c0022220:	83 ec 0c             	sub    esp,0xc
c0022223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022227:	8b 00                	mov    eax,DWORD PTR [eax]
c0022229:	83 ec 08             	sub    esp,0x8
c002222c:	6a 10                	push   0x10
c002222e:	50                   	push   eax
c002222f:	e8 f4 70 ff ff       	call   c0019328 <operator delete(void*, unsigned long)>
c0022234:	83 c4 10             	add    esp,0x10
c0022237:	90                   	nop
c0022238:	83 c4 0c             	add    esp,0xc
c002223b:	c3                   	ret    

c002223c <KeNetSignalSemaphore>:
c002223c:	83 ec 0c             	sub    esp,0xc
c002223f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022243:	8b 00                	mov    eax,DWORD PTR [eax]
c0022245:	83 ec 0c             	sub    esp,0xc
c0022248:	50                   	push   eax
c0022249:	e8 4a ec ff ff       	call   c0020e98 <Semaphore::release()>
c002224e:	83 c4 10             	add    esp,0x10
c0022251:	90                   	nop
c0022252:	83 c4 0c             	add    esp,0xc
c0022255:	c3                   	ret    
c0022256:	66 90                	xchg   ax,ax

c0022258 <KeNetWaitSemaphore>:
c0022258:	83 ec 0c             	sub    esp,0xc
c002225b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002225f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022261:	83 ec 08             	sub    esp,0x8
c0022264:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022268:	50                   	push   eax
c0022269:	e8 66 ea ff ff       	call   c0020cd4 <Semaphore::acquire(int)>
c002226e:	83 c4 10             	add    esp,0x10
c0022271:	83 c4 0c             	add    esp,0xc
c0022274:	c3                   	ret    
c0022275:	8d 76 00             	lea    esi,[esi+0x0]

c0022278 <KeNetCreateThread>:
c0022278:	83 ec 0c             	sub    esp,0xc
c002227b:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0022280:	68 80 00 00 00       	push   0x80
c0022285:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022289:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002228d:	50                   	push   eax
c002228e:	e8 b9 32 00 00       	call   c002554c <Process::createThread(void (*)(void*), void*, int)>
c0022293:	83 c4 10             	add    esp,0x10
c0022296:	90                   	nop
c0022297:	83 c4 0c             	add    esp,0xc
c002229a:	c3                   	ret    
c002229b:	90                   	nop

c002229c <KeCPanic>:
c002229c:	83 ec 0c             	sub    esp,0xc
c002229f:	83 ec 0c             	sub    esp,0xc
c00222a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222a6:	e8 e3 e4 ff ff       	call   c002078e <KePanic(char const*)>
c00222ab:	83 c4 10             	add    esp,0x10
c00222ae:	90                   	nop
c00222af:	83 c4 0c             	add    esp,0xc
c00222b2:	c3                   	ret    
c00222b3:	90                   	nop

c00222b4 <KeCPuts>:
c00222b4:	83 ec 0c             	sub    esp,0xc
c00222b7:	83 ec 08             	sub    esp,0x8
c00222ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00222be:	68 12 39 03 c0       	push   0xc0033912
c00222c3:	e8 8d 71 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c00222c8:	83 c4 10             	add    esp,0x10
c00222cb:	90                   	nop
c00222cc:	83 c4 0c             	add    esp,0xc
c00222cf:	c3                   	ret    

c00222d0 <CmOpen(char const*)>:
c00222d0:	57                   	push   edi
c00222d1:	56                   	push   esi
c00222d2:	53                   	push   ebx
c00222d3:	83 ec 1c             	sub    esp,0x1c
c00222d6:	6a 30                	push   0x30
c00222d8:	e8 ea 42 ff ff       	call   c00165c7 <malloc>
c00222dd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00222e4:	89 c3                	mov    ebx,eax
c00222e6:	e8 dc 42 ff ff       	call   c00165c7 <malloc>
c00222eb:	83 c4 0c             	add    esp,0xc
c00222ee:	89 c6                	mov    esi,eax
c00222f0:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c00222f6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00222fa:	50                   	push   eax
c00222fb:	e8 5c 83 ff ff       	call   c001a65c <File::File(char const*, Process*)>
c0022300:	83 c4 0c             	add    esp,0xc
c0022303:	89 33                	mov    DWORD PTR [ebx],esi
c0022305:	8d 44 24 07          	lea    eax,[esp+0x7]
c0022309:	50                   	push   eax
c002230a:	8d 44 24 10          	lea    eax,[esp+0x10]
c002230e:	50                   	push   eax
c002230f:	56                   	push   esi
c0022310:	e8 67 86 ff ff       	call   c001a97c <File::stat(unsigned long long*, bool*)>
c0022315:	5a                   	pop    edx
c0022316:	59                   	pop    ecx
c0022317:	6a 01                	push   0x1
c0022319:	ff 33                	push   DWORD PTR [ebx]
c002231b:	e8 5a 83 ff ff       	call   c001a67a <File::open(FileOpenMode)>
c0022320:	5e                   	pop    esi
c0022321:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022325:	e8 9d 42 ff ff       	call   c00165c7 <malloc>
c002232a:	5a                   	pop    edx
c002232b:	89 c7                	mov    edi,eax
c002232d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0022331:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022333:	8b 10                	mov    edx,DWORD PTR [eax]
c0022335:	56                   	push   esi
c0022336:	57                   	push   edi
c0022337:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002233b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002233f:	50                   	push   eax
c0022340:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022343:	83 c4 14             	add    esp,0x14
c0022346:	ff 33                	push   DWORD PTR [ebx]
c0022348:	e8 8b 83 ff ff       	call   c001a6d8 <File::close()>
c002234d:	59                   	pop    ecx
c002234e:	58                   	pop    eax
c002234f:	6a 13                	push   0x13
c0022351:	ff 33                	push   DWORD PTR [ebx]
c0022353:	e8 22 83 ff ff       	call   c001a67a <File::open(FileOpenMode)>
c0022358:	8b 03                	mov    eax,DWORD PTR [ebx]
c002235a:	8b 10                	mov    edx,DWORD PTR [eax]
c002235c:	89 34 24             	mov    DWORD PTR [esp],esi
c002235f:	57                   	push   edi
c0022360:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022364:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022368:	50                   	push   eax
c0022369:	ff 52 10             	call   DWORD PTR [edx+0x10]
c002236c:	83 c4 14             	add    esp,0x14
c002236f:	57                   	push   edi
c0022370:	e8 62 42 ff ff       	call   c00165d7 <free>
c0022375:	83 c4 10             	add    esp,0x10
c0022378:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c002237b:	75 10                	jne    c002238d <CmOpen(char const*)+0xbd>
c002237d:	83 ec 0c             	sub    esp,0xc
c0022380:	68 57 32 03 c0       	push   0xc0033257
c0022385:	e8 04 e4 ff ff       	call   c002078e <KePanic(char const*)>
c002238a:	83 c4 10             	add    esp,0x10
c002238d:	8d 7b 05             	lea    edi,[ebx+0x5]
c0022390:	50                   	push   eax
c0022391:	6a 00                	push   0x0
c0022393:	6a 00                	push   0x0
c0022395:	ff 33                	push   DWORD PTR [ebx]
c0022397:	e8 9c 83 ff ff       	call   c001a738 <File::seek(unsigned long long)>
c002239c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002239e:	8b 10                	mov    edx,DWORD PTR [eax]
c00223a0:	89 34 24             	mov    DWORD PTR [esp],esi
c00223a3:	57                   	push   edi
c00223a4:	6a 00                	push   0x0
c00223a6:	6a 2b                	push   0x2b
c00223a8:	50                   	push   eax
c00223a9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00223ac:	83 c4 1c             	add    esp,0x1c
c00223af:	6a 00                	push   0x0
c00223b1:	6a 00                	push   0x0
c00223b3:	ff 33                	push   DWORD PTR [ebx]
c00223b5:	e8 7e 83 ff ff       	call   c001a738 <File::seek(unsigned long long)>
c00223ba:	83 c4 0c             	add    esp,0xc
c00223bd:	6a 08                	push   0x8
c00223bf:	68 68 32 03 c0       	push   0xc0033268
c00223c4:	57                   	push   edi
c00223c5:	e8 b6 df fd ff       	call   c0000380 <memcmp>
c00223ca:	83 c4 10             	add    esp,0x10
c00223cd:	85 c0                	test   eax,eax
c00223cf:	74 10                	je     c00223e1 <CmOpen(char const*)+0x111>
c00223d1:	83 ec 0c             	sub    esp,0xc
c00223d4:	68 71 32 03 c0       	push   0xc0033271
c00223d9:	e8 b0 e3 ff ff       	call   c002078e <KePanic(char const*)>
c00223de:	83 c4 10             	add    esp,0x10
c00223e1:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c00223e5:	89 d8                	mov    eax,ebx
c00223e7:	83 c4 10             	add    esp,0x10
c00223ea:	5b                   	pop    ebx
c00223eb:	5e                   	pop    esi
c00223ec:	5f                   	pop    edi
c00223ed:	c3                   	ret    

c00223ee <CmClose(Reghive_Tag*)>:
c00223ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223f2:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00223f6:	74 0b                	je     c0022403 <CmClose(Reghive_Tag*)+0x15>
c00223f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00223fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00223fe:	e9 d5 82 ff ff       	jmp    c001a6d8 <File::close()>
c0022403:	c3                   	ret    

c0022404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0022404:	53                   	push   ebx
c0022405:	83 ec 18             	sub    esp,0x18
c0022408:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002240c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0022410:	74 29                	je     c002243b <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0022412:	50                   	push   eax
c0022413:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0022418:	99                   	cdq    
c0022419:	52                   	push   edx
c002241a:	50                   	push   eax
c002241b:	ff 33                	push   DWORD PTR [ebx]
c002241d:	e8 16 83 ff ff       	call   c001a738 <File::seek(unsigned long long)>
c0022422:	5a                   	pop    edx
c0022423:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022425:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0022429:	8b 10                	mov    edx,DWORD PTR [eax]
c002242b:	51                   	push   ecx
c002242c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022430:	6a 00                	push   0x0
c0022432:	6a 2b                	push   0x2b
c0022434:	50                   	push   eax
c0022435:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022438:	83 c4 20             	add    esp,0x20
c002243b:	83 c4 18             	add    esp,0x18
c002243e:	5b                   	pop    ebx
c002243f:	c3                   	ret    

c0022440 <CmGetString(Reghive_Tag*, int, char*)>:
c0022440:	55                   	push   ebp
c0022441:	57                   	push   edi
c0022442:	56                   	push   esi
c0022443:	53                   	push   ebx
c0022444:	31 db                	xor    ebx,ebx
c0022446:	83 ec 70             	sub    esp,0x70
c0022449:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0022450:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0022454:	50                   	push   eax
c0022455:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002245c:	55                   	push   ebp
c002245d:	e8 a2 ff ff ff       	call   c0022404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022462:	83 c4 10             	add    esp,0x10
c0022465:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c002246a:	c1 e0 08             	shl    eax,0x8
c002246d:	89 c2                	mov    edx,eax
c002246f:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0022474:	09 d0                	or     eax,edx
c0022476:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c002247b:	c1 e0 08             	shl    eax,0x8
c002247e:	09 d0                	or     eax,edx
c0022480:	74 25                	je     c00224a7 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0022482:	6b fb 0d             	imul   edi,ebx,0xd
c0022485:	52                   	push   edx
c0022486:	8d 54 24 39          	lea    edx,[esp+0x39]
c002248a:	52                   	push   edx
c002248b:	50                   	push   eax
c002248c:	55                   	push   ebp
c002248d:	e8 72 ff ff ff       	call   c0022404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022492:	8d 74 24 49          	lea    esi,[esp+0x49]
c0022496:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c002249d:	b9 27 00 00 00       	mov    ecx,0x27
c00224a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00224a4:	83 c4 10             	add    esp,0x10
c00224a7:	83 c3 03             	add    ebx,0x3
c00224aa:	83 fb 15             	cmp    ebx,0x15
c00224ad:	75 b6                	jne    c0022465 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c00224af:	83 c4 6c             	add    esp,0x6c
c00224b2:	5b                   	pop    ebx
c00224b3:	5e                   	pop    esi
c00224b4:	5f                   	pop    edi
c00224b5:	5d                   	pop    ebp
c00224b6:	c3                   	ret    

c00224b7 <CmEnterDirectory(Reghive_Tag*, int)>:
c00224b7:	83 ec 40             	sub    esp,0x40
c00224ba:	8d 44 24 09          	lea    eax,[esp+0x9]
c00224be:	50                   	push   eax
c00224bf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00224c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00224c7:	e8 38 ff ff ff       	call   c0022404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00224cc:	83 c4 10             	add    esp,0x10
c00224cf:	83 c8 ff             	or     eax,0xffffffff
c00224d2:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c00224d7:	75 19                	jne    c00224f2 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c00224d9:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c00224de:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00224e3:	c1 e0 08             	shl    eax,0x8
c00224e6:	09 c2                	or     edx,eax
c00224e8:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c00224ed:	c1 e0 10             	shl    eax,0x10
c00224f0:	09 d0                	or     eax,edx
c00224f2:	83 c4 3c             	add    esp,0x3c
c00224f5:	c3                   	ret    

c00224f6 <CmGetNext(Reghive_Tag*, int)>:
c00224f6:	83 ec 40             	sub    esp,0x40
c00224f9:	8d 44 24 09          	lea    eax,[esp+0x9]
c00224fd:	50                   	push   eax
c00224fe:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022502:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022506:	e8 f9 fe ff ff       	call   c0022404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002250b:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0022510:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0022515:	c1 e0 08             	shl    eax,0x8
c0022518:	09 c2                	or     edx,eax
c002251a:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c002251f:	83 c4 4c             	add    esp,0x4c
c0022522:	c1 e0 10             	shl    eax,0x10
c0022525:	09 d0                	or     eax,edx
c0022527:	c3                   	ret    

c0022528 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0022528:	53                   	push   ebx
c0022529:	83 ec 18             	sub    esp,0x18
c002252c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022530:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0022534:	74 29                	je     c002255f <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0022536:	50                   	push   eax
c0022537:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c002253c:	99                   	cdq    
c002253d:	52                   	push   edx
c002253e:	50                   	push   eax
c002253f:	ff 33                	push   DWORD PTR [ebx]
c0022541:	e8 f2 81 ff ff       	call   c001a738 <File::seek(unsigned long long)>
c0022546:	5a                   	pop    edx
c0022547:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022549:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c002254d:	8b 10                	mov    edx,DWORD PTR [eax]
c002254f:	51                   	push   ecx
c0022550:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022554:	6a 00                	push   0x0
c0022556:	6a 2b                	push   0x2b
c0022558:	50                   	push   eax
c0022559:	ff 52 10             	call   DWORD PTR [edx+0x10]
c002255c:	83 c4 20             	add    esp,0x20
c002255f:	83 c4 18             	add    esp,0x18
c0022562:	5b                   	pop    ebx
c0022563:	c3                   	ret    

c0022564 <CmFreeExtent(Reghive_Tag*, int)>:
c0022564:	53                   	push   ebx
c0022565:	83 ec 3c             	sub    esp,0x3c
c0022568:	6a 2b                	push   0x2b
c002256a:	6a 00                	push   0x0
c002256c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022570:	53                   	push   ebx
c0022571:	e8 7a df fd ff       	call   c00004f0 <memset>
c0022576:	83 c4 0c             	add    esp,0xc
c0022579:	53                   	push   ebx
c002257a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002257e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022582:	e8 a1 ff ff ff       	call   c0022528 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022587:	83 c4 48             	add    esp,0x48
c002258a:	5b                   	pop    ebx
c002258b:	c3                   	ret    

c002258c <CmUpdateHeader(Reghive_Tag*)>:
c002258c:	83 ec 0c             	sub    esp,0xc
c002258f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022593:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0022597:	74 10                	je     c00225a9 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0022599:	52                   	push   edx
c002259a:	8d 50 05             	lea    edx,[eax+0x5]
c002259d:	52                   	push   edx
c002259e:	6a 00                	push   0x0
c00225a0:	50                   	push   eax
c00225a1:	e8 82 ff ff ff       	call   c0022528 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00225a6:	83 c4 10             	add    esp,0x10
c00225a9:	83 c4 0c             	add    esp,0xc
c00225ac:	c3                   	ret    

c00225ad <CmExpand(Reghive_Tag*, int)>:
c00225ad:	57                   	push   edi
c00225ae:	56                   	push   esi
c00225af:	83 ce ff             	or     esi,0xffffffff
c00225b2:	53                   	push   ebx
c00225b3:	83 ec 30             	sub    esp,0x30
c00225b6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00225ba:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00225be:	74 5f                	je     c002261f <CmExpand(Reghive_Tag*, int)+0x72>
c00225c0:	31 d2                	xor    edx,edx
c00225c2:	31 f6                	xor    esi,esi
c00225c4:	50                   	push   eax
c00225c5:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c00225c9:	52                   	push   edx
c00225ca:	50                   	push   eax
c00225cb:	ff 33                	push   DWORD PTR [ebx]
c00225cd:	e8 66 81 ff ff       	call   c001a738 <File::seek(unsigned long long)>
c00225d2:	83 c4 0c             	add    esp,0xc
c00225d5:	6a 2b                	push   0x2b
c00225d7:	6a 00                	push   0x0
c00225d9:	8d 7c 24 11          	lea    edi,[esp+0x11]
c00225dd:	57                   	push   edi
c00225de:	e8 0d df fd ff       	call   c00004f0 <memset>
c00225e3:	83 c4 10             	add    esp,0x10
c00225e6:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00225ea:	7d 1b                	jge    c0022607 <CmExpand(Reghive_Tag*, int)+0x5a>
c00225ec:	83 ec 0c             	sub    esp,0xc
c00225ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00225f1:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c00225f5:	8b 10                	mov    edx,DWORD PTR [eax]
c00225f7:	46                   	inc    esi
c00225f8:	51                   	push   ecx
c00225f9:	57                   	push   edi
c00225fa:	6a 00                	push   0x0
c00225fc:	6a 2b                	push   0x2b
c00225fe:	50                   	push   eax
c00225ff:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0022602:	83 c4 20             	add    esp,0x20
c0022605:	eb df                	jmp    c00225e6 <CmExpand(Reghive_Tag*, int)+0x39>
c0022607:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c002260b:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c002260e:	83 ec 0c             	sub    esp,0xc
c0022611:	01 f2                	add    edx,esi
c0022613:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0022616:	53                   	push   ebx
c0022617:	e8 70 ff ff ff       	call   c002258c <CmUpdateHeader(Reghive_Tag*)>
c002261c:	83 c4 10             	add    esp,0x10
c002261f:	83 c4 30             	add    esp,0x30
c0022622:	89 f0                	mov    eax,esi
c0022624:	5b                   	pop    ebx
c0022625:	5e                   	pop    esi
c0022626:	5f                   	pop    edi
c0022627:	c3                   	ret    

c0022628 <CmFindUnusedExtent(Reghive_Tag*)>:
c0022628:	55                   	push   ebp
c0022629:	57                   	push   edi
c002262a:	56                   	push   esi
c002262b:	53                   	push   ebx
c002262c:	83 cb ff             	or     ebx,0xffffffff
c002262f:	83 ec 1c             	sub    esp,0x1c
c0022632:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0022636:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c002263a:	74 68                	je     c00226a4 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c002263c:	be 2b 00 00 00       	mov    esi,0x2b
c0022641:	51                   	push   ecx
c0022642:	31 ff                	xor    edi,edi
c0022644:	6a 00                	push   0x0
c0022646:	31 db                	xor    ebx,ebx
c0022648:	6a 00                	push   0x0
c002264a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c002264d:	e8 e6 80 ff ff       	call   c001a738 <File::seek(unsigned long long)>
c0022652:	83 c4 10             	add    esp,0x10
c0022655:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0022658:	76 3b                	jbe    c0022695 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c002265a:	83 ec 0c             	sub    esp,0xc
c002265d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022660:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0022664:	8b 10                	mov    edx,DWORD PTR [eax]
c0022666:	51                   	push   ecx
c0022667:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c002266b:	51                   	push   ecx
c002266c:	6a 00                	push   0x0
c002266e:	6a 01                	push   0x1
c0022670:	50                   	push   eax
c0022671:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022674:	83 c4 20             	add    esp,0x20
c0022677:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002267c:	74 26                	je     c00226a4 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c002267e:	43                   	inc    ebx
c002267f:	52                   	push   edx
c0022680:	57                   	push   edi
c0022681:	56                   	push   esi
c0022682:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0022685:	e8 ae 80 ff ff       	call   c001a738 <File::seek(unsigned long long)>
c002268a:	83 c6 2b             	add    esi,0x2b
c002268d:	83 d7 00             	adc    edi,0x0
c0022690:	83 c4 10             	add    esp,0x10
c0022693:	eb c0                	jmp    c0022655 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0022695:	50                   	push   eax
c0022696:	50                   	push   eax
c0022697:	6a 40                	push   0x40
c0022699:	55                   	push   ebp
c002269a:	e8 0e ff ff ff       	call   c00225ad <CmExpand(Reghive_Tag*, int)>
c002269f:	83 c4 10             	add    esp,0x10
c00226a2:	89 c3                	mov    ebx,eax
c00226a4:	83 c4 1c             	add    esp,0x1c
c00226a7:	89 d8                	mov    eax,ebx
c00226a9:	5b                   	pop    ebx
c00226aa:	5e                   	pop    esi
c00226ab:	5f                   	pop    edi
c00226ac:	5d                   	pop    ebp
c00226ad:	c3                   	ret    

c00226ae <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c00226ae:	55                   	push   ebp
c00226af:	57                   	push   edi
c00226b0:	56                   	push   esi
c00226b1:	53                   	push   ebx
c00226b2:	81 ec 88 00 00 00    	sub    esp,0x88
c00226b8:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00226bf:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00226c6:	e8 5d ff ff ff       	call   c0022628 <CmFindUnusedExtent(Reghive_Tag*)>
c00226cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00226cf:	83 c4 0c             	add    esp,0xc
c00226d2:	6a 2b                	push   0x2b
c00226d4:	6a 00                	push   0x0
c00226d6:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00226da:	55                   	push   ebp
c00226db:	e8 10 de fd ff       	call   c00004f0 <memset>
c00226e0:	83 c4 10             	add    esp,0x10
c00226e3:	85 db                	test   ebx,ebx
c00226e5:	74 12                	je     c00226f9 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00226e7:	51                   	push   ecx
c00226e8:	55                   	push   ebp
c00226e9:	53                   	push   ebx
c00226ea:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00226f1:	e8 0e fd ff ff       	call   c0022404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00226f6:	83 c4 10             	add    esp,0x10
c00226f9:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00226fd:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0022704:	b9 2b 00 00 00       	mov    ecx,0x2b
c0022709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002270b:	85 db                	test   ebx,ebx
c002270d:	74 49                	je     c0022758 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c002270f:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0022714:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0022719:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002271d:	c1 e0 08             	shl    eax,0x8
c0022720:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0022726:	09 c8                	or     eax,ecx
c0022728:	74 11                	je     c002273b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c002272a:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c002272e:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0022732:	c1 e8 10             	shr    eax,0x10
c0022735:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0022739:	eb 0f                	jmp    c002274a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c002273b:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0022740:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0022745:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c002274a:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c002274e:	c1 ea 08             	shr    edx,0x8
c0022751:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0022756:	eb 0f                	jmp    c0022767 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0022758:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c002275d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0022762:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0022767:	52                   	push   edx
c0022768:	8d 44 24 49          	lea    eax,[esp+0x49]
c002276c:	50                   	push   eax
c002276d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022771:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022778:	e8 ab fd ff ff       	call   c0022528 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002277d:	83 c4 10             	add    esp,0x10
c0022780:	85 db                	test   ebx,ebx
c0022782:	74 12                	je     c0022796 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0022784:	50                   	push   eax
c0022785:	55                   	push   ebp
c0022786:	53                   	push   ebx
c0022787:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002278e:	e8 95 fd ff ff       	call   c0022528 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022793:	83 c4 10             	add    esp,0x10
c0022796:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002279a:	83 c4 7c             	add    esp,0x7c
c002279d:	5b                   	pop    ebx
c002279e:	5e                   	pop    esi
c002279f:	5f                   	pop    edi
c00227a0:	5d                   	pop    ebp
c00227a1:	c3                   	ret    

c00227a2 <CmSetString(Reghive_Tag*, int, char const*)>:
c00227a2:	55                   	push   ebp
c00227a3:	57                   	push   edi
c00227a4:	56                   	push   esi
c00227a5:	53                   	push   ebx
c00227a6:	bb 27 00 00 00       	mov    ebx,0x27
c00227ab:	81 ec 88 00 00 00    	sub    esp,0x88
c00227b1:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00227b8:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00227bf:	e8 ac dd fd ff       	call   c0000570 <strlen>
c00227c4:	8d 48 26             	lea    ecx,[eax+0x26]
c00227c7:	89 c8                	mov    eax,ecx
c00227c9:	99                   	cdq    
c00227ca:	f7 fb                	idiv   ebx
c00227cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00227d0:	83 c4 10             	add    esp,0x10
c00227d3:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00227d9:	7e 10                	jle    c00227eb <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00227db:	83 ec 0c             	sub    esp,0xc
c00227de:	68 82 32 03 c0       	push   0xc0033282
c00227e3:	e8 a6 df ff ff       	call   c002078e <KePanic(char const*)>
c00227e8:	83 c4 10             	add    esp,0x10
c00227eb:	31 ff                	xor    edi,edi
c00227ed:	50                   	push   eax
c00227ee:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00227f2:	53                   	push   ebx
c00227f3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00227fa:	56                   	push   esi
c00227fb:	e8 04 fc ff ff       	call   c0022404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022800:	83 c4 10             	add    esp,0x10
c0022803:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0022807:	89 d0                	mov    eax,edx
c0022809:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c002280d:	c1 e0 08             	shl    eax,0x8
c0022810:	09 c2                	or     edx,eax
c0022812:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0022816:	c1 e2 08             	shl    edx,0x8
c0022819:	09 c2                	or     edx,eax
c002281b:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002281f:	7e 76                	jle    c0022897 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0022821:	85 d2                	test   edx,edx
c0022823:	75 25                	jne    c002284a <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0022825:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c002282a:	8d 44 24 45          	lea    eax,[esp+0x45]
c002282e:	50                   	push   eax
c002282f:	6a 00                	push   0x0
c0022831:	6a 00                	push   0x0
c0022833:	56                   	push   esi
c0022834:	e8 75 fe ff ff       	call   c00226ae <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022839:	83 c4 10             	add    esp,0x10
c002283c:	89 c2                	mov    edx,eax
c002283e:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0022841:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0022844:	c1 f8 10             	sar    eax,0x10
c0022847:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c002284a:	55                   	push   ebp
c002284b:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c002284f:	55                   	push   ebp
c0022850:	52                   	push   edx
c0022851:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0022855:	56                   	push   esi
c0022856:	e8 a9 fb ff ff       	call   c0022404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002285b:	83 c4 0c             	add    esp,0xc
c002285e:	6a 27                	push   0x27
c0022860:	6a 00                	push   0x0
c0022862:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0022866:	51                   	push   ecx
c0022867:	e8 84 dc fd ff       	call   c00004f0 <memset>
c002286c:	83 c4 0c             	add    esp,0xc
c002286f:	6b c7 27             	imul   eax,edi,0x27
c0022872:	6a 27                	push   0x27
c0022874:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c002287b:	50                   	push   eax
c002287c:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0022880:	51                   	push   ecx
c0022881:	e8 fa dd fd ff       	call   c0000680 <strncpy>
c0022886:	83 c4 0c             	add    esp,0xc
c0022889:	55                   	push   ebp
c002288a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002288e:	52                   	push   edx
c002288f:	56                   	push   esi
c0022890:	e8 93 fc ff ff       	call   c0022528 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022895:	eb 19                	jmp    c00228b0 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0022897:	85 d2                	test   edx,edx
c0022899:	74 18                	je     c00228b3 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c002289b:	51                   	push   ecx
c002289c:	51                   	push   ecx
c002289d:	52                   	push   edx
c002289e:	56                   	push   esi
c002289f:	e8 c0 fc ff ff       	call   c0022564 <CmFreeExtent(Reghive_Tag*, int)>
c00228a4:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c00228a8:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00228ac:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00228b0:	83 c4 10             	add    esp,0x10
c00228b3:	47                   	inc    edi
c00228b4:	83 c3 03             	add    ebx,0x3
c00228b7:	83 ff 07             	cmp    edi,0x7
c00228ba:	0f 85 43 ff ff ff    	jne    c0022803 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00228c0:	50                   	push   eax
c00228c1:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00228c5:	50                   	push   eax
c00228c6:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00228cd:	56                   	push   esi
c00228ce:	e8 55 fc ff ff       	call   c0022528 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00228d3:	81 c4 8c 00 00 00    	add    esp,0x8c
c00228d9:	5b                   	pop    ebx
c00228da:	5e                   	pop    esi
c00228db:	5f                   	pop    edi
c00228dc:	5d                   	pop    ebp
c00228dd:	c3                   	ret    

c00228de <CmGetMatch(char*, char*, bool, bool*)>:
c00228de:	56                   	push   esi
c00228df:	53                   	push   ebx
c00228e0:	50                   	push   eax
c00228e1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00228e5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00228ea:	74 25                	je     c0022911 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00228ec:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00228ef:	31 db                	xor    ebx,ebx
c00228f1:	50                   	push   eax
c00228f2:	50                   	push   eax
c00228f3:	8d 04 9d e0 4b 03 c0 	lea    eax,[ebx*4-0x3ffcb420]
c00228fa:	50                   	push   eax
c00228fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228ff:	e8 4c de fd ff       	call   c0000750 <strcmp>
c0022904:	83 c4 10             	add    esp,0x10
c0022907:	85 c0                	test   eax,eax
c0022909:	74 2e                	je     c0022939 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c002290b:	43                   	inc    ebx
c002290c:	83 fb 3f             	cmp    ebx,0x3f
c002290f:	75 e0                	jne    c00228f1 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0022911:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022914:	31 db                	xor    ebx,ebx
c0022916:	8d 04 9d e0 4b 03 c0 	lea    eax,[ebx*4-0x3ffcb420]
c002291d:	51                   	push   ecx
c002291e:	51                   	push   ecx
c002291f:	50                   	push   eax
c0022920:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022924:	e8 27 de fd ff       	call   c0000750 <strcmp>
c0022929:	83 c4 10             	add    esp,0x10
c002292c:	85 c0                	test   eax,eax
c002292e:	74 09                	je     c0022939 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0022930:	43                   	inc    ebx
c0022931:	83 fb 3f             	cmp    ebx,0x3f
c0022934:	75 e0                	jne    c0022916 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0022936:	83 cb ff             	or     ebx,0xffffffff
c0022939:	89 d8                	mov    eax,ebx
c002293b:	5a                   	pop    edx
c002293c:	5b                   	pop    ebx
c002293d:	5e                   	pop    esi
c002293e:	c3                   	ret    

c002293f <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c002293f:	55                   	push   ebp
c0022940:	31 c0                	xor    eax,eax
c0022942:	57                   	push   edi
c0022943:	56                   	push   esi
c0022944:	53                   	push   ebx
c0022945:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022949:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002294d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c002294f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0022953:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0022956:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002295a:	83 fd 1f             	cmp    ebp,0x1f
c002295d:	7f 0b                	jg     c002296a <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c002295f:	0f b6 c2             	movzx  eax,dl
c0022962:	d3 e0                	shl    eax,cl
c0022964:	09 07                	or     DWORD PTR [edi],eax
c0022966:	b0 01                	mov    al,0x1
c0022968:	01 33                	add    DWORD PTR [ebx],esi
c002296a:	5b                   	pop    ebx
c002296b:	5e                   	pop    esi
c002296c:	5f                   	pop    edi
c002296d:	5d                   	pop    ebp
c002296e:	c3                   	ret    

c002296f <CmGetShift(unsigned int*, int*, int, bool*)>:
c002296f:	57                   	push   edi
c0022970:	56                   	push   esi
c0022971:	53                   	push   ebx
c0022972:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0022976:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002297a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002297e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022982:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0022984:	7c 17                	jl     c002299d <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0022986:	8b 17                	mov    edx,DWORD PTR [edi]
c0022988:	b8 01 00 00 00       	mov    eax,0x1
c002298d:	d3 e0                	shl    eax,cl
c002298f:	48                   	dec    eax
c0022990:	21 d0                	and    eax,edx
c0022992:	d3 ea                	shr    edx,cl
c0022994:	89 17                	mov    DWORD PTR [edi],edx
c0022996:	29 0b                	sub    DWORD PTR [ebx],ecx
c0022998:	c6 06 01             	mov    BYTE PTR [esi],0x1
c002299b:	eb 05                	jmp    c00229a2 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c002299d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00229a0:	31 c0                	xor    eax,eax
c00229a2:	5b                   	pop    ebx
c00229a3:	5e                   	pop    esi
c00229a4:	5f                   	pop    edi
c00229a5:	c3                   	ret    

c00229a6 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c00229a6:	83 ec 40             	sub    esp,0x40
c00229a9:	8d 44 24 09          	lea    eax,[esp+0x9]
c00229ad:	50                   	push   eax
c00229ae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00229b2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00229b6:	e8 49 fa ff ff       	call   c0022404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00229bb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00229bf:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00229c3:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00229c7:	89 10                	mov    DWORD PTR [eax],edx
c00229c9:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00229cc:	83 c4 4c             	add    esp,0x4c
c00229cf:	c3                   	ret    

c00229d0 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00229d0:	55                   	push   ebp
c00229d1:	57                   	push   edi
c00229d2:	56                   	push   esi
c00229d3:	53                   	push   ebx
c00229d4:	83 ec 40             	sub    esp,0x40
c00229d7:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00229db:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00229df:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00229e3:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00229e7:	53                   	push   ebx
c00229e8:	56                   	push   esi
c00229e9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00229ed:	e8 12 fa ff ff       	call   c0022404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00229f2:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00229f6:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00229fa:	83 c4 0c             	add    esp,0xc
c00229fd:	53                   	push   ebx
c00229fe:	56                   	push   esi
c00229ff:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022a03:	e8 20 fb ff ff       	call   c0022528 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022a08:	83 c4 4c             	add    esp,0x4c
c0022a0b:	5b                   	pop    ebx
c0022a0c:	5e                   	pop    esi
c0022a0d:	5f                   	pop    edi
c0022a0e:	5d                   	pop    ebp
c0022a0f:	c3                   	ret    

c0022a10 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0022a10:	55                   	push   ebp
c0022a11:	57                   	push   edi
c0022a12:	56                   	push   esi
c0022a13:	31 f6                	xor    esi,esi
c0022a15:	53                   	push   ebx
c0022a16:	31 db                	xor    ebx,ebx
c0022a18:	83 ec 40             	sub    esp,0x40
c0022a1b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0022a23:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0022a2b:	6a 12                	push   0x12
c0022a2d:	68 ee 00 00 00       	push   0xee
c0022a32:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0022a36:	e8 b5 da fd ff       	call   c00004f0 <memset>
c0022a3b:	83 c4 10             	add    esp,0x10
c0022a3e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0022a42:	6a 08                	push   0x8
c0022a44:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022a48:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0022a4c:	50                   	push   eax
c0022a4d:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0022a51:	55                   	push   ebp
c0022a52:	57                   	push   edi
c0022a53:	e8 e7 fe ff ff       	call   c002293f <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0022a58:	83 c4 10             	add    esp,0x10
c0022a5b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022a5f:	50                   	push   eax
c0022a60:	6a 06                	push   0x6
c0022a62:	55                   	push   ebp
c0022a63:	57                   	push   edi
c0022a64:	e8 06 ff ff ff       	call   c002296f <CmGetShift(unsigned int*, int*, int, bool*)>
c0022a69:	83 c4 10             	add    esp,0x10
c0022a6c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022a71:	74 07                	je     c0022a7a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0022a73:	46                   	inc    esi
c0022a74:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0022a78:	eb e1                	jmp    c0022a5b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0022a7a:	43                   	inc    ebx
c0022a7b:	83 fb 12             	cmp    ebx,0x12
c0022a7e:	75 c2                	jne    c0022a42 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0022a80:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022a84:	31 db                	xor    ebx,ebx
c0022a86:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022a89:	50                   	push   eax
c0022a8a:	50                   	push   eax
c0022a8b:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0022a90:	43                   	inc    ebx
c0022a91:	8d 04 85 e0 4b 03 c0 	lea    eax,[eax*4-0x3ffcb420]
c0022a98:	50                   	push   eax
c0022a99:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0022a9d:	e8 9e dd fd ff       	call   c0000840 <strcat>
c0022aa2:	83 c4 10             	add    esp,0x10
c0022aa5:	83 fb 18             	cmp    ebx,0x18
c0022aa8:	75 df                	jne    c0022a89 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0022aaa:	83 c4 3c             	add    esp,0x3c
c0022aad:	31 c0                	xor    eax,eax
c0022aaf:	5b                   	pop    ebx
c0022ab0:	5e                   	pop    esi
c0022ab1:	5f                   	pop    edi
c0022ab2:	5d                   	pop    ebp
c0022ab3:	c3                   	ret    

c0022ab4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0022ab4:	83 ec 40             	sub    esp,0x40
c0022ab7:	8d 44 24 09          	lea    eax,[esp+0x9]
c0022abb:	50                   	push   eax
c0022abc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022ac0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022ac4:	e8 3b f9 ff ff       	call   c0022404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022ac9:	58                   	pop    eax
c0022aca:	5a                   	pop    edx
c0022acb:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022acf:	8d 44 24 15          	lea    eax,[esp+0x15]
c0022ad3:	50                   	push   eax
c0022ad4:	e8 37 ff ff ff       	call   c0022a10 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0022ad9:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0022ade:	83 c4 4c             	add    esp,0x4c
c0022ae1:	c3                   	ret    

c0022ae2 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0022ae2:	55                   	push   ebp
c0022ae3:	57                   	push   edi
c0022ae4:	56                   	push   esi
c0022ae5:	53                   	push   ebx
c0022ae6:	31 db                	xor    ebx,ebx
c0022ae8:	83 ec 70             	sub    esp,0x70
c0022aeb:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0022af2:	6a 30                	push   0x30
c0022af4:	6a 00                	push   0x0
c0022af6:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0022afa:	56                   	push   esi
c0022afb:	e8 f0 d9 fd ff       	call   c00004f0 <memset>
c0022b00:	83 c4 10             	add    esp,0x10
c0022b03:	83 ec 0c             	sub    esp,0xc
c0022b06:	57                   	push   edi
c0022b07:	e8 64 da fd ff       	call   c0000570 <strlen>
c0022b0c:	83 c4 10             	add    esp,0x10
c0022b0f:	39 d8                	cmp    eax,ebx
c0022b11:	76 16                	jbe    c0022b29 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0022b13:	83 ec 0c             	sub    esp,0xc
c0022b16:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0022b1a:	50                   	push   eax
c0022b1b:	e8 10 de fd ff       	call   c0000930 <toupper>
c0022b20:	83 c4 10             	add    esp,0x10
c0022b23:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022b26:	43                   	inc    ebx
c0022b27:	eb da                	jmp    c0022b03 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0022b29:	31 f6                	xor    esi,esi
c0022b2b:	52                   	push   edx
c0022b2c:	31 ff                	xor    edi,edi
c0022b2e:	6a 18                	push   0x18
c0022b30:	6a 3f                	push   0x3f
c0022b32:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022b36:	50                   	push   eax
c0022b37:	e8 b4 d9 fd ff       	call   c00004f0 <memset>
c0022b3c:	83 c4 10             	add    esp,0x10
c0022b3f:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0022b43:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0022b47:	84 c0                	test   al,al
c0022b49:	0f 84 b0 00 00 00    	je     c0022bff <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0022b4f:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0022b53:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0022b58:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0022b5c:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0022b61:	8d 6e 01             	lea    ebp,[esi+0x1]
c0022b64:	83 ec 0c             	sub    esp,0xc
c0022b67:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0022b6b:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0022b6f:	53                   	push   ebx
c0022b70:	e8 fb d9 fd ff       	call   c0000570 <strlen>
c0022b75:	83 c4 10             	add    esp,0x10
c0022b78:	85 c0                	test   eax,eax
c0022b7a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022b7e:	74 0b                	je     c0022b8b <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0022b80:	50                   	push   eax
c0022b81:	6a 01                	push   0x1
c0022b83:	53                   	push   ebx
c0022b84:	8d 44 24 20          	lea    eax,[esp+0x20]
c0022b88:	50                   	push   eax
c0022b89:	eb 0a                	jmp    c0022b95 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0022b8b:	50                   	push   eax
c0022b8c:	6a 00                	push   0x0
c0022b8e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022b92:	50                   	push   eax
c0022b93:	6a 00                	push   0x0
c0022b95:	e8 44 fd ff ff       	call   c00228de <CmGetMatch(char*, char*, bool, bool*)>
c0022b9a:	83 c4 10             	add    esp,0x10
c0022b9d:	83 f8 ff             	cmp    eax,0xffffffff
c0022ba0:	75 1a                	jne    c0022bbc <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0022ba2:	83 ec 0c             	sub    esp,0xc
c0022ba5:	68 97 32 03 c0       	push   0xc0033297
c0022baa:	e8 df db ff ff       	call   c002078e <KePanic(char const*)>
c0022baf:	83 c4 10             	add    esp,0x10
c0022bb2:	b8 02 00 00 00       	mov    eax,0x2
c0022bb7:	e9 bc 00 00 00       	jmp    c0022c78 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0022bbc:	83 ff 18             	cmp    edi,0x18
c0022bbf:	75 1a                	jne    c0022bdb <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0022bc1:	83 ec 0c             	sub    esp,0xc
c0022bc4:	68 ac 32 03 c0       	push   0xc00332ac
c0022bc9:	e8 c0 db ff ff       	call   c002078e <KePanic(char const*)>
c0022bce:	83 c4 10             	add    esp,0x10
c0022bd1:	b8 01 00 00 00       	mov    eax,0x1
c0022bd6:	e9 9d 00 00 00       	jmp    c0022c78 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0022bdb:	47                   	inc    edi
c0022bdc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022be1:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0022be5:	74 02                	je     c0022be9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0022be7:	89 ee                	mov    esi,ebp
c0022be9:	83 ec 0c             	sub    esp,0xc
c0022bec:	53                   	push   ebx
c0022bed:	e8 7e d9 fd ff       	call   c0000570 <strlen>
c0022bf2:	83 c4 10             	add    esp,0x10
c0022bf5:	85 c0                	test   eax,eax
c0022bf7:	74 06                	je     c0022bff <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0022bf9:	46                   	inc    esi
c0022bfa:	e9 40 ff ff ff       	jmp    c0022b3f <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0022bff:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022c07:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0022c0f:	31 f6                	xor    esi,esi
c0022c11:	50                   	push   eax
c0022c12:	31 ff                	xor    edi,edi
c0022c14:	6a 12                	push   0x12
c0022c16:	68 ee 00 00 00       	push   0xee
c0022c1b:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022c22:	e8 c9 d8 fd ff       	call   c00004f0 <memset>
c0022c27:	83 c4 10             	add    esp,0x10
c0022c2a:	83 fe 17             	cmp    esi,0x17
c0022c2d:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0022c31:	7e 26                	jle    c0022c59 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0022c33:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022c37:	50                   	push   eax
c0022c38:	6a 08                	push   0x8
c0022c3a:	55                   	push   ebp
c0022c3b:	53                   	push   ebx
c0022c3c:	e8 2e fd ff ff       	call   c002296f <CmGetShift(unsigned int*, int*, int, bool*)>
c0022c41:	83 c4 10             	add    esp,0x10
c0022c44:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022c49:	74 26                	je     c0022c71 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0022c4b:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0022c52:	4e                   	dec    esi
c0022c53:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0022c56:	47                   	inc    edi
c0022c57:	eb 1c                	jmp    c0022c75 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0022c59:	6a 06                	push   0x6
c0022c5b:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0022c60:	50                   	push   eax
c0022c61:	55                   	push   ebp
c0022c62:	53                   	push   ebx
c0022c63:	e8 d7 fc ff ff       	call   c002293f <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0022c68:	83 c4 10             	add    esp,0x10
c0022c6b:	84 c0                	test   al,al
c0022c6d:	75 06                	jne    c0022c75 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0022c6f:	eb c2                	jmp    c0022c33 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0022c71:	31 c0                	xor    eax,eax
c0022c73:	eb 03                	jmp    c0022c78 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0022c75:	46                   	inc    esi
c0022c76:	eb b2                	jmp    c0022c2a <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0022c78:	83 c4 6c             	add    esp,0x6c
c0022c7b:	5b                   	pop    ebx
c0022c7c:	5e                   	pop    esi
c0022c7d:	5f                   	pop    edi
c0022c7e:	5d                   	pop    ebp
c0022c7f:	c3                   	ret    

c0022c80 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0022c80:	53                   	push   ebx
c0022c81:	83 ec 3c             	sub    esp,0x3c
c0022c84:	6a 2b                	push   0x2b
c0022c86:	6a 00                	push   0x0
c0022c88:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022c8c:	53                   	push   ebx
c0022c8d:	e8 5e d8 fd ff       	call   c00004f0 <memset>
c0022c92:	58                   	pop    eax
c0022c93:	5a                   	pop    edx
c0022c94:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022c98:	50                   	push   eax
c0022c99:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022c9d:	e8 40 fe ff ff       	call   c0022ae2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022ca2:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0022ca7:	83 c4 0c             	add    esp,0xc
c0022caa:	6a 15                	push   0x15
c0022cac:	6a 00                	push   0x0
c0022cae:	8d 44 24 27          	lea    eax,[esp+0x27]
c0022cb2:	50                   	push   eax
c0022cb3:	e8 38 d8 fd ff       	call   c00004f0 <memset>
c0022cb8:	53                   	push   ebx
c0022cb9:	6a 00                	push   0x0
c0022cbb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022cbf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022cc3:	e8 e6 f9 ff ff       	call   c00226ae <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022cc8:	83 c4 58             	add    esp,0x58
c0022ccb:	5b                   	pop    ebx
c0022ccc:	c3                   	ret    

c0022ccd <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0022ccd:	56                   	push   esi
c0022cce:	53                   	push   ebx
c0022ccf:	83 ec 48             	sub    esp,0x48
c0022cd2:	6a 12                	push   0x12
c0022cd4:	68 ff 00 00 00       	push   0xff
c0022cd9:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0022cdd:	56                   	push   esi
c0022cde:	e8 0d d8 fd ff       	call   c00004f0 <memset>
c0022ce3:	5a                   	pop    edx
c0022ce4:	59                   	pop    ecx
c0022ce5:	56                   	push   esi
c0022ce6:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0022cea:	e8 f3 fd ff ff       	call   c0022ae2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022cef:	83 c4 10             	add    esp,0x10
c0022cf2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022cf6:	85 db                	test   ebx,ebx
c0022cf8:	74 42                	je     c0022d3c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0022cfa:	50                   	push   eax
c0022cfb:	8d 44 24 19          	lea    eax,[esp+0x19]
c0022cff:	50                   	push   eax
c0022d00:	53                   	push   ebx
c0022d01:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022d05:	e8 fa f6 ff ff       	call   c0022404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022d0a:	83 c4 0c             	add    esp,0xc
c0022d0d:	6a 12                	push   0x12
c0022d0f:	8d 44 24 21          	lea    eax,[esp+0x21]
c0022d13:	50                   	push   eax
c0022d14:	56                   	push   esi
c0022d15:	e8 66 d6 fd ff       	call   c0000380 <memcmp>
c0022d1a:	83 c4 10             	add    esp,0x10
c0022d1d:	85 c0                	test   eax,eax
c0022d1f:	74 1e                	je     c0022d3f <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0022d21:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0022d26:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0022d2b:	c1 e3 08             	shl    ebx,0x8
c0022d2e:	09 d8                	or     eax,ebx
c0022d30:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0022d35:	c1 e3 10             	shl    ebx,0x10
c0022d38:	09 c3                	or     ebx,eax
c0022d3a:	eb ba                	jmp    c0022cf6 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0022d3c:	83 cb ff             	or     ebx,0xffffffff
c0022d3f:	89 d8                	mov    eax,ebx
c0022d41:	83 c4 44             	add    esp,0x44
c0022d44:	5b                   	pop    ebx
c0022d45:	5e                   	pop    esi
c0022d46:	c3                   	ret    

c0022d47 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0022d47:	57                   	push   edi
c0022d48:	56                   	push   esi
c0022d49:	53                   	push   ebx
c0022d4a:	83 ec 34             	sub    esp,0x34
c0022d4d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0022d51:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0022d55:	6a 2b                	push   0x2b
c0022d57:	6a 00                	push   0x0
c0022d59:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022d5d:	53                   	push   ebx
c0022d5e:	e8 8d d7 fd ff       	call   c00004f0 <memset>
c0022d63:	58                   	pop    eax
c0022d64:	5a                   	pop    edx
c0022d65:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022d69:	50                   	push   eax
c0022d6a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022d6e:	e8 6f fd ff ff       	call   c0022ae2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022d73:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0022d77:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0022d7b:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0022d7f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0022d83:	53                   	push   ebx
c0022d84:	6a 00                	push   0x0
c0022d86:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022d8a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022d8e:	e8 1b f9 ff ff       	call   c00226ae <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022d93:	83 c4 50             	add    esp,0x50
c0022d96:	5b                   	pop    ebx
c0022d97:	5e                   	pop    esi
c0022d98:	5f                   	pop    edi
c0022d99:	c3                   	ret    

c0022d9a <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0022d9a:	55                   	push   ebp
c0022d9b:	57                   	push   edi
c0022d9c:	56                   	push   esi
c0022d9d:	53                   	push   ebx
c0022d9e:	83 ec 40             	sub    esp,0x40
c0022da1:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0022da5:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022da9:	6a 2b                	push   0x2b
c0022dab:	6a 00                	push   0x0
c0022dad:	8d 74 24 11          	lea    esi,[esp+0x11]
c0022db1:	56                   	push   esi
c0022db2:	e8 39 d7 fd ff       	call   c00004f0 <memset>
c0022db7:	5f                   	pop    edi
c0022db8:	89 ef                	mov    edi,ebp
c0022dba:	58                   	pop    eax
c0022dbb:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022dbf:	50                   	push   eax
c0022dc0:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0022dc4:	e8 19 fd ff ff       	call   c0022ae2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022dc9:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0022dce:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0022dd3:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0022dd8:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0022ddd:	83 c4 10             	add    esp,0x10
c0022de0:	85 ed                	test   ebp,ebp
c0022de2:	74 14                	je     c0022df8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0022de4:	51                   	push   ecx
c0022de5:	51                   	push   ecx
c0022de6:	57                   	push   edi
c0022de7:	53                   	push   ebx
c0022de8:	e8 09 f7 ff ff       	call   c00224f6 <CmGetNext(Reghive_Tag*, int)>
c0022ded:	83 c4 10             	add    esp,0x10
c0022df0:	85 c0                	test   eax,eax
c0022df2:	74 04                	je     c0022df8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0022df4:	89 c7                	mov    edi,eax
c0022df6:	eb e8                	jmp    c0022de0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0022df8:	56                   	push   esi
c0022df9:	6a 00                	push   0x0
c0022dfb:	57                   	push   edi
c0022dfc:	53                   	push   ebx
c0022dfd:	e8 ac f8 ff ff       	call   c00226ae <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022e02:	83 c4 0c             	add    esp,0xc
c0022e05:	89 c7                	mov    edi,eax
c0022e07:	56                   	push   esi
c0022e08:	50                   	push   eax
c0022e09:	53                   	push   ebx
c0022e0a:	e8 f5 f5 ff ff       	call   c0022404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022e0f:	58                   	pop    eax
c0022e10:	5a                   	pop    edx
c0022e11:	6a 6c                	push   0x6c
c0022e13:	6a 00                	push   0x0
c0022e15:	6a 00                	push   0x0
c0022e17:	68 bd 32 03 c0       	push   0xc00332bd
c0022e1c:	57                   	push   edi
c0022e1d:	53                   	push   ebx
c0022e1e:	e8 24 ff ff ff       	call   c0022d47 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0022e23:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0022e27:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0022e2b:	c1 e8 10             	shr    eax,0x10
c0022e2e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0022e32:	83 c4 1c             	add    esp,0x1c
c0022e35:	56                   	push   esi
c0022e36:	57                   	push   edi
c0022e37:	53                   	push   ebx
c0022e38:	e8 eb f6 ff ff       	call   c0022528 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022e3d:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0022e42:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022e47:	c1 e0 08             	shl    eax,0x8
c0022e4a:	09 c2                	or     edx,eax
c0022e4c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0022e51:	83 c4 4c             	add    esp,0x4c
c0022e54:	c1 e0 10             	shl    eax,0x10
c0022e57:	5b                   	pop    ebx
c0022e58:	09 d0                	or     eax,edx
c0022e5a:	5e                   	pop    esi
c0022e5b:	5f                   	pop    edi
c0022e5c:	5d                   	pop    ebp
c0022e5d:	c3                   	ret    

c0022e5e <zStrtok(char*, char const*)>:
c0022e5e:	55                   	push   ebp
c0022e5f:	57                   	push   edi
c0022e60:	56                   	push   esi
c0022e61:	53                   	push   ebx
c0022e62:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022e66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022e6a:	85 db                	test   ebx,ebx
c0022e6c:	74 2f                	je     c0022e9d <zStrtok(char*, char const*)+0x3f>
c0022e6e:	85 c0                	test   eax,eax
c0022e70:	75 09                	jne    c0022e7b <zStrtok(char*, char const*)+0x1d>
c0022e72:	a1 f0 09 04 c0       	mov    eax,ds:0xc00409f0
c0022e77:	85 c0                	test   eax,eax
c0022e79:	74 50                	je     c0022ecb <zStrtok(char*, char const*)+0x6d>
c0022e7b:	31 c9                	xor    ecx,ecx
c0022e7d:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0022e81:	74 03                	je     c0022e86 <zStrtok(char*, char const*)+0x28>
c0022e83:	41                   	inc    ecx
c0022e84:	eb f7                	jmp    c0022e7d <zStrtok(char*, char const*)+0x1f>
c0022e86:	31 d2                	xor    edx,edx
c0022e88:	39 ca                	cmp    edx,ecx
c0022e8a:	74 15                	je     c0022ea1 <zStrtok(char*, char const*)+0x43>
c0022e8c:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0022e90:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0022e93:	8d 3c 10             	lea    edi,[eax+edx*1]
c0022e96:	39 ee                	cmp    esi,ebp
c0022e98:	74 13                	je     c0022ead <zStrtok(char*, char const*)+0x4f>
c0022e9a:	42                   	inc    edx
c0022e9b:	eb eb                	jmp    c0022e88 <zStrtok(char*, char const*)+0x2a>
c0022e9d:	31 c0                	xor    eax,eax
c0022e9f:	eb 2a                	jmp    c0022ecb <zStrtok(char*, char const*)+0x6d>
c0022ea1:	c7 05 f0 09 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00409f0,0x0
c0022eab:	eb 1e                	jmp    c0022ecb <zStrtok(char*, char const*)+0x6d>
c0022ead:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0022eb0:	39 ce                	cmp    esi,ecx
c0022eb2:	75 0a                	jne    c0022ebe <zStrtok(char*, char const*)+0x60>
c0022eb4:	40                   	inc    eax
c0022eb5:	a3 f0 09 04 c0       	mov    ds:0xc00409f0,eax
c0022eba:	89 d8                	mov    eax,ebx
c0022ebc:	eb 0d                	jmp    c0022ecb <zStrtok(char*, char const*)+0x6d>
c0022ebe:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0022ec2:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0022ec5:	89 15 f0 09 04 c0    	mov    DWORD PTR ds:0xc00409f0,edx
c0022ecb:	5b                   	pop    ebx
c0022ecc:	5e                   	pop    esi
c0022ecd:	5f                   	pop    edi
c0022ece:	5d                   	pop    ebp
c0022ecf:	c3                   	ret    

c0022ed0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0022ed0:	57                   	push   edi
c0022ed1:	56                   	push   esi
c0022ed2:	53                   	push   ebx
c0022ed3:	81 ec 08 01 00 00    	sub    esp,0x108
c0022ed9:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0022ee0:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0022ee7:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0022eeb:	53                   	push   ebx
c0022eec:	e8 4f d7 fd ff       	call   c0000640 <strcpy>
c0022ef1:	59                   	pop    ecx
c0022ef2:	5e                   	pop    esi
c0022ef3:	68 5f 36 03 c0       	push   0xc003365f
c0022ef8:	53                   	push   ebx
c0022ef9:	bb 01 00 00 00       	mov    ebx,0x1
c0022efe:	e8 5b ff ff ff       	call   c0022e5e <zStrtok(char*, char const*)>
c0022f03:	83 c4 10             	add    esp,0x10
c0022f06:	85 c0                	test   eax,eax
c0022f08:	74 3b                	je     c0022f45 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022f0a:	52                   	push   edx
c0022f0b:	50                   	push   eax
c0022f0c:	6a 01                	push   0x1
c0022f0e:	57                   	push   edi
c0022f0f:	e8 b9 fd ff ff       	call   c0022ccd <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0022f14:	59                   	pop    ecx
c0022f15:	89 c3                	mov    ebx,eax
c0022f17:	5e                   	pop    esi
c0022f18:	68 5f 36 03 c0       	push   0xc003365f
c0022f1d:	6a 00                	push   0x0
c0022f1f:	e8 3a ff ff ff       	call   c0022e5e <zStrtok(char*, char const*)>
c0022f24:	83 c4 10             	add    esp,0x10
c0022f27:	89 c6                	mov    esi,eax
c0022f29:	85 c0                	test   eax,eax
c0022f2b:	74 18                	je     c0022f45 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022f2d:	52                   	push   edx
c0022f2e:	52                   	push   edx
c0022f2f:	53                   	push   ebx
c0022f30:	57                   	push   edi
c0022f31:	e8 81 f5 ff ff       	call   c00224b7 <CmEnterDirectory(Reghive_Tag*, int)>
c0022f36:	83 c4 10             	add    esp,0x10
c0022f39:	89 c3                	mov    ebx,eax
c0022f3b:	83 f8 ff             	cmp    eax,0xffffffff
c0022f3e:	74 05                	je     c0022f45 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022f40:	50                   	push   eax
c0022f41:	56                   	push   esi
c0022f42:	53                   	push   ebx
c0022f43:	eb c9                	jmp    c0022f0e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0022f45:	81 c4 00 01 00 00    	add    esp,0x100
c0022f4b:	89 d8                	mov    eax,ebx
c0022f4d:	5b                   	pop    ebx
c0022f4e:	5e                   	pop    esi
c0022f4f:	5f                   	pop    edi
c0022f50:	c3                   	ret    

c0022f51 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0022f51:	55                   	push   ebp
c0022f52:	57                   	push   edi
c0022f53:	56                   	push   esi
c0022f54:	53                   	push   ebx
c0022f55:	83 ec 5c             	sub    esp,0x5c
c0022f58:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0022f5c:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0022f60:	85 db                	test   ebx,ebx
c0022f62:	0f 8e 84 00 00 00    	jle    c0022fec <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0022f68:	31 ed                	xor    ebp,ebp
c0022f6a:	57                   	push   edi
c0022f6b:	6a 32                	push   0x32
c0022f6d:	6a 00                	push   0x0
c0022f6f:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0022f73:	57                   	push   edi
c0022f74:	e8 77 d5 fd ff       	call   c00004f0 <memset>
c0022f79:	83 c4 0c             	add    esp,0xc
c0022f7c:	57                   	push   edi
c0022f7d:	53                   	push   ebx
c0022f7e:	56                   	push   esi
c0022f7f:	e8 30 fb ff ff       	call   c0022ab4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0022f84:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022f88:	83 c4 10             	add    esp,0x10
c0022f8b:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0022f8f:	7d 13                	jge    c0022fa4 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0022f91:	83 ec 0c             	sub    esp,0xc
c0022f94:	45                   	inc    ebp
c0022f95:	68 ff 39 03 c0       	push   0xc00339ff
c0022f9a:	e8 b6 64 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0022f9f:	83 c4 10             	add    esp,0x10
c0022fa2:	eb e7                	jmp    c0022f8b <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0022fa4:	51                   	push   ecx
c0022fa5:	57                   	push   edi
c0022fa6:	53                   	push   ebx
c0022fa7:	68 c3 32 03 c0       	push   0xc00332c3
c0022fac:	e8 a4 64 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0022fb1:	83 c4 10             	add    esp,0x10
c0022fb4:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0022fb9:	75 1e                	jne    c0022fd9 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0022fbb:	52                   	push   edx
c0022fbc:	52                   	push   edx
c0022fbd:	53                   	push   ebx
c0022fbe:	56                   	push   esi
c0022fbf:	e8 f3 f4 ff ff       	call   c00224b7 <CmEnterDirectory(Reghive_Tag*, int)>
c0022fc4:	83 c4 0c             	add    esp,0xc
c0022fc7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0022fcb:	8d 51 04             	lea    edx,[ecx+0x4]
c0022fce:	52                   	push   edx
c0022fcf:	50                   	push   eax
c0022fd0:	56                   	push   esi
c0022fd1:	e8 7b ff ff ff       	call   c0022f51 <CmDisplayTree(Reghive_Tag*, int, int)>
c0022fd6:	83 c4 10             	add    esp,0x10
c0022fd9:	50                   	push   eax
c0022fda:	50                   	push   eax
c0022fdb:	53                   	push   ebx
c0022fdc:	56                   	push   esi
c0022fdd:	e8 14 f5 ff ff       	call   c00224f6 <CmGetNext(Reghive_Tag*, int)>
c0022fe2:	83 c4 10             	add    esp,0x10
c0022fe5:	89 c3                	mov    ebx,eax
c0022fe7:	e9 74 ff ff ff       	jmp    c0022f60 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0022fec:	83 c4 5c             	add    esp,0x5c
c0022fef:	5b                   	pop    ebx
c0022ff0:	5e                   	pop    esi
c0022ff1:	5f                   	pop    edi
c0022ff2:	5d                   	pop    ebp
c0022ff3:	c3                   	ret    

c0022ff4 <CmSplitFinalSlashInPlace(char*)>:
c0022ff4:	53                   	push   ebx
c0022ff5:	83 ec 14             	sub    esp,0x14
c0022ff8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022ffc:	53                   	push   ebx
c0022ffd:	e8 6e d5 fd ff       	call   c0000570 <strlen>
c0023002:	83 c4 10             	add    esp,0x10
c0023005:	48                   	dec    eax
c0023006:	85 c0                	test   eax,eax
c0023008:	74 15                	je     c002301f <CmSplitFinalSlashInPlace(char*)+0x2b>
c002300a:	8d 14 03             	lea    edx,[ebx+eax*1]
c002300d:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0023011:	75 09                	jne    c002301c <CmSplitFinalSlashInPlace(char*)+0x28>
c0023013:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0023016:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c002301a:	eb 05                	jmp    c0023021 <CmSplitFinalSlashInPlace(char*)+0x2d>
c002301c:	48                   	dec    eax
c002301d:	eb e7                	jmp    c0023006 <CmSplitFinalSlashInPlace(char*)+0x12>
c002301f:	31 c0                	xor    eax,eax
c0023021:	83 c4 08             	add    esp,0x8
c0023024:	5b                   	pop    ebx
c0023025:	c3                   	ret    

c0023026 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0023026:	55                   	push   ebp
c0023027:	57                   	push   edi
c0023028:	56                   	push   esi
c0023029:	53                   	push   ebx
c002302a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0023030:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0023037:	8a 13                	mov    dl,BYTE PTR [ebx]
c0023039:	8d 6b 01             	lea    ebp,[ebx+0x1]
c002303c:	80 fa 40             	cmp    dl,0x40
c002303f:	75 1c                	jne    c002305d <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0023041:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0023044:	85 c9                	test   ecx,ecx
c0023046:	0f 84 09 01 00 00    	je     c0023155 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c002304c:	8d 43 01             	lea    eax,[ebx+0x1]
c002304f:	83 f9 3a             	cmp    ecx,0x3a
c0023052:	74 04                	je     c0023058 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0023054:	89 c3                	mov    ebx,eax
c0023056:	eb e9                	jmp    c0023041 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0023058:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c002305b:	89 c3                	mov    ebx,eax
c002305d:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0023061:	50                   	push   eax
c0023062:	6a 40                	push   0x40
c0023064:	6a 00                	push   0x0
c0023066:	8d 44 24 24          	lea    eax,[esp+0x24]
c002306a:	50                   	push   eax
c002306b:	e8 80 d4 fd ff       	call   c00004f0 <memset>
c0023070:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0023077:	31 c0                	xor    eax,eax
c0023079:	83 c4 10             	add    esp,0x10
c002307c:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0023081:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0023084:	89 d1                	mov    ecx,edx
c0023086:	85 d2                	test   edx,edx
c0023088:	0f 84 c7 00 00 00    	je     c0023155 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c002308e:	3d c7 00 00 00       	cmp    eax,0xc7
c0023093:	0f 8f bc 00 00 00    	jg     c0023155 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0023099:	83 fa 0a             	cmp    edx,0xa
c002309c:	0f 85 a4 00 00 00    	jne    c0023146 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c00230a2:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00230a7:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c00230ac:	89 c8                	mov    eax,ecx
c00230ae:	a8 df                	test   al,0xdf
c00230b0:	0f 94 c2             	sete   dl
c00230b3:	83 f9 23             	cmp    ecx,0x23
c00230b6:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00230bb:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c00230bf:	80 e2 01             	and    dl,0x1
c00230c2:	75 4a                	jne    c002310e <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00230c4:	83 e8 09             	sub    eax,0x9
c00230c7:	3c 01                	cmp    al,0x1
c00230c9:	76 43                	jbe    c002310e <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00230cb:	83 f9 5b             	cmp    ecx,0x5b
c00230ce:	75 42                	jne    c0023112 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c00230d0:	83 fe 40             	cmp    esi,0x40
c00230d3:	75 39                	jne    c002310e <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00230d5:	83 ec 0c             	sub    esp,0xc
c00230d8:	8d 54 24 65          	lea    edx,[esp+0x65]
c00230dc:	52                   	push   edx
c00230dd:	e8 8e d4 fd ff       	call   c0000570 <strlen>
c00230e2:	83 c4 10             	add    esp,0x10
c00230e5:	83 f8 3f             	cmp    eax,0x3f
c00230e8:	77 6b                	ja     c0023155 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00230ea:	50                   	push   eax
c00230eb:	50                   	push   eax
c00230ec:	8d 54 24 61          	lea    edx,[esp+0x61]
c00230f0:	52                   	push   edx
c00230f1:	8d 54 24 24          	lea    edx,[esp+0x24]
c00230f5:	52                   	push   edx
c00230f6:	e8 45 d5 fd ff       	call   c0000640 <strcpy>
c00230fb:	58                   	pop    eax
c00230fc:	8d 54 24 24          	lea    edx,[esp+0x24]
c0023100:	52                   	push   edx
c0023101:	e8 6a d4 fd ff       	call   c0000570 <strlen>
c0023106:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c002310b:	83 c4 10             	add    esp,0x10
c002310e:	31 d2                	xor    edx,edx
c0023110:	eb 3b                	jmp    c002314d <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0023112:	83 fe 40             	cmp    esi,0x40
c0023115:	74 06                	je     c002311d <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0023117:	8d 44 24 58          	lea    eax,[esp+0x58]
c002311b:	eb 20                	jmp    c002313d <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c002311d:	50                   	push   eax
c002311e:	50                   	push   eax
c002311f:	55                   	push   ebp
c0023120:	8d 44 24 24          	lea    eax,[esp+0x24]
c0023124:	50                   	push   eax
c0023125:	e8 26 d6 fd ff       	call   c0000750 <strcmp>
c002312a:	83 c4 10             	add    esp,0x10
c002312d:	85 c0                	test   eax,eax
c002312f:	75 dd                	jne    c002310e <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0023131:	eb e4                	jmp    c0023117 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0023133:	8d 50 01             	lea    edx,[eax+0x1]
c0023136:	83 f9 3d             	cmp    ecx,0x3d
c0023139:	74 1e                	je     c0023159 <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c002313b:	89 d0                	mov    eax,edx
c002313d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0023140:	85 c9                	test   ecx,ecx
c0023142:	75 ef                	jne    c0023133 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0023144:	eb 0f                	jmp    c0023155 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0023146:	8d 50 01             	lea    edx,[eax+0x1]
c0023149:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c002314d:	47                   	inc    edi
c002314e:	89 d0                	mov    eax,edx
c0023150:	e9 2c ff ff ff       	jmp    c0023081 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0023155:	31 c0                	xor    eax,eax
c0023157:	eb 33                	jmp    c002318c <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0023159:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002315d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0023160:	50                   	push   eax
c0023161:	50                   	push   eax
c0023162:	8d 44 24 60          	lea    eax,[esp+0x60]
c0023166:	50                   	push   eax
c0023167:	53                   	push   ebx
c0023168:	e8 e3 d5 fd ff       	call   c0000750 <strcmp>
c002316d:	83 c4 10             	add    esp,0x10
c0023170:	85 c0                	test   eax,eax
c0023172:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023176:	75 96                	jne    c002310e <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0023178:	51                   	push   ecx
c0023179:	51                   	push   ecx
c002317a:	52                   	push   edx
c002317b:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0023182:	e8 b9 d4 fd ff       	call   c0000640 <strcpy>
c0023187:	83 c4 10             	add    esp,0x10
c002318a:	b0 01                	mov    al,0x1
c002318c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0023192:	5b                   	pop    ebx
c0023193:	5e                   	pop    esi
c0023194:	5f                   	pop    edi
c0023195:	5d                   	pop    ebp
c0023196:	c3                   	ret    

c0023197 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0023197:	57                   	push   edi
c0023198:	56                   	push   esi
c0023199:	53                   	push   ebx
c002319a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00231a0:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00231a7:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00231ae:	53                   	push   ebx
c00231af:	e8 bc d3 fd ff       	call   c0000570 <strlen>
c00231b4:	89 34 24             	mov    DWORD PTR [esp],esi
c00231b7:	89 c7                	mov    edi,eax
c00231b9:	e8 b2 d3 fd ff       	call   c0000570 <strlen>
c00231be:	83 c4 10             	add    esp,0x10
c00231c1:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00231c5:	3d ff 00 00 00       	cmp    eax,0xff
c00231ca:	0f 87 d3 00 00 00    	ja     c00232a3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00231d0:	57                   	push   edi
c00231d1:	57                   	push   edi
c00231d2:	56                   	push   esi
c00231d3:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00231d7:	56                   	push   esi
c00231d8:	e8 63 d4 fd ff       	call   c0000640 <strcpy>
c00231dd:	58                   	pop    eax
c00231de:	5a                   	pop    edx
c00231df:	68 5f 36 03 c0       	push   0xc003365f
c00231e4:	56                   	push   esi
c00231e5:	e8 56 d6 fd ff       	call   c0000840 <strcat>
c00231ea:	59                   	pop    ecx
c00231eb:	5f                   	pop    edi
c00231ec:	53                   	push   ebx
c00231ed:	56                   	push   esi
c00231ee:	e8 4d d6 fd ff       	call   c0000840 <strcat>
c00231f3:	58                   	pop    eax
c00231f4:	5a                   	pop    edx
c00231f5:	68 cd 32 03 c0       	push   0xc00332cd
c00231fa:	56                   	push   esi
c00231fb:	e8 40 d6 fd ff       	call   c0000840 <strcat>
c0023200:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0023207:	e8 bb 33 ff ff       	call   c00165c7 <malloc>
c002320c:	83 c4 0c             	add    esp,0xc
c002320f:	89 c3                	mov    ebx,eax
c0023211:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0023217:	56                   	push   esi
c0023218:	50                   	push   eax
c0023219:	e8 3e 74 ff ff       	call   c001a65c <File::File(char const*, Process*)>
c002321e:	83 c4 10             	add    esp,0x10
c0023221:	85 db                	test   ebx,ebx
c0023223:	74 7e                	je     c00232a3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0023225:	51                   	push   ecx
c0023226:	51                   	push   ecx
c0023227:	6a 01                	push   0x1
c0023229:	53                   	push   ebx
c002322a:	e8 4b 74 ff ff       	call   c001a67a <File::open(FileOpenMode)>
c002322f:	83 c4 10             	add    esp,0x10
c0023232:	85 c0                	test   eax,eax
c0023234:	74 08                	je     c002323e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0023236:	83 ec 0c             	sub    esp,0xc
c0023239:	8b 03                	mov    eax,DWORD PTR [ebx]
c002323b:	53                   	push   ebx
c002323c:	eb 5f                	jmp    c002329d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c002323e:	52                   	push   edx
c002323f:	8d 44 24 17          	lea    eax,[esp+0x17]
c0023243:	50                   	push   eax
c0023244:	8d 44 24 20          	lea    eax,[esp+0x20]
c0023248:	50                   	push   eax
c0023249:	53                   	push   ebx
c002324a:	e8 2d 77 ff ff       	call   c001a97c <File::stat(unsigned long long*, bool*)>
c002324f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023253:	83 c4 10             	add    esp,0x10
c0023256:	89 c1                	mov    ecx,eax
c0023258:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c002325c:	74 31                	je     c002328f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c002325e:	83 ec 0c             	sub    esp,0xc
c0023261:	50                   	push   eax
c0023262:	e8 60 33 ff ff       	call   c00165c7 <malloc>
c0023267:	89 c6                	mov    esi,eax
c0023269:	58                   	pop    eax
c002326a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002326c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0023270:	52                   	push   edx
c0023271:	56                   	push   esi
c0023272:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0023276:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002327a:	53                   	push   ebx
c002327b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c002327e:	83 c4 20             	add    esp,0x20
c0023281:	85 c0                	test   eax,eax
c0023283:	75 0a                	jne    c002328f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0023285:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023289:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c002328d:	74 18                	je     c00232a7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c002328f:	83 ec 0c             	sub    esp,0xc
c0023292:	53                   	push   ebx
c0023293:	e8 40 74 ff ff       	call   c001a6d8 <File::close()>
c0023298:	8b 03                	mov    eax,DWORD PTR [ebx]
c002329a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002329d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00232a0:	83 c4 10             	add    esp,0x10
c00232a3:	31 c0                	xor    eax,eax
c00232a5:	eb 3b                	jmp    c00232e2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00232a7:	83 ec 0c             	sub    esp,0xc
c00232aa:	53                   	push   ebx
c00232ab:	e8 28 74 ff ff       	call   c001a6d8 <File::close()>
c00232b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00232b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00232b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00232b8:	83 c4 0c             	add    esp,0xc
c00232bb:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00232c2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00232c9:	56                   	push   esi
c00232ca:	e8 57 fd ff ff       	call   c0023026 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00232cf:	89 34 24             	mov    DWORD PTR [esp],esi
c00232d2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00232d6:	e8 fc 32 ff ff       	call   c00165d7 <free>
c00232db:	83 c4 10             	add    esp,0x10
c00232de:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00232e2:	81 c4 20 01 00 00    	add    esp,0x120
c00232e8:	5b                   	pop    ebx
c00232e9:	5e                   	pop    esi
c00232ea:	5f                   	pop    edi
c00232eb:	c3                   	ret    

c00232ec <Reg::getLine(char*, char*, char*)>:
c00232ec:	57                   	push   edi
c00232ed:	56                   	push   esi
c00232ee:	53                   	push   ebx
c00232ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00232f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00232f7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00232fb:	57                   	push   edi
c00232fc:	56                   	push   esi
c00232fd:	53                   	push   ebx
c00232fe:	68 d2 32 03 c0       	push   0xc00332d2
c0023303:	e8 8f fe ff ff       	call   c0023197 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0023308:	83 c4 10             	add    esp,0x10
c002330b:	84 c0                	test   al,al
c002330d:	75 10                	jne    c002331f <Reg::getLine(char*, char*, char*)+0x33>
c002330f:	57                   	push   edi
c0023310:	56                   	push   esi
c0023311:	53                   	push   ebx
c0023312:	68 f7 32 03 c0       	push   0xc00332f7
c0023317:	e8 7b fe ff ff       	call   c0023197 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c002331c:	83 c4 10             	add    esp,0x10
c002331f:	5b                   	pop    ebx
c0023320:	5e                   	pop    esi
c0023321:	5f                   	pop    edi
c0023322:	c3                   	ret    

c0023323 <Reg::readInt(char*, char*, int*)>:
c0023323:	55                   	push   ebp
c0023324:	57                   	push   edi
c0023325:	56                   	push   esi
c0023326:	53                   	push   ebx
c0023327:	81 ec f0 00 00 00    	sub    esp,0xf0
c002332d:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0023331:	55                   	push   ebp
c0023332:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0023339:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0023340:	e8 a7 ff ff ff       	call   c00232ec <Reg::getLine(char*, char*, char*)>
c0023345:	83 c4 10             	add    esp,0x10
c0023348:	84 c0                	test   al,al
c002334a:	0f 84 b6 00 00 00    	je     c0023406 <Reg::readInt(char*, char*, int*)+0xe3>
c0023350:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0023355:	83 fa 2b             	cmp    edx,0x2b
c0023358:	74 0c                	je     c0023366 <Reg::readInt(char*, char*, int*)+0x43>
c002335a:	83 fa 2d             	cmp    edx,0x2d
c002335d:	75 0e                	jne    c002336d <Reg::readInt(char*, char*, int*)+0x4a>
c002335f:	ba 01 00 00 00       	mov    edx,0x1
c0023364:	eb 0b                	jmp    c0023371 <Reg::readInt(char*, char*, int*)+0x4e>
c0023366:	ba 01 00 00 00       	mov    edx,0x1
c002336b:	eb 02                	jmp    c002336f <Reg::readInt(char*, char*, int*)+0x4c>
c002336d:	31 d2                	xor    edx,edx
c002336f:	31 c0                	xor    eax,eax
c0023371:	be 0a 00 00 00       	mov    esi,0xa
c0023376:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c002337b:	75 21                	jne    c002339e <Reg::readInt(char*, char*, int*)+0x7b>
c002337d:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0023382:	83 f9 78             	cmp    ecx,0x78
c0023385:	75 0a                	jne    c0023391 <Reg::readInt(char*, char*, int*)+0x6e>
c0023387:	83 c2 02             	add    edx,0x2
c002338a:	be 10 00 00 00       	mov    esi,0x10
c002338f:	eb 0d                	jmp    c002339e <Reg::readInt(char*, char*, int*)+0x7b>
c0023391:	83 f9 62             	cmp    ecx,0x62
c0023394:	75 08                	jne    c002339e <Reg::readInt(char*, char*, int*)+0x7b>
c0023396:	83 c2 02             	add    edx,0x2
c0023399:	be 02 00 00 00       	mov    esi,0x2
c002339e:	01 d5                	add    ebp,edx
c00233a0:	31 d2                	xor    edx,edx
c00233a2:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c00233a6:	83 f9 0d             	cmp    ecx,0xd
c00233a9:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00233ad:	0f 94 c3             	sete   bl
c00233b0:	85 c9                	test   ecx,ecx
c00233b2:	89 df                	mov    edi,ebx
c00233b4:	0f 94 c3             	sete   bl
c00233b7:	09 df                	or     edi,ebx
c00233b9:	89 fb                	mov    ebx,edi
c00233bb:	83 e7 01             	and    edi,0x1
c00233be:	75 35                	jne    c00233f5 <Reg::readInt(char*, char*, int*)+0xd2>
c00233c0:	0f af d6             	imul   edx,esi
c00233c3:	83 fe 10             	cmp    esi,0x10
c00233c6:	75 26                	jne    c00233ee <Reg::readInt(char*, char*, int*)+0xcb>
c00233c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00233cc:	83 ef 41             	sub    edi,0x41
c00233cf:	89 fb                	mov    ebx,edi
c00233d1:	80 fb 05             	cmp    bl,0x5
c00233d4:	77 06                	ja     c00233dc <Reg::readInt(char*, char*, int*)+0xb9>
c00233d6:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c00233da:	eb 16                	jmp    c00233f2 <Reg::readInt(char*, char*, int*)+0xcf>
c00233dc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00233e0:	83 eb 61             	sub    ebx,0x61
c00233e3:	80 fb 05             	cmp    bl,0x5
c00233e6:	77 06                	ja     c00233ee <Reg::readInt(char*, char*, int*)+0xcb>
c00233e8:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c00233ec:	eb 04                	jmp    c00233f2 <Reg::readInt(char*, char*, int*)+0xcf>
c00233ee:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c00233f2:	45                   	inc    ebp
c00233f3:	eb ad                	jmp    c00233a2 <Reg::readInt(char*, char*, int*)+0x7f>
c00233f5:	84 c0                	test   al,al
c00233f7:	74 02                	je     c00233fb <Reg::readInt(char*, char*, int*)+0xd8>
c00233f9:	f7 da                	neg    edx
c00233fb:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0023402:	89 10                	mov    DWORD PTR [eax],edx
c0023404:	88 d8                	mov    al,bl
c0023406:	81 c4 ec 00 00 00    	add    esp,0xec
c002340c:	5b                   	pop    ebx
c002340d:	5e                   	pop    esi
c002340e:	5f                   	pop    edi
c002340f:	5d                   	pop    ebp
c0023410:	c3                   	ret    

c0023411 <Reg::readString(char*, char*, char*, int)>:
c0023411:	57                   	push   edi
c0023412:	56                   	push   esi
c0023413:	53                   	push   ebx
c0023414:	81 ec d4 00 00 00    	sub    esp,0xd4
c002341a:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0023421:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0023425:	57                   	push   edi
c0023426:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c002342d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0023434:	e8 b3 fe ff ff       	call   c00232ec <Reg::getLine(char*, char*, char*)>
c0023439:	83 c4 10             	add    esp,0x10
c002343c:	89 c6                	mov    esi,eax
c002343e:	84 c0                	test   al,al
c0023440:	74 44                	je     c0023486 <Reg::readString(char*, char*, char*, int)+0x75>
c0023442:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0023449:	31 c0                	xor    eax,eax
c002344b:	4a                   	dec    edx
c002344c:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c002344f:	84 c9                	test   cl,cl
c0023451:	74 0f                	je     c0023462 <Reg::readString(char*, char*, char*, int)+0x51>
c0023453:	39 c2                	cmp    edx,eax
c0023455:	7e 0b                	jle    c0023462 <Reg::readString(char*, char*, char*, int)+0x51>
c0023457:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c002345a:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c002345f:	40                   	inc    eax
c0023460:	eb ea                	jmp    c002344c <Reg::readString(char*, char*, char*, int)+0x3b>
c0023462:	83 ec 0c             	sub    esp,0xc
c0023465:	53                   	push   ebx
c0023466:	e8 05 d1 fd ff       	call   c0000570 <strlen>
c002346b:	83 c4 10             	add    esp,0x10
c002346e:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0023473:	75 11                	jne    c0023486 <Reg::readString(char*, char*, char*, int)+0x75>
c0023475:	83 ec 0c             	sub    esp,0xc
c0023478:	53                   	push   ebx
c0023479:	e8 f2 d0 fd ff       	call   c0000570 <strlen>
c002347e:	83 c4 10             	add    esp,0x10
c0023481:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0023486:	81 c4 d0 00 00 00    	add    esp,0xd0
c002348c:	89 f0                	mov    eax,esi
c002348e:	5b                   	pop    ebx
c002348f:	5e                   	pop    esi
c0023490:	5f                   	pop    edi
c0023491:	c3                   	ret    

c0023492 <Reg::readBool(char*, char*, bool*)>:
c0023492:	83 ec 20             	sub    esp,0x20
c0023495:	8d 44 24 10          	lea    eax,[esp+0x10]
c0023499:	50                   	push   eax
c002349a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002349e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00234a2:	e8 7c fe ff ff       	call   c0023323 <Reg::readInt(char*, char*, int*)>
c00234a7:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00234ac:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00234b0:	0f 95 02             	setne  BYTE PTR [edx]
c00234b3:	83 c4 2c             	add    esp,0x2c
c00234b6:	c3                   	ret    

c00234b7 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00234b7:	53                   	push   ebx
c00234b8:	83 ec 1c             	sub    esp,0x1c
c00234bb:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00234bf:	8d 44 24 13          	lea    eax,[esp+0x13]
c00234c3:	50                   	push   eax
c00234c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00234c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00234cc:	e8 c1 ff ff ff       	call   c0023492 <Reg::readBool(char*, char*, bool*)>
c00234d1:	83 c4 10             	add    esp,0x10
c00234d4:	84 c0                	test   al,al
c00234d6:	74 04                	je     c00234dc <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00234d8:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00234dc:	88 d8                	mov    al,bl
c00234de:	83 c4 18             	add    esp,0x18
c00234e1:	5b                   	pop    ebx
c00234e2:	c3                   	ret    

c00234e3 <Reg::readIntWithDefault(char*, char*, int)>:
c00234e3:	53                   	push   ebx
c00234e4:	83 ec 1c             	sub    esp,0x1c
c00234e7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00234eb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00234ef:	50                   	push   eax
c00234f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00234f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00234f8:	e8 26 fe ff ff       	call   c0023323 <Reg::readInt(char*, char*, int*)>
c00234fd:	83 c4 10             	add    esp,0x10
c0023500:	84 c0                	test   al,al
c0023502:	74 04                	je     c0023508 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0023504:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0023508:	89 d8                	mov    eax,ebx
c002350a:	83 c4 18             	add    esp,0x18
c002350d:	5b                   	pop    ebx
c002350e:	c3                   	ret    

c002350f <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c002350f:	57                   	push   edi
c0023510:	56                   	push   esi
c0023511:	56                   	push   esi
c0023512:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023516:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002351a:	56                   	push   esi
c002351b:	57                   	push   edi
c002351c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023524:	e8 e8 fe ff ff       	call   c0023411 <Reg::readString(char*, char*, char*, int)>
c0023529:	83 c4 10             	add    esp,0x10
c002352c:	84 c0                	test   al,al
c002352e:	75 1a                	jne    c002354a <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0023530:	51                   	push   ecx
c0023531:	56                   	push   esi
c0023532:	6a 00                	push   0x0
c0023534:	57                   	push   edi
c0023535:	e8 b6 cf fd ff       	call   c00004f0 <memset>
c002353a:	8d 4e ff             	lea    ecx,[esi-0x1]
c002353d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023541:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023543:	83 c4 10             	add    esp,0x10
c0023546:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002354a:	89 f8                	mov    eax,edi
c002354c:	5a                   	pop    edx
c002354d:	5e                   	pop    esi
c002354e:	5f                   	pop    edi
c002354f:	c3                   	ret    

c0023550 <SysEject(regs*)>:
c0023550:	83 ec 0c             	sub    esp,0xc
c0023553:	83 ca ff             	or     edx,0xffffffff
c0023556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002355a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c002355d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0023562:	83 e9 41             	sub    ecx,0x41
c0023565:	83 f9 19             	cmp    ecx,0x19
c0023568:	77 18                	ja     c0023582 <SysEject(regs*)+0x32>
c002356a:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c0023571:	85 c9                	test   ecx,ecx
c0023573:	74 0d                	je     c0023582 <SysEject(regs*)+0x32>
c0023575:	83 ec 0c             	sub    esp,0xc
c0023578:	51                   	push   ecx
c0023579:	e8 1c 94 ff ff       	call   c001c99a <LogicalDisk::eject()>
c002357e:	83 c4 10             	add    esp,0x10
c0023581:	99                   	cdq    
c0023582:	83 c4 0c             	add    esp,0xc
c0023585:	c3                   	ret    

c0023586 <SysExit(regs*)>:
c0023586:	83 ec 18             	sub    esp,0x18
c0023589:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002358d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023590:	e8 87 29 00 00       	call   c0025f1c <terminateTask(int)>
c0023595:	83 c8 ff             	or     eax,0xffffffff
c0023598:	83 c4 1c             	add    esp,0x1c
c002359b:	89 c2                	mov    edx,eax
c002359d:	c3                   	ret    

c002359e <SysGetCwd(regs*)>:
c002359e:	83 ec 10             	sub    esp,0x10
c00235a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00235a5:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00235a8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00235ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00235b0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00235b3:	e8 58 6d ff ff       	call   c001a310 <Fs::getcwd(Process*, char*, int)>
c00235b8:	83 c4 1c             	add    esp,0x1c
c00235bb:	99                   	cdq    
c00235bc:	c3                   	ret    

c00235bd <SysGetPID(regs*)>:
c00235bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00235c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00235c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00235c7:	99                   	cdq    
c00235c8:	c3                   	ret    

c00235c9 <SysGetRAMData(regs*)>:
c00235c9:	8b 0d ec b9 03 c0    	mov    ecx,DWORD PTR ds:0xc003b9ec
c00235cf:	69 05 e8 b9 03 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc003b9e8,0xc8
c00235d9:	99                   	cdq    
c00235da:	f7 f9                	idiv   ecx
c00235dc:	c1 e0 18             	shl    eax,0x18
c00235df:	09 c8                	or     eax,ecx
c00235e1:	99                   	cdq    
c00235e2:	c3                   	ret    

c00235e3 <SysGetVGAPtr(regs*)>:
c00235e3:	55                   	push   ebp
c00235e4:	57                   	push   edi
c00235e5:	56                   	push   esi
c00235e6:	53                   	push   ebx
c00235e7:	83 ec 18             	sub    esp,0x18
c00235ea:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00235ee:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00235f1:	e8 f2 23 00 00       	call   c00259e8 <Thr::processFromPID(int)>
c00235f6:	83 c4 10             	add    esp,0x10
c00235f9:	89 c1                	mov    ecx,eax
c00235fb:	b8 01 00 00 00       	mov    eax,0x1
c0023600:	85 c9                	test   ecx,ecx
c0023602:	74 57                	je     c002365b <SysGetVGAPtr(regs*)+0x78>
c0023604:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c002360a:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c002360e:	74 0c                	je     c002361c <SysGetVGAPtr(regs*)+0x39>
c0023610:	83 ec 0c             	sub    esp,0xc
c0023613:	55                   	push   ebp
c0023614:	e8 50 3c ff ff       	call   c0017269 <setActiveTerminal(VgaText*)>
c0023619:	83 c4 10             	add    esp,0x10
c002361c:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002361f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0023622:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0023627:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023629:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002362c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002362f:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0023635:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023638:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002363b:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0023641:	50                   	push   eax
c0023642:	50                   	push   eax
c0023643:	68 12 33 03 c0       	push   0xc0033312
c0023648:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002364b:	05 a8 0f 00 00       	add    eax,0xfa8
c0023650:	50                   	push   eax
c0023651:	e8 ea cf fd ff       	call   c0000640 <strcpy>
c0023656:	83 c4 10             	add    esp,0x10
c0023659:	31 c0                	xor    eax,eax
c002365b:	83 c4 0c             	add    esp,0xc
c002365e:	31 d2                	xor    edx,edx
c0023660:	5b                   	pop    ebx
c0023661:	5e                   	pop    esi
c0023662:	5f                   	pop    edi
c0023663:	5d                   	pop    ebp
c0023664:	c3                   	ret    
c0023665:	66 90                	xchg   ax,ax
c0023667:	90                   	nop

c0023668 <SysKill(regs*)>:
c0023668:	53                   	push   ebx
c0023669:	83 ec 08             	sub    esp,0x8
c002366c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023670:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0023674:	75 16                	jne    c002368c <SysKill(regs*)+0x24>
c0023676:	83 ec 0c             	sub    esp,0xc
c0023679:	68 1c 33 03 c0       	push   0xc003331c
c002367e:	e8 0b d1 ff ff       	call   c002078e <KePanic(char const*)>
c0023683:	83 c4 10             	add    esp,0x10
c0023686:	e9 89 00 00 00       	jmp    c0023714 <SysKill(regs*)+0xac>
c002368b:	90                   	nop
c002368c:	83 ec 0c             	sub    esp,0xc
c002368f:	68 ec 11 04 c0       	push   0xc00411ec
c0023694:	e8 33 bc 00 00       	call   c002f2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0023699:	8d 76 00             	lea    esi,[esi+0x0]
c002369c:	83 c4 10             	add    esp,0x10
c002369f:	85 c0                	test   eax,eax
c00236a1:	74 19                	je     c00236bc <SysKill(regs*)+0x54>
c00236a3:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00236a6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00236a9:	39 0a                	cmp    DWORD PTR [edx],ecx
c00236ab:	74 33                	je     c00236e0 <SysKill(regs*)+0x78>
c00236ad:	52                   	push   edx
c00236ae:	52                   	push   edx
c00236af:	50                   	push   eax
c00236b0:	68 ec 11 04 c0       	push   0xc00411ec
c00236b5:	e8 32 bf 00 00       	call   c002f5ec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00236ba:	eb e0                	jmp    c002369c <SysKill(regs*)+0x34>
c00236bc:	83 ec 0c             	sub    esp,0xc
c00236bf:	68 e0 11 04 c0       	push   0xc00411e0
c00236c4:	e8 03 bc 00 00       	call   c002f2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00236c9:	8d 76 00             	lea    esi,[esi+0x0]
c00236cc:	83 c4 10             	add    esp,0x10
c00236cf:	85 c0                	test   eax,eax
c00236d1:	74 41                	je     c0023714 <SysKill(regs*)+0xac>
c00236d3:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00236d6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00236d9:	39 0a                	cmp    DWORD PTR [edx],ecx
c00236db:	75 27                	jne    c0023704 <SysKill(regs*)+0x9c>
c00236dd:	8d 76 00             	lea    esi,[esi+0x0]
c00236e0:	51                   	push   ecx
c00236e1:	51                   	push   ecx
c00236e2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00236e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00236ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00236ed:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00236f3:	e8 4f d9 ff ff       	call   c0021047 <KeRaiseSignal(SigHandlerBlock*, int)>
c00236f8:	83 c4 10             	add    esp,0x10
c00236fb:	31 c0                	xor    eax,eax
c00236fd:	31 d2                	xor    edx,edx
c00236ff:	eb 1b                	jmp    c002371c <SysKill(regs*)+0xb4>
c0023701:	8d 76 00             	lea    esi,[esi+0x0]
c0023704:	52                   	push   edx
c0023705:	52                   	push   edx
c0023706:	50                   	push   eax
c0023707:	68 e0 11 04 c0       	push   0xc00411e0
c002370c:	e8 db be 00 00       	call   c002f5ec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0023711:	eb b9                	jmp    c00236cc <SysKill(regs*)+0x64>
c0023713:	90                   	nop
c0023714:	83 c8 ff             	or     eax,0xffffffff
c0023717:	89 c2                	mov    edx,eax
c0023719:	8d 76 00             	lea    esi,[esi+0x0]
c002371c:	83 c4 08             	add    esp,0x8
c002371f:	5b                   	pop    ebx
c0023720:	c3                   	ret    

c0023721 <SysLoadDLL(regs*)>:
c0023721:	56                   	push   esi
c0023722:	53                   	push   ebx
c0023723:	31 d2                	xor    edx,edx
c0023725:	51                   	push   ecx
c0023726:	b8 01 00 00 00       	mov    eax,0x1
c002372b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002372f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0023733:	0f 84 8c 00 00 00    	je     c00237c5 <SysLoadDLL(regs*)+0xa4>
c0023739:	83 ec 0c             	sub    esp,0xc
c002373c:	68 14 01 00 00       	push   0x114
c0023741:	e8 81 2e ff ff       	call   c00165c7 <malloc>
c0023746:	83 c4 0c             	add    esp,0xc
c0023749:	89 c3                	mov    ebx,eax
c002374b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023750:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023753:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0023756:	53                   	push   ebx
c0023757:	e8 00 6f ff ff       	call   c001a65c <File::File(char const*, Process*)>
c002375c:	83 c4 10             	add    esp,0x10
c002375f:	31 d2                	xor    edx,edx
c0023761:	b8 02 00 00 00       	mov    eax,0x2
c0023766:	85 db                	test   ebx,ebx
c0023768:	74 5b                	je     c00237c5 <SysLoadDLL(regs*)+0xa4>
c002376a:	83 ec 0c             	sub    esp,0xc
c002376d:	53                   	push   ebx
c002376e:	e8 cb 71 ff ff       	call   c001a93e <File::exists()>
c0023773:	83 c4 10             	add    esp,0x10
c0023776:	84 c0                	test   al,al
c0023778:	8b 03                	mov    eax,DWORD PTR [ebx]
c002377a:	75 11                	jne    c002378d <SysLoadDLL(regs*)+0x6c>
c002377c:	83 ec 0c             	sub    esp,0xc
c002377f:	53                   	push   ebx
c0023780:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023783:	83 c4 10             	add    esp,0x10
c0023786:	b8 03 00 00 00       	mov    eax,0x3
c002378b:	eb 36                	jmp    c00237c3 <SysLoadDLL(regs*)+0xa2>
c002378d:	83 ec 0c             	sub    esp,0xc
c0023790:	53                   	push   ebx
c0023791:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023794:	58                   	pop    eax
c0023795:	5a                   	pop    edx
c0023796:	6a 00                	push   0x0
c0023798:	ff 76 20             	push   DWORD PTR [esi+0x20]
c002379b:	e8 76 15 00 00       	call   c0024d16 <Thr::loadDLL(char const*, bool)>
c00237a0:	83 c4 10             	add    esp,0x10
c00237a3:	89 c1                	mov    ecx,eax
c00237a5:	31 d2                	xor    edx,edx
c00237a7:	b8 04 00 00 00       	mov    eax,0x4
c00237ac:	85 c9                	test   ecx,ecx
c00237ae:	74 15                	je     c00237c5 <SysLoadDLL(regs*)+0xa4>
c00237b0:	53                   	push   ebx
c00237b1:	53                   	push   ebx
c00237b2:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c00237b8:	51                   	push   ecx
c00237b9:	e8 aa 17 00 00       	call   c0024f68 <Thr::executeDLL(unsigned long, void*)>
c00237be:	83 c4 10             	add    esp,0x10
c00237c1:	31 c0                	xor    eax,eax
c00237c3:	31 d2                	xor    edx,edx
c00237c5:	59                   	pop    ecx
c00237c6:	5b                   	pop    ebx
c00237c7:	5e                   	pop    esi
c00237c8:	c3                   	ret    

c00237c9 <SysRead(regs*)>:
c00237c9:	57                   	push   edi
c00237ca:	56                   	push   esi
c00237cb:	53                   	push   ebx
c00237cc:	83 ec 10             	sub    esp,0x10
c00237cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00237d3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00237d6:	83 f8 02             	cmp    eax,0x2
c00237d9:	77 10                	ja     c00237eb <SysRead(regs*)+0x22>
c00237db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00237e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00237e3:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00237e9:	eb 0e                	jmp    c00237f9 <SysRead(regs*)+0x30>
c00237eb:	83 ec 0c             	sub    esp,0xc
c00237ee:	50                   	push   eax
c00237ef:	e8 cf 47 ff ff       	call   c0017fc3 <KeGetFileFromDescriptor(int)>
c00237f4:	83 c4 10             	add    esp,0x10
c00237f7:	89 c1                	mov    ecx,eax
c00237f9:	83 c8 ff             	or     eax,0xffffffff
c00237fc:	85 c9                	test   ecx,ecx
c00237fe:	89 c2                	mov    edx,eax
c0023800:	74 28                	je     c002382a <SysRead(regs*)+0x61>
c0023802:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002380a:	31 ff                	xor    edi,edi
c002380c:	83 ec 0c             	sub    esp,0xc
c002380f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0023811:	8d 54 24 18          	lea    edx,[esp+0x18]
c0023815:	52                   	push   edx
c0023816:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023819:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c002381c:	57                   	push   edi
c002381d:	56                   	push   esi
c002381e:	51                   	push   ecx
c002381f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023822:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0023826:	83 c4 20             	add    esp,0x20
c0023829:	99                   	cdq    
c002382a:	83 c4 10             	add    esp,0x10
c002382d:	5b                   	pop    ebx
c002382e:	5e                   	pop    esi
c002382f:	5f                   	pop    edi
c0023830:	c3                   	ret    

c0023831 <SysRegisterSignal(regs*)>:
c0023831:	83 ec 18             	sub    esp,0x18
c0023834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023838:	6a 00                	push   0x0
c002383a:	6a 00                	push   0x0
c002383c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c002383f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023842:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023847:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002384a:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0023850:	e8 bc d7 ff ff       	call   c0021011 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0023855:	83 c4 2c             	add    esp,0x2c
c0023858:	99                   	cdq    
c0023859:	c3                   	ret    

c002385a <SysRegistryGetTypeFromPath(regs*)>:
c002385a:	57                   	push   edi
c002385b:	56                   	push   esi
c002385c:	53                   	push   ebx
c002385d:	81 ec 38 01 00 00    	sub    esp,0x138
c0023863:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c002386a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c002386d:	68 3d 33 03 c0       	push   0xc003333d
c0023872:	e8 de 5b ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0023877:	5a                   	pop    edx
c0023878:	59                   	pop    ecx
c0023879:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c002387c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002387f:	e8 4c f6 ff ff       	call   c0022ed0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0023884:	5f                   	pop    edi
c0023885:	89 c6                	mov    esi,eax
c0023887:	5a                   	pop    edx
c0023888:	50                   	push   eax
c0023889:	68 5d 33 03 c0       	push   0xc003335d
c002388e:	e8 c2 5b ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0023893:	83 c4 10             	add    esp,0x10
c0023896:	85 f6                	test   esi,esi
c0023898:	74 28                	je     c00238c2 <SysRegistryGetTypeFromPath(regs*)+0x68>
c002389a:	50                   	push   eax
c002389b:	8d 7c 24 08          	lea    edi,[esp+0x8]
c002389f:	57                   	push   edi
c00238a0:	56                   	push   esi
c00238a1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00238a4:	e8 0b f2 ff ff       	call   c0022ab4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00238a9:	83 c4 0c             	add    esp,0xc
c00238ac:	89 c3                	mov    ebx,eax
c00238ae:	57                   	push   edi
c00238af:	50                   	push   eax
c00238b0:	68 65 33 03 c0       	push   0xc0033365
c00238b5:	e8 9b 5b ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c00238ba:	89 d8                	mov    eax,ebx
c00238bc:	83 c4 10             	add    esp,0x10
c00238bf:	99                   	cdq    
c00238c0:	eb 05                	jmp    c00238c7 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00238c2:	83 c8 ff             	or     eax,0xffffffff
c00238c5:	89 c2                	mov    edx,eax
c00238c7:	81 c4 30 01 00 00    	add    esp,0x130
c00238cd:	5b                   	pop    ebx
c00238ce:	5e                   	pop    esi
c00238cf:	5f                   	pop    edi
c00238d0:	c3                   	ret    

c00238d1 <SysRegistryReadExtent(regs*)>:
c00238d1:	83 ec 1c             	sub    esp,0x1c
c00238d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00238d8:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00238db:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00238de:	85 c0                	test   eax,eax
c00238e0:	79 1f                	jns    c0023901 <SysRegistryReadExtent(regs*)+0x30>
c00238e2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00238e7:	52                   	push   edx
c00238e8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00238ec:	52                   	push   edx
c00238ed:	50                   	push   eax
c00238ee:	51                   	push   ecx
c00238ef:	e8 b2 f0 ff ff       	call   c00229a6 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00238f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00238f8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00238fc:	83 c4 10             	add    esp,0x10
c00238ff:	eb 14                	jmp    c0023915 <SysRegistryReadExtent(regs*)+0x44>
c0023901:	83 ec 04             	sub    esp,0x4
c0023904:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0023907:	50                   	push   eax
c0023908:	51                   	push   ecx
c0023909:	e8 32 eb ff ff       	call   c0022440 <CmGetString(Reghive_Tag*, int, char*)>
c002390e:	83 c4 10             	add    esp,0x10
c0023911:	31 c0                	xor    eax,eax
c0023913:	31 d2                	xor    edx,edx
c0023915:	83 c4 1c             	add    esp,0x1c
c0023918:	c3                   	ret    

c0023919 <SysRegistryPathToExtentLookup(regs*)>:
c0023919:	53                   	push   ebx
c002391a:	83 ec 10             	sub    esp,0x10
c002391d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023921:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023924:	68 7b 33 03 c0       	push   0xc003337b
c0023929:	e8 27 5b ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c002392e:	58                   	pop    eax
c002392f:	5a                   	pop    edx
c0023930:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023933:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023936:	e8 95 f5 ff ff       	call   c0022ed0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c002393b:	83 c4 18             	add    esp,0x18
c002393e:	99                   	cdq    
c002393f:	5b                   	pop    ebx
c0023940:	c3                   	ret    

c0023941 <SysRegistryEnterDirectory(regs*)>:
c0023941:	53                   	push   ebx
c0023942:	83 ec 10             	sub    esp,0x10
c0023945:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023949:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002394c:	68 9e 33 03 c0       	push   0xc003339e
c0023951:	e8 ff 5a ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0023956:	58                   	pop    eax
c0023957:	5a                   	pop    edx
c0023958:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002395b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002395e:	e8 54 eb ff ff       	call   c00224b7 <CmEnterDirectory(Reghive_Tag*, int)>
c0023963:	83 c4 18             	add    esp,0x18
c0023966:	99                   	cdq    
c0023967:	5b                   	pop    ebx
c0023968:	c3                   	ret    

c0023969 <SysRegistryGetNext(regs*)>:
c0023969:	53                   	push   ebx
c002396a:	83 ec 10             	sub    esp,0x10
c002396d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023971:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023974:	68 bc 33 03 c0       	push   0xc00333bc
c0023979:	e8 d7 5a ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c002397e:	58                   	pop    eax
c002397f:	5a                   	pop    edx
c0023980:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023983:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023986:	e8 6b eb ff ff       	call   c00224f6 <CmGetNext(Reghive_Tag*, int)>
c002398b:	83 c4 18             	add    esp,0x18
c002398e:	99                   	cdq    
c002398f:	5b                   	pop    ebx
c0023990:	c3                   	ret    

c0023991 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0023991:	57                   	push   edi
c0023992:	56                   	push   esi
c0023993:	53                   	push   ebx
c0023994:	81 ec 34 01 00 00    	sub    esp,0x134
c002399a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00239a1:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00239a5:	57                   	push   edi
c00239a6:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00239a9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00239ac:	e8 03 f1 ff ff       	call   c0022ab4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00239b1:	89 c3                	mov    ebx,eax
c00239b3:	58                   	pop    eax
c00239b4:	5a                   	pop    edx
c00239b5:	57                   	push   edi
c00239b6:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00239b9:	e8 82 cc fd ff       	call   c0000640 <strcpy>
c00239be:	89 d8                	mov    eax,ebx
c00239c0:	81 c4 40 01 00 00    	add    esp,0x140
c00239c6:	99                   	cdq    
c00239c7:	5b                   	pop    ebx
c00239c8:	5e                   	pop    esi
c00239c9:	5f                   	pop    edi
c00239ca:	c3                   	ret    

c00239cb <SysRegistryOpen(regs*)>:
c00239cb:	83 ec 18             	sub    esp,0x18
c00239ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00239d2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00239d5:	e8 f6 e8 ff ff       	call   c00222d0 <CmOpen(char const*)>
c00239da:	83 c4 1c             	add    esp,0x1c
c00239dd:	99                   	cdq    
c00239de:	c3                   	ret    

c00239df <SysRegistryClose(regs*)>:
c00239df:	83 ec 18             	sub    esp,0x18
c00239e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00239e6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00239e9:	e8 00 ea ff ff       	call   c00223ee <CmClose(Reghive_Tag*)>
c00239ee:	31 c0                	xor    eax,eax
c00239f0:	31 d2                	xor    edx,edx
c00239f2:	83 c4 1c             	add    esp,0x1c
c00239f5:	c3                   	ret    

c00239f6 <SysSbrk(regs*)>:
c00239f6:	56                   	push   esi
c00239f7:	53                   	push   ebx
c00239f8:	50                   	push   eax
c00239f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00239fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023a02:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023a05:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0023a08:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0023a0e:	85 db                	test   ebx,ebx
c0023a10:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0023a13:	74 02                	je     c0023a17 <SysSbrk(regs*)+0x21>
c0023a15:	79 06                	jns    c0023a1d <SysSbrk(regs*)+0x27>
c0023a17:	89 f0                	mov    eax,esi
c0023a19:	31 d2                	xor    edx,edx
c0023a1b:	eb 2a                	jmp    c0023a47 <SysSbrk(regs*)+0x51>
c0023a1d:	83 c8 ff             	or     eax,0xffffffff
c0023a20:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0023a26:	89 c2                	mov    edx,eax
c0023a28:	77 1d                	ja     c0023a47 <SysSbrk(regs*)+0x51>
c0023a2a:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0023a30:	50                   	push   eax
c0023a31:	c1 ea 0c             	shr    edx,0xc
c0023a34:	68 07 0c 00 00       	push   0xc07
c0023a39:	52                   	push   edx
c0023a3a:	51                   	push   ecx
c0023a3b:	e8 f4 4e ff ff       	call   c0018934 <VAS::allocatePages(int, int)>
c0023a40:	89 f0                	mov    eax,esi
c0023a42:	31 d2                	xor    edx,edx
c0023a44:	83 c4 10             	add    esp,0x10
c0023a47:	59                   	pop    ecx
c0023a48:	5b                   	pop    ebx
c0023a49:	5e                   	pop    esi
c0023a4a:	c3                   	ret    

c0023a4b <SysSetCwd(regs*)>:
c0023a4b:	83 ec 14             	sub    esp,0x14
c0023a4e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a52:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023a55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023a5a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023a5d:	e8 7b 6f ff ff       	call   c001a9dd <Fs::setcwd(Process*, char*)>
c0023a62:	83 c4 1c             	add    esp,0x1c
c0023a65:	99                   	cdq    
c0023a66:	c3                   	ret    

c0023a67 <SysSetTime(regs*)>:
c0023a67:	55                   	push   ebp
c0023a68:	31 c9                	xor    ecx,ecx
c0023a6a:	57                   	push   edi
c0023a6b:	bd 0c 00 00 00       	mov    ebp,0xc
c0023a70:	56                   	push   esi
c0023a71:	53                   	push   ebx
c0023a72:	31 db                	xor    ebx,ebx
c0023a74:	83 ec 10             	sub    esp,0x10
c0023a77:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023a7b:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0023a7e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0023a81:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0023a84:	89 c2                	mov    edx,eax
c0023a86:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0023a8c:	83 e2 1f             	and    edx,0x1f
c0023a8f:	c1 e7 10             	shl    edi,0x10
c0023a92:	42                   	inc    edx
c0023a93:	c1 e8 05             	shr    eax,0x5
c0023a96:	88 d1                	mov    cl,dl
c0023a98:	31 d2                	xor    edx,edx
c0023a9a:	f7 f5                	div    ebp
c0023a9c:	89 dd                	mov    ebp,ebx
c0023a9e:	88 d5                	mov    ch,dl
c0023aa0:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0023aa6:	0f b7 c1             	movzx  eax,cx
c0023aa9:	31 d2                	xor    edx,edx
c0023aab:	09 f8                	or     eax,edi
c0023aad:	bf 3c 00 00 00       	mov    edi,0x3c
c0023ab2:	89 c1                	mov    ecx,eax
c0023ab4:	89 f0                	mov    eax,esi
c0023ab6:	f7 f7                	div    edi
c0023ab8:	c1 e2 10             	shl    edx,0x10
c0023abb:	09 d5                	or     ebp,edx
c0023abd:	31 d2                	xor    edx,edx
c0023abf:	89 eb                	mov    ebx,ebp
c0023ac1:	f7 f7                	div    edi
c0023ac3:	bf 10 0e 00 00       	mov    edi,0xe10
c0023ac8:	88 d7                	mov    bh,dl
c0023aca:	89 f0                	mov    eax,esi
c0023acc:	31 d2                	xor    edx,edx
c0023ace:	f7 f7                	div    edi
c0023ad0:	bf 18 00 00 00       	mov    edi,0x18
c0023ad5:	31 d2                	xor    edx,edx
c0023ad7:	f7 f7                	div    edi
c0023ad9:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0023ade:	88 d3                	mov    bl,dl
c0023ae0:	53                   	push   ebx
c0023ae1:	51                   	push   ecx
c0023ae2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0023ae8:	e8 39 78 ff ff       	call   c001b326 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0023aed:	83 c4 1c             	add    esp,0x1c
c0023af0:	83 f0 01             	xor    eax,0x1
c0023af3:	5b                   	pop    ebx
c0023af4:	0f b6 c0             	movzx  eax,al
c0023af7:	5e                   	pop    esi
c0023af8:	31 d2                	xor    edx,edx
c0023afa:	5f                   	pop    edi
c0023afb:	5d                   	pop    ebp
c0023afc:	c3                   	ret    

c0023afd <SysSymlink(regs*)>:
c0023afd:	56                   	push   esi
c0023afe:	83 c8 ff             	or     eax,0xffffffff
c0023b01:	53                   	push   ebx
c0023b02:	89 c2                	mov    edx,eax
c0023b04:	81 ec 34 02 00 00    	sub    esp,0x234
c0023b0a:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0023b11:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0023b15:	74 50                	je     c0023b67 <SysSymlink(regs*)+0x6a>
c0023b17:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0023b1a:	85 c9                	test   ecx,ecx
c0023b1c:	74 49                	je     c0023b67 <SysSymlink(regs*)+0x6a>
c0023b1e:	6a 01                	push   0x1
c0023b20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023b25:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023b28:	05 0c 01 00 00       	add    eax,0x10c
c0023b2d:	50                   	push   eax
c0023b2e:	51                   	push   ecx
c0023b2f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0023b33:	56                   	push   esi
c0023b34:	e8 2b 68 ff ff       	call   c001a364 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0023b39:	6a 01                	push   0x1
c0023b3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023b40:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023b43:	05 0c 01 00 00       	add    eax,0x10c
c0023b48:	50                   	push   eax
c0023b49:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023b4c:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0023b53:	53                   	push   ebx
c0023b54:	e8 0b 68 ff ff       	call   c001a364 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0023b59:	83 c4 18             	add    esp,0x18
c0023b5c:	56                   	push   esi
c0023b5d:	53                   	push   ebx
c0023b5e:	e8 10 64 ff ff       	call   c0019f73 <KeCreateSymlink(char const*, char const*)>
c0023b63:	83 c4 10             	add    esp,0x10
c0023b66:	99                   	cdq    
c0023b67:	81 c4 34 02 00 00    	add    esp,0x234
c0023b6d:	5b                   	pop    ebx
c0023b6e:	5e                   	pop    esi
c0023b6f:	c3                   	ret    

c0023b70 <SysTimezone(regs*)>:
c0023b70:	83 ec 0c             	sub    esp,0xc
c0023b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b77:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0023b7b:	75 17                	jne    c0023b94 <SysTimezone(regs*)+0x24>
c0023b7d:	83 ec 0c             	sub    esp,0xc
c0023b80:	68 d3 33 03 c0       	push   0xc00333d3
c0023b85:	e8 cb 58 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0023b8a:	83 c8 ff             	or     eax,0xffffffff
c0023b8d:	83 c4 10             	add    esp,0x10
c0023b90:	89 c2                	mov    edx,eax
c0023b92:	eb 17                	jmp    c0023bab <SysTimezone(regs*)+0x3b>
c0023b94:	83 ec 0c             	sub    esp,0xc
c0023b97:	68 e8 33 03 c0       	push   0xc00333e8
c0023b9c:	e8 b4 58 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0023ba1:	83 c4 10             	add    esp,0x10
c0023ba4:	b8 01 00 00 00       	mov    eax,0x1
c0023ba9:	31 d2                	xor    edx,edx
c0023bab:	83 c4 0c             	add    esp,0xc
c0023bae:	c3                   	ret    

c0023baf <SysTruncate(regs*)>:
c0023baf:	55                   	push   ebp
c0023bb0:	57                   	push   edi
c0023bb1:	31 ff                	xor    edi,edi
c0023bb3:	56                   	push   esi
c0023bb4:	53                   	push   ebx
c0023bb5:	83 ec 0c             	sub    esp,0xc
c0023bb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023bbc:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0023bbf:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0023bc2:	89 ce                	mov    esi,ecx
c0023bc4:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0023bc8:	0f 84 9a 00 00 00    	je     c0023c68 <SysTruncate(regs*)+0xb9>
c0023bce:	83 ec 0c             	sub    esp,0xc
c0023bd1:	68 14 01 00 00       	push   0x114
c0023bd6:	e8 ec 29 ff ff       	call   c00165c7 <malloc>
c0023bdb:	83 c4 0c             	add    esp,0xc
c0023bde:	89 c3                	mov    ebx,eax
c0023be0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023be5:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023be8:	55                   	push   ebp
c0023be9:	53                   	push   ebx
c0023bea:	e8 6d 6a ff ff       	call   c001a65c <File::File(char const*, Process*)>
c0023bef:	83 c4 10             	add    esp,0x10
c0023bf2:	31 d2                	xor    edx,edx
c0023bf4:	b8 03 00 00 00       	mov    eax,0x3
c0023bf9:	85 db                	test   ebx,ebx
c0023bfb:	0f 84 a2 00 00 00    	je     c0023ca3 <SysTruncate(regs*)+0xf4>
c0023c01:	51                   	push   ecx
c0023c02:	51                   	push   ecx
c0023c03:	6a 02                	push   0x2
c0023c05:	53                   	push   ebx
c0023c06:	e8 6f 6a ff ff       	call   c001a67a <File::open(FileOpenMode)>
c0023c0b:	83 c4 10             	add    esp,0x10
c0023c0e:	85 c0                	test   eax,eax
c0023c10:	74 13                	je     c0023c25 <SysTruncate(regs*)+0x76>
c0023c12:	83 ec 0c             	sub    esp,0xc
c0023c15:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023c17:	53                   	push   ebx
c0023c18:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023c1b:	83 c4 10             	add    esp,0x10
c0023c1e:	b8 04 00 00 00       	mov    eax,0x4
c0023c23:	eb 7c                	jmp    c0023ca1 <SysTruncate(regs*)+0xf2>
c0023c25:	52                   	push   edx
c0023c26:	57                   	push   edi
c0023c27:	56                   	push   esi
c0023c28:	53                   	push   ebx
c0023c29:	e8 60 6b ff ff       	call   c001a78e <File::truncate(unsigned long long)>
c0023c2e:	83 c4 10             	add    esp,0x10
c0023c31:	85 c0                	test   eax,eax
c0023c33:	74 1b                	je     c0023c50 <SysTruncate(regs*)+0xa1>
c0023c35:	83 ec 0c             	sub    esp,0xc
c0023c38:	53                   	push   ebx
c0023c39:	e8 9a 6a ff ff       	call   c001a6d8 <File::close()>
c0023c3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023c40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023c43:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023c46:	83 c4 10             	add    esp,0x10
c0023c49:	b8 05 00 00 00       	mov    eax,0x5
c0023c4e:	eb 51                	jmp    c0023ca1 <SysTruncate(regs*)+0xf2>
c0023c50:	83 ec 0c             	sub    esp,0xc
c0023c53:	53                   	push   ebx
c0023c54:	e8 7f 6a ff ff       	call   c001a6d8 <File::close()>
c0023c59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023c5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023c5e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023c61:	83 c4 10             	add    esp,0x10
c0023c64:	31 c0                	xor    eax,eax
c0023c66:	eb 39                	jmp    c0023ca1 <SysTruncate(regs*)+0xf2>
c0023c68:	31 d2                	xor    edx,edx
c0023c6a:	b8 01 00 00 00       	mov    eax,0x1
c0023c6f:	83 fd 02             	cmp    ebp,0x2
c0023c72:	7e 2f                	jle    c0023ca3 <SysTruncate(regs*)+0xf4>
c0023c74:	83 ec 0c             	sub    esp,0xc
c0023c77:	51                   	push   ecx
c0023c78:	e8 46 43 ff ff       	call   c0017fc3 <KeGetFileFromDescriptor(int)>
c0023c7d:	83 c4 10             	add    esp,0x10
c0023c80:	89 c1                	mov    ecx,eax
c0023c82:	31 d2                	xor    edx,edx
c0023c84:	b8 02 00 00 00       	mov    eax,0x2
c0023c89:	85 c9                	test   ecx,ecx
c0023c8b:	74 16                	je     c0023ca3 <SysTruncate(regs*)+0xf4>
c0023c8d:	50                   	push   eax
c0023c8e:	57                   	push   edi
c0023c8f:	56                   	push   esi
c0023c90:	51                   	push   ecx
c0023c91:	e8 f8 6a ff ff       	call   c001a78e <File::truncate(unsigned long long)>
c0023c96:	83 c4 10             	add    esp,0x10
c0023c99:	85 c0                	test   eax,eax
c0023c9b:	0f 95 c0             	setne  al
c0023c9e:	0f b6 c0             	movzx  eax,al
c0023ca1:	31 d2                	xor    edx,edx
c0023ca3:	83 c4 0c             	add    esp,0xc
c0023ca6:	5b                   	pop    ebx
c0023ca7:	5e                   	pop    esi
c0023ca8:	5f                   	pop    edi
c0023ca9:	5d                   	pop    ebp
c0023caa:	c3                   	ret    

c0023cab <SysWrite(regs*)>:
c0023cab:	57                   	push   edi
c0023cac:	56                   	push   esi
c0023cad:	53                   	push   ebx
c0023cae:	83 ec 10             	sub    esp,0x10
c0023cb1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023cb5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023cb8:	83 f8 02             	cmp    eax,0x2
c0023cbb:	77 10                	ja     c0023ccd <SysWrite(regs*)+0x22>
c0023cbd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023cc2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023cc5:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0023ccb:	eb 0e                	jmp    c0023cdb <SysWrite(regs*)+0x30>
c0023ccd:	83 ec 0c             	sub    esp,0xc
c0023cd0:	50                   	push   eax
c0023cd1:	e8 ed 42 ff ff       	call   c0017fc3 <KeGetFileFromDescriptor(int)>
c0023cd6:	83 c4 10             	add    esp,0x10
c0023cd9:	89 c1                	mov    ecx,eax
c0023cdb:	83 c8 ff             	or     eax,0xffffffff
c0023cde:	85 c9                	test   ecx,ecx
c0023ce0:	89 c2                	mov    edx,eax
c0023ce2:	74 28                	je     c0023d0c <SysWrite(regs*)+0x61>
c0023ce4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0023cec:	31 ff                	xor    edi,edi
c0023cee:	83 ec 0c             	sub    esp,0xc
c0023cf1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0023cf3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0023cf7:	52                   	push   edx
c0023cf8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023cfb:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0023cfe:	57                   	push   edi
c0023cff:	56                   	push   esi
c0023d00:	51                   	push   ecx
c0023d01:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0023d04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0023d08:	83 c4 20             	add    esp,0x20
c0023d0b:	99                   	cdq    
c0023d0c:	83 c4 10             	add    esp,0x10
c0023d0f:	5b                   	pop    ebx
c0023d10:	5e                   	pop    esi
c0023d11:	5f                   	pop    edi
c0023d12:	c3                   	ret    

c0023d13 <SysWsbe(regs*)>:
c0023d13:	57                   	push   edi
c0023d14:	b9 0b 00 00 00       	mov    ecx,0xb
c0023d19:	56                   	push   esi
c0023d1a:	be 27 34 03 c0       	mov    esi,0xc0033427
c0023d1f:	53                   	push   ebx
c0023d20:	83 ec 30             	sub    esp,0x30
c0023d23:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023d27:	fc                   	cld    
c0023d28:	83 ec 0c             	sub    esp,0xc
c0023d2b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023d2d:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023d31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023d36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023d39:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0023d3f:	8b 06                	mov    eax,DWORD PTR [esi]
c0023d41:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0023d44:	57                   	push   edi
c0023d45:	e8 26 c8 fd ff       	call   c0000570 <strlen>
c0023d4a:	5a                   	pop    edx
c0023d4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0023d4f:	52                   	push   edx
c0023d50:	31 d2                	xor    edx,edx
c0023d52:	57                   	push   edi
c0023d53:	52                   	push   edx
c0023d54:	50                   	push   eax
c0023d55:	56                   	push   esi
c0023d56:	ff d3                	call   ebx
c0023d58:	83 c4 14             	add    esp,0x14
c0023d5b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0023d5f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0023d62:	e8 b5 21 00 00       	call   c0025f1c <terminateTask(int)>
c0023d67:	83 c4 40             	add    esp,0x40
c0023d6a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0023d6f:	5b                   	pop    ebx
c0023d70:	31 d2                	xor    edx,edx
c0023d72:	5e                   	pop    esi
c0023d73:	5f                   	pop    edi
c0023d74:	c3                   	ret    

c0023d75 <SysYield(regs*)>:
c0023d75:	83 ec 0c             	sub    esp,0xc
c0023d78:	fa                   	cli    
c0023d79:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c0023d7f:	e8 18 1a 00 00       	call   c002579c <schedule()>
c0023d84:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0023d89:	48                   	dec    eax
c0023d8a:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0023d8f:	75 01                	jne    c0023d92 <SysYield(regs*)+0x1d>
c0023d91:	fb                   	sti    
c0023d92:	31 c0                	xor    eax,eax
c0023d94:	31 d2                	xor    edx,edx
c0023d96:	83 c4 0c             	add    esp,0xc
c0023d99:	c3                   	ret    

c0023d9a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0023d9a:	55                   	push   ebp
c0023d9b:	57                   	push   edi
c0023d9c:	56                   	push   esi
c0023d9d:	53                   	push   ebx
c0023d9e:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0023da4:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0023dac:	0f 95 c0             	setne  al
c0023daf:	31 d2                	xor    edx,edx
c0023db1:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0023db9:	0f 94 c2             	sete   dl
c0023dbc:	85 c2                	test   edx,eax
c0023dbe:	74 34                	je     c0023df4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0023dc0:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0023dcb:	74 27                	je     c0023df4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0023dcd:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0023dd4:	05 00 10 00 00       	add    eax,0x1000
c0023dd9:	89 c1                	mov    ecx,eax
c0023ddb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0023de0:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0023de6:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0023ded:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0023df4:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0023dfb:	83 ec 0c             	sub    esp,0xc
c0023dfe:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023e04:	6a 01                	push   0x1
c0023e06:	e8 12 43 ff ff       	call   c001811d <Virt::allocateKernelVirtualPages(int)>
c0023e0b:	83 c4 10             	add    esp,0x10
c0023e0e:	89 c3                	mov    ebx,eax
c0023e10:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023e16:	0f 86 25 01 00 00    	jbe    c0023f41 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0023e1c:	c1 ee 0c             	shr    esi,0xc
c0023e1f:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023e26:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0023e2a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023e32:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0023e39:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023e3d:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0023e44:	29 ef                	sub    edi,ebp
c0023e46:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0023e4a:	0f 83 f8 00 00 00    	jae    c0023f48 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0023e50:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0023e56:	76 05                	jbe    c0023e5d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0023e58:	bf 00 10 00 00       	mov    edi,0x1000
c0023e5d:	83 ec 0c             	sub    esp,0xc
c0023e60:	31 d2                	xor    edx,edx
c0023e62:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023e69:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023e6b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0023e6f:	50                   	push   eax
c0023e70:	8d 74 24 30          	lea    esi,[esp+0x30]
c0023e74:	56                   	push   esi
c0023e75:	52                   	push   edx
c0023e76:	57                   	push   edi
c0023e77:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0023e7e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023e81:	83 c4 20             	add    esp,0x20
c0023e84:	85 c0                	test   eax,eax
c0023e86:	75 06                	jne    c0023e8e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0023e88:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0023e8c:	74 13                	je     c0023ea1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0023e8e:	83 ec 0c             	sub    esp,0xc
c0023e91:	53                   	push   ebx
c0023e92:	e8 a4 45 ff ff       	call   c001843b <Virt::freeKernelVirtualPages(unsigned long)>
c0023e97:	83 c4 10             	add    esp,0x10
c0023e9a:	31 c0                	xor    eax,eax
c0023e9c:	e9 7c 01 00 00       	jmp    c002401d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0023ea1:	fa                   	cli    
c0023ea2:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c0023ea8:	e8 23 2a ff ff       	call   c00168d0 <Phys::allocatePage()>
c0023ead:	6a 07                	push   0x7
c0023eaf:	89 c7                	mov    edi,eax
c0023eb1:	53                   	push   ebx
c0023eb2:	50                   	push   eax
c0023eb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023eb8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023ebb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023ec1:	e8 6a 49 ff ff       	call   c0018830 <VAS::mapPage(unsigned long, unsigned long, int)>
c0023ec6:	83 c4 0c             	add    esp,0xc
c0023ec9:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023ed0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023ed6:	6a 00                	push   0x0
c0023ed8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023edd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023ee0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023ee6:	e8 ab 47 ff ff       	call   c0018696 <VAS::mapOtherVASIn(bool, VAS*)>
c0023eeb:	58                   	pop    eax
c0023eec:	5a                   	pop    edx
c0023eed:	68 07 0c 00 00       	push   0xc07
c0023ef2:	55                   	push   ebp
c0023ef3:	57                   	push   edi
c0023ef4:	89 df                	mov    edi,ebx
c0023ef6:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0023efd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023f03:	6a 00                	push   0x0
c0023f05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023f0a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023f0d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023f13:	e8 6a 4b ff ff       	call   c0018a82 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0023f18:	b9 00 10 00 00       	mov    ecx,0x1000
c0023f1d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023f1f:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0023f24:	83 c4 20             	add    esp,0x20
c0023f27:	48                   	dec    eax
c0023f28:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0023f2d:	85 c0                	test   eax,eax
c0023f2f:	75 01                	jne    c0023f32 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0023f31:	fb                   	sti    
c0023f32:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023f38:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0023f3c:	e9 f1 fe ff ff       	jmp    c0023e32 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0023f41:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023f48:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023f4f:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023f55:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023f5b:	0f 86 ae 00 00 00    	jbe    c002400f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0023f61:	fa                   	cli    
c0023f62:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c0023f68:	c1 ee 0c             	shr    esi,0xc
c0023f6b:	51                   	push   ecx
c0023f6c:	31 ff                	xor    edi,edi
c0023f6e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023f75:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023f7b:	6a 00                	push   0x0
c0023f7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023f82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023f85:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023f8b:	e8 06 47 ff ff       	call   c0018696 <VAS::mapOtherVASIn(bool, VAS*)>
c0023f90:	83 c4 10             	add    esp,0x10
c0023f93:	e8 38 29 ff ff       	call   c00168d0 <Phys::allocatePage()>
c0023f98:	47                   	inc    edi
c0023f99:	6a 07                	push   0x7
c0023f9b:	53                   	push   ebx
c0023f9c:	50                   	push   eax
c0023f9d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023fa1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0023fa7:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0023faa:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0023fb0:	e8 7b 48 ff ff       	call   c0018830 <VAS::mapPage(unsigned long, unsigned long, int)>
c0023fb5:	58                   	pop    eax
c0023fb6:	5a                   	pop    edx
c0023fb7:	68 07 0c 00 00       	push   0xc07
c0023fbc:	55                   	push   ebp
c0023fbd:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023fc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023fc7:	50                   	push   eax
c0023fc8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0023fcf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023fd5:	6a 00                	push   0x0
c0023fd7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023fdc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023fdf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023fe5:	e8 98 4a ff ff       	call   c0018a82 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0023fea:	83 c4 1c             	add    esp,0x1c
c0023fed:	68 00 10 00 00       	push   0x1000
c0023ff2:	6a 00                	push   0x0
c0023ff4:	53                   	push   ebx
c0023ff5:	e8 f6 c4 fd ff       	call   c00004f0 <memset>
c0023ffa:	83 c4 10             	add    esp,0x10
c0023ffd:	39 fe                	cmp    esi,edi
c0023fff:	77 92                	ja     c0023f93 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0024001:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0024006:	48                   	dec    eax
c0024007:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002400c:	75 01                	jne    c002400f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c002400e:	fb                   	sti    
c002400f:	83 ec 0c             	sub    esp,0xc
c0024012:	53                   	push   ebx
c0024013:	e8 23 44 ff ff       	call   c001843b <Virt::freeKernelVirtualPages(unsigned long)>
c0024018:	83 c4 10             	add    esp,0x10
c002401b:	b0 01                	mov    al,0x1
c002401d:	81 c4 2c 10 00 00    	add    esp,0x102c
c0024023:	5b                   	pop    ebx
c0024024:	5e                   	pop    esi
c0024025:	5f                   	pop    edi
c0024026:	5d                   	pop    ebp
c0024027:	c3                   	ret    

c0024028 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0024028:	55                   	push   ebp
c0024029:	57                   	push   edi
c002402a:	56                   	push   esi
c002402b:	53                   	push   ebx
c002402c:	83 ec 48             	sub    esp,0x48
c002402f:	68 14 01 00 00       	push   0x114
c0024034:	e8 8e 25 ff ff       	call   c00165c7 <malloc>
c0024039:	83 c4 0c             	add    esp,0xc
c002403c:	89 c6                	mov    esi,eax
c002403e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0024042:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024046:	50                   	push   eax
c0024047:	e8 10 66 ff ff       	call   c001a65c <File::File(char const*, Process*)>
c002404c:	58                   	pop    eax
c002404d:	5a                   	pop    edx
c002404e:	6a 01                	push   0x1
c0024050:	56                   	push   esi
c0024051:	e8 24 66 ff ff       	call   c001a67a <File::open(FileOpenMode)>
c0024056:	83 c4 10             	add    esp,0x10
c0024059:	85 c0                	test   eax,eax
c002405b:	0f 85 43 01 00 00    	jne    c00241a4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0024061:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0024069:	83 ec 0c             	sub    esp,0xc
c002406c:	6a 34                	push   0x34
c002406e:	e8 54 25 ff ff       	call   c00165c7 <malloc>
c0024073:	89 c3                	mov    ebx,eax
c0024075:	58                   	pop    eax
c0024076:	8b 06                	mov    eax,DWORD PTR [esi]
c0024078:	8d 7c 24 38          	lea    edi,[esp+0x38]
c002407c:	57                   	push   edi
c002407d:	53                   	push   ebx
c002407e:	6a 00                	push   0x0
c0024080:	6a 34                	push   0x34
c0024082:	56                   	push   esi
c0024083:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0024086:	83 c4 20             	add    esp,0x20
c0024089:	85 c0                	test   eax,eax
c002408b:	0f 85 13 01 00 00    	jne    c00241a4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0024091:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0024097:	0f 85 07 01 00 00    	jne    c00241a4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c002409d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00240a0:	85 c0                	test   eax,eax
c00240a2:	0f 84 fc 00 00 00    	je     c00241a4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00240a8:	31 d2                	xor    edx,edx
c00240aa:	55                   	push   ebp
c00240ab:	52                   	push   edx
c00240ac:	50                   	push   eax
c00240ad:	56                   	push   esi
c00240ae:	e8 85 66 ff ff       	call   c001a738 <File::seek(unsigned long long)>
c00240b3:	83 c4 10             	add    esp,0x10
c00240b6:	85 c0                	test   eax,eax
c00240b8:	0f 85 e6 00 00 00    	jne    c00241a4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00240be:	83 ec 0c             	sub    esp,0xc
c00240c1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00240c4:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00240c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00240cc:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00240d0:	0f af c2             	imul   eax,edx
c00240d3:	50                   	push   eax
c00240d4:	e8 ee 24 ff ff       	call   c00165c7 <malloc>
c00240d9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00240db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00240df:	89 3c 24             	mov    DWORD PTR [esp],edi
c00240e2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00240e6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00240ea:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00240ee:	0f af c2             	imul   eax,edx
c00240f1:	99                   	cdq    
c00240f2:	52                   	push   edx
c00240f3:	50                   	push   eax
c00240f4:	56                   	push   esi
c00240f5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00240f8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00240fb:	83 c4 20             	add    esp,0x20
c00240fe:	85 c0                	test   eax,eax
c0024100:	0f 84 9e 00 00 00    	je     c00241a4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0024106:	31 d2                	xor    edx,edx
c0024108:	51                   	push   ecx
c0024109:	52                   	push   edx
c002410a:	50                   	push   eax
c002410b:	56                   	push   esi
c002410c:	e8 27 66 ff ff       	call   c001a738 <File::seek(unsigned long long)>
c0024111:	83 c4 10             	add    esp,0x10
c0024114:	85 c0                	test   eax,eax
c0024116:	0f 85 88 00 00 00    	jne    c00241a4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c002411c:	83 ec 0c             	sub    esp,0xc
c002411f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0024123:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0024127:	31 ed                	xor    ebp,ebp
c0024129:	0f af c2             	imul   eax,edx
c002412c:	50                   	push   eax
c002412d:	e8 95 24 ff ff       	call   c00165c7 <malloc>
c0024132:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0024134:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024138:	89 3c 24             	mov    DWORD PTR [esp],edi
c002413b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002413f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0024143:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0024147:	0f af c2             	imul   eax,edx
c002414a:	99                   	cdq    
c002414b:	52                   	push   edx
c002414c:	50                   	push   eax
c002414d:	56                   	push   esi
c002414e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024151:	83 c4 20             	add    esp,0x20
c0024154:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002415c:	0f b7 fd             	movzx  edi,bp
c002415f:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0024163:	73 7d                	jae    c00241e2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0024165:	c1 e7 05             	shl    edi,0x5
c0024168:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c002416c:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c002416f:	75 6b                	jne    c00241dc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0024171:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0024174:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024178:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c002417b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002417f:	52                   	push   edx
c0024180:	31 d2                	xor    edx,edx
c0024182:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0024185:	52                   	push   edx
c0024186:	50                   	push   eax
c0024187:	56                   	push   esi
c0024188:	e8 ab 65 ff ff       	call   c001a738 <File::seek(unsigned long long)>
c002418d:	83 c4 10             	add    esp,0x10
c0024190:	85 c0                	test   eax,eax
c0024192:	74 17                	je     c00241ab <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0024194:	83 ec 0c             	sub    esp,0xc
c0024197:	68 53 34 03 c0       	push   0xc0033453
c002419c:	e8 b4 52 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c00241a1:	83 c4 10             	add    esp,0x10
c00241a4:	31 c0                	xor    eax,eax
c00241a6:	e9 87 00 00 00       	jmp    c0024232 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c00241ab:	83 ec 0c             	sub    esp,0xc
c00241ae:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00241b1:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00241b4:	50                   	push   eax
c00241b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00241b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00241bd:	56                   	push   esi
c00241be:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00241c2:	e8 d3 fb ff ff       	call   c0023d9a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00241c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00241cb:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00241cf:	83 c4 20             	add    esp,0x20
c00241d2:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00241d6:	73 04                	jae    c00241dc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c00241d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00241dc:	45                   	inc    ebp
c00241dd:	e9 7a ff ff ff       	jmp    c002415c <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00241e2:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00241e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00241ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00241ee:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00241f4:	83 ec 0c             	sub    esp,0xc
c00241f7:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00241fd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024202:	05 00 10 00 00       	add    eax,0x1000
c0024207:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c002420a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002420e:	e8 c4 23 ff ff       	call   c00165d7 <free>
c0024213:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024216:	e8 bc 23 ff ff       	call   c00165d7 <free>
c002421b:	58                   	pop    eax
c002421c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024220:	e8 b2 23 ff ff       	call   c00165d7 <free>
c0024225:	89 34 24             	mov    DWORD PTR [esp],esi
c0024228:	e8 ab 64 ff ff       	call   c001a6d8 <File::close()>
c002422d:	83 c4 10             	add    esp,0x10
c0024230:	b0 01                	mov    al,0x1
c0024232:	83 c4 3c             	add    esp,0x3c
c0024235:	5b                   	pop    ebx
c0024236:	5e                   	pop    esi
c0024237:	5f                   	pop    edi
c0024238:	5d                   	pop    ebp
c0024239:	c3                   	ret    

c002423a <Thr::runtimeReferenceHelper()>:
c002423a:	83 ec 18             	sub    esp,0x18
c002423d:	68 5b 34 03 c0       	push   0xc003345b
c0024242:	e8 0e 52 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0024247:	fa                   	cli    
c0024248:	83 c4 10             	add    esp,0x10
c002424b:	eb fe                	jmp    c002424b <Thr::runtimeReferenceHelper()+0x11>

c002424d <Thr::getAddressOfKernelSymbol(char const*)>:
c002424d:	57                   	push   edi
c002424e:	56                   	push   esi
c002424f:	53                   	push   ebx
c0024250:	31 db                	xor    ebx,ebx
c0024252:	39 1d a0 11 04 c0    	cmp    DWORD PTR ds:0xc00411a0,ebx
c0024258:	7e 3c                	jle    c0024296 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c002425a:	8b 34 9d 20 11 04 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffbeee0]
c0024261:	31 ff                	xor    edi,edi
c0024263:	39 3c 9d 20 10 04 c0 	cmp    DWORD PTR [ebx*4-0x3ffbefe0],edi
c002426a:	7e 27                	jle    c0024293 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c002426c:	50                   	push   eax
c002426d:	50                   	push   eax
c002426e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024272:	8b 06                	mov    eax,DWORD PTR [esi]
c0024274:	03 04 9d a0 10 04 c0 	add    eax,DWORD PTR [ebx*4-0x3ffbef60]
c002427b:	50                   	push   eax
c002427c:	e8 cf c4 fd ff       	call   c0000750 <strcmp>
c0024281:	83 c4 10             	add    esp,0x10
c0024284:	85 c0                	test   eax,eax
c0024286:	75 05                	jne    c002428d <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0024288:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c002428b:	eb 0b                	jmp    c0024298 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c002428d:	83 c6 10             	add    esi,0x10
c0024290:	47                   	inc    edi
c0024291:	eb d0                	jmp    c0024263 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0024293:	43                   	inc    ebx
c0024294:	eb bc                	jmp    c0024252 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0024296:	31 c0                	xor    eax,eax
c0024298:	5b                   	pop    ebx
c0024299:	5e                   	pop    esi
c002429a:	5f                   	pop    edi
c002429b:	c3                   	ret    

c002429c <Thr::loadKernelSymbolTable(char const*)>:
c002429c:	55                   	push   ebp
c002429d:	57                   	push   edi
c002429e:	56                   	push   esi
c002429f:	53                   	push   ebx
c00242a0:	83 ec 68             	sub    esp,0x68
c00242a3:	8b 35 f8 11 04 c0    	mov    esi,DWORD PTR ds:0xc00411f8
c00242a9:	68 14 01 00 00       	push   0x114
c00242ae:	e8 14 23 ff ff       	call   c00165c7 <malloc>
c00242b3:	83 c4 0c             	add    esp,0xc
c00242b6:	89 c3                	mov    ebx,eax
c00242b8:	56                   	push   esi
c00242b9:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00242bd:	50                   	push   eax
c00242be:	e8 99 63 ff ff       	call   c001a65c <File::File(char const*, Process*)>
c00242c3:	5e                   	pop    esi
c00242c4:	5f                   	pop    edi
c00242c5:	6a 01                	push   0x1
c00242c7:	53                   	push   ebx
c00242c8:	e8 ad 63 ff ff       	call   c001a67a <File::open(FileOpenMode)>
c00242cd:	83 c4 10             	add    esp,0x10
c00242d0:	85 c0                	test   eax,eax
c00242d2:	74 0a                	je     c00242de <Thr::loadKernelSymbolTable(char const*)+0x42>
c00242d4:	83 ec 0c             	sub    esp,0xc
c00242d7:	68 7d 34 03 c0       	push   0xc003347d
c00242dc:	eb 34                	jmp    c0024312 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00242de:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00242e6:	83 ec 0c             	sub    esp,0xc
c00242e9:	6a 34                	push   0x34
c00242eb:	e8 d7 22 ff ff       	call   c00165c7 <malloc>
c00242f0:	59                   	pop    ecx
c00242f1:	89 c7                	mov    edi,eax
c00242f3:	8d 74 24 34          	lea    esi,[esp+0x34]
c00242f7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00242f9:	56                   	push   esi
c00242fa:	57                   	push   edi
c00242fb:	6a 00                	push   0x0
c00242fd:	6a 34                	push   0x34
c00242ff:	53                   	push   ebx
c0024300:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0024303:	83 c4 20             	add    esp,0x20
c0024306:	85 c0                	test   eax,eax
c0024308:	74 17                	je     c0024321 <Thr::loadKernelSymbolTable(char const*)+0x85>
c002430a:	83 ec 0c             	sub    esp,0xc
c002430d:	68 94 34 03 c0       	push   0xc0033494
c0024312:	e8 77 c4 ff ff       	call   c002078e <KePanic(char const*)>
c0024317:	83 c4 10             	add    esp,0x10
c002431a:	31 c0                	xor    eax,eax
c002431c:	e9 31 02 00 00       	jmp    c0024552 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0024321:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0024327:	75 e1                	jne    c002430a <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0024329:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c002432c:	85 c0                	test   eax,eax
c002432e:	74 da                	je     c002430a <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0024330:	52                   	push   edx
c0024331:	31 d2                	xor    edx,edx
c0024333:	52                   	push   edx
c0024334:	50                   	push   eax
c0024335:	53                   	push   ebx
c0024336:	e8 fd 63 ff ff       	call   c001a738 <File::seek(unsigned long long)>
c002433b:	83 c4 10             	add    esp,0x10
c002433e:	85 c0                	test   eax,eax
c0024340:	75 c8                	jne    c002430a <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0024342:	83 ec 0c             	sub    esp,0xc
c0024345:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0024349:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c002434d:	31 ed                	xor    ebp,ebp
c002434f:	0f af c2             	imul   eax,edx
c0024352:	50                   	push   eax
c0024353:	e8 6f 22 ff ff       	call   c00165c7 <malloc>
c0024358:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c002435a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002435e:	89 34 24             	mov    DWORD PTR [esp],esi
c0024361:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024365:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0024369:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c002436d:	0f af c2             	imul   eax,edx
c0024370:	99                   	cdq    
c0024371:	52                   	push   edx
c0024372:	50                   	push   eax
c0024373:	53                   	push   ebx
c0024374:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024377:	83 c4 20             	add    esp,0x20
c002437a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0024382:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002438a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0024392:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002439a:	0f b7 f5             	movzx  esi,bp
c002439d:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00243a1:	0f 83 a7 00 00 00    	jae    c002444e <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00243a7:	6b f6 28             	imul   esi,esi,0x28
c00243aa:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00243ae:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00243b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00243b5:	50                   	push   eax
c00243b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00243ba:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00243be:	8b 16                	mov    edx,DWORD PTR [esi]
c00243c0:	6b c0 28             	imul   eax,eax,0x28
c00243c3:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00243c7:	89 d0                	mov    eax,edx
c00243c9:	31 d2                	xor    edx,edx
c00243cb:	52                   	push   edx
c00243cc:	50                   	push   eax
c00243cd:	53                   	push   ebx
c00243ce:	e8 65 63 ff ff       	call   c001a738 <File::seek(unsigned long long)>
c00243d3:	83 c4 0c             	add    esp,0xc
c00243d6:	6a 20                	push   0x20
c00243d8:	6a 00                	push   0x0
c00243da:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00243de:	52                   	push   edx
c00243df:	e8 0c c1 fd ff       	call   c00004f0 <memset>
c00243e4:	58                   	pop    eax
c00243e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00243e7:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00243eb:	51                   	push   ecx
c00243ec:	8d 54 24 40          	lea    edx,[esp+0x40]
c00243f0:	52                   	push   edx
c00243f1:	6a 00                	push   0x0
c00243f3:	6a 1f                	push   0x1f
c00243f5:	53                   	push   ebx
c00243f6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00243f9:	83 c4 18             	add    esp,0x18
c00243fc:	68 ab 34 03 c0       	push   0xc00334ab
c0024401:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0024405:	52                   	push   edx
c0024406:	e8 45 c3 fd ff       	call   c0000750 <strcmp>
c002440b:	83 c4 10             	add    esp,0x10
c002440e:	85 c0                	test   eax,eax
c0024410:	75 0f                	jne    c0024421 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0024412:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024415:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024419:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002441d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024421:	50                   	push   eax
c0024422:	50                   	push   eax
c0024423:	68 b3 34 03 c0       	push   0xc00334b3
c0024428:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002442c:	50                   	push   eax
c002442d:	e8 1e c3 fd ff       	call   c0000750 <strcmp>
c0024432:	83 c4 10             	add    esp,0x10
c0024435:	85 c0                	test   eax,eax
c0024437:	75 0f                	jne    c0024448 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0024439:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c002443c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024440:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024444:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024448:	45                   	inc    ebp
c0024449:	e9 4c ff ff ff       	jmp    c002439a <Thr::loadKernelSymbolTable(char const*)+0xfe>
c002444e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0024453:	75 10                	jne    c0024465 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0024455:	83 ec 0c             	sub    esp,0xc
c0024458:	68 bb 34 03 c0       	push   0xc00334bb
c002445d:	e8 2c c3 ff ff       	call   c002078e <KePanic(char const*)>
c0024462:	83 c4 10             	add    esp,0x10
c0024465:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c002446a:	75 10                	jne    c002447c <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c002446c:	83 ec 0c             	sub    esp,0xc
c002446f:	68 bb 34 03 c0       	push   0xc00334bb
c0024474:	e8 15 c3 ff ff       	call   c002078e <KePanic(char const*)>
c0024479:	83 c4 10             	add    esp,0x10
c002447c:	31 d2                	xor    edx,edx
c002447e:	50                   	push   eax
c002447f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024483:	52                   	push   edx
c0024484:	50                   	push   eax
c0024485:	53                   	push   ebx
c0024486:	e8 ad 62 ff ff       	call   c001a738 <File::seek(unsigned long long)>
c002448b:	5a                   	pop    edx
c002448c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024490:	e8 32 21 ff ff       	call   c00165c7 <malloc>
c0024495:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024499:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002449d:	31 c9                	xor    ecx,ecx
c002449f:	5e                   	pop    esi
c00244a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00244a2:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00244a6:	55                   	push   ebp
c00244a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00244ab:	51                   	push   ecx
c00244ac:	52                   	push   edx
c00244ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00244b1:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00244b5:	53                   	push   ebx
c00244b6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00244b9:	83 c4 14             	add    esp,0x14
c00244bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00244c0:	e8 02 21 ff ff       	call   c00165c7 <malloc>
c00244c5:	89 c6                	mov    esi,eax
c00244c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00244c9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00244cc:	56                   	push   esi
c00244cd:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00244d1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00244d5:	51                   	push   ecx
c00244d6:	52                   	push   edx
c00244d7:	53                   	push   ebx
c00244d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00244db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00244df:	8b 15 a0 11 04 c0    	mov    edx,DWORD PTR ds:0xc00411a0
c00244e5:	83 c4 1c             	add    esp,0x1c
c00244e8:	c1 e8 04             	shr    eax,0x4
c00244eb:	89 04 95 20 10 04 c0 	mov    DWORD PTR [edx*4-0x3ffbefe0],eax
c00244f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00244f6:	31 d2                	xor    edx,edx
c00244f8:	52                   	push   edx
c00244f9:	50                   	push   eax
c00244fa:	53                   	push   ebx
c00244fb:	e8 38 62 ff ff       	call   c001a738 <File::seek(unsigned long long)>
c0024500:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0024502:	31 d2                	xor    edx,edx
c0024504:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024507:	56                   	push   esi
c0024508:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002450c:	52                   	push   edx
c002450d:	50                   	push   eax
c002450e:	53                   	push   ebx
c002450f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024512:	83 c4 14             	add    esp,0x14
c0024515:	53                   	push   ebx
c0024516:	e8 bd 61 ff ff       	call   c001a6d8 <File::close()>
c002451b:	5d                   	pop    ebp
c002451c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024520:	e8 b2 20 ff ff       	call   c00165d7 <free>
c0024525:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024528:	e8 aa 20 ff ff       	call   c00165d7 <free>
c002452d:	a1 a0 11 04 c0       	mov    eax,ds:0xc00411a0
c0024532:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024536:	8d 50 01             	lea    edx,[eax+0x1]
c0024539:	89 0c 85 20 11 04 c0 	mov    DWORD PTR [eax*4-0x3ffbeee0],ecx
c0024540:	89 34 85 a0 10 04 c0 	mov    DWORD PTR [eax*4-0x3ffbef60],esi
c0024547:	89 15 a0 11 04 c0    	mov    DWORD PTR ds:0xc00411a0,edx
c002454d:	83 c4 10             	add    esp,0x10
c0024550:	b0 01                	mov    al,0x1
c0024552:	83 c4 5c             	add    esp,0x5c
c0024555:	5b                   	pop    ebx
c0024556:	5e                   	pop    esi
c0024557:	5f                   	pop    edi
c0024558:	5d                   	pop    ebp
c0024559:	c3                   	ret    

c002455a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c002455a:	55                   	push   ebp
c002455b:	57                   	push   edi
c002455c:	56                   	push   esi
c002455d:	53                   	push   ebx
c002455e:	81 ec 68 03 00 00    	sub    esp,0x368
c0024564:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c002456b:	8b 1d f8 11 04 c0    	mov    ebx,DWORD PTR ds:0xc00411f8
c0024571:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0024575:	68 14 01 00 00       	push   0x114
c002457a:	e8 48 20 ff ff       	call   c00165c7 <malloc>
c002457f:	83 c4 0c             	add    esp,0xc
c0024582:	89 c5                	mov    ebp,eax
c0024584:	53                   	push   ebx
c0024585:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c002458c:	50                   	push   eax
c002458d:	e8 ca 60 ff ff       	call   c001a65c <File::File(char const*, Process*)>
c0024592:	5e                   	pop    esi
c0024593:	5f                   	pop    edi
c0024594:	6a 01                	push   0x1
c0024596:	55                   	push   ebp
c0024597:	e8 de 60 ff ff       	call   c001a67a <File::open(FileOpenMode)>
c002459c:	83 c4 10             	add    esp,0x10
c002459f:	85 c0                	test   eax,eax
c00245a1:	0f 85 aa 06 00 00    	jne    c0024c51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00245a7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00245af:	83 ec 0c             	sub    esp,0xc
c00245b2:	6a 34                	push   0x34
c00245b4:	e8 0e 20 ff ff       	call   c00165c7 <malloc>
c00245b9:	5b                   	pop    ebx
c00245ba:	89 c7                	mov    edi,eax
c00245bc:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00245c0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00245c3:	53                   	push   ebx
c00245c4:	57                   	push   edi
c00245c5:	6a 00                	push   0x0
c00245c7:	6a 34                	push   0x34
c00245c9:	55                   	push   ebp
c00245ca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00245cd:	83 c4 20             	add    esp,0x20
c00245d0:	85 c0                	test   eax,eax
c00245d2:	0f 85 79 06 00 00    	jne    c0024c51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00245d8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00245de:	0f 85 6d 06 00 00    	jne    c0024c51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00245e4:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00245e7:	85 c0                	test   eax,eax
c00245e9:	0f 84 62 06 00 00    	je     c0024c51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00245ef:	31 d2                	xor    edx,edx
c00245f1:	51                   	push   ecx
c00245f2:	52                   	push   edx
c00245f3:	50                   	push   eax
c00245f4:	55                   	push   ebp
c00245f5:	e8 3e 61 ff ff       	call   c001a738 <File::seek(unsigned long long)>
c00245fa:	83 c4 10             	add    esp,0x10
c00245fd:	85 c0                	test   eax,eax
c00245ff:	0f 85 4c 06 00 00    	jne    c0024c51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0024605:	83 ec 0c             	sub    esp,0xc
c0024608:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c002460b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c002460f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0024613:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0024617:	0f af c2             	imul   eax,edx
c002461a:	50                   	push   eax
c002461b:	e8 a7 1f ff ff       	call   c00165c7 <malloc>
c0024620:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0024623:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024627:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002462a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002462e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0024632:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0024636:	0f af c2             	imul   eax,edx
c0024639:	99                   	cdq    
c002463a:	52                   	push   edx
c002463b:	50                   	push   eax
c002463c:	55                   	push   ebp
c002463d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024640:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0024643:	83 c4 20             	add    esp,0x20
c0024646:	85 c0                	test   eax,eax
c0024648:	0f 84 03 06 00 00    	je     c0024c51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c002464e:	52                   	push   edx
c002464f:	31 d2                	xor    edx,edx
c0024651:	52                   	push   edx
c0024652:	50                   	push   eax
c0024653:	55                   	push   ebp
c0024654:	e8 df 60 ff ff       	call   c001a738 <File::seek(unsigned long long)>
c0024659:	83 c4 10             	add    esp,0x10
c002465c:	85 c0                	test   eax,eax
c002465e:	0f 85 ed 05 00 00    	jne    c0024c51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0024664:	83 ec 0c             	sub    esp,0xc
c0024667:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c002466b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c002466f:	31 f6                	xor    esi,esi
c0024671:	0f af c2             	imul   eax,edx
c0024674:	50                   	push   eax
c0024675:	e8 4d 1f ff ff       	call   c00165c7 <malloc>
c002467a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c002467d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024684:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0024688:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c002468c:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0024690:	0f af c2             	imul   eax,edx
c0024693:	99                   	cdq    
c0024694:	52                   	push   edx
c0024695:	50                   	push   eax
c0024696:	55                   	push   ebp
c0024697:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002469a:	83 c4 20             	add    esp,0x20
c002469d:	0f b7 de             	movzx  ebx,si
c00246a0:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c00246a4:	0f 83 87 00 00 00    	jae    c0024731 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00246aa:	c1 e3 05             	shl    ebx,0x5
c00246ad:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00246b1:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00246b4:	75 75                	jne    c002472b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00246b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00246b9:	31 d2                	xor    edx,edx
c00246bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00246bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00246c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00246c6:	50                   	push   eax
c00246c7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00246ca:	52                   	push   edx
c00246cb:	50                   	push   eax
c00246cc:	55                   	push   ebp
c00246cd:	e8 66 60 ff ff       	call   c001a738 <File::seek(unsigned long long)>
c00246d2:	83 c4 10             	add    esp,0x10
c00246d5:	85 c0                	test   eax,eax
c00246d7:	0f 85 74 05 00 00    	jne    c0024c51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00246dd:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00246e4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00246e7:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00246eb:	31 d2                	xor    edx,edx
c00246ed:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00246f1:	83 ec 0c             	sub    esp,0xc
c00246f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00246f8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00246ff:	50                   	push   eax
c0024700:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024704:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024708:	52                   	push   edx
c0024709:	50                   	push   eax
c002470a:	55                   	push   ebp
c002470b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002470e:	83 c4 1c             	add    esp,0x1c
c0024711:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0024714:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0024717:	50                   	push   eax
c0024718:	6a 00                	push   0x0
c002471a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002471e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0024722:	50                   	push   eax
c0024723:	e8 c8 bd fd ff       	call   c00004f0 <memset>
c0024728:	83 c4 10             	add    esp,0x10
c002472b:	46                   	inc    esi
c002472c:	e9 6c ff ff ff       	jmp    c002469d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0024731:	53                   	push   ebx
c0024732:	31 db                	xor    ebx,ebx
c0024734:	68 00 01 00 00       	push   0x100
c0024739:	6a 00                	push   0x0
c002473b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c002473f:	50                   	push   eax
c0024740:	e8 ab bd fd ff       	call   c00004f0 <memset>
c0024745:	83 c4 0c             	add    esp,0xc
c0024748:	68 00 01 00 00       	push   0x100
c002474d:	6a 00                	push   0x0
c002474f:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0024756:	50                   	push   eax
c0024757:	e8 94 bd fd ff       	call   c00004f0 <memset>
c002475c:	83 c4 10             	add    esp,0x10
c002475f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0024767:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c002476f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0024777:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c002477f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0024787:	0f b7 f3             	movzx  esi,bx
c002478a:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c002478e:	0f 83 2d 01 00 00    	jae    c00248c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0024794:	6b f6 28             	imul   esi,esi,0x28
c0024797:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002479b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002479e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00247a2:	52                   	push   edx
c00247a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00247a7:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00247ab:	8b 06                	mov    eax,DWORD PTR [esi]
c00247ad:	6b d2 28             	imul   edx,edx,0x28
c00247b0:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00247b4:	31 d2                	xor    edx,edx
c00247b6:	52                   	push   edx
c00247b7:	50                   	push   eax
c00247b8:	55                   	push   ebp
c00247b9:	e8 7a 5f ff ff       	call   c001a738 <File::seek(unsigned long long)>
c00247be:	83 c4 0c             	add    esp,0xc
c00247c1:	6a 20                	push   0x20
c00247c3:	6a 00                	push   0x0
c00247c5:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00247cc:	51                   	push   ecx
c00247cd:	e8 1e bd fd ff       	call   c00004f0 <memset>
c00247d2:	59                   	pop    ecx
c00247d3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00247d6:	8d 54 24 58          	lea    edx,[esp+0x58]
c00247da:	52                   	push   edx
c00247db:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00247e2:	51                   	push   ecx
c00247e3:	6a 00                	push   0x0
c00247e5:	6a 1f                	push   0x1f
c00247e7:	55                   	push   ebp
c00247e8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00247eb:	83 c4 1c             	add    esp,0x1c
c00247ee:	6a 09                	push   0x9
c00247f0:	68 d5 34 03 c0       	push   0xc00334d5
c00247f5:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00247fc:	51                   	push   ecx
c00247fd:	e8 7e bb fd ff       	call   c0000380 <memcmp>
c0024802:	83 c4 10             	add    esp,0x10
c0024805:	85 c0                	test   eax,eax
c0024807:	75 21                	jne    c002482a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0024809:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002480d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024811:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0024815:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024819:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c002481c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0024823:	89 d0                	mov    eax,edx
c0024825:	40                   	inc    eax
c0024826:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002482a:	50                   	push   eax
c002482b:	6a 09                	push   0x9
c002482d:	68 df 34 03 c0       	push   0xc00334df
c0024832:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024839:	50                   	push   eax
c002483a:	e8 41 bb fd ff       	call   c0000380 <memcmp>
c002483f:	83 c4 10             	add    esp,0x10
c0024842:	85 c0                	test   eax,eax
c0024844:	75 21                	jne    c0024867 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0024846:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002484a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002484e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024852:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0024856:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024859:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0024860:	89 d0                	mov    eax,edx
c0024862:	40                   	inc    eax
c0024863:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024867:	50                   	push   eax
c0024868:	50                   	push   eax
c0024869:	68 ab 34 03 c0       	push   0xc00334ab
c002486e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024875:	50                   	push   eax
c0024876:	e8 d5 be fd ff       	call   c0000750 <strcmp>
c002487b:	83 c4 10             	add    esp,0x10
c002487e:	85 c0                	test   eax,eax
c0024880:	75 0f                	jne    c0024891 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0024882:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024885:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024889:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002488d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024891:	50                   	push   eax
c0024892:	50                   	push   eax
c0024893:	68 b3 34 03 c0       	push   0xc00334b3
c0024898:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c002489f:	50                   	push   eax
c00248a0:	e8 ab be fd ff       	call   c0000750 <strcmp>
c00248a5:	83 c4 10             	add    esp,0x10
c00248a8:	85 c0                	test   eax,eax
c00248aa:	75 0f                	jne    c00248bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00248ac:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00248af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00248b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00248b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00248bb:	43                   	inc    ebx
c00248bc:	e9 c6 fe ff ff       	jmp    c0024787 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00248c1:	31 d2                	xor    edx,edx
c00248c3:	50                   	push   eax
c00248c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00248c8:	52                   	push   edx
c00248c9:	50                   	push   eax
c00248ca:	55                   	push   ebp
c00248cb:	e8 68 5e ff ff       	call   c001a738 <File::seek(unsigned long long)>
c00248d0:	58                   	pop    eax
c00248d1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00248d5:	e8 ed 1c ff ff       	call   c00165c7 <malloc>
c00248da:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00248dd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00248e1:	31 d2                	xor    edx,edx
c00248e3:	58                   	pop    eax
c00248e4:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00248e8:	53                   	push   ebx
c00248e9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00248ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00248f1:	52                   	push   edx
c00248f2:	50                   	push   eax
c00248f3:	55                   	push   ebp
c00248f4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00248f7:	83 c4 14             	add    esp,0x14
c00248fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00248fe:	e8 c4 1c ff ff       	call   c00165c7 <malloc>
c0024903:	31 d2                	xor    edx,edx
c0024905:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0024909:	83 c4 0c             	add    esp,0xc
c002490c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024910:	52                   	push   edx
c0024911:	50                   	push   eax
c0024912:	55                   	push   ebp
c0024913:	e8 20 5e ff ff       	call   c001a738 <File::seek(unsigned long long)>
c0024918:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c002491b:	31 d2                	xor    edx,edx
c002491d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024920:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024924:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0024928:	52                   	push   edx
c0024929:	50                   	push   eax
c002492a:	55                   	push   ebp
c002492b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002492e:	83 c4 20             	add    esp,0x20
c0024931:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0024936:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c002493e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0024942:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024946:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c002494a:	0f 84 05 03 00 00    	je     c0024c55 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0024950:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0024957:	31 d2                	xor    edx,edx
c0024959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002495d:	c1 e8 03             	shr    eax,0x3
c0024960:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0024964:	51                   	push   ecx
c0024965:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024969:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c002496d:	52                   	push   edx
c002496e:	50                   	push   eax
c002496f:	55                   	push   ebp
c0024970:	e8 c3 5d ff ff       	call   c001a738 <File::seek(unsigned long long)>
c0024975:	5b                   	pop    ebx
c0024976:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002497a:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0024981:	e8 41 1c ff ff       	call   c00165c7 <malloc>
c0024986:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0024989:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002498d:	31 d2                	xor    edx,edx
c002498f:	5e                   	pop    esi
c0024990:	8d 44 24 58          	lea    eax,[esp+0x58]
c0024994:	50                   	push   eax
c0024995:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024999:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002499d:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00249a4:	52                   	push   edx
c00249a5:	50                   	push   eax
c00249a6:	55                   	push   ebp
c00249a7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00249aa:	83 c4 20             	add    esp,0x20
c00249ad:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00249b5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00249b9:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c00249bd:	0f 8d 76 02 00 00    	jge    c0024c39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c00249c3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00249c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00249cb:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c00249d0:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00249d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00249d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00249db:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c00249df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00249e3:	c1 e8 08             	shr    eax,0x8
c00249e6:	89 c6                	mov    esi,eax
c00249e8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00249ec:	c1 e6 04             	shl    esi,0x4
c00249ef:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00249f3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c00249f6:	85 db                	test   ebx,ebx
c00249f8:	0f 85 b3 00 00 00    	jne    c0024ab1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00249fe:	83 ec 0c             	sub    esp,0xc
c0024a01:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024a05:	03 06                	add    eax,DWORD PTR [esi]
c0024a07:	50                   	push   eax
c0024a08:	e8 40 f8 ff ff       	call   c002424d <Thr::getAddressOfKernelSymbol(char const*)>
c0024a0d:	83 c4 10             	add    esp,0x10
c0024a10:	89 c3                	mov    ebx,eax
c0024a12:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0024a17:	85 c0                	test   eax,eax
c0024a19:	0f 85 92 00 00 00    	jne    c0024ab1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0024a1f:	83 ec 0c             	sub    esp,0xc
c0024a22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024a26:	03 06                	add    eax,DWORD PTR [esi]
c0024a28:	50                   	push   eax
c0024a29:	e8 4e bf ff ff       	call   c002097c <KeResolveCompatibilitySymbol(char*)>
c0024a2e:	83 c4 10             	add    esp,0x10
c0024a31:	89 c3                	mov    ebx,eax
c0024a33:	85 c0                	test   eax,eax
c0024a35:	75 7a                	jne    c0024ab1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0024a37:	51                   	push   ecx
c0024a38:	51                   	push   ecx
c0024a39:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024a3d:	03 06                	add    eax,DWORD PTR [esi]
c0024a3f:	50                   	push   eax
c0024a40:	68 e9 34 03 c0       	push   0xc00334e9
c0024a45:	e8 0b 4a ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0024a4a:	58                   	pop    eax
c0024a4b:	5a                   	pop    edx
c0024a4c:	68 03 35 03 c0       	push   0xc0033503
c0024a51:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024a58:	50                   	push   eax
c0024a59:	e8 e2 bb fd ff       	call   c0000640 <strcpy>
c0024a5e:	59                   	pop    ecx
c0024a5f:	58                   	pop    eax
c0024a60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024a64:	03 06                	add    eax,DWORD PTR [esi]
c0024a66:	50                   	push   eax
c0024a67:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024a6e:	50                   	push   eax
c0024a6f:	e8 cc bd fd ff       	call   c0000840 <strcat>
c0024a74:	58                   	pop    eax
c0024a75:	5a                   	pop    edx
c0024a76:	68 9d 35 03 c0       	push   0xc003359d
c0024a7b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024a82:	50                   	push   eax
c0024a83:	e8 b8 bd fd ff       	call   c0000840 <strcat>
c0024a88:	83 c4 10             	add    esp,0x10
c0024a8b:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0024a90:	0f 84 5d 01 00 00    	je     c0024bf3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0024a96:	83 ec 0c             	sub    esp,0xc
c0024a99:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024aa0:	50                   	push   eax
c0024aa1:	e8 e8 bc ff ff       	call   c002078e <KePanic(char const*)>
c0024aa6:	83 c4 10             	add    esp,0x10
c0024aa9:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0024aad:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0024ab1:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0024ab6:	83 f8 01             	cmp    eax,0x1
c0024ab9:	0f 85 8f 00 00 00    	jne    c0024b4e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0024abf:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0024ac6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0024aca:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0024ace:	01 ce                	add    esi,ecx
c0024ad0:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0024ad8:	0f 94 c0             	sete   al
c0024adb:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0024ae3:	0f 94 c2             	sete   dl
c0024ae6:	09 c2                	or     edx,eax
c0024ae8:	8b 06                	mov    eax,DWORD PTR [esi]
c0024aea:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0024aef:	0f b6 d2             	movzx  edx,dl
c0024af2:	74 41                	je     c0024b35 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0024af4:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0024af7:	85 d2                	test   edx,edx
c0024af9:	75 15                	jne    c0024b10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0024afb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0024aff:	66 83 f8 0c          	cmp    ax,0xc
c0024b03:	76 05                	jbe    c0024b0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0024b05:	b8 0c 00 00 00       	mov    eax,0xc
c0024b0a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0024b0e:	76 37                	jbe    c0024b47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0024b10:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0024b14:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0024b19:	0f 84 d4 00 00 00    	je     c0024bf3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0024b1f:	83 ec 0c             	sub    esp,0xc
c0024b22:	68 1a 35 03 c0       	push   0xc003351a
c0024b27:	e8 62 bc ff ff       	call   c002078e <KePanic(char const*)>
c0024b2c:	83 c4 10             	add    esp,0x10
c0024b2f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0024b33:	eb 12                	jmp    c0024b47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0024b35:	01 c1                	add    ecx,eax
c0024b37:	85 d2                	test   edx,edx
c0024b39:	75 0c                	jne    c0024b47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0024b3b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0024b3f:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0024b43:	77 02                	ja     c0024b47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0024b45:	01 d9                	add    ecx,ebx
c0024b47:	89 0e                	mov    DWORD PTR [esi],ecx
c0024b49:	e9 e2 00 00 00       	jmp    c0024c30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0024b4e:	83 f8 02             	cmp    eax,0x2
c0024b51:	75 77                	jne    c0024bca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0024b53:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0024b5a:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0024b5e:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0024b62:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0024b6a:	74 21                	je     c0024b8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0024b6c:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0024b74:	74 17                	je     c0024b8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0024b76:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0024b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0024b7f:	83 fa 0e             	cmp    edx,0xe
c0024b82:	77 03                	ja     c0024b87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0024b84:	8d 42 fc             	lea    eax,[edx-0x4]
c0024b87:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0024b8b:	76 17                	jbe    c0024ba4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0024b8d:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0024b92:	74 5f                	je     c0024bf3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0024b94:	83 ec 0c             	sub    esp,0xc
c0024b97:	68 36 35 03 c0       	push   0xc0033536
c0024b9c:	e8 ed bb ff ff       	call   c002078e <KePanic(char const*)>
c0024ba1:	83 c4 10             	add    esp,0x10
c0024ba4:	8b 06                	mov    eax,DWORD PTR [esi]
c0024ba6:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0024bab:	74 13                	je     c0024bc0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0024bad:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024bb1:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0024bb8:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0024bbc:	01 d0                	add    eax,edx
c0024bbe:	eb 04                	jmp    c0024bc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0024bc0:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0024bc4:	01 c3                	add    ebx,eax
c0024bc6:	89 1e                	mov    DWORD PTR [esi],ebx
c0024bc8:	eb 66                	jmp    c0024c30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0024bca:	52                   	push   edx
c0024bcb:	52                   	push   edx
c0024bcc:	50                   	push   eax
c0024bcd:	68 52 35 03 c0       	push   0xc0033552
c0024bd2:	e8 7e 48 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0024bd7:	83 c4 10             	add    esp,0x10
c0024bda:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0024bdf:	74 12                	je     c0024bf3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0024be1:	83 ec 0c             	sub    esp,0xc
c0024be4:	68 5d 35 03 c0       	push   0xc003355d
c0024be9:	e8 a0 bb ff ff       	call   c002078e <KePanic(char const*)>
c0024bee:	83 c4 10             	add    esp,0x10
c0024bf1:	eb 3d                	jmp    c0024c30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0024bf3:	83 ec 0c             	sub    esp,0xc
c0024bf6:	55                   	push   ebp
c0024bf7:	e8 dc 5a ff ff       	call   c001a6d8 <File::close()>
c0024bfc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024bff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024c02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024c05:	59                   	pop    ecx
c0024c06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024c0a:	e8 c8 19 ff ff       	call   c00165d7 <free>
c0024c0f:	5b                   	pop    ebx
c0024c10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024c14:	e8 be 19 ff ff       	call   c00165d7 <free>
c0024c19:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024c1c:	e8 b6 19 ff ff       	call   c00165d7 <free>
c0024c21:	5e                   	pop    esi
c0024c22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024c26:	e8 ac 19 ff ff       	call   c00165d7 <free>
c0024c2b:	83 c4 10             	add    esp,0x10
c0024c2e:	eb 21                	jmp    c0024c51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0024c30:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0024c34:	e9 7c fd ff ff       	jmp    c00249b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0024c39:	83 ec 0c             	sub    esp,0xc
c0024c3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024c40:	e8 92 19 ff ff       	call   c00165d7 <free>
c0024c45:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0024c49:	83 c4 10             	add    esp,0x10
c0024c4c:	e9 f1 fc ff ff       	jmp    c0024942 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0024c51:	31 c0                	xor    eax,eax
c0024c53:	eb 33                	jmp    c0024c88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0024c55:	83 ec 0c             	sub    esp,0xc
c0024c58:	55                   	push   ebp
c0024c59:	e8 7a 5a ff ff       	call   c001a6d8 <File::close()>
c0024c5e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024c61:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024c64:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024c67:	58                   	pop    eax
c0024c68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024c6c:	e8 66 19 ff ff       	call   c00165d7 <free>
c0024c71:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024c74:	e8 5e 19 ff ff       	call   c00165d7 <free>
c0024c79:	5a                   	pop    edx
c0024c7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024c7e:	e8 54 19 ff ff       	call   c00165d7 <free>
c0024c83:	83 c4 10             	add    esp,0x10
c0024c86:	b0 01                	mov    al,0x1
c0024c88:	81 c4 5c 03 00 00    	add    esp,0x35c
c0024c8e:	5b                   	pop    ebx
c0024c8f:	5e                   	pop    esi
c0024c90:	5f                   	pop    edi
c0024c91:	5d                   	pop    ebp
c0024c92:	c3                   	ret    

c0024c93 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0024c93:	56                   	push   esi
c0024c94:	31 d2                	xor    edx,edx
c0024c96:	53                   	push   ebx
c0024c97:	8b 1d 00 0a 04 c0    	mov    ebx,DWORD PTR ds:0xc0040a00
c0024c9d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024ca1:	39 d3                	cmp    ebx,edx
c0024ca3:	7e 1b                	jle    c0024cc0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0024ca5:	8b 04 95 20 0c 04 c0 	mov    eax,DWORD PTR [edx*4-0x3ffbf3e0]
c0024cac:	39 c8                	cmp    eax,ecx
c0024cae:	77 0d                	ja     c0024cbd <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0024cb0:	8b 34 95 20 0a 04 c0 	mov    esi,DWORD PTR [edx*4-0x3ffbf5e0]
c0024cb7:	01 c6                	add    esi,eax
c0024cb9:	39 ce                	cmp    esi,ecx
c0024cbb:	77 05                	ja     c0024cc2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0024cbd:	42                   	inc    edx
c0024cbe:	eb e1                	jmp    c0024ca1 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0024cc0:	31 c0                	xor    eax,eax
c0024cc2:	5b                   	pop    ebx
c0024cc3:	5e                   	pop    esi
c0024cc4:	c3                   	ret    

c0024cc5 <Thr::getDriverNameFromAddress(unsigned long)>:
c0024cc5:	53                   	push   ebx
c0024cc6:	31 c0                	xor    eax,eax
c0024cc8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024ccc:	8b 1d 00 0a 04 c0    	mov    ebx,DWORD PTR ds:0xc0040a00
c0024cd2:	39 c3                	cmp    ebx,eax
c0024cd4:	7e 22                	jle    c0024cf8 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0024cd6:	8b 14 85 20 0c 04 c0 	mov    edx,DWORD PTR [eax*4-0x3ffbf3e0]
c0024cdd:	39 ca                	cmp    edx,ecx
c0024cdf:	77 14                	ja     c0024cf5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0024ce1:	03 14 85 20 0a 04 c0 	add    edx,DWORD PTR [eax*4-0x3ffbf5e0]
c0024ce8:	39 ca                	cmp    edx,ecx
c0024cea:	76 09                	jbe    c0024cf5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0024cec:	8b 04 85 20 0e 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbf1e0]
c0024cf3:	eb 05                	jmp    c0024cfa <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0024cf5:	40                   	inc    eax
c0024cf6:	eb da                	jmp    c0024cd2 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0024cf8:	31 c0                	xor    eax,eax
c0024cfa:	5b                   	pop    ebx
c0024cfb:	c3                   	ret    

c0024cfc <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0024cfc:	53                   	push   ebx
c0024cfd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0024d01:	53                   	push   ebx
c0024d02:	e8 8c ff ff ff       	call   c0024c93 <Thr::getDriverBaseFromAddress(unsigned long)>
c0024d07:	5a                   	pop    edx
c0024d08:	31 d2                	xor    edx,edx
c0024d0a:	85 c0                	test   eax,eax
c0024d0c:	74 04                	je     c0024d12 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0024d0e:	89 da                	mov    edx,ebx
c0024d10:	29 c2                	sub    edx,eax
c0024d12:	89 d0                	mov    eax,edx
c0024d14:	5b                   	pop    ebx
c0024d15:	c3                   	ret    

c0024d16 <Thr::loadDLL(char const*, bool)>:
c0024d16:	55                   	push   ebp
c0024d17:	57                   	push   edi
c0024d18:	56                   	push   esi
c0024d19:	53                   	push   ebx
c0024d1a:	81 ec 34 01 00 00    	sub    esp,0x134
c0024d20:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0024d27:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0024d2e:	56                   	push   esi
c0024d2f:	68 75 35 03 c0       	push   0xc0033575
c0024d34:	e8 1c 47 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0024d39:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0024d40:	e8 82 18 ff ff       	call   c00165c7 <malloc>
c0024d45:	83 c4 0c             	add    esp,0xc
c0024d48:	89 c3                	mov    ebx,eax
c0024d4a:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0024d50:	56                   	push   esi
c0024d51:	50                   	push   eax
c0024d52:	e8 05 59 ff ff       	call   c001a65c <File::File(char const*, Process*)>
c0024d57:	83 c4 10             	add    esp,0x10
c0024d5a:	85 db                	test   ebx,ebx
c0024d5c:	75 3c                	jne    c0024d9a <Thr::loadDLL(char const*, bool)+0x84>
c0024d5e:	89 f8                	mov    eax,edi
c0024d60:	84 c0                	test   al,al
c0024d62:	0f 84 f3 01 00 00    	je     c0024f5b <Thr::loadDLL(char const*, bool)+0x245>
c0024d68:	55                   	push   ebp
c0024d69:	55                   	push   ebp
c0024d6a:	68 86 35 03 c0       	push   0xc0033586
c0024d6f:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0024d73:	55                   	push   ebp
c0024d74:	e8 c7 b8 fd ff       	call   c0000640 <strcpy>
c0024d79:	58                   	pop    eax
c0024d7a:	5a                   	pop    edx
c0024d7b:	56                   	push   esi
c0024d7c:	55                   	push   ebp
c0024d7d:	e8 be ba fd ff       	call   c0000840 <strcat>
c0024d82:	59                   	pop    ecx
c0024d83:	58                   	pop    eax
c0024d84:	68 9d 35 03 c0       	push   0xc003359d
c0024d89:	55                   	push   ebp
c0024d8a:	e8 b1 ba fd ff       	call   c0000840 <strcat>
c0024d8f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024d92:	e8 f7 b9 ff ff       	call   c002078e <KePanic(char const*)>
c0024d97:	83 c4 10             	add    esp,0x10
c0024d9a:	51                   	push   ecx
c0024d9b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0024d9f:	50                   	push   eax
c0024da0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0024da4:	50                   	push   eax
c0024da5:	53                   	push   ebx
c0024da6:	e8 d1 5b ff ff       	call   c001a97c <File::stat(unsigned long long*, bool*)>
c0024dab:	83 c4 10             	add    esp,0x10
c0024dae:	89 c5                	mov    ebp,eax
c0024db0:	85 db                	test   ebx,ebx
c0024db2:	74 0c                	je     c0024dc0 <Thr::loadDLL(char const*, bool)+0xaa>
c0024db4:	83 ec 0c             	sub    esp,0xc
c0024db7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024db9:	53                   	push   ebx
c0024dba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024dbd:	83 c4 10             	add    esp,0x10
c0024dc0:	83 ec 0c             	sub    esp,0xc
c0024dc3:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0024dc8:	50                   	push   eax
c0024dc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024dcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024dd1:	55                   	push   ebp
c0024dd2:	68 9f 35 03 c0       	push   0xc003359f
c0024dd7:	e8 79 46 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0024ddc:	83 c4 20             	add    esp,0x20
c0024ddf:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0024de4:	75 0a                	jne    c0024df0 <Thr::loadDLL(char const*, bool)+0xda>
c0024de6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024dea:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0024dee:	75 3c                	jne    c0024e2c <Thr::loadDLL(char const*, bool)+0x116>
c0024df0:	89 f8                	mov    eax,edi
c0024df2:	84 c0                	test   al,al
c0024df4:	0f 84 49 01 00 00    	je     c0024f43 <Thr::loadDLL(char const*, bool)+0x22d>
c0024dfa:	51                   	push   ecx
c0024dfb:	51                   	push   ecx
c0024dfc:	68 c0 35 03 c0       	push   0xc00335c0
c0024e01:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0024e05:	53                   	push   ebx
c0024e06:	e8 35 b8 fd ff       	call   c0000640 <strcpy>
c0024e0b:	5d                   	pop    ebp
c0024e0c:	58                   	pop    eax
c0024e0d:	56                   	push   esi
c0024e0e:	53                   	push   ebx
c0024e0f:	e8 2c ba fd ff       	call   c0000840 <strcat>
c0024e14:	58                   	pop    eax
c0024e15:	5a                   	pop    edx
c0024e16:	68 9d 35 03 c0       	push   0xc003359d
c0024e1b:	53                   	push   ebx
c0024e1c:	e8 1f ba fd ff       	call   c0000840 <strcat>
c0024e21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024e24:	e8 65 b9 ff ff       	call   c002078e <KePanic(char const*)>
c0024e29:	83 c4 10             	add    esp,0x10
c0024e2c:	52                   	push   edx
c0024e2d:	6a 03                	push   0x3
c0024e2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024e33:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024e37:	05 ff 0f 00 00       	add    eax,0xfff
c0024e3c:	83 d2 00             	adc    edx,0x0
c0024e3f:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024e43:	50                   	push   eax
c0024e44:	ff 35 b0 ba 03 c0    	push   DWORD PTR ds:0xc003bab0
c0024e4a:	e8 e5 3a ff ff       	call   c0018934 <VAS::allocatePages(int, int)>
c0024e4f:	59                   	pop    ecx
c0024e50:	89 c3                	mov    ebx,eax
c0024e52:	5d                   	pop    ebp
c0024e53:	50                   	push   eax
c0024e54:	68 ce 18 03 c0       	push   0xc00318ce
c0024e59:	e8 f7 45 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0024e5e:	89 34 24             	mov    DWORD PTR [esp],esi
c0024e61:	e8 0a b7 fd ff       	call   c0000570 <strlen>
c0024e66:	8b 2d 00 0a 04 c0    	mov    ebp,DWORD PTR ds:0xc0040a00
c0024e6c:	40                   	inc    eax
c0024e6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0024e70:	e8 52 17 ff ff       	call   c00165c7 <malloc>
c0024e75:	89 04 ad 20 0e 04 c0 	mov    DWORD PTR [ebp*4-0x3ffbf1e0],eax
c0024e7c:	58                   	pop    eax
c0024e7d:	a1 00 0a 04 c0       	mov    eax,ds:0xc0040a00
c0024e82:	5a                   	pop    edx
c0024e83:	56                   	push   esi
c0024e84:	ff 34 85 20 0e 04 c0 	push   DWORD PTR [eax*4-0x3ffbf1e0]
c0024e8b:	e8 b0 b7 fd ff       	call   c0000640 <strcpy>
c0024e90:	a1 00 0a 04 c0       	mov    eax,ds:0xc0040a00
c0024e95:	8d 50 01             	lea    edx,[eax+0x1]
c0024e98:	89 1c 85 20 0c 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf3e0],ebx
c0024e9f:	89 15 00 0a 04 c0    	mov    DWORD PTR ds:0xc0040a00,edx
c0024ea5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024ea9:	83 c4 0c             	add    esp,0xc
c0024eac:	89 14 85 20 0a 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf5e0],edx
c0024eb3:	6a 01                	push   0x1
c0024eb5:	53                   	push   ebx
c0024eb6:	56                   	push   esi
c0024eb7:	e8 9e f6 ff ff       	call   c002455a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0024ebc:	83 c4 10             	add    esp,0x10
c0024ebf:	0f b6 c0             	movzx  eax,al
c0024ec2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024ec6:	85 c0                	test   eax,eax
c0024ec8:	0f 85 89 00 00 00    	jne    c0024f57 <Thr::loadDLL(char const*, bool)+0x241>
c0024ece:	89 f8                	mov    eax,edi
c0024ed0:	84 c0                	test   al,al
c0024ed2:	74 73                	je     c0024f47 <Thr::loadDLL(char const*, bool)+0x231>
c0024ed4:	83 ec 0c             	sub    esp,0xc
c0024ed7:	68 d9 35 03 c0       	push   0xc00335d9
c0024edc:	e8 ad b8 ff ff       	call   c002078e <KePanic(char const*)>
c0024ee1:	83 c4 10             	add    esp,0x10
c0024ee4:	eb 61                	jmp    c0024f47 <Thr::loadDLL(char const*, bool)+0x231>
c0024ee6:	50                   	push   eax
c0024ee7:	50                   	push   eax
c0024ee8:	89 e8                	mov    eax,ebp
c0024eea:	c1 e0 0c             	shl    eax,0xc
c0024eed:	01 d8                	add    eax,ebx
c0024eef:	50                   	push   eax
c0024ef0:	ff 35 b0 ba 03 c0    	push   DWORD PTR ds:0xc003bab0
c0024ef6:	e8 21 35 ff ff       	call   c001841c <VAS::getPageTableEntry(unsigned long)>
c0024efb:	83 c4 10             	add    esp,0x10
c0024efe:	8b 00                	mov    eax,DWORD PTR [eax]
c0024f00:	a8 60                	test   al,0x60
c0024f02:	75 11                	jne    c0024f15 <Thr::loadDLL(char const*, bool)+0x1ff>
c0024f04:	83 ec 0c             	sub    esp,0xc
c0024f07:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024f0c:	50                   	push   eax
c0024f0d:	e8 55 19 ff ff       	call   c0016867 <Phys::freePage(unsigned long)>
c0024f12:	83 c4 10             	add    esp,0x10
c0024f15:	45                   	inc    ebp
c0024f16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024f1a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024f1e:	05 ff 0f 00 00       	add    eax,0xfff
c0024f23:	bf 00 00 00 00       	mov    edi,0x0
c0024f28:	83 d2 00             	adc    edx,0x0
c0024f2b:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024f2f:	c1 ea 0c             	shr    edx,0xc
c0024f32:	39 c5                	cmp    ebp,eax
c0024f34:	89 d1                	mov    ecx,edx
c0024f36:	89 f8                	mov    eax,edi
c0024f38:	19 c8                	sbb    eax,ecx
c0024f3a:	72 aa                	jb     c0024ee6 <Thr::loadDLL(char const*, bool)+0x1d0>
c0024f3c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0024f41:	75 18                	jne    c0024f5b <Thr::loadDLL(char const*, bool)+0x245>
c0024f43:	31 db                	xor    ebx,ebx
c0024f45:	eb 14                	jmp    c0024f5b <Thr::loadDLL(char const*, bool)+0x245>
c0024f47:	83 ec 0c             	sub    esp,0xc
c0024f4a:	68 f8 35 03 c0       	push   0xc00335f8
c0024f4f:	e8 3a b8 ff ff       	call   c002078e <KePanic(char const*)>
c0024f54:	83 c4 10             	add    esp,0x10
c0024f57:	31 ed                	xor    ebp,ebp
c0024f59:	eb bb                	jmp    c0024f16 <Thr::loadDLL(char const*, bool)+0x200>
c0024f5b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0024f61:	89 d8                	mov    eax,ebx
c0024f63:	5b                   	pop    ebx
c0024f64:	5e                   	pop    esi
c0024f65:	5f                   	pop    edi
c0024f66:	5d                   	pop    ebp
c0024f67:	c3                   	ret    

c0024f68 <Thr::executeDLL(unsigned long, void*)>:
c0024f68:	56                   	push   esi
c0024f69:	53                   	push   ebx
c0024f6a:	52                   	push   edx
c0024f6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024f6f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0024f73:	85 db                	test   ebx,ebx
c0024f75:	75 10                	jne    c0024f87 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0024f77:	83 ec 0c             	sub    esp,0xc
c0024f7a:	68 14 36 03 c0       	push   0xc0033614
c0024f7f:	e8 0a b8 ff ff       	call   c002078e <KePanic(char const*)>
c0024f84:	83 c4 10             	add    esp,0x10
c0024f87:	50                   	push   eax
c0024f88:	50                   	push   eax
c0024f89:	53                   	push   ebx
c0024f8a:	68 3e 36 03 c0       	push   0xc003363e
c0024f8f:	e8 c1 44 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0024f94:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0024f98:	89 d8                	mov    eax,ebx
c0024f9a:	83 c4 14             	add    esp,0x14
c0024f9d:	5b                   	pop    ebx
c0024f9e:	5e                   	pop    esi
c0024f9f:	ff e0                	jmp    eax
c0024fa1:	66 90                	xchg   ax,ax
c0024fa3:	90                   	nop

c0024fa4 <userModeEntryPoint(void*)>:
c0024fa4:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0024fa9:	83 e8 01             	sub    eax,0x1
c0024fac:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0024fb1:	75 01                	jne    c0024fb4 <userModeEntryPoint(void*)+0x10>
c0024fb3:	fb                   	sti    
c0024fb4:	fb                   	sti    
c0024fb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024fba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0024fbd:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0024fc3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024fc7:	e9 73 b2 fd ff       	jmp    c000023f <goToUsermode>

c0024fcc <changeTSS>:
c0024fcc:	83 ec 14             	sub    esp,0x14
c0024fcf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024fd4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0024fd7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0024fdc:	c1 e2 15             	shl    edx,0x15
c0024fdf:	29 d0                	sub    eax,edx
c0024fe1:	50                   	push   eax
c0024fe2:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0024fe7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024fed:	05 7c 11 00 00       	add    eax,0x117c
c0024ff2:	50                   	push   eax
c0024ff3:	e8 6c 2a ff ff       	call   c0017a64 <TSS::setESP(unsigned long)>
c0024ff8:	83 c4 1c             	add    esp,0x1c
c0024ffb:	c3                   	ret    

c0024ffc <switchToThread(ThreadControlBlock*)>:
c0024ffc:	57                   	push   edi
c0024ffd:	8b 0d cc 11 04 c0    	mov    ecx,DWORD PTR ds:0xc00411cc
c0025003:	56                   	push   esi
c0025004:	85 c9                	test   ecx,ecx
c0025006:	53                   	push   ebx
c0025007:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002500b:	0f 85 8b 00 00 00    	jne    c002509c <switchToThread(ThreadControlBlock*)+0xa0>
c0025011:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0025015:	81 fa ff 00 00 00    	cmp    edx,0xff
c002501b:	74 7b                	je     c0025098 <switchToThread(ThreadControlBlock*)+0x9c>
c002501d:	b8 00 04 00 00       	mov    eax,0x400
c0025022:	29 d0                	sub    eax,edx
c0025024:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0025027:	d1 f8                	sar    eax,1
c0025029:	01 d0                	add    eax,edx
c002502b:	90                   	nop
c002502c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c002502f:	e8 4f 26 00 00       	call   c0027683 <HalQueryPerformanceCounter()>
c0025034:	a3 10 12 04 c0       	mov    ds:0xc0041210,eax
c0025039:	89 15 14 12 04 c0    	mov    DWORD PTR ds:0xc0041214,edx
c002503f:	89 c6                	mov    esi,eax
c0025041:	89 d7                	mov    edi,edx
c0025043:	2b 35 00 12 04 c0    	sub    esi,DWORD PTR ds:0xc0041200
c0025049:	a3 00 12 04 c0       	mov    ds:0xc0041200,eax
c002504e:	1b 3d 04 12 04 c0    	sbb    edi,DWORD PTR ds:0xc0041204
c0025054:	89 35 08 12 04 c0    	mov    DWORD PTR ds:0xc0041208,esi
c002505a:	89 3d 0c 12 04 c0    	mov    DWORD PTR ds:0xc004120c,edi
c0025060:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0025066:	89 15 04 12 04 c0    	mov    DWORD PTR ds:0xc0041204,edx
c002506c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c002506f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0025072:	01 c6                	add    esi,eax
c0025074:	11 d7                	adc    edi,edx
c0025076:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0025079:	83 ec 0c             	sub    esp,0xc
c002507c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c002507f:	53                   	push   ebx
c0025080:	e8 f2 b1 fd ff       	call   c0000277 <switchToThreadASM>
c0025085:	0f 20 c0             	mov    eax,cr0
c0025088:	83 c8 08             	or     eax,0x8
c002508b:	0f 22 c0             	mov    cr0,eax
c002508e:	83 c4 10             	add    esp,0x10
c0025091:	5b                   	pop    ebx
c0025092:	5e                   	pop    esi
c0025093:	5f                   	pop    edi
c0025094:	c3                   	ret    
c0025095:	8d 76 00             	lea    esi,[esi+0x0]
c0025098:	31 c0                	xor    eax,eax
c002509a:	eb 90                	jmp    c002502c <switchToThread(ThreadControlBlock*)+0x30>
c002509c:	5b                   	pop    ebx
c002509d:	c7 05 c8 11 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x1
c00250a7:	5e                   	pop    esi
c00250a8:	5f                   	pop    edi
c00250a9:	c3                   	ret    
c00250aa:	66 90                	xchg   ax,ax

c00250ac <Process::addArgs(char**)>:
c00250ac:	57                   	push   edi
c00250ad:	56                   	push   esi
c00250ae:	53                   	push   ebx
c00250af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00250b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00250b7:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00250c1:	85 ff                	test   edi,edi
c00250c3:	74 4f                	je     c0025114 <Process::addArgs(char**)+0x68>
c00250c5:	8b 07                	mov    eax,DWORD PTR [edi]
c00250c7:	85 c0                	test   eax,eax
c00250c9:	74 49                	je     c0025114 <Process::addArgs(char**)+0x68>
c00250cb:	31 db                	xor    ebx,ebx
c00250cd:	8d 76 00             	lea    esi,[esi+0x0]
c00250d0:	83 ec 0c             	sub    esp,0xc
c00250d3:	50                   	push   eax
c00250d4:	e8 97 b4 fd ff       	call   c0000570 <strlen>
c00250d9:	83 c0 01             	add    eax,0x1
c00250dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00250df:	e8 e3 14 ff ff       	call   c00165c7 <malloc>
c00250e4:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00250eb:	5a                   	pop    edx
c00250ec:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00250ef:	59                   	pop    ecx
c00250f0:	83 c3 01             	add    ebx,0x1
c00250f3:	52                   	push   edx
c00250f4:	50                   	push   eax
c00250f5:	e8 46 b5 fd ff       	call   c0000640 <strcpy>
c00250fa:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0025100:	83 c4 10             	add    esp,0x10
c0025103:	83 c1 01             	add    ecx,0x1
c0025106:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c002510c:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c002510f:	85 c0                	test   eax,eax
c0025111:	75 bd                	jne    c00250d0 <Process::addArgs(char**)+0x24>
c0025113:	90                   	nop
c0025114:	5b                   	pop    ebx
c0025115:	5e                   	pop    esi
c0025116:	5f                   	pop    edi
c0025117:	c3                   	ret    

c0025118 <Process::Process(char const*, Process*, char**)>:
c0025118:	56                   	push   esi
c0025119:	53                   	push   ebx
c002511a:	83 ec 14             	sub    esp,0x14
c002511d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025121:	05 0c 02 00 00       	add    eax,0x20c
c0025126:	bb 07 00 00 00       	mov    ebx,0x7
c002512b:	89 c6                	mov    esi,eax
c002512d:	8d 76 00             	lea    esi,[esi+0x0]
c0025130:	85 db                	test   ebx,ebx
c0025132:	78 14                	js     c0025148 <Process::Process(char const*, Process*, char**)+0x30>
c0025134:	83 ec 0c             	sub    esp,0xc
c0025137:	56                   	push   esi
c0025138:	e8 bb a4 00 00       	call   c002f5f8 <ThreadControlBlock::ThreadControlBlock()>
c002513d:	83 c4 10             	add    esp,0x10
c0025140:	83 c6 5f             	add    esi,0x5f
c0025143:	83 eb 01             	sub    ebx,0x1
c0025146:	eb e8                	jmp    c0025130 <Process::Process(char const*, Process*, char**)+0x18>
c0025148:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002514c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0025153:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025157:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c002515e:	83 ec 0c             	sub    esp,0xc
c0025161:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025165:	e8 1a b2 ff ff       	call   c0020384 <KeNewProcessEnv(Process*)>
c002516a:	83 c4 10             	add    esp,0x10
c002516d:	89 c2                	mov    edx,eax
c002516f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025173:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0025179:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002517d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0025186:	a1 e0 4c 03 c0       	mov    eax,ds:0xc0034ce0
c002518b:	8d 50 01             	lea    edx,[eax+0x1]
c002518e:	89 15 e0 4c 03 c0    	mov    DWORD PTR ds:0xc0034ce0,edx
c0025194:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0025198:	89 02                	mov    DWORD PTR [edx],eax
c002519a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00251a2:	83 ec 0c             	sub    esp,0xc
c00251a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00251a9:	e8 19 14 ff ff       	call   c00165c7 <malloc>
c00251ae:	83 c4 10             	add    esp,0x10
c00251b1:	89 c3                	mov    ebx,eax
c00251b3:	83 ec 08             	sub    esp,0x8
c00251b6:	6a 00                	push   0x0
c00251b8:	53                   	push   ebx
c00251b9:	e8 ba 39 ff ff       	call   c0018b78 <VAS::VAS(bool)>
c00251be:	83 c4 10             	add    esp,0x10
c00251c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251c5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00251cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251cf:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00251d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00251e1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00251e7:	e8 d3 bd ff ff       	call   c0020fbf <KeInitSignals()>
c00251ec:	89 c2                	mov    edx,eax
c00251ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251f2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00251f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251fc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0025202:	85 c0                	test   eax,eax
c0025204:	74 42                	je     c0025248 <Process::Process(char const*, Process*, char**)+0x130>
c0025206:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002520a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0025210:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0025216:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002521a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0025220:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025224:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c002522a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0025230:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025234:	05 0c 01 00 00       	add    eax,0x10c
c0025239:	83 ec 08             	sub    esp,0x8
c002523c:	52                   	push   edx
c002523d:	50                   	push   eax
c002523e:	e8 fd b3 fd ff       	call   c0000640 <strcpy>
c0025243:	83 c4 10             	add    esp,0x10
c0025246:	eb 64                	jmp    c00252ac <Process::Process(char const*, Process*, char**)+0x194>
c0025248:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0025250:	83 ec 0c             	sub    esp,0xc
c0025253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025257:	e8 6b 13 ff ff       	call   c00165c7 <malloc>
c002525c:	83 c4 10             	add    esp,0x10
c002525f:	89 c3                	mov    ebx,eax
c0025261:	83 ec 08             	sub    esp,0x8
c0025264:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025268:	53                   	push   ebx
c0025269:	e8 08 25 ff ff       	call   c0017776 <VgaText::VgaText(char const*)>
c002526e:	83 c4 10             	add    esp,0x10
c0025271:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025275:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c002527b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002527f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0025285:	83 ec 0c             	sub    esp,0xc
c0025288:	50                   	push   eax
c0025289:	e8 86 1d ff ff       	call   c0017014 <addToTerminalCycle(VgaText*)>
c002528e:	83 c4 10             	add    esp,0x10
c0025291:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025295:	05 0c 01 00 00       	add    eax,0x10c
c002529a:	83 ec 08             	sub    esp,0x8
c002529d:	68 5d 36 03 c0       	push   0xc003365d
c00252a2:	50                   	push   eax
c00252a3:	e8 98 b3 fd ff       	call   c0000640 <strcpy>
c00252a8:	83 c4 10             	add    esp,0x10
c00252ab:	90                   	nop
c00252ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00252b0:	83 c0 0c             	add    eax,0xc
c00252b3:	83 ec 08             	sub    esp,0x8
c00252b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00252ba:	50                   	push   eax
c00252bb:	e8 80 b3 fd ff       	call   c0000640 <strcpy>
c00252c0:	83 c4 10             	add    esp,0x10
c00252c3:	83 ec 08             	sub    esp,0x8
c00252c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00252ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00252ce:	e8 d9 fd ff ff       	call   c00250ac <Process::addArgs(char**)>
c00252d3:	83 c4 10             	add    esp,0x10
c00252d6:	83 ec 08             	sub    esp,0x8
c00252d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00252dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00252e1:	e8 42 ed ff ff       	call   c0024028 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00252e6:	83 c4 10             	add    esp,0x10
c00252e9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00252ed:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00252f1:	83 f0 01             	xor    eax,0x1
c00252f4:	88 c2                	mov    dl,al
c00252f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00252fa:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0025300:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025305:	83 ec 04             	sub    esp,0x4
c0025308:	50                   	push   eax
c0025309:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002530d:	68 b4 36 03 c0       	push   0xc00336b4
c0025312:	e8 3e 41 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0025317:	83 c4 10             	add    esp,0x10
c002531a:	90                   	nop
c002531b:	83 c4 14             	add    esp,0x14
c002531e:	5b                   	pop    ebx
c002531f:	5e                   	pop    esi
c0025320:	c3                   	ret    
c0025321:	90                   	nop
c0025322:	66 90                	xchg   ax,ax

c0025324 <Process::Process(bool, char const*, Process*, char**)>:
c0025324:	56                   	push   esi
c0025325:	53                   	push   ebx
c0025326:	83 ec 24             	sub    esp,0x24
c0025329:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002532d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0025331:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025335:	05 0c 02 00 00       	add    eax,0x20c
c002533a:	bb 07 00 00 00       	mov    ebx,0x7
c002533f:	89 c6                	mov    esi,eax
c0025341:	8d 76 00             	lea    esi,[esi+0x0]
c0025344:	85 db                	test   ebx,ebx
c0025346:	78 14                	js     c002535c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0025348:	83 ec 0c             	sub    esp,0xc
c002534b:	56                   	push   esi
c002534c:	e8 a7 a2 00 00       	call   c002f5f8 <ThreadControlBlock::ThreadControlBlock()>
c0025351:	83 c4 10             	add    esp,0x10
c0025354:	83 c6 5f             	add    esi,0x5f
c0025357:	83 eb 01             	sub    ebx,0x1
c002535a:	eb e8                	jmp    c0025344 <Process::Process(bool, char const*, Process*, char**)+0x20>
c002535c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025360:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0025367:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002536b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0025372:	83 ec 0c             	sub    esp,0xc
c0025375:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025379:	e8 06 b0 ff ff       	call   c0020384 <KeNewProcessEnv(Process*)>
c002537e:	83 c4 10             	add    esp,0x10
c0025381:	89 c2                	mov    edx,eax
c0025383:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025387:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c002538d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025391:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c002539a:	a1 e0 4c 03 c0       	mov    eax,ds:0xc0034ce0
c002539f:	8d 50 01             	lea    edx,[eax+0x1]
c00253a2:	89 15 e0 4c 03 c0    	mov    DWORD PTR ds:0xc0034ce0,edx
c00253a8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00253ac:	89 02                	mov    DWORD PTR [edx],eax
c00253ae:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00253b6:	83 ec 0c             	sub    esp,0xc
c00253b9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00253bd:	e8 05 12 ff ff       	call   c00165c7 <malloc>
c00253c2:	83 c4 10             	add    esp,0x10
c00253c5:	89 c3                	mov    ebx,eax
c00253c7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00253cc:	83 ec 08             	sub    esp,0x8
c00253cf:	50                   	push   eax
c00253d0:	53                   	push   ebx
c00253d1:	e8 a2 37 ff ff       	call   c0018b78 <VAS::VAS(bool)>
c00253d6:	83 c4 10             	add    esp,0x10
c00253d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00253dd:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00253e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00253e7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00253f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00253f5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00253f9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00253ff:	e8 bb bb ff ff       	call   c0020fbf <KeInitSignals()>
c0025404:	89 c2                	mov    edx,eax
c0025406:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002540a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0025410:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025414:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c002541a:	85 c0                	test   eax,eax
c002541c:	74 42                	je     c0025460 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c002541e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025422:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0025428:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c002542e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025432:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0025438:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002543c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0025442:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0025448:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002544c:	05 0c 01 00 00       	add    eax,0x10c
c0025451:	83 ec 08             	sub    esp,0x8
c0025454:	52                   	push   edx
c0025455:	50                   	push   eax
c0025456:	e8 e5 b1 fd ff       	call   c0000640 <strcpy>
c002545b:	83 c4 10             	add    esp,0x10
c002545e:	eb 64                	jmp    c00254c4 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0025460:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0025468:	83 ec 0c             	sub    esp,0xc
c002546b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002546f:	e8 53 11 ff ff       	call   c00165c7 <malloc>
c0025474:	83 c4 10             	add    esp,0x10
c0025477:	89 c3                	mov    ebx,eax
c0025479:	83 ec 08             	sub    esp,0x8
c002547c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025480:	53                   	push   ebx
c0025481:	e8 f0 22 ff ff       	call   c0017776 <VgaText::VgaText(char const*)>
c0025486:	83 c4 10             	add    esp,0x10
c0025489:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002548d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0025493:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025497:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002549d:	83 ec 0c             	sub    esp,0xc
c00254a0:	50                   	push   eax
c00254a1:	e8 6e 1b ff ff       	call   c0017014 <addToTerminalCycle(VgaText*)>
c00254a6:	83 c4 10             	add    esp,0x10
c00254a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00254ad:	05 0c 01 00 00       	add    eax,0x10c
c00254b2:	83 ec 08             	sub    esp,0x8
c00254b5:	68 5d 36 03 c0       	push   0xc003365d
c00254ba:	50                   	push   eax
c00254bb:	e8 80 b1 fd ff       	call   c0000640 <strcpy>
c00254c0:	83 c4 10             	add    esp,0x10
c00254c3:	90                   	nop
c00254c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00254c8:	83 c0 0c             	add    eax,0xc
c00254cb:	83 ec 08             	sub    esp,0x8
c00254ce:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00254d2:	50                   	push   eax
c00254d3:	e8 68 b1 fd ff       	call   c0000640 <strcpy>
c00254d8:	83 c4 10             	add    esp,0x10
c00254db:	83 ec 08             	sub    esp,0x8
c00254de:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00254e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00254e6:	e8 c1 fb ff ff       	call   c00250ac <Process::addArgs(char**)>
c00254eb:	83 c4 10             	add    esp,0x10
c00254ee:	90                   	nop
c00254ef:	83 c4 24             	add    esp,0x24
c00254f2:	5b                   	pop    ebx
c00254f3:	5e                   	pop    esi
c00254f4:	c3                   	ret    
c00254f5:	8d 76 00             	lea    esi,[esi+0x0]

c00254f8 <taskStartupFunction>:
c00254f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00254fd:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0025500:	c3                   	ret    
c0025501:	8d 76 00             	lea    esi,[esi+0x0]

c0025504 <KeDisablePreemption()>:
c0025504:	a1 ac 11 04 c0       	mov    eax,ds:0xc00411ac
c0025509:	85 c0                	test   eax,eax
c002550b:	75 13                	jne    c0025520 <KeDisablePreemption()+0x1c>
c002550d:	8a 15 c0 b9 03 c0    	mov    dl,BYTE PTR ds:0xc003b9c0
c0025513:	c6 05 c0 b9 03 c0 00 	mov    BYTE PTR ds:0xc003b9c0,0x0
c002551a:	88 15 a8 11 04 c0    	mov    BYTE PTR ds:0xc00411a8,dl
c0025520:	83 c0 01             	add    eax,0x1
c0025523:	a3 ac 11 04 c0       	mov    ds:0xc00411ac,eax
c0025528:	c3                   	ret    
c0025529:	8d 76 00             	lea    esi,[esi+0x0]

c002552c <KeRestorePreemption()>:
c002552c:	a1 ac 11 04 c0       	mov    eax,ds:0xc00411ac
c0025531:	83 e8 01             	sub    eax,0x1
c0025534:	a3 ac 11 04 c0       	mov    ds:0xc00411ac,eax
c0025539:	75 0d                	jne    c0025548 <KeRestorePreemption()+0x1c>
c002553b:	a0 a8 11 04 c0       	mov    al,ds:0xc00411a8
c0025540:	a2 c0 b9 03 c0       	mov    ds:0xc003b9c0,al
c0025545:	8d 76 00             	lea    esi,[esi+0x0]
c0025548:	c3                   	ret    
c0025549:	90                   	nop
c002554a:	66 90                	xchg   ax,ax

c002554c <Process::createThread(void (*)(void*), void*, int)>:
c002554c:	57                   	push   edi
c002554d:	31 c9                	xor    ecx,ecx
c002554f:	56                   	push   esi
c0025550:	53                   	push   ebx
c0025551:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025555:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c002555c:	89 f2                	mov    edx,esi
c002555e:	66 90                	xchg   ax,ax
c0025560:	0f b7 c2             	movzx  eax,dx
c0025563:	80 e2 01             	and    dl,0x1
c0025566:	74 14                	je     c002557c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0025568:	d1 f8                	sar    eax,1
c002556a:	83 c1 01             	add    ecx,0x1
c002556d:	89 c2                	mov    edx,eax
c002556f:	83 f9 10             	cmp    ecx,0x10
c0025572:	75 ec                	jne    c0025560 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0025574:	31 db                	xor    ebx,ebx
c0025576:	89 d8                	mov    eax,ebx
c0025578:	5b                   	pop    ebx
c0025579:	5e                   	pop    esi
c002557a:	5f                   	pop    edi
c002557b:	c3                   	ret    
c002557c:	b8 01 00 00 00       	mov    eax,0x1
c0025581:	d3 e0                	shl    eax,cl
c0025583:	09 c6                	or     esi,eax
c0025585:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0025588:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c002558f:	01 c0                	add    eax,eax
c0025591:	01 c8                	add    eax,ecx
c0025593:	8d 04 80             	lea    eax,[eax+eax*4]
c0025596:	01 d8                	add    eax,ebx
c0025598:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c002559f:	75 0b                	jne    c00255ac <Process::createThread(void (*)(void*), void*, int)+0x60>
c00255a1:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00255ab:	90                   	nop
c00255ac:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00255b2:	83 ec 0c             	sub    esp,0xc
c00255b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00255b8:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00255bb:	01 c0                	add    eax,eax
c00255bd:	01 c8                	add    eax,ecx
c00255bf:	8d 3c 80             	lea    edi,[eax+eax*4]
c00255c2:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00255c5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00255cb:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00255d1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00255d5:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00255db:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00255e1:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00255e7:	89 ca                	mov    edx,ecx
c00255e9:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00255f0:	f7 da                	neg    edx
c00255f2:	c1 e2 15             	shl    edx,0x15
c00255f5:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00255fb:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0025601:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0025605:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c002560f:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0025615:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0025619:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c002561f:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0025629:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0025633:	68 00 01 00 00       	push   0x100
c0025638:	e8 8a 0f ff ff       	call   c00165c7 <malloc>
c002563d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0025640:	58                   	pop    eax
c0025641:	5a                   	pop    edx
c0025642:	53                   	push   ebx
c0025643:	68 ec 11 04 c0       	push   0xc00411ec
c0025648:	e8 43 9d 00 00       	call   c002f390 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002564d:	83 c4 10             	add    esp,0x10
c0025650:	89 d8                	mov    eax,ebx
c0025652:	5b                   	pop    ebx
c0025653:	5e                   	pop    esi
c0025654:	5f                   	pop    edi
c0025655:	c3                   	ret    
c0025656:	66 90                	xchg   ax,ax

c0025658 <Process::createUserThread()>:
c0025658:	83 ec 0c             	sub    esp,0xc
c002565b:	68 80 00 00 00       	push   0x80
c0025660:	6a 00                	push   0x0
c0025662:	68 a4 4f 02 c0       	push   0xc0024fa4
c0025667:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002566b:	50                   	push   eax
c002566c:	e8 db fe ff ff       	call   c002554c <Process::createThread(void (*)(void*), void*, int)>
c0025671:	83 c4 1c             	add    esp,0x1c
c0025674:	c3                   	ret    
c0025675:	8d 76 00             	lea    esi,[esi+0x0]

c0025678 <setupMultitasking(void (*)())>:
c0025678:	56                   	push   esi
c0025679:	53                   	push   ebx
c002567a:	83 ec 04             	sub    esp,0x4
c002567d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0025681:	eb 11                	jmp    c0025694 <setupMultitasking(void (*)())+0x1c>
c0025683:	90                   	nop
c0025684:	83 ec 0c             	sub    esp,0xc
c0025687:	68 ec 11 04 c0       	push   0xc00411ec
c002568c:	e8 43 9c 00 00       	call   c002f2d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025691:	83 c4 10             	add    esp,0x10
c0025694:	83 ec 0c             	sub    esp,0xc
c0025697:	68 ec 11 04 c0       	push   0xc00411ec
c002569c:	e8 0f 9c 00 00       	call   c002f2b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00256a1:	83 c4 10             	add    esp,0x10
c00256a4:	84 c0                	test   al,al
c00256a6:	74 dc                	je     c0025684 <setupMultitasking(void (*)())+0xc>
c00256a8:	83 ec 0c             	sub    esp,0xc
c00256ab:	68 24 07 00 00       	push   0x724
c00256b0:	e8 12 0f ff ff       	call   c00165c7 <malloc>
c00256b5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00256bc:	89 c3                	mov    ebx,eax
c00256be:	6a 00                	push   0x0
c00256c0:	68 61 36 03 c0       	push   0xc0033661
c00256c5:	6a 01                	push   0x1
c00256c7:	50                   	push   eax
c00256c8:	e8 57 fc ff ff       	call   c0025324 <Process::Process(bool, char const*, Process*, char**)>
c00256cd:	83 c4 14             	add    esp,0x14
c00256d0:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00256d6:	89 1d f8 11 04 c0    	mov    DWORD PTR ds:0xc00411f8,ebx
c00256dc:	50                   	push   eax
c00256dd:	e8 87 1b ff ff       	call   c0017269 <setActiveTerminal(VgaText*)>
c00256e2:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00256e9:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00256f3:	83 c8 01             	or     eax,0x1
c00256f6:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00256fd:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0025703:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0025706:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0025710:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0025716:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c002571c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0025726:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0025730:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c002573a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0025740:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c002574a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0025750:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c002575a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0025761:	e8 61 0e ff ff       	call   c00165c7 <malloc>
c0025766:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c002576c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0025772:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0025778:	5a                   	pop    edx
c0025779:	59                   	pop    ecx
c002577a:	68 5d 36 03 c0       	push   0xc003365d
c002577f:	50                   	push   eax
c0025780:	e8 bb ae fd ff       	call   c0000640 <strcpy>
c0025785:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c002578c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0025790:	83 c4 14             	add    esp,0x14
c0025793:	5b                   	pop    ebx
c0025794:	5e                   	pop    esi
c0025795:	e9 cf aa fd ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c002579a:	66 90                	xchg   ax,ax

c002579c <schedule()>:
c002579c:	8b 15 cc 11 04 c0    	mov    edx,DWORD PTR ds:0xc00411cc
c00257a2:	85 d2                	test   edx,edx
c00257a4:	74 0e                	je     c00257b4 <schedule()+0x18>
c00257a6:	c7 05 c8 11 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x1
c00257b0:	c3                   	ret    
c00257b1:	8d 76 00             	lea    esi,[esi+0x0]
c00257b4:	53                   	push   ebx
c00257b5:	83 ec 14             	sub    esp,0x14
c00257b8:	68 ec 11 04 c0       	push   0xc00411ec
c00257bd:	e8 ee 9a 00 00       	call   c002f2b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00257c2:	83 c4 10             	add    esp,0x10
c00257c5:	84 c0                	test   al,al
c00257c7:	75 3f                	jne    c0025808 <schedule()+0x6c>
c00257c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00257ce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00257d1:	83 fa 01             	cmp    edx,0x1
c00257d4:	74 3a                	je     c0025810 <schedule()+0x74>
c00257d6:	66 90                	xchg   ax,ax
c00257d8:	83 ec 0c             	sub    esp,0xc
c00257db:	68 ec 11 04 c0       	push   0xc00411ec
c00257e0:	e8 e7 9a 00 00       	call   c002f2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00257e5:	c7 04 24 ec 11 04 c0 	mov    DWORD PTR [esp],0xc00411ec
c00257ec:	89 c3                	mov    ebx,eax
c00257ee:	e8 e1 9a 00 00       	call   c002f2d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00257f3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00257fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00257fd:	e8 fa f7 ff ff       	call   c0024ffc <switchToThread(ThreadControlBlock*)>
c0025802:	83 c4 10             	add    esp,0x10
c0025805:	8d 76 00             	lea    esi,[esi+0x0]
c0025808:	83 c4 08             	add    esp,0x8
c002580b:	5b                   	pop    ebx
c002580c:	c3                   	ret    
c002580d:	8d 76 00             	lea    esi,[esi+0x0]
c0025810:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0025817:	83 ec 08             	sub    esp,0x8
c002581a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002581f:	50                   	push   eax
c0025820:	68 ec 11 04 c0       	push   0xc00411ec
c0025825:	e8 66 9b 00 00       	call   c002f390 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002582a:	83 c4 10             	add    esp,0x10
c002582d:	eb a9                	jmp    c00257d8 <schedule()+0x3c>
c002582f:	90                   	nop

c0025830 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0025830:	83 ec 0c             	sub    esp,0xc
c0025833:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025838:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002583c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002583f:	e8 58 ff ff ff       	call   c002579c <schedule()>
c0025844:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025849:	83 e8 01             	sub    eax,0x1
c002584c:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025851:	75 01                	jne    c0025854 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0025853:	fb                   	sti    
c0025854:	83 c4 0c             	add    esp,0xc
c0025857:	c3                   	ret    

c0025858 <blockTask(TaskState)>:
c0025858:	83 ec 0c             	sub    esp,0xc
c002585b:	fa                   	cli    
c002585c:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025861:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025865:	83 c0 01             	add    eax,0x1
c0025868:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002586d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025872:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0025875:	e8 22 ff ff ff       	call   c002579c <schedule()>
c002587a:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002587f:	83 e8 01             	sub    eax,0x1
c0025882:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025887:	75 03                	jne    c002588c <blockTask(TaskState)+0x34>
c0025889:	fb                   	sti    
c002588a:	66 90                	xchg   ax,ax
c002588c:	83 c4 0c             	add    esp,0xc
c002588f:	c3                   	ret    

c0025890 <waitTask(int, int*, int)>:
c0025890:	83 ec 18             	sub    esp,0x18
c0025893:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025898:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002589c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c002589f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00258a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00258a8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00258ab:	6a 07                	push   0x7
c00258ad:	e8 a6 ff ff ff       	call   c0025858 <blockTask(TaskState)>
c00258b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00258b7:	83 c4 10             	add    esp,0x10
c00258ba:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00258bd:	85 d2                	test   edx,edx
c00258bf:	74 0b                	je     c00258cc <waitTask(int, int*, int)+0x3c>
c00258c1:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00258c4:	89 02                	mov    DWORD PTR [edx],eax
c00258c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00258cb:	90                   	nop
c00258cc:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00258cf:	83 c4 0c             	add    esp,0xc
c00258d2:	c3                   	ret    
c00258d3:	90                   	nop

c00258d4 <milliTenthSleepUntil(unsigned int)>:
c00258d4:	83 ec 0c             	sub    esp,0xc
c00258d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258db:	39 05 ec 03 04 c0    	cmp    DWORD PTR ds:0xc00403ec,eax
c00258e1:	76 05                	jbe    c00258e8 <milliTenthSleepUntil(unsigned int)+0x14>
c00258e3:	90                   	nop
c00258e4:	83 c4 0c             	add    esp,0xc
c00258e7:	c3                   	ret    
c00258e8:	fa                   	cli    
c00258e9:	8b 15 d0 11 04 c0    	mov    edx,DWORD PTR ds:0xc00411d0
c00258ef:	83 ec 08             	sub    esp,0x8
c00258f2:	83 c2 01             	add    edx,0x1
c00258f5:	8b 0d cc 11 04 c0    	mov    ecx,DWORD PTR ds:0xc00411cc
c00258fb:	89 15 d0 11 04 c0    	mov    DWORD PTR ds:0xc00411d0,edx
c0025901:	83 c1 01             	add    ecx,0x1
c0025904:	89 0d cc 11 04 c0    	mov    DWORD PTR ds:0xc00411cc,ecx
c002590a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0025910:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0025913:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025918:	50                   	push   eax
c0025919:	68 e0 11 04 c0       	push   0xc00411e0
c002591e:	e8 6d 9a 00 00       	call   c002f390 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025923:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c002592a:	e8 29 ff ff ff       	call   c0025858 <blockTask(TaskState)>
c002592f:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0025934:	83 c4 10             	add    esp,0x10
c0025937:	83 e8 01             	sub    eax,0x1
c002593a:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c002593f:	85 c0                	test   eax,eax
c0025941:	75 09                	jne    c002594c <milliTenthSleepUntil(unsigned int)+0x78>
c0025943:	a1 c8 11 04 c0       	mov    eax,ds:0xc00411c8
c0025948:	85 c0                	test   eax,eax
c002594a:	75 14                	jne    c0025960 <milliTenthSleepUntil(unsigned int)+0x8c>
c002594c:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025951:	83 e8 01             	sub    eax,0x1
c0025954:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025959:	75 89                	jne    c00258e4 <milliTenthSleepUntil(unsigned int)+0x10>
c002595b:	fb                   	sti    
c002595c:	83 c4 0c             	add    esp,0xc
c002595f:	c3                   	ret    
c0025960:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c002596a:	e8 2d fe ff ff       	call   c002579c <schedule()>
c002596f:	eb db                	jmp    c002594c <milliTenthSleepUntil(unsigned int)+0x78>
c0025971:	8d 76 00             	lea    esi,[esi+0x0]

c0025974 <milliTenthSleep(unsigned int)>:
c0025974:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025978:	a1 ec 03 04 c0       	mov    eax,ds:0xc00403ec
c002597d:	01 c2                	add    edx,eax
c002597f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025983:	e9 4c ff ff ff       	jmp    c00258d4 <milliTenthSleepUntil(unsigned int)>

c0025988 <sleep(unsigned int)>:
c0025988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002598c:	8d 04 80             	lea    eax,[eax+eax*4]
c002598f:	8d 04 80             	lea    eax,[eax+eax*4]
c0025992:	8d 04 80             	lea    eax,[eax+eax*4]
c0025995:	8d 04 80             	lea    eax,[eax+eax*4]
c0025998:	c1 e0 04             	shl    eax,0x4
c002599b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002599f:	eb d3                	jmp    c0025974 <milliTenthSleep(unsigned int)>
c00259a1:	8d 76 00             	lea    esi,[esi+0x0]

c00259a4 <taskReturned>:
c00259a4:	83 ec 18             	sub    esp,0x18
c00259a7:	68 e0 36 03 c0       	push   0xc00336e0
c00259ac:	e8 dd ad ff ff       	call   c002078e <KePanic(char const*)>
c00259b1:	83 c4 10             	add    esp,0x10
c00259b4:	83 ec 0c             	sub    esp,0xc
c00259b7:	6a 02                	push   0x2
c00259b9:	e8 9a fe ff ff       	call   c0025858 <blockTask(TaskState)>
c00259be:	fa                   	cli    
c00259bf:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00259c4:	83 c0 01             	add    eax,0x1
c00259c7:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00259cc:	e8 cb fd ff ff       	call   c002579c <schedule()>
c00259d1:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00259d6:	83 c4 10             	add    esp,0x10
c00259d9:	83 e8 01             	sub    eax,0x1
c00259dc:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00259e1:	85 c0                	test   eax,eax
c00259e3:	75 cf                	jne    c00259b4 <taskReturned+0x10>
c00259e5:	fb                   	sti    
c00259e6:	eb cc                	jmp    c00259b4 <taskReturned+0x10>

c00259e8 <Thr::processFromPID(int)>:
c00259e8:	57                   	push   edi
c00259e9:	56                   	push   esi
c00259ea:	53                   	push   ebx
c00259eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00259ef:	fa                   	cli    
c00259f0:	8b 0d d0 11 04 c0    	mov    ecx,DWORD PTR ds:0xc00411d0
c00259f6:	83 ec 0c             	sub    esp,0xc
c00259f9:	83 c1 01             	add    ecx,0x1
c00259fc:	68 ec 11 04 c0       	push   0xc00411ec
c0025a01:	89 0d d0 11 04 c0    	mov    DWORD PTR ds:0xc00411d0,ecx
c0025a07:	e8 c0 98 00 00       	call   c002f2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025a0c:	83 c4 10             	add    esp,0x10
c0025a0f:	89 c7                	mov    edi,eax
c0025a11:	eb 15                	jmp    c0025a28 <Thr::processFromPID(int)+0x40>
c0025a13:	90                   	nop
c0025a14:	83 ec 0c             	sub    esp,0xc
c0025a17:	68 ec 11 04 c0       	push   0xc00411ec
c0025a1c:	e8 ab 98 00 00       	call   c002f2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025a21:	83 c4 10             	add    esp,0x10
c0025a24:	39 f8                	cmp    eax,edi
c0025a26:	74 50                	je     c0025a78 <Thr::processFromPID(int)+0x90>
c0025a28:	83 ec 0c             	sub    esp,0xc
c0025a2b:	68 ec 11 04 c0       	push   0xc00411ec
c0025a30:	e8 97 98 00 00       	call   c002f2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025a35:	c7 04 24 ec 11 04 c0 	mov    DWORD PTR [esp],0xc00411ec
c0025a3c:	89 c3                	mov    ebx,eax
c0025a3e:	e8 91 98 00 00       	call   c002f2d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025a43:	58                   	pop    eax
c0025a44:	5a                   	pop    edx
c0025a45:	53                   	push   ebx
c0025a46:	68 ec 11 04 c0       	push   0xc00411ec
c0025a4b:	e8 40 99 00 00       	call   c002f390 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025a50:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025a53:	83 c4 10             	add    esp,0x10
c0025a56:	39 30                	cmp    DWORD PTR [eax],esi
c0025a58:	75 ba                	jne    c0025a14 <Thr::processFromPID(int)+0x2c>
c0025a5a:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025a5f:	83 e8 01             	sub    eax,0x1
c0025a62:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025a67:	74 0b                	je     c0025a74 <Thr::processFromPID(int)+0x8c>
c0025a69:	8d 76 00             	lea    esi,[esi+0x0]
c0025a6c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025a6f:	5b                   	pop    ebx
c0025a70:	5e                   	pop    esi
c0025a71:	5f                   	pop    edi
c0025a72:	c3                   	ret    
c0025a73:	90                   	nop
c0025a74:	fb                   	sti    
c0025a75:	eb f5                	jmp    c0025a6c <Thr::processFromPID(int)+0x84>
c0025a77:	90                   	nop
c0025a78:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025a7d:	83 e8 01             	sub    eax,0x1
c0025a80:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025a85:	75 05                	jne    c0025a8c <Thr::processFromPID(int)+0xa4>
c0025a87:	fb                   	sti    
c0025a88:	5b                   	pop    ebx
c0025a89:	5e                   	pop    esi
c0025a8a:	5f                   	pop    edi
c0025a8b:	c3                   	ret    
c0025a8c:	5b                   	pop    ebx
c0025a8d:	31 c0                	xor    eax,eax
c0025a8f:	5e                   	pop    esi
c0025a90:	5f                   	pop    edi
c0025a91:	c3                   	ret    
c0025a92:	66 90                	xchg   ax,ax

c0025a94 <unblockTask(ThreadControlBlock*)>:
c0025a94:	53                   	push   ebx
c0025a95:	83 ec 08             	sub    esp,0x8
c0025a98:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025a9c:	fa                   	cli    
c0025a9d:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025aa2:	83 c0 01             	add    eax,0x1
c0025aa5:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025aaa:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0025aad:	85 c0                	test   eax,eax
c0025aaf:	74 67                	je     c0025b18 <unblockTask(ThreadControlBlock*)+0x84>
c0025ab1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0025ab4:	83 f8 01             	cmp    eax,0x1
c0025ab7:	74 37                	je     c0025af0 <unblockTask(ThreadControlBlock*)+0x5c>
c0025ab9:	83 ec 0c             	sub    esp,0xc
c0025abc:	68 ec 11 04 c0       	push   0xc00411ec
c0025ac1:	e8 06 98 00 00       	call   c002f2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025ac6:	83 c4 10             	add    esp,0x10
c0025ac9:	85 c0                	test   eax,eax
c0025acb:	75 1b                	jne    c0025ae8 <unblockTask(ThreadControlBlock*)+0x54>
c0025acd:	eb 5d                	jmp    c0025b2c <unblockTask(ThreadControlBlock*)+0x98>
c0025acf:	90                   	nop
c0025ad0:	83 ec 08             	sub    esp,0x8
c0025ad3:	50                   	push   eax
c0025ad4:	68 ec 11 04 c0       	push   0xc00411ec
c0025ad9:	e8 0e 9b 00 00       	call   c002f5ec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0025ade:	83 c4 10             	add    esp,0x10
c0025ae1:	85 c0                	test   eax,eax
c0025ae3:	74 47                	je     c0025b2c <unblockTask(ThreadControlBlock*)+0x98>
c0025ae5:	8d 76 00             	lea    esi,[esi+0x0]
c0025ae8:	39 c3                	cmp    ebx,eax
c0025aea:	75 e4                	jne    c0025ad0 <unblockTask(ThreadControlBlock*)+0x3c>
c0025aec:	eb 12                	jmp    c0025b00 <unblockTask(ThreadControlBlock*)+0x6c>
c0025aee:	66 90                	xchg   ax,ax
c0025af0:	83 ec 0c             	sub    esp,0xc
c0025af3:	68 7f 36 03 c0       	push   0xc003367f
c0025af8:	e8 58 39 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0025afd:	83 c4 10             	add    esp,0x10
c0025b00:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025b05:	83 e8 01             	sub    eax,0x1
c0025b08:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025b0d:	75 01                	jne    c0025b10 <unblockTask(ThreadControlBlock*)+0x7c>
c0025b0f:	fb                   	sti    
c0025b10:	83 c4 08             	add    esp,0x8
c0025b13:	5b                   	pop    ebx
c0025b14:	c3                   	ret    
c0025b15:	8d 76 00             	lea    esi,[esi+0x0]
c0025b18:	83 ec 0c             	sub    esp,0xc
c0025b1b:	68 68 36 03 c0       	push   0xc0033668
c0025b20:	e8 30 39 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0025b25:	83 c4 10             	add    esp,0x10
c0025b28:	eb d6                	jmp    c0025b00 <unblockTask(ThreadControlBlock*)+0x6c>
c0025b2a:	66 90                	xchg   ax,ax
c0025b2c:	83 ec 08             	sub    esp,0x8
c0025b2f:	53                   	push   ebx
c0025b30:	68 ec 11 04 c0       	push   0xc00411ec
c0025b35:	e8 56 98 00 00       	call   c002f390 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025b3a:	83 c4 10             	add    esp,0x10
c0025b3d:	eb c1                	jmp    c0025b00 <unblockTask(ThreadControlBlock*)+0x6c>
c0025b3f:	90                   	nop

c0025b40 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0025b40:	55                   	push   ebp
c0025b41:	57                   	push   edi
c0025b42:	56                   	push   esi
c0025b43:	53                   	push   ebx
c0025b44:	83 ec 1c             	sub    esp,0x1c
c0025b47:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0025b4b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025b4e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0025b54:	85 ed                	test   ebp,ebp
c0025b56:	7e 28                	jle    c0025b80 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0025b58:	31 f6                	xor    esi,esi
c0025b5a:	66 90                	xchg   ax,ax
c0025b5c:	83 ec 0c             	sub    esp,0xc
c0025b5f:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0025b66:	83 c6 01             	add    esi,0x1
c0025b69:	57                   	push   edi
c0025b6a:	e8 68 0a ff ff       	call   c00165d7 <free>
c0025b6f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025b72:	83 c4 10             	add    esp,0x10
c0025b75:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0025b7b:	7f df                	jg     c0025b5c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0025b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0025b80:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0025b8a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0025b8f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0025b92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0025b95:	d3 c0                	rol    eax,cl
c0025b97:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0025b9e:	21 c8                	and    eax,ecx
c0025ba0:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0025ba7:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025baa:	89 f7                	mov    edi,esi
c0025bac:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0025bb4:	0f 85 72 01 00 00    	jne    c0025d2c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0025bba:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0025bc0:	85 ed                	test   ebp,ebp
c0025bc2:	74 1c                	je     c0025be0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0025bc4:	83 ec 0c             	sub    esp,0xc
c0025bc7:	55                   	push   ebp
c0025bc8:	e8 d3 a6 ff ff       	call   c00202a0 <EnvVarContainer::~EnvVarContainer()>
c0025bcd:	59                   	pop    ecx
c0025bce:	5e                   	pop    esi
c0025bcf:	6a 0c                	push   0xc
c0025bd1:	55                   	push   ebp
c0025bd2:	e8 51 37 ff ff       	call   c0019328 <operator delete(void*, unsigned long)>
c0025bd7:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025bda:	83 c4 10             	add    esp,0x10
c0025bdd:	89 f7                	mov    edi,esi
c0025bdf:	90                   	nop
c0025be0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025be6:	85 c0                	test   eax,eax
c0025be8:	0f 84 b2 00 00 00    	je     c0025ca0 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0025bee:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0025bf1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025bf5:	31 c9                	xor    ecx,ecx
c0025bf7:	eb 17                	jmp    c0025c10 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0025bf9:	8d 76 00             	lea    esi,[esi+0x0]
c0025bfc:	83 c1 01             	add    ecx,0x1
c0025bff:	83 f9 10             	cmp    ecx,0x10
c0025c02:	0f 84 98 00 00 00    	je     c0025ca0 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0025c08:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025c0e:	66 90                	xchg   ax,ax
c0025c10:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0025c17:	d3 fa                	sar    edx,cl
c0025c19:	80 e2 01             	and    dl,0x1
c0025c1c:	74 de                	je     c0025bfc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025c1e:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0025c21:	01 d2                	add    edx,edx
c0025c23:	01 ca                	add    edx,ecx
c0025c25:	8d 14 92             	lea    edx,[edx+edx*4]
c0025c28:	01 d0                	add    eax,edx
c0025c2a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0025c30:	83 fd 07             	cmp    ebp,0x7
c0025c33:	75 c7                	jne    c0025bfc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025c35:	05 40 02 00 00       	add    eax,0x240
c0025c3a:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0025c3d:	83 fd ff             	cmp    ebp,0xffffffff
c0025c40:	0f 8c ee 00 00 00    	jl     c0025d34 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0025c46:	0f 84 ac 01 00 00    	je     c0025df8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0025c4c:	85 ed                	test   ebp,ebp
c0025c4e:	0f 84 90 01 00 00    	je     c0025de4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0025c54:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0025c56:	75 a4                	jne    c0025bfc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025c58:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025c5e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025c62:	01 d0                	add    eax,edx
c0025c64:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0025c68:	83 ec 0c             	sub    esp,0xc
c0025c6b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0025c71:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025c74:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0025c7a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0025c81:	50                   	push   eax
c0025c82:	e8 0d fe ff ff       	call   c0025a94 <unblockTask(ThreadControlBlock*)>
c0025c87:	83 c4 10             	add    esp,0x10
c0025c8a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025c8d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025c91:	89 f7                	mov    edi,esi
c0025c93:	83 c1 01             	add    ecx,0x1
c0025c96:	83 f9 10             	cmp    ecx,0x10
c0025c99:	0f 85 69 ff ff ff    	jne    c0025c08 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0025c9f:	90                   	nop
c0025ca0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0025ca6:	85 c0                	test   eax,eax
c0025ca8:	74 62                	je     c0025d0c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0025caa:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0025cb0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0025cb6:	74 54                	je     c0025d0c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0025cb8:	83 ec 0c             	sub    esp,0xc
c0025cbb:	68 ec 11 04 c0       	push   0xc00411ec
c0025cc0:	e8 07 96 00 00       	call   c002f2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025cc5:	c7 04 24 ec 11 04 c0 	mov    DWORD PTR [esp],0xc00411ec
c0025ccc:	89 c7                	mov    edi,eax
c0025cce:	e8 dd 95 00 00       	call   c002f2b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025cd3:	83 c4 10             	add    esp,0x10
c0025cd6:	84 c0                	test   al,al
c0025cd8:	0f 84 ce 00 00 00    	je     c0025dac <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0025cde:	66 90                	xchg   ax,ax
c0025ce0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025ce3:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0025ce9:	85 d2                	test   edx,edx
c0025ceb:	74 0f                	je     c0025cfc <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0025ced:	83 ec 0c             	sub    esp,0xc
c0025cf0:	8b 02                	mov    eax,DWORD PTR [edx]
c0025cf2:	52                   	push   edx
c0025cf3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0025cf6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025cf9:	83 c4 10             	add    esp,0x10
c0025cfc:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0025d06:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0025d09:	8d 76 00             	lea    esi,[esi+0x0]
c0025d0c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0025d12:	85 db                	test   ebx,ebx
c0025d14:	74 16                	je     c0025d2c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0025d16:	83 ec 0c             	sub    esp,0xc
c0025d19:	53                   	push   ebx
c0025d1a:	e8 a3 29 ff ff       	call   c00186c2 <VAS::~VAS()>
c0025d1f:	58                   	pop    eax
c0025d20:	5a                   	pop    edx
c0025d21:	6a 14                	push   0x14
c0025d23:	53                   	push   ebx
c0025d24:	e8 ff 35 ff ff       	call   c0019328 <operator delete(void*, unsigned long)>
c0025d29:	83 c4 10             	add    esp,0x10
c0025d2c:	83 c4 1c             	add    esp,0x1c
c0025d2f:	5b                   	pop    ebx
c0025d30:	5e                   	pop    esi
c0025d31:	5f                   	pop    edi
c0025d32:	5d                   	pop    ebp
c0025d33:	c3                   	ret    
c0025d34:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025d38:	83 ec 0c             	sub    esp,0xc
c0025d3b:	68 14 37 03 c0       	push   0xc0033714
c0025d40:	e8 49 aa ff ff       	call   c002078e <KePanic(char const*)>
c0025d45:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025d48:	83 c4 10             	add    esp,0x10
c0025d4b:	89 f7                	mov    edi,esi
c0025d4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025d51:	e9 a6 fe ff ff       	jmp    c0025bfc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025d56:	66 90                	xchg   ax,ax
c0025d58:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0025d5e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0025d64:	75 1e                	jne    c0025d84 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025d66:	83 ec 0c             	sub    esp,0xc
c0025d69:	68 7c 37 03 c0       	push   0xc003377c
c0025d6e:	e8 e2 36 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0025d73:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0025d7a:	e8 d9 fa ff ff       	call   c0025858 <blockTask(TaskState)>
c0025d7f:	83 c4 10             	add    esp,0x10
c0025d82:	66 90                	xchg   ax,ax
c0025d84:	83 ec 08             	sub    esp,0x8
c0025d87:	56                   	push   esi
c0025d88:	68 ec 11 04 c0       	push   0xc00411ec
c0025d8d:	e8 fe 95 00 00       	call   c002f390 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025d92:	c7 04 24 ec 11 04 c0 	mov    DWORD PTR [esp],0xc00411ec
c0025d99:	e8 2e 95 00 00       	call   c002f2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025d9e:	83 c4 10             	add    esp,0x10
c0025da1:	39 f8                	cmp    eax,edi
c0025da3:	0f 84 37 ff ff ff    	je     c0025ce0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0025da9:	8d 76 00             	lea    esi,[esi+0x0]
c0025dac:	83 ec 0c             	sub    esp,0xc
c0025daf:	68 ec 11 04 c0       	push   0xc00411ec
c0025db4:	e8 13 95 00 00       	call   c002f2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025db9:	c7 04 24 ec 11 04 c0 	mov    DWORD PTR [esp],0xc00411ec
c0025dc0:	89 c6                	mov    esi,eax
c0025dc2:	e8 0d 95 00 00       	call   c002f2d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025dc7:	83 c4 10             	add    esp,0x10
c0025dca:	39 f3                	cmp    ebx,esi
c0025dcc:	74 b6                	je     c0025d84 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025dce:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0025dd1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025dd4:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0025dda:	75 a8                	jne    c0025d84 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025ddc:	e9 77 ff ff ff       	jmp    c0025d58 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0025de1:	8d 76 00             	lea    esi,[esi+0x0]
c0025de4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025de8:	83 ec 0c             	sub    esp,0xc
c0025deb:	68 48 37 03 c0       	push   0xc0033748
c0025df0:	e9 4b ff ff ff       	jmp    c0025d40 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0025df5:	8d 76 00             	lea    esi,[esi+0x0]
c0025df8:	8b 36                	mov    esi,DWORD PTR [esi]
c0025dfa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025dfe:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0025e01:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025e04:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0025e0a:	01 d7                	add    edi,edx
c0025e0c:	89 f8                	mov    eax,edi
c0025e0e:	e9 51 fe ff ff       	jmp    c0025c64 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0025e13:	90                   	nop

c0025e14 <cleanerTaskFunction(void*)>:
c0025e14:	53                   	push   ebx
c0025e15:	83 ec 08             	sub    esp,0x8
c0025e18:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025e1d:	83 e8 01             	sub    eax,0x1
c0025e20:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025e25:	75 01                	jne    c0025e28 <cleanerTaskFunction(void*)+0x14>
c0025e27:	fb                   	sti    
c0025e28:	fa                   	cli    
c0025e29:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025e2e:	80 3d b4 11 04 c0 00 	cmp    BYTE PTR ds:0xc00411b4,0x0
c0025e35:	8d 50 01             	lea    edx,[eax+0x1]
c0025e38:	89 15 d0 11 04 c0    	mov    DWORD PTR ds:0xc00411d0,edx
c0025e3e:	0f 84 c4 00 00 00    	je     c0025f08 <cleanerTaskFunction(void*)+0xf4>
c0025e44:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025e49:	85 c0                	test   eax,eax
c0025e4b:	75 03                	jne    c0025e50 <cleanerTaskFunction(void*)+0x3c>
c0025e4d:	fb                   	sti    
c0025e4e:	66 90                	xchg   ax,ax
c0025e50:	c6 05 b4 11 04 c0 00 	mov    BYTE PTR ds:0xc00411b4,0x0
c0025e57:	fa                   	cli    
c0025e58:	8b 15 d0 11 04 c0    	mov    edx,DWORD PTR ds:0xc00411d0
c0025e5e:	8b 0d cc 11 04 c0    	mov    ecx,DWORD PTR ds:0xc00411cc
c0025e64:	83 c2 01             	add    edx,0x1
c0025e67:	83 c1 01             	add    ecx,0x1
c0025e6a:	89 15 d0 11 04 c0    	mov    DWORD PTR ds:0xc00411d0,edx
c0025e70:	89 0d cc 11 04 c0    	mov    DWORD PTR ds:0xc00411cc,ecx
c0025e76:	fa                   	cli    
c0025e77:	8b 1d d0 11 04 c0    	mov    ebx,DWORD PTR ds:0xc00411d0
c0025e7d:	83 c3 01             	add    ebx,0x1
c0025e80:	89 1d d0 11 04 c0    	mov    DWORD PTR ds:0xc00411d0,ebx
c0025e86:	eb 28                	jmp    c0025eb0 <cleanerTaskFunction(void*)+0x9c>
c0025e88:	83 ec 0c             	sub    esp,0xc
c0025e8b:	68 d4 11 04 c0       	push   0xc00411d4
c0025e90:	e8 37 94 00 00       	call   c002f2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025e95:	c7 04 24 d4 11 04 c0 	mov    DWORD PTR [esp],0xc00411d4
c0025e9c:	89 c3                	mov    ebx,eax
c0025e9e:	e8 31 94 00 00       	call   c002f2d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025ea3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025ea6:	e8 95 fc ff ff       	call   c0025b40 <cleanupTerminatedTask(ThreadControlBlock*)>
c0025eab:	83 c4 10             	add    esp,0x10
c0025eae:	66 90                	xchg   ax,ax
c0025eb0:	83 ec 0c             	sub    esp,0xc
c0025eb3:	68 d4 11 04 c0       	push   0xc00411d4
c0025eb8:	e8 f3 93 00 00       	call   c002f2b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025ebd:	83 c4 10             	add    esp,0x10
c0025ec0:	84 c0                	test   al,al
c0025ec2:	74 c4                	je     c0025e88 <cleanerTaskFunction(void*)+0x74>
c0025ec4:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025ec9:	83 e8 01             	sub    eax,0x1
c0025ecc:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025ed1:	75 01                	jne    c0025ed4 <cleanerTaskFunction(void*)+0xc0>
c0025ed3:	fb                   	sti    
c0025ed4:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0025ed9:	83 e8 01             	sub    eax,0x1
c0025edc:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0025ee1:	0f 85 31 ff ff ff    	jne    c0025e18 <cleanerTaskFunction(void*)+0x4>
c0025ee7:	a1 c8 11 04 c0       	mov    eax,ds:0xc00411c8
c0025eec:	85 c0                	test   eax,eax
c0025eee:	0f 84 24 ff ff ff    	je     c0025e18 <cleanerTaskFunction(void*)+0x4>
c0025ef4:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c0025efe:	e8 99 f8 ff ff       	call   c002579c <schedule()>
c0025f03:	e9 10 ff ff ff       	jmp    c0025e18 <cleanerTaskFunction(void*)+0x4>
c0025f08:	83 ec 0c             	sub    esp,0xc
c0025f0b:	6a 02                	push   0x2
c0025f0d:	e8 1e f9 ff ff       	call   c0025830 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025f12:	83 c4 10             	add    esp,0x10
c0025f15:	e9 36 ff ff ff       	jmp    c0025e50 <cleanerTaskFunction(void*)+0x3c>
c0025f1a:	66 90                	xchg   ax,ax

c0025f1c <terminateTask(int)>:
c0025f1c:	83 ec 14             	sub    esp,0x14
c0025f1f:	fa                   	cli    
c0025f20:	8b 15 d0 11 04 c0    	mov    edx,DWORD PTR ds:0xc00411d0
c0025f26:	8b 0d cc 11 04 c0    	mov    ecx,DWORD PTR ds:0xc00411cc
c0025f2c:	83 c2 01             	add    edx,0x1
c0025f2f:	83 c1 01             	add    ecx,0x1
c0025f32:	89 15 d0 11 04 c0    	mov    DWORD PTR ds:0xc00411d0,edx
c0025f38:	89 0d cc 11 04 c0    	mov    DWORD PTR ds:0xc00411cc,ecx
c0025f3e:	fa                   	cli    
c0025f3f:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025f44:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025f48:	83 c0 01             	add    eax,0x1
c0025f4b:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025f50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025f55:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0025f58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025f5d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025f60:	50                   	push   eax
c0025f61:	68 d4 11 04 c0       	push   0xc00411d4
c0025f66:	e8 25 94 00 00       	call   c002f390 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025f6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025f70:	83 c4 10             	add    esp,0x10
c0025f73:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0025f7a:	a1 b0 11 04 c0       	mov    eax,ds:0xc00411b0
c0025f7f:	85 c0                	test   eax,eax
c0025f81:	74 65                	je     c0025fe8 <terminateTask(int)+0xcc>
c0025f83:	83 ec 0c             	sub    esp,0xc
c0025f86:	c6 05 b4 11 04 c0 01 	mov    BYTE PTR ds:0xc00411b4,0x1
c0025f8d:	50                   	push   eax
c0025f8e:	e8 01 fb ff ff       	call   c0025a94 <unblockTask(ThreadControlBlock*)>
c0025f93:	83 c4 10             	add    esp,0x10
c0025f96:	66 90                	xchg   ax,ax
c0025f98:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025f9d:	83 e8 01             	sub    eax,0x1
c0025fa0:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025fa5:	75 01                	jne    c0025fa8 <terminateTask(int)+0x8c>
c0025fa7:	fb                   	sti    
c0025fa8:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0025fad:	83 e8 01             	sub    eax,0x1
c0025fb0:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0025fb5:	75 09                	jne    c0025fc0 <terminateTask(int)+0xa4>
c0025fb7:	83 3d c8 11 04 c0 00 	cmp    DWORD PTR ds:0xc00411c8,0x0
c0025fbe:	75 3c                	jne    c0025ffc <terminateTask(int)+0xe0>
c0025fc0:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025fc5:	83 e8 01             	sub    eax,0x1
c0025fc8:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025fcd:	75 01                	jne    c0025fd0 <terminateTask(int)+0xb4>
c0025fcf:	fb                   	sti    
c0025fd0:	fa                   	cli    
c0025fd1:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025fd6:	83 c0 01             	add    eax,0x1
c0025fd9:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025fde:	66 90                	xchg   ax,ax
c0025fe0:	e8 b7 f7 ff ff       	call   c002579c <schedule()>
c0025fe5:	eb d9                	jmp    c0025fc0 <terminateTask(int)+0xa4>
c0025fe7:	90                   	nop
c0025fe8:	83 ec 0c             	sub    esp,0xc
c0025feb:	68 96 36 03 c0       	push   0xc0033696
c0025ff0:	e8 60 34 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0025ff5:	83 c4 10             	add    esp,0x10
c0025ff8:	eb 9e                	jmp    c0025f98 <terminateTask(int)+0x7c>
c0025ffa:	66 90                	xchg   ax,ax
c0025ffc:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c0026006:	eb d8                	jmp    c0025fe0 <terminateTask(int)+0xc4>

c0026008 <Thr::terminateFromIRQ(int)>:
c0026008:	83 ec 18             	sub    esp,0x18
c002600b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002600f:	50                   	push   eax
c0026010:	e8 07 ff ff ff       	call   c0025f1c <terminateTask(int)>
c0026015:	8d 76 00             	lea    esi,[esi+0x0]

c0026018 <__static_initialization_and_destruction_0(int, int)>:
c0026018:	83 ec 0c             	sub    esp,0xc
c002601b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0026020:	0f 85 8e 00 00 00    	jne    c00260b4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0026026:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c002602e:	0f 85 80 00 00 00    	jne    c00260b4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0026034:	83 ec 0c             	sub    esp,0xc
c0026037:	68 ec 11 04 c0       	push   0xc00411ec
c002603c:	e8 03 96 00 00       	call   c002f644 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0026041:	83 c4 10             	add    esp,0x10
c0026044:	83 ec 04             	sub    esp,0x4
c0026047:	68 d8 43 03 c0       	push   0xc00343d8
c002604c:	68 ec 11 04 c0       	push   0xc00411ec
c0026051:	68 f4 f5 02 c0       	push   0xc002f5f4
c0026056:	e8 7d 32 ff ff       	call   c00192d8 <__cxa_atexit>
c002605b:	83 c4 10             	add    esp,0x10
c002605e:	83 ec 0c             	sub    esp,0xc
c0026061:	68 e0 11 04 c0       	push   0xc00411e0
c0026066:	e8 d9 95 00 00       	call   c002f644 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c002606b:	83 c4 10             	add    esp,0x10
c002606e:	83 ec 04             	sub    esp,0x4
c0026071:	68 d8 43 03 c0       	push   0xc00343d8
c0026076:	68 e0 11 04 c0       	push   0xc00411e0
c002607b:	68 f4 f5 02 c0       	push   0xc002f5f4
c0026080:	e8 53 32 ff ff       	call   c00192d8 <__cxa_atexit>
c0026085:	83 c4 10             	add    esp,0x10
c0026088:	83 ec 0c             	sub    esp,0xc
c002608b:	68 d4 11 04 c0       	push   0xc00411d4
c0026090:	e8 af 95 00 00       	call   c002f644 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0026095:	83 c4 10             	add    esp,0x10
c0026098:	83 ec 04             	sub    esp,0x4
c002609b:	68 d8 43 03 c0       	push   0xc00343d8
c00260a0:	68 d4 11 04 c0       	push   0xc00411d4
c00260a5:	68 f4 f5 02 c0       	push   0xc002f5f4
c00260aa:	e8 29 32 ff ff       	call   c00192d8 <__cxa_atexit>
c00260af:	83 c4 10             	add    esp,0x10
c00260b2:	66 90                	xchg   ax,ax
c00260b4:	90                   	nop
c00260b5:	83 c4 0c             	add    esp,0xc
c00260b8:	c3                   	ret    
c00260b9:	8d 76 00             	lea    esi,[esi+0x0]

c00260bc <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00260bc:	83 ec 0c             	sub    esp,0xc
c00260bf:	83 ec 08             	sub    esp,0x8
c00260c2:	68 ff ff 00 00       	push   0xffff
c00260c7:	6a 01                	push   0x1
c00260c9:	e8 4a ff ff ff       	call   c0026018 <__static_initialization_and_destruction_0(int, int)>
c00260ce:	83 c4 10             	add    esp,0x10
c00260d1:	83 c4 0c             	add    esp,0xc
c00260d4:	c3                   	ret    

c00260d5 <Vm::inbv(unsigned short)>:
c00260d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00260d9:	66 81 fa fe fe       	cmp    dx,0xfefe
c00260de:	75 06                	jne    c00260e6 <Vm::inbv(unsigned short)+0x11>
c00260e0:	a0 30 12 04 c0       	mov    al,ds:0xc0041230
c00260e5:	c3                   	ret    
c00260e6:	ec                   	in     al,dx
c00260e7:	c3                   	ret    

c00260e8 <Vm::outbv(unsigned short, unsigned char)>:
c00260e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00260ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00260f0:	66 81 fa fe fe       	cmp    dx,0xfefe
c00260f5:	75 25                	jne    c002611c <Vm::outbv(unsigned short, unsigned char)+0x34>
c00260f7:	8b 0d 30 12 04 c0    	mov    ecx,DWORD PTR ds:0xc0041230
c00260fd:	8d 51 01             	lea    edx,[ecx+0x1]
c0026100:	88 81 40 12 04 c0    	mov    BYTE PTR [ecx-0x3ffbedc0],al
c0026106:	89 15 30 12 04 c0    	mov    DWORD PTR ds:0xc0041230,edx
c002610c:	83 fa 20             	cmp    edx,0x20
c002610f:	75 0c                	jne    c002611d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0026111:	c7 05 30 12 04 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0041230,0x1f
c002611b:	c3                   	ret    
c002611c:	ee                   	out    dx,al
c002611d:	c3                   	ret    

c002611e <Vm::realToLinear(unsigned short, unsigned short)>:
c002611e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026123:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026128:	c1 e0 04             	shl    eax,0x4
c002612b:	01 d0                	add    eax,edx
c002612d:	c3                   	ret    

c002612e <Vm::getSegment(unsigned int)>:
c002612e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026132:	c1 e8 10             	shr    eax,0x10
c0026135:	c3                   	ret    

c0026136 <Vm::getOffset(unsigned int)>:
c0026136:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002613a:	c3                   	ret    

c002613b <Vm::mainloop2()>:
c002613b:	83 ec 18             	sub    esp,0x18
c002613e:	fa                   	cli    
c002613f:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c0026145:	6a 02                	push   0x2
c0026147:	c6 05 29 12 04 c0 01 	mov    BYTE PTR ds:0xc0041229,0x1
c002614e:	e8 dd f6 ff ff       	call   c0025830 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0026153:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026158:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c002615c:	52                   	push   edx
c002615d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0026161:	52                   	push   edx
c0026162:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0026166:	52                   	push   edx
c0026167:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c002616b:	50                   	push   eax
c002616c:	e8 9e a0 fd ff       	call   c000020f <goToVM86>
c0026171:	83 c4 2c             	add    esp,0x2c
c0026174:	c3                   	ret    

c0026175 <Vm::mainVm8086Loop(void*)>:
c0026175:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002617a:	48                   	dec    eax
c002617b:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0026180:	75 01                	jne    c0026183 <Vm::mainVm8086Loop(void*)+0xe>
c0026182:	fb                   	sti    
c0026183:	eb b6                	jmp    c002613b <Vm::mainloop2()>

c0026185 <Vm::mainloop3(unsigned long)>:
c0026185:	83 ec 18             	sub    esp,0x18
c0026188:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002618c:	fa                   	cli    
c002618d:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c0026193:	6a 02                	push   0x2
c0026195:	c6 05 28 12 04 c0 01 	mov    BYTE PTR ds:0xc0041228,0x1
c002619c:	a3 24 12 04 c0       	mov    ds:0xc0041224,eax
c00261a1:	e8 8a f6 ff ff       	call   c0025830 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00261a6:	83 c4 1c             	add    esp,0x1c
c00261a9:	eb 90                	jmp    c002613b <Vm::mainloop2()>

c00261ab <Vm::initialise8086()>:
c00261ab:	83 ec 0c             	sub    esp,0xc
c00261ae:	68 80 00 00 00       	push   0x80
c00261b3:	6a 00                	push   0x0
c00261b5:	68 75 61 02 c0       	push   0xc0026175
c00261ba:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c00261c0:	e8 87 f3 ff ff       	call   c002554c <Process::createThread(void (*)(void*), void*, int)>
c00261c5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00261cc:	a3 2c 12 04 c0       	mov    ds:0xc004122c,eax
c00261d1:	68 10 01 00 00       	push   0x110
c00261d6:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c00261db:	6a 00                	push   0x0
c00261dd:	6a 00                	push   0x0
c00261df:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00261e5:	e8 40 28 ff ff       	call   c0018a2a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00261ea:	83 c4 2c             	add    esp,0x2c
c00261ed:	c3                   	ret    

c00261ee <Vm::resetConventionalMemory8086()>:
c00261ee:	c3                   	ret    

c00261ef <Vm::finish8086()>:
c00261ef:	53                   	push   ebx
c00261f0:	83 ec 08             	sub    esp,0x8
c00261f3:	fa                   	cli    
c00261f4:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c00261fa:	80 3d 28 12 04 c0 00 	cmp    BYTE PTR ds:0xc0041228,0x0
c0026201:	75 15                	jne    c0026218 <Vm::finish8086()+0x29>
c0026203:	e8 94 f5 ff ff       	call   c002579c <schedule()>
c0026208:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002620d:	48                   	dec    eax
c002620e:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0026213:	75 de                	jne    c00261f3 <Vm::finish8086()+0x4>
c0026215:	fb                   	sti    
c0026216:	eb db                	jmp    c00261f3 <Vm::finish8086()+0x4>
c0026218:	83 ec 0c             	sub    esp,0xc
c002621b:	8b 1d 24 12 04 c0    	mov    ebx,DWORD PTR ds:0xc0041224
c0026221:	ff 35 2c 12 04 c0    	push   DWORD PTR ds:0xc004122c
c0026227:	c6 05 28 12 04 c0 00 	mov    BYTE PTR ds:0xc0041228,0x0
c002622e:	e8 61 f8 ff ff       	call   c0025a94 <unblockTask(ThreadControlBlock*)>
c0026233:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0026238:	83 c4 10             	add    esp,0x10
c002623b:	8d 50 ff             	lea    edx,[eax-0x1]
c002623e:	89 15 d0 11 04 c0    	mov    DWORD PTR ds:0xc00411d0,edx
c0026244:	85 d2                	test   edx,edx
c0026246:	75 01                	jne    c0026249 <Vm::finish8086()+0x5a>
c0026248:	fb                   	sti    
c0026249:	89 d8                	mov    eax,ebx
c002624b:	83 c4 08             	add    esp,0x8
c002624e:	5b                   	pop    ebx
c002624f:	c3                   	ret    

c0026250 <Vm::getOutput8086(unsigned char*)>:
c0026250:	57                   	push   edi
c0026251:	8b 0d 30 12 04 c0    	mov    ecx,DWORD PTR ds:0xc0041230
c0026257:	56                   	push   esi
c0026258:	be 40 12 04 c0       	mov    esi,0xc0041240
c002625d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026261:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0026263:	a1 30 12 04 c0       	mov    eax,ds:0xc0041230
c0026268:	5e                   	pop    esi
c0026269:	c7 05 30 12 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0041230,0x0
c0026273:	5f                   	pop    edi
c0026274:	c3                   	ret    

c0026275 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0026275:	55                   	push   ebp
c0026276:	57                   	push   edi
c0026277:	56                   	push   esi
c0026278:	53                   	push   ebx
c0026279:	83 ec 2c             	sub    esp,0x2c
c002627c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0026280:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0026284:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0026288:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c002628c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026290:	80 3d 20 12 04 c0 00 	cmp    BYTE PTR ds:0xc0041220,0x0
c0026297:	75 5d                	jne    c00262f6 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0026299:	83 ec 0c             	sub    esp,0xc
c002629c:	68 14 01 00 00       	push   0x114
c00262a1:	e8 21 03 ff ff       	call   c00165c7 <malloc>
c00262a6:	83 c4 0c             	add    esp,0xc
c00262a9:	89 c7                	mov    edi,eax
c00262ab:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c00262b1:	68 a4 37 03 c0       	push   0xc00337a4
c00262b6:	50                   	push   eax
c00262b7:	e8 a0 43 ff ff       	call   c001a65c <File::File(char const*, Process*)>
c00262bc:	58                   	pop    eax
c00262bd:	5a                   	pop    edx
c00262be:	6a 12                	push   0x12
c00262c0:	57                   	push   edi
c00262c1:	e8 b4 43 ff ff       	call   c001a67a <File::open(FileOpenMode)>
c00262c6:	59                   	pop    ecx
c00262c7:	8b 07                	mov    eax,DWORD PTR [edi]
c00262c9:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00262cd:	51                   	push   ecx
c00262ce:	6a 00                	push   0x0
c00262d0:	6a 00                	push   0x0
c00262d2:	68 00 00 11 00       	push   0x110000
c00262d7:	57                   	push   edi
c00262d8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00262db:	83 c4 14             	add    esp,0x14
c00262de:	57                   	push   edi
c00262df:	e8 f4 43 ff ff       	call   c001a6d8 <File::close()>
c00262e4:	8b 07                	mov    eax,DWORD PTR [edi]
c00262e6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00262e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00262ec:	c6 05 20 12 04 c0 01 	mov    BYTE PTR ds:0xc0041220,0x1
c00262f3:	83 c4 10             	add    esp,0x10
c00262f6:	fa                   	cli    
c00262f7:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c00262fd:	80 3d 29 12 04 c0 00 	cmp    BYTE PTR ds:0xc0041229,0x0
c0026304:	75 15                	jne    c002631b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa6>
c0026306:	e8 91 f4 ff ff       	call   c002579c <schedule()>
c002630b:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0026310:	48                   	dec    eax
c0026311:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0026316:	75 de                	jne    c00262f6 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0026318:	fb                   	sti    
c0026319:	eb db                	jmp    c00262f6 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c002631b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002631f:	a1 2c 12 04 c0       	mov    eax,ds:0xc004122c
c0026324:	c7 05 30 12 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0041230,0x0
c002632e:	66 89 70 55          	mov    WORD PTR [eax+0x55],si
c0026332:	66 89 58 57          	mov    WORD PTR [eax+0x57],bx
c0026336:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c002633a:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c002633e:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0026342:	0f b7 f6             	movzx  esi,si
c0026345:	0f b7 db             	movzx  ebx,bx
c0026348:	50                   	push   eax
c0026349:	6a 20                	push   0x20
c002634b:	6a 00                	push   0x0
c002634d:	68 40 12 04 c0       	push   0xc0041240
c0026352:	e8 99 a1 fd ff       	call   c00004f0 <memset>
c0026357:	5a                   	pop    edx
c0026358:	59                   	pop    ecx
c0026359:	56                   	push   esi
c002635a:	53                   	push   ebx
c002635b:	e8 be fd ff ff       	call   c002611e <Vm::realToLinear(unsigned short, unsigned short)>
c0026360:	83 c4 10             	add    esp,0x10
c0026363:	89 c7                	mov    edi,eax
c0026365:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0026369:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c002636d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002636f:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0026374:	c6 05 29 12 04 c0 00 	mov    BYTE PTR ds:0xc0041229,0x0
c002637b:	48                   	dec    eax
c002637c:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0026381:	75 01                	jne    c0026384 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x10f>
c0026383:	fb                   	sti    
c0026384:	83 ec 0c             	sub    esp,0xc
c0026387:	ff 35 2c 12 04 c0    	push   DWORD PTR ds:0xc004122c
c002638d:	e8 02 f7 ff ff       	call   c0025a94 <unblockTask(ThreadControlBlock*)>
c0026392:	83 c4 3c             	add    esp,0x3c
c0026395:	b0 01                	mov    al,0x1
c0026397:	5b                   	pop    ebx
c0026398:	5e                   	pop    esi
c0026399:	5f                   	pop    edi
c002639a:	5d                   	pop    ebp
c002639b:	c3                   	ret    

c002639c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c002639c:	55                   	push   ebp
c002639d:	57                   	push   edi
c002639e:	56                   	push   esi
c002639f:	53                   	push   ebx
c00263a0:	83 ec 2c             	sub    esp,0x2c
c00263a3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00263a7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00263ab:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00263af:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00263b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00263b7:	80 3d 20 12 04 c0 00 	cmp    BYTE PTR ds:0xc0041220,0x0
c00263be:	75 5d                	jne    c002641d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c00263c0:	83 ec 0c             	sub    esp,0xc
c00263c3:	68 14 01 00 00       	push   0x114
c00263c8:	e8 fa 01 ff ff       	call   c00165c7 <malloc>
c00263cd:	83 c4 0c             	add    esp,0xc
c00263d0:	89 c6                	mov    esi,eax
c00263d2:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c00263d8:	68 a4 37 03 c0       	push   0xc00337a4
c00263dd:	50                   	push   eax
c00263de:	e8 79 42 ff ff       	call   c001a65c <File::File(char const*, Process*)>
c00263e3:	58                   	pop    eax
c00263e4:	5a                   	pop    edx
c00263e5:	6a 12                	push   0x12
c00263e7:	56                   	push   esi
c00263e8:	e8 8d 42 ff ff       	call   c001a67a <File::open(FileOpenMode)>
c00263ed:	59                   	pop    ecx
c00263ee:	8b 06                	mov    eax,DWORD PTR [esi]
c00263f0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00263f4:	52                   	push   edx
c00263f5:	6a 00                	push   0x0
c00263f7:	6a 00                	push   0x0
c00263f9:	68 00 00 11 00       	push   0x110000
c00263fe:	56                   	push   esi
c00263ff:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0026402:	83 c4 14             	add    esp,0x14
c0026405:	56                   	push   esi
c0026406:	e8 cd 42 ff ff       	call   c001a6d8 <File::close()>
c002640b:	8b 06                	mov    eax,DWORD PTR [esi]
c002640d:	89 34 24             	mov    DWORD PTR [esp],esi
c0026410:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0026413:	c6 05 20 12 04 c0 01 	mov    BYTE PTR ds:0xc0041220,0x1
c002641a:	83 c4 10             	add    esp,0x10
c002641d:	50                   	push   eax
c002641e:	50                   	push   eax
c002641f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0026423:	68 bf 37 03 c0       	push   0xc00337bf
c0026428:	e8 28 30 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c002642d:	83 c4 10             	add    esp,0x10
c0026430:	fa                   	cli    
c0026431:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c0026437:	0f b6 35 29 12 04 c0 	movzx  esi,BYTE PTR ds:0xc0041229
c002643e:	89 f0                	mov    eax,esi
c0026440:	84 c0                	test   al,al
c0026442:	75 15                	jne    c0026459 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xbd>
c0026444:	e8 53 f3 ff ff       	call   c002579c <schedule()>
c0026449:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002644e:	48                   	dec    eax
c002644f:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0026454:	75 da                	jne    c0026430 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0026456:	fb                   	sti    
c0026457:	eb d7                	jmp    c0026430 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0026459:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002645d:	a1 2c 12 04 c0       	mov    eax,ds:0xc004122c
c0026462:	c7 05 30 12 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0041230,0x0
c002646c:	66 89 48 5b          	mov    WORD PTR [eax+0x5b],cx
c0026470:	66 89 58 59          	mov    WORD PTR [eax+0x59],bx
c0026474:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0026478:	66 89 68 57          	mov    WORD PTR [eax+0x57],bp
c002647c:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0026480:	50                   	push   eax
c0026481:	6a 20                	push   0x20
c0026483:	6a 00                	push   0x0
c0026485:	68 40 12 04 c0       	push   0xc0041240
c002648a:	e8 61 a0 fd ff       	call   c00004f0 <memset>
c002648f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0026496:	e8 2c 01 ff ff       	call   c00165c7 <malloc>
c002649b:	83 c4 0c             	add    esp,0xc
c002649e:	89 c3                	mov    ebx,eax
c00264a0:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c00264a6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00264aa:	50                   	push   eax
c00264ab:	e8 ac 41 ff ff       	call   c001a65c <File::File(char const*, Process*)>
c00264b0:	83 c4 10             	add    esp,0x10
c00264b3:	85 db                	test   ebx,ebx
c00264b5:	75 0a                	jne    c00264c1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c00264b7:	83 ec 0c             	sub    esp,0xc
c00264ba:	68 e1 37 03 c0       	push   0xc00337e1
c00264bf:	eb 2b                	jmp    c00264ec <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x150>
c00264c1:	50                   	push   eax
c00264c2:	8d 44 24 17          	lea    eax,[esp+0x17]
c00264c6:	50                   	push   eax
c00264c7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00264cb:	50                   	push   eax
c00264cc:	53                   	push   ebx
c00264cd:	e8 aa 44 ff ff       	call   c001a97c <File::stat(unsigned long long*, bool*)>
c00264d2:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00264d6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00264da:	83 c4 10             	add    esp,0x10
c00264dd:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00264e2:	74 27                	je     c002650b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16f>
c00264e4:	83 ec 0c             	sub    esp,0xc
c00264e7:	68 f5 37 03 c0       	push   0xc00337f5
c00264ec:	e8 9d a2 ff ff       	call   c002078e <KePanic(char const*)>
c00264f1:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00264f6:	83 c4 10             	add    esp,0x10
c00264f9:	48                   	dec    eax
c00264fa:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00264ff:	85 c0                	test   eax,eax
c0026501:	75 01                	jne    c0026504 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x168>
c0026503:	fb                   	sti    
c0026504:	31 f6                	xor    esi,esi
c0026506:	e9 8f 00 00 00       	jmp    c002659a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1fe>
c002650b:	51                   	push   ecx
c002650c:	51                   	push   ecx
c002650d:	6a 01                	push   0x1
c002650f:	53                   	push   ebx
c0026510:	e8 65 41 ff ff       	call   c001a67a <File::open(FileOpenMode)>
c0026515:	83 c4 10             	add    esp,0x10
c0026518:	85 c0                	test   eax,eax
c002651a:	74 26                	je     c0026542 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1a6>
c002651c:	83 ec 0c             	sub    esp,0xc
c002651f:	68 0e 38 03 c0       	push   0xc003380e
c0026524:	e8 65 a2 ff ff       	call   c002078e <KePanic(char const*)>
c0026529:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002652e:	83 c4 10             	add    esp,0x10
c0026531:	48                   	dec    eax
c0026532:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0026537:	85 c0                	test   eax,eax
c0026539:	75 c9                	jne    c0026504 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x168>
c002653b:	fb                   	sti    
c002653c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0026540:	eb 58                	jmp    c002659a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1fe>
c0026542:	0f b7 ff             	movzx  edi,di
c0026545:	50                   	push   eax
c0026546:	50                   	push   eax
c0026547:	0f b7 c5             	movzx  eax,bp
c002654a:	57                   	push   edi
c002654b:	50                   	push   eax
c002654c:	e8 cd fb ff ff       	call   c002611e <Vm::realToLinear(unsigned short, unsigned short)>
c0026551:	5a                   	pop    edx
c0026552:	8b 13                	mov    edx,DWORD PTR [ebx]
c0026554:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0026558:	51                   	push   ecx
c0026559:	50                   	push   eax
c002655a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002655e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0026562:	53                   	push   ebx
c0026563:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0026566:	83 c4 14             	add    esp,0x14
c0026569:	53                   	push   ebx
c002656a:	e8 69 41 ff ff       	call   c001a6d8 <File::close()>
c002656f:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0026574:	83 c4 10             	add    esp,0x10
c0026577:	48                   	dec    eax
c0026578:	c6 05 29 12 04 c0 00 	mov    BYTE PTR ds:0xc0041229,0x0
c002657f:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0026584:	85 c0                	test   eax,eax
c0026586:	75 01                	jne    c0026589 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ed>
c0026588:	fb                   	sti    
c0026589:	83 ec 0c             	sub    esp,0xc
c002658c:	ff 35 2c 12 04 c0    	push   DWORD PTR ds:0xc004122c
c0026592:	e8 fd f4 ff ff       	call   c0025a94 <unblockTask(ThreadControlBlock*)>
c0026597:	83 c4 10             	add    esp,0x10
c002659a:	83 c4 2c             	add    esp,0x2c
c002659d:	89 f0                	mov    eax,esi
c002659f:	5b                   	pop    ebx
c00265a0:	5e                   	pop    esi
c00265a1:	5f                   	pop    edi
c00265a2:	5d                   	pop    ebp
c00265a3:	c3                   	ret    

c00265a4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00265a4:	57                   	push   edi
c00265a5:	56                   	push   esi
c00265a6:	53                   	push   ebx
c00265a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00265ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00265af:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00265b3:	83 e8 06             	sub    eax,0x6
c00265b6:	0f b7 c0             	movzx  eax,ax
c00265b9:	50                   	push   eax
c00265ba:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00265bf:	50                   	push   eax
c00265c0:	e8 59 fb ff ff       	call   c002611e <Vm::realToLinear(unsigned short, unsigned short)>
c00265c5:	5a                   	pop    edx
c00265c6:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c00265c9:	59                   	pop    ecx
c00265ca:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00265cd:	8d 51 fa             	lea    edx,[ecx-0x6]
c00265d0:	81 e2 ff ff 00 00    	and    edx,0xffff
c00265d6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00265d9:	8d 56 02             	lea    edx,[esi+0x2]
c00265dc:	66 89 10             	mov    WORD PTR [eax],dx
c00265df:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c00265e3:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00265e7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00265ea:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c00265ee:	0f b6 f1             	movzx  esi,cl
c00265f1:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00265f5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00265fb:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c00265ff:	0f b6 d5             	movzx  edx,ch
c0026602:	74 0a                	je     c002660e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0026604:	c1 e2 08             	shl    edx,0x8
c0026607:	09 f2                	or     edx,esi
c0026609:	80 ce 02             	or     dh,0x2
c002660c:	eb 08                	jmp    c0026616 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c002660e:	c1 e2 08             	shl    edx,0x8
c0026611:	09 f2                	or     edx,esi
c0026613:	80 e6 fd             	and    dh,0xfd
c0026616:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c002661a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002661f:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0026623:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c002662b:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c002662e:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0026636:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0026639:	5b                   	pop    ebx
c002663a:	5e                   	pop    esi
c002663b:	5f                   	pop    edi
c002663c:	c3                   	ret    

c002663d <Vm::readByteFromReal(unsigned short, unsigned short)>:
c002663d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026642:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026647:	c1 e0 04             	shl    eax,0x4
c002664a:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c002664d:	c3                   	ret    

c002664e <Vm::readWordFromReal(unsigned short, unsigned short)>:
c002664e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026653:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026658:	c1 e0 04             	shl    eax,0x4
c002665b:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c002665f:	c3                   	ret    

c0026660 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0026660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026665:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c002666a:	c1 e0 04             	shl    eax,0x4
c002666d:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0026670:	c3                   	ret    

c0026671 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0026671:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026676:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c002667b:	c1 e0 04             	shl    eax,0x4
c002667e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0026682:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0026685:	c3                   	ret    

c0026686 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0026686:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c002668b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026690:	c1 e0 04             	shl    eax,0x4
c0026693:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0026697:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c002669b:	c3                   	ret    

c002669c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c002669c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00266a1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00266a6:	c1 e0 04             	shl    eax,0x4
c00266a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00266ad:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00266b0:	c3                   	ret    

c00266b1 <Vm::faultHandler(regs*)>:
c00266b1:	55                   	push   ebp
c00266b2:	57                   	push   edi
c00266b3:	56                   	push   esi
c00266b4:	53                   	push   ebx
c00266b5:	83 ec 2c             	sub    esp,0x2c
c00266b8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00266bc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00266bf:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00266c3:	0f b7 f8             	movzx  edi,ax
c00266c6:	52                   	push   edx
c00266c7:	0f b7 c0             	movzx  eax,ax
c00266ca:	50                   	push   eax
c00266cb:	e8 4e fa ff ff       	call   c002611e <Vm::realToLinear(unsigned short, unsigned short)>
c00266d0:	5a                   	pop    edx
c00266d1:	59                   	pop    ecx
c00266d2:	89 c1                	mov    ecx,eax
c00266d4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00266d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00266db:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00266e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00266e4:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00266e7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00266eb:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00266f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00266f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00266f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00266fc:	e8 1d fa ff ff       	call   c002611e <Vm::realToLinear(unsigned short, unsigned short)>
c0026701:	5e                   	pop    esi
c0026702:	be 06 00 00 00       	mov    esi,0x6
c0026707:	5d                   	pop    ebp
c0026708:	31 ed                	xor    ebp,ebp
c002670a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002670f:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0026712:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0026718:	0f 84 74 02 00 00    	je     c0026992 <Vm::faultHandler(regs*)+0x2e1>
c002671e:	0f 87 94 00 00 00    	ja     c00267b8 <Vm::faultHandler(regs*)+0x107>
c0026724:	83 fa 66             	cmp    edx,0x66
c0026727:	0f 84 e2 01 00 00    	je     c002690f <Vm::faultHandler(regs*)+0x25e>
c002672d:	77 47                	ja     c0026776 <Vm::faultHandler(regs*)+0xc5>
c002672f:	83 fa 36             	cmp    edx,0x36
c0026732:	0f 84 ca 01 00 00    	je     c0026902 <Vm::faultHandler(regs*)+0x251>
c0026738:	77 1a                	ja     c0026754 <Vm::faultHandler(regs*)+0xa3>
c002673a:	83 fa 26             	cmp    edx,0x26
c002673d:	0f 84 98 01 00 00    	je     c00268db <Vm::faultHandler(regs*)+0x22a>
c0026743:	83 fa 2e             	cmp    edx,0x2e
c0026746:	0f 85 21 06 00 00    	jne    c0026d6d <Vm::faultHandler(regs*)+0x6bc>
c002674c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002674f:	31 f6                	xor    esi,esi
c0026751:	41                   	inc    ecx
c0026752:	eb bb                	jmp    c002670f <Vm::faultHandler(regs*)+0x5e>
c0026754:	83 fa 64             	cmp    edx,0x64
c0026757:	0f 84 8b 01 00 00    	je     c00268e8 <Vm::faultHandler(regs*)+0x237>
c002675d:	0f 87 92 01 00 00    	ja     c00268f5 <Vm::faultHandler(regs*)+0x244>
c0026763:	83 fa 3e             	cmp    edx,0x3e
c0026766:	0f 85 01 06 00 00    	jne    c0026d6d <Vm::faultHandler(regs*)+0x6bc>
c002676c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002676f:	be 01 00 00 00       	mov    esi,0x1
c0026774:	eb db                	jmp    c0026751 <Vm::faultHandler(regs*)+0xa0>
c0026776:	83 fa 6d             	cmp    edx,0x6d
c0026779:	0f 84 34 03 00 00    	je     c0026ab3 <Vm::faultHandler(regs*)+0x402>
c002677f:	77 17                	ja     c0026798 <Vm::faultHandler(regs*)+0xe7>
c0026781:	83 fa 67             	cmp    edx,0x67
c0026784:	0f 84 92 01 00 00    	je     c002691c <Vm::faultHandler(regs*)+0x26b>
c002678a:	83 fa 6c             	cmp    edx,0x6c
c002678d:	0f 84 b1 02 00 00    	je     c0026a44 <Vm::faultHandler(regs*)+0x393>
c0026793:	e9 d5 05 00 00       	jmp    c0026d6d <Vm::faultHandler(regs*)+0x6bc>
c0026798:	83 fa 6f             	cmp    edx,0x6f
c002679b:	0f 84 3d 04 00 00    	je     c0026bde <Vm::faultHandler(regs*)+0x52d>
c00267a1:	0f 82 9f 03 00 00    	jb     c0026b46 <Vm::faultHandler(regs*)+0x495>
c00267a7:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00267ad:	0f 84 76 01 00 00    	je     c0026929 <Vm::faultHandler(regs*)+0x278>
c00267b3:	e9 b5 05 00 00       	jmp    c0026d6d <Vm::faultHandler(regs*)+0x6bc>
c00267b8:	81 fa ec 00 00 00    	cmp    edx,0xec
c00267be:	0f 84 51 05 00 00    	je     c0026d15 <Vm::faultHandler(regs*)+0x664>
c00267c4:	0f 87 a9 00 00 00    	ja     c0026873 <Vm::faultHandler(regs*)+0x1c2>
c00267ca:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00267d0:	0f 84 d0 04 00 00    	je     c0026ca6 <Vm::faultHandler(regs*)+0x5f5>
c00267d6:	77 78                	ja     c0026850 <Vm::faultHandler(regs*)+0x19f>
c00267d8:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00267de:	0f 84 0e 02 00 00    	je     c00269f2 <Vm::faultHandler(regs*)+0x341>
c00267e4:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00267ea:	0f 85 7d 05 00 00    	jne    c0026d6d <Vm::faultHandler(regs*)+0x6bc>
c00267f0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00267f4:	89 d1                	mov    ecx,edx
c00267f6:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00267f9:	c1 e1 08             	shl    ecx,0x8
c00267fc:	09 ca                	or     edx,ecx
c00267fe:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0026801:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0026805:	89 d1                	mov    ecx,edx
c0026807:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c002680b:	c1 e1 08             	shl    ecx,0x8
c002680e:	09 ca                	or     edx,ecx
c0026810:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0026813:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0026817:	89 d1                	mov    ecx,edx
c0026819:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c002681d:	c1 e1 08             	shl    ecx,0x8
c0026820:	09 ca                	or     edx,ecx
c0026822:	81 ca 00 02 02 00    	or     edx,0x20200
c0026828:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c002682b:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c002682f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0026835:	d1 e8                	shr    eax,1
c0026837:	83 e0 01             	and    eax,0x1
c002683a:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c002683d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0026840:	83 c0 06             	add    eax,0x6
c0026843:	25 ff ff 00 00       	and    eax,0xffff
c0026848:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c002684b:	e9 19 05 00 00       	jmp    c0026d69 <Vm::faultHandler(regs*)+0x6b8>
c0026850:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0026856:	0f 84 8f 04 00 00    	je     c0026ceb <Vm::faultHandler(regs*)+0x63a>
c002685c:	0f 82 60 04 00 00    	jb     c0026cc2 <Vm::faultHandler(regs*)+0x611>
c0026862:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0026868:	0f 84 94 04 00 00    	je     c0026d02 <Vm::faultHandler(regs*)+0x651>
c002686e:	e9 fa 04 00 00       	jmp    c0026d6d <Vm::faultHandler(regs*)+0x6bc>
c0026873:	81 fa ef 00 00 00    	cmp    edx,0xef
c0026879:	0f 84 d7 04 00 00    	je     c0026d56 <Vm::faultHandler(regs*)+0x6a5>
c002687f:	77 2e                	ja     c00268af <Vm::faultHandler(regs*)+0x1fe>
c0026881:	81 fa ed 00 00 00    	cmp    edx,0xed
c0026887:	0f 84 a4 04 00 00    	je     c0026d31 <Vm::faultHandler(regs*)+0x680>
c002688d:	81 fa ee 00 00 00    	cmp    edx,0xee
c0026893:	0f 85 d4 04 00 00    	jne    c0026d6d <Vm::faultHandler(regs*)+0x6bc>
c0026899:	50                   	push   eax
c002689a:	50                   	push   eax
c002689b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c002689f:	50                   	push   eax
c00268a0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00268a4:	50                   	push   eax
c00268a5:	e8 3e f8 ff ff       	call   c00260e8 <Vm::outbv(unsigned short, unsigned char)>
c00268aa:	e9 9f 04 00 00       	jmp    c0026d4e <Vm::faultHandler(regs*)+0x69d>
c00268af:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00268b5:	0f 84 6d 01 00 00    	je     c0026a28 <Vm::faultHandler(regs*)+0x377>
c00268bb:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00268c1:	0f 84 6f 01 00 00    	je     c0026a36 <Vm::faultHandler(regs*)+0x385>
c00268c7:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00268cd:	0f 85 9a 04 00 00    	jne    c0026d6d <Vm::faultHandler(regs*)+0x6bc>
c00268d3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00268d6:	e9 76 fe ff ff       	jmp    c0026751 <Vm::faultHandler(regs*)+0xa0>
c00268db:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00268de:	be 02 00 00 00       	mov    esi,0x2
c00268e3:	e9 69 fe ff ff       	jmp    c0026751 <Vm::faultHandler(regs*)+0xa0>
c00268e8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00268eb:	be 03 00 00 00       	mov    esi,0x3
c00268f0:	e9 5c fe ff ff       	jmp    c0026751 <Vm::faultHandler(regs*)+0xa0>
c00268f5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00268f8:	be 04 00 00 00       	mov    esi,0x4
c00268fd:	e9 4f fe ff ff       	jmp    c0026751 <Vm::faultHandler(regs*)+0xa0>
c0026902:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026905:	be 05 00 00 00       	mov    esi,0x5
c002690a:	e9 42 fe ff ff       	jmp    c0026751 <Vm::faultHandler(regs*)+0xa0>
c002690f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026912:	bd 01 00 00 00       	mov    ebp,0x1
c0026917:	e9 35 fe ff ff       	jmp    c0026751 <Vm::faultHandler(regs*)+0xa0>
c002691c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002691f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0026924:	e9 28 fe ff ff       	jmp    c0026751 <Vm::faultHandler(regs*)+0xa0>
c0026929:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c002692c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026930:	83 e5 01             	and    ebp,0x1
c0026933:	74 30                	je     c0026965 <Vm::faultHandler(regs*)+0x2b4>
c0026935:	83 e9 04             	sub    ecx,0x4
c0026938:	81 e2 ff 0d 00 00    	and    edx,0xdff
c002693e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0026944:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0026947:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c002694a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0026950:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0026954:	0f 84 0c 04 00 00    	je     c0026d66 <Vm::faultHandler(regs*)+0x6b5>
c002695a:	80 ce 02             	or     dh,0x2
c002695d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0026960:	e9 01 04 00 00       	jmp    c0026d66 <Vm::faultHandler(regs*)+0x6b5>
c0026965:	83 e9 02             	sub    ecx,0x2
c0026968:	81 e1 ff ff 00 00    	and    ecx,0xffff
c002696e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0026971:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0026975:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c002697b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c002697f:	74 05                	je     c0026986 <Vm::faultHandler(regs*)+0x2d5>
c0026981:	80 ce 02             	or     dh,0x2
c0026984:	eb 03                	jmp    c0026989 <Vm::faultHandler(regs*)+0x2d8>
c0026986:	80 e6 fd             	and    dh,0xfd
c0026989:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c002698d:	e9 d4 03 00 00       	jmp    c0026d66 <Vm::faultHandler(regs*)+0x6b5>
c0026992:	83 e5 01             	and    ebp,0x1
c0026995:	74 2a                	je     c00269c1 <Vm::faultHandler(regs*)+0x310>
c0026997:	8b 10                	mov    edx,DWORD PTR [eax]
c0026999:	81 e2 ff 0d 00 00    	and    edx,0xdff
c002699f:	81 ca 00 02 02 00    	or     edx,0x20200
c00269a5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00269a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00269aa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00269b0:	c1 e8 09             	shr    eax,0x9
c00269b3:	83 e0 01             	and    eax,0x1
c00269b6:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00269b9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00269bc:	83 c0 04             	add    eax,0x4
c00269bf:	eb 24                	jmp    c00269e5 <Vm::faultHandler(regs*)+0x334>
c00269c1:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00269c4:	81 ca 00 02 02 00    	or     edx,0x20200
c00269ca:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00269cd:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00269d0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00269d6:	c1 e8 09             	shr    eax,0x9
c00269d9:	83 e0 01             	and    eax,0x1
c00269dc:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00269df:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00269e2:	83 c0 02             	add    eax,0x2
c00269e5:	25 ff ff 00 00       	and    eax,0xffff
c00269ea:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00269ed:	e9 74 03 00 00       	jmp    c0026d66 <Vm::faultHandler(regs*)+0x6b5>
c00269f2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00269f6:	3d ee 00 00 00       	cmp    eax,0xee
c00269fb:	75 10                	jne    c0026a0d <Vm::faultHandler(regs*)+0x35c>
c00269fd:	83 ec 0c             	sub    esp,0xc
c0026a00:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0026a03:	e8 7d f7 ff ff       	call   c0026185 <Vm::mainloop3(unsigned long)>
c0026a08:	e9 44 03 00 00       	jmp    c0026d51 <Vm::faultHandler(regs*)+0x6a0>
c0026a0d:	83 ec 0c             	sub    esp,0xc
c0026a10:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0026a14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026a18:	51                   	push   ecx
c0026a19:	50                   	push   eax
c0026a1a:	53                   	push   ebx
c0026a1b:	e8 84 fb ff ff       	call   c00265a4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0026a20:	83 c4 20             	add    esp,0x20
c0026a23:	e9 41 03 00 00       	jmp    c0026d69 <Vm::faultHandler(regs*)+0x6b8>
c0026a28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026a2d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0026a31:	e9 30 03 00 00       	jmp    c0026d66 <Vm::faultHandler(regs*)+0x6b5>
c0026a36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026a3b:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0026a3f:	e9 22 03 00 00       	jmp    c0026d66 <Vm::faultHandler(regs*)+0x6b5>
c0026a44:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0026a47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026a4c:	74 2b                	je     c0026a79 <Vm::faultHandler(regs*)+0x3c8>
c0026a4e:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0026a55:	76 22                	jbe    c0026a79 <Vm::faultHandler(regs*)+0x3c8>
c0026a57:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026a5b:	50                   	push   eax
c0026a5c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026a60:	50                   	push   eax
c0026a61:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026a65:	50                   	push   eax
c0026a66:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026a6a:	50                   	push   eax
c0026a6b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026a6f:	50                   	push   eax
c0026a70:	6a 6c                	push   0x6c
c0026a72:	6a 6c                	push   0x6c
c0026a74:	e9 bd 01 00 00       	jmp    c0026c36 <Vm::faultHandler(regs*)+0x585>
c0026a79:	83 ec 0c             	sub    esp,0xc
c0026a7c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026a80:	0f b7 f6             	movzx  esi,si
c0026a83:	50                   	push   eax
c0026a84:	e8 4c f6 ff ff       	call   c00260d5 <Vm::inbv(unsigned short)>
c0026a89:	83 c4 0c             	add    esp,0xc
c0026a8c:	0f b6 c0             	movzx  eax,al
c0026a8f:	50                   	push   eax
c0026a90:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0026a94:	50                   	push   eax
c0026a95:	56                   	push   esi
c0026a96:	e8 d6 fb ff ff       	call   c0026671 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0026a9b:	83 c4 10             	add    esp,0x10
c0026a9e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026aa1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026aa5:	74 03                	je     c0026aaa <Vm::faultHandler(regs*)+0x3f9>
c0026aa7:	48                   	dec    eax
c0026aa8:	eb 01                	jmp    c0026aab <Vm::faultHandler(regs*)+0x3fa>
c0026aaa:	40                   	inc    eax
c0026aab:	0f b7 c0             	movzx  eax,ax
c0026aae:	e9 8b 00 00 00       	jmp    c0026b3e <Vm::faultHandler(regs*)+0x48d>
c0026ab3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0026ab6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026ab9:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026abe:	74 29                	je     c0026ae9 <Vm::faultHandler(regs*)+0x438>
c0026ac0:	3d ff ff 00 00       	cmp    eax,0xffff
c0026ac5:	76 22                	jbe    c0026ae9 <Vm::faultHandler(regs*)+0x438>
c0026ac7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026acb:	50                   	push   eax
c0026acc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026ad0:	50                   	push   eax
c0026ad1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026ad5:	50                   	push   eax
c0026ad6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026ada:	50                   	push   eax
c0026adb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026adf:	50                   	push   eax
c0026ae0:	6a 6d                	push   0x6d
c0026ae2:	6a 6d                	push   0x6d
c0026ae4:	e9 4d 01 00 00       	jmp    c0026c36 <Vm::faultHandler(regs*)+0x585>
c0026ae9:	0f b7 c8             	movzx  ecx,ax
c0026aec:	0f b7 f6             	movzx  esi,si
c0026aef:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026af2:	83 e5 01             	and    ebp,0x1
c0026af5:	74 20                	je     c0026b17 <Vm::faultHandler(regs*)+0x466>
c0026af7:	ed                   	in     eax,dx
c0026af8:	55                   	push   ebp
c0026af9:	50                   	push   eax
c0026afa:	51                   	push   ecx
c0026afb:	56                   	push   esi
c0026afc:	e8 9b fb ff ff       	call   c002669c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0026b01:	83 c4 10             	add    esp,0x10
c0026b04:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026b07:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026b0b:	74 05                	je     c0026b12 <Vm::faultHandler(regs*)+0x461>
c0026b0d:	83 e8 04             	sub    eax,0x4
c0026b10:	eb 27                	jmp    c0026b39 <Vm::faultHandler(regs*)+0x488>
c0026b12:	83 c0 04             	add    eax,0x4
c0026b15:	eb 22                	jmp    c0026b39 <Vm::faultHandler(regs*)+0x488>
c0026b17:	66 ed                	in     ax,dx
c0026b19:	0f b7 c0             	movzx  eax,ax
c0026b1c:	57                   	push   edi
c0026b1d:	50                   	push   eax
c0026b1e:	51                   	push   ecx
c0026b1f:	56                   	push   esi
c0026b20:	e8 61 fb ff ff       	call   c0026686 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0026b25:	83 c4 10             	add    esp,0x10
c0026b28:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026b2b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026b2f:	74 05                	je     c0026b36 <Vm::faultHandler(regs*)+0x485>
c0026b31:	83 e8 02             	sub    eax,0x2
c0026b34:	eb 03                	jmp    c0026b39 <Vm::faultHandler(regs*)+0x488>
c0026b36:	83 c0 02             	add    eax,0x2
c0026b39:	25 ff ff 00 00       	and    eax,0xffff
c0026b3e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0026b41:	e9 20 02 00 00       	jmp    c0026d66 <Vm::faultHandler(regs*)+0x6b5>
c0026b46:	8d 46 ff             	lea    eax,[esi-0x1]
c0026b49:	0f b6 f0             	movzx  esi,al
c0026b4c:	83 fe 05             	cmp    esi,0x5
c0026b4f:	77 23                	ja     c0026b74 <Vm::faultHandler(regs*)+0x4c3>
c0026b51:	ff 24 b5 84 38 03 c0 	jmp    DWORD PTR [esi*4-0x3ffcc77c]
c0026b58:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0026b5d:	eb 15                	jmp    c0026b74 <Vm::faultHandler(regs*)+0x4c3>
c0026b5f:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0026b63:	eb 0f                	jmp    c0026b74 <Vm::faultHandler(regs*)+0x4c3>
c0026b65:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0026b69:	eb 09                	jmp    c0026b74 <Vm::faultHandler(regs*)+0x4c3>
c0026b6b:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0026b6f:	eb 03                	jmp    c0026b74 <Vm::faultHandler(regs*)+0x4c3>
c0026b71:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0026b74:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0026b77:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026b7c:	74 29                	je     c0026ba7 <Vm::faultHandler(regs*)+0x4f6>
c0026b7e:	3d ff ff 00 00       	cmp    eax,0xffff
c0026b83:	76 22                	jbe    c0026ba7 <Vm::faultHandler(regs*)+0x4f6>
c0026b85:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026b89:	50                   	push   eax
c0026b8a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026b8e:	50                   	push   eax
c0026b8f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026b93:	50                   	push   eax
c0026b94:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026b98:	50                   	push   eax
c0026b99:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026b9d:	50                   	push   eax
c0026b9e:	6a 6e                	push   0x6e
c0026ba0:	6a 6e                	push   0x6e
c0026ba2:	e9 8f 00 00 00       	jmp    c0026c36 <Vm::faultHandler(regs*)+0x585>
c0026ba7:	0f b7 c0             	movzx  eax,ax
c0026baa:	52                   	push   edx
c0026bab:	52                   	push   edx
c0026bac:	50                   	push   eax
c0026bad:	57                   	push   edi
c0026bae:	e8 8a fa ff ff       	call   c002663d <Vm::readByteFromReal(unsigned short, unsigned short)>
c0026bb3:	59                   	pop    ecx
c0026bb4:	0f b6 c0             	movzx  eax,al
c0026bb7:	5e                   	pop    esi
c0026bb8:	50                   	push   eax
c0026bb9:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026bbd:	50                   	push   eax
c0026bbe:	e8 25 f5 ff ff       	call   c00260e8 <Vm::outbv(unsigned short, unsigned char)>
c0026bc3:	83 c4 10             	add    esp,0x10
c0026bc6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0026bc9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026bcd:	74 03                	je     c0026bd2 <Vm::faultHandler(regs*)+0x521>
c0026bcf:	48                   	dec    eax
c0026bd0:	eb 01                	jmp    c0026bd3 <Vm::faultHandler(regs*)+0x522>
c0026bd2:	40                   	inc    eax
c0026bd3:	0f b7 c0             	movzx  eax,ax
c0026bd6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0026bd9:	e9 88 01 00 00       	jmp    c0026d66 <Vm::faultHandler(regs*)+0x6b5>
c0026bde:	8d 46 ff             	lea    eax,[esi-0x1]
c0026be1:	0f b6 f0             	movzx  esi,al
c0026be4:	83 fe 05             	cmp    esi,0x5
c0026be7:	77 1e                	ja     c0026c07 <Vm::faultHandler(regs*)+0x556>
c0026be9:	ff 24 b5 9c 38 03 c0 	jmp    DWORD PTR [esi*4-0x3ffcc764]
c0026bf0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0026bf4:	eb 11                	jmp    c0026c07 <Vm::faultHandler(regs*)+0x556>
c0026bf6:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0026bf9:	eb 0c                	jmp    c0026c07 <Vm::faultHandler(regs*)+0x556>
c0026bfb:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0026bfe:	eb 07                	jmp    c0026c07 <Vm::faultHandler(regs*)+0x556>
c0026c00:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0026c03:	eb 02                	jmp    c0026c07 <Vm::faultHandler(regs*)+0x556>
c0026c05:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0026c07:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0026c0a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026c0f:	74 37                	je     c0026c48 <Vm::faultHandler(regs*)+0x597>
c0026c11:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0026c17:	76 2f                	jbe    c0026c48 <Vm::faultHandler(regs*)+0x597>
c0026c19:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026c1d:	50                   	push   eax
c0026c1e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026c22:	50                   	push   eax
c0026c23:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026c27:	50                   	push   eax
c0026c28:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026c2c:	50                   	push   eax
c0026c2d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026c31:	50                   	push   eax
c0026c32:	6a 6f                	push   0x6f
c0026c34:	6a 6f                	push   0x6f
c0026c36:	68 27 38 03 c0       	push   0xc0033827
c0026c3b:	e8 15 28 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0026c40:	83 c4 20             	add    esp,0x20
c0026c43:	e9 83 01 00 00       	jmp    c0026dcb <Vm::faultHandler(regs*)+0x71a>
c0026c48:	0f b7 d7             	movzx  edx,di
c0026c4b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0026c4e:	0f b7 c6             	movzx  eax,si
c0026c51:	81 e1 00 04 00 00    	and    ecx,0x400
c0026c57:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0026c5a:	83 e5 01             	and    ebp,0x1
c0026c5d:	74 1d                	je     c0026c7c <Vm::faultHandler(regs*)+0x5cb>
c0026c5f:	55                   	push   ebp
c0026c60:	55                   	push   ebp
c0026c61:	50                   	push   eax
c0026c62:	52                   	push   edx
c0026c63:	e8 f8 f9 ff ff       	call   c0026660 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0026c68:	83 c4 10             	add    esp,0x10
c0026c6b:	89 fa                	mov    edx,edi
c0026c6d:	ef                   	out    dx,eax
c0026c6e:	85 c9                	test   ecx,ecx
c0026c70:	74 05                	je     c0026c77 <Vm::faultHandler(regs*)+0x5c6>
c0026c72:	83 ee 04             	sub    esi,0x4
c0026c75:	eb 21                	jmp    c0026c98 <Vm::faultHandler(regs*)+0x5e7>
c0026c77:	83 c6 04             	add    esi,0x4
c0026c7a:	eb 1c                	jmp    c0026c98 <Vm::faultHandler(regs*)+0x5e7>
c0026c7c:	55                   	push   ebp
c0026c7d:	55                   	push   ebp
c0026c7e:	50                   	push   eax
c0026c7f:	52                   	push   edx
c0026c80:	e8 c9 f9 ff ff       	call   c002664e <Vm::readWordFromReal(unsigned short, unsigned short)>
c0026c85:	83 c4 10             	add    esp,0x10
c0026c88:	89 fa                	mov    edx,edi
c0026c8a:	66 ef                	out    dx,ax
c0026c8c:	85 c9                	test   ecx,ecx
c0026c8e:	74 05                	je     c0026c95 <Vm::faultHandler(regs*)+0x5e4>
c0026c90:	83 ee 02             	sub    esi,0x2
c0026c93:	eb 03                	jmp    c0026c98 <Vm::faultHandler(regs*)+0x5e7>
c0026c95:	83 c6 02             	add    esi,0x2
c0026c98:	81 e6 ff ff 00 00    	and    esi,0xffff
c0026c9e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0026ca1:	e9 c0 00 00 00       	jmp    c0026d66 <Vm::faultHandler(regs*)+0x6b5>
c0026ca6:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0026cad:	83 ec 0c             	sub    esp,0xc
c0026cb0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026cb4:	50                   	push   eax
c0026cb5:	e8 1b f4 ff ff       	call   c00260d5 <Vm::inbv(unsigned short)>
c0026cba:	0f b6 c0             	movzx  eax,al
c0026cbd:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0026cc0:	eb 3a                	jmp    c0026cfc <Vm::faultHandler(regs*)+0x64b>
c0026cc2:	83 e5 01             	and    ebp,0x1
c0026cc5:	74 07                	je     c0026cce <Vm::faultHandler(regs*)+0x61d>
c0026cc7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026ccb:	ed                   	in     eax,dx
c0026ccc:	eb 14                	jmp    c0026ce2 <Vm::faultHandler(regs*)+0x631>
c0026cce:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0026cd1:	66 31 f6             	xor    si,si
c0026cd4:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0026cd7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026cdb:	66 ed                	in     ax,dx
c0026cdd:	0f b7 c0             	movzx  eax,ax
c0026ce0:	09 f0                	or     eax,esi
c0026ce2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0026ce5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0026ce9:	eb 7e                	jmp    c0026d69 <Vm::faultHandler(regs*)+0x6b8>
c0026ceb:	52                   	push   edx
c0026cec:	52                   	push   edx
c0026ced:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0026cf1:	50                   	push   eax
c0026cf2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026cf6:	50                   	push   eax
c0026cf7:	e8 ec f3 ff ff       	call   c00260e8 <Vm::outbv(unsigned short, unsigned char)>
c0026cfc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0026d00:	eb 4f                	jmp    c0026d51 <Vm::faultHandler(regs*)+0x6a0>
c0026d02:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026d05:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026d09:	83 e5 01             	and    ebp,0x1
c0026d0c:	74 03                	je     c0026d11 <Vm::faultHandler(regs*)+0x660>
c0026d0e:	ef                   	out    dx,eax
c0026d0f:	eb d4                	jmp    c0026ce5 <Vm::faultHandler(regs*)+0x634>
c0026d11:	66 ef                	out    dx,ax
c0026d13:	eb d0                	jmp    c0026ce5 <Vm::faultHandler(regs*)+0x634>
c0026d15:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0026d1c:	83 ec 0c             	sub    esp,0xc
c0026d1f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026d23:	50                   	push   eax
c0026d24:	e8 ac f3 ff ff       	call   c00260d5 <Vm::inbv(unsigned short)>
c0026d29:	0f b6 c0             	movzx  eax,al
c0026d2c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0026d2f:	eb 1d                	jmp    c0026d4e <Vm::faultHandler(regs*)+0x69d>
c0026d31:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026d34:	83 e5 01             	and    ebp,0x1
c0026d37:	74 03                	je     c0026d3c <Vm::faultHandler(regs*)+0x68b>
c0026d39:	ed                   	in     eax,dx
c0026d3a:	eb 0d                	jmp    c0026d49 <Vm::faultHandler(regs*)+0x698>
c0026d3c:	66 ed                	in     ax,dx
c0026d3e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0026d41:	0f b7 c0             	movzx  eax,ax
c0026d44:	66 31 d2             	xor    dx,dx
c0026d47:	09 d0                	or     eax,edx
c0026d49:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0026d4c:	eb 18                	jmp    c0026d66 <Vm::faultHandler(regs*)+0x6b5>
c0026d4e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026d51:	83 c4 10             	add    esp,0x10
c0026d54:	eb 13                	jmp    c0026d69 <Vm::faultHandler(regs*)+0x6b8>
c0026d56:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026d59:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026d5c:	83 e5 01             	and    ebp,0x1
c0026d5f:	74 03                	je     c0026d64 <Vm::faultHandler(regs*)+0x6b3>
c0026d61:	ef                   	out    dx,eax
c0026d62:	eb 02                	jmp    c0026d66 <Vm::faultHandler(regs*)+0x6b5>
c0026d64:	66 ef                	out    dx,ax
c0026d66:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026d69:	b0 01                	mov    al,0x1
c0026d6b:	eb 60                	jmp    c0026dcd <Vm::faultHandler(regs*)+0x71c>
c0026d6d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026d71:	50                   	push   eax
c0026d72:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026d76:	50                   	push   eax
c0026d77:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026d7b:	50                   	push   eax
c0026d7c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026d80:	50                   	push   eax
c0026d81:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026d85:	50                   	push   eax
c0026d86:	52                   	push   edx
c0026d87:	52                   	push   edx
c0026d88:	68 54 38 03 c0       	push   0xc0033854
c0026d8d:	e8 c3 26 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0026d92:	83 c4 20             	add    esp,0x20
c0026d95:	83 ec 0c             	sub    esp,0xc
c0026d98:	6a 60                	push   0x60
c0026d9a:	e8 36 f3 ff ff       	call   c00260d5 <Vm::inbv(unsigned short)>
c0026d9f:	83 c4 10             	add    esp,0x10
c0026da2:	0f b6 d0             	movzx  edx,al
c0026da5:	83 fa 1c             	cmp    edx,0x1c
c0026da8:	74 05                	je     c0026daf <Vm::faultHandler(regs*)+0x6fe>
c0026daa:	83 fa 5a             	cmp    edx,0x5a
c0026dad:	75 e6                	jne    c0026d95 <Vm::faultHandler(regs*)+0x6e4>
c0026daf:	0f b6 c0             	movzx  eax,al
c0026db2:	83 f8 1c             	cmp    eax,0x1c
c0026db5:	74 05                	je     c0026dbc <Vm::faultHandler(regs*)+0x70b>
c0026db7:	83 f8 5a             	cmp    eax,0x5a
c0026dba:	75 0f                	jne    c0026dcb <Vm::faultHandler(regs*)+0x71a>
c0026dbc:	83 ec 0c             	sub    esp,0xc
c0026dbf:	6a 60                	push   0x60
c0026dc1:	e8 0f f3 ff ff       	call   c00260d5 <Vm::inbv(unsigned short)>
c0026dc6:	83 c4 10             	add    esp,0x10
c0026dc9:	eb e4                	jmp    c0026daf <Vm::faultHandler(regs*)+0x6fe>
c0026dcb:	31 c0                	xor    eax,eax
c0026dcd:	83 c4 2c             	add    esp,0x2c
c0026dd0:	5b                   	pop    ebx
c0026dd1:	5e                   	pop    esi
c0026dd2:	5f                   	pop    edi
c0026dd3:	5d                   	pop    ebp
c0026dd4:	c3                   	ret    

c0026dd5 <noCopro(unsigned long)>:
c0026dd5:	c3                   	ret    

c0026dd6 <nmiHandler(regs*, void*)>:
c0026dd6:	83 ec 0c             	sub    esp,0xc
c0026dd9:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0026dde:	83 ec 0c             	sub    esp,0xc
c0026de1:	50                   	push   eax
c0026de2:	e8 65 ef fe ff       	call   c0015d4c <Computer::handleNMI()>
c0026de7:	83 c4 10             	add    esp,0x10
c0026dea:	90                   	nop
c0026deb:	83 c4 0c             	add    esp,0xc
c0026dee:	c3                   	ret    

c0026def <doubleFault(regs*, void*)>:
c0026def:	55                   	push   ebp
c0026df0:	89 e5                	mov    ebp,esp
c0026df2:	83 ec 08             	sub    esp,0x8
c0026df5:	83 ec 0c             	sub    esp,0xc
c0026df8:	68 b4 38 03 c0       	push   0xc00338b4
c0026dfd:	e8 8c 99 ff ff       	call   c002078e <KePanic(char const*)>
c0026e02:	83 c4 10             	add    esp,0x10
c0026e05:	90                   	nop
c0026e06:	c9                   	leave  
c0026e07:	c3                   	ret    

c0026e08 <displayDebugInfo(regs*)>:
c0026e08:	83 ec 1c             	sub    esp,0x1c
c0026e0b:	0f 20 c0             	mov    eax,cr0
c0026e0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026e12:	0f 20 d0             	mov    eax,cr2
c0026e15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026e19:	0f 20 d8             	mov    eax,cr3
c0026e1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026e20:	0f 20 e0             	mov    eax,cr4
c0026e23:	89 04 24             	mov    DWORD PTR [esp],eax
c0026e26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026e2a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0026e2d:	83 ec 08             	sub    esp,0x8
c0026e30:	50                   	push   eax
c0026e31:	68 d0 38 03 c0       	push   0xc00338d0
c0026e36:	e8 1a 26 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0026e3b:	83 c4 10             	add    esp,0x10
c0026e3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026e42:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0026e45:	83 ec 08             	sub    esp,0x8
c0026e48:	50                   	push   eax
c0026e49:	68 c1 38 03 c0       	push   0xc00338c1
c0026e4e:	e8 02 26 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0026e53:	83 c4 10             	add    esp,0x10
c0026e56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026e5a:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0026e5d:	83 ec 08             	sub    esp,0x8
c0026e60:	50                   	push   eax
c0026e61:	68 cc 38 03 c0       	push   0xc00338cc
c0026e66:	e8 ea 25 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0026e6b:	83 c4 10             	add    esp,0x10
c0026e6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026e72:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026e75:	83 ec 08             	sub    esp,0x8
c0026e78:	50                   	push   eax
c0026e79:	68 db 38 03 c0       	push   0xc00338db
c0026e7e:	e8 d2 25 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0026e83:	83 c4 10             	add    esp,0x10
c0026e86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026e8a:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0026e8d:	83 ec 08             	sub    esp,0x8
c0026e90:	50                   	push   eax
c0026e91:	68 e6 38 03 c0       	push   0xc00338e6
c0026e96:	e8 ba 25 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0026e9b:	83 c4 10             	add    esp,0x10
c0026e9e:	83 ec 08             	sub    esp,0x8
c0026ea1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026ea5:	68 f1 38 03 c0       	push   0xc00338f1
c0026eaa:	e8 a6 25 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0026eaf:	83 c4 10             	add    esp,0x10
c0026eb2:	83 ec 08             	sub    esp,0x8
c0026eb5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0026eb9:	68 fc 38 03 c0       	push   0xc00338fc
c0026ebe:	e8 92 25 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0026ec3:	83 c4 10             	add    esp,0x10
c0026ec6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026eca:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0026ecd:	c1 e0 05             	shl    eax,0x5
c0026ed0:	8d 90 00 4d 03 c0    	lea    edx,[eax-0x3ffcb300]
c0026ed6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026eda:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0026edd:	83 ec 04             	sub    esp,0x4
c0026ee0:	52                   	push   edx
c0026ee1:	50                   	push   eax
c0026ee2:	68 07 39 03 c0       	push   0xc0033907
c0026ee7:	e8 69 25 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0026eec:	83 c4 10             	add    esp,0x10
c0026eef:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026ef4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026efa:	83 ec 0c             	sub    esp,0xc
c0026efd:	50                   	push   eax
c0026efe:	e8 66 03 ff ff       	call   c0017269 <setActiveTerminal(VgaText*)>
c0026f03:	83 c4 10             	add    esp,0x10
c0026f06:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026f0b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026f11:	83 ec 08             	sub    esp,0x8
c0026f14:	68 16 39 03 c0       	push   0xc0033916
c0026f19:	50                   	push   eax
c0026f1a:	e8 97 06 ff ff       	call   c00175b6 <VgaText::puts(char const*)>
c0026f1f:	83 c4 10             	add    esp,0x10
c0026f22:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026f27:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026f2d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026f31:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0026f34:	83 ec 08             	sub    esp,0x8
c0026f37:	52                   	push   edx
c0026f38:	50                   	push   eax
c0026f39:	e8 32 06 ff ff       	call   c0017570 <VgaText::putx(unsigned int)>
c0026f3e:	83 c4 10             	add    esp,0x10
c0026f41:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026f46:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026f4c:	83 ec 08             	sub    esp,0x8
c0026f4f:	68 24 39 03 c0       	push   0xc0033924
c0026f54:	50                   	push   eax
c0026f55:	e8 5c 06 ff ff       	call   c00175b6 <VgaText::puts(char const*)>
c0026f5a:	83 c4 10             	add    esp,0x10
c0026f5d:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026f62:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026f68:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0026f6d:	8b 12                	mov    edx,DWORD PTR [edx]
c0026f6f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026f72:	83 c2 0c             	add    edx,0xc
c0026f75:	83 ec 08             	sub    esp,0x8
c0026f78:	52                   	push   edx
c0026f79:	50                   	push   eax
c0026f7a:	e8 37 06 ff ff       	call   c00175b6 <VgaText::puts(char const*)>
c0026f7f:	83 c4 10             	add    esp,0x10
c0026f82:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026f87:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026f8d:	83 ec 08             	sub    esp,0x8
c0026f90:	68 2d 39 03 c0       	push   0xc003392d
c0026f95:	50                   	push   eax
c0026f96:	e8 1b 06 ff ff       	call   c00175b6 <VgaText::puts(char const*)>
c0026f9b:	83 c4 10             	add    esp,0x10
c0026f9e:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026fa3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026fa9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026fad:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0026fb0:	83 ec 08             	sub    esp,0x8
c0026fb3:	52                   	push   edx
c0026fb4:	50                   	push   eax
c0026fb5:	e8 b6 05 ff ff       	call   c0017570 <VgaText::putx(unsigned int)>
c0026fba:	83 c4 10             	add    esp,0x10
c0026fbd:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026fc2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026fc8:	83 ec 08             	sub    esp,0x8
c0026fcb:	68 35 39 03 c0       	push   0xc0033935
c0026fd0:	50                   	push   eax
c0026fd1:	e8 e0 05 ff ff       	call   c00175b6 <VgaText::puts(char const*)>
c0026fd6:	83 c4 10             	add    esp,0x10
c0026fd9:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026fde:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026fe4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026fe8:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0026feb:	83 ec 08             	sub    esp,0x8
c0026fee:	52                   	push   edx
c0026fef:	50                   	push   eax
c0026ff0:	e8 7b 05 ff ff       	call   c0017570 <VgaText::putx(unsigned int)>
c0026ff5:	83 c4 10             	add    esp,0x10
c0026ff8:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026ffd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0027003:	83 ec 08             	sub    esp,0x8
c0027006:	68 3d 39 03 c0       	push   0xc003393d
c002700b:	50                   	push   eax
c002700c:	e8 a5 05 ff ff       	call   c00175b6 <VgaText::puts(char const*)>
c0027011:	83 c4 10             	add    esp,0x10
c0027014:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0027019:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002701f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027023:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0027026:	83 ec 08             	sub    esp,0x8
c0027029:	52                   	push   edx
c002702a:	50                   	push   eax
c002702b:	e8 40 05 ff ff       	call   c0017570 <VgaText::putx(unsigned int)>
c0027030:	83 c4 10             	add    esp,0x10
c0027033:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0027038:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002703e:	83 ec 08             	sub    esp,0x8
c0027041:	68 45 39 03 c0       	push   0xc0033945
c0027046:	50                   	push   eax
c0027047:	e8 6a 05 ff ff       	call   c00175b6 <VgaText::puts(char const*)>
c002704c:	83 c4 10             	add    esp,0x10
c002704f:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0027054:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002705a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002705e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0027061:	83 ec 08             	sub    esp,0x8
c0027064:	52                   	push   edx
c0027065:	50                   	push   eax
c0027066:	e8 05 05 ff ff       	call   c0017570 <VgaText::putx(unsigned int)>
c002706b:	83 c4 10             	add    esp,0x10
c002706e:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0027073:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0027079:	83 ec 08             	sub    esp,0x8
c002707c:	68 4d 39 03 c0       	push   0xc003394d
c0027081:	50                   	push   eax
c0027082:	e8 2f 05 ff ff       	call   c00175b6 <VgaText::puts(char const*)>
c0027087:	83 c4 10             	add    esp,0x10
c002708a:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c002708f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0027095:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027099:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c002709c:	83 ec 08             	sub    esp,0x8
c002709f:	52                   	push   edx
c00270a0:	50                   	push   eax
c00270a1:	e8 ca 04 ff ff       	call   c0017570 <VgaText::putx(unsigned int)>
c00270a6:	83 c4 10             	add    esp,0x10
c00270a9:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c00270ae:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00270b4:	83 ec 08             	sub    esp,0x8
c00270b7:	68 55 39 03 c0       	push   0xc0033955
c00270bc:	50                   	push   eax
c00270bd:	e8 f4 04 ff ff       	call   c00175b6 <VgaText::puts(char const*)>
c00270c2:	83 c4 10             	add    esp,0x10
c00270c5:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c00270ca:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00270d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00270d4:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00270d7:	83 ec 08             	sub    esp,0x8
c00270da:	52                   	push   edx
c00270db:	50                   	push   eax
c00270dc:	e8 8f 04 ff ff       	call   c0017570 <VgaText::putx(unsigned int)>
c00270e1:	83 c4 10             	add    esp,0x10
c00270e4:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c00270e9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00270ef:	83 ec 08             	sub    esp,0x8
c00270f2:	68 5d 39 03 c0       	push   0xc003395d
c00270f7:	50                   	push   eax
c00270f8:	e8 b9 04 ff ff       	call   c00175b6 <VgaText::puts(char const*)>
c00270fd:	83 c4 10             	add    esp,0x10
c0027100:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0027105:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002710b:	83 ec 08             	sub    esp,0x8
c002710e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0027112:	50                   	push   eax
c0027113:	e8 58 04 ff ff       	call   c0017570 <VgaText::putx(unsigned int)>
c0027118:	83 c4 10             	add    esp,0x10
c002711b:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0027120:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0027126:	83 ec 08             	sub    esp,0x8
c0027129:	68 66 39 03 c0       	push   0xc0033966
c002712e:	50                   	push   eax
c002712f:	e8 82 04 ff ff       	call   c00175b6 <VgaText::puts(char const*)>
c0027134:	83 c4 10             	add    esp,0x10
c0027137:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c002713c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0027142:	83 ec 08             	sub    esp,0x8
c0027145:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0027149:	50                   	push   eax
c002714a:	e8 21 04 ff ff       	call   c0017570 <VgaText::putx(unsigned int)>
c002714f:	83 c4 10             	add    esp,0x10
c0027152:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0027157:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002715d:	83 ec 08             	sub    esp,0x8
c0027160:	68 6e 39 03 c0       	push   0xc003396e
c0027165:	50                   	push   eax
c0027166:	e8 4b 04 ff ff       	call   c00175b6 <VgaText::puts(char const*)>
c002716b:	83 c4 10             	add    esp,0x10
c002716e:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0027173:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0027179:	83 ec 08             	sub    esp,0x8
c002717c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0027180:	50                   	push   eax
c0027181:	e8 ea 03 ff ff       	call   c0017570 <VgaText::putx(unsigned int)>
c0027186:	83 c4 10             	add    esp,0x10
c0027189:	fa                   	cli    
c002718a:	f4                   	hlt    
c002718b:	eb fe                	jmp    c002718b <displayDebugInfo(regs*)+0x383>

c002718d <HalSystemIdle()>:
c002718d:	56                   	push   esi
c002718e:	53                   	push   ebx
c002718f:	83 ec 14             	sub    esp,0x14
c0027192:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0027197:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002719d:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c00271a3:	83 e0 04             	and    eax,0x4
c00271a6:	0f b6 c0             	movzx  eax,al
c00271a9:	85 c0                	test   eax,eax
c00271ab:	0f 95 c0             	setne  al
c00271ae:	0f b6 c0             	movzx  eax,al
c00271b1:	85 c0                	test   eax,eax
c00271b3:	74 4c                	je     c0027201 <HalSystemIdle()+0x74>
c00271b5:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c00271ba:	83 ec 08             	sub    esp,0x8
c00271bd:	68 e1 00 00 00       	push   0xe1
c00271c2:	50                   	push   eax
c00271c3:	e8 8e e9 fe ff       	call   c0015b56 <Computer::rdmsr(unsigned int)>
c00271c8:	83 c4 10             	add    esp,0x10
c00271cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00271cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00271d3:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c00271d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00271dc:	83 e2 02             	and    edx,0x2
c00271df:	89 d3                	mov    ebx,edx
c00271e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00271e5:	83 e2 00             	and    edx,0x0
c00271e8:	89 d6                	mov    esi,edx
c00271ea:	56                   	push   esi
c00271eb:	53                   	push   ebx
c00271ec:	68 e1 00 00 00       	push   0xe1
c00271f1:	50                   	push   eax
c00271f2:	e8 8b e9 fe ff       	call   c0015b82 <Computer::wrmsr(unsigned int, unsigned long long)>
c00271f7:	83 c4 10             	add    esp,0x10
c00271fa:	e8 95 8f fd ff       	call   c0000194 <doTPAUSE>
c00271ff:	eb 01                	jmp    c0027202 <HalSystemIdle()+0x75>
c0027201:	f4                   	hlt    
c0027202:	90                   	nop
c0027203:	83 c4 14             	add    esp,0x14
c0027206:	5b                   	pop    ebx
c0027207:	5e                   	pop    esi
c0027208:	c3                   	ret    

c0027209 <displayProgramFault(char const*)>:
c0027209:	83 ec 0c             	sub    esp,0xc
c002720c:	83 ec 0c             	sub    esp,0xc
c002720f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027213:	e8 3d 22 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0027218:	83 c4 10             	add    esp,0x10
c002721b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0027220:	8b 00                	mov    eax,DWORD PTR [eax]
c0027222:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0027225:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002722b:	85 c0                	test   eax,eax
c002722d:	74 21                	je     c0027250 <displayProgramFault(char const*)+0x47>
c002722f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0027234:	8b 00                	mov    eax,DWORD PTR [eax]
c0027236:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0027239:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002723f:	6a 04                	push   0x4
c0027241:	6a 0f                	push   0xf
c0027243:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0027247:	50                   	push   eax
c0027248:	e8 db 03 ff ff       	call   c0017628 <VgaText::puts(char const*, VgaColour, VgaColour)>
c002724d:	83 c4 10             	add    esp,0x10
c0027250:	90                   	nop
c0027251:	83 c4 0c             	add    esp,0xc
c0027254:	c3                   	ret    

c0027255 <gpFault(regs*, void*)>:
c0027255:	83 ec 1c             	sub    esp,0x1c
c0027258:	c7 05 74 12 04 c0 b1 66 02 c0 	mov    DWORD PTR ds:0xc0041274,0xc00266b1
c0027262:	a1 74 12 04 c0       	mov    eax,ds:0xc0041274
c0027267:	85 c0                	test   eax,eax
c0027269:	74 1e                	je     c0027289 <gpFault(regs*, void*)+0x34>
c002726b:	a1 74 12 04 c0       	mov    eax,ds:0xc0041274
c0027270:	83 ec 0c             	sub    esp,0xc
c0027273:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027277:	ff d0                	call   eax
c0027279:	83 c4 10             	add    esp,0x10
c002727c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0027280:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0027285:	85 c0                	test   eax,eax
c0027287:	75 2e                	jne    c00272b7 <gpFault(regs*, void*)+0x62>
c0027289:	83 ec 0c             	sub    esp,0xc
c002728c:	68 76 39 03 c0       	push   0xc0033976
c0027291:	e8 73 ff ff ff       	call   c0027209 <displayProgramFault(char const*)>
c0027296:	83 c4 10             	add    esp,0x10
c0027299:	83 ec 0c             	sub    esp,0xc
c002729c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00272a0:	e8 63 fb ff ff       	call   c0026e08 <displayDebugInfo(regs*)>
c00272a5:	83 c4 10             	add    esp,0x10
c00272a8:	83 ec 0c             	sub    esp,0xc
c00272ab:	6a 00                	push   0x0
c00272ad:	e8 56 ed ff ff       	call   c0026008 <Thr::terminateFromIRQ(int)>
c00272b2:	83 c4 10             	add    esp,0x10
c00272b5:	eb 01                	jmp    c00272b8 <gpFault(regs*, void*)+0x63>
c00272b7:	90                   	nop
c00272b8:	83 c4 1c             	add    esp,0x1c
c00272bb:	c3                   	ret    

c00272bc <pgFault(regs*, void*)>:
c00272bc:	83 ec 1c             	sub    esp,0x1c
c00272bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00272c3:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00272c6:	0f 20 d0             	mov    eax,cr2
c00272c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00272cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00272d1:	83 ec 04             	sub    esp,0x4
c00272d4:	52                   	push   edx
c00272d5:	50                   	push   eax
c00272d6:	68 54 3a 03 c0       	push   0xc0033a54
c00272db:	e8 75 21 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c00272e0:	83 c4 10             	add    esp,0x10
c00272e3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00272e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00272ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00272ed:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00272f3:	0f 20 d2             	mov    edx,cr2
c00272f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00272fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00272fe:	83 ec 08             	sub    esp,0x8
c0027301:	52                   	push   edx
c0027302:	50                   	push   eax
c0027303:	e8 98 1b ff ff       	call   c0018ea0 <VAS::tryLoadBackOffDisk(unsigned long)>
c0027308:	83 c4 10             	add    esp,0x10
c002730b:	0f b6 c0             	movzx  eax,al
c002730e:	85 c0                	test   eax,eax
c0027310:	75 2e                	jne    c0027340 <pgFault(regs*, void*)+0x84>
c0027312:	83 ec 0c             	sub    esp,0xc
c0027315:	68 8f 39 03 c0       	push   0xc003398f
c002731a:	e8 ea fe ff ff       	call   c0027209 <displayProgramFault(char const*)>
c002731f:	83 c4 10             	add    esp,0x10
c0027322:	83 ec 0c             	sub    esp,0xc
c0027325:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027329:	e8 da fa ff ff       	call   c0026e08 <displayDebugInfo(regs*)>
c002732e:	83 c4 10             	add    esp,0x10
c0027331:	83 ec 0c             	sub    esp,0xc
c0027334:	6a 00                	push   0x0
c0027336:	e8 cd ec ff ff       	call   c0026008 <Thr::terminateFromIRQ(int)>
c002733b:	83 c4 10             	add    esp,0x10
c002733e:	eb 01                	jmp    c0027341 <pgFault(regs*, void*)+0x85>
c0027340:	90                   	nop
c0027341:	83 c4 1c             	add    esp,0x1c
c0027344:	c3                   	ret    

c0027345 <otherISRHandler(regs*, void*)>:
c0027345:	83 ec 0c             	sub    esp,0xc
c0027348:	83 ec 0c             	sub    esp,0xc
c002734b:	68 7c 3a 03 c0       	push   0xc0033a7c
c0027350:	e8 b4 fe ff ff       	call   c0027209 <displayProgramFault(char const*)>
c0027355:	83 c4 10             	add    esp,0x10
c0027358:	83 ec 0c             	sub    esp,0xc
c002735b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002735f:	e8 a4 fa ff ff       	call   c0026e08 <displayDebugInfo(regs*)>
c0027364:	83 c4 10             	add    esp,0x10
c0027367:	83 ec 0c             	sub    esp,0xc
c002736a:	6a 00                	push   0x0
c002736c:	e8 97 ec ff ff       	call   c0026008 <Thr::terminateFromIRQ(int)>
c0027371:	83 c4 10             	add    esp,0x10
c0027374:	90                   	nop
c0027375:	83 c4 0c             	add    esp,0xc
c0027378:	c3                   	ret    

c0027379 <opcodeFault(regs*, void*)>:
c0027379:	55                   	push   ebp
c002737a:	89 e5                	mov    ebp,esp
c002737c:	83 ec 08             	sub    esp,0x8
c002737f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027382:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0027385:	83 ec 08             	sub    esp,0x8
c0027388:	50                   	push   eax
c0027389:	68 9a 39 03 c0       	push   0xc003399a
c002738e:	e8 c2 20 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0027393:	83 c4 10             	add    esp,0x10
c0027396:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c002739b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00273a1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00273a7:	0f b6 c0             	movzx  eax,al
c00273aa:	85 c0                	test   eax,eax
c00273ac:	74 21                	je     c00273cf <opcodeFault(regs*, void*)+0x56>
c00273ae:	83 ec 0c             	sub    esp,0xc
c00273b1:	68 a4 3a 03 c0       	push   0xc0033aa4
c00273b6:	e8 9a 20 ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c00273bb:	83 c4 10             	add    esp,0x10
c00273be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00273c1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00273c4:	8d 50 19             	lea    edx,[eax+0x19]
c00273c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00273ca:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00273cd:	eb 2b                	jmp    c00273fa <opcodeFault(regs*, void*)+0x81>
c00273cf:	83 ec 0c             	sub    esp,0xc
c00273d2:	68 a8 39 03 c0       	push   0xc00339a8
c00273d7:	e8 2d fe ff ff       	call   c0027209 <displayProgramFault(char const*)>
c00273dc:	83 c4 10             	add    esp,0x10
c00273df:	83 ec 0c             	sub    esp,0xc
c00273e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00273e5:	e8 1e fa ff ff       	call   c0026e08 <displayDebugInfo(regs*)>
c00273ea:	83 c4 10             	add    esp,0x10
c00273ed:	83 ec 0c             	sub    esp,0xc
c00273f0:	6a 00                	push   0x0
c00273f2:	e8 11 ec ff ff       	call   c0026008 <Thr::terminateFromIRQ(int)>
c00273f7:	83 c4 10             	add    esp,0x10
c00273fa:	c9                   	leave  
c00273fb:	c3                   	ret    

c00273fc <i386SaveCoprocessor(void*)>:
c00273fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027400:	83 c0 3f             	add    eax,0x3f
c0027403:	83 e0 c0             	and    eax,0xffffffc0
c0027406:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002740a:	ff 25 70 12 04 c0    	jmp    DWORD PTR ds:0xc0041270

c0027410 <i386LoadCoprocessor(void*)>:
c0027410:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027414:	83 c0 3f             	add    eax,0x3f
c0027417:	83 e0 c0             	and    eax,0xffffffc0
c002741a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002741e:	ff 25 6c 12 04 c0    	jmp    DWORD PTR ds:0xc004126c

c0027424 <x87EmulHandler(regs*, void*)>:
c0027424:	53                   	push   ebx
c0027425:	83 ec 08             	sub    esp,0x8
c0027428:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002742d:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0027431:	74 10                	je     c0027443 <x87EmulHandler(regs*, void*)+0x1f>
c0027433:	83 ec 0c             	sub    esp,0xc
c0027436:	68 b5 39 03 c0       	push   0xc00339b5
c002743b:	e8 4e 93 ff ff       	call   c002078e <KePanic(char const*)>
c0027440:	83 c4 10             	add    esp,0x10
c0027443:	0f 20 c0             	mov    eax,cr0
c0027446:	a8 08                	test   al,0x8
c0027448:	74 59                	je     c00274a3 <x87EmulHandler(regs*, void*)+0x7f>
c002744a:	0f 06                	clts   
c002744c:	a1 68 12 04 c0       	mov    eax,ds:0xc0041268
c0027451:	85 c0                	test   eax,eax
c0027453:	74 0e                	je     c0027463 <x87EmulHandler(regs*, void*)+0x3f>
c0027455:	83 ec 0c             	sub    esp,0xc
c0027458:	ff 70 55             	push   DWORD PTR [eax+0x55]
c002745b:	e8 9c ff ff ff       	call   c00273fc <i386SaveCoprocessor(void*)>
c0027460:	83 c4 10             	add    esp,0x10
c0027463:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0027469:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c002746d:	75 12                	jne    c0027481 <x87EmulHandler(regs*, void*)+0x5d>
c002746f:	83 ec 0c             	sub    esp,0xc
c0027472:	68 40 02 00 00       	push   0x240
c0027477:	e8 4b f1 fe ff       	call   c00165c7 <malloc>
c002747c:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c002747f:	eb 10                	jmp    c0027491 <x87EmulHandler(regs*, void*)+0x6d>
c0027481:	83 ec 0c             	sub    esp,0xc
c0027484:	a1 68 12 04 c0       	mov    eax,ds:0xc0041268
c0027489:	ff 70 55             	push   DWORD PTR [eax+0x55]
c002748c:	e8 7f ff ff ff       	call   c0027410 <i386LoadCoprocessor(void*)>
c0027491:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0027496:	83 c4 10             	add    esp,0x10
c0027499:	a3 68 12 04 c0       	mov    ds:0xc0041268,eax
c002749e:	83 c4 08             	add    esp,0x8
c00274a1:	5b                   	pop    ebx
c00274a2:	c3                   	ret    
c00274a3:	83 ec 0c             	sub    esp,0xc
c00274a6:	68 c9 39 03 c0       	push   0xc00339c9
c00274ab:	e8 a5 1f ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c00274b0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00274b8:	83 c4 18             	add    esp,0x18
c00274bb:	5b                   	pop    ebx
c00274bc:	e9 47 eb ff ff       	jmp    c0026008 <Thr::terminateFromIRQ(int)>

c00274c1 <HalInitialiseCoprocessor()>:
c00274c1:	83 ec 10             	sub    esp,0x10
c00274c4:	c7 05 68 12 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0041268,0x0
c00274ce:	6a 00                	push   0x0
c00274d0:	68 24 74 02 c0       	push   0xc0027424
c00274d5:	6a 07                	push   0x7
c00274d7:	e8 82 46 ff ff       	call   c001bb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00274dc:	e8 0f 71 00 00       	call   c002e5f0 <avxDetect>
c00274e1:	83 c4 10             	add    esp,0x10
c00274e4:	85 c0                	test   eax,eax
c00274e6:	74 1c                	je     c0027504 <HalInitialiseCoprocessor()+0x43>
c00274e8:	c7 05 70 12 04 c0 1a e6 02 c0 	mov    DWORD PTR ds:0xc0041270,0xc002e61a
c00274f2:	c7 05 6c 12 04 c0 2b e6 02 c0 	mov    DWORD PTR ds:0xc004126c,0xc002e62b
c00274fc:	83 c4 0c             	add    esp,0xc
c00274ff:	e9 38 71 00 00       	jmp    c002e63c <avxInit>
c0027504:	e8 57 74 00 00       	call   c002e960 <sseDetect>
c0027509:	85 c0                	test   eax,eax
c002750b:	74 1c                	je     c0027529 <HalInitialiseCoprocessor()+0x68>
c002750d:	c7 05 70 12 04 c0 78 e9 02 c0 	mov    DWORD PTR ds:0xc0041270,0xc002e978
c0027517:	c7 05 6c 12 04 c0 80 e9 02 c0 	mov    DWORD PTR ds:0xc004126c,0xc002e980
c0027521:	83 c4 0c             	add    esp,0xc
c0027524:	e9 5f 74 00 00       	jmp    c002e988 <sseInit>
c0027529:	e8 78 74 00 00       	call   c002e9a6 <x87Detect>
c002752e:	85 c0                	test   eax,eax
c0027530:	74 1c                	je     c002754e <HalInitialiseCoprocessor()+0x8d>
c0027532:	c7 05 70 12 04 c0 c1 e9 02 c0 	mov    DWORD PTR ds:0xc0041270,0xc002e9c1
c002753c:	c7 05 6c 12 04 c0 c8 e9 02 c0 	mov    DWORD PTR ds:0xc004126c,0xc002e9c8
c0027546:	83 c4 0c             	add    esp,0xc
c0027549:	e9 81 74 00 00       	jmp    c002e9cf <x87Init>
c002754e:	c7 05 70 12 04 c0 d5 6d 02 c0 	mov    DWORD PTR ds:0xc0041270,0xc0026dd5
c0027558:	c7 05 6c 12 04 c0 d5 6d 02 c0 	mov    DWORD PTR ds:0xc004126c,0xc0026dd5
c0027562:	0f 20 c0             	mov    eax,cr0
c0027565:	83 c8 04             	or     eax,0x4
c0027568:	0f 22 c0             	mov    cr0,eax
c002756b:	83 c4 0c             	add    esp,0xc
c002756e:	c3                   	ret    

c002756f <HalPanic(char const*)>:
c002756f:	53                   	push   ebx
c0027570:	83 ec 10             	sub    esp,0x10
c0027573:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0027577:	fa                   	cli    
c0027578:	53                   	push   ebx
c0027579:	68 df 39 03 c0       	push   0xc00339df
c002757e:	e8 d2 1e ff ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0027583:	a1 64 12 04 c0       	mov    eax,ds:0xc0041264
c0027588:	83 c4 10             	add    esp,0x10
c002758b:	85 c0                	test   eax,eax
c002758d:	74 09                	je     c0027598 <HalPanic(char const*)+0x29>
c002758f:	83 ec 0c             	sub    esp,0xc
c0027592:	53                   	push   ebx
c0027593:	ff d0                	call   eax
c0027595:	83 c4 10             	add    esp,0x10
c0027598:	a1 08 ba 03 c0       	mov    eax,ds:0xc003ba08
c002759d:	85 c0                	test   eax,eax
c002759f:	0f 84 dc 00 00 00    	je     c0027681 <HalPanic(char const*)+0x112>
c00275a5:	52                   	push   edx
c00275a6:	6a 01                	push   0x1
c00275a8:	6a 0f                	push   0xf
c00275aa:	50                   	push   eax
c00275ab:	e8 14 fb fe ff       	call   c00170c4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00275b0:	59                   	pop    ecx
c00275b1:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c00275b7:	e8 f8 fc fe ff       	call   c00172b4 <VgaText::clearScreen()>
c00275bc:	58                   	pop    eax
c00275bd:	5a                   	pop    edx
c00275be:	68 80 19 03 c0       	push   0xc0031980
c00275c3:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c00275c9:	e8 2e fb fe ff       	call   c00170fc <VgaText::setTitle(char*)>
c00275ce:	83 c4 0c             	add    esp,0xc
c00275d1:	6a 01                	push   0x1
c00275d3:	6a 0f                	push   0xf
c00275d5:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c00275db:	e8 e4 fa fe ff       	call   c00170c4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00275e0:	59                   	pop    ecx
c00275e1:	58                   	pop    eax
c00275e2:	68 f8 39 03 c0       	push   0xc00339f8
c00275e7:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c00275ed:	e8 c4 ff fe ff       	call   c00175b6 <VgaText::puts(char const*)>
c00275f2:	83 c4 0c             	add    esp,0xc
c00275f5:	6a 0f                	push   0xf
c00275f7:	6a 01                	push   0x1
c00275f9:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c00275ff:	e8 c0 fa fe ff       	call   c00170c4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0027604:	58                   	pop    eax
c0027605:	5a                   	pop    edx
c0027606:	68 01 3a 03 c0       	push   0xc0033a01
c002760b:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c0027611:	e8 a0 ff fe ff       	call   c00175b6 <VgaText::puts(char const*)>
c0027616:	83 c4 0c             	add    esp,0xc
c0027619:	6a 01                	push   0x1
c002761b:	6a 0f                	push   0xf
c002761d:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c0027623:	e8 9c fa fe ff       	call   c00170c4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0027628:	59                   	pop    ecx
c0027629:	58                   	pop    eax
c002762a:	68 45 3a 03 c0       	push   0xc0033a45
c002762f:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c0027635:	e8 7c ff fe ff       	call   c00175b6 <VgaText::puts(char const*)>
c002763a:	58                   	pop    eax
c002763b:	5a                   	pop    edx
c002763c:	68 0e 3a 03 c0       	push   0xc0033a0e
c0027641:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c0027647:	e8 6a ff fe ff       	call   c00175b6 <VgaText::puts(char const*)>
c002764c:	59                   	pop    ecx
c002764d:	58                   	pop    eax
c002764e:	68 48 3a 03 c0       	push   0xc0033a48
c0027653:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c0027659:	e8 58 ff fe ff       	call   c00175b6 <VgaText::puts(char const*)>
c002765e:	58                   	pop    eax
c002765f:	5a                   	pop    edx
c0027660:	53                   	push   ebx
c0027661:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c0027667:	e8 4a ff fe ff       	call   c00175b6 <VgaText::puts(char const*)>
c002766c:	59                   	pop    ecx
c002766d:	5b                   	pop    ebx
c002766e:	68 45 3a 03 c0       	push   0xc0033a45
c0027673:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c0027679:	e8 38 ff fe ff       	call   c00175b6 <VgaText::puts(char const*)>
c002767e:	83 c4 10             	add    esp,0x10
c0027681:	eb fe                	jmp    c0027681 <HalPanic(char const*)+0x112>

c0027683 <HalQueryPerformanceCounter()>:
c0027683:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0027688:	31 d2                	xor    edx,edx
c002768a:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0027690:	31 c0                	xor    eax,eax
c0027692:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0027699:	74 02                	je     c002769d <HalQueryPerformanceCounter()+0x1a>
c002769b:	0f 31                	rdtsc  
c002769d:	c3                   	ret    

c002769e <HalInitialise()>:
c002769e:	53                   	push   ebx
c002769f:	83 ec 08             	sub    esp,0x8
c00276a2:	e8 e7 46 ff ff       	call   c001bd8e <setupINTS()>
c00276a7:	80 3d e0 06 04 c0 00 	cmp    BYTE PTR ds:0xc00406e0,0x0
c00276ae:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c00276b3:	75 0f                	jne    c00276c4 <HalInitialise()+0x26>
c00276b5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00276bb:	83 e2 fe             	and    edx,0xfffffffe
c00276be:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00276c4:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00276ca:	c6 05 60 12 04 c0 00 	mov    BYTE PTR ds:0xc0041260,0x0
c00276d1:	83 e2 fe             	and    edx,0xfffffffe
c00276d4:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00276da:	e8 a1 02 00 00       	call   c0027980 <picOpen()>
c00276df:	80 3d 60 12 04 c0 00 	cmp    BYTE PTR ds:0xc0041260,0x0
c00276e6:	74 0a                	je     c00276f2 <HalInitialise()+0x54>
c00276e8:	e8 e3 01 00 00       	call   c00278d0 <picDisable()>
c00276ed:	e8 72 68 00 00       	call   c002df64 <apicOpen()>
c00276f2:	bb 0f 00 00 00       	mov    ebx,0xf
c00276f7:	50                   	push   eax
c00276f8:	6a 00                	push   0x0
c00276fa:	68 45 73 02 c0       	push   0xc0027345
c00276ff:	6a 00                	push   0x0
c0027701:	e8 58 44 ff ff       	call   c001bb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027706:	83 c4 0c             	add    esp,0xc
c0027709:	6a 00                	push   0x0
c002770b:	68 45 73 02 c0       	push   0xc0027345
c0027710:	6a 01                	push   0x1
c0027712:	e8 47 44 ff ff       	call   c001bb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027717:	83 c4 0c             	add    esp,0xc
c002771a:	6a 00                	push   0x0
c002771c:	68 d6 6d 02 c0       	push   0xc0026dd6
c0027721:	6a 02                	push   0x2
c0027723:	e8 36 44 ff ff       	call   c001bb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027728:	83 c4 0c             	add    esp,0xc
c002772b:	6a 00                	push   0x0
c002772d:	68 45 73 02 c0       	push   0xc0027345
c0027732:	6a 03                	push   0x3
c0027734:	e8 25 44 ff ff       	call   c001bb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027739:	83 c4 0c             	add    esp,0xc
c002773c:	6a 00                	push   0x0
c002773e:	68 45 73 02 c0       	push   0xc0027345
c0027743:	6a 04                	push   0x4
c0027745:	e8 14 44 ff ff       	call   c001bb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c002774a:	83 c4 0c             	add    esp,0xc
c002774d:	6a 00                	push   0x0
c002774f:	68 45 73 02 c0       	push   0xc0027345
c0027754:	6a 05                	push   0x5
c0027756:	e8 03 44 ff ff       	call   c001bb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c002775b:	83 c4 0c             	add    esp,0xc
c002775e:	6a 00                	push   0x0
c0027760:	68 79 73 02 c0       	push   0xc0027379
c0027765:	6a 06                	push   0x6
c0027767:	e8 f2 43 ff ff       	call   c001bb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c002776c:	83 c4 0c             	add    esp,0xc
c002776f:	6a 00                	push   0x0
c0027771:	68 ef 6d 02 c0       	push   0xc0026def
c0027776:	6a 08                	push   0x8
c0027778:	e8 e1 43 ff ff       	call   c001bb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c002777d:	83 c4 0c             	add    esp,0xc
c0027780:	6a 00                	push   0x0
c0027782:	68 45 73 02 c0       	push   0xc0027345
c0027787:	6a 09                	push   0x9
c0027789:	e8 d0 43 ff ff       	call   c001bb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c002778e:	83 c4 0c             	add    esp,0xc
c0027791:	6a 00                	push   0x0
c0027793:	68 45 73 02 c0       	push   0xc0027345
c0027798:	6a 0a                	push   0xa
c002779a:	e8 bf 43 ff ff       	call   c001bb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c002779f:	83 c4 0c             	add    esp,0xc
c00277a2:	6a 00                	push   0x0
c00277a4:	68 45 73 02 c0       	push   0xc0027345
c00277a9:	6a 0b                	push   0xb
c00277ab:	e8 ae 43 ff ff       	call   c001bb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00277b0:	83 c4 0c             	add    esp,0xc
c00277b3:	6a 00                	push   0x0
c00277b5:	68 55 72 02 c0       	push   0xc0027255
c00277ba:	6a 0d                	push   0xd
c00277bc:	e8 9d 43 ff ff       	call   c001bb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00277c1:	83 c4 0c             	add    esp,0xc
c00277c4:	6a 00                	push   0x0
c00277c6:	68 bc 72 02 c0       	push   0xc00272bc
c00277cb:	6a 0e                	push   0xe
c00277cd:	e8 8c 43 ff ff       	call   c001bb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00277d2:	83 c4 10             	add    esp,0x10
c00277d5:	50                   	push   eax
c00277d6:	6a 00                	push   0x0
c00277d8:	68 45 73 02 c0       	push   0xc0027345
c00277dd:	53                   	push   ebx
c00277de:	43                   	inc    ebx
c00277df:	e8 7a 43 ff ff       	call   c001bb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00277e4:	83 c4 10             	add    esp,0x10
c00277e7:	83 fb 1e             	cmp    ebx,0x1e
c00277ea:	75 e9                	jne    c00277d5 <HalInitialise()+0x137>
c00277ec:	50                   	push   eax
c00277ed:	6a 00                	push   0x0
c00277ef:	68 3d 20 02 c0       	push   0xc002203d
c00277f4:	6a 60                	push   0x60
c00277f6:	e8 63 43 ff ff       	call   c001bb5e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00277fb:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0027800:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c002780a:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0027811:	e8 b1 ed fe ff       	call   c00165c7 <malloc>
c0027816:	89 04 24             	mov    DWORD PTR [esp],eax
c0027819:	89 c3                	mov    ebx,eax
c002781b:	e8 3e 09 00 00       	call   c002815e <RTC::RTC()>
c0027820:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c002782a:	5a                   	pop    edx
c002782b:	59                   	pop    ecx
c002782c:	53                   	push   ebx
c002782d:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027833:	e8 da 3d ff ff       	call   c001b612 <Device::addChild(Device*)>
c0027838:	8b 03                	mov    eax,DWORD PTR [ebx]
c002783a:	6a 00                	push   0x0
c002783c:	6a 00                	push   0x0
c002783e:	6a 00                	push   0x0
c0027840:	53                   	push   ebx
c0027841:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0027844:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0027849:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c002784f:	83 c4 28             	add    esp,0x28
c0027852:	5b                   	pop    ebx
c0027853:	c3                   	ret    

c0027854 <HalMakeBeep(int)>:
c0027854:	53                   	push   ebx
c0027855:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0027859:	85 db                	test   ebx,ebx
c002785b:	75 07                	jne    c0027864 <HalMakeBeep(int)+0x10>
c002785d:	e4 61                	in     al,0x61
c002785f:	83 e0 fc             	and    eax,0xfffffffc
c0027862:	eb 26                	jmp    c002788a <HalMakeBeep(int)+0x36>
c0027864:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0027869:	99                   	cdq    
c002786a:	f7 fb                	idiv   ebx
c002786c:	89 c1                	mov    ecx,eax
c002786e:	b0 b6                	mov    al,0xb6
c0027870:	e6 43                	out    0x43,al
c0027872:	88 c8                	mov    al,cl
c0027874:	e6 42                	out    0x42,al
c0027876:	89 c8                	mov    eax,ecx
c0027878:	c1 e8 08             	shr    eax,0x8
c002787b:	e6 42                	out    0x42,al
c002787d:	e4 61                	in     al,0x61
c002787f:	89 c2                	mov    edx,eax
c0027881:	83 ca 03             	or     edx,0x3
c0027884:	38 d0                	cmp    al,dl
c0027886:	74 04                	je     c002788c <HalMakeBeep(int)+0x38>
c0027888:	88 d0                	mov    al,dl
c002788a:	e6 61                	out    0x61,al
c002788c:	5b                   	pop    ebx
c002788d:	c3                   	ret    

c002788e <HalGetRand()>:
c002788e:	31 c0                	xor    eax,eax
c0027890:	c3                   	ret    

c0027891 <HalEndOfInterrupt(int)>:
c0027891:	80 3d 60 12 04 c0 00 	cmp    BYTE PTR ds:0xc0041260,0x0
c0027898:	74 23                	je     c00278bd <HalEndOfInterrupt(int)+0x2c>
c002789a:	83 ec 14             	sub    esp,0x14
c002789d:	6a 1b                	push   0x1b
c002789f:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c00278a5:	e8 ac e2 fe ff       	call   c0015b56 <Computer::rdmsr(unsigned int)>
c00278aa:	25 00 f0 ff ff       	and    eax,0xfffff000
c00278af:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00278b9:	83 c4 1c             	add    esp,0x1c
c00278bc:	c3                   	ret    
c00278bd:	e9 42 02 00 00       	jmp    c0027b04 <picEOI(int)>

c00278c2 <HalRestart()>:
c00278c2:	c3                   	ret    

c00278c3 <HalShutdown()>:
c00278c3:	c3                   	ret    

c00278c4 <HalSleep()>:
c00278c4:	c3                   	ret    
c00278c5:	66 90                	xchg   ax,ax
c00278c7:	90                   	nop

c00278c8 <picIoWait()>:
c00278c8:	eb 00                	jmp    c00278ca <picIoWait()+0x2>
c00278ca:	eb 00                	jmp    c00278cc <picIoWait()+0x4>
c00278cc:	90                   	nop
c00278cd:	c3                   	ret    
c00278ce:	66 90                	xchg   ax,ax

c00278d0 <picDisable()>:
c00278d0:	83 ec 10             	sub    esp,0x10
c00278d3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00278da:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00278df:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00278e3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00278e8:	ee                   	out    dx,al
c00278e9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00278f0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00278f5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00278f9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00278fe:	ee                   	out    dx,al
c00278ff:	90                   	nop
c0027900:	83 c4 10             	add    esp,0x10
c0027903:	c3                   	ret    

c0027904 <picGetIRQReg(int)>:
c0027904:	83 ec 10             	sub    esp,0x10
c0027907:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002790b:	0f b6 c0             	movzx  eax,al
c002790e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0027915:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0027919:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002791d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0027922:	ee                   	out    dx,al
c0027923:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027927:	0f b6 c0             	movzx  eax,al
c002792a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0027931:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0027935:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0027939:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002793e:	ee                   	out    dx,al
c002793f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0027946:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c002794b:	89 c2                	mov    edx,eax
c002794d:	ec                   	in     al,dx
c002794e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027952:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027956:	0f b6 c0             	movzx  eax,al
c0027959:	c1 e0 08             	shl    eax,0x8
c002795c:	89 c1                	mov    ecx,eax
c002795e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0027965:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c002796a:	89 c2                	mov    edx,eax
c002796c:	ec                   	in     al,dx
c002796d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0027971:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0027975:	0f b6 c0             	movzx  eax,al
c0027978:	09 c8                	or     eax,ecx
c002797a:	83 c4 10             	add    esp,0x10
c002797d:	c3                   	ret    
c002797e:	66 90                	xchg   ax,ax

c0027980 <picOpen()>:
c0027980:	83 ec 50             	sub    esp,0x50
c0027983:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c002798a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002798f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0027993:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027997:	ee                   	out    dx,al
c0027998:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c002799f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00279a4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00279a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00279ac:	ee                   	out    dx,al
c00279ad:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00279b5:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00279bd:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00279c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00279c8:	89 c2                	mov    edx,eax
c00279ca:	ec                   	in     al,dx
c00279cb:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00279cf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00279d3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00279d7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00279de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00279e2:	89 c2                	mov    edx,eax
c00279e4:	ec                   	in     al,dx
c00279e5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00279e9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00279ed:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00279f1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00279f8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00279fd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0027a01:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027a05:	ee                   	out    dx,al
c0027a06:	e8 bd fe ff ff       	call   c00278c8 <picIoWait()>
c0027a0b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0027a12:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0027a17:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0027a1b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0027a1f:	ee                   	out    dx,al
c0027a20:	e8 a3 fe ff ff       	call   c00278c8 <picIoWait()>
c0027a25:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0027a29:	0f b6 c0             	movzx  eax,al
c0027a2c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0027a33:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0027a37:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0027a3b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027a3f:	ee                   	out    dx,al
c0027a40:	e8 83 fe ff ff       	call   c00278c8 <picIoWait()>
c0027a45:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027a49:	0f b6 c0             	movzx  eax,al
c0027a4c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0027a53:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0027a57:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0027a5b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0027a5f:	ee                   	out    dx,al
c0027a60:	e8 63 fe ff ff       	call   c00278c8 <picIoWait()>
c0027a65:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0027a6c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0027a71:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0027a75:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0027a79:	ee                   	out    dx,al
c0027a7a:	e8 49 fe ff ff       	call   c00278c8 <picIoWait()>
c0027a7f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0027a86:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0027a8b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0027a8f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0027a93:	ee                   	out    dx,al
c0027a94:	e8 2f fe ff ff       	call   c00278c8 <picIoWait()>
c0027a99:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0027aa0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0027aa5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0027aa9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0027aad:	ee                   	out    dx,al
c0027aae:	e8 15 fe ff ff       	call   c00278c8 <picIoWait()>
c0027ab3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0027aba:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0027abf:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0027ac3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0027ac7:	ee                   	out    dx,al
c0027ac8:	e8 fb fd ff ff       	call   c00278c8 <picIoWait()>
c0027acd:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0027ad2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0027ad9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0027add:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0027ae1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0027ae5:	ee                   	out    dx,al
c0027ae6:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0027aeb:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0027af2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0027af6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0027afa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0027afe:	ee                   	out    dx,al
c0027aff:	90                   	nop
c0027b00:	83 c4 50             	add    esp,0x50
c0027b03:	c3                   	ret    

c0027b04 <picEOI(int)>:
c0027b04:	83 ec 10             	sub    esp,0x10
c0027b07:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0027b0c:	75 1e                	jne    c0027b2c <picEOI(int)+0x28>
c0027b0e:	6a 0b                	push   0xb
c0027b10:	e8 ef fd ff ff       	call   c0027904 <picGetIRQReg(int)>
c0027b15:	83 c4 04             	add    esp,0x4
c0027b18:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0027b1d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0027b22:	25 80 00 00 00       	and    eax,0x80
c0027b27:	74 73                	je     c0027b9c <picEOI(int)+0x98>
c0027b29:	8d 76 00             	lea    esi,[esi+0x0]
c0027b2c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0027b31:	75 31                	jne    c0027b64 <picEOI(int)+0x60>
c0027b33:	6a 0b                	push   0xb
c0027b35:	e8 ca fd ff ff       	call   c0027904 <picGetIRQReg(int)>
c0027b3a:	83 c4 04             	add    esp,0x4
c0027b3d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0027b42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027b46:	98                   	cwde   
c0027b47:	85 c0                	test   eax,eax
c0027b49:	78 19                	js     c0027b64 <picEOI(int)+0x60>
c0027b4b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0027b52:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0027b57:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027b5b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0027b60:	ee                   	out    dx,al
c0027b61:	eb 3d                	jmp    c0027ba0 <picEOI(int)+0x9c>
c0027b63:	90                   	nop
c0027b64:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0027b69:	7e 19                	jle    c0027b84 <picEOI(int)+0x80>
c0027b6b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0027b72:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0027b77:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0027b7b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0027b80:	ee                   	out    dx,al
c0027b81:	8d 76 00             	lea    esi,[esi+0x0]
c0027b84:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0027b8b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0027b90:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0027b94:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0027b99:	ee                   	out    dx,al
c0027b9a:	eb 04                	jmp    c0027ba0 <picEOI(int)+0x9c>
c0027b9c:	90                   	nop
c0027b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0027ba0:	83 c4 10             	add    esp,0x10
c0027ba3:	c3                   	ret    

c0027ba4 <RTC::open(int, int, void*)>:
c0027ba4:	31 c0                	xor    eax,eax
c0027ba6:	c3                   	ret    
c0027ba7:	90                   	nop

c0027ba8 <RTC::close(int, int, void*)>:
c0027ba8:	31 c0                	xor    eax,eax
c0027baa:	c3                   	ret    
c0027bab:	90                   	nop

c0027bac <RTC::timeInSecondsUTC()>:
c0027bac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027bb0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0027bb6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0027bbc:	c3                   	ret    
c0027bbd:	90                   	nop

c0027bbe <RTC::timeInDatetimeUTC()>:
c0027bbe:	53                   	push   ebx
c0027bbf:	83 ec 14             	sub    esp,0x14
c0027bc2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027bc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027bca:	8b 10                	mov    edx,DWORD PTR [eax]
c0027bcc:	50                   	push   eax
c0027bcd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0027bd0:	83 c4 0c             	add    esp,0xc
c0027bd3:	52                   	push   edx
c0027bd4:	50                   	push   eax
c0027bd5:	53                   	push   ebx
c0027bd6:	e8 ab 37 ff ff       	call   c001b386 <secondsToDatetime(unsigned long long)>
c0027bdb:	89 d8                	mov    eax,ebx
c0027bdd:	83 c4 14             	add    esp,0x14
c0027be0:	5b                   	pop    ebx
c0027be1:	c2 04 00             	ret    0x4

c0027be4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0027be4:	56                   	push   esi
c0027be5:	53                   	push   ebx
c0027be6:	83 ec 14             	sub    esp,0x14
c0027be9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0027bed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0027bef:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0027bf2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0027bf6:	52                   	push   edx
c0027bf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027bfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027bff:	50                   	push   eax
c0027c00:	e8 81 37 ff ff       	call   c001b386 <secondsToDatetime(unsigned long long)>
c0027c05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027c09:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027c0d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0027c11:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0027c15:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0027c19:	89 f0                	mov    eax,esi
c0027c1b:	83 c4 20             	add    esp,0x20
c0027c1e:	5b                   	pop    ebx
c0027c1f:	5e                   	pop    esi
c0027c20:	ff e0                	jmp    eax

c0027c22 <RTC::~RTC()>:
c0027c22:	83 ec 0c             	sub    esp,0xc
c0027c25:	ba e4 3a 03 c0       	mov    edx,0xc0033ae4
c0027c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c2e:	89 10                	mov    DWORD PTR [eax],edx
c0027c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c34:	83 ec 0c             	sub    esp,0xc
c0027c37:	50                   	push   eax
c0027c38:	e8 db 34 ff ff       	call   c001b118 <Clock::~Clock()>
c0027c3d:	83 c4 10             	add    esp,0x10
c0027c40:	90                   	nop
c0027c41:	83 c4 0c             	add    esp,0xc
c0027c44:	c3                   	ret    
c0027c45:	90                   	nop

c0027c46 <RTC::~RTC()>:
c0027c46:	83 ec 0c             	sub    esp,0xc
c0027c49:	83 ec 0c             	sub    esp,0xc
c0027c4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c50:	e8 cd ff ff ff       	call   c0027c22 <RTC::~RTC()>
c0027c55:	83 c4 10             	add    esp,0x10
c0027c58:	83 ec 08             	sub    esp,0x8
c0027c5b:	68 60 01 00 00       	push   0x160
c0027c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c64:	e8 bf 16 ff ff       	call   c0019328 <operator delete(void*, unsigned long)>
c0027c69:	83 c4 10             	add    esp,0x10
c0027c6c:	83 c4 0c             	add    esp,0xc
c0027c6f:	c3                   	ret    

c0027c70 <RTC::get_update_in_progress_flag()>:
c0027c70:	83 ec 14             	sub    esp,0x14
c0027c73:	6a 0a                	push   0xa
c0027c75:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027c7b:	e8 8e df fe ff       	call   c0015c0e <Computer::readCMOS(unsigned char)>
c0027c80:	83 c4 1c             	add    esp,0x1c
c0027c83:	0f b6 c0             	movzx  eax,al
c0027c86:	c1 e8 07             	shr    eax,0x7
c0027c89:	c3                   	ret    

c0027c8a <RTC::completeRTCRefresh()>:
c0027c8a:	55                   	push   ebp
c0027c8b:	57                   	push   edi
c0027c8c:	56                   	push   esi
c0027c8d:	53                   	push   ebx
c0027c8e:	83 ec 3c             	sub    esp,0x3c
c0027c91:	8b 1d ec 03 04 c0    	mov    ebx,DWORD PTR ds:0xc00403ec
c0027c97:	83 ec 0c             	sub    esp,0xc
c0027c9a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0027c9e:	e8 cd ff ff ff       	call   c0027c70 <RTC::get_update_in_progress_flag()>
c0027ca3:	83 c4 10             	add    esp,0x10
c0027ca6:	84 c0                	test   al,al
c0027ca8:	74 0e                	je     c0027cb8 <RTC::completeRTCRefresh()+0x2e>
c0027caa:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0027cb0:	3b 05 ec 03 04 c0    	cmp    eax,DWORD PTR ds:0xc00403ec
c0027cb6:	73 df                	jae    c0027c97 <RTC::completeRTCRefresh()+0xd>
c0027cb8:	51                   	push   ecx
c0027cb9:	51                   	push   ecx
c0027cba:	6a 00                	push   0x0
c0027cbc:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027cc2:	e8 47 df fe ff       	call   c0015c0e <Computer::readCMOS(unsigned char)>
c0027cc7:	5b                   	pop    ebx
c0027cc8:	89 c7                	mov    edi,eax
c0027cca:	5e                   	pop    esi
c0027ccb:	6a 02                	push   0x2
c0027ccd:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027cd3:	e8 36 df fe ff       	call   c0015c0e <Computer::readCMOS(unsigned char)>
c0027cd8:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0027cdc:	5d                   	pop    ebp
c0027cdd:	58                   	pop    eax
c0027cde:	6a 04                	push   0x4
c0027ce0:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027ce6:	e8 23 df fe ff       	call   c0015c0e <Computer::readCMOS(unsigned char)>
c0027ceb:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0027cef:	58                   	pop    eax
c0027cf0:	5a                   	pop    edx
c0027cf1:	6a 07                	push   0x7
c0027cf3:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027cf9:	e8 10 df fe ff       	call   c0015c0e <Computer::readCMOS(unsigned char)>
c0027cfe:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0027d02:	59                   	pop    ecx
c0027d03:	5b                   	pop    ebx
c0027d04:	6a 08                	push   0x8
c0027d06:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027d0c:	e8 fd de fe ff       	call   c0015c0e <Computer::readCMOS(unsigned char)>
c0027d11:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0027d15:	5e                   	pop    esi
c0027d16:	5d                   	pop    ebp
c0027d17:	6a 09                	push   0x9
c0027d19:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027d1f:	e8 ea de fe ff       	call   c0015c0e <Computer::readCMOS(unsigned char)>
c0027d24:	0f b6 c0             	movzx  eax,al
c0027d27:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0027d2b:	83 c4 10             	add    esp,0x10
c0027d2e:	8b 1d ec 03 04 c0    	mov    ebx,DWORD PTR ds:0xc00403ec
c0027d34:	83 ec 0c             	sub    esp,0xc
c0027d37:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0027d3b:	e8 30 ff ff ff       	call   c0027c70 <RTC::get_update_in_progress_flag()>
c0027d40:	83 c4 10             	add    esp,0x10
c0027d43:	84 c0                	test   al,al
c0027d45:	74 0e                	je     c0027d55 <RTC::completeRTCRefresh()+0xcb>
c0027d47:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0027d4d:	3b 05 ec 03 04 c0    	cmp    eax,DWORD PTR ds:0xc00403ec
c0027d53:	73 df                	jae    c0027d34 <RTC::completeRTCRefresh()+0xaa>
c0027d55:	51                   	push   ecx
c0027d56:	51                   	push   ecx
c0027d57:	6a 00                	push   0x0
c0027d59:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027d5f:	e8 aa de fe ff       	call   c0015c0e <Computer::readCMOS(unsigned char)>
c0027d64:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027d68:	5b                   	pop    ebx
c0027d69:	5e                   	pop    esi
c0027d6a:	6a 02                	push   0x2
c0027d6c:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027d72:	e8 97 de fe ff       	call   c0015c0e <Computer::readCMOS(unsigned char)>
c0027d77:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0027d7b:	5d                   	pop    ebp
c0027d7c:	58                   	pop    eax
c0027d7d:	6a 04                	push   0x4
c0027d7f:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027d85:	e8 84 de fe ff       	call   c0015c0e <Computer::readCMOS(unsigned char)>
c0027d8a:	88 c3                	mov    bl,al
c0027d8c:	58                   	pop    eax
c0027d8d:	5a                   	pop    edx
c0027d8e:	6a 07                	push   0x7
c0027d90:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027d96:	e8 73 de fe ff       	call   c0015c0e <Computer::readCMOS(unsigned char)>
c0027d9b:	59                   	pop    ecx
c0027d9c:	89 c6                	mov    esi,eax
c0027d9e:	5d                   	pop    ebp
c0027d9f:	6a 08                	push   0x8
c0027da1:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027da7:	e8 62 de fe ff       	call   c0015c0e <Computer::readCMOS(unsigned char)>
c0027dac:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0027db0:	58                   	pop    eax
c0027db1:	5a                   	pop    edx
c0027db2:	6a 09                	push   0x9
c0027db4:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027dba:	e8 4f de fe ff       	call   c0015c0e <Computer::readCMOS(unsigned char)>
c0027dbf:	89 f9                	mov    ecx,edi
c0027dc1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0027dc5:	0f b6 e8             	movzx  ebp,al
c0027dc8:	83 c4 10             	add    esp,0x10
c0027dcb:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0027dcf:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027dd4:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0027dd9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0027ddd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0027de1:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0027de5:	0f 94 c0             	sete   al
c0027de8:	0f b6 fb             	movzx  edi,bl
c0027deb:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c0027def:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0027df4:	0f 94 c2             	sete   dl
c0027df7:	21 d0                	and    eax,edx
c0027df9:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0027dfd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0027e01:	0f 94 c2             	sete   dl
c0027e04:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0027e08:	21 c2                	and    edx,eax
c0027e0a:	89 f0                	mov    eax,esi
c0027e0c:	0f b6 c0             	movzx  eax,al
c0027e0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0027e13:	89 f0                	mov    eax,esi
c0027e15:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0027e19:	0f 94 c0             	sete   al
c0027e1c:	21 d0                	and    eax,edx
c0027e1e:	31 d2                	xor    edx,edx
c0027e20:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0027e24:	0f 94 c2             	sete   dl
c0027e27:	85 c2                	test   edx,eax
c0027e29:	75 27                	jne    c0027e52 <RTC::completeRTCRefresh()+0x1c8>
c0027e2b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0027e2f:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0027e33:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0027e37:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0027e3b:	89 f0                	mov    eax,esi
c0027e3d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0027e41:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0027e45:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027e49:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027e4d:	e9 dc fe ff ff       	jmp    c0027d2e <RTC::completeRTCRefresh()+0xa4>
c0027e52:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0027e56:	75 d3                	jne    c0027e2b <RTC::completeRTCRefresh()+0x1a1>
c0027e58:	52                   	push   edx
c0027e59:	52                   	push   edx
c0027e5a:	6a 0b                	push   0xb
c0027e5c:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027e62:	e8 a7 dd fe ff       	call   c0015c0e <Computer::readCMOS(unsigned char)>
c0027e67:	83 c4 10             	add    esp,0x10
c0027e6a:	a8 04                	test   al,0x4
c0027e6c:	75 7a                	jne    c0027ee8 <RTC::completeRTCRefresh()+0x25e>
c0027e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027e72:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027e76:	83 e1 0f             	and    ecx,0xf
c0027e79:	c1 ea 04             	shr    edx,0x4
c0027e7c:	c1 ef 04             	shr    edi,0x4
c0027e7f:	6b d2 0a             	imul   edx,edx,0xa
c0027e82:	83 e6 0f             	and    esi,0xf
c0027e85:	01 d1                	add    ecx,edx
c0027e87:	c1 ed 04             	shr    ebp,0x4
c0027e8a:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0027e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0027e92:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027e96:	c1 ea 04             	shr    edx,0x4
c0027e99:	83 e1 0f             	and    ecx,0xf
c0027e9c:	6b d2 0a             	imul   edx,edx,0xa
c0027e9f:	6b ed 0a             	imul   ebp,ebp,0xa
c0027ea2:	01 d1                	add    ecx,edx
c0027ea4:	89 fa                	mov    edx,edi
c0027ea6:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0027eaa:	83 e2 07             	and    edx,0x7
c0027ead:	89 d9                	mov    ecx,ebx
c0027eaf:	6b d2 0a             	imul   edx,edx,0xa
c0027eb2:	83 e1 0f             	and    ecx,0xf
c0027eb5:	83 e3 80             	and    ebx,0xffffff80
c0027eb8:	01 d1                	add    ecx,edx
c0027eba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027ebe:	09 cb                	or     ebx,ecx
c0027ec0:	c1 ea 04             	shr    edx,0x4
c0027ec3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0027ec7:	6b d2 0a             	imul   edx,edx,0xa
c0027eca:	83 e1 0f             	and    ecx,0xf
c0027ecd:	01 d6                	add    esi,edx
c0027ecf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027ed3:	c1 ea 04             	shr    edx,0x4
c0027ed6:	6b d2 0a             	imul   edx,edx,0xa
c0027ed9:	01 d1                	add    ecx,edx
c0027edb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027edf:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0027ee3:	83 e2 0f             	and    edx,0xf
c0027ee6:	01 d5                	add    ebp,edx
c0027ee8:	a8 02                	test   al,0x2
c0027eea:	75 15                	jne    c0027f01 <RTC::completeRTCRefresh()+0x277>
c0027eec:	f6 c3 80             	test   bl,0x80
c0027eef:	74 10                	je     c0027f01 <RTC::completeRTCRefresh()+0x277>
c0027ef1:	83 e3 7f             	and    ebx,0x7f
c0027ef4:	b9 18 00 00 00       	mov    ecx,0x18
c0027ef9:	8d 43 0c             	lea    eax,[ebx+0xc]
c0027efc:	99                   	cdq    
c0027efd:	f7 f9                	idiv   ecx
c0027eff:	88 d3                	mov    bl,dl
c0027f01:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0027f07:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0027f0d:	77 06                	ja     c0027f15 <RTC::completeRTCRefresh()+0x28b>
c0027f0f:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0027f15:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027f1a:	31 c9                	xor    ecx,ecx
c0027f1c:	c1 e0 10             	shl    eax,0x10
c0027f1f:	89 cd                	mov    ebp,ecx
c0027f21:	c1 e7 10             	shl    edi,0x10
c0027f24:	31 d2                	xor    edx,edx
c0027f26:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0027f2c:	09 c5                	or     ebp,eax
c0027f2e:	89 f0                	mov    eax,esi
c0027f30:	89 e9                	mov    ecx,ebp
c0027f32:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0027f36:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0027f3a:	88 c2                	mov    dl,al
c0027f3c:	88 d9                	mov    cl,bl
c0027f3e:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0027f42:	0f b7 c2             	movzx  eax,dx
c0027f45:	09 f8                	or     eax,edi
c0027f47:	89 c2                	mov    edx,eax
c0027f49:	50                   	push   eax
c0027f4a:	50                   	push   eax
c0027f4b:	51                   	push   ecx
c0027f4c:	52                   	push   edx
c0027f4d:	e8 b5 32 ff ff       	call   c001b207 <datetimeToSeconds(datetime_t)>
c0027f52:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0027f56:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0027f5c:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0027f62:	83 c4 4c             	add    esp,0x4c
c0027f65:	5b                   	pop    ebx
c0027f66:	5e                   	pop    esi
c0027f67:	5f                   	pop    edi
c0027f68:	5d                   	pop    ebp
c0027f69:	c3                   	ret    

c0027f6a <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0027f6a:	55                   	push   ebp
c0027f6b:	57                   	push   edi
c0027f6c:	56                   	push   esi
c0027f6d:	53                   	push   ebx
c0027f6e:	83 ec 30             	sub    esp,0x30
c0027f71:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0027f75:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0027f79:	6a 00                	push   0x0
c0027f7b:	6a 00                	push   0x0
c0027f7d:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027f83:	e8 a0 dd fe ff       	call   c0015d28 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027f88:	83 c4 0c             	add    esp,0xc
c0027f8b:	6a 00                	push   0x0
c0027f8d:	6a 02                	push   0x2
c0027f8f:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027f95:	e8 8e dd fe ff       	call   c0015d28 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027f9a:	31 d2                	xor    edx,edx
c0027f9c:	89 f9                	mov    ecx,edi
c0027f9e:	89 f8                	mov    eax,edi
c0027fa0:	c1 e9 10             	shr    ecx,0x10
c0027fa3:	0f b6 c4             	movzx  eax,ah
c0027fa6:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0027faa:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0027fae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027fb2:	b9 64 00 00 00       	mov    ecx,0x64
c0027fb7:	89 f0                	mov    eax,esi
c0027fb9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0027fbd:	89 f0                	mov    eax,esi
c0027fbf:	0f b6 c4             	movzx  eax,ah
c0027fc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0027fc6:	89 f0                	mov    eax,esi
c0027fc8:	c1 e8 10             	shr    eax,0x10
c0027fcb:	f7 f1                	div    ecx
c0027fcd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0027fd1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0027fd5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0027fd9:	59                   	pop    ecx
c0027fda:	5b                   	pop    ebx
c0027fdb:	89 fb                	mov    ebx,edi
c0027fdd:	6a 0b                	push   0xb
c0027fdf:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027fe5:	e8 24 dc fe ff       	call   c0015c0e <Computer::readCMOS(unsigned char)>
c0027fea:	83 c4 10             	add    esp,0x10
c0027fed:	89 c5                	mov    ebp,eax
c0027fef:	a8 04                	test   al,0x4
c0027ff1:	75 6e                	jne    c0028061 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0027ff3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0027ff7:	31 d2                	xor    edx,edx
c0027ff9:	0f b6 c1             	movzx  eax,cl
c0027ffc:	b9 0a 00 00 00       	mov    ecx,0xa
c0028001:	f7 f1                	div    ecx
c0028003:	c1 e0 04             	shl    eax,0x4
c0028006:	09 d0                	or     eax,edx
c0028008:	31 d2                	xor    edx,edx
c002800a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002800e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0028013:	f7 f1                	div    ecx
c0028015:	c1 e0 04             	shl    eax,0x4
c0028018:	09 d0                	or     eax,edx
c002801a:	31 d2                	xor    edx,edx
c002801c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028020:	0f b6 c3             	movzx  eax,bl
c0028023:	f7 f1                	div    ecx
c0028025:	c1 e0 04             	shl    eax,0x4
c0028028:	09 d0                	or     eax,edx
c002802a:	31 d2                	xor    edx,edx
c002802c:	89 c3                	mov    ebx,eax
c002802e:	89 f0                	mov    eax,esi
c0028030:	0f b6 c0             	movzx  eax,al
c0028033:	f7 f1                	div    ecx
c0028035:	c1 e0 04             	shl    eax,0x4
c0028038:	09 d0                	or     eax,edx
c002803a:	31 d2                	xor    edx,edx
c002803c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0028040:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028045:	f7 f1                	div    ecx
c0028047:	c1 e0 04             	shl    eax,0x4
c002804a:	09 d0                	or     eax,edx
c002804c:	31 d2                	xor    edx,edx
c002804e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028052:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0028056:	f7 f1                	div    ecx
c0028058:	c1 e0 04             	shl    eax,0x4
c002805b:	09 d0                	or     eax,edx
c002805d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028061:	83 e5 02             	and    ebp,0x2
c0028064:	75 1e                	jne    c0028084 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0028066:	0f b6 c3             	movzx  eax,bl
c0028069:	83 f8 0b             	cmp    eax,0xb
c002806c:	76 10                	jbe    c002807e <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c002806e:	8d 53 f4             	lea    edx,[ebx-0xc]
c0028071:	88 d3                	mov    bl,dl
c0028073:	84 d2                	test   dl,dl
c0028075:	75 02                	jne    c0028079 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0028077:	b3 0c                	mov    bl,0xc
c0028079:	83 cb 80             	or     ebx,0xffffff80
c002807c:	eb 06                	jmp    c0028084 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c002807e:	85 c0                	test   eax,eax
c0028080:	75 02                	jne    c0028084 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0028082:	b3 0c                	mov    bl,0xc
c0028084:	0f b6 db             	movzx  ebx,bl
c0028087:	50                   	push   eax
c0028088:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c002808d:	52                   	push   edx
c002808e:	6a 00                	push   0x0
c0028090:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0028096:	e8 8d dc fe ff       	call   c0015d28 <Computer::writeCMOS(unsigned char, unsigned char)>
c002809b:	83 c4 0c             	add    esp,0xc
c002809e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00280a3:	50                   	push   eax
c00280a4:	6a 02                	push   0x2
c00280a6:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c00280ac:	e8 77 dc fe ff       	call   c0015d28 <Computer::writeCMOS(unsigned char, unsigned char)>
c00280b1:	83 c4 0c             	add    esp,0xc
c00280b4:	53                   	push   ebx
c00280b5:	6a 04                	push   0x4
c00280b7:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c00280bd:	e8 66 dc fe ff       	call   c0015d28 <Computer::writeCMOS(unsigned char, unsigned char)>
c00280c2:	83 c4 0c             	add    esp,0xc
c00280c5:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00280ca:	52                   	push   edx
c00280cb:	6a 07                	push   0x7
c00280cd:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c00280d3:	e8 50 dc fe ff       	call   c0015d28 <Computer::writeCMOS(unsigned char, unsigned char)>
c00280d8:	83 c4 0c             	add    esp,0xc
c00280db:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00280e0:	50                   	push   eax
c00280e1:	6a 08                	push   0x8
c00280e3:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c00280e9:	e8 3a dc fe ff       	call   c0015d28 <Computer::writeCMOS(unsigned char, unsigned char)>
c00280ee:	83 c4 0c             	add    esp,0xc
c00280f1:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00280f6:	55                   	push   ebp
c00280f7:	6a 09                	push   0x9
c00280f9:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c00280ff:	e8 24 dc fe ff       	call   c0015d28 <Computer::writeCMOS(unsigned char, unsigned char)>
c0028104:	5a                   	pop    edx
c0028105:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0028109:	e8 7c fb ff ff       	call   c0027c8a <RTC::completeRTCRefresh()>
c002810e:	83 c4 3c             	add    esp,0x3c
c0028111:	b0 01                	mov    al,0x1
c0028113:	5b                   	pop    ebx
c0028114:	5e                   	pop    esi
c0028115:	5f                   	pop    edi
c0028116:	5d                   	pop    ebp
c0028117:	c3                   	ret    

c0028118 <rtcIRQHandler(regs*, void*)>:
c0028118:	53                   	push   ebx
c0028119:	83 ec 10             	sub    esp,0x10
c002811c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0028120:	6a 0c                	push   0xc
c0028122:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0028128:	e8 e1 da fe ff       	call   c0015c0e <Computer::readCMOS(unsigned char)>
c002812d:	83 c4 10             	add    esp,0x10
c0028130:	a8 80                	test   al,0x80
c0028132:	74 24                	je     c0028158 <rtcIRQHandler(regs*, void*)+0x40>
c0028134:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c002813b:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0028142:	66 ff 05 78 12 04 c0 	inc    WORD PTR ds:0xc0041278
c0028149:	75 0d                	jne    c0028158 <rtcIRQHandler(regs*, void*)+0x40>
c002814b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c002814f:	83 c4 08             	add    esp,0x8
c0028152:	5b                   	pop    ebx
c0028153:	e9 32 fb ff ff       	jmp    c0027c8a <RTC::completeRTCRefresh()>
c0028158:	83 c4 08             	add    esp,0x8
c002815b:	5b                   	pop    ebx
c002815c:	c3                   	ret    
c002815d:	90                   	nop

c002815e <RTC::RTC()>:
c002815e:	83 ec 1c             	sub    esp,0x1c
c0028161:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028165:	83 ec 08             	sub    esp,0x8
c0028168:	68 c7 3a 03 c0       	push   0xc0033ac7
c002816d:	50                   	push   eax
c002816e:	e8 6f 2f ff ff       	call   c001b0e2 <Clock::Clock(char const*)>
c0028173:	83 c4 10             	add    esp,0x10
c0028176:	ba e4 3a 03 c0       	mov    edx,0xc0033ae4
c002817b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002817f:	89 10                	mov    DWORD PTR [eax],edx
c0028181:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028185:	83 ec 0c             	sub    esp,0xc
c0028188:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002818c:	6a 01                	push   0x1
c002818e:	68 18 81 02 c0       	push   0xc0028118
c0028193:	6a 08                	push   0x8
c0028195:	50                   	push   eax
c0028196:	e8 23 34 ff ff       	call   c001b5be <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002819b:	83 c4 20             	add    esp,0x20
c002819e:	89 c2                	mov    edx,eax
c00281a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00281a4:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00281aa:	fa                   	cli    
c00281ab:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00281b0:	83 c0 01             	add    eax,0x1
c00281b3:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00281b8:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c00281bd:	83 ec 08             	sub    esp,0x8
c00281c0:	6a 0b                	push   0xb
c00281c2:	50                   	push   eax
c00281c3:	e8 46 da fe ff       	call   c0015c0e <Computer::readCMOS(unsigned char)>
c00281c8:	83 c4 10             	add    esp,0x10
c00281cb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00281cf:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c00281d4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00281d8:	83 ca 10             	or     edx,0x10
c00281db:	0f b6 d2             	movzx  edx,dl
c00281de:	83 ec 04             	sub    esp,0x4
c00281e1:	52                   	push   edx
c00281e2:	6a 0b                	push   0xb
c00281e4:	50                   	push   eax
c00281e5:	e8 3e db fe ff       	call   c0015d28 <Computer::writeCMOS(unsigned char, unsigned char)>
c00281ea:	83 c4 10             	add    esp,0x10
c00281ed:	83 ec 0c             	sub    esp,0xc
c00281f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00281f4:	e8 91 fa ff ff       	call   c0027c8a <RTC::completeRTCRefresh()>
c00281f9:	83 c4 10             	add    esp,0x10
c00281fc:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0028201:	83 e8 01             	sub    eax,0x1
c0028204:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0028209:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002820e:	85 c0                	test   eax,eax
c0028210:	75 01                	jne    c0028213 <RTC::RTC()+0xb5>
c0028212:	fb                   	sti    
c0028213:	90                   	nop
c0028214:	83 c4 1c             	add    esp,0x1c
c0028217:	c3                   	ret    

c0028218 <HalConsoleScroll(int, int)>:
c0028218:	83 ec 10             	sub    esp,0x10
c002821b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0028223:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c002822b:	90                   	nop
c002822c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0028231:	0f 8f e1 00 00 00    	jg     c0028318 <HalConsoleScroll(int, int)+0x100>
c0028237:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002823f:	90                   	nop
c0028240:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0028248:	0f 8f be 00 00 00    	jg     c002830c <HalConsoleScroll(int, int)+0xf4>
c002824e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028252:	89 d0                	mov    eax,edx
c0028254:	c1 e0 02             	shl    eax,0x2
c0028257:	01 d0                	add    eax,edx
c0028259:	c1 e0 05             	shl    eax,0x5
c002825c:	89 c2                	mov    edx,eax
c002825e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028262:	01 d0                	add    eax,edx
c0028264:	89 c2                	mov    edx,eax
c0028266:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002826a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c002826d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028271:	89 d0                	mov    eax,edx
c0028273:	c1 e0 02             	shl    eax,0x2
c0028276:	01 d0                	add    eax,edx
c0028278:	c1 e0 05             	shl    eax,0x5
c002827b:	89 c2                	mov    edx,eax
c002827d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028281:	01 d0                	add    eax,edx
c0028283:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0028289:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002828d:	01 c2                	add    edx,eax
c002828f:	8a 01                	mov    al,BYTE PTR [ecx]
c0028291:	88 02                	mov    BYTE PTR [edx],al
c0028293:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0028298:	75 66                	jne    c0028300 <HalConsoleScroll(int, int)+0xe8>
c002829a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002829e:	83 e0 01             	and    eax,0x1
c00282a1:	74 39                	je     c00282dc <HalConsoleScroll(int, int)+0xc4>
c00282a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00282a7:	83 e0 0f             	and    eax,0xf
c00282aa:	88 c2                	mov    dl,al
c00282ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00282b0:	c1 e0 04             	shl    eax,0x4
c00282b3:	09 d0                	or     eax,edx
c00282b5:	88 c1                	mov    cl,al
c00282b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00282bb:	89 d0                	mov    eax,edx
c00282bd:	c1 e0 02             	shl    eax,0x2
c00282c0:	01 d0                	add    eax,edx
c00282c2:	c1 e0 05             	shl    eax,0x5
c00282c5:	89 c2                	mov    edx,eax
c00282c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00282cb:	01 d0                	add    eax,edx
c00282cd:	89 c2                	mov    edx,eax
c00282cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00282d3:	01 d0                	add    eax,edx
c00282d5:	88 ca                	mov    dl,cl
c00282d7:	88 10                	mov    BYTE PTR [eax],dl
c00282d9:	eb 25                	jmp    c0028300 <HalConsoleScroll(int, int)+0xe8>
c00282db:	90                   	nop
c00282dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00282e0:	89 d0                	mov    eax,edx
c00282e2:	c1 e0 02             	shl    eax,0x2
c00282e5:	01 d0                	add    eax,edx
c00282e7:	c1 e0 05             	shl    eax,0x5
c00282ea:	89 c2                	mov    edx,eax
c00282ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00282f0:	01 d0                	add    eax,edx
c00282f2:	89 c2                	mov    edx,eax
c00282f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00282f8:	01 d0                	add    eax,edx
c00282fa:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00282fd:	8d 76 00             	lea    esi,[esi+0x0]
c0028300:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0028305:	e9 36 ff ff ff       	jmp    c0028240 <HalConsoleScroll(int, int)+0x28>
c002830a:	66 90                	xchg   ax,ax
c002830c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0028311:	e9 16 ff ff ff       	jmp    c002822c <HalConsoleScroll(int, int)+0x14>
c0028316:	66 90                	xchg   ax,ax
c0028318:	90                   	nop
c0028319:	83 c4 10             	add    esp,0x10
c002831c:	c3                   	ret    
c002831d:	8d 76 00             	lea    esi,[esi+0x0]

c0028320 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0028320:	83 ec 14             	sub    esp,0x14
c0028323:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0028327:	88 04 24             	mov    BYTE PTR [esp],al
c002832a:	8a 04 24             	mov    al,BYTE PTR [esp]
c002832d:	0f b6 c0             	movzx  eax,al
c0028330:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0028334:	89 d1                	mov    ecx,edx
c0028336:	83 e1 0f             	and    ecx,0xf
c0028339:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002833d:	c1 e2 04             	shl    edx,0x4
c0028340:	0f b6 d2             	movzx  edx,dl
c0028343:	09 ca                	or     edx,ecx
c0028345:	c1 e2 08             	shl    edx,0x8
c0028348:	09 d0                	or     eax,edx
c002834a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c002834f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0028357:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002835b:	89 d0                	mov    eax,edx
c002835d:	c1 e0 02             	shl    eax,0x2
c0028360:	01 d0                	add    eax,edx
c0028362:	c1 e0 04             	shl    eax,0x4
c0028365:	89 c2                	mov    edx,eax
c0028367:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002836b:	01 d0                	add    eax,edx
c002836d:	01 c0                	add    eax,eax
c002836f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0028373:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028377:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c002837c:	66 89 02             	mov    WORD PTR [edx],ax
c002837f:	90                   	nop
c0028380:	83 c4 14             	add    esp,0x14
c0028383:	c3                   	ret    

c0028384 <HalConsoleCursorUpdate(int, int)>:
c0028384:	83 ec 20             	sub    esp,0x20
c0028387:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002838b:	89 c2                	mov    edx,eax
c002838d:	c1 e2 02             	shl    edx,0x2
c0028390:	01 d0                	add    eax,edx
c0028392:	c1 e0 04             	shl    eax,0x4
c0028395:	89 c2                	mov    edx,eax
c0028397:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002839b:	01 d0                	add    eax,edx
c002839d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00283a2:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00283a9:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00283ae:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00283b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00283b6:	ee                   	out    dx,al
c00283b7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00283bc:	0f b6 c0             	movzx  eax,al
c00283bf:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00283c6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00283ca:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00283ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283d2:	ee                   	out    dx,al
c00283d3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00283da:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00283df:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00283e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00283e7:	ee                   	out    dx,al
c00283e8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00283ed:	c1 e8 08             	shr    eax,0x8
c00283f0:	0f b6 c0             	movzx  eax,al
c00283f3:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00283fa:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00283fe:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0028402:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0028406:	ee                   	out    dx,al
c0028407:	90                   	nop
c0028408:	83 c4 20             	add    esp,0x20
c002840b:	c3                   	ret    

c002840c <FAT::getName()>:
c002840c:	b8 18 3b 03 c0       	mov    eax,0xc0033b18
c0028411:	c3                   	ret    
c0028412:	66 90                	xchg   ax,ax

c0028414 <FAT::tell(void*, unsigned long long*)>:
c0028414:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0028419:	75 09                	jne    c0028424 <FAT::tell(void*, unsigned long long*)+0x10>
c002841b:	b8 04 00 00 00       	mov    eax,0x4
c0028420:	c3                   	ret    
c0028421:	8d 76 00             	lea    esi,[esi+0x0]
c0028424:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0028429:	75 09                	jne    c0028434 <FAT::tell(void*, unsigned long long*)+0x20>
c002842b:	b8 04 00 00 00       	mov    eax,0x4
c0028430:	c3                   	ret    
c0028431:	8d 76 00             	lea    esi,[esi+0x0]
c0028434:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028438:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002843b:	ba 00 00 00 00       	mov    edx,0x0
c0028440:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0028444:	89 01                	mov    DWORD PTR [ecx],eax
c0028446:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0028449:	b8 00 00 00 00       	mov    eax,0x0
c002844e:	c3                   	ret    
c002844f:	90                   	nop

c0028450 <FAT::stat(void*, unsigned long long*)>:
c0028450:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0028455:	75 09                	jne    c0028460 <FAT::stat(void*, unsigned long long*)+0x10>
c0028457:	b8 04 00 00 00       	mov    eax,0x4
c002845c:	c3                   	ret    
c002845d:	8d 76 00             	lea    esi,[esi+0x0]
c0028460:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0028465:	75 09                	jne    c0028470 <FAT::stat(void*, unsigned long long*)+0x20>
c0028467:	b8 04 00 00 00       	mov    eax,0x4
c002846c:	c3                   	ret    
c002846d:	8d 76 00             	lea    esi,[esi+0x0]
c0028470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028474:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0028477:	ba 00 00 00 00       	mov    edx,0x0
c002847c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0028480:	89 01                	mov    DWORD PTR [ecx],eax
c0028482:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0028485:	b8 00 00 00 00       	mov    eax,0x0
c002848a:	c3                   	ret    
c002848b:	90                   	nop

c002848c <FAT::~FAT()>:
c002848c:	83 ec 0c             	sub    esp,0xc
c002848f:	ba 64 3b 03 c0       	mov    edx,0xc0033b64
c0028494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028498:	89 10                	mov    DWORD PTR [eax],edx
c002849a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002849e:	83 ec 0c             	sub    esp,0xc
c00284a1:	50                   	push   eax
c00284a2:	e8 37 1e ff ff       	call   c001a2de <Filesystem::~Filesystem()>
c00284a7:	83 c4 10             	add    esp,0x10
c00284aa:	90                   	nop
c00284ab:	83 c4 0c             	add    esp,0xc
c00284ae:	c3                   	ret    
c00284af:	90                   	nop

c00284b0 <FAT::~FAT()>:
c00284b0:	83 ec 0c             	sub    esp,0xc
c00284b3:	83 ec 0c             	sub    esp,0xc
c00284b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284ba:	e8 cd ff ff ff       	call   c002848c <FAT::~FAT()>
c00284bf:	83 c4 10             	add    esp,0x10
c00284c2:	83 ec 08             	sub    esp,0x8
c00284c5:	6a 08                	push   0x8
c00284c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284cb:	e8 58 0e ff ff       	call   c0019328 <operator delete(void*, unsigned long)>
c00284d0:	83 c4 10             	add    esp,0x10
c00284d3:	83 c4 0c             	add    esp,0xc
c00284d6:	c3                   	ret    
c00284d7:	90                   	nop

c00284d8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00284d8:	83 ec 1c             	sub    esp,0x1c
c00284db:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00284e2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00284e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00284eb:	8b 04 85 a0 12 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbed60]
c00284f2:	83 f8 ff             	cmp    eax,0xffffffff
c00284f5:	75 35                	jne    c002852c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00284f7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00284fb:	88 c2                	mov    dl,al
c00284fd:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c0028502:	01 d0                	add    eax,edx
c0028504:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0028508:	8b 15 80 12 04 c0    	mov    edx,DWORD PTR ds:0xc0041280
c002850e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028512:	89 14 85 a0 12 04 c0 	mov    DWORD PTR [eax*4-0x3ffbed60],edx
c0028519:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c002851e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0028522:	89 14 85 20 13 04 c0 	mov    DWORD PTR [eax*4-0x3ffbece0],edx
c0028529:	eb 19                	jmp    c0028544 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c002852b:	90                   	nop
c002852c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0028530:	88 c2                	mov    dl,al
c0028532:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028536:	8b 04 85 a0 12 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbed60]
c002853d:	01 d0                	add    eax,edx
c002853f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0028543:	90                   	nop
c0028544:	83 ec 04             	sub    esp,0x4
c0028547:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002854b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002854f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0028553:	50                   	push   eax
c0028554:	e8 c2 cd fd ff       	call   c000531b <f_getlabel>
c0028559:	83 c4 10             	add    esp,0x10
c002855c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028560:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0028565:	75 09                	jne    c0028570 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0028567:	b8 00 00 00 00       	mov    eax,0x0
c002856c:	eb 0a                	jmp    c0028578 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c002856e:	66 90                	xchg   ax,ax
c0028570:	b8 01 00 00 00       	mov    eax,0x1
c0028575:	8d 76 00             	lea    esi,[esi+0x0]
c0028578:	83 c4 1c             	add    esp,0x1c
c002857b:	c3                   	ret    

c002857c <FAT::setlabel(LogicalDisk*, int, char*)>:
c002857c:	57                   	push   edi
c002857d:	83 ec 58             	sub    esp,0x58
c0028580:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0028588:	8d 54 24 10          	lea    edx,[esp+0x10]
c002858c:	b8 00 00 00 00       	mov    eax,0x0
c0028591:	b9 0f 00 00 00       	mov    ecx,0xf
c0028596:	fc                   	cld    
c0028597:	89 d7                	mov    edi,edx
c0028599:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002859b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002859f:	8b 04 85 a0 12 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbed60]
c00285a6:	83 f8 ff             	cmp    eax,0xffffffff
c00285a9:	75 35                	jne    c00285e0 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00285ab:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00285af:	88 c2                	mov    dl,al
c00285b1:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c00285b6:	01 d0                	add    eax,edx
c00285b8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00285bc:	8b 15 80 12 04 c0    	mov    edx,DWORD PTR ds:0xc0041280
c00285c2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00285c6:	89 14 85 a0 12 04 c0 	mov    DWORD PTR [eax*4-0x3ffbed60],edx
c00285cd:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c00285d2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00285d6:	89 14 85 20 13 04 c0 	mov    DWORD PTR [eax*4-0x3ffbece0],edx
c00285dd:	eb 19                	jmp    c00285f8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00285df:	90                   	nop
c00285e0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00285e4:	88 c2                	mov    dl,al
c00285e6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00285ea:	8b 04 85 a0 12 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbed60]
c00285f1:	01 d0                	add    eax,edx
c00285f3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00285f7:	90                   	nop
c00285f8:	83 ec 08             	sub    esp,0x8
c00285fb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00285ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028603:	50                   	push   eax
c0028604:	e8 37 82 fd ff       	call   c0000840 <strcat>
c0028609:	83 c4 10             	add    esp,0x10
c002860c:	83 ec 0c             	sub    esp,0xc
c002860f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028613:	50                   	push   eax
c0028614:	e8 53 ce fd ff       	call   c000546c <f_setlabel>
c0028619:	83 c4 10             	add    esp,0x10
c002861c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0028620:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0028625:	75 09                	jne    c0028630 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0028627:	b8 00 00 00 00       	mov    eax,0x0
c002862c:	eb 0a                	jmp    c0028638 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c002862e:	66 90                	xchg   ax,ax
c0028630:	b8 01 00 00 00       	mov    eax,0x1
c0028635:	8d 76 00             	lea    esi,[esi+0x0]
c0028638:	83 c4 58             	add    esp,0x58
c002863b:	5f                   	pop    edi
c002863c:	c3                   	ret    
c002863d:	90                   	nop
c002863e:	66 90                	xchg   ax,ax

c0028640 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0028640:	83 ec 2c             	sub    esp,0x2c
c0028643:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002864b:	83 ec 08             	sub    esp,0x8
c002864e:	68 3c 3b 03 c0       	push   0xc0033b3c
c0028653:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028657:	e8 f4 80 fd ff       	call   c0000750 <strcmp>
c002865c:	83 c4 10             	add    esp,0x10
c002865f:	85 c0                	test   eax,eax
c0028661:	0f 94 c0             	sete   al
c0028664:	0f b6 c0             	movzx  eax,al
c0028667:	85 c0                	test   eax,eax
c0028669:	74 0d                	je     c0028678 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c002866b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0028673:	e9 c0 00 00 00       	jmp    c0028738 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0028678:	83 ec 08             	sub    esp,0x8
c002867b:	68 2e 3b 03 c0       	push   0xc0033b2e
c0028680:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028684:	e8 c7 80 fd ff       	call   c0000750 <strcmp>
c0028689:	83 c4 10             	add    esp,0x10
c002868c:	85 c0                	test   eax,eax
c002868e:	0f 94 c0             	sete   al
c0028691:	0f b6 c0             	movzx  eax,al
c0028694:	85 c0                	test   eax,eax
c0028696:	74 10                	je     c00286a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0028698:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00286a0:	e9 93 00 00 00       	jmp    c0028738 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00286a5:	8d 76 00             	lea    esi,[esi+0x0]
c00286a8:	83 ec 08             	sub    esp,0x8
c00286ab:	68 34 3b 03 c0       	push   0xc0033b34
c00286b0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00286b4:	e8 97 80 fd ff       	call   c0000750 <strcmp>
c00286b9:	83 c4 10             	add    esp,0x10
c00286bc:	85 c0                	test   eax,eax
c00286be:	0f 94 c0             	sete   al
c00286c1:	0f b6 c0             	movzx  eax,al
c00286c4:	85 c0                	test   eax,eax
c00286c6:	74 0c                	je     c00286d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00286c8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00286d0:	eb 66                	jmp    c0028738 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00286d2:	66 90                	xchg   ax,ax
c00286d4:	83 ec 08             	sub    esp,0x8
c00286d7:	68 98 fb 02 c0       	push   0xc002fb98
c00286dc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00286e0:	e8 6b 80 fd ff       	call   c0000750 <strcmp>
c00286e5:	83 c4 10             	add    esp,0x10
c00286e8:	85 c0                	test   eax,eax
c00286ea:	0f 94 c0             	sete   al
c00286ed:	0f b6 c0             	movzx  eax,al
c00286f0:	85 c0                	test   eax,eax
c00286f2:	74 0c                	je     c0028700 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00286f4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00286fc:	eb 3a                	jmp    c0028738 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00286fe:	66 90                	xchg   ax,ax
c0028700:	83 ec 08             	sub    esp,0x8
c0028703:	68 3a 3b 03 c0       	push   0xc0033b3a
c0028708:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002870c:	e8 3f 80 fd ff       	call   c0000750 <strcmp>
c0028711:	83 c4 10             	add    esp,0x10
c0028714:	85 c0                	test   eax,eax
c0028716:	0f 94 c0             	sete   al
c0028719:	0f b6 c0             	movzx  eax,al
c002871c:	85 c0                	test   eax,eax
c002871e:	74 0c                	je     c002872c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0028720:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0028728:	eb 0e                	jmp    c0028738 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c002872a:	66 90                	xchg   ax,ax
c002872c:	b8 08 00 00 00       	mov    eax,0x8
c0028731:	e9 ea 00 00 00       	jmp    c0028820 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0028736:	66 90                	xchg   ax,ax
c0028738:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002873f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0028744:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028748:	8b 04 85 a0 12 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbed60]
c002874f:	83 f8 ff             	cmp    eax,0xffffffff
c0028752:	75 34                	jne    c0028788 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0028754:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0028758:	88 c2                	mov    dl,al
c002875a:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c002875f:	01 d0                	add    eax,edx
c0028761:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0028765:	8b 15 80 12 04 c0    	mov    edx,DWORD PTR ds:0xc0041280
c002876b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002876f:	89 14 85 a0 12 04 c0 	mov    DWORD PTR [eax*4-0x3ffbed60],edx
c0028776:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c002877b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002877f:	89 14 85 20 13 04 c0 	mov    DWORD PTR [eax*4-0x3ffbece0],edx
c0028786:	eb 18                	jmp    c00287a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0028788:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002878c:	88 c2                	mov    dl,al
c002878e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028792:	8b 04 85 a0 12 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbed60]
c0028799:	01 d0                	add    eax,edx
c002879b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002879f:	90                   	nop
c00287a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00287a4:	88 04 24             	mov    BYTE PTR [esp],al
c00287a7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00287ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00287af:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00287b7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00287bc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00287c4:	83 ec 0c             	sub    esp,0xc
c00287c7:	68 00 20 00 00       	push   0x2000
c00287cc:	e8 f6 dd fe ff       	call   c00165c7 <malloc>
c00287d1:	83 c4 10             	add    esp,0x10
c00287d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00287d8:	68 00 20 00 00       	push   0x2000
c00287dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287e1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00287e5:	50                   	push   eax
c00287e6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00287ea:	50                   	push   eax
c00287eb:	e8 79 cf fd ff       	call   c0005769 <f_mkfs>
c00287f0:	83 c4 10             	add    esp,0x10
c00287f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00287f7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00287fc:	75 0a                	jne    c0028808 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00287fe:	b8 00 00 00 00       	mov    eax,0x0
c0028803:	eb 1b                	jmp    c0028820 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0028805:	8d 76 00             	lea    esi,[esi+0x0]
c0028808:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c002880d:	75 09                	jne    c0028818 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c002880f:	b8 09 00 00 00       	mov    eax,0x9
c0028814:	eb 0a                	jmp    c0028820 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0028816:	66 90                	xchg   ax,ax
c0028818:	b8 01 00 00 00       	mov    eax,0x1
c002881d:	8d 76 00             	lea    esi,[esi+0x0]
c0028820:	83 c4 2c             	add    esp,0x2c
c0028823:	c3                   	ret    

c0028824 <FAT::tryMount(LogicalDisk*, int)>:
c0028824:	81 ec 4c 03 00 00    	sub    esp,0x34c
c002882a:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c002882f:	83 f8 14             	cmp    eax,0x14
c0028832:	75 18                	jne    c002884c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0028834:	83 ec 0c             	sub    esp,0xc
c0028837:	68 40 3b 03 c0       	push   0xc0033b40
c002883c:	e8 4d 7f ff ff       	call   c002078e <KePanic(char const*)>
c0028841:	83 c4 10             	add    esp,0x10
c0028844:	b0 00                	mov    al,0x0
c0028846:	e9 ed 01 00 00       	jmp    c0028a38 <FAT::tryMount(LogicalDisk*, int)+0x214>
c002884b:	90                   	nop
c002884c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0028853:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028859:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002885f:	3d 00 02 00 00       	cmp    eax,0x200
c0028864:	74 0a                	je     c0028870 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0028866:	b0 00                	mov    al,0x0
c0028868:	e9 cb 01 00 00       	jmp    c0028a38 <FAT::tryMount(LogicalDisk*, int)+0x214>
c002886d:	8d 76 00             	lea    esi,[esi+0x0]
c0028870:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0028878:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c002887f:	8b 04 85 a0 12 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbed60]
c0028886:	83 f8 ff             	cmp    eax,0xffffffff
c0028889:	74 09                	je     c0028894 <FAT::tryMount(LogicalDisk*, int)+0x70>
c002888b:	b0 01                	mov    al,0x1
c002888d:	e9 a6 01 00 00       	jmp    c0028a38 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028892:	66 90                	xchg   ax,ax
c0028894:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c002889e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00288a6:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00288ad:	88 c2                	mov    dl,al
c00288af:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c00288b4:	01 d0                	add    eax,edx
c00288b6:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00288bd:	8b 15 80 12 04 c0    	mov    edx,DWORD PTR ds:0xc0041280
c00288c3:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00288ca:	89 14 85 a0 12 04 c0 	mov    DWORD PTR [eax*4-0x3ffbed60],edx
c00288d1:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c00288d6:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00288dd:	89 14 85 20 13 04 c0 	mov    DWORD PTR [eax*4-0x3ffbece0],edx
c00288e4:	83 ec 0c             	sub    esp,0xc
c00288e7:	68 34 02 00 00       	push   0x234
c00288ec:	e8 d6 dc fe ff       	call   c00165c7 <malloc>
c00288f1:	83 c4 10             	add    esp,0x10
c00288f4:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00288fb:	83 ec 04             	sub    esp,0x4
c00288fe:	6a 00                	push   0x0
c0028900:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0028907:	50                   	push   eax
c0028908:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c002890f:	e8 30 b6 fd ff       	call   c0003f44 <f_mount>
c0028914:	83 c4 10             	add    esp,0x10
c0028917:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c002891e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0028926:	74 1c                	je     c0028944 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0028928:	83 ec 0c             	sub    esp,0xc
c002892b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0028932:	e8 b0 dc fe ff       	call   c00165e7 <rfree>
c0028937:	83 c4 10             	add    esp,0x10
c002893a:	b0 00                	mov    al,0x0
c002893c:	e9 f7 00 00 00       	jmp    c0028a38 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028941:	8d 76 00             	lea    esi,[esi+0x0]
c0028944:	83 ec 04             	sub    esp,0x4
c0028947:	68 00 01 00 00       	push   0x100
c002894c:	6a 00                	push   0x0
c002894e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028955:	50                   	push   eax
c0028956:	e8 95 7b fd ff       	call   c00004f0 <memset>
c002895b:	83 c4 10             	add    esp,0x10
c002895e:	83 ec 08             	sub    esp,0x8
c0028961:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0028968:	50                   	push   eax
c0028969:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028970:	50                   	push   eax
c0028971:	e8 ca 7e fd ff       	call   c0000840 <strcat>
c0028976:	83 c4 10             	add    esp,0x10
c0028979:	83 ec 08             	sub    esp,0x8
c002897c:	68 4e 3b 03 c0       	push   0xc0033b4e
c0028981:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028988:	50                   	push   eax
c0028989:	e8 b2 7e fd ff       	call   c0000840 <strcat>
c002898e:	83 c4 10             	add    esp,0x10
c0028991:	83 ec 04             	sub    esp,0x4
c0028994:	6a 01                	push   0x1
c0028996:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c002899d:	50                   	push   eax
c002899e:	8d 44 24 14          	lea    eax,[esp+0x14]
c00289a2:	50                   	push   eax
c00289a3:	e8 fe b5 fd ff       	call   c0003fa6 <f_open>
c00289a8:	83 c4 10             	add    esp,0x10
c00289ab:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00289b2:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00289b9:	85 c0                	test   eax,eax
c00289bb:	74 0b                	je     c00289c8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00289bd:	78 31                	js     c00289f0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00289bf:	83 e8 04             	sub    eax,0x4
c00289c2:	83 f8 01             	cmp    eax,0x1
c00289c5:	77 29                	ja     c00289f0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00289c7:	90                   	nop
c00289c8:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00289d0:	83 ec 0c             	sub    esp,0xc
c00289d3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00289d7:	50                   	push   eax
c00289d8:	e8 98 bd fd ff       	call   c0004775 <f_close>
c00289dd:	83 c4 10             	add    esp,0x10
c00289e0:	90                   	nop
c00289e1:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00289e9:	85 c0                	test   eax,eax
c00289eb:	74 43                	je     c0028a30 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00289ed:	eb 31                	jmp    c0028a20 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00289ef:	90                   	nop
c00289f0:	83 ec 0c             	sub    esp,0xc
c00289f3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00289fa:	e8 e8 db fe ff       	call   c00165e7 <rfree>
c00289ff:	83 c4 10             	add    esp,0x10
c0028a02:	83 ec 04             	sub    esp,0x4
c0028a05:	6a 00                	push   0x0
c0028a07:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0028a0e:	50                   	push   eax
c0028a0f:	6a 00                	push   0x0
c0028a11:	e8 2e b5 fd ff       	call   c0003f44 <f_mount>
c0028a16:	83 c4 10             	add    esp,0x10
c0028a19:	b0 00                	mov    al,0x0
c0028a1b:	eb 1b                	jmp    c0028a38 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0028a20:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c0028a25:	83 c0 01             	add    eax,0x1
c0028a28:	a3 80 12 04 c0       	mov    ds:0xc0041280,eax
c0028a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0028a30:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0028a37:	90                   	nop
c0028a38:	81 c4 4c 03 00 00    	add    esp,0x34c
c0028a3e:	c3                   	ret    
c0028a3f:	90                   	nop

c0028a40 <FAT::allocateSwapfile(char const*, int)>:
c0028a40:	55                   	push   ebp
c0028a41:	57                   	push   edi
c0028a42:	56                   	push   esi
c0028a43:	53                   	push   ebx
c0028a44:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0028a4a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0028a55:	83 ec 0c             	sub    esp,0xc
c0028a58:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0028a5f:	e8 63 db fe ff       	call   c00165c7 <malloc>
c0028a64:	83 c4 10             	add    esp,0x10
c0028a67:	89 c7                	mov    edi,eax
c0028a69:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0028a6e:	83 ec 04             	sub    esp,0x4
c0028a71:	50                   	push   eax
c0028a72:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0028a79:	57                   	push   edi
c0028a7a:	e8 dd 1b ff ff       	call   c001a65c <File::File(char const*, Process*)>
c0028a7f:	83 c4 10             	add    esp,0x10
c0028a82:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0028a89:	83 ec 04             	sub    esp,0x4
c0028a8c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0028a90:	50                   	push   eax
c0028a91:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028a95:	50                   	push   eax
c0028a96:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028a9d:	e8 da 1e ff ff       	call   c001a97c <File::stat(unsigned long long*, bool*)>
c0028aa2:	83 c4 10             	add    esp,0x10
c0028aa5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0028aac:	c1 e0 14             	shl    eax,0x14
c0028aaf:	89 c7                	mov    edi,eax
c0028ab1:	89 c5                	mov    ebp,eax
c0028ab3:	c1 fd 1f             	sar    ebp,0x1f
c0028ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028abe:	89 f9                	mov    ecx,edi
c0028ac0:	31 c1                	xor    ecx,eax
c0028ac2:	89 cb                	mov    ebx,ecx
c0028ac4:	89 e9                	mov    ecx,ebp
c0028ac6:	31 d1                	xor    ecx,edx
c0028ac8:	89 ce                	mov    esi,ecx
c0028aca:	89 f0                	mov    eax,esi
c0028acc:	09 d8                	or     eax,ebx
c0028ace:	0f 84 9c 00 00 00    	je     c0028b70 <FAT::allocateSwapfile(char const*, int)+0x130>
c0028ad4:	83 ec 0c             	sub    esp,0xc
c0028ad7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028ade:	e8 65 1d ff ff       	call   c001a848 <File::unlink()>
c0028ae3:	83 c4 10             	add    esp,0x10
c0028ae6:	83 ec 08             	sub    esp,0x8
c0028ae9:	6a 12                	push   0x12
c0028aeb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028af2:	e8 83 1b ff ff       	call   c001a67a <File::open(FileOpenMode)>
c0028af7:	83 c4 10             	add    esp,0x10
c0028afa:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028b01:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0028b07:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0028b0e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0028b15:	c1 e0 14             	shl    eax,0x14
c0028b18:	83 ec 04             	sub    esp,0x4
c0028b1b:	6a 01                	push   0x1
c0028b1d:	50                   	push   eax
c0028b1e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0028b25:	e8 d2 ca fd ff       	call   c00055fc <f_expand>
c0028b2a:	83 c4 10             	add    esp,0x10
c0028b2d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028b34:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b36:	83 c0 10             	add    eax,0x10
c0028b39:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b3b:	83 ec 0c             	sub    esp,0xc
c0028b3e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0028b42:	52                   	push   edx
c0028b43:	8d 54 24 30          	lea    edx,[esp+0x30]
c0028b47:	52                   	push   edx
c0028b48:	6a 00                	push   0x0
c0028b4a:	68 00 04 00 00       	push   0x400
c0028b4f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0028b56:	ff d0                	call   eax
c0028b58:	83 c4 20             	add    esp,0x20
c0028b5b:	83 ec 0c             	sub    esp,0xc
c0028b5e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028b65:	e8 6e 1b ff ff       	call   c001a6d8 <File::close()>
c0028b6a:	83 c4 10             	add    esp,0x10
c0028b6d:	8d 76 00             	lea    esi,[esi+0x0]
c0028b70:	83 ec 08             	sub    esp,0x8
c0028b73:	6a 01                	push   0x1
c0028b75:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028b7c:	e8 f9 1a ff ff       	call   c001a67a <File::open(FileOpenMode)>
c0028b81:	83 c4 10             	add    esp,0x10
c0028b84:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028b8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b8d:	83 c0 0c             	add    eax,0xc
c0028b90:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b92:	83 ec 0c             	sub    esp,0xc
c0028b95:	8d 54 24 24          	lea    edx,[esp+0x24]
c0028b99:	52                   	push   edx
c0028b9a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0028b9e:	52                   	push   edx
c0028b9f:	6a 00                	push   0x0
c0028ba1:	6a 04                	push   0x4
c0028ba3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0028baa:	ff d0                	call   eax
c0028bac:	83 c4 20             	add    esp,0x20
c0028baf:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028bb6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0028bbc:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0028bc3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0028bca:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0028bcd:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0028bd4:	83 ec 0c             	sub    esp,0xc
c0028bd7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028bde:	e8 f5 1a ff ff       	call   c001a6d8 <File::close()>
c0028be3:	83 c4 10             	add    esp,0x10
c0028be6:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0028bed:	ba 00 00 00 00       	mov    edx,0x0
c0028bf2:	81 c4 3c 04 00 00    	add    esp,0x43c
c0028bf8:	5b                   	pop    ebx
c0028bf9:	5e                   	pop    esi
c0028bfa:	5f                   	pop    edi
c0028bfb:	5d                   	pop    ebp
c0028bfc:	c3                   	ret    
c0028bfd:	90                   	nop
c0028bfe:	66 90                	xchg   ax,ax

c0028c00 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0028c00:	57                   	push   edi
c0028c01:	56                   	push   esi
c0028c02:	53                   	push   ebx
c0028c03:	81 ec 50 02 00 00    	sub    esp,0x250
c0028c09:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0028c11:	74 0d                	je     c0028c20 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0028c13:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0028c1b:	75 0f                	jne    c0028c2c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0028c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0028c20:	b8 04 00 00 00       	mov    eax,0x4
c0028c25:	e9 3a 01 00 00       	jmp    c0028d64 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028c2a:	66 90                	xchg   ax,ax
c0028c2c:	83 ec 08             	sub    esp,0x8
c0028c2f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0028c36:	50                   	push   eax
c0028c37:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0028c3e:	e8 ff bd fd ff       	call   c0004a42 <f_readdir>
c0028c43:	83 c4 10             	add    esp,0x10
c0028c46:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0028c4d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0028c54:	83 ec 0c             	sub    esp,0xc
c0028c57:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0028c5e:	83 c0 16             	add    eax,0x16
c0028c61:	50                   	push   eax
c0028c62:	e8 09 79 fd ff       	call   c0000570 <strlen>
c0028c67:	83 c4 10             	add    esp,0x10
c0028c6a:	ba 00 00 00 00       	mov    edx,0x0
c0028c6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028c73:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0028c77:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0028c7e:	0f b6 c0             	movzx  eax,al
c0028c81:	83 e0 10             	and    eax,0x10
c0028c84:	74 0a                	je     c0028c90 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0028c86:	b8 02 00 00 00       	mov    eax,0x2
c0028c8b:	eb 0b                	jmp    c0028c98 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0028c8d:	8d 76 00             	lea    esi,[esi+0x0]
c0028c90:	b8 01 00 00 00       	mov    eax,0x1
c0028c95:	8d 76 00             	lea    esi,[esi+0x0]
c0028c98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028c9c:	83 ec 08             	sub    esp,0x8
c0028c9f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0028ca6:	83 c0 16             	add    eax,0x16
c0028ca9:	50                   	push   eax
c0028caa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028cae:	83 c0 10             	add    eax,0x10
c0028cb1:	50                   	push   eax
c0028cb2:	e8 89 79 fd ff       	call   c0000640 <strcpy>
c0028cb7:	83 c4 10             	add    esp,0x10
c0028cba:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0028cc1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0028cc8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028ccc:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0028cd3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0028cda:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0028ce1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0028ce8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0028cef:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0028cf6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0028cfd:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0028d04:	89 c6                	mov    esi,eax
c0028d06:	89 d7                	mov    edi,edx
c0028d08:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0028d0a:	89 c8                	mov    eax,ecx
c0028d0c:	89 fa                	mov    edx,edi
c0028d0e:	89 f3                	mov    ebx,esi
c0028d10:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0028d17:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0028d1e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0028d25:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0028d2c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0028d32:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0028d39:	0f be c0             	movsx  eax,al
c0028d3c:	85 c0                	test   eax,eax
c0028d3e:	75 08                	jne    c0028d48 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0028d40:	b8 07 00 00 00       	mov    eax,0x7
c0028d45:	eb 1d                	jmp    c0028d64 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028d47:	90                   	nop
c0028d48:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0028d4f:	85 c0                	test   eax,eax
c0028d51:	75 09                	jne    c0028d5c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0028d53:	b8 00 00 00 00       	mov    eax,0x0
c0028d58:	eb 0a                	jmp    c0028d64 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028d5a:	66 90                	xchg   ax,ax
c0028d5c:	b8 01 00 00 00       	mov    eax,0x1
c0028d61:	8d 76 00             	lea    esi,[esi+0x0]
c0028d64:	81 c4 50 02 00 00    	add    esp,0x250
c0028d6a:	5b                   	pop    ebx
c0028d6b:	5e                   	pop    esi
c0028d6c:	5f                   	pop    edi
c0028d6d:	c3                   	ret    
c0028d6e:	66 90                	xchg   ax,ax

c0028d70 <FAT::read(void*, unsigned long, void*, int*)>:
c0028d70:	83 ec 1c             	sub    esp,0x1c
c0028d73:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028d78:	74 0a                	je     c0028d84 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0028d7a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0028d7f:	75 0b                	jne    c0028d8c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0028d81:	8d 76 00             	lea    esi,[esi+0x0]
c0028d84:	b8 04 00 00 00       	mov    eax,0x4
c0028d89:	eb 41                	jmp    c0028dcc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0028d8b:	90                   	nop
c0028d8c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028d90:	50                   	push   eax
c0028d91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028d95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028d99:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028d9d:	e8 c7 b4 fd ff       	call   c0004269 <f_read>
c0028da2:	83 c4 10             	add    esp,0x10
c0028da5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028da9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028dad:	89 c2                	mov    edx,eax
c0028daf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028db3:	89 10                	mov    DWORD PTR [eax],edx
c0028db5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028db9:	85 c0                	test   eax,eax
c0028dbb:	75 07                	jne    c0028dc4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0028dbd:	b8 00 00 00 00       	mov    eax,0x0
c0028dc2:	eb 08                	jmp    c0028dcc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0028dc4:	b8 01 00 00 00       	mov    eax,0x1
c0028dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0028dcc:	83 c4 1c             	add    esp,0x1c
c0028dcf:	c3                   	ret    

c0028dd0 <FAT::write(void*, unsigned long, void*, int*)>:
c0028dd0:	83 ec 1c             	sub    esp,0x1c
c0028dd3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028dd8:	74 0a                	je     c0028de4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0028dda:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0028ddf:	75 0b                	jne    c0028dec <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0028de1:	8d 76 00             	lea    esi,[esi+0x0]
c0028de4:	b8 04 00 00 00       	mov    eax,0x4
c0028de9:	eb 41                	jmp    c0028e2c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028deb:	90                   	nop
c0028dec:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028df0:	50                   	push   eax
c0028df1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028df5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028df9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028dfd:	e8 66 b6 fd ff       	call   c0004468 <f_write>
c0028e02:	83 c4 10             	add    esp,0x10
c0028e05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028e09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028e0d:	89 c2                	mov    edx,eax
c0028e0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028e13:	89 10                	mov    DWORD PTR [eax],edx
c0028e15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028e19:	85 c0                	test   eax,eax
c0028e1b:	75 07                	jne    c0028e24 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0028e1d:	b8 00 00 00 00       	mov    eax,0x0
c0028e22:	eb 08                	jmp    c0028e2c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028e24:	b8 01 00 00 00       	mov    eax,0x1
c0028e29:	8d 76 00             	lea    esi,[esi+0x0]
c0028e2c:	83 c4 1c             	add    esp,0x1c
c0028e2f:	c3                   	ret    

c0028e30 <FAT::close(void*)>:
c0028e30:	83 ec 1c             	sub    esp,0x1c
c0028e33:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028e38:	75 0a                	jne    c0028e44 <FAT::close(void*)+0x14>
c0028e3a:	b8 04 00 00 00       	mov    eax,0x4
c0028e3f:	eb 3f                	jmp    c0028e80 <FAT::close(void*)+0x50>
c0028e41:	8d 76 00             	lea    esi,[esi+0x0]
c0028e44:	83 ec 0c             	sub    esp,0xc
c0028e47:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028e4b:	e8 25 b9 fd ff       	call   c0004775 <f_close>
c0028e50:	83 c4 10             	add    esp,0x10
c0028e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028e57:	83 ec 0c             	sub    esp,0xc
c0028e5a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028e5e:	e8 74 d7 fe ff       	call   c00165d7 <free>
c0028e63:	83 c4 10             	add    esp,0x10
c0028e66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028e6a:	85 c0                	test   eax,eax
c0028e6c:	75 0a                	jne    c0028e78 <FAT::close(void*)+0x48>
c0028e6e:	b8 00 00 00 00       	mov    eax,0x0
c0028e73:	eb 0b                	jmp    c0028e80 <FAT::close(void*)+0x50>
c0028e75:	8d 76 00             	lea    esi,[esi+0x0]
c0028e78:	b8 01 00 00 00       	mov    eax,0x1
c0028e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0028e80:	83 c4 1c             	add    esp,0x1c
c0028e83:	c3                   	ret    

c0028e84 <FAT::closeDir(void*)>:
c0028e84:	83 ec 1c             	sub    esp,0x1c
c0028e87:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028e8c:	75 0a                	jne    c0028e98 <FAT::closeDir(void*)+0x14>
c0028e8e:	b8 04 00 00 00       	mov    eax,0x4
c0028e93:	eb 3f                	jmp    c0028ed4 <FAT::closeDir(void*)+0x50>
c0028e95:	8d 76 00             	lea    esi,[esi+0x0]
c0028e98:	83 ec 0c             	sub    esp,0xc
c0028e9b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028e9f:	e8 7c bb fd ff       	call   c0004a20 <f_closedir>
c0028ea4:	83 c4 10             	add    esp,0x10
c0028ea7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028eab:	83 ec 0c             	sub    esp,0xc
c0028eae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028eb2:	e8 20 d7 fe ff       	call   c00165d7 <free>
c0028eb7:	83 c4 10             	add    esp,0x10
c0028eba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028ebe:	85 c0                	test   eax,eax
c0028ec0:	75 0a                	jne    c0028ecc <FAT::closeDir(void*)+0x48>
c0028ec2:	b8 00 00 00 00       	mov    eax,0x0
c0028ec7:	eb 0b                	jmp    c0028ed4 <FAT::closeDir(void*)+0x50>
c0028ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0028ecc:	b8 01 00 00 00       	mov    eax,0x1
c0028ed1:	8d 76 00             	lea    esi,[esi+0x0]
c0028ed4:	83 c4 1c             	add    esp,0x1c
c0028ed7:	c3                   	ret    

c0028ed8 <FAT::truncate(void*, unsigned long long)>:
c0028ed8:	83 ec 2c             	sub    esp,0x2c
c0028edb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028edf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028ee3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028ee7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028eeb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028ef0:	75 0a                	jne    c0028efc <FAT::truncate(void*, unsigned long long)+0x24>
c0028ef2:	b8 04 00 00 00       	mov    eax,0x4
c0028ef7:	eb 47                	jmp    c0028f40 <FAT::truncate(void*, unsigned long long)+0x68>
c0028ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0028efc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028f00:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0028f03:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028f07:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0028f0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028f13:	83 ec 08             	sub    esp,0x8
c0028f16:	50                   	push   eax
c0028f17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028f1b:	e8 84 b8 fd ff       	call   c00047a4 <f_lseek>
c0028f20:	83 c4 10             	add    esp,0x10
c0028f23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028f27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028f2b:	85 c0                	test   eax,eax
c0028f2d:	75 09                	jne    c0028f38 <FAT::truncate(void*, unsigned long long)+0x60>
c0028f2f:	b8 00 00 00 00       	mov    eax,0x0
c0028f34:	eb 0a                	jmp    c0028f40 <FAT::truncate(void*, unsigned long long)+0x68>
c0028f36:	66 90                	xchg   ax,ax
c0028f38:	b8 01 00 00 00       	mov    eax,0x1
c0028f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0028f40:	83 c4 2c             	add    esp,0x2c
c0028f43:	c3                   	ret    

c0028f44 <FAT::seek(void*, unsigned long long)>:
c0028f44:	83 ec 2c             	sub    esp,0x2c
c0028f47:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028f4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028f4f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028f53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028f57:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028f5c:	75 0a                	jne    c0028f68 <FAT::seek(void*, unsigned long long)+0x24>
c0028f5e:	b8 04 00 00 00       	mov    eax,0x4
c0028f63:	eb 33                	jmp    c0028f98 <FAT::seek(void*, unsigned long long)+0x54>
c0028f65:	8d 76 00             	lea    esi,[esi+0x0]
c0028f68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028f6c:	83 ec 08             	sub    esp,0x8
c0028f6f:	50                   	push   eax
c0028f70:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028f74:	e8 2b b8 fd ff       	call   c00047a4 <f_lseek>
c0028f79:	83 c4 10             	add    esp,0x10
c0028f7c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028f84:	85 c0                	test   eax,eax
c0028f86:	75 08                	jne    c0028f90 <FAT::seek(void*, unsigned long long)+0x4c>
c0028f88:	b8 00 00 00 00       	mov    eax,0x0
c0028f8d:	eb 09                	jmp    c0028f98 <FAT::seek(void*, unsigned long long)+0x54>
c0028f8f:	90                   	nop
c0028f90:	b8 01 00 00 00       	mov    eax,0x1
c0028f95:	8d 76 00             	lea    esi,[esi+0x0]
c0028f98:	83 c4 2c             	add    esp,0x2c
c0028f9b:	c3                   	ret    

c0028f9c <fatWrapperReadDisk>:
c0028f9c:	53                   	push   ebx
c0028f9d:	83 ec 18             	sub    esp,0x18
c0028fa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028fa4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028fa8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028fad:	8b 0c 85 80 03 04 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffbfc80]
c0028fb4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0028fb8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028fbc:	ba 00 00 00 00       	mov    edx,0x0
c0028fc1:	83 ec 0c             	sub    esp,0xc
c0028fc4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028fc8:	53                   	push   ebx
c0028fc9:	52                   	push   edx
c0028fca:	50                   	push   eax
c0028fcb:	51                   	push   ecx
c0028fcc:	e8 33 3a ff ff       	call   c001ca04 <LogicalDisk::read(unsigned long long, int, void*)>
c0028fd1:	83 c4 20             	add    esp,0x20
c0028fd4:	83 c4 18             	add    esp,0x18
c0028fd7:	5b                   	pop    ebx
c0028fd8:	c3                   	ret    
c0028fd9:	8d 76 00             	lea    esi,[esi+0x0]

c0028fdc <fatWrapperWriteDisk>:
c0028fdc:	53                   	push   ebx
c0028fdd:	83 ec 18             	sub    esp,0x18
c0028fe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028fe4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028fe8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028fed:	8b 0c 85 80 03 04 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffbfc80]
c0028ff4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0028ff8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028ffc:	ba 00 00 00 00       	mov    edx,0x0
c0029001:	83 ec 0c             	sub    esp,0xc
c0029004:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0029008:	53                   	push   ebx
c0029009:	52                   	push   edx
c002900a:	50                   	push   eax
c002900b:	51                   	push   ecx
c002900c:	e8 5f 3a ff ff       	call   c001ca70 <LogicalDisk::write(unsigned long long, int, void*)>
c0029011:	83 c4 20             	add    esp,0x20
c0029014:	83 c4 18             	add    esp,0x18
c0029017:	5b                   	pop    ebx
c0029018:	c3                   	ret    
c0029019:	8d 76 00             	lea    esi,[esi+0x0]

c002901c <fatWrapperIoctl>:
c002901c:	53                   	push   ebx
c002901d:	83 ec 28             	sub    esp,0x28
c0029020:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0029024:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0029028:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002902c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0029030:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029035:	83 f8 02             	cmp    eax,0x2
c0029038:	75 32                	jne    c002906c <fatWrapperIoctl+0x50>
c002903a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002903e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0029042:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029047:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c002904e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0029054:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002905a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002905e:	66 89 02             	mov    WORD PTR [edx],ax
c0029061:	b8 00 00 00 00       	mov    eax,0x0
c0029066:	e9 c5 00 00 00       	jmp    c0029130 <fatWrapperIoctl+0x114>
c002906b:	90                   	nop
c002906c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029071:	83 f8 01             	cmp    eax,0x1
c0029074:	75 6a                	jne    c00290e0 <fatWrapperIoctl+0xc4>
c0029076:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002907a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002907e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029083:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c002908a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0029090:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0029096:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c002909c:	89 c8                	mov    eax,ecx
c002909e:	89 da                	mov    edx,ebx
c00290a0:	0f a4 c2 0a          	shld   edx,eax,0xa
c00290a4:	c1 e0 0a             	shl    eax,0xa
c00290a7:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00290ac:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c00290b3:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00290b9:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00290bf:	89 cb                	mov    ebx,ecx
c00290c1:	c1 fb 1f             	sar    ebx,0x1f
c00290c4:	53                   	push   ebx
c00290c5:	51                   	push   ecx
c00290c6:	52                   	push   edx
c00290c7:	50                   	push   eax
c00290c8:	e8 13 5c 00 00       	call   c002ece0 <__udivdi3>
c00290cd:	83 c4 10             	add    esp,0x10
c00290d0:	89 c2                	mov    edx,eax
c00290d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00290d6:	89 10                	mov    DWORD PTR [eax],edx
c00290d8:	b8 00 00 00 00       	mov    eax,0x0
c00290dd:	eb 51                	jmp    c0029130 <fatWrapperIoctl+0x114>
c00290df:	90                   	nop
c00290e0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00290e5:	85 c0                	test   eax,eax
c00290e7:	75 07                	jne    c00290f0 <fatWrapperIoctl+0xd4>
c00290e9:	b8 00 00 00 00       	mov    eax,0x0
c00290ee:	eb 40                	jmp    c0029130 <fatWrapperIoctl+0x114>
c00290f0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00290f5:	83 f8 03             	cmp    eax,0x3
c00290f8:	75 1a                	jne    c0029114 <fatWrapperIoctl+0xf8>
c00290fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00290fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0029102:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0029106:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002910c:	b8 00 00 00 00       	mov    eax,0x0
c0029111:	eb 1d                	jmp    c0029130 <fatWrapperIoctl+0x114>
c0029113:	90                   	nop
c0029114:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029119:	83 f8 04             	cmp    eax,0x4
c002911c:	75 0a                	jne    c0029128 <fatWrapperIoctl+0x10c>
c002911e:	b8 00 00 00 00       	mov    eax,0x0
c0029123:	eb 0b                	jmp    c0029130 <fatWrapperIoctl+0x114>
c0029125:	8d 76 00             	lea    esi,[esi+0x0]
c0029128:	b8 04 00 00 00       	mov    eax,0x4
c002912d:	8d 76 00             	lea    esi,[esi+0x0]
c0029130:	83 c4 28             	add    esp,0x28
c0029133:	5b                   	pop    ebx
c0029134:	c3                   	ret    
c0029135:	90                   	nop
c0029136:	66 90                	xchg   ax,ax

c0029138 <FAT::FAT()>:
c0029138:	83 ec 1c             	sub    esp,0x1c
c002913b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002913f:	83 ec 0c             	sub    esp,0xc
c0029142:	50                   	push   eax
c0029143:	e8 72 11 ff ff       	call   c001a2ba <Filesystem::Filesystem()>
c0029148:	83 c4 10             	add    esp,0x10
c002914b:	ba 64 3b 03 c0       	mov    edx,0xc0033b64
c0029150:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029154:	89 10                	mov    DWORD PTR [eax],edx
c0029156:	c7 05 80 12 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0041280,0x0
c0029160:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0029168:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c002916d:	7f 19                	jg     c0029188 <FAT::FAT()+0x50>
c002916f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029173:	c7 04 85 a0 12 04 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffbed60],0xffffffff
c002917e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0029183:	eb e3                	jmp    c0029168 <FAT::FAT()+0x30>
c0029185:	8d 76 00             	lea    esi,[esi+0x0]
c0029188:	90                   	nop
c0029189:	83 c4 1c             	add    esp,0x1c
c002918c:	c3                   	ret    
c002918d:	90                   	nop
c002918e:	66 90                	xchg   ax,ax

c0029190 <FAT::fixFilepath(char*)>:
c0029190:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029194:	8a 00                	mov    al,BYTE PTR [eax]
c0029196:	0f be c0             	movsx  eax,al
c0029199:	83 f8 40             	cmp    eax,0x40
c002919c:	7e 2e                	jle    c00291cc <FAT::fixFilepath(char*)+0x3c>
c002919e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00291a2:	8a 00                	mov    al,BYTE PTR [eax]
c00291a4:	83 e8 41             	sub    eax,0x41
c00291a7:	88 c2                	mov    dl,al
c00291a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00291ad:	88 10                	mov    BYTE PTR [eax],dl
c00291af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00291b3:	8a 00                	mov    al,BYTE PTR [eax]
c00291b5:	0f be c0             	movsx  eax,al
c00291b8:	8b 04 85 a0 12 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbed60]
c00291bf:	83 c0 30             	add    eax,0x30
c00291c2:	88 c2                	mov    dl,al
c00291c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00291c8:	88 10                	mov    BYTE PTR [eax],dl
c00291ca:	66 90                	xchg   ax,ax
c00291cc:	90                   	nop
c00291cd:	c3                   	ret    
c00291ce:	66 90                	xchg   ax,ax

c00291d0 <FAT::open(char const*, void**, FileOpenMode)>:
c00291d0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00291d6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00291de:	74 0c                	je     c00291ec <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00291e0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00291e8:	75 0e                	jne    c00291f8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00291ea:	66 90                	xchg   ax,ax
c00291ec:	b8 04 00 00 00       	mov    eax,0x4
c00291f1:	e9 46 01 00 00       	jmp    c002933c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00291f6:	66 90                	xchg   ax,ax
c00291f8:	83 ec 08             	sub    esp,0x8
c00291fb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029202:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029206:	50                   	push   eax
c0029207:	e8 34 74 fd ff       	call   c0000640 <strcpy>
c002920c:	83 c4 10             	add    esp,0x10
c002920f:	83 ec 08             	sub    esp,0x8
c0029212:	8d 44 24 10          	lea    eax,[esp+0x10]
c0029216:	50                   	push   eax
c0029217:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002921e:	e8 6d ff ff ff       	call   c0029190 <FAT::fixFilepath(char*)>
c0029223:	83 c4 10             	add    esp,0x10
c0029226:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c002922e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0029235:	83 e0 01             	and    eax,0x1
c0029238:	74 12                	je     c002924c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c002923a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0029241:	83 c8 01             	or     eax,0x1
c0029244:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c002924b:	90                   	nop
c002924c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0029253:	83 e0 04             	and    eax,0x4
c0029256:	74 24                	je     c002927c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0029258:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c002925f:	83 c8 30             	or     eax,0x30
c0029262:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0029269:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0029270:	83 c8 02             	or     eax,0x2
c0029273:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c002927a:	66 90                	xchg   ax,ax
c002927c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0029283:	83 e0 02             	and    eax,0x2
c0029286:	74 14                	je     c002929c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0029288:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c002928f:	83 c8 02             	or     eax,0x2
c0029292:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0029299:	8d 76 00             	lea    esi,[esi+0x0]
c002929c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00292a3:	83 e0 08             	and    eax,0x8
c00292a6:	74 14                	je     c00292bc <FAT::open(char const*, void**, FileOpenMode)+0xec>
c00292a8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00292af:	83 c8 04             	or     eax,0x4
c00292b2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00292b9:	8d 76 00             	lea    esi,[esi+0x0]
c00292bc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00292c3:	83 e0 10             	and    eax,0x10
c00292c6:	74 14                	je     c00292dc <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c00292c8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00292cf:	83 c8 08             	or     eax,0x8
c00292d2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00292d9:	8d 76 00             	lea    esi,[esi+0x0]
c00292dc:	83 ec 0c             	sub    esp,0xc
c00292df:	68 28 02 00 00       	push   0x228
c00292e4:	e8 de d2 fe ff       	call   c00165c7 <malloc>
c00292e9:	83 c4 10             	add    esp,0x10
c00292ec:	89 c2                	mov    edx,eax
c00292ee:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00292f5:	89 10                	mov    DWORD PTR [eax],edx
c00292f7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00292ff:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0029306:	8b 00                	mov    eax,DWORD PTR [eax]
c0029308:	83 ec 04             	sub    esp,0x4
c002930b:	52                   	push   edx
c002930c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0029310:	52                   	push   edx
c0029311:	50                   	push   eax
c0029312:	e8 8f ac fd ff       	call   c0003fa6 <f_open>
c0029317:	83 c4 10             	add    esp,0x10
c002931a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0029321:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0029329:	74 09                	je     c0029334 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c002932b:	b8 01 00 00 00       	mov    eax,0x1
c0029330:	eb 0a                	jmp    c002933c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0029332:	66 90                	xchg   ax,ax
c0029334:	b8 00 00 00 00       	mov    eax,0x0
c0029339:	8d 76 00             	lea    esi,[esi+0x0]
c002933c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0029342:	c3                   	ret    
c0029343:	90                   	nop

c0029344 <FAT::openDir(char const*, void**)>:
c0029344:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002934a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0029352:	74 0c                	je     c0029360 <FAT::openDir(char const*, void**)+0x1c>
c0029354:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002935c:	75 0e                	jne    c002936c <FAT::openDir(char const*, void**)+0x28>
c002935e:	66 90                	xchg   ax,ax
c0029360:	b8 04 00 00 00       	mov    eax,0x4
c0029365:	e9 82 00 00 00       	jmp    c00293ec <FAT::openDir(char const*, void**)+0xa8>
c002936a:	66 90                	xchg   ax,ax
c002936c:	83 ec 08             	sub    esp,0x8
c002936f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029376:	8d 44 24 18          	lea    eax,[esp+0x18]
c002937a:	50                   	push   eax
c002937b:	e8 c0 72 fd ff       	call   c0000640 <strcpy>
c0029380:	83 c4 10             	add    esp,0x10
c0029383:	83 ec 08             	sub    esp,0x8
c0029386:	8d 44 24 14          	lea    eax,[esp+0x14]
c002938a:	50                   	push   eax
c002938b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029392:	e8 f9 fd ff ff       	call   c0029190 <FAT::fixFilepath(char*)>
c0029397:	83 c4 10             	add    esp,0x10
c002939a:	83 ec 0c             	sub    esp,0xc
c002939d:	6a 30                	push   0x30
c002939f:	e8 23 d2 fe ff       	call   c00165c7 <malloc>
c00293a4:	83 c4 10             	add    esp,0x10
c00293a7:	89 c2                	mov    edx,eax
c00293a9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00293b0:	89 10                	mov    DWORD PTR [eax],edx
c00293b2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00293b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00293bb:	83 ec 08             	sub    esp,0x8
c00293be:	8d 54 24 14          	lea    edx,[esp+0x14]
c00293c2:	52                   	push   edx
c00293c3:	50                   	push   eax
c00293c4:	e8 8c b5 fd ff       	call   c0004955 <f_opendir>
c00293c9:	83 c4 10             	add    esp,0x10
c00293cc:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00293d3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00293db:	74 07                	je     c00293e4 <FAT::openDir(char const*, void**)+0xa0>
c00293dd:	b8 01 00 00 00       	mov    eax,0x1
c00293e2:	eb 08                	jmp    c00293ec <FAT::openDir(char const*, void**)+0xa8>
c00293e4:	b8 00 00 00 00       	mov    eax,0x0
c00293e9:	8d 76 00             	lea    esi,[esi+0x0]
c00293ec:	81 c4 1c 01 00 00    	add    esp,0x11c
c00293f2:	c3                   	ret    
c00293f3:	90                   	nop

c00293f4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00293f4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00293fa:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0029402:	75 0c                	jne    c0029410 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0029404:	b8 04 00 00 00       	mov    eax,0x4
c0029409:	e9 d6 00 00 00       	jmp    c00294e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c002940e:	66 90                	xchg   ax,ax
c0029410:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0029418:	75 0a                	jne    c0029424 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c002941a:	b8 04 00 00 00       	mov    eax,0x4
c002941f:	e9 c0 00 00 00       	jmp    c00294e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0029424:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c002942c:	75 0a                	jne    c0029438 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c002942e:	b8 04 00 00 00       	mov    eax,0x4
c0029433:	e9 ac 00 00 00       	jmp    c00294e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0029438:	83 ec 08             	sub    esp,0x8
c002943b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0029442:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0029449:	50                   	push   eax
c002944a:	e8 f1 71 fd ff       	call   c0000640 <strcpy>
c002944f:	83 c4 10             	add    esp,0x10
c0029452:	83 ec 08             	sub    esp,0x8
c0029455:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002945c:	50                   	push   eax
c002945d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0029464:	e8 27 fd ff ff       	call   c0029190 <FAT::fixFilepath(char*)>
c0029469:	83 c4 10             	add    esp,0x10
c002946c:	83 ec 08             	sub    esp,0x8
c002946f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0029473:	50                   	push   eax
c0029474:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002947b:	50                   	push   eax
c002947c:	e8 53 b6 fd ff       	call   c0004ad4 <f_stat>
c0029481:	83 c4 10             	add    esp,0x10
c0029484:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002948b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0029492:	85 c0                	test   eax,eax
c0029494:	74 0a                	je     c00294a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0029496:	83 f8 04             	cmp    eax,0x4
c0029499:	74 39                	je     c00294d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c002949b:	eb 3f                	jmp    c00294dc <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c002949d:	8d 76 00             	lea    esi,[esi+0x0]
c00294a0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00294a4:	0f b6 c0             	movzx  eax,al
c00294a7:	83 e0 10             	and    eax,0x10
c00294aa:	0f 95 c2             	setne  dl
c00294ad:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00294b4:	88 10                	mov    BYTE PTR [eax],dl
c00294b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00294ba:	ba 00 00 00 00       	mov    edx,0x0
c00294bf:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00294c6:	89 01                	mov    DWORD PTR [ecx],eax
c00294c8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00294cb:	b8 00 00 00 00       	mov    eax,0x0
c00294d0:	eb 12                	jmp    c00294e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00294d2:	66 90                	xchg   ax,ax
c00294d4:	b8 02 00 00 00       	mov    eax,0x2
c00294d9:	eb 09                	jmp    c00294e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00294db:	90                   	nop
c00294dc:	b8 01 00 00 00       	mov    eax,0x1
c00294e1:	8d 76 00             	lea    esi,[esi+0x0]
c00294e4:	81 c4 2c 02 00 00    	add    esp,0x22c
c00294ea:	c3                   	ret    
c00294eb:	90                   	nop

c00294ec <FAT::unlink(char const*)>:
c00294ec:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00294f2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00294fa:	75 08                	jne    c0029504 <FAT::unlink(char const*)+0x18>
c00294fc:	b8 04 00 00 00       	mov    eax,0x4
c0029501:	eb 61                	jmp    c0029564 <FAT::unlink(char const*)+0x78>
c0029503:	90                   	nop
c0029504:	83 ec 08             	sub    esp,0x8
c0029507:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002950e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029512:	50                   	push   eax
c0029513:	e8 28 71 fd ff       	call   c0000640 <strcpy>
c0029518:	83 c4 10             	add    esp,0x10
c002951b:	83 ec 08             	sub    esp,0x8
c002951e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029522:	50                   	push   eax
c0029523:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002952a:	e8 61 fc ff ff       	call   c0029190 <FAT::fixFilepath(char*)>
c002952f:	83 c4 10             	add    esp,0x10
c0029532:	83 ec 0c             	sub    esp,0xc
c0029535:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029539:	50                   	push   eax
c002953a:	e8 07 b8 fd ff       	call   c0004d46 <f_unlink>
c002953f:	83 c4 10             	add    esp,0x10
c0029542:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0029549:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0029550:	85 c0                	test   eax,eax
c0029552:	75 08                	jne    c002955c <FAT::unlink(char const*)+0x70>
c0029554:	b8 00 00 00 00       	mov    eax,0x0
c0029559:	eb 09                	jmp    c0029564 <FAT::unlink(char const*)+0x78>
c002955b:	90                   	nop
c002955c:	b8 01 00 00 00       	mov    eax,0x1
c0029561:	8d 76 00             	lea    esi,[esi+0x0]
c0029564:	81 c4 1c 01 00 00    	add    esp,0x11c
c002956a:	c3                   	ret    
c002956b:	90                   	nop

c002956c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c002956c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0029572:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0029579:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0029580:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0029584:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0029588:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0029590:	75 0a                	jne    c002959c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0029592:	b8 04 00 00 00       	mov    eax,0x4
c0029597:	e9 7c 01 00 00       	jmp    c0029718 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c002959c:	83 ec 08             	sub    esp,0x8
c002959f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00295a6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00295aa:	50                   	push   eax
c00295ab:	e8 90 70 fd ff       	call   c0000640 <strcpy>
c00295b0:	83 c4 10             	add    esp,0x10
c00295b3:	83 ec 08             	sub    esp,0x8
c00295b6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00295ba:	50                   	push   eax
c00295bb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00295c2:	e8 c9 fb ff ff       	call   c0029190 <FAT::fixFilepath(char*)>
c00295c7:	83 c4 10             	add    esp,0x10
c00295ca:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00295d2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00295da:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00295df:	83 e0 01             	and    eax,0x1
c00295e2:	74 14                	je     c00295f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c00295e4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00295eb:	83 c8 01             	or     eax,0x1
c00295ee:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c00295f5:	8d 76 00             	lea    esi,[esi+0x0]
c00295f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00295fd:	83 e0 02             	and    eax,0x2
c0029600:	74 12                	je     c0029614 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0029602:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029609:	83 c8 20             	or     eax,0x20
c002960c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0029613:	90                   	nop
c0029614:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029619:	83 e0 04             	and    eax,0x4
c002961c:	74 12                	je     c0029630 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c002961e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029625:	83 c8 04             	or     eax,0x4
c0029628:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c002962f:	90                   	nop
c0029630:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029635:	83 e0 08             	and    eax,0x8
c0029638:	74 12                	je     c002964c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c002963a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029641:	83 c8 02             	or     eax,0x2
c0029644:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c002964b:	90                   	nop
c002964c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029651:	83 e0 01             	and    eax,0x1
c0029654:	74 12                	je     c0029668 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0029656:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c002965d:	83 c8 01             	or     eax,0x1
c0029660:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0029667:	90                   	nop
c0029668:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002966d:	83 e0 02             	and    eax,0x2
c0029670:	74 12                	je     c0029684 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0029672:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0029679:	83 c8 20             	or     eax,0x20
c002967c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0029683:	90                   	nop
c0029684:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029689:	83 e0 04             	and    eax,0x4
c002968c:	74 12                	je     c00296a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c002968e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0029695:	83 c8 04             	or     eax,0x4
c0029698:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c002969f:	90                   	nop
c00296a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00296a5:	83 e0 08             	and    eax,0x8
c00296a8:	74 12                	je     c00296bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c00296aa:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00296b1:	83 c8 02             	or     eax,0x2
c00296b4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00296bb:	90                   	nop
c00296bc:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c00296c3:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00296ca:	09 d0                	or     eax,edx
c00296cc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00296d3:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00296db:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00296e3:	83 ec 04             	sub    esp,0x4
c00296e6:	52                   	push   edx
c00296e7:	50                   	push   eax
c00296e8:	8d 44 24 24          	lea    eax,[esp+0x24]
c00296ec:	50                   	push   eax
c00296ed:	e8 c9 ba fd ff       	call   c00051bb <f_chmod>
c00296f2:	83 c4 10             	add    esp,0x10
c00296f5:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00296fc:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0029703:	85 c0                	test   eax,eax
c0029705:	75 09                	jne    c0029710 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c0029707:	b8 00 00 00 00       	mov    eax,0x0
c002970c:	eb 0a                	jmp    c0029718 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c002970e:	66 90                	xchg   ax,ax
c0029710:	b8 01 00 00 00       	mov    eax,0x1
c0029715:	8d 76 00             	lea    esi,[esi+0x0]
c0029718:	81 c4 2c 01 00 00    	add    esp,0x12c
c002971e:	c3                   	ret    
c002971f:	90                   	nop

c0029720 <FAT::rename(char const*, char const*)>:
c0029720:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0029726:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002972e:	74 0c                	je     c002973c <FAT::rename(char const*, char const*)+0x1c>
c0029730:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0029738:	75 0e                	jne    c0029748 <FAT::rename(char const*, char const*)+0x28>
c002973a:	66 90                	xchg   ax,ax
c002973c:	b8 04 00 00 00       	mov    eax,0x4
c0029741:	e9 9e 00 00 00       	jmp    c00297e4 <FAT::rename(char const*, char const*)+0xc4>
c0029746:	66 90                	xchg   ax,ax
c0029748:	83 ec 08             	sub    esp,0x8
c002974b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0029752:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0029759:	50                   	push   eax
c002975a:	e8 e1 6e fd ff       	call   c0000640 <strcpy>
c002975f:	83 c4 10             	add    esp,0x10
c0029762:	83 ec 08             	sub    esp,0x8
c0029765:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c002976c:	50                   	push   eax
c002976d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0029774:	e8 17 fa ff ff       	call   c0029190 <FAT::fixFilepath(char*)>
c0029779:	83 c4 10             	add    esp,0x10
c002977c:	83 ec 08             	sub    esp,0x8
c002977f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0029786:	8d 44 24 18          	lea    eax,[esp+0x18]
c002978a:	50                   	push   eax
c002978b:	e8 b0 6e fd ff       	call   c0000640 <strcpy>
c0029790:	83 c4 10             	add    esp,0x10
c0029793:	83 ec 08             	sub    esp,0x8
c0029796:	8d 44 24 14          	lea    eax,[esp+0x14]
c002979a:	50                   	push   eax
c002979b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00297a2:	e8 e9 f9 ff ff       	call   c0029190 <FAT::fixFilepath(char*)>
c00297a7:	83 c4 10             	add    esp,0x10
c00297aa:	83 ec 08             	sub    esp,0x8
c00297ad:	8d 44 24 14          	lea    eax,[esp+0x14]
c00297b1:	50                   	push   eax
c00297b2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00297b9:	50                   	push   eax
c00297ba:	e8 44 b8 fd ff       	call   c0005003 <f_rename>
c00297bf:	83 c4 10             	add    esp,0x10
c00297c2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00297c9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00297d0:	85 c0                	test   eax,eax
c00297d2:	75 08                	jne    c00297dc <FAT::rename(char const*, char const*)+0xbc>
c00297d4:	b8 00 00 00 00       	mov    eax,0x0
c00297d9:	eb 09                	jmp    c00297e4 <FAT::rename(char const*, char const*)+0xc4>
c00297db:	90                   	nop
c00297dc:	b8 01 00 00 00       	mov    eax,0x1
c00297e1:	8d 76 00             	lea    esi,[esi+0x0]
c00297e4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00297ea:	c3                   	ret    
c00297eb:	90                   	nop

c00297ec <FAT::mkdir(char const*)>:
c00297ec:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00297f2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00297fa:	75 08                	jne    c0029804 <FAT::mkdir(char const*)+0x18>
c00297fc:	b8 04 00 00 00       	mov    eax,0x4
c0029801:	eb 61                	jmp    c0029864 <FAT::mkdir(char const*)+0x78>
c0029803:	90                   	nop
c0029804:	83 ec 08             	sub    esp,0x8
c0029807:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002980e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029812:	50                   	push   eax
c0029813:	e8 28 6e fd ff       	call   c0000640 <strcpy>
c0029818:	83 c4 10             	add    esp,0x10
c002981b:	83 ec 08             	sub    esp,0x8
c002981e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029822:	50                   	push   eax
c0029823:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002982a:	e8 61 f9 ff ff       	call   c0029190 <FAT::fixFilepath(char*)>
c002982f:	83 c4 10             	add    esp,0x10
c0029832:	83 ec 0c             	sub    esp,0xc
c0029835:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029839:	50                   	push   eax
c002983a:	e8 29 b6 fd ff       	call   c0004e68 <f_mkdir>
c002983f:	83 c4 10             	add    esp,0x10
c0029842:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0029849:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0029850:	85 c0                	test   eax,eax
c0029852:	75 08                	jne    c002985c <FAT::mkdir(char const*)+0x70>
c0029854:	b8 00 00 00 00       	mov    eax,0x0
c0029859:	eb 09                	jmp    c0029864 <FAT::mkdir(char const*)+0x78>
c002985b:	90                   	nop
c002985c:	b8 01 00 00 00       	mov    eax,0x1
c0029861:	8d 76 00             	lea    esi,[esi+0x0]
c0029864:	81 c4 1c 01 00 00    	add    esp,0x11c
c002986a:	c3                   	ret    
c002986b:	90                   	nop

c002986c <FAT::exists(char const*)>:
c002986c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0029872:	83 ec 08             	sub    esp,0x8
c0029875:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002987c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0029880:	50                   	push   eax
c0029881:	e8 ba 6d fd ff       	call   c0000640 <strcpy>
c0029886:	83 c4 10             	add    esp,0x10
c0029889:	83 ec 08             	sub    esp,0x8
c002988c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0029890:	50                   	push   eax
c0029891:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0029898:	e8 f3 f8 ff ff       	call   c0029190 <FAT::fixFilepath(char*)>
c002989d:	83 c4 10             	add    esp,0x10
c00298a0:	83 ec 08             	sub    esp,0x8
c00298a3:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00298aa:	50                   	push   eax
c00298ab:	8d 44 24 10          	lea    eax,[esp+0x10]
c00298af:	50                   	push   eax
c00298b0:	e8 1f b2 fd ff       	call   c0004ad4 <f_stat>
c00298b5:	83 c4 10             	add    esp,0x10
c00298b8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00298bf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00298c6:	85 c0                	test   eax,eax
c00298c8:	75 06                	jne    c00298d0 <FAT::exists(char const*)+0x64>
c00298ca:	b0 01                	mov    al,0x1
c00298cc:	eb 06                	jmp    c00298d4 <FAT::exists(char const*)+0x68>
c00298ce:	66 90                	xchg   ax,ax
c00298d0:	b0 00                	mov    al,0x0
c00298d2:	66 90                	xchg   ax,ax
c00298d4:	81 c4 2c 02 00 00    	add    esp,0x22c
c00298da:	c3                   	ret    
c00298db:	90                   	nop

c00298dc <isoReadDiscSectorHelper>:
c00298dc:	83 ec 2c             	sub    esp,0x2c
c00298df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00298e3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00298e7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00298ec:	83 e8 41             	sub    eax,0x41
c00298ef:	8b 0c 85 80 03 04 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffbfc80]
c00298f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00298fa:	ba 00 00 00 00       	mov    edx,0x0
c00298ff:	83 ec 0c             	sub    esp,0xc
c0029902:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0029906:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002990a:	52                   	push   edx
c002990b:	50                   	push   eax
c002990c:	51                   	push   ecx
c002990d:	e8 f2 30 ff ff       	call   c001ca04 <LogicalDisk::read(unsigned long long, int, void*)>
c0029912:	83 c4 20             	add    esp,0x20
c0029915:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0029919:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002991e:	74 0c                	je     c002992c <isoReadDiscSectorHelper+0x50>
c0029920:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0029924:	c1 e0 0b             	shl    eax,0xb
c0029927:	eb 0b                	jmp    c0029934 <isoReadDiscSectorHelper+0x58>
c0029929:	8d 76 00             	lea    esi,[esi+0x0]
c002992c:	b8 00 00 00 00       	mov    eax,0x0
c0029931:	8d 76 00             	lea    esi,[esi+0x0]
c0029934:	83 c4 2c             	add    esp,0x2c
c0029937:	c3                   	ret    

c0029938 <iso_kprintf>:
c0029938:	83 ec 0c             	sub    esp,0xc
c002993b:	83 ec 08             	sub    esp,0x8
c002993e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0029942:	68 12 39 03 c0       	push   0xc0033912
c0029947:	e8 09 fb fe ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c002994c:	83 c4 10             	add    esp,0x10
c002994f:	90                   	nop
c0029950:	83 c4 0c             	add    esp,0xc
c0029953:	c3                   	ret    

c0029954 <iso_kprintfd>:
c0029954:	83 ec 0c             	sub    esp,0xc
c0029957:	83 ec 08             	sub    esp,0x8
c002995a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002995e:	68 16 1e 03 c0       	push   0xc0031e16
c0029963:	e8 ed fa fe ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0029968:	83 c4 10             	add    esp,0x10
c002996b:	90                   	nop
c002996c:	83 c4 0c             	add    esp,0xc
c002996f:	c3                   	ret    

c0029970 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0029970:	b8 08 00 00 00       	mov    eax,0x8
c0029975:	c3                   	ret    

c0029976 <ISO9660::truncate(void*, unsigned long long)>:
c0029976:	b8 01 00 00 00       	mov    eax,0x1
c002997b:	c3                   	ret    

c002997c <ISO9660::getName()>:
c002997c:	b8 c8 3b 03 c0       	mov    eax,0xc0033bc8
c0029981:	c3                   	ret    

c0029982 <ISO9660::closeDir(void*)>:
c0029982:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029986:	8b 00                	mov    eax,DWORD PTR [eax]
c0029988:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c002998b:	90                   	nop

c002998c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002998c:	b8 01 00 00 00       	mov    eax,0x1
c0029991:	c3                   	ret    

c0029992 <ISO9660::unlink(char const*)>:
c0029992:	b8 01 00 00 00       	mov    eax,0x1
c0029997:	c3                   	ret    

c0029998 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0029998:	b8 03 00 00 00       	mov    eax,0x3
c002999d:	c3                   	ret    

c002999e <ISO9660::rename(char const*, char const*)>:
c002999e:	b8 01 00 00 00       	mov    eax,0x1
c00299a3:	c3                   	ret    

c00299a4 <ISO9660::mkdir(char const*)>:
c00299a4:	b8 01 00 00 00       	mov    eax,0x1
c00299a9:	c3                   	ret    

c00299aa <ISO9660::~ISO9660()>:
c00299aa:	83 ec 0c             	sub    esp,0xc
c00299ad:	ba 08 3d 03 c0       	mov    edx,0xc0033d08
c00299b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299b6:	89 10                	mov    DWORD PTR [eax],edx
c00299b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299bc:	83 ec 0c             	sub    esp,0xc
c00299bf:	50                   	push   eax
c00299c0:	e8 19 09 ff ff       	call   c001a2de <Filesystem::~Filesystem()>
c00299c5:	83 c4 10             	add    esp,0x10
c00299c8:	90                   	nop
c00299c9:	83 c4 0c             	add    esp,0xc
c00299cc:	c3                   	ret    
c00299cd:	90                   	nop

c00299ce <ISO9660::~ISO9660()>:
c00299ce:	83 ec 0c             	sub    esp,0xc
c00299d1:	83 ec 0c             	sub    esp,0xc
c00299d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299d8:	e8 cd ff ff ff       	call   c00299aa <ISO9660::~ISO9660()>
c00299dd:	83 c4 10             	add    esp,0x10
c00299e0:	83 ec 08             	sub    esp,0x8
c00299e3:	6a 08                	push   0x8
c00299e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299e9:	e8 3a f9 fe ff       	call   c0019328 <operator delete(void*, unsigned long)>
c00299ee:	83 c4 10             	add    esp,0x10
c00299f1:	83 c4 0c             	add    esp,0xc
c00299f4:	c3                   	ret    
c00299f5:	90                   	nop

c00299f6 <ISO9660::exists(char const*)>:
c00299f6:	83 ec 18             	sub    esp,0x18
c00299f9:	68 e3 3b 03 c0       	push   0xc0033be3
c00299fe:	e8 8b 6d ff ff       	call   c002078e <KePanic(char const*)>
c0029a03:	31 c0                	xor    eax,eax
c0029a05:	83 c4 1c             	add    esp,0x1c
c0029a08:	c3                   	ret    
c0029a09:	90                   	nop

c0029a0a <ISO9660::open(char const*, void**, FileOpenMode)>:
c0029a0a:	56                   	push   esi
c0029a0b:	53                   	push   ebx
c0029a0c:	53                   	push   ebx
c0029a0d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0029a11:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029a15:	85 db                	test   ebx,ebx
c0029a17:	0f 84 ca 00 00 00    	je     c0029ae7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029a1d:	85 f6                	test   esi,esi
c0029a1f:	0f 84 c2 00 00 00    	je     c0029ae7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029a25:	b8 03 00 00 00       	mov    eax,0x3
c0029a2a:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0029a2f:	0f 85 b7 00 00 00    	jne    c0029aec <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029a35:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0029a37:	0f be 05 80 13 04 c0 	movsx  eax,BYTE PTR ds:0xc0041380
c0029a3e:	38 0d 80 13 04 c0    	cmp    BYTE PTR ds:0xc0041380,cl
c0029a44:	74 1b                	je     c0029a61 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0029a46:	85 c0                	test   eax,eax
c0029a48:	74 10                	je     c0029a5a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0029a4a:	83 ec 0c             	sub    esp,0xc
c0029a4d:	68 01 3c 03 c0       	push   0xc0033c01
c0029a52:	e8 37 6d ff ff       	call   c002078e <KePanic(char const*)>
c0029a57:	83 c4 10             	add    esp,0x10
c0029a5a:	8a 03                	mov    al,BYTE PTR [ebx]
c0029a5c:	a2 80 13 04 c0       	mov    ds:0xc0041380,al
c0029a61:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029a64:	8b 04 85 7c 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd84]
c0029a6b:	85 c0                	test   eax,eax
c0029a6d:	74 09                	je     c0029a78 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0029a6f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0029a76:	74 48                	je     c0029ac0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0029a78:	83 ec 0c             	sub    esp,0xc
c0029a7b:	68 11 3c 03 c0       	push   0xc0033c11
c0029a80:	e8 d0 f9 fe ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0029a85:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029a88:	83 c4 10             	add    esp,0x10
c0029a8b:	8b 04 85 7c 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd84]
c0029a92:	85 c0                	test   eax,eax
c0029a94:	74 17                	je     c0029aad <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0029a96:	83 ec 0c             	sub    esp,0xc
c0029a99:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029aa0:	68 31 3c 03 c0       	push   0xc0033c31
c0029aa5:	e8 ab f9 fe ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0029aaa:	83 c4 10             	add    esp,0x10
c0029aad:	83 ec 0c             	sub    esp,0xc
c0029ab0:	0f be 05 80 13 04 c0 	movsx  eax,BYTE PTR ds:0xc0041380
c0029ab7:	50                   	push   eax
c0029ab8:	e8 d5 d2 fd ff       	call   c0006d92 <init_percd>
c0029abd:	83 c4 10             	add    esp,0x10
c0029ac0:	83 c3 03             	add    ebx,0x3
c0029ac3:	51                   	push   ecx
c0029ac4:	51                   	push   ecx
c0029ac5:	6a 00                	push   0x0
c0029ac7:	53                   	push   ebx
c0029ac8:	e8 8c cd fd ff       	call   c0006859 <iso_open>
c0029acd:	83 c4 10             	add    esp,0x10
c0029ad0:	89 c2                	mov    edx,eax
c0029ad2:	b8 01 00 00 00       	mov    eax,0x1
c0029ad7:	83 fa ff             	cmp    edx,0xffffffff
c0029ada:	74 10                	je     c0029aec <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029adc:	83 c2 32             	add    edx,0x32
c0029adf:	31 c0                	xor    eax,eax
c0029ae1:	01 d2                	add    edx,edx
c0029ae3:	89 16                	mov    DWORD PTR [esi],edx
c0029ae5:	eb 05                	jmp    c0029aec <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029ae7:	b8 04 00 00 00       	mov    eax,0x4
c0029aec:	5a                   	pop    edx
c0029aed:	5b                   	pop    ebx
c0029aee:	5e                   	pop    esi
c0029aef:	c3                   	ret    

c0029af0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0029af0:	53                   	push   ebx
c0029af1:	83 ec 08             	sub    esp,0x8
c0029af4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0029af8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029afc:	85 c0                	test   eax,eax
c0029afe:	74 2d                	je     c0029b2d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0029b00:	85 db                	test   ebx,ebx
c0029b02:	74 29                	je     c0029b2d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0029b04:	b9 02 00 00 00       	mov    ecx,0x2
c0029b09:	52                   	push   edx
c0029b0a:	99                   	cdq    
c0029b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b0f:	f7 f9                	idiv   ecx
c0029b11:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0029b15:	83 e8 32             	sub    eax,0x32
c0029b18:	50                   	push   eax
c0029b19:	e8 e3 cd fd ff       	call   c0006901 <iso_read>
c0029b1e:	83 c4 10             	add    esp,0x10
c0029b21:	89 03                	mov    DWORD PTR [ebx],eax
c0029b23:	09 d0                	or     eax,edx
c0029b25:	0f 94 c0             	sete   al
c0029b28:	0f b6 c0             	movzx  eax,al
c0029b2b:	eb 05                	jmp    c0029b32 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0029b2d:	b8 04 00 00 00       	mov    eax,0x4
c0029b32:	83 c4 08             	add    esp,0x8
c0029b35:	5b                   	pop    ebx
c0029b36:	c3                   	ret    
c0029b37:	90                   	nop

c0029b38 <ISO9660::seek(void*, unsigned long long)>:
c0029b38:	57                   	push   edi
c0029b39:	56                   	push   esi
c0029b3a:	b8 04 00 00 00       	mov    eax,0x4
c0029b3f:	51                   	push   ecx
c0029b40:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029b44:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029b48:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029b4c:	85 d2                	test   edx,edx
c0029b4e:	74 26                	je     c0029b76 <ISO9660::seek(void*, unsigned long long)+0x3e>
c0029b50:	6a 00                	push   0x0
c0029b52:	b9 02 00 00 00       	mov    ecx,0x2
c0029b57:	57                   	push   edi
c0029b58:	89 d0                	mov    eax,edx
c0029b5a:	56                   	push   esi
c0029b5b:	99                   	cdq    
c0029b5c:	f7 f9                	idiv   ecx
c0029b5e:	83 e8 32             	sub    eax,0x32
c0029b61:	50                   	push   eax
c0029b62:	e8 b0 ce fd ff       	call   c0006a17 <iso_seek>
c0029b67:	83 c4 10             	add    esp,0x10
c0029b6a:	31 f0                	xor    eax,esi
c0029b6c:	31 fa                	xor    edx,edi
c0029b6e:	09 d0                	or     eax,edx
c0029b70:	0f 95 c0             	setne  al
c0029b73:	0f b6 c0             	movzx  eax,al
c0029b76:	5a                   	pop    edx
c0029b77:	5e                   	pop    esi
c0029b78:	5f                   	pop    edi
c0029b79:	c3                   	ret    

c0029b7a <ISO9660::tell(void*, unsigned long long*)>:
c0029b7a:	53                   	push   ebx
c0029b7b:	83 ec 08             	sub    esp,0x8
c0029b7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0029b82:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0029b86:	85 c0                	test   eax,eax
c0029b88:	74 24                	je     c0029bae <ISO9660::tell(void*, unsigned long long*)+0x34>
c0029b8a:	85 db                	test   ebx,ebx
c0029b8c:	74 20                	je     c0029bae <ISO9660::tell(void*, unsigned long long*)+0x34>
c0029b8e:	83 ec 0c             	sub    esp,0xc
c0029b91:	b9 02 00 00 00       	mov    ecx,0x2
c0029b96:	99                   	cdq    
c0029b97:	f7 f9                	idiv   ecx
c0029b99:	83 e8 32             	sub    eax,0x32
c0029b9c:	50                   	push   eax
c0029b9d:	e8 f9 ce fd ff       	call   c0006a9b <iso_tell>
c0029ba2:	83 c4 10             	add    esp,0x10
c0029ba5:	89 03                	mov    DWORD PTR [ebx],eax
c0029ba7:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0029baa:	31 c0                	xor    eax,eax
c0029bac:	eb 05                	jmp    c0029bb3 <ISO9660::tell(void*, unsigned long long*)+0x39>
c0029bae:	b8 04 00 00 00       	mov    eax,0x4
c0029bb3:	83 c4 08             	add    esp,0x8
c0029bb6:	5b                   	pop    ebx
c0029bb7:	c3                   	ret    

c0029bb8 <ISO9660::stat(void*, unsigned long long*)>:
c0029bb8:	53                   	push   ebx
c0029bb9:	83 ec 14             	sub    esp,0x14
c0029bbc:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0029bc0:	68 55 3c 03 c0       	push   0xc0033c55
c0029bc5:	e8 8b f8 fe ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0029bca:	83 c4 10             	add    esp,0x10
c0029bcd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029bd2:	74 2c                	je     c0029c00 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0029bd4:	85 db                	test   ebx,ebx
c0029bd6:	74 28                	je     c0029c00 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0029bd8:	83 ec 0c             	sub    esp,0xc
c0029bdb:	b9 02 00 00 00       	mov    ecx,0x2
c0029be0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029be4:	99                   	cdq    
c0029be5:	f7 f9                	idiv   ecx
c0029be7:	83 e8 32             	sub    eax,0x32
c0029bea:	50                   	push   eax
c0029beb:	e8 dc ce fd ff       	call   c0006acc <iso_total>
c0029bf0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0029bf7:	89 03                	mov    DWORD PTR [ebx],eax
c0029bf9:	83 c4 10             	add    esp,0x10
c0029bfc:	31 c0                	xor    eax,eax
c0029bfe:	eb 05                	jmp    c0029c05 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0029c00:	b8 04 00 00 00       	mov    eax,0x4
c0029c05:	83 c4 08             	add    esp,0x8
c0029c08:	5b                   	pop    ebx
c0029c09:	c3                   	ret    

c0029c0a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0029c0a:	55                   	push   ebp
c0029c0b:	57                   	push   edi
c0029c0c:	56                   	push   esi
c0029c0d:	53                   	push   ebx
c0029c0e:	83 ec 18             	sub    esp,0x18
c0029c11:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0029c15:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0029c19:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0029c1d:	68 5d 3c 03 c0       	push   0xc0033c5d
c0029c22:	e8 2e f8 fe ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0029c27:	83 c4 10             	add    esp,0x10
c0029c2a:	85 ff                	test   edi,edi
c0029c2c:	0f 94 c0             	sete   al
c0029c2f:	85 f6                	test   esi,esi
c0029c31:	0f 94 c2             	sete   dl
c0029c34:	09 d0                	or     eax,edx
c0029c36:	a8 01                	test   al,0x1
c0029c38:	0f 85 dd 00 00 00    	jne    c0029d1b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0029c3e:	85 db                	test   ebx,ebx
c0029c40:	0f 84 d5 00 00 00    	je     c0029d1b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0029c46:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0029c49:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0029c4f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0029c56:	0f be 05 80 13 04 c0 	movsx  eax,BYTE PTR ds:0xc0041380
c0029c5d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0029c5f:	38 0d 80 13 04 c0    	cmp    BYTE PTR ds:0xc0041380,cl
c0029c65:	74 1b                	je     c0029c82 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c0029c67:	85 c0                	test   eax,eax
c0029c69:	74 10                	je     c0029c7b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c0029c6b:	83 ec 0c             	sub    esp,0xc
c0029c6e:	68 01 3c 03 c0       	push   0xc0033c01
c0029c73:	e8 16 6b ff ff       	call   c002078e <KePanic(char const*)>
c0029c78:	83 c4 10             	add    esp,0x10
c0029c7b:	8a 03                	mov    al,BYTE PTR [ebx]
c0029c7d:	a2 80 13 04 c0       	mov    ds:0xc0041380,al
c0029c82:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029c85:	8b 04 85 7c 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd84]
c0029c8c:	85 c0                	test   eax,eax
c0029c8e:	74 09                	je     c0029c99 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c0029c90:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0029c97:	74 51                	je     c0029cea <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0029c99:	83 ec 0c             	sub    esp,0xc
c0029c9c:	68 65 3c 03 c0       	push   0xc0033c65
c0029ca1:	e8 af f7 fe ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0029ca6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029ca9:	83 c4 10             	add    esp,0x10
c0029cac:	83 3c 85 7c 02 04 c0 00 	cmp    DWORD PTR [eax*4-0x3ffbfd84],0x0
c0029cb4:	74 21                	je     c0029cd7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c0029cb6:	83 ec 0c             	sub    esp,0xc
c0029cb9:	68 85 3c 03 c0       	push   0xc0033c85
c0029cbe:	e8 92 f7 fe ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0029cc3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029cc6:	83 c4 10             	add    esp,0x10
c0029cc9:	8b 04 85 7c 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd84]
c0029cd0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029cd7:	83 ec 0c             	sub    esp,0xc
c0029cda:	0f be 05 80 13 04 c0 	movsx  eax,BYTE PTR ds:0xc0041380
c0029ce1:	50                   	push   eax
c0029ce2:	e8 ab d0 fd ff       	call   c0006d92 <init_percd>
c0029ce7:	83 c4 10             	add    esp,0x10
c0029cea:	83 c3 03             	add    ebx,0x3
c0029ced:	52                   	push   edx
c0029cee:	52                   	push   edx
c0029cef:	6a 00                	push   0x0
c0029cf1:	53                   	push   ebx
c0029cf2:	e8 62 cb fd ff       	call   c0006859 <iso_open>
c0029cf7:	83 c4 10             	add    esp,0x10
c0029cfa:	89 c5                	mov    ebp,eax
c0029cfc:	83 f8 ff             	cmp    eax,0xffffffff
c0029cff:	75 21                	jne    c0029d22 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c0029d01:	50                   	push   eax
c0029d02:	50                   	push   eax
c0029d03:	6a 01                	push   0x1
c0029d05:	53                   	push   ebx
c0029d06:	e8 4e cb fd ff       	call   c0006859 <iso_open>
c0029d0b:	83 c4 10             	add    esp,0x10
c0029d0e:	ba 02 00 00 00       	mov    edx,0x2
c0029d13:	40                   	inc    eax
c0029d14:	74 2b                	je     c0029d41 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0029d16:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0029d19:	eb 24                	jmp    c0029d3f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0029d1b:	ba 04 00 00 00       	mov    edx,0x4
c0029d20:	eb 1f                	jmp    c0029d41 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0029d22:	83 ec 0c             	sub    esp,0xc
c0029d25:	50                   	push   eax
c0029d26:	e8 a1 cd fd ff       	call   c0006acc <iso_total>
c0029d2b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0029d32:	89 07                	mov    DWORD PTR [edi],eax
c0029d34:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0029d37:	e8 a7 cb fd ff       	call   c00068e3 <iso_close>
c0029d3c:	83 c4 10             	add    esp,0x10
c0029d3f:	31 d2                	xor    edx,edx
c0029d41:	83 c4 0c             	add    esp,0xc
c0029d44:	89 d0                	mov    eax,edx
c0029d46:	5b                   	pop    ebx
c0029d47:	5e                   	pop    esi
c0029d48:	5f                   	pop    edi
c0029d49:	5d                   	pop    ebp
c0029d4a:	c3                   	ret    
c0029d4b:	90                   	nop

c0029d4c <ISO9660::close(void*)>:
c0029d4c:	83 ec 0c             	sub    esp,0xc
c0029d4f:	b8 04 00 00 00       	mov    eax,0x4
c0029d54:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029d58:	85 d2                	test   edx,edx
c0029d5a:	74 1b                	je     c0029d77 <ISO9660::close(void*)+0x2b>
c0029d5c:	83 ec 0c             	sub    esp,0xc
c0029d5f:	b9 02 00 00 00       	mov    ecx,0x2
c0029d64:	89 d0                	mov    eax,edx
c0029d66:	99                   	cdq    
c0029d67:	f7 f9                	idiv   ecx
c0029d69:	83 e8 32             	sub    eax,0x32
c0029d6c:	50                   	push   eax
c0029d6d:	e8 71 cb fd ff       	call   c00068e3 <iso_close>
c0029d72:	83 c4 10             	add    esp,0x10
c0029d75:	31 c0                	xor    eax,eax
c0029d77:	83 c4 0c             	add    esp,0xc
c0029d7a:	c3                   	ret    
c0029d7b:	90                   	nop

c0029d7c <ISO9660::openDir(char const*, void**)>:
c0029d7c:	56                   	push   esi
c0029d7d:	53                   	push   ebx
c0029d7e:	50                   	push   eax
c0029d7f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0029d83:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029d87:	85 db                	test   ebx,ebx
c0029d89:	0f 84 bd 00 00 00    	je     c0029e4c <ISO9660::openDir(char const*, void**)+0xd0>
c0029d8f:	85 f6                	test   esi,esi
c0029d91:	0f 84 b5 00 00 00    	je     c0029e4c <ISO9660::openDir(char const*, void**)+0xd0>
c0029d97:	8a 13                	mov    dl,BYTE PTR [ebx]
c0029d99:	0f be 05 80 13 04 c0 	movsx  eax,BYTE PTR ds:0xc0041380
c0029da0:	38 15 80 13 04 c0    	cmp    BYTE PTR ds:0xc0041380,dl
c0029da6:	74 1b                	je     c0029dc3 <ISO9660::openDir(char const*, void**)+0x47>
c0029da8:	85 c0                	test   eax,eax
c0029daa:	74 10                	je     c0029dbc <ISO9660::openDir(char const*, void**)+0x40>
c0029dac:	83 ec 0c             	sub    esp,0xc
c0029daf:	68 01 3c 03 c0       	push   0xc0033c01
c0029db4:	e8 d5 69 ff ff       	call   c002078e <KePanic(char const*)>
c0029db9:	83 c4 10             	add    esp,0x10
c0029dbc:	8a 03                	mov    al,BYTE PTR [ebx]
c0029dbe:	a2 80 13 04 c0       	mov    ds:0xc0041380,al
c0029dc3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029dc6:	8b 04 85 7c 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd84]
c0029dcd:	85 c0                	test   eax,eax
c0029dcf:	74 10                	je     c0029de1 <ISO9660::openDir(char const*, void**)+0x65>
c0029dd1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0029dd8:	74 1a                	je     c0029df4 <ISO9660::openDir(char const*, void**)+0x78>
c0029dda:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029de1:	83 ec 0c             	sub    esp,0xc
c0029de4:	0f be 05 80 13 04 c0 	movsx  eax,BYTE PTR ds:0xc0041380
c0029deb:	50                   	push   eax
c0029dec:	e8 a1 cf fd ff       	call   c0006d92 <init_percd>
c0029df1:	83 c4 10             	add    esp,0x10
c0029df4:	83 c3 03             	add    ebx,0x3
c0029df7:	50                   	push   eax
c0029df8:	50                   	push   eax
c0029df9:	6a 01                	push   0x1
c0029dfb:	53                   	push   ebx
c0029dfc:	e8 58 ca fd ff       	call   c0006859 <iso_open>
c0029e01:	83 c4 10             	add    esp,0x10
c0029e04:	89 c3                	mov    ebx,eax
c0029e06:	83 f8 ff             	cmp    eax,0xffffffff
c0029e09:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0029e0e:	75 1c                	jne    c0029e2c <ISO9660::openDir(char const*, void**)+0xb0>
c0029e10:	53                   	push   ebx
c0029e11:	53                   	push   ebx
c0029e12:	68 a9 3c 03 c0       	push   0xc0033ca9
c0029e17:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029e1d:	e8 94 d7 fe ff       	call   c00175b6 <VgaText::puts(char const*)>
c0029e22:	83 c4 10             	add    esp,0x10
c0029e25:	b8 01 00 00 00       	mov    eax,0x1
c0029e2a:	eb 25                	jmp    c0029e51 <ISO9660::openDir(char const*, void**)+0xd5>
c0029e2c:	01 db                	add    ebx,ebx
c0029e2e:	51                   	push   ecx
c0029e2f:	83 c3 65             	add    ebx,0x65
c0029e32:	51                   	push   ecx
c0029e33:	68 bc 3c 03 c0       	push   0xc0033cbc
c0029e38:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029e3e:	e8 73 d7 fe ff       	call   c00175b6 <VgaText::puts(char const*)>
c0029e43:	89 1e                	mov    DWORD PTR [esi],ebx
c0029e45:	83 c4 10             	add    esp,0x10
c0029e48:	31 c0                	xor    eax,eax
c0029e4a:	eb 05                	jmp    c0029e51 <ISO9660::openDir(char const*, void**)+0xd5>
c0029e4c:	b8 04 00 00 00       	mov    eax,0x4
c0029e51:	5a                   	pop    edx
c0029e52:	5b                   	pop    ebx
c0029e53:	5e                   	pop    esi
c0029e54:	c3                   	ret    
c0029e55:	90                   	nop

c0029e56 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0029e56:	55                   	push   ebp
c0029e57:	57                   	push   edi
c0029e58:	56                   	push   esi
c0029e59:	53                   	push   ebx
c0029e5a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0029e60:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0029e67:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0029e6e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0029e76:	0f 84 e7 00 00 00    	je     c0029f63 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0029e7c:	85 db                	test   ebx,ebx
c0029e7e:	0f 84 df 00 00 00    	je     c0029f63 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0029e84:	83 ec 0c             	sub    esp,0xc
c0029e87:	68 cf 3c 03 c0       	push   0xc0033ccf
c0029e8c:	e8 c4 f5 fe ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c0029e91:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0029e98:	b9 02 00 00 00       	mov    ecx,0x2
c0029e9d:	99                   	cdq    
c0029e9e:	f7 f9                	idiv   ecx
c0029ea0:	83 e8 32             	sub    eax,0x32
c0029ea3:	89 04 24             	mov    DWORD PTR [esp],eax
c0029ea6:	e8 73 cc fd ff       	call   c0006b1e <iso_readdir>
c0029eab:	83 c4 10             	add    esp,0x10
c0029eae:	89 c6                	mov    esi,eax
c0029eb0:	85 c0                	test   eax,eax
c0029eb2:	75 37                	jne    c0029eeb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c0029eb4:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0029eb9:	56                   	push   esi
c0029eba:	56                   	push   esi
c0029ebb:	68 da 3c 03 c0       	push   0xc0033cda
c0029ec0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029ec6:	e8 eb d6 fe ff       	call   c00175b6 <VgaText::puts(char const*)>
c0029ecb:	83 c4 0c             	add    esp,0xc
c0029ece:	68 10 01 00 00       	push   0x110
c0029ed3:	6a 00                	push   0x0
c0029ed5:	57                   	push   edi
c0029ed6:	e8 15 66 fd ff       	call   c00004f0 <memset>
c0029edb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0029ee1:	83 c4 10             	add    esp,0x10
c0029ee4:	b8 01 00 00 00       	mov    eax,0x1
c0029ee9:	eb 7d                	jmp    c0029f68 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0029eeb:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0029ef1:	8d 68 08             	lea    ebp,[eax+0x8]
c0029ef4:	83 ec 0c             	sub    esp,0xc
c0029ef7:	55                   	push   ebp
c0029ef8:	e8 73 66 fd ff       	call   c0000570 <strlen>
c0029efd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0029f05:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0029f09:	83 c4 10             	add    esp,0x10
c0029f0c:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0029f10:	75 0a                	jne    c0029f1c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0029f12:	b8 02 00 00 00       	mov    eax,0x2
c0029f17:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0029f1a:	74 05                	je     c0029f21 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c0029f1c:	b8 01 00 00 00       	mov    eax,0x1
c0029f21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0029f25:	50                   	push   eax
c0029f26:	50                   	push   eax
c0029f27:	55                   	push   ebp
c0029f28:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0029f2c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0029f30:	50                   	push   eax
c0029f31:	e8 0a 67 fd ff       	call   c0000640 <strcpy>
c0029f36:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0029f3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029f3f:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0029f45:	5a                   	pop    edx
c0029f46:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0029f4b:	59                   	pop    ecx
c0029f4c:	68 ed 3c 03 c0       	push   0xc0033ced
c0029f51:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029f57:	e8 5a d6 fe ff       	call   c00175b6 <VgaText::puts(char const*)>
c0029f5c:	83 c4 10             	add    esp,0x10
c0029f5f:	31 c0                	xor    eax,eax
c0029f61:	eb 05                	jmp    c0029f68 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0029f63:	b8 04 00 00 00       	mov    eax,0x4
c0029f68:	81 c4 1c 01 00 00    	add    esp,0x11c
c0029f6e:	5b                   	pop    ebx
c0029f6f:	5e                   	pop    esi
c0029f70:	5f                   	pop    edi
c0029f71:	5d                   	pop    ebp
c0029f72:	c3                   	ret    

c0029f73 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0029f73:	57                   	push   edi
c0029f74:	56                   	push   esi
c0029f75:	53                   	push   ebx
c0029f76:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0029f7a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0029f7e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0029f82:	39 35 84 13 04 c0    	cmp    DWORD PTR ds:0xc0041384,esi
c0029f88:	0f be cb             	movsx  ecx,bl
c0029f8b:	75 0b                	jne    c0029f98 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0029f8d:	0f be 05 a0 4f 03 c0 	movsx  eax,BYTE PTR ds:0xc0034fa0
c0029f94:	39 c8                	cmp    eax,ecx
c0029f96:	74 47                	je     c0029fdf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0029f98:	83 ec 0c             	sub    esp,0xc
c0029f9b:	31 d2                	xor    edx,edx
c0029f9d:	68 a0 13 04 c0       	push   0xc00413a0
c0029fa2:	6a 01                	push   0x1
c0029fa4:	52                   	push   edx
c0029fa5:	56                   	push   esi
c0029fa6:	ff 34 8d 7c 02 04 c0 	push   DWORD PTR [ecx*4-0x3ffbfd84]
c0029fad:	e8 52 2a ff ff       	call   c001ca04 <LogicalDisk::read(unsigned long long, int, void*)>
c0029fb2:	83 c4 20             	add    esp,0x20
c0029fb5:	85 c0                	test   eax,eax
c0029fb7:	75 0e                	jne    c0029fc7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0029fb9:	89 35 84 13 04 c0    	mov    DWORD PTR ds:0xc0041384,esi
c0029fbf:	88 1d a0 4f 03 c0    	mov    BYTE PTR ds:0xc0034fa0,bl
c0029fc5:	eb 18                	jmp    c0029fdf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0029fc7:	50                   	push   eax
c0029fc8:	68 00 08 00 00       	push   0x800
c0029fcd:	6a 00                	push   0x0
c0029fcf:	57                   	push   edi
c0029fd0:	e8 1b 65 fd ff       	call   c00004f0 <memset>
c0029fd5:	83 c4 10             	add    esp,0x10
c0029fd8:	b8 01 00 00 00       	mov    eax,0x1
c0029fdd:	eb 0e                	jmp    c0029fed <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0029fdf:	be a0 13 04 c0       	mov    esi,0xc00413a0
c0029fe4:	b9 00 08 00 00       	mov    ecx,0x800
c0029fe9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029feb:	31 c0                	xor    eax,eax
c0029fed:	5b                   	pop    ebx
c0029fee:	5e                   	pop    esi
c0029fef:	5f                   	pop    edi
c0029ff0:	c3                   	ret    
c0029ff1:	90                   	nop

c0029ff2 <ISO9660::tryMount(LogicalDisk*, int)>:
c0029ff2:	53                   	push   ebx
c0029ff3:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0029ff9:	c7 05 84 13 04 c0 ef be ad de 	mov    DWORD PTR ds:0xc0041384,0xdeadbeef
c002a003:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c002a00a:	8d 58 41             	lea    ebx,[eax+0x41]
c002a00d:	0f be db             	movsx  ebx,bl
c002a010:	53                   	push   ebx
c002a011:	8d 44 24 08          	lea    eax,[esp+0x8]
c002a015:	50                   	push   eax
c002a016:	6a 10                	push   0x10
c002a018:	e8 56 ff ff ff       	call   c0029f73 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002a01d:	83 c4 10             	add    esp,0x10
c002a020:	31 d2                	xor    edx,edx
c002a022:	85 c0                	test   eax,eax
c002a024:	75 33                	jne    c002a059 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002a026:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002a02b:	75 2c                	jne    c002a059 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002a02d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002a032:	75 25                	jne    c002a059 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002a034:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002a039:	75 1e                	jne    c002a059 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002a03b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002a040:	75 17                	jne    c002a059 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002a042:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002a047:	75 10                	jne    c002a059 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002a049:	83 ec 0c             	sub    esp,0xc
c002a04c:	53                   	push   ebx
c002a04d:	e8 40 cd fd ff       	call   c0006d92 <init_percd>
c002a052:	83 c4 10             	add    esp,0x10
c002a055:	40                   	inc    eax
c002a056:	0f 95 c2             	setne  dl
c002a059:	88 d0                	mov    al,dl
c002a05b:	81 c4 08 08 00 00    	add    esp,0x808
c002a061:	5b                   	pop    ebx
c002a062:	c3                   	ret    
c002a063:	90                   	nop

c002a064 <ISO9660::ISO9660()>:
c002a064:	83 ec 0c             	sub    esp,0xc
c002a067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a06b:	83 ec 0c             	sub    esp,0xc
c002a06e:	50                   	push   eax
c002a06f:	e8 46 02 ff ff       	call   c001a2ba <Filesystem::Filesystem()>
c002a074:	83 c4 10             	add    esp,0x10
c002a077:	ba 08 3d 03 c0       	mov    edx,0xc0033d08
c002a07c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a080:	89 10                	mov    DWORD PTR [eax],edx
c002a082:	e8 1d ce fd ff       	call   c0006ea4 <fs_iso9660_init>
c002a087:	90                   	nop
c002a088:	83 c4 0c             	add    esp,0xc
c002a08b:	c3                   	ret    

c002a08c <SoundCard::beginPlayback()>:
c002a08c:	c7 44 24 04 6c 3d 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033d6c
c002a094:	e9 f5 66 ff ff       	jmp    c002078e <KePanic(char const*)>
c002a099:	90                   	nop

c002a09a <SoundCard::stopPlayback()>:
c002a09a:	c7 44 24 04 6c 3d 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033d6c
c002a0a2:	e9 e7 66 ff ff       	jmp    c002078e <KePanic(char const*)>
c002a0a7:	90                   	nop

c002a0a8 <SoundCard::SoundCard(char const*)>:
c002a0a8:	83 ec 1c             	sub    esp,0x1c
c002a0ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a0af:	83 ec 08             	sub    esp,0x8
c002a0b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a0b6:	50                   	push   eax
c002a0b7:	e8 b8 16 ff ff       	call   c001b774 <Device::Device(char const*)>
c002a0bc:	83 c4 10             	add    esp,0x10
c002a0bf:	ba b8 3d 03 c0       	mov    edx,0xc0033db8
c002a0c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a0c8:	89 10                	mov    DWORD PTR [eax],edx
c002a0ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a0ce:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c002a0d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a0d9:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c002a0e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a0e7:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c002a0f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a0f5:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c002a0ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a103:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002a10d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002a115:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002a11a:	7f 1a                	jg     c002a136 <SoundCard::SoundCard(char const*)+0x8e>
c002a11c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a120:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002a124:	83 c2 54             	add    edx,0x54
c002a127:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c002a12f:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c002a134:	eb df                	jmp    c002a115 <SoundCard::SoundCard(char const*)+0x6d>
c002a136:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a13a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c002a141:	90                   	nop
c002a142:	83 c4 1c             	add    esp,0x1c
c002a145:	c3                   	ret    

c002a146 <SoundCard::~SoundCard()>:
c002a146:	83 ec 0c             	sub    esp,0xc
c002a149:	ba b8 3d 03 c0       	mov    edx,0xc0033db8
c002a14e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a152:	89 10                	mov    DWORD PTR [eax],edx
c002a154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a158:	83 ec 0c             	sub    esp,0xc
c002a15b:	50                   	push   eax
c002a15c:	e8 b3 13 ff ff       	call   c001b514 <Device::~Device()>
c002a161:	83 c4 10             	add    esp,0x10
c002a164:	90                   	nop
c002a165:	83 c4 0c             	add    esp,0xc
c002a168:	c3                   	ret    
c002a169:	90                   	nop

c002a16a <SoundCard::~SoundCard()>:
c002a16a:	83 ec 0c             	sub    esp,0xc
c002a16d:	83 ec 0c             	sub    esp,0xc
c002a170:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a174:	e8 cd ff ff ff       	call   c002a146 <SoundCard::~SoundCard()>
c002a179:	83 c4 10             	add    esp,0x10
c002a17c:	83 ec 08             	sub    esp,0x8
c002a17f:	68 e8 01 00 00       	push   0x1e8
c002a184:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a188:	e8 9b f1 fe ff       	call   c0019328 <operator delete(void*, unsigned long)>
c002a18d:	83 c4 10             	add    esp,0x10
c002a190:	83 c4 0c             	add    esp,0xc
c002a193:	c3                   	ret    

c002a194 <SoundCard::configureRates(int, int, int)>:
c002a194:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002a198:	31 c0                	xor    eax,eax
c002a19a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c002a1a1:	75 20                	jne    c002a1c3 <SoundCard::configureRates(int, int, int)+0x2f>
c002a1a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002a1a7:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c002a1ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a1b1:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c002a1b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a1bb:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c002a1c1:	b0 01                	mov    al,0x1
c002a1c3:	c3                   	ret    

c002a1c4 <SoundCard::getSamples16(int, short*)>:
c002a1c4:	55                   	push   ebp
c002a1c5:	57                   	push   edi
c002a1c6:	31 ff                	xor    edi,edi
c002a1c8:	56                   	push   esi
c002a1c9:	53                   	push   ebx
c002a1ca:	31 db                	xor    ebx,ebx
c002a1cc:	83 ec 10             	sub    esp,0x10
c002a1cf:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002a1d3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c002a1d7:	8d 04 36             	lea    eax,[esi+esi*1]
c002a1da:	50                   	push   eax
c002a1db:	6a 00                	push   0x0
c002a1dd:	55                   	push   ebp
c002a1de:	e8 0d 63 fd ff       	call   c00004f0 <memset>
c002a1e3:	83 c4 10             	add    esp,0x10
c002a1e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a1ea:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c002a1f1:	85 c0                	test   eax,eax
c002a1f3:	74 1b                	je     c002a210 <SoundCard::getSamples16(int, short*)+0x4c>
c002a1f5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c002a1f9:	75 15                	jne    c002a210 <SoundCard::getSamples16(int, short*)+0x4c>
c002a1fb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002a1ff:	55                   	push   ebp
c002a200:	56                   	push   esi
c002a201:	50                   	push   eax
c002a202:	e8 f1 02 00 00       	call   c002a4f8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c002a207:	83 c4 10             	add    esp,0x10
c002a20a:	39 c7                	cmp    edi,eax
c002a20c:	7d 02                	jge    c002a210 <SoundCard::getSamples16(int, short*)+0x4c>
c002a20e:	89 c7                	mov    edi,eax
c002a210:	43                   	inc    ebx
c002a211:	83 fb 20             	cmp    ebx,0x20
c002a214:	75 d0                	jne    c002a1e6 <SoundCard::getSamples16(int, short*)+0x22>
c002a216:	83 c4 0c             	add    esp,0xc
c002a219:	89 f8                	mov    eax,edi
c002a21b:	5b                   	pop    ebx
c002a21c:	5e                   	pop    esi
c002a21d:	5f                   	pop    edi
c002a21e:	5d                   	pop    ebp
c002a21f:	c3                   	ret    

c002a220 <SoundCard::getSamples32(int, int*)>:
c002a220:	55                   	push   ebp
c002a221:	57                   	push   edi
c002a222:	31 ff                	xor    edi,edi
c002a224:	56                   	push   esi
c002a225:	31 f6                	xor    esi,esi
c002a227:	53                   	push   ebx
c002a228:	83 ec 10             	sub    esp,0x10
c002a22b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002a22f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c002a233:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c002a237:	c1 e0 02             	shl    eax,0x2
c002a23a:	50                   	push   eax
c002a23b:	6a 00                	push   0x0
c002a23d:	55                   	push   ebp
c002a23e:	e8 ad 62 fd ff       	call   c00004f0 <memset>
c002a243:	83 c4 10             	add    esp,0x10
c002a246:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c002a24d:	85 c0                	test   eax,eax
c002a24f:	74 1b                	je     c002a26c <SoundCard::getSamples32(int, int*)+0x4c>
c002a251:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c002a255:	75 15                	jne    c002a26c <SoundCard::getSamples32(int, int*)+0x4c>
c002a257:	53                   	push   ebx
c002a258:	55                   	push   ebp
c002a259:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a25d:	50                   	push   eax
c002a25e:	e8 61 03 00 00       	call   c002a5c4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c002a263:	83 c4 10             	add    esp,0x10
c002a266:	39 c6                	cmp    esi,eax
c002a268:	7d 02                	jge    c002a26c <SoundCard::getSamples32(int, int*)+0x4c>
c002a26a:	89 c6                	mov    esi,eax
c002a26c:	47                   	inc    edi
c002a26d:	83 ff 20             	cmp    edi,0x20
c002a270:	75 d4                	jne    c002a246 <SoundCard::getSamples32(int, int*)+0x26>
c002a272:	85 f6                	test   esi,esi
c002a274:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c002a27b:	75 0f                	jne    c002a28c <SoundCard::getSamples32(int, int*)+0x6c>
c002a27d:	85 c0                	test   eax,eax
c002a27f:	74 1b                	je     c002a29c <SoundCard::getSamples32(int, int*)+0x7c>
c002a281:	83 ec 0c             	sub    esp,0xc
c002a284:	8b 03                	mov    eax,DWORD PTR [ebx]
c002a286:	53                   	push   ebx
c002a287:	ff 50 28             	call   DWORD PTR [eax+0x28]
c002a28a:	eb 0d                	jmp    c002a299 <SoundCard::getSamples32(int, int*)+0x79>
c002a28c:	85 c0                	test   eax,eax
c002a28e:	75 0c                	jne    c002a29c <SoundCard::getSamples32(int, int*)+0x7c>
c002a290:	83 ec 0c             	sub    esp,0xc
c002a293:	8b 03                	mov    eax,DWORD PTR [ebx]
c002a295:	53                   	push   ebx
c002a296:	ff 50 24             	call   DWORD PTR [eax+0x24]
c002a299:	83 c4 10             	add    esp,0x10
c002a29c:	83 c4 0c             	add    esp,0xc
c002a29f:	89 f0                	mov    eax,esi
c002a2a1:	5b                   	pop    ebx
c002a2a2:	5e                   	pop    esi
c002a2a3:	5f                   	pop    edi
c002a2a4:	5d                   	pop    ebp
c002a2a5:	c3                   	ret    

c002a2a6 <SoundCard::addChannel(SoundPort*)>:
c002a2a6:	83 ec 0c             	sub    esp,0xc
c002a2a9:	31 c0                	xor    eax,eax
c002a2ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002a2af:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c002a2b7:	74 1b                	je     c002a2d4 <SoundCard::addChannel(SoundPort*)+0x2e>
c002a2b9:	40                   	inc    eax
c002a2ba:	83 f8 20             	cmp    eax,0x20
c002a2bd:	75 f0                	jne    c002a2af <SoundCard::addChannel(SoundPort*)+0x9>
c002a2bf:	83 ec 0c             	sub    esp,0xc
c002a2c2:	68 91 3d 03 c0       	push   0xc0033d91
c002a2c7:	e8 c2 64 ff ff       	call   c002078e <KePanic(char const*)>
c002a2cc:	83 c4 10             	add    esp,0x10
c002a2cf:	83 c8 ff             	or     eax,0xffffffff
c002a2d2:	eb 0b                	jmp    c002a2df <SoundCard::addChannel(SoundPort*)+0x39>
c002a2d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002a2d8:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c002a2df:	83 c4 0c             	add    esp,0xc
c002a2e2:	c3                   	ret    
c002a2e3:	90                   	nop

c002a2e4 <SoundCard::removeChannel(int)>:
c002a2e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a2e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a2ec:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c002a2f7:	c3                   	ret    

c002a2f8 <SoundPort::SoundPort(int, int, int, int)>:
c002a2f8:	83 ec 0c             	sub    esp,0xc
c002a2fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a2ff:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c002a306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a30a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c002a30e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a312:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002a316:	89 10                	mov    DWORD PTR [eax],edx
c002a318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a31c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a320:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002a323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a327:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002a32b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002a32e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c002a333:	75 13                	jne    c002a348 <SoundPort::SoundPort(int, int, int, int)+0x50>
c002a335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a339:	8b 00                	mov    eax,DWORD PTR [eax]
c002a33b:	05 a0 0f 00 00       	add    eax,0xfa0
c002a340:	01 c0                	add    eax,eax
c002a342:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002a346:	66 90                	xchg   ax,ax
c002a348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a34c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002a350:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002a353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a357:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c002a35e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a362:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002a365:	c1 e0 02             	shl    eax,0x2
c002a368:	83 ec 0c             	sub    esp,0xc
c002a36b:	50                   	push   eax
c002a36c:	e8 56 c2 fe ff       	call   c00165c7 <malloc>
c002a371:	83 c4 10             	add    esp,0x10
c002a374:	89 c2                	mov    edx,eax
c002a376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a37a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002a37d:	90                   	nop
c002a37e:	83 c4 0c             	add    esp,0xc
c002a381:	c3                   	ret    
c002a382:	66 90                	xchg   ax,ax

c002a384 <SoundPort::~SoundPort()>:
c002a384:	83 ec 0c             	sub    esp,0xc
c002a387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a38b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002a38e:	85 c0                	test   eax,eax
c002a390:	74 1e                	je     c002a3b0 <SoundPort::~SoundPort()+0x2c>
c002a392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a396:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002a399:	83 ec 0c             	sub    esp,0xc
c002a39c:	50                   	push   eax
c002a39d:	e8 35 c2 fe ff       	call   c00165d7 <free>
c002a3a2:	83 c4 10             	add    esp,0x10
c002a3a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a3a9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c002a3b0:	90                   	nop
c002a3b1:	83 c4 0c             	add    esp,0xc
c002a3b4:	c3                   	ret    
c002a3b5:	90                   	nop
c002a3b6:	66 90                	xchg   ax,ax

c002a3b8 <SoundPort::unpause()>:
c002a3b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a3bc:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c002a3c0:	c3                   	ret    
c002a3c1:	90                   	nop
c002a3c2:	66 90                	xchg   ax,ax

c002a3c4 <SoundPort::pause()>:
c002a3c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a3c8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c002a3cc:	c3                   	ret    
c002a3cd:	90                   	nop
c002a3ce:	66 90                	xchg   ax,ax

c002a3d0 <SoundPort::getBufferUsed()>:
c002a3d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a3d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002a3d7:	c3                   	ret    

c002a3d8 <SoundPort::getBufferSize()>:
c002a3d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a3dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002a3df:	c3                   	ret    

c002a3e0 <SoundPort::buffer16(short*, int)>:
c002a3e0:	55                   	push   ebp
c002a3e1:	57                   	push   edi
c002a3e2:	56                   	push   esi
c002a3e3:	53                   	push   ebx
c002a3e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002a3e8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002a3ec:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c002a3ef:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c002a3f2:	74 68                	je     c002a45c <SoundPort::buffer16(short*, int)+0x7c>
c002a3f4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a3f8:	85 c9                	test   ecx,ecx
c002a3fa:	7e 60                	jle    c002a45c <SoundPort::buffer16(short*, int)+0x7c>
c002a3fc:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c002a400:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c002a403:	c1 e1 0f             	shl    ecx,0xf
c002a406:	8d 70 01             	lea    esi,[eax+0x1]
c002a409:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c002a40c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c002a40f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a412:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a415:	74 4d                	je     c002a464 <SoundPort::buffer16(short*, int)+0x84>
c002a417:	31 f6                	xor    esi,esi
c002a419:	eb 21                	jmp    c002a43c <SoundPort::buffer16(short*, int)+0x5c>
c002a41b:	90                   	nop
c002a41c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c002a421:	8d 79 01             	lea    edi,[ecx+0x1]
c002a424:	c1 e3 0f             	shl    ebx,0xf
c002a427:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c002a42a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c002a42d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c002a430:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a433:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a436:	74 1c                	je     c002a454 <SoundPort::buffer16(short*, int)+0x74>
c002a438:	89 c6                	mov    esi,eax
c002a43a:	66 90                	xchg   ax,ax
c002a43c:	8d 46 01             	lea    eax,[esi+0x1]
c002a43f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c002a443:	75 d7                	jne    c002a41c <SoundPort::buffer16(short*, int)+0x3c>
c002a445:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a449:	8d 76 00             	lea    esi,[esi+0x0]
c002a44c:	5b                   	pop    ebx
c002a44d:	5e                   	pop    esi
c002a44e:	5f                   	pop    edi
c002a44f:	5d                   	pop    ebp
c002a450:	c3                   	ret    
c002a451:	8d 76 00             	lea    esi,[esi+0x0]
c002a454:	5b                   	pop    ebx
c002a455:	8d 46 02             	lea    eax,[esi+0x2]
c002a458:	5e                   	pop    esi
c002a459:	5f                   	pop    edi
c002a45a:	5d                   	pop    ebp
c002a45b:	c3                   	ret    
c002a45c:	5b                   	pop    ebx
c002a45d:	31 c0                	xor    eax,eax
c002a45f:	5e                   	pop    esi
c002a460:	5f                   	pop    edi
c002a461:	5d                   	pop    ebp
c002a462:	c3                   	ret    
c002a463:	90                   	nop
c002a464:	b8 01 00 00 00       	mov    eax,0x1
c002a469:	eb e1                	jmp    c002a44c <SoundPort::buffer16(short*, int)+0x6c>
c002a46b:	90                   	nop

c002a46c <SoundPort::buffer32(int*, int)>:
c002a46c:	55                   	push   ebp
c002a46d:	57                   	push   edi
c002a46e:	56                   	push   esi
c002a46f:	53                   	push   ebx
c002a470:	83 ec 04             	sub    esp,0x4
c002a473:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a477:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a47b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a47e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002a482:	89 04 24             	mov    DWORD PTR [esp],eax
c002a485:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a488:	74 5a                	je     c002a4e4 <SoundPort::buffer32(int*, int)+0x78>
c002a48a:	85 c0                	test   eax,eax
c002a48c:	7e 56                	jle    c002a4e4 <SoundPort::buffer32(int*, int)+0x78>
c002a48e:	8d 71 01             	lea    esi,[ecx+0x1]
c002a491:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c002a494:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c002a497:	8b 37                	mov    esi,DWORD PTR [edi]
c002a499:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c002a49c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a49f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a4a2:	74 4c                	je     c002a4f0 <SoundPort::buffer32(int*, int)+0x84>
c002a4a4:	31 f6                	xor    esi,esi
c002a4a6:	eb 1c                	jmp    c002a4c4 <SoundPort::buffer32(int*, int)+0x58>
c002a4a8:	8d 69 01             	lea    ebp,[ecx+0x1]
c002a4ab:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c002a4ae:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c002a4b1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c002a4b4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c002a4b8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a4bb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a4be:	74 18                	je     c002a4d8 <SoundPort::buffer32(int*, int)+0x6c>
c002a4c0:	89 de                	mov    esi,ebx
c002a4c2:	66 90                	xchg   ax,ax
c002a4c4:	8d 5e 01             	lea    ebx,[esi+0x1]
c002a4c7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c002a4ca:	75 dc                	jne    c002a4a8 <SoundPort::buffer32(int*, int)+0x3c>
c002a4cc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002a4cf:	90                   	nop
c002a4d0:	83 c4 04             	add    esp,0x4
c002a4d3:	5b                   	pop    ebx
c002a4d4:	5e                   	pop    esi
c002a4d5:	5f                   	pop    edi
c002a4d6:	5d                   	pop    ebp
c002a4d7:	c3                   	ret    
c002a4d8:	83 c4 04             	add    esp,0x4
c002a4db:	8d 46 02             	lea    eax,[esi+0x2]
c002a4de:	5b                   	pop    ebx
c002a4df:	5e                   	pop    esi
c002a4e0:	5f                   	pop    edi
c002a4e1:	5d                   	pop    ebp
c002a4e2:	c3                   	ret    
c002a4e3:	90                   	nop
c002a4e4:	83 c4 04             	add    esp,0x4
c002a4e7:	31 c0                	xor    eax,eax
c002a4e9:	5b                   	pop    ebx
c002a4ea:	5e                   	pop    esi
c002a4eb:	5f                   	pop    edi
c002a4ec:	5d                   	pop    ebp
c002a4ed:	c3                   	ret    
c002a4ee:	66 90                	xchg   ax,ax
c002a4f0:	b8 01 00 00 00       	mov    eax,0x1
c002a4f5:	eb d9                	jmp    c002a4d0 <SoundPort::buffer32(int*, int)+0x64>
c002a4f7:	90                   	nop

c002a4f8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c002a4f8:	57                   	push   edi
c002a4f9:	56                   	push   esi
c002a4fa:	53                   	push   ebx
c002a4fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002a4ff:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002a503:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c002a509:	39 03                	cmp    DWORD PTR [ebx],eax
c002a50b:	74 13                	je     c002a520 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c002a50d:	83 ec 0c             	sub    esp,0xc
c002a510:	68 e4 3d 03 c0       	push   0xc0033de4
c002a515:	e8 74 62 ff ff       	call   c002078e <KePanic(char const*)>
c002a51a:	83 c4 10             	add    esp,0x10
c002a51d:	8d 76 00             	lea    esi,[esi+0x0]
c002a520:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c002a526:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c002a529:	74 11                	je     c002a53c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c002a52b:	83 ec 0c             	sub    esp,0xc
c002a52e:	68 23 3e 03 c0       	push   0xc0033e23
c002a533:	e8 56 62 ff ff       	call   c002078e <KePanic(char const*)>
c002a538:	83 c4 10             	add    esp,0x10
c002a53b:	90                   	nop
c002a53c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c002a542:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c002a545:	74 11                	je     c002a558 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c002a547:	83 ec 0c             	sub    esp,0xc
c002a54a:	68 23 3e 03 c0       	push   0xc0033e23
c002a54f:	e8 3a 62 ff ff       	call   c002078e <KePanic(char const*)>
c002a554:	83 c4 10             	add    esp,0x10
c002a557:	90                   	nop
c002a558:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c002a55b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c002a55f:	7e 07                	jle    c002a568 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c002a561:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002a565:	8d 76 00             	lea    esi,[esi+0x0]
c002a568:	85 f6                	test   esi,esi
c002a56a:	7e 2c                	jle    c002a598 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c002a56c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a570:	8d 3c 36             	lea    edi,[esi+esi*1]
c002a573:	31 c9                	xor    ecx,ecx
c002a575:	01 d7                	add    edi,edx
c002a577:	90                   	nop
c002a578:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c002a57b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c002a57e:	85 c0                	test   eax,eax
c002a580:	79 06                	jns    c002a588 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c002a582:	05 ff 7f 00 00       	add    eax,0x7fff
c002a587:	90                   	nop
c002a588:	c1 f8 0f             	sar    eax,0xf
c002a58b:	83 c1 04             	add    ecx,0x4
c002a58e:	66 01 02             	add    WORD PTR [edx],ax
c002a591:	83 c2 02             	add    edx,0x2
c002a594:	39 d7                	cmp    edi,edx
c002a596:	75 e0                	jne    c002a578 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c002a598:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c002a59b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002a59e:	83 ec 04             	sub    esp,0x4
c002a5a1:	29 f0                	sub    eax,esi
c002a5a3:	c1 e0 02             	shl    eax,0x2
c002a5a6:	50                   	push   eax
c002a5a7:	8d 04 b2             	lea    eax,[edx+esi*4]
c002a5aa:	50                   	push   eax
c002a5ab:	52                   	push   edx
c002a5ac:	e8 1f 5e fd ff       	call   c00003d0 <memmove>
c002a5b1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002a5b4:	83 c4 10             	add    esp,0x10
c002a5b7:	29 f0                	sub    eax,esi
c002a5b9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c002a5bc:	89 f0                	mov    eax,esi
c002a5be:	5b                   	pop    ebx
c002a5bf:	5e                   	pop    esi
c002a5c0:	5f                   	pop    edi
c002a5c1:	c3                   	ret    
c002a5c2:	66 90                	xchg   ax,ax

c002a5c4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c002a5c4:	57                   	push   edi
c002a5c5:	56                   	push   esi
c002a5c6:	53                   	push   ebx
c002a5c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002a5cb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002a5cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002a5d3:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c002a5d9:	39 06                	cmp    DWORD PTR [esi],eax
c002a5db:	74 13                	je     c002a5f0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c002a5dd:	83 ec 0c             	sub    esp,0xc
c002a5e0:	68 04 3e 03 c0       	push   0xc0033e04
c002a5e5:	e8 a4 61 ff ff       	call   c002078e <KePanic(char const*)>
c002a5ea:	83 c4 10             	add    esp,0x10
c002a5ed:	8d 76 00             	lea    esi,[esi+0x0]
c002a5f0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c002a5f6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c002a5f9:	74 11                	je     c002a60c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c002a5fb:	83 ec 0c             	sub    esp,0xc
c002a5fe:	68 3f 3e 03 c0       	push   0xc0033e3f
c002a603:	e8 86 61 ff ff       	call   c002078e <KePanic(char const*)>
c002a608:	83 c4 10             	add    esp,0x10
c002a60b:	90                   	nop
c002a60c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c002a612:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c002a615:	74 11                	je     c002a628 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c002a617:	83 ec 0c             	sub    esp,0xc
c002a61a:	68 3f 3e 03 c0       	push   0xc0033e3f
c002a61f:	e8 6a 61 ff ff       	call   c002078e <KePanic(char const*)>
c002a624:	83 c4 10             	add    esp,0x10
c002a627:	90                   	nop
c002a628:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c002a62b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c002a62f:	7e 07                	jle    c002a638 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c002a631:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002a635:	8d 76 00             	lea    esi,[esi+0x0]
c002a638:	85 ff                	test   edi,edi
c002a63a:	7e 1c                	jle    c002a658 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c002a63c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c002a643:	31 c0                	xor    eax,eax
c002a645:	8d 76 00             	lea    esi,[esi+0x0]
c002a648:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002a64b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c002a64e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c002a651:	83 c0 04             	add    eax,0x4
c002a654:	39 c1                	cmp    ecx,eax
c002a656:	75 f0                	jne    c002a648 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c002a658:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002a65b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002a65e:	83 ec 04             	sub    esp,0x4
c002a661:	29 f8                	sub    eax,edi
c002a663:	c1 e0 02             	shl    eax,0x2
c002a666:	50                   	push   eax
c002a667:	8d 04 ba             	lea    eax,[edx+edi*4]
c002a66a:	50                   	push   eax
c002a66b:	52                   	push   edx
c002a66c:	e8 5f 5d fd ff       	call   c00003d0 <memmove>
c002a671:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c002a674:	83 c4 10             	add    esp,0x10
c002a677:	29 f8                	sub    eax,edi
c002a679:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c002a67c:	89 f8                	mov    eax,edi
c002a67e:	5b                   	pop    ebx
c002a67f:	5e                   	pop    esi
c002a680:	5f                   	pop    edi
c002a681:	c3                   	ret    

c002a682 <PCI::open(int, int, void*)>:
c002a682:	83 ec 18             	sub    esp,0x18
c002a685:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a689:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002a68d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002a693:	8b 10                	mov    edx,DWORD PTR [eax]
c002a695:	50                   	push   eax
c002a696:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002a699:	31 c0                	xor    eax,eax
c002a69b:	83 c4 1c             	add    esp,0x1c
c002a69e:	c3                   	ret    
c002a69f:	90                   	nop

c002a6a0 <PCI::close(int, int, void*)>:
c002a6a0:	31 c0                	xor    eax,eax
c002a6a2:	c3                   	ret    
c002a6a3:	90                   	nop

c002a6a4 <PCI::PCI()>:
c002a6a4:	83 ec 0c             	sub    esp,0xc
c002a6a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a6ab:	83 ec 08             	sub    esp,0x8
c002a6ae:	68 5b 3e 03 c0       	push   0xc0033e5b
c002a6b3:	50                   	push   eax
c002a6b4:	e8 7f 07 ff ff       	call   c001ae38 <Bus::Bus(char const*)>
c002a6b9:	83 c4 10             	add    esp,0x10
c002a6bc:	ba 68 3f 03 c0       	mov    edx,0xc0033f68
c002a6c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a6c5:	89 10                	mov    DWORD PTR [eax],edx
c002a6c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a6cb:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c002a6d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a6d9:	a3 a0 1b 04 c0       	mov    ds:0xc0041ba0,eax
c002a6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a6e2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a6e8:	0f b6 d0             	movzx  edx,al
c002a6eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a6ef:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002a6f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a6fa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a700:	0f b6 d0             	movzx  edx,al
c002a703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a707:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002a70c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a710:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a716:	8d 50 01             	lea    edx,[eax+0x1]
c002a719:	88 d1                	mov    cl,dl
c002a71b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002a71f:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002a725:	0f b6 d0             	movzx  edx,al
c002a728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a72c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002a730:	83 c9 c0             	or     ecx,0xffffffc0
c002a733:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002a737:	90                   	nop
c002a738:	83 c4 0c             	add    esp,0xc
c002a73b:	c3                   	ret    

c002a73c <PCI::readBAR8(unsigned int, int)>:
c002a73c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a740:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a744:	f6 c2 01             	test   dl,0x1
c002a747:	74 07                	je     c002a750 <PCI::readBAR8(unsigned int, int)+0x14>
c002a749:	83 e2 fc             	and    edx,0xfffffffc
c002a74c:	01 c2                	add    edx,eax
c002a74e:	ec                   	in     al,dx
c002a74f:	c3                   	ret    
c002a750:	83 e2 f0             	and    edx,0xfffffff0
c002a753:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002a756:	c3                   	ret    
c002a757:	90                   	nop

c002a758 <PCI::readBAR16(unsigned int, int)>:
c002a758:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a75c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a760:	f6 c2 01             	test   dl,0x1
c002a763:	74 08                	je     c002a76d <PCI::readBAR16(unsigned int, int)+0x15>
c002a765:	83 e2 fc             	and    edx,0xfffffffc
c002a768:	01 c2                	add    edx,eax
c002a76a:	66 ed                	in     ax,dx
c002a76c:	c3                   	ret    
c002a76d:	83 e2 f0             	and    edx,0xfffffff0
c002a770:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002a774:	c3                   	ret    
c002a775:	90                   	nop

c002a776 <PCI::readBAR32(unsigned int, int)>:
c002a776:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a77a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a77e:	f6 c2 01             	test   dl,0x1
c002a781:	74 07                	je     c002a78a <PCI::readBAR32(unsigned int, int)+0x14>
c002a783:	83 e2 fc             	and    edx,0xfffffffc
c002a786:	01 c2                	add    edx,eax
c002a788:	ed                   	in     eax,dx
c002a789:	c3                   	ret    
c002a78a:	83 e2 f0             	and    edx,0xfffffff0
c002a78d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002a790:	c3                   	ret    
c002a791:	90                   	nop

c002a792 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002a792:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a796:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a79a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a79e:	f6 c2 01             	test   dl,0x1
c002a7a1:	74 07                	je     c002a7aa <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002a7a3:	83 e2 fc             	and    edx,0xfffffffc
c002a7a6:	01 ca                	add    edx,ecx
c002a7a8:	ee                   	out    dx,al
c002a7a9:	c3                   	ret    
c002a7aa:	83 e2 f0             	and    edx,0xfffffff0
c002a7ad:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002a7b0:	c3                   	ret    
c002a7b1:	90                   	nop

c002a7b2 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002a7b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a7b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a7ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a7be:	f6 c2 01             	test   dl,0x1
c002a7c1:	74 08                	je     c002a7cb <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002a7c3:	83 e2 fc             	and    edx,0xfffffffc
c002a7c6:	01 ca                	add    edx,ecx
c002a7c8:	66 ef                	out    dx,ax
c002a7ca:	c3                   	ret    
c002a7cb:	83 e2 f0             	and    edx,0xfffffff0
c002a7ce:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002a7d2:	c3                   	ret    
c002a7d3:	90                   	nop

c002a7d4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002a7d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a7d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a7dc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a7e0:	f6 c2 01             	test   dl,0x1
c002a7e3:	74 07                	je     c002a7ec <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002a7e5:	83 e2 fc             	and    edx,0xfffffffc
c002a7e8:	01 ca                	add    edx,ecx
c002a7ea:	ef                   	out    dx,eax
c002a7eb:	c3                   	ret    
c002a7ec:	83 e2 f0             	and    edx,0xfffffff0
c002a7ef:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002a7f2:	c3                   	ret    
c002a7f3:	90                   	nop

c002a7f4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a7f4:	55                   	push   ebp
c002a7f5:	57                   	push   edi
c002a7f6:	56                   	push   esi
c002a7f7:	53                   	push   ebx
c002a7f8:	83 ec 0c             	sub    esp,0xc
c002a7fb:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c002a800:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002a804:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002a808:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002a80c:	83 fe 07             	cmp    esi,0x7
c002a80f:	76 10                	jbe    c002a821 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002a811:	83 ec 0c             	sub    esp,0xc
c002a814:	68 63 3e 03 c0       	push   0xc0033e63
c002a819:	e8 70 5f ff ff       	call   c002078e <KePanic(char const*)>
c002a81e:	83 c4 10             	add    esp,0x10
c002a821:	0f b6 db             	movzx  ebx,bl
c002a824:	83 fb 0f             	cmp    ebx,0xf
c002a827:	76 10                	jbe    c002a839 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c002a829:	83 ec 0c             	sub    esp,0xc
c002a82c:	68 93 3e 03 c0       	push   0xc0033e93
c002a831:	e8 58 5f ff ff       	call   c002078e <KePanic(char const*)>
c002a836:	83 c4 10             	add    esp,0x10
c002a839:	8d 04 36             	lea    eax,[esi+esi*1]
c002a83c:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a841:	83 c8 f0             	or     eax,0xfffffff0
c002a844:	ee                   	out    dx,al
c002a845:	ba fa 0c 00 00       	mov    edx,0xcfa
c002a84a:	89 e8                	mov    eax,ebp
c002a84c:	ee                   	out    dx,al
c002a84d:	83 c4 0c             	add    esp,0xc
c002a850:	89 d8                	mov    eax,ebx
c002a852:	89 f9                	mov    ecx,edi
c002a854:	c1 e0 08             	shl    eax,0x8
c002a857:	0f b6 d9             	movzx  ebx,cl
c002a85a:	83 e3 fc             	and    ebx,0xfffffffc
c002a85d:	09 d8                	or     eax,ebx
c002a85f:	5b                   	pop    ebx
c002a860:	0d 00 c0 ff ff       	or     eax,0xffffc000
c002a865:	5e                   	pop    esi
c002a866:	5f                   	pop    edi
c002a867:	5d                   	pop    ebp
c002a868:	c3                   	ret    
c002a869:	90                   	nop

c002a86a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a86a:	57                   	push   edi
c002a86b:	56                   	push   esi
c002a86c:	53                   	push   ebx
c002a86d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002a871:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002a875:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c002a87b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a87f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a883:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a887:	83 ff 01             	cmp    edi,0x1
c002a88a:	75 3f                	jne    c002a8cb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c002a88c:	89 de                	mov    esi,ebx
c002a88e:	0f b6 c0             	movzx  eax,al
c002a891:	81 e6 fc 00 00 00    	and    esi,0xfc
c002a897:	c1 e0 10             	shl    eax,0x10
c002a89a:	0f b6 c9             	movzx  ecx,cl
c002a89d:	09 f0                	or     eax,esi
c002a89f:	c1 e1 08             	shl    ecx,0x8
c002a8a2:	0f b6 d2             	movzx  edx,dl
c002a8a5:	09 c8                	or     eax,ecx
c002a8a7:	c1 e2 0b             	shl    edx,0xb
c002a8aa:	09 d0                	or     eax,edx
c002a8ac:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a8b1:	0d 00 00 00 80       	or     eax,0x80000000
c002a8b6:	ef                   	out    dx,eax
c002a8b7:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a8bc:	ed                   	in     eax,dx
c002a8bd:	83 e3 02             	and    ebx,0x2
c002a8c0:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a8c7:	d3 e8                	shr    eax,cl
c002a8c9:	eb 44                	jmp    c002a90f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a8cb:	83 ff 02             	cmp    edi,0x2
c002a8ce:	75 2d                	jne    c002a8fd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c002a8d0:	83 ec 0c             	sub    esp,0xc
c002a8d3:	0f b6 c9             	movzx  ecx,cl
c002a8d6:	0f b6 d2             	movzx  edx,dl
c002a8d9:	0f b6 fb             	movzx  edi,bl
c002a8dc:	0f b6 c0             	movzx  eax,al
c002a8df:	57                   	push   edi
c002a8e0:	51                   	push   ecx
c002a8e1:	52                   	push   edx
c002a8e2:	50                   	push   eax
c002a8e3:	56                   	push   esi
c002a8e4:	e8 0b ff ff ff       	call   c002a7f4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a8e9:	89 c2                	mov    edx,eax
c002a8eb:	ed                   	in     eax,dx
c002a8ec:	83 e3 02             	and    ebx,0x2
c002a8ef:	83 c4 20             	add    esp,0x20
c002a8f2:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a8f9:	d3 e8                	shr    eax,cl
c002a8fb:	eb 12                	jmp    c002a90f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a8fd:	83 ec 0c             	sub    esp,0xc
c002a900:	68 c3 3e 03 c0       	push   0xc0033ec3
c002a905:	e8 84 5e ff ff       	call   c002078e <KePanic(char const*)>
c002a90a:	83 c4 10             	add    esp,0x10
c002a90d:	31 c0                	xor    eax,eax
c002a90f:	5b                   	pop    ebx
c002a910:	5e                   	pop    esi
c002a911:	5f                   	pop    edi
c002a912:	c3                   	ret    
c002a913:	90                   	nop

c002a914 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002a914:	83 ec 18             	sub    esp,0x18
c002a917:	6a 00                	push   0x0
c002a919:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a91e:	50                   	push   eax
c002a91f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a924:	50                   	push   eax
c002a925:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a92a:	50                   	push   eax
c002a92b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a92f:	e8 36 ff ff ff       	call   c002a86a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a934:	83 c4 2c             	add    esp,0x2c
c002a937:	c3                   	ret    

c002a938 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002a938:	83 ec 18             	sub    esp,0x18
c002a93b:	6a 0e                	push   0xe
c002a93d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a942:	50                   	push   eax
c002a943:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a948:	50                   	push   eax
c002a949:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a94e:	50                   	push   eax
c002a94f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a953:	e8 12 ff ff ff       	call   c002a86a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a958:	83 c4 2c             	add    esp,0x2c
c002a95b:	0f b6 c0             	movzx  eax,al
c002a95e:	c3                   	ret    
c002a95f:	90                   	nop

c002a960 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002a960:	55                   	push   ebp
c002a961:	57                   	push   edi
c002a962:	56                   	push   esi
c002a963:	53                   	push   ebx
c002a964:	83 ec 18             	sub    esp,0x18
c002a967:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002a96c:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002a971:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002a976:	6a 0a                	push   0xa
c002a978:	56                   	push   esi
c002a979:	55                   	push   ebp
c002a97a:	57                   	push   edi
c002a97b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a97f:	e8 e6 fe ff ff       	call   c002a86a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a984:	83 c4 14             	add    esp,0x14
c002a987:	89 c3                	mov    ebx,eax
c002a989:	6a 0a                	push   0xa
c002a98b:	0f b6 db             	movzx  ebx,bl
c002a98e:	56                   	push   esi
c002a98f:	55                   	push   ebp
c002a990:	57                   	push   edi
c002a991:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a995:	e8 d0 fe ff ff       	call   c002a86a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a99a:	83 c4 2c             	add    esp,0x2c
c002a99d:	25 00 ff 00 00       	and    eax,0xff00
c002a9a2:	09 d8                	or     eax,ebx
c002a9a4:	5b                   	pop    ebx
c002a9a5:	5e                   	pop    esi
c002a9a6:	5f                   	pop    edi
c002a9a7:	5d                   	pop    ebp
c002a9a8:	c3                   	ret    
c002a9a9:	90                   	nop

c002a9aa <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002a9aa:	83 ec 18             	sub    esp,0x18
c002a9ad:	6a 08                	push   0x8
c002a9af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a9b4:	50                   	push   eax
c002a9b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a9ba:	50                   	push   eax
c002a9bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a9c0:	50                   	push   eax
c002a9c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a9c5:	e8 a0 fe ff ff       	call   c002a86a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a9ca:	83 c4 2c             	add    esp,0x2c
c002a9cd:	0f b6 c4             	movzx  eax,ah
c002a9d0:	c3                   	ret    
c002a9d1:	90                   	nop

c002a9d2 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002a9d2:	83 ec 18             	sub    esp,0x18
c002a9d5:	6a 08                	push   0x8
c002a9d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a9dc:	50                   	push   eax
c002a9dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a9e2:	50                   	push   eax
c002a9e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a9e8:	50                   	push   eax
c002a9e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a9ed:	e8 78 fe ff ff       	call   c002a86a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a9f2:	83 c4 2c             	add    esp,0x2c
c002a9f5:	c3                   	ret    

c002a9f6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002a9f6:	83 ec 18             	sub    esp,0x18
c002a9f9:	6a 3c                	push   0x3c
c002a9fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002aa00:	50                   	push   eax
c002aa01:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002aa06:	50                   	push   eax
c002aa07:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002aa0c:	50                   	push   eax
c002aa0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002aa11:	e8 54 fe ff ff       	call   c002a86a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aa16:	83 c4 2c             	add    esp,0x2c
c002aa19:	c3                   	ret    

c002aa1a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002aa1a:	83 ec 18             	sub    esp,0x18
c002aa1d:	6a 18                	push   0x18
c002aa1f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002aa24:	50                   	push   eax
c002aa25:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002aa2a:	50                   	push   eax
c002aa2b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002aa30:	50                   	push   eax
c002aa31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002aa35:	e8 30 fe ff ff       	call   c002a86a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aa3a:	83 c4 2c             	add    esp,0x2c
c002aa3d:	0f b6 c4             	movzx  eax,ah
c002aa40:	c3                   	ret    
c002aa41:	90                   	nop

c002aa42 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002aa42:	55                   	push   ebp
c002aa43:	57                   	push   edi
c002aa44:	56                   	push   esi
c002aa45:	53                   	push   ebx
c002aa46:	83 ec 28             	sub    esp,0x28
c002aa49:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002aa4d:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002aa52:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002aa57:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002aa5c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002aa63:	8d 43 12             	lea    eax,[ebx+0x12]
c002aa66:	83 c3 10             	add    ebx,0x10
c002aa69:	0f b6 c0             	movzx  eax,al
c002aa6c:	0f b6 db             	movzx  ebx,bl
c002aa6f:	50                   	push   eax
c002aa70:	51                   	push   ecx
c002aa71:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002aa75:	57                   	push   edi
c002aa76:	55                   	push   ebp
c002aa77:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002aa7b:	e8 ea fd ff ff       	call   c002a86a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aa80:	83 c4 14             	add    esp,0x14
c002aa83:	89 c6                	mov    esi,eax
c002aa85:	53                   	push   ebx
c002aa86:	c1 e6 10             	shl    esi,0x10
c002aa89:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002aa8d:	51                   	push   ecx
c002aa8e:	57                   	push   edi
c002aa8f:	55                   	push   ebp
c002aa90:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002aa94:	e8 d1 fd ff ff       	call   c002a86a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aa99:	83 c4 3c             	add    esp,0x3c
c002aa9c:	0f b7 c0             	movzx  eax,ax
c002aa9f:	5b                   	pop    ebx
c002aaa0:	09 f0                	or     eax,esi
c002aaa2:	5e                   	pop    esi
c002aaa3:	5f                   	pop    edi
c002aaa4:	5d                   	pop    ebp
c002aaa5:	c3                   	ret    

c002aaa6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002aaa6:	55                   	push   ebp
c002aaa7:	57                   	push   edi
c002aaa8:	56                   	push   esi
c002aaa9:	53                   	push   ebx
c002aaaa:	83 ec 0c             	sub    esp,0xc
c002aaad:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002aab1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002aab5:	89 f5                	mov    ebp,esi
c002aab7:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c002aabd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002aac1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002aac5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002aac9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002aacd:	83 f9 01             	cmp    ecx,0x1
c002aad0:	75 5d                	jne    c002ab2f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c002aad2:	0f b6 c8             	movzx  ecx,al
c002aad5:	0f b6 d2             	movzx  edx,dl
c002aad8:	c1 e1 10             	shl    ecx,0x10
c002aadb:	c1 e2 0b             	shl    edx,0xb
c002aade:	89 f0                	mov    eax,esi
c002aae0:	25 fc 00 00 00       	and    eax,0xfc
c002aae5:	09 c1                	or     ecx,eax
c002aae7:	89 e8                	mov    eax,ebp
c002aae9:	0f b6 c0             	movzx  eax,al
c002aaec:	c1 e0 08             	shl    eax,0x8
c002aaef:	09 c1                	or     ecx,eax
c002aaf1:	09 d1                	or     ecx,edx
c002aaf3:	ba f8 0c 00 00       	mov    edx,0xcf8
c002aaf8:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002aafe:	89 c8                	mov    eax,ecx
c002ab00:	ef                   	out    dx,eax
c002ab01:	ba fc 0c 00 00       	mov    edx,0xcfc
c002ab06:	ed                   	in     eax,dx
c002ab07:	0f b7 db             	movzx  ebx,bx
c002ab0a:	83 e6 02             	and    esi,0x2
c002ab0d:	74 0a                	je     c002ab19 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c002ab0f:	0f b7 d0             	movzx  edx,ax
c002ab12:	c1 e3 10             	shl    ebx,0x10
c002ab15:	09 d3                	or     ebx,edx
c002ab17:	eb 05                	jmp    c002ab1e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c002ab19:	66 31 c0             	xor    ax,ax
c002ab1c:	09 c3                	or     ebx,eax
c002ab1e:	ba f8 0c 00 00       	mov    edx,0xcf8
c002ab23:	89 c8                	mov    eax,ecx
c002ab25:	ef                   	out    dx,eax
c002ab26:	ba fc 0c 00 00       	mov    edx,0xcfc
c002ab2b:	89 d8                	mov    eax,ebx
c002ab2d:	eb 41                	jmp    c002ab70 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002ab2f:	83 f9 02             	cmp    ecx,0x2
c002ab32:	75 45                	jne    c002ab79 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c002ab34:	83 ec 0c             	sub    esp,0xc
c002ab37:	0f b6 d2             	movzx  edx,dl
c002ab3a:	89 f1                	mov    ecx,esi
c002ab3c:	0f b6 c0             	movzx  eax,al
c002ab3f:	0f b6 f1             	movzx  esi,cl
c002ab42:	89 e9                	mov    ecx,ebp
c002ab44:	56                   	push   esi
c002ab45:	0f b6 c9             	movzx  ecx,cl
c002ab48:	51                   	push   ecx
c002ab49:	52                   	push   edx
c002ab4a:	50                   	push   eax
c002ab4b:	57                   	push   edi
c002ab4c:	e8 a3 fc ff ff       	call   c002a7f4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002ab51:	89 c2                	mov    edx,eax
c002ab53:	ed                   	in     eax,dx
c002ab54:	83 c4 20             	add    esp,0x20
c002ab57:	0f b7 db             	movzx  ebx,bx
c002ab5a:	f6 c2 02             	test   dl,0x2
c002ab5d:	74 0c                	je     c002ab6b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c002ab5f:	0f b7 c8             	movzx  ecx,ax
c002ab62:	89 d8                	mov    eax,ebx
c002ab64:	c1 e0 10             	shl    eax,0x10
c002ab67:	09 c8                	or     eax,ecx
c002ab69:	eb 05                	jmp    c002ab70 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002ab6b:	66 31 c0             	xor    ax,ax
c002ab6e:	09 d8                	or     eax,ebx
c002ab70:	ef                   	out    dx,eax
c002ab71:	83 c4 0c             	add    esp,0xc
c002ab74:	5b                   	pop    ebx
c002ab75:	5e                   	pop    esi
c002ab76:	5f                   	pop    edi
c002ab77:	5d                   	pop    ebp
c002ab78:	c3                   	ret    
c002ab79:	c7 44 24 20 c3 3e 03 c0 	mov    DWORD PTR [esp+0x20],0xc0033ec3
c002ab81:	83 c4 0c             	add    esp,0xc
c002ab84:	5b                   	pop    ebx
c002ab85:	5e                   	pop    esi
c002ab86:	5f                   	pop    edi
c002ab87:	5d                   	pop    ebp
c002ab88:	e9 01 5c ff ff       	jmp    c002078e <KePanic(char const*)>
c002ab8d:	90                   	nop

c002ab8e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002ab8e:	55                   	push   ebp
c002ab8f:	57                   	push   edi
c002ab90:	56                   	push   esi
c002ab91:	53                   	push   ebx
c002ab92:	81 ec 4c 01 00 00    	sub    esp,0x14c
c002ab98:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c002ab9f:	80 3d ac 1b 04 c0 00 	cmp    BYTE PTR ds:0xc0041bac,0x0
c002aba6:	0f 85 bd 00 00 00    	jne    c002ac69 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c002abac:	83 ec 0c             	sub    esp,0xc
c002abaf:	68 14 01 00 00       	push   0x114
c002abb4:	e8 0e ba fe ff       	call   c00165c7 <malloc>
c002abb9:	83 c4 0c             	add    esp,0xc
c002abbc:	89 c3                	mov    ebx,eax
c002abbe:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c002abc4:	68 c9 3e 03 c0       	push   0xc0033ec9
c002abc9:	50                   	push   eax
c002abca:	e8 8d fa fe ff       	call   c001a65c <File::File(char const*, Process*)>
c002abcf:	83 c4 10             	add    esp,0x10
c002abd2:	85 db                	test   ebx,ebx
c002abd4:	0f 84 67 02 00 00    	je     c002ae41 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002abda:	56                   	push   esi
c002abdb:	56                   	push   esi
c002abdc:	6a 01                	push   0x1
c002abde:	53                   	push   ebx
c002abdf:	e8 96 fa fe ff       	call   c001a67a <File::open(FileOpenMode)>
c002abe4:	83 c4 10             	add    esp,0x10
c002abe7:	85 c0                	test   eax,eax
c002abe9:	0f 85 52 02 00 00    	jne    c002ae41 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002abef:	52                   	push   edx
c002abf0:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c002abf4:	50                   	push   eax
c002abf5:	8d 44 24 48          	lea    eax,[esp+0x48]
c002abf9:	50                   	push   eax
c002abfa:	53                   	push   ebx
c002abfb:	e8 7c fd fe ff       	call   c001a97c <File::stat(unsigned long long*, bool*)>
c002ac00:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002ac04:	40                   	inc    eax
c002ac05:	89 04 24             	mov    DWORD PTR [esp],eax
c002ac08:	e8 ba b9 fe ff       	call   c00165c7 <malloc>
c002ac0d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c002ac11:	a3 a8 1b 04 c0       	mov    ds:0xc0041ba8,eax
c002ac16:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c002ac1a:	59                   	pop    ecx
c002ac1b:	8b 13                	mov    edx,DWORD PTR [ebx]
c002ac1d:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c002ac21:	51                   	push   ecx
c002ac22:	50                   	push   eax
c002ac23:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002ac27:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002ac2b:	53                   	push   ebx
c002ac2c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002ac2f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c002ac33:	83 c4 20             	add    esp,0x20
c002ac36:	89 c8                	mov    eax,ecx
c002ac38:	99                   	cdq    
c002ac39:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c002ac3d:	0f 85 fe 01 00 00    	jne    c002ae41 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002ac43:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c002ac47:	0f 85 f4 01 00 00    	jne    c002ae41 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002ac4d:	83 ec 0c             	sub    esp,0xc
c002ac50:	53                   	push   ebx
c002ac51:	e8 82 fa fe ff       	call   c001a6d8 <File::close()>
c002ac56:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002ac5a:	c6 05 ac 1b 04 c0 01 	mov    BYTE PTR ds:0xc0041bac,0x1
c002ac61:	a3 a4 1b 04 c0       	mov    ds:0xc0041ba4,eax
c002ac66:	83 c4 10             	add    esp,0x10
c002ac69:	a1 a4 1b 04 c0       	mov    eax,ds:0xc0041ba4
c002ac6e:	8b 1d a8 1b 04 c0    	mov    ebx,DWORD PTR ds:0xc0041ba8
c002ac74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002ac78:	31 f6                	xor    esi,esi
c002ac7a:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002ac82:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c002ac89:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c002ac8e:	31 c9                	xor    ecx,ecx
c002ac90:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c002ac98:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c002ac9d:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c002aca5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002aca9:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c002acb1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002acb5:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c002acb9:	0f 8e 82 01 00 00    	jle    c002ae41 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002acbf:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c002acc2:	d4 40                	aam    0x40
c002acc4:	d5 39                	aad    0x39
c002acc6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002acca:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c002acce:	d4 40                	aam    0x40
c002acd0:	d5 39                	aad    0x39
c002acd2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002acd6:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c002acda:	d4 40                	aam    0x40
c002acdc:	d5 39                	aad    0x39
c002acde:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c002ace2:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c002ace6:	d4 40                	aam    0x40
c002ace8:	d5 39                	aad    0x39
c002acea:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c002acee:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c002acf2:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002acf6:	3c 56                	cmp    al,0x56
c002acf8:	74 43                	je     c002ad3d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c002acfa:	d4 40                	aam    0x40
c002acfc:	d5 39                	aad    0x39
c002acfe:	8d 48 d0             	lea    ecx,[eax-0x30]
c002ad01:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c002ad05:	0f b6 c9             	movzx  ecx,cl
c002ad08:	c1 e1 04             	shl    ecx,0x4
c002ad0b:	d4 40                	aam    0x40
c002ad0d:	d5 39                	aad    0x39
c002ad0f:	83 e8 30             	sub    eax,0x30
c002ad12:	0f b6 c0             	movzx  eax,al
c002ad15:	09 c1                	or     ecx,eax
c002ad17:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c002ad1b:	c1 e1 04             	shl    ecx,0x4
c002ad1e:	d4 40                	aam    0x40
c002ad20:	d5 39                	aad    0x39
c002ad22:	83 e8 30             	sub    eax,0x30
c002ad25:	0f b6 c0             	movzx  eax,al
c002ad28:	09 c1                	or     ecx,eax
c002ad2a:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c002ad2e:	c1 e1 04             	shl    ecx,0x4
c002ad31:	d4 40                	aam    0x40
c002ad33:	d5 39                	aad    0x39
c002ad35:	83 e8 30             	sub    eax,0x30
c002ad38:	0f b6 c0             	movzx  eax,al
c002ad3b:	09 c1                	or     ecx,eax
c002ad3d:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c002ad41:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002ad45:	3c 58                	cmp    al,0x58
c002ad47:	74 47                	je     c002ad90 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c002ad49:	d4 40                	aam    0x40
c002ad4b:	d5 39                	aad    0x39
c002ad4d:	8d 50 d0             	lea    edx,[eax-0x30]
c002ad50:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c002ad54:	0f b6 d2             	movzx  edx,dl
c002ad57:	c1 e2 04             	shl    edx,0x4
c002ad5a:	d4 40                	aam    0x40
c002ad5c:	d5 39                	aad    0x39
c002ad5e:	83 e8 30             	sub    eax,0x30
c002ad61:	0f b6 c0             	movzx  eax,al
c002ad64:	09 c2                	or     edx,eax
c002ad66:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c002ad6a:	c1 e2 04             	shl    edx,0x4
c002ad6d:	d4 40                	aam    0x40
c002ad6f:	d5 39                	aad    0x39
c002ad71:	83 e8 30             	sub    eax,0x30
c002ad74:	0f b6 c0             	movzx  eax,al
c002ad77:	09 c2                	or     edx,eax
c002ad79:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c002ad7d:	c1 e2 04             	shl    edx,0x4
c002ad80:	d4 40                	aam    0x40
c002ad82:	d5 39                	aad    0x39
c002ad84:	83 e8 30             	sub    eax,0x30
c002ad87:	0f b6 c0             	movzx  eax,al
c002ad8a:	09 c2                	or     edx,eax
c002ad8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002ad90:	83 c6 10             	add    esi,0x10
c002ad93:	8d 7c 24 40          	lea    edi,[esp+0x40]
c002ad97:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c002ad9b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c002ad9f:	83 fa 0a             	cmp    edx,0xa
c002ada2:	74 0b                	je     c002adaf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c002ada4:	47                   	inc    edi
c002ada5:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c002ada9:	75 19                	jne    c002adc4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c002adab:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c002adaf:	31 c0                	xor    eax,eax
c002adb1:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c002adb6:	0f 94 c0             	sete   al
c002adb9:	01 c6                	add    esi,eax
c002adbb:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c002adc0:	75 0b                	jne    c002adcd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c002adc2:	eb 14                	jmp    c002add8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c002adc4:	46                   	inc    esi
c002adc5:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c002adc8:	c6 07 00             	mov    BYTE PTR [edi],0x0
c002adcb:	eb ca                	jmp    c002ad97 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c002adcd:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c002add2:	0f 85 dd fe ff ff    	jne    c002acb5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002add8:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c002addd:	74 10                	je     c002adef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c002addf:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c002ade4:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c002ade9:	0f 85 c6 fe ff ff    	jne    c002acb5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002adef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002adf3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002adf7:	83 e8 30             	sub    eax,0x30
c002adfa:	83 ef 30             	sub    edi,0x30
c002adfd:	c1 e0 04             	shl    eax,0x4
c002ae00:	09 f8                	or     eax,edi
c002ae02:	0f b6 c0             	movzx  eax,al
c002ae05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c002ae09:	0f 85 a6 fe ff ff    	jne    c002acb5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002ae0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002ae13:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c002ae17:	83 e8 30             	sub    eax,0x30
c002ae1a:	83 ef 30             	sub    edi,0x30
c002ae1d:	c1 e0 04             	shl    eax,0x4
c002ae20:	09 f8                	or     eax,edi
c002ae22:	0f b6 c0             	movzx  eax,al
c002ae25:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c002ae29:	0f 85 86 fe ff ff    	jne    c002acb5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002ae2f:	50                   	push   eax
c002ae30:	50                   	push   eax
c002ae31:	8d 44 24 48          	lea    eax,[esp+0x48]
c002ae35:	50                   	push   eax
c002ae36:	55                   	push   ebp
c002ae37:	e8 04 58 fd ff       	call   c0000640 <strcpy>
c002ae3c:	83 c4 10             	add    esp,0x10
c002ae3f:	eb 06                	jmp    c002ae47 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c002ae41:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c002ae45:	31 ed                	xor    ebp,ebp
c002ae47:	81 c4 4c 01 00 00    	add    esp,0x14c
c002ae4d:	89 e8                	mov    eax,ebp
c002ae4f:	5b                   	pop    ebx
c002ae50:	5e                   	pop    esi
c002ae51:	5f                   	pop    edi
c002ae52:	5d                   	pop    ebp
c002ae53:	c3                   	ret    

c002ae54 <PCI::checkBus(unsigned char)>:
c002ae54:	56                   	push   esi
c002ae55:	53                   	push   ebx
c002ae56:	31 db                	xor    ebx,ebx
c002ae58:	51                   	push   ecx
c002ae59:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002ae5e:	52                   	push   edx
c002ae5f:	53                   	push   ebx
c002ae60:	43                   	inc    ebx
c002ae61:	56                   	push   esi
c002ae62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ae66:	e8 6f 03 00 00       	call   c002b1da <PCI::checkDevice(unsigned char, unsigned char)>
c002ae6b:	83 c4 10             	add    esp,0x10
c002ae6e:	83 fb 20             	cmp    ebx,0x20
c002ae71:	75 eb                	jne    c002ae5e <PCI::checkBus(unsigned char)+0xa>
c002ae73:	58                   	pop    eax
c002ae74:	5b                   	pop    ebx
c002ae75:	5e                   	pop    esi
c002ae76:	c3                   	ret    
c002ae77:	90                   	nop

c002ae78 <PCI::foundDevice(PCIDeviceInfo)>:
c002ae78:	55                   	push   ebp
c002ae79:	57                   	push   edi
c002ae7a:	56                   	push   esi
c002ae7b:	53                   	push   ebx
c002ae7c:	81 ec 8c 00 00 00    	sub    esp,0x8c
c002ae82:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c002ae8a:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c002ae91:	3d ff ff 00 00       	cmp    eax,0xffff
c002ae96:	0f 84 b7 01 00 00    	je     c002b053 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c002ae9c:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c002aea4:	66 81 fb 06 04       	cmp    bx,0x406
c002aea9:	75 32                	jne    c002aedd <PCI::foundDevice(PCIDeviceInfo)+0x65>
c002aeab:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c002aeb3:	50                   	push   eax
c002aeb4:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c002aebc:	50                   	push   eax
c002aebd:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c002aec5:	50                   	push   eax
c002aec6:	55                   	push   ebp
c002aec7:	e8 4e fb ff ff       	call   c002aa1a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002aecc:	59                   	pop    ecx
c002aecd:	0f b6 c0             	movzx  eax,al
c002aed0:	5b                   	pop    ebx
c002aed1:	50                   	push   eax
c002aed2:	55                   	push   ebp
c002aed3:	e8 7c ff ff ff       	call   c002ae54 <PCI::checkBus(unsigned char)>
c002aed8:	e9 16 01 00 00       	jmp    c002aff3 <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c002aedd:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c002aee4:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c002aeea:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c002aeee:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c002aef5:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c002aefd:	85 c0                	test   eax,eax
c002aeff:	74 36                	je     c002af37 <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c002af01:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002af04:	85 d2                	test   edx,edx
c002af06:	74 2b                	je     c002af33 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c002af08:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c002af0e:	31 f9                	xor    ecx,edi
c002af10:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c002af16:	75 1b                	jne    c002af33 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c002af18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002af1c:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c002af22:	75 0f                	jne    c002af33 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c002af24:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c002af2b:	39 f2                	cmp    edx,esi
c002af2d:	0f 84 20 01 00 00    	je     c002b053 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c002af33:	8b 00                	mov    eax,DWORD PTR [eax]
c002af35:	eb c6                	jmp    c002aefd <PCI::foundDevice(PCIDeviceInfo)+0x85>
c002af37:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c002af3b:	be fc 3e 03 c0       	mov    esi,0xc0033efc
c002af40:	b9 07 00 00 00       	mov    ecx,0x7
c002af45:	fc                   	cld    
c002af46:	31 d2                	xor    edx,edx
c002af48:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002af4a:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c002af51:	8d 7c 24 38          	lea    edi,[esp+0x38]
c002af55:	b9 12 00 00 00       	mov    ecx,0x12
c002af5a:	83 ec 0c             	sub    esp,0xc
c002af5d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002af5f:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c002af67:	b9 0a 00 00 00       	mov    ecx,0xa
c002af6c:	f7 f1                	div    ecx
c002af6e:	83 c0 30             	add    eax,0x30
c002af71:	83 c2 30             	add    edx,0x30
c002af74:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c002af78:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c002af7c:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c002af84:	31 d2                	xor    edx,edx
c002af86:	f7 f1                	div    ecx
c002af88:	83 c0 30             	add    eax,0x30
c002af8b:	83 c2 30             	add    edx,0x30
c002af8e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c002af92:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c002af96:	8d 44 24 28          	lea    eax,[esp+0x28]
c002af9a:	50                   	push   eax
c002af9b:	e8 a7 4e ff ff       	call   c001fe47 <KeSetBootMessage(char const*)>
c002afa0:	83 c4 10             	add    esp,0x10
c002afa3:	81 fb 01 06 00 00    	cmp    ebx,0x601
c002afa9:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c002afb0:	75 46                	jne    c002aff8 <PCI::foundDevice(PCIDeviceInfo)+0x180>
c002afb2:	83 ec 0c             	sub    esp,0xc
c002afb5:	68 64 01 00 00       	push   0x164
c002afba:	e8 08 b6 fe ff       	call   c00165c7 <malloc>
c002afbf:	89 c3                	mov    ebx,eax
c002afc1:	89 04 24             	mov    DWORD PTR [esp],eax
c002afc4:	e8 7d 0e 00 00       	call   c002be46 <SATABus::SATABus()>
c002afc9:	58                   	pop    eax
c002afca:	5a                   	pop    edx
c002afcb:	53                   	push   ebx
c002afcc:	55                   	push   ebp
c002afcd:	e8 40 06 ff ff       	call   c001b612 <Device::addChild(Device*)>
c002afd2:	83 ec 1c             	sub    esp,0x1c
c002afd5:	b9 09 00 00 00       	mov    ecx,0x9
c002afda:	89 e7                	mov    edi,esp
c002afdc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002afde:	53                   	push   ebx
c002afdf:	e8 74 05 ff ff       	call   c001b558 <Device::preOpenPCI(PCIDeviceInfo)>
c002afe4:	83 c4 30             	add    esp,0x30
c002afe7:	8b 03                	mov    eax,DWORD PTR [ebx]
c002afe9:	6a 00                	push   0x0
c002afeb:	6a 00                	push   0x0
c002afed:	6a 00                	push   0x0
c002afef:	53                   	push   ebx
c002aff0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002aff3:	83 c4 10             	add    esp,0x10
c002aff6:	eb 5b                	jmp    c002b053 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c002aff8:	81 fb 01 01 00 00    	cmp    ebx,0x101
c002affe:	75 19                	jne    c002b019 <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c002b000:	83 ec 0c             	sub    esp,0xc
c002b003:	68 70 02 00 00       	push   0x270
c002b008:	e8 ba b5 fe ff       	call   c00165c7 <malloc>
c002b00d:	89 c3                	mov    ebx,eax
c002b00f:	89 04 24             	mov    DWORD PTR [esp],eax
c002b012:	e8 93 02 00 00       	call   c002b2aa <IDE::IDE()>
c002b017:	eb b0                	jmp    c002afc9 <PCI::foundDevice(PCIDeviceInfo)+0x151>
c002b019:	83 ec 0c             	sub    esp,0xc
c002b01c:	68 58 01 00 00       	push   0x158
c002b021:	e8 a1 b5 fe ff       	call   c00165c7 <malloc>
c002b026:	89 c3                	mov    ebx,eax
c002b028:	58                   	pop    eax
c002b029:	5a                   	pop    edx
c002b02a:	68 e2 3e 03 c0       	push   0xc0033ee2
c002b02f:	53                   	push   ebx
c002b030:	e8 91 08 ff ff       	call   c001b8c6 <DriverlessDevice::DriverlessDevice(char const*)>
c002b035:	59                   	pop    ecx
c002b036:	5f                   	pop    edi
c002b037:	53                   	push   ebx
c002b038:	55                   	push   ebp
c002b039:	e8 d4 05 ff ff       	call   c001b612 <Device::addChild(Device*)>
c002b03e:	83 ec 1c             	sub    esp,0x1c
c002b041:	b9 09 00 00 00       	mov    ecx,0x9
c002b046:	89 e7                	mov    edi,esp
c002b048:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002b04a:	53                   	push   ebx
c002b04b:	e8 08 05 ff ff       	call   c001b558 <Device::preOpenPCI(PCIDeviceInfo)>
c002b050:	83 c4 30             	add    esp,0x30
c002b053:	81 c4 8c 00 00 00    	add    esp,0x8c
c002b059:	5b                   	pop    ebx
c002b05a:	5e                   	pop    esi
c002b05b:	5f                   	pop    edi
c002b05c:	5d                   	pop    ebp
c002b05d:	c3                   	ret    

c002b05e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002b05e:	55                   	push   ebp
c002b05f:	57                   	push   edi
c002b060:	56                   	push   esi
c002b061:	53                   	push   ebx
c002b062:	83 ec 68             	sub    esp,0x68
c002b065:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c002b069:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c002b070:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002b074:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002b07b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002b080:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002b084:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002b08b:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c002b090:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002b094:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c002b099:	6a 0c                	push   0xc
c002b09b:	57                   	push   edi
c002b09c:	53                   	push   ebx
c002b09d:	56                   	push   esi
c002b09e:	55                   	push   ebp
c002b09f:	e8 c6 f7 ff ff       	call   c002a86a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002b0a4:	83 c4 20             	add    esp,0x20
c002b0a7:	57                   	push   edi
c002b0a8:	53                   	push   ebx
c002b0a9:	56                   	push   esi
c002b0aa:	55                   	push   ebp
c002b0ab:	e8 b0 f8 ff ff       	call   c002a960 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002b0b0:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c002b0b5:	57                   	push   edi
c002b0b6:	53                   	push   ebx
c002b0b7:	56                   	push   esi
c002b0b8:	55                   	push   ebp
c002b0b9:	e8 38 f9 ff ff       	call   c002a9f6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002b0be:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002b0c2:	83 c4 14             	add    esp,0x14
c002b0c5:	6a 3c                	push   0x3c
c002b0c7:	57                   	push   edi
c002b0c8:	53                   	push   ebx
c002b0c9:	56                   	push   esi
c002b0ca:	55                   	push   ebp
c002b0cb:	e8 9a f7 ff ff       	call   c002a86a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002b0d0:	0f b6 c4             	movzx  eax,ah
c002b0d3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002b0d7:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002b0db:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c002b0df:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c002b0e4:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c002b0ea:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c002b0f0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002b0f4:	83 c4 20             	add    esp,0x20
c002b0f7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c002b0fc:	74 30                	je     c002b12e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002b0fe:	31 c0                	xor    eax,eax
c002b100:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c002b104:	7e 28                	jle    c002b12e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002b106:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c002b10e:	39 cb                	cmp    ebx,ecx
c002b110:	75 19                	jne    c002b12b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002b112:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c002b11a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c002b11e:	75 0b                	jne    c002b12b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002b120:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c002b127:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002b12b:	40                   	inc    eax
c002b12c:	eb d2                	jmp    c002b100 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c002b12e:	31 d2                	xor    edx,edx
c002b130:	83 ec 0c             	sub    esp,0xc
c002b133:	57                   	push   edi
c002b134:	53                   	push   ebx
c002b135:	56                   	push   esi
c002b136:	52                   	push   edx
c002b137:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c002b13b:	55                   	push   ebp
c002b13c:	e8 01 f9 ff ff       	call   c002aa42 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002b141:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002b145:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002b149:	42                   	inc    edx
c002b14a:	83 c4 20             	add    esp,0x20
c002b14d:	83 fa 06             	cmp    edx,0x6
c002b150:	75 de                	jne    c002b130 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c002b152:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002b156:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002b15a:	c1 e2 08             	shl    edx,0x8
c002b15d:	83 ec 0c             	sub    esp,0xc
c002b160:	0f b6 c4             	movzx  eax,ah
c002b163:	09 d0                	or     eax,edx
c002b165:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c002b16a:	6a 02                	push   0x2
c002b16c:	57                   	push   edi
c002b16d:	53                   	push   ebx
c002b16e:	56                   	push   esi
c002b16f:	55                   	push   ebp
c002b170:	e8 f5 f6 ff ff       	call   c002a86a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002b175:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c002b17a:	83 c4 20             	add    esp,0x20
c002b17d:	57                   	push   edi
c002b17e:	53                   	push   ebx
c002b17f:	56                   	push   esi
c002b180:	55                   	push   ebp
c002b181:	e8 24 f8 ff ff       	call   c002a9aa <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002b186:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002b18a:	57                   	push   edi
c002b18b:	53                   	push   ebx
c002b18c:	56                   	push   esi
c002b18d:	55                   	push   ebp
c002b18e:	e8 81 f7 ff ff       	call   c002a914 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002b193:	b9 09 00 00 00       	mov    ecx,0x9
c002b198:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c002b19d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002b1a1:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002b1a5:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c002b1a9:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c002b1ad:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c002b1b1:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002b1b5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002b1b9:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c002b1bd:	83 ec 0c             	sub    esp,0xc
c002b1c0:	fc                   	cld    
c002b1c1:	89 e7                	mov    edi,esp
c002b1c3:	8d 74 24 58          	lea    esi,[esp+0x58]
c002b1c7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002b1c9:	55                   	push   ebp
c002b1ca:	e8 a9 fc ff ff       	call   c002ae78 <PCI::foundDevice(PCIDeviceInfo)>
c002b1cf:	81 c4 8c 00 00 00    	add    esp,0x8c
c002b1d5:	5b                   	pop    ebx
c002b1d6:	5e                   	pop    esi
c002b1d7:	5f                   	pop    edi
c002b1d8:	5d                   	pop    ebp
c002b1d9:	c3                   	ret    

c002b1da <PCI::checkDevice(unsigned char, unsigned char)>:
c002b1da:	55                   	push   ebp
c002b1db:	57                   	push   edi
c002b1dc:	56                   	push   esi
c002b1dd:	53                   	push   ebx
c002b1de:	83 ec 0c             	sub    esp,0xc
c002b1e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002b1e5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002b1ea:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002b1ef:	6a 00                	push   0x0
c002b1f1:	56                   	push   esi
c002b1f2:	57                   	push   edi
c002b1f3:	55                   	push   ebp
c002b1f4:	e8 1b f7 ff ff       	call   c002a914 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002b1f9:	6a 00                	push   0x0
c002b1fb:	56                   	push   esi
c002b1fc:	57                   	push   edi
c002b1fd:	55                   	push   ebp
c002b1fe:	e8 5b fe ff ff       	call   c002b05e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002b203:	83 c4 20             	add    esp,0x20
c002b206:	6a 00                	push   0x0
c002b208:	56                   	push   esi
c002b209:	57                   	push   edi
c002b20a:	55                   	push   ebp
c002b20b:	e8 28 f7 ff ff       	call   c002a938 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002b210:	83 c4 10             	add    esp,0x10
c002b213:	a8 80                	test   al,0x80
c002b215:	74 2d                	je     c002b244 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c002b217:	bb 01 00 00 00       	mov    ebx,0x1
c002b21c:	53                   	push   ebx
c002b21d:	56                   	push   esi
c002b21e:	57                   	push   edi
c002b21f:	55                   	push   ebp
c002b220:	e8 ef f6 ff ff       	call   c002a914 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002b225:	83 c4 10             	add    esp,0x10
c002b228:	0f b7 c0             	movzx  eax,ax
c002b22b:	3d ff ff 00 00       	cmp    eax,0xffff
c002b230:	74 0c                	je     c002b23e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002b232:	53                   	push   ebx
c002b233:	56                   	push   esi
c002b234:	57                   	push   edi
c002b235:	55                   	push   ebp
c002b236:	e8 23 fe ff ff       	call   c002b05e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002b23b:	83 c4 10             	add    esp,0x10
c002b23e:	43                   	inc    ebx
c002b23f:	83 fb 08             	cmp    ebx,0x8
c002b242:	75 d8                	jne    c002b21c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002b244:	83 c4 0c             	add    esp,0xc
c002b247:	5b                   	pop    ebx
c002b248:	5e                   	pop    esi
c002b249:	5f                   	pop    edi
c002b24a:	5d                   	pop    ebp
c002b24b:	c3                   	ret    

c002b24c <PCI::detect()>:
c002b24c:	56                   	push   esi
c002b24d:	53                   	push   ebx
c002b24e:	53                   	push   ebx
c002b24f:	31 db                	xor    ebx,ebx
c002b251:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002b255:	6a 00                	push   0x0
c002b257:	6a 00                	push   0x0
c002b259:	6a 00                	push   0x0
c002b25b:	56                   	push   esi
c002b25c:	e8 d7 f6 ff ff       	call   c002a938 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002b261:	83 c4 10             	add    esp,0x10
c002b264:	a8 80                	test   al,0x80
c002b266:	75 21                	jne    c002b289 <PCI::detect()+0x3d>
c002b268:	51                   	push   ecx
c002b269:	51                   	push   ecx
c002b26a:	6a 00                	push   0x0
c002b26c:	56                   	push   esi
c002b26d:	e8 e2 fb ff ff       	call   c002ae54 <PCI::checkBus(unsigned char)>
c002b272:	83 c4 10             	add    esp,0x10
c002b275:	eb 2a                	jmp    c002b2a1 <PCI::detect()+0x55>
c002b277:	52                   	push   edx
c002b278:	52                   	push   edx
c002b279:	53                   	push   ebx
c002b27a:	43                   	inc    ebx
c002b27b:	56                   	push   esi
c002b27c:	e8 d3 fb ff ff       	call   c002ae54 <PCI::checkBus(unsigned char)>
c002b281:	83 c4 10             	add    esp,0x10
c002b284:	83 fb 08             	cmp    ebx,0x8
c002b287:	74 18                	je     c002b2a1 <PCI::detect()+0x55>
c002b289:	53                   	push   ebx
c002b28a:	6a 00                	push   0x0
c002b28c:	6a 00                	push   0x0
c002b28e:	56                   	push   esi
c002b28f:	e8 80 f6 ff ff       	call   c002a914 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002b294:	83 c4 10             	add    esp,0x10
c002b297:	0f b7 c0             	movzx  eax,ax
c002b29a:	3d ff ff 00 00       	cmp    eax,0xffff
c002b29f:	74 d6                	je     c002b277 <PCI::detect()+0x2b>
c002b2a1:	58                   	pop    eax
c002b2a2:	5b                   	pop    ebx
c002b2a3:	5e                   	pop    esi
c002b2a4:	c3                   	ret    
c002b2a5:	90                   	nop

c002b2a6 <IDE::close(int, int, void*)>:
c002b2a6:	83 c8 ff             	or     eax,0xffffffff
c002b2a9:	c3                   	ret    

c002b2aa <IDE::IDE()>:
c002b2aa:	83 ec 0c             	sub    esp,0xc
c002b2ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b2b1:	83 ec 08             	sub    esp,0x8
c002b2b4:	68 8c 3f 03 c0       	push   0xc0033f8c
c002b2b9:	50                   	push   eax
c002b2ba:	e8 ad 06 ff ff       	call   c001b96c <HardDiskController::HardDiskController(char const*)>
c002b2bf:	83 c4 10             	add    esp,0x10
c002b2c2:	ba 1c 40 03 c0       	mov    edx,0xc003401c
c002b2c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b2cb:	89 10                	mov    DWORD PTR [eax],edx
c002b2cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b2d1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002b2d8:	90                   	nop
c002b2d9:	83 c4 0c             	add    esp,0xc
c002b2dc:	c3                   	ret    
c002b2dd:	90                   	nop

c002b2de <IDE::prepareInterrupt(unsigned char)>:
c002b2de:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002b2e3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002b2e7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002b2ef:	c3                   	ret    

c002b2f0 <selectDrive(unsigned char, unsigned char)>:
c002b2f0:	c3                   	ret    
c002b2f1:	90                   	nop

c002b2f2 <IDE::getBase(unsigned char)>:
c002b2f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002b2f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b2fb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002b303:	c3                   	ret    

c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002b304:	55                   	push   ebp
c002b305:	57                   	push   edi
c002b306:	56                   	push   esi
c002b307:	53                   	push   ebx
c002b308:	83 ec 1c             	sub    esp,0x1c
c002b30b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002b30f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b313:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002b316:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002b31a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002b31e:	80 f9 03             	cmp    cl,0x3
c002b321:	77 4f                	ja     c002b372 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c002b323:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002b327:	0f b6 fa             	movzx  edi,dl
c002b32a:	0f b6 db             	movzx  ebx,bl
c002b32d:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c002b330:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c002b335:	80 ca 80             	or     dl,0x80
c002b338:	52                   	push   edx
c002b339:	6a 0c                	push   0xc
c002b33b:	57                   	push   edi
c002b33c:	56                   	push   esi
c002b33d:	e8 c2 ff ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b342:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002b347:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002b34b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002b34f:	ee                   	out    dx,al
c002b350:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b355:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c002b359:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002b35d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002b361:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002b369:	83 c4 2c             	add    esp,0x2c
c002b36c:	5b                   	pop    ebx
c002b36d:	5e                   	pop    esi
c002b36e:	5f                   	pop    edi
c002b36f:	5d                   	pop    ebp
c002b370:	eb 92                	jmp    c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b372:	0f b6 cb             	movzx  ecx,bl
c002b375:	83 f9 07             	cmp    ecx,0x7
c002b378:	77 12                	ja     c002b38c <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c002b37a:	0f b6 d2             	movzx  edx,dl
c002b37d:	0f b6 db             	movzx  ebx,bl
c002b380:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c002b388:	01 da                	add    edx,ebx
c002b38a:	eb 2f                	jmp    c002b3bb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002b38c:	83 f9 0d             	cmp    ecx,0xd
c002b38f:	77 13                	ja     c002b3a4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c002b391:	0f b6 d2             	movzx  edx,dl
c002b394:	0f b6 db             	movzx  ebx,bl
c002b397:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c002b39e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002b3a2:	eb 17                	jmp    c002b3bb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002b3a4:	83 f9 15             	cmp    ecx,0x15
c002b3a7:	77 13                	ja     c002b3bc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c002b3a9:	0f b6 d2             	movzx  edx,dl
c002b3ac:	0f b6 db             	movzx  ebx,bl
c002b3af:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c002b3b7:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002b3bb:	ee                   	out    dx,al
c002b3bc:	83 c4 1c             	add    esp,0x1c
c002b3bf:	5b                   	pop    ebx
c002b3c0:	5e                   	pop    esi
c002b3c1:	5f                   	pop    edi
c002b3c2:	5d                   	pop    ebp
c002b3c3:	c3                   	ret    

c002b3c4 <IDE::read(unsigned char, unsigned char)>:
c002b3c4:	55                   	push   ebp
c002b3c5:	57                   	push   edi
c002b3c6:	56                   	push   esi
c002b3c7:	53                   	push   ebx
c002b3c8:	83 ec 1c             	sub    esp,0x1c
c002b3cb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002b3cf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b3d3:	8d 43 f8             	lea    eax,[ebx-0x8]
c002b3d6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002b3da:	3c 03                	cmp    al,0x3
c002b3dc:	77 40                	ja     c002b41e <IDE::read(unsigned char, unsigned char)+0x5a>
c002b3de:	0f b6 f9             	movzx  edi,cl
c002b3e1:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c002b3e4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b3e9:	0c 80                	or     al,0x80
c002b3eb:	50                   	push   eax
c002b3ec:	6a 0c                	push   0xc
c002b3ee:	57                   	push   edi
c002b3ef:	56                   	push   esi
c002b3f0:	e8 0f ff ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b3f5:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002b3fa:	0f b6 d3             	movzx  edx,bl
c002b3fd:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002b401:	ec                   	in     al,dx
c002b402:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002b406:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c002b40b:	52                   	push   edx
c002b40c:	6a 0c                	push   0xc
c002b40e:	57                   	push   edi
c002b40f:	56                   	push   esi
c002b410:	e8 ef fe ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b415:	83 c4 20             	add    esp,0x20
c002b418:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002b41c:	eb 4c                	jmp    c002b46a <IDE::read(unsigned char, unsigned char)+0xa6>
c002b41e:	0f b6 d3             	movzx  edx,bl
c002b421:	83 fa 07             	cmp    edx,0x7
c002b424:	77 12                	ja     c002b438 <IDE::read(unsigned char, unsigned char)+0x74>
c002b426:	0f b6 c9             	movzx  ecx,cl
c002b429:	0f b6 d3             	movzx  edx,bl
c002b42c:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c002b434:	01 c2                	add    edx,eax
c002b436:	eb 31                	jmp    c002b469 <IDE::read(unsigned char, unsigned char)+0xa5>
c002b438:	83 fa 0d             	cmp    edx,0xd
c002b43b:	77 13                	ja     c002b450 <IDE::read(unsigned char, unsigned char)+0x8c>
c002b43d:	0f b6 c9             	movzx  ecx,cl
c002b440:	0f b6 d3             	movzx  edx,bl
c002b443:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c002b44a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002b44e:	eb 19                	jmp    c002b469 <IDE::read(unsigned char, unsigned char)+0xa5>
c002b450:	31 c0                	xor    eax,eax
c002b452:	83 fa 15             	cmp    edx,0x15
c002b455:	77 13                	ja     c002b46a <IDE::read(unsigned char, unsigned char)+0xa6>
c002b457:	0f b6 c9             	movzx  ecx,cl
c002b45a:	0f b6 d3             	movzx  edx,bl
c002b45d:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c002b465:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002b469:	ec                   	in     al,dx
c002b46a:	83 c4 1c             	add    esp,0x1c
c002b46d:	5b                   	pop    ebx
c002b46e:	5e                   	pop    esi
c002b46f:	5f                   	pop    edi
c002b470:	5d                   	pop    ebp
c002b471:	c3                   	ret    

c002b472 <IDE::waitInterrupt(unsigned char)>:
c002b472:	55                   	push   ebp
c002b473:	57                   	push   edi
c002b474:	56                   	push   esi
c002b475:	53                   	push   ebx
c002b476:	31 db                	xor    ebx,ebx
c002b478:	83 ec 0c             	sub    esp,0xc
c002b47b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002b47f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002b484:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002b48c:	89 e8                	mov    eax,ebp
c002b48e:	84 c0                	test   al,al
c002b490:	75 30                	jne    c002b4c2 <IDE::waitInterrupt(unsigned char)+0x50>
c002b492:	50                   	push   eax
c002b493:	6a 0c                	push   0xc
c002b495:	56                   	push   esi
c002b496:	57                   	push   edi
c002b497:	e8 28 ff ff ff       	call   c002b3c4 <IDE::read(unsigned char, unsigned char)>
c002b49c:	83 c4 10             	add    esp,0x10
c002b49f:	a8 01                	test   al,0x1
c002b4a1:	75 27                	jne    c002b4ca <IDE::waitInterrupt(unsigned char)+0x58>
c002b4a3:	f6 c3 04             	test   bl,0x4
c002b4a6:	75 12                	jne    c002b4ba <IDE::waitInterrupt(unsigned char)+0x48>
c002b4a8:	83 fb 32             	cmp    ebx,0x32
c002b4ab:	7e 0d                	jle    c002b4ba <IDE::waitInterrupt(unsigned char)+0x48>
c002b4ad:	83 ec 0c             	sub    esp,0xc
c002b4b0:	6a 64                	push   0x64
c002b4b2:	e8 bd a4 ff ff       	call   c0025974 <milliTenthSleep(unsigned int)>
c002b4b7:	83 c4 10             	add    esp,0x10
c002b4ba:	83 fb 3c             	cmp    ebx,0x3c
c002b4bd:	74 0b                	je     c002b4ca <IDE::waitInterrupt(unsigned char)+0x58>
c002b4bf:	43                   	inc    ebx
c002b4c0:	eb c2                	jmp    c002b484 <IDE::waitInterrupt(unsigned char)+0x12>
c002b4c2:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002b4ca:	83 c4 0c             	add    esp,0xc
c002b4cd:	89 e8                	mov    eax,ebp
c002b4cf:	5b                   	pop    ebx
c002b4d0:	5e                   	pop    esi
c002b4d1:	5f                   	pop    edi
c002b4d2:	5d                   	pop    ebp
c002b4d3:	c3                   	ret    

c002b4d4 <ideChannel0IRQHandler(regs*, void*)>:
c002b4d4:	83 ec 10             	sub    esp,0x10
c002b4d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002b4db:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002b4e2:	6a 07                	push   0x7
c002b4e4:	6a 00                	push   0x0
c002b4e6:	50                   	push   eax
c002b4e7:	e8 d8 fe ff ff       	call   c002b3c4 <IDE::read(unsigned char, unsigned char)>
c002b4ec:	83 c4 1c             	add    esp,0x1c
c002b4ef:	c3                   	ret    

c002b4f0 <ideChannel1IRQHandler(regs*, void*)>:
c002b4f0:	83 ec 10             	sub    esp,0x10
c002b4f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002b4f7:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002b4fe:	6a 07                	push   0x7
c002b500:	6a 01                	push   0x1
c002b502:	50                   	push   eax
c002b503:	e8 bc fe ff ff       	call   c002b3c4 <IDE::read(unsigned char, unsigned char)>
c002b508:	83 c4 1c             	add    esp,0x1c
c002b50b:	c3                   	ret    

c002b50c <IDE::enableIRQs(unsigned char, bool)>:
c002b50c:	57                   	push   edi
c002b50d:	b8 02 00 00 00       	mov    eax,0x2
c002b512:	56                   	push   esi
c002b513:	53                   	push   ebx
c002b514:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002b518:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002b51c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002b521:	74 02                	je     c002b525 <IDE::enableIRQs(unsigned char, bool)+0x19>
c002b523:	31 c0                	xor    eax,eax
c002b525:	0f b6 db             	movzx  ebx,bl
c002b528:	bf 04 00 00 00       	mov    edi,0x4
c002b52d:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c002b534:	50                   	push   eax
c002b535:	6a 0c                	push   0xc
c002b537:	53                   	push   ebx
c002b538:	56                   	push   esi
c002b539:	e8 c6 fd ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b53e:	83 c4 10             	add    esp,0x10
c002b541:	50                   	push   eax
c002b542:	6a 0c                	push   0xc
c002b544:	53                   	push   ebx
c002b545:	56                   	push   esi
c002b546:	e8 79 fe ff ff       	call   c002b3c4 <IDE::read(unsigned char, unsigned char)>
c002b54b:	83 c4 10             	add    esp,0x10
c002b54e:	4f                   	dec    edi
c002b54f:	75 f0                	jne    c002b541 <IDE::enableIRQs(unsigned char, bool)+0x35>
c002b551:	5b                   	pop    ebx
c002b552:	5e                   	pop    esi
c002b553:	5f                   	pop    edi
c002b554:	c3                   	ret    
c002b555:	90                   	nop

c002b556 <IDE::open(int, int, void*)>:
c002b556:	55                   	push   ebp
c002b557:	57                   	push   edi
c002b558:	56                   	push   esi
c002b559:	53                   	push   ebx
c002b55a:	83 ec 1c             	sub    esp,0x1c
c002b55d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002b561:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002b56a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002b573:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002b57a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002b581:	0f 85 de 02 00 00    	jne    c002b865 <IDE::open(int, int, void*)+0x30f>
c002b587:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002b58d:	88 04 24             	mov    BYTE PTR [esp],al
c002b590:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002b593:	83 e0 7f             	and    eax,0x7f
c002b596:	83 f8 05             	cmp    eax,0x5
c002b599:	74 05                	je     c002b5a0 <IDE::open(int, int, void*)+0x4a>
c002b59b:	83 f8 0f             	cmp    eax,0xf
c002b59e:	75 32                	jne    c002b5d2 <IDE::open(int, int, void*)+0x7c>
c002b5a0:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002b5a6:	83 e0 fc             	and    eax,0xfffffffc
c002b5a9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002b5b0:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002b5b6:	83 e0 fc             	and    eax,0xfffffffc
c002b5b9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002b5c0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002b5c6:	83 e0 fc             	and    eax,0xfffffffc
c002b5c9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b5d0:	eb 14                	jmp    c002b5e6 <IDE::open(int, int, void*)+0x90>
c002b5d2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002b5dc:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002b5e6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002b5ed:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002b5f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002b5f8:	89 c6                	mov    esi,eax
c002b5fa:	bf f8 0c 00 00       	mov    edi,0xcf8
c002b5ff:	c1 e6 10             	shl    esi,0x10
c002b602:	89 e8                	mov    eax,ebp
c002b604:	89 fa                	mov    edx,edi
c002b606:	c1 e0 0b             	shl    eax,0xb
c002b609:	09 f0                	or     eax,esi
c002b60b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002b612:	c1 e6 08             	shl    esi,0x8
c002b615:	09 c6                	or     esi,eax
c002b617:	89 f0                	mov    eax,esi
c002b619:	0d 08 00 00 80       	or     eax,0x80000008
c002b61e:	ef                   	out    dx,eax
c002b61f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002b624:	89 ca                	mov    edx,ecx
c002b626:	ed                   	in     eax,dx
c002b627:	c1 e8 10             	shr    eax,0x10
c002b62a:	3d ff ff 00 00       	cmp    eax,0xffff
c002b62f:	0f 84 f9 00 00 00    	je     c002b72e <IDE::open(int, int, void*)+0x1d8>
c002b635:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002b63b:	89 fa                	mov    edx,edi
c002b63d:	89 f0                	mov    eax,esi
c002b63f:	ef                   	out    dx,eax
c002b640:	b0 fe                	mov    al,0xfe
c002b642:	89 ca                	mov    edx,ecx
c002b644:	ee                   	out    dx,al
c002b645:	89 f0                	mov    eax,esi
c002b647:	89 fa                	mov    edx,edi
c002b649:	ef                   	out    dx,eax
c002b64a:	89 ca                	mov    edx,ecx
c002b64c:	ed                   	in     eax,dx
c002b64d:	3c fe                	cmp    al,0xfe
c002b64f:	0f 85 a9 00 00 00    	jne    c002b6fe <IDE::open(int, int, void*)+0x1a8>
c002b655:	8b 15 bc b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9bc
c002b65b:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c002b662:	74 33                	je     c002b697 <IDE::open(int, int, void*)+0x141>
c002b664:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002b66a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002b66e:	40                   	inc    eax
c002b66f:	83 ec 0c             	sub    esp,0xc
c002b672:	0f b6 c0             	movzx  eax,al
c002b675:	50                   	push   eax
c002b676:	55                   	push   ebp
c002b677:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002b67b:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c002b681:	51                   	push   ecx
c002b682:	e8 d9 31 ff ff       	call   c001e860 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002b687:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002b68c:	83 c4 1c             	add    esp,0x1c
c002b68f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b695:	eb 0a                	jmp    c002b6a1 <IDE::open(int, int, void*)+0x14b>
c002b697:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002b6a1:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002b6a8:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002b6af:	c1 e1 10             	shl    ecx,0x10
c002b6b2:	c1 e0 08             	shl    eax,0x8
c002b6b5:	bf f8 0c 00 00       	mov    edi,0xcf8
c002b6ba:	09 c1                	or     ecx,eax
c002b6bc:	89 fa                	mov    edx,edi
c002b6be:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002b6c5:	c1 e0 0b             	shl    eax,0xb
c002b6c8:	09 c1                	or     ecx,eax
c002b6ca:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002b6d0:	89 c8                	mov    eax,ecx
c002b6d2:	ef                   	out    dx,eax
c002b6d3:	be fc 0c 00 00       	mov    esi,0xcfc
c002b6d8:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002b6de:	89 f2                	mov    edx,esi
c002b6e0:	ee                   	out    dx,al
c002b6e1:	89 c8                	mov    eax,ecx
c002b6e3:	89 fa                	mov    edx,edi
c002b6e5:	ef                   	out    dx,eax
c002b6e6:	89 f2                	mov    edx,esi
c002b6e8:	ed                   	in     eax,dx
c002b6e9:	0f b6 c0             	movzx  eax,al
c002b6ec:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002b6f2:	74 4a                	je     c002b73e <IDE::open(int, int, void*)+0x1e8>
c002b6f4:	83 ec 0c             	sub    esp,0xc
c002b6f7:	68 a4 3f 03 c0       	push   0xc0033fa4
c002b6fc:	eb 38                	jmp    c002b736 <IDE::open(int, int, void*)+0x1e0>
c002b6fe:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002b707:	75 1b                	jne    c002b724 <IDE::open(int, int, void*)+0x1ce>
c002b709:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c002b70d:	3d 80 00 00 00       	cmp    eax,0x80
c002b712:	74 07                	je     c002b71b <IDE::open(int, int, void*)+0x1c5>
c002b714:	3d 8a 00 00 00       	cmp    eax,0x8a
c002b719:	75 09                	jne    c002b724 <IDE::open(int, int, void*)+0x1ce>
c002b71b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b722:	eb 1a                	jmp    c002b73e <IDE::open(int, int, void*)+0x1e8>
c002b724:	83 ec 0c             	sub    esp,0xc
c002b727:	68 ac 3f 03 c0       	push   0xc0033fac
c002b72c:	eb 08                	jmp    c002b736 <IDE::open(int, int, void*)+0x1e0>
c002b72e:	83 ec 0c             	sub    esp,0xc
c002b731:	68 dd 3f 03 c0       	push   0xc0033fdd
c002b736:	e8 53 50 ff ff       	call   c002078e <KePanic(char const*)>
c002b73b:	83 c4 10             	add    esp,0x10
c002b73e:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c002b745:	74 1a                	je     c002b761 <IDE::open(int, int, void*)+0x20b>
c002b747:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002b74d:	83 e0 fc             	and    eax,0xfffffffc
c002b750:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002b757:	83 c0 08             	add    eax,0x8
c002b75a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002b761:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002b767:	89 c2                	mov    edx,eax
c002b769:	83 e2 0f             	and    edx,0xf
c002b76c:	83 fa 08             	cmp    edx,0x8
c002b76f:	75 0a                	jne    c002b77b <IDE::open(int, int, void*)+0x225>
c002b771:	83 e8 02             	sub    eax,0x2
c002b774:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b77b:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002b781:	89 c2                	mov    edx,eax
c002b783:	83 e2 0f             	and    edx,0xf
c002b786:	83 fa 08             	cmp    edx,0x8
c002b789:	75 0a                	jne    c002b795 <IDE::open(int, int, void*)+0x23f>
c002b78b:	83 e8 02             	sub    eax,0x2
c002b78e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b795:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002b79c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002b7a3:	89 d0                	mov    eax,edx
c002b7a5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b7a8:	8d 7a 01             	lea    edi,[edx+0x1]
c002b7ab:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b7af:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002b7b3:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b7b7:	83 e1 3f             	and    ecx,0x3f
c002b7ba:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b7be:	89 f9                	mov    ecx,edi
c002b7c0:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002b7c7:	0f b6 c9             	movzx  ecx,cl
c002b7ca:	8d 78 02             	lea    edi,[eax+0x2]
c002b7cd:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b7d0:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b7d4:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002b7d8:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b7dc:	83 e2 3f             	and    edx,0x3f
c002b7df:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b7e3:	89 f9                	mov    ecx,edi
c002b7e5:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002b7eb:	0f b6 d1             	movzx  edx,cl
c002b7ee:	8d 78 03             	lea    edi,[eax+0x3]
c002b7f1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b7f4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b7f8:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002b7fc:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b800:	83 e1 3f             	and    ecx,0x3f
c002b803:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b807:	89 f9                	mov    ecx,edi
c002b809:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002b80f:	0f b6 c9             	movzx  ecx,cl
c002b812:	8d 78 04             	lea    edi,[eax+0x4]
c002b815:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b818:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b81c:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002b820:	89 fa                	mov    edx,edi
c002b822:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002b828:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b82c:	83 e2 3f             	and    edx,0x3f
c002b82f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b833:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002b83a:	66 85 f6             	test   si,si
c002b83d:	74 65                	je     c002b8a4 <IDE::open(int, int, void*)+0x34e>
c002b83f:	89 f9                	mov    ecx,edi
c002b841:	83 c0 05             	add    eax,0x5
c002b844:	0f b6 d1             	movzx  edx,cl
c002b847:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b84a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b84e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002b852:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002b858:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c002b85c:	83 e0 3f             	and    eax,0x3f
c002b85f:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c002b863:	eb 3f                	jmp    c002b8a4 <IDE::open(int, int, void*)+0x34e>
c002b865:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002b86b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b872:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002b879:	05 06 02 00 00       	add    eax,0x206
c002b87e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b885:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002b88c:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002b893:	05 06 02 00 00       	add    eax,0x206
c002b898:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b89f:	e9 bd fe ff ff       	jmp    c002b761 <IDE::open(int, int, void*)+0x20b>
c002b8a4:	50                   	push   eax
c002b8a5:	50                   	push   eax
c002b8a6:	6a 00                	push   0x0
c002b8a8:	53                   	push   ebx
c002b8a9:	e8 30 fa ff ff       	call   c002b2de <IDE::prepareInterrupt(unsigned char)>
c002b8ae:	5a                   	pop    edx
c002b8af:	59                   	pop    ecx
c002b8b0:	6a 01                	push   0x1
c002b8b2:	53                   	push   ebx
c002b8b3:	e8 26 fa ff ff       	call   c002b2de <IDE::prepareInterrupt(unsigned char)>
c002b8b8:	83 c4 0c             	add    esp,0xc
c002b8bb:	6a 00                	push   0x0
c002b8bd:	6a 00                	push   0x0
c002b8bf:	53                   	push   ebx
c002b8c0:	e8 47 fc ff ff       	call   c002b50c <IDE::enableIRQs(unsigned char, bool)>
c002b8c5:	83 c4 0c             	add    esp,0xc
c002b8c8:	6a 00                	push   0x0
c002b8ca:	6a 01                	push   0x1
c002b8cc:	53                   	push   ebx
c002b8cd:	e8 3a fc ff ff       	call   c002b50c <IDE::enableIRQs(unsigned char, bool)>
c002b8d2:	83 c4 10             	add    esp,0x10
c002b8d5:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002b8dc:	74 34                	je     c002b912 <IDE::open(int, int, void*)+0x3bc>
c002b8de:	83 ec 0c             	sub    esp,0xc
c002b8e1:	53                   	push   ebx
c002b8e2:	6a 01                	push   0x1
c002b8e4:	68 d4 b4 02 c0       	push   0xc002b4d4
c002b8e9:	6a 0e                	push   0xe
c002b8eb:	53                   	push   ebx
c002b8ec:	e8 cd fc fe ff       	call   c001b5be <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b8f1:	83 c4 14             	add    esp,0x14
c002b8f4:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b8fa:	53                   	push   ebx
c002b8fb:	6a 01                	push   0x1
c002b8fd:	68 f0 b4 02 c0       	push   0xc002b4f0
c002b902:	6a 0f                	push   0xf
c002b904:	53                   	push   ebx
c002b905:	e8 b4 fc fe ff       	call   c001b5be <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b90a:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002b910:	eb 38                	jmp    c002b94a <IDE::open(int, int, void*)+0x3f4>
c002b912:	83 ec 0c             	sub    esp,0xc
c002b915:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002b91f:	53                   	push   ebx
c002b920:	6a 00                	push   0x0
c002b922:	68 d4 b4 02 c0       	push   0xc002b4d4
c002b927:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002b92d:	53                   	push   ebx
c002b92e:	e8 8b fc fe ff       	call   c001b5be <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b933:	83 c4 14             	add    esp,0x14
c002b936:	53                   	push   ebx
c002b937:	6a 00                	push   0x0
c002b939:	68 f0 b4 02 c0       	push   0xc002b4f0
c002b93e:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002b944:	53                   	push   ebx
c002b945:	e8 74 fc fe ff       	call   c001b5be <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b94a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b94c:	83 c4 20             	add    esp,0x20
c002b94f:	83 ec 0c             	sub    esp,0xc
c002b952:	53                   	push   ebx
c002b953:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002b956:	83 c4 0c             	add    esp,0xc
c002b959:	6a 07                	push   0x7
c002b95b:	6a 00                	push   0x0
c002b95d:	53                   	push   ebx
c002b95e:	e8 61 fa ff ff       	call   c002b3c4 <IDE::read(unsigned char, unsigned char)>
c002b963:	83 c4 0c             	add    esp,0xc
c002b966:	6a 07                	push   0x7
c002b968:	6a 01                	push   0x1
c002b96a:	53                   	push   ebx
c002b96b:	e8 54 fa ff ff       	call   c002b3c4 <IDE::read(unsigned char, unsigned char)>
c002b970:	83 c4 0c             	add    esp,0xc
c002b973:	6a 01                	push   0x1
c002b975:	6a 00                	push   0x0
c002b977:	53                   	push   ebx
c002b978:	e8 8f fb ff ff       	call   c002b50c <IDE::enableIRQs(unsigned char, bool)>
c002b97d:	83 c4 0c             	add    esp,0xc
c002b980:	6a 01                	push   0x1
c002b982:	6a 01                	push   0x1
c002b984:	53                   	push   ebx
c002b985:	e8 82 fb ff ff       	call   c002b50c <IDE::enableIRQs(unsigned char, bool)>
c002b98a:	83 c4 2c             	add    esp,0x2c
c002b98d:	31 c0                	xor    eax,eax
c002b98f:	5b                   	pop    ebx
c002b990:	5e                   	pop    esi
c002b991:	5f                   	pop    edi
c002b992:	5d                   	pop    ebp
c002b993:	c3                   	ret    

c002b994 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002b994:	55                   	push   ebp
c002b995:	57                   	push   edi
c002b996:	56                   	push   esi
c002b997:	53                   	push   ebx
c002b998:	83 ec 1c             	sub    esp,0x1c
c002b99b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002b99f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b9a3:	8d 42 f8             	lea    eax,[edx-0x8]
c002b9a6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b9aa:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002b9ae:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002b9b2:	3c 03                	cmp    al,0x3
c002b9b4:	77 5a                	ja     c002ba10 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c002b9b6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002b9ba:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002b9be:	0f b6 db             	movzx  ebx,bl
c002b9c1:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002b9c4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b9c9:	0c 80                	or     al,0x80
c002b9cb:	50                   	push   eax
c002b9cc:	6a 0c                	push   0xc
c002b9ce:	53                   	push   ebx
c002b9cf:	56                   	push   esi
c002b9d0:	e8 2f f9 ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b9d5:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002b9da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002b9de:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002b9e2:	0f b6 d2             	movzx  edx,dl
c002b9e5:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002b9e9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b9eb:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b9f0:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002b9f4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002b9f8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002b9fc:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002ba04:	83 c4 2c             	add    esp,0x2c
c002ba07:	5b                   	pop    ebx
c002ba08:	5e                   	pop    esi
c002ba09:	5f                   	pop    edi
c002ba0a:	5d                   	pop    ebp
c002ba0b:	e9 f4 f8 ff ff       	jmp    c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ba10:	0f b6 c2             	movzx  eax,dl
c002ba13:	83 f8 07             	cmp    eax,0x7
c002ba16:	77 12                	ja     c002ba2a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c002ba18:	0f b6 c2             	movzx  eax,dl
c002ba1b:	0f b6 db             	movzx  ebx,bl
c002ba1e:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c002ba26:	01 c2                	add    edx,eax
c002ba28:	eb 2f                	jmp    c002ba59 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002ba2a:	83 f8 0d             	cmp    eax,0xd
c002ba2d:	77 13                	ja     c002ba42 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c002ba2f:	0f b6 db             	movzx  ebx,bl
c002ba32:	0f b6 d2             	movzx  edx,dl
c002ba35:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c002ba3c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002ba40:	eb 17                	jmp    c002ba59 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002ba42:	83 f8 15             	cmp    eax,0x15
c002ba45:	77 14                	ja     c002ba5b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c002ba47:	0f b6 db             	movzx  ebx,bl
c002ba4a:	0f b6 d2             	movzx  edx,dl
c002ba4d:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c002ba55:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002ba59:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002ba5b:	83 c4 1c             	add    esp,0x1c
c002ba5e:	5b                   	pop    ebx
c002ba5f:	5e                   	pop    esi
c002ba60:	5f                   	pop    edi
c002ba61:	5d                   	pop    ebp
c002ba62:	c3                   	ret    
c002ba63:	90                   	nop

c002ba64 <IDE::detect()>:
c002ba64:	55                   	push   ebp
c002ba65:	57                   	push   edi
c002ba66:	56                   	push   esi
c002ba67:	53                   	push   ebx
c002ba68:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002ba6e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002ba75:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002ba7c:	0f 85 a4 02 00 00    	jne    c002bd26 <IDE::detect()+0x2c2>
c002ba82:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002ba89:	31 f6                	xor    esi,esi
c002ba8b:	31 ed                	xor    ebp,ebp
c002ba8d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002ba95:	89 e8                	mov    eax,ebp
c002ba97:	c1 e0 06             	shl    eax,0x6
c002ba9a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002baa2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002baa6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002baaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002baae:	c1 e0 04             	shl    eax,0x4
c002bab1:	83 c8 a0             	or     eax,0xffffffa0
c002bab4:	0f b6 c0             	movzx  eax,al
c002bab7:	50                   	push   eax
c002bab8:	6a 06                	push   0x6
c002baba:	56                   	push   esi
c002babb:	53                   	push   ebx
c002babc:	e8 43 f8 ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bac1:	83 c4 0c             	add    esp,0xc
c002bac4:	6a 0c                	push   0xc
c002bac6:	56                   	push   esi
c002bac7:	53                   	push   ebx
c002bac8:	e8 f7 f8 ff ff       	call   c002b3c4 <IDE::read(unsigned char, unsigned char)>
c002bacd:	83 c4 0c             	add    esp,0xc
c002bad0:	6a 0c                	push   0xc
c002bad2:	56                   	push   esi
c002bad3:	53                   	push   ebx
c002bad4:	e8 eb f8 ff ff       	call   c002b3c4 <IDE::read(unsigned char, unsigned char)>
c002bad9:	83 c4 0c             	add    esp,0xc
c002badc:	6a 0c                	push   0xc
c002bade:	56                   	push   esi
c002badf:	53                   	push   ebx
c002bae0:	e8 df f8 ff ff       	call   c002b3c4 <IDE::read(unsigned char, unsigned char)>
c002bae5:	83 c4 0c             	add    esp,0xc
c002bae8:	6a 0c                	push   0xc
c002baea:	56                   	push   esi
c002baeb:	53                   	push   ebx
c002baec:	e8 d3 f8 ff ff       	call   c002b3c4 <IDE::read(unsigned char, unsigned char)>
c002baf1:	68 ec 00 00 00       	push   0xec
c002baf6:	6a 07                	push   0x7
c002baf8:	56                   	push   esi
c002baf9:	53                   	push   ebx
c002bafa:	e8 05 f8 ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002baff:	83 c4 1c             	add    esp,0x1c
c002bb02:	6a 0c                	push   0xc
c002bb04:	56                   	push   esi
c002bb05:	53                   	push   ebx
c002bb06:	e8 b9 f8 ff ff       	call   c002b3c4 <IDE::read(unsigned char, unsigned char)>
c002bb0b:	83 c4 0c             	add    esp,0xc
c002bb0e:	6a 0c                	push   0xc
c002bb10:	56                   	push   esi
c002bb11:	53                   	push   ebx
c002bb12:	e8 ad f8 ff ff       	call   c002b3c4 <IDE::read(unsigned char, unsigned char)>
c002bb17:	83 c4 0c             	add    esp,0xc
c002bb1a:	6a 0c                	push   0xc
c002bb1c:	56                   	push   esi
c002bb1d:	53                   	push   ebx
c002bb1e:	e8 a1 f8 ff ff       	call   c002b3c4 <IDE::read(unsigned char, unsigned char)>
c002bb23:	83 c4 0c             	add    esp,0xc
c002bb26:	6a 0c                	push   0xc
c002bb28:	56                   	push   esi
c002bb29:	53                   	push   ebx
c002bb2a:	e8 95 f8 ff ff       	call   c002b3c4 <IDE::read(unsigned char, unsigned char)>
c002bb2f:	83 c4 0c             	add    esp,0xc
c002bb32:	6a 0c                	push   0xc
c002bb34:	56                   	push   esi
c002bb35:	53                   	push   ebx
c002bb36:	e8 89 f8 ff ff       	call   c002b3c4 <IDE::read(unsigned char, unsigned char)>
c002bb3b:	83 c4 10             	add    esp,0x10
c002bb3e:	84 c0                	test   al,al
c002bb40:	0f 84 60 01 00 00    	je     c002bca6 <IDE::detect()+0x242>
c002bb46:	31 ff                	xor    edi,edi
c002bb48:	50                   	push   eax
c002bb49:	6a 0c                	push   0xc
c002bb4b:	56                   	push   esi
c002bb4c:	53                   	push   ebx
c002bb4d:	e8 72 f8 ff ff       	call   c002b3c4 <IDE::read(unsigned char, unsigned char)>
c002bb52:	83 c4 10             	add    esp,0x10
c002bb55:	a8 01                	test   al,0x1
c002bb57:	0f 85 6a 01 00 00    	jne    c002bcc7 <IDE::detect()+0x263>
c002bb5d:	a8 80                	test   al,0x80
c002bb5f:	75 04                	jne    c002bb65 <IDE::detect()+0x101>
c002bb61:	a8 08                	test   al,0x8
c002bb63:	75 23                	jne    c002bb88 <IDE::detect()+0x124>
c002bb65:	47                   	inc    edi
c002bb66:	81 ff 17 01 00 00    	cmp    edi,0x117
c002bb6c:	7e da                	jle    c002bb48 <IDE::detect()+0xe4>
c002bb6e:	83 ec 0c             	sub    esp,0xc
c002bb71:	6a 32                	push   0x32
c002bb73:	e8 fc 9d ff ff       	call   c0025974 <milliTenthSleep(unsigned int)>
c002bb78:	83 c4 10             	add    esp,0x10
c002bb7b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002bb81:	75 c5                	jne    c002bb48 <IDE::detect()+0xe4>
c002bb83:	e9 3f 01 00 00       	jmp    c002bcc7 <IDE::detect()+0x263>
c002bb88:	31 c9                	xor    ecx,ecx
c002bb8a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002bb8e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002bb92:	83 ec 0c             	sub    esp,0xc
c002bb95:	68 80 00 00 00       	push   0x80
c002bb9a:	57                   	push   edi
c002bb9b:	6a 00                	push   0x0
c002bb9d:	56                   	push   esi
c002bb9e:	53                   	push   ebx
c002bb9f:	e8 f0 fd ff ff       	call   c002b994 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002bba4:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002bba9:	89 e8                	mov    eax,ebp
c002bbab:	89 d1                	mov    ecx,edx
c002bbad:	c1 e0 06             	shl    eax,0x6
c002bbb0:	01 d8                	add    eax,ebx
c002bbb2:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002bbb9:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002bbc0:	89 f2                	mov    edx,esi
c002bbc2:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002bbc8:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002bbcc:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002bbd2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002bbd6:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002bbdd:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002bbe5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002bbec:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002bbf4:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002bbfa:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002bc01:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002bc07:	8d 54 24 58          	lea    edx,[esp+0x58]
c002bc0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002bc0f:	83 c4 20             	add    esp,0x20
c002bc12:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002bc15:	83 c0 02             	add    eax,0x2
c002bc18:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002bc1e:	83 c7 02             	add    edi,0x2
c002bc21:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002bc24:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002bc2a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002bc2e:	75 e2                	jne    c002bc12 <IDE::detect()+0x1ae>
c002bc30:	89 e8                	mov    eax,ebp
c002bc32:	c1 e0 06             	shl    eax,0x6
c002bc35:	01 d8                	add    eax,ebx
c002bc37:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c002bc3e:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002bc45:	c1 ea 09             	shr    edx,0x9
c002bc48:	83 e2 01             	and    edx,0x1
c002bc4b:	80 e1 01             	and    cl,0x1
c002bc4e:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002bc54:	75 22                	jne    c002bc78 <IDE::detect()+0x214>
c002bc56:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002bc5d:	74 46                	je     c002bca5 <IDE::detect()+0x241>
c002bc5f:	83 ec 0c             	sub    esp,0xc
c002bc62:	68 7c 01 00 00       	push   0x17c
c002bc67:	e8 5b a9 fe ff       	call   c00165c7 <malloc>
c002bc6c:	89 c7                	mov    edi,eax
c002bc6e:	89 04 24             	mov    DWORD PTR [esp],eax
c002bc71:	e8 2e 05 00 00       	call   c002c1a4 <ATA::ATA()>
c002bc76:	eb 17                	jmp    c002bc8f <IDE::detect()+0x22b>
c002bc78:	83 ec 0c             	sub    esp,0xc
c002bc7b:	68 84 01 00 00       	push   0x184
c002bc80:	e8 42 a9 fe ff       	call   c00165c7 <malloc>
c002bc85:	89 c7                	mov    edi,eax
c002bc87:	89 04 24             	mov    DWORD PTR [esp],eax
c002bc8a:	e8 59 0e 00 00       	call   c002cae8 <ATAPI::ATAPI()>
c002bc8f:	5a                   	pop    edx
c002bc90:	59                   	pop    ecx
c002bc91:	57                   	push   edi
c002bc92:	53                   	push   ebx
c002bc93:	e8 7a f9 fe ff       	call   c001b612 <Device::addChild(Device*)>
c002bc98:	8b 07                	mov    eax,DWORD PTR [edi]
c002bc9a:	53                   	push   ebx
c002bc9b:	55                   	push   ebp
c002bc9c:	6a 00                	push   0x0
c002bc9e:	57                   	push   edi
c002bc9f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002bca2:	83 c4 20             	add    esp,0x20
c002bca5:	45                   	inc    ebp
c002bca6:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002bcab:	74 0d                	je     c002bcba <IDE::detect()+0x256>
c002bcad:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c002bcb5:	e9 db fd ff ff       	jmp    c002ba95 <IDE::detect()+0x31>
c002bcba:	4e                   	dec    esi
c002bcbb:	74 69                	je     c002bd26 <IDE::detect()+0x2c2>
c002bcbd:	be 01 00 00 00       	mov    esi,0x1
c002bcc2:	e9 c6 fd ff ff       	jmp    c002ba8d <IDE::detect()+0x29>
c002bcc7:	50                   	push   eax
c002bcc8:	6a 04                	push   0x4
c002bcca:	56                   	push   esi
c002bccb:	53                   	push   ebx
c002bccc:	e8 f3 f6 ff ff       	call   c002b3c4 <IDE::read(unsigned char, unsigned char)>
c002bcd1:	83 c4 0c             	add    esp,0xc
c002bcd4:	89 c7                	mov    edi,eax
c002bcd6:	6a 05                	push   0x5
c002bcd8:	56                   	push   esi
c002bcd9:	53                   	push   ebx
c002bcda:	e8 e5 f6 ff ff       	call   c002b3c4 <IDE::read(unsigned char, unsigned char)>
c002bcdf:	83 c4 10             	add    esp,0x10
c002bce2:	89 f9                	mov    ecx,edi
c002bce4:	0f b6 c0             	movzx  eax,al
c002bce7:	0f b6 f9             	movzx  edi,cl
c002bcea:	83 ff 14             	cmp    edi,0x14
c002bced:	75 07                	jne    c002bcf6 <IDE::detect()+0x292>
c002bcef:	3d eb 00 00 00       	cmp    eax,0xeb
c002bcf4:	eb 0a                	jmp    c002bd00 <IDE::detect()+0x29c>
c002bcf6:	3d 96 00 00 00       	cmp    eax,0x96
c002bcfb:	75 a9                	jne    c002bca6 <IDE::detect()+0x242>
c002bcfd:	83 ff 69             	cmp    edi,0x69
c002bd00:	75 a4                	jne    c002bca6 <IDE::detect()+0x242>
c002bd02:	68 a1 00 00 00       	push   0xa1
c002bd07:	6a 07                	push   0x7
c002bd09:	56                   	push   esi
c002bd0a:	53                   	push   ebx
c002bd0b:	e8 f4 f5 ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd10:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c002bd17:	e8 58 9c ff ff       	call   c0025974 <milliTenthSleep(unsigned int)>
c002bd1c:	83 c4 10             	add    esp,0x10
c002bd1f:	b1 01                	mov    cl,0x1
c002bd21:	e9 64 fe ff ff       	jmp    c002bb8a <IDE::detect()+0x126>
c002bd26:	81 c4 1c 02 00 00    	add    esp,0x21c
c002bd2c:	5b                   	pop    ebx
c002bd2d:	5e                   	pop    esi
c002bd2e:	5f                   	pop    edi
c002bd2f:	5d                   	pop    ebp
c002bd30:	c3                   	ret    
c002bd31:	90                   	nop

c002bd32 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002bd32:	55                   	push   ebp
c002bd33:	57                   	push   edi
c002bd34:	56                   	push   esi
c002bd35:	53                   	push   ebx
c002bd36:	83 ec 1c             	sub    esp,0x1c
c002bd39:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002bd3d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002bd41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002bd45:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002bd49:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002bd4d:	88 c3                	mov    bl,al
c002bd4f:	25 ff 00 00 00       	and    eax,0xff
c002bd54:	0f 84 88 00 00 00    	je     c002bde2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002bd5a:	83 ec 0c             	sub    esp,0xc
c002bd5d:	89 c7                	mov    edi,eax
c002bd5f:	68 07 40 03 c0       	push   0xc0034007
c002bd64:	e8 ec d6 fe ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c002bd69:	83 c4 10             	add    esp,0x10
c002bd6c:	83 ff 01             	cmp    edi,0x1
c002bd6f:	74 6b                	je     c002bddc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c002bd71:	83 ff 02             	cmp    edi,0x2
c002bd74:	75 58                	jne    c002bdce <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c002bd76:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c002bd7b:	01 ff                	add    edi,edi
c002bd7d:	50                   	push   eax
c002bd7e:	09 fe                	or     esi,edi
c002bd80:	6a 01                	push   0x1
c002bd82:	89 f0                	mov    eax,esi
c002bd84:	0f b6 f0             	movzx  esi,al
c002bd87:	c1 e6 06             	shl    esi,0x6
c002bd8a:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c002bd92:	50                   	push   eax
c002bd93:	55                   	push   ebp
c002bd94:	e8 2b f6 ff ff       	call   c002b3c4 <IDE::read(unsigned char, unsigned char)>
c002bd99:	83 c4 10             	add    esp,0x10
c002bd9c:	a8 01                	test   al,0x1
c002bd9e:	74 02                	je     c002bda2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c002bda0:	b3 07                	mov    bl,0x7
c002bda2:	a8 02                	test   al,0x2
c002bda4:	74 02                	je     c002bda8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c002bda6:	b3 03                	mov    bl,0x3
c002bda8:	a8 04                	test   al,0x4
c002bdaa:	74 02                	je     c002bdae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c002bdac:	b3 14                	mov    bl,0x14
c002bdae:	a8 08                	test   al,0x8
c002bdb0:	74 02                	je     c002bdb4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c002bdb2:	b3 03                	mov    bl,0x3
c002bdb4:	a8 10                	test   al,0x10
c002bdb6:	74 02                	je     c002bdba <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c002bdb8:	b3 15                	mov    bl,0x15
c002bdba:	a8 20                	test   al,0x20
c002bdbc:	74 02                	je     c002bdc0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c002bdbe:	b3 03                	mov    bl,0x3
c002bdc0:	a8 40                	test   al,0x40
c002bdc2:	74 02                	je     c002bdc6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c002bdc4:	b3 16                	mov    bl,0x16
c002bdc6:	a8 80                	test   al,0x80
c002bdc8:	74 18                	je     c002bde2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002bdca:	b3 0d                	mov    bl,0xd
c002bdcc:	eb 14                	jmp    c002bde2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002bdce:	83 ff 03             	cmp    edi,0x3
c002bdd1:	74 0d                	je     c002bde0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c002bdd3:	83 ff 04             	cmp    edi,0x4
c002bdd6:	75 0a                	jne    c002bde2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002bdd8:	b3 08                	mov    bl,0x8
c002bdda:	eb 06                	jmp    c002bde2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002bddc:	b3 13                	mov    bl,0x13
c002bdde:	eb 02                	jmp    c002bde2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002bde0:	b3 17                	mov    bl,0x17
c002bde2:	83 c4 1c             	add    esp,0x1c
c002bde5:	88 d8                	mov    al,bl
c002bde7:	5b                   	pop    ebx
c002bde8:	5e                   	pop    esi
c002bde9:	5f                   	pop    edi
c002bdea:	5d                   	pop    ebp
c002bdeb:	c3                   	ret    

c002bdec <IDE::polling(unsigned char, unsigned int)>:
c002bdec:	57                   	push   edi
c002bded:	56                   	push   esi
c002bdee:	53                   	push   ebx
c002bdef:	bb 04 00 00 00       	mov    ebx,0x4
c002bdf4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002bdf8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002bdfd:	52                   	push   edx
c002bdfe:	6a 0c                	push   0xc
c002be00:	56                   	push   esi
c002be01:	57                   	push   edi
c002be02:	e8 bd f5 ff ff       	call   c002b3c4 <IDE::read(unsigned char, unsigned char)>
c002be07:	83 c4 10             	add    esp,0x10
c002be0a:	4b                   	dec    ebx
c002be0b:	75 f0                	jne    c002bdfd <IDE::polling(unsigned char, unsigned int)+0x11>
c002be0d:	bb a0 86 01 00       	mov    ebx,0x186a0
c002be12:	50                   	push   eax
c002be13:	6a 0c                	push   0xc
c002be15:	56                   	push   esi
c002be16:	57                   	push   edi
c002be17:	e8 a8 f5 ff ff       	call   c002b3c4 <IDE::read(unsigned char, unsigned char)>
c002be1c:	83 c4 10             	add    esp,0x10
c002be1f:	a8 01                	test   al,0x1
c002be21:	75 17                	jne    c002be3a <IDE::polling(unsigned char, unsigned int)+0x4e>
c002be23:	a8 20                	test   al,0x20
c002be25:	75 0f                	jne    c002be36 <IDE::polling(unsigned char, unsigned int)+0x4a>
c002be27:	4b                   	dec    ebx
c002be28:	74 10                	je     c002be3a <IDE::polling(unsigned char, unsigned int)+0x4e>
c002be2a:	a8 80                	test   al,0x80
c002be2c:	75 e4                	jne    c002be12 <IDE::polling(unsigned char, unsigned int)+0x26>
c002be2e:	a8 08                	test   al,0x8
c002be30:	74 e0                	je     c002be12 <IDE::polling(unsigned char, unsigned int)+0x26>
c002be32:	31 c0                	xor    eax,eax
c002be34:	eb 06                	jmp    c002be3c <IDE::polling(unsigned char, unsigned int)+0x50>
c002be36:	b0 01                	mov    al,0x1
c002be38:	eb 02                	jmp    c002be3c <IDE::polling(unsigned char, unsigned int)+0x50>
c002be3a:	b0 02                	mov    al,0x2
c002be3c:	5b                   	pop    ebx
c002be3d:	5e                   	pop    esi
c002be3e:	5f                   	pop    edi
c002be3f:	c3                   	ret    

c002be40 <SATABus::close(int, int, void*)>:
c002be40:	31 c0                	xor    eax,eax
c002be42:	c3                   	ret    
c002be43:	90                   	nop

c002be44 <SATABus::detect()>:
c002be44:	c3                   	ret    
c002be45:	90                   	nop

c002be46 <SATABus::SATABus()>:
c002be46:	83 ec 0c             	sub    esp,0xc
c002be49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002be4d:	83 ec 08             	sub    esp,0x8
c002be50:	68 40 40 03 c0       	push   0xc0034040
c002be55:	50                   	push   eax
c002be56:	e8 11 fb fe ff       	call   c001b96c <HardDiskController::HardDiskController(char const*)>
c002be5b:	83 c4 10             	add    esp,0x10
c002be5e:	ba 6c 40 03 c0       	mov    edx,0xc003406c
c002be63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002be67:	89 10                	mov    DWORD PTR [eax],edx
c002be69:	83 ec 0c             	sub    esp,0xc
c002be6c:	6a 50                	push   0x50
c002be6e:	e8 2c ab fe ff       	call   c001699f <Phys::allocateContiguousPages(int)>
c002be73:	83 c4 10             	add    esp,0x10
c002be76:	89 c2                	mov    edx,eax
c002be78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002be7c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002be82:	83 ec 0c             	sub    esp,0xc
c002be85:	6a 50                	push   0x50
c002be87:	e8 91 c2 fe ff       	call   c001811d <Virt::allocateKernelVirtualPages(int)>
c002be8c:	83 c4 10             	add    esp,0x10
c002be8f:	89 c2                	mov    edx,eax
c002be91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002be95:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002be9b:	a1 b0 ba 03 c0       	mov    eax,ds:0xc003bab0
c002bea0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002bea4:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002beaa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002beae:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002beb4:	83 ec 0c             	sub    esp,0xc
c002beb7:	6a 03                	push   0x3
c002beb9:	6a 50                	push   0x50
c002bebb:	51                   	push   ecx
c002bebc:	52                   	push   edx
c002bebd:	50                   	push   eax
c002bebe:	e8 67 cb fe ff       	call   c0018a2a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002bec3:	83 c4 20             	add    esp,0x20
c002bec6:	90                   	nop
c002bec7:	83 c4 0c             	add    esp,0xc
c002beca:	c3                   	ret    
c002becb:	90                   	nop

c002becc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002becc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002bed0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002bed3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002bed6:	09 c2                	or     edx,eax
c002bed8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002bedc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002bee2:	8b 08                	mov    ecx,DWORD PTR [eax]
c002bee4:	31 c0                	xor    eax,eax
c002bee6:	c1 e9 08             	shr    ecx,0x8
c002bee9:	83 e1 0f             	and    ecx,0xf
c002beec:	39 c8                	cmp    eax,ecx
c002beee:	74 0a                	je     c002befa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c002bef0:	f6 c2 01             	test   dl,0x1
c002bef3:	74 08                	je     c002befd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002bef5:	d1 ea                	shr    edx,1
c002bef7:	40                   	inc    eax
c002bef8:	eb f2                	jmp    c002beec <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c002befa:	83 c8 ff             	or     eax,0xffffffff
c002befd:	c3                   	ret    

c002befe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002befe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002bf02:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002bf05:	89 c2                	mov    edx,eax
c002bf07:	c1 ea 08             	shr    edx,0x8
c002bf0a:	83 e2 0f             	and    edx,0xf
c002bf0d:	4a                   	dec    edx
c002bf0e:	75 32                	jne    c002bf42 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002bf10:	83 e0 0f             	and    eax,0xf
c002bf13:	83 f8 03             	cmp    eax,0x3
c002bf16:	75 2a                	jne    c002bf42 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002bf18:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002bf1b:	b8 02 00 00 00       	mov    eax,0x2
c002bf20:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002bf26:	74 1c                	je     c002bf44 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002bf28:	b8 04 00 00 00       	mov    eax,0x4
c002bf2d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002bf33:	74 0f                	je     c002bf44 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002bf35:	31 c0                	xor    eax,eax
c002bf37:	83 fa 03             	cmp    edx,0x3
c002bf3a:	0f 94 c0             	sete   al
c002bf3d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002bf41:	c3                   	ret    
c002bf42:	31 c0                	xor    eax,eax
c002bf44:	c3                   	ret    
c002bf45:	90                   	nop

c002bf46 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002bf46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002bf4a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bf4d:	0f ba e2 0f          	bt     edx,0xf
c002bf51:	72 f7                	jb     c002bf4a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002bf53:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bf56:	83 ca 10             	or     edx,0x10
c002bf59:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bf5c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bf5f:	83 ca 01             	or     edx,0x1
c002bf62:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bf65:	c3                   	ret    

c002bf66 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002bf66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002bf6a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bf6d:	83 e2 fe             	and    edx,0xfffffffe
c002bf70:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bf73:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bf76:	83 e2 ef             	and    edx,0xffffffef
c002bf79:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bf7c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bf7f:	0f ba e2 0e          	bt     edx,0xe
c002bf83:	72 f7                	jb     c002bf7c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002bf85:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bf88:	0f ba e2 0f          	bt     edx,0xf
c002bf8c:	72 ee                	jb     c002bf7c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002bf8e:	c3                   	ret    
c002bf8f:	90                   	nop

c002bf90 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002bf90:	55                   	push   ebp
c002bf91:	57                   	push   edi
c002bf92:	56                   	push   esi
c002bf93:	53                   	push   ebx
c002bf94:	83 ec 1c             	sub    esp,0x1c
c002bf97:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002bf9b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002bf9f:	53                   	push   ebx
c002bfa0:	56                   	push   esi
c002bfa1:	e8 c0 ff ff ff       	call   c002bf66 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002bfa6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002bfaa:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002bfb0:	83 ec 0c             	sub    esp,0xc
c002bfb3:	c1 e5 0a             	shl    ebp,0xa
c002bfb6:	01 e8                	add    eax,ebp
c002bfb8:	89 03                	mov    DWORD PTR [ebx],eax
c002bfba:	8b 03                	mov    eax,DWORD PTR [ebx]
c002bfbc:	68 00 04 00 00       	push   0x400
c002bfc1:	6a 00                	push   0x0
c002bfc3:	50                   	push   eax
c002bfc4:	e8 27 45 fd ff       	call   c00004f0 <memset>
c002bfc9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c002bfcf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002bfd3:	01 e8                	add    eax,ebp
c002bfd5:	83 c4 1c             	add    esp,0x1c
c002bfd8:	89 03                	mov    DWORD PTR [ebx],eax
c002bfda:	c1 e2 08             	shl    edx,0x8
c002bfdd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002bfe4:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c002bfea:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002bff0:	01 f8                	add    eax,edi
c002bff2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002bff5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002bff8:	68 00 01 00 00       	push   0x100
c002bffd:	6a 00                	push   0x0
c002bfff:	50                   	push   eax
c002c000:	e8 eb 44 fd ff       	call   c00004f0 <memset>
c002c005:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c002c00b:	01 fa                	add    edx,edi
c002c00d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002c011:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c002c014:	c1 e7 0d             	shl    edi,0xd
c002c017:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002c01e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c002c024:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c002c02a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002c02e:	31 ff                	xor    edi,edi
c002c030:	83 c4 10             	add    esp,0x10
c002c033:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c002c039:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002c03d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002c043:	83 c5 20             	add    ebp,0x20
c002c046:	01 f8                	add    eax,edi
c002c048:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002c04b:	52                   	push   edx
c002c04c:	68 00 01 00 00       	push   0x100
c002c051:	6a 00                	push   0x0
c002c053:	50                   	push   eax
c002c054:	e8 97 44 fd ff       	call   c00004f0 <memset>
c002c059:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002c05d:	83 c4 10             	add    esp,0x10
c002c060:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002c066:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002c06d:	01 f8                	add    eax,edi
c002c06f:	81 c7 00 01 00 00    	add    edi,0x100
c002c075:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002c078:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002c07e:	75 b3                	jne    c002c033 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c002c080:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002c087:	50                   	push   eax
c002c088:	50                   	push   eax
c002c089:	53                   	push   ebx
c002c08a:	56                   	push   esi
c002c08b:	e8 b6 fe ff ff       	call   c002bf46 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002c090:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002c097:	83 c4 2c             	add    esp,0x2c
c002c09a:	5b                   	pop    ebx
c002c09b:	5e                   	pop    esi
c002c09c:	5f                   	pop    edi
c002c09d:	5d                   	pop    ebp
c002c09e:	c3                   	ret    
c002c09f:	90                   	nop

c002c0a0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002c0a0:	55                   	push   ebp
c002c0a1:	57                   	push   edi
c002c0a2:	56                   	push   esi
c002c0a3:	53                   	push   ebx
c002c0a4:	31 db                	xor    ebx,ebx
c002c0a6:	83 ec 0c             	sub    esp,0xc
c002c0a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c0ad:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002c0b1:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002c0b4:	f7 c7 01 00 00 00    	test   edi,0x1
c002c0ba:	74 7a                	je     c002c136 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002c0bc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002c0c0:	89 d8                	mov    eax,ebx
c002c0c2:	c1 e0 07             	shl    eax,0x7
c002c0c5:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c002c0cc:	55                   	push   ebp
c002c0cd:	56                   	push   esi
c002c0ce:	e8 2b fe ff ff       	call   c002befe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002c0d3:	5a                   	pop    edx
c002c0d4:	83 f8 01             	cmp    eax,0x1
c002c0d7:	59                   	pop    ecx
c002c0d8:	75 21                	jne    c002c0fb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c002c0da:	50                   	push   eax
c002c0db:	53                   	push   ebx
c002c0dc:	55                   	push   ebp
c002c0dd:	56                   	push   esi
c002c0de:	e8 ad fe ff ff       	call   c002bf90 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002c0e3:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002c0ea:	e8 d8 a4 fe ff       	call   c00165c7 <malloc>
c002c0ef:	89 c5                	mov    ebp,eax
c002c0f1:	89 04 24             	mov    DWORD PTR [esp],eax
c002c0f4:	e8 bb 10 00 00       	call   c002d1b4 <SATA::SATA()>
c002c0f9:	eb 24                	jmp    c002c11f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c002c0fb:	83 f8 04             	cmp    eax,0x4
c002c0fe:	75 36                	jne    c002c136 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002c100:	51                   	push   ecx
c002c101:	53                   	push   ebx
c002c102:	55                   	push   ebp
c002c103:	56                   	push   esi
c002c104:	e8 87 fe ff ff       	call   c002bf90 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002c109:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c002c110:	e8 b2 a4 fe ff       	call   c00165c7 <malloc>
c002c115:	89 c5                	mov    ebp,eax
c002c117:	89 04 24             	mov    DWORD PTR [esp],eax
c002c11a:	e8 2b 18 00 00       	call   c002d94a <SATAPI::SATAPI()>
c002c11f:	58                   	pop    eax
c002c120:	5a                   	pop    edx
c002c121:	55                   	push   ebp
c002c122:	56                   	push   esi
c002c123:	e8 ea f4 fe ff       	call   c001b612 <Device::addChild(Device*)>
c002c128:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002c12b:	56                   	push   esi
c002c12c:	6a 00                	push   0x0
c002c12e:	53                   	push   ebx
c002c12f:	55                   	push   ebp
c002c130:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002c133:	83 c4 20             	add    esp,0x20
c002c136:	d1 ef                	shr    edi,1
c002c138:	43                   	inc    ebx
c002c139:	83 fb 20             	cmp    ebx,0x20
c002c13c:	0f 85 72 ff ff ff    	jne    c002c0b4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002c142:	83 c4 0c             	add    esp,0xc
c002c145:	5b                   	pop    ebx
c002c146:	5e                   	pop    esi
c002c147:	5f                   	pop    edi
c002c148:	5d                   	pop    ebp
c002c149:	c3                   	ret    

c002c14a <SATABus::open(int, int, void*)>:
c002c14a:	53                   	push   ebx
c002c14b:	83 ec 08             	sub    esp,0x8
c002c14e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c152:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c002c158:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002c15e:	e8 a1 93 ff ff       	call   c0025504 <KeDisablePreemption()>
c002c163:	52                   	push   edx
c002c164:	52                   	push   edx
c002c165:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c002c16b:	53                   	push   ebx
c002c16c:	e8 2f ff ff ff       	call   c002c0a0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002c171:	e8 b6 93 ff ff       	call   c002552c <KeRestorePreemption()>
c002c176:	31 c0                	xor    eax,eax
c002c178:	83 c4 18             	add    esp,0x18
c002c17b:	5b                   	pop    ebx
c002c17c:	c3                   	ret    
c002c17d:	90                   	nop

c002c17e <ATA::close(int, int, void*)>:
c002c17e:	83 ec 0c             	sub    esp,0xc
c002c181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c185:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c18b:	85 c0                	test   eax,eax
c002c18d:	74 0c                	je     c002c19b <ATA::close(int, int, void*)+0x1d>
c002c18f:	83 ec 0c             	sub    esp,0xc
c002c192:	8b 10                	mov    edx,DWORD PTR [eax]
c002c194:	50                   	push   eax
c002c195:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002c198:	83 c4 10             	add    esp,0x10
c002c19b:	31 c0                	xor    eax,eax
c002c19d:	83 c4 0c             	add    esp,0xc
c002c1a0:	c3                   	ret    
c002c1a1:	90                   	nop

c002c1a2 <ATA::powerSaving(PowerSavingLevel)>:
c002c1a2:	c3                   	ret    
c002c1a3:	90                   	nop

c002c1a4 <ATA::ATA()>:
c002c1a4:	83 ec 0c             	sub    esp,0xc
c002c1a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c1ab:	83 ec 04             	sub    esp,0x4
c002c1ae:	68 00 02 00 00       	push   0x200
c002c1b3:	68 45 41 03 c0       	push   0xc0034145
c002c1b8:	50                   	push   eax
c002c1b9:	e8 38 f8 fe ff       	call   c001b9f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002c1be:	83 c4 10             	add    esp,0x10
c002c1c1:	ba ac 40 03 c0       	mov    edx,0xc00340ac
c002c1c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c1ca:	89 10                	mov    DWORD PTR [eax],edx
c002c1cc:	90                   	nop
c002c1cd:	83 c4 0c             	add    esp,0xc
c002c1d0:	c3                   	ret    
c002c1d1:	90                   	nop

c002c1d2 <ATA::flush(bool)>:
c002c1d2:	53                   	push   ebx
c002c1d3:	83 ec 08             	sub    esp,0x8
c002c1d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c1da:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002c1df:	83 f8 01             	cmp    eax,0x1
c002c1e2:	19 c0                	sbb    eax,eax
c002c1e4:	83 e0 fd             	and    eax,0xfffffffd
c002c1e7:	05 ea 00 00 00       	add    eax,0xea
c002c1ec:	50                   	push   eax
c002c1ed:	6a 07                	push   0x7
c002c1ef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c1f6:	50                   	push   eax
c002c1f7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c1fd:	e8 02 f1 ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c202:	83 c4 0c             	add    esp,0xc
c002c205:	6a 00                	push   0x0
c002c207:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c20e:	50                   	push   eax
c002c20f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c215:	e8 d2 fb ff ff       	call   c002bdec <IDE::polling(unsigned char, unsigned int)>
c002c21a:	83 c4 18             	add    esp,0x18
c002c21d:	5b                   	pop    ebx
c002c21e:	c3                   	ret    
c002c21f:	90                   	nop

c002c220 <ATA::readyForCommand()>:
c002c220:	56                   	push   esi
c002c221:	53                   	push   ebx
c002c222:	53                   	push   ebx
c002c223:	31 db                	xor    ebx,ebx
c002c225:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002c229:	51                   	push   ecx
c002c22a:	6a 0c                	push   0xc
c002c22c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002c233:	50                   	push   eax
c002c234:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002c23a:	e8 85 f1 ff ff       	call   c002b3c4 <IDE::read(unsigned char, unsigned char)>
c002c23f:	83 c4 10             	add    esp,0x10
c002c242:	a8 88                	test   al,0x88
c002c244:	74 1f                	je     c002c265 <ATA::readyForCommand()+0x45>
c002c246:	43                   	inc    ebx
c002c247:	83 fb 63             	cmp    ebx,0x63
c002c24a:	7e dd                	jle    c002c229 <ATA::readyForCommand()+0x9>
c002c24c:	83 ec 0c             	sub    esp,0xc
c002c24f:	6a 0a                	push   0xa
c002c251:	e8 1e 97 ff ff       	call   c0025974 <milliTenthSleep(unsigned int)>
c002c256:	83 c4 10             	add    esp,0x10
c002c259:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002c25f:	75 c8                	jne    c002c229 <ATA::readyForCommand()+0x9>
c002c261:	31 c0                	xor    eax,eax
c002c263:	eb 02                	jmp    c002c267 <ATA::readyForCommand()+0x47>
c002c265:	b0 01                	mov    al,0x1
c002c267:	5a                   	pop    edx
c002c268:	5b                   	pop    ebx
c002c269:	5e                   	pop    esi
c002c26a:	c3                   	ret    
c002c26b:	90                   	nop

c002c26c <ATA::access(unsigned long long, int, void*, bool)>:
c002c26c:	55                   	push   ebp
c002c26d:	57                   	push   edi
c002c26e:	56                   	push   esi
c002c26f:	53                   	push   ebx
c002c270:	83 ec 2c             	sub    esp,0x2c
c002c273:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002c277:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002c27b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002c27f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002c283:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002c287:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002c28b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002c28f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002c295:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002c299:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002c29f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002c2a3:	c1 e0 06             	shl    eax,0x6
c002c2a6:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002c2ae:	74 5d                	je     c002c30d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002c2b0:	89 fa                	mov    edx,edi
c002c2b2:	89 f0                	mov    eax,esi
c002c2b4:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002c2b8:	c1 ea 1c             	shr    edx,0x1c
c002c2bb:	89 d1                	mov    ecx,edx
c002c2bd:	09 c1                	or     ecx,eax
c002c2bf:	74 25                	je     c002c2e6 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002c2c1:	31 ed                	xor    ebp,ebp
c002c2c3:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002c2ca:	89 fa                	mov    edx,edi
c002c2cc:	89 f0                	mov    eax,esi
c002c2ce:	0f ad d0             	shrd   eax,edx,cl
c002c2d1:	d3 ea                	shr    edx,cl
c002c2d3:	f6 c1 20             	test   cl,0x20
c002c2d6:	74 02                	je     c002c2da <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002c2d8:	89 d0                	mov    eax,edx
c002c2da:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002c2de:	45                   	inc    ebp
c002c2df:	83 fd 06             	cmp    ebp,0x6
c002c2e2:	75 df                	jne    c002c2c3 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002c2e4:	eb 76                	jmp    c002c35c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002c2e6:	89 f0                	mov    eax,esi
c002c2e8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002c2ed:	89 fa                	mov    edx,edi
c002c2ef:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002c2f6:	0f ac d0 10          	shrd   eax,edx,0x10
c002c2fa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002c2ff:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002c303:	c1 ee 18             	shr    esi,0x18
c002c306:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002c30b:	eb 56                	jmp    c002c363 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002c30d:	6a 00                	push   0x0
c002c30f:	6a 3f                	push   0x3f
c002c311:	57                   	push   edi
c002c312:	56                   	push   esi
c002c313:	e8 c8 2a 00 00       	call   c002ede0 <__umoddi3>
c002c318:	83 c4 10             	add    esp,0x10
c002c31b:	40                   	inc    eax
c002c31c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002c320:	6a 00                	push   0x0
c002c322:	68 f0 03 00 00       	push   0x3f0
c002c327:	57                   	push   edi
c002c328:	56                   	push   esi
c002c329:	e8 b2 29 00 00       	call   c002ece0 <__udivdi3>
c002c32e:	83 c4 10             	add    esp,0x10
c002c331:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002c336:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002c33d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002c342:	6a 00                	push   0x0
c002c344:	6a 3f                	push   0x3f
c002c346:	57                   	push   edi
c002c347:	56                   	push   esi
c002c348:	e8 93 29 00 00       	call   c002ece0 <__udivdi3>
c002c34d:	83 c4 10             	add    esp,0x10
c002c350:	83 e0 0f             	and    eax,0xf
c002c353:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002c358:	89 c6                	mov    esi,eax
c002c35a:	eb 07                	jmp    c002c363 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002c35c:	31 f6                	xor    esi,esi
c002c35e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002c363:	bf 01 00 00 00       	mov    edi,0x1
c002c368:	50                   	push   eax
c002c369:	6a 00                	push   0x0
c002c36b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c372:	50                   	push   eax
c002c373:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002c377:	e8 90 f1 ff ff       	call   c002b50c <IDE::enableIRQs(unsigned char, bool)>
c002c37c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c37f:	e8 9c fe ff ff       	call   c002c220 <ATA::readyForCommand()>
c002c384:	83 c4 10             	add    esp,0x10
c002c387:	84 c0                	test   al,al
c002c389:	0f 84 69 02 00 00    	je     c002c5f8 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c002c38f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002c395:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002c39b:	c1 e0 04             	shl    eax,0x4
c002c39e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002c3a5:	09 c6                	or     esi,eax
c002c3a7:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c002c3ac:	75 05                	jne    c002c3b3 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002c3ae:	83 ce a0             	or     esi,0xffffffa0
c002c3b1:	eb 03                	jmp    c002c3b6 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002c3b3:	83 ce e0             	or     esi,0xffffffe0
c002c3b6:	89 f0                	mov    eax,esi
c002c3b8:	0f b6 f0             	movzx  esi,al
c002c3bb:	56                   	push   esi
c002c3bc:	6a 06                	push   0x6
c002c3be:	51                   	push   ecx
c002c3bf:	52                   	push   edx
c002c3c0:	e8 3f ef ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c3c5:	83 c4 10             	add    esp,0x10
c002c3c8:	6a 00                	push   0x0
c002c3ca:	6a 01                	push   0x1
c002c3cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c3d3:	50                   	push   eax
c002c3d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c3da:	e8 25 ef ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c3df:	83 c4 10             	add    esp,0x10
c002c3e2:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c002c3e7:	83 f8 02             	cmp    eax,0x2
c002c3ea:	75 6e                	jne    c002c45a <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c002c3ec:	6a 00                	push   0x0
c002c3ee:	6a 08                	push   0x8
c002c3f0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c3f7:	50                   	push   eax
c002c3f8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c3fe:	e8 01 ef ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c403:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002c408:	50                   	push   eax
c002c409:	6a 09                	push   0x9
c002c40b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c412:	50                   	push   eax
c002c413:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c419:	e8 e6 ee ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c41e:	83 c4 20             	add    esp,0x20
c002c421:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002c426:	50                   	push   eax
c002c427:	6a 0a                	push   0xa
c002c429:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c430:	50                   	push   eax
c002c431:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c437:	e8 c8 ee ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c43c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002c441:	50                   	push   eax
c002c442:	6a 0b                	push   0xb
c002c444:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c44b:	50                   	push   eax
c002c44c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c452:	e8 ad ee ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c457:	83 c4 20             	add    esp,0x20
c002c45a:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002c45f:	50                   	push   eax
c002c460:	6a 02                	push   0x2
c002c462:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c469:	50                   	push   eax
c002c46a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c470:	e8 8f ee ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c475:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002c47a:	50                   	push   eax
c002c47b:	6a 03                	push   0x3
c002c47d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c484:	50                   	push   eax
c002c485:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c48b:	e8 74 ee ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c490:	83 c4 20             	add    esp,0x20
c002c493:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002c498:	50                   	push   eax
c002c499:	6a 04                	push   0x4
c002c49b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c4a2:	50                   	push   eax
c002c4a3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c4a9:	e8 56 ee ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c4ae:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002c4b3:	50                   	push   eax
c002c4b4:	6a 05                	push   0x5
c002c4b6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c4bd:	50                   	push   eax
c002c4be:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c4c4:	e8 3b ee ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c4c9:	83 c4 20             	add    esp,0x20
c002c4cc:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002c4d1:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c002c4d6:	74 11                	je     c002c4e9 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c002c4d8:	b8 30 00 00 00       	mov    eax,0x30
c002c4dd:	83 fa 02             	cmp    edx,0x2
c002c4e0:	75 16                	jne    c002c4f8 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002c4e2:	b8 34 00 00 00       	mov    eax,0x34
c002c4e7:	eb 0f                	jmp    c002c4f8 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002c4e9:	b8 20 00 00 00       	mov    eax,0x20
c002c4ee:	83 fa 02             	cmp    edx,0x2
c002c4f1:	75 05                	jne    c002c4f8 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002c4f3:	b8 24 00 00 00       	mov    eax,0x24
c002c4f8:	50                   	push   eax
c002c4f9:	6a 07                	push   0x7
c002c4fb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c502:	50                   	push   eax
c002c503:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c509:	e8 f6 ed ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c50e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002c512:	83 c4 10             	add    esp,0x10
c002c515:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c002c51a:	85 f6                	test   esi,esi
c002c51c:	0f 84 b3 00 00 00    	je     c002c5d5 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c002c522:	50                   	push   eax
c002c523:	6a 01                	push   0x1
c002c525:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c52c:	50                   	push   eax
c002c52d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c533:	e8 b4 f8 ff ff       	call   c002bdec <IDE::polling(unsigned char, unsigned int)>
c002c538:	83 c4 10             	add    esp,0x10
c002c53b:	0f b6 f8             	movzx  edi,al
c002c53e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002c544:	85 ff                	test   edi,edi
c002c546:	74 1d                	je     c002c565 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c002c548:	57                   	push   edi
c002c549:	0f b6 d2             	movzx  edx,dl
c002c54c:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002c553:	50                   	push   eax
c002c554:	52                   	push   edx
c002c555:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c55b:	e8 d2 f7 ff ff       	call   c002bd32 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002c560:	e9 90 00 00 00       	jmp    c002c5f5 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c002c565:	85 ed                	test   ebp,ebp
c002c567:	74 3b                	je     c002c5a4 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c002c569:	31 c9                	xor    ecx,ecx
c002c56b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002c56f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002c573:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c002c577:	50                   	push   eax
c002c578:	50                   	push   eax
c002c579:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c580:	50                   	push   eax
c002c581:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c587:	e8 66 ed ff ff       	call   c002b2f2 <IDE::getBase(unsigned char)>
c002c58c:	89 c2                	mov    edx,eax
c002c58e:	89 f8                	mov    eax,edi
c002c590:	66 ef                	out    dx,ax
c002c592:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002c596:	83 c4 10             	add    esp,0x10
c002c599:	41                   	inc    ecx
c002c59a:	81 f9 00 01 00 00    	cmp    ecx,0x100
c002c5a0:	75 c9                	jne    c002c56b <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c002c5a2:	eb 23                	jmp    c002c5c7 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c002c5a4:	0f b6 d2             	movzx  edx,dl
c002c5a7:	51                   	push   ecx
c002c5a8:	51                   	push   ecx
c002c5a9:	52                   	push   edx
c002c5aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c5b0:	e8 3d ed ff ff       	call   c002b2f2 <IDE::getBase(unsigned char)>
c002c5b5:	b9 00 01 00 00       	mov    ecx,0x100
c002c5ba:	89 c2                	mov    edx,eax
c002c5bc:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002c5c0:	fc                   	cld    
c002c5c1:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002c5c4:	83 c4 10             	add    esp,0x10
c002c5c7:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002c5cf:	4e                   	dec    esi
c002c5d0:	e9 45 ff ff ff       	jmp    c002c51a <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c002c5d5:	31 ff                	xor    edi,edi
c002c5d7:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002c5dc:	74 1a                	je     c002c5f8 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c002c5de:	50                   	push   eax
c002c5df:	50                   	push   eax
c002c5e0:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c002c5e5:	83 f8 02             	cmp    eax,0x2
c002c5e8:	0f 94 c0             	sete   al
c002c5eb:	0f b6 c0             	movzx  eax,al
c002c5ee:	50                   	push   eax
c002c5ef:	53                   	push   ebx
c002c5f0:	e8 dd fb ff ff       	call   c002c1d2 <ATA::flush(bool)>
c002c5f5:	83 c4 10             	add    esp,0x10
c002c5f8:	83 c4 2c             	add    esp,0x2c
c002c5fb:	89 f8                	mov    eax,edi
c002c5fd:	5b                   	pop    ebx
c002c5fe:	5e                   	pop    esi
c002c5ff:	5f                   	pop    edi
c002c600:	5d                   	pop    ebp
c002c601:	c3                   	ret    

c002c602 <ATA::detectCHS()>:
c002c602:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002c606:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002c60c:	c1 e0 06             	shl    eax,0x6
c002c60f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002c615:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002c61f:	c7 44 24 04 90 40 03 c0 	mov    DWORD PTR [esp+0x4],0xc0034090
c002c627:	e9 62 41 ff ff       	jmp    c002078e <KePanic(char const*)>

c002c62c <ATA::open(int, int, void*)>:
c002c62c:	53                   	push   ebx
c002c62d:	83 ec 08             	sub    esp,0x8
c002c630:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c634:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002c638:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002c63c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002c642:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002c648:	c1 e0 06             	shl    eax,0x6
c002c64b:	01 d0                	add    eax,edx
c002c64d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002c654:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002c65a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002c661:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002c66b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002c671:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002c678:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002c67f:	75 0c                	jne    c002c68d <ATA::open(int, int, void*)+0x61>
c002c681:	83 ec 0c             	sub    esp,0xc
c002c684:	53                   	push   ebx
c002c685:	e8 78 ff ff ff       	call   c002c602 <ATA::detectCHS()>
c002c68a:	83 c4 10             	add    esp,0x10
c002c68d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002c693:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002c699:	c1 e0 06             	shl    eax,0x6
c002c69c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002c6a3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002c6ad:	d1 e8                	shr    eax,1
c002c6af:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002c6b5:	6a 04                	push   0x4
c002c6b7:	6a 0c                	push   0xc
c002c6b9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c6c0:	50                   	push   eax
c002c6c1:	52                   	push   edx
c002c6c2:	e8 3d ec ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c6c7:	90                   	nop
c002c6c8:	90                   	nop
c002c6c9:	6a 00                	push   0x0
c002c6cb:	6a 0c                	push   0xc
c002c6cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c6d4:	50                   	push   eax
c002c6d5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c6db:	e8 24 ec ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c6e0:	83 c4 14             	add    esp,0x14
c002c6e3:	53                   	push   ebx
c002c6e4:	e8 75 f3 fe ff       	call   c001ba5e <PhysicalDisk::startCache()>
c002c6e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c6ec:	e8 a9 05 ff ff       	call   c001cc9a <createPartitionsForDisk(PhysicalDisk*)>
c002c6f1:	31 c0                	xor    eax,eax
c002c6f3:	83 c4 18             	add    esp,0x18
c002c6f6:	5b                   	pop    ebx
c002c6f7:	c3                   	ret    

c002c6f8 <combineCharAndColour(char, unsigned char)>:
c002c6f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c6fd:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c002c703:	c1 e0 08             	shl    eax,0x8
c002c706:	09 d0                	or     eax,edx
c002c708:	c3                   	ret    

c002c709 <combineColours(unsigned char, unsigned char)>:
c002c709:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c70e:	c1 e0 04             	shl    eax,0x4
c002c711:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c002c715:	c3                   	ret    

c002c716 <ATA::read(unsigned long long, int, void*)>:
c002c716:	55                   	push   ebp
c002c717:	57                   	push   edi
c002c718:	56                   	push   esi
c002c719:	be 04 00 00 00       	mov    esi,0x4
c002c71e:	53                   	push   ebx
c002c71f:	83 ec 0c             	sub    esp,0xc
c002c722:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c726:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c72a:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c72d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c731:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c735:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c73b:	0f 87 a1 01 00 00    	ja     c002c8e2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c741:	be 06 00 00 00       	mov    esi,0x6
c002c746:	85 c9                	test   ecx,ecx
c002c748:	0f 84 94 01 00 00    	je     c002c8e2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c74e:	55                   	push   ebp
c002c74f:	55                   	push   ebp
c002c750:	6a 00                	push   0x0
c002c752:	51                   	push   ecx
c002c753:	53                   	push   ebx
c002c754:	52                   	push   edx
c002c755:	50                   	push   eax
c002c756:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c75a:	e8 0d fb ff ff       	call   c002c26c <ATA::access(unsigned long long, int, void*, bool)>
c002c75f:	83 c4 20             	add    esp,0x20
c002c762:	89 c6                	mov    esi,eax
c002c764:	85 c0                	test   eax,eax
c002c766:	0f 85 71 01 00 00    	jne    c002c8dd <ATA::read(unsigned long long, int, void*)+0x1c7>
c002c76c:	03 1d b4 1b 04 c0    	add    ebx,DWORD PTR ds:0xc0041bb4
c002c772:	89 da                	mov    edx,ebx
c002c774:	50                   	push   eax
c002c775:	bd 10 27 00 00       	mov    ebp,0x2710
c002c77a:	50                   	push   eax
c002c77b:	89 1d b4 1b 04 c0    	mov    DWORD PTR ds:0xc0041bb4,ebx
c002c781:	6a 0f                	push   0xf
c002c783:	6a 00                	push   0x0
c002c785:	e8 7f ff ff ff       	call   c002c709 <combineColours(unsigned char, unsigned char)>
c002c78a:	59                   	pop    ecx
c002c78b:	b9 0a 00 00 00       	mov    ecx,0xa
c002c790:	5b                   	pop    ebx
c002c791:	0f b6 d8             	movzx  ebx,al
c002c794:	89 d0                	mov    eax,edx
c002c796:	53                   	push   ebx
c002c797:	99                   	cdq    
c002c798:	f7 fd                	idiv   ebp
c002c79a:	99                   	cdq    
c002c79b:	f7 f9                	idiv   ecx
c002c79d:	83 c2 30             	add    edx,0x30
c002c7a0:	0f b6 d2             	movzx  edx,dl
c002c7a3:	52                   	push   edx
c002c7a4:	e8 4f ff ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002c7a9:	5f                   	pop    edi
c002c7aa:	bf e8 03 00 00       	mov    edi,0x3e8
c002c7af:	5a                   	pop    edx
c002c7b0:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c7b6:	53                   	push   ebx
c002c7b7:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002c7bc:	99                   	cdq    
c002c7bd:	f7 ff                	idiv   edi
c002c7bf:	99                   	cdq    
c002c7c0:	f7 f9                	idiv   ecx
c002c7c2:	8d 42 30             	lea    eax,[edx+0x30]
c002c7c5:	0f b6 c0             	movzx  eax,al
c002c7c8:	50                   	push   eax
c002c7c9:	e8 2a ff ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002c7ce:	5f                   	pop    edi
c002c7cf:	bf 64 00 00 00       	mov    edi,0x64
c002c7d4:	5a                   	pop    edx
c002c7d5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c7db:	53                   	push   ebx
c002c7dc:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002c7e1:	99                   	cdq    
c002c7e2:	f7 ff                	idiv   edi
c002c7e4:	99                   	cdq    
c002c7e5:	f7 f9                	idiv   ecx
c002c7e7:	8d 42 30             	lea    eax,[edx+0x30]
c002c7ea:	0f b6 c0             	movzx  eax,al
c002c7ed:	50                   	push   eax
c002c7ee:	e8 05 ff ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002c7f3:	5a                   	pop    edx
c002c7f4:	5a                   	pop    edx
c002c7f5:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c7fb:	53                   	push   ebx
c002c7fc:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002c801:	99                   	cdq    
c002c802:	f7 f9                	idiv   ecx
c002c804:	99                   	cdq    
c002c805:	f7 f9                	idiv   ecx
c002c807:	8d 42 30             	lea    eax,[edx+0x30]
c002c80a:	0f b6 c0             	movzx  eax,al
c002c80d:	50                   	push   eax
c002c80e:	e8 e5 fe ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002c813:	5a                   	pop    edx
c002c814:	5a                   	pop    edx
c002c815:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c81b:	53                   	push   ebx
c002c81c:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002c821:	99                   	cdq    
c002c822:	f7 f9                	idiv   ecx
c002c824:	83 c2 30             	add    edx,0x30
c002c827:	0f b6 d2             	movzx  edx,dl
c002c82a:	52                   	push   edx
c002c82b:	e8 c8 fe ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002c830:	5a                   	pop    edx
c002c831:	5a                   	pop    edx
c002c832:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c838:	53                   	push   ebx
c002c839:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002c83e:	99                   	cdq    
c002c83f:	f7 fd                	idiv   ebp
c002c841:	99                   	cdq    
c002c842:	f7 f9                	idiv   ecx
c002c844:	8d 42 30             	lea    eax,[edx+0x30]
c002c847:	0f b6 c0             	movzx  eax,al
c002c84a:	50                   	push   eax
c002c84b:	e8 a8 fe ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002c850:	5d                   	pop    ebp
c002c851:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c856:	5a                   	pop    edx
c002c857:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c85d:	53                   	push   ebx
c002c85e:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002c863:	99                   	cdq    
c002c864:	f7 fd                	idiv   ebp
c002c866:	99                   	cdq    
c002c867:	f7 f9                	idiv   ecx
c002c869:	8d 42 30             	lea    eax,[edx+0x30]
c002c86c:	0f b6 c0             	movzx  eax,al
c002c86f:	50                   	push   eax
c002c870:	e8 83 fe ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002c875:	5d                   	pop    ebp
c002c876:	5a                   	pop    edx
c002c877:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c87d:	53                   	push   ebx
c002c87e:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002c883:	99                   	cdq    
c002c884:	f7 ff                	idiv   edi
c002c886:	99                   	cdq    
c002c887:	f7 f9                	idiv   ecx
c002c889:	8d 42 30             	lea    eax,[edx+0x30]
c002c88c:	0f b6 c0             	movzx  eax,al
c002c88f:	50                   	push   eax
c002c890:	e8 63 fe ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002c895:	5f                   	pop    edi
c002c896:	5d                   	pop    ebp
c002c897:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c89d:	53                   	push   ebx
c002c89e:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002c8a3:	99                   	cdq    
c002c8a4:	f7 f9                	idiv   ecx
c002c8a6:	99                   	cdq    
c002c8a7:	f7 f9                	idiv   ecx
c002c8a9:	8d 42 30             	lea    eax,[edx+0x30]
c002c8ac:	0f b6 c0             	movzx  eax,al
c002c8af:	50                   	push   eax
c002c8b0:	e8 43 fe ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002c8b5:	5a                   	pop    edx
c002c8b6:	5f                   	pop    edi
c002c8b7:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c8bd:	53                   	push   ebx
c002c8be:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002c8c3:	99                   	cdq    
c002c8c4:	f7 f9                	idiv   ecx
c002c8c6:	83 c2 30             	add    edx,0x30
c002c8c9:	0f b6 d2             	movzx  edx,dl
c002c8cc:	52                   	push   edx
c002c8cd:	e8 26 fe ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002c8d2:	83 c4 10             	add    esp,0x10
c002c8d5:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c8db:	eb 05                	jmp    c002c8e2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c8dd:	be 01 00 00 00       	mov    esi,0x1
c002c8e2:	83 c4 0c             	add    esp,0xc
c002c8e5:	89 f0                	mov    eax,esi
c002c8e7:	5b                   	pop    ebx
c002c8e8:	5e                   	pop    esi
c002c8e9:	5f                   	pop    edi
c002c8ea:	5d                   	pop    ebp
c002c8eb:	c3                   	ret    

c002c8ec <ATA::write(unsigned long long, int, void*)>:
c002c8ec:	55                   	push   ebp
c002c8ed:	57                   	push   edi
c002c8ee:	56                   	push   esi
c002c8ef:	be 04 00 00 00       	mov    esi,0x4
c002c8f4:	53                   	push   ebx
c002c8f5:	83 ec 0c             	sub    esp,0xc
c002c8f8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c8fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c900:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c903:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c907:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c90b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c911:	0f 87 9c 01 00 00    	ja     c002cab3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c917:	be 06 00 00 00       	mov    esi,0x6
c002c91c:	85 c9                	test   ecx,ecx
c002c91e:	0f 84 8f 01 00 00    	je     c002cab3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c924:	55                   	push   ebp
c002c925:	55                   	push   ebp
c002c926:	6a 01                	push   0x1
c002c928:	51                   	push   ecx
c002c929:	53                   	push   ebx
c002c92a:	52                   	push   edx
c002c92b:	50                   	push   eax
c002c92c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c930:	e8 37 f9 ff ff       	call   c002c26c <ATA::access(unsigned long long, int, void*, bool)>
c002c935:	83 c4 20             	add    esp,0x20
c002c938:	89 c6                	mov    esi,eax
c002c93a:	85 c0                	test   eax,eax
c002c93c:	0f 85 6c 01 00 00    	jne    c002caae <ATA::write(unsigned long long, int, void*)+0x1c2>
c002c942:	01 1d b0 1b 04 c0    	add    DWORD PTR ds:0xc0041bb0,ebx
c002c948:	bd 10 27 00 00       	mov    ebp,0x2710
c002c94d:	50                   	push   eax
c002c94e:	50                   	push   eax
c002c94f:	6a 0f                	push   0xf
c002c951:	6a 00                	push   0x0
c002c953:	e8 b1 fd ff ff       	call   c002c709 <combineColours(unsigned char, unsigned char)>
c002c958:	5a                   	pop    edx
c002c959:	0f b6 d8             	movzx  ebx,al
c002c95c:	59                   	pop    ecx
c002c95d:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002c962:	53                   	push   ebx
c002c963:	b9 0a 00 00 00       	mov    ecx,0xa
c002c968:	99                   	cdq    
c002c969:	f7 fd                	idiv   ebp
c002c96b:	99                   	cdq    
c002c96c:	f7 f9                	idiv   ecx
c002c96e:	8d 42 30             	lea    eax,[edx+0x30]
c002c971:	0f b6 c0             	movzx  eax,al
c002c974:	50                   	push   eax
c002c975:	e8 7e fd ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002c97a:	5f                   	pop    edi
c002c97b:	bf e8 03 00 00       	mov    edi,0x3e8
c002c980:	5a                   	pop    edx
c002c981:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c987:	53                   	push   ebx
c002c988:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002c98d:	99                   	cdq    
c002c98e:	f7 ff                	idiv   edi
c002c990:	99                   	cdq    
c002c991:	f7 f9                	idiv   ecx
c002c993:	8d 42 30             	lea    eax,[edx+0x30]
c002c996:	0f b6 c0             	movzx  eax,al
c002c999:	50                   	push   eax
c002c99a:	e8 59 fd ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002c99f:	5f                   	pop    edi
c002c9a0:	bf 64 00 00 00       	mov    edi,0x64
c002c9a5:	5a                   	pop    edx
c002c9a6:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c9ac:	53                   	push   ebx
c002c9ad:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002c9b2:	99                   	cdq    
c002c9b3:	f7 ff                	idiv   edi
c002c9b5:	99                   	cdq    
c002c9b6:	f7 f9                	idiv   ecx
c002c9b8:	8d 42 30             	lea    eax,[edx+0x30]
c002c9bb:	0f b6 c0             	movzx  eax,al
c002c9be:	50                   	push   eax
c002c9bf:	e8 34 fd ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002c9c4:	5a                   	pop    edx
c002c9c5:	5a                   	pop    edx
c002c9c6:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c9cc:	53                   	push   ebx
c002c9cd:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002c9d2:	99                   	cdq    
c002c9d3:	f7 f9                	idiv   ecx
c002c9d5:	99                   	cdq    
c002c9d6:	f7 f9                	idiv   ecx
c002c9d8:	8d 42 30             	lea    eax,[edx+0x30]
c002c9db:	0f b6 c0             	movzx  eax,al
c002c9de:	50                   	push   eax
c002c9df:	e8 14 fd ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002c9e4:	5a                   	pop    edx
c002c9e5:	5a                   	pop    edx
c002c9e6:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c9ec:	53                   	push   ebx
c002c9ed:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002c9f2:	99                   	cdq    
c002c9f3:	f7 f9                	idiv   ecx
c002c9f5:	8d 42 30             	lea    eax,[edx+0x30]
c002c9f8:	0f b6 c0             	movzx  eax,al
c002c9fb:	50                   	push   eax
c002c9fc:	e8 f7 fc ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002ca01:	5a                   	pop    edx
c002ca02:	5a                   	pop    edx
c002ca03:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002ca09:	53                   	push   ebx
c002ca0a:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002ca0f:	99                   	cdq    
c002ca10:	f7 fd                	idiv   ebp
c002ca12:	99                   	cdq    
c002ca13:	f7 f9                	idiv   ecx
c002ca15:	8d 42 30             	lea    eax,[edx+0x30]
c002ca18:	0f b6 c0             	movzx  eax,al
c002ca1b:	50                   	push   eax
c002ca1c:	e8 d7 fc ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002ca21:	5d                   	pop    ebp
c002ca22:	bd e8 03 00 00       	mov    ebp,0x3e8
c002ca27:	5a                   	pop    edx
c002ca28:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002ca2e:	53                   	push   ebx
c002ca2f:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002ca34:	99                   	cdq    
c002ca35:	f7 fd                	idiv   ebp
c002ca37:	99                   	cdq    
c002ca38:	f7 f9                	idiv   ecx
c002ca3a:	8d 42 30             	lea    eax,[edx+0x30]
c002ca3d:	0f b6 c0             	movzx  eax,al
c002ca40:	50                   	push   eax
c002ca41:	e8 b2 fc ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002ca46:	5d                   	pop    ebp
c002ca47:	5a                   	pop    edx
c002ca48:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002ca4e:	53                   	push   ebx
c002ca4f:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002ca54:	99                   	cdq    
c002ca55:	f7 ff                	idiv   edi
c002ca57:	99                   	cdq    
c002ca58:	f7 f9                	idiv   ecx
c002ca5a:	8d 42 30             	lea    eax,[edx+0x30]
c002ca5d:	0f b6 c0             	movzx  eax,al
c002ca60:	50                   	push   eax
c002ca61:	e8 92 fc ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002ca66:	5f                   	pop    edi
c002ca67:	5d                   	pop    ebp
c002ca68:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002ca6e:	53                   	push   ebx
c002ca6f:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002ca74:	99                   	cdq    
c002ca75:	f7 f9                	idiv   ecx
c002ca77:	99                   	cdq    
c002ca78:	f7 f9                	idiv   ecx
c002ca7a:	8d 42 30             	lea    eax,[edx+0x30]
c002ca7d:	0f b6 c0             	movzx  eax,al
c002ca80:	50                   	push   eax
c002ca81:	e8 72 fc ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002ca86:	5a                   	pop    edx
c002ca87:	5f                   	pop    edi
c002ca88:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002ca8e:	53                   	push   ebx
c002ca8f:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002ca94:	99                   	cdq    
c002ca95:	f7 f9                	idiv   ecx
c002ca97:	83 c2 30             	add    edx,0x30
c002ca9a:	0f b6 d2             	movzx  edx,dl
c002ca9d:	52                   	push   edx
c002ca9e:	e8 55 fc ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002caa3:	83 c4 10             	add    esp,0x10
c002caa6:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002caac:	eb 05                	jmp    c002cab3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002caae:	be 01 00 00 00       	mov    esi,0x1
c002cab3:	83 c4 0c             	add    esp,0xc
c002cab6:	89 f0                	mov    eax,esi
c002cab8:	5b                   	pop    ebx
c002cab9:	5e                   	pop    esi
c002caba:	5f                   	pop    edi
c002cabb:	5d                   	pop    ebp
c002cabc:	c3                   	ret    
c002cabd:	90                   	nop

c002cabe <ATAPI::write(unsigned long long, int, void*)>:
c002cabe:	b8 03 00 00 00       	mov    eax,0x3
c002cac3:	c3                   	ret    

c002cac4 <ATAPI::close(int, int, void*)>:
c002cac4:	83 ec 0c             	sub    esp,0xc
c002cac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cacb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002cad1:	85 c0                	test   eax,eax
c002cad3:	74 0c                	je     c002cae1 <ATAPI::close(int, int, void*)+0x1d>
c002cad5:	83 ec 0c             	sub    esp,0xc
c002cad8:	8b 10                	mov    edx,DWORD PTR [eax]
c002cada:	50                   	push   eax
c002cadb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002cade:	83 c4 10             	add    esp,0x10
c002cae1:	31 c0                	xor    eax,eax
c002cae3:	83 c4 0c             	add    esp,0xc
c002cae6:	c3                   	ret    
c002cae7:	90                   	nop

c002cae8 <ATAPI::ATAPI()>:
c002cae8:	83 ec 0c             	sub    esp,0xc
c002caeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002caef:	83 ec 04             	sub    esp,0x4
c002caf2:	68 00 08 00 00       	push   0x800
c002caf7:	68 e5 41 03 c0       	push   0xc00341e5
c002cafc:	50                   	push   eax
c002cafd:	e8 f4 ee fe ff       	call   c001b9f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002cb02:	83 c4 10             	add    esp,0x10
c002cb05:	ba f4 40 03 c0       	mov    edx,0xc00340f4
c002cb0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cb0e:	89 10                	mov    DWORD PTR [eax],edx
c002cb10:	90                   	nop
c002cb11:	83 c4 0c             	add    esp,0xc
c002cb14:	c3                   	ret    
c002cb15:	90                   	nop

c002cb16 <ATAPI::readyForCommand()>:
c002cb16:	56                   	push   esi
c002cb17:	53                   	push   ebx
c002cb18:	53                   	push   ebx
c002cb19:	31 db                	xor    ebx,ebx
c002cb1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002cb1f:	51                   	push   ecx
c002cb20:	6a 0c                	push   0xc
c002cb22:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002cb29:	50                   	push   eax
c002cb2a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002cb30:	e8 8f e8 ff ff       	call   c002b3c4 <IDE::read(unsigned char, unsigned char)>
c002cb35:	83 c4 10             	add    esp,0x10
c002cb38:	a8 88                	test   al,0x88
c002cb3a:	74 25                	je     c002cb61 <ATAPI::readyForCommand()+0x4b>
c002cb3c:	43                   	inc    ebx
c002cb3d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002cb43:	7e da                	jle    c002cb1f <ATAPI::readyForCommand()+0x9>
c002cb45:	83 ec 0c             	sub    esp,0xc
c002cb48:	68 5e 01 00 00       	push   0x15e
c002cb4d:	e8 22 8e ff ff       	call   c0025974 <milliTenthSleep(unsigned int)>
c002cb52:	83 c4 10             	add    esp,0x10
c002cb55:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c002cb5b:	75 c2                	jne    c002cb1f <ATAPI::readyForCommand()+0x9>
c002cb5d:	31 c0                	xor    eax,eax
c002cb5f:	eb 02                	jmp    c002cb63 <ATAPI::readyForCommand()+0x4d>
c002cb61:	b0 01                	mov    al,0x1
c002cb63:	5a                   	pop    edx
c002cb64:	5b                   	pop    ebx
c002cb65:	5e                   	pop    esi
c002cb66:	c3                   	ret    
c002cb67:	90                   	nop

c002cb68 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002cb68:	55                   	push   ebp
c002cb69:	57                   	push   edi
c002cb6a:	56                   	push   esi
c002cb6b:	53                   	push   ebx
c002cb6c:	83 ec 20             	sub    esp,0x20
c002cb6f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002cb73:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002cb77:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002cb7b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002cb7f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002cb83:	6a 01                	push   0x1
c002cb85:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cb8c:	50                   	push   eax
c002cb8d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cb93:	e8 74 e9 ff ff       	call   c002b50c <IDE::enableIRQs(unsigned char, bool)>
c002cb98:	5e                   	pop    esi
c002cb99:	58                   	pop    eax
c002cb9a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cba1:	50                   	push   eax
c002cba2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cba8:	e8 31 e7 ff ff       	call   c002b2de <IDE::prepareInterrupt(unsigned char)>
c002cbad:	89 3c 24             	mov    DWORD PTR [esp],edi
c002cbb0:	e8 61 ff ff ff       	call   c002cb16 <ATAPI::readyForCommand()>
c002cbb5:	83 c4 10             	add    esp,0x10
c002cbb8:	84 c0                	test   al,al
c002cbba:	75 0a                	jne    c002cbc6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002cbbc:	bb 01 00 00 00       	mov    ebx,0x1
c002cbc1:	e9 60 02 00 00       	jmp    c002ce26 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002cbc6:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c002cbcc:	c1 e0 04             	shl    eax,0x4
c002cbcf:	0f b6 c0             	movzx  eax,al
c002cbd2:	50                   	push   eax
c002cbd3:	6a 06                	push   0x6
c002cbd5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cbdc:	50                   	push   eax
c002cbdd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cbe3:	e8 1c e7 ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cbe8:	6a 00                	push   0x0
c002cbea:	6a 01                	push   0x1
c002cbec:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cbf3:	50                   	push   eax
c002cbf4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cbfa:	e8 05 e7 ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cbff:	83 c4 20             	add    esp,0x20
c002cc02:	0f b6 c3             	movzx  eax,bl
c002cc05:	0f b6 df             	movzx  ebx,bh
c002cc08:	50                   	push   eax
c002cc09:	6a 04                	push   0x4
c002cc0b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cc12:	50                   	push   eax
c002cc13:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cc19:	e8 e6 e6 ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cc1e:	53                   	push   ebx
c002cc1f:	6a 05                	push   0x5
c002cc21:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cc28:	50                   	push   eax
c002cc29:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cc2f:	e8 d0 e6 ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cc34:	83 c4 20             	add    esp,0x20
c002cc37:	68 a0 00 00 00       	push   0xa0
c002cc3c:	6a 07                	push   0x7
c002cc3e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cc45:	50                   	push   eax
c002cc46:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cc4c:	e8 b3 e6 ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cc51:	83 c4 0c             	add    esp,0xc
c002cc54:	6a 01                	push   0x1
c002cc56:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cc5d:	50                   	push   eax
c002cc5e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cc64:	e8 83 f1 ff ff       	call   c002bdec <IDE::polling(unsigned char, unsigned int)>
c002cc69:	83 c4 10             	add    esp,0x10
c002cc6c:	0f b6 d8             	movzx  ebx,al
c002cc6f:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c002cc75:	85 db                	test   ebx,ebx
c002cc77:	74 20                	je     c002cc99 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002cc79:	53                   	push   ebx
c002cc7a:	0f b6 c0             	movzx  eax,al
c002cc7d:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c002cc84:	52                   	push   edx
c002cc85:	50                   	push   eax
c002cc86:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cc8c:	e8 a1 f0 ff ff       	call   c002bd32 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002cc91:	83 c4 10             	add    esp,0x10
c002cc94:	e9 8d 01 00 00       	jmp    c002ce26 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002cc99:	0f b6 c0             	movzx  eax,al
c002cc9c:	53                   	push   ebx
c002cc9d:	53                   	push   ebx
c002cc9e:	50                   	push   eax
c002cc9f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cca5:	e8 48 e6 ff ff       	call   c002b2f2 <IDE::getBase(unsigned char)>
c002ccaa:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002ccae:	b9 06 00 00 00       	mov    ecx,0x6
c002ccb3:	89 c2                	mov    edx,eax
c002ccb5:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002ccb8:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002ccbc:	83 c4 10             	add    esp,0x10
c002ccbf:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c002ccc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002ccc8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002ccce:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002ccd5:	85 db                	test   ebx,ebx
c002ccd7:	0f 84 ec 00 00 00    	je     c002cdc9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c002ccdd:	51                   	push   ecx
c002ccde:	51                   	push   ecx
c002ccdf:	52                   	push   edx
c002cce0:	50                   	push   eax
c002cce1:	e8 8c e7 ff ff       	call   c002b472 <IDE::waitInterrupt(unsigned char)>
c002cce6:	83 c4 10             	add    esp,0x10
c002cce9:	84 c0                	test   al,al
c002cceb:	0f 84 cb fe ff ff    	je     c002cbbc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002ccf1:	56                   	push   esi
c002ccf2:	56                   	push   esi
c002ccf3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002ccfa:	50                   	push   eax
c002ccfb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cd01:	e8 d8 e5 ff ff       	call   c002b2de <IDE::prepareInterrupt(unsigned char)>
c002cd06:	83 c4 0c             	add    esp,0xc
c002cd09:	6a 04                	push   0x4
c002cd0b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cd12:	50                   	push   eax
c002cd13:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cd19:	e8 a6 e6 ff ff       	call   c002b3c4 <IDE::read(unsigned char, unsigned char)>
c002cd1e:	83 c4 0c             	add    esp,0xc
c002cd21:	89 c6                	mov    esi,eax
c002cd23:	6a 05                	push   0x5
c002cd25:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cd2c:	50                   	push   eax
c002cd2d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cd33:	e8 8c e6 ff ff       	call   c002b3c4 <IDE::read(unsigned char, unsigned char)>
c002cd38:	89 f1                	mov    ecx,esi
c002cd3a:	0f b6 c0             	movzx  eax,al
c002cd3d:	0f b6 f1             	movzx  esi,cl
c002cd40:	c1 e0 08             	shl    eax,0x8
c002cd43:	09 c6                	or     esi,eax
c002cd45:	d1 fe                	sar    esi,1
c002cd47:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002cd4b:	83 c4 10             	add    esp,0x10
c002cd4e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002cd53:	74 41                	je     c002cd96 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c002cd55:	31 c9                	xor    ecx,ecx
c002cd57:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002cd5d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002cd64:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002cd68:	75 0a                	jne    c002cd74 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c002cd6a:	01 c9                	add    ecx,ecx
c002cd6c:	01 cd                	add    ebp,ecx
c002cd6e:	4b                   	dec    ebx
c002cd6f:	e9 54 ff ff ff       	jmp    c002ccc8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c002cd74:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002cd79:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002cd7d:	51                   	push   ecx
c002cd7e:	51                   	push   ecx
c002cd7f:	52                   	push   edx
c002cd80:	50                   	push   eax
c002cd81:	e8 6c e5 ff ff       	call   c002b2f2 <IDE::getBase(unsigned char)>
c002cd86:	89 c2                	mov    edx,eax
c002cd88:	89 f0                	mov    eax,esi
c002cd8a:	66 ef                	out    dx,ax
c002cd8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002cd90:	83 c4 10             	add    esp,0x10
c002cd93:	41                   	inc    ecx
c002cd94:	eb c1                	jmp    c002cd57 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c002cd96:	31 f6                	xor    esi,esi
c002cd98:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002cd9e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002cda5:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002cda9:	75 06                	jne    c002cdb1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c002cdab:	01 f6                	add    esi,esi
c002cdad:	01 f5                	add    ebp,esi
c002cdaf:	eb bd                	jmp    c002cd6e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c002cdb1:	51                   	push   ecx
c002cdb2:	51                   	push   ecx
c002cdb3:	52                   	push   edx
c002cdb4:	50                   	push   eax
c002cdb5:	e8 38 e5 ff ff       	call   c002b2f2 <IDE::getBase(unsigned char)>
c002cdba:	89 c2                	mov    edx,eax
c002cdbc:	66 ed                	in     ax,dx
c002cdbe:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002cdc3:	83 c4 10             	add    esp,0x10
c002cdc6:	46                   	inc    esi
c002cdc7:	eb cf                	jmp    c002cd98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c002cdc9:	51                   	push   ecx
c002cdca:	51                   	push   ecx
c002cdcb:	52                   	push   edx
c002cdcc:	50                   	push   eax
c002cdcd:	e8 a0 e6 ff ff       	call   c002b472 <IDE::waitInterrupt(unsigned char)>
c002cdd2:	83 c4 10             	add    esp,0x10
c002cdd5:	84 c0                	test   al,al
c002cdd7:	0f 84 df fd ff ff    	je     c002cbbc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002cddd:	bb a0 86 01 00       	mov    ebx,0x186a0
c002cde2:	52                   	push   edx
c002cde3:	52                   	push   edx
c002cde4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cdeb:	50                   	push   eax
c002cdec:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cdf2:	e8 e7 e4 ff ff       	call   c002b2de <IDE::prepareInterrupt(unsigned char)>
c002cdf7:	83 c4 10             	add    esp,0x10
c002cdfa:	50                   	push   eax
c002cdfb:	50                   	push   eax
c002cdfc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002ce03:	50                   	push   eax
c002ce04:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002ce0a:	e8 e3 e4 ff ff       	call   c002b2f2 <IDE::getBase(unsigned char)>
c002ce0f:	8d 50 07             	lea    edx,[eax+0x7]
c002ce12:	ec                   	in     al,dx
c002ce13:	83 c4 10             	add    esp,0x10
c002ce16:	a8 88                	test   al,0x88
c002ce18:	74 0a                	je     c002ce24 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c002ce1a:	4b                   	dec    ebx
c002ce1b:	75 dd                	jne    c002cdfa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c002ce1d:	bb 02 00 00 00       	mov    ebx,0x2
c002ce22:	eb 02                	jmp    c002ce26 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002ce24:	31 db                	xor    ebx,ebx
c002ce26:	83 c4 1c             	add    esp,0x1c
c002ce29:	89 d8                	mov    eax,ebx
c002ce2b:	5b                   	pop    ebx
c002ce2c:	5e                   	pop    esi
c002ce2d:	5f                   	pop    edi
c002ce2e:	5d                   	pop    ebp
c002ce2f:	c3                   	ret    

c002ce30 <ATAPI::diskRemoved()>:
c002ce30:	53                   	push   ebx
c002ce31:	83 ec 14             	sub    esp,0x14
c002ce34:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002ce38:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002ce3f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c002ce45:	e8 40 fb fe ff       	call   c001c98a <LogicalDisk::unmount()>
c002ce4a:	58                   	pop    eax
c002ce4b:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002ce51:	e8 12 05 ff ff       	call   c001d368 <VCache::writeWriteBuffer()>
c002ce56:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002ce5c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002ce60:	83 c4 18             	add    esp,0x18
c002ce63:	5b                   	pop    ebx
c002ce64:	e9 ef 04 ff ff       	jmp    c001d358 <VCache::invalidateReadBuffer()>
c002ce69:	90                   	nop

c002ce6a <ATAPI::eject()>:
c002ce6a:	57                   	push   edi
c002ce6b:	b9 03 00 00 00       	mov    ecx,0x3
c002ce70:	53                   	push   ebx
c002ce71:	83 ec 14             	sub    esp,0x14
c002ce74:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002ce78:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002ce7c:	fc                   	cld    
c002ce7d:	31 c0                	xor    eax,eax
c002ce7f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002ce81:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002ce86:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002ce8b:	50                   	push   eax
c002ce8c:	50                   	push   eax
c002ce8d:	6a 00                	push   0x0
c002ce8f:	6a 00                	push   0x0
c002ce91:	6a 00                	push   0x0
c002ce93:	6a 02                	push   0x2
c002ce95:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002ce99:	50                   	push   eax
c002ce9a:	53                   	push   ebx
c002ce9b:	e8 c8 fc ff ff       	call   c002cb68 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002cea0:	83 c4 14             	add    esp,0x14
c002cea3:	53                   	push   ebx
c002cea4:	e8 87 ff ff ff       	call   c002ce30 <ATAPI::diskRemoved()>
c002cea9:	83 c4 24             	add    esp,0x24
c002ceac:	31 c0                	xor    eax,eax
c002ceae:	5b                   	pop    ebx
c002ceaf:	5f                   	pop    edi
c002ceb0:	c3                   	ret    
c002ceb1:	90                   	nop

c002ceb2 <ATAPI::diskInserted()>:
c002ceb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ceb6:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c002cebd:	c3                   	ret    

c002cebe <ATAPI::detectMedia()>:
c002cebe:	56                   	push   esi
c002cebf:	53                   	push   ebx
c002cec0:	83 ec 28             	sub    esp,0x28
c002cec3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002cec7:	6a 0c                	push   0xc
c002cec9:	6a 00                	push   0x0
c002cecb:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002cecf:	56                   	push   esi
c002ced0:	e8 1b 36 fd ff       	call   c00004f0 <memset>
c002ced5:	58                   	pop    eax
c002ced6:	5a                   	pop    edx
c002ced7:	6a 00                	push   0x0
c002ced9:	6a 00                	push   0x0
c002cedb:	6a 00                	push   0x0
c002cedd:	6a 00                	push   0x0
c002cedf:	56                   	push   esi
c002cee0:	53                   	push   ebx
c002cee1:	e8 82 fc ff ff       	call   c002cb68 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002cee6:	83 c4 1c             	add    esp,0x1c
c002cee9:	6a 0c                	push   0xc
c002ceeb:	6a 00                	push   0x0
c002ceed:	56                   	push   esi
c002ceee:	e8 fd 35 fd ff       	call   c00004f0 <memset>
c002cef3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002cef8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002cefd:	59                   	pop    ecx
c002cefe:	58                   	pop    eax
c002ceff:	6a 01                	push   0x1
c002cf01:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002cf05:	50                   	push   eax
c002cf06:	6a 00                	push   0x0
c002cf08:	6a 12                	push   0x12
c002cf0a:	56                   	push   esi
c002cf0b:	53                   	push   ebx
c002cf0c:	e8 57 fc ff ff       	call   c002cb68 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002cf11:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002cf15:	83 c4 20             	add    esp,0x20
c002cf18:	83 e0 7f             	and    eax,0x7f
c002cf1b:	83 f8 70             	cmp    eax,0x70
c002cf1e:	74 15                	je     c002cf35 <ATAPI::detectMedia()+0x77>
c002cf20:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cf27:	75 0c                	jne    c002cf35 <ATAPI::detectMedia()+0x77>
c002cf29:	83 ec 0c             	sub    esp,0xc
c002cf2c:	53                   	push   ebx
c002cf2d:	e8 80 ff ff ff       	call   c002ceb2 <ATAPI::diskInserted()>
c002cf32:	83 c4 10             	add    esp,0x10
c002cf35:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002cf39:	83 e0 0f             	and    eax,0xf
c002cf3c:	83 f8 02             	cmp    eax,0x2
c002cf3f:	75 1b                	jne    c002cf5c <ATAPI::detectMedia()+0x9e>
c002cf41:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002cf46:	75 2d                	jne    c002cf75 <ATAPI::detectMedia()+0xb7>
c002cf48:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cf4f:	74 24                	je     c002cf75 <ATAPI::detectMedia()+0xb7>
c002cf51:	83 ec 0c             	sub    esp,0xc
c002cf54:	53                   	push   ebx
c002cf55:	e8 d6 fe ff ff       	call   c002ce30 <ATAPI::diskRemoved()>
c002cf5a:	eb 16                	jmp    c002cf72 <ATAPI::detectMedia()+0xb4>
c002cf5c:	85 c0                	test   eax,eax
c002cf5e:	75 15                	jne    c002cf75 <ATAPI::detectMedia()+0xb7>
c002cf60:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cf67:	75 0c                	jne    c002cf75 <ATAPI::detectMedia()+0xb7>
c002cf69:	83 ec 0c             	sub    esp,0xc
c002cf6c:	53                   	push   ebx
c002cf6d:	e8 40 ff ff ff       	call   c002ceb2 <ATAPI::diskInserted()>
c002cf72:	83 c4 10             	add    esp,0x10
c002cf75:	83 c4 24             	add    esp,0x24
c002cf78:	5b                   	pop    ebx
c002cf79:	5e                   	pop    esi
c002cf7a:	c3                   	ret    
c002cf7b:	90                   	nop

c002cf7c <ATAPI::open(int, int, void*)>:
c002cf7c:	56                   	push   esi
c002cf7d:	53                   	push   ebx
c002cf7e:	50                   	push   eax
c002cf7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002cf83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002cf87:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002cf8b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002cf91:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002cf97:	c1 e0 06             	shl    eax,0x6
c002cf9a:	01 d0                	add    eax,edx
c002cf9c:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002cfa3:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002cfa9:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002cfb0:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002cfba:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002cfc0:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002cfc7:	6a 04                	push   0x4
c002cfc9:	6a 0c                	push   0xc
c002cfcb:	51                   	push   ecx
c002cfcc:	52                   	push   edx
c002cfcd:	e8 32 e3 ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cfd2:	90                   	nop
c002cfd3:	90                   	nop
c002cfd4:	6a 00                	push   0x0
c002cfd6:	6a 0c                	push   0xc
c002cfd8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002cfdf:	50                   	push   eax
c002cfe0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002cfe6:	e8 19 e3 ff ff       	call   c002b304 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cfeb:	83 c4 14             	add    esp,0x14
c002cfee:	68 78 01 00 00       	push   0x178
c002cff3:	e8 cf 95 fe ff       	call   c00165c7 <malloc>
c002cff8:	83 c4 0c             	add    esp,0xc
c002cffb:	89 c6                	mov    esi,eax
c002cffd:	6a 00                	push   0x0
c002cfff:	68 ff ff ff 7f       	push   0x7fffffff
c002d004:	6a 00                	push   0x0
c002d006:	6a 00                	push   0x0
c002d008:	53                   	push   ebx
c002d009:	68 97 42 03 c0       	push   0xc0034297
c002d00e:	50                   	push   eax
c002d00f:	e8 b4 f7 fe ff       	call   c001c7c8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002d014:	83 c4 14             	add    esp,0x14
c002d017:	56                   	push   esi
c002d018:	e8 6b f8 fe ff       	call   c001c888 <LogicalDisk::assignDriveLetter()>
c002d01d:	5a                   	pop    edx
c002d01e:	0f be c0             	movsx  eax,al
c002d021:	59                   	pop    ecx
c002d022:	50                   	push   eax
c002d023:	68 dc 40 03 c0       	push   0xc00340dc
c002d028:	e8 28 c4 fe ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c002d02d:	58                   	pop    eax
c002d02e:	5a                   	pop    edx
c002d02f:	56                   	push   esi
c002d030:	53                   	push   ebx
c002d031:	e8 dc e5 fe ff       	call   c001b612 <Device::addChild(Device*)>
c002d036:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002d03c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d03f:	e8 1a ea fe ff       	call   c001ba5e <PhysicalDisk::startCache()>
c002d044:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002d04b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d04e:	e8 6b fe ff ff       	call   c002cebe <ATAPI::detectMedia()>
c002d053:	83 c4 14             	add    esp,0x14
c002d056:	31 c0                	xor    eax,eax
c002d058:	5b                   	pop    ebx
c002d059:	5e                   	pop    esi
c002d05a:	c3                   	ret    
c002d05b:	90                   	nop

c002d05c <ATAPI::read(unsigned long long, int, void*)>:
c002d05c:	55                   	push   ebp
c002d05d:	57                   	push   edi
c002d05e:	56                   	push   esi
c002d05f:	53                   	push   ebx
c002d060:	83 ec 1c             	sub    esp,0x1c
c002d063:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002d067:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002d06b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002d06f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002d076:	74 3c                	je     c002d0b4 <ATAPI::read(unsigned long long, int, void*)+0x58>
c002d078:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002d07c:	b9 03 00 00 00       	mov    ecx,0x3
c002d081:	fc                   	cld    
c002d082:	31 c0                	xor    eax,eax
c002d084:	0f ce                	bswap  esi
c002d086:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d088:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002d08d:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c002d091:	89 e8                	mov    eax,ebp
c002d093:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002d097:	50                   	push   eax
c002d098:	50                   	push   eax
c002d099:	55                   	push   ebp
c002d09a:	c1 e5 0b             	shl    ebp,0xb
c002d09d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002d0a1:	6a 00                	push   0x0
c002d0a3:	55                   	push   ebp
c002d0a4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002d0a8:	50                   	push   eax
c002d0a9:	53                   	push   ebx
c002d0aa:	e8 b9 fa ff ff       	call   c002cb68 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002d0af:	83 c4 20             	add    esp,0x20
c002d0b2:	eb 1a                	jmp    c002d0ce <ATAPI::read(unsigned long long, int, void*)+0x72>
c002d0b4:	83 ec 0c             	sub    esp,0xc
c002d0b7:	53                   	push   ebx
c002d0b8:	e8 01 fe ff ff       	call   c002cebe <ATAPI::detectMedia()>
c002d0bd:	83 c4 10             	add    esp,0x10
c002d0c0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002d0c7:	75 af                	jne    c002d078 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002d0c9:	b8 02 00 00 00       	mov    eax,0x2
c002d0ce:	83 c4 1c             	add    esp,0x1c
c002d0d1:	5b                   	pop    ebx
c002d0d2:	5e                   	pop    esi
c002d0d3:	5f                   	pop    edi
c002d0d4:	5d                   	pop    ebp
c002d0d5:	c3                   	ret    

c002d0d6 <SATA::close(int, int, void*)>:
c002d0d6:	83 ec 0c             	sub    esp,0xc
c002d0d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d0dd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d0e3:	85 c0                	test   eax,eax
c002d0e5:	74 0c                	je     c002d0f3 <SATA::close(int, int, void*)+0x1d>
c002d0e7:	83 ec 0c             	sub    esp,0xc
c002d0ea:	8b 10                	mov    edx,DWORD PTR [eax]
c002d0ec:	50                   	push   eax
c002d0ed:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002d0f0:	83 c4 10             	add    esp,0x10
c002d0f3:	31 c0                	xor    eax,eax
c002d0f5:	83 c4 0c             	add    esp,0xc
c002d0f8:	c3                   	ret    
c002d0f9:	90                   	nop

c002d0fa <SATA::powerSaving(PowerSavingLevel)>:
c002d0fa:	c3                   	ret    
c002d0fb:	90                   	nop

c002d0fc <SATA::open(int, int, void*)>:
c002d0fc:	56                   	push   esi
c002d0fd:	53                   	push   ebx
c002d0fe:	83 ec 10             	sub    esp,0x10
c002d101:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002d105:	68 24 41 03 c0       	push   0xc0034124
c002d10a:	e8 46 c3 fe ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c002d10f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002d113:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002d11d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002d123:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002d12d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002d131:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002d13b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002d141:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002d148:	e8 83 97 fe ff       	call   c00168d0 <Phys::allocatePage()>
c002d14d:	89 c6                	mov    esi,eax
c002d14f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002d155:	81 c6 00 10 00 00    	add    esi,0x1000
c002d15b:	e8 70 97 fe ff       	call   c00168d0 <Phys::allocatePage()>
c002d160:	83 c4 10             	add    esp,0x10
c002d163:	39 c6                	cmp    esi,eax
c002d165:	74 10                	je     c002d177 <SATA::open(int, int, void*)+0x7b>
c002d167:	83 ec 0c             	sub    esp,0xc
c002d16a:	68 30 41 03 c0       	push   0xc0034130
c002d16f:	e8 1a 36 ff ff       	call   c002078e <KePanic(char const*)>
c002d174:	83 c4 10             	add    esp,0x10
c002d177:	83 ec 0c             	sub    esp,0xc
c002d17a:	6a 02                	push   0x2
c002d17c:	e8 9c af fe ff       	call   c001811d <Virt::allocateKernelVirtualPages(int)>
c002d181:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002d187:	6a 03                	push   0x3
c002d189:	50                   	push   eax
c002d18a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002d190:	ff 35 b0 ba 03 c0    	push   DWORD PTR ds:0xc003bab0
c002d196:	e8 95 b6 fe ff       	call   c0018830 <VAS::mapPage(unsigned long, unsigned long, int)>
c002d19b:	83 c4 14             	add    esp,0x14
c002d19e:	53                   	push   ebx
c002d19f:	e8 ba e8 fe ff       	call   c001ba5e <PhysicalDisk::startCache()>
c002d1a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d1a7:	e8 ee fa fe ff       	call   c001cc9a <createPartitionsForDisk(PhysicalDisk*)>
c002d1ac:	83 c4 14             	add    esp,0x14
c002d1af:	31 c0                	xor    eax,eax
c002d1b1:	5b                   	pop    ebx
c002d1b2:	5e                   	pop    esi
c002d1b3:	c3                   	ret    

c002d1b4 <SATA::SATA()>:
c002d1b4:	83 ec 0c             	sub    esp,0xc
c002d1b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d1bb:	83 ec 04             	sub    esp,0x4
c002d1be:	68 00 02 00 00       	push   0x200
c002d1c3:	68 44 41 03 c0       	push   0xc0034144
c002d1c8:	50                   	push   eax
c002d1c9:	e8 28 e8 fe ff       	call   c001b9f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002d1ce:	83 c4 10             	add    esp,0x10
c002d1d1:	ba b4 41 03 c0       	mov    edx,0xc00341b4
c002d1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d1da:	89 10                	mov    DWORD PTR [eax],edx
c002d1dc:	90                   	nop
c002d1dd:	83 c4 0c             	add    esp,0xc
c002d1e0:	c3                   	ret    
c002d1e1:	90                   	nop

c002d1e2 <SATA::access(unsigned long long, int, void*, bool)>:
c002d1e2:	55                   	push   ebp
c002d1e3:	57                   	push   edi
c002d1e4:	56                   	push   esi
c002d1e5:	53                   	push   ebx
c002d1e6:	83 ec 2c             	sub    esp,0x2c
c002d1e9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002d1ed:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002d1f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002d1f5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002d1f9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002d1fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002d201:	fa                   	cli    
c002d202:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c002d208:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002d20d:	7e 10                	jle    c002d21f <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c002d20f:	83 ec 0c             	sub    esp,0xc
c002d212:	68 54 41 03 c0       	push   0xc0034154
c002d217:	e8 72 35 ff ff       	call   c002078e <KePanic(char const*)>
c002d21c:	83 c4 10             	add    esp,0x10
c002d21f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002d225:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002d22b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002d231:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d235:	89 d0                	mov    eax,edx
c002d237:	c1 e0 07             	shl    eax,0x7
c002d23a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002d23e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002d248:	51                   	push   ecx
c002d249:	8d 42 02             	lea    eax,[edx+0x2]
c002d24c:	51                   	push   ecx
c002d24d:	c1 e0 07             	shl    eax,0x7
c002d250:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002d254:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d258:	50                   	push   eax
c002d259:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002d25f:	e8 68 ec ff ff       	call   c002becc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002d264:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d268:	83 c4 10             	add    esp,0x10
c002d26b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002d270:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002d274:	0f 84 aa 01 00 00    	je     c002d424 <SATA::access(unsigned long long, int, void*, bool)+0x242>
c002d27a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002d27e:	c1 e0 09             	shl    eax,0x9
c002d281:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002d286:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002d28a:	74 0e                	je     c002d29a <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c002d28c:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002d292:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002d296:	89 c1                	mov    ecx,eax
c002d298:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d29a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002d2a0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002d2a4:	8d 42 02             	lea    eax,[edx+0x2]
c002d2a7:	c1 e0 07             	shl    eax,0x7
c002d2aa:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002d2ae:	8b 00                	mov    eax,DWORD PTR [eax]
c002d2b0:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002d2b6:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002d2bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002d2c0:	c1 e1 05             	shl    ecx,0x5
c002d2c3:	01 c8                	add    eax,ecx
c002d2c5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002d2c9:	83 e1 01             	and    ecx,0x1
c002d2cc:	89 ce                	mov    esi,ecx
c002d2ce:	8a 08                	mov    cl,BYTE PTR [eax]
c002d2d0:	c1 e6 06             	shl    esi,0x6
c002d2d3:	83 e1 bf             	and    ecx,0xffffffbf
c002d2d6:	09 f1                	or     ecx,esi
c002d2d8:	88 08                	mov    BYTE PTR [eax],cl
c002d2da:	8b 08                	mov    ecx,DWORD PTR [eax]
c002d2dc:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002d2e2:	81 c9 05 00 01 00    	or     ecx,0x10005
c002d2e8:	89 08                	mov    DWORD PTR [eax],ecx
c002d2ea:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002d2f0:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002d2f6:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002d2fc:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002d2ff:	50                   	push   eax
c002d300:	68 90 00 00 00       	push   0x90
c002d305:	6a 00                	push   0x0
c002d307:	56                   	push   esi
c002d308:	e8 e3 31 fd ff       	call   c00004f0 <memset>
c002d30d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002d313:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002d319:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002d31d:	83 c4 10             	add    esp,0x10
c002d320:	48                   	dec    eax
c002d321:	25 ff ff 3f 00       	and    eax,0x3fffff
c002d326:	89 c1                	mov    ecx,eax
c002d328:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002d32e:	25 00 00 c0 ff       	and    eax,0xffc00000
c002d333:	09 c8                	or     eax,ecx
c002d335:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002d33b:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c002d341:	83 c8 80             	or     eax,0xffffff80
c002d344:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002d34a:	66 8b 06             	mov    ax,WORD PTR [esi]
c002d34d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002d351:	25 00 7f 00 00       	and    eax,0x7f00
c002d356:	0d 27 80 ff ff       	or     eax,0xffff8027
c002d35b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002d360:	66 89 06             	mov    WORD PTR [esi],ax
c002d363:	b0 35                	mov    al,0x35
c002d365:	75 02                	jne    c002d369 <SATA::access(unsigned long long, int, void*, bool)+0x187>
c002d367:	b0 25                	mov    al,0x25
c002d369:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002d36c:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c002d370:	89 e8                	mov    eax,ebp
c002d372:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002d376:	c1 e8 10             	shr    eax,0x10
c002d379:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002d37c:	89 e8                	mov    eax,ebp
c002d37e:	c1 e8 18             	shr    eax,0x18
c002d381:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002d384:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002d388:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002d38b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002d38f:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002d392:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002d396:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002d39a:	89 d6                	mov    esi,edx
c002d39c:	31 c0                	xor    eax,eax
c002d39e:	c1 e6 07             	shl    esi,0x7
c002d3a1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002d3a5:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002d3ab:	80 e1 88             	and    cl,0x88
c002d3ae:	74 0a                	je     c002d3ba <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c002d3b0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d3b5:	74 0a                	je     c002d3c1 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002d3b7:	40                   	inc    eax
c002d3b8:	eb eb                	jmp    c002d3a5 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c002d3ba:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d3bf:	75 0a                	jne    c002d3cb <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c002d3c1:	83 ec 0c             	sub    esp,0xc
c002d3c4:	68 8d 41 03 c0       	push   0xc003418d
c002d3c9:	eb 36                	jmp    c002d401 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c002d3cb:	b8 01 00 00 00       	mov    eax,0x1
c002d3d0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002d3d4:	c1 e2 07             	shl    edx,0x7
c002d3d7:	d3 e0                	shl    eax,cl
c002d3d9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c002d3dd:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002d3e3:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002d3e9:	85 c8                	test   eax,ecx
c002d3eb:	74 2b                	je     c002d418 <SATA::access(unsigned long long, int, void*, bool)+0x236>
c002d3ed:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002d3f3:	0f ba e1 1e          	bt     ecx,0x1e
c002d3f7:	73 ea                	jae    c002d3e3 <SATA::access(unsigned long long, int, void*, bool)+0x201>
c002d3f9:	83 ec 0c             	sub    esp,0xc
c002d3fc:	68 9b 41 03 c0       	push   0xc003419b
c002d401:	e8 4f c0 fe ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c002d406:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002d40b:	83 c4 10             	add    esp,0x10
c002d40e:	48                   	dec    eax
c002d40f:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002d414:	85 c0                	test   eax,eax
c002d416:	eb 17                	jmp    c002d42f <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c002d418:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002d41e:	0f ba e0 1e          	bt     eax,0x1e
c002d422:	73 15                	jae    c002d439 <SATA::access(unsigned long long, int, void*, bool)+0x257>
c002d424:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002d429:	48                   	dec    eax
c002d42a:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002d42f:	75 01                	jne    c002d432 <SATA::access(unsigned long long, int, void*, bool)+0x250>
c002d431:	fb                   	sti    
c002d432:	b8 01 00 00 00       	mov    eax,0x1
c002d437:	eb 29                	jmp    c002d462 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002d439:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002d43e:	75 10                	jne    c002d450 <SATA::access(unsigned long long, int, void*, bool)+0x26e>
c002d440:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002d446:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002d44a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002d44e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d450:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002d455:	48                   	dec    eax
c002d456:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002d45b:	75 03                	jne    c002d460 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002d45d:	fb                   	sti    
c002d45e:	eb 02                	jmp    c002d462 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002d460:	31 c0                	xor    eax,eax
c002d462:	83 c4 2c             	add    esp,0x2c
c002d465:	5b                   	pop    ebx
c002d466:	5e                   	pop    esi
c002d467:	5f                   	pop    edi
c002d468:	5d                   	pop    ebp
c002d469:	c3                   	ret    

c002d46a <SATA::read(unsigned long long, int, void*)>:
c002d46a:	55                   	push   ebp
c002d46b:	57                   	push   edi
c002d46c:	56                   	push   esi
c002d46d:	be 04 00 00 00       	mov    esi,0x4
c002d472:	53                   	push   ebx
c002d473:	83 ec 0c             	sub    esp,0xc
c002d476:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002d47a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002d47e:	8d 7b ff             	lea    edi,[ebx-0x1]
c002d481:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002d485:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002d489:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002d48f:	0f 87 1a 02 00 00    	ja     c002d6af <SATA::read(unsigned long long, int, void*)+0x245>
c002d495:	be 06 00 00 00       	mov    esi,0x6
c002d49a:	85 c9                	test   ecx,ecx
c002d49c:	0f 84 0d 02 00 00    	je     c002d6af <SATA::read(unsigned long long, int, void*)+0x245>
c002d4a2:	56                   	push   esi
c002d4a3:	56                   	push   esi
c002d4a4:	6a 00                	push   0x0
c002d4a6:	51                   	push   ecx
c002d4a7:	53                   	push   ebx
c002d4a8:	52                   	push   edx
c002d4a9:	50                   	push   eax
c002d4aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d4ae:	e8 2f fd ff ff       	call   c002d1e2 <SATA::access(unsigned long long, int, void*, bool)>
c002d4b3:	83 c4 20             	add    esp,0x20
c002d4b6:	89 c6                	mov    esi,eax
c002d4b8:	85 c0                	test   eax,eax
c002d4ba:	0f 85 ea 01 00 00    	jne    c002d6aa <SATA::read(unsigned long long, int, void*)+0x240>
c002d4c0:	01 1d b4 1b 04 c0    	add    DWORD PTR ds:0xc0041bb4,ebx
c002d4c6:	bb 0a 00 00 00       	mov    ebx,0xa
c002d4cb:	50                   	push   eax
c002d4cc:	50                   	push   eax
c002d4cd:	6a 0f                	push   0xf
c002d4cf:	6a 00                	push   0x0
c002d4d1:	e8 33 f2 ff ff       	call   c002c709 <combineColours(unsigned char, unsigned char)>
c002d4d6:	5a                   	pop    edx
c002d4d7:	0f b6 c0             	movzx  eax,al
c002d4da:	59                   	pop    ecx
c002d4db:	b9 10 27 00 00       	mov    ecx,0x2710
c002d4e0:	50                   	push   eax
c002d4e1:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d4e6:	99                   	cdq    
c002d4e7:	f7 f9                	idiv   ecx
c002d4e9:	99                   	cdq    
c002d4ea:	f7 fb                	idiv   ebx
c002d4ec:	8d 42 30             	lea    eax,[edx+0x30]
c002d4ef:	0f b6 c0             	movzx  eax,al
c002d4f2:	50                   	push   eax
c002d4f3:	e8 00 f2 ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002d4f8:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002d4fe:	5f                   	pop    edi
c002d4ff:	5d                   	pop    ebp
c002d500:	bd e8 03 00 00       	mov    ebp,0x3e8
c002d505:	6a 0f                	push   0xf
c002d507:	6a 00                	push   0x0
c002d509:	e8 fb f1 ff ff       	call   c002c709 <combineColours(unsigned char, unsigned char)>
c002d50e:	5a                   	pop    edx
c002d50f:	0f b6 c0             	movzx  eax,al
c002d512:	59                   	pop    ecx
c002d513:	50                   	push   eax
c002d514:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d519:	99                   	cdq    
c002d51a:	f7 fd                	idiv   ebp
c002d51c:	99                   	cdq    
c002d51d:	f7 fb                	idiv   ebx
c002d51f:	8d 42 30             	lea    eax,[edx+0x30]
c002d522:	0f b6 c0             	movzx  eax,al
c002d525:	50                   	push   eax
c002d526:	e8 cd f1 ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002d52b:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002d531:	5f                   	pop    edi
c002d532:	bf 64 00 00 00       	mov    edi,0x64
c002d537:	58                   	pop    eax
c002d538:	6a 0f                	push   0xf
c002d53a:	6a 00                	push   0x0
c002d53c:	e8 c8 f1 ff ff       	call   c002c709 <combineColours(unsigned char, unsigned char)>
c002d541:	5a                   	pop    edx
c002d542:	0f b6 c0             	movzx  eax,al
c002d545:	59                   	pop    ecx
c002d546:	50                   	push   eax
c002d547:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d54c:	99                   	cdq    
c002d54d:	f7 ff                	idiv   edi
c002d54f:	99                   	cdq    
c002d550:	f7 fb                	idiv   ebx
c002d552:	8d 42 30             	lea    eax,[edx+0x30]
c002d555:	0f b6 c0             	movzx  eax,al
c002d558:	50                   	push   eax
c002d559:	e8 9a f1 ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002d55e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002d564:	58                   	pop    eax
c002d565:	5a                   	pop    edx
c002d566:	6a 0f                	push   0xf
c002d568:	6a 00                	push   0x0
c002d56a:	e8 9a f1 ff ff       	call   c002c709 <combineColours(unsigned char, unsigned char)>
c002d56f:	59                   	pop    ecx
c002d570:	0f b6 c0             	movzx  eax,al
c002d573:	5a                   	pop    edx
c002d574:	50                   	push   eax
c002d575:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d57a:	99                   	cdq    
c002d57b:	f7 fb                	idiv   ebx
c002d57d:	99                   	cdq    
c002d57e:	f7 fb                	idiv   ebx
c002d580:	8d 42 30             	lea    eax,[edx+0x30]
c002d583:	0f b6 c0             	movzx  eax,al
c002d586:	50                   	push   eax
c002d587:	e8 6c f1 ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002d58c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002d592:	59                   	pop    ecx
c002d593:	58                   	pop    eax
c002d594:	6a 0f                	push   0xf
c002d596:	6a 00                	push   0x0
c002d598:	e8 6c f1 ff ff       	call   c002c709 <combineColours(unsigned char, unsigned char)>
c002d59d:	5a                   	pop    edx
c002d59e:	0f b6 c0             	movzx  eax,al
c002d5a1:	59                   	pop    ecx
c002d5a2:	50                   	push   eax
c002d5a3:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d5a8:	99                   	cdq    
c002d5a9:	f7 fb                	idiv   ebx
c002d5ab:	8d 42 30             	lea    eax,[edx+0x30]
c002d5ae:	0f b6 c0             	movzx  eax,al
c002d5b1:	50                   	push   eax
c002d5b2:	e8 41 f1 ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002d5b7:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d5bd:	58                   	pop    eax
c002d5be:	5a                   	pop    edx
c002d5bf:	6a 0f                	push   0xf
c002d5c1:	6a 00                	push   0x0
c002d5c3:	e8 41 f1 ff ff       	call   c002c709 <combineColours(unsigned char, unsigned char)>
c002d5c8:	59                   	pop    ecx
c002d5c9:	0f b6 c0             	movzx  eax,al
c002d5cc:	5a                   	pop    edx
c002d5cd:	b9 10 27 00 00       	mov    ecx,0x2710
c002d5d2:	50                   	push   eax
c002d5d3:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002d5d8:	99                   	cdq    
c002d5d9:	f7 f9                	idiv   ecx
c002d5db:	99                   	cdq    
c002d5dc:	f7 fb                	idiv   ebx
c002d5de:	8d 42 30             	lea    eax,[edx+0x30]
c002d5e1:	0f b6 c0             	movzx  eax,al
c002d5e4:	50                   	push   eax
c002d5e5:	e8 0e f1 ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002d5ea:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d5f0:	59                   	pop    ecx
c002d5f1:	58                   	pop    eax
c002d5f2:	6a 0f                	push   0xf
c002d5f4:	6a 00                	push   0x0
c002d5f6:	e8 0e f1 ff ff       	call   c002c709 <combineColours(unsigned char, unsigned char)>
c002d5fb:	5a                   	pop    edx
c002d5fc:	0f b6 c0             	movzx  eax,al
c002d5ff:	59                   	pop    ecx
c002d600:	50                   	push   eax
c002d601:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002d606:	99                   	cdq    
c002d607:	f7 fd                	idiv   ebp
c002d609:	99                   	cdq    
c002d60a:	f7 fb                	idiv   ebx
c002d60c:	8d 42 30             	lea    eax,[edx+0x30]
c002d60f:	0f b6 c0             	movzx  eax,al
c002d612:	50                   	push   eax
c002d613:	e8 e0 f0 ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002d618:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d61e:	5d                   	pop    ebp
c002d61f:	58                   	pop    eax
c002d620:	6a 0f                	push   0xf
c002d622:	6a 00                	push   0x0
c002d624:	e8 e0 f0 ff ff       	call   c002c709 <combineColours(unsigned char, unsigned char)>
c002d629:	5a                   	pop    edx
c002d62a:	0f b6 c0             	movzx  eax,al
c002d62d:	59                   	pop    ecx
c002d62e:	50                   	push   eax
c002d62f:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002d634:	99                   	cdq    
c002d635:	f7 ff                	idiv   edi
c002d637:	99                   	cdq    
c002d638:	f7 fb                	idiv   ebx
c002d63a:	8d 42 30             	lea    eax,[edx+0x30]
c002d63d:	0f b6 c0             	movzx  eax,al
c002d640:	50                   	push   eax
c002d641:	e8 b2 f0 ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002d646:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d64c:	5f                   	pop    edi
c002d64d:	5d                   	pop    ebp
c002d64e:	6a 0f                	push   0xf
c002d650:	6a 00                	push   0x0
c002d652:	e8 b2 f0 ff ff       	call   c002c709 <combineColours(unsigned char, unsigned char)>
c002d657:	5a                   	pop    edx
c002d658:	0f b6 c0             	movzx  eax,al
c002d65b:	59                   	pop    ecx
c002d65c:	50                   	push   eax
c002d65d:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002d662:	99                   	cdq    
c002d663:	f7 fb                	idiv   ebx
c002d665:	99                   	cdq    
c002d666:	f7 fb                	idiv   ebx
c002d668:	8d 42 30             	lea    eax,[edx+0x30]
c002d66b:	0f b6 c0             	movzx  eax,al
c002d66e:	50                   	push   eax
c002d66f:	e8 84 f0 ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002d674:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d67a:	5f                   	pop    edi
c002d67b:	5d                   	pop    ebp
c002d67c:	6a 0f                	push   0xf
c002d67e:	6a 00                	push   0x0
c002d680:	e8 84 f0 ff ff       	call   c002c709 <combineColours(unsigned char, unsigned char)>
c002d685:	5a                   	pop    edx
c002d686:	0f b6 c0             	movzx  eax,al
c002d689:	59                   	pop    ecx
c002d68a:	50                   	push   eax
c002d68b:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002d690:	99                   	cdq    
c002d691:	f7 fb                	idiv   ebx
c002d693:	83 c2 30             	add    edx,0x30
c002d696:	0f b6 d2             	movzx  edx,dl
c002d699:	52                   	push   edx
c002d69a:	e8 59 f0 ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002d69f:	83 c4 10             	add    esp,0x10
c002d6a2:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d6a8:	eb 05                	jmp    c002d6af <SATA::read(unsigned long long, int, void*)+0x245>
c002d6aa:	be 01 00 00 00       	mov    esi,0x1
c002d6af:	83 c4 0c             	add    esp,0xc
c002d6b2:	89 f0                	mov    eax,esi
c002d6b4:	5b                   	pop    ebx
c002d6b5:	5e                   	pop    esi
c002d6b6:	5f                   	pop    edi
c002d6b7:	5d                   	pop    ebp
c002d6b8:	c3                   	ret    
c002d6b9:	90                   	nop

c002d6ba <SATA::write(unsigned long long, int, void*)>:
c002d6ba:	55                   	push   ebp
c002d6bb:	b8 04 00 00 00       	mov    eax,0x4
c002d6c0:	57                   	push   edi
c002d6c1:	56                   	push   esi
c002d6c2:	53                   	push   ebx
c002d6c3:	83 ec 1c             	sub    esp,0x1c
c002d6c6:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002d6ca:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002d6ce:	8d 75 ff             	lea    esi,[ebp-0x1]
c002d6d1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002d6d5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c002d6d9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002d6df:	0f 87 32 02 00 00    	ja     c002d917 <SATA::write(unsigned long long, int, void*)+0x25d>
c002d6e5:	b8 06 00 00 00       	mov    eax,0x6
c002d6ea:	85 ff                	test   edi,edi
c002d6ec:	0f 84 25 02 00 00    	je     c002d917 <SATA::write(unsigned long long, int, void*)+0x25d>
c002d6f2:	89 ee                	mov    esi,ebp
c002d6f4:	c1 e6 09             	shl    esi,0x9
c002d6f7:	01 fe                	add    esi,edi
c002d6f9:	89 c8                	mov    eax,ecx
c002d6fb:	89 da                	mov    edx,ebx
c002d6fd:	83 c0 01             	add    eax,0x1
c002d700:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d704:	83 d2 00             	adc    edx,0x0
c002d707:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002d70b:	50                   	push   eax
c002d70c:	50                   	push   eax
c002d70d:	6a 01                	push   0x1
c002d70f:	57                   	push   edi
c002d710:	81 c7 00 02 00 00    	add    edi,0x200
c002d716:	6a 01                	push   0x1
c002d718:	53                   	push   ebx
c002d719:	51                   	push   ecx
c002d71a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002d71e:	e8 bf fa ff ff       	call   c002d1e2 <SATA::access(unsigned long long, int, void*, bool)>
c002d723:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002d727:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002d72b:	83 c4 20             	add    esp,0x20
c002d72e:	39 f7                	cmp    edi,esi
c002d730:	75 c7                	jne    c002d6f9 <SATA::write(unsigned long long, int, void*)+0x3f>
c002d732:	bb 0a 00 00 00       	mov    ebx,0xa
c002d737:	01 2d b0 1b 04 c0    	add    DWORD PTR ds:0xc0041bb0,ebp
c002d73d:	bd 10 27 00 00       	mov    ebp,0x2710
c002d742:	50                   	push   eax
c002d743:	50                   	push   eax
c002d744:	6a 0f                	push   0xf
c002d746:	6a 00                	push   0x0
c002d748:	e8 bc ef ff ff       	call   c002c709 <combineColours(unsigned char, unsigned char)>
c002d74d:	5a                   	pop    edx
c002d74e:	0f b6 c0             	movzx  eax,al
c002d751:	59                   	pop    ecx
c002d752:	50                   	push   eax
c002d753:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d758:	99                   	cdq    
c002d759:	f7 fd                	idiv   ebp
c002d75b:	99                   	cdq    
c002d75c:	f7 fb                	idiv   ebx
c002d75e:	8d 42 30             	lea    eax,[edx+0x30]
c002d761:	0f b6 c0             	movzx  eax,al
c002d764:	50                   	push   eax
c002d765:	e8 8e ef ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002d76a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002d770:	5e                   	pop    esi
c002d771:	5f                   	pop    edi
c002d772:	bf e8 03 00 00       	mov    edi,0x3e8
c002d777:	6a 0f                	push   0xf
c002d779:	6a 00                	push   0x0
c002d77b:	e8 89 ef ff ff       	call   c002c709 <combineColours(unsigned char, unsigned char)>
c002d780:	5a                   	pop    edx
c002d781:	0f b6 c0             	movzx  eax,al
c002d784:	59                   	pop    ecx
c002d785:	50                   	push   eax
c002d786:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d78b:	99                   	cdq    
c002d78c:	f7 ff                	idiv   edi
c002d78e:	99                   	cdq    
c002d78f:	f7 fb                	idiv   ebx
c002d791:	8d 42 30             	lea    eax,[edx+0x30]
c002d794:	0f b6 c0             	movzx  eax,al
c002d797:	50                   	push   eax
c002d798:	e8 5b ef ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002d79d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002d7a3:	5e                   	pop    esi
c002d7a4:	be 64 00 00 00       	mov    esi,0x64
c002d7a9:	58                   	pop    eax
c002d7aa:	6a 0f                	push   0xf
c002d7ac:	6a 00                	push   0x0
c002d7ae:	e8 56 ef ff ff       	call   c002c709 <combineColours(unsigned char, unsigned char)>
c002d7b3:	5a                   	pop    edx
c002d7b4:	0f b6 c0             	movzx  eax,al
c002d7b7:	59                   	pop    ecx
c002d7b8:	50                   	push   eax
c002d7b9:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d7be:	99                   	cdq    
c002d7bf:	f7 fe                	idiv   esi
c002d7c1:	99                   	cdq    
c002d7c2:	f7 fb                	idiv   ebx
c002d7c4:	8d 42 30             	lea    eax,[edx+0x30]
c002d7c7:	0f b6 c0             	movzx  eax,al
c002d7ca:	50                   	push   eax
c002d7cb:	e8 28 ef ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002d7d0:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002d7d6:	58                   	pop    eax
c002d7d7:	5a                   	pop    edx
c002d7d8:	6a 0f                	push   0xf
c002d7da:	6a 00                	push   0x0
c002d7dc:	e8 28 ef ff ff       	call   c002c709 <combineColours(unsigned char, unsigned char)>
c002d7e1:	59                   	pop    ecx
c002d7e2:	0f b6 c0             	movzx  eax,al
c002d7e5:	5a                   	pop    edx
c002d7e6:	50                   	push   eax
c002d7e7:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d7ec:	99                   	cdq    
c002d7ed:	f7 fb                	idiv   ebx
c002d7ef:	99                   	cdq    
c002d7f0:	f7 fb                	idiv   ebx
c002d7f2:	8d 42 30             	lea    eax,[edx+0x30]
c002d7f5:	0f b6 c0             	movzx  eax,al
c002d7f8:	50                   	push   eax
c002d7f9:	e8 fa ee ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002d7fe:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002d804:	59                   	pop    ecx
c002d805:	58                   	pop    eax
c002d806:	6a 0f                	push   0xf
c002d808:	6a 00                	push   0x0
c002d80a:	e8 fa ee ff ff       	call   c002c709 <combineColours(unsigned char, unsigned char)>
c002d80f:	5a                   	pop    edx
c002d810:	0f b6 c0             	movzx  eax,al
c002d813:	59                   	pop    ecx
c002d814:	50                   	push   eax
c002d815:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d81a:	99                   	cdq    
c002d81b:	f7 fb                	idiv   ebx
c002d81d:	83 c2 30             	add    edx,0x30
c002d820:	0f b6 d2             	movzx  edx,dl
c002d823:	52                   	push   edx
c002d824:	e8 cf ee ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002d829:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d82f:	58                   	pop    eax
c002d830:	5a                   	pop    edx
c002d831:	6a 0f                	push   0xf
c002d833:	6a 00                	push   0x0
c002d835:	e8 cf ee ff ff       	call   c002c709 <combineColours(unsigned char, unsigned char)>
c002d83a:	59                   	pop    ecx
c002d83b:	0f b6 c0             	movzx  eax,al
c002d83e:	5a                   	pop    edx
c002d83f:	50                   	push   eax
c002d840:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002d845:	99                   	cdq    
c002d846:	f7 fd                	idiv   ebp
c002d848:	99                   	cdq    
c002d849:	f7 fb                	idiv   ebx
c002d84b:	8d 42 30             	lea    eax,[edx+0x30]
c002d84e:	0f b6 c0             	movzx  eax,al
c002d851:	50                   	push   eax
c002d852:	e8 a1 ee ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002d857:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d85d:	59                   	pop    ecx
c002d85e:	5d                   	pop    ebp
c002d85f:	6a 0f                	push   0xf
c002d861:	6a 00                	push   0x0
c002d863:	e8 a1 ee ff ff       	call   c002c709 <combineColours(unsigned char, unsigned char)>
c002d868:	5a                   	pop    edx
c002d869:	0f b6 c0             	movzx  eax,al
c002d86c:	59                   	pop    ecx
c002d86d:	50                   	push   eax
c002d86e:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002d873:	99                   	cdq    
c002d874:	f7 ff                	idiv   edi
c002d876:	99                   	cdq    
c002d877:	f7 fb                	idiv   ebx
c002d879:	8d 42 30             	lea    eax,[edx+0x30]
c002d87c:	0f b6 c0             	movzx  eax,al
c002d87f:	50                   	push   eax
c002d880:	e8 73 ee ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002d885:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d88b:	5f                   	pop    edi
c002d88c:	5d                   	pop    ebp
c002d88d:	6a 0f                	push   0xf
c002d88f:	6a 00                	push   0x0
c002d891:	e8 73 ee ff ff       	call   c002c709 <combineColours(unsigned char, unsigned char)>
c002d896:	5a                   	pop    edx
c002d897:	0f b6 c0             	movzx  eax,al
c002d89a:	59                   	pop    ecx
c002d89b:	50                   	push   eax
c002d89c:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002d8a1:	99                   	cdq    
c002d8a2:	f7 fe                	idiv   esi
c002d8a4:	99                   	cdq    
c002d8a5:	f7 fb                	idiv   ebx
c002d8a7:	8d 42 30             	lea    eax,[edx+0x30]
c002d8aa:	0f b6 c0             	movzx  eax,al
c002d8ad:	50                   	push   eax
c002d8ae:	e8 45 ee ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002d8b3:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d8b9:	5e                   	pop    esi
c002d8ba:	5f                   	pop    edi
c002d8bb:	6a 0f                	push   0xf
c002d8bd:	6a 00                	push   0x0
c002d8bf:	e8 45 ee ff ff       	call   c002c709 <combineColours(unsigned char, unsigned char)>
c002d8c4:	5d                   	pop    ebp
c002d8c5:	0f b6 c0             	movzx  eax,al
c002d8c8:	5a                   	pop    edx
c002d8c9:	50                   	push   eax
c002d8ca:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002d8cf:	99                   	cdq    
c002d8d0:	f7 fb                	idiv   ebx
c002d8d2:	99                   	cdq    
c002d8d3:	f7 fb                	idiv   ebx
c002d8d5:	8d 42 30             	lea    eax,[edx+0x30]
c002d8d8:	0f b6 c0             	movzx  eax,al
c002d8db:	50                   	push   eax
c002d8dc:	e8 17 ee ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002d8e1:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d8e7:	59                   	pop    ecx
c002d8e8:	5e                   	pop    esi
c002d8e9:	6a 0f                	push   0xf
c002d8eb:	6a 00                	push   0x0
c002d8ed:	e8 17 ee ff ff       	call   c002c709 <combineColours(unsigned char, unsigned char)>
c002d8f2:	5f                   	pop    edi
c002d8f3:	0f b6 c0             	movzx  eax,al
c002d8f6:	5d                   	pop    ebp
c002d8f7:	50                   	push   eax
c002d8f8:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002d8fd:	99                   	cdq    
c002d8fe:	f7 fb                	idiv   ebx
c002d900:	83 c2 30             	add    edx,0x30
c002d903:	0f b6 d2             	movzx  edx,dl
c002d906:	52                   	push   edx
c002d907:	e8 ec ed ff ff       	call   c002c6f8 <combineCharAndColour(char, unsigned char)>
c002d90c:	83 c4 10             	add    esp,0x10
c002d90f:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d915:	31 c0                	xor    eax,eax
c002d917:	83 c4 1c             	add    esp,0x1c
c002d91a:	5b                   	pop    ebx
c002d91b:	5e                   	pop    esi
c002d91c:	5f                   	pop    edi
c002d91d:	5d                   	pop    ebp
c002d91e:	c3                   	ret    
c002d91f:	90                   	nop

c002d920 <SATAPI::write(unsigned long long, int, void*)>:
c002d920:	b8 03 00 00 00       	mov    eax,0x3
c002d925:	c3                   	ret    

c002d926 <SATAPI::close(int, int, void*)>:
c002d926:	83 ec 0c             	sub    esp,0xc
c002d929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d92d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d933:	85 c0                	test   eax,eax
c002d935:	74 0c                	je     c002d943 <SATAPI::close(int, int, void*)+0x1d>
c002d937:	83 ec 0c             	sub    esp,0xc
c002d93a:	8b 10                	mov    edx,DWORD PTR [eax]
c002d93c:	50                   	push   eax
c002d93d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002d940:	83 c4 10             	add    esp,0x10
c002d943:	31 c0                	xor    eax,eax
c002d945:	83 c4 0c             	add    esp,0xc
c002d948:	c3                   	ret    
c002d949:	90                   	nop

c002d94a <SATAPI::SATAPI()>:
c002d94a:	83 ec 0c             	sub    esp,0xc
c002d94d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d951:	83 ec 04             	sub    esp,0x4
c002d954:	68 00 08 00 00       	push   0x800
c002d959:	68 e4 41 03 c0       	push   0xc00341e4
c002d95e:	50                   	push   eax
c002d95f:	e8 92 e0 fe ff       	call   c001b9f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002d964:	83 c4 10             	add    esp,0x10
c002d967:	ba d8 42 03 c0       	mov    edx,0xc00342d8
c002d96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d970:	89 10                	mov    DWORD PTR [eax],edx
c002d972:	90                   	nop
c002d973:	83 c4 0c             	add    esp,0xc
c002d976:	c3                   	ret    
c002d977:	90                   	nop

c002d978 <SATAPI::diskRemoved()>:
c002d978:	c3                   	ret    
c002d979:	90                   	nop

c002d97a <SATAPI::diskInserted()>:
c002d97a:	83 ec 18             	sub    esp,0x18
c002d97d:	68 f0 41 03 c0       	push   0xc00341f0
c002d982:	e8 ce ba fe ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c002d987:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d98b:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c002d992:	83 c4 1c             	add    esp,0x1c
c002d995:	c3                   	ret    

c002d996 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002d996:	55                   	push   ebp
c002d997:	57                   	push   edi
c002d998:	56                   	push   esi
c002d999:	53                   	push   ebx
c002d99a:	83 ec 34             	sub    esp,0x34
c002d99d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002d9a1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d9a5:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c002d9a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d9ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002d9b1:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002d9b7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002d9bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002d9c1:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002d9c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002d9cb:	83 c0 02             	add    eax,0x2
c002d9ce:	c1 e0 07             	shl    eax,0x7
c002d9d1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d9d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002d9d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d9dd:	c1 e0 07             	shl    eax,0x7
c002d9e0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d9e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002d9e8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002d9f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d9f6:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d9fc:	e8 cb e4 ff ff       	call   c002becc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002da01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002da05:	83 c4 10             	add    esp,0x10
c002da08:	b8 01 00 00 00       	mov    eax,0x1
c002da0d:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002da12:	0f 84 53 02 00 00    	je     c002dc6b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c002da18:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002da1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002da22:	8b 00                	mov    eax,DWORD PTR [eax]
c002da24:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002da2a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002da30:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002da34:	c1 e1 05             	shl    ecx,0x5
c002da37:	01 c8                	add    eax,ecx
c002da39:	8b 08                	mov    ecx,DWORD PTR [eax]
c002da3b:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002da41:	81 c9 25 00 01 00    	or     ecx,0x10025
c002da47:	89 08                	mov    DWORD PTR [eax],ecx
c002da49:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002da4f:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002da55:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002da5b:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002da5e:	8d 7b 40             	lea    edi,[ebx+0x40]
c002da61:	50                   	push   eax
c002da62:	68 90 00 00 00       	push   0x90
c002da67:	6a 00                	push   0x0
c002da69:	53                   	push   ebx
c002da6a:	e8 81 2a fd ff       	call   c00004f0 <memset>
c002da6f:	b9 0c 00 00 00       	mov    ecx,0xc
c002da74:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002da78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002da7a:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002da80:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002da84:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002da8a:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002da8e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002da92:	48                   	dec    eax
c002da93:	25 ff ff 3f 00       	and    eax,0x3fffff
c002da98:	89 c1                	mov    ecx,eax
c002da9a:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002daa0:	25 00 00 c0 ff       	and    eax,0xffc00000
c002daa5:	09 c8                	or     eax,ecx
c002daa7:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002daad:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c002dab3:	83 c8 80             	or     eax,0xffffff80
c002dab6:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c002dabc:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002dabf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002dac3:	25 00 7f 00 00       	and    eax,0x7f00
c002dac8:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c002dacc:	0d 27 80 ff ff       	or     eax,0xffff8027
c002dad1:	66 89 03             	mov    WORD PTR [ebx],ax
c002dad4:	89 d0                	mov    eax,edx
c002dad6:	c1 ea 18             	shr    edx,0x18
c002dad9:	c1 e8 10             	shr    eax,0x10
c002dadc:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002dadf:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002dae2:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002dae6:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002dae9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002daed:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002daf0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002daf4:	83 c4 10             	add    esp,0x10
c002daf7:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002dafb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002daff:	31 c0                	xor    eax,eax
c002db01:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002db07:	80 e1 88             	and    cl,0x88
c002db0a:	74 0a                	je     c002db16 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c002db0c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002db11:	74 0a                	je     c002db1d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c002db13:	40                   	inc    eax
c002db14:	eb eb                	jmp    c002db01 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002db16:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002db1b:	75 43                	jne    c002db60 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c002db1d:	83 ec 0c             	sub    esp,0xc
c002db20:	68 08 42 03 c0       	push   0xc0034208
c002db25:	e8 2b b9 fe ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c002db2a:	58                   	pop    eax
c002db2b:	5a                   	pop    edx
c002db2c:	68 1d 42 03 c0       	push   0xc003421d
c002db31:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c002db37:	e8 7a 9a fe ff       	call   c00175b6 <VgaText::puts(char const*)>
c002db3c:	59                   	pop    ecx
c002db3d:	5b                   	pop    ebx
c002db3e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002db42:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002db48:	e8 19 e4 ff ff       	call   c002bf66 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002db4d:	5e                   	pop    esi
c002db4e:	5f                   	pop    edi
c002db4f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002db53:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002db59:	e8 e8 e3 ff ff       	call   c002bf46 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002db5e:	eb 48                	jmp    c002dba8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c002db60:	be 01 00 00 00       	mov    esi,0x1
c002db65:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002db69:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002db6d:	d3 e6                	shl    esi,cl
c002db6f:	c1 e7 07             	shl    edi,0x7
c002db72:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c002db78:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c002db7d:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c002db81:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c002db87:	85 c6                	test   esi,eax
c002db89:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002db8f:	0f 84 a3 00 00 00    	je     c002dc38 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c002db95:	0f ba e0 1e          	bt     eax,0x1e
c002db99:	73 1a                	jae    c002dbb5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c002db9b:	83 ec 0c             	sub    esp,0xc
c002db9e:	68 2f 42 03 c0       	push   0xc003422f
c002dba3:	e8 ad b8 fe ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c002dba8:	83 c4 10             	add    esp,0x10
c002dbab:	b8 01 00 00 00       	mov    eax,0x1
c002dbb0:	e9 b6 00 00 00       	jmp    c002dc6b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c002dbb5:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c002dbbb:	83 f8 0d             	cmp    eax,0xd
c002dbbe:	77 0a                	ja     c002dbca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c002dbc0:	83 ec 0c             	sub    esp,0xc
c002dbc3:	68 c8 00 00 00       	push   0xc8
c002dbc8:	eb 28                	jmp    c002dbf2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c002dbca:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c002dbd0:	83 f8 0d             	cmp    eax,0xd
c002dbd3:	77 0a                	ja     c002dbdf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c002dbd5:	83 ec 0c             	sub    esp,0xc
c002dbd8:	68 58 02 00 00       	push   0x258
c002dbdd:	eb 13                	jmp    c002dbf2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c002dbdf:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c002dbe5:	83 f8 06             	cmp    eax,0x6
c002dbe8:	77 10                	ja     c002dbfa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002dbea:	83 ec 0c             	sub    esp,0xc
c002dbed:	68 dc 05 00 00       	push   0x5dc
c002dbf2:	e8 7d 7d ff ff       	call   c0025974 <milliTenthSleep(unsigned int)>
c002dbf7:	83 c4 10             	add    esp,0x10
c002dbfa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002dbfe:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002dc01:	75 06                	jne    c002dc09 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c002dc03:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c002dc07:	74 15                	je     c002dc1e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c002dc09:	83 fb 06             	cmp    ebx,0x6
c002dc0c:	77 10                	ja     c002dc1e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c002dc0e:	83 ec 0c             	sub    esp,0xc
c002dc11:	68 c4 09 00 00       	push   0x9c4
c002dc16:	e8 59 7d ff ff       	call   c0025974 <milliTenthSleep(unsigned int)>
c002dc1b:	83 c4 10             	add    esp,0x10
c002dc1e:	43                   	inc    ebx
c002dc1f:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c002dc25:	0f 85 56 ff ff ff    	jne    c002db81 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c002dc2b:	83 ec 0c             	sub    esp,0xc
c002dc2e:	68 42 42 03 c0       	push   0xc0034242
c002dc33:	e9 6b ff ff ff       	jmp    c002dba3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002dc38:	0f ba e0 1e          	bt     eax,0x1e
c002dc3c:	73 0d                	jae    c002dc4b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c002dc3e:	83 ec 0c             	sub    esp,0xc
c002dc41:	68 56 42 03 c0       	push   0xc0034256
c002dc46:	e9 58 ff ff ff       	jmp    c002dba3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002dc4b:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002dc50:	74 17                	je     c002dc69 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c002dc52:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002dc57:	74 10                	je     c002dc69 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c002dc59:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002dc5f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002dc63:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002dc67:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002dc69:	31 c0                	xor    eax,eax
c002dc6b:	83 c4 2c             	add    esp,0x2c
c002dc6e:	5b                   	pop    ebx
c002dc6f:	5e                   	pop    esi
c002dc70:	5f                   	pop    edi
c002dc71:	5d                   	pop    ebp
c002dc72:	c3                   	ret    
c002dc73:	90                   	nop

c002dc74 <SATAPI::eject()>:
c002dc74:	57                   	push   edi
c002dc75:	b9 03 00 00 00       	mov    ecx,0x3
c002dc7a:	83 ec 18             	sub    esp,0x18
c002dc7d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002dc81:	fc                   	cld    
c002dc82:	31 c0                	xor    eax,eax
c002dc84:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002dc86:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002dc8b:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002dc90:	50                   	push   eax
c002dc91:	6a 00                	push   0x0
c002dc93:	6a 00                	push   0x0
c002dc95:	6a 00                	push   0x0
c002dc97:	6a 00                	push   0x0
c002dc99:	6a 02                	push   0x2
c002dc9b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002dc9f:	50                   	push   eax
c002dca0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002dca4:	e8 ed fc ff ff       	call   c002d996 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002dca9:	31 c0                	xor    eax,eax
c002dcab:	83 c4 38             	add    esp,0x38
c002dcae:	5f                   	pop    edi
c002dcaf:	c3                   	ret    

c002dcb0 <SATAPI::detectMedia()>:
c002dcb0:	53                   	push   ebx
c002dcb1:	83 ec 14             	sub    esp,0x14
c002dcb4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002dcb8:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002dcbe:	e8 a5 f6 fe ff       	call   c001d368 <VCache::writeWriteBuffer()>
c002dcc3:	59                   	pop    ecx
c002dcc4:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002dcca:	e8 89 f6 fe ff       	call   c001d358 <VCache::invalidateReadBuffer()>
c002dccf:	c7 04 24 6b 42 03 c0 	mov    DWORD PTR [esp],0xc003426b
c002dcd6:	e8 7a b7 fe ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c002dcdb:	83 c4 10             	add    esp,0x10
c002dcde:	31 c0                	xor    eax,eax
c002dce0:	8b 14 85 80 03 04 c0 	mov    edx,DWORD PTR [eax*4-0x3ffbfc80]
c002dce7:	85 d2                	test   edx,edx
c002dce9:	74 0f                	je     c002dcfa <SATAPI::detectMedia()+0x4a>
c002dceb:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002dcf1:	75 07                	jne    c002dcfa <SATAPI::detectMedia()+0x4a>
c002dcf3:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c002dcfa:	40                   	inc    eax
c002dcfb:	83 f8 1a             	cmp    eax,0x1a
c002dcfe:	75 e0                	jne    c002dce0 <SATAPI::detectMedia()+0x30>
c002dd00:	83 c4 08             	add    esp,0x8
c002dd03:	5b                   	pop    ebx
c002dd04:	c3                   	ret    
c002dd05:	90                   	nop

c002dd06 <SATAPI::open(int, int, void*)>:
c002dd06:	56                   	push   esi
c002dd07:	53                   	push   ebx
c002dd08:	51                   	push   ecx
c002dd09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002dd0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002dd11:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002dd1b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002dd21:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002dd2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002dd2f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002dd39:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002dd3f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002dd46:	e8 85 8b fe ff       	call   c00168d0 <Phys::allocatePage()>
c002dd4b:	89 c6                	mov    esi,eax
c002dd4d:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002dd53:	81 c6 00 10 00 00    	add    esi,0x1000
c002dd59:	e8 72 8b fe ff       	call   c00168d0 <Phys::allocatePage()>
c002dd5e:	39 c6                	cmp    esi,eax
c002dd60:	74 10                	je     c002dd72 <SATAPI::open(int, int, void*)+0x6c>
c002dd62:	83 ec 0c             	sub    esp,0xc
c002dd65:	68 80 42 03 c0       	push   0xc0034280
c002dd6a:	e8 1f 2a ff ff       	call   c002078e <KePanic(char const*)>
c002dd6f:	83 c4 10             	add    esp,0x10
c002dd72:	83 ec 0c             	sub    esp,0xc
c002dd75:	6a 02                	push   0x2
c002dd77:	e8 a1 a3 fe ff       	call   c001811d <Virt::allocateKernelVirtualPages(int)>
c002dd7c:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002dd82:	6a 03                	push   0x3
c002dd84:	50                   	push   eax
c002dd85:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002dd8b:	ff 35 b0 ba 03 c0    	push   DWORD PTR ds:0xc003bab0
c002dd91:	e8 9a aa fe ff       	call   c0018830 <VAS::mapPage(unsigned long, unsigned long, int)>
c002dd96:	83 c4 14             	add    esp,0x14
c002dd99:	68 78 01 00 00       	push   0x178
c002dd9e:	e8 24 88 fe ff       	call   c00165c7 <malloc>
c002dda3:	83 c4 0c             	add    esp,0xc
c002dda6:	89 c6                	mov    esi,eax
c002dda8:	6a 00                	push   0x0
c002ddaa:	68 ff ff ff 7f       	push   0x7fffffff
c002ddaf:	6a 00                	push   0x0
c002ddb1:	6a 00                	push   0x0
c002ddb3:	53                   	push   ebx
c002ddb4:	68 96 42 03 c0       	push   0xc0034296
c002ddb9:	50                   	push   eax
c002ddba:	e8 09 ea fe ff       	call   c001c7c8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002ddbf:	83 c4 14             	add    esp,0x14
c002ddc2:	56                   	push   esi
c002ddc3:	e8 c0 ea fe ff       	call   c001c888 <LogicalDisk::assignDriveLetter()>
c002ddc8:	5a                   	pop    edx
c002ddc9:	0f be c0             	movsx  eax,al
c002ddcc:	59                   	pop    ecx
c002ddcd:	50                   	push   eax
c002ddce:	68 dc 40 03 c0       	push   0xc00340dc
c002ddd3:	e8 7d b6 fe ff       	call   c0019455 <Dbg::kprintf(char const*, ...)>
c002ddd8:	58                   	pop    eax
c002ddd9:	5a                   	pop    edx
c002ddda:	56                   	push   esi
c002dddb:	53                   	push   ebx
c002dddc:	e8 31 d8 fe ff       	call   c001b612 <Device::addChild(Device*)>
c002dde1:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002dde7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002ddea:	e8 6f dc fe ff       	call   c001ba5e <PhysicalDisk::startCache()>
c002ddef:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002ddf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002ddf9:	e8 b2 fe ff ff       	call   c002dcb0 <SATAPI::detectMedia()>
c002ddfe:	83 c4 14             	add    esp,0x14
c002de01:	31 c0                	xor    eax,eax
c002de03:	5b                   	pop    ebx
c002de04:	5e                   	pop    esi
c002de05:	c3                   	ret    

c002de06 <SATAPI::read(unsigned long long, int, void*)>:
c002de06:	57                   	push   edi
c002de07:	56                   	push   esi
c002de08:	53                   	push   ebx
c002de09:	83 ec 30             	sub    esp,0x30
c002de0c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002de10:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c002de14:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c002de18:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002de1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002de20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002de24:	83 fe 04             	cmp    esi,0x4
c002de27:	7e 10                	jle    c002de39 <SATAPI::read(unsigned long long, int, void*)+0x33>
c002de29:	83 ec 0c             	sub    esp,0xc
c002de2c:	68 a4 42 03 c0       	push   0xc00342a4
c002de31:	e8 58 29 ff ff       	call   c002078e <KePanic(char const*)>
c002de36:	83 c4 10             	add    esp,0x10
c002de39:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002de3f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002de45:	51                   	push   ecx
c002de46:	50                   	push   eax
c002de47:	83 c0 02             	add    eax,0x2
c002de4a:	c1 e0 07             	shl    eax,0x7
c002de4d:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c002de53:	50                   	push   eax
c002de54:	52                   	push   edx
c002de55:	e8 36 e1 ff ff       	call   c002bf90 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002de5a:	8d 7c 24 28          	lea    edi,[esp+0x28]
c002de5e:	b9 03 00 00 00       	mov    ecx,0x3
c002de63:	fc                   	cld    
c002de64:	31 c0                	xor    eax,eax
c002de66:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002de68:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002de6d:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c002de72:	83 c4 0c             	add    esp,0xc
c002de75:	6a 00                	push   0x0
c002de77:	6a 00                	push   0x0
c002de79:	6a 00                	push   0x0
c002de7b:	6a 00                	push   0x0
c002de7d:	6a 02                	push   0x2
c002de7f:	8d 44 24 30          	lea    eax,[esp+0x30]
c002de83:	50                   	push   eax
c002de84:	53                   	push   ebx
c002de85:	e8 0c fb ff ff       	call   c002d996 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002de8a:	83 c4 20             	add    esp,0x20
c002de8d:	85 c0                	test   eax,eax
c002de8f:	75 44                	jne    c002ded5 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c002de91:	8d 7c 24 24          	lea    edi,[esp+0x24]
c002de95:	b9 03 00 00 00       	mov    ecx,0x3
c002de9a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002de9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002dea0:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c002dea5:	0f c8                	bswap  eax
c002dea7:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c002deab:	89 f0                	mov    eax,esi
c002dead:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002deb1:	50                   	push   eax
c002deb2:	56                   	push   esi
c002deb3:	c1 e6 0b             	shl    esi,0xb
c002deb6:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002deba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002debe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002dec2:	56                   	push   esi
c002dec3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002dec7:	50                   	push   eax
c002dec8:	53                   	push   ebx
c002dec9:	e8 c8 fa ff ff       	call   c002d996 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002dece:	83 c4 20             	add    esp,0x20
c002ded1:	85 c0                	test   eax,eax
c002ded3:	74 14                	je     c002dee9 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c002ded5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002ded9:	83 ec 0c             	sub    esp,0xc
c002dedc:	53                   	push   ebx
c002dedd:	e8 ce fd ff ff       	call   c002dcb0 <SATAPI::detectMedia()>
c002dee2:	83 c4 10             	add    esp,0x10
c002dee5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002dee9:	83 c4 30             	add    esp,0x30
c002deec:	5b                   	pop    ebx
c002deed:	5e                   	pop    esi
c002deee:	5f                   	pop    edi
c002deef:	c3                   	ret    

c002def0 <IOAPIC::close(int, int, void*)>:
c002def0:	b8 00 00 00 00       	mov    eax,0x0
c002def5:	c3                   	ret    

c002def6 <apicGetBase()>:
c002def6:	55                   	push   ebp
c002def7:	89 e5                	mov    ebp,esp
c002def9:	83 ec 18             	sub    esp,0x18
c002defc:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c002df01:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c002df07:	83 e0 08             	and    eax,0x8
c002df0a:	0f b6 c0             	movzx  eax,al
c002df0d:	85 c0                	test   eax,eax
c002df0f:	75 07                	jne    c002df18 <apicGetBase()+0x22>
c002df11:	b8 00 00 00 00       	mov    eax,0x0
c002df16:	eb 21                	jmp    c002df39 <apicGetBase()+0x43>
c002df18:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c002df1d:	83 ec 08             	sub    esp,0x8
c002df20:	6a 1b                	push   0x1b
c002df22:	50                   	push   eax
c002df23:	e8 2e 7c fe ff       	call   c0015b56 <Computer::rdmsr(unsigned int)>
c002df28:	83 c4 10             	add    esp,0x10
c002df2b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002df2e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002df31:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002df34:	25 00 00 ff ff       	and    eax,0xffff0000
c002df39:	c9                   	leave  
c002df3a:	c3                   	ret    
c002df3b:	90                   	nop

c002df3c <IOAPIC::IOAPIC()>:
c002df3c:	83 ec 0c             	sub    esp,0xc
c002df3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df43:	83 ec 08             	sub    esp,0x8
c002df46:	68 08 43 03 c0       	push   0xc0034308
c002df4b:	50                   	push   eax
c002df4c:	e8 23 d8 fe ff       	call   c001b774 <Device::Device(char const*)>
c002df51:	83 c4 10             	add    esp,0x10
c002df54:	ba 18 43 03 c0       	mov    edx,0xc0034318
c002df59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df5d:	89 10                	mov    DWORD PTR [eax],edx
c002df5f:	90                   	nop
c002df60:	83 c4 0c             	add    esp,0xc
c002df63:	c3                   	ret    

c002df64 <apicOpen()>:
c002df64:	55                   	push   ebp
c002df65:	89 e5                	mov    ebp,esp
c002df67:	53                   	push   ebx
c002df68:	83 ec 34             	sub    esp,0x34
c002df6b:	a0 00 1c 04 c0       	mov    al,ds:0xc0041c00
c002df70:	83 f0 01             	xor    eax,0x1
c002df73:	0f b6 c0             	movzx  eax,al
c002df76:	85 c0                	test   eax,eax
c002df78:	0f 84 a3 00 00 00    	je     c002e021 <apicOpen()+0xbd>
c002df7e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c002df82:	a0 e0 06 04 c0       	mov    al,ds:0xc00406e0
c002df87:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002df8b:	0f b6 c0             	movzx  eax,al
c002df8e:	39 c2                	cmp    edx,eax
c002df90:	0f 83 84 00 00 00    	jae    c002e01a <apicOpen()+0xb6>
c002df96:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c002df9d:	83 ec 0c             	sub    esp,0xc
c002dfa0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002dfa3:	e8 1f 86 fe ff       	call   c00165c7 <malloc>
c002dfa8:	83 c4 10             	add    esp,0x10
c002dfab:	89 c3                	mov    ebx,eax
c002dfad:	83 ec 0c             	sub    esp,0xc
c002dfb0:	53                   	push   ebx
c002dfb1:	e8 86 ff ff ff       	call   c002df3c <IOAPIC::IOAPIC()>
c002dfb6:	83 c4 10             	add    esp,0x10
c002dfb9:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002dfbc:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c002dfc0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002dfc3:	89 14 85 e0 1b 04 c0 	mov    DWORD PTR [eax*4-0x3ffbe420],edx
c002dfca:	a1 c0 1b 04 c0       	mov    eax,ds:0xc0041bc0
c002dfcf:	83 c0 01             	add    eax,0x1
c002dfd2:	a3 c0 1b 04 c0       	mov    ds:0xc0041bc0,eax
c002dfd7:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c002dfdc:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c002dfe2:	83 ec 08             	sub    esp,0x8
c002dfe5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002dfe8:	50                   	push   eax
c002dfe9:	e8 24 d6 fe ff       	call   c001b612 <Device::addChild(Device*)>
c002dfee:	83 c4 10             	add    esp,0x10
c002dff1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002dff4:	8b 00                	mov    eax,DWORD PTR [eax]
c002dff6:	83 c0 08             	add    eax,0x8
c002dff9:	8b 00                	mov    eax,DWORD PTR [eax]
c002dffb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002dfff:	6a 00                	push   0x0
c002e001:	6a 00                	push   0x0
c002e003:	52                   	push   edx
c002e004:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002e007:	ff d0                	call   eax
c002e009:	83 c4 10             	add    esp,0x10
c002e00c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c002e00f:	83 c0 01             	add    eax,0x1
c002e012:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c002e015:	e9 68 ff ff ff       	jmp    c002df82 <apicOpen()+0x1e>
c002e01a:	c6 05 00 1c 04 c0 01 	mov    BYTE PTR ds:0xc0041c00,0x1
c002e021:	e8 d0 fe ff ff       	call   c002def6 <apicGetBase()>
c002e026:	05 f0 00 00 00       	add    eax,0xf0
c002e02b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002e02e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002e031:	8b 00                	mov    eax,DWORD PTR [eax]
c002e033:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002e036:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c002e03d:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c002e044:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002e047:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002e04a:	89 10                	mov    DWORD PTR [eax],edx
c002e04c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c002e053:	a1 30 06 04 c0       	mov    eax,ds:0xc0040630
c002e058:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c002e05b:	7d 7c                	jge    c002e0d9 <apicOpen()+0x175>
c002e05d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002e060:	8b 04 85 40 06 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbf9c0]
c002e067:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c002e06a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002e06d:	8b 04 85 40 06 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbf9c0]
c002e074:	c1 e8 08             	shr    eax,0x8
c002e077:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c002e07b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002e07e:	8b 04 85 40 06 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbf9c0]
c002e085:	c1 e8 18             	shr    eax,0x18
c002e088:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c002e08b:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c002e08f:	3d ff 00 00 00       	cmp    eax,0xff
c002e094:	75 3a                	jne    c002e0d0 <apicOpen()+0x16c>
c002e096:	e8 5b fe ff ff       	call   c002def6 <apicGetBase()>
c002e09b:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c002e09f:	83 fa 01             	cmp    edx,0x1
c002e0a2:	75 07                	jne    c002e0ab <apicOpen()+0x147>
c002e0a4:	ba 60 03 00 00       	mov    edx,0x360
c002e0a9:	eb 05                	jmp    c002e0b0 <apicOpen()+0x14c>
c002e0ab:	ba 50 03 00 00       	mov    edx,0x350
c002e0b0:	01 d0                	add    eax,edx
c002e0b2:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002e0b5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002e0b8:	8b 00                	mov    eax,DWORD PTR [eax]
c002e0ba:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002e0bd:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c002e0c4:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c002e0c8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002e0cb:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002e0ce:	89 10                	mov    DWORD PTR [eax],edx
c002e0d0:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c002e0d4:	e9 7a ff ff ff       	jmp    c002e053 <apicOpen()+0xef>
c002e0d9:	90                   	nop
c002e0da:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002e0dd:	c9                   	leave  
c002e0de:	c3                   	ret    
c002e0df:	90                   	nop

c002e0e0 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002e0e0:	55                   	push   ebp
c002e0e1:	89 e5                	mov    ebp,esp
c002e0e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e0e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002e0ec:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002e0ef:	72 1d                	jb     c002e10e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002e0f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e0f4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002e0fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e0fd:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002e103:	01 d0                	add    eax,edx
c002e105:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002e108:	73 04                	jae    c002e10e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002e10a:	b0 01                	mov    al,0x1
c002e10c:	eb 02                	jmp    c002e110 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002e10e:	b0 00                	mov    al,0x0
c002e110:	5d                   	pop    ebp
c002e111:	c3                   	ret    

c002e112 <IOAPIC::read(int)>:
c002e112:	55                   	push   ebp
c002e113:	89 e5                	mov    ebp,esp
c002e115:	83 ec 10             	sub    esp,0x10
c002e118:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e11b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002e121:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002e124:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e127:	0f b6 d0             	movzx  edx,al
c002e12a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002e12d:	89 10                	mov    DWORD PTR [eax],edx
c002e12f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002e132:	83 c0 10             	add    eax,0x10
c002e135:	8b 00                	mov    eax,DWORD PTR [eax]
c002e137:	c9                   	leave  
c002e138:	c3                   	ret    
c002e139:	90                   	nop

c002e13a <IOAPIC::open(int, int, void*)>:
c002e13a:	55                   	push   ebp
c002e13b:	89 e5                	mov    ebp,esp
c002e13d:	57                   	push   edi
c002e13e:	56                   	push   esi
c002e13f:	53                   	push   ebx
c002e140:	83 ec 04             	sub    esp,0x4
c002e143:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e146:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002e149:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002e14f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e152:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002e158:	8b 14 85 20 07 04 c0 	mov    edx,DWORD PTR [eax*4-0x3ffbf8e0]
c002e15f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e162:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002e168:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e16b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002e171:	8b 14 85 a0 07 04 c0 	mov    edx,DWORD PTR [eax*4-0x3ffbf860]
c002e178:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e17b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002e181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e184:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002e18a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e18d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002e193:	0f b6 f0             	movzx  esi,al
c002e196:	89 d0                	mov    eax,edx
c002e198:	ba 00 00 00 00       	mov    edx,0x0
c002e19d:	89 c7                	mov    edi,eax
c002e19f:	83 e7 ff             	and    edi,0xffffffff
c002e1a2:	89 f9                	mov    ecx,edi
c002e1a4:	0f b6 da             	movzx  ebx,dl
c002e1a7:	89 c8                	mov    eax,ecx
c002e1a9:	89 da                	mov    edx,ebx
c002e1ab:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002e1ae:	8d 5e 08             	lea    ebx,[esi+0x8]
c002e1b1:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002e1b5:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002e1b9:	83 e0 00             	and    eax,0x0
c002e1bc:	09 d0                	or     eax,edx
c002e1be:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002e1c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e1c5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002e1cb:	8d 50 01             	lea    edx,[eax+0x1]
c002e1ce:	88 d1                	mov    cl,dl
c002e1d0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002e1d3:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c002e1d9:	0f b6 d0             	movzx  edx,al
c002e1dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e1df:	83 c2 08             	add    edx,0x8
c002e1e2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002e1e6:	0f b6 c9             	movzx  ecx,cl
c002e1e9:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002e1ef:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002e1f3:	6a 01                	push   0x1
c002e1f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002e1f8:	e8 15 ff ff ff       	call   c002e112 <IOAPIC::read(int)>
c002e1fd:	83 c4 08             	add    esp,0x8
c002e200:	c1 f8 10             	sar    eax,0x10
c002e203:	0f b6 c0             	movzx  eax,al
c002e206:	8d 50 01             	lea    edx,[eax+0x1]
c002e209:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e20c:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002e212:	b8 00 00 00 00       	mov    eax,0x0
c002e217:	8d 65 f4             	lea    esp,[ebp-0xc]
c002e21a:	5b                   	pop    ebx
c002e21b:	5e                   	pop    esi
c002e21c:	5f                   	pop    edi
c002e21d:	5d                   	pop    ebp
c002e21e:	c3                   	ret    
c002e21f:	90                   	nop

c002e220 <IOAPIC::write(int, int)>:
c002e220:	55                   	push   ebp
c002e221:	89 e5                	mov    ebp,esp
c002e223:	83 ec 10             	sub    esp,0x10
c002e226:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e229:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002e22f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002e232:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e235:	0f b6 d0             	movzx  edx,al
c002e238:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002e23b:	89 10                	mov    DWORD PTR [eax],edx
c002e23d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002e240:	8d 50 10             	lea    edx,[eax+0x10]
c002e243:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002e246:	89 02                	mov    DWORD PTR [edx],eax
c002e248:	90                   	nop
c002e249:	c9                   	leave  
c002e24a:	c3                   	ret    
c002e24b:	90                   	nop

c002e24c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002e24c:	55                   	push   ebp
c002e24d:	89 e5                	mov    ebp,esp
c002e24f:	53                   	push   ebx
c002e250:	83 ec 2c             	sub    esp,0x2c
c002e253:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e256:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002e259:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002e25c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002e25f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002e262:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002e265:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002e268:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002e26b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002e26e:	88 d8                	mov    al,bl
c002e270:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002e273:	88 c8                	mov    al,cl
c002e275:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002e278:	88 d0                	mov    al,dl
c002e27a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002e27d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002e281:	83 c0 08             	add    eax,0x8
c002e284:	01 c0                	add    eax,eax
c002e286:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002e289:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002e28d:	83 c0 08             	add    eax,0x8
c002e290:	01 c0                	add    eax,eax
c002e292:	83 c0 01             	add    eax,0x1
c002e295:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002e298:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002e29b:	50                   	push   eax
c002e29c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002e29f:	e8 6e fe ff ff       	call   c002e112 <IOAPIC::read(int)>
c002e2a4:	83 c4 08             	add    esp,0x8
c002e2a7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002e2aa:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002e2b1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002e2b4:	c1 e0 18             	shl    eax,0x18
c002e2b7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002e2ba:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002e2bd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002e2c0:	52                   	push   edx
c002e2c1:	50                   	push   eax
c002e2c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002e2c5:	e8 56 ff ff ff       	call   c002e220 <IOAPIC::write(int, int)>
c002e2ca:	83 c4 0c             	add    esp,0xc
c002e2cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002e2d0:	50                   	push   eax
c002e2d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002e2d4:	e8 39 fe ff ff       	call   c002e112 <IOAPIC::read(int)>
c002e2d9:	83 c4 08             	add    esp,0x8
c002e2dc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002e2df:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002e2e6:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002e2ed:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002e2f4:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c002e2f8:	85 c0                	test   eax,eax
c002e2fa:	74 09                	je     c002e305 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c002e2fc:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002e303:	eb 07                	jmp    c002e30c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c002e305:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002e30c:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c002e310:	85 c0                	test   eax,eax
c002e312:	74 09                	je     c002e31d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c002e314:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002e31b:	eb 07                	jmp    c002e324 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c002e31d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002e324:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002e32b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002e32f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002e332:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002e335:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002e338:	52                   	push   edx
c002e339:	50                   	push   eax
c002e33a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002e33d:	e8 de fe ff ff       	call   c002e220 <IOAPIC::write(int, int)>
c002e342:	83 c4 0c             	add    esp,0xc
c002e345:	90                   	nop
c002e346:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002e349:	c9                   	leave  
c002e34a:	c3                   	ret    
c002e34b:	90                   	nop

c002e34c <APICTimer::close(int, int, void*)>:
c002e34c:	b8 00 00 00 00       	mov    eax,0x0
c002e351:	c3                   	ret    
c002e352:	66 90                	xchg   ax,ax

c002e354 <apicTimerHandler(regs*, void*)>:
c002e354:	83 ec 0c             	sub    esp,0xc
c002e357:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e35b:	8b 08                	mov    ecx,DWORD PTR [eax]
c002e35d:	b8 10 27 00 00       	mov    eax,0x2710
c002e362:	ba 00 00 00 00       	mov    edx,0x0
c002e367:	f7 f1                	div    ecx
c002e369:	83 ec 0c             	sub    esp,0xc
c002e36c:	50                   	push   eax
c002e36d:	e8 12 ed fe ff       	call   c001d084 <timerHandler(unsigned int)>
c002e372:	83 c4 10             	add    esp,0x10
c002e375:	90                   	nop
c002e376:	83 c4 0c             	add    esp,0xc
c002e379:	c3                   	ret    
c002e37a:	66 90                	xchg   ax,ax

c002e37c <APICTimer::open(int, int, void*)>:
c002e37c:	83 ec 0c             	sub    esp,0xc
c002e37f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e383:	8b 00                	mov    eax,DWORD PTR [eax]
c002e385:	83 c0 24             	add    eax,0x24
c002e388:	8b 00                	mov    eax,DWORD PTR [eax]
c002e38a:	83 ec 08             	sub    esp,0x8
c002e38d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e391:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e395:	ff d0                	call   eax
c002e397:	83 c4 10             	add    esp,0x10
c002e39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e39e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002e3a2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002e3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e3ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002e3b0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002e3b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002e3ba:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002e3c0:	83 ec 0c             	sub    esp,0xc
c002e3c3:	51                   	push   ecx
c002e3c4:	6a 01                	push   0x1
c002e3c6:	68 54 e3 02 c0       	push   0xc002e354
c002e3cb:	52                   	push   edx
c002e3cc:	50                   	push   eax
c002e3cd:	e8 ec d1 fe ff       	call   c001b5be <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002e3d2:	83 c4 20             	add    esp,0x20
c002e3d5:	89 c2                	mov    edx,eax
c002e3d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e3db:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002e3e1:	b8 00 00 00 00       	mov    eax,0x0
c002e3e6:	83 c4 0c             	add    esp,0xc
c002e3e9:	c3                   	ret    
c002e3ea:	66 90                	xchg   ax,ax

c002e3ec <APICTimer::write(int)>:
c002e3ec:	83 ec 0c             	sub    esp,0xc
c002e3ef:	83 ec 0c             	sub    esp,0xc
c002e3f2:	68 3c 43 03 c0       	push   0xc003433c
c002e3f7:	e8 92 23 ff ff       	call   c002078e <KePanic(char const*)>
c002e3fc:	83 c4 10             	add    esp,0x10
c002e3ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e403:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e407:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002e40d:	90                   	nop
c002e40e:	83 c4 0c             	add    esp,0xc
c002e411:	c3                   	ret    
c002e412:	66 90                	xchg   ax,ax

c002e414 <APICTimer::APICTimer()>:
c002e414:	83 ec 0c             	sub    esp,0xc
c002e417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e41b:	83 ec 08             	sub    esp,0x8
c002e41e:	68 4c 43 03 c0       	push   0xc003434c
c002e423:	50                   	push   eax
c002e424:	e8 8f eb fe ff       	call   c001cfb8 <Timer::Timer(char const*)>
c002e429:	83 c4 10             	add    esp,0x10
c002e42c:	ba 60 43 03 c0       	mov    edx,0xc0034360
c002e431:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e435:	89 10                	mov    DWORD PTR [eax],edx
c002e437:	90                   	nop
c002e438:	83 c4 0c             	add    esp,0xc
c002e43b:	c3                   	ret    

c002e43c <PIT::write(int)>:
c002e43c:	83 ec 10             	sub    esp,0x10
c002e43f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e443:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002e447:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002e44d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002e451:	a3 04 1c 04 c0       	mov    ds:0xc0041c04,eax
c002e456:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002e45b:	89 c2                	mov    edx,eax
c002e45d:	c1 fa 1f             	sar    edx,0x1f
c002e460:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002e464:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e468:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002e46f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002e474:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002e478:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002e47d:	ee                   	out    dx,al
c002e47e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e482:	0f b6 c0             	movzx  eax,al
c002e485:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002e48c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002e490:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002e494:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002e499:	ee                   	out    dx,al
c002e49a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e49e:	c1 f8 08             	sar    eax,0x8
c002e4a1:	0f b6 c0             	movzx  eax,al
c002e4a4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002e4ab:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002e4af:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002e4b3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002e4b8:	ee                   	out    dx,al
c002e4b9:	90                   	nop
c002e4ba:	83 c4 10             	add    esp,0x10
c002e4bd:	c3                   	ret    
c002e4be:	66 90                	xchg   ax,ax

c002e4c0 <pitHandler(regs*, void*)>:
c002e4c0:	83 ec 0c             	sub    esp,0xc
c002e4c3:	8b 0d 04 1c 04 c0    	mov    ecx,DWORD PTR ds:0xc0041c04
c002e4c9:	b8 10 27 00 00       	mov    eax,0x2710
c002e4ce:	89 c2                	mov    edx,eax
c002e4d0:	c1 fa 1f             	sar    edx,0x1f
c002e4d3:	f7 f9                	idiv   ecx
c002e4d5:	83 ec 0c             	sub    esp,0xc
c002e4d8:	50                   	push   eax
c002e4d9:	e8 a6 eb fe ff       	call   c001d084 <timerHandler(unsigned int)>
c002e4de:	83 c4 10             	add    esp,0x10
c002e4e1:	90                   	nop
c002e4e2:	83 c4 0c             	add    esp,0xc
c002e4e5:	c3                   	ret    
c002e4e6:	66 90                	xchg   ax,ax

c002e4e8 <PIT::open(int, int, void*)>:
c002e4e8:	83 ec 0c             	sub    esp,0xc
c002e4eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e4ef:	8b 00                	mov    eax,DWORD PTR [eax]
c002e4f1:	83 c0 24             	add    eax,0x24
c002e4f4:	8b 00                	mov    eax,DWORD PTR [eax]
c002e4f6:	83 ec 08             	sub    esp,0x8
c002e4f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e4fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e501:	ff d0                	call   eax
c002e503:	83 c4 10             	add    esp,0x10
c002e506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e50a:	83 ec 0c             	sub    esp,0xc
c002e50d:	6a 00                	push   0x0
c002e50f:	6a 01                	push   0x1
c002e511:	68 c0 e4 02 c0       	push   0xc002e4c0
c002e516:	6a 00                	push   0x0
c002e518:	50                   	push   eax
c002e519:	e8 a0 d0 fe ff       	call   c001b5be <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002e51e:	83 c4 20             	add    esp,0x20
c002e521:	89 c2                	mov    edx,eax
c002e523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e527:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002e52d:	b8 00 00 00 00       	mov    eax,0x0
c002e532:	83 c4 0c             	add    esp,0xc
c002e535:	c3                   	ret    
c002e536:	66 90                	xchg   ax,ax

c002e538 <PIT::close(int, int, void*)>:
c002e538:	83 ec 0c             	sub    esp,0xc
c002e53b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e53f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002e549:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e54d:	6a 01                	push   0x1
c002e54f:	68 c0 e4 02 c0       	push   0xc002e4c0
c002e554:	6a 00                	push   0x0
c002e556:	50                   	push   eax
c002e557:	e8 98 d0 fe ff       	call   c001b5f4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002e55c:	83 c4 10             	add    esp,0x10
c002e55f:	b8 00 00 00 00       	mov    eax,0x0
c002e564:	83 c4 0c             	add    esp,0xc
c002e567:	c3                   	ret    

c002e568 <PIT::PIT()>:
c002e568:	83 ec 0c             	sub    esp,0xc
c002e56b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e56f:	83 ec 08             	sub    esp,0x8
c002e572:	68 88 43 03 c0       	push   0xc0034388
c002e577:	50                   	push   eax
c002e578:	e8 3b ea fe ff       	call   c001cfb8 <Timer::Timer(char const*)>
c002e57d:	83 c4 10             	add    esp,0x10
c002e580:	ba b0 43 03 c0       	mov    edx,0xc00343b0
c002e585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e589:	89 10                	mov    DWORD PTR [eax],edx
c002e58b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e58f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002e595:	0f b6 d0             	movzx  edx,al
c002e598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e59c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002e5a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e5a7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002e5ad:	0f b6 d0             	movzx  edx,al
c002e5b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e5b4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002e5b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e5bd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002e5c3:	8d 50 01             	lea    edx,[eax+0x1]
c002e5c6:	88 d1                	mov    cl,dl
c002e5c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002e5cc:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002e5d2:	0f b6 d0             	movzx  edx,al
c002e5d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e5d9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002e5dd:	83 e1 3f             	and    ecx,0x3f
c002e5e0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002e5e4:	90                   	nop
c002e5e5:	83 c4 0c             	add    esp,0xc
c002e5e8:	c3                   	ret    
c002e5e9:	66 90                	xchg   ax,ax
c002e5eb:	66 90                	xchg   ax,ax
c002e5ed:	66 90                	xchg   ax,ax
c002e5ef:	90                   	nop

c002e5f0 <avxDetect>:
c002e5f0:	b8 01 00 00 00       	mov    eax,0x1
c002e5f5:	0f a2                	cpuid  
c002e5f7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002e5fd:	74 15                	je     c002e614 <avxDetect.noAVX>
c002e5ff:	b8 01 00 00 00       	mov    eax,0x1
c002e604:	0f a2                	cpuid  
c002e606:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002e60c:	74 06                	je     c002e614 <avxDetect.noAVX>
c002e60e:	b8 01 00 00 00       	mov    eax,0x1
c002e613:	c3                   	ret    

c002e614 <avxDetect.noAVX>:
c002e614:	b8 00 00 00 00       	mov    eax,0x0
c002e619:	c3                   	ret    

c002e61a <avxSave>:
c002e61a:	53                   	push   ebx
c002e61b:	52                   	push   edx
c002e61c:	31 c0                	xor    eax,eax
c002e61e:	48                   	dec    eax
c002e61f:	89 c2                	mov    edx,eax
c002e621:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e625:	0f ae 23             	xsave  [ebx]
c002e628:	5a                   	pop    edx
c002e629:	5b                   	pop    ebx
c002e62a:	c3                   	ret    

c002e62b <avxLoad>:
c002e62b:	53                   	push   ebx
c002e62c:	52                   	push   edx
c002e62d:	31 c0                	xor    eax,eax
c002e62f:	48                   	dec    eax
c002e630:	89 c2                	mov    edx,eax
c002e632:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e636:	0f ae 2b             	xrstor [ebx]
c002e639:	5a                   	pop    edx
c002e63a:	5b                   	pop    ebx
c002e63b:	c3                   	ret    

c002e63c <avxInit>:
c002e63c:	e8 47 03 00 00       	call   c002e988 <sseInit>
c002e641:	50                   	push   eax
c002e642:	51                   	push   ecx
c002e643:	0f 20 e0             	mov    eax,cr4
c002e646:	0d 00 00 04 00       	or     eax,0x40000
c002e64b:	0f 22 e0             	mov    cr4,eax
c002e64e:	31 c9                	xor    ecx,ecx
c002e650:	0f 01 d0             	xgetbv 
c002e653:	0d 07 00 00 00       	or     eax,0x7
c002e658:	0f 01 d1             	xsetbv 
c002e65b:	59                   	pop    ecx
c002e65c:	58                   	pop    eax
c002e65d:	c3                   	ret    

c002e65e <avxClose>:
c002e65e:	c3                   	ret    
c002e65f:	90                   	nop

c002e660 <isr0>:
c002e660:	fa                   	cli    
c002e661:	68 00 00 00 00       	push   0x0
c002e666:	68 00 00 00 00       	push   0x0
c002e66b:	e9 56 01 00 00       	jmp    c002e7c6 <int_common_stub>

c002e670 <isr1>:
c002e670:	fa                   	cli    
c002e671:	6a 00                	push   0x0
c002e673:	6a 01                	push   0x1
c002e675:	e9 4c 01 00 00       	jmp    c002e7c6 <int_common_stub>

c002e67a <isr2>:
c002e67a:	fa                   	cli    
c002e67b:	6a 00                	push   0x0
c002e67d:	6a 02                	push   0x2
c002e67f:	e9 42 01 00 00       	jmp    c002e7c6 <int_common_stub>

c002e684 <isr3>:
c002e684:	fa                   	cli    
c002e685:	6a 00                	push   0x0
c002e687:	6a 03                	push   0x3
c002e689:	e9 38 01 00 00       	jmp    c002e7c6 <int_common_stub>

c002e68e <isr4>:
c002e68e:	fa                   	cli    
c002e68f:	6a 00                	push   0x0
c002e691:	6a 04                	push   0x4
c002e693:	e9 2e 01 00 00       	jmp    c002e7c6 <int_common_stub>

c002e698 <isr5>:
c002e698:	fa                   	cli    
c002e699:	6a 00                	push   0x0
c002e69b:	6a 05                	push   0x5
c002e69d:	e9 24 01 00 00       	jmp    c002e7c6 <int_common_stub>

c002e6a2 <isr6>:
c002e6a2:	fa                   	cli    
c002e6a3:	6a 00                	push   0x0
c002e6a5:	6a 06                	push   0x6
c002e6a7:	e9 1a 01 00 00       	jmp    c002e7c6 <int_common_stub>

c002e6ac <isr7>:
c002e6ac:	fa                   	cli    
c002e6ad:	6a 00                	push   0x0
c002e6af:	6a 07                	push   0x7
c002e6b1:	e9 10 01 00 00       	jmp    c002e7c6 <int_common_stub>

c002e6b6 <isr8>:
c002e6b6:	fa                   	cli    
c002e6b7:	6a 08                	push   0x8
c002e6b9:	e9 08 01 00 00       	jmp    c002e7c6 <int_common_stub>

c002e6be <isr9>:
c002e6be:	fa                   	cli    
c002e6bf:	6a 00                	push   0x0
c002e6c1:	6a 09                	push   0x9
c002e6c3:	e9 fe 00 00 00       	jmp    c002e7c6 <int_common_stub>

c002e6c8 <isr10>:
c002e6c8:	fa                   	cli    
c002e6c9:	6a 0a                	push   0xa
c002e6cb:	e9 f6 00 00 00       	jmp    c002e7c6 <int_common_stub>

c002e6d0 <isr11>:
c002e6d0:	fa                   	cli    
c002e6d1:	6a 0b                	push   0xb
c002e6d3:	e9 ee 00 00 00       	jmp    c002e7c6 <int_common_stub>

c002e6d8 <isr12>:
c002e6d8:	fa                   	cli    
c002e6d9:	6a 0c                	push   0xc
c002e6db:	e9 e6 00 00 00       	jmp    c002e7c6 <int_common_stub>

c002e6e0 <isr13>:
c002e6e0:	fa                   	cli    
c002e6e1:	6a 0d                	push   0xd
c002e6e3:	53                   	push   ebx
c002e6e4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e6e8:	81 fb b6 e8 02 c0    	cmp    ebx,0xc002e8b6
c002e6ee:	5b                   	pop    ebx
c002e6ef:	0f 84 c3 01 00 00    	je     c002e8b8 <finishSignal2>
c002e6f5:	e9 cc 00 00 00       	jmp    c002e7c6 <int_common_stub>

c002e6fa <isr14>:
c002e6fa:	fa                   	cli    
c002e6fb:	6a 0e                	push   0xe
c002e6fd:	e9 c4 00 00 00       	jmp    c002e7c6 <int_common_stub>

c002e702 <isr15>:
c002e702:	fa                   	cli    
c002e703:	6a 00                	push   0x0
c002e705:	6a 0f                	push   0xf
c002e707:	e9 ba 00 00 00       	jmp    c002e7c6 <int_common_stub>

c002e70c <isr16>:
c002e70c:	fa                   	cli    
c002e70d:	6a 00                	push   0x0
c002e70f:	6a 10                	push   0x10
c002e711:	e9 b0 00 00 00       	jmp    c002e7c6 <int_common_stub>

c002e716 <isr17>:
c002e716:	fa                   	cli    
c002e717:	6a 00                	push   0x0
c002e719:	6a 11                	push   0x11
c002e71b:	e9 a6 00 00 00       	jmp    c002e7c6 <int_common_stub>

c002e720 <isr18>:
c002e720:	fa                   	cli    
c002e721:	6a 00                	push   0x0
c002e723:	6a 12                	push   0x12
c002e725:	e9 9c 00 00 00       	jmp    c002e7c6 <int_common_stub>

c002e72a <irq3>:
c002e72a:	fa                   	cli    
c002e72b:	6a 00                	push   0x0
c002e72d:	6a 23                	push   0x23
c002e72f:	e9 92 00 00 00       	jmp    c002e7c6 <int_common_stub>

c002e734 <irq4>:
c002e734:	fa                   	cli    
c002e735:	6a 00                	push   0x0
c002e737:	6a 24                	push   0x24
c002e739:	e9 88 00 00 00       	jmp    c002e7c6 <int_common_stub>

c002e73e <irq5>:
c002e73e:	fa                   	cli    
c002e73f:	6a 00                	push   0x0
c002e741:	6a 25                	push   0x25
c002e743:	e9 7e 00 00 00       	jmp    c002e7c6 <int_common_stub>

c002e748 <irq6>:
c002e748:	fa                   	cli    
c002e749:	6a 00                	push   0x0
c002e74b:	6a 26                	push   0x26
c002e74d:	e9 74 00 00 00       	jmp    c002e7c6 <int_common_stub>

c002e752 <irq7>:
c002e752:	fa                   	cli    
c002e753:	6a 00                	push   0x0
c002e755:	6a 27                	push   0x27
c002e757:	e9 6a 00 00 00       	jmp    c002e7c6 <int_common_stub>

c002e75c <irq8>:
c002e75c:	fa                   	cli    
c002e75d:	6a 00                	push   0x0
c002e75f:	6a 28                	push   0x28
c002e761:	e9 60 00 00 00       	jmp    c002e7c6 <int_common_stub>

c002e766 <irq9>:
c002e766:	fa                   	cli    
c002e767:	6a 00                	push   0x0
c002e769:	6a 29                	push   0x29
c002e76b:	e9 56 00 00 00       	jmp    c002e7c6 <int_common_stub>

c002e770 <irq10>:
c002e770:	fa                   	cli    
c002e771:	6a 00                	push   0x0
c002e773:	6a 2a                	push   0x2a
c002e775:	e9 4c 00 00 00       	jmp    c002e7c6 <int_common_stub>

c002e77a <irq11>:
c002e77a:	fa                   	cli    
c002e77b:	6a 00                	push   0x0
c002e77d:	6a 2b                	push   0x2b
c002e77f:	e9 42 00 00 00       	jmp    c002e7c6 <int_common_stub>

c002e784 <irq12>:
c002e784:	fa                   	cli    
c002e785:	6a 00                	push   0x0
c002e787:	6a 2c                	push   0x2c
c002e789:	e9 38 00 00 00       	jmp    c002e7c6 <int_common_stub>

c002e78e <irq13>:
c002e78e:	fa                   	cli    
c002e78f:	6a 00                	push   0x0
c002e791:	6a 2d                	push   0x2d
c002e793:	e9 2e 00 00 00       	jmp    c002e7c6 <int_common_stub>

c002e798 <irq14>:
c002e798:	fa                   	cli    
c002e799:	6a 00                	push   0x0
c002e79b:	6a 2e                	push   0x2e
c002e79d:	e9 24 00 00 00       	jmp    c002e7c6 <int_common_stub>

c002e7a2 <irq15>:
c002e7a2:	fa                   	cli    
c002e7a3:	6a 00                	push   0x0
c002e7a5:	6a 2f                	push   0x2f
c002e7a7:	e9 1a 00 00 00       	jmp    c002e7c6 <int_common_stub>

c002e7ac <irq1>:
c002e7ac:	fa                   	cli    
c002e7ad:	6a 00                	push   0x0
c002e7af:	6a 21                	push   0x21
c002e7b1:	eb 13                	jmp    c002e7c6 <int_common_stub>

c002e7b3 <irq2>:
c002e7b3:	fa                   	cli    
c002e7b4:	6a 00                	push   0x0
c002e7b6:	6a 22                	push   0x22
c002e7b8:	eb 0c                	jmp    c002e7c6 <int_common_stub>

c002e7ba <isr96>:
c002e7ba:	6a 00                	push   0x0
c002e7bc:	6a 60                	push   0x60
c002e7be:	fb                   	sti    
c002e7bf:	eb 37                	jmp    c002e7f8 <syscall_common_stub>

c002e7c1 <irq0>:
c002e7c1:	fa                   	cli    
c002e7c2:	6a 00                	push   0x0
c002e7c4:	6a 20                	push   0x20

c002e7c6 <int_common_stub>:
c002e7c6:	60                   	pusha  
c002e7c7:	1e                   	push   ds
c002e7c8:	06                   	push   es
c002e7c9:	0f a0                	push   fs
c002e7cb:	0f a8                	push   gs
c002e7cd:	66 b8 10 00          	mov    ax,0x10
c002e7d1:	66 8e d8             	mov    ds,ax
c002e7d4:	66 8e c0             	mov    es,ax
c002e7d7:	66 8e e0             	mov    fs,ax
c002e7da:	66 8e e8             	mov    gs,ax
c002e7dd:	54                   	push   esp
c002e7de:	fc                   	cld    
c002e7df:	e8 f0 d2 fe ff       	call   c001bad4 <int_handler>
c002e7e4:	81 c4 04 00 00 00    	add    esp,0x4
c002e7ea:	0f a9                	pop    gs
c002e7ec:	0f a1                	pop    fs
c002e7ee:	07                   	pop    es
c002e7ef:	1f                   	pop    ds
c002e7f0:	61                   	popa   
c002e7f1:	81 c4 08 00 00 00    	add    esp,0x8
c002e7f7:	cf                   	iret   

c002e7f8 <syscall_common_stub>:
c002e7f8:	60                   	pusha  
c002e7f9:	1e                   	push   ds
c002e7fa:	06                   	push   es
c002e7fb:	0f a0                	push   fs
c002e7fd:	0f a8                	push   gs
c002e7ff:	66 b8 10 00          	mov    ax,0x10
c002e803:	66 8e d8             	mov    ds,ax
c002e806:	66 8e c0             	mov    es,ax
c002e809:	66 8e e0             	mov    fs,ax
c002e80c:	66 8e e8             	mov    gs,ax
c002e80f:	54                   	push   esp
c002e810:	fc                   	cld    
c002e811:	e8 be d2 fe ff       	call   c001bad4 <int_handler>
c002e816:	81 c4 04 00 00 00    	add    esp,0x4
c002e81c:	0f a9                	pop    gs
c002e81e:	0f a1                	pop    fs
c002e820:	07                   	pop    es
c002e821:	1f                   	pop    ds
c002e822:	e8 94 29 ff ff       	call   c00211bb <KiCheckSignalZ>
c002e827:	3d 00 00 00 00       	cmp    eax,0x0
c002e82c:	0f 84 c0 00 00 00    	je     c002e8f2 <skipSignals>
c002e832:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c002e837:	61                   	popa   
c002e838:	53                   	push   ebx
c002e839:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002e83f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c002e842:	5b                   	pop    ebx
c002e843:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c002e848:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002e84b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002e84e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002e851:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c002e854:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c002e857:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002e85a:	81 c4 08 00 00 00    	add    esp,0x8
c002e860:	5e                   	pop    esi
c002e861:	5b                   	pop    ebx
c002e862:	59                   	pop    ecx
c002e863:	5a                   	pop    edx
c002e864:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c002e867:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002e86a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002e86d:	52                   	push   edx
c002e86e:	51                   	push   ecx
c002e86f:	53                   	push   ebx
c002e870:	56                   	push   esi
c002e871:	81 ec 08 00 00 00    	sub    esp,0x8
c002e877:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002e87a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002e87d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002e880:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002e883:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002e886:	60                   	pusha  
c002e887:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002e88d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002e890:	89 e3                	mov    ebx,esp
c002e892:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c002e895:	52                   	push   edx
c002e896:	68 b6 e8 02 c0       	push   0xc002e8b6
c002e89b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002e89e:	89 dc                	mov    esp,ebx
c002e8a0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c002e8a3:	68 23 00 00 00       	push   0x23
c002e8a8:	51                   	push   ecx
c002e8a9:	68 02 02 00 00       	push   0x202
c002e8ae:	68 1b 00 00 00       	push   0x1b
c002e8b3:	ff 36                	push   DWORD PTR [esi]
c002e8b5:	cf                   	iret   

c002e8b6 <finishSignal>:
c002e8b6:	cd 0f                	int    0xf

c002e8b8 <finishSignal2>:
c002e8b8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002e8be:	e8 75 29 ff ff       	call   c0021238 <KiFinishSignalZ>
c002e8c3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c002e8c9:	68 23 00 00 00       	push   0x23
c002e8ce:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c002e8d1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c002e8d4:	68 1b 00 00 00       	push   0x1b
c002e8d9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002e8dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e8df:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002e8e2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002e8e5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002e8e8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002e8eb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002e8ee:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c002e8f1:	cf                   	iret   

c002e8f2 <skipSignals>:
c002e8f2:	61                   	popa   
c002e8f3:	81 c4 08 00 00 00    	add    esp,0x8
c002e8f9:	cf                   	iret   
c002e8fa:	90                   	nop
c002e8fb:	90                   	nop

c002e8fc <irq16>:
c002e8fc:	fa                   	cli    
c002e8fd:	6a 00                	push   0x0
c002e8ff:	6a 30                	push   0x30
c002e901:	e9 c0 fe ff ff       	jmp    c002e7c6 <int_common_stub>

c002e906 <irq17>:
c002e906:	fa                   	cli    
c002e907:	6a 00                	push   0x0
c002e909:	6a 31                	push   0x31
c002e90b:	e9 b6 fe ff ff       	jmp    c002e7c6 <int_common_stub>

c002e910 <irq18>:
c002e910:	fa                   	cli    
c002e911:	6a 00                	push   0x0
c002e913:	6a 32                	push   0x32
c002e915:	e9 ac fe ff ff       	jmp    c002e7c6 <int_common_stub>

c002e91a <irq19>:
c002e91a:	fa                   	cli    
c002e91b:	6a 00                	push   0x0
c002e91d:	6a 33                	push   0x33
c002e91f:	e9 a2 fe ff ff       	jmp    c002e7c6 <int_common_stub>

c002e924 <irq20>:
c002e924:	fa                   	cli    
c002e925:	6a 00                	push   0x0
c002e927:	6a 34                	push   0x34
c002e929:	e9 98 fe ff ff       	jmp    c002e7c6 <int_common_stub>

c002e92e <irq21>:
c002e92e:	fa                   	cli    
c002e92f:	6a 00                	push   0x0
c002e931:	6a 35                	push   0x35
c002e933:	e9 8e fe ff ff       	jmp    c002e7c6 <int_common_stub>

c002e938 <irq22>:
c002e938:	fa                   	cli    
c002e939:	6a 00                	push   0x0
c002e93b:	6a 36                	push   0x36
c002e93d:	e9 84 fe ff ff       	jmp    c002e7c6 <int_common_stub>

c002e942 <irq23>:
c002e942:	fa                   	cli    
c002e943:	6a 00                	push   0x0
c002e945:	6a 37                	push   0x37
c002e947:	e9 7a fe ff ff       	jmp    c002e7c6 <int_common_stub>
c002e94c:	66 90                	xchg   ax,ax
c002e94e:	66 90                	xchg   ax,ax

c002e950 <i386GetRDRAND>:
c002e950:	b9 64 00 00 00       	mov    ecx,0x64

c002e955 <retry>:
c002e955:	0f c7 f0             	rdrand eax
c002e958:	72 05                	jb     c002e95f <retry.done>
c002e95a:	e2 f9                	loop   c002e955 <retry>

c002e95c <retry.fail>:
c002e95c:	31 c0                	xor    eax,eax
c002e95e:	c3                   	ret    

c002e95f <retry.done>:
c002e95f:	c3                   	ret    

c002e960 <sseDetect>:
c002e960:	b8 01 00 00 00       	mov    eax,0x1
c002e965:	0f a2                	cpuid  
c002e967:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002e96d:	74 06                	je     c002e975 <sseDetect.noSSE>
c002e96f:	b8 01 00 00 00       	mov    eax,0x1
c002e974:	c3                   	ret    

c002e975 <sseDetect.noSSE>:
c002e975:	31 c0                	xor    eax,eax
c002e977:	c3                   	ret    

c002e978 <sseSave>:
c002e978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e97c:	0f ae 00             	fxsave [eax]
c002e97f:	c3                   	ret    

c002e980 <sseLoad>:
c002e980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e984:	0f ae 08             	fxrstor [eax]
c002e987:	c3                   	ret    

c002e988 <sseInit>:
c002e988:	e8 42 00 00 00       	call   c002e9cf <x87Init>
c002e98d:	0f 20 e0             	mov    eax,cr4
c002e990:	66 0d 00 06          	or     ax,0x600
c002e994:	0f 22 e0             	mov    cr4,eax
c002e997:	c3                   	ret    

c002e998 <sseClose>:
c002e998:	c3                   	ret    
c002e999:	66 90                	xchg   ax,ax
c002e99b:	66 90                	xchg   ax,ax
c002e99d:	66 90                	xchg   ax,ax
c002e99f:	90                   	nop

c002e9a0 <value_37F>:
c002e9a0:	7f 03                	jg     c002e9a5 <value_37A+0x1>

c002e9a2 <value_37E>:
c002e9a2:	7e 03                	jle    c002e9a7 <x87Detect+0x1>

c002e9a4 <value_37A>:
c002e9a4:	7a 03                	jp     c002e9a9 <x87Detect+0x3>

c002e9a6 <x87Detect>:
c002e9a6:	b8 01 00 00 00       	mov    eax,0x1
c002e9ab:	0f a2                	cpuid  
c002e9ad:	f7 c2 01 00 00 00    	test   edx,0x1
c002e9b3:	74 06                	je     c002e9bb <x87Detect.nox87>
c002e9b5:	b8 01 00 00 00       	mov    eax,0x1
c002e9ba:	c3                   	ret    

c002e9bb <x87Detect.nox87>:
c002e9bb:	b8 00 00 00 00       	mov    eax,0x0
c002e9c0:	c3                   	ret    

c002e9c1 <x87Save>:
c002e9c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e9c5:	dd 30                	fnsave [eax]
c002e9c7:	c3                   	ret    

c002e9c8 <x87Load>:
c002e9c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e9cc:	dd 20                	frstor [eax]
c002e9ce:	c3                   	ret    

c002e9cf <x87Init>:
c002e9cf:	0f 20 c0             	mov    eax,cr0
c002e9d2:	66 25 fb ff          	and    ax,0xfffb
c002e9d6:	66 0d 22 00          	or     ax,0x22
c002e9da:	0f 22 c0             	mov    cr0,eax
c002e9dd:	db e3                	fninit 
c002e9df:	0f 06                	clts   
c002e9e1:	d9 2d a4 e9 02 c0    	fldcw  WORD PTR ds:0xc002e9a4
c002e9e7:	c3                   	ret    

c002e9e8 <x87Close>:
c002e9e8:	c3                   	ret    
c002e9e9:	66 90                	xchg   ax,ax
c002e9eb:	90                   	nop

c002e9ec <__do_global_ctors_aux>:
c002e9ec:	a1 a0 f9 02 c0       	mov    eax,ds:0xc002f9a0
c002e9f1:	83 f8 ff             	cmp    eax,0xffffffff
c002e9f4:	74 1a                	je     c002ea10 <__do_global_ctors_aux+0x24>
c002e9f6:	55                   	push   ebp
c002e9f7:	89 e5                	mov    ebp,esp
c002e9f9:	53                   	push   ebx
c002e9fa:	52                   	push   edx
c002e9fb:	bb a0 f9 02 c0       	mov    ebx,0xc002f9a0
c002ea00:	ff d0                	call   eax
c002ea02:	83 eb 04             	sub    ebx,0x4
c002ea05:	8b 03                	mov    eax,DWORD PTR [ebx]
c002ea07:	83 f8 ff             	cmp    eax,0xffffffff
c002ea0a:	75 f4                	jne    c002ea00 <__do_global_ctors_aux+0x14>
c002ea0c:	58                   	pop    eax
c002ea0d:	5b                   	pop    ebx
c002ea0e:	5d                   	pop    ebp
c002ea0f:	c3                   	ret    
c002ea10:	c3                   	ret    
c002ea11:	66 90                	xchg   ax,ax
c002ea13:	90                   	nop

c002ea14 <__divdi3>:
c002ea14:	55                   	push   ebp
c002ea15:	57                   	push   edi
c002ea16:	56                   	push   esi
c002ea17:	53                   	push   ebx
c002ea18:	83 ec 1c             	sub    esp,0x1c
c002ea1b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002ea1f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002ea23:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002ea26:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002ea2a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002ea2e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002ea32:	85 db                	test   ebx,ebx
c002ea34:	0f 88 8e 00 00 00    	js     c002eac8 <__divdi3+0xb4>
c002ea3a:	89 dd                	mov    ebp,ebx
c002ea3c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002ea44:	89 d3                	mov    ebx,edx
c002ea46:	85 d2                	test   edx,edx
c002ea48:	79 0d                	jns    c002ea57 <__divdi3+0x43>
c002ea4a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002ea4e:	f7 d8                	neg    eax
c002ea50:	83 d2 00             	adc    edx,0x0
c002ea53:	f7 da                	neg    edx
c002ea55:	89 d3                	mov    ebx,edx
c002ea57:	89 c7                	mov    edi,eax
c002ea59:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002ea5c:	85 db                	test   ebx,ebx
c002ea5e:	75 48                	jne    c002eaa8 <__divdi3+0x94>
c002ea60:	39 ef                	cmp    edi,ebp
c002ea62:	76 24                	jbe    c002ea88 <__divdi3+0x74>
c002ea64:	89 ea                	mov    edx,ebp
c002ea66:	f7 f7                	div    edi
c002ea68:	89 c1                	mov    ecx,eax
c002ea6a:	31 f6                	xor    esi,esi
c002ea6c:	89 c8                	mov    eax,ecx
c002ea6e:	89 f2                	mov    edx,esi
c002ea70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002ea74:	85 c9                	test   ecx,ecx
c002ea76:	74 07                	je     c002ea7f <__divdi3+0x6b>
c002ea78:	f7 d8                	neg    eax
c002ea7a:	83 d2 00             	adc    edx,0x0
c002ea7d:	f7 da                	neg    edx
c002ea7f:	83 c4 1c             	add    esp,0x1c
c002ea82:	5b                   	pop    ebx
c002ea83:	5e                   	pop    esi
c002ea84:	5f                   	pop    edi
c002ea85:	5d                   	pop    ebp
c002ea86:	c3                   	ret    
c002ea87:	90                   	nop
c002ea88:	85 ff                	test   edi,edi
c002ea8a:	75 0b                	jne    c002ea97 <__divdi3+0x83>
c002ea8c:	b8 01 00 00 00       	mov    eax,0x1
c002ea91:	31 d2                	xor    edx,edx
c002ea93:	f7 f3                	div    ebx
c002ea95:	89 c7                	mov    edi,eax
c002ea97:	31 d2                	xor    edx,edx
c002ea99:	89 e8                	mov    eax,ebp
c002ea9b:	f7 f7                	div    edi
c002ea9d:	89 c6                	mov    esi,eax
c002ea9f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002eaa2:	f7 f7                	div    edi
c002eaa4:	89 c1                	mov    ecx,eax
c002eaa6:	eb c4                	jmp    c002ea6c <__divdi3+0x58>
c002eaa8:	39 eb                	cmp    ebx,ebp
c002eaaa:	77 3c                	ja     c002eae8 <__divdi3+0xd4>
c002eaac:	0f bd f3             	bsr    esi,ebx
c002eaaf:	83 f6 1f             	xor    esi,0x1f
c002eab2:	75 40                	jne    c002eaf4 <__divdi3+0xe0>
c002eab4:	39 eb                	cmp    ebx,ebp
c002eab6:	72 09                	jb     c002eac1 <__divdi3+0xad>
c002eab8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002eabb:	0f 87 97 00 00 00    	ja     c002eb58 <__divdi3+0x144>
c002eac1:	b9 01 00 00 00       	mov    ecx,0x1
c002eac6:	eb a4                	jmp    c002ea6c <__divdi3+0x58>
c002eac8:	f7 d9                	neg    ecx
c002eaca:	83 d3 00             	adc    ebx,0x0
c002eacd:	f7 db                	neg    ebx
c002eacf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002ead2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002ead6:	89 dd                	mov    ebp,ebx
c002ead8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002eae0:	e9 5f ff ff ff       	jmp    c002ea44 <__divdi3+0x30>
c002eae5:	8d 76 00             	lea    esi,[esi+0x0]
c002eae8:	31 f6                	xor    esi,esi
c002eaea:	31 c9                	xor    ecx,ecx
c002eaec:	e9 7b ff ff ff       	jmp    c002ea6c <__divdi3+0x58>
c002eaf1:	8d 76 00             	lea    esi,[esi+0x0]
c002eaf4:	b8 20 00 00 00       	mov    eax,0x20
c002eaf9:	29 f0                	sub    eax,esi
c002eafb:	89 f1                	mov    ecx,esi
c002eafd:	d3 e3                	shl    ebx,cl
c002eaff:	89 fa                	mov    edx,edi
c002eb01:	88 c1                	mov    cl,al
c002eb03:	d3 ea                	shr    edx,cl
c002eb05:	09 da                	or     edx,ebx
c002eb07:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002eb0b:	89 f1                	mov    ecx,esi
c002eb0d:	d3 e7                	shl    edi,cl
c002eb0f:	89 eb                	mov    ebx,ebp
c002eb11:	88 c1                	mov    cl,al
c002eb13:	d3 eb                	shr    ebx,cl
c002eb15:	89 f1                	mov    ecx,esi
c002eb17:	d3 e5                	shl    ebp,cl
c002eb19:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002eb1c:	88 c1                	mov    cl,al
c002eb1e:	d3 ea                	shr    edx,cl
c002eb20:	09 d5                	or     ebp,edx
c002eb22:	89 e8                	mov    eax,ebp
c002eb24:	89 da                	mov    edx,ebx
c002eb26:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002eb2a:	89 d3                	mov    ebx,edx
c002eb2c:	89 c5                	mov    ebp,eax
c002eb2e:	f7 e7                	mul    edi
c002eb30:	39 d3                	cmp    ebx,edx
c002eb32:	72 18                	jb     c002eb4c <__divdi3+0x138>
c002eb34:	74 0a                	je     c002eb40 <__divdi3+0x12c>
c002eb36:	89 e9                	mov    ecx,ebp
c002eb38:	31 f6                	xor    esi,esi
c002eb3a:	e9 2d ff ff ff       	jmp    c002ea6c <__divdi3+0x58>
c002eb3f:	90                   	nop
c002eb40:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002eb43:	89 f1                	mov    ecx,esi
c002eb45:	d3 e7                	shl    edi,cl
c002eb47:	39 c7                	cmp    edi,eax
c002eb49:	73 eb                	jae    c002eb36 <__divdi3+0x122>
c002eb4b:	90                   	nop
c002eb4c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002eb4f:	31 f6                	xor    esi,esi
c002eb51:	e9 16 ff ff ff       	jmp    c002ea6c <__divdi3+0x58>
c002eb56:	66 90                	xchg   ax,ax
c002eb58:	31 c9                	xor    ecx,ecx
c002eb5a:	e9 0d ff ff ff       	jmp    c002ea6c <__divdi3+0x58>
c002eb5f:	90                   	nop

c002eb60 <__moddi3>:
c002eb60:	55                   	push   ebp
c002eb61:	57                   	push   edi
c002eb62:	56                   	push   esi
c002eb63:	53                   	push   ebx
c002eb64:	83 ec 2c             	sub    esp,0x2c
c002eb67:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002eb6b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002eb6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002eb73:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002eb77:	85 db                	test   ebx,ebx
c002eb79:	0f 88 85 00 00 00    	js     c002ec04 <__moddi3+0xa4>
c002eb7f:	89 de                	mov    esi,ebx
c002eb81:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002eb89:	89 d7                	mov    edi,edx
c002eb8b:	85 d2                	test   edx,edx
c002eb8d:	79 09                	jns    c002eb98 <__moddi3+0x38>
c002eb8f:	f7 d8                	neg    eax
c002eb91:	83 d2 00             	adc    edx,0x0
c002eb94:	f7 da                	neg    edx
c002eb96:	89 d7                	mov    edi,edx
c002eb98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002eb9c:	89 cd                	mov    ebp,ecx
c002eb9e:	85 ff                	test   edi,edi
c002eba0:	75 52                	jne    c002ebf4 <__moddi3+0x94>
c002eba2:	89 c3                	mov    ebx,eax
c002eba4:	39 f0                	cmp    eax,esi
c002eba6:	76 24                	jbe    c002ebcc <__moddi3+0x6c>
c002eba8:	89 c8                	mov    eax,ecx
c002ebaa:	89 f2                	mov    edx,esi
c002ebac:	f7 f3                	div    ebx
c002ebae:	89 d6                	mov    esi,edx
c002ebb0:	89 f0                	mov    eax,esi
c002ebb2:	31 d2                	xor    edx,edx
c002ebb4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002ebb8:	85 c9                	test   ecx,ecx
c002ebba:	74 07                	je     c002ebc3 <__moddi3+0x63>
c002ebbc:	f7 d8                	neg    eax
c002ebbe:	83 d2 00             	adc    edx,0x0
c002ebc1:	f7 da                	neg    edx
c002ebc3:	83 c4 2c             	add    esp,0x2c
c002ebc6:	5b                   	pop    ebx
c002ebc7:	5e                   	pop    esi
c002ebc8:	5f                   	pop    edi
c002ebc9:	5d                   	pop    ebp
c002ebca:	c3                   	ret    
c002ebcb:	90                   	nop
c002ebcc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002ebd0:	85 db                	test   ebx,ebx
c002ebd2:	75 0d                	jne    c002ebe1 <__moddi3+0x81>
c002ebd4:	b8 01 00 00 00       	mov    eax,0x1
c002ebd9:	31 d2                	xor    edx,edx
c002ebdb:	f7 f7                	div    edi
c002ebdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002ebe1:	89 f0                	mov    eax,esi
c002ebe3:	31 d2                	xor    edx,edx
c002ebe5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002ebe9:	f7 f7                	div    edi
c002ebeb:	89 e8                	mov    eax,ebp
c002ebed:	f7 f7                	div    edi
c002ebef:	89 d6                	mov    esi,edx
c002ebf1:	eb bd                	jmp    c002ebb0 <__moddi3+0x50>
c002ebf3:	90                   	nop
c002ebf4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002ebf8:	39 f7                	cmp    edi,esi
c002ebfa:	76 20                	jbe    c002ec1c <__moddi3+0xbc>
c002ebfc:	89 c8                	mov    eax,ecx
c002ebfe:	89 f2                	mov    edx,esi
c002ec00:	eb b2                	jmp    c002ebb4 <__moddi3+0x54>
c002ec02:	66 90                	xchg   ax,ax
c002ec04:	f7 d9                	neg    ecx
c002ec06:	83 d3 00             	adc    ebx,0x0
c002ec09:	f7 db                	neg    ebx
c002ec0b:	89 de                	mov    esi,ebx
c002ec0d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c002ec15:	e9 6f ff ff ff       	jmp    c002eb89 <__moddi3+0x29>
c002ec1a:	66 90                	xchg   ax,ax
c002ec1c:	0f bd c7             	bsr    eax,edi
c002ec1f:	83 f0 1f             	xor    eax,0x1f
c002ec22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002ec26:	75 24                	jne    c002ec4c <__moddi3+0xec>
c002ec28:	39 f7                	cmp    edi,esi
c002ec2a:	72 06                	jb     c002ec32 <__moddi3+0xd2>
c002ec2c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002ec30:	77 0c                	ja     c002ec3e <__moddi3+0xde>
c002ec32:	89 e9                	mov    ecx,ebp
c002ec34:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002ec38:	19 fe                	sbb    esi,edi
c002ec3a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002ec3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002ec42:	89 f2                	mov    edx,esi
c002ec44:	e9 6b ff ff ff       	jmp    c002ebb4 <__moddi3+0x54>
c002ec49:	8d 76 00             	lea    esi,[esi+0x0]
c002ec4c:	b8 20 00 00 00       	mov    eax,0x20
c002ec51:	89 c2                	mov    edx,eax
c002ec53:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002ec57:	29 da                	sub    edx,ebx
c002ec59:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002ec5d:	88 d9                	mov    cl,bl
c002ec5f:	d3 e7                	shl    edi,cl
c002ec61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002ec65:	88 d1                	mov    cl,dl
c002ec67:	d3 e8                	shr    eax,cl
c002ec69:	09 c7                	or     edi,eax
c002ec6b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002ec6f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002ec73:	89 d8                	mov    eax,ebx
c002ec75:	88 d9                	mov    cl,bl
c002ec77:	d3 e7                	shl    edi,cl
c002ec79:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002ec7d:	89 f3                	mov    ebx,esi
c002ec7f:	88 d1                	mov    cl,dl
c002ec81:	d3 eb                	shr    ebx,cl
c002ec83:	89 c7                	mov    edi,eax
c002ec85:	88 c1                	mov    cl,al
c002ec87:	d3 e6                	shl    esi,cl
c002ec89:	89 e8                	mov    eax,ebp
c002ec8b:	88 d1                	mov    cl,dl
c002ec8d:	d3 e8                	shr    eax,cl
c002ec8f:	09 f0                	or     eax,esi
c002ec91:	89 f9                	mov    ecx,edi
c002ec93:	d3 e5                	shl    ebp,cl
c002ec95:	89 da                	mov    edx,ebx
c002ec97:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002ec9b:	89 d3                	mov    ebx,edx
c002ec9d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002eca1:	89 c6                	mov    esi,eax
c002eca3:	89 d1                	mov    ecx,edx
c002eca5:	39 d3                	cmp    ebx,edx
c002eca7:	72 27                	jb     c002ecd0 <__moddi3+0x170>
c002eca9:	74 21                	je     c002eccc <__moddi3+0x16c>
c002ecab:	29 f5                	sub    ebp,esi
c002ecad:	19 cb                	sbb    ebx,ecx
c002ecaf:	89 de                	mov    esi,ebx
c002ecb1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c002ecb5:	d3 e6                	shl    esi,cl
c002ecb7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002ecbb:	89 f9                	mov    ecx,edi
c002ecbd:	d3 ed                	shr    ebp,cl
c002ecbf:	09 ee                	or     esi,ebp
c002ecc1:	89 f0                	mov    eax,esi
c002ecc3:	d3 eb                	shr    ebx,cl
c002ecc5:	89 da                	mov    edx,ebx
c002ecc7:	e9 e8 fe ff ff       	jmp    c002ebb4 <__moddi3+0x54>
c002eccc:	39 c5                	cmp    ebp,eax
c002ecce:	73 db                	jae    c002ecab <__moddi3+0x14b>
c002ecd0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002ecd4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002ecd8:	89 d1                	mov    ecx,edx
c002ecda:	89 c6                	mov    esi,eax
c002ecdc:	eb cd                	jmp    c002ecab <__moddi3+0x14b>
c002ecde:	66 90                	xchg   ax,ax

c002ece0 <__udivdi3>:
c002ece0:	55                   	push   ebp
c002ece1:	57                   	push   edi
c002ece2:	56                   	push   esi
c002ece3:	53                   	push   ebx
c002ece4:	83 ec 1c             	sub    esp,0x1c
c002ece7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002eceb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002ecef:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002ecf3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002ecf7:	85 d2                	test   edx,edx
c002ecf9:	75 41                	jne    c002ed3c <__udivdi3+0x5c>
c002ecfb:	39 f7                	cmp    edi,esi
c002ecfd:	76 15                	jbe    c002ed14 <__udivdi3+0x34>
c002ecff:	89 e8                	mov    eax,ebp
c002ed01:	89 f2                	mov    edx,esi
c002ed03:	f7 f7                	div    edi
c002ed05:	31 db                	xor    ebx,ebx
c002ed07:	89 da                	mov    edx,ebx
c002ed09:	83 c4 1c             	add    esp,0x1c
c002ed0c:	5b                   	pop    ebx
c002ed0d:	5e                   	pop    esi
c002ed0e:	5f                   	pop    edi
c002ed0f:	5d                   	pop    ebp
c002ed10:	c3                   	ret    
c002ed11:	8d 76 00             	lea    esi,[esi+0x0]
c002ed14:	89 f9                	mov    ecx,edi
c002ed16:	85 ff                	test   edi,edi
c002ed18:	75 0b                	jne    c002ed25 <__udivdi3+0x45>
c002ed1a:	b8 01 00 00 00       	mov    eax,0x1
c002ed1f:	31 d2                	xor    edx,edx
c002ed21:	f7 f7                	div    edi
c002ed23:	89 c1                	mov    ecx,eax
c002ed25:	31 d2                	xor    edx,edx
c002ed27:	89 f0                	mov    eax,esi
c002ed29:	f7 f1                	div    ecx
c002ed2b:	89 c3                	mov    ebx,eax
c002ed2d:	89 e8                	mov    eax,ebp
c002ed2f:	f7 f1                	div    ecx
c002ed31:	89 da                	mov    edx,ebx
c002ed33:	83 c4 1c             	add    esp,0x1c
c002ed36:	5b                   	pop    ebx
c002ed37:	5e                   	pop    esi
c002ed38:	5f                   	pop    edi
c002ed39:	5d                   	pop    ebp
c002ed3a:	c3                   	ret    
c002ed3b:	90                   	nop
c002ed3c:	39 f2                	cmp    edx,esi
c002ed3e:	77 1c                	ja     c002ed5c <__udivdi3+0x7c>
c002ed40:	0f bd da             	bsr    ebx,edx
c002ed43:	83 f3 1f             	xor    ebx,0x1f
c002ed46:	75 24                	jne    c002ed6c <__udivdi3+0x8c>
c002ed48:	39 f2                	cmp    edx,esi
c002ed4a:	72 08                	jb     c002ed54 <__udivdi3+0x74>
c002ed4c:	39 ef                	cmp    edi,ebp
c002ed4e:	0f 87 84 00 00 00    	ja     c002edd8 <__udivdi3+0xf8>
c002ed54:	b8 01 00 00 00       	mov    eax,0x1
c002ed59:	eb ac                	jmp    c002ed07 <__udivdi3+0x27>
c002ed5b:	90                   	nop
c002ed5c:	31 db                	xor    ebx,ebx
c002ed5e:	31 c0                	xor    eax,eax
c002ed60:	89 da                	mov    edx,ebx
c002ed62:	83 c4 1c             	add    esp,0x1c
c002ed65:	5b                   	pop    ebx
c002ed66:	5e                   	pop    esi
c002ed67:	5f                   	pop    edi
c002ed68:	5d                   	pop    ebp
c002ed69:	c3                   	ret    
c002ed6a:	66 90                	xchg   ax,ax
c002ed6c:	b8 20 00 00 00       	mov    eax,0x20
c002ed71:	29 d8                	sub    eax,ebx
c002ed73:	88 d9                	mov    cl,bl
c002ed75:	d3 e2                	shl    edx,cl
c002ed77:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002ed7b:	89 fa                	mov    edx,edi
c002ed7d:	88 c1                	mov    cl,al
c002ed7f:	d3 ea                	shr    edx,cl
c002ed81:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002ed85:	09 d1                	or     ecx,edx
c002ed87:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002ed8b:	88 d9                	mov    cl,bl
c002ed8d:	d3 e7                	shl    edi,cl
c002ed8f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002ed93:	89 f7                	mov    edi,esi
c002ed95:	88 c1                	mov    cl,al
c002ed97:	d3 ef                	shr    edi,cl
c002ed99:	88 d9                	mov    cl,bl
c002ed9b:	d3 e6                	shl    esi,cl
c002ed9d:	89 ea                	mov    edx,ebp
c002ed9f:	88 c1                	mov    cl,al
c002eda1:	d3 ea                	shr    edx,cl
c002eda3:	09 d6                	or     esi,edx
c002eda5:	89 f0                	mov    eax,esi
c002eda7:	89 fa                	mov    edx,edi
c002eda9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002edad:	89 d7                	mov    edi,edx
c002edaf:	89 c6                	mov    esi,eax
c002edb1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002edb5:	39 d7                	cmp    edi,edx
c002edb7:	72 13                	jb     c002edcc <__udivdi3+0xec>
c002edb9:	74 09                	je     c002edc4 <__udivdi3+0xe4>
c002edbb:	89 f0                	mov    eax,esi
c002edbd:	31 db                	xor    ebx,ebx
c002edbf:	e9 43 ff ff ff       	jmp    c002ed07 <__udivdi3+0x27>
c002edc4:	88 d9                	mov    cl,bl
c002edc6:	d3 e5                	shl    ebp,cl
c002edc8:	39 c5                	cmp    ebp,eax
c002edca:	73 ef                	jae    c002edbb <__udivdi3+0xdb>
c002edcc:	8d 46 ff             	lea    eax,[esi-0x1]
c002edcf:	31 db                	xor    ebx,ebx
c002edd1:	e9 31 ff ff ff       	jmp    c002ed07 <__udivdi3+0x27>
c002edd6:	66 90                	xchg   ax,ax
c002edd8:	31 c0                	xor    eax,eax
c002edda:	e9 28 ff ff ff       	jmp    c002ed07 <__udivdi3+0x27>
c002eddf:	90                   	nop

c002ede0 <__umoddi3>:
c002ede0:	55                   	push   ebp
c002ede1:	57                   	push   edi
c002ede2:	56                   	push   esi
c002ede3:	53                   	push   ebx
c002ede4:	83 ec 1c             	sub    esp,0x1c
c002ede7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002edeb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002edef:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002edf3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002edf7:	89 da                	mov    edx,ebx
c002edf9:	85 c0                	test   eax,eax
c002edfb:	75 37                	jne    c002ee34 <__umoddi3+0x54>
c002edfd:	39 df                	cmp    edi,ebx
c002edff:	76 13                	jbe    c002ee14 <__umoddi3+0x34>
c002ee01:	89 f0                	mov    eax,esi
c002ee03:	f7 f7                	div    edi
c002ee05:	89 d0                	mov    eax,edx
c002ee07:	31 d2                	xor    edx,edx
c002ee09:	83 c4 1c             	add    esp,0x1c
c002ee0c:	5b                   	pop    ebx
c002ee0d:	5e                   	pop    esi
c002ee0e:	5f                   	pop    edi
c002ee0f:	5d                   	pop    ebp
c002ee10:	c3                   	ret    
c002ee11:	8d 76 00             	lea    esi,[esi+0x0]
c002ee14:	89 fd                	mov    ebp,edi
c002ee16:	85 ff                	test   edi,edi
c002ee18:	75 0b                	jne    c002ee25 <__umoddi3+0x45>
c002ee1a:	b8 01 00 00 00       	mov    eax,0x1
c002ee1f:	31 d2                	xor    edx,edx
c002ee21:	f7 f7                	div    edi
c002ee23:	89 c5                	mov    ebp,eax
c002ee25:	89 d8                	mov    eax,ebx
c002ee27:	31 d2                	xor    edx,edx
c002ee29:	f7 f5                	div    ebp
c002ee2b:	89 f0                	mov    eax,esi
c002ee2d:	f7 f5                	div    ebp
c002ee2f:	89 d0                	mov    eax,edx
c002ee31:	eb d4                	jmp    c002ee07 <__umoddi3+0x27>
c002ee33:	90                   	nop
c002ee34:	89 f1                	mov    ecx,esi
c002ee36:	39 d8                	cmp    eax,ebx
c002ee38:	76 0a                	jbe    c002ee44 <__umoddi3+0x64>
c002ee3a:	89 f0                	mov    eax,esi
c002ee3c:	83 c4 1c             	add    esp,0x1c
c002ee3f:	5b                   	pop    ebx
c002ee40:	5e                   	pop    esi
c002ee41:	5f                   	pop    edi
c002ee42:	5d                   	pop    ebp
c002ee43:	c3                   	ret    
c002ee44:	0f bd e8             	bsr    ebp,eax
c002ee47:	83 f5 1f             	xor    ebp,0x1f
c002ee4a:	75 1c                	jne    c002ee68 <__umoddi3+0x88>
c002ee4c:	39 d8                	cmp    eax,ebx
c002ee4e:	72 04                	jb     c002ee54 <__umoddi3+0x74>
c002ee50:	39 f7                	cmp    edi,esi
c002ee52:	77 08                	ja     c002ee5c <__umoddi3+0x7c>
c002ee54:	89 da                	mov    edx,ebx
c002ee56:	29 fe                	sub    esi,edi
c002ee58:	19 c2                	sbb    edx,eax
c002ee5a:	89 f1                	mov    ecx,esi
c002ee5c:	89 c8                	mov    eax,ecx
c002ee5e:	83 c4 1c             	add    esp,0x1c
c002ee61:	5b                   	pop    ebx
c002ee62:	5e                   	pop    esi
c002ee63:	5f                   	pop    edi
c002ee64:	5d                   	pop    ebp
c002ee65:	c3                   	ret    
c002ee66:	66 90                	xchg   ax,ax
c002ee68:	ba 20 00 00 00       	mov    edx,0x20
c002ee6d:	29 ea                	sub    edx,ebp
c002ee6f:	89 e9                	mov    ecx,ebp
c002ee71:	d3 e0                	shl    eax,cl
c002ee73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002ee77:	89 f8                	mov    eax,edi
c002ee79:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002ee7d:	88 d1                	mov    cl,dl
c002ee7f:	d3 e8                	shr    eax,cl
c002ee81:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002ee85:	09 c1                	or     ecx,eax
c002ee87:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002ee8b:	89 e9                	mov    ecx,ebp
c002ee8d:	d3 e7                	shl    edi,cl
c002ee8f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002ee93:	89 d8                	mov    eax,ebx
c002ee95:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002ee99:	88 d1                	mov    cl,dl
c002ee9b:	d3 e8                	shr    eax,cl
c002ee9d:	89 c7                	mov    edi,eax
c002ee9f:	89 e9                	mov    ecx,ebp
c002eea1:	d3 e3                	shl    ebx,cl
c002eea3:	89 f0                	mov    eax,esi
c002eea5:	88 d1                	mov    cl,dl
c002eea7:	d3 e8                	shr    eax,cl
c002eea9:	09 d8                	or     eax,ebx
c002eeab:	89 e9                	mov    ecx,ebp
c002eead:	d3 e6                	shl    esi,cl
c002eeaf:	89 f3                	mov    ebx,esi
c002eeb1:	89 fa                	mov    edx,edi
c002eeb3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002eeb7:	89 d1                	mov    ecx,edx
c002eeb9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002eebd:	89 c6                	mov    esi,eax
c002eebf:	89 d7                	mov    edi,edx
c002eec1:	39 d1                	cmp    ecx,edx
c002eec3:	72 27                	jb     c002eeec <__umoddi3+0x10c>
c002eec5:	74 21                	je     c002eee8 <__umoddi3+0x108>
c002eec7:	89 ca                	mov    edx,ecx
c002eec9:	29 f3                	sub    ebx,esi
c002eecb:	19 fa                	sbb    edx,edi
c002eecd:	89 d0                	mov    eax,edx
c002eecf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002eed3:	d3 e0                	shl    eax,cl
c002eed5:	89 e9                	mov    ecx,ebp
c002eed7:	d3 eb                	shr    ebx,cl
c002eed9:	09 d8                	or     eax,ebx
c002eedb:	d3 ea                	shr    edx,cl
c002eedd:	83 c4 1c             	add    esp,0x1c
c002eee0:	5b                   	pop    ebx
c002eee1:	5e                   	pop    esi
c002eee2:	5f                   	pop    edi
c002eee3:	5d                   	pop    ebp
c002eee4:	c3                   	ret    
c002eee5:	8d 76 00             	lea    esi,[esi+0x0]
c002eee8:	39 c3                	cmp    ebx,eax
c002eeea:	73 db                	jae    c002eec7 <__umoddi3+0xe7>
c002eeec:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002eef0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c002eef4:	89 d7                	mov    edi,edx
c002eef6:	89 c6                	mov    esi,eax
c002eef8:	eb cd                	jmp    c002eec7 <__umoddi3+0xe7>

Disassembly of section .init:

c002eefa <_init>:
c002eefa:	55                   	push   ebp
c002eefb:	89 e5                	mov    ebp,esp
c002eefd:	e8 f2 11 fd ff       	call   c00000f4 <frame_dummy>
c002ef02:	e8 e5 fa ff ff       	call   c002e9ec <__do_global_ctors_aux>
c002ef07:	5d                   	pop    ebp
c002ef08:	c3                   	ret    

Disassembly of section .fini:

c002ef09 <_fini>:
c002ef09:	55                   	push   ebp
c002ef0a:	89 e5                	mov    ebp,esp
c002ef0c:	e8 73 11 fd ff       	call   c0000084 <__do_global_dtors_aux>
c002ef11:	5d                   	pop    ebp
c002ef12:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c002ef14 <Computer::~Computer()>:
c002ef14:	83 ec 0c             	sub    esp,0xc
c002ef17:	ba 8c 17 03 c0       	mov    edx,0xc003178c
c002ef1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef20:	89 10                	mov    DWORD PTR [eax],edx
c002ef22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef26:	83 ec 0c             	sub    esp,0xc
c002ef29:	50                   	push   eax
c002ef2a:	e8 e5 c5 fe ff       	call   c001b514 <Device::~Device()>
c002ef2f:	83 c4 10             	add    esp,0x10
c002ef32:	90                   	nop
c002ef33:	83 c4 0c             	add    esp,0xc
c002ef36:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002ef38 <Computer::~Computer()>:
c002ef38:	83 ec 0c             	sub    esp,0xc
c002ef3b:	83 ec 0c             	sub    esp,0xc
c002ef3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ef42:	e8 cd ff ff ff       	call   c002ef14 <Computer::~Computer()>
c002ef47:	83 c4 10             	add    esp,0x10
c002ef4a:	83 ec 08             	sub    esp,0x8
c002ef4d:	68 70 01 00 00       	push   0x170
c002ef52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ef56:	e8 cd a3 fe ff       	call   c0019328 <operator delete(void*, unsigned long)>
c002ef5b:	83 c4 10             	add    esp,0x10
c002ef5e:	83 c4 0c             	add    esp,0xc
c002ef61:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c002ef62 <idleCommon()>:
c002ef62:	83 ec 0c             	sub    esp,0xc
c002ef65:	fa                   	cli    
c002ef66:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c002ef6c:	e8 2b 68 ff ff       	call   c002579c <schedule()>
c002ef71:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002ef76:	48                   	dec    eax
c002ef77:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002ef7c:	75 01                	jne    c002ef7f <idleCommon()+0x1d>
c002ef7e:	fb                   	sti    
c002ef7f:	83 c4 0c             	add    esp,0xc
c002ef82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002ef84 <LinkedList<UnixFile>::~LinkedList()>:
c002ef84:	90                   	nop
c002ef85:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002ef86 <LinkedList<UnixFile>::LinkedList()>:
c002ef86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef8a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ef90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef94:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ef9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef9f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002efa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efaa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002efb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efb4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002efbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efbf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002efc6:	90                   	nop
c002efc7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002efc8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002efc8:	83 ec 0c             	sub    esp,0xc
c002efcb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002efd0:	75 10                	jne    c002efe2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002efd2:	83 ec 0c             	sub    esp,0xc
c002efd5:	68 a4 19 03 c0       	push   0xc00319a4
c002efda:	e8 af 17 ff ff       	call   c002078e <KePanic(char const*)>
c002efdf:	83 c4 10             	add    esp,0x10
c002efe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efe6:	8b 00                	mov    eax,DWORD PTR [eax]
c002efe8:	85 c0                	test   eax,eax
c002efea:	74 34                	je     c002f020 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002efec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eff0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eff3:	85 c0                	test   eax,eax
c002eff5:	74 29                	je     c002f020 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002eff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002effb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002effe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f002:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f009:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f00d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002f010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f014:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f017:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f01e:	eb 65                	jmp    c002f085 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002f020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f024:	8b 00                	mov    eax,DWORD PTR [eax]
c002f026:	85 c0                	test   eax,eax
c002f028:	75 4b                	jne    c002f075 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002f02a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f02e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f031:	85 c0                	test   eax,eax
c002f033:	75 40                	jne    c002f075 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002f035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f039:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f03d:	89 10                	mov    DWORD PTR [eax],edx
c002f03f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f043:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f047:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002f04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f04e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f051:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f05c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f05f:	85 c0                	test   eax,eax
c002f061:	74 22                	je     c002f085 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002f063:	83 ec 0c             	sub    esp,0xc
c002f066:	68 c6 19 03 c0       	push   0xc00319c6
c002f06b:	e8 1e 17 ff ff       	call   c002078e <KePanic(char const*)>
c002f070:	83 c4 10             	add    esp,0x10
c002f073:	eb 10                	jmp    c002f085 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002f075:	83 ec 0c             	sub    esp,0xc
c002f078:	68 d0 19 03 c0       	push   0xc00319d0
c002f07d:	e8 0c 17 ff ff       	call   c002078e <KePanic(char const*)>
c002f082:	83 c4 10             	add    esp,0x10
c002f085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f089:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f08c:	8d 50 01             	lea    edx,[eax+0x1]
c002f08f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f093:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f096:	90                   	nop
c002f097:	83 c4 0c             	add    esp,0xc
c002f09a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002f09c <LinkedList<UnixFile>::getFirstElement()>:
c002f09c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f0a0:	8b 00                	mov    eax,DWORD PTR [eax]
c002f0a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002f0a4 <LinkedList<UnixFile>::removeFirst()>:
c002f0a4:	83 ec 0c             	sub    esp,0xc
c002f0a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0ab:	8b 00                	mov    eax,DWORD PTR [eax]
c002f0ad:	85 c0                	test   eax,eax
c002f0af:	75 12                	jne    c002f0c3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002f0b1:	83 ec 0c             	sub    esp,0xc
c002f0b4:	68 dc 19 03 c0       	push   0xc00319dc
c002f0b9:	e8 d0 16 ff ff       	call   c002078e <KePanic(char const*)>
c002f0be:	83 c4 10             	add    esp,0x10
c002f0c1:	eb 7e                	jmp    c002f141 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002f0c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f0ca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f0cd:	85 c0                	test   eax,eax
c002f0cf:	74 10                	je     c002f0e1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c002f0d1:	83 ec 0c             	sub    esp,0xc
c002f0d4:	68 27 1a 03 c0       	push   0xc0031a27
c002f0d9:	e8 b0 16 ff ff       	call   c002078e <KePanic(char const*)>
c002f0de:	83 c4 10             	add    esp,0x10
c002f0e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0e5:	8b 00                	mov    eax,DWORD PTR [eax]
c002f0e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f0ea:	85 c0                	test   eax,eax
c002f0ec:	75 33                	jne    c002f121 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002f0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f0f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f107:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f10a:	83 f8 01             	cmp    eax,0x1
c002f10d:	74 21                	je     c002f130 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002f10f:	83 ec 0c             	sub    esp,0xc
c002f112:	68 00 1a 03 c0       	push   0xc0031a00
c002f117:	e8 72 16 ff ff       	call   c002078e <KePanic(char const*)>
c002f11c:	83 c4 10             	add    esp,0x10
c002f11f:	eb 0f                	jmp    c002f130 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002f121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f125:	8b 00                	mov    eax,DWORD PTR [eax]
c002f127:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002f12a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f12e:	89 10                	mov    DWORD PTR [eax],edx
c002f130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f134:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f137:	8d 50 ff             	lea    edx,[eax-0x1]
c002f13a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f13e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f141:	83 c4 0c             	add    esp,0xc
c002f144:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002f146 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002f146:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002f14a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f14d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002f14e <DriverlessDevice::~DriverlessDevice()>:
c002f14e:	ba 68 27 03 c0       	mov    edx,0xc0032768
c002f153:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f157:	89 10                	mov    DWORD PTR [eax],edx
c002f159:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f15d:	50                   	push   eax
c002f15e:	e8 b1 c3 fe ff       	call   c001b514 <Device::~Device()>
c002f163:	83 c4 04             	add    esp,0x4
c002f166:	90                   	nop
c002f167:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002f168 <DriverlessDevice::~DriverlessDevice()>:
c002f168:	83 ec 0c             	sub    esp,0xc
c002f16b:	83 ec 0c             	sub    esp,0xc
c002f16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f172:	e8 d7 ff ff ff       	call   c002f14e <DriverlessDevice::~DriverlessDevice()>
c002f177:	83 c4 10             	add    esp,0x10
c002f17a:	83 ec 08             	sub    esp,0x8
c002f17d:	68 58 01 00 00       	push   0x158
c002f182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f186:	e8 9d a1 fe ff       	call   c0019328 <operator delete(void*, unsigned long)>
c002f18b:	83 c4 10             	add    esp,0x10
c002f18e:	83 c4 0c             	add    esp,0xc
c002f191:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002f192 <LinkedList<Device>::addElement(Device*)>:
c002f192:	83 ec 0c             	sub    esp,0xc
c002f195:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002f19a:	75 10                	jne    c002f1ac <LinkedList<Device>::addElement(Device*)+0x1a>
c002f19c:	83 ec 0c             	sub    esp,0xc
c002f19f:	68 a4 19 03 c0       	push   0xc00319a4
c002f1a4:	e8 e5 15 ff ff       	call   c002078e <KePanic(char const*)>
c002f1a9:	83 c4 10             	add    esp,0x10
c002f1ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1b0:	8b 00                	mov    eax,DWORD PTR [eax]
c002f1b2:	85 c0                	test   eax,eax
c002f1b4:	74 3a                	je     c002f1f0 <LinkedList<Device>::addElement(Device*)+0x5e>
c002f1b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f1bd:	85 c0                	test   eax,eax
c002f1bf:	74 2f                	je     c002f1f0 <LinkedList<Device>::addElement(Device*)+0x5e>
c002f1c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f1c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f1cc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002f1d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f1da:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002f1dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f1e4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002f1ee:	eb 68                	jmp    c002f258 <LinkedList<Device>::addElement(Device*)+0xc6>
c002f1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1f4:	8b 00                	mov    eax,DWORD PTR [eax]
c002f1f6:	85 c0                	test   eax,eax
c002f1f8:	75 4e                	jne    c002f248 <LinkedList<Device>::addElement(Device*)+0xb6>
c002f1fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f201:	85 c0                	test   eax,eax
c002f203:	75 43                	jne    c002f248 <LinkedList<Device>::addElement(Device*)+0xb6>
c002f205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f209:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f20d:	89 10                	mov    DWORD PTR [eax],edx
c002f20f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f213:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f217:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002f21a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f21e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f221:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002f22b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f22f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f232:	85 c0                	test   eax,eax
c002f234:	74 22                	je     c002f258 <LinkedList<Device>::addElement(Device*)+0xc6>
c002f236:	83 ec 0c             	sub    esp,0xc
c002f239:	68 c6 19 03 c0       	push   0xc00319c6
c002f23e:	e8 4b 15 ff ff       	call   c002078e <KePanic(char const*)>
c002f243:	83 c4 10             	add    esp,0x10
c002f246:	eb 10                	jmp    c002f258 <LinkedList<Device>::addElement(Device*)+0xc6>
c002f248:	83 ec 0c             	sub    esp,0xc
c002f24b:	68 d0 19 03 c0       	push   0xc00319d0
c002f250:	e8 39 15 ff ff       	call   c002078e <KePanic(char const*)>
c002f255:	83 c4 10             	add    esp,0x10
c002f258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f25c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f25f:	8d 50 01             	lea    edx,[eax+0x1]
c002f262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f266:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f269:	90                   	nop
c002f26a:	83 c4 0c             	add    esp,0xc
c002f26d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002f26e <LinkedList<Device>::LinkedList()>:
c002f26e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f272:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f278:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f27c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f283:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f287:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f28e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f292:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f29c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f2a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f2a7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f2ae:	90                   	nop
c002f2af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002f2b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002f2b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f2b4:	8b 00                	mov    eax,DWORD PTR [eax]
c002f2b6:	85 c0                	test   eax,eax
c002f2b8:	75 0e                	jne    c002f2c8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002f2ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f2be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f2c1:	85 c0                	test   eax,eax
c002f2c3:	75 03                	jne    c002f2c8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002f2c5:	b0 01                	mov    al,0x1
c002f2c7:	c3                   	ret    
c002f2c8:	b0 00                	mov    al,0x0
c002f2ca:	90                   	nop
c002f2cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002f2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002f2cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f2d0:	8b 00                	mov    eax,DWORD PTR [eax]
c002f2d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002f2d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002f2d4:	83 ec 0c             	sub    esp,0xc
c002f2d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2db:	8b 00                	mov    eax,DWORD PTR [eax]
c002f2dd:	85 c0                	test   eax,eax
c002f2df:	75 17                	jne    c002f2f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002f2e1:	83 ec 0c             	sub    esp,0xc
c002f2e4:	68 dc 19 03 c0       	push   0xc00319dc
c002f2e9:	e8 a0 14 ff ff       	call   c002078e <KePanic(char const*)>
c002f2ee:	83 c4 10             	add    esp,0x10
c002f2f1:	e9 96 00 00 00       	jmp    c002f38c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c002f2f6:	66 90                	xchg   ax,ax
c002f2f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f2ff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002f302:	85 c0                	test   eax,eax
c002f304:	0f 95 c0             	setne  al
c002f307:	0f b6 c0             	movzx  eax,al
c002f30a:	85 c0                	test   eax,eax
c002f30c:	74 12                	je     c002f320 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002f30e:	83 ec 0c             	sub    esp,0xc
c002f311:	68 27 1a 03 c0       	push   0xc0031a27
c002f316:	e8 73 14 ff ff       	call   c002078e <KePanic(char const*)>
c002f31b:	83 c4 10             	add    esp,0x10
c002f31e:	66 90                	xchg   ax,ax
c002f320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f324:	8b 00                	mov    eax,DWORD PTR [eax]
c002f326:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002f329:	85 c0                	test   eax,eax
c002f32b:	0f 94 c0             	sete   al
c002f32e:	0f b6 c0             	movzx  eax,al
c002f331:	85 c0                	test   eax,eax
c002f333:	74 33                	je     c002f368 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c002f335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f339:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f33f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f343:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f34a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f34e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f351:	83 f8 01             	cmp    eax,0x1
c002f354:	74 22                	je     c002f378 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002f356:	83 ec 0c             	sub    esp,0xc
c002f359:	68 00 1a 03 c0       	push   0xc0031a00
c002f35e:	e8 2b 14 ff ff       	call   c002078e <KePanic(char const*)>
c002f363:	83 c4 10             	add    esp,0x10
c002f366:	eb 10                	jmp    c002f378 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002f368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f36c:	8b 00                	mov    eax,DWORD PTR [eax]
c002f36e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002f371:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f375:	89 10                	mov    DWORD PTR [eax],edx
c002f377:	90                   	nop
c002f378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f37c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f37f:	8d 50 ff             	lea    edx,[eax-0x1]
c002f382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f386:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f389:	8d 76 00             	lea    esi,[esi+0x0]
c002f38c:	83 c4 0c             	add    esp,0xc
c002f38f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002f390 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002f390:	83 ec 0c             	sub    esp,0xc
c002f393:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002f398:	75 12                	jne    c002f3ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002f39a:	83 ec 0c             	sub    esp,0xc
c002f39d:	68 a4 19 03 c0       	push   0xc00319a4
c002f3a2:	e8 e7 13 ff ff       	call   c002078e <KePanic(char const*)>
c002f3a7:	83 c4 10             	add    esp,0x10
c002f3aa:	66 90                	xchg   ax,ax
c002f3ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3b0:	8b 00                	mov    eax,DWORD PTR [eax]
c002f3b2:	85 c0                	test   eax,eax
c002f3b4:	74 36                	je     c002f3ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002f3b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f3bd:	85 c0                	test   eax,eax
c002f3bf:	74 2b                	je     c002f3ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002f3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f3c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f3cc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002f3cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f3d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002f3da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f3e1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002f3e8:	eb 6a                	jmp    c002f454 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002f3ea:	66 90                	xchg   ax,ax
c002f3ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3f0:	8b 00                	mov    eax,DWORD PTR [eax]
c002f3f2:	85 c0                	test   eax,eax
c002f3f4:	75 4e                	jne    c002f444 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002f3f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f3fd:	85 c0                	test   eax,eax
c002f3ff:	75 43                	jne    c002f444 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002f401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f405:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f409:	89 10                	mov    DWORD PTR [eax],edx
c002f40b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f40f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f413:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002f416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f41a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f41d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002f424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f428:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f42b:	85 c0                	test   eax,eax
c002f42d:	74 25                	je     c002f454 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002f42f:	83 ec 0c             	sub    esp,0xc
c002f432:	68 c6 19 03 c0       	push   0xc00319c6
c002f437:	e8 52 13 ff ff       	call   c002078e <KePanic(char const*)>
c002f43c:	83 c4 10             	add    esp,0x10
c002f43f:	eb 13                	jmp    c002f454 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002f441:	8d 76 00             	lea    esi,[esi+0x0]
c002f444:	83 ec 0c             	sub    esp,0xc
c002f447:	68 d0 19 03 c0       	push   0xc00319d0
c002f44c:	e8 3d 13 ff ff       	call   c002078e <KePanic(char const*)>
c002f451:	83 c4 10             	add    esp,0x10
c002f454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f458:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f45b:	8d 50 01             	lea    edx,[eax+0x1]
c002f45e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f462:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f465:	90                   	nop
c002f466:	83 c4 0c             	add    esp,0xc
c002f469:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002f46c <ACPI::~ACPI()>:
c002f46c:	83 ec 0c             	sub    esp,0xc
c002f46f:	ba 20 2e 03 c0       	mov    edx,0xc0032e20
c002f474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f478:	89 10                	mov    DWORD PTR [eax],edx
c002f47a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f47e:	83 ec 0c             	sub    esp,0xc
c002f481:	50                   	push   eax
c002f482:	e8 8d c0 fe ff       	call   c001b514 <Device::~Device()>
c002f487:	83 c4 10             	add    esp,0x10
c002f48a:	90                   	nop
c002f48b:	83 c4 0c             	add    esp,0xc
c002f48e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002f490 <ACPI::~ACPI()>:
c002f490:	83 ec 0c             	sub    esp,0xc
c002f493:	83 ec 0c             	sub    esp,0xc
c002f496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f49a:	e8 cd ff ff ff       	call   c002f46c <ACPI::~ACPI()>
c002f49f:	83 c4 10             	add    esp,0x10
c002f4a2:	83 ec 08             	sub    esp,0x8
c002f4a5:	68 64 12 00 00       	push   0x1264
c002f4aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f4ae:	e8 75 9e fe ff       	call   c0019328 <operator delete(void*, unsigned long)>
c002f4b3:	83 c4 10             	add    esp,0x10
c002f4b6:	83 c4 0c             	add    esp,0xc
c002f4b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002f4bc <LinkedList<Device>::~LinkedList()>:
c002f4bc:	90                   	nop
c002f4bd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002f4c0 <LinkedList<Device>::isEmpty()>:
c002f4c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f4c4:	8b 00                	mov    eax,DWORD PTR [eax]
c002f4c6:	85 c0                	test   eax,eax
c002f4c8:	75 0e                	jne    c002f4d8 <LinkedList<Device>::isEmpty()+0x18>
c002f4ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f4ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f4d1:	85 c0                	test   eax,eax
c002f4d3:	75 03                	jne    c002f4d8 <LinkedList<Device>::isEmpty()+0x18>
c002f4d5:	b0 01                	mov    al,0x1
c002f4d7:	c3                   	ret    
c002f4d8:	b0 00                	mov    al,0x0
c002f4da:	90                   	nop
c002f4db:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002f4dc <LinkedList<Device>::getFirstElement()>:
c002f4dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f4e0:	8b 00                	mov    eax,DWORD PTR [eax]
c002f4e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c002f4e4 <LinkedList<Device>::removeFirst()>:
c002f4e4:	83 ec 0c             	sub    esp,0xc
c002f4e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f4eb:	8b 00                	mov    eax,DWORD PTR [eax]
c002f4ed:	85 c0                	test   eax,eax
c002f4ef:	75 17                	jne    c002f508 <LinkedList<Device>::removeFirst()+0x24>
c002f4f1:	83 ec 0c             	sub    esp,0xc
c002f4f4:	68 dc 19 03 c0       	push   0xc00319dc
c002f4f9:	e8 90 12 ff ff       	call   c002078e <KePanic(char const*)>
c002f4fe:	83 c4 10             	add    esp,0x10
c002f501:	e9 92 00 00 00       	jmp    c002f598 <LinkedList<Device>::removeFirst()+0xb4>
c002f506:	66 90                	xchg   ax,ax
c002f508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f50c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f50f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002f515:	85 c0                	test   eax,eax
c002f517:	74 13                	je     c002f52c <LinkedList<Device>::removeFirst()+0x48>
c002f519:	83 ec 0c             	sub    esp,0xc
c002f51c:	68 27 1a 03 c0       	push   0xc0031a27
c002f521:	e8 68 12 ff ff       	call   c002078e <KePanic(char const*)>
c002f526:	83 c4 10             	add    esp,0x10
c002f529:	8d 76 00             	lea    esi,[esi+0x0]
c002f52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f530:	8b 00                	mov    eax,DWORD PTR [eax]
c002f532:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002f538:	85 c0                	test   eax,eax
c002f53a:	75 34                	jne    c002f570 <LinkedList<Device>::removeFirst()+0x8c>
c002f53c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f540:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f54a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f555:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f558:	83 f8 01             	cmp    eax,0x1
c002f55b:	74 27                	je     c002f584 <LinkedList<Device>::removeFirst()+0xa0>
c002f55d:	83 ec 0c             	sub    esp,0xc
c002f560:	68 00 1a 03 c0       	push   0xc0031a00
c002f565:	e8 24 12 ff ff       	call   c002078e <KePanic(char const*)>
c002f56a:	83 c4 10             	add    esp,0x10
c002f56d:	eb 15                	jmp    c002f584 <LinkedList<Device>::removeFirst()+0xa0>
c002f56f:	90                   	nop
c002f570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f574:	8b 00                	mov    eax,DWORD PTR [eax]
c002f576:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002f57c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f580:	89 10                	mov    DWORD PTR [eax],edx
c002f582:	66 90                	xchg   ax,ax
c002f584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f588:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f58b:	8d 50 ff             	lea    edx,[eax-0x1]
c002f58e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f592:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f595:	8d 76 00             	lea    esi,[esi+0x0]
c002f598:	83 c4 0c             	add    esp,0xc
c002f59b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002f59c <CPU::~CPU()>:
c002f59c:	83 ec 0c             	sub    esp,0xc
c002f59f:	ba c8 2f 03 c0       	mov    edx,0xc0032fc8
c002f5a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f5a8:	89 10                	mov    DWORD PTR [eax],edx
c002f5aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f5ae:	83 ec 0c             	sub    esp,0xc
c002f5b1:	50                   	push   eax
c002f5b2:	e8 5d bf fe ff       	call   c001b514 <Device::~Device()>
c002f5b7:	83 c4 10             	add    esp,0x10
c002f5ba:	90                   	nop
c002f5bb:	83 c4 0c             	add    esp,0xc
c002f5be:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002f5c0 <CPU::~CPU()>:
c002f5c0:	83 ec 0c             	sub    esp,0xc
c002f5c3:	83 ec 0c             	sub    esp,0xc
c002f5c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f5ca:	e8 cd ff ff ff       	call   c002f59c <CPU::~CPU()>
c002f5cf:	83 c4 10             	add    esp,0x10
c002f5d2:	83 ec 08             	sub    esp,0x8
c002f5d5:	68 94 11 00 00       	push   0x1194
c002f5da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f5de:	e8 45 9d fe ff       	call   c0019328 <operator delete(void*, unsigned long)>
c002f5e3:	83 c4 10             	add    esp,0x10
c002f5e6:	83 c4 0c             	add    esp,0xc
c002f5e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002f5ec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002f5ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002f5f0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002f5f3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002f5f4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002f5f4:	90                   	nop
c002f5f5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002f5f8 <ThreadControlBlock::ThreadControlBlock()>:
c002f5f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f5fc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002f603:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f607:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002f60e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f612:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002f619:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f61d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002f624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f628:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002f62f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f633:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002f637:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f63b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002f63f:	90                   	nop
c002f640:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002f644 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002f644:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f648:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f64e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f652:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f65d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f664:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f668:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f66e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f672:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f679:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f67d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f684:	90                   	nop
c002f685:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002f686 <PCI::~PCI()>:
c002f686:	83 ec 0c             	sub    esp,0xc
c002f689:	ba 68 3f 03 c0       	mov    edx,0xc0033f68
c002f68e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f692:	89 10                	mov    DWORD PTR [eax],edx
c002f694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f698:	83 ec 0c             	sub    esp,0xc
c002f69b:	50                   	push   eax
c002f69c:	e8 cf b7 fe ff       	call   c001ae70 <Bus::~Bus()>
c002f6a1:	83 c4 10             	add    esp,0x10
c002f6a4:	90                   	nop
c002f6a5:	83 c4 0c             	add    esp,0xc
c002f6a8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002f6aa <PCI::~PCI()>:
c002f6aa:	83 ec 0c             	sub    esp,0xc
c002f6ad:	83 ec 0c             	sub    esp,0xc
c002f6b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f6b4:	e8 cd ff ff ff       	call   c002f686 <PCI::~PCI()>
c002f6b9:	83 c4 10             	add    esp,0x10
c002f6bc:	83 ec 08             	sub    esp,0x8
c002f6bf:	68 5c 01 00 00       	push   0x15c
c002f6c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f6c8:	e8 5b 9c fe ff       	call   c0019328 <operator delete(void*, unsigned long)>
c002f6cd:	83 c4 10             	add    esp,0x10
c002f6d0:	83 c4 0c             	add    esp,0xc
c002f6d3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002f6d4 <IDE::~IDE()>:
c002f6d4:	83 ec 0c             	sub    esp,0xc
c002f6d7:	ba 1c 40 03 c0       	mov    edx,0xc003401c
c002f6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f6e0:	89 10                	mov    DWORD PTR [eax],edx
c002f6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f6e6:	83 ec 0c             	sub    esp,0xc
c002f6e9:	50                   	push   eax
c002f6ea:	e8 b5 c2 fe ff       	call   c001b9a4 <HardDiskController::~HardDiskController()>
c002f6ef:	83 c4 10             	add    esp,0x10
c002f6f2:	90                   	nop
c002f6f3:	83 c4 0c             	add    esp,0xc
c002f6f6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002f6f8 <IDE::~IDE()>:
c002f6f8:	83 ec 0c             	sub    esp,0xc
c002f6fb:	83 ec 0c             	sub    esp,0xc
c002f6fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f702:	e8 cd ff ff ff       	call   c002f6d4 <IDE::~IDE()>
c002f707:	83 c4 10             	add    esp,0x10
c002f70a:	83 ec 08             	sub    esp,0x8
c002f70d:	68 70 02 00 00       	push   0x270
c002f712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f716:	e8 0d 9c fe ff       	call   c0019328 <operator delete(void*, unsigned long)>
c002f71b:	83 c4 10             	add    esp,0x10
c002f71e:	83 c4 0c             	add    esp,0xc
c002f721:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002f722 <SATABus::~SATABus()>:
c002f722:	83 ec 0c             	sub    esp,0xc
c002f725:	ba 6c 40 03 c0       	mov    edx,0xc003406c
c002f72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f72e:	89 10                	mov    DWORD PTR [eax],edx
c002f730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f734:	83 ec 0c             	sub    esp,0xc
c002f737:	50                   	push   eax
c002f738:	e8 67 c2 fe ff       	call   c001b9a4 <HardDiskController::~HardDiskController()>
c002f73d:	83 c4 10             	add    esp,0x10
c002f740:	90                   	nop
c002f741:	83 c4 0c             	add    esp,0xc
c002f744:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002f746 <SATABus::~SATABus()>:
c002f746:	83 ec 0c             	sub    esp,0xc
c002f749:	83 ec 0c             	sub    esp,0xc
c002f74c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f750:	e8 cd ff ff ff       	call   c002f722 <SATABus::~SATABus()>
c002f755:	83 c4 10             	add    esp,0x10
c002f758:	83 ec 08             	sub    esp,0x8
c002f75b:	68 64 01 00 00       	push   0x164
c002f760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f764:	e8 bf 9b fe ff       	call   c0019328 <operator delete(void*, unsigned long)>
c002f769:	83 c4 10             	add    esp,0x10
c002f76c:	83 c4 0c             	add    esp,0xc
c002f76f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002f770 <ATA::~ATA()>:
c002f770:	83 ec 0c             	sub    esp,0xc
c002f773:	ba ac 40 03 c0       	mov    edx,0xc00340ac
c002f778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f77c:	89 10                	mov    DWORD PTR [eax],edx
c002f77e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f782:	83 ec 0c             	sub    esp,0xc
c002f785:	50                   	push   eax
c002f786:	e8 fb c2 fe ff       	call   c001ba86 <PhysicalDisk::~PhysicalDisk()>
c002f78b:	83 c4 10             	add    esp,0x10
c002f78e:	90                   	nop
c002f78f:	83 c4 0c             	add    esp,0xc
c002f792:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002f794 <ATA::~ATA()>:
c002f794:	83 ec 0c             	sub    esp,0xc
c002f797:	83 ec 0c             	sub    esp,0xc
c002f79a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f79e:	e8 cd ff ff ff       	call   c002f770 <ATA::~ATA()>
c002f7a3:	83 c4 10             	add    esp,0x10
c002f7a6:	83 ec 08             	sub    esp,0x8
c002f7a9:	68 7c 01 00 00       	push   0x17c
c002f7ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f7b2:	e8 71 9b fe ff       	call   c0019328 <operator delete(void*, unsigned long)>
c002f7b7:	83 c4 10             	add    esp,0x10
c002f7ba:	83 c4 0c             	add    esp,0xc
c002f7bd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002f7be <ATAPI::~ATAPI()>:
c002f7be:	83 ec 0c             	sub    esp,0xc
c002f7c1:	ba f4 40 03 c0       	mov    edx,0xc00340f4
c002f7c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f7ca:	89 10                	mov    DWORD PTR [eax],edx
c002f7cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f7d0:	83 ec 0c             	sub    esp,0xc
c002f7d3:	50                   	push   eax
c002f7d4:	e8 ad c2 fe ff       	call   c001ba86 <PhysicalDisk::~PhysicalDisk()>
c002f7d9:	83 c4 10             	add    esp,0x10
c002f7dc:	90                   	nop
c002f7dd:	83 c4 0c             	add    esp,0xc
c002f7e0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002f7e2 <ATAPI::~ATAPI()>:
c002f7e2:	83 ec 0c             	sub    esp,0xc
c002f7e5:	83 ec 0c             	sub    esp,0xc
c002f7e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f7ec:	e8 cd ff ff ff       	call   c002f7be <ATAPI::~ATAPI()>
c002f7f1:	83 c4 10             	add    esp,0x10
c002f7f4:	83 ec 08             	sub    esp,0x8
c002f7f7:	68 84 01 00 00       	push   0x184
c002f7fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f800:	e8 23 9b fe ff       	call   c0019328 <operator delete(void*, unsigned long)>
c002f805:	83 c4 10             	add    esp,0x10
c002f808:	83 c4 0c             	add    esp,0xc
c002f80b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002f80c <SATA::~SATA()>:
c002f80c:	83 ec 0c             	sub    esp,0xc
c002f80f:	ba b4 41 03 c0       	mov    edx,0xc00341b4
c002f814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f818:	89 10                	mov    DWORD PTR [eax],edx
c002f81a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f81e:	83 ec 0c             	sub    esp,0xc
c002f821:	50                   	push   eax
c002f822:	e8 5f c2 fe ff       	call   c001ba86 <PhysicalDisk::~PhysicalDisk()>
c002f827:	83 c4 10             	add    esp,0x10
c002f82a:	90                   	nop
c002f82b:	83 c4 0c             	add    esp,0xc
c002f82e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002f830 <SATA::~SATA()>:
c002f830:	83 ec 0c             	sub    esp,0xc
c002f833:	83 ec 0c             	sub    esp,0xc
c002f836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f83a:	e8 cd ff ff ff       	call   c002f80c <SATA::~SATA()>
c002f83f:	83 c4 10             	add    esp,0x10
c002f842:	83 ec 08             	sub    esp,0x8
c002f845:	68 7c 01 00 00       	push   0x17c
c002f84a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f84e:	e8 d5 9a fe ff       	call   c0019328 <operator delete(void*, unsigned long)>
c002f853:	83 c4 10             	add    esp,0x10
c002f856:	83 c4 0c             	add    esp,0xc
c002f859:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002f85a <SATAPI::~SATAPI()>:
c002f85a:	83 ec 0c             	sub    esp,0xc
c002f85d:	ba d8 42 03 c0       	mov    edx,0xc00342d8
c002f862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f866:	89 10                	mov    DWORD PTR [eax],edx
c002f868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f86c:	83 ec 0c             	sub    esp,0xc
c002f86f:	50                   	push   eax
c002f870:	e8 11 c2 fe ff       	call   c001ba86 <PhysicalDisk::~PhysicalDisk()>
c002f875:	83 c4 10             	add    esp,0x10
c002f878:	90                   	nop
c002f879:	83 c4 0c             	add    esp,0xc
c002f87c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002f87e <SATAPI::~SATAPI()>:
c002f87e:	83 ec 0c             	sub    esp,0xc
c002f881:	83 ec 0c             	sub    esp,0xc
c002f884:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f888:	e8 cd ff ff ff       	call   c002f85a <SATAPI::~SATAPI()>
c002f88d:	83 c4 10             	add    esp,0x10
c002f890:	83 ec 08             	sub    esp,0x8
c002f893:	68 84 01 00 00       	push   0x184
c002f898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f89c:	e8 87 9a fe ff       	call   c0019328 <operator delete(void*, unsigned long)>
c002f8a1:	83 c4 10             	add    esp,0x10
c002f8a4:	83 c4 0c             	add    esp,0xc
c002f8a7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002f8a8 <IOAPIC::~IOAPIC()>:
c002f8a8:	83 ec 0c             	sub    esp,0xc
c002f8ab:	ba 18 43 03 c0       	mov    edx,0xc0034318
c002f8b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f8b4:	89 10                	mov    DWORD PTR [eax],edx
c002f8b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f8ba:	83 ec 0c             	sub    esp,0xc
c002f8bd:	50                   	push   eax
c002f8be:	e8 51 bc fe ff       	call   c001b514 <Device::~Device()>
c002f8c3:	83 c4 10             	add    esp,0x10
c002f8c6:	90                   	nop
c002f8c7:	83 c4 0c             	add    esp,0xc
c002f8ca:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002f8cc <IOAPIC::~IOAPIC()>:
c002f8cc:	83 ec 0c             	sub    esp,0xc
c002f8cf:	83 ec 0c             	sub    esp,0xc
c002f8d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f8d6:	e8 cd ff ff ff       	call   c002f8a8 <IOAPIC::~IOAPIC()>
c002f8db:	83 c4 10             	add    esp,0x10
c002f8de:	83 ec 08             	sub    esp,0x8
c002f8e1:	68 68 01 00 00       	push   0x168
c002f8e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f8ea:	e8 39 9a fe ff       	call   c0019328 <operator delete(void*, unsigned long)>
c002f8ef:	83 c4 10             	add    esp,0x10
c002f8f2:	83 c4 0c             	add    esp,0xc
c002f8f5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002f8f8 <APICTimer::~APICTimer()>:
c002f8f8:	83 ec 0c             	sub    esp,0xc
c002f8fb:	ba 60 43 03 c0       	mov    edx,0xc0034360
c002f900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f904:	89 10                	mov    DWORD PTR [eax],edx
c002f906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f90a:	83 ec 0c             	sub    esp,0xc
c002f90d:	50                   	push   eax
c002f90e:	e8 dd d6 fe ff       	call   c001cff0 <Timer::~Timer()>
c002f913:	83 c4 10             	add    esp,0x10
c002f916:	90                   	nop
c002f917:	83 c4 0c             	add    esp,0xc
c002f91a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002f91c <APICTimer::~APICTimer()>:
c002f91c:	83 ec 0c             	sub    esp,0xc
c002f91f:	83 ec 0c             	sub    esp,0xc
c002f922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f926:	e8 cd ff ff ff       	call   c002f8f8 <APICTimer::~APICTimer()>
c002f92b:	83 c4 10             	add    esp,0x10
c002f92e:	83 ec 08             	sub    esp,0x8
c002f931:	68 60 01 00 00       	push   0x160
c002f936:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f93a:	e8 e9 99 fe ff       	call   c0019328 <operator delete(void*, unsigned long)>
c002f93f:	83 c4 10             	add    esp,0x10
c002f942:	83 c4 0c             	add    esp,0xc
c002f945:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002f948 <PIT::~PIT()>:
c002f948:	83 ec 0c             	sub    esp,0xc
c002f94b:	ba b0 43 03 c0       	mov    edx,0xc00343b0
c002f950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f954:	89 10                	mov    DWORD PTR [eax],edx
c002f956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f95a:	83 ec 0c             	sub    esp,0xc
c002f95d:	50                   	push   eax
c002f95e:	e8 8d d6 fe ff       	call   c001cff0 <Timer::~Timer()>
c002f963:	83 c4 10             	add    esp,0x10
c002f966:	90                   	nop
c002f967:	83 c4 0c             	add    esp,0xc
c002f96a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002f96c <PIT::~PIT()>:
c002f96c:	83 ec 0c             	sub    esp,0xc
c002f96f:	83 ec 0c             	sub    esp,0xc
c002f972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f976:	e8 cd ff ff ff       	call   c002f948 <PIT::~PIT()>
c002f97b:	83 c4 10             	add    esp,0x10
c002f97e:	83 ec 08             	sub    esp,0x8
c002f981:	68 5c 01 00 00       	push   0x15c
c002f986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f98a:	e8 99 99 fe ff       	call   c0019328 <operator delete(void*, unsigned long)>
c002f98f:	83 c4 10             	add    esp,0x10
c002f992:	83 c4 0c             	add    esp,0xc
c002f995:	c3                   	ret    

Disassembly of section userkernel:

c0036000 <KiDefaultSignalHandlerAbort(int)>:
c0036000:	57                   	push   edi
c0036001:	b9 07 00 00 00       	mov    ecx,0x7
c0036006:	56                   	push   esi
c0036007:	be 1b 31 03 c0       	mov    esi,0xc003311b
c003600c:	83 ec 24             	sub    esp,0x24
c003600f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0036013:	fc                   	cld    
c0036014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0036016:	8d 44 24 04          	lea    eax,[esp+0x4]
c003601a:	50                   	push   eax
c003601b:	6a 00                	push   0x0
c003601d:	6a 38                	push   0x38
c003601f:	6a 01                	push   0x1
c0036021:	e8 2c 00 00 00       	call   c0036052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0036026:	83 c4 34             	add    esp,0x34
c0036029:	5e                   	pop    esi
c003602a:	5f                   	pop    edi
c003602b:	c3                   	ret    

c003602c <KiDefaultSignalHandlerTerminate(int)>:
c003602c:	57                   	push   edi
c003602d:	b9 08 00 00 00       	mov    ecx,0x8
c0036032:	56                   	push   esi
c0036033:	be 37 31 03 c0       	mov    esi,0xc0033137
c0036038:	83 ec 24             	sub    esp,0x24
c003603b:	89 e7                	mov    edi,esp
c003603d:	fc                   	cld    
c003603e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0036040:	54                   	push   esp
c0036041:	6a 00                	push   0x0
c0036043:	6a 37                	push   0x37
c0036045:	6a 01                	push   0x1
c0036047:	e8 06 00 00 00       	call   c0036052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c003604c:	83 c4 34             	add    esp,0x34
c003604f:	5e                   	pop    esi
c0036050:	5f                   	pop    edi
c0036051:	c3                   	ret    

c0036052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0036052:	53                   	push   ebx
c0036053:	83 ec 10             	sub    esp,0x10
c0036056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c003605a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c003605e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0036062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0036066:	cd 60                	int    0x60
c0036068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c003606c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0036070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0036074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0036078:	83 c4 10             	add    esp,0x10
c003607b:	5b                   	pop    ebx
c003607c:	c3                   	ret    

Disassembly of section align_previous:

c0037000 <DO_NOT_DELETE()>:
c0037000:	c3                   	ret    
