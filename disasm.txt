
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 b3 84 02 00       	call   c00284d8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 82 90 02 c0       	mov    ebx,0xc0029082
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 90 90 02 c0    	cmp    ebx,0xc0029090
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 b8 d7 02 c0       	mov    eax,0xc002d7b8
c0000049:	3d b8 d7 02 c0       	cmp    eax,0xc002d7b8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 b8 d7 02 c0       	push   0xc002d7b8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 b8 d7 02 c0       	mov    eax,0xc002d7b8
c0000075:	2d b8 d7 02 c0       	sub    eax,0xc002d7b8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 b8 d7 02 c0       	push   0xc002d7b8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d e8 dd 02 c0 00 	cmp    BYTE PTR ds:0xc002dde8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 98 90 02 c0       	mov    ebx,0xc0029098
c00000bb:	81 eb 94 90 02 c0    	sub    ebx,0xc0029094
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 94 90 02 c0       	mov    esi,0xc0029094
c00000ca:	a1 ec dd 02 c0       	mov    eax,ds:0xc002ddec
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ec dd 02 c0       	mov    ds:0xc002ddec,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ec dd 02 c0       	mov    eax,ds:0xc002ddec
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 b8 d7 02 c0       	push   0xc002d7b8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 e8 dd 02 c0 01 	mov    BYTE PTR ds:0xc002dde8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 f0 dd 02 c0       	push   0xc002ddf0
c000012c:	68 b8 d7 02 c0       	push   0xc002d7b8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 5d d4 01 00       	call   c001d7f8 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 bf 27 01 00       	call   c0012b72 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 3b d4 01 00       	call   c001d7f8 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 8e d8 01 00       	call   c001dc6a <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 3b de 01 00       	call   c001e220 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 30 e2 02 c0 	lgdtd  ds:0xc002e230
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 9c 44 01 00       	call   c0014a75 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 08 de 02 c0       	mov    ds:0xc002de08,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 08 de 02 c0    	mov    DWORD PTR ds:0xc002de08,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 08 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de08
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 a0 90 02 c0 02 	test   BYTE PTR [edx-0x3ffd6f60],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 a0 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6f60],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 a0 90 02 c0 08 	test   BYTE PTR [edx-0x3ffd6f60],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 a0 90 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6f60],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 a0 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6f60],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 20 de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de20
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 20 de 02 c0    	mov    DWORD PTR ds:0xc002de20,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 24 de 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd21dc]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 24 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd21dc],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 20 de 02 c0    	mov    DWORD PTR ds:0xc002de20,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 4c de 02 c0    	cmp    DWORD PTR ds:0xc002de4c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 5c de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de5c
c0000e60:	c7 42 0c 54 de 02 c0 	mov    DWORD PTR [edx+0xc],0xc002de54
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 5c de 02 c0    	mov    DWORD PTR ds:0xc002de5c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 4c de 02 c0    	mov    DWORD PTR ds:0xc002de4c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 20 de 02 c0 02 	test   BYTE PTR ds:0xc002de20,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 20 de 02 c0       	mov    eax,0xc002de20
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 20 de 02 c0    	mov    edi,DWORD PTR ds:0xc002de20
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 20 de 02 c0       	mov    eax,0xc002de20
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 24 de 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd21dc]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 24 de 02 c0 	mov    DWORD PTR [edx*4-0x3ffd21dc],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 54 de 02 c0 	lea    edx,[eax*8-0x3ffd21ac]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 20 de 02 c0       	mov    eax,0xc002de20
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 60 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de60
c00011e2:	81 fb 54 de 02 c0    	cmp    ebx,0xc002de54
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 54 de 02 c0       	cmp    eax,0xc002de54
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 50 de 02 c0    	cmp    DWORD PTR ds:0xc002de50,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 5c de 02 c0       	mov    ds:0xc002de5c,eax
c000121e:	a3 60 de 02 c0       	mov    ds:0xc002de60,eax
c0001223:	a3 50 de 02 c0       	mov    ds:0xc002de50,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 54 de 02 c0 	mov    DWORD PTR [eax+0x8],0xc002de54
c0001231:	c7 40 0c 54 de 02 c0 	mov    DWORD PTR [eax+0xc],0xc002de54
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 60 de 02 c0       	mov    ds:0xc002de60,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 54 de 02 c0 	mov    DWORD PTR [eax+0x8],0xc002de54
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 18 de 02 c0 	lea    ebp,[edx*4-0x3ffd21e8]
c0001282:	8b 14 95 20 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd21e0]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 20 de 02 c0 	lea    ecx,[edx*4-0x3ffd21e0]
c000129d:	8b 14 95 20 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd21e0]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 54 e1 02 c0 	or     DWORD PTR [edi*4-0x3ffd1eac],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 54 de 02 c0 	lea    eax,[eax*8-0x3ffd21ac]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 5c de 02 c0    	mov    DWORD PTR ds:0xc002de5c,ecx
c0001357:	89 0d 60 de 02 c0    	mov    DWORD PTR ds:0xc002de60,ecx
c000135d:	c7 41 08 54 de 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002de54
c0001364:	c7 41 0c 54 de 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002de54
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 4c de 02 c0 	lea    edx,[ecx*8-0x3ffd21b4]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 54 e1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1eac]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 54 e1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1eac]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 4c de 02 c0 	lea    edx,[eax*4-0x3ffd21b4]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 54 e1 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1eac],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 5c de 02 c0    	mov    DWORD PTR ds:0xc002de5c,edi
c000142a:	89 3d 60 de 02 c0    	mov    DWORD PTR ds:0xc002de60,edi
c0001430:	c7 47 08 54 de 02 c0 	mov    DWORD PTR [edi+0x8],0xc002de54
c0001437:	c7 47 0c 54 de 02 c0 	mov    DWORD PTR [edi+0xc],0xc002de54
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 50 de 02 c0    	mov    DWORD PTR ds:0xc002de50,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 4c de 02 c0       	mov    eax,ds:0xc002de4c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 4c de 02 c0    	mov    DWORD PTR ds:0xc002de4c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 20 de 02 c0       	mov    edx,0xc002de20
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 20 de 02 c0 00 	cmp    DWORD PTR ds:0xc002de20,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 20 de 02 c0       	mov    eax,0xc002de20
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 74 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e174
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 74 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e174,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 74 e1 02 c0    	mov    DWORD PTR ds:0xc002e174,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 4c de 02 c0    	cmp    DWORD PTR ds:0xc002de4c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 4c de 02 c0    	mov    DWORD PTR ds:0xc002de4c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 20 de 02 c0 00 	cmp    DWORD PTR ds:0xc002de20,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 20 de 02 c0       	mov    eax,0xc002de20
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 7c e1 02 c0    	push   DWORD PTR ds:0xc002e17c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 20 de 02 c0 00 	cmp    DWORD PTR ds:0xc002de20,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 20 de 02 c0       	mov    eax,0xc002de20
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 7c e1 02 c0       	mov    eax,ds:0xc002e17c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 20 de 02 c0       	mov    eax,0xc002de20
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 4c de 02 c0 00 	cmp    DWORD PTR ds:0xc002de4c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 20 de 02 c0       	mov    eax,0xc002de20
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 4c de 02 c0       	mov    eax,ds:0xc002de4c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 24 de 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd21dc]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 54 de 02 c0       	mov    eax,0xc002de54
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 4c e1 02 c0       	cmp    eax,0xc002e14c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 88 e1 02 c0       	mov    eax,ds:0xc002e188
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 70 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e170
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 84 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e184
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 94 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e194
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 20 de 02 c0       	mov    eax,0xc002de20
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 a4 91 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6e5c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 20 de 02 c0       	mov    eax,ds:0xc002de20
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 20 de 02 c0       	mov    ds:0xc002de20,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 64 e1 02 c0    	mov    DWORD PTR ds:0xc002e164,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 68 e1 02 c0    	mov    DWORD PTR ds:0xc002e168,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 6c e1 02 c0    	mov    DWORD PTR ds:0xc002e16c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 74 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e174,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 00 19 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce700]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 1a f0 01 00       	jmp    c0020c46 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 00 19 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce700]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 4b f0 01 00       	jmp    c0020c8d <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 00 19 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce700]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 73 f0 01 00       	jmp    c0020cd4 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 f8 48 02 00       	call   c002683c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 c0 92 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6d40]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 c0 92 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6d40]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba c0 91 02 c0       	mov    edx,0xc00291c0
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba e0 92 02 c0       	mov    edx,0xc00292e0
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 34 c6 02 c0       	mov    edx,0xc002c634
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba ec 92 02 c0       	mov    edx,0xc00292ec
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba d0 92 02 c0       	mov    edx,0xc00292d0
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 c0 e1 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1e40]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 a0 e1 02 c0    	mov    ax,ds:0xc002e1a0
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 a0 e1 02 c0    	mov    ds:0xc002e1a0,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 f5 36 02 00       	call   c002683c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 f2 92 02 c0       	mov    eax,0xc00292f2
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 40 92 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6dc0]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 fb 92 02 c0       	mov    eax,0xc00292fb
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 c0 92 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6d40]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 c0 20 02 00       	call   c002683c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba d0 92 02 c0       	mov    edx,0xc00292d0
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba c0 91 02 c0       	mov    edx,0xc00291c0
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba d0 91 02 c0       	mov    edx,0xc00291d0
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 c0 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1e40]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 c0 e1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1e40],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 87 0a 02 00       	call   c002683c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 6d 0a 02 00       	call   c002683c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 17 92 02 c0       	mov    eax,0xc0029217
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 10 92 02 c0       	mov    eax,0xc0029210
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 c0 e1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1e40]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 00 92 02 c0       	mov    esi,0xc0029200
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 b0 f1 01 00       	call   c002683c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba e0 92 02 c0       	mov    edx,0xc00292e0
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba e0 91 02 c0       	mov    edx,0xc00291e0
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba f0 91 02 c0       	mov    edx,0xc00291f0
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 02 93 02 c0       	mov    edx,0xc0029302
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 0e 93 02 c0       	mov    edx,0xc002930e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 22 93 02 c0       	mov    edx,0xc0029322
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 40 96 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029640
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 40 96 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029640
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 40 94 02 c0       	mov    eax,0xc0029440
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 80 93 02 c0       	mov    eax,0xc0029380
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 40 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6cc0]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 04 fb 01 00       	call   c002830f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 c7 fa 01 00       	call   c00282f1 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 9b fa 01 00       	call   c002830f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 4e f1 01 00       	call   c0027a14 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 c8 fb 01 00       	call   c00284a0 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 15 fa 01 00       	call   c002830f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 57 f9 01 00       	call   c002830f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 24 f9 01 00       	call   c00282f1 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 11 f8 01 00       	call   c002830f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 d9 f7 01 00       	call   c00282f1 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 40 97 02 c0       	mov    eax,0xc0029740
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 e5 f5 01 00       	call   c002830f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 aa f5 01 00       	call   c00282f1 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 a0 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6460]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 ba f2 01 00       	call   c00280a3 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 38 ec 01 00       	call   c0027a40 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 f4 f4 01 00       	call   c0028313 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 e2 f5 01 00       	call   c0028437 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 cc eb 01 00       	call   c0027a40 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 77 f4 01 00       	call   c002830d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 58 f4 01 00       	call   c0028311 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 e6 f5 01 00       	call   c00284c0 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 98 f1 01 00       	call   c00280a3 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 16 eb 01 00       	call   c0027a40 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 d2 f3 01 00       	call   c0028313 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 c0 f4 01 00       	call   c0028437 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 aa ea 01 00       	call   c0027a40 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 55 f3 01 00       	call   c002830d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 35 f3 01 00       	call   c0028311 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 c2 f4 01 00       	call   c00284c0 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 70 f2 01 00       	call   c002830f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 2e f2 01 00       	call   c00282f1 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 16 f2 01 00       	call   c002830f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 88 ef 01 00       	call   c00280a3 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 8a e2 01 00       	call   c00273c3 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 ed e8 01 00       	call   c0027a40 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 3f ef 01 00       	call   c00280a3 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 45 e2 01 00       	call   c00273c3 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 14 ef 01 00       	call   c00280a3 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 64 f1 01 00       	call   c002830d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 41 e8 01 00       	call   c0027a14 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 bb f2 01 00       	call   c00284a0 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 ea f0 01 00       	call   c00282f1 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 e5 e7 01 00       	call   c0027a14 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 63 ee 01 00       	call   c00280a3 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 e6 e7 01 00       	call   c0027a40 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 38 ee 01 00       	call   c00280a3 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 9f ea 01 00       	call   c0027d24 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 1e e1 01 00       	call   c00273c3 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 7e da 01 00       	call   c0026d58 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 55 f1 01 00       	call   c0028437 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 3e e7 01 00       	call   c0027a40 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 25 f1 01 00       	call   c0028437 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 97 e0 01 00       	call   c00273c3 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 d0 ef 01 00       	call   c0028313 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 b8 e9 01 00       	call   c0027d24 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 3e e0 01 00       	call   c00273c3 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 24 f1 01 00       	call   c00284c0 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 fe ec 01 00       	call   c00280a3 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 55 e6 01 00       	call   c0027a14 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 34 ef 01 00       	call   c002830f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 cd df 01 00       	call   c00273c3 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 f9 e5 01 00       	call   c0027a14 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 93 f0 01 00       	call   c00284c0 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 4c ec 01 00       	call   c00280a3 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 c9 e5 01 00       	call   c0027a40 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 1c ec 01 00       	call   c00280a3 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 22 df 01 00       	call   c00273c3 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 f2 eb 01 00       	call   c00280a3 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 44 ee 01 00       	call   c002830f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 1b e5 01 00       	call   c0027a14 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 95 ef 01 00       	call   c00284a0 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 c4 ed 01 00       	call   c00282f1 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 be e4 01 00       	call   c0027a14 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 3c eb 01 00       	call   c00280a3 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 bf e4 01 00       	call   c0027a40 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 11 eb 01 00       	call   c00280a3 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 78 e7 01 00       	call   c0027d24 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 f7 dd 01 00       	call   c00273c3 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 47 d7 01 00       	call   c0026d58 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 1e ee 01 00       	call   c0028437 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 07 e4 01 00       	call   c0027a40 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 ee ed 01 00       	call   c0028437 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 60 dd 01 00       	call   c00273c3 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 99 ec 01 00       	call   c0028313 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 80 e6 01 00       	call   c0027d24 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 ff dc 01 00       	call   c00273c3 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 e5 ed 01 00       	call   c00284c0 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 bf e9 01 00       	call   c00280a3 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 16 e3 01 00       	call   c0027a14 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 f5 eb 01 00       	call   c002830f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 8e dc 01 00       	call   c00273c3 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 ba e2 01 00       	call   c0027a14 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 2f e9 01 00       	call   c00280a3 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 35 dc 01 00       	call   c00273c3 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 00 9c 02 c0       	mov    eax,0xc0029c00
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 14 9c 02 c0       	mov    eax,0xc0029c14
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 aa e7 01 00       	call   c00280a3 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 28 e1 01 00       	call   c0027a40 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 ba d3 01 00       	call   c0026d58 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 91 ea 01 00       	call   c0028437 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 7a e0 01 00       	call   c0027a40 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 5d ea 01 00       	call   c0028437 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 cf d9 01 00       	call   c00273c3 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 2f ea 01 00       	call   c0028437 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 1e e0 01 00       	call   c0027a40 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 87 d9 01 00       	call   c00273c3 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 a8 d2 01 00       	call   c0026d58 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 7f e9 01 00       	call   c0028437 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 68 df 01 00       	call   c0027a40 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 4b e9 01 00       	call   c0028437 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 bd d8 01 00       	call   c00273c3 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 1d e9 01 00       	call   c0028437 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 0c df 01 00       	call   c0027a40 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 75 d8 01 00       	call   c00273c3 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 53 d8 01 00       	call   c00273c3 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 2f d1 01 00       	call   c0026d58 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 06 e8 01 00       	call   c0028437 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 ef dd 01 00       	call   c0027a40 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 d2 e7 01 00       	call   c0028437 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 44 d7 01 00       	call   c00273c3 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 a4 e7 01 00       	call   c0028437 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 8d dd 01 00       	call   c0027a40 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 f6 d6 01 00       	call   c00273c3 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 56 e7 01 00       	call   c0028437 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 3f dd 01 00       	call   c0027a40 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 a8 d6 01 00       	call   c00273c3 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 bd cf 01 00       	call   c0026d58 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 94 e6 01 00       	call   c0028437 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 7d dc 01 00       	call   c0027a40 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 64 e6 01 00       	call   c0028437 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 d6 d5 01 00       	call   c00273c3 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 36 e6 01 00       	call   c0028437 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 1f dc 01 00       	call   c0027a40 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 88 d5 01 00       	call   c00273c3 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 e8 e5 01 00       	call   c0028437 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 d1 db 01 00       	call   c0027a40 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 3a d5 01 00       	call   c00273c3 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 0e d5 01 00       	call   c00273c3 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 6b db 01 00       	call   c0027a40 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 27 e4 01 00       	call   c0028313 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 b6 d4 01 00       	call   c00273c3 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 13 db 01 00       	call   c0027a40 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 cf e3 01 00       	call   c0028313 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 49 cd 01 00       	call   c0026d58 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 20 e4 01 00       	call   c0028437 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 09 da 01 00       	call   c0027a40 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 ec e3 01 00       	call   c0028437 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 5e d3 01 00       	call   c00273c3 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 be e3 01 00       	call   c0028437 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 a7 d9 01 00       	call   c0027a40 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 10 d3 01 00       	call   c00273c3 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 70 e3 01 00       	call   c0028437 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 59 d9 01 00       	call   c0027a40 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 c2 d2 01 00       	call   c00273c3 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 22 e3 01 00       	call   c0028437 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 0b d9 01 00       	call   c0027a40 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 74 d2 01 00       	call   c00273c3 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 d4 e2 01 00       	call   c0028437 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 bd d8 01 00       	call   c0027a40 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 26 d2 01 00       	call   c00273c3 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 28 cb 01 00       	call   c0026d58 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 ff e1 01 00       	call   c0028437 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 e8 d7 01 00       	call   c0027a40 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 cf e1 01 00       	call   c0028437 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 41 d1 01 00       	call   c00273c3 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 a1 e1 01 00       	call   c0028437 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 8a d7 01 00       	call   c0027a40 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 f3 d0 01 00       	call   c00273c3 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 53 e1 01 00       	call   c0028437 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 3c d7 01 00       	call   c0027a40 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 a5 d0 01 00       	call   c00273c3 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 05 e1 01 00       	call   c0028437 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 ee d6 01 00       	call   c0027a40 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 57 d0 01 00       	call   c00273c3 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 b7 e0 01 00       	call   c0028437 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 a0 d6 01 00       	call   c0027a40 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 09 d0 01 00       	call   c00273c3 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 dd cf 01 00       	call   c00273c3 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 3a d6 01 00       	call   c0027a40 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 f6 de 01 00       	call   c0028313 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 85 cf 01 00       	call   c00273c3 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 e2 d5 01 00       	call   c0027a40 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 9e de 01 00       	call   c0028313 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 2c cf 01 00       	call   c00273c3 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 89 d5 01 00       	call   c0027a40 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 45 de 01 00       	call   c0028313 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 d3 ce 01 00       	call   c00273c3 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 30 d5 01 00       	call   c0027a40 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 ec dd 01 00       	call   c0028313 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 4a c7 01 00       	call   c0026d58 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 21 de 01 00       	call   c0028437 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 0a d4 01 00       	call   c0027a40 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 ed dd 01 00       	call   c0028437 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 5f cd 01 00       	call   c00273c3 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 bf dd 01 00       	call   c0028437 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 a8 d3 01 00       	call   c0027a40 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 11 cd 01 00       	call   c00273c3 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 71 dd 01 00       	call   c0028437 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 5a d3 01 00       	call   c0027a40 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 c3 cc 01 00       	call   c00273c3 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 23 dd 01 00       	call   c0028437 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 0c d3 01 00       	call   c0027a40 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 75 cc 01 00       	call   c00273c3 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 d5 dc 01 00       	call   c0028437 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 be d2 01 00       	call   c0027a40 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 27 cc 01 00       	call   c00273c3 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 87 dc 01 00       	call   c0028437 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 70 d2 01 00       	call   c0027a40 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 d6 cb 01 00       	call   c00273c3 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 36 dc 01 00       	call   c0028437 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 1f d2 01 00       	call   c0027a40 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 88 cb 01 00       	call   c00273c3 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 82 c4 01 00       	call   c0026d58 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 59 db 01 00       	call   c0028437 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 42 d1 01 00       	call   c0027a40 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 22 db 01 00       	call   c0028437 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 94 ca 01 00       	call   c00273c3 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 f4 da 01 00       	call   c0028437 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 dd d0 01 00       	call   c0027a40 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 46 ca 01 00       	call   c00273c3 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 a6 da 01 00       	call   c0028437 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 8f d0 01 00       	call   c0027a40 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 f8 c9 01 00       	call   c00273c3 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 58 da 01 00       	call   c0028437 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 41 d0 01 00       	call   c0027a40 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 aa c9 01 00       	call   c00273c3 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 0a da 01 00       	call   c0028437 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 f3 cf 01 00       	call   c0027a40 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 5c c9 01 00       	call   c00273c3 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 bc d9 01 00       	call   c0028437 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 a5 cf 01 00       	call   c0027a40 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 0b c9 01 00       	call   c00273c3 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 6b d9 01 00       	call   c0028437 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 54 cf 01 00       	call   c0027a40 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 c3 c8 01 00       	call   c00273c3 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 9c c8 01 00       	call   c00273c3 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 fa ce 01 00       	call   c0027a40 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 b6 d7 01 00       	call   c0028313 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 45 c8 01 00       	call   c00273c3 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 a3 ce 01 00       	call   c0027a40 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 5f d7 01 00       	call   c0028313 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 ed c7 01 00       	call   c00273c3 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 4b ce 01 00       	call   c0027a40 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 07 d7 01 00       	call   c0028313 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 95 c7 01 00       	call   c00273c3 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 f3 cd 01 00       	call   c0027a40 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 af d6 01 00       	call   c0028313 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 3d c7 01 00       	call   c00273c3 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 9b cd 01 00       	call   c0027a40 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 57 d6 01 00       	call   c0028313 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 eb c6 01 00       	call   c00273c3 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 49 cd 01 00       	call   c0027a40 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 05 d6 01 00       	call   c0028313 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 19 bf 01 00       	call   c0026d58 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 f0 d5 01 00       	call   c0028437 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 d9 cb 01 00       	call   c0027a40 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 c0 d5 01 00       	call   c0028437 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 32 c5 01 00       	call   c00273c3 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 44 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd63bc]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 66 d5 01 00       	call   c0028437 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 4f cb 01 00       	call   c0027a40 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 ba c4 01 00       	call   c00273c3 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 07 d5 01 00       	call   c0028437 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 f0 ca 01 00       	call   c0027a40 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 5b c4 01 00       	call   c00273c3 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 a8 d4 01 00       	call   c0028437 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 91 ca 01 00       	call   c0027a40 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 fc c3 01 00       	call   c00273c3 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 49 d4 01 00       	call   c0028437 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 32 ca 01 00       	call   c0027a40 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 9d c3 01 00       	call   c00273c3 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 ea d3 01 00       	call   c0028437 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 d3 c9 01 00       	call   c0027a40 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 3e c3 01 00       	call   c00273c3 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 8b d3 01 00       	call   c0028437 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 74 c9 01 00       	call   c0027a40 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 df c2 01 00       	call   c00273c3 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 2c d3 01 00       	call   c0028437 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 15 c9 01 00       	call   c0027a40 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 80 c2 01 00       	call   c00273c3 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 cd d2 01 00       	call   c0028437 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 b6 c8 01 00       	call   c0027a40 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 21 c2 01 00       	call   c00273c3 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 2b bb 01 00       	call   c0026d58 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 02 d2 01 00       	call   c0028437 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 eb c7 01 00       	call   c0027a40 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 d2 d1 01 00       	call   c0028437 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 44 c1 01 00       	call   c00273c3 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 60 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd63a0]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 77 d1 01 00       	call   c0028437 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 60 c7 01 00       	call   c0027a40 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 cb c0 01 00       	call   c00273c3 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 17 d1 01 00       	call   c0028437 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 00 c7 01 00       	call   c0027a40 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 6b c0 01 00       	call   c00273c3 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 b7 d0 01 00       	call   c0028437 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 a0 c6 01 00       	call   c0027a40 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 0b c0 01 00       	call   c00273c3 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 57 d0 01 00       	call   c0028437 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 40 c6 01 00       	call   c0027a40 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 ab bf 01 00       	call   c00273c3 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 f7 cf 01 00       	call   c0028437 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 e0 c5 01 00       	call   c0027a40 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 4b bf 01 00       	call   c00273c3 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 97 cf 01 00       	call   c0028437 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 80 c5 01 00       	call   c0027a40 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 eb be 01 00       	call   c00273c3 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 37 cf 01 00       	call   c0028437 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 20 c5 01 00       	call   c0027a40 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 8b be 01 00       	call   c00273c3 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 d7 ce 01 00       	call   c0028437 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 c0 c4 01 00       	call   c0027a40 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 2b be 01 00       	call   c00273c3 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 7c 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6384]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 d0 bd 01 00       	call   c00273c3 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 2d c4 01 00       	call   c0027a40 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 e9 cc 01 00       	call   c0028313 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 73 bd 01 00       	call   c00273c3 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 d0 c3 01 00       	call   c0027a40 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 8c cc 01 00       	call   c0028313 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 16 bd 01 00       	call   c00273c3 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 73 c3 01 00       	call   c0027a40 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 2f cc 01 00       	call   c0028313 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 b9 bc 01 00       	call   c00273c3 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 16 c3 01 00       	call   c0027a40 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 d2 cb 01 00       	call   c0028313 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 5c bc 01 00       	call   c00273c3 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 b9 c2 01 00       	call   c0027a40 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 75 cb 01 00       	call   c0028313 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 ff bb 01 00       	call   c00273c3 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 5c c2 01 00       	call   c0027a40 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 18 cb 01 00       	call   c0028313 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 a2 bb 01 00       	call   c00273c3 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 ff c1 01 00       	call   c0027a40 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 bb ca 01 00       	call   c0028313 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 45 bb 01 00       	call   c00273c3 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 a2 c1 01 00       	call   c0027a40 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 5e ca 01 00       	call   c0028313 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 5a c1 01 00       	call   c0027a40 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 ca cb 01 00       	jmp    c00284c0 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 3c c8 01 00       	call   c002830f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 fa c7 01 00       	call   c00282f1 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 91 c5 01 00       	call   c00280a3 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 92 b8 01 00       	call   c00273c3 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 61 c5 01 00       	call   c00280a3 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 c8 c1 01 00       	call   c0027d24 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 67 c7 01 00       	call   c00282f1 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 6a c7 01 00       	call   c002830f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 3d c7 01 00       	call   c002830f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 36 c1 01 00       	call   c0027d24 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 b8 c8 01 00       	call   c00284c0 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 93 c8 01 00       	call   c00284c0 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 6d c4 01 00       	call   c00280a3 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 c4 bd 01 00       	call   c0027a14 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 a3 c6 01 00       	call   c002830f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 3c b7 01 00       	call   c00273c3 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 60 bd 01 00       	call   c0027a14 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 fa c7 01 00       	call   c00284c0 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 3a c0 01 00       	call   c0027d24 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 b7 b6 01 00       	call   c00273c3 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 e3 c2 01 00       	call   c00280a3 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 e3 b5 01 00       	call   c00273c3 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 c3 b5 01 00       	call   c00273c3 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 93 c2 01 00       	call   c00280a3 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 e3 c4 01 00       	call   c002830d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 c2 bb 01 00       	call   c0027a14 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 3c c6 01 00       	call   c00284a0 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 6b c4 01 00       	call   c00282f1 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 69 bb 01 00       	call   c0027a14 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 e7 c1 01 00       	call   c00280a3 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 6a bb 01 00       	call   c0027a40 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 bc c1 01 00       	call   c00280a3 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 23 be 01 00       	call   c0027d24 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 a2 b4 01 00       	call   c00273c3 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 6c c1 01 00       	call   c00280a3 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 b8 c3 01 00       	call   c002830f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 ad ba 01 00       	call   c0027a40 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 7f ba 01 00       	call   c0027a40 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 b8 c0 01 00       	call   c00280a3 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 1c bd 01 00       	call   c0027d24 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 e4 bc 01 00       	call   c0027d24 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 63 b3 01 00       	call   c00273c3 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 48 c4 01 00       	call   c00284c0 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 22 c0 01 00       	call   c00280a3 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 79 b9 01 00       	call   c0027a14 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 58 c2 01 00       	call   c002830f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 f0 b2 01 00       	call   c00273c3 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 14 b9 01 00       	call   c0027a14 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 ae c3 01 00       	call   c00284c0 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 77 c1 01 00       	call   c002830f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 35 c1 01 00       	call   c00282f1 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 cc be 01 00       	call   c00280a3 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 cd b1 01 00       	call   c00273c3 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 9c be 01 00       	call   c00280a3 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 03 bb 01 00       	call   c0027d24 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 a2 c0 01 00       	call   c00282f1 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 a5 c0 01 00       	call   c002830f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 78 c0 01 00       	call   c002830f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 71 ba 01 00       	call   c0027d24 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 f3 c1 01 00       	call   c00284c0 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 ce c1 01 00       	call   c00284c0 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 a8 bd 01 00       	call   c00280a3 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 ff b6 01 00       	call   c0027a14 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 de bf 01 00       	call   c002830f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 77 b0 01 00       	call   c00273c3 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 9b b6 01 00       	call   c0027a14 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 35 c1 01 00       	call   c00284c0 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 75 b9 01 00       	call   c0027d24 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 f2 af 01 00       	call   c00273c3 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 1d bc 01 00       	call   c00280a3 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 1d af 01 00       	call   c00273c3 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 fd ae 01 00       	call   c00273c3 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 cd bb 01 00       	call   c00280a3 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 1d be 01 00       	call   c002830d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 fb b4 01 00       	call   c0027a14 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 75 bf 01 00       	call   c00284a0 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 a4 bd 01 00       	call   c00282f1 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 a1 b4 01 00       	call   c0027a14 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 1f bb 01 00       	call   c00280a3 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 a2 b4 01 00       	call   c0027a40 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 f4 ba 01 00       	call   c00280a3 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 5b b7 01 00       	call   c0027d24 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 da ad 01 00       	call   c00273c3 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 a4 ba 01 00       	call   c00280a3 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 f0 bc 01 00       	call   c002830f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 e5 b3 01 00       	call   c0027a40 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 b7 b3 01 00       	call   c0027a40 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 ee b9 01 00       	call   c00280a3 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 52 b6 01 00       	call   c0027d24 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 1f b6 01 00       	call   c0027d24 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 9e ac 01 00       	call   c00273c3 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 83 bd 01 00       	call   c00284c0 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 5d b9 01 00       	call   c00280a3 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 b4 b2 01 00       	call   c0027a14 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 93 bb 01 00       	call   c002830f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 2b ac 01 00       	call   c00273c3 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 4f b2 01 00       	call   c0027a14 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 e9 bc 01 00       	call   c00284c0 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 b2 ba 01 00       	call   c002830f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 70 ba 01 00       	call   c00282f1 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 07 b8 01 00       	call   c00280a3 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 08 ab 01 00       	call   c00273c3 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 d7 b7 01 00       	call   c00280a3 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 3e b4 01 00       	call   c0027d24 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 dd b9 01 00       	call   c00282f1 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 e0 b9 01 00       	call   c002830f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 b3 b9 01 00       	call   c002830f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 ac b3 01 00       	call   c0027d24 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 2e bb 01 00       	call   c00284c0 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 09 bb 01 00       	call   c00284c0 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 e3 b6 01 00       	call   c00280a3 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 3a b0 01 00       	call   c0027a14 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 19 b9 01 00       	call   c002830f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 b2 a9 01 00       	call   c00273c3 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 d6 af 01 00       	call   c0027a14 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 70 ba 01 00       	call   c00284c0 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 b0 b2 01 00       	call   c0027d24 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 2d a9 01 00       	call   c00273c3 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 58 b5 01 00       	call   c00280a3 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 58 a8 01 00       	call   c00273c3 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 38 a8 01 00       	call   c00273c3 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 08 b5 01 00       	call   c00280a3 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 58 b7 01 00       	call   c002830d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 36 ae 01 00       	call   c0027a14 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 b0 b8 01 00       	call   c00284a0 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 df b6 01 00       	call   c00282f1 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 dc ad 01 00       	call   c0027a14 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 5a b4 01 00       	call   c00280a3 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 dd ad 01 00       	call   c0027a40 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 2f b4 01 00       	call   c00280a3 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 96 b0 01 00       	call   c0027d24 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 15 a7 01 00       	call   c00273c3 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 df b3 01 00       	call   c00280a3 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 2b b6 01 00       	call   c002830f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 20 ad 01 00       	call   c0027a40 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 f2 ac 01 00       	call   c0027a40 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 29 b3 01 00       	call   c00280a3 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 8d af 01 00       	call   c0027d24 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 5a af 01 00       	call   c0027d24 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 d9 a5 01 00       	call   c00273c3 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 be b6 01 00       	call   c00284c0 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 98 b2 01 00       	call   c00280a3 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 ef ab 01 00       	call   c0027a14 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 ce b4 01 00       	call   c002830f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 66 a5 01 00       	call   c00273c3 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 8a ab 01 00       	call   c0027a14 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 24 b6 01 00       	call   c00284c0 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 ed b3 01 00       	call   c002830f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 ab b3 01 00       	call   c00282f1 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 42 b1 01 00       	call   c00280a3 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 43 a4 01 00       	call   c00273c3 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 12 b1 01 00       	call   c00280a3 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 79 ad 01 00       	call   c0027d24 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 18 b3 01 00       	call   c00282f1 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 1b b3 01 00       	call   c002830f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 ee b2 01 00       	call   c002830f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 e7 ac 01 00       	call   c0027d24 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 69 b4 01 00       	call   c00284c0 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 44 b4 01 00       	call   c00284c0 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 1e b0 01 00       	call   c00280a3 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 75 a9 01 00       	call   c0027a14 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 54 b2 01 00       	call   c002830f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 ed a2 01 00       	call   c00273c3 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 11 a9 01 00       	call   c0027a14 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 ab b3 01 00       	call   c00284c0 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 eb ab 01 00       	call   c0027d24 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 68 a2 01 00       	call   c00273c3 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 93 ae 01 00       	call   c00280a3 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 93 a1 01 00       	call   c00273c3 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 73 a1 01 00       	call   c00273c3 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 43 ae 01 00       	call   c00280a3 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 93 b0 01 00       	call   c002830d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 71 a7 01 00       	call   c0027a14 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 eb b1 01 00       	call   c00284a0 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 1a b0 01 00       	call   c00282f1 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 17 a7 01 00       	call   c0027a14 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 95 ad 01 00       	call   c00280a3 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 18 a7 01 00       	call   c0027a40 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 6a ad 01 00       	call   c00280a3 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 d1 a9 01 00       	call   c0027d24 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 50 a0 01 00       	call   c00273c3 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 1a ad 01 00       	call   c00280a3 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 66 af 01 00       	call   c002830f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 5b a6 01 00       	call   c0027a40 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 2d a6 01 00       	call   c0027a40 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 64 ac 01 00       	call   c00280a3 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 c8 a8 01 00       	call   c0027d24 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 95 a8 01 00       	call   c0027d24 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 14 9f 01 00       	call   c00273c3 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 f9 af 01 00       	call   c00284c0 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 d3 ab 01 00       	call   c00280a3 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 2a a5 01 00       	call   c0027a14 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 09 ae 01 00       	call   c002830f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 a1 9e 01 00       	call   c00273c3 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 c5 a4 01 00       	call   c0027a14 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 5f af 01 00       	call   c00284c0 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 25 ad 01 00       	call   c002830f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 e3 ac 01 00       	call   c00282f1 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 7a aa 01 00       	call   c00280a3 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 7b 9d 01 00       	call   c00273c3 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 4a aa 01 00       	call   c00280a3 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 b1 a6 01 00       	call   c0027d24 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 50 ac 01 00       	call   c00282f1 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 53 ac 01 00       	call   c002830f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 26 ac 01 00       	call   c002830f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 1f a6 01 00       	call   c0027d24 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 a1 ad 01 00       	call   c00284c0 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 78 ad 01 00       	call   c00284c0 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 52 a9 01 00       	call   c00280a3 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 a9 a2 01 00       	call   c0027a14 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 88 ab 01 00       	call   c002830f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 21 9c 01 00       	call   c00273c3 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 49 a2 01 00       	call   c0027a14 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 e3 ac 01 00       	call   c00284c0 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 24 a5 01 00       	call   c0027d24 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 a1 9b 01 00       	call   c00273c3 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 cd a7 01 00       	call   c00280a3 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 cd 9a 01 00       	call   c00273c3 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 ad 9a 01 00       	call   c00273c3 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 7d a7 01 00       	call   c00280a3 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 b1 a9 01 00       	call   c00282f1 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 a8 a0 01 00       	call   c0027a14 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 22 ab 01 00       	call   c00284a0 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 51 a9 01 00       	call   c00282f1 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 4b a0 01 00       	call   c0027a14 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 c9 a6 01 00       	call   c00280a3 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 4c a0 01 00       	call   c0027a40 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 9e a6 01 00       	call   c00280a3 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 05 a3 01 00       	call   c0027d24 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 84 99 01 00       	call   c00273c3 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 4e a6 01 00       	call   c00280a3 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 9a a8 01 00       	call   c002830f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 8f 9f 01 00       	call   c0027a40 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 61 9f 01 00       	call   c0027a40 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 a5 a5 01 00       	call   c00280a3 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 0c a2 01 00       	call   c0027d24 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 f5 9e 01 00       	call   c0027a40 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 b1 a7 01 00       	call   c0028313 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 a4 a1 01 00       	call   c0027d24 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 23 98 01 00       	call   c00273c3 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 08 a9 01 00       	call   c00284c0 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 e2 a4 01 00       	call   c00280a3 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 39 9e 01 00       	call   c0027a14 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 18 a7 01 00       	call   c002830f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 b0 97 01 00       	call   c00273c3 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 d8 9d 01 00       	call   c0027a14 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 72 a8 01 00       	call   c00284c0 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 a4 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd635c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 98 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6368]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 2d a5 01 00       	call   c002830f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 eb a4 01 00       	call   c00282f1 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 d7 a4 01 00       	call   c002830f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 49 a2 01 00       	call   c00280a3 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 c7 9b 01 00       	call   c0027a40 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 19 a2 01 00       	call   c00280a3 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 1f 95 01 00       	call   c00273c3 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 ee a1 01 00       	call   c00280a3 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 3e a4 01 00       	call   c002830d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 1f 9b 01 00       	call   c0027a14 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 99 a5 01 00       	call   c00284a0 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 c8 a3 01 00       	call   c00282f1 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 c7 9a 01 00       	call   c0027a14 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 45 a1 01 00       	call   c00280a3 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 c8 9a 01 00       	call   c0027a40 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 1a a1 01 00       	call   c00280a3 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 81 9d 01 00       	call   c0027d24 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 00 94 01 00       	call   c00273c3 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 28 9d 01 00       	call   c0027d24 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 ae 93 01 00       	call   c00273c3 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 94 a4 01 00       	call   c00284c0 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 6e a0 01 00       	call   c00280a3 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 c5 99 01 00       	call   c0027a14 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 a4 a2 01 00       	call   c002830f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 3d 93 01 00       	call   c00273c3 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 69 99 01 00       	call   c0027a14 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 03 a4 01 00       	call   c00284c0 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 b8 9f 01 00       	call   c00280a3 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 35 99 01 00       	call   c0027a40 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 86 9f 01 00       	call   c00280a3 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 8c 92 01 00       	call   c00273c3 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 5c 9f 01 00       	call   c00280a3 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 b0 a1 01 00       	call   c0028311 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 89 98 01 00       	call   c0027a14 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 03 a3 01 00       	call   c00284a0 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 32 a1 01 00       	call   c00282f1 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 30 98 01 00       	call   c0027a14 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 ae 9e 01 00       	call   c00280a3 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 31 98 01 00       	call   c0027a40 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 83 9e 01 00       	call   c00280a3 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 ea 9a 01 00       	call   c0027d24 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 69 91 01 00       	call   c00273c3 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 85 9a 01 00       	call   c0027d24 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 04 91 01 00       	call   c00273c3 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 ea a1 01 00       	call   c00284c0 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 c4 9d 01 00       	call   c00280a3 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 1b 97 01 00       	call   c0027a14 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 fa 9f 01 00       	call   c002830f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 93 90 01 00       	call   c00273c3 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 bf 96 01 00       	call   c0027a14 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 30 9d 01 00       	call   c00280a3 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 36 90 01 00       	call   c00273c3 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 be 9d 02 c0       	mov    eax,0xc0029dbe
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 cf 9d 02 c0       	mov    eax,0xc0029dcf
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 06 9e 02 c0       	push   0xc0029e06
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 28 e2 02 c0       	mov    eax,0xc002e228
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 0f 9e 02 c0       	push   0xc0029e0f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 3c 68 02 c0       	mov    eax,0xc002683c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 19 9e 02 c0       	push   0xc0029e19
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 70 65 02 c0       	mov    eax,0xc0026570
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 22 9e 02 c0       	push   0xc0029e22
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 3c 69 02 c0       	mov    eax,0xc002693c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 2c 9e 02 c0       	push   0xc0029e2c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 bc 66 02 c0       	mov    eax,0xc00266bc
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 35 9e 02 c0       	push   0xc0029e35
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 2c e2 02 c0       	mov    eax,0xc002e22c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 42 9e 02 c0       	push   0xc0029e42
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 2d e2 02 c0       	mov    eax,0xc002e22d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 0d 5d 00 00       	call   c0014330 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 1b 00 00       	push   0x1b3f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 94 17 03 c0    	push   DWORD PTR ds:0xc0031794
c000e668:	68 4f 9e 02 c0       	push   0xc0029e4f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 f3 f3 00 00       	call   c001da68 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 de f6 00 00       	call   c001dd68 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 c7 e5 01 c0       	push   0xc001e5c7
c000e693:	ff 35 94 17 03 c0    	push   DWORD PTR ds:0xc0031794
c000e699:	e8 ca f6 00 00       	call   c001dd68 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 48 17 03 c0       	mov    ds:0xc0031748,eax
c000e6a6:	c6 05 2d e2 02 c0 01 	mov    BYTE PTR ds:0xc002e22d,0x1
c000e6ad:	e8 95 02 01 00       	call   c001e947 <Vm::initialise8086()>
c000e6b2:	e8 61 4a 00 00       	call   c0013118 <Fs::initVFS()>
c000e6b7:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 09 dd 00 00       	call   c001c3dc <Sys::loadSyscalls()>
c000e6d3:	e8 2c bc 00 00       	call   c001a304 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 5c 9e 02 c0       	push   0xc0029e5c
c000e6e2:	68 65 9e 02 c0       	push   0xc0029e65
c000e6e7:	e8 3e c9 00 00       	call   c001b02a <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 0c 55 00 00       	call   c0013c00 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 ff 5b 00 00       	call   c0014304 <Device::loadDriversForAll()>
c000e705:	e8 40 b7 00 00       	call   c0019e4a <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 28 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e228
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 6d 9e 02 c0       	push   0xc0029e6d
c000e719:	e8 52 ee 00 00       	call   c001d570 <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 98 f0 00 00       	call   c001d7bf <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 98 f9 00 00       	call   c001e0cc <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 89 9e 02 c0       	push   0xc0029e89
c000e749:	50                   	push   eax
c000e74a:	e8 5b 5c 00 00       	call   c00143aa <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 28 a0 02 c0       	mov    edx,0xc002a028
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 41 e2 02 c0 04 	test   BYTE PTR ds:0xc002e241,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 23 7c 01 00       	call   c0026506 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 3e a2 00 00       	call   c0018b5c <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 17 a2 00 00       	call   c0018b5c <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 f5 a1 00 00       	call   c0018b5c <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 d3 a1 00 00       	call   c0018b5c <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 40 e2 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e240,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 e1 a0 00 00       	call   c0018ad8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 bc a0 00 00       	call   c0018ad8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 8d 7a 01 00       	call   c00264c0 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 4a 7a 01 00       	call   c00264a0 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 d8 a0 00 00       	call   c0018b5c <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 99 9e 02 c0       	push   0xc0029e99
c000eaaf:	e8 e0 42 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 ac 9e 02 c0       	push   0xc0029eac
c000ead2:	e8 bd 42 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 bd 9e 02 c0       	push   0xc0029ebd
c000eaf5:	e8 9a 42 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 ce 9e 02 c0       	push   0xc0029ece
c000eb18:	e8 77 42 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 df 9e 02 c0       	push   0xc0029edf
c000eb3b:	e8 54 42 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 f0 9e 02 c0       	push   0xc0029ef0
c000eb5e:	e8 31 42 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 01 9f 02 c0       	push   0xc0029f01
c000eb81:	e8 0e 42 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 12 9f 02 c0       	push   0xc0029f12
c000eba4:	e8 eb 41 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 23 9f 02 c0       	push   0xc0029f23
c000ebc7:	e8 c8 41 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 34 9f 02 c0       	push   0xc0029f34
c000ebea:	e8 a5 41 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 45 9f 02 c0       	push   0xc0029f45
c000ec0d:	e8 82 41 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 56 9f 02 c0       	push   0xc0029f56
c000ec30:	e8 5f 41 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 67 9f 02 c0       	push   0xc0029f67
c000ec53:	e8 3c 41 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 78 9f 02 c0       	push   0xc0029f78
c000ec76:	e8 19 41 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 89 9f 02 c0       	push   0xc0029f89
c000ec99:	e8 f6 40 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 9a 9f 02 c0       	push   0xc0029f9a
c000ecbc:	e8 d3 40 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 ab 9f 02 c0       	push   0xc0029fab
c000ecdf:	e8 b0 40 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 bc 9f 02 c0       	push   0xc0029fbc
c000ed02:	e8 8d 40 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 cd 9f 02 c0       	push   0xc0029fcd
c000ed21:	e8 6e 40 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 00 b9 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b900
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 5d 40 00 00       	jmp    c0012d94 <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 de 9f 02 c0       	push   0xc0029fde
c000ee0a:	e8 2e b6 00 00       	call   c001a43d <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 e4 9f 02 c0       	push   0xc0029fe4
c000ee42:	e8 f6 b5 00 00       	call   c001a43d <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 40 e2 02 c0 04 	test   BYTE PTR ds:0xc002e240,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 64 d1 02 c0 	sete   BYTE PTR ds:0xc002d164
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 73 91 00 00       	call   c0018028 <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 f6 52 00 00       	call   c00141ba <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 20 9d 00 00       	call   c0018c14 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 b7 52 00 00       	call   c00141ba <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 21 58 00 00       	call   c0014740 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 87 52 00 00       	call   c00141ba <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 13 ef 00 00       	call   c001de68 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 ea 9f 02 c0       	push   0xc0029fea
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 f1 3d 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 fb 9f 02 c0       	push   0xc0029ffb
c000efc0:	e8 78 b4 00 00       	call   c001a43d <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 08 a0 02 c0       	push   0xc002a008
c000efd5:	e8 63 b4 00 00       	call   c001a43d <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 12 a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a012
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 4c b4 00 00       	jmp    c001a43d <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 4c a0 02 c0       	push   0xc002a04c
c000f086:	e8 09 3d 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 32 e2 02 c0       	mov    ds:0xc002e232,eax
c000f0c7:	66 89 15 30 e2 02 c0 	mov    WORD PTR ds:0xc002e230,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 5b ea 00 00       	call   c001dc39 <unlockScheduler()>
c000f1de:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 28 e2 02 c0    	push   DWORD PTR ds:0xc002e228
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 14 93 01 00       	call   c0028540 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 0b 93 01 00       	call   c0028540 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 38 e2 02 c0 ff 07 	mov    WORD PTR ds:0xc002e238,0x7ff
c000f323:	a3 3a e2 02 c0       	mov    ds:0xc002e23a,eax
c000f328:	0f 01 1d 38 e2 02 c0 	lidtd  ds:0xc002e238
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 c9 27 00 00       	call   c0011dde <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 e0 2c 00 00       	call   c0012300 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 2a 1e 00 00       	call   c0011468 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 5b 1e 00 00       	call   c00114a8 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 28 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e228
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d 48 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d148
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 48 d1 02 c0       	mov    eax,ds:0xc002d148
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 68 a0 02 c0       	push   0xc002a068
c000f6f4:	e8 9b 36 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 48 d1 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d148,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 bf 26 00 00       	call   c0011dde <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d 48 d1 02 c0    	mov    ebp,DWORD PTR ds:0xc002d148
c000f727:	e8 b1 07 00 00       	call   c000fedd <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 c7 2a 00 00       	call   c0012200 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d 48 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d148
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 98 a0 02 c0       	push   0xc002a098
c000f7ad:	e8 8b ac 00 00       	call   c001a43d <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 9d a0 02 c0       	push   0xc002a09d
c000f7c3:	e8 75 ac 00 00       	call   c001a43d <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 5e e4 00 00       	call   c001dc37 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 4f e4 00 00       	call   c001dc39 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 e3 25 00 00       	call   c0011dde <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 f6 2a 00 00       	call   c0012300 <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 c8 25 00 00       	call   c0011dde <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 99 27 00 00       	call   c0011fbc <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 60 d1 02 c0       	mov    eax,ds:0xc002d160
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d c0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2c0,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 60 d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d160
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d c0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2c0,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d c0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2c0,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d c0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2c0,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d c0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2c0,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 60 d1 02 c0       	mov    eax,ds:0xc002d160
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 4a 0c 00 00       	call   c001073a <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d c0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2c0,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 0c 0c 00 00       	call   c001073a <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 a3 0c 00 00       	call   c00107e0 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 60 d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d160
c000fb46:	80 3d c0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2c0,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d 60 d1 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d160,0x8000
c000fba0:	c6 05 c0 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e2c0,0x1
c000fba7:	c7 05 f8 e2 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e2f8,0xc000fa13
c000fbb1:	c7 05 e4 e2 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e2e4,0xc000f89a
c000fbbb:	c7 05 e0 e2 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e2e0,0xc000f8e5
c000fbc5:	c7 05 ec e2 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e2ec,0xc000fa59
c000fbcf:	c7 05 f4 e2 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e2f4,0xc000f963
c000fbd9:	c7 05 e8 e2 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e2e8,0xc000f9c1
c000fbe3:	c7 05 f0 e2 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e2f0,0xc000f9c2
c000fbed:	c7 05 fc e2 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e2fc,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 20             	sub    esp,0x20
c000fc05:	e8 8a 09 00 00       	call   c0010594 <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 a4 a0 02 c0       	push   0xc002a0a4
c000fc4a:	e8 45 31 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 ea 03 00 00       	call   c0010050 <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 8b 20 00 00       	call   c0011cf6 <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 01 b9 02 c0       	push   0xc002b901
c000fc92:	e8 a6 a7 00 00       	call   c001a43d <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d 40 e2 02 c0    	mov    DWORD PTR ds:0xc002e240,ebx
c000fca3:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fca7:	53                   	push   ebx
c000fca8:	e8 37 21 00 00       	call   c0011de4 <VAS::VAS()>
c000fcad:	89 1d ac e3 02 c0    	mov    DWORD PTR ds:0xc002e3ac,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 bb a0 02 c0 	mov    DWORD PTR [esp],0xc002a0bb
c000fcbf:	e8 d0 30 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000fcc4:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fccb:	e8 70 fb ff ff       	call   c000f840 <malloc>
c000fcd0:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd3:	89 c6                	mov    esi,eax
c000fcd5:	e8 60 ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcda:	58                   	pop    eax
c000fcdb:	89 35 28 e2 02 c0    	mov    DWORD PTR ds:0xc002e228,esi
c000fce1:	5a                   	pop    edx
c000fce2:	56                   	push   esi
c000fce3:	68 d8 a0 02 c0       	push   0xc002a0d8
c000fce8:	e8 a7 30 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000fced:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c000fcf2:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf4:	6a 00                	push   0x0
c000fcf6:	6a 00                	push   0x0
c000fcf8:	6a 00                	push   0x0
c000fcfa:	50                   	push   eax
c000fcfb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fcfe:	83 c4 14             	add    esp,0x14
c000fd01:	53                   	push   ebx
c000fd02:	e8 8d 23 00 00       	call   c0012094 <VAS::~VAS()>
c000fd07:	c7 04 24 eb a0 02 c0 	mov    DWORD PTR [esp],0xc002a0eb
c000fd0e:	e8 2a a7 00 00       	call   c001a43d <Krnl::panic(char const*)>
c000fd13:	83 c4 30             	add    esp,0x30
c000fd16:	5b                   	pop    ebx
c000fd17:	5e                   	pop    esi
c000fd18:	5f                   	pop    edi
c000fd19:	c3                   	ret    

c000fd1a <Phys::allocateDMA(unsigned long)>:
c000fd1a:	55                   	push   ebp
c000fd1b:	31 d2                	xor    edx,edx
c000fd1d:	57                   	push   edi
c000fd1e:	31 ed                	xor    ebp,ebp
c000fd20:	56                   	push   esi
c000fd21:	31 c9                	xor    ecx,ecx
c000fd23:	53                   	push   ebx
c000fd24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd28:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd2e:	31 c0                	xor    eax,eax
c000fd30:	c1 ee 0c             	shr    esi,0xc
c000fd33:	eb 17                	jmp    c000fd4c <Phys::allocateDMA(unsigned long)+0x32>
c000fd35:	85 c9                	test   ecx,ecx
c000fd37:	75 04                	jne    c000fd3d <Phys::allocateDMA(unsigned long)+0x23>
c000fd39:	89 d5                	mov    ebp,edx
c000fd3b:	89 d0                	mov    eax,edx
c000fd3d:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd40:	39 de                	cmp    esi,ebx
c000fd42:	74 20                	je     c000fd64 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd44:	42                   	inc    edx
c000fd45:	89 d9                	mov    ecx,ebx
c000fd47:	83 fa 2f             	cmp    edx,0x2f
c000fd4a:	7f 11                	jg     c000fd5d <Phys::allocateDMA(unsigned long)+0x43>
c000fd4c:	80 ba 80 e2 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1d80],0x0
c000fd53:	74 e0                	je     c000fd35 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd55:	31 c9                	xor    ecx,ecx
c000fd57:	42                   	inc    edx
c000fd58:	83 fa 2f             	cmp    edx,0x2f
c000fd5b:	7e ef                	jle    c000fd4c <Phys::allocateDMA(unsigned long)+0x32>
c000fd5d:	5b                   	pop    ebx
c000fd5e:	31 c0                	xor    eax,eax
c000fd60:	5e                   	pop    esi
c000fd61:	5f                   	pop    edi
c000fd62:	5d                   	pop    ebp
c000fd63:	c3                   	ret    
c000fd64:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd67:	89 d7                	mov    edi,edx
c000fd69:	4f                   	dec    edi
c000fd6a:	79 03                	jns    c000fd6f <Phys::allocateDMA(unsigned long)+0x55>
c000fd6c:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd6f:	c1 ff 04             	sar    edi,0x4
c000fd72:	89 c2                	mov    edx,eax
c000fd74:	c1 fa 04             	sar    edx,0x4
c000fd77:	39 fa                	cmp    edx,edi
c000fd79:	75 2f                	jne    c000fdaa <Phys::allocateDMA(unsigned long)+0x90>
c000fd7b:	85 db                	test   ebx,ebx
c000fd7d:	74 1a                	je     c000fd99 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd7f:	be 80 e2 02 c0       	mov    esi,0xc002e280
c000fd84:	8d 90 80 e2 02 c0    	lea    edx,[eax-0x3ffd1d80]
c000fd8a:	f7 d6                	not    esi
c000fd8c:	29 c6                	sub    esi,eax
c000fd8e:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd91:	42                   	inc    edx
c000fd92:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd95:	39 d9                	cmp    ecx,ebx
c000fd97:	7f f5                	jg     c000fd8e <Phys::allocateDMA(unsigned long)+0x74>
c000fd99:	85 ff                	test   edi,edi
c000fd9b:	74 13                	je     c000fdb0 <Phys::allocateDMA(unsigned long)+0x96>
c000fd9d:	5b                   	pop    ebx
c000fd9e:	05 50 20 0c 00       	add    eax,0xc2050
c000fda3:	5e                   	pop    esi
c000fda4:	c1 e0 0c             	shl    eax,0xc
c000fda7:	5f                   	pop    edi
c000fda8:	5d                   	pop    ebp
c000fda9:	c3                   	ret    
c000fdaa:	89 ea                	mov    edx,ebp
c000fdac:	31 c9                	xor    ecx,ecx
c000fdae:	eb a7                	jmp    c000fd57 <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb0:	5b                   	pop    ebx
c000fdb1:	c1 e0 0c             	shl    eax,0xc
c000fdb4:	5e                   	pop    esi
c000fdb5:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdba:	5f                   	pop    edi
c000fdbb:	5d                   	pop    ebp
c000fdbc:	c3                   	ret    

c000fdbd <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdc5:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdcb:	c1 e9 0c             	shr    ecx,0xc
c000fdce:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd3:	76 25                	jbe    c000fdfa <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdd5:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fdda:	c1 e8 0c             	shr    eax,0xc
c000fddd:	8d 50 10             	lea    edx,[eax+0x10]
c000fde0:	85 c9                	test   ecx,ecx
c000fde2:	74 15                	je     c000fdf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde4:	8d 82 80 e2 02 c0    	lea    eax,[edx-0x3ffd1d80]
c000fdea:	8d 94 11 80 e2 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1d80]
c000fdf1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf4:	40                   	inc    eax
c000fdf5:	39 d0                	cmp    eax,edx
c000fdf7:	75 f8                	jne    c000fdf1 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdf9:	c3                   	ret    
c000fdfa:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe00:	c1 ea 0c             	shr    edx,0xc
c000fe03:	eb db                	jmp    c000fde0 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe05 <Phys::setPageState(unsigned long, bool)>:
c000fe05:	56                   	push   esi
c000fe06:	ba 01 00 00 00       	mov    edx,0x1
c000fe0b:	53                   	push   ebx
c000fe0c:	8b 35 4c d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d14c
c000fe12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe16:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1a:	89 c8                	mov    eax,ecx
c000fe1c:	83 e1 07             	and    ecx,0x7
c000fe1f:	c1 e8 03             	shr    eax,0x3
c000fe22:	d3 e3                	shl    ebx,cl
c000fe24:	01 c6                	add    esi,eax
c000fe26:	d3 e2                	shl    edx,cl
c000fe28:	f7 d2                	not    edx
c000fe2a:	20 16                	and    BYTE PTR [esi],dl
c000fe2c:	03 05 4c d1 02 c0    	add    eax,DWORD PTR ds:0xc002d14c
c000fe32:	08 18                	or     BYTE PTR [eax],bl
c000fe34:	5b                   	pop    ebx
c000fe35:	5e                   	pop    esi
c000fe36:	c3                   	ret    

c000fe37 <Phys::getPageState(unsigned long)>:
c000fe37:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe3b:	8b 15 4c d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d14c
c000fe41:	89 c8                	mov    eax,ecx
c000fe43:	83 e1 07             	and    ecx,0x7
c000fe46:	c1 e8 03             	shr    eax,0x3
c000fe49:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe4d:	d3 f8                	sar    eax,cl
c000fe4f:	83 e0 01             	and    eax,0x1
c000fe52:	c3                   	ret    

c000fe53 <Phys::freePage(unsigned long)>:
c000fe53:	53                   	push   ebx
c000fe54:	83 ec 08             	sub    esp,0x8
c000fe57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe5b:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe61:	76 57                	jbe    c000feba <Phys::freePage(unsigned long)+0x67>
c000fe63:	c1 eb 0c             	shr    ebx,0xc
c000fe66:	53                   	push   ebx
c000fe67:	e8 cb ff ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000fe6c:	5a                   	pop    edx
c000fe6d:	84 c0                	test   al,al
c000fe6f:	74 5b                	je     c000fecc <Phys::freePage(unsigned long)+0x79>
c000fe71:	a1 70 e2 02 c0       	mov    eax,ds:0xc002e270
c000fe76:	48                   	dec    eax
c000fe77:	a3 70 e2 02 c0       	mov    ds:0xc002e270,eax
c000fe7c:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe7f:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe82:	c1 e0 02             	shl    eax,0x2
c000fe85:	99                   	cdq    
c000fe86:	f7 3d 74 e2 02 c0    	idiv   DWORD PTR ds:0xc002e274
c000fe8c:	39 05 6c e2 02 c0    	cmp    DWORD PTR ds:0xc002e26c,eax
c000fe92:	75 13                	jne    c000fea7 <Phys::freePage(unsigned long)+0x54>
c000fe94:	83 ec 08             	sub    esp,0x8
c000fe97:	6a 00                	push   0x0
c000fe99:	53                   	push   ebx
c000fe9a:	e8 66 ff ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c000fe9f:	83 c4 10             	add    esp,0x10
c000fea2:	83 c4 08             	add    esp,0x8
c000fea5:	5b                   	pop    ebx
c000fea6:	c3                   	ret    
c000fea7:	83 ec 0c             	sub    esp,0xc
c000feaa:	a3 6c e2 02 c0       	mov    ds:0xc002e26c,eax
c000feaf:	50                   	push   eax
c000feb0:	e8 73 0a 00 00       	call   c0010928 <VgaText::updateRAMUsageDisplay(int)>
c000feb5:	83 c4 10             	add    esp,0x10
c000feb8:	eb da                	jmp    c000fe94 <Phys::freePage(unsigned long)+0x41>
c000feba:	68 00 10 00 00       	push   0x1000
c000febf:	53                   	push   ebx
c000fec0:	e8 f8 fe ff ff       	call   c000fdbd <Phys::freeDMA(unsigned long, unsigned long)>
c000fec5:	59                   	pop    ecx
c000fec6:	5b                   	pop    ebx
c000fec7:	83 c4 08             	add    esp,0x8
c000feca:	5b                   	pop    ebx
c000fecb:	c3                   	ret    
c000fecc:	c7 44 24 10 06 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a106
c000fed4:	83 c4 08             	add    esp,0x8
c000fed7:	5b                   	pop    ebx
c000fed8:	e9 60 a5 00 00       	jmp    c001a43d <Krnl::panic(char const*)>

c000fedd <Phys::allocatePage()>:
c000fedd:	56                   	push   esi
c000fede:	53                   	push   ebx
c000fedf:	51                   	push   ecx
c000fee0:	8b 35 64 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e264
c000fee6:	89 f3                	mov    ebx,esi
c000fee8:	eb 0a                	jmp    c000fef4 <Phys::allocatePage()+0x17>
c000feea:	89 1d 64 e2 02 c0    	mov    DWORD PTR ds:0xc002e264,ebx
c000fef0:	39 de                	cmp    esi,ebx
c000fef2:	74 24                	je     c000ff18 <Phys::allocatePage()+0x3b>
c000fef4:	53                   	push   ebx
c000fef5:	e8 3d ff ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000fefa:	5a                   	pop    edx
c000fefb:	84 c0                	test   al,al
c000fefd:	74 5a                	je     c000ff59 <Phys::allocatePage()+0x7c>
c000feff:	43                   	inc    ebx
c000ff00:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff06:	75 e2                	jne    c000feea <Phys::allocatePage()+0xd>
c000ff08:	31 db                	xor    ebx,ebx
c000ff0a:	c7 05 64 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e264,0x0
c000ff14:	39 de                	cmp    esi,ebx
c000ff16:	75 dc                	jne    c000fef4 <Phys::allocatePage()+0x17>
c000ff18:	83 ec 0c             	sub    esp,0xc
c000ff1b:	68 2b a1 02 c0       	push   0xc002a12b
c000ff20:	e8 6f 2e 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000ff25:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff2c:	e8 e9 fd ff ff       	call   c000fd1a <Phys::allocateDMA(unsigned long)>
c000ff31:	83 c4 10             	add    esp,0x10
c000ff34:	85 c0                	test   eax,eax
c000ff36:	75 6f                	jne    c000ffa7 <Phys::allocatePage()+0xca>
c000ff38:	83 ec 0c             	sub    esp,0xc
c000ff3b:	68 3c a1 02 c0       	push   0xc002a13c
c000ff40:	e8 f8 a4 00 00       	call   c001a43d <Krnl::panic(char const*)>
c000ff45:	83 c4 10             	add    esp,0x10
c000ff48:	8b 1d 64 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e264
c000ff4e:	53                   	push   ebx
c000ff4f:	e8 e3 fe ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000ff54:	5a                   	pop    edx
c000ff55:	84 c0                	test   al,al
c000ff57:	75 a6                	jne    c000feff <Phys::allocatePage()+0x22>
c000ff59:	6a 01                	push   0x1
c000ff5b:	53                   	push   ebx
c000ff5c:	e8 a4 fe ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c000ff61:	a1 70 e2 02 c0       	mov    eax,ds:0xc002e270
c000ff66:	59                   	pop    ecx
c000ff67:	40                   	inc    eax
c000ff68:	5b                   	pop    ebx
c000ff69:	a3 70 e2 02 c0       	mov    ds:0xc002e270,eax
c000ff6e:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff71:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff74:	c1 e0 02             	shl    eax,0x2
c000ff77:	99                   	cdq    
c000ff78:	f7 3d 74 e2 02 c0    	idiv   DWORD PTR ds:0xc002e274
c000ff7e:	39 05 6c e2 02 c0    	cmp    DWORD PTR ds:0xc002e26c,eax
c000ff84:	75 25                	jne    c000ffab <Phys::allocatePage()+0xce>
c000ff86:	83 ec 08             	sub    esp,0x8
c000ff89:	a1 64 e2 02 c0       	mov    eax,ds:0xc002e264
c000ff8e:	c1 e0 0c             	shl    eax,0xc
c000ff91:	50                   	push   eax
c000ff92:	68 1c a1 02 c0       	push   0xc002a11c
c000ff97:	e8 f8 2d 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c000ff9c:	a1 64 e2 02 c0       	mov    eax,ds:0xc002e264
c000ffa1:	83 c4 10             	add    esp,0x10
c000ffa4:	c1 e0 0c             	shl    eax,0xc
c000ffa7:	5a                   	pop    edx
c000ffa8:	5b                   	pop    ebx
c000ffa9:	5e                   	pop    esi
c000ffaa:	c3                   	ret    
c000ffab:	83 ec 0c             	sub    esp,0xc
c000ffae:	a3 6c e2 02 c0       	mov    ds:0xc002e26c,eax
c000ffb3:	50                   	push   eax
c000ffb4:	e8 6f 09 00 00       	call   c0010928 <VgaText::updateRAMUsageDisplay(int)>
c000ffb9:	83 c4 10             	add    esp,0x10
c000ffbc:	eb c8                	jmp    c000ff86 <Phys::allocatePage()+0xa9>

c000ffbe <Phys::allocateContiguousPages(int)>:
c000ffbe:	57                   	push   edi
c000ffbf:	56                   	push   esi
c000ffc0:	53                   	push   ebx
c000ffc1:	31 db                	xor    ebx,ebx
c000ffc3:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffc7:	e8 6b dc 00 00       	call   c001dc37 <lockScheduler()>
c000ffcc:	85 db                	test   ebx,ebx
c000ffce:	75 11                	jne    c000ffe1 <Phys::allocateContiguousPages(int)+0x23>
c000ffd0:	e8 08 ff ff ff       	call   c000fedd <Phys::allocatePage()>
c000ffd5:	83 ff 01             	cmp    edi,0x1
c000ffd8:	89 c6                	mov    esi,eax
c000ffda:	74 21                	je     c000fffd <Phys::allocateContiguousPages(int)+0x3f>
c000ffdc:	bb 01 00 00 00       	mov    ebx,0x1
c000ffe1:	e8 f7 fe ff ff       	call   c000fedd <Phys::allocatePage()>
c000ffe6:	89 da                	mov    edx,ebx
c000ffe8:	c1 e2 0c             	shl    edx,0xc
c000ffeb:	01 f2                	add    edx,esi
c000ffed:	39 c2                	cmp    edx,eax
c000ffef:	74 17                	je     c0010008 <Phys::allocateContiguousPages(int)+0x4a>
c000fff1:	bb 01 00 00 00       	mov    ebx,0x1
c000fff6:	89 c6                	mov    esi,eax
c000fff8:	83 ff 01             	cmp    edi,0x1
c000fffb:	75 e4                	jne    c000ffe1 <Phys::allocateContiguousPages(int)+0x23>
c000fffd:	e8 37 dc 00 00       	call   c001dc39 <unlockScheduler()>
c0010002:	89 f0                	mov    eax,esi
c0010004:	5b                   	pop    ebx
c0010005:	5e                   	pop    esi
c0010006:	5f                   	pop    edi
c0010007:	c3                   	ret    
c0010008:	43                   	inc    ebx
c0010009:	39 fb                	cmp    ebx,edi
c001000b:	75 bf                	jne    c000ffcc <Phys::allocateContiguousPages(int)+0xe>
c001000d:	e8 27 dc 00 00       	call   c001dc39 <unlockScheduler()>
c0010012:	89 f0                	mov    eax,esi
c0010014:	5b                   	pop    ebx
c0010015:	5e                   	pop    esi
c0010016:	5f                   	pop    edi
c0010017:	c3                   	ret    

c0010018 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010018:	56                   	push   esi
c0010019:	53                   	push   ebx
c001001a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001001e:	39 1d 68 e2 02 c0    	cmp    DWORD PTR ds:0xc002e268,ebx
c0010024:	73 06                	jae    c001002c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010026:	89 1d 68 e2 02 c0    	mov    DWORD PTR ds:0xc002e268,ebx
c001002c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010030:	c1 eb 0c             	shr    ebx,0xc
c0010033:	c1 e8 0c             	shr    eax,0xc
c0010036:	39 d8                	cmp    eax,ebx
c0010038:	73 13                	jae    c001004d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001003a:	6a 00                	push   0x0
c001003c:	8d 70 01             	lea    esi,[eax+0x1]
c001003f:	50                   	push   eax
c0010040:	e8 c0 fd ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c0010045:	5a                   	pop    edx
c0010046:	89 f0                	mov    eax,esi
c0010048:	59                   	pop    ecx
c0010049:	39 f3                	cmp    ebx,esi
c001004b:	75 ed                	jne    c001003a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001004d:	5b                   	pop    ebx
c001004e:	5e                   	pop    esi
c001004f:	c3                   	ret    

c0010050 <Phys::physicalMemorySetup(unsigned int)>:
c0010050:	55                   	push   ebp
c0010051:	57                   	push   edi
c0010052:	56                   	push   esi
c0010053:	53                   	push   ebx
c0010054:	31 db                	xor    ebx,ebx
c0010056:	83 ec 40             	sub    esp,0x40
c0010059:	6a 30                	push   0x30
c001005b:	6a 00                	push   0x0
c001005d:	68 80 e2 02 c0       	push   0xc002e280
c0010062:	e8 11 07 ff ff       	call   c0000778 <memset>
c0010067:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001006b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010070:	05 00 10 00 00       	add    eax,0x1000
c0010075:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010079:	83 c4 10             	add    esp,0x10
c001007c:	83 ec 08             	sub    esp,0x8
c001007f:	6a 01                	push   0x1
c0010081:	53                   	push   ebx
c0010082:	43                   	inc    ebx
c0010083:	e8 7d fd ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c0010088:	83 c4 10             	add    esp,0x10
c001008b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010091:	75 e9                	jne    c001007c <Phys::physicalMemorySetup(unsigned int)+0x2c>
c0010093:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c001009a:	66 85 c0             	test   ax,ax
c001009d:	0f 84 8e 01 00 00    	je     c0010231 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100a3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100a7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100b3:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100bc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100c4:	eb 15                	jmp    c00100db <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100c6:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100ca:	83 c3 18             	add    ebx,0x18
c00100cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100d1:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100d5:	0f 84 66 01 00 00    	je     c0010241 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100db:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100de:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100e1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100e8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00100ec:	8b 33                	mov    esi,DWORD PTR [ebx]
c00100ee:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00100f1:	01 f0                	add    eax,esi
c00100f3:	55                   	push   ebp
c00100f4:	11 fa                	adc    edx,edi
c00100f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100fa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00100fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010102:	56                   	push   esi
c0010103:	68 74 a1 02 c0       	push   0xc002a174
c0010108:	e8 87 2c 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001010d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010111:	83 c4 10             	add    esp,0x10
c0010114:	09 f8                	or     eax,edi
c0010116:	0f 85 25 01 00 00    	jne    c0010241 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001011c:	4d                   	dec    ebp
c001011d:	75 a7                	jne    c00100c6 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001011f:	ba 00 00 08 00       	mov    edx,0x80000
c0010124:	89 c1                	mov    ecx,eax
c0010126:	39 f2                	cmp    edx,esi
c0010128:	19 f9                	sbb    ecx,edi
c001012a:	0f 82 a7 00 00 00    	jb     c00101d7 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010130:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010134:	89 c1                	mov    ecx,eax
c0010136:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001013a:	0f 83 97 00 00 00    	jae    c00101d7 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010140:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010145:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010149:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001014d:	39 fa                	cmp    edx,edi
c001014f:	19 e8                	sbb    eax,ebp
c0010151:	0f 82 14 01 00 00    	jb     c001026b <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010157:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001015b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001015f:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010165:	ba ff 1f 00 00       	mov    edx,0x1fff
c001016a:	83 d5 ff             	adc    ebp,0xffffffff
c001016d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010171:	31 c0                	xor    eax,eax
c0010173:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010177:	39 fa                	cmp    edx,edi
c0010179:	89 c1                	mov    ecx,eax
c001017b:	19 e9                	sbb    ecx,ebp
c001017d:	0f 83 43 ff ff ff    	jae    c00100c6 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010183:	be 00 00 08 00       	mov    esi,0x80000
c0010188:	50                   	push   eax
c0010189:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001018d:	57                   	push   edi
c001018e:	56                   	push   esi
c001018f:	68 98 a1 02 c0       	push   0xc002a198
c0010194:	e8 fb 2b 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0010199:	5a                   	pop    edx
c001019a:	59                   	pop    ecx
c001019b:	57                   	push   edi
c001019c:	56                   	push   esi
c001019d:	e8 76 fe ff ff       	call   c0010018 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101a2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101aa:	83 c4 0c             	add    esp,0xc
c00101ad:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101b1:	03 05 74 e2 02 c0    	add    eax,DWORD PTR ds:0xc002e274
c00101b7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101be:	a3 74 e2 02 c0       	mov    ds:0xc002e274,eax
c00101c3:	52                   	push   edx
c00101c4:	50                   	push   eax
c00101c5:	68 58 a1 02 c0       	push   0xc002a158
c00101ca:	e8 c5 2b 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00101cf:	83 c4 10             	add    esp,0x10
c00101d2:	e9 ef fe ff ff       	jmp    c00100c6 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101d7:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101e3:	39 ea                	cmp    edx,ebp
c00101e5:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101e9:	0f 82 d7 fe ff ff    	jb     c00100c6 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101ef:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101f4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00101f8:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00101fc:	0f 83 c4 fe ff ff    	jae    c00100c6 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010202:	39 ee                	cmp    esi,ebp
c0010204:	89 f8                	mov    eax,edi
c0010206:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001020a:	0f 83 78 ff ff ff    	jae    c0010188 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010210:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010214:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010218:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001021c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010220:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001022c:	e9 57 ff ff ff       	jmp    c0010188 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010231:	83 ec 0c             	sub    esp,0xc
c0010234:	68 4a a1 02 c0       	push   0xc002a14a
c0010239:	e8 ff a1 00 00       	call   c001a43d <Krnl::panic(char const*)>
c001023e:	83 c4 10             	add    esp,0x10
c0010241:	bb 40 01 00 00       	mov    ebx,0x140
c0010246:	83 ec 08             	sub    esp,0x8
c0010249:	6a 00                	push   0x0
c001024b:	53                   	push   ebx
c001024c:	43                   	inc    ebx
c001024d:	e8 b3 fb ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c0010252:	ff 05 74 e2 02 c0    	inc    DWORD PTR ds:0xc002e274
c0010258:	83 c4 10             	add    esp,0x10
c001025b:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010261:	75 e3                	jne    c0010246 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010263:	83 c4 3c             	add    esp,0x3c
c0010266:	5b                   	pop    ebx
c0010267:	5e                   	pop    esi
c0010268:	5f                   	pop    edi
c0010269:	5d                   	pop    ebp
c001026a:	c3                   	ret    
c001026b:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010273:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001027b:	e9 d7 fe ff ff       	jmp    c0010157 <Phys::physicalMemorySetup(unsigned int)+0x107>

c0010280 <Pipe::isAtty()>:
c0010280:	31 c0                	xor    eax,eax
c0010282:	c3                   	ret    
c0010283:	90                   	nop

c0010284 <Pipe::~Pipe()>:
c0010284:	83 ec 0c             	sub    esp,0xc
c0010287:	ba 04 a2 02 c0       	mov    edx,0xc002a204
c001028c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010290:	89 10                	mov    DWORD PTR [eax],edx
c0010292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010296:	83 ec 0c             	sub    esp,0xc
c0010299:	50                   	push   eax
c001029a:	e8 37 16 00 00       	call   c00118d6 <UnixFile::~UnixFile()>
c001029f:	83 c4 10             	add    esp,0x10
c00102a2:	90                   	nop
c00102a3:	83 c4 0c             	add    esp,0xc
c00102a6:	c3                   	ret    
c00102a7:	90                   	nop

c00102a8 <Pipe::~Pipe()>:
c00102a8:	83 ec 0c             	sub    esp,0xc
c00102ab:	83 ec 0c             	sub    esp,0xc
c00102ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102b2:	e8 cd ff ff ff       	call   c0010284 <Pipe::~Pipe()>
c00102b7:	83 c4 10             	add    esp,0x10
c00102ba:	83 ec 08             	sub    esp,0x8
c00102bd:	6a 20                	push   0x20
c00102bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102c3:	e8 ec 29 00 00       	call   c0012cb4 <operator delete(void*, unsigned long)>
c00102c8:	83 c4 10             	add    esp,0x10
c00102cb:	83 c4 0c             	add    esp,0xc
c00102ce:	c3                   	ret    
c00102cf:	90                   	nop

c00102d0 <Pipe::read(unsigned long long, void*, int*)>:
c00102d0:	55                   	push   ebp
c00102d1:	57                   	push   edi
c00102d2:	56                   	push   esi
c00102d3:	53                   	push   ebx
c00102d4:	83 ec 1c             	sub    esp,0x1c
c00102d7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102db:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102df:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102e3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102e6:	89 c8                	mov    eax,ecx
c00102e8:	99                   	cdq    
c00102e9:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00102ed:	74 19                	je     c0010308 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102ef:	39 f9                	cmp    ecx,edi
c00102f1:	89 d1                	mov    ecx,edx
c00102f3:	19 f1                	sbb    ecx,esi
c00102f5:	73 11                	jae    c0010308 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102f7:	e8 3b d9 00 00       	call   c001dc37 <lockScheduler()>
c00102fc:	e8 71 dc 00 00       	call   c001df72 <schedule()>
c0010301:	e8 33 d9 00 00       	call   c001dc39 <unlockScheduler()>
c0010306:	eb db                	jmp    c00102e3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010308:	39 f8                	cmp    eax,edi
c001030a:	89 d1                	mov    ecx,edx
c001030c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010310:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010314:	19 f1                	sbb    ecx,esi
c0010316:	73 08                	jae    c0010320 <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010318:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001031c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010320:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010323:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010326:	29 c6                	sub    esi,eax
c0010328:	89 f1                	mov    ecx,esi
c001032a:	c1 f9 1f             	sar    ecx,0x1f
c001032d:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010331:	89 ca                	mov    edx,ecx
c0010333:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010337:	19 d1                	sbb    ecx,edx
c0010339:	73 04                	jae    c001033f <Pipe::read(unsigned long long, void*, int*)+0x6f>
c001033b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001033f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010343:	89 fd                	mov    ebp,edi
c0010345:	29 f5                	sub    ebp,esi
c0010347:	85 f6                	test   esi,esi
c0010349:	74 12                	je     c001035d <Pipe::read(unsigned long long, void*, int*)+0x8d>
c001034b:	52                   	push   edx
c001034c:	56                   	push   esi
c001034d:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010350:	50                   	push   eax
c0010351:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010355:	e8 ea 03 ff ff       	call   c0000744 <memcpy>
c001035a:	83 c4 10             	add    esp,0x10
c001035d:	85 ed                	test   ebp,ebp
c001035f:	74 12                	je     c0010373 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c0010361:	50                   	push   eax
c0010362:	55                   	push   ebp
c0010363:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010366:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c001036a:	56                   	push   esi
c001036b:	e8 d4 03 ff ff       	call   c0000744 <memcpy>
c0010370:	83 c4 10             	add    esp,0x10
c0010373:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010376:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010379:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001037c:	99                   	cdq    
c001037d:	89 f7                	mov    edi,esi
c001037f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010383:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010387:	c1 ff 1f             	sar    edi,0x1f
c001038a:	57                   	push   edi
c001038b:	56                   	push   esi
c001038c:	52                   	push   edx
c001038d:	50                   	push   eax
c001038e:	e8 a9 65 01 00       	call   c002693c <__umoddi3>
c0010393:	83 c4 10             	add    esp,0x10
c0010396:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010399:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001039e:	75 10                	jne    c00103b0 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103a0:	83 ec 0c             	sub    esp,0xc
c00103a3:	68 c1 a1 02 c0       	push   0xc002a1c1
c00103a8:	e8 90 a0 00 00       	call   c001a43d <Krnl::panic(char const*)>
c00103ad:	83 c4 10             	add    esp,0x10
c00103b0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103b8:	89 10                	mov    DWORD PTR [eax],edx
c00103ba:	83 c4 1c             	add    esp,0x1c
c00103bd:	31 c0                	xor    eax,eax
c00103bf:	5b                   	pop    ebx
c00103c0:	5e                   	pop    esi
c00103c1:	5f                   	pop    edi
c00103c2:	5d                   	pop    ebp
c00103c3:	c3                   	ret    

c00103c4 <Pipe::write(unsigned long long, void*, int*)>:
c00103c4:	55                   	push   ebp
c00103c5:	57                   	push   edi
c00103c6:	56                   	push   esi
c00103c7:	53                   	push   ebx
c00103c8:	83 ec 1c             	sub    esp,0x1c
c00103cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103cf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103d3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00103da:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00103dd:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00103e0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103e4:	89 de                	mov    esi,ebx
c00103e6:	89 df                	mov    edi,ebx
c00103e8:	c1 ff 1f             	sar    edi,0x1f
c00103eb:	01 c6                	add    esi,eax
c00103ed:	89 c8                	mov    eax,ecx
c00103ef:	11 d7                	adc    edi,edx
c00103f1:	99                   	cdq    
c00103f2:	39 f1                	cmp    ecx,esi
c00103f4:	89 d0                	mov    eax,edx
c00103f6:	19 f8                	sbb    eax,edi
c00103f8:	b8 01 00 00 00       	mov    eax,0x1
c00103fd:	0f 82 80 00 00 00    	jb     c0010483 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010403:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010406:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010409:	01 d8                	add    eax,ebx
c001040b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001040f:	99                   	cdq    
c0010410:	f7 f9                	idiv   ecx
c0010412:	29 d1                	sub    ecx,edx
c0010414:	89 d7                	mov    edi,edx
c0010416:	89 c8                	mov    eax,ecx
c0010418:	99                   	cdq    
c0010419:	39 ce                	cmp    esi,ecx
c001041b:	19 d3                	sbb    ebx,edx
c001041d:	bb 00 00 00 00       	mov    ebx,0x0
c0010422:	72 04                	jb     c0010428 <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010424:	89 f3                	mov    ebx,esi
c0010426:	29 cb                	sub    ebx,ecx
c0010428:	89 f1                	mov    ecx,esi
c001042a:	29 d9                	sub    ecx,ebx
c001042c:	74 1a                	je     c0010448 <Pipe::write(unsigned long long, void*, int*)+0x84>
c001042e:	52                   	push   edx
c001042f:	51                   	push   ecx
c0010430:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010434:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010438:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001043b:	57                   	push   edi
c001043c:	e8 03 03 ff ff       	call   c0000744 <memcpy>
c0010441:	83 c4 10             	add    esp,0x10
c0010444:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010448:	85 db                	test   ebx,ebx
c001044a:	74 12                	je     c001045e <Pipe::write(unsigned long long, void*, int*)+0x9a>
c001044c:	50                   	push   eax
c001044d:	53                   	push   ebx
c001044e:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010452:	51                   	push   ecx
c0010453:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010456:	e8 e9 02 ff ff       	call   c0000744 <memcpy>
c001045b:	83 c4 10             	add    esp,0x10
c001045e:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c0010461:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010466:	75 10                	jne    c0010478 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010468:	83 ec 0c             	sub    esp,0xc
c001046b:	68 dd a1 02 c0       	push   0xc002a1dd
c0010470:	e8 c8 9f 00 00       	call   c001a43d <Krnl::panic(char const*)>
c0010475:	83 c4 10             	add    esp,0x10
c0010478:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001047c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001047f:	89 38                	mov    DWORD PTR [eax],edi
c0010481:	31 c0                	xor    eax,eax
c0010483:	83 c4 1c             	add    esp,0x1c
c0010486:	5b                   	pop    ebx
c0010487:	5e                   	pop    esi
c0010488:	5f                   	pop    edi
c0010489:	5d                   	pop    ebp
c001048a:	c3                   	ret    
c001048b:	90                   	nop

c001048c <Pipe::Pipe(int)>:
c001048c:	83 ec 0c             	sub    esp,0xc
c001048f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010493:	83 ec 08             	sub    esp,0x8
c0010496:	6a 00                	push   0x0
c0010498:	50                   	push   eax
c0010499:	e8 56 12 00 00       	call   c00116f4 <UnixFile::UnixFile(int)>
c001049e:	83 c4 10             	add    esp,0x10
c00104a1:	ba 04 a2 02 c0       	mov    edx,0xc002a204
c00104a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104aa:	89 10                	mov    DWORD PTR [eax],edx
c00104ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104b4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104bb:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c6:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104d1:	83 ec 0c             	sub    esp,0xc
c00104d4:	50                   	push   eax
c00104d5:	e8 66 f3 ff ff       	call   c000f840 <malloc>
c00104da:	83 c4 10             	add    esp,0x10
c00104dd:	89 c2                	mov    edx,eax
c00104df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ea:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00104ee:	90                   	nop
c00104ef:	83 c4 0c             	add    esp,0xc
c00104f2:	c3                   	ret    
c00104f3:	90                   	nop

c00104f4 <VgaText::isAtty()>:
c00104f4:	b0 01                	mov    al,0x1
c00104f6:	c3                   	ret    
c00104f7:	90                   	nop

c00104f8 <VgaText::~VgaText()>:
c00104f8:	83 ec 0c             	sub    esp,0xc
c00104fb:	ba c0 a2 02 c0       	mov    edx,0xc002a2c0
c0010500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010504:	89 10                	mov    DWORD PTR [eax],edx
c0010506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050a:	83 ec 0c             	sub    esp,0xc
c001050d:	50                   	push   eax
c001050e:	e8 c3 13 00 00       	call   c00118d6 <UnixFile::~UnixFile()>
c0010513:	83 c4 10             	add    esp,0x10
c0010516:	90                   	nop
c0010517:	83 c4 0c             	add    esp,0xc
c001051a:	c3                   	ret    
c001051b:	90                   	nop

c001051c <VgaText::~VgaText()>:
c001051c:	83 ec 0c             	sub    esp,0xc
c001051f:	83 ec 0c             	sub    esp,0xc
c0010522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010526:	e8 cd ff ff ff       	call   c00104f8 <VgaText::~VgaText()>
c001052b:	83 c4 10             	add    esp,0x10
c001052e:	83 ec 08             	sub    esp,0x8
c0010531:	68 60 12 00 00       	push   0x1260
c0010536:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001053a:	e8 75 27 00 00       	call   c0012cb4 <operator delete(void*, unsigned long)>
c001053f:	83 c4 10             	add    esp,0x10
c0010542:	83 c4 0c             	add    esp,0xc
c0010545:	c3                   	ret    

c0010546 <VgaText::read(unsigned long long, void*, int*)>:
c0010546:	83 ec 10             	sub    esp,0x10
c0010549:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001054d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010551:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010555:	e8 e0 5b 00 00       	call   c001613a <readKeyboard(VgaText*, char*, unsigned long)>
c001055a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001055e:	89 02                	mov    DWORD PTR [edx],eax
c0010560:	31 c0                	xor    eax,eax
c0010562:	83 c4 1c             	add    esp,0x1c
c0010565:	c3                   	ret    

c0010566 <setTerminalScrollLock(bool)>:
c0010566:	c3                   	ret    

c0010567 <addToTerminalCycle(VgaText*)>:
c0010567:	8b 15 00 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e300
c001056d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010571:	85 d2                	test   edx,edx
c0010573:	75 0c                	jne    c0010581 <addToTerminalCycle(VgaText*)+0x1a>
c0010575:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c001057b:	a3 00 e3 02 c0       	mov    ds:0xc002e300,eax
c0010580:	c3                   	ret    
c0010581:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010587:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c001058d:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c0010593:	c3                   	ret    

c0010594 <installVgaTextImplementation()>:
c0010594:	83 ec 10             	sub    esp,0x10
c0010597:	6a 20                	push   0x20
c0010599:	6a 00                	push   0x0
c001059b:	68 e0 e2 02 c0       	push   0xc002e2e0
c00105a0:	e8 d3 01 ff ff       	call   c0000778 <memset>
c00105a5:	83 c4 1c             	add    esp,0x1c
c00105a8:	c3                   	ret    

c00105a9 <scrollTerminalScrollLock(int)>:
c00105a9:	c3                   	ret    

c00105aa <VgaText::load()>:
c00105aa:	53                   	push   ebx
c00105ab:	31 c0                	xor    eax,eax
c00105ad:	83 ec 58             	sub    esp,0x58
c00105b0:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105b4:	89 e2                	mov    edx,esp
c00105b6:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105ba:	40                   	inc    eax
c00105bb:	83 f8 50             	cmp    eax,0x50
c00105be:	75 f6                	jne    c00105b6 <VgaText::load()+0xc>
c00105c0:	31 c0                	xor    eax,eax
c00105c2:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00105c9:	84 c9                	test   cl,cl
c00105cb:	74 06                	je     c00105d3 <VgaText::load()+0x29>
c00105cd:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105d0:	40                   	inc    eax
c00105d1:	eb ef                	jmp    c00105c2 <VgaText::load()+0x18>
c00105d3:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00105d9:	85 c0                	test   eax,eax
c00105db:	74 09                	je     c00105e6 <VgaText::load()+0x3c>
c00105dd:	51                   	push   ecx
c00105de:	51                   	push   ecx
c00105df:	52                   	push   edx
c00105e0:	53                   	push   ebx
c00105e1:	ff d0                	call   eax
c00105e3:	83 c4 10             	add    esp,0x10
c00105e6:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00105ec:	85 c0                	test   eax,eax
c00105ee:	74 09                	je     c00105f9 <VgaText::load()+0x4f>
c00105f0:	83 ec 0c             	sub    esp,0xc
c00105f3:	53                   	push   ebx
c00105f4:	ff d0                	call   eax
c00105f6:	83 c4 10             	add    esp,0x10
c00105f9:	83 c4 58             	add    esp,0x58
c00105fc:	5b                   	pop    ebx
c00105fd:	c3                   	ret    

c00105fe <VgaText::updateCursor()>:
c00105fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010602:	39 05 04 e3 02 c0    	cmp    DWORD PTR ds:0xc002e304,eax
c0010608:	75 0c                	jne    c0010616 <VgaText::updateCursor()+0x18>
c001060a:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010610:	85 c0                	test   eax,eax
c0010612:	74 02                	je     c0010616 <VgaText::updateCursor()+0x18>
c0010614:	ff e0                	jmp    eax
c0010616:	c3                   	ret    
c0010617:	90                   	nop

c0010618 <VgaText::showCursor(bool)>:
c0010618:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001061c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010620:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010626:	c3                   	ret    
c0010627:	90                   	nop

c0010628 <VgaText::disableBlink(bool)>:
c0010628:	56                   	push   esi
c0010629:	53                   	push   ebx
c001062a:	51                   	push   ecx
c001062b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001062f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010633:	39 1d 04 e3 02 c0    	cmp    DWORD PTR ds:0xc002e304,ebx
c0010639:	75 18                	jne    c0010653 <VgaText::disableBlink(bool)+0x2b>
c001063b:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010641:	85 c0                	test   eax,eax
c0010643:	74 0e                	je     c0010653 <VgaText::disableBlink(bool)+0x2b>
c0010645:	89 f1                	mov    ecx,esi
c0010647:	52                   	push   edx
c0010648:	52                   	push   edx
c0010649:	0f b6 d1             	movzx  edx,cl
c001064c:	52                   	push   edx
c001064d:	53                   	push   ebx
c001064e:	ff d0                	call   eax
c0010650:	83 c4 10             	add    esp,0x10
c0010653:	89 f0                	mov    eax,esi
c0010655:	83 f0 01             	xor    eax,0x1
c0010658:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c001065e:	58                   	pop    eax
c001065f:	5b                   	pop    ebx
c0010660:	5e                   	pop    esi
c0010661:	c3                   	ret    

c0010662 <VgaText::doANSI_SGR(int)>:
c0010662:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010666:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001066a:	85 d2                	test   edx,edx
c001066c:	75 14                	jne    c0010682 <VgaText::doANSI_SGR(int)+0x20>
c001066e:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010674:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001067a:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010680:	eb 65                	jmp    c00106e7 <VgaText::doANSI_SGR(int)+0x85>
c0010682:	83 fa 07             	cmp    edx,0x7
c0010685:	75 14                	jne    c001069b <VgaText::doANSI_SGR(int)+0x39>
c0010687:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c001068d:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c0010693:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010699:	eb 4c                	jmp    c00106e7 <VgaText::doANSI_SGR(int)+0x85>
c001069b:	83 fa 1b             	cmp    edx,0x1b
c001069e:	74 ce                	je     c001066e <VgaText::doANSI_SGR(int)+0xc>
c00106a0:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106a3:	83 f9 07             	cmp    ecx,0x7
c00106a6:	77 09                	ja     c00106b1 <VgaText::doANSI_SGR(int)+0x4f>
c00106a8:	8b 14 8d 80 d1 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2e80]
c00106af:	eb 20                	jmp    c00106d1 <VgaText::doANSI_SGR(int)+0x6f>
c00106b1:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106b4:	83 f9 07             	cmp    ecx,0x7
c00106b7:	77 09                	ja     c00106c2 <VgaText::doANSI_SGR(int)+0x60>
c00106b9:	8b 14 8d 80 d1 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2e80]
c00106c0:	eb 25                	jmp    c00106e7 <VgaText::doANSI_SGR(int)+0x85>
c00106c2:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106c5:	83 f9 07             	cmp    ecx,0x7
c00106c8:	77 0e                	ja     c00106d8 <VgaText::doANSI_SGR(int)+0x76>
c00106ca:	8b 14 95 38 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2fc8]
c00106d1:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106d7:	c3                   	ret    
c00106d8:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106db:	83 f9 07             	cmp    ecx,0x7
c00106de:	77 0d                	ja     c00106ed <VgaText::doANSI_SGR(int)+0x8b>
c00106e0:	8b 14 95 10 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2ff0]
c00106e7:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00106ed:	c3                   	ret    

c00106ee <VgaText::setDefaultBgColour(VgaColour)>:
c00106ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106f6:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00106fc:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010702:	c3                   	ret    
c0010703:	90                   	nop

c0010704 <VgaText::setDefaultFgColour(VgaColour)>:
c0010704:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010708:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001070c:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010712:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010718:	c3                   	ret    
c0010719:	90                   	nop

c001071a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001071a:	53                   	push   ebx
c001071b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001071f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010723:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010727:	51                   	push   ecx
c0010728:	e8 c1 ff ff ff       	call   c00106ee <VgaText::setDefaultBgColour(VgaColour)>
c001072d:	58                   	pop    eax
c001072e:	5a                   	pop    edx
c001072f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010733:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010737:	5b                   	pop    ebx
c0010738:	eb ca                	jmp    c0010704 <VgaText::setDefaultFgColour(VgaColour)>

c001073a <VgaText::combineColours(unsigned char, unsigned char)>:
c001073a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001073e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010743:	83 e0 0f             	and    eax,0xf
c0010746:	c1 e2 04             	shl    edx,0x4
c0010749:	09 d0                	or     eax,edx
c001074b:	c3                   	ret    

c001074c <VgaText::scrollScreen()>:
c001074c:	57                   	push   edi
c001074d:	56                   	push   esi
c001074e:	be 01 00 00 00       	mov    esi,0x1
c0010753:	53                   	push   ebx
c0010754:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010758:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001075e:	31 ff                	xor    edi,edi
c0010760:	01 d9                	add    ecx,ebx
c0010762:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010765:	83 fe 17             	cmp    esi,0x17
c0010768:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c001076e:	75 28                	jne    c0010798 <VgaText::scrollScreen()+0x4c>
c0010770:	f7 c7 01 00 00 00    	test   edi,0x1
c0010776:	74 1c                	je     c0010794 <VgaText::scrollScreen()+0x48>
c0010778:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c001077f:	50                   	push   eax
c0010780:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010787:	50                   	push   eax
c0010788:	e8 ad ff ff ff       	call   c001073a <VgaText::combineColours(unsigned char, unsigned char)>
c001078d:	5a                   	pop    edx
c001078e:	5a                   	pop    edx
c001078f:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c0010792:	eb 04                	jmp    c0010798 <VgaText::scrollScreen()+0x4c>
c0010794:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010798:	47                   	inc    edi
c0010799:	41                   	inc    ecx
c001079a:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107a0:	75 c0                	jne    c0010762 <VgaText::scrollScreen()+0x16>
c00107a2:	46                   	inc    esi
c00107a3:	83 fe 18             	cmp    esi,0x18
c00107a6:	75 b0                	jne    c0010758 <VgaText::scrollScreen()+0xc>
c00107a8:	39 1d 04 e3 02 c0    	cmp    DWORD PTR ds:0xc002e304,ebx
c00107ae:	75 24                	jne    c00107d4 <VgaText::scrollScreen()+0x88>
c00107b0:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00107b7:	74 08                	je     c00107c1 <VgaText::scrollScreen()+0x75>
c00107b9:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00107bf:	eb 13                	jmp    c00107d4 <VgaText::scrollScreen()+0x88>
c00107c1:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00107c7:	85 c0                	test   eax,eax
c00107c9:	74 09                	je     c00107d4 <VgaText::scrollScreen()+0x88>
c00107cb:	83 ec 0c             	sub    esp,0xc
c00107ce:	53                   	push   ebx
c00107cf:	ff d0                	call   eax
c00107d1:	83 c4 10             	add    esp,0x10
c00107d4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107d8:	5b                   	pop    ebx
c00107d9:	5e                   	pop    esi
c00107da:	5f                   	pop    edi
c00107db:	e9 1e fe ff ff       	jmp    c00105fe <VgaText::updateCursor()>

c00107e0 <VgaText::combineCharAndColour(char, unsigned char)>:
c00107e0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107e5:	c1 e0 08             	shl    eax,0x8
c00107e8:	89 c2                	mov    edx,eax
c00107ea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107ef:	09 d0                	or     eax,edx
c00107f1:	c3                   	ret    

c00107f2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107f2:	53                   	push   ebx
c00107f3:	83 ec 08             	sub    esp,0x8
c00107f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107fa:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107ff:	50                   	push   eax
c0010800:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010805:	50                   	push   eax
c0010806:	e8 2f ff ff ff       	call   c001073a <VgaText::combineColours(unsigned char, unsigned char)>
c001080b:	5a                   	pop    edx
c001080c:	0f b6 c0             	movzx  eax,al
c001080f:	5b                   	pop    ebx
c0010810:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010815:	50                   	push   eax
c0010816:	53                   	push   ebx
c0010817:	e8 c4 ff ff ff       	call   c00107e0 <VgaText::combineCharAndColour(char, unsigned char)>
c001081c:	5a                   	pop    edx
c001081d:	5a                   	pop    edx
c001081e:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010824:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010828:	0f b7 d2             	movzx  edx,dx
c001082b:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010830:	39 0d 04 e3 02 c0    	cmp    DWORD PTR ds:0xc002e304,ecx
c0010836:	75 14                	jne    c001084c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010838:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c001083e:	85 c0                	test   eax,eax
c0010840:	74 0a                	je     c001084c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010842:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010846:	83 c4 08             	add    esp,0x8
c0010849:	5b                   	pop    ebx
c001084a:	ff e0                	jmp    eax
c001084c:	83 c4 08             	add    esp,0x8
c001084f:	5b                   	pop    ebx
c0010850:	c3                   	ret    
c0010851:	90                   	nop

c0010852 <VgaText::getCursorX()>:
c0010852:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010856:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c001085c:	c3                   	ret    
c001085d:	90                   	nop

c001085e <VgaText::getCursorY()>:
c001085e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010862:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010868:	c3                   	ret    
c0010869:	90                   	nop

c001086a <VgaText::setCursor(int, int)>:
c001086a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001086e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010872:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010878:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001087c:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010882:	e9 77 fd ff ff       	jmp    c00105fe <VgaText::updateCursor()>
c0010887:	90                   	nop

c0010888 <VgaText::setCursorX(int)>:
c0010888:	83 ec 10             	sub    esp,0x10
c001088b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001088f:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010895:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010899:	50                   	push   eax
c001089a:	e8 cb ff ff ff       	call   c001086a <VgaText::setCursor(int, int)>
c001089f:	83 c4 1c             	add    esp,0x1c
c00108a2:	c3                   	ret    
c00108a3:	90                   	nop

c00108a4 <VgaText::setCursorY(int)>:
c00108a4:	83 ec 10             	sub    esp,0x10
c00108a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108af:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00108b5:	50                   	push   eax
c00108b6:	e8 af ff ff ff       	call   c001086a <VgaText::setCursor(int, int)>
c00108bb:	83 c4 1c             	add    esp,0x1c
c00108be:	c3                   	ret    
c00108bf:	90                   	nop

c00108c0 <VgaText::incrementCursor(bool)>:
c00108c0:	56                   	push   esi
c00108c1:	53                   	push   ebx
c00108c2:	51                   	push   ecx
c00108c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108cb:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00108d1:	40                   	inc    eax
c00108d2:	83 f8 50             	cmp    eax,0x50
c00108d5:	74 08                	je     c00108df <VgaText::incrementCursor(bool)+0x1f>
c00108d7:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00108dd:	eb 33                	jmp    c0010912 <VgaText::incrementCursor(bool)+0x52>
c00108df:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00108e5:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00108ef:	8d 50 01             	lea    edx,[eax+0x1]
c00108f2:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00108f8:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00108fe:	75 12                	jne    c0010912 <VgaText::incrementCursor(bool)+0x52>
c0010900:	83 ec 0c             	sub    esp,0xc
c0010903:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010909:	53                   	push   ebx
c001090a:	e8 3d fe ff ff       	call   c001074c <VgaText::scrollScreen()>
c001090f:	83 c4 10             	add    esp,0x10
c0010912:	89 f0                	mov    eax,esi
c0010914:	84 c0                	test   al,al
c0010916:	74 0c                	je     c0010924 <VgaText::incrementCursor(bool)+0x64>
c0010918:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001091c:	5a                   	pop    edx
c001091d:	5b                   	pop    ebx
c001091e:	5e                   	pop    esi
c001091f:	e9 da fc ff ff       	jmp    c00105fe <VgaText::updateCursor()>
c0010924:	58                   	pop    eax
c0010925:	5b                   	pop    ebx
c0010926:	5e                   	pop    esi
c0010927:	c3                   	ret    

c0010928 <VgaText::updateRAMUsageDisplay(int)>:
c0010928:	56                   	push   esi
c0010929:	8b 35 60 d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d160
c001092f:	53                   	push   ebx
c0010930:	bb 0a 00 00 00       	mov    ebx,0xa
c0010935:	6a 0f                	push   0xf
c0010937:	6a 00                	push   0x0
c0010939:	e8 fc fd ff ff       	call   c001073a <VgaText::combineColours(unsigned char, unsigned char)>
c001093e:	5a                   	pop    edx
c001093f:	59                   	pop    ecx
c0010940:	0f b6 c8             	movzx  ecx,al
c0010943:	51                   	push   ecx
c0010944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010948:	99                   	cdq    
c0010949:	f7 fb                	idiv   ebx
c001094b:	89 d3                	mov    ebx,edx
c001094d:	83 c0 30             	add    eax,0x30
c0010950:	83 c3 30             	add    ebx,0x30
c0010953:	0f be c0             	movsx  eax,al
c0010956:	0f b6 db             	movzx  ebx,bl
c0010959:	50                   	push   eax
c001095a:	e8 81 fe ff ff       	call   c00107e0 <VgaText::combineCharAndColour(char, unsigned char)>
c001095f:	5a                   	pop    edx
c0010960:	5a                   	pop    edx
c0010961:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010968:	51                   	push   ecx
c0010969:	53                   	push   ebx
c001096a:	e8 71 fe ff ff       	call   c00107e0 <VgaText::combineCharAndColour(char, unsigned char)>
c001096f:	5b                   	pop    ebx
c0010970:	5a                   	pop    edx
c0010971:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010978:	51                   	push   ecx
c0010979:	6a 25                	push   0x25
c001097b:	e8 60 fe ff ff       	call   c00107e0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010980:	59                   	pop    ecx
c0010981:	5b                   	pop    ebx
c0010982:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010989:	5b                   	pop    ebx
c001098a:	5e                   	pop    esi
c001098b:	c3                   	ret    

c001098c <VgaText::updateDiskUsage()>:
c001098c:	55                   	push   ebp
c001098d:	bd 10 27 00 00       	mov    ebp,0x2710
c0010992:	57                   	push   edi
c0010993:	8b 3d 60 d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d160
c0010999:	56                   	push   esi
c001099a:	53                   	push   ebx
c001099b:	6a 0f                	push   0xf
c001099d:	6a 00                	push   0x0
c001099f:	e8 96 fd ff ff       	call   c001073a <VgaText::combineColours(unsigned char, unsigned char)>
c00109a4:	5a                   	pop    edx
c00109a5:	0f b6 d8             	movzx  ebx,al
c00109a8:	59                   	pop    ecx
c00109a9:	8b 35 88 25 03 c0    	mov    esi,DWORD PTR ds:0xc0032588
c00109af:	53                   	push   ebx
c00109b0:	b9 0a 00 00 00       	mov    ecx,0xa
c00109b5:	89 f0                	mov    eax,esi
c00109b7:	99                   	cdq    
c00109b8:	f7 fd                	idiv   ebp
c00109ba:	99                   	cdq    
c00109bb:	f7 f9                	idiv   ecx
c00109bd:	8d 42 30             	lea    eax,[edx+0x30]
c00109c0:	0f b6 c0             	movzx  eax,al
c00109c3:	50                   	push   eax
c00109c4:	e8 17 fe ff ff       	call   c00107e0 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c9:	5d                   	pop    ebp
c00109ca:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109cf:	5a                   	pop    edx
c00109d0:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109d4:	53                   	push   ebx
c00109d5:	89 f0                	mov    eax,esi
c00109d7:	99                   	cdq    
c00109d8:	f7 fd                	idiv   ebp
c00109da:	99                   	cdq    
c00109db:	f7 f9                	idiv   ecx
c00109dd:	8d 42 30             	lea    eax,[edx+0x30]
c00109e0:	0f b6 c0             	movzx  eax,al
c00109e3:	50                   	push   eax
c00109e4:	e8 f7 fd ff ff       	call   c00107e0 <VgaText::combineCharAndColour(char, unsigned char)>
c00109e9:	5d                   	pop    ebp
c00109ea:	bd 64 00 00 00       	mov    ebp,0x64
c00109ef:	5a                   	pop    edx
c00109f0:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109f7:	53                   	push   ebx
c00109f8:	89 f0                	mov    eax,esi
c00109fa:	99                   	cdq    
c00109fb:	f7 fd                	idiv   ebp
c00109fd:	99                   	cdq    
c00109fe:	f7 f9                	idiv   ecx
c0010a00:	8d 42 30             	lea    eax,[edx+0x30]
c0010a03:	0f b6 c0             	movzx  eax,al
c0010a06:	50                   	push   eax
c0010a07:	e8 d4 fd ff ff       	call   c00107e0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a0c:	5d                   	pop    ebp
c0010a0d:	5a                   	pop    edx
c0010a0e:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a15:	53                   	push   ebx
c0010a16:	89 f0                	mov    eax,esi
c0010a18:	99                   	cdq    
c0010a19:	f7 f9                	idiv   ecx
c0010a1b:	89 d6                	mov    esi,edx
c0010a1d:	99                   	cdq    
c0010a1e:	f7 f9                	idiv   ecx
c0010a20:	8d 42 30             	lea    eax,[edx+0x30]
c0010a23:	0f b6 c0             	movzx  eax,al
c0010a26:	50                   	push   eax
c0010a27:	e8 b4 fd ff ff       	call   c00107e0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a2c:	5d                   	pop    ebp
c0010a2d:	5a                   	pop    edx
c0010a2e:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a35:	53                   	push   ebx
c0010a36:	8d 46 30             	lea    eax,[esi+0x30]
c0010a39:	0f b6 f0             	movzx  esi,al
c0010a3c:	56                   	push   esi
c0010a3d:	e8 9e fd ff ff       	call   c00107e0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a42:	5e                   	pop    esi
c0010a43:	8b 35 84 25 03 c0    	mov    esi,DWORD PTR ds:0xc0032584
c0010a49:	5d                   	pop    ebp
c0010a4a:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a51:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a56:	53                   	push   ebx
c0010a57:	89 f0                	mov    eax,esi
c0010a59:	99                   	cdq    
c0010a5a:	f7 fd                	idiv   ebp
c0010a5c:	99                   	cdq    
c0010a5d:	f7 f9                	idiv   ecx
c0010a5f:	8d 42 30             	lea    eax,[edx+0x30]
c0010a62:	0f b6 c0             	movzx  eax,al
c0010a65:	50                   	push   eax
c0010a66:	e8 75 fd ff ff       	call   c00107e0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a6b:	5a                   	pop    edx
c0010a6c:	5d                   	pop    ebp
c0010a6d:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a74:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a79:	53                   	push   ebx
c0010a7a:	89 f0                	mov    eax,esi
c0010a7c:	99                   	cdq    
c0010a7d:	f7 fd                	idiv   ebp
c0010a7f:	99                   	cdq    
c0010a80:	f7 f9                	idiv   ecx
c0010a82:	8d 42 30             	lea    eax,[edx+0x30]
c0010a85:	0f b6 c0             	movzx  eax,al
c0010a88:	50                   	push   eax
c0010a89:	e8 52 fd ff ff       	call   c00107e0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a8e:	5a                   	pop    edx
c0010a8f:	5d                   	pop    ebp
c0010a90:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a97:	bd 64 00 00 00       	mov    ebp,0x64
c0010a9c:	53                   	push   ebx
c0010a9d:	89 f0                	mov    eax,esi
c0010a9f:	99                   	cdq    
c0010aa0:	f7 fd                	idiv   ebp
c0010aa2:	99                   	cdq    
c0010aa3:	f7 f9                	idiv   ecx
c0010aa5:	83 c2 30             	add    edx,0x30
c0010aa8:	0f b6 d2             	movzx  edx,dl
c0010aab:	52                   	push   edx
c0010aac:	e8 2f fd ff ff       	call   c00107e0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ab1:	5a                   	pop    edx
c0010ab2:	5d                   	pop    ebp
c0010ab3:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010aba:	53                   	push   ebx
c0010abb:	89 f0                	mov    eax,esi
c0010abd:	99                   	cdq    
c0010abe:	f7 f9                	idiv   ecx
c0010ac0:	89 d6                	mov    esi,edx
c0010ac2:	99                   	cdq    
c0010ac3:	f7 f9                	idiv   ecx
c0010ac5:	8d 42 30             	lea    eax,[edx+0x30]
c0010ac8:	0f b6 c0             	movzx  eax,al
c0010acb:	50                   	push   eax
c0010acc:	e8 0f fd ff ff       	call   c00107e0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad1:	5a                   	pop    edx
c0010ad2:	59                   	pop    ecx
c0010ad3:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010ada:	53                   	push   ebx
c0010adb:	8d 46 30             	lea    eax,[esi+0x30]
c0010ade:	0f b6 f0             	movzx  esi,al
c0010ae1:	56                   	push   esi
c0010ae2:	e8 f9 fc ff ff       	call   c00107e0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ae7:	5b                   	pop    ebx
c0010ae8:	5e                   	pop    esi
c0010ae9:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010af0:	5b                   	pop    ebx
c0010af1:	5e                   	pop    esi
c0010af2:	5f                   	pop    edi
c0010af3:	5d                   	pop    ebp
c0010af4:	c3                   	ret    
c0010af5:	90                   	nop

c0010af6 <VgaText::updateTitle()>:
c0010af6:	53                   	push   ebx
c0010af7:	31 c0                	xor    eax,eax
c0010af9:	83 ec 58             	sub    esp,0x58
c0010afc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b00:	89 e1                	mov    ecx,esp
c0010b02:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b06:	40                   	inc    eax
c0010b07:	83 f8 50             	cmp    eax,0x50
c0010b0a:	75 f6                	jne    c0010b02 <VgaText::updateTitle()+0xc>
c0010b0c:	31 c0                	xor    eax,eax
c0010b0e:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b15:	84 db                	test   bl,bl
c0010b17:	74 06                	je     c0010b1f <VgaText::updateTitle()+0x29>
c0010b19:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b1c:	40                   	inc    eax
c0010b1d:	eb ef                	jmp    c0010b0e <VgaText::updateTitle()+0x18>
c0010b1f:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b25:	85 c0                	test   eax,eax
c0010b27:	74 09                	je     c0010b32 <VgaText::updateTitle()+0x3c>
c0010b29:	53                   	push   ebx
c0010b2a:	53                   	push   ebx
c0010b2b:	51                   	push   ecx
c0010b2c:	52                   	push   edx
c0010b2d:	ff d0                	call   eax
c0010b2f:	83 c4 10             	add    esp,0x10
c0010b32:	e8 55 fe ff ff       	call   c001098c <VgaText::updateDiskUsage()>
c0010b37:	83 c4 58             	add    esp,0x58
c0010b3a:	5b                   	pop    ebx
c0010b3b:	c3                   	ret    

c0010b3c <VgaText::setTitleTextColour(VgaColour)>:
c0010b3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b44:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b4a:	eb aa                	jmp    c0010af6 <VgaText::updateTitle()>

c0010b4c <VgaText::setTitleColour(VgaColour)>:
c0010b4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b54:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b5a:	eb 9a                	jmp    c0010af6 <VgaText::updateTitle()>

c0010b5c <VgaText::setTitle(char*)>:
c0010b5c:	53                   	push   ebx
c0010b5d:	83 ec 10             	sub    esp,0x10
c0010b60:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b68:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010b6e:	50                   	push   eax
c0010b6f:	e8 c0 fc fe ff       	call   c0000834 <strcpy>
c0010b74:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b78:	83 c4 18             	add    esp,0x18
c0010b7b:	5b                   	pop    ebx
c0010b7c:	e9 75 ff ff ff       	jmp    c0010af6 <VgaText::updateTitle()>
c0010b81:	90                   	nop

c0010b82 <VgaText::decrementCursor(bool)>:
c0010b82:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b86:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b8a:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010b90:	85 c0                	test   eax,eax
c0010b92:	74 07                	je     c0010b9b <VgaText::decrementCursor(bool)+0x19>
c0010b94:	48                   	dec    eax
c0010b95:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010b9b:	84 c9                	test   cl,cl
c0010b9d:	74 09                	je     c0010ba8 <VgaText::decrementCursor(bool)+0x26>
c0010b9f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010ba3:	e9 56 fa ff ff       	jmp    c00105fe <VgaText::updateCursor()>
c0010ba8:	c3                   	ret    
c0010ba9:	90                   	nop

c0010baa <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010baa:	53                   	push   ebx
c0010bab:	83 ec 08             	sub    esp,0x8
c0010bae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bb2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bb6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010bba:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010bbe:	3c 07                	cmp    al,0x7
c0010bc0:	75 2a                	jne    c0010bec <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010bc2:	a1 b4 e3 02 c0       	mov    eax,ds:0xc002e3b4
c0010bc7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010bcf:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010bd7:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010bdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010be3:	83 c4 08             	add    esp,0x8
c0010be6:	5b                   	pop    ebx
c0010be7:	e9 a6 2f 00 00       	jmp    c0013b92 <Buzzer::beep(int, int, bool)>
c0010bec:	3c 0d                	cmp    al,0xd
c0010bee:	75 0c                	jne    c0010bfc <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010bf0:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010bfa:	eb 3b                	jmp    c0010c37 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010bfc:	3c 0a                	cmp    al,0xa
c0010bfe:	75 40                	jne    c0010c40 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c00:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c06:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c10:	8d 50 01             	lea    edx,[eax+0x1]
c0010c13:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c19:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c1f:	75 12                	jne    c0010c33 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c21:	83 ec 0c             	sub    esp,0xc
c0010c24:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c2a:	53                   	push   ebx
c0010c2b:	e8 1c fb ff ff       	call   c001074c <VgaText::scrollScreen()>
c0010c30:	83 c4 10             	add    esp,0x10
c0010c33:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c37:	83 c4 08             	add    esp,0x8
c0010c3a:	5b                   	pop    ebx
c0010c3b:	e9 be f9 ff ff       	jmp    c00105fe <VgaText::updateCursor()>
c0010c40:	3c 08                	cmp    al,0x8
c0010c42:	75 31                	jne    c0010c75 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c44:	50                   	push   eax
c0010c45:	50                   	push   eax
c0010c46:	6a 01                	push   0x1
c0010c48:	53                   	push   ebx
c0010c49:	e8 34 ff ff ff       	call   c0010b82 <VgaText::decrementCursor(bool)>
c0010c4e:	5a                   	pop    edx
c0010c4f:	59                   	pop    ecx
c0010c50:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c56:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c5c:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c62:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c68:	6a 20                	push   0x20
c0010c6a:	53                   	push   ebx
c0010c6b:	e8 82 fb ff ff       	call   c00107f2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c70:	83 c4 28             	add    esp,0x28
c0010c73:	5b                   	pop    ebx
c0010c74:	c3                   	ret    
c0010c75:	83 ec 08             	sub    esp,0x8
c0010c78:	0f be c0             	movsx  eax,al
c0010c7b:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c81:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c87:	51                   	push   ecx
c0010c88:	52                   	push   edx
c0010c89:	50                   	push   eax
c0010c8a:	53                   	push   ebx
c0010c8b:	e8 62 fb ff ff       	call   c00107f2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c90:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c94:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010c9c:	83 c4 28             	add    esp,0x28
c0010c9f:	5b                   	pop    ebx
c0010ca0:	e9 1b fc ff ff       	jmp    c00108c0 <VgaText::incrementCursor(bool)>
c0010ca5:	90                   	nop

c0010ca6 <VgaText::isShowingCursor()>:
c0010ca6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010caa:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010cb0:	c3                   	ret    
c0010cb1:	90                   	nop

c0010cb2 <VgaText::isBlinkDisabled()>:
c0010cb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cb6:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010cbc:	83 f0 01             	xor    eax,0x1
c0010cbf:	c3                   	ret    

c0010cc0 <VgaText::setCursorHeight(int)>:
c0010cc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cc8:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010cce:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010cd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010cd9:	e9 3a f9 ff ff       	jmp    c0010618 <VgaText::showCursor(bool)>

c0010cde <VgaText::getCursorHeight()>:
c0010cde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ce2:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010ce8:	c3                   	ret    

c0010ce9 <setActiveTerminal(VgaText*)>:
c0010ce9:	53                   	push   ebx
c0010cea:	83 ec 08             	sub    esp,0x8
c0010ced:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cf1:	85 db                	test   ebx,ebx
c0010cf3:	75 11                	jne    c0010d06 <setActiveTerminal(VgaText*)+0x1d>
c0010cf5:	c7 44 24 10 18 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a218
c0010cfd:	83 c4 08             	add    esp,0x8
c0010d00:	5b                   	pop    ebx
c0010d01:	e9 37 97 00 00       	jmp    c001a43d <Krnl::panic(char const*)>
c0010d06:	50                   	push   eax
c0010d07:	50                   	push   eax
c0010d08:	53                   	push   ebx
c0010d09:	68 26 a2 02 c0       	push   0xc002a226
c0010d0e:	e8 81 20 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0010d13:	a1 04 e3 02 c0       	mov    eax,ds:0xc002e304
c0010d18:	83 c4 10             	add    esp,0x10
c0010d1b:	85 c0                	test   eax,eax
c0010d1d:	74 0c                	je     c0010d2b <setActiveTerminal(VgaText*)+0x42>
c0010d1f:	83 ec 0c             	sub    esp,0xc
c0010d22:	50                   	push   eax
c0010d23:	e8 d6 f8 ff ff       	call   c00105fe <VgaText::updateCursor()>
c0010d28:	83 c4 10             	add    esp,0x10
c0010d2b:	89 1d 04 e3 02 c0    	mov    DWORD PTR ds:0xc002e304,ebx
c0010d31:	51                   	push   ecx
c0010d32:	51                   	push   ecx
c0010d33:	53                   	push   ebx
c0010d34:	68 3e a2 02 c0       	push   0xc002a23e
c0010d39:	e8 56 20 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0010d3e:	83 c4 0c             	add    esp,0xc
c0010d41:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d47:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d4d:	53                   	push   ebx
c0010d4e:	e8 17 fb ff ff       	call   c001086a <VgaText::setCursor(int, int)>
c0010d53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d56:	e8 57 ff ff ff       	call   c0010cb2 <VgaText::isBlinkDisabled()>
c0010d5b:	5a                   	pop    edx
c0010d5c:	0f b6 c0             	movzx  eax,al
c0010d5f:	59                   	pop    ecx
c0010d60:	50                   	push   eax
c0010d61:	53                   	push   ebx
c0010d62:	e8 c1 f8 ff ff       	call   c0010628 <VgaText::disableBlink(bool)>
c0010d67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d6a:	e8 6f ff ff ff       	call   c0010cde <VgaText::getCursorHeight()>
c0010d6f:	5a                   	pop    edx
c0010d70:	59                   	pop    ecx
c0010d71:	50                   	push   eax
c0010d72:	53                   	push   ebx
c0010d73:	e8 48 ff ff ff       	call   c0010cc0 <VgaText::setCursorHeight(int)>
c0010d78:	83 c4 10             	add    esp,0x10
c0010d7b:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010d82:	75 0a                	jne    c0010d8e <setActiveTerminal(VgaText*)+0xa5>
c0010d84:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010d8e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d92:	83 c4 08             	add    esp,0x8
c0010d95:	5b                   	pop    ebx
c0010d96:	e9 0f f8 ff ff       	jmp    c00105aa <VgaText::load()>

c0010d9b <doTerminalCycle()>:
c0010d9b:	83 ec 18             	sub    esp,0x18
c0010d9e:	a1 00 e3 02 c0       	mov    eax,ds:0xc002e300
c0010da3:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010da9:	50                   	push   eax
c0010daa:	a3 00 e3 02 c0       	mov    ds:0xc002e300,eax
c0010daf:	e8 35 ff ff ff       	call   c0010ce9 <setActiveTerminal(VgaText*)>
c0010db4:	83 c4 1c             	add    esp,0x1c
c0010db7:	c3                   	ret    

c0010db8 <VgaText::doUpdate()>:
c0010db8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dbc:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010dc2:	85 c0                	test   eax,eax
c0010dc4:	74 02                	je     c0010dc8 <VgaText::doUpdate()+0x10>
c0010dc6:	ff e0                	jmp    eax
c0010dc8:	c3                   	ret    
c0010dc9:	90                   	nop

c0010dca <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010dca:	55                   	push   ebp
c0010dcb:	57                   	push   edi
c0010dcc:	56                   	push   esi
c0010dcd:	53                   	push   ebx
c0010dce:	83 ec 1c             	sub    esp,0x1c
c0010dd1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010dd5:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dda:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010de1:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010de4:	50                   	push   eax
c0010de5:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dea:	50                   	push   eax
c0010deb:	e8 4a f9 ff ff       	call   c001073a <VgaText::combineColours(unsigned char, unsigned char)>
c0010df0:	59                   	pop    ecx
c0010df1:	0f b6 c0             	movzx  eax,al
c0010df4:	5b                   	pop    ebx
c0010df5:	31 c9                	xor    ecx,ecx
c0010df7:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010dff:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e03:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e0d:	0f b7 db             	movzx  ebx,bx
c0010e10:	01 db                	add    ebx,ebx
c0010e12:	01 fb                	add    ebx,edi
c0010e14:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e17:	84 c0                	test   al,al
c0010e19:	0f 84 38 01 00 00    	je     c0010f57 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e1f:	3c 0d                	cmp    al,0xd
c0010e21:	75 0f                	jne    c0010e32 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e23:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e2d:	e9 1f 01 00 00       	jmp    c0010f51 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e32:	3c 0a                	cmp    al,0xa
c0010e34:	75 5b                	jne    c0010e91 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e36:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e3c:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e46:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e49:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e4f:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e55:	75 12                	jne    c0010e69 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e57:	83 ec 0c             	sub    esp,0xc
c0010e5a:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010e60:	55                   	push   ebp
c0010e61:	e8 e6 f8 ff ff       	call   c001074c <VgaText::scrollScreen()>
c0010e66:	83 c4 10             	add    esp,0x10
c0010e69:	83 ec 0c             	sub    esp,0xc
c0010e6c:	55                   	push   ebp
c0010e6d:	e8 8c f7 ff ff       	call   c00105fe <VgaText::updateCursor()>
c0010e72:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e7a:	83 c4 10             	add    esp,0x10
c0010e7d:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e83:	31 c9                	xor    ecx,ecx
c0010e85:	0f b7 db             	movzx  ebx,bx
c0010e88:	01 db                	add    ebx,ebx
c0010e8a:	01 fb                	add    ebx,edi
c0010e8c:	e9 c0 00 00 00       	jmp    c0010f51 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e91:	3c 08                	cmp    al,0x8
c0010e93:	75 4e                	jne    c0010ee3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010e95:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010e99:	53                   	push   ebx
c0010e9a:	53                   	push   ebx
c0010e9b:	6a 01                	push   0x1
c0010e9d:	55                   	push   ebp
c0010e9e:	e8 df fc ff ff       	call   c0010b82 <VgaText::decrementCursor(bool)>
c0010ea3:	58                   	pop    eax
c0010ea4:	5a                   	pop    edx
c0010ea5:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010eab:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010eb1:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010eb7:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010ebd:	6a 20                	push   0x20
c0010ebf:	55                   	push   ebp
c0010ec0:	e8 2d f9 ff ff       	call   c00107f2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ec5:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ecd:	83 c4 20             	add    esp,0x20
c0010ed0:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ed6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010eda:	0f b7 db             	movzx  ebx,bx
c0010edd:	01 db                	add    ebx,ebx
c0010edf:	01 fb                	add    ebx,edi
c0010ee1:	eb 6e                	jmp    c0010f51 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ee3:	51                   	push   ecx
c0010ee4:	51                   	push   ecx
c0010ee5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ee9:	50                   	push   eax
c0010eea:	e8 f1 f8 ff ff       	call   c00107e0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010eef:	83 c4 10             	add    esp,0x10
c0010ef2:	66 89 03             	mov    WORD PTR [ebx],ax
c0010ef5:	39 2d 04 e3 02 c0    	cmp    DWORD PTR ds:0xc002e304,ebp
c0010efb:	75 2a                	jne    c0010f27 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010efd:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f03:	85 c0                	test   eax,eax
c0010f05:	74 20                	je     c0010f27 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f07:	52                   	push   edx
c0010f08:	52                   	push   edx
c0010f09:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f0f:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f15:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f19:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f1d:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f20:	51                   	push   ecx
c0010f21:	55                   	push   ebp
c0010f22:	ff d0                	call   eax
c0010f24:	83 c4 20             	add    esp,0x20
c0010f27:	83 c3 02             	add    ebx,0x2
c0010f2a:	50                   	push   eax
c0010f2b:	50                   	push   eax
c0010f2c:	6a 00                	push   0x0
c0010f2e:	55                   	push   ebp
c0010f2f:	e8 8c f9 ff ff       	call   c00108c0 <VgaText::incrementCursor(bool)>
c0010f34:	83 c4 10             	add    esp,0x10
c0010f37:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f3e:	75 0f                	jne    c0010f4f <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f40:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f48:	0f b7 db             	movzx  ebx,bx
c0010f4b:	01 db                	add    ebx,ebx
c0010f4d:	01 fb                	add    ebx,edi
c0010f4f:	b1 01                	mov    cl,0x1
c0010f51:	46                   	inc    esi
c0010f52:	e9 bd fe ff ff       	jmp    c0010e14 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f57:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f5b:	83 ec 0c             	sub    esp,0xc
c0010f5e:	55                   	push   ebp
c0010f5f:	e8 9a f6 ff ff       	call   c00105fe <VgaText::updateCursor()>
c0010f64:	83 c4 10             	add    esp,0x10
c0010f67:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010f6b:	84 c9                	test   cl,cl
c0010f6d:	74 0c                	je     c0010f7b <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010f6f:	83 ec 0c             	sub    esp,0xc
c0010f72:	55                   	push   ebp
c0010f73:	e8 40 fe ff ff       	call   c0010db8 <VgaText::doUpdate()>
c0010f78:	83 c4 10             	add    esp,0x10
c0010f7b:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010f82:	83 c4 1c             	add    esp,0x1c
c0010f85:	5b                   	pop    ebx
c0010f86:	5e                   	pop    esi
c0010f87:	5f                   	pop    edi
c0010f88:	5d                   	pop    ebp
c0010f89:	c3                   	ret    

c0010f8a <VgaText::clearScreen()>:
c0010f8a:	57                   	push   edi
c0010f8b:	56                   	push   esi
c0010f8c:	31 f6                	xor    esi,esi
c0010f8e:	53                   	push   ebx
c0010f8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f93:	52                   	push   edx
c0010f94:	6a 00                	push   0x0
c0010f96:	6a 00                	push   0x0
c0010f98:	53                   	push   ebx
c0010f99:	e8 cc f8 ff ff       	call   c001086a <VgaText::setCursor(int, int)>
c0010f9e:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010fa5:	83 c4 10             	add    esp,0x10
c0010fa8:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010fae:	7e 26                	jle    c0010fd6 <VgaText::clearScreen()+0x4c>
c0010fb0:	31 ff                	xor    edi,edi
c0010fb2:	50                   	push   eax
c0010fb3:	50                   	push   eax
c0010fb4:	56                   	push   esi
c0010fb5:	57                   	push   edi
c0010fb6:	47                   	inc    edi
c0010fb7:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010fbd:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010fc3:	6a 20                	push   0x20
c0010fc5:	53                   	push   ebx
c0010fc6:	e8 27 f8 ff ff       	call   c00107f2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010fcb:	83 c4 20             	add    esp,0x20
c0010fce:	83 ff 50             	cmp    edi,0x50
c0010fd1:	75 df                	jne    c0010fb2 <VgaText::clearScreen()+0x28>
c0010fd3:	46                   	inc    esi
c0010fd4:	eb d2                	jmp    c0010fa8 <VgaText::clearScreen()+0x1e>
c0010fd6:	83 ec 0c             	sub    esp,0xc
c0010fd9:	53                   	push   ebx
c0010fda:	e8 d9 fd ff ff       	call   c0010db8 <VgaText::doUpdate()>
c0010fdf:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010fe6:	83 c4 10             	add    esp,0x10
c0010fe9:	5b                   	pop    ebx
c0010fea:	5e                   	pop    esi
c0010feb:	5f                   	pop    edi
c0010fec:	c3                   	ret    
c0010fed:	90                   	nop

c0010fee <VgaText::putchar(char)>:
c0010fee:	56                   	push   esi
c0010fef:	53                   	push   ebx
c0010ff0:	83 ec 14             	sub    esp,0x14
c0010ff3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ff7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010ffb:	3c 5b                	cmp    al,0x5b
c0010ffd:	75 21                	jne    c0011020 <VgaText::putchar(char)+0x32>
c0010fff:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0011006:	74 28                	je     c0011030 <VgaText::putchar(char)+0x42>
c0011008:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011011:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c001101b:	e9 e2 00 00 00       	jmp    c0011102 <VgaText::putchar(char)+0x114>
c0011020:	3c 1b                	cmp    al,0x1b
c0011022:	75 0c                	jne    c0011030 <VgaText::putchar(char)+0x42>
c0011024:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001102b:	e9 d2 00 00 00       	jmp    c0011102 <VgaText::putchar(char)+0x114>
c0011030:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0011036:	84 c9                	test   cl,cl
c0011038:	0f 84 ab 00 00 00    	je     c00110e9 <VgaText::putchar(char)+0xfb>
c001103e:	8d 50 c0             	lea    edx,[eax-0x40]
c0011041:	80 fa 3e             	cmp    dl,0x3e
c0011044:	0f 87 82 00 00 00    	ja     c00110cc <VgaText::putchar(char)+0xde>
c001104a:	3c 6d                	cmp    al,0x6d
c001104c:	75 4d                	jne    c001109b <VgaText::putchar(char)+0xad>
c001104e:	31 f6                	xor    esi,esi
c0011050:	31 d2                	xor    edx,edx
c0011052:	31 c0                	xor    eax,eax
c0011054:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c001105a:	7e 30                	jle    c001108c <VgaText::putchar(char)+0x9e>
c001105c:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0011064:	80 fa 3b             	cmp    dl,0x3b
c0011067:	75 17                	jne    c0011080 <VgaText::putchar(char)+0x92>
c0011069:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001106d:	50                   	push   eax
c001106e:	53                   	push   ebx
c001106f:	e8 ee f5 ff ff       	call   c0010662 <VgaText::doANSI_SGR(int)>
c0011074:	59                   	pop    ecx
c0011075:	31 d2                	xor    edx,edx
c0011077:	58                   	pop    eax
c0011078:	31 c0                	xor    eax,eax
c001107a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001107e:	eb 09                	jmp    c0011089 <VgaText::putchar(char)+0x9b>
c0011080:	6b c0 0a             	imul   eax,eax,0xa
c0011083:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011087:	88 ca                	mov    dl,cl
c0011089:	46                   	inc    esi
c001108a:	eb c8                	jmp    c0011054 <VgaText::putchar(char)+0x66>
c001108c:	84 d2                	test   dl,dl
c001108e:	74 31                	je     c00110c1 <VgaText::putchar(char)+0xd3>
c0011090:	50                   	push   eax
c0011091:	53                   	push   ebx
c0011092:	e8 cb f5 ff ff       	call   c0010662 <VgaText::doANSI_SGR(int)>
c0011097:	58                   	pop    eax
c0011098:	5a                   	pop    edx
c0011099:	eb 26                	jmp    c00110c1 <VgaText::putchar(char)+0xd3>
c001109b:	3c 4a                	cmp    al,0x4a
c001109d:	75 22                	jne    c00110c1 <VgaText::putchar(char)+0xd3>
c001109f:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110a6:	75 19                	jne    c00110c1 <VgaText::putchar(char)+0xd3>
c00110a8:	83 ec 0c             	sub    esp,0xc
c00110ab:	53                   	push   ebx
c00110ac:	e8 d9 fe ff ff       	call   c0010f8a <VgaText::clearScreen()>
c00110b1:	83 c4 0c             	add    esp,0xc
c00110b4:	6a 00                	push   0x0
c00110b6:	6a 00                	push   0x0
c00110b8:	53                   	push   ebx
c00110b9:	e8 ac f7 ff ff       	call   c001086a <VgaText::setCursor(int, int)>
c00110be:	83 c4 10             	add    esp,0x10
c00110c1:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00110ca:	eb 36                	jmp    c0011102 <VgaText::putchar(char)+0x114>
c00110cc:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c00110d2:	83 fa 0e             	cmp    edx,0xe
c00110d5:	7f 2b                	jg     c0011102 <VgaText::putchar(char)+0x114>
c00110d7:	8d 4a 01             	lea    ecx,[edx+0x1]
c00110da:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00110e0:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00110e7:	eb 19                	jmp    c0011102 <VgaText::putchar(char)+0x114>
c00110e9:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00110ef:	0f be c0             	movsx  eax,al
c00110f2:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00110f8:	50                   	push   eax
c00110f9:	53                   	push   ebx
c00110fa:	e8 ab fa ff ff       	call   c0010baa <VgaText::putchar(char, VgaColour, VgaColour)>
c00110ff:	83 c4 10             	add    esp,0x10
c0011102:	83 c4 14             	add    esp,0x14
c0011105:	5b                   	pop    ebx
c0011106:	5e                   	pop    esi
c0011107:	c3                   	ret    

c0011108 <VgaText::puts(char const*)>:
c0011108:	53                   	push   ebx
c0011109:	83 ec 08             	sub    esp,0x8
c001110c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011110:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011113:	84 c0                	test   al,al
c0011115:	74 12                	je     c0011129 <VgaText::puts(char const*)+0x21>
c0011117:	43                   	inc    ebx
c0011118:	51                   	push   ecx
c0011119:	51                   	push   ecx
c001111a:	50                   	push   eax
c001111b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001111f:	e8 ca fe ff ff       	call   c0010fee <VgaText::putchar(char)>
c0011124:	83 c4 10             	add    esp,0x10
c0011127:	eb e7                	jmp    c0011110 <VgaText::puts(char const*)+0x8>
c0011129:	83 c4 08             	add    esp,0x8
c001112c:	5b                   	pop    ebx
c001112d:	c3                   	ret    

c001112e <VgaText::putx(unsigned int)>:
c001112e:	57                   	push   edi
c001112f:	b9 11 00 00 00       	mov    ecx,0x11
c0011134:	56                   	push   esi
c0011135:	be 5a a2 02 c0       	mov    esi,0xc002a25a
c001113a:	53                   	push   ebx
c001113b:	83 ec 20             	sub    esp,0x20
c001113e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011142:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011146:	fc                   	cld    
c0011147:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011149:	be 08 00 00 00       	mov    esi,0x8
c001114e:	50                   	push   eax
c001114f:	50                   	push   eax
c0011150:	89 d8                	mov    eax,ebx
c0011152:	c1 e3 04             	shl    ebx,0x4
c0011155:	c1 e8 1c             	shr    eax,0x1c
c0011158:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001115d:	50                   	push   eax
c001115e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011162:	e8 87 fe ff ff       	call   c0010fee <VgaText::putchar(char)>
c0011167:	83 c4 10             	add    esp,0x10
c001116a:	4e                   	dec    esi
c001116b:	75 e1                	jne    c001114e <VgaText::putx(unsigned int)+0x20>
c001116d:	83 c4 20             	add    esp,0x20
c0011170:	5b                   	pop    ebx
c0011171:	5e                   	pop    esi
c0011172:	5f                   	pop    edi
c0011173:	c3                   	ret    

c0011174 <VgaText::VgaText(char const*)>:
c0011174:	57                   	push   edi
c0011175:	56                   	push   esi
c0011176:	53                   	push   ebx
c0011177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001117b:	83 ec 08             	sub    esp,0x8
c001117e:	6a 00                	push   0x0
c0011180:	50                   	push   eax
c0011181:	e8 6e 05 00 00       	call   c00116f4 <UnixFile::UnixFile(int)>
c0011186:	83 c4 10             	add    esp,0x10
c0011189:	ba c0 a2 02 c0       	mov    edx,0xc002a2c0
c001118e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011192:	89 10                	mov    DWORD PTR [eax],edx
c0011194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011198:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a6:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c00111b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111b4:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00111bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111bf:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c00111c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ca:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c00111d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d8:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00111e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e6:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c00111ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111f1:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c00111f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111fc:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011202:	bb e0 e2 02 c0       	mov    ebx,0xc002e2e0
c0011207:	b8 08 00 00 00       	mov    eax,0x8
c001120c:	fc                   	cld    
c001120d:	89 d7                	mov    edi,edx
c001120f:	89 de                	mov    esi,ebx
c0011211:	89 c1                	mov    ecx,eax
c0011213:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011219:	05 1e 10 00 00       	add    eax,0x101e
c001121e:	83 ec 08             	sub    esp,0x8
c0011221:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011225:	50                   	push   eax
c0011226:	e8 09 f6 fe ff       	call   c0000834 <strcpy>
c001122b:	83 c4 10             	add    esp,0x10
c001122e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011232:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c001123c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011240:	83 c0 0c             	add    eax,0xc
c0011243:	83 ec 04             	sub    esp,0x4
c0011246:	68 00 0f 00 00       	push   0xf00
c001124b:	6a 00                	push   0x0
c001124d:	50                   	push   eax
c001124e:	e8 25 f5 fe ff       	call   c0000778 <memset>
c0011253:	83 c4 10             	add    esp,0x10
c0011256:	83 ec 04             	sub    esp,0x4
c0011259:	6a 00                	push   0x0
c001125b:	6a 07                	push   0x7
c001125d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011261:	e8 b4 f4 ff ff       	call   c001071a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011266:	83 c4 10             	add    esp,0x10
c0011269:	83 ec 08             	sub    esp,0x8
c001126c:	6a 02                	push   0x2
c001126e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011272:	e8 49 fa ff ff       	call   c0010cc0 <VgaText::setCursorHeight(int)>
c0011277:	83 c4 10             	add    esp,0x10
c001127a:	83 ec 04             	sub    esp,0x4
c001127d:	6a 00                	push   0x0
c001127f:	6a 00                	push   0x0
c0011281:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011285:	e8 e0 f5 ff ff       	call   c001086a <VgaText::setCursor(int, int)>
c001128a:	83 c4 10             	add    esp,0x10
c001128d:	83 ec 08             	sub    esp,0x8
c0011290:	6a 01                	push   0x1
c0011292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011296:	e8 7d f3 ff ff       	call   c0010618 <VgaText::showCursor(bool)>
c001129b:	83 c4 10             	add    esp,0x10
c001129e:	83 ec 08             	sub    esp,0x8
c00112a1:	6a 01                	push   0x1
c00112a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112a7:	e8 7c f3 ff ff       	call   c0010628 <VgaText::disableBlink(bool)>
c00112ac:	83 c4 10             	add    esp,0x10
c00112af:	83 ec 0c             	sub    esp,0xc
c00112b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112b6:	e8 cf fc ff ff       	call   c0010f8a <VgaText::clearScreen()>
c00112bb:	83 c4 10             	add    esp,0x10
c00112be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112c2:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00112c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112cd:	05 9e 10 00 00       	add    eax,0x109e
c00112d2:	83 ec 04             	sub    esp,0x4
c00112d5:	68 96 00 00 00       	push   0x96
c00112da:	6a 00                	push   0x0
c00112dc:	50                   	push   eax
c00112dd:	e8 96 f4 fe ff       	call   c0000778 <memset>
c00112e2:	83 c4 10             	add    esp,0x10
c00112e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112e9:	05 34 11 00 00       	add    eax,0x1134
c00112ee:	83 ec 04             	sub    esp,0x4
c00112f1:	68 2c 01 00 00       	push   0x12c
c00112f6:	6a 00                	push   0x0
c00112f8:	50                   	push   eax
c00112f9:	e8 7a f4 fe ff       	call   c0000778 <memset>
c00112fe:	83 c4 10             	add    esp,0x10
c0011301:	90                   	nop
c0011302:	5b                   	pop    ebx
c0011303:	5e                   	pop    esi
c0011304:	5f                   	pop    edi
c0011305:	c3                   	ret    

c0011306 <VgaText::receiveKey(unsigned char)>:
c0011306:	55                   	push   ebp
c0011307:	57                   	push   edi
c0011308:	56                   	push   esi
c0011309:	53                   	push   ebx
c001130a:	83 ec 1c             	sub    esp,0x1c
c001130d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011311:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011315:	84 db                	test   bl,bl
c0011317:	0f 84 c9 00 00 00    	je     c00113e6 <VgaText::receiveKey(unsigned char)+0xe0>
c001131d:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011323:	80 fb 08             	cmp    bl,0x8
c0011326:	75 2c                	jne    c0011354 <VgaText::receiveKey(unsigned char)+0x4e>
c0011328:	83 ec 0c             	sub    esp,0xc
c001132b:	57                   	push   edi
c001132c:	e8 63 f4 fe ff       	call   c0000794 <strlen>
c0011331:	83 c4 10             	add    esp,0x10
c0011334:	85 c0                	test   eax,eax
c0011336:	74 41                	je     c0011379 <VgaText::receiveKey(unsigned char)+0x73>
c0011338:	50                   	push   eax
c0011339:	50                   	push   eax
c001133a:	6a 08                	push   0x8
c001133c:	56                   	push   esi
c001133d:	e8 ac fc ff ff       	call   c0010fee <VgaText::putchar(char)>
c0011342:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011345:	e8 4a f4 fe ff       	call   c0000794 <strlen>
c001134a:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0011352:	eb 22                	jmp    c0011376 <VgaText::receiveKey(unsigned char)+0x70>
c0011354:	0f be c3             	movsx  eax,bl
c0011357:	52                   	push   edx
c0011358:	52                   	push   edx
c0011359:	50                   	push   eax
c001135a:	56                   	push   esi
c001135b:	e8 8e fc ff ff       	call   c0010fee <VgaText::putchar(char)>
c0011360:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011364:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011369:	59                   	pop    ecx
c001136a:	5d                   	pop    ebp
c001136b:	8d 44 24 16          	lea    eax,[esp+0x16]
c001136f:	50                   	push   eax
c0011370:	57                   	push   edi
c0011371:	e8 fe f5 fe ff       	call   c0000974 <strcat>
c0011376:	83 c4 10             	add    esp,0x10
c0011379:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0011380:	75 05                	jne    c0011387 <VgaText::receiveKey(unsigned char)+0x81>
c0011382:	80 fb 0a             	cmp    bl,0xa
c0011385:	75 53                	jne    c00113da <VgaText::receiveKey(unsigned char)+0xd4>
c0011387:	83 ec 0c             	sub    esp,0xc
c001138a:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0011390:	53                   	push   ebx
c0011391:	e8 fe f3 fe ff       	call   c0000794 <strlen>
c0011396:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011399:	89 c5                	mov    ebp,eax
c001139b:	e8 f4 f3 fe ff       	call   c0000794 <strlen>
c00113a0:	83 c4 10             	add    esp,0x10
c00113a3:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113a7:	3d 2c 01 00 00       	cmp    eax,0x12c
c00113ac:	76 10                	jbe    c00113be <VgaText::receiveKey(unsigned char)+0xb8>
c00113ae:	83 ec 0c             	sub    esp,0xc
c00113b1:	68 6b a2 02 c0       	push   0xc002a26b
c00113b6:	e8 82 90 00 00       	call   c001a43d <Krnl::panic(char const*)>
c00113bb:	83 c4 10             	add    esp,0x10
c00113be:	50                   	push   eax
c00113bf:	50                   	push   eax
c00113c0:	57                   	push   edi
c00113c1:	53                   	push   ebx
c00113c2:	e8 ad f5 fe ff       	call   c0000974 <strcat>
c00113c7:	83 c4 0c             	add    esp,0xc
c00113ca:	68 96 00 00 00       	push   0x96
c00113cf:	6a 00                	push   0x0
c00113d1:	57                   	push   edi
c00113d2:	e8 a1 f3 fe ff       	call   c0000778 <memset>
c00113d7:	83 c4 10             	add    esp,0x10
c00113da:	83 ec 0c             	sub    esp,0xc
c00113dd:	56                   	push   esi
c00113de:	e8 d5 f9 ff ff       	call   c0010db8 <VgaText::doUpdate()>
c00113e3:	83 c4 10             	add    esp,0x10
c00113e6:	83 c4 1c             	add    esp,0x1c
c00113e9:	5b                   	pop    ebx
c00113ea:	5e                   	pop    esi
c00113eb:	5f                   	pop    edi
c00113ec:	5d                   	pop    ebp
c00113ed:	c3                   	ret    

c00113ee <VgaText::write(unsigned long long, void*, int*)>:
c00113ee:	55                   	push   ebp
c00113ef:	57                   	push   edi
c00113f0:	56                   	push   esi
c00113f1:	53                   	push   ebx
c00113f2:	83 ec 0c             	sub    esp,0xc
c00113f5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00113f9:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00113fd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011401:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011408:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001140b:	39 eb                	cmp    ebx,ebp
c001140d:	74 13                	je     c0011422 <VgaText::write(unsigned long long, void*, int*)+0x34>
c001140f:	43                   	inc    ebx
c0011410:	50                   	push   eax
c0011411:	50                   	push   eax
c0011412:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011416:	50                   	push   eax
c0011417:	56                   	push   esi
c0011418:	e8 d1 fb ff ff       	call   c0010fee <VgaText::putchar(char)>
c001141d:	83 c4 10             	add    esp,0x10
c0011420:	eb e9                	jmp    c001140b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011422:	83 ec 0c             	sub    esp,0xc
c0011425:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c001142c:	56                   	push   esi
c001142d:	e8 86 f9 ff ff       	call   c0010db8 <VgaText::doUpdate()>
c0011432:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011436:	89 38                	mov    DWORD PTR [eax],edi
c0011438:	83 c4 1c             	add    esp,0x1c
c001143b:	31 c0                	xor    eax,eax
c001143d:	5b                   	pop    ebx
c001143e:	5e                   	pop    esi
c001143f:	5f                   	pop    edi
c0011440:	5d                   	pop    ebp
c0011441:	c3                   	ret    

c0011442 <newTerminal(char*)>:
c0011442:	83 ec 28             	sub    esp,0x28
c0011445:	68 60 12 00 00       	push   0x1260
c001144a:	e8 f1 e3 ff ff       	call   c000f840 <malloc>
c001144f:	5a                   	pop    edx
c0011450:	59                   	pop    ecx
c0011451:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011455:	50                   	push   eax
c0011456:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001145a:	e8 15 fd ff ff       	call   c0011174 <VgaText::VgaText(char const*)>
c001145f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011463:	83 c4 2c             	add    esp,0x2c
c0011466:	c3                   	ret    
c0011467:	90                   	nop

c0011468 <TSS::TSS()>:
c0011468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001146c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011473:	90                   	nop
c0011474:	c3                   	ret    
c0011475:	90                   	nop

c0011476 <TSS::setESP(unsigned long)>:
c0011476:	55                   	push   ebp
c0011477:	89 e5                	mov    ebp,esp
c0011479:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001147c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001147f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011482:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011485:	90                   	nop
c0011486:	5d                   	pop    ebp
c0011487:	c3                   	ret    

c0011488 <TSS::flush()>:
c0011488:	55                   	push   ebp
c0011489:	89 e5                	mov    ebp,esp
c001148b:	83 ec 10             	sub    esp,0x10
c001148e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011491:	8b 00                	mov    eax,DWORD PTR [eax]
c0011493:	83 c8 03             	or     eax,0x3
c0011496:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001149a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001149e:	66 89 d0             	mov    ax,dx
c00114a1:	0f 00 d8             	ltr    ax
c00114a4:	90                   	nop
c00114a5:	c9                   	leave  
c00114a6:	c3                   	ret    
c00114a7:	90                   	nop

c00114a8 <TSS::setup(unsigned long, unsigned long)>:
c00114a8:	55                   	push   ebp
c00114a9:	89 e5                	mov    ebp,esp
c00114ab:	83 ec 18             	sub    esp,0x18
c00114ae:	83 ec 0c             	sub    esp,0xc
c00114b1:	6a 68                	push   0x68
c00114b3:	e8 88 e3 ff ff       	call   c000f840 <malloc>
c00114b8:	83 c4 10             	add    esp,0x10
c00114bb:	89 c2                	mov    edx,eax
c00114bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114c9:	83 ec 04             	sub    esp,0x4
c00114cc:	6a 68                	push   0x68
c00114ce:	6a 00                	push   0x0
c00114d0:	50                   	push   eax
c00114d1:	e8 a2 f2 fe ff       	call   c0000778 <memset>
c00114d6:	83 c4 10             	add    esp,0x10
c00114d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114df:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00114e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114eb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00114f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114f7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114fa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011500:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011503:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001150c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001150f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011515:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011518:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001151b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011521:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011524:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011527:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001152d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011530:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011533:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011548:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001154e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011554:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011557:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001155a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001155d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011560:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011563:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001156a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011570:	0f 20 da             	mov    edx,cr3
c0011573:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011576:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011579:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001157c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001157f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011582:	83 ec 08             	sub    esp,0x8
c0011585:	50                   	push   eax
c0011586:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011589:	50                   	push   eax
c001158a:	e8 8f da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c001158f:	83 c4 10             	add    esp,0x10
c0011592:	83 ec 08             	sub    esp,0x8
c0011595:	6a 68                	push   0x68
c0011597:	8d 45 ec             	lea    eax,[ebp-0x14]
c001159a:	50                   	push   eax
c001159b:	e8 9a da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c00115a0:	83 c4 10             	add    esp,0x10
c00115a3:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115a7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115aa:	83 e0 0f             	and    eax,0xf
c00115ad:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115b0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115b3:	83 c8 40             	or     eax,0x40
c00115b6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115b9:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00115be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115c4:	05 78 01 00 00       	add    eax,0x178
c00115c9:	83 ec 04             	sub    esp,0x4
c00115cc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00115cf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00115d2:	50                   	push   eax
c00115d3:	e8 96 da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c00115d8:	83 c4 10             	add    esp,0x10
c00115db:	89 c2                	mov    edx,eax
c00115dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e0:	89 10                	mov    DWORD PTR [eax],edx
c00115e2:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00115e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115ed:	05 78 01 00 00       	add    eax,0x178
c00115f2:	83 ec 0c             	sub    esp,0xc
c00115f5:	50                   	push   eax
c00115f6:	e8 b7 da ff ff       	call   c000f0b2 <GDT::flush()>
c00115fb:	83 c4 10             	add    esp,0x10
c00115fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011601:	8b 00                	mov    eax,DWORD PTR [eax]
c0011603:	83 ec 08             	sub    esp,0x8
c0011606:	50                   	push   eax
c0011607:	68 d4 a2 02 c0       	push   0xc002a2d4
c001160c:	e8 83 17 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0011611:	83 c4 10             	add    esp,0x10
c0011614:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011617:	8b 00                	mov    eax,DWORD PTR [eax]
c0011619:	c9                   	leave  
c001161a:	c3                   	ret    
c001161b:	90                   	nop

c001161c <ReservedFilename::read(unsigned long long, void*, int*)>:
c001161c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011620:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011624:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011627:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001162c:	75 08                	jne    c0011636 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001162e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011634:	eb 38                	jmp    c001166e <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011636:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001163b:	75 17                	jne    c0011654 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001163d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011642:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011645:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001164b:	8b 10                	mov    edx,DWORD PTR [eax]
c001164d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011651:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011654:	89 c1                	mov    ecx,eax
c0011656:	83 e1 fd             	and    ecx,0xfffffffd
c0011659:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001165f:	74 cd                	je     c001162e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011661:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011666:	83 e0 ef             	and    eax,0xffffffef
c0011669:	83 f8 08             	cmp    eax,0x8
c001166c:	76 c0                	jbe    c001162e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001166e:	31 c0                	xor    eax,eax
c0011670:	c3                   	ret    
c0011671:	90                   	nop

c0011672 <ReservedFilename::isAtty()>:
c0011672:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011676:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011679:	31 c0                	xor    eax,eax
c001167b:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011681:	74 09                	je     c001168c <ReservedFilename::isAtty()+0x1a>
c0011683:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011689:	0f 94 c0             	sete   al
c001168c:	c3                   	ret    
c001168d:	90                   	nop

c001168e <ReservedFilename::write(unsigned long long, void*, int*)>:
c001168e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011692:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011696:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011699:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001169d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116a2:	75 08                	jne    c00116ac <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116a4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116aa:	eb 3d                	jmp    c00116e9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116ac:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116b1:	75 17                	jne    c00116ca <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00116b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116b8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116bb:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c00116c1:	8b 10                	mov    edx,DWORD PTR [eax]
c00116c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116c7:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00116ca:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00116cf:	75 04                	jne    c00116d5 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00116d1:	89 0a                	mov    DWORD PTR [edx],ecx
c00116d3:	eb 14                	jmp    c00116e9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116d5:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00116da:	74 c8                	je     c00116a4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116dc:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116e1:	83 e0 ef             	and    eax,0xffffffef
c00116e4:	83 f8 08             	cmp    eax,0x8
c00116e7:	76 bb                	jbe    c00116a4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116e9:	31 c0                	xor    eax,eax
c00116eb:	c3                   	ret    

c00116ec <UnixFile::getFileDescriptor()>:
c00116ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116f3:	c3                   	ret    

c00116f4 <UnixFile::UnixFile(int)>:
c00116f4:	53                   	push   ebx
c00116f5:	83 ec 28             	sub    esp,0x28
c00116f8:	ba c0 a3 02 c0       	mov    edx,0xc002a3c0
c00116fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011701:	89 10                	mov    DWORD PTR [eax],edx
c0011703:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001170b:	0f 8f 8c 01 00 00    	jg     c001189d <UnixFile::UnixFile(int)+0x1a9>
c0011711:	a1 c0 d1 02 c0       	mov    eax,ds:0xc002d1c0
c0011716:	8d 50 01             	lea    edx,[eax+0x1]
c0011719:	89 15 c0 d1 02 c0    	mov    DWORD PTR ds:0xc002d1c0,edx
c001171f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011723:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011726:	83 ec 08             	sub    esp,0x8
c0011729:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001172d:	68 98 e3 02 c0       	push   0xc002e398
c0011732:	e8 79 6e 01 00       	call   c00285b0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011737:	83 c4 10             	add    esp,0x10
c001173a:	a0 94 e3 02 c0       	mov    al,ds:0xc002e394
c001173f:	83 f0 01             	xor    eax,0x1
c0011742:	84 c0                	test   al,al
c0011744:	0f 84 54 01 00 00    	je     c001189e <UnixFile::UnixFile(int)+0x1aa>
c001174a:	c6 05 94 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e394,0x1
c0011751:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011759:	83 ec 0c             	sub    esp,0xc
c001175c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011760:	e8 db e0 ff ff       	call   c000f840 <malloc>
c0011765:	83 c4 10             	add    esp,0x10
c0011768:	89 c3                	mov    ebx,eax
c001176a:	83 ec 08             	sub    esp,0x8
c001176d:	68 03 ff ff 0f       	push   0xfffff03
c0011772:	53                   	push   ebx
c0011773:	e8 2c 01 00 00       	call   c00118a4 <ReservedFilename::ReservedFilename(int)>
c0011778:	83 c4 10             	add    esp,0x10
c001177b:	89 1d 8c e3 02 c0    	mov    DWORD PTR ds:0xc002e38c,ebx
c0011781:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011789:	83 ec 0c             	sub    esp,0xc
c001178c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011790:	e8 ab e0 ff ff       	call   c000f840 <malloc>
c0011795:	83 c4 10             	add    esp,0x10
c0011798:	89 c3                	mov    ebx,eax
c001179a:	83 ec 08             	sub    esp,0x8
c001179d:	68 01 ff ff 0f       	push   0xfffff01
c00117a2:	53                   	push   ebx
c00117a3:	e8 fc 00 00 00       	call   c00118a4 <ReservedFilename::ReservedFilename(int)>
c00117a8:	83 c4 10             	add    esp,0x10
c00117ab:	89 1d 90 e3 02 c0    	mov    DWORD PTR ds:0xc002e390,ebx
c00117b1:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00117b9:	83 ec 0c             	sub    esp,0xc
c00117bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117c0:	e8 7b e0 ff ff       	call   c000f840 <malloc>
c00117c5:	83 c4 10             	add    esp,0x10
c00117c8:	89 c3                	mov    ebx,eax
c00117ca:	83 ec 08             	sub    esp,0x8
c00117cd:	68 00 ff ff 0f       	push   0xfffff00
c00117d2:	53                   	push   ebx
c00117d3:	e8 cc 00 00 00       	call   c00118a4 <ReservedFilename::ReservedFilename(int)>
c00117d8:	83 c4 10             	add    esp,0x10
c00117db:	89 1d 84 e3 02 c0    	mov    DWORD PTR ds:0xc002e384,ebx
c00117e1:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00117e9:	83 ec 0c             	sub    esp,0xc
c00117ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00117f0:	e8 4b e0 ff ff       	call   c000f840 <malloc>
c00117f5:	83 c4 10             	add    esp,0x10
c00117f8:	89 c3                	mov    ebx,eax
c00117fa:	83 ec 08             	sub    esp,0x8
c00117fd:	68 02 ff ff 0f       	push   0xfffff02
c0011802:	53                   	push   ebx
c0011803:	e8 9c 00 00 00       	call   c00118a4 <ReservedFilename::ReservedFilename(int)>
c0011808:	83 c4 10             	add    esp,0x10
c001180b:	89 1d 88 e3 02 c0    	mov    DWORD PTR ds:0xc002e388,ebx
c0011811:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011819:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001181e:	7f 7e                	jg     c001189e <UnixFile::UnixFile(int)+0x1aa>
c0011820:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011828:	83 ec 0c             	sub    esp,0xc
c001182b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001182f:	e8 0c e0 ff ff       	call   c000f840 <malloc>
c0011834:	83 c4 10             	add    esp,0x10
c0011837:	89 c3                	mov    ebx,eax
c0011839:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001183d:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011842:	83 ec 08             	sub    esp,0x8
c0011845:	50                   	push   eax
c0011846:	53                   	push   ebx
c0011847:	e8 58 00 00 00       	call   c00118a4 <ReservedFilename::ReservedFilename(int)>
c001184c:	83 c4 10             	add    esp,0x10
c001184f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011853:	89 1c 85 60 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ca0],ebx
c001185a:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011862:	83 ec 0c             	sub    esp,0xc
c0011865:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011869:	e8 d2 df ff ff       	call   c000f840 <malloc>
c001186e:	83 c4 10             	add    esp,0x10
c0011871:	89 c3                	mov    ebx,eax
c0011873:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011877:	05 20 ff ff 0f       	add    eax,0xfffff20
c001187c:	83 ec 08             	sub    esp,0x8
c001187f:	50                   	push   eax
c0011880:	53                   	push   ebx
c0011881:	e8 1e 00 00 00       	call   c00118a4 <ReservedFilename::ReservedFilename(int)>
c0011886:	83 c4 10             	add    esp,0x10
c0011889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001188d:	89 1c 85 20 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ce0],ebx
c0011894:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011898:	e9 7c ff ff ff       	jmp    c0011819 <UnixFile::UnixFile(int)+0x125>
c001189d:	90                   	nop
c001189e:	83 c4 28             	add    esp,0x28
c00118a1:	5b                   	pop    ebx
c00118a2:	c3                   	ret    
c00118a3:	90                   	nop

c00118a4 <ReservedFilename::ReservedFilename(int)>:
c00118a4:	83 ec 0c             	sub    esp,0xc
c00118a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ab:	83 ec 08             	sub    esp,0x8
c00118ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118b2:	50                   	push   eax
c00118b3:	e8 3c fe ff ff       	call   c00116f4 <UnixFile::UnixFile(int)>
c00118b8:	83 c4 10             	add    esp,0x10
c00118bb:	ba dc a3 02 c0       	mov    edx,0xc002a3dc
c00118c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118c4:	89 10                	mov    DWORD PTR [eax],edx
c00118c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00118ce:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118d1:	90                   	nop
c00118d2:	83 c4 0c             	add    esp,0xc
c00118d5:	c3                   	ret    

c00118d6 <UnixFile::~UnixFile()>:
c00118d6:	83 ec 1c             	sub    esp,0x1c
c00118d9:	ba c0 a3 02 c0       	mov    edx,0xc002a3c0
c00118de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118e2:	89 10                	mov    DWORD PTR [eax],edx
c00118e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118eb:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00118f0:	7f 73                	jg     c0011965 <UnixFile::~UnixFile()+0x8f>
c00118f2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00118fa:	83 ec 0c             	sub    esp,0xc
c00118fd:	68 98 e3 02 c0       	push   0xc002e398
c0011902:	e8 7d 6d 01 00       	call   c0028684 <LinkedList<UnixFile>::getFirstElement()>
c0011907:	83 c4 10             	add    esp,0x10
c001190a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001190e:	83 ec 0c             	sub    esp,0xc
c0011911:	68 98 e3 02 c0       	push   0xc002e398
c0011916:	e8 71 6d 01 00       	call   c002868c <LinkedList<UnixFile>::removeFirst()>
c001191b:	83 c4 10             	add    esp,0x10
c001191e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011922:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011926:	74 40                	je     c0011968 <UnixFile::~UnixFile()+0x92>
c0011928:	83 ec 08             	sub    esp,0x8
c001192b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001192f:	68 98 e3 02 c0       	push   0xc002e398
c0011934:	e8 77 6c 01 00       	call   c00285b0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011939:	83 c4 10             	add    esp,0x10
c001193c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011940:	8d 50 01             	lea    edx,[eax+0x1]
c0011943:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011947:	3d 88 13 00 00       	cmp    eax,0x1388
c001194c:	0f 94 c0             	sete   al
c001194f:	84 c0                	test   al,al
c0011951:	74 a7                	je     c00118fa <UnixFile::~UnixFile()+0x24>
c0011953:	83 ec 0c             	sub    esp,0xc
c0011956:	68 98 a3 02 c0       	push   0xc002a398
c001195b:	e8 dd 8a 00 00       	call   c001a43d <Krnl::panic(char const*)>
c0011960:	83 c4 10             	add    esp,0x10
c0011963:	eb 95                	jmp    c00118fa <UnixFile::~UnixFile()+0x24>
c0011965:	90                   	nop
c0011966:	eb 01                	jmp    c0011969 <UnixFile::~UnixFile()+0x93>
c0011968:	90                   	nop
c0011969:	90                   	nop
c001196a:	83 c4 1c             	add    esp,0x1c
c001196d:	c3                   	ret    

c001196e <UnixFile::~UnixFile()>:
c001196e:	83 ec 0c             	sub    esp,0xc
c0011971:	83 ec 0c             	sub    esp,0xc
c0011974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011978:	e8 59 ff ff ff       	call   c00118d6 <UnixFile::~UnixFile()>
c001197d:	83 c4 10             	add    esp,0x10
c0011980:	83 ec 08             	sub    esp,0x8
c0011983:	6a 0c                	push   0xc
c0011985:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011989:	e8 26 13 00 00       	call   c0012cb4 <operator delete(void*, unsigned long)>
c001198e:	83 c4 10             	add    esp,0x10
c0011991:	83 c4 0c             	add    esp,0xc
c0011994:	c3                   	ret    
c0011995:	90                   	nop

c0011996 <ReservedFilename::~ReservedFilename()>:
c0011996:	83 ec 0c             	sub    esp,0xc
c0011999:	ba dc a3 02 c0       	mov    edx,0xc002a3dc
c001199e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119a2:	89 10                	mov    DWORD PTR [eax],edx
c00119a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119a8:	83 ec 0c             	sub    esp,0xc
c00119ab:	50                   	push   eax
c00119ac:	e8 25 ff ff ff       	call   c00118d6 <UnixFile::~UnixFile()>
c00119b1:	83 c4 10             	add    esp,0x10
c00119b4:	90                   	nop
c00119b5:	83 c4 0c             	add    esp,0xc
c00119b8:	c3                   	ret    
c00119b9:	90                   	nop

c00119ba <ReservedFilename::~ReservedFilename()>:
c00119ba:	83 ec 0c             	sub    esp,0xc
c00119bd:	83 ec 0c             	sub    esp,0xc
c00119c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119c4:	e8 cd ff ff ff       	call   c0011996 <ReservedFilename::~ReservedFilename()>
c00119c9:	83 c4 10             	add    esp,0x10
c00119cc:	83 ec 08             	sub    esp,0x8
c00119cf:	6a 0c                	push   0xc
c00119d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119d5:	e8 da 12 00 00       	call   c0012cb4 <operator delete(void*, unsigned long)>
c00119da:	83 c4 10             	add    esp,0x10
c00119dd:	83 c4 0c             	add    esp,0xc
c00119e0:	c3                   	ret    

c00119e1 <getFromFileDescriptor(int)>:
c00119e1:	53                   	push   ebx
c00119e2:	83 ec 08             	sub    esp,0x8
c00119e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119e9:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00119ef:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00119f5:	7f 2c                	jg     c0011a23 <getFromFileDescriptor(int)+0x42>
c00119f7:	83 ec 0c             	sub    esp,0xc
c00119fa:	68 98 e3 02 c0       	push   0xc002e398
c00119ff:	e8 80 6c 01 00       	call   c0028684 <LinkedList<UnixFile>::getFirstElement()>
c0011a04:	83 c4 10             	add    esp,0x10
c0011a07:	85 c0                	test   eax,eax
c0011a09:	75 04                	jne    c0011a0f <getFromFileDescriptor(int)+0x2e>
c0011a0b:	31 c0                	xor    eax,eax
c0011a0d:	eb 6e                	jmp    c0011a7d <getFromFileDescriptor(int)+0x9c>
c0011a0f:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a12:	74 69                	je     c0011a7d <getFromFileDescriptor(int)+0x9c>
c0011a14:	52                   	push   edx
c0011a15:	52                   	push   edx
c0011a16:	50                   	push   eax
c0011a17:	68 98 e3 02 c0       	push   0xc002e398
c0011a1c:	e8 0d 6d 01 00       	call   c002872e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a21:	eb e1                	jmp    c0011a04 <getFromFileDescriptor(int)+0x23>
c0011a23:	a1 8c e3 02 c0       	mov    eax,ds:0xc002e38c
c0011a28:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a2e:	74 4d                	je     c0011a7d <getFromFileDescriptor(int)+0x9c>
c0011a30:	a1 90 e3 02 c0       	mov    eax,ds:0xc002e390
c0011a35:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a3b:	74 40                	je     c0011a7d <getFromFileDescriptor(int)+0x9c>
c0011a3d:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0011a42:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a48:	74 33                	je     c0011a7d <getFromFileDescriptor(int)+0x9c>
c0011a4a:	a1 84 e3 02 c0       	mov    eax,ds:0xc002e384
c0011a4f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a55:	74 26                	je     c0011a7d <getFromFileDescriptor(int)+0x9c>
c0011a57:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011a5d:	83 f8 08             	cmp    eax,0x8
c0011a60:	77 09                	ja     c0011a6b <getFromFileDescriptor(int)+0x8a>
c0011a62:	8b 04 85 60 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ca0]
c0011a69:	eb 12                	jmp    c0011a7d <getFromFileDescriptor(int)+0x9c>
c0011a6b:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011a71:	83 fb 08             	cmp    ebx,0x8
c0011a74:	77 95                	ja     c0011a0b <getFromFileDescriptor(int)+0x2a>
c0011a76:	8b 04 9d 20 e3 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1ce0]
c0011a7d:	83 c4 08             	add    esp,0x8
c0011a80:	5b                   	pop    ebx
c0011a81:	c3                   	ret    

c0011a82 <__static_initialization_and_destruction_0(int, int)>:
c0011a82:	83 ec 0c             	sub    esp,0xc
c0011a85:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a8a:	75 34                	jne    c0011ac0 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a8c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011a94:	75 2a                	jne    c0011ac0 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a96:	83 ec 0c             	sub    esp,0xc
c0011a99:	68 98 e3 02 c0       	push   0xc002e398
c0011a9e:	e8 b5 6a 01 00       	call   c0028558 <LinkedList<UnixFile>::LinkedList()>
c0011aa3:	83 c4 10             	add    esp,0x10
c0011aa6:	83 ec 04             	sub    esp,0x4
c0011aa9:	68 44 d1 02 c0       	push   0xc002d144
c0011aae:	68 98 e3 02 c0       	push   0xc002e398
c0011ab3:	68 56 85 02 c0       	push   0xc0028556
c0011ab8:	e8 71 11 00 00       	call   c0012c2e <__cxa_atexit>
c0011abd:	83 c4 10             	add    esp,0x10
c0011ac0:	90                   	nop
c0011ac1:	83 c4 0c             	add    esp,0xc
c0011ac4:	c3                   	ret    

c0011ac5 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011ac5:	83 ec 0c             	sub    esp,0xc
c0011ac8:	83 ec 08             	sub    esp,0x8
c0011acb:	68 ff ff 00 00       	push   0xffff
c0011ad0:	6a 01                	push   0x1
c0011ad2:	e8 ab ff ff ff       	call   c0011a82 <__static_initialization_and_destruction_0(int, int)>
c0011ad7:	83 c4 10             	add    esp,0x10
c0011ada:	83 c4 0c             	add    esp,0xc
c0011add:	c3                   	ret    

c0011ade <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011ade:	53                   	push   ebx
c0011adf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011ae3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ae7:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011aed:	89 c8                	mov    eax,ecx
c0011aef:	d1 e8                	shr    eax,1
c0011af1:	03 05 c8 d1 02 c0    	add    eax,DWORD PTR ds:0xc002d1c8
c0011af7:	83 e1 01             	and    ecx,0x1
c0011afa:	8a 10                	mov    dl,BYTE PTR [eax]
c0011afc:	75 09                	jne    c0011b07 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011afe:	83 e2 f0             	and    edx,0xfffffff0
c0011b01:	09 da                	or     edx,ebx
c0011b03:	88 10                	mov    BYTE PTR [eax],dl
c0011b05:	5b                   	pop    ebx
c0011b06:	c3                   	ret    
c0011b07:	c1 e3 04             	shl    ebx,0x4
c0011b0a:	83 e2 0f             	and    edx,0xf
c0011b0d:	09 da                	or     edx,ebx
c0011b0f:	88 10                	mov    BYTE PTR [eax],dl
c0011b11:	5b                   	pop    ebx
c0011b12:	c3                   	ret    

c0011b13 <Virt::getPageState(unsigned long)>:
c0011b13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b17:	8b 0d c8 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d1c8
c0011b1d:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b23:	89 d0                	mov    eax,edx
c0011b25:	d1 e8                	shr    eax,1
c0011b27:	83 e2 01             	and    edx,0x1
c0011b2a:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b2d:	75 04                	jne    c0011b33 <Virt::getPageState(unsigned long)+0x20>
c0011b2f:	83 e0 0f             	and    eax,0xf
c0011b32:	c3                   	ret    
c0011b33:	c0 e8 04             	shr    al,0x4
c0011b36:	c3                   	ret    

c0011b37 <Virt::allocateKernelVirtualPages(int)>:
c0011b37:	55                   	push   ebp
c0011b38:	31 ed                	xor    ebp,ebp
c0011b3a:	57                   	push   edi
c0011b3b:	56                   	push   esi
c0011b3c:	53                   	push   ebx
c0011b3d:	31 db                	xor    ebx,ebx
c0011b3f:	83 ec 1c             	sub    esp,0x1c
c0011b42:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b46:	8b 3d c4 d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d1c4
c0011b4c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b51:	57                   	push   edi
c0011b52:	e8 bc ff ff ff       	call   c0011b13 <Virt::getPageState(unsigned long)>
c0011b57:	5a                   	pop    edx
c0011b58:	84 c0                	test   al,al
c0011b5a:	75 3a                	jne    c0011b96 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011b5c:	85 db                	test   ebx,ebx
c0011b5e:	75 02                	jne    c0011b62 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011b60:	89 fd                	mov    ebp,edi
c0011b62:	43                   	inc    ebx
c0011b63:	39 f3                	cmp    ebx,esi
c0011b65:	74 5a                	je     c0011bc1 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011b67:	47                   	inc    edi
c0011b68:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b6e:	76 31                	jbe    c0011ba1 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011b70:	c7 05 c4 d1 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d1c4,0xc8000
c0011b7a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011b7f:	75 28                	jne    c0011ba9 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011b81:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011b86:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011b8b:	57                   	push   edi
c0011b8c:	e8 82 ff ff ff       	call   c0011b13 <Virt::getPageState(unsigned long)>
c0011b91:	5a                   	pop    edx
c0011b92:	84 c0                	test   al,al
c0011b94:	74 c6                	je     c0011b5c <Virt::allocateKernelVirtualPages(int)+0x25>
c0011b96:	31 db                	xor    ebx,ebx
c0011b98:	47                   	inc    edi
c0011b99:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b9f:	77 cf                	ja     c0011b70 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011ba1:	89 3d c4 d1 02 c0    	mov    DWORD PTR ds:0xc002d1c4,edi
c0011ba7:	eb a8                	jmp    c0011b51 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011ba9:	83 ec 0c             	sub    esp,0xc
c0011bac:	68 f0 a3 02 c0       	push   0xc002a3f0
c0011bb1:	e8 87 88 00 00       	call   c001a43d <Krnl::panic(char const*)>
c0011bb6:	8b 3d c4 d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d1c4
c0011bbc:	83 c4 10             	add    esp,0x10
c0011bbf:	eb 90                	jmp    c0011b51 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bc1:	89 2d c4 d1 02 c0    	mov    DWORD PTR ds:0xc002d1c4,ebp
c0011bc7:	4b                   	dec    ebx
c0011bc8:	74 5f                	je     c0011c29 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011bca:	85 f6                	test   esi,esi
c0011bcc:	74 3d                	je     c0011c0b <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bce:	89 e8                	mov    eax,ebp
c0011bd0:	31 db                	xor    ebx,ebx
c0011bd2:	8d 7e ff             	lea    edi,[esi-0x1]
c0011bd5:	eb 14                	jmp    c0011beb <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011bd7:	6a 01                	push   0x1
c0011bd9:	43                   	inc    ebx
c0011bda:	50                   	push   eax
c0011bdb:	e8 fe fe ff ff       	call   c0011ade <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011be0:	58                   	pop    eax
c0011be1:	39 f3                	cmp    ebx,esi
c0011be3:	5a                   	pop    edx
c0011be4:	74 25                	je     c0011c0b <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011be6:	a1 c4 d1 02 c0       	mov    eax,ds:0xc002d1c4
c0011beb:	8d 50 01             	lea    edx,[eax+0x1]
c0011bee:	85 db                	test   ebx,ebx
c0011bf0:	89 15 c4 d1 02 c0    	mov    DWORD PTR ds:0xc002d1c4,edx
c0011bf6:	74 20                	je     c0011c18 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011bf8:	39 df                	cmp    edi,ebx
c0011bfa:	75 db                	jne    c0011bd7 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011bfc:	6a 03                	push   0x3
c0011bfe:	43                   	inc    ebx
c0011bff:	50                   	push   eax
c0011c00:	e8 d9 fe ff ff       	call   c0011ade <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c05:	59                   	pop    ecx
c0011c06:	39 f3                	cmp    ebx,esi
c0011c08:	58                   	pop    eax
c0011c09:	75 db                	jne    c0011be6 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c0b:	83 c4 1c             	add    esp,0x1c
c0011c0e:	89 e8                	mov    eax,ebp
c0011c10:	5b                   	pop    ebx
c0011c11:	c1 e0 0c             	shl    eax,0xc
c0011c14:	5e                   	pop    esi
c0011c15:	5f                   	pop    edi
c0011c16:	5d                   	pop    ebp
c0011c17:	c3                   	ret    
c0011c18:	6a 02                	push   0x2
c0011c1a:	bb 01 00 00 00       	mov    ebx,0x1
c0011c1f:	50                   	push   eax
c0011c20:	e8 b9 fe ff ff       	call   c0011ade <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c25:	58                   	pop    eax
c0011c26:	5a                   	pop    edx
c0011c27:	eb bd                	jmp    c0011be6 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c29:	6a 04                	push   0x4
c0011c2b:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c2e:	55                   	push   ebp
c0011c2f:	a3 c4 d1 02 c0       	mov    ds:0xc002d1c4,eax
c0011c34:	e8 a5 fe ff ff       	call   c0011ade <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c39:	59                   	pop    ecx
c0011c3a:	89 e8                	mov    eax,ebp
c0011c3c:	5b                   	pop    ebx
c0011c3d:	c1 e0 0c             	shl    eax,0xc
c0011c40:	83 c4 1c             	add    esp,0x1c
c0011c43:	5b                   	pop    ebx
c0011c44:	5e                   	pop    esi
c0011c45:	5f                   	pop    edi
c0011c46:	5d                   	pop    ebp
c0011c47:	c3                   	ret    

c0011c48 <Virt::freeSwapfilePage(unsigned long)>:
c0011c48:	53                   	push   ebx
c0011c49:	8b 15 a8 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3a8
c0011c4f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c53:	b8 01 00 00 00       	mov    eax,0x1
c0011c58:	89 cb                	mov    ebx,ecx
c0011c5a:	d3 e0                	shl    eax,cl
c0011c5c:	c1 eb 05             	shr    ebx,0x5
c0011c5f:	f7 d0                	not    eax
c0011c61:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011c64:	5b                   	pop    ebx
c0011c65:	c3                   	ret    

c0011c66 <Virt::swapIDToSector(unsigned long)>:
c0011c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c6a:	0f af 05 cc d1 02 c0 	imul   eax,DWORD PTR ds:0xc002d1cc
c0011c71:	03 05 d4 d1 02 c0    	add    eax,DWORD PTR ds:0xc002d1d4
c0011c77:	c3                   	ret    

c0011c78 <Virt::allocateSwapfilePage()>:
c0011c78:	55                   	push   ebp
c0011c79:	31 d2                	xor    edx,edx
c0011c7b:	57                   	push   edi
c0011c7c:	56                   	push   esi
c0011c7d:	53                   	push   ebx
c0011c7e:	83 ec 0c             	sub    esp,0xc
c0011c81:	8b 0d cc d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d1cc
c0011c87:	a1 d0 d1 02 c0       	mov    eax,ds:0xc002d1d0
c0011c8c:	f7 f1                	div    ecx
c0011c8e:	39 0d d0 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1d0,ecx
c0011c94:	72 2d                	jb     c0011cc3 <Virt::allocateSwapfilePage()+0x4b>
c0011c96:	8b 35 a8 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3a8
c0011c9c:	8b 16                	mov    edx,DWORD PTR [esi]
c0011c9e:	f6 c2 01             	test   dl,0x1
c0011ca1:	74 3c                	je     c0011cdf <Virt::allocateSwapfilePage()+0x67>
c0011ca3:	31 c9                	xor    ecx,ecx
c0011ca5:	bf 01 00 00 00       	mov    edi,0x1
c0011caa:	eb 12                	jmp    c0011cbe <Virt::allocateSwapfilePage()+0x46>
c0011cac:	89 fd                	mov    ebp,edi
c0011cae:	89 ca                	mov    edx,ecx
c0011cb0:	d3 e5                	shl    ebp,cl
c0011cb2:	c1 ea 05             	shr    edx,0x5
c0011cb5:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011cb8:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011cba:	85 ea                	test   edx,ebp
c0011cbc:	74 2a                	je     c0011ce8 <Virt::allocateSwapfilePage()+0x70>
c0011cbe:	41                   	inc    ecx
c0011cbf:	39 c8                	cmp    eax,ecx
c0011cc1:	77 e9                	ja     c0011cac <Virt::allocateSwapfilePage()+0x34>
c0011cc3:	83 ec 0c             	sub    esp,0xc
c0011cc6:	68 77 a5 02 c0       	push   0xc002a577
c0011ccb:	e8 6d 87 00 00       	call   c001a43d <Krnl::panic(char const*)>
c0011cd0:	83 c4 10             	add    esp,0x10
c0011cd3:	31 c9                	xor    ecx,ecx
c0011cd5:	83 c4 0c             	add    esp,0xc
c0011cd8:	89 c8                	mov    eax,ecx
c0011cda:	5b                   	pop    ebx
c0011cdb:	5e                   	pop    esi
c0011cdc:	5f                   	pop    edi
c0011cdd:	5d                   	pop    ebp
c0011cde:	c3                   	ret    
c0011cdf:	89 f3                	mov    ebx,esi
c0011ce1:	bd 01 00 00 00       	mov    ebp,0x1
c0011ce6:	31 c9                	xor    ecx,ecx
c0011ce8:	09 ea                	or     edx,ebp
c0011cea:	89 c8                	mov    eax,ecx
c0011cec:	89 13                	mov    DWORD PTR [ebx],edx
c0011cee:	83 c4 0c             	add    esp,0xc
c0011cf1:	5b                   	pop    ebx
c0011cf2:	5e                   	pop    esi
c0011cf3:	5f                   	pop    edi
c0011cf4:	5d                   	pop    ebp
c0011cf5:	c3                   	ret    

c0011cf6 <Virt::virtualMemorySetup()>:
c0011cf6:	53                   	push   ebx
c0011cf7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011cfc:	83 ec 08             	sub    esp,0x8
c0011cff:	6a 0f                	push   0xf
c0011d01:	53                   	push   ebx
c0011d02:	43                   	inc    ebx
c0011d03:	e8 d6 fd ff ff       	call   c0011ade <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d08:	59                   	pop    ecx
c0011d09:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d0f:	58                   	pop    eax
c0011d10:	75 ed                	jne    c0011cff <Virt::virtualMemorySetup()+0x9>
c0011d12:	83 ec 08             	sub    esp,0x8
c0011d15:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d1a:	68 00 00 00 c8       	push   0xc8000000
c0011d1f:	68 8e a5 02 c0       	push   0xc002a58e
c0011d24:	e8 6b 10 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0011d29:	58                   	pop    eax
c0011d2a:	5a                   	pop    edx
c0011d2b:	68 00 f0 ff ef       	push   0xeffff000
c0011d30:	68 a2 a5 02 c0       	push   0xc002a5a2
c0011d35:	e8 5a 10 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0011d3a:	83 c4 10             	add    esp,0x10
c0011d3d:	83 ec 08             	sub    esp,0x8
c0011d40:	6a 00                	push   0x0
c0011d42:	53                   	push   ebx
c0011d43:	43                   	inc    ebx
c0011d44:	e8 95 fd ff ff       	call   c0011ade <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d49:	83 c4 10             	add    esp,0x10
c0011d4c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d52:	75 e9                	jne    c0011d3d <Virt::virtualMemorySetup()+0x47>
c0011d54:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011d59:	83 ec 08             	sub    esp,0x8
c0011d5c:	6a 0f                	push   0xf
c0011d5e:	53                   	push   ebx
c0011d5f:	43                   	inc    ebx
c0011d60:	e8 79 fd ff ff       	call   c0011ade <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d65:	83 c4 10             	add    esp,0x10
c0011d68:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011d6e:	75 e9                	jne    c0011d59 <Virt::virtualMemorySetup()+0x63>
c0011d70:	83 c4 08             	add    esp,0x8
c0011d73:	5b                   	pop    ebx
c0011d74:	c3                   	ret    

c0011d75 <Virt::swappingSetup()>:
c0011d75:	83 ec 18             	sub    esp,0x18
c0011d78:	68 b6 a5 02 c0       	push   0xc002a5b6
c0011d7d:	e8 12 10 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0011d82:	58                   	pop    eax
c0011d83:	a1 d0 d1 02 c0       	mov    eax,ds:0xc002d1d0
c0011d88:	5a                   	pop    edx
c0011d89:	31 d2                	xor    edx,edx
c0011d8b:	f7 35 cc d1 02 c0    	div    DWORD PTR ds:0xc002d1cc
c0011d91:	c1 e8 05             	shr    eax,0x5
c0011d94:	50                   	push   eax
c0011d95:	68 cc a5 02 c0       	push   0xc002a5cc
c0011d9a:	e8 f5 0f 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0011d9f:	a1 d0 d1 02 c0       	mov    eax,ds:0xc002d1d0
c0011da4:	31 d2                	xor    edx,edx
c0011da6:	f7 35 cc d1 02 c0    	div    DWORD PTR ds:0xc002d1cc
c0011dac:	c1 e8 05             	shr    eax,0x5
c0011daf:	89 04 24             	mov    DWORD PTR [esp],eax
c0011db2:	e8 89 da ff ff       	call   c000f840 <malloc>
c0011db7:	83 c4 0c             	add    esp,0xc
c0011dba:	89 c1                	mov    ecx,eax
c0011dbc:	a3 a8 e3 02 c0       	mov    ds:0xc002e3a8,eax
c0011dc1:	31 d2                	xor    edx,edx
c0011dc3:	a1 d0 d1 02 c0       	mov    eax,ds:0xc002d1d0
c0011dc8:	f7 35 cc d1 02 c0    	div    DWORD PTR ds:0xc002d1cc
c0011dce:	c1 e8 05             	shr    eax,0x5
c0011dd1:	50                   	push   eax
c0011dd2:	6a 00                	push   0x0
c0011dd4:	51                   	push   ecx
c0011dd5:	e8 9e e9 fe ff       	call   c0000778 <memset>
c0011dda:	83 c4 1c             	add    esp,0x1c
c0011ddd:	c3                   	ret    

c0011dde <Virt::getAKernelVAS()>:
c0011dde:	a1 ac e3 02 c0       	mov    eax,ds:0xc002e3ac
c0011de3:	c3                   	ret    

c0011de4 <VAS::VAS()>:
c0011de4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011de8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011def:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011df3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011dfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dfe:	a3 ac e3 02 c0       	mov    ds:0xc002e3ac,eax
c0011e03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e07:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e0f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e16:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011e1d:	90                   	nop
c0011e1e:	c3                   	ret    
c0011e1f:	90                   	nop

c0011e20 <VAS::VAS(VAS*)>:
c0011e20:	83 ec 0c             	sub    esp,0xc
c0011e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e27:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e32:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011e39:	83 ec 0c             	sub    esp,0xc
c0011e3c:	68 10 a4 02 c0       	push   0xc002a410
c0011e41:	e8 f7 85 00 00       	call   c001a43d <Krnl::panic(char const*)>
c0011e46:	83 c4 10             	add    esp,0x10
c0011e49:	90                   	nop
c0011e4a:	83 c4 0c             	add    esp,0xc
c0011e4d:	c3                   	ret    

c0011e4e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011e4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e52:	89 c2                	mov    edx,eax
c0011e54:	c1 e8 0a             	shr    eax,0xa
c0011e57:	c1 ea 16             	shr    edx,0x16
c0011e5a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e5f:	19 c9                	sbb    ecx,ecx
c0011e61:	c1 e2 0c             	shl    edx,0xc
c0011e64:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011e6a:	25 fc 0f 00 00       	and    eax,0xffc
c0011e6f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011e76:	01 d0                	add    eax,edx
c0011e78:	c3                   	ret    
c0011e79:	90                   	nop

c0011e7a <VAS::getPageTableEntry(unsigned long)>:
c0011e7a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011e7e:	89 ca                	mov    edx,ecx
c0011e80:	c1 e9 0a             	shr    ecx,0xa
c0011e83:	c1 ea 16             	shr    edx,0x16
c0011e86:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011e8c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011e92:	c1 e0 0c             	shl    eax,0xc
c0011e95:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011e98:	c3                   	ret    

c0011e99 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011e99:	57                   	push   edi
c0011e9a:	56                   	push   esi
c0011e9b:	be 01 00 00 00       	mov    esi,0x1
c0011ea0:	53                   	push   ebx
c0011ea1:	83 ec 10             	sub    esp,0x10
c0011ea4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ea8:	c1 eb 0c             	shr    ebx,0xc
c0011eab:	eb 3f                	jmp    c0011eec <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011ead:	e8 2c ff ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0011eb2:	83 ec 08             	sub    esp,0x8
c0011eb5:	57                   	push   edi
c0011eb6:	50                   	push   eax
c0011eb7:	e8 be ff ff ff       	call   c0011e7a <VAS::getPageTableEntry(unsigned long)>
c0011ebc:	83 c4 10             	add    esp,0x10
c0011ebf:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ec1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011ec5:	f6 c4 04             	test   ah,0x4
c0011ec8:	75 5f                	jne    c0011f29 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011eca:	80 fa 04             	cmp    dl,0x4
c0011ecd:	74 78                	je     c0011f47 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011ecf:	80 fa 02             	cmp    dl,0x2
c0011ed2:	0f 84 88 00 00 00    	je     c0011f60 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011ed8:	80 fa 03             	cmp    dl,0x3
c0011edb:	0f 84 ad 00 00 00    	je     c0011f8e <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011ee1:	fe ca                	dec    dl
c0011ee3:	0f 84 92 00 00 00    	je     c0011f7b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011ee9:	43                   	inc    ebx
c0011eea:	31 f6                	xor    esi,esi
c0011eec:	53                   	push   ebx
c0011eed:	e8 21 fc ff ff       	call   c0011b13 <Virt::getPageState(unsigned long)>
c0011ef2:	5f                   	pop    edi
c0011ef3:	89 df                	mov    edi,ebx
c0011ef5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011ef9:	c1 e7 0c             	shl    edi,0xc
c0011efc:	84 c0                	test   al,al
c0011efe:	75 ad                	jne    c0011ead <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011f00:	83 ec 0c             	sub    esp,0xc
c0011f03:	68 e7 a5 02 c0       	push   0xc002a5e7
c0011f08:	e8 30 85 00 00       	call   c001a43d <Krnl::panic(char const*)>
c0011f0d:	e8 cc fe ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0011f12:	5a                   	pop    edx
c0011f13:	59                   	pop    ecx
c0011f14:	57                   	push   edi
c0011f15:	50                   	push   eax
c0011f16:	e8 5f ff ff ff       	call   c0011e7a <VAS::getPageTableEntry(unsigned long)>
c0011f1b:	83 c4 10             	add    esp,0x10
c0011f1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f20:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f24:	f6 c4 04             	test   ah,0x4
c0011f27:	74 c0                	je     c0011ee9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f29:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f2d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f32:	83 ec 0c             	sub    esp,0xc
c0011f35:	50                   	push   eax
c0011f36:	e8 18 df ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c0011f3b:	83 c4 10             	add    esp,0x10
c0011f3e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f42:	80 fa 04             	cmp    dl,0x4
c0011f45:	75 88                	jne    c0011ecf <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011f47:	89 f0                	mov    eax,esi
c0011f49:	84 c0                	test   al,al
c0011f4b:	75 47                	jne    c0011f94 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011f4d:	c7 44 24 20 34 a4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a434
c0011f55:	83 c4 10             	add    esp,0x10
c0011f58:	5b                   	pop    ebx
c0011f59:	5e                   	pop    esi
c0011f5a:	5f                   	pop    edi
c0011f5b:	e9 dd 84 00 00       	jmp    c001a43d <Krnl::panic(char const*)>
c0011f60:	89 f0                	mov    eax,esi
c0011f62:	84 c0                	test   al,al
c0011f64:	75 15                	jne    c0011f7b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f66:	83 ec 0c             	sub    esp,0xc
c0011f69:	68 03 a6 02 c0       	push   0xc002a603
c0011f6e:	e8 ca 84 00 00       	call   c001a43d <Krnl::panic(char const*)>
c0011f73:	83 c4 10             	add    esp,0x10
c0011f76:	e9 6e ff ff ff       	jmp    c0011ee9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f7b:	83 ec 08             	sub    esp,0x8
c0011f7e:	6a 00                	push   0x0
c0011f80:	53                   	push   ebx
c0011f81:	e8 58 fb ff ff       	call   c0011ade <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011f86:	83 c4 10             	add    esp,0x10
c0011f89:	e9 5b ff ff ff       	jmp    c0011ee9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f8e:	89 f0                	mov    eax,esi
c0011f90:	84 c0                	test   al,al
c0011f92:	75 15                	jne    c0011fa9 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011f94:	83 ec 08             	sub    esp,0x8
c0011f97:	6a 00                	push   0x0
c0011f99:	53                   	push   ebx
c0011f9a:	e8 3f fb ff ff       	call   c0011ade <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011f9f:	83 c4 10             	add    esp,0x10
c0011fa2:	83 c4 10             	add    esp,0x10
c0011fa5:	5b                   	pop    ebx
c0011fa6:	5e                   	pop    esi
c0011fa7:	5f                   	pop    edi
c0011fa8:	c3                   	ret    
c0011fa9:	c7 44 24 20 1f a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a61f
c0011fb1:	83 c4 10             	add    esp,0x10
c0011fb4:	5b                   	pop    ebx
c0011fb5:	5e                   	pop    esi
c0011fb6:	5f                   	pop    edi
c0011fb7:	e9 81 84 00 00       	jmp    c001a43d <Krnl::panic(char const*)>

c0011fbc <VAS::freeAllocatedPages(unsigned long)>:
c0011fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011fc4:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011fc8:	74 09                	je     c0011fd3 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011fca:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011fce:	e9 c6 fe ff ff       	jmp    c0011e99 <Virt::freeKernelVirtualPages(unsigned long)>
c0011fd3:	c7 44 24 04 58 a4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a458
c0011fdb:	e9 b4 0d 00 00       	jmp    c0012d94 <Dbg::kprintf(char const*, ...)>

c0011fe0 <VAS::virtualToPhysical(unsigned long)>:
c0011fe0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011fe4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011fe8:	e8 8d fe ff ff       	call   c0011e7a <VAS::getPageTableEntry(unsigned long)>
c0011fed:	5a                   	pop    edx
c0011fee:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ff0:	59                   	pop    ecx
c0011ff1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ff6:	c3                   	ret    
c0011ff7:	90                   	nop

c0011ff8 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011ff8:	55                   	push   ebp
c0011ff9:	57                   	push   edi
c0011ffa:	56                   	push   esi
c0011ffb:	53                   	push   ebx
c0011ffc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012000:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012004:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012008:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001200c:	85 db                	test   ebx,ebx
c001200e:	7e 22                	jle    c0012032 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012010:	c1 e3 0c             	shl    ebx,0xc
c0012013:	01 f3                	add    ebx,esi
c0012015:	56                   	push   esi
c0012016:	81 c6 00 10 00 00    	add    esi,0x1000
c001201c:	55                   	push   ebp
c001201d:	e8 58 fe ff ff       	call   c0011e7a <VAS::getPageTableEntry(unsigned long)>
c0012022:	5a                   	pop    edx
c0012023:	59                   	pop    ecx
c0012024:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012026:	21 f9                	and    ecx,edi
c0012028:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001202c:	39 f3                	cmp    ebx,esi
c001202e:	89 08                	mov    DWORD PTR [eax],ecx
c0012030:	75 e3                	jne    c0012015 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012032:	5b                   	pop    ebx
c0012033:	5e                   	pop    esi
c0012034:	5f                   	pop    edi
c0012035:	5d                   	pop    ebp
c0012036:	c3                   	ret    
c0012037:	90                   	nop

c0012038 <VAS::setToWriteCombining(unsigned long, int)>:
c0012038:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001203d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012043:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c001204a:	75 01                	jne    c001204d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001204c:	c3                   	ret    
c001204d:	68 80 00 00 00       	push   0x80
c0012052:	6a ff                	push   0xffffffff
c0012054:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001205c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012060:	e8 93 ff ff ff       	call   c0011ff8 <VAS::reflagRange(unsigned long, int, int, int)>
c0012065:	83 c4 14             	add    esp,0x14
c0012068:	c3                   	ret    
c0012069:	90                   	nop

c001206a <VAS::mapOtherVASIn(bool, VAS*)>:
c001206a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001206f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012073:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012076:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001207a:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c001207d:	19 c0                	sbb    eax,eax
c001207f:	83 ca 03             	or     edx,0x3
c0012082:	83 e0 fc             	and    eax,0xfffffffc
c0012085:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c001208c:	0f 20 d8             	mov    eax,cr3
c001208f:	0f 22 d8             	mov    cr3,eax
c0012092:	c3                   	ret    
c0012093:	90                   	nop

c0012094 <VAS::~VAS()>:
c0012094:	83 ec 2c             	sub    esp,0x2c
c0012097:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001209f:	e8 93 bb 00 00       	call   c001dc37 <lockScheduler()>
c00120a4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00120a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00120ab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00120ae:	8b 80 32 19 00 00    	mov    eax,DWORD PTR [eax+0x1932]
c00120b4:	83 ec 04             	sub    esp,0x4
c00120b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00120bb:	6a 01                	push   0x1
c00120bd:	50                   	push   eax
c00120be:	e8 a7 ff ff ff       	call   c001206a <VAS::mapOtherVASIn(bool, VAS*)>
c00120c3:	83 c4 10             	add    esp,0x10
c00120c6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00120ce:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00120d6:	0f 8f d7 00 00 00    	jg     c00121b3 <VAS::~VAS()+0x11f>
c00120dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00120e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00120e7:	c1 e2 02             	shl    edx,0x2
c00120ea:	01 d0                	add    eax,edx
c00120ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00120ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120f6:	83 e0 01             	and    eax,0x1
c00120f9:	0f 84 ab 00 00 00    	je     c00121aa <VAS::~VAS()+0x116>
c00120ff:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012107:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001210f:	7f 75                	jg     c0012186 <VAS::~VAS()+0xf2>
c0012111:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012115:	c1 e0 0a             	shl    eax,0xa
c0012118:	89 c2                	mov    edx,eax
c001211a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001211e:	01 d0                	add    eax,edx
c0012120:	c1 e0 0c             	shl    eax,0xc
c0012123:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012127:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001212c:	8b 00                	mov    eax,DWORD PTR [eax]
c001212e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012131:	8b 80 32 19 00 00    	mov    eax,DWORD PTR [eax+0x1932]
c0012137:	83 ec 04             	sub    esp,0x4
c001213a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001213e:	6a 01                	push   0x1
c0012140:	50                   	push   eax
c0012141:	e8 08 fd ff ff       	call   c0011e4e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012146:	83 c4 10             	add    esp,0x10
c0012149:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001214d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012151:	8b 00                	mov    eax,DWORD PTR [eax]
c0012153:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012157:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001215b:	25 01 04 00 00       	and    eax,0x401
c0012160:	3d 01 04 00 00       	cmp    eax,0x401
c0012165:	75 19                	jne    c0012180 <VAS::~VAS()+0xec>
c0012167:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001216b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012170:	83 ec 0c             	sub    esp,0xc
c0012173:	50                   	push   eax
c0012174:	e8 da dc ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c0012179:	83 c4 10             	add    esp,0x10
c001217c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012180:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0012184:	eb 81                	jmp    c0012107 <VAS::~VAS()+0x73>
c0012186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001218a:	25 00 04 00 00       	and    eax,0x400
c001218f:	74 19                	je     c00121aa <VAS::~VAS()+0x116>
c0012191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012195:	25 00 f0 ff ff       	and    eax,0xfffff000
c001219a:	83 ec 0c             	sub    esp,0xc
c001219d:	50                   	push   eax
c001219e:	e8 b0 dc ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c00121a3:	83 c4 10             	add    esp,0x10
c00121a6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121aa:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00121ae:	e9 1b ff ff ff       	jmp    c00120ce <VAS::~VAS()+0x3a>
c00121b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00121ba:	83 ec 0c             	sub    esp,0xc
c00121bd:	50                   	push   eax
c00121be:	e8 d6 fc ff ff       	call   c0011e99 <Virt::freeKernelVirtualPages(unsigned long)>
c00121c3:	83 c4 10             	add    esp,0x10
c00121c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121ca:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121cd:	83 ec 0c             	sub    esp,0xc
c00121d0:	50                   	push   eax
c00121d1:	e8 7d dc ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c00121d6:	83 c4 10             	add    esp,0x10
c00121d9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00121e1:	c1 e0 02             	shl    eax,0x2
c00121e4:	83 ec 08             	sub    esp,0x8
c00121e7:	50                   	push   eax
c00121e8:	68 7c a4 02 c0       	push   0xc002a47c
c00121ed:	e8 a2 0b 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00121f2:	83 c4 10             	add    esp,0x10
c00121f5:	e8 3f ba 00 00       	call   c001dc39 <unlockScheduler()>
c00121fa:	90                   	nop
c00121fb:	83 c4 2c             	add    esp,0x2c
c00121fe:	c3                   	ret    
c00121ff:	90                   	nop

c0012200 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012200:	55                   	push   ebp
c0012201:	57                   	push   edi
c0012202:	56                   	push   esi
c0012203:	53                   	push   ebx
c0012204:	83 ec 1c             	sub    esp,0x1c
c0012207:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001220b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001220f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012215:	77 08                	ja     c001221f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012217:	0f 20 d8             	mov    eax,cr3
c001221a:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001221d:	75 47                	jne    c0012266 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001221f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012223:	09 d8                	or     eax,ebx
c0012225:	a9 ff 0f 00 00       	test   eax,0xfff
c001222a:	75 57                	jne    c0012283 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001222c:	89 de                	mov    esi,ebx
c001222e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012231:	c1 ee 16             	shr    esi,0x16
c0012234:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001223b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001223f:	74 54                	je     c0012295 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012241:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012245:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001224b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001224f:	c1 e6 0c             	shl    esi,0xc
c0012252:	c1 eb 0a             	shr    ebx,0xa
c0012255:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001225b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001225e:	83 c4 1c             	add    esp,0x1c
c0012261:	5b                   	pop    ebx
c0012262:	5e                   	pop    esi
c0012263:	5f                   	pop    edi
c0012264:	5d                   	pop    ebp
c0012265:	c3                   	ret    
c0012266:	83 ec 0c             	sub    esp,0xc
c0012269:	68 9c a4 02 c0       	push   0xc002a49c
c001226e:	e8 21 0b 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0012273:	83 c4 10             	add    esp,0x10
c0012276:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001227a:	09 d8                	or     eax,ebx
c001227c:	a9 ff 0f 00 00       	test   eax,0xfff
c0012281:	74 a9                	je     c001222c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012283:	83 ec 0c             	sub    esp,0xc
c0012286:	68 04 a5 02 c0       	push   0xc002a504
c001228b:	e8 ad 81 00 00       	call   c001a43d <Krnl::panic(char const*)>
c0012290:	83 c4 10             	add    esp,0x10
c0012293:	eb 97                	jmp    c001222c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012295:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012299:	e8 3f dc ff ff       	call   c000fedd <Phys::allocatePage()>
c001229e:	89 c5                	mov    ebp,eax
c00122a0:	e8 39 fb ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c00122a5:	83 ec 0c             	sub    esp,0xc
c00122a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122ac:	6a 01                	push   0x1
c00122ae:	e8 84 f8 ff ff       	call   c0011b37 <Virt::allocateKernelVirtualPages(int)>
c00122b3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00122ba:	6a 01                	push   0x1
c00122bc:	50                   	push   eax
c00122bd:	55                   	push   ebp
c00122be:	81 cd 07 04 00 00    	or     ebp,0x407
c00122c4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00122c8:	51                   	push   ecx
c00122c9:	e8 26 02 00 00       	call   c00124f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122ce:	83 c4 1c             	add    esp,0x1c
c00122d1:	68 00 10 00 00       	push   0x1000
c00122d6:	6a 00                	push   0x0
c00122d8:	50                   	push   eax
c00122d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122dd:	e8 96 e4 fe ff       	call   c0000778 <memset>
c00122e2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00122e6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00122e9:	e8 ab fb ff ff       	call   c0011e99 <Virt::freeKernelVirtualPages(unsigned long)>
c00122ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00122f2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00122f5:	83 c4 10             	add    esp,0x10
c00122f8:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00122fb:	e9 41 ff ff ff       	jmp    c0012241 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012300 <VAS::allocatePages(int, int)>:
c0012300:	55                   	push   ebp
c0012301:	57                   	push   edi
c0012302:	56                   	push   esi
c0012303:	53                   	push   ebx
c0012304:	83 ec 1c             	sub    esp,0x1c
c0012307:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001230b:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0012310:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012316:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001231c:	83 e0 01             	and    eax,0x1
c001231f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012323:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012327:	0f 85 cc 00 00 00    	jne    c00123f9 <VAS::allocatePages(int, int)+0xf9>
c001232d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012330:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012334:	85 c0                	test   eax,eax
c0012336:	0f 84 a1 00 00 00    	je     c00123dd <VAS::allocatePages(int, int)+0xdd>
c001233c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012340:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012344:	c1 e6 0c             	shl    esi,0xc
c0012347:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001234b:	85 c0                	test   eax,eax
c001234d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012350:	7e 33                	jle    c0012385 <VAS::allocatePages(int, int)+0x85>
c0012352:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012356:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001235a:	81 cd 00 04 00 00    	or     ebp,0x400
c0012360:	e8 78 db ff ff       	call   c000fedd <Phys::allocatePage()>
c0012365:	55                   	push   ebp
c0012366:	53                   	push   ebx
c0012367:	50                   	push   eax
c0012368:	57                   	push   edi
c0012369:	e8 92 fe ff ff       	call   c0012200 <VAS::mapPage(unsigned long, unsigned long, int)>
c001236e:	83 c4 10             	add    esp,0x10
c0012371:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012376:	74 03                	je     c001237b <VAS::allocatePages(int, int)+0x7b>
c0012378:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001237b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012381:	39 de                	cmp    esi,ebx
c0012383:	75 db                	jne    c0012360 <VAS::allocatePages(int, int)+0x60>
c0012385:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001238a:	75 12                	jne    c001239e <VAS::allocatePages(int, int)+0x9e>
c001238c:	0f 20 d8             	mov    eax,cr3
c001238f:	0f 22 d8             	mov    cr3,eax
c0012392:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012396:	83 c4 1c             	add    esp,0x1c
c0012399:	5b                   	pop    ebx
c001239a:	5e                   	pop    esi
c001239b:	5f                   	pop    edi
c001239c:	5d                   	pop    ebp
c001239d:	c3                   	ret    
c001239e:	c1 ee 0a             	shr    esi,0xa
c00123a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123a5:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00123ab:	c1 eb 0a             	shr    ebx,0xa
c00123ae:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00123b4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00123ba:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00123c0:	39 c3                	cmp    ebx,eax
c00123c2:	77 ce                	ja     c0012392 <VAS::allocatePages(int, int)+0x92>
c00123c4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123c7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123cd:	39 d8                	cmp    eax,ebx
c00123cf:	73 f3                	jae    c00123c4 <VAS::allocatePages(int, int)+0xc4>
c00123d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123d5:	83 c4 1c             	add    esp,0x1c
c00123d8:	5b                   	pop    ebx
c00123d9:	5e                   	pop    esi
c00123da:	5f                   	pop    edi
c00123db:	5d                   	pop    ebp
c00123dc:	c3                   	ret    
c00123dd:	83 ec 0c             	sub    esp,0xc
c00123e0:	68 28 a5 02 c0       	push   0xc002a528
c00123e5:	e8 53 80 00 00       	call   c001a43d <Krnl::panic(char const*)>
c00123ea:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00123ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00123f1:	83 c4 10             	add    esp,0x10
c00123f4:	e9 43 ff ff ff       	jmp    c001233c <VAS::allocatePages(int, int)+0x3c>
c00123f9:	83 ec 0c             	sub    esp,0xc
c00123fc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012400:	e8 32 f7 ff ff       	call   c0011b37 <Virt::allocateKernelVirtualPages(int)>
c0012405:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012409:	83 c4 10             	add    esp,0x10
c001240c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012411:	0f 87 9b 00 00 00    	ja     c00124b2 <VAS::allocatePages(int, int)+0x1b2>
c0012417:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001241b:	85 d2                	test   edx,edx
c001241d:	7e 3c                	jle    c001245b <VAS::allocatePages(int, int)+0x15b>
c001241f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012423:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012427:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001242b:	c1 e5 0c             	shl    ebp,0xc
c001242e:	81 ce 00 04 00 00    	or     esi,0x400
c0012434:	01 dd                	add    ebp,ebx
c0012436:	e8 a2 da ff ff       	call   c000fedd <Phys::allocatePage()>
c001243b:	56                   	push   esi
c001243c:	53                   	push   ebx
c001243d:	50                   	push   eax
c001243e:	57                   	push   edi
c001243f:	e8 bc fd ff ff       	call   c0012200 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012444:	83 c4 10             	add    esp,0x10
c0012447:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001244c:	74 03                	je     c0012451 <VAS::allocatePages(int, int)+0x151>
c001244e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012451:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012457:	39 dd                	cmp    ebp,ebx
c0012459:	75 db                	jne    c0012436 <VAS::allocatePages(int, int)+0x136>
c001245b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012460:	0f 84 26 ff ff ff    	je     c001238c <VAS::allocatePages(int, int)+0x8c>
c0012466:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001246a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001246e:	89 d3                	mov    ebx,edx
c0012470:	c1 e0 0c             	shl    eax,0xc
c0012473:	c1 eb 0a             	shr    ebx,0xa
c0012476:	01 d0                	add    eax,edx
c0012478:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001247e:	c1 e8 0a             	shr    eax,0xa
c0012481:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012487:	25 00 f0 ff ff       	and    eax,0xfffff000
c001248c:	2d 00 00 40 00       	sub    eax,0x400000
c0012491:	39 c3                	cmp    ebx,eax
c0012493:	0f 87 f9 fe ff ff    	ja     c0012392 <VAS::allocatePages(int, int)+0x92>
c0012499:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001249c:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124a2:	39 d8                	cmp    eax,ebx
c00124a4:	73 f3                	jae    c0012499 <VAS::allocatePages(int, int)+0x199>
c00124a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124aa:	83 c4 1c             	add    esp,0x1c
c00124ad:	5b                   	pop    ebx
c00124ae:	5e                   	pop    esi
c00124af:	5f                   	pop    edi
c00124b0:	5d                   	pop    ebp
c00124b1:	c3                   	ret    
c00124b2:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00124b7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124bd:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00124c4:	0f 84 4d ff ff ff    	je     c0012417 <VAS::allocatePages(int, int)+0x117>
c00124ca:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00124d2:	e9 40 ff ff ff       	jmp    c0012417 <VAS::allocatePages(int, int)+0x117>
c00124d7:	90                   	nop

c00124d8 <VAS::setCPUSpecific(unsigned long)>:
c00124d8:	83 ec 0c             	sub    esp,0xc
c00124db:	6a 05                	push   0x5
c00124dd:	68 00 00 40 c2       	push   0xc2400000
c00124e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124ea:	e8 11 fd ff ff       	call   c0012200 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124ef:	83 c4 1c             	add    esp,0x1c
c00124f2:	c3                   	ret    
c00124f3:	90                   	nop

c00124f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00124f4:	55                   	push   ebp
c00124f5:	57                   	push   edi
c00124f6:	56                   	push   esi
c00124f7:	53                   	push   ebx
c00124f8:	83 ec 1c             	sub    esp,0x1c
c00124fb:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0012500:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012504:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001250a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001250e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012514:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012518:	83 e0 01             	and    eax,0x1
c001251b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001251f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012523:	85 c0                	test   eax,eax
c0012525:	7e 39                	jle    c0012560 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012527:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001252b:	89 f3                	mov    ebx,esi
c001252d:	c1 e0 0c             	shl    eax,0xc
c0012530:	01 f0                	add    eax,esi
c0012532:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012536:	55                   	push   ebp
c0012537:	53                   	push   ebx
c0012538:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001253c:	29 f0                	sub    eax,esi
c001253e:	01 d8                	add    eax,ebx
c0012540:	50                   	push   eax
c0012541:	57                   	push   edi
c0012542:	e8 b9 fc ff ff       	call   c0012200 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012547:	83 c4 10             	add    esp,0x10
c001254a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001254f:	74 03                	je     c0012554 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012551:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012554:	81 c3 00 10 00 00    	add    ebx,0x1000
c001255a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001255e:	75 d6                	jne    c0012536 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012560:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012565:	75 10                	jne    c0012577 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012567:	0f 20 d8             	mov    eax,cr3
c001256a:	0f 22 d8             	mov    cr3,eax
c001256d:	83 c4 1c             	add    esp,0x1c
c0012570:	89 f0                	mov    eax,esi
c0012572:	5b                   	pop    ebx
c0012573:	5e                   	pop    esi
c0012574:	5f                   	pop    edi
c0012575:	5d                   	pop    ebp
c0012576:	c3                   	ret    
c0012577:	89 f3                	mov    ebx,esi
c0012579:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001257d:	c1 eb 0a             	shr    ebx,0xa
c0012580:	c1 e0 0c             	shl    eax,0xc
c0012583:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012589:	01 f0                	add    eax,esi
c001258b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012591:	c1 e8 0a             	shr    eax,0xa
c0012594:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012599:	2d 00 00 40 00       	sub    eax,0x400000
c001259e:	39 c3                	cmp    ebx,eax
c00125a0:	77 cb                	ja     c001256d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00125a2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125a5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125ab:	39 d8                	cmp    eax,ebx
c00125ad:	73 f3                	jae    c00125a2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00125af:	83 c4 1c             	add    esp,0x1c
c00125b2:	89 f0                	mov    eax,esi
c00125b4:	5b                   	pop    ebx
c00125b5:	5e                   	pop    esi
c00125b6:	5f                   	pop    edi
c00125b7:	5d                   	pop    ebp
c00125b8:	c3                   	ret    
c00125b9:	90                   	nop

c00125ba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00125ba:	55                   	push   ebp
c00125bb:	57                   	push   edi
c00125bc:	56                   	push   esi
c00125bd:	53                   	push   ebx
c00125be:	83 ec 1c             	sub    esp,0x1c
c00125c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125c5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00125c9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00125cd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00125d1:	a9 ff 0f 00 00       	test   eax,0xfff
c00125d6:	75 4a                	jne    c0012622 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00125d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00125dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00125df:	c1 eb 16             	shr    ebx,0x16
c00125e2:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00125e9:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00125ed:	74 4d                	je     c001263c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00125ef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125f3:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00125f7:	c1 e8 0a             	shr    eax,0xa
c00125fa:	80 fa 01             	cmp    dl,0x1
c00125fd:	19 d2                	sbb    edx,edx
c00125ff:	c1 e3 0c             	shl    ebx,0xc
c0012602:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012606:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001260c:	25 fc 0f 00 00       	and    eax,0xffc
c0012611:	01 d8                	add    eax,ebx
c0012613:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001261a:	83 c4 1c             	add    esp,0x1c
c001261d:	5b                   	pop    ebx
c001261e:	5e                   	pop    esi
c001261f:	5f                   	pop    edi
c0012620:	5d                   	pop    ebp
c0012621:	c3                   	ret    
c0012622:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012626:	83 ec 0c             	sub    esp,0xc
c0012629:	68 54 a5 02 c0       	push   0xc002a554
c001262e:	e8 0a 7e 00 00       	call   c001a43d <Krnl::panic(char const*)>
c0012633:	83 c4 10             	add    esp,0x10
c0012636:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001263a:	eb 9c                	jmp    c00125d8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001263c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012640:	e8 98 d8 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012645:	89 c5                	mov    ebp,eax
c0012647:	e8 92 f7 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c001264c:	83 ec 0c             	sub    esp,0xc
c001264f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012653:	6a 01                	push   0x1
c0012655:	e8 dd f4 ff ff       	call   c0011b37 <Virt::allocateKernelVirtualPages(int)>
c001265a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012661:	6a 01                	push   0x1
c0012663:	50                   	push   eax
c0012664:	55                   	push   ebp
c0012665:	81 cd 07 04 00 00    	or     ebp,0x407
c001266b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001266f:	51                   	push   ecx
c0012670:	e8 7f fe ff ff       	call   c00124f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012675:	83 c4 1c             	add    esp,0x1c
c0012678:	68 00 10 00 00       	push   0x1000
c001267d:	6a 00                	push   0x0
c001267f:	50                   	push   eax
c0012680:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012684:	e8 ef e0 fe ff       	call   c0000778 <memset>
c0012689:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001268d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012690:	e8 04 f8 ff ff       	call   c0011e99 <Virt::freeKernelVirtualPages(unsigned long)>
c0012695:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012698:	83 c4 10             	add    esp,0x10
c001269b:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001269e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00126a2:	e9 48 ff ff ff       	jmp    c00125ef <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00126a7:	90                   	nop

c00126a8 <VAS::VAS(bool)>:
c00126a8:	53                   	push   ebx
c00126a9:	83 ec 28             	sub    esp,0x28
c00126ac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126b0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00126b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00126bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126c3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00126ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126ce:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00126d2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00126d5:	e8 03 d8 ff ff       	call   c000fedd <Phys::allocatePage()>
c00126da:	89 c2                	mov    edx,eax
c00126dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126e0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00126e3:	e8 f6 f6 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c00126e8:	89 c3                	mov    ebx,eax
c00126ea:	83 ec 0c             	sub    esp,0xc
c00126ed:	6a 01                	push   0x1
c00126ef:	e8 43 f4 ff ff       	call   c0011b37 <Virt::allocateKernelVirtualPages(int)>
c00126f4:	83 c4 10             	add    esp,0x10
c00126f7:	89 c2                	mov    edx,eax
c00126f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126fd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012700:	83 ec 0c             	sub    esp,0xc
c0012703:	6a 03                	push   0x3
c0012705:	6a 01                	push   0x1
c0012707:	52                   	push   edx
c0012708:	50                   	push   eax
c0012709:	53                   	push   ebx
c001270a:	e8 e5 fd ff ff       	call   c00124f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001270f:	83 c4 20             	add    esp,0x20
c0012712:	89 c2                	mov    edx,eax
c0012714:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012718:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001271b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012723:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001272b:	7f 1c                	jg     c0012749 <VAS::VAS(bool)+0xa1>
c001272d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012731:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012734:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012738:	c1 e2 02             	shl    edx,0x2
c001273b:	01 d0                	add    eax,edx
c001273d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012743:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012747:	eb da                	jmp    c0012723 <VAS::VAS(bool)+0x7b>
c0012749:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012751:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012759:	7f 7a                	jg     c00127d5 <VAS::VAS(bool)+0x12d>
c001275b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001275f:	2d 00 02 00 00       	sub    eax,0x200
c0012764:	c1 e0 0c             	shl    eax,0xc
c0012767:	83 c8 03             	or     eax,0x3
c001276a:	89 c2                	mov    edx,eax
c001276c:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0012771:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012777:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001277d:	83 e0 10             	and    eax,0x10
c0012780:	84 c0                	test   al,al
c0012782:	74 07                	je     c001278b <VAS::VAS(bool)+0xe3>
c0012784:	b8 00 01 00 00       	mov    eax,0x100
c0012789:	eb 05                	jmp    c0012790 <VAS::VAS(bool)+0xe8>
c001278b:	b8 00 00 00 00       	mov    eax,0x0
c0012790:	09 d0                	or     eax,edx
c0012792:	89 c1                	mov    ecx,eax
c0012794:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012798:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001279b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001279f:	c1 e2 02             	shl    edx,0x2
c00127a2:	01 d0                	add    eax,edx
c00127a4:	89 ca                	mov    edx,ecx
c00127a6:	89 10                	mov    DWORD PTR [eax],edx
c00127a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127ac:	2d 40 03 00 00       	sub    eax,0x340
c00127b1:	83 f8 7f             	cmp    eax,0x7f
c00127b4:	77 16                	ja     c00127cc <VAS::VAS(bool)+0x124>
c00127b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00127bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127c1:	c1 e2 02             	shl    edx,0x2
c00127c4:	01 d0                	add    eax,edx
c00127c6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127cc:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00127d0:	e9 7c ff ff ff       	jmp    c0012751 <VAS::VAS(bool)+0xa9>
c00127d5:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00127da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127e0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00127e6:	83 e0 10             	and    eax,0x10
c00127e9:	84 c0                	test   al,al
c00127eb:	74 07                	je     c00127f4 <VAS::VAS(bool)+0x14c>
c00127ed:	b8 03 41 00 00       	mov    eax,0x4103
c00127f2:	eb 05                	jmp    c00127f9 <VAS::VAS(bool)+0x151>
c00127f4:	b8 03 40 00 00       	mov    eax,0x4003
c00127f9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00127fd:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012800:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012806:	89 02                	mov    DWORD PTR [edx],eax
c0012808:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001280d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012813:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012819:	83 ec 08             	sub    esp,0x8
c001281c:	50                   	push   eax
c001281d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012821:	e8 b2 fc ff ff       	call   c00124d8 <VAS::setCPUSpecific(unsigned long)>
c0012826:	83 c4 10             	add    esp,0x10
c0012829:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001282d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012830:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0012835:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001283b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012841:	83 e0 10             	and    eax,0x10
c0012844:	84 c0                	test   al,al
c0012846:	74 07                	je     c001284f <VAS::VAS(bool)+0x1a7>
c0012848:	b8 00 01 00 00       	mov    eax,0x100
c001284d:	eb 05                	jmp    c0012854 <VAS::VAS(bool)+0x1ac>
c001284f:	b8 00 00 00 00       	mov    eax,0x0
c0012854:	09 c2                	or     edx,eax
c0012856:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001285a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001285d:	05 fc 0f 00 00       	add    eax,0xffc
c0012862:	83 ca 03             	or     edx,0x3
c0012865:	89 10                	mov    DWORD PTR [eax],edx
c0012867:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001286c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012872:	83 ec 0c             	sub    esp,0xc
c0012875:	50                   	push   eax
c0012876:	e8 2b 1c 00 00       	call   c00144a6 <Device::getName()>
c001287b:	83 c4 10             	add    esp,0x10
c001287e:	83 ec 08             	sub    esp,0x8
c0012881:	68 39 a6 02 c0       	push   0xc002a639
c0012886:	50                   	push   eax
c0012887:	e8 34 e0 fe ff       	call   c00008c0 <strcmp>
c001288c:	83 c4 10             	add    esp,0x10
c001288f:	85 c0                	test   eax,eax
c0012891:	0f 94 c0             	sete   al
c0012894:	84 c0                	test   al,al
c0012896:	74 70                	je     c0012908 <VAS::VAS(bool)+0x260>
c0012898:	e8 7d b3 00 00       	call   c001dc1a <disableIRQs()>
c001289d:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00128a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128a8:	05 7c 09 00 00       	add    eax,0x97c
c00128ad:	83 ec 0c             	sub    esp,0xc
c00128b0:	50                   	push   eax
c00128b1:	e8 06 ca ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128b6:	83 c4 10             	add    esp,0x10
c00128b9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128be:	89 c3                	mov    ebx,eax
c00128c0:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00128c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128cb:	05 7c 09 00 00       	add    eax,0x97c
c00128d0:	83 ec 0c             	sub    esp,0xc
c00128d3:	50                   	push   eax
c00128d4:	e8 e3 c9 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128d9:	83 c4 10             	add    esp,0x10
c00128dc:	83 ec 08             	sub    esp,0x8
c00128df:	50                   	push   eax
c00128e0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128e4:	e8 91 f5 ff ff       	call   c0011e7a <VAS::getPageTableEntry(unsigned long)>
c00128e9:	83 c4 10             	add    esp,0x10
c00128ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00128ee:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128f3:	6a 11                	push   0x11
c00128f5:	53                   	push   ebx
c00128f6:	50                   	push   eax
c00128f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128fb:	e8 00 f9 ff ff       	call   c0012200 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012900:	83 c4 10             	add    esp,0x10
c0012903:	e8 20 b3 00 00       	call   c001dc28 <enableIRQs()>
c0012908:	90                   	nop
c0012909:	83 c4 28             	add    esp,0x28
c001290c:	5b                   	pop    ebx
c001290d:	c3                   	ret    

c001290e <VAS::evict(unsigned long)>:
c001290e:	55                   	push   ebp
c001290f:	57                   	push   edi
c0012910:	56                   	push   esi
c0012911:	53                   	push   ebx
c0012912:	83 ec 14             	sub    esp,0x14
c0012915:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0012919:	55                   	push   ebp
c001291a:	68 47 a6 02 c0       	push   0xc002a647
c001291f:	e8 70 04 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0012924:	e8 4f f3 ff ff       	call   c0011c78 <Virt::allocateSwapfilePage()>
c0012929:	83 c4 10             	add    esp,0x10
c001292c:	89 c7                	mov    edi,eax
c001292e:	a1 cc d1 02 c0       	mov    eax,ds:0xc002d1cc
c0012933:	85 c0                	test   eax,eax
c0012935:	7e 3d                	jle    c0012974 <VAS::evict(unsigned long)+0x66>
c0012937:	89 ee                	mov    esi,ebp
c0012939:	31 db                	xor    ebx,ebx
c001293b:	83 ec 0c             	sub    esp,0xc
c001293e:	57                   	push   edi
c001293f:	e8 22 f3 ff ff       	call   c0011c66 <Virt::swapIDToSector(unsigned long)>
c0012944:	89 34 24             	mov    DWORD PTR [esp],esi
c0012947:	01 d8                	add    eax,ebx
c0012949:	6a 01                	push   0x1
c001294b:	31 d2                	xor    edx,edx
c001294d:	43                   	inc    ebx
c001294e:	52                   	push   edx
c001294f:	81 c6 00 02 00 00    	add    esi,0x200
c0012955:	50                   	push   eax
c0012956:	0f be 05 d8 d1 02 c0 	movsx  eax,BYTE PTR ds:0xc002d1d8
c001295d:	ff 34 85 3c e7 02 c0 	push   DWORD PTR [eax*4-0x3ffd18c4]
c0012964:	e8 ab 3c 00 00       	call   c0016614 <LogicalDisk::write(unsigned long long, int, void*)>
c0012969:	83 c4 20             	add    esp,0x20
c001296c:	39 1d cc d1 02 c0    	cmp    DWORD PTR ds:0xc002d1cc,ebx
c0012972:	7f c7                	jg     c001293b <VAS::evict(unsigned long)+0x2d>
c0012974:	83 ec 08             	sub    esp,0x8
c0012977:	c1 e7 0b             	shl    edi,0xb
c001297a:	55                   	push   ebp
c001297b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001297f:	e8 f6 f4 ff ff       	call   c0011e7a <VAS::getPageTableEntry(unsigned long)>
c0012984:	8b 10                	mov    edx,DWORD PTR [eax]
c0012986:	81 e2 fe 07 00 00    	and    edx,0x7fe
c001298c:	09 d7                	or     edi,edx
c001298e:	89 38                	mov    DWORD PTR [eax],edi
c0012990:	ff 05 a4 e3 02 c0    	inc    DWORD PTR ds:0xc002e3a4
c0012996:	0f 20 d8             	mov    eax,cr3
c0012999:	0f 22 d8             	mov    cr3,eax
c001299c:	83 c4 1c             	add    esp,0x1c
c001299f:	5b                   	pop    ebx
c00129a0:	5e                   	pop    esi
c00129a1:	5f                   	pop    edi
c00129a2:	5d                   	pop    ebp
c00129a3:	c3                   	ret    

c00129a4 <VAS::tryLoadBackOffDisk(unsigned long)>:
c00129a4:	57                   	push   edi
c00129a5:	56                   	push   esi
c00129a6:	53                   	push   ebx
c00129a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00129ab:	83 ec 08             	sub    esp,0x8
c00129ae:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00129b4:	53                   	push   ebx
c00129b5:	68 56 a6 02 c0       	push   0xc002a656
c00129ba:	e8 d5 03 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00129bf:	83 c4 10             	add    esp,0x10
c00129c2:	85 db                	test   ebx,ebx
c00129c4:	74 20                	je     c00129e6 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c00129c6:	83 ec 08             	sub    esp,0x8
c00129c9:	53                   	push   ebx
c00129ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129ce:	e8 a7 f4 ff ff       	call   c0011e7a <VAS::getPageTableEntry(unsigned long)>
c00129d3:	83 c4 10             	add    esp,0x10
c00129d6:	89 c6                	mov    esi,eax
c00129d8:	85 c0                	test   eax,eax
c00129da:	74 0a                	je     c00129e6 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c00129dc:	8b 38                	mov    edi,DWORD PTR [eax]
c00129de:	f7 c7 01 00 00 00    	test   edi,0x1
c00129e4:	74 06                	je     c00129ec <VAS::tryLoadBackOffDisk(unsigned long)+0x48>
c00129e6:	31 c0                	xor    eax,eax
c00129e8:	5b                   	pop    ebx
c00129e9:	5e                   	pop    esi
c00129ea:	5f                   	pop    edi
c00129eb:	c3                   	ret    
c00129ec:	e8 ec d4 ff ff       	call   c000fedd <Phys::allocatePage()>
c00129f1:	c1 ef 0b             	shr    edi,0xb
c00129f4:	8b 16                	mov    edx,DWORD PTR [esi]
c00129f6:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00129fc:	09 c2                	or     edx,eax
c00129fe:	81 ca 01 08 00 00    	or     edx,0x801
c0012a04:	89 16                	mov    DWORD PTR [esi],edx
c0012a06:	0f 20 d8             	mov    eax,cr3
c0012a09:	0f 22 d8             	mov    cr3,eax
c0012a0c:	a1 cc d1 02 c0       	mov    eax,ds:0xc002d1cc
c0012a11:	85 c0                	test   eax,eax
c0012a13:	7e 3b                	jle    c0012a50 <VAS::tryLoadBackOffDisk(unsigned long)+0xac>
c0012a15:	31 f6                	xor    esi,esi
c0012a17:	83 ec 0c             	sub    esp,0xc
c0012a1a:	57                   	push   edi
c0012a1b:	e8 46 f2 ff ff       	call   c0011c66 <Virt::swapIDToSector(unsigned long)>
c0012a20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a23:	01 f0                	add    eax,esi
c0012a25:	6a 01                	push   0x1
c0012a27:	31 d2                	xor    edx,edx
c0012a29:	46                   	inc    esi
c0012a2a:	52                   	push   edx
c0012a2b:	81 c3 00 02 00 00    	add    ebx,0x200
c0012a31:	50                   	push   eax
c0012a32:	0f be 05 d8 d1 02 c0 	movsx  eax,BYTE PTR ds:0xc002d1d8
c0012a39:	ff 34 85 3c e7 02 c0 	push   DWORD PTR [eax*4-0x3ffd18c4]
c0012a40:	e8 63 3b 00 00       	call   c00165a8 <LogicalDisk::read(unsigned long long, int, void*)>
c0012a45:	83 c4 20             	add    esp,0x20
c0012a48:	39 35 cc d1 02 c0    	cmp    DWORD PTR ds:0xc002d1cc,esi
c0012a4e:	7f c7                	jg     c0012a17 <VAS::tryLoadBackOffDisk(unsigned long)+0x73>
c0012a50:	83 ec 0c             	sub    esp,0xc
c0012a53:	ff 0d a4 e3 02 c0    	dec    DWORD PTR ds:0xc002e3a4
c0012a59:	57                   	push   edi
c0012a5a:	e8 e9 f1 ff ff       	call   c0011c48 <Virt::freeSwapfilePage(unsigned long)>
c0012a5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a63:	83 c4 10             	add    esp,0x10
c0012a66:	25 ff 0f 00 00       	and    eax,0xfff
c0012a6b:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012a70:	77 07                	ja     c0012a79 <VAS::tryLoadBackOffDisk(unsigned long)+0xd5>
c0012a72:	b0 01                	mov    al,0x1
c0012a74:	e9 6f ff ff ff       	jmp    c00129e8 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c0012a79:	83 ec 0c             	sub    esp,0xc
c0012a7c:	68 64 a6 02 c0       	push   0xc002a664
c0012a81:	e8 0e 03 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0012a86:	83 c4 10             	add    esp,0x10
c0012a89:	b0 01                	mov    al,0x1
c0012a8b:	e9 58 ff ff ff       	jmp    c00129e8 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c0012a90 <VAS::scanForEviction()>:
c0012a90:	55                   	push   ebp
c0012a91:	57                   	push   edi
c0012a92:	31 ff                	xor    edi,edi
c0012a94:	56                   	push   esi
c0012a95:	31 f6                	xor    esi,esi
c0012a97:	53                   	push   ebx
c0012a98:	83 ec 1c             	sub    esp,0x1c
c0012a9b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012a9f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0012aa2:	89 d8                	mov    eax,ebx
c0012aa4:	39 c3                	cmp    ebx,eax
c0012aa6:	74 72                	je     c0012b1a <VAS::scanForEviction()+0x8a>
c0012aa8:	a9 ff ff 3f 00       	test   eax,0x3fffff
c0012aad:	75 0e                	jne    c0012abd <VAS::scanForEviction()+0x2d>
c0012aaf:	89 c1                	mov    ecx,eax
c0012ab1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012ab4:	c1 e9 16             	shr    ecx,0x16
c0012ab7:	f6 04 8a 01          	test   BYTE PTR [edx+ecx*4],0x1
c0012abb:	74 51                	je     c0012b0e <VAS::scanForEviction()+0x7e>
c0012abd:	50                   	push   eax
c0012abe:	55                   	push   ebp
c0012abf:	e8 b6 f3 ff ff       	call   c0011e7a <VAS::getPageTableEntry(unsigned long)>
c0012ac4:	5a                   	pop    edx
c0012ac5:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ac7:	59                   	pop    ecx
c0012ac8:	89 d1                	mov    ecx,edx
c0012aca:	81 e1 00 0c 00 00    	and    ecx,0xc00
c0012ad0:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c0012ad6:	74 54                	je     c0012b2c <VAS::scanForEviction()+0x9c>
c0012ad8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0012adb:	05 00 10 00 00       	add    eax,0x1000
c0012ae0:	3d ff ff bf ff       	cmp    eax,0xffbfffff
c0012ae5:	76 3d                	jbe    c0012b24 <VAS::scanForEviction()+0x94>
c0012ae7:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
c0012aee:	85 db                	test   ebx,ebx
c0012af0:	74 79                	je     c0012b6b <VAS::scanForEviction()+0xdb>
c0012af2:	31 c0                	xor    eax,eax
c0012af4:	be 01 00 00 00       	mov    esi,0x1
c0012af9:	a9 ff ff 3f 00       	test   eax,0x3fffff
c0012afe:	75 bd                	jne    c0012abd <VAS::scanForEviction()+0x2d>
c0012b00:	89 c1                	mov    ecx,eax
c0012b02:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012b05:	c1 e9 16             	shr    ecx,0x16
c0012b08:	f6 04 8a 01          	test   BYTE PTR [edx+ecx*4],0x1
c0012b0c:	75 af                	jne    c0012abd <VAS::scanForEviction()+0x2d>
c0012b0e:	05 00 00 40 00       	add    eax,0x400000
c0012b13:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0012b16:	39 c3                	cmp    ebx,eax
c0012b18:	75 8e                	jne    c0012aa8 <VAS::scanForEviction()+0x18>
c0012b1a:	89 f1                	mov    ecx,esi
c0012b1c:	84 c9                	test   cl,cl
c0012b1e:	74 88                	je     c0012aa8 <VAS::scanForEviction()+0x18>
c0012b20:	89 f7                	mov    edi,esi
c0012b22:	eb 84                	jmp    c0012aa8 <VAS::scanForEviction()+0x18>
c0012b24:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0012b27:	e9 78 ff ff ff       	jmp    c0012aa4 <VAS::scanForEviction()+0x14>
c0012b2c:	f6 c2 01             	test   dl,0x1
c0012b2f:	74 a7                	je     c0012ad8 <VAS::scanForEviction()+0x48>
c0012b31:	f6 c2 40             	test   dl,0x40
c0012b34:	74 0b                	je     c0012b41 <VAS::scanForEviction()+0xb1>
c0012b36:	83 e2 bf             	and    edx,0xffffffbf
c0012b39:	89 10                	mov    DWORD PTR [eax],edx
c0012b3b:	89 f8                	mov    eax,edi
c0012b3d:	84 c0                	test   al,al
c0012b3f:	74 97                	je     c0012ad8 <VAS::scanForEviction()+0x48>
c0012b41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b45:	83 ec 08             	sub    esp,0x8
c0012b48:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0012b4b:	55                   	push   ebp
c0012b4c:	e8 bd fd ff ff       	call   c001290e <VAS::evict(unsigned long)>
c0012b51:	81 45 10 00 10 00 00 	add    DWORD PTR [ebp+0x10],0x1000
c0012b58:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012b5c:	83 c4 2c             	add    esp,0x2c
c0012b5f:	89 d0                	mov    eax,edx
c0012b61:	5b                   	pop    ebx
c0012b62:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b67:	5e                   	pop    esi
c0012b68:	5f                   	pop    edi
c0012b69:	5d                   	pop    ebp
c0012b6a:	c3                   	ret    
c0012b6b:	bf 01 00 00 00       	mov    edi,0x1
c0012b70:	eb 80                	jmp    c0012af2 <VAS::scanForEviction()+0x62>

c0012b72 <mapVASFirstTime>:
c0012b72:	55                   	push   ebp
c0012b73:	57                   	push   edi
c0012b74:	56                   	push   esi
c0012b75:	53                   	push   ebx
c0012b76:	83 ec 0c             	sub    esp,0xc
c0012b79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b7e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012b81:	4a                   	dec    edx
c0012b82:	0f 84 8e 00 00 00    	je     c0012c16 <mapVASFirstTime+0xa4>
c0012b88:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012b8b:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012b8e:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012b93:	c1 e5 15             	shl    ebp,0x15
c0012b96:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012b9b:	8b ba 32 19 00 00    	mov    edi,DWORD PTR [edx+0x1932]
c0012ba1:	29 eb                	sub    ebx,ebp
c0012ba3:	29 ee                	sub    esi,ebp
c0012ba5:	e8 33 d3 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012baa:	83 ec 0c             	sub    esp,0xc
c0012bad:	68 03 04 00 00       	push   0x403
c0012bb2:	6a 01                	push   0x1
c0012bb4:	53                   	push   ebx
c0012bb5:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012bbb:	50                   	push   eax
c0012bbc:	57                   	push   edi
c0012bbd:	e8 32 f9 ff ff       	call   c00124f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012bc2:	83 c4 20             	add    esp,0x20
c0012bc5:	39 f3                	cmp    ebx,esi
c0012bc7:	75 dc                	jne    c0012ba5 <mapVASFirstTime+0x33>
c0012bc9:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012bce:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012bd3:	29 ee                	sub    esi,ebp
c0012bd5:	29 e8                	sub    eax,ebp
c0012bd7:	89 c5                	mov    ebp,eax
c0012bd9:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012bdd:	19 db                	sbb    ebx,ebx
c0012bdf:	e8 f9 d2 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012be4:	83 e3 04             	and    ebx,0x4
c0012be7:	83 ec 0c             	sub    esp,0xc
c0012bea:	81 c3 03 04 00 00    	add    ebx,0x403
c0012bf0:	53                   	push   ebx
c0012bf1:	6a 01                	push   0x1
c0012bf3:	56                   	push   esi
c0012bf4:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012bfa:	50                   	push   eax
c0012bfb:	57                   	push   edi
c0012bfc:	e8 f3 f8 ff ff       	call   c00124f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c01:	83 c4 20             	add    esp,0x20
c0012c04:	39 f5                	cmp    ebp,esi
c0012c06:	75 d1                	jne    c0012bd9 <mapVASFirstTime+0x67>
c0012c08:	0f 20 d8             	mov    eax,cr3
c0012c0b:	0f 22 d8             	mov    cr3,eax
c0012c0e:	83 c4 0c             	add    esp,0xc
c0012c11:	5b                   	pop    ebx
c0012c12:	5e                   	pop    esi
c0012c13:	5f                   	pop    edi
c0012c14:	5d                   	pop    ebp
c0012c15:	c3                   	ret    
c0012c16:	83 ec 0c             	sub    esp,0xc
c0012c19:	68 78 a6 02 c0       	push   0xc002a678
c0012c1e:	e8 71 01 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0012c23:	83 c4 10             	add    esp,0x10
c0012c26:	83 c4 0c             	add    esp,0xc
c0012c29:	5b                   	pop    ebx
c0012c2a:	5e                   	pop    esi
c0012c2b:	5f                   	pop    edi
c0012c2c:	5d                   	pop    ebp
c0012c2d:	c3                   	ret    

c0012c2e <__cxa_atexit>:
c0012c2e:	31 c0                	xor    eax,eax
c0012c30:	c3                   	ret    

c0012c31 <__cxa_finalize>:
c0012c31:	c3                   	ret    

c0012c32 <__stack_chk_fail>:
c0012c32:	55                   	push   ebp
c0012c33:	89 e5                	mov    ebp,esp
c0012c35:	83 ec 14             	sub    esp,0x14
c0012c38:	68 91 a6 02 c0       	push   0xc002a691
c0012c3d:	e8 52 01 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0012c42:	58                   	pop    eax
c0012c43:	5a                   	pop    edx
c0012c44:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012c47:	68 e1 a6 02 c0       	push   0xc002a6e1
c0012c4c:	e8 43 01 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0012c51:	59                   	pop    ecx
c0012c52:	58                   	pop    eax
c0012c53:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c56:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012c59:	68 e1 a6 02 c0       	push   0xc002a6e1
c0012c5e:	e8 31 01 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0012c63:	5a                   	pop    edx
c0012c64:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c67:	59                   	pop    ecx
c0012c68:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c6a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012c6d:	68 e1 a6 02 c0       	push   0xc002a6e1
c0012c72:	e8 1d 01 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0012c77:	5a                   	pop    edx
c0012c78:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c7b:	59                   	pop    ecx
c0012c7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c80:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012c83:	68 e1 a6 02 c0       	push   0xc002a6e1
c0012c88:	e8 07 01 00 00       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0012c8d:	c7 04 24 e9 a6 02 c0 	mov    DWORD PTR [esp],0xc002a6e9
c0012c94:	e8 a4 77 00 00       	call   c001a43d <Krnl::panic(char const*)>
c0012c99:	83 c4 10             	add    esp,0x10
c0012c9c:	c9                   	leave  
c0012c9d:	c3                   	ret    

c0012c9e <__cxa_pure_virtual>:
c0012c9e:	83 ec 18             	sub    esp,0x18
c0012ca1:	68 01 a7 02 c0       	push   0xc002a701
c0012ca6:	e8 92 77 00 00       	call   c001a43d <Krnl::panic(char const*)>
c0012cab:	83 c4 1c             	add    esp,0x1c
c0012cae:	c3                   	ret    

c0012caf <operator new[](unsigned long)>:
c0012caf:	e9 8c cb ff ff       	jmp    c000f840 <malloc>

c0012cb4 <operator delete(void*, unsigned long)>:
c0012cb4:	e9 a7 cb ff ff       	jmp    c000f860 <rfree>

c0012cb9 <operator delete[](void*)>:
c0012cb9:	e9 a2 cb ff ff       	jmp    c000f860 <rfree>

c0012cbe <operator delete[](void*, unsigned long)>:
c0012cbe:	e9 9d cb ff ff       	jmp    c000f860 <rfree>

c0012cc3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012cc3:	57                   	push   edi
c0012cc4:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012cc9:	56                   	push   esi
c0012cca:	be 14 a7 02 c0       	mov    esi,0xc002a714
c0012ccf:	53                   	push   ebx
c0012cd0:	83 ec 40             	sub    esp,0x40
c0012cd3:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012cd7:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012cdb:	fc                   	cld    
c0012cdc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012cde:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012ce2:	83 f9 3e             	cmp    ecx,0x3e
c0012ce5:	7e 05                	jle    c0012cec <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012ce7:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012cec:	89 df                	mov    edi,ebx
c0012cee:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012cf2:	eb 02                	jmp    c0012cf6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012cf4:	89 c7                	mov    edi,eax
c0012cf6:	31 d2                	xor    edx,edx
c0012cf8:	46                   	inc    esi
c0012cf9:	89 f8                	mov    eax,edi
c0012cfb:	f7 f1                	div    ecx
c0012cfd:	39 cf                	cmp    edi,ecx
c0012cff:	73 f3                	jae    c0012cf4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012d01:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012d04:	eb 02                	jmp    c0012d08 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012d06:	89 c3                	mov    ebx,eax
c0012d08:	31 d2                	xor    edx,edx
c0012d0a:	4e                   	dec    esi
c0012d0b:	89 d8                	mov    eax,ebx
c0012d0d:	f7 f1                	div    ecx
c0012d0f:	39 cb                	cmp    ebx,ecx
c0012d11:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012d15:	88 16                	mov    BYTE PTR [esi],dl
c0012d17:	73 ed                	jae    c0012d06 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012d19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012d1d:	83 c4 40             	add    esp,0x40
c0012d20:	5b                   	pop    ebx
c0012d21:	5e                   	pop    esi
c0012d22:	5f                   	pop    edi
c0012d23:	c3                   	ret    

c0012d24 <Dbg::logc(char)>:
c0012d24:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012d28:	ba fd 03 00 00       	mov    edx,0x3fd
c0012d2d:	ec                   	in     al,dx
c0012d2e:	a8 20                	test   al,0x20
c0012d30:	74 fb                	je     c0012d2d <Dbg::logc(char)+0x9>
c0012d32:	ba f8 03 00 00       	mov    edx,0x3f8
c0012d37:	88 c8                	mov    al,cl
c0012d39:	ee                   	out    dx,al
c0012d3a:	c3                   	ret    

c0012d3b <Dbg::logs(char*)>:
c0012d3b:	53                   	push   ebx
c0012d3c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012d40:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012d43:	84 c0                	test   al,al
c0012d45:	74 0f                	je     c0012d56 <Dbg::logs(char*)+0x1b>
c0012d47:	50                   	push   eax
c0012d48:	43                   	inc    ebx
c0012d49:	e8 d6 ff ff ff       	call   c0012d24 <Dbg::logc(char)>
c0012d4e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012d51:	5a                   	pop    edx
c0012d52:	84 c0                	test   al,al
c0012d54:	75 f1                	jne    c0012d47 <Dbg::logs(char*)+0xc>
c0012d56:	5b                   	pop    ebx
c0012d57:	c3                   	ret    

c0012d58 <Dbg::logWriteInt(unsigned int)>:
c0012d58:	83 ec 10             	sub    esp,0x10
c0012d5b:	6a 0a                	push   0xa
c0012d5d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012d61:	50                   	push   eax
c0012d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d66:	e8 58 ff ff ff       	call   c0012cc3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012d6b:	50                   	push   eax
c0012d6c:	e8 ca ff ff ff       	call   c0012d3b <Dbg::logs(char*)>
c0012d71:	83 c4 20             	add    esp,0x20
c0012d74:	c3                   	ret    

c0012d75 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012d75:	83 ec 10             	sub    esp,0x10
c0012d78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d7c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012d80:	50                   	push   eax
c0012d81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d85:	e8 39 ff ff ff       	call   c0012cc3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012d8a:	50                   	push   eax
c0012d8b:	e8 ab ff ff ff       	call   c0012d3b <Dbg::logs(char*)>
c0012d90:	83 c4 20             	add    esp,0x20
c0012d93:	c3                   	ret    

c0012d94 <Dbg::kprintf(char const*, ...)>:
c0012d94:	55                   	push   ebp
c0012d95:	57                   	push   edi
c0012d96:	56                   	push   esi
c0012d97:	53                   	push   ebx
c0012d98:	83 ec 0c             	sub    esp,0xc
c0012d9b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012d9f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012da3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012da7:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012daa:	84 c0                	test   al,al
c0012dac:	74 4a                	je     c0012df8 <Dbg::kprintf(char const*, ...)+0x64>
c0012dae:	31 db                	xor    ebx,ebx
c0012db0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012db3:	3c 25                	cmp    al,0x25
c0012db5:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012db8:	0f 85 e4 00 00 00    	jne    c0012ea2 <Dbg::kprintf(char const*, ...)+0x10e>
c0012dbe:	83 c3 02             	add    ebx,0x2
c0012dc1:	8a 07                	mov    al,BYTE PTR [edi]
c0012dc3:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012dc6:	83 e8 25             	sub    eax,0x25
c0012dc9:	3c 53                	cmp    al,0x53
c0012dcb:	0f 87 ba 00 00 00    	ja     c0012e8b <Dbg::kprintf(char const*, ...)+0xf7>
c0012dd1:	0f b6 c0             	movzx  eax,al
c0012dd4:	ff 24 85 54 a7 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd58ac]
c0012ddb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ddf:	89 c8                	mov    eax,ecx
c0012de1:	83 c1 04             	add    ecx,0x4
c0012de4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012de8:	ff 30                	push   DWORD PTR [eax]
c0012dea:	e8 4c ff ff ff       	call   c0012d3b <Dbg::logs(char*)>
c0012def:	58                   	pop    eax
c0012df0:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012df4:	84 c0                	test   al,al
c0012df6:	75 b8                	jne    c0012db0 <Dbg::kprintf(char const*, ...)+0x1c>
c0012df8:	83 c4 0c             	add    esp,0xc
c0012dfb:	5b                   	pop    ebx
c0012dfc:	5e                   	pop    esi
c0012dfd:	5f                   	pop    edi
c0012dfe:	5d                   	pop    ebp
c0012dff:	c3                   	ret    
c0012e00:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e04:	89 d0                	mov    eax,edx
c0012e06:	83 c2 04             	add    edx,0x4
c0012e09:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e0d:	ff 30                	push   DWORD PTR [eax]
c0012e0f:	e8 44 ff ff ff       	call   c0012d58 <Dbg::logWriteInt(unsigned int)>
c0012e14:	58                   	pop    eax
c0012e15:	eb d9                	jmp    c0012df0 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e17:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e1b:	89 d0                	mov    eax,edx
c0012e1d:	83 c2 04             	add    edx,0x4
c0012e20:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012e23:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e27:	50                   	push   eax
c0012e28:	e8 f7 fe ff ff       	call   c0012d24 <Dbg::logc(char)>
c0012e2d:	58                   	pop    eax
c0012e2e:	eb c0                	jmp    c0012df0 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e30:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e34:	89 c8                	mov    eax,ecx
c0012e36:	83 c1 04             	add    ecx,0x4
c0012e39:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e3d:	ff 30                	push   DWORD PTR [eax]
c0012e3f:	e8 14 ff ff ff       	call   c0012d58 <Dbg::logWriteInt(unsigned int)>
c0012e44:	5f                   	pop    edi
c0012e45:	eb a9                	jmp    c0012df0 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e47:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e4b:	89 c8                	mov    eax,ecx
c0012e4d:	83 c1 04             	add    ecx,0x4
c0012e50:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e54:	6a 10                	push   0x10
c0012e56:	ff 30                	push   DWORD PTR [eax]
c0012e58:	e8 18 ff ff ff       	call   c0012d75 <Dbg::logWriteIntBase(unsigned int, int)>
c0012e5d:	59                   	pop    ecx
c0012e5e:	5f                   	pop    edi
c0012e5f:	eb 8f                	jmp    c0012df0 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e65:	89 d0                	mov    eax,edx
c0012e67:	83 c2 08             	add    edx,0x8
c0012e6a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e6e:	6a 10                	push   0x10
c0012e70:	ff 30                	push   DWORD PTR [eax]
c0012e72:	e8 fe fe ff ff       	call   c0012d75 <Dbg::logWriteIntBase(unsigned int, int)>
c0012e77:	58                   	pop    eax
c0012e78:	5a                   	pop    edx
c0012e79:	e9 72 ff ff ff       	jmp    c0012df0 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e7e:	6a 25                	push   0x25
c0012e80:	e8 9f fe ff ff       	call   c0012d24 <Dbg::logc(char)>
c0012e85:	58                   	pop    eax
c0012e86:	e9 65 ff ff ff       	jmp    c0012df0 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e8b:	6a 25                	push   0x25
c0012e8d:	e8 92 fe ff ff       	call   c0012d24 <Dbg::logc(char)>
c0012e92:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012e95:	50                   	push   eax
c0012e96:	e8 89 fe ff ff       	call   c0012d24 <Dbg::logc(char)>
c0012e9b:	5a                   	pop    edx
c0012e9c:	59                   	pop    ecx
c0012e9d:	e9 4e ff ff ff       	jmp    c0012df0 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ea2:	50                   	push   eax
c0012ea3:	89 eb                	mov    ebx,ebp
c0012ea5:	e8 7a fe ff ff       	call   c0012d24 <Dbg::logc(char)>
c0012eaa:	89 fd                	mov    ebp,edi
c0012eac:	58                   	pop    eax
c0012ead:	e9 3e ff ff ff       	jmp    c0012df0 <Dbg::kprintf(char const*, ...)+0x5c>

c0012eb2 <File::read(unsigned long long, void*, int*)>:
c0012eb2:	53                   	push   ebx
c0012eb3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012eb7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ebb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ec2:	3c 19                	cmp    al,0x19
c0012ec4:	77 35                	ja     c0012efb <File::read(unsigned long long, void*, int*)+0x49>
c0012ec6:	8b 04 85 40 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17c0]
c0012ecd:	85 c0                	test   eax,eax
c0012ecf:	74 2a                	je     c0012efb <File::read(unsigned long long, void*, int*)+0x49>
c0012ed1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012ed7:	85 c0                	test   eax,eax
c0012ed9:	74 20                	je     c0012efb <File::read(unsigned long long, void*, int*)+0x49>
c0012edb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012edf:	74 21                	je     c0012f02 <File::read(unsigned long long, void*, int*)+0x50>
c0012ee1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012ee3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012ee7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012eed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012ef1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012ef5:	5b                   	pop    ebx
c0012ef6:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012ef9:	ff e0                	jmp    eax
c0012efb:	b8 0b 00 00 00       	mov    eax,0xb
c0012f00:	eb 05                	jmp    c0012f07 <File::read(unsigned long long, void*, int*)+0x55>
c0012f02:	b8 05 00 00 00       	mov    eax,0x5
c0012f07:	5b                   	pop    ebx
c0012f08:	c3                   	ret    
c0012f09:	90                   	nop

c0012f0a <File::write(unsigned long long, void*, int*)>:
c0012f0a:	53                   	push   ebx
c0012f0b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f0f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f13:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f1a:	3c 19                	cmp    al,0x19
c0012f1c:	77 35                	ja     c0012f53 <File::write(unsigned long long, void*, int*)+0x49>
c0012f1e:	8b 04 85 40 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17c0]
c0012f25:	85 c0                	test   eax,eax
c0012f27:	74 2a                	je     c0012f53 <File::write(unsigned long long, void*, int*)+0x49>
c0012f29:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f2f:	85 c0                	test   eax,eax
c0012f31:	74 20                	je     c0012f53 <File::write(unsigned long long, void*, int*)+0x49>
c0012f33:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f37:	74 21                	je     c0012f5a <File::write(unsigned long long, void*, int*)+0x50>
c0012f39:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f3b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f3f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012f45:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f49:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f4d:	5b                   	pop    ebx
c0012f4e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012f51:	ff e0                	jmp    eax
c0012f53:	b8 0b 00 00 00       	mov    eax,0xb
c0012f58:	eb 05                	jmp    c0012f5f <File::write(unsigned long long, void*, int*)+0x55>
c0012f5a:	b8 05 00 00 00       	mov    eax,0x5
c0012f5f:	5b                   	pop    ebx
c0012f60:	c3                   	ret    
c0012f61:	90                   	nop

c0012f62 <Directory::read(unsigned long long, void*, int*)>:
c0012f62:	53                   	push   ebx
c0012f63:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f67:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f6b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f72:	3c 19                	cmp    al,0x19
c0012f74:	77 35                	ja     c0012fab <Directory::read(unsigned long long, void*, int*)+0x49>
c0012f76:	8b 04 85 40 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17c0]
c0012f7d:	85 c0                	test   eax,eax
c0012f7f:	74 2a                	je     c0012fab <Directory::read(unsigned long long, void*, int*)+0x49>
c0012f81:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f87:	85 c0                	test   eax,eax
c0012f89:	74 20                	je     c0012fab <Directory::read(unsigned long long, void*, int*)+0x49>
c0012f8b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f8f:	74 21                	je     c0012fb2 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012f91:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f93:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f97:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012f9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012fa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012fa5:	5b                   	pop    ebx
c0012fa6:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012fa9:	ff e0                	jmp    eax
c0012fab:	b8 0b 00 00 00       	mov    eax,0xb
c0012fb0:	eb 05                	jmp    c0012fb7 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012fb2:	b8 05 00 00 00       	mov    eax,0x5
c0012fb7:	5b                   	pop    ebx
c0012fb8:	c3                   	ret    
c0012fb9:	90                   	nop

c0012fba <Directory::write(unsigned long long, void*, int*)>:
c0012fba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012fbe:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012fc5:	b8 0b 00 00 00       	mov    eax,0xb
c0012fca:	80 fa 19             	cmp    dl,0x19
c0012fcd:	77 18                	ja     c0012fe7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012fcf:	8b 14 95 40 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17c0]
c0012fd6:	85 d2                	test   edx,edx
c0012fd8:	74 0d                	je     c0012fe7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012fda:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012fe1:	19 c0                	sbb    eax,eax
c0012fe3:	83 e0 0a             	and    eax,0xa
c0012fe6:	40                   	inc    eax
c0012fe7:	c3                   	ret    

c0012fe8 <File::isAtty()>:
c0012fe8:	31 c0                	xor    eax,eax
c0012fea:	c3                   	ret    
c0012feb:	90                   	nop

c0012fec <Directory::isAtty()>:
c0012fec:	31 c0                	xor    eax,eax
c0012fee:	c3                   	ret    
c0012fef:	90                   	nop

c0012ff0 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012ff0:	b8 0a 00 00 00       	mov    eax,0xa
c0012ff5:	c3                   	ret    

c0012ff6 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012ff6:	b8 0a 00 00 00       	mov    eax,0xa
c0012ffb:	c3                   	ret    

c0012ffc <File::~File()>:
c0012ffc:	83 ec 0c             	sub    esp,0xc
c0012fff:	ba 10 a9 02 c0       	mov    edx,0xc002a910
c0013004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013008:	89 10                	mov    DWORD PTR [eax],edx
c001300a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001300e:	83 ec 0c             	sub    esp,0xc
c0013011:	50                   	push   eax
c0013012:	e8 bf e8 ff ff       	call   c00118d6 <UnixFile::~UnixFile()>
c0013017:	83 c4 10             	add    esp,0x10
c001301a:	90                   	nop
c001301b:	83 c4 0c             	add    esp,0xc
c001301e:	c3                   	ret    
c001301f:	90                   	nop

c0013020 <File::~File()>:
c0013020:	83 ec 0c             	sub    esp,0xc
c0013023:	83 ec 0c             	sub    esp,0xc
c0013026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001302a:	e8 cd ff ff ff       	call   c0012ffc <File::~File()>
c001302f:	83 c4 10             	add    esp,0x10
c0013032:	83 ec 08             	sub    esp,0x8
c0013035:	68 14 01 00 00       	push   0x114
c001303a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001303e:	e8 71 fc ff ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0013043:	83 c4 10             	add    esp,0x10
c0013046:	83 c4 0c             	add    esp,0xc
c0013049:	c3                   	ret    

c001304a <Directory::~Directory()>:
c001304a:	83 ec 0c             	sub    esp,0xc
c001304d:	ba 2c a9 02 c0       	mov    edx,0xc002a92c
c0013052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013056:	89 10                	mov    DWORD PTR [eax],edx
c0013058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001305c:	83 ec 0c             	sub    esp,0xc
c001305f:	50                   	push   eax
c0013060:	e8 71 e8 ff ff       	call   c00118d6 <UnixFile::~UnixFile()>
c0013065:	83 c4 10             	add    esp,0x10
c0013068:	90                   	nop
c0013069:	83 c4 0c             	add    esp,0xc
c001306c:	c3                   	ret    
c001306d:	90                   	nop

c001306e <Directory::~Directory()>:
c001306e:	83 ec 0c             	sub    esp,0xc
c0013071:	83 ec 0c             	sub    esp,0xc
c0013074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013078:	e8 cd ff ff ff       	call   c001304a <Directory::~Directory()>
c001307d:	83 c4 10             	add    esp,0x10
c0013080:	83 ec 08             	sub    esp,0x8
c0013083:	68 14 01 00 00       	push   0x114
c0013088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001308c:	e8 23 fc ff ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0013091:	83 c4 10             	add    esp,0x10
c0013094:	83 c4 0c             	add    esp,0xc
c0013097:	c3                   	ret    

c0013098 <Filesystem::Filesystem()>:
c0013098:	ba ac a8 02 c0       	mov    edx,0xc002a8ac
c001309d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130a1:	89 10                	mov    DWORD PTR [eax],edx
c00130a3:	8b 15 b0 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3b0
c00130a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130ad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00130b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130b4:	a3 b0 e3 02 c0       	mov    ds:0xc002e3b0,eax
c00130b9:	90                   	nop
c00130ba:	c3                   	ret    
c00130bb:	90                   	nop

c00130bc <Filesystem::~Filesystem()>:
c00130bc:	ba ac a8 02 c0       	mov    edx,0xc002a8ac
c00130c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130c5:	89 10                	mov    DWORD PTR [eax],edx
c00130c7:	90                   	nop
c00130c8:	c3                   	ret    
c00130c9:	90                   	nop

c00130ca <Filesystem::~Filesystem()>:
c00130ca:	83 ec 0c             	sub    esp,0xc
c00130cd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00130d1:	e8 e6 ff ff ff       	call   c00130bc <Filesystem::~Filesystem()>
c00130d6:	83 c4 04             	add    esp,0x4
c00130d9:	83 ec 08             	sub    esp,0x8
c00130dc:	6a 08                	push   0x8
c00130de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130e2:	e8 cd fb ff ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c00130e7:	83 c4 10             	add    esp,0x10
c00130ea:	83 c4 0c             	add    esp,0xc
c00130ed:	c3                   	ret    

c00130ee <Fs::getcwd(Process*, char*, int)>:
c00130ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130f2:	31 c0                	xor    eax,eax
c00130f4:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00130f7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00130fb:	7d 15                	jge    c0013112 <Fs::getcwd(Process*, char*, int)+0x24>
c00130fd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013101:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0013108:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001310b:	84 c9                	test   cl,cl
c001310d:	74 06                	je     c0013115 <Fs::getcwd(Process*, char*, int)+0x27>
c001310f:	40                   	inc    eax
c0013110:	eb e2                	jmp    c00130f4 <Fs::getcwd(Process*, char*, int)+0x6>
c0013112:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013115:	31 c0                	xor    eax,eax
c0013117:	c3                   	ret    

c0013118 <Fs::initVFS()>:
c0013118:	83 ec 18             	sub    esp,0x18
c001311b:	6a 08                	push   0x8
c001311d:	e8 1e c7 ff ff       	call   c000f840 <malloc>
c0013122:	89 04 24             	mov    DWORD PTR [esp],eax
c0013125:	e8 ae dc 00 00       	call   c0020dd8 <FAT::FAT()>
c001312a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013131:	e8 0a c7 ff ff       	call   c000f840 <malloc>
c0013136:	89 04 24             	mov    DWORD PTR [esp],eax
c0013139:	e8 f2 ee 00 00       	call   c0022030 <ISO9660::ISO9660()>
c001313e:	83 c4 1c             	add    esp,0x1c
c0013141:	c3                   	ret    

c0013142 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013142:	55                   	push   ebp
c0013143:	57                   	push   edi
c0013144:	56                   	push   esi
c0013145:	53                   	push   ebx
c0013146:	81 ec 10 04 00 00    	sub    esp,0x410
c001314c:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013153:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c001315a:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013161:	68 00 04 00 00       	push   0x400
c0013166:	6a 00                	push   0x0
c0013168:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001316c:	56                   	push   esi
c001316d:	e8 06 d6 fe ff       	call   c0000778 <memset>
c0013172:	83 c4 10             	add    esp,0x10
c0013175:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0013179:	75 0b                	jne    c0013186 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c001317b:	50                   	push   eax
c001317c:	50                   	push   eax
c001317d:	57                   	push   edi
c001317e:	56                   	push   esi
c001317f:	e8 b0 d6 fe ff       	call   c0000834 <strcpy>
c0013184:	eb 41                	jmp    c00131c7 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013186:	8a 07                	mov    al,BYTE PTR [edi]
c0013188:	3c 5c                	cmp    al,0x5c
c001318a:	74 04                	je     c0013190 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c001318c:	3c 2f                	cmp    al,0x2f
c001318e:	75 18                	jne    c00131a8 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013190:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0013193:	3c 60                	cmp    al,0x60
c0013195:	7e 03                	jle    c001319a <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0013197:	83 e8 20             	sub    eax,0x20
c001319a:	88 04 24             	mov    BYTE PTR [esp],al
c001319d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00131a4:	50                   	push   eax
c00131a5:	50                   	push   eax
c00131a6:	eb 18                	jmp    c00131c0 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00131a8:	50                   	push   eax
c00131a9:	50                   	push   eax
c00131aa:	55                   	push   ebp
c00131ab:	56                   	push   esi
c00131ac:	e8 83 d6 fe ff       	call   c0000834 <strcpy>
c00131b1:	5a                   	pop    edx
c00131b2:	59                   	pop    ecx
c00131b3:	68 08 c0 02 c0       	push   0xc002c008
c00131b8:	56                   	push   esi
c00131b9:	e8 b6 d7 fe ff       	call   c0000974 <strcat>
c00131be:	5d                   	pop    ebp
c00131bf:	58                   	pop    eax
c00131c0:	57                   	push   edi
c00131c1:	56                   	push   esi
c00131c2:	e8 ad d7 fe ff       	call   c0000974 <strcat>
c00131c7:	83 c4 10             	add    esp,0x10
c00131ca:	8a 04 24             	mov    al,BYTE PTR [esp]
c00131cd:	3c 60                	cmp    al,0x60
c00131cf:	7e 03                	jle    c00131d4 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c00131d1:	83 e8 20             	sub    eax,0x20
c00131d4:	88 04 24             	mov    BYTE PTR [esp],al
c00131d7:	88 03                	mov    BYTE PTR [ebx],al
c00131d9:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00131e0:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00131e6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00131ea:	bf 03 00 00 00       	mov    edi,0x3
c00131ef:	b8 03 00 00 00       	mov    eax,0x3
c00131f4:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00131f7:	84 d2                	test   dl,dl
c00131f9:	0f 84 91 00 00 00    	je     c0013290 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00131ff:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013202:	80 fa 5c             	cmp    dl,0x5c
c0013205:	74 05                	je     c001320c <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0013207:	80 fa 2f             	cmp    dl,0x2f
c001320a:	75 12                	jne    c001321e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001320c:	89 c5                	mov    ebp,eax
c001320e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013213:	74 09                	je     c001321e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013215:	40                   	inc    eax
c0013216:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001321a:	89 cf                	mov    edi,ecx
c001321c:	eb d6                	jmp    c00131f4 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c001321e:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013223:	75 5b                	jne    c0013280 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013225:	80 fa 2e             	cmp    dl,0x2e
c0013228:	75 56                	jne    c0013280 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001322a:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c001322e:	74 19                	je     c0013249 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013230:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013235:	74 53                	je     c001328a <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013237:	89 f9                	mov    ecx,edi
c0013239:	41                   	inc    ecx
c001323a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001323d:	80 fa 2f             	cmp    dl,0x2f
c0013240:	74 f7                	je     c0013239 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013242:	80 fa 5c             	cmp    dl,0x5c
c0013245:	74 f2                	je     c0013239 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013247:	eb d1                	jmp    c001321a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013249:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001324e:	74 3a                	je     c001328a <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013250:	83 f8 03             	cmp    eax,0x3
c0013253:	74 c5                	je     c001321a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013255:	41                   	inc    ecx
c0013256:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013259:	80 fa 2f             	cmp    dl,0x2f
c001325c:	74 f7                	je     c0013255 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001325e:	80 fa 5c             	cmp    dl,0x5c
c0013261:	74 f2                	je     c0013255 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013263:	48                   	dec    eax
c0013264:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013268:	75 06                	jne    c0013270 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001326a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001326e:	eb f3                	jmp    c0013263 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013270:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013274:	74 07                	je     c001327d <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013276:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001327a:	48                   	dec    eax
c001327b:	eb f3                	jmp    c0013270 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001327d:	40                   	inc    eax
c001327e:	eb 9a                	jmp    c001321a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013280:	80 fa 2f             	cmp    dl,0x2f
c0013283:	74 95                	je     c001321a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013285:	80 fa 5c             	cmp    dl,0x5c
c0013288:	74 90                	je     c001321a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001328a:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c001328d:	40                   	inc    eax
c001328e:	eb 8a                	jmp    c001321a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013290:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013294:	83 ec 0c             	sub    esp,0xc
c0013297:	53                   	push   ebx
c0013298:	e8 f7 d4 fe ff       	call   c0000794 <strlen>
c001329d:	83 c4 10             	add    esp,0x10
c00132a0:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00132a5:	75 26                	jne    c00132cd <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00132a7:	83 ec 0c             	sub    esp,0xc
c00132aa:	53                   	push   ebx
c00132ab:	e8 e4 d4 fe ff       	call   c0000794 <strlen>
c00132b0:	83 c4 10             	add    esp,0x10
c00132b3:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00132b8:	74 26                	je     c00132e0 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00132ba:	83 ec 0c             	sub    esp,0xc
c00132bd:	53                   	push   ebx
c00132be:	e8 d1 d4 fe ff       	call   c0000794 <strlen>
c00132c3:	83 c4 10             	add    esp,0x10
c00132c6:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00132cb:	eb c7                	jmp    c0013294 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c00132cd:	83 ec 0c             	sub    esp,0xc
c00132d0:	53                   	push   ebx
c00132d1:	e8 be d4 fe ff       	call   c0000794 <strlen>
c00132d6:	83 c4 10             	add    esp,0x10
c00132d9:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00132de:	74 c7                	je     c00132a7 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00132e0:	81 c4 0c 04 00 00    	add    esp,0x40c
c00132e6:	5b                   	pop    ebx
c00132e7:	5e                   	pop    esi
c00132e8:	5f                   	pop    edi
c00132e9:	5d                   	pop    ebp
c00132ea:	c3                   	ret    
c00132eb:	90                   	nop

c00132ec <File::File(char const*, Process*)>:
c00132ec:	83 ec 0c             	sub    esp,0xc
c00132ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132f3:	83 ec 08             	sub    esp,0x8
c00132f6:	6a 00                	push   0x0
c00132f8:	50                   	push   eax
c00132f9:	e8 f6 e3 ff ff       	call   c00116f4 <UnixFile::UnixFile(int)>
c00132fe:	83 c4 10             	add    esp,0x10
c0013301:	ba 10 a9 02 c0       	mov    edx,0xc002a910
c0013306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001330a:	89 10                	mov    DWORD PTR [eax],edx
c001330c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013310:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001331a:	83 c0 0d             	add    eax,0xd
c001331d:	83 ec 04             	sub    esp,0x4
c0013320:	52                   	push   edx
c0013321:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013325:	50                   	push   eax
c0013326:	e8 17 fe ff ff       	call   c0013142 <Fs::standardiseFiles(char*, char const*, char const*)>
c001332b:	83 c4 10             	add    esp,0x10
c001332e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013332:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013335:	8d 50 bf             	lea    edx,[eax-0x41]
c0013338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001333c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013346:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001334a:	90                   	nop
c001334b:	83 c4 0c             	add    esp,0xc
c001334e:	c3                   	ret    
c001334f:	90                   	nop

c0013350 <File::open(FileOpenMode)>:
c0013350:	53                   	push   ebx
c0013351:	b8 0b 00 00 00       	mov    eax,0xb
c0013356:	83 ec 08             	sub    esp,0x8
c0013359:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001335d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013364:	80 fa 19             	cmp    dl,0x19
c0013367:	77 40                	ja     c00133a9 <File::open(FileOpenMode)+0x59>
c0013369:	8b 14 95 40 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17c0]
c0013370:	85 d2                	test   edx,edx
c0013372:	74 35                	je     c00133a9 <File::open(FileOpenMode)+0x59>
c0013374:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001337a:	85 d2                	test   edx,edx
c001337c:	74 2b                	je     c00133a9 <File::open(FileOpenMode)+0x59>
c001337e:	b8 06 00 00 00       	mov    eax,0x6
c0013383:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013387:	75 20                	jne    c00133a9 <File::open(FileOpenMode)+0x59>
c0013389:	8b 02                	mov    eax,DWORD PTR [edx]
c001338b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013391:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013395:	51                   	push   ecx
c0013396:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013399:	51                   	push   ecx
c001339a:	52                   	push   edx
c001339b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001339e:	83 c4 10             	add    esp,0x10
c00133a1:	85 c0                	test   eax,eax
c00133a3:	75 04                	jne    c00133a9 <File::open(FileOpenMode)+0x59>
c00133a5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00133a9:	83 c4 08             	add    esp,0x8
c00133ac:	5b                   	pop    ebx
c00133ad:	c3                   	ret    

c00133ae <File::close()>:
c00133ae:	53                   	push   ebx
c00133af:	b8 0b 00 00 00       	mov    eax,0xb
c00133b4:	83 ec 08             	sub    esp,0x8
c00133b7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133bb:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133c2:	80 fa 19             	cmp    dl,0x19
c00133c5:	77 41                	ja     c0013408 <File::close()+0x5a>
c00133c7:	8b 1c 95 40 e8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd17c0]
c00133ce:	85 db                	test   ebx,ebx
c00133d0:	74 36                	je     c0013408 <File::close()+0x5a>
c00133d2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00133d9:	74 2d                	je     c0013408 <File::close()+0x5a>
c00133db:	b8 05 00 00 00       	mov    eax,0x5
c00133e0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00133e4:	74 22                	je     c0013408 <File::close()+0x5a>
c00133e6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00133ea:	8b 04 95 40 e8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd17c0]
c00133f1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00133f7:	53                   	push   ebx
c00133f8:	53                   	push   ebx
c00133f9:	8b 10                	mov    edx,DWORD PTR [eax]
c00133fb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013401:	50                   	push   eax
c0013402:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013405:	83 c4 10             	add    esp,0x10
c0013408:	83 c4 08             	add    esp,0x8
c001340b:	5b                   	pop    ebx
c001340c:	c3                   	ret    
c001340d:	90                   	nop

c001340e <File::seek(unsigned long long)>:
c001340e:	56                   	push   esi
c001340f:	53                   	push   ebx
c0013410:	b8 0b 00 00 00       	mov    eax,0xb
c0013415:	51                   	push   ecx
c0013416:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001341a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001341e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013425:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013429:	80 fa 19             	cmp    dl,0x19
c001342c:	77 31                	ja     c001345f <File::seek(unsigned long long)+0x51>
c001342e:	8b 14 95 40 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17c0]
c0013435:	85 d2                	test   edx,edx
c0013437:	74 26                	je     c001345f <File::seek(unsigned long long)+0x51>
c0013439:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001343f:	85 d2                	test   edx,edx
c0013441:	74 1c                	je     c001345f <File::seek(unsigned long long)+0x51>
c0013443:	b8 05 00 00 00       	mov    eax,0x5
c0013448:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001344c:	74 11                	je     c001345f <File::seek(unsigned long long)+0x51>
c001344e:	8b 02                	mov    eax,DWORD PTR [edx]
c0013450:	53                   	push   ebx
c0013451:	51                   	push   ecx
c0013452:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013458:	52                   	push   edx
c0013459:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001345c:	83 c4 10             	add    esp,0x10
c001345f:	5a                   	pop    edx
c0013460:	5b                   	pop    ebx
c0013461:	5e                   	pop    esi
c0013462:	c3                   	ret    
c0013463:	90                   	nop

c0013464 <File::tell(unsigned long long*)>:
c0013464:	83 ec 0c             	sub    esp,0xc
c0013467:	b8 0b 00 00 00       	mov    eax,0xb
c001346c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013470:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013477:	80 fa 19             	cmp    dl,0x19
c001347a:	77 34                	ja     c00134b0 <File::tell(unsigned long long*)+0x4c>
c001347c:	8b 14 95 40 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17c0]
c0013483:	85 d2                	test   edx,edx
c0013485:	74 29                	je     c00134b0 <File::tell(unsigned long long*)+0x4c>
c0013487:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001348d:	85 d2                	test   edx,edx
c001348f:	74 1f                	je     c00134b0 <File::tell(unsigned long long*)+0x4c>
c0013491:	b8 05 00 00 00       	mov    eax,0x5
c0013496:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001349a:	74 14                	je     c00134b0 <File::tell(unsigned long long*)+0x4c>
c001349c:	50                   	push   eax
c001349d:	8b 02                	mov    eax,DWORD PTR [edx]
c001349f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134a3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00134a9:	52                   	push   edx
c00134aa:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00134ad:	83 c4 10             	add    esp,0x10
c00134b0:	83 c4 0c             	add    esp,0xc
c00134b3:	c3                   	ret    

c00134b4 <File::rewind()>:
c00134b4:	83 ec 10             	sub    esp,0x10
c00134b7:	6a 00                	push   0x0
c00134b9:	6a 00                	push   0x0
c00134bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134bf:	e8 4a ff ff ff       	call   c001340e <File::seek(unsigned long long)>
c00134c4:	83 c4 1c             	add    esp,0x1c
c00134c7:	c3                   	ret    

c00134c8 <File::unlink()>:
c00134c8:	83 ec 0c             	sub    esp,0xc
c00134cb:	b8 0b 00 00 00       	mov    eax,0xb
c00134d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134d4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134db:	80 f9 19             	cmp    cl,0x19
c00134de:	77 2f                	ja     c001350f <File::unlink()+0x47>
c00134e0:	8b 0c 8d 40 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17c0]
c00134e7:	85 c9                	test   ecx,ecx
c00134e9:	74 24                	je     c001350f <File::unlink()+0x47>
c00134eb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134f1:	85 c9                	test   ecx,ecx
c00134f3:	74 1a                	je     c001350f <File::unlink()+0x47>
c00134f5:	b8 06 00 00 00       	mov    eax,0x6
c00134fa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00134fe:	75 0f                	jne    c001350f <File::unlink()+0x47>
c0013500:	83 c2 0d             	add    edx,0xd
c0013503:	50                   	push   eax
c0013504:	50                   	push   eax
c0013505:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013507:	52                   	push   edx
c0013508:	51                   	push   ecx
c0013509:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001350c:	83 c4 10             	add    esp,0x10
c001350f:	83 c4 0c             	add    esp,0xc
c0013512:	c3                   	ret    
c0013513:	90                   	nop

c0013514 <File::rename(char const*)>:
c0013514:	83 ec 0c             	sub    esp,0xc
c0013517:	b8 0b 00 00 00       	mov    eax,0xb
c001351c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013520:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013527:	80 f9 19             	cmp    cl,0x19
c001352a:	77 32                	ja     c001355e <File::rename(char const*)+0x4a>
c001352c:	8b 0c 8d 40 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17c0]
c0013533:	85 c9                	test   ecx,ecx
c0013535:	74 27                	je     c001355e <File::rename(char const*)+0x4a>
c0013537:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001353d:	85 c9                	test   ecx,ecx
c001353f:	74 1d                	je     c001355e <File::rename(char const*)+0x4a>
c0013541:	b8 06 00 00 00       	mov    eax,0x6
c0013546:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001354a:	75 12                	jne    c001355e <File::rename(char const*)+0x4a>
c001354c:	83 c2 0d             	add    edx,0xd
c001354f:	50                   	push   eax
c0013550:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013552:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013556:	52                   	push   edx
c0013557:	51                   	push   ecx
c0013558:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001355b:	83 c4 10             	add    esp,0x10
c001355e:	83 c4 0c             	add    esp,0xc
c0013561:	c3                   	ret    

c0013562 <File::chfatattr(unsigned char, unsigned char)>:
c0013562:	57                   	push   edi
c0013563:	b8 0b 00 00 00       	mov    eax,0xb
c0013568:	56                   	push   esi
c0013569:	53                   	push   ebx
c001356a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001356e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013572:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013579:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001357d:	80 f9 19             	cmp    cl,0x19
c0013580:	77 37                	ja     c00135b9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013582:	8b 0c 8d 40 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17c0]
c0013589:	85 c9                	test   ecx,ecx
c001358b:	74 2c                	je     c00135b9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001358d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013593:	85 c9                	test   ecx,ecx
c0013595:	74 22                	je     c00135b9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013597:	b8 06 00 00 00       	mov    eax,0x6
c001359c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135a0:	75 17                	jne    c00135b9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135a2:	8b 39                	mov    edi,DWORD PTR [ecx]
c00135a4:	89 f0                	mov    eax,esi
c00135a6:	83 c2 0d             	add    edx,0xd
c00135a9:	0f b6 f0             	movzx  esi,al
c00135ac:	0f b6 db             	movzx  ebx,bl
c00135af:	56                   	push   esi
c00135b0:	53                   	push   ebx
c00135b1:	52                   	push   edx
c00135b2:	51                   	push   ecx
c00135b3:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00135b6:	83 c4 10             	add    esp,0x10
c00135b9:	5b                   	pop    ebx
c00135ba:	5e                   	pop    esi
c00135bb:	5f                   	pop    edi
c00135bc:	c3                   	ret    
c00135bd:	90                   	nop

c00135be <File::exists()>:
c00135be:	83 ec 0c             	sub    esp,0xc
c00135c1:	31 c0                	xor    eax,eax
c00135c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135c7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135ce:	80 f9 19             	cmp    cl,0x19
c00135d1:	77 24                	ja     c00135f7 <File::exists()+0x39>
c00135d3:	8b 0c 8d 40 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17c0]
c00135da:	85 c9                	test   ecx,ecx
c00135dc:	74 19                	je     c00135f7 <File::exists()+0x39>
c00135de:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135e4:	85 c9                	test   ecx,ecx
c00135e6:	74 0f                	je     c00135f7 <File::exists()+0x39>
c00135e8:	83 c2 0d             	add    edx,0xd
c00135eb:	50                   	push   eax
c00135ec:	50                   	push   eax
c00135ed:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135ef:	52                   	push   edx
c00135f0:	51                   	push   ecx
c00135f1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00135f4:	83 c4 10             	add    esp,0x10
c00135f7:	83 c4 0c             	add    esp,0xc
c00135fa:	c3                   	ret    
c00135fb:	90                   	nop

c00135fc <File::stat(unsigned long long*, bool*)>:
c00135fc:	56                   	push   esi
c00135fd:	53                   	push   ebx
c00135fe:	50                   	push   eax
c00135ff:	b8 0b 00 00 00       	mov    eax,0xb
c0013604:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013608:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001360c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013613:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013617:	80 f9 19             	cmp    cl,0x19
c001361a:	77 3d                	ja     c0013659 <File::stat(unsigned long long*, bool*)+0x5d>
c001361c:	8b 0c 8d 40 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17c0]
c0013623:	85 c9                	test   ecx,ecx
c0013625:	74 32                	je     c0013659 <File::stat(unsigned long long*, bool*)+0x5d>
c0013627:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001362d:	85 c9                	test   ecx,ecx
c001362f:	74 28                	je     c0013659 <File::stat(unsigned long long*, bool*)+0x5d>
c0013631:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013633:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013637:	74 13                	je     c001364c <File::stat(unsigned long long*, bool*)+0x50>
c0013639:	83 ec 04             	sub    esp,0x4
c001363c:	56                   	push   esi
c001363d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013643:	51                   	push   ecx
c0013644:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013647:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001364a:	eb 0a                	jmp    c0013656 <File::stat(unsigned long long*, bool*)+0x5a>
c001364c:	53                   	push   ebx
c001364d:	83 c2 0d             	add    edx,0xd
c0013650:	56                   	push   esi
c0013651:	52                   	push   edx
c0013652:	51                   	push   ecx
c0013653:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013656:	83 c4 10             	add    esp,0x10
c0013659:	5a                   	pop    edx
c001365a:	5b                   	pop    ebx
c001365b:	5e                   	pop    esi
c001365c:	c3                   	ret    

c001365d <Fs::setcwd(Process*, char*)>:
c001365d:	55                   	push   ebp
c001365e:	57                   	push   edi
c001365f:	56                   	push   esi
c0013660:	53                   	push   ebx
c0013661:	81 ec 20 02 00 00    	sub    esp,0x220
c0013667:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c001366e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013674:	57                   	push   edi
c0013675:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001367c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013680:	56                   	push   esi
c0013681:	e8 bc fa ff ff       	call   c0013142 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013686:	89 34 24             	mov    DWORD PTR [esp],esi
c0013689:	e8 06 d1 fe ff       	call   c0000794 <strlen>
c001368e:	83 c4 10             	add    esp,0x10
c0013691:	83 f8 02             	cmp    eax,0x2
c0013694:	77 17                	ja     c00136ad <Fs::setcwd(Process*, char*)+0x50>
c0013696:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c001369b:	83 e8 41             	sub    eax,0x41
c001369e:	83 f8 19             	cmp    eax,0x19
c00136a1:	76 24                	jbe    c00136c7 <Fs::setcwd(Process*, char*)+0x6a>
c00136a3:	b8 03 00 00 00       	mov    eax,0x3
c00136a8:	e9 e0 00 00 00       	jmp    c001378d <Fs::setcwd(Process*, char*)+0x130>
c00136ad:	83 ec 0c             	sub    esp,0xc
c00136b0:	56                   	push   esi
c00136b1:	e8 de d0 fe ff       	call   c0000794 <strlen>
c00136b6:	83 c4 10             	add    esp,0x10
c00136b9:	83 f8 03             	cmp    eax,0x3
c00136bc:	75 34                	jne    c00136f2 <Fs::setcwd(Process*, char*)+0x95>
c00136be:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00136c3:	75 2d                	jne    c00136f2 <Fs::setcwd(Process*, char*)+0x95>
c00136c5:	eb cf                	jmp    c0013696 <Fs::setcwd(Process*, char*)+0x39>
c00136c7:	8b 14 85 40 e8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd17c0]
c00136ce:	b8 05 00 00 00       	mov    eax,0x5
c00136d3:	85 d2                	test   edx,edx
c00136d5:	0f 84 b2 00 00 00    	je     c001378d <Fs::setcwd(Process*, char*)+0x130>
c00136db:	b8 06 00 00 00       	mov    eax,0x6
c00136e0:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00136e7:	0f 85 92 00 00 00    	jne    c001377f <Fs::setcwd(Process*, char*)+0x122>
c00136ed:	e9 9b 00 00 00       	jmp    c001378d <Fs::setcwd(Process*, char*)+0x130>
c00136f2:	83 ec 0c             	sub    esp,0xc
c00136f5:	68 14 01 00 00       	push   0x114
c00136fa:	e8 41 c1 ff ff       	call   c000f840 <malloc>
c00136ff:	83 c4 0c             	add    esp,0xc
c0013702:	89 c3                	mov    ebx,eax
c0013704:	55                   	push   ebp
c0013705:	56                   	push   esi
c0013706:	50                   	push   eax
c0013707:	e8 e0 fb ff ff       	call   c00132ec <File::File(char const*, Process*)>
c001370c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013711:	83 c4 0c             	add    esp,0xc
c0013714:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013718:	50                   	push   eax
c0013719:	8d 44 24 10          	lea    eax,[esp+0x10]
c001371d:	50                   	push   eax
c001371e:	53                   	push   ebx
c001371f:	e8 d8 fe ff ff       	call   c00135fc <File::stat(unsigned long long*, bool*)>
c0013724:	83 c4 10             	add    esp,0x10
c0013727:	83 f8 02             	cmp    eax,0x2
c001372a:	74 04                	je     c0013730 <Fs::setcwd(Process*, char*)+0xd3>
c001372c:	85 c0                	test   eax,eax
c001372e:	74 1c                	je     c001374c <Fs::setcwd(Process*, char*)+0xef>
c0013730:	b8 01 00 00 00       	mov    eax,0x1
c0013735:	85 db                	test   ebx,ebx
c0013737:	74 54                	je     c001378d <Fs::setcwd(Process*, char*)+0x130>
c0013739:	83 ec 0c             	sub    esp,0xc
c001373c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001373e:	53                   	push   ebx
c001373f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013742:	83 c4 10             	add    esp,0x10
c0013745:	b8 01 00 00 00       	mov    eax,0x1
c001374a:	eb 41                	jmp    c001378d <Fs::setcwd(Process*, char*)+0x130>
c001374c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013751:	75 1c                	jne    c001376f <Fs::setcwd(Process*, char*)+0x112>
c0013753:	b8 02 00 00 00       	mov    eax,0x2
c0013758:	85 db                	test   ebx,ebx
c001375a:	74 31                	je     c001378d <Fs::setcwd(Process*, char*)+0x130>
c001375c:	83 ec 0c             	sub    esp,0xc
c001375f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013761:	53                   	push   ebx
c0013762:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013765:	83 c4 10             	add    esp,0x10
c0013768:	b8 02 00 00 00       	mov    eax,0x2
c001376d:	eb 1e                	jmp    c001378d <Fs::setcwd(Process*, char*)+0x130>
c001376f:	85 db                	test   ebx,ebx
c0013771:	74 0c                	je     c001377f <Fs::setcwd(Process*, char*)+0x122>
c0013773:	83 ec 0c             	sub    esp,0xc
c0013776:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013778:	53                   	push   ebx
c0013779:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001377c:	83 c4 10             	add    esp,0x10
c001377f:	50                   	push   eax
c0013780:	50                   	push   eax
c0013781:	56                   	push   esi
c0013782:	57                   	push   edi
c0013783:	e8 ac d0 fe ff       	call   c0000834 <strcpy>
c0013788:	83 c4 10             	add    esp,0x10
c001378b:	31 c0                	xor    eax,eax
c001378d:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013793:	5b                   	pop    ebx
c0013794:	5e                   	pop    esi
c0013795:	5f                   	pop    edi
c0013796:	5d                   	pop    ebp
c0013797:	c3                   	ret    

c0013798 <Directory::Directory(char const*, Process*)>:
c0013798:	83 ec 0c             	sub    esp,0xc
c001379b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001379f:	83 ec 08             	sub    esp,0x8
c00137a2:	6a 00                	push   0x0
c00137a4:	50                   	push   eax
c00137a5:	e8 4a df ff ff       	call   c00116f4 <UnixFile::UnixFile(int)>
c00137aa:	83 c4 10             	add    esp,0x10
c00137ad:	ba 2c a9 02 c0       	mov    edx,0xc002a92c
c00137b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137b6:	89 10                	mov    DWORD PTR [eax],edx
c00137b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137bc:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00137c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137c6:	83 c0 0d             	add    eax,0xd
c00137c9:	83 ec 04             	sub    esp,0x4
c00137cc:	52                   	push   edx
c00137cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137d1:	50                   	push   eax
c00137d2:	e8 6b f9 ff ff       	call   c0013142 <Fs::standardiseFiles(char*, char const*, char const*)>
c00137d7:	83 c4 10             	add    esp,0x10
c00137da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137de:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00137e1:	8d 50 bf             	lea    edx,[eax-0x41]
c00137e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137e8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00137ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00137f6:	90                   	nop
c00137f7:	83 c4 0c             	add    esp,0xc
c00137fa:	c3                   	ret    
c00137fb:	90                   	nop

c00137fc <Directory::open()>:
c00137fc:	53                   	push   ebx
c00137fd:	b8 0b 00 00 00       	mov    eax,0xb
c0013802:	83 ec 08             	sub    esp,0x8
c0013805:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013809:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013810:	80 fa 19             	cmp    dl,0x19
c0013813:	77 3d                	ja     c0013852 <Directory::open()+0x56>
c0013815:	8b 14 95 40 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17c0]
c001381c:	85 d2                	test   edx,edx
c001381e:	74 32                	je     c0013852 <Directory::open()+0x56>
c0013820:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013826:	85 d2                	test   edx,edx
c0013828:	74 28                	je     c0013852 <Directory::open()+0x56>
c001382a:	b8 06 00 00 00       	mov    eax,0x6
c001382f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013833:	75 1d                	jne    c0013852 <Directory::open()+0x56>
c0013835:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001383b:	50                   	push   eax
c001383c:	8b 02                	mov    eax,DWORD PTR [edx]
c001383e:	51                   	push   ecx
c001383f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013842:	51                   	push   ecx
c0013843:	52                   	push   edx
c0013844:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013847:	83 c4 10             	add    esp,0x10
c001384a:	85 c0                	test   eax,eax
c001384c:	75 04                	jne    c0013852 <Directory::open()+0x56>
c001384e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013852:	83 c4 08             	add    esp,0x8
c0013855:	5b                   	pop    ebx
c0013856:	c3                   	ret    
c0013857:	90                   	nop

c0013858 <Directory::close()>:
c0013858:	53                   	push   ebx
c0013859:	b8 0b 00 00 00       	mov    eax,0xb
c001385e:	83 ec 08             	sub    esp,0x8
c0013861:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013865:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001386c:	80 fa 19             	cmp    dl,0x19
c001386f:	77 41                	ja     c00138b2 <Directory::close()+0x5a>
c0013871:	8b 1c 95 40 e8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd17c0]
c0013878:	85 db                	test   ebx,ebx
c001387a:	74 36                	je     c00138b2 <Directory::close()+0x5a>
c001387c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013883:	74 2d                	je     c00138b2 <Directory::close()+0x5a>
c0013885:	b8 05 00 00 00       	mov    eax,0x5
c001388a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001388e:	74 22                	je     c00138b2 <Directory::close()+0x5a>
c0013890:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013894:	8b 04 95 40 e8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd17c0]
c001389b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00138a1:	53                   	push   ebx
c00138a2:	53                   	push   ebx
c00138a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00138a5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00138ab:	50                   	push   eax
c00138ac:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00138af:	83 c4 10             	add    esp,0x10
c00138b2:	83 c4 08             	add    esp,0x8
c00138b5:	5b                   	pop    ebx
c00138b6:	c3                   	ret    
c00138b7:	90                   	nop

c00138b8 <Directory::unlink()>:
c00138b8:	83 ec 0c             	sub    esp,0xc
c00138bb:	b8 0b 00 00 00       	mov    eax,0xb
c00138c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00138cb:	80 f9 19             	cmp    cl,0x19
c00138ce:	77 2f                	ja     c00138ff <Directory::unlink()+0x47>
c00138d0:	8b 0c 8d 40 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17c0]
c00138d7:	85 c9                	test   ecx,ecx
c00138d9:	74 24                	je     c00138ff <Directory::unlink()+0x47>
c00138db:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00138e1:	85 c9                	test   ecx,ecx
c00138e3:	74 1a                	je     c00138ff <Directory::unlink()+0x47>
c00138e5:	b8 06 00 00 00       	mov    eax,0x6
c00138ea:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00138ee:	75 0f                	jne    c00138ff <Directory::unlink()+0x47>
c00138f0:	83 c2 0d             	add    edx,0xd
c00138f3:	50                   	push   eax
c00138f4:	50                   	push   eax
c00138f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00138f7:	52                   	push   edx
c00138f8:	51                   	push   ecx
c00138f9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00138fc:	83 c4 10             	add    esp,0x10
c00138ff:	83 c4 0c             	add    esp,0xc
c0013902:	c3                   	ret    
c0013903:	90                   	nop

c0013904 <Directory::rename(char const*)>:
c0013904:	83 ec 0c             	sub    esp,0xc
c0013907:	b8 0b 00 00 00       	mov    eax,0xb
c001390c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013910:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013917:	80 f9 19             	cmp    cl,0x19
c001391a:	77 32                	ja     c001394e <Directory::rename(char const*)+0x4a>
c001391c:	8b 0c 8d 40 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17c0]
c0013923:	85 c9                	test   ecx,ecx
c0013925:	74 27                	je     c001394e <Directory::rename(char const*)+0x4a>
c0013927:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001392d:	85 c9                	test   ecx,ecx
c001392f:	74 1d                	je     c001394e <Directory::rename(char const*)+0x4a>
c0013931:	b8 06 00 00 00       	mov    eax,0x6
c0013936:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001393a:	75 12                	jne    c001394e <Directory::rename(char const*)+0x4a>
c001393c:	83 c2 0d             	add    edx,0xd
c001393f:	50                   	push   eax
c0013940:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013942:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013946:	52                   	push   edx
c0013947:	51                   	push   ecx
c0013948:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001394b:	83 c4 10             	add    esp,0x10
c001394e:	83 c4 0c             	add    esp,0xc
c0013951:	c3                   	ret    

c0013952 <Directory::exists()>:
c0013952:	83 ec 0c             	sub    esp,0xc
c0013955:	31 c0                	xor    eax,eax
c0013957:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001395b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013962:	80 f9 19             	cmp    cl,0x19
c0013965:	77 24                	ja     c001398b <Directory::exists()+0x39>
c0013967:	8b 0c 8d 40 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17c0]
c001396e:	85 c9                	test   ecx,ecx
c0013970:	74 19                	je     c001398b <Directory::exists()+0x39>
c0013972:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013978:	85 c9                	test   ecx,ecx
c001397a:	74 0f                	je     c001398b <Directory::exists()+0x39>
c001397c:	83 c2 0d             	add    edx,0xd
c001397f:	50                   	push   eax
c0013980:	50                   	push   eax
c0013981:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013983:	52                   	push   edx
c0013984:	51                   	push   ecx
c0013985:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013988:	83 c4 10             	add    esp,0x10
c001398b:	83 c4 0c             	add    esp,0xc
c001398e:	c3                   	ret    
c001398f:	90                   	nop

c0013990 <Directory::read(dirent*)>:
c0013990:	83 ec 1c             	sub    esp,0x1c
c0013993:	b8 0b 00 00 00       	mov    eax,0xb
c0013998:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001399c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00139a3:	80 fa 19             	cmp    dl,0x19
c00139a6:	77 30                	ja     c00139d8 <Directory::read(dirent*)+0x48>
c00139a8:	8b 14 95 40 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17c0]
c00139af:	85 d2                	test   edx,edx
c00139b1:	74 25                	je     c00139d8 <Directory::read(dirent*)+0x48>
c00139b3:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00139ba:	74 1c                	je     c00139d8 <Directory::read(dirent*)+0x48>
c00139bc:	83 ec 0c             	sub    esp,0xc
c00139bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139c1:	8d 54 24 18          	lea    edx,[esp+0x18]
c00139c5:	52                   	push   edx
c00139c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00139ca:	6a 00                	push   0x0
c00139cc:	68 10 01 00 00       	push   0x110
c00139d1:	51                   	push   ecx
c00139d2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00139d5:	83 c4 20             	add    esp,0x20
c00139d8:	83 c4 1c             	add    esp,0x1c
c00139db:	c3                   	ret    

c00139dc <Directory::create()>:
c00139dc:	83 ec 0c             	sub    esp,0xc
c00139df:	b8 0b 00 00 00       	mov    eax,0xb
c00139e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139e8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139ef:	80 f9 19             	cmp    cl,0x19
c00139f2:	77 2f                	ja     c0013a23 <Directory::create()+0x47>
c00139f4:	8b 0c 8d 40 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17c0]
c00139fb:	85 c9                	test   ecx,ecx
c00139fd:	74 24                	je     c0013a23 <Directory::create()+0x47>
c00139ff:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a05:	85 c9                	test   ecx,ecx
c0013a07:	74 1a                	je     c0013a23 <Directory::create()+0x47>
c0013a09:	b8 06 00 00 00       	mov    eax,0x6
c0013a0e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a12:	75 0f                	jne    c0013a23 <Directory::create()+0x47>
c0013a14:	83 c2 0d             	add    edx,0xd
c0013a17:	50                   	push   eax
c0013a18:	50                   	push   eax
c0013a19:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a1b:	52                   	push   edx
c0013a1c:	51                   	push   ecx
c0013a1d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013a20:	83 c4 10             	add    esp,0x10
c0013a23:	83 c4 0c             	add    esp,0xc
c0013a26:	c3                   	ret    
c0013a27:	90                   	nop

c0013a28 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013a28:	b8 0a 00 00 00       	mov    eax,0xa
c0013a2d:	c3                   	ret    

c0013a2e <Bus::Bus(char const*)>:
c0013a2e:	83 ec 0c             	sub    esp,0xc
c0013a31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a35:	83 ec 08             	sub    esp,0x8
c0013a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a3c:	50                   	push   eax
c0013a3d:	e8 68 09 00 00       	call   c00143aa <Device::Device(char const*)>
c0013a42:	83 c4 10             	add    esp,0x10
c0013a45:	ba 48 a9 02 c0       	mov    edx,0xc002a948
c0013a4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a4e:	89 10                	mov    DWORD PTR [eax],edx
c0013a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a54:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013a5e:	90                   	nop
c0013a5f:	83 c4 0c             	add    esp,0xc
c0013a62:	c3                   	ret    
c0013a63:	90                   	nop

c0013a64 <Bus::~Bus()>:
c0013a64:	83 ec 0c             	sub    esp,0xc
c0013a67:	ba 48 a9 02 c0       	mov    edx,0xc002a948
c0013a6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a70:	89 10                	mov    DWORD PTR [eax],edx
c0013a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a76:	83 ec 0c             	sub    esp,0xc
c0013a79:	50                   	push   eax
c0013a7a:	e8 0d 06 00 00       	call   c001408c <Device::~Device()>
c0013a7f:	83 c4 10             	add    esp,0x10
c0013a82:	90                   	nop
c0013a83:	83 c4 0c             	add    esp,0xc
c0013a86:	c3                   	ret    
c0013a87:	90                   	nop

c0013a88 <Bus::~Bus()>:
c0013a88:	83 ec 0c             	sub    esp,0xc
c0013a8b:	83 ec 0c             	sub    esp,0xc
c0013a8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a92:	e8 cd ff ff ff       	call   c0013a64 <Bus::~Bus()>
c0013a97:	83 c4 10             	add    esp,0x10
c0013a9a:	83 ec 08             	sub    esp,0x8
c0013a9d:	68 58 01 00 00       	push   0x158
c0013aa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013aa6:	e8 09 f2 ff ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0013aab:	83 c4 10             	add    esp,0x10
c0013aae:	83 c4 0c             	add    esp,0xc
c0013ab1:	c3                   	ret    

c0013ab2 <Buzzer::Buzzer(char const*)>:
c0013ab2:	83 ec 0c             	sub    esp,0xc
c0013ab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ab9:	83 ec 08             	sub    esp,0x8
c0013abc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ac0:	50                   	push   eax
c0013ac1:	e8 e4 08 00 00       	call   c00143aa <Device::Device(char const*)>
c0013ac6:	83 c4 10             	add    esp,0x10
c0013ac9:	ba 74 a9 02 c0       	mov    edx,0xc002a974
c0013ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ad2:	89 10                	mov    DWORD PTR [eax],edx
c0013ad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ad8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ae6:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013af0:	90                   	nop
c0013af1:	83 c4 0c             	add    esp,0xc
c0013af4:	c3                   	ret    
c0013af5:	90                   	nop

c0013af6 <Buzzer::~Buzzer()>:
c0013af6:	83 ec 0c             	sub    esp,0xc
c0013af9:	ba 74 a9 02 c0       	mov    edx,0xc002a974
c0013afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b02:	89 10                	mov    DWORD PTR [eax],edx
c0013b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b08:	83 ec 0c             	sub    esp,0xc
c0013b0b:	50                   	push   eax
c0013b0c:	e8 7b 05 00 00       	call   c001408c <Device::~Device()>
c0013b11:	83 c4 10             	add    esp,0x10
c0013b14:	90                   	nop
c0013b15:	83 c4 0c             	add    esp,0xc
c0013b18:	c3                   	ret    
c0013b19:	90                   	nop

c0013b1a <Buzzer::~Buzzer()>:
c0013b1a:	83 ec 0c             	sub    esp,0xc
c0013b1d:	83 ec 0c             	sub    esp,0xc
c0013b20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b24:	e8 cd ff ff ff       	call   c0013af6 <Buzzer::~Buzzer()>
c0013b29:	83 c4 10             	add    esp,0x10
c0013b2c:	83 ec 08             	sub    esp,0x8
c0013b2f:	68 5c 01 00 00       	push   0x15c
c0013b34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b38:	e8 77 f1 ff ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0013b3d:	83 c4 10             	add    esp,0x10
c0013b40:	83 c4 0c             	add    esp,0xc
c0013b43:	c3                   	ret    

c0013b44 <Buzzer::stop()>:
c0013b44:	83 ec 14             	sub    esp,0x14
c0013b47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b4b:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b4d:	6a 00                	push   0x0
c0013b4f:	50                   	push   eax
c0013b50:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013b53:	83 c4 1c             	add    esp,0x1c
c0013b56:	c3                   	ret    

c0013b57 <beepThread(void*)>:
c0013b57:	53                   	push   ebx
c0013b58:	83 ec 08             	sub    esp,0x8
c0013b5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b5f:	e8 d5 a0 00 00       	call   c001dc39 <unlockScheduler()>
c0013b64:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013b69:	52                   	push   edx
c0013b6a:	52                   	push   edx
c0013b6b:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013b71:	52                   	push   edx
c0013b72:	50                   	push   eax
c0013b73:	e8 0e a6 00 00       	call   c001e186 <nanoSleep(unsigned long long)>
c0013b78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b7b:	e8 c4 ff ff ff       	call   c0013b44 <Buzzer::stop()>
c0013b80:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013b88:	83 c4 18             	add    esp,0x18
c0013b8b:	5b                   	pop    ebx
c0013b8c:	e9 3b a5 00 00       	jmp    c001e0cc <blockTask(TaskState)>
c0013b91:	90                   	nop

c0013b92 <Buzzer::beep(int, int, bool)>:
c0013b92:	57                   	push   edi
c0013b93:	56                   	push   esi
c0013b94:	53                   	push   ebx
c0013b95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b99:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013b9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ba1:	52                   	push   edx
c0013ba2:	52                   	push   edx
c0013ba3:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ba5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ba9:	56                   	push   esi
c0013baa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013bad:	83 c4 10             	add    esp,0x10
c0013bb0:	89 f8                	mov    eax,edi
c0013bb2:	84 c0                	test   al,al
c0013bb4:	74 1f                	je     c0013bd5 <Buzzer::beep(int, int, bool)+0x43>
c0013bb6:	50                   	push   eax
c0013bb7:	50                   	push   eax
c0013bb8:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013bbe:	99                   	cdq    
c0013bbf:	52                   	push   edx
c0013bc0:	50                   	push   eax
c0013bc1:	e8 c0 a5 00 00       	call   c001e186 <nanoSleep(unsigned long long)>
c0013bc6:	83 c4 10             	add    esp,0x10
c0013bc9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013bcd:	5b                   	pop    ebx
c0013bce:	5e                   	pop    esi
c0013bcf:	5f                   	pop    edi
c0013bd0:	e9 6f ff ff ff       	jmp    c0013b44 <Buzzer::stop()>
c0013bd5:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013bdb:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0013be0:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013be8:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013bec:	c7 44 24 14 57 3b 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013b57
c0013bf4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013bf8:	5b                   	pop    ebx
c0013bf9:	5e                   	pop    esi
c0013bfa:	5f                   	pop    edi
c0013bfb:	e9 68 a1 00 00       	jmp    c001dd68 <Process::createThread(void (*)(void*), void*, int)>

c0013c00 <User::loadClockSettings(int)>:
c0013c00:	53                   	push   ebx
c0013c01:	83 ec 14             	sub    esp,0x14
c0013c04:	68 14 01 00 00       	push   0x114
c0013c09:	e8 32 bc ff ff       	call   c000f840 <malloc>
c0013c0e:	83 c4 0c             	add    esp,0xc
c0013c11:	89 c3                	mov    ebx,eax
c0013c13:	ff 35 94 17 03 c0    	push   DWORD PTR ds:0xc0031794
c0013c19:	68 9c a9 02 c0       	push   0xc002a99c
c0013c1e:	50                   	push   eax
c0013c1f:	e8 c8 f6 ff ff       	call   c00132ec <File::File(char const*, Process*)>
c0013c24:	58                   	pop    eax
c0013c25:	5a                   	pop    edx
c0013c26:	6a 01                	push   0x1
c0013c28:	53                   	push   ebx
c0013c29:	e8 22 f7 ff ff       	call   c0013350 <File::open(FileOpenMode)>
c0013c2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c31:	e8 78 f7 ff ff       	call   c00133ae <File::close()>
c0013c36:	83 c4 10             	add    esp,0x10
c0013c39:	85 db                	test   ebx,ebx
c0013c3b:	74 0f                	je     c0013c4c <User::loadClockSettings(int)+0x4c>
c0013c3d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c3f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013c43:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013c46:	83 c4 08             	add    esp,0x8
c0013c49:	5b                   	pop    ebx
c0013c4a:	ff e0                	jmp    eax
c0013c4c:	83 c4 08             	add    esp,0x8
c0013c4f:	5b                   	pop    ebx
c0013c50:	c3                   	ret    
c0013c51:	90                   	nop

c0013c52 <Clock::Clock(char const*)>:
c0013c52:	83 ec 0c             	sub    esp,0xc
c0013c55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c59:	83 ec 08             	sub    esp,0x8
c0013c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c60:	50                   	push   eax
c0013c61:	e8 44 07 00 00       	call   c00143aa <Device::Device(char const*)>
c0013c66:	83 c4 10             	add    esp,0x10
c0013c69:	ba c4 a9 02 c0       	mov    edx,0xc002a9c4
c0013c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c72:	89 10                	mov    DWORD PTR [eax],edx
c0013c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c78:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013c82:	90                   	nop
c0013c83:	83 c4 0c             	add    esp,0xc
c0013c86:	c3                   	ret    
c0013c87:	90                   	nop

c0013c88 <Clock::~Clock()>:
c0013c88:	83 ec 0c             	sub    esp,0xc
c0013c8b:	ba c4 a9 02 c0       	mov    edx,0xc002a9c4
c0013c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c94:	89 10                	mov    DWORD PTR [eax],edx
c0013c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c9a:	83 ec 0c             	sub    esp,0xc
c0013c9d:	50                   	push   eax
c0013c9e:	e8 e9 03 00 00       	call   c001408c <Device::~Device()>
c0013ca3:	83 c4 10             	add    esp,0x10
c0013ca6:	90                   	nop
c0013ca7:	83 c4 0c             	add    esp,0xc
c0013caa:	c3                   	ret    
c0013cab:	90                   	nop

c0013cac <Clock::~Clock()>:
c0013cac:	83 ec 0c             	sub    esp,0xc
c0013caf:	83 ec 0c             	sub    esp,0xc
c0013cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cb6:	e8 cd ff ff ff       	call   c0013c88 <Clock::~Clock()>
c0013cbb:	83 c4 10             	add    esp,0x10
c0013cbe:	83 ec 08             	sub    esp,0x8
c0013cc1:	68 58 01 00 00       	push   0x158
c0013cc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cca:	e8 e5 ef ff ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0013ccf:	83 c4 10             	add    esp,0x10
c0013cd2:	83 c4 0c             	add    esp,0xc
c0013cd5:	c3                   	ret    

c0013cd6 <Clock::timeInSecondsLocal()>:
c0013cd6:	53                   	push   ebx
c0013cd7:	83 ec 14             	sub    esp,0x14
c0013cda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cde:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ce0:	50                   	push   eax
c0013ce1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013ce4:	0f b6 0d b8 e3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e3b8
c0013ceb:	03 0d bc e3 02 c0    	add    ecx,DWORD PTR ds:0xc002e3bc
c0013cf1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013cf7:	89 cb                	mov    ebx,ecx
c0013cf9:	c1 fb 1f             	sar    ebx,0x1f
c0013cfc:	01 c8                	add    eax,ecx
c0013cfe:	11 da                	adc    edx,ebx
c0013d00:	83 c4 10             	add    esp,0x10
c0013d03:	31 c9                	xor    ecx,ecx
c0013d05:	80 3d b9 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e3b9,0x0
c0013d0c:	74 05                	je     c0013d13 <Clock::timeInSecondsLocal()+0x3d>
c0013d0e:	b9 08 07 00 00       	mov    ecx,0x708
c0013d13:	31 db                	xor    ebx,ebx
c0013d15:	01 c8                	add    eax,ecx
c0013d17:	11 da                	adc    edx,ebx
c0013d19:	83 c4 08             	add    esp,0x8
c0013d1c:	5b                   	pop    ebx
c0013d1d:	c3                   	ret    

c0013d1e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013d1e:	57                   	push   edi
c0013d1f:	56                   	push   esi
c0013d20:	53                   	push   ebx
c0013d21:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013d25:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d29:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013d2b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d2f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013d32:	0f b6 05 b8 e3 02 c0 	movzx  eax,BYTE PTR ds:0xc002e3b8
c0013d39:	03 05 bc e3 02 c0    	add    eax,DWORD PTR ds:0xc002e3bc
c0013d3f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013d45:	99                   	cdq    
c0013d46:	29 c6                	sub    esi,eax
c0013d48:	19 d7                	sbb    edi,edx
c0013d4a:	89 f0                	mov    eax,esi
c0013d4c:	89 fa                	mov    edx,edi
c0013d4e:	31 f6                	xor    esi,esi
c0013d50:	80 3d b9 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e3b9,0x0
c0013d57:	74 05                	je     c0013d5e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013d59:	be 08 07 00 00       	mov    esi,0x708
c0013d5e:	31 ff                	xor    edi,edi
c0013d60:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013d64:	29 f0                	sub    eax,esi
c0013d66:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d6a:	19 fa                	sbb    edx,edi
c0013d6c:	89 d8                	mov    eax,ebx
c0013d6e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013d72:	5b                   	pop    ebx
c0013d73:	5e                   	pop    esi
c0013d74:	5f                   	pop    edi
c0013d75:	ff e0                	jmp    eax

c0013d77 <datetimeToSeconds(datetime_t)>:
c0013d77:	55                   	push   ebp
c0013d78:	57                   	push   edi
c0013d79:	56                   	push   esi
c0013d7a:	53                   	push   ebx
c0013d7b:	83 ec 14             	sub    esp,0x14
c0013d7e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013d82:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013d86:	89 d3                	mov    ebx,edx
c0013d88:	0f b6 c6             	movzx  eax,dh
c0013d8b:	c1 eb 10             	shr    ebx,0x10
c0013d8e:	48                   	dec    eax
c0013d8f:	66 81 eb 6c 07       	sub    bx,0x76c
c0013d94:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013d98:	0f b6 f5             	movzx  esi,ch
c0013d9b:	89 cf                	mov    edi,ecx
c0013d9d:	6b f6 3c             	imul   esi,esi,0x3c
c0013da0:	c1 ef 10             	shr    edi,0x10
c0013da3:	0f b6 c9             	movzx  ecx,cl
c0013da6:	89 f8                	mov    eax,edi
c0013da8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013dae:	0f b6 f8             	movzx  edi,al
c0013db1:	0f b6 d2             	movzx  edx,dl
c0013db4:	01 fe                	add    esi,edi
c0013db6:	01 f1                	add    ecx,esi
c0013db8:	0f b7 f3             	movzx  esi,bx
c0013dbb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013dbf:	c1 f9 1f             	sar    ecx,0x1f
c0013dc2:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013dc7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013dcb:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013dd0:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0013dd7:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013ddb:	76 29                	jbe    c0013e06 <datetimeToSeconds(datetime_t)+0x8f>
c0013ddd:	f6 c3 03             	test   bl,0x3
c0013de0:	75 24                	jne    c0013e06 <datetimeToSeconds(datetime_t)+0x8f>
c0013de2:	31 d2                	xor    edx,edx
c0013de4:	bf 64 00 00 00       	mov    edi,0x64
c0013de9:	89 d8                	mov    eax,ebx
c0013deb:	66 f7 f7             	div    di
c0013dee:	66 85 d2             	test   dx,dx
c0013df1:	75 12                	jne    c0013e05 <datetimeToSeconds(datetime_t)+0x8e>
c0013df3:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013df9:	bf 90 01 00 00       	mov    edi,0x190
c0013dfe:	99                   	cdq    
c0013dff:	f7 ff                	idiv   edi
c0013e01:	85 d2                	test   edx,edx
c0013e03:	75 01                	jne    c0013e06 <datetimeToSeconds(datetime_t)+0x8f>
c0013e05:	41                   	inc    ecx
c0013e06:	66 83 fb 46          	cmp    bx,0x46
c0013e0a:	76 45                	jbe    c0013e51 <datetimeToSeconds(datetime_t)+0xda>
c0013e0c:	bb 46 00 00 00       	mov    ebx,0x46
c0013e11:	bf 64 00 00 00       	mov    edi,0x64
c0013e16:	bd 90 01 00 00       	mov    ebp,0x190
c0013e1b:	b8 6d 01 00 00       	mov    eax,0x16d
c0013e20:	f6 c3 03             	test   bl,0x3
c0013e23:	75 23                	jne    c0013e48 <datetimeToSeconds(datetime_t)+0xd1>
c0013e25:	89 d8                	mov    eax,ebx
c0013e27:	99                   	cdq    
c0013e28:	f7 ff                	idiv   edi
c0013e2a:	b8 6e 01 00 00       	mov    eax,0x16e
c0013e2f:	85 d2                	test   edx,edx
c0013e31:	75 15                	jne    c0013e48 <datetimeToSeconds(datetime_t)+0xd1>
c0013e33:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013e39:	99                   	cdq    
c0013e3a:	f7 fd                	idiv   ebp
c0013e3c:	83 fa 01             	cmp    edx,0x1
c0013e3f:	19 c0                	sbb    eax,eax
c0013e41:	f7 d0                	not    eax
c0013e43:	05 6e 01 00 00       	add    eax,0x16e
c0013e48:	01 c1                	add    ecx,eax
c0013e4a:	43                   	inc    ebx
c0013e4b:	39 f3                	cmp    ebx,esi
c0013e4d:	7c cc                	jl     c0013e1b <datetimeToSeconds(datetime_t)+0xa4>
c0013e4f:	eb 35                	jmp    c0013e86 <datetimeToSeconds(datetime_t)+0x10f>
c0013e51:	74 33                	je     c0013e86 <datetimeToSeconds(datetime_t)+0x10f>
c0013e53:	b8 45 00 00 00       	mov    eax,0x45
c0013e58:	89 c2                	mov    edx,eax
c0013e5a:	83 e2 03             	and    edx,0x3
c0013e5d:	39 f0                	cmp    eax,esi
c0013e5f:	7e 0f                	jle    c0013e70 <datetimeToSeconds(datetime_t)+0xf9>
c0013e61:	83 fa 01             	cmp    edx,0x1
c0013e64:	19 d2                	sbb    edx,edx
c0013e66:	48                   	dec    eax
c0013e67:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013e6e:	eb e8                	jmp    c0013e58 <datetimeToSeconds(datetime_t)+0xe1>
c0013e70:	b8 6d 01 00 00       	mov    eax,0x16d
c0013e75:	85 d2                	test   edx,edx
c0013e77:	75 0b                	jne    c0013e84 <datetimeToSeconds(datetime_t)+0x10d>
c0013e79:	66 83 fb 01          	cmp    bx,0x1
c0013e7d:	19 c0                	sbb    eax,eax
c0013e7f:	05 6e 01 00 00       	add    eax,0x16e
c0013e84:	29 c1                	sub    ecx,eax
c0013e86:	b8 80 51 01 00       	mov    eax,0x15180
c0013e8b:	f7 e9                	imul   ecx
c0013e8d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013e91:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013e95:	83 c4 14             	add    esp,0x14
c0013e98:	5b                   	pop    ebx
c0013e99:	5e                   	pop    esi
c0013e9a:	5f                   	pop    edi
c0013e9b:	5d                   	pop    ebp
c0013e9c:	c3                   	ret    
c0013e9d:	90                   	nop

c0013e9e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013e9e:	57                   	push   edi
c0013e9f:	56                   	push   esi
c0013ea0:	53                   	push   ebx
c0013ea1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ea5:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ea7:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013eaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013eae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013eb2:	e8 c0 fe ff ff       	call   c0013d77 <datetimeToSeconds(datetime_t)>
c0013eb7:	59                   	pop    ecx
c0013eb8:	0f b6 0d b8 e3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e3b8
c0013ebf:	5b                   	pop    ebx
c0013ec0:	03 0d bc e3 02 c0    	add    ecx,DWORD PTR ds:0xc002e3bc
c0013ec6:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ecc:	89 cb                	mov    ebx,ecx
c0013ece:	c1 fb 1f             	sar    ebx,0x1f
c0013ed1:	29 c8                	sub    eax,ecx
c0013ed3:	19 da                	sbb    edx,ebx
c0013ed5:	31 c9                	xor    ecx,ecx
c0013ed7:	80 3d b9 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e3b9,0x0
c0013ede:	74 05                	je     c0013ee5 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013ee0:	b9 08 07 00 00       	mov    ecx,0x708
c0013ee5:	31 db                	xor    ebx,ebx
c0013ee7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013eeb:	29 c8                	sub    eax,ecx
c0013eed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ef1:	19 da                	sbb    edx,ebx
c0013ef3:	89 f8                	mov    eax,edi
c0013ef5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013ef9:	5b                   	pop    ebx
c0013efa:	5e                   	pop    esi
c0013efb:	5f                   	pop    edi
c0013efc:	ff e0                	jmp    eax

c0013efe <secondsToDatetime(unsigned long long)>:
c0013efe:	55                   	push   ebp
c0013eff:	57                   	push   edi
c0013f00:	56                   	push   esi
c0013f01:	53                   	push   ebx
c0013f02:	83 ec 1c             	sub    esp,0x1c
c0013f05:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013f09:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013f0d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013f11:	6a 00                	push   0x0
c0013f13:	68 80 51 01 00       	push   0x15180
c0013f18:	55                   	push   ebp
c0013f19:	57                   	push   edi
c0013f1a:	e8 1d 29 01 00       	call   c002683c <__udivdi3>
c0013f1f:	83 c4 10             	add    esp,0x10
c0013f22:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013f28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013f2c:	6a 00                	push   0x0
c0013f2e:	68 80 51 01 00       	push   0x15180
c0013f33:	55                   	push   ebp
c0013f34:	57                   	push   edi
c0013f35:	bf 10 0e 00 00       	mov    edi,0xe10
c0013f3a:	e8 fd 29 01 00       	call   c002693c <__umoddi3>
c0013f3f:	83 c4 10             	add    esp,0x10
c0013f42:	99                   	cdq    
c0013f43:	f7 ff                	idiv   edi
c0013f45:	bf 3c 00 00 00       	mov    edi,0x3c
c0013f4a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013f4d:	89 d0                	mov    eax,edx
c0013f4f:	99                   	cdq    
c0013f50:	f7 ff                	idiv   edi
c0013f52:	85 db                	test   ebx,ebx
c0013f54:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013f57:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013f5a:	79 11                	jns    c0013f6d <secondsToDatetime(unsigned long long)+0x6f>
c0013f5c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013f60:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013f66:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013f6b:	eb 07                	jmp    c0013f74 <secondsToDatetime(unsigned long long)+0x76>
c0013f6d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013f72:	89 d8                	mov    eax,ebx
c0013f74:	bf b4 05 00 00       	mov    edi,0x5b4
c0013f79:	99                   	cdq    
c0013f7a:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013f7f:	f7 f9                	idiv   ecx
c0013f81:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013f86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013f8a:	31 d2                	xor    edx,edx
c0013f8c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013f94:	01 c3                	add    ebx,eax
c0013f96:	89 d8                	mov    eax,ebx
c0013f98:	f7 f1                	div    ecx
c0013f9a:	31 d2                	xor    edx,edx
c0013f9c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013f9f:	89 d8                	mov    eax,ebx
c0013fa1:	f7 f7                	div    edi
c0013fa3:	31 d2                	xor    edx,edx
c0013fa5:	29 c1                	sub    ecx,eax
c0013fa7:	89 d8                	mov    eax,ebx
c0013fa9:	f7 f5                	div    ebp
c0013fab:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013fb0:	29 c1                	sub    ecx,eax
c0013fb2:	31 d2                	xor    edx,edx
c0013fb4:	89 c8                	mov    eax,ecx
c0013fb6:	f7 f5                	div    ebp
c0013fb8:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013fbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013fc1:	31 d2                	xor    edx,edx
c0013fc3:	89 c8                	mov    eax,ecx
c0013fc5:	f7 f5                	div    ebp
c0013fc7:	31 d2                	xor    edx,edx
c0013fc9:	01 c3                	add    ebx,eax
c0013fcb:	89 c8                	mov    eax,ecx
c0013fcd:	f7 f7                	div    edi
c0013fcf:	bf 99 00 00 00       	mov    edi,0x99
c0013fd4:	29 c3                	sub    ebx,eax
c0013fd6:	31 d2                	xor    edx,edx
c0013fd8:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013fe0:	29 c3                	sub    ebx,eax
c0013fe2:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013fe5:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013fe8:	bb 05 00 00 00       	mov    ebx,0x5
c0013fed:	83 c1 02             	add    ecx,0x2
c0013ff0:	89 c8                	mov    eax,ecx
c0013ff2:	f7 f7                	div    edi
c0013ff4:	31 d2                	xor    edx,edx
c0013ff6:	89 c7                	mov    edi,eax
c0013ff8:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013ffe:	83 c0 02             	add    eax,0x2
c0014001:	f7 f3                	div    ebx
c0014003:	89 eb                	mov    ebx,ebp
c0014005:	29 c3                	sub    ebx,eax
c0014007:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001400d:	88 1e                	mov    BYTE PTR [esi],bl
c001400f:	19 c0                	sbb    eax,eax
c0014011:	31 d2                	xor    edx,edx
c0014013:	83 e0 0c             	and    eax,0xc
c0014016:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001401a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014022:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014026:	83 f9 01             	cmp    ecx,0x1
c0014029:	0f 96 c2             	setbe  dl
c001402c:	41                   	inc    ecx
c001402d:	01 d0                	add    eax,edx
c001402f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014032:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014036:	83 c4 1c             	add    esp,0x1c
c0014039:	89 f0                	mov    eax,esi
c001403b:	5b                   	pop    ebx
c001403c:	5e                   	pop    esi
c001403d:	5f                   	pop    edi
c001403e:	5d                   	pop    ebp
c001403f:	c2 04 00             	ret    0x4

c0014042 <Clock::timeInDatetimeLocal()>:
c0014042:	53                   	push   ebx
c0014043:	83 ec 14             	sub    esp,0x14
c0014046:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001404a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001404e:	e8 83 fc ff ff       	call   c0013cd6 <Clock::timeInSecondsLocal()>
c0014053:	83 c4 0c             	add    esp,0xc
c0014056:	52                   	push   edx
c0014057:	50                   	push   eax
c0014058:	53                   	push   ebx
c0014059:	e8 a0 fe ff ff       	call   c0013efe <secondsToDatetime(unsigned long long)>
c001405e:	89 d8                	mov    eax,ebx
c0014060:	83 c4 14             	add    esp,0x14
c0014063:	5b                   	pop    ebx
c0014064:	c2 04 00             	ret    0x4
c0014067:	90                   	nop

c0014068 <Device::hibernate()>:
c0014068:	c3                   	ret    
c0014069:	90                   	nop

c001406a <Device::wake()>:
c001406a:	c3                   	ret    
c001406b:	90                   	nop

c001406c <Device::detect()>:
c001406c:	c3                   	ret    
c001406d:	90                   	nop

c001406e <Device::disableLegacy()>:
c001406e:	c3                   	ret    
c001406f:	90                   	nop

c0014070 <Device::powerSaving(PowerSavingLevel)>:
c0014070:	c3                   	ret    
c0014071:	90                   	nop

c0014072 <DriverlessDevice::close(int, int, void*)>:
c0014072:	31 c0                	xor    eax,eax
c0014074:	c3                   	ret    
c0014075:	90                   	nop

c0014076 <DriverlessDevice::detect()>:
c0014076:	c3                   	ret    
c0014077:	90                   	nop

c0014078 <DriverlessDevice::open(int, int, void*)>:
c0014078:	83 ec 18             	sub    esp,0x18
c001407b:	68 30 aa 02 c0       	push   0xc002aa30
c0014080:	e8 b8 63 00 00       	call   c001a43d <Krnl::panic(char const*)>
c0014085:	83 c8 ff             	or     eax,0xffffffff
c0014088:	83 c4 1c             	add    esp,0x1c
c001408b:	c3                   	ret    

c001408c <Device::~Device()>:
c001408c:	ba 58 aa 02 c0       	mov    edx,0xc002aa58
c0014091:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014095:	89 10                	mov    DWORD PTR [eax],edx
c0014097:	90                   	nop
c0014098:	c3                   	ret    
c0014099:	90                   	nop

c001409a <Device::~Device()>:
c001409a:	83 ec 0c             	sub    esp,0xc
c001409d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00140a1:	e8 e6 ff ff ff       	call   c001408c <Device::~Device()>
c00140a6:	83 c4 04             	add    esp,0x4
c00140a9:	83 ec 08             	sub    esp,0x8
c00140ac:	68 58 01 00 00       	push   0x158
c00140b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140b5:	e8 fa eb ff ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c00140ba:	83 c4 10             	add    esp,0x10
c00140bd:	83 c4 0c             	add    esp,0xc
c00140c0:	c3                   	ret    
c00140c1:	90                   	nop

c00140c2 <Device::findAndLoadDriver()>:
c00140c2:	c3                   	ret    
c00140c3:	90                   	nop

c00140c4 <Device::preOpenPCI(PCIDeviceInfo)>:
c00140c4:	57                   	push   edi
c00140c5:	b9 09 00 00 00       	mov    ecx,0x9
c00140ca:	56                   	push   esi
c00140cb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00140cf:	8d 74 24 10          	lea    esi,[esp+0x10]
c00140d3:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00140dd:	81 c7 18 01 00 00    	add    edi,0x118
c00140e3:	fc                   	cld    
c00140e4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00140e6:	5e                   	pop    esi
c00140e7:	5f                   	pop    edi
c00140e8:	c3                   	ret    
c00140e9:	90                   	nop

c00140ea <Device::preOpenACPI(void*, char*, char*)>:
c00140ea:	56                   	push   esi
c00140eb:	53                   	push   ebx
c00140ec:	83 ec 08             	sub    esp,0x8
c00140ef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00140f3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00140f7:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0014101:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014105:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001410b:	6a 1e                	push   0x1e
c001410d:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014113:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014117:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001411d:	50                   	push   eax
c001411e:	e8 21 c6 fe ff       	call   c0000744 <memcpy>
c0014123:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0014127:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001412b:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014133:	83 c4 14             	add    esp,0x14
c0014136:	5b                   	pop    ebx
c0014137:	5e                   	pop    esi
c0014138:	e9 07 c6 fe ff       	jmp    c0000744 <memcpy>
c001413d:	90                   	nop

c001413e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001413e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014142:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014147:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001414e:	75 0b                	jne    c001415b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014150:	8b 00                	mov    eax,DWORD PTR [eax]
c0014152:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014156:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014159:	eb 1e                	jmp    c0014179 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c001415b:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0014160:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014166:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001416c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001416e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014172:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014176:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014179:	ff e0                	jmp    eax
c001417b:	90                   	nop

c001417c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001417c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014180:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014185:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001418c:	75 0b                	jne    c0014199 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001418e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014190:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014194:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014197:	eb 1e                	jmp    c00141b7 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014199:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001419e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00141a4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00141aa:	8b 08                	mov    ecx,DWORD PTR [eax]
c00141ac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141b4:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00141b7:	ff e0                	jmp    eax
c00141b9:	90                   	nop

c00141ba <Device::addChild(Device*)>:
c00141ba:	53                   	push   ebx
c00141bb:	83 ec 08             	sub    esp,0x8
c00141be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00141c6:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00141cc:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00141d2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00141d4:	85 d2                	test   edx,edx
c00141d6:	74 04                	je     c00141dc <Device::addChild(Device*)+0x22>
c00141d8:	89 d3                	mov    ebx,edx
c00141da:	eb f6                	jmp    c00141d2 <Device::addChild(Device*)+0x18>
c00141dc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00141df:	83 ec 0c             	sub    esp,0xc
c00141e2:	6a 08                	push   0x8
c00141e4:	e8 57 b6 ff ff       	call   c000f840 <malloc>
c00141e9:	89 03                	mov    DWORD PTR [ebx],eax
c00141eb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00141f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00141f8:	83 c4 18             	add    esp,0x18
c00141fb:	5b                   	pop    ebx
c00141fc:	c3                   	ret    
c00141fd:	90                   	nop

c00141fe <Device::removeAllChildren()>:
c00141fe:	56                   	push   esi
c00141ff:	53                   	push   ebx
c0014200:	52                   	push   edx
c0014201:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014205:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001420b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001420e:	74 17                	je     c0014227 <Device::removeAllChildren()+0x29>
c0014210:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014213:	85 c0                	test   eax,eax
c0014215:	74 0c                	je     c0014223 <Device::removeAllChildren()+0x25>
c0014217:	83 ec 0c             	sub    esp,0xc
c001421a:	8b 10                	mov    edx,DWORD PTR [eax]
c001421c:	50                   	push   eax
c001421d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014220:	83 c4 10             	add    esp,0x10
c0014223:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014225:	eb e4                	jmp    c001420b <Device::removeAllChildren()+0xd>
c0014227:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001422d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014233:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014239:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014240:	58                   	pop    eax
c0014241:	5b                   	pop    ebx
c0014242:	5e                   	pop    esi
c0014243:	c3                   	ret    

c0014244 <Device::hibernateAll()>:
c0014244:	53                   	push   ebx
c0014245:	83 ec 14             	sub    esp,0x14
c0014248:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001424c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001424e:	53                   	push   ebx
c001424f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014252:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014258:	83 c4 10             	add    esp,0x10
c001425b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001425e:	74 0f                	je     c001426f <Device::hibernateAll()+0x2b>
c0014260:	83 ec 0c             	sub    esp,0xc
c0014263:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014266:	e8 d9 ff ff ff       	call   c0014244 <Device::hibernateAll()>
c001426b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001426d:	eb e9                	jmp    c0014258 <Device::hibernateAll()+0x14>
c001426f:	83 c4 08             	add    esp,0x8
c0014272:	5b                   	pop    ebx
c0014273:	c3                   	ret    

c0014274 <Device::wakeAll()>:
c0014274:	53                   	push   ebx
c0014275:	83 ec 14             	sub    esp,0x14
c0014278:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001427c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001427e:	53                   	push   ebx
c001427f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014282:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014288:	83 c4 10             	add    esp,0x10
c001428b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001428e:	74 0f                	je     c001429f <Device::wakeAll()+0x2b>
c0014290:	83 ec 0c             	sub    esp,0xc
c0014293:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014296:	e8 d9 ff ff ff       	call   c0014274 <Device::wakeAll()>
c001429b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001429d:	eb e9                	jmp    c0014288 <Device::wakeAll()+0x14>
c001429f:	83 c4 08             	add    esp,0x8
c00142a2:	5b                   	pop    ebx
c00142a3:	c3                   	ret    

c00142a4 <Device::detectAll()>:
c00142a4:	53                   	push   ebx
c00142a5:	83 ec 14             	sub    esp,0x14
c00142a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142ae:	53                   	push   ebx
c00142af:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00142b2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142b8:	83 c4 10             	add    esp,0x10
c00142bb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142be:	74 0f                	je     c00142cf <Device::detectAll()+0x2b>
c00142c0:	83 ec 0c             	sub    esp,0xc
c00142c3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142c6:	e8 d9 ff ff ff       	call   c00142a4 <Device::detectAll()>
c00142cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142cd:	eb e9                	jmp    c00142b8 <Device::detectAll()+0x14>
c00142cf:	83 c4 08             	add    esp,0x8
c00142d2:	5b                   	pop    ebx
c00142d3:	c3                   	ret    

c00142d4 <Device::disableLegacyAll()>:
c00142d4:	53                   	push   ebx
c00142d5:	83 ec 14             	sub    esp,0x14
c00142d8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142de:	53                   	push   ebx
c00142df:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00142e2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142e8:	83 c4 10             	add    esp,0x10
c00142eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142ee:	74 0f                	je     c00142ff <Device::disableLegacyAll()+0x2b>
c00142f0:	83 ec 0c             	sub    esp,0xc
c00142f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142f6:	e8 d9 ff ff ff       	call   c00142d4 <Device::disableLegacyAll()>
c00142fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142fd:	eb e9                	jmp    c00142e8 <Device::disableLegacyAll()+0x14>
c00142ff:	83 c4 08             	add    esp,0x8
c0014302:	5b                   	pop    ebx
c0014303:	c3                   	ret    

c0014304 <Device::loadDriversForAll()>:
c0014304:	53                   	push   ebx
c0014305:	83 ec 08             	sub    esp,0x8
c0014308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001430c:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014312:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014314:	85 db                	test   ebx,ebx
c0014316:	74 12                	je     c001432a <Device::loadDriversForAll()+0x26>
c0014318:	83 ec 0c             	sub    esp,0xc
c001431b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001431e:	e8 e1 ff ff ff       	call   c0014304 <Device::loadDriversForAll()>
c0014323:	83 c4 10             	add    esp,0x10
c0014326:	89 d8                	mov    eax,ebx
c0014328:	eb e8                	jmp    c0014312 <Device::loadDriversForAll()+0xe>
c001432a:	83 c4 08             	add    esp,0x8
c001432d:	5b                   	pop    ebx
c001432e:	c3                   	ret    
c001432f:	90                   	nop

c0014330 <Device::closeAll()>:
c0014330:	53                   	push   ebx
c0014331:	83 ec 08             	sub    esp,0x8
c0014334:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014338:	8b 03                	mov    eax,DWORD PTR [ebx]
c001433a:	6a 00                	push   0x0
c001433c:	6a 00                	push   0x0
c001433e:	6a 00                	push   0x0
c0014340:	53                   	push   ebx
c0014341:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014344:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001434a:	83 c4 10             	add    esp,0x10
c001434d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014350:	74 0f                	je     c0014361 <Device::closeAll()+0x31>
c0014352:	83 ec 0c             	sub    esp,0xc
c0014355:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014358:	e8 d3 ff ff ff       	call   c0014330 <Device::closeAll()>
c001435d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001435f:	eb e9                	jmp    c001434a <Device::closeAll()+0x1a>
c0014361:	83 c4 08             	add    esp,0x8
c0014364:	5b                   	pop    ebx
c0014365:	c3                   	ret    

c0014366 <Device::powerSavingAll(PowerSavingLevel)>:
c0014366:	56                   	push   esi
c0014367:	53                   	push   ebx
c0014368:	83 ec 0c             	sub    esp,0xc
c001436b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001436f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014373:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014375:	56                   	push   esi
c0014376:	53                   	push   ebx
c0014377:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001437a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014380:	83 c4 10             	add    esp,0x10
c0014383:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014386:	74 0f                	je     c0014397 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014388:	52                   	push   edx
c0014389:	52                   	push   edx
c001438a:	56                   	push   esi
c001438b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001438e:	e8 d3 ff ff ff       	call   c0014366 <Device::powerSavingAll(PowerSavingLevel)>
c0014393:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014395:	eb e9                	jmp    c0014380 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014397:	58                   	pop    eax
c0014398:	5b                   	pop    ebx
c0014399:	5e                   	pop    esi
c001439a:	c3                   	ret    
c001439b:	90                   	nop

c001439c <Device::setName(char const*)>:
c001439c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00143a4:	e9 8b c4 fe ff       	jmp    c0000834 <strcpy>
c00143a9:	90                   	nop

c00143aa <Device::Device(char const*)>:
c00143aa:	83 ec 1c             	sub    esp,0x1c
c00143ad:	ba 58 aa 02 c0       	mov    edx,0xc002aa58
c00143b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143b6:	89 10                	mov    DWORD PTR [eax],edx
c00143b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143bc:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00143c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143ca:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00143d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143d8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00143e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143e6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00143f0:	83 ec 08             	sub    esp,0x8
c00143f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00143f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00143fb:	e8 9c ff ff ff       	call   c001439c <Device::setName(char const*)>
c0014400:	83 c4 10             	add    esp,0x10
c0014403:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001440b:	83 ec 0c             	sub    esp,0xc
c001440e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014412:	e8 29 b4 ff ff       	call   c000f840 <malloc>
c0014417:	83 c4 10             	add    esp,0x10
c001441a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014420:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014427:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001442b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014435:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001443b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014441:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014445:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001444b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014452:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014456:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001445d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014461:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014468:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001446c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014476:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001447a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014484:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014488:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014492:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014496:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00144a0:	90                   	nop
c00144a1:	83 c4 1c             	add    esp,0x1c
c00144a4:	c3                   	ret    
c00144a5:	90                   	nop

c00144a6 <Device::getName()>:
c00144a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144aa:	05 d0 00 00 00       	add    eax,0xd0
c00144af:	c3                   	ret    

c00144b0 <DriverlessDevice::DriverlessDevice(char const*)>:
c00144b0:	83 ec 0c             	sub    esp,0xc
c00144b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144b7:	83 ec 08             	sub    esp,0x8
c00144ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144be:	50                   	push   eax
c00144bf:	e8 e6 fe ff ff       	call   c00143aa <Device::Device(char const*)>
c00144c4:	83 c4 10             	add    esp,0x10
c00144c7:	ba 84 aa 02 c0       	mov    edx,0xc002aa84
c00144cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144d0:	89 10                	mov    DWORD PTR [eax],edx
c00144d2:	90                   	nop
c00144d3:	83 c4 0c             	add    esp,0xc
c00144d6:	c3                   	ret    
c00144d7:	90                   	nop

c00144d8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00144d8:	57                   	push   edi
c00144d9:	56                   	push   esi
c00144da:	53                   	push   ebx
c00144db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144df:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00144e3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00144e7:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00144ed:	75 0c                	jne    c00144fb <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00144ef:	52                   	push   edx
c00144f0:	52                   	push   edx
c00144f1:	53                   	push   ebx
c00144f2:	56                   	push   esi
c00144f3:	e8 82 42 01 00       	call   c002877a <LinkedList<Device>::addElement(Device*)>
c00144f8:	83 c4 10             	add    esp,0x10
c00144fb:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014501:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014504:	74 12                	je     c0014518 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014506:	50                   	push   eax
c0014507:	57                   	push   edi
c0014508:	56                   	push   esi
c0014509:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001450c:	e8 c7 ff ff ff       	call   c00144d8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014511:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014513:	83 c4 10             	add    esp,0x10
c0014516:	eb e9                	jmp    c0014501 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014518:	5b                   	pop    ebx
c0014519:	5e                   	pop    esi
c001451a:	5f                   	pop    edi
c001451b:	c3                   	ret    

c001451c <getDevicesOfType(DeviceType)>:
c001451c:	53                   	push   ebx
c001451d:	83 ec 14             	sub    esp,0x14
c0014520:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014524:	53                   	push   ebx
c0014525:	e8 2c 43 01 00       	call   c0028856 <LinkedList<Device>::LinkedList()>
c001452a:	83 c4 0c             	add    esp,0xc
c001452d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014531:	53                   	push   ebx
c0014532:	ff 35 28 e2 02 c0    	push   DWORD PTR ds:0xc002e228
c0014538:	e8 9b ff ff ff       	call   c00144d8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001453d:	89 d8                	mov    eax,ebx
c001453f:	83 c4 18             	add    esp,0x18
c0014542:	5b                   	pop    ebx
c0014543:	c2 04 00             	ret    0x4

c0014546 <HardDiskController::HardDiskController(char const*)>:
c0014546:	83 ec 0c             	sub    esp,0xc
c0014549:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001454d:	83 ec 08             	sub    esp,0x8
c0014550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014554:	50                   	push   eax
c0014555:	e8 50 fe ff ff       	call   c00143aa <Device::Device(char const*)>
c001455a:	83 c4 10             	add    esp,0x10
c001455d:	ba b0 aa 02 c0       	mov    edx,0xc002aab0
c0014562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014566:	89 10                	mov    DWORD PTR [eax],edx
c0014568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001456c:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014576:	90                   	nop
c0014577:	83 c4 0c             	add    esp,0xc
c001457a:	c3                   	ret    
c001457b:	90                   	nop

c001457c <HardDiskController::~HardDiskController()>:
c001457c:	83 ec 0c             	sub    esp,0xc
c001457f:	ba b0 aa 02 c0       	mov    edx,0xc002aab0
c0014584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014588:	89 10                	mov    DWORD PTR [eax],edx
c001458a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001458e:	83 ec 0c             	sub    esp,0xc
c0014591:	50                   	push   eax
c0014592:	e8 f5 fa ff ff       	call   c001408c <Device::~Device()>
c0014597:	83 c4 10             	add    esp,0x10
c001459a:	90                   	nop
c001459b:	83 c4 0c             	add    esp,0xc
c001459e:	c3                   	ret    
c001459f:	90                   	nop

c00145a0 <HardDiskController::~HardDiskController()>:
c00145a0:	83 ec 0c             	sub    esp,0xc
c00145a3:	83 ec 0c             	sub    esp,0xc
c00145a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145aa:	e8 cd ff ff ff       	call   c001457c <HardDiskController::~HardDiskController()>
c00145af:	83 c4 10             	add    esp,0x10
c00145b2:	83 ec 08             	sub    esp,0x8
c00145b5:	68 58 01 00 00       	push   0x158
c00145ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145be:	e8 f1 e6 ff ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c00145c3:	83 c4 10             	add    esp,0x10
c00145c6:	83 c4 0c             	add    esp,0xc
c00145c9:	c3                   	ret    

c00145ca <PhysicalDisk::eject()>:
c00145ca:	83 ec 18             	sub    esp,0x18
c00145cd:	68 d4 aa 02 c0       	push   0xc002aad4
c00145d2:	e8 bd e7 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00145d7:	83 c8 ff             	or     eax,0xffffffff
c00145da:	83 c4 1c             	add    esp,0x1c
c00145dd:	c3                   	ret    

c00145de <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00145de:	83 ec 0c             	sub    esp,0xc
c00145e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145e5:	83 ec 08             	sub    esp,0x8
c00145e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145ec:	50                   	push   eax
c00145ed:	e8 b8 fd ff ff       	call   c00143aa <Device::Device(char const*)>
c00145f2:	83 c4 10             	add    esp,0x10
c00145f5:	ba 04 ab 02 c0       	mov    edx,0xc002ab04
c00145fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145fe:	89 10                	mov    DWORD PTR [eax],edx
c0014600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014604:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001460b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001460f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001461a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014628:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001462c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014636:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014640:	90                   	nop
c0014641:	83 c4 0c             	add    esp,0xc
c0014644:	c3                   	ret    
c0014645:	90                   	nop

c0014646 <PhysicalDisk::startCache()>:
c0014646:	56                   	push   esi
c0014647:	53                   	push   ebx
c0014648:	83 ec 10             	sub    esp,0x10
c001464b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001464f:	6a 44                	push   0x44
c0014651:	e8 ea b1 ff ff       	call   c000f840 <malloc>
c0014656:	89 c6                	mov    esi,eax
c0014658:	58                   	pop    eax
c0014659:	5a                   	pop    edx
c001465a:	53                   	push   ebx
c001465b:	56                   	push   esi
c001465c:	e8 2d 27 00 00       	call   c0016d8e <VCache::VCache(PhysicalDisk*)>
c0014661:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014667:	83 c4 14             	add    esp,0x14
c001466a:	5b                   	pop    ebx
c001466b:	5e                   	pop    esi
c001466c:	c3                   	ret    
c001466d:	90                   	nop

c001466e <PhysicalDisk::~PhysicalDisk()>:
c001466e:	83 ec 0c             	sub    esp,0xc
c0014671:	ba 04 ab 02 c0       	mov    edx,0xc002ab04
c0014676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001467a:	89 10                	mov    DWORD PTR [eax],edx
c001467c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014680:	83 ec 0c             	sub    esp,0xc
c0014683:	50                   	push   eax
c0014684:	e8 03 fa ff ff       	call   c001408c <Device::~Device()>
c0014689:	83 c4 10             	add    esp,0x10
c001468c:	90                   	nop
c001468d:	83 c4 0c             	add    esp,0xc
c0014690:	c3                   	ret    
c0014691:	90                   	nop

c0014692 <PhysicalDisk::~PhysicalDisk()>:
c0014692:	83 ec 0c             	sub    esp,0xc
c0014695:	83 ec 0c             	sub    esp,0xc
c0014698:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001469c:	e8 cd ff ff ff       	call   c001466e <PhysicalDisk::~PhysicalDisk()>
c00146a1:	83 c4 10             	add    esp,0x10
c00146a4:	83 ec 08             	sub    esp,0x8
c00146a7:	68 6c 01 00 00       	push   0x16c
c00146ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146b0:	e8 ff e5 ff ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c00146b5:	83 c4 10             	add    esp,0x10
c00146b8:	83 c4 0c             	add    esp,0xc
c00146bb:	c3                   	ret    

c00146bc <FPU::FPU(char const*)>:
c00146bc:	83 ec 0c             	sub    esp,0xc
c00146bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146c3:	83 ec 08             	sub    esp,0x8
c00146c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146ca:	50                   	push   eax
c00146cb:	e8 da fc ff ff       	call   c00143aa <Device::Device(char const*)>
c00146d0:	83 c4 10             	add    esp,0x10
c00146d3:	ba 48 ab 02 c0       	mov    edx,0xc002ab48
c00146d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146dc:	89 10                	mov    DWORD PTR [eax],edx
c00146de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00146ec:	90                   	nop
c00146ed:	83 c4 0c             	add    esp,0xc
c00146f0:	c3                   	ret    
c00146f1:	90                   	nop

c00146f2 <FPU::~FPU()>:
c00146f2:	83 ec 0c             	sub    esp,0xc
c00146f5:	ba 48 ab 02 c0       	mov    edx,0xc002ab48
c00146fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146fe:	89 10                	mov    DWORD PTR [eax],edx
c0014700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014704:	83 ec 0c             	sub    esp,0xc
c0014707:	50                   	push   eax
c0014708:	e8 7f f9 ff ff       	call   c001408c <Device::~Device()>
c001470d:	83 c4 10             	add    esp,0x10
c0014710:	90                   	nop
c0014711:	83 c4 0c             	add    esp,0xc
c0014714:	c3                   	ret    
c0014715:	90                   	nop

c0014716 <FPU::~FPU()>:
c0014716:	83 ec 0c             	sub    esp,0xc
c0014719:	83 ec 0c             	sub    esp,0xc
c001471c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014720:	e8 cd ff ff ff       	call   c00146f2 <FPU::~FPU()>
c0014725:	83 c4 10             	add    esp,0x10
c0014728:	83 ec 08             	sub    esp,0x8
c001472b:	68 58 01 00 00       	push   0x158
c0014730:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014734:	e8 7b e5 ff ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0014739:	83 c4 10             	add    esp,0x10
c001473c:	83 c4 0c             	add    esp,0xc
c001473f:	c3                   	ret    

c0014740 <setupFPU()>:
c0014740:	53                   	push   ebx
c0014741:	83 ec 08             	sub    esp,0x8
c0014744:	8b 15 28 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e228
c001474a:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014751:	74 19                	je     c001476c <setupFPU()+0x2c>
c0014753:	83 ec 0c             	sub    esp,0xc
c0014756:	68 58 01 00 00       	push   0x158
c001475b:	e8 e0 b0 ff ff       	call   c000f840 <malloc>
c0014760:	89 c3                	mov    ebx,eax
c0014762:	89 04 24             	mov    DWORD PTR [esp],eax
c0014765:	e8 60 0c 01 00       	call   c00253ca <AVX::AVX()>
c001476a:	eb 5b                	jmp    c00147c7 <setupFPU()+0x87>
c001476c:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014772:	84 c0                	test   al,al
c0014774:	79 19                	jns    c001478f <setupFPU()+0x4f>
c0014776:	83 ec 0c             	sub    esp,0xc
c0014779:	68 58 01 00 00       	push   0x158
c001477e:	e8 bd b0 ff ff       	call   c000f840 <malloc>
c0014783:	89 c3                	mov    ebx,eax
c0014785:	89 04 24             	mov    DWORD PTR [esp],eax
c0014788:	e8 63 0d 01 00       	call   c00254f0 <SSE::SSE()>
c001478d:	eb 38                	jmp    c00147c7 <setupFPU()+0x87>
c001478f:	a8 20                	test   al,0x20
c0014791:	74 19                	je     c00147ac <setupFPU()+0x6c>
c0014793:	83 ec 0c             	sub    esp,0xc
c0014796:	68 58 01 00 00       	push   0x158
c001479b:	e8 a0 b0 ff ff       	call   c000f840 <malloc>
c00147a0:	89 c3                	mov    ebx,eax
c00147a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00147a5:	e8 b0 0c 01 00       	call   c002545a <MMX::MMX()>
c00147aa:	eb 1b                	jmp    c00147c7 <setupFPU()+0x87>
c00147ac:	a8 10                	test   al,0x10
c00147ae:	74 1c                	je     c00147cc <setupFPU()+0x8c>
c00147b0:	83 ec 0c             	sub    esp,0xc
c00147b3:	68 58 01 00 00       	push   0x158
c00147b8:	e8 83 b0 ff ff       	call   c000f840 <malloc>
c00147bd:	89 c3                	mov    ebx,eax
c00147bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00147c2:	e8 b7 0d 01 00       	call   c002557e <x87::x87()>
c00147c7:	83 c4 10             	add    esp,0x10
c00147ca:	eb 24                	jmp    c00147f0 <setupFPU()+0xb0>
c00147cc:	83 e0 ef             	and    eax,0xffffffef
c00147cf:	83 ec 0c             	sub    esp,0xc
c00147d2:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00147d8:	68 34 ab 02 c0       	push   0xc002ab34
c00147dd:	e8 b2 e5 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00147e2:	0f 20 c0             	mov    eax,cr0
c00147e5:	83 c8 04             	or     eax,0x4
c00147e8:	0f 22 c0             	mov    cr0,eax
c00147eb:	31 db                	xor    ebx,ebx
c00147ed:	83 c4 10             	add    esp,0x10
c00147f0:	89 d8                	mov    eax,ebx
c00147f2:	83 c4 08             	add    esp,0x8
c00147f5:	5b                   	pop    ebx
c00147f6:	c3                   	ret    
c00147f7:	90                   	nop

c00147f8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00147f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00147fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014800:	c1 e0 04             	shl    eax,0x4
c0014803:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014807:	8d 50 10             	lea    edx,[eax+0x10]
c001480a:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014810:	74 08                	je     c001481a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014812:	83 c0 04             	add    eax,0x4
c0014815:	39 d0                	cmp    eax,edx
c0014817:	75 f1                	jne    c001480a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014819:	c3                   	ret    
c001481a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014824:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001482e:	eb e2                	jmp    c0014812 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014830 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014830:	57                   	push   edi
c0014831:	31 c0                	xor    eax,eax
c0014833:	56                   	push   esi
c0014834:	53                   	push   ebx
c0014835:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014839:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001483d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014841:	89 da                	mov    edx,ebx
c0014843:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014847:	c1 e2 04             	shl    edx,0x4
c001484a:	01 ca                	add    edx,ecx
c001484c:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014854:	74 16                	je     c001486c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014856:	40                   	inc    eax
c0014857:	83 f8 04             	cmp    eax,0x4
c001485a:	75 f0                	jne    c001484c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001485c:	c7 44 24 10 78 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ab78
c0014864:	5b                   	pop    ebx
c0014865:	5e                   	pop    esi
c0014866:	5f                   	pop    edi
c0014867:	e9 d1 5b 00 00       	jmp    c001a43d <Krnl::panic(char const*)>
c001486c:	8d 04 98             	lea    eax,[eax+ebx*4]
c001486f:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014872:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014878:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001487e:	5b                   	pop    ebx
c001487f:	5e                   	pop    esi
c0014880:	5f                   	pop    edi
c0014881:	c3                   	ret    

c0014882 <doubleFault(regs*, void*)>:
c0014882:	55                   	push   ebp
c0014883:	89 e5                	mov    ebp,esp
c0014885:	83 ec 08             	sub    esp,0x8
c0014888:	83 ec 0c             	sub    esp,0xc
c001488b:	68 b3 ab 02 c0       	push   0xc002abb3
c0014890:	e8 a8 5b 00 00       	call   c001a43d <Krnl::panic(char const*)>
c0014895:	83 c4 10             	add    esp,0x10
c0014898:	90                   	nop
c0014899:	c9                   	leave  
c001489a:	c3                   	ret    
c001489b:	90                   	nop

c001489c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001489c:	56                   	push   esi
c001489d:	53                   	push   ebx
c001489e:	50                   	push   eax
c001489f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00148a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00148a7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00148ac:	75 35                	jne    c00148e3 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00148ae:	8d 43 20             	lea    eax,[ebx+0x20]
c00148b1:	31 d2                	xor    edx,edx
c00148b3:	89 c1                	mov    ecx,eax
c00148b5:	c1 e1 04             	shl    ecx,0x4
c00148b8:	01 f1                	add    ecx,esi
c00148ba:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00148c2:	74 3e                	je     c0014902 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00148c4:	42                   	inc    edx
c00148c5:	83 fa 04             	cmp    edx,0x4
c00148c8:	75 f0                	jne    c00148ba <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00148ca:	83 ec 0c             	sub    esp,0xc
c00148cd:	68 f8 ab 02 c0       	push   0xc002abf8
c00148d2:	e8 66 5b 00 00       	call   c001a43d <Krnl::panic(char const*)>
c00148d7:	83 c4 10             	add    esp,0x10
c00148da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00148df:	5a                   	pop    edx
c00148e0:	5b                   	pop    ebx
c00148e1:	5e                   	pop    esi
c00148e2:	c3                   	ret    
c00148e3:	83 ec 0c             	sub    esp,0xc
c00148e6:	56                   	push   esi
c00148e7:	e8 ba fb ff ff       	call   c00144a6 <Device::getName()>
c00148ec:	83 c4 10             	add    esp,0x10
c00148ef:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00148f2:	75 ba                	jne    c00148ae <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00148f4:	83 fb 0f             	cmp    ebx,0xf
c00148f7:	7f 29                	jg     c0014922 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00148f9:	0f b6 9b 80 d4 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2b80]
c0014900:	eb ac                	jmp    c00148ae <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014902:	8d 04 82             	lea    eax,[edx+eax*4]
c0014905:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014909:	8d 04 86             	lea    eax,[esi+eax*4]
c001490c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014912:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014916:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001491c:	89 d8                	mov    eax,ebx
c001491e:	5a                   	pop    edx
c001491f:	5b                   	pop    ebx
c0014920:	5e                   	pop    esi
c0014921:	c3                   	ret    
c0014922:	83 ec 0c             	sub    esp,0xc
c0014925:	68 c0 ab 02 c0       	push   0xc002abc0
c001492a:	e8 0e 5b 00 00       	call   c001a43d <Krnl::panic(char const*)>
c001492f:	83 c4 10             	add    esp,0x10
c0014932:	e9 77 ff ff ff       	jmp    c00148ae <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014937:	90                   	nop

c0014938 <InterruptController::clearAllHandlers(int, bool)>:
c0014938:	56                   	push   esi
c0014939:	53                   	push   ebx
c001493a:	52                   	push   edx
c001493b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001493f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014943:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014948:	75 61                	jne    c00149ab <InterruptController::clearAllHandlers(int, bool)+0x73>
c001494a:	8d 46 20             	lea    eax,[esi+0x20]
c001494d:	c1 e6 04             	shl    esi,0x4
c0014950:	c1 e0 04             	shl    eax,0x4
c0014953:	01 de                	add    esi,ebx
c0014955:	01 d8                	add    eax,ebx
c0014957:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014961:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c001496b:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014975:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001497f:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014989:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014993:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c001499d:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00149a7:	58                   	pop    eax
c00149a8:	5b                   	pop    ebx
c00149a9:	5e                   	pop    esi
c00149aa:	c3                   	ret    
c00149ab:	83 ec 0c             	sub    esp,0xc
c00149ae:	53                   	push   ebx
c00149af:	e8 f2 fa ff ff       	call   c00144a6 <Device::getName()>
c00149b4:	83 c4 10             	add    esp,0x10
c00149b7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00149ba:	75 8e                	jne    c001494a <InterruptController::clearAllHandlers(int, bool)+0x12>
c00149bc:	83 fe 0f             	cmp    esi,0xf
c00149bf:	7f 09                	jg     c00149ca <InterruptController::clearAllHandlers(int, bool)+0x92>
c00149c1:	0f b6 b6 80 d4 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2b80]
c00149c8:	eb 80                	jmp    c001494a <InterruptController::clearAllHandlers(int, bool)+0x12>
c00149ca:	83 ec 0c             	sub    esp,0xc
c00149cd:	68 34 ac 02 c0       	push   0xc002ac34
c00149d2:	e8 66 5a 00 00       	call   c001a43d <Krnl::panic(char const*)>
c00149d7:	83 c4 10             	add    esp,0x10
c00149da:	e9 6b ff ff ff       	jmp    c001494a <InterruptController::clearAllHandlers(int, bool)+0x12>
c00149df:	90                   	nop

c00149e0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00149e0:	56                   	push   esi
c00149e1:	53                   	push   ebx
c00149e2:	52                   	push   edx
c00149e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00149eb:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00149f0:	75 3a                	jne    c0014a2c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00149f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00149f6:	8d 50 20             	lea    edx,[eax+0x20]
c00149f9:	c1 e2 04             	shl    edx,0x4
c00149fc:	8d 04 16             	lea    eax,[esi+edx*1]
c00149ff:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014a03:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014a09:	74 0b                	je     c0014a16 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014a0b:	83 c0 04             	add    eax,0x4
c0014a0e:	39 d0                	cmp    eax,edx
c0014a10:	75 f1                	jne    c0014a03 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014a12:	58                   	pop    eax
c0014a13:	5b                   	pop    ebx
c0014a14:	5e                   	pop    esi
c0014a15:	c3                   	ret    
c0014a16:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014a20:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014a2a:	eb df                	jmp    c0014a0b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014a2c:	83 ec 0c             	sub    esp,0xc
c0014a2f:	56                   	push   esi
c0014a30:	e8 71 fa ff ff       	call   c00144a6 <Device::getName()>
c0014a35:	83 c4 10             	add    esp,0x10
c0014a38:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a3b:	75 b5                	jne    c00149f2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014a3d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014a42:	7f 11                	jg     c0014a55 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014a44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a48:	0f b6 80 80 d4 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2b80]
c0014a4f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a53:	eb 9d                	jmp    c00149f2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014a55:	83 ec 0c             	sub    esp,0xc
c0014a58:	68 34 ac 02 c0       	push   0xc002ac34
c0014a5d:	e8 db 59 00 00       	call   c001a43d <Krnl::panic(char const*)>
c0014a62:	83 c4 10             	add    esp,0x10
c0014a65:	eb 8b                	jmp    c00149f2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014a67 <nmiHandler(regs*, void*)>:
c0014a67:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0014a6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014a70:	e9 17 a5 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014a75 <int_handler>:
c0014a75:	55                   	push   ebp
c0014a76:	57                   	push   edi
c0014a77:	56                   	push   esi
c0014a78:	53                   	push   ebx
c0014a79:	83 ec 0c             	sub    esp,0xc
c0014a7c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014a80:	80 3d 84 0d 03 c0 00 	cmp    BYTE PTR ds:0xc0030d84,0x0
c0014a87:	74 0b                	je     c0014a94 <int_handler+0x1f>
c0014a89:	fa                   	cli    
c0014a8a:	f4                   	hlt    
c0014a8b:	80 3d 84 0d 03 c0 00 	cmp    BYTE PTR ds:0xc0030d84,0x0
c0014a92:	75 f5                	jne    c0014a89 <int_handler+0x14>
c0014a94:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0014a99:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014a9c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014aa2:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014aa8:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014aab:	83 f8 17             	cmp    eax,0x17
c0014aae:	77 13                	ja     c0014ac3 <int_handler+0x4e>
c0014ab0:	83 ec 08             	sub    esp,0x8
c0014ab3:	8b 17                	mov    edx,DWORD PTR [edi]
c0014ab5:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014ab8:	0f b6 c0             	movzx  eax,al
c0014abb:	50                   	push   eax
c0014abc:	57                   	push   edi
c0014abd:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014ac0:	83 c4 10             	add    esp,0x10
c0014ac3:	83 c3 15             	add    ebx,0x15
c0014ac6:	c1 e3 04             	shl    ebx,0x4
c0014ac9:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014acd:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014ad4:	31 db                	xor    ebx,ebx
c0014ad6:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014ada:	85 c0                	test   eax,eax
c0014adc:	74 13                	je     c0014af1 <int_handler+0x7c>
c0014ade:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014ae1:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014ae5:	74 1c                	je     c0014b03 <int_handler+0x8e>
c0014ae7:	83 ec 08             	sub    esp,0x8
c0014aea:	52                   	push   edx
c0014aeb:	56                   	push   esi
c0014aec:	ff d0                	call   eax
c0014aee:	83 c4 10             	add    esp,0x10
c0014af1:	43                   	inc    ebx
c0014af2:	83 fb 04             	cmp    ebx,0x4
c0014af5:	75 df                	jne    c0014ad6 <int_handler+0x61>
c0014af7:	83 c4 0c             	add    esp,0xc
c0014afa:	31 c0                	xor    eax,eax
c0014afc:	5b                   	pop    ebx
c0014afd:	31 d2                	xor    edx,edx
c0014aff:	5e                   	pop    esi
c0014b00:	5f                   	pop    edi
c0014b01:	5d                   	pop    ebp
c0014b02:	c3                   	ret    
c0014b03:	83 ec 08             	sub    esp,0x8
c0014b06:	52                   	push   edx
c0014b07:	56                   	push   esi
c0014b08:	ff d0                	call   eax
c0014b0a:	83 c4 10             	add    esp,0x10
c0014b0d:	83 c4 0c             	add    esp,0xc
c0014b10:	5b                   	pop    ebx
c0014b11:	5e                   	pop    esi
c0014b12:	5f                   	pop    edi
c0014b13:	5d                   	pop    ebp
c0014b14:	c3                   	ret    
c0014b15:	90                   	nop

c0014b16 <InterruptController::InterruptController(char const*)>:
c0014b16:	83 ec 1c             	sub    esp,0x1c
c0014b19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b1d:	83 ec 08             	sub    esp,0x8
c0014b20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b24:	50                   	push   eax
c0014b25:	e8 80 f8 ff ff       	call   c00143aa <Device::Device(char const*)>
c0014b2a:	83 c4 10             	add    esp,0x10
c0014b2d:	ba 00 af 02 c0       	mov    edx,0xc002af00
c0014b32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b36:	89 10                	mov    DWORD PTR [eax],edx
c0014b38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b3c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014b46:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014b4e:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014b56:	7f 5e                	jg     c0014bb6 <InterruptController::InterruptController(char const*)+0xa0>
c0014b58:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014b60:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014b65:	7f 49                	jg     c0014bb0 <InterruptController::InterruptController(char const*)+0x9a>
c0014b67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014b6f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014b76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014b7a:	01 ca                	add    edx,ecx
c0014b7c:	83 c2 54             	add    edx,0x54
c0014b7f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014b8f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014b96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014b9a:	01 ca                	add    edx,ecx
c0014b9c:	81 c2 54 04 00 00    	add    edx,0x454
c0014ba2:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014baa:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014bae:	eb b0                	jmp    c0014b60 <InterruptController::InterruptController(char const*)+0x4a>
c0014bb0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014bb4:	eb 98                	jmp    c0014b4e <InterruptController::InterruptController(char const*)+0x38>
c0014bb6:	90                   	nop
c0014bb7:	83 c4 1c             	add    esp,0x1c
c0014bba:	c3                   	ret    
c0014bbb:	90                   	nop

c0014bbc <InterruptController::~InterruptController()>:
c0014bbc:	83 ec 0c             	sub    esp,0xc
c0014bbf:	ba 00 af 02 c0       	mov    edx,0xc002af00
c0014bc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014bc8:	89 10                	mov    DWORD PTR [eax],edx
c0014bca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014bce:	83 ec 0c             	sub    esp,0xc
c0014bd1:	50                   	push   eax
c0014bd2:	e8 b5 f4 ff ff       	call   c001408c <Device::~Device()>
c0014bd7:	83 c4 10             	add    esp,0x10
c0014bda:	90                   	nop
c0014bdb:	83 c4 0c             	add    esp,0xc
c0014bde:	c3                   	ret    
c0014bdf:	90                   	nop

c0014be0 <InterruptController::~InterruptController()>:
c0014be0:	83 ec 0c             	sub    esp,0xc
c0014be3:	83 ec 0c             	sub    esp,0xc
c0014be6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bea:	e8 cd ff ff ff       	call   c0014bbc <InterruptController::~InterruptController()>
c0014bef:	83 c4 10             	add    esp,0x10
c0014bf2:	83 ec 08             	sub    esp,0x8
c0014bf5:	68 58 21 00 00       	push   0x2158
c0014bfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bfe:	e8 b1 e0 ff ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0014c03:	83 c4 10             	add    esp,0x10
c0014c06:	83 c4 0c             	add    esp,0xc
c0014c09:	c3                   	ret    

c0014c0a <displayDebugInfo(regs*)>:
c0014c0a:	55                   	push   ebp
c0014c0b:	57                   	push   edi
c0014c0c:	56                   	push   esi
c0014c0d:	53                   	push   ebx
c0014c0e:	83 ec 24             	sub    esp,0x24
c0014c11:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014c15:	0f 20 c2             	mov    edx,cr0
c0014c18:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014c1c:	0f 20 d7             	mov    edi,cr2
c0014c1f:	0f 20 de             	mov    esi,cr3
c0014c22:	0f 20 e5             	mov    ebp,cr4
c0014c25:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014c28:	68 6e ac 02 c0       	push   0xc002ac6e
c0014c2d:	e8 62 e1 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0014c32:	59                   	pop    ecx
c0014c33:	58                   	pop    eax
c0014c34:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014c37:	68 79 ac 02 c0       	push   0xc002ac79
c0014c3c:	e8 53 e1 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0014c41:	58                   	pop    eax
c0014c42:	5a                   	pop    edx
c0014c43:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014c46:	68 84 ac 02 c0       	push   0xc002ac84
c0014c4b:	e8 44 e1 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0014c50:	59                   	pop    ecx
c0014c51:	58                   	pop    eax
c0014c52:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014c55:	68 8f ac 02 c0       	push   0xc002ac8f
c0014c5a:	e8 35 e1 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0014c5f:	58                   	pop    eax
c0014c60:	5a                   	pop    edx
c0014c61:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014c64:	68 9a ac 02 c0       	push   0xc002ac9a
c0014c69:	e8 26 e1 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0014c6e:	59                   	pop    ecx
c0014c6f:	58                   	pop    eax
c0014c70:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014c73:	68 a5 ac 02 c0       	push   0xc002aca5
c0014c78:	e8 17 e1 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0014c7d:	58                   	pop    eax
c0014c7e:	5a                   	pop    edx
c0014c7f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014c82:	68 b0 ac 02 c0       	push   0xc002acb0
c0014c87:	e8 08 e1 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0014c8c:	59                   	pop    ecx
c0014c8d:	58                   	pop    eax
c0014c8e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014c91:	68 bb ac 02 c0       	push   0xc002acbb
c0014c96:	e8 f9 e0 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0014c9b:	58                   	pop    eax
c0014c9c:	5a                   	pop    edx
c0014c9d:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014ca0:	68 c6 ac 02 c0       	push   0xc002acc6
c0014ca5:	e8 ea e0 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0014caa:	59                   	pop    ecx
c0014cab:	58                   	pop    eax
c0014cac:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014caf:	68 d5 ac 02 c0       	push   0xc002acd5
c0014cb4:	e8 db e0 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0014cb9:	58                   	pop    eax
c0014cba:	5a                   	pop    edx
c0014cbb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014cbe:	68 e0 ac 02 c0       	push   0xc002ace0
c0014cc3:	e8 cc e0 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0014cc8:	59                   	pop    ecx
c0014cc9:	58                   	pop    eax
c0014cca:	57                   	push   edi
c0014ccb:	68 eb ac 02 c0       	push   0xc002aceb
c0014cd0:	e8 bf e0 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0014cd5:	58                   	pop    eax
c0014cd6:	5a                   	pop    edx
c0014cd7:	56                   	push   esi
c0014cd8:	68 f6 ac 02 c0       	push   0xc002acf6
c0014cdd:	e8 b2 e0 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0014ce2:	59                   	pop    ecx
c0014ce3:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014ce8:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014cee:	e8 f6 bf ff ff       	call   c0010ce9 <setActiveTerminal(VgaText*)>
c0014cf3:	58                   	pop    eax
c0014cf4:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014cf7:	5a                   	pop    edx
c0014cf8:	c1 e0 05             	shl    eax,0x5
c0014cfb:	05 e0 d1 02 c0       	add    eax,0xc002d1e0
c0014d00:	50                   	push   eax
c0014d01:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014d06:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d0c:	e8 f7 c3 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c0014d11:	59                   	pop    ecx
c0014d12:	58                   	pop    eax
c0014d13:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014d18:	68 01 ad 02 c0       	push   0xc002ad01
c0014d1d:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d23:	e8 e0 c3 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c0014d28:	58                   	pop    eax
c0014d29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d2e:	5a                   	pop    edx
c0014d2f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014d32:	83 c0 0c             	add    eax,0xc
c0014d35:	50                   	push   eax
c0014d36:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014d3b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d41:	e8 c2 c3 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c0014d46:	59                   	pop    ecx
c0014d47:	58                   	pop    eax
c0014d48:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014d4d:	68 0a ad 02 c0       	push   0xc002ad0a
c0014d52:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d58:	e8 ab c3 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c0014d5d:	58                   	pop    eax
c0014d5e:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014d63:	5a                   	pop    edx
c0014d64:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d67:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d6d:	e8 bc c3 ff ff       	call   c001112e <VgaText::putx(unsigned int)>
c0014d72:	59                   	pop    ecx
c0014d73:	58                   	pop    eax
c0014d74:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014d79:	68 12 ad 02 c0       	push   0xc002ad12
c0014d7e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d84:	e8 7f c3 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c0014d89:	58                   	pop    eax
c0014d8a:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014d8f:	5a                   	pop    edx
c0014d90:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014d93:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d99:	e8 90 c3 ff ff       	call   c001112e <VgaText::putx(unsigned int)>
c0014d9e:	59                   	pop    ecx
c0014d9f:	58                   	pop    eax
c0014da0:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014da5:	68 1a ad 02 c0       	push   0xc002ad1a
c0014daa:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014db0:	e8 53 c3 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c0014db5:	58                   	pop    eax
c0014db6:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014dbb:	5a                   	pop    edx
c0014dbc:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014dbf:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014dc5:	e8 64 c3 ff ff       	call   c001112e <VgaText::putx(unsigned int)>
c0014dca:	59                   	pop    ecx
c0014dcb:	58                   	pop    eax
c0014dcc:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014dd1:	68 22 ad 02 c0       	push   0xc002ad22
c0014dd6:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ddc:	e8 27 c3 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c0014de1:	58                   	pop    eax
c0014de2:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014de7:	5a                   	pop    edx
c0014de8:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014deb:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014df1:	e8 38 c3 ff ff       	call   c001112e <VgaText::putx(unsigned int)>
c0014df6:	59                   	pop    ecx
c0014df7:	58                   	pop    eax
c0014df8:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014dfd:	68 2a ad 02 c0       	push   0xc002ad2a
c0014e02:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e08:	e8 fb c2 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c0014e0d:	58                   	pop    eax
c0014e0e:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014e13:	5a                   	pop    edx
c0014e14:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e17:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e1d:	e8 0c c3 ff ff       	call   c001112e <VgaText::putx(unsigned int)>
c0014e22:	59                   	pop    ecx
c0014e23:	58                   	pop    eax
c0014e24:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014e29:	68 32 ad 02 c0       	push   0xc002ad32
c0014e2e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e34:	e8 cf c2 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c0014e39:	58                   	pop    eax
c0014e3a:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014e3f:	5a                   	pop    edx
c0014e40:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014e43:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e49:	e8 e0 c2 ff ff       	call   c001112e <VgaText::putx(unsigned int)>
c0014e4e:	59                   	pop    ecx
c0014e4f:	58                   	pop    eax
c0014e50:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014e55:	68 3a ad 02 c0       	push   0xc002ad3a
c0014e5a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e60:	e8 a3 c2 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c0014e65:	58                   	pop    eax
c0014e66:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014e6b:	5a                   	pop    edx
c0014e6c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014e70:	52                   	push   edx
c0014e71:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e77:	e8 b2 c2 ff ff       	call   c001112e <VgaText::putx(unsigned int)>
c0014e7c:	59                   	pop    ecx
c0014e7d:	58                   	pop    eax
c0014e7e:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014e83:	68 43 ad 02 c0       	push   0xc002ad43
c0014e88:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e8e:	e8 75 c2 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c0014e93:	58                   	pop    eax
c0014e94:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014e99:	5a                   	pop    edx
c0014e9a:	57                   	push   edi
c0014e9b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ea1:	e8 88 c2 ff ff       	call   c001112e <VgaText::putx(unsigned int)>
c0014ea6:	59                   	pop    ecx
c0014ea7:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014eac:	5f                   	pop    edi
c0014ead:	68 4b ad 02 c0       	push   0xc002ad4b
c0014eb2:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014eb8:	e8 4b c2 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c0014ebd:	58                   	pop    eax
c0014ebe:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014ec3:	5a                   	pop    edx
c0014ec4:	56                   	push   esi
c0014ec5:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ecb:	e8 5e c2 ff ff       	call   c001112e <VgaText::putx(unsigned int)>
c0014ed0:	59                   	pop    ecx
c0014ed1:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014ed6:	5e                   	pop    esi
c0014ed7:	68 53 ad 02 c0       	push   0xc002ad53
c0014edc:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ee2:	e8 21 c2 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c0014ee7:	5f                   	pop    edi
c0014ee8:	58                   	pop    eax
c0014ee9:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014eee:	55                   	push   ebp
c0014eef:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ef5:	e8 34 c2 ff ff       	call   c001112e <VgaText::putx(unsigned int)>
c0014efa:	58                   	pop    eax
c0014efb:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014f00:	5a                   	pop    edx
c0014f01:	68 5b ad 02 c0       	push   0xc002ad5b
c0014f06:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f0c:	e8 f7 c1 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c0014f11:	0f 21 c0             	mov    eax,db0
c0014f14:	59                   	pop    ecx
c0014f15:	5e                   	pop    esi
c0014f16:	50                   	push   eax
c0014f17:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014f1c:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f22:	e8 07 c2 ff ff       	call   c001112e <VgaText::putx(unsigned int)>
c0014f27:	5f                   	pop    edi
c0014f28:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014f2d:	5d                   	pop    ebp
c0014f2e:	68 64 ad 02 c0       	push   0xc002ad64
c0014f33:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f39:	e8 ca c1 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c0014f3e:	0f 21 c8             	mov    eax,db1
c0014f41:	5a                   	pop    edx
c0014f42:	59                   	pop    ecx
c0014f43:	50                   	push   eax
c0014f44:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014f49:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f4f:	e8 da c1 ff ff       	call   c001112e <VgaText::putx(unsigned int)>
c0014f54:	5e                   	pop    esi
c0014f55:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014f5a:	5f                   	pop    edi
c0014f5b:	68 6c ad 02 c0       	push   0xc002ad6c
c0014f60:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f66:	e8 9d c1 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c0014f6b:	0f 21 d0             	mov    eax,db2
c0014f6e:	5d                   	pop    ebp
c0014f6f:	5a                   	pop    edx
c0014f70:	50                   	push   eax
c0014f71:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014f76:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f7c:	e8 ad c1 ff ff       	call   c001112e <VgaText::putx(unsigned int)>
c0014f81:	59                   	pop    ecx
c0014f82:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014f87:	5e                   	pop    esi
c0014f88:	68 74 ad 02 c0       	push   0xc002ad74
c0014f8d:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f93:	e8 70 c1 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c0014f98:	0f 21 d8             	mov    eax,db3
c0014f9b:	5f                   	pop    edi
c0014f9c:	5d                   	pop    ebp
c0014f9d:	50                   	push   eax
c0014f9e:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014fa3:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fa9:	e8 80 c1 ff ff       	call   c001112e <VgaText::putx(unsigned int)>
c0014fae:	58                   	pop    eax
c0014faf:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014fb4:	5a                   	pop    edx
c0014fb5:	68 7c ad 02 c0       	push   0xc002ad7c
c0014fba:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fc0:	e8 43 c1 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c0014fc5:	0f 21 f0             	mov    eax,db6
c0014fc8:	59                   	pop    ecx
c0014fc9:	5e                   	pop    esi
c0014fca:	50                   	push   eax
c0014fcb:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014fd0:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fd6:	e8 53 c1 ff ff       	call   c001112e <VgaText::putx(unsigned int)>
c0014fdb:	5f                   	pop    edi
c0014fdc:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014fe1:	5d                   	pop    ebp
c0014fe2:	68 84 ad 02 c0       	push   0xc002ad84
c0014fe7:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fed:	e8 16 c1 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c0014ff2:	0f 21 f8             	mov    eax,db7
c0014ff5:	5a                   	pop    edx
c0014ff6:	59                   	pop    ecx
c0014ff7:	50                   	push   eax
c0014ff8:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0014ffd:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015003:	e8 26 c1 ff ff       	call   c001112e <VgaText::putx(unsigned int)>
c0015008:	5e                   	pop    esi
c0015009:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001500c:	e8 0e 85 00 00       	call   c001d51f <Thr::getDriverNameFromAddress(unsigned long)>
c0015011:	83 c4 10             	add    esp,0x10
c0015014:	85 c0                	test   eax,eax
c0015016:	74 7d                	je     c0015095 <displayDebugInfo(regs*)+0x48b>
c0015018:	89 c6                	mov    esi,eax
c001501a:	50                   	push   eax
c001501b:	50                   	push   eax
c001501c:	56                   	push   esi
c001501d:	68 8c ad 02 c0       	push   0xc002ad8c
c0015022:	e8 6d dd ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0015027:	5a                   	pop    edx
c0015028:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001502d:	59                   	pop    ecx
c001502e:	68 9a ad 02 c0       	push   0xc002ad9a
c0015033:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015039:	e8 ca c0 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c001503e:	5f                   	pop    edi
c001503f:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0015044:	5d                   	pop    ebp
c0015045:	56                   	push   esi
c0015046:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001504c:	e8 b7 c0 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c0015051:	58                   	pop    eax
c0015052:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0015057:	5a                   	pop    edx
c0015058:	68 a6 ad 02 c0       	push   0xc002ada6
c001505d:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015063:	e8 a0 c0 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c0015068:	59                   	pop    ecx
c0015069:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001506e:	8b b8 26 19 00 00    	mov    edi,DWORD PTR [eax+0x1926]
c0015074:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015077:	e8 da 84 00 00       	call   c001d556 <Thr::getDriverOffsetFromAddress(unsigned long)>
c001507c:	5b                   	pop    ebx
c001507d:	5d                   	pop    ebp
c001507e:	50                   	push   eax
c001507f:	57                   	push   edi
c0015080:	e8 a9 c0 ff ff       	call   c001112e <VgaText::putx(unsigned int)>
c0015085:	58                   	pop    eax
c0015086:	5a                   	pop    edx
c0015087:	56                   	push   esi
c0015088:	68 b2 ad 02 c0       	push   0xc002adb2
c001508d:	e8 02 dd ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0015092:	83 c4 10             	add    esp,0x10
c0015095:	fa                   	cli    
c0015096:	f4                   	hlt    
c0015097:	eb fe                	jmp    c0015097 <displayDebugInfo(regs*)+0x48d>

c0015099 <x87EmulHandler(regs*, void*)>:
c0015099:	53                   	push   ebx
c001509a:	83 ec 14             	sub    esp,0x14
c001509d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00150a1:	53                   	push   ebx
c00150a2:	e8 51 a8 00 00       	call   c001f8f8 <Vm::x87Handler(regs*)>
c00150a7:	83 c4 10             	add    esp,0x10
c00150aa:	84 c0                	test   al,al
c00150ac:	74 05                	je     c00150b3 <x87EmulHandler(regs*, void*)+0x1a>
c00150ae:	83 c4 08             	add    esp,0x8
c00150b1:	5b                   	pop    ebx
c00150b2:	c3                   	ret    
c00150b3:	83 ec 0c             	sub    esp,0xc
c00150b6:	68 c2 ad 02 c0       	push   0xc002adc2
c00150bb:	e8 d4 dc ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00150c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150c3:	e8 42 fb ff ff       	call   c0014c0a <displayDebugInfo(regs*)>

c00150c8 <gpFault(regs*, void*)>:
c00150c8:	53                   	push   ebx
c00150c9:	83 ec 14             	sub    esp,0x14
c00150cc:	c7 05 d8 e3 02 c0 47 ec 01 c0 	mov    DWORD PTR ds:0xc002e3d8,0xc001ec47
c00150d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00150da:	53                   	push   ebx
c00150db:	e8 67 9b 00 00       	call   c001ec47 <Vm::faultHandler(regs*)>
c00150e0:	83 c4 10             	add    esp,0x10
c00150e3:	84 c0                	test   al,al
c00150e5:	74 05                	je     c00150ec <gpFault(regs*, void*)+0x24>
c00150e7:	83 c4 08             	add    esp,0x8
c00150ea:	5b                   	pop    ebx
c00150eb:	c3                   	ret    
c00150ec:	83 ec 0c             	sub    esp,0xc
c00150ef:	68 d8 ad 02 c0       	push   0xc002add8
c00150f4:	e8 9b dc ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00150f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150fc:	e8 09 fb ff ff       	call   c0014c0a <displayDebugInfo(regs*)>

c0015101 <pgFault(regs*, void*)>:
c0015101:	83 ec 14             	sub    esp,0x14
c0015104:	0f 20 d0             	mov    eax,cr2
c0015107:	50                   	push   eax
c0015108:	68 f3 ad 02 c0       	push   0xc002adf3
c001510d:	e8 82 dc ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0015112:	c7 04 24 04 ae 02 c0 	mov    DWORD PTR [esp],0xc002ae04
c0015119:	e8 76 dc ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001511e:	58                   	pop    eax
c001511f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015123:	e8 e2 fa ff ff       	call   c0014c0a <displayDebugInfo(regs*)>

c0015128 <otherISRHandler(regs*, void*)>:
c0015128:	53                   	push   ebx
c0015129:	83 ec 0c             	sub    esp,0xc
c001512c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015130:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015133:	50                   	push   eax
c0015134:	50                   	push   eax
c0015135:	68 16 ae 02 c0       	push   0xc002ae16
c001513a:	e8 55 dc ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001513f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015142:	e8 c3 fa ff ff       	call   c0014c0a <displayDebugInfo(regs*)>

c0015147 <opcodeFault(regs*, void*)>:
c0015147:	55                   	push   ebp
c0015148:	89 e5                	mov    ebp,esp
c001514a:	56                   	push   esi
c001514b:	53                   	push   ebx
c001514c:	83 ec 40             	sub    esp,0x40
c001514f:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0015154:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001515a:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015160:	84 c0                	test   al,al
c0015162:	74 24                	je     c0015188 <opcodeFault(regs*, void*)+0x41>
c0015164:	83 ec 0c             	sub    esp,0xc
c0015167:	68 34 ae 02 c0       	push   0xc002ae34
c001516c:	e8 23 dc ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0015171:	83 c4 10             	add    esp,0x10
c0015174:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015177:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001517a:	8d 50 19             	lea    edx,[eax+0x19]
c001517d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015180:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015183:	e9 be 05 00 00       	jmp    c0015746 <opcodeFault(regs*, void*)+0x5ff>
c0015188:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001518b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001518e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015191:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015195:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015199:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001519c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001519f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00151a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151a5:	8a 00                	mov    al,BYTE PTR [eax]
c00151a7:	3c f0                	cmp    al,0xf0
c00151a9:	75 17                	jne    c00151c2 <opcodeFault(regs*, void*)+0x7b>
c00151ab:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00151ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151b1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151b4:	8d 50 01             	lea    edx,[eax+0x1]
c00151b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151bd:	e9 da 00 00 00       	jmp    c001529c <opcodeFault(regs*, void*)+0x155>
c00151c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151c5:	8a 00                	mov    al,BYTE PTR [eax]
c00151c7:	3c f2                	cmp    al,0xf2
c00151c9:	74 09                	je     c00151d4 <opcodeFault(regs*, void*)+0x8d>
c00151cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151ce:	8a 00                	mov    al,BYTE PTR [eax]
c00151d0:	3c f3                	cmp    al,0xf3
c00151d2:	75 1b                	jne    c00151ef <opcodeFault(regs*, void*)+0xa8>
c00151d4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00151d8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00151db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151de:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151e1:	8d 50 01             	lea    edx,[eax+0x1]
c00151e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151ea:	e9 ad 00 00 00       	jmp    c001529c <opcodeFault(regs*, void*)+0x155>
c00151ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151f2:	8a 00                	mov    al,BYTE PTR [eax]
c00151f4:	3c 66                	cmp    al,0x66
c00151f6:	75 1f                	jne    c0015217 <opcodeFault(regs*, void*)+0xd0>
c00151f8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00151fc:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015200:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015203:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015206:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015209:	8d 50 01             	lea    edx,[eax+0x1]
c001520c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001520f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015212:	e9 85 00 00 00       	jmp    c001529c <opcodeFault(regs*, void*)+0x155>
c0015217:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001521a:	8a 00                	mov    al,BYTE PTR [eax]
c001521c:	3c 67                	cmp    al,0x67
c001521e:	75 18                	jne    c0015238 <opcodeFault(regs*, void*)+0xf1>
c0015220:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015224:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001522a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001522d:	8d 50 01             	lea    edx,[eax+0x1]
c0015230:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015233:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015236:	eb 64                	jmp    c001529c <opcodeFault(regs*, void*)+0x155>
c0015238:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001523b:	8a 00                	mov    al,BYTE PTR [eax]
c001523d:	3c 2e                	cmp    al,0x2e
c001523f:	74 09                	je     c001524a <opcodeFault(regs*, void*)+0x103>
c0015241:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015244:	8a 00                	mov    al,BYTE PTR [eax]
c0015246:	3c 3e                	cmp    al,0x3e
c0015248:	75 18                	jne    c0015262 <opcodeFault(regs*, void*)+0x11b>
c001524a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001524e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015251:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015254:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015257:	8d 50 01             	lea    edx,[eax+0x1]
c001525a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001525d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015260:	eb 3a                	jmp    c001529c <opcodeFault(regs*, void*)+0x155>
c0015262:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015265:	8a 00                	mov    al,BYTE PTR [eax]
c0015267:	3c 36                	cmp    al,0x36
c0015269:	74 1b                	je     c0015286 <opcodeFault(regs*, void*)+0x13f>
c001526b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001526e:	8a 00                	mov    al,BYTE PTR [eax]
c0015270:	3c 26                	cmp    al,0x26
c0015272:	74 12                	je     c0015286 <opcodeFault(regs*, void*)+0x13f>
c0015274:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015277:	8a 00                	mov    al,BYTE PTR [eax]
c0015279:	3c 64                	cmp    al,0x64
c001527b:	74 09                	je     c0015286 <opcodeFault(regs*, void*)+0x13f>
c001527d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015280:	8a 00                	mov    al,BYTE PTR [eax]
c0015282:	3c 65                	cmp    al,0x65
c0015284:	75 16                	jne    c001529c <opcodeFault(regs*, void*)+0x155>
c0015286:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001528a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001528d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015290:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015293:	8d 50 01             	lea    edx,[eax+0x1]
c0015296:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015299:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001529c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001529f:	8a 00                	mov    al,BYTE PTR [eax]
c00152a1:	3c 0f                	cmp    al,0xf
c00152a3:	0f 85 ad 00 00 00    	jne    c0015356 <opcodeFault(regs*, void*)+0x20f>
c00152a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ac:	40                   	inc    eax
c00152ad:	8a 00                	mov    al,BYTE PTR [eax]
c00152af:	3c c2                	cmp    al,0xc2
c00152b1:	74 0e                	je     c00152c1 <opcodeFault(regs*, void*)+0x17a>
c00152b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152b6:	40                   	inc    eax
c00152b7:	8a 00                	mov    al,BYTE PTR [eax]
c00152b9:	3c c3                	cmp    al,0xc3
c00152bb:	0f 85 95 00 00 00    	jne    c0015356 <opcodeFault(regs*, void*)+0x20f>
c00152c1:	83 ec 0c             	sub    esp,0xc
c00152c4:	68 57 ae 02 c0       	push   0xc002ae57
c00152c9:	e8 c6 da ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00152ce:	83 c4 10             	add    esp,0x10
c00152d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152d7:	8d 50 01             	lea    edx,[eax+0x1]
c00152da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152dd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152e0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e6:	8a 00                	mov    al,BYTE PTR [eax]
c00152e8:	8d 50 fe             	lea    edx,[eax-0x2]
c00152eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ee:	88 10                	mov    BYTE PTR [eax],dl
c00152f0:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00152f3:	50                   	push   eax
c00152f4:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00152f7:	50                   	push   eax
c00152f8:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00152fb:	50                   	push   eax
c00152fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00152ff:	e8 00 48 00 00       	call   c0019b04 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015304:	83 c4 10             	add    esp,0x10
c0015307:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001530a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001530d:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015310:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015313:	01 d0                	add    eax,edx
c0015315:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001531b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001531e:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015321:	48                   	dec    eax
c0015322:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015325:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015328:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001532b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001532e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015331:	83 ec 04             	sub    esp,0x4
c0015334:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015337:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001533a:	50                   	push   eax
c001533b:	e8 74 ae fe ff       	call   c00001b4 <voodooXADD>
c0015340:	83 c4 10             	add    esp,0x10
c0015343:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015346:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015349:	01 c2                	add    edx,eax
c001534b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015351:	e9 f0 03 00 00       	jmp    c0015746 <opcodeFault(regs*, void*)+0x5ff>
c0015356:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015359:	8a 00                	mov    al,BYTE PTR [eax]
c001535b:	3c 0f                	cmp    al,0xf
c001535d:	0f 85 8b 01 00 00    	jne    c00154ee <opcodeFault(regs*, void*)+0x3a7>
c0015363:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015366:	40                   	inc    eax
c0015367:	8a 00                	mov    al,BYTE PTR [eax]
c0015369:	3c c7                	cmp    al,0xc7
c001536b:	0f 86 7d 01 00 00    	jbe    c00154ee <opcodeFault(regs*, void*)+0x3a7>
c0015371:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015374:	40                   	inc    eax
c0015375:	8a 00                	mov    al,BYTE PTR [eax]
c0015377:	3c cf                	cmp    al,0xcf
c0015379:	0f 87 6f 01 00 00    	ja     c00154ee <opcodeFault(regs*, void*)+0x3a7>
c001537f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015382:	40                   	inc    eax
c0015383:	8a 00                	mov    al,BYTE PTR [eax]
c0015385:	83 c0 38             	add    eax,0x38
c0015388:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001538b:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001538f:	75 0b                	jne    c001539c <opcodeFault(regs*, void*)+0x255>
c0015391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015394:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015397:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001539a:	eb 75                	jmp    c0015411 <opcodeFault(regs*, void*)+0x2ca>
c001539c:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00153a0:	75 0b                	jne    c00153ad <opcodeFault(regs*, void*)+0x266>
c00153a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00153a8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00153ab:	eb 64                	jmp    c0015411 <opcodeFault(regs*, void*)+0x2ca>
c00153ad:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00153b1:	75 0b                	jne    c00153be <opcodeFault(regs*, void*)+0x277>
c00153b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00153b9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00153bc:	eb 53                	jmp    c0015411 <opcodeFault(regs*, void*)+0x2ca>
c00153be:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00153c2:	75 0b                	jne    c00153cf <opcodeFault(regs*, void*)+0x288>
c00153c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00153ca:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00153cd:	eb 42                	jmp    c0015411 <opcodeFault(regs*, void*)+0x2ca>
c00153cf:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00153d3:	75 0b                	jne    c00153e0 <opcodeFault(regs*, void*)+0x299>
c00153d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00153db:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00153de:	eb 31                	jmp    c0015411 <opcodeFault(regs*, void*)+0x2ca>
c00153e0:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00153e4:	75 0b                	jne    c00153f1 <opcodeFault(regs*, void*)+0x2aa>
c00153e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00153ec:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00153ef:	eb 20                	jmp    c0015411 <opcodeFault(regs*, void*)+0x2ca>
c00153f1:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00153f5:	75 0b                	jne    c0015402 <opcodeFault(regs*, void*)+0x2bb>
c00153f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153fa:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00153fd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015400:	eb 0f                	jmp    c0015411 <opcodeFault(regs*, void*)+0x2ca>
c0015402:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015406:	75 09                	jne    c0015411 <opcodeFault(regs*, void*)+0x2ca>
c0015408:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001540e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015411:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015415:	74 10                	je     c0015427 <opcodeFault(regs*, void*)+0x2e0>
c0015417:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001541e:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015425:	eb 2d                	jmp    c0015454 <opcodeFault(regs*, void*)+0x30d>
c0015427:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001542a:	c1 e0 18             	shl    eax,0x18
c001542d:	89 c2                	mov    edx,eax
c001542f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015432:	c1 e0 08             	shl    eax,0x8
c0015435:	25 00 00 ff 00       	and    eax,0xff0000
c001543a:	09 c2                	or     edx,eax
c001543c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001543f:	c1 e8 08             	shr    eax,0x8
c0015442:	25 00 ff 00 00       	and    eax,0xff00
c0015447:	09 c2                	or     edx,eax
c0015449:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001544c:	c1 e8 18             	shr    eax,0x18
c001544f:	09 d0                	or     eax,edx
c0015451:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015454:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015458:	75 0b                	jne    c0015465 <opcodeFault(regs*, void*)+0x31e>
c001545a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001545d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015460:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015463:	eb 75                	jmp    c00154da <opcodeFault(regs*, void*)+0x393>
c0015465:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015469:	75 0b                	jne    c0015476 <opcodeFault(regs*, void*)+0x32f>
c001546b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001546e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015471:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015474:	eb 64                	jmp    c00154da <opcodeFault(regs*, void*)+0x393>
c0015476:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001547a:	75 0b                	jne    c0015487 <opcodeFault(regs*, void*)+0x340>
c001547c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001547f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015482:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015485:	eb 53                	jmp    c00154da <opcodeFault(regs*, void*)+0x393>
c0015487:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001548b:	75 0b                	jne    c0015498 <opcodeFault(regs*, void*)+0x351>
c001548d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015490:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015493:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015496:	eb 42                	jmp    c00154da <opcodeFault(regs*, void*)+0x393>
c0015498:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001549c:	75 0b                	jne    c00154a9 <opcodeFault(regs*, void*)+0x362>
c001549e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154a4:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00154a7:	eb 31                	jmp    c00154da <opcodeFault(regs*, void*)+0x393>
c00154a9:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00154ad:	75 0b                	jne    c00154ba <opcodeFault(regs*, void*)+0x373>
c00154af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154b5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00154b8:	eb 20                	jmp    c00154da <opcodeFault(regs*, void*)+0x393>
c00154ba:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00154be:	75 0b                	jne    c00154cb <opcodeFault(regs*, void*)+0x384>
c00154c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154c6:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00154c9:	eb 0f                	jmp    c00154da <opcodeFault(regs*, void*)+0x393>
c00154cb:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00154cf:	75 09                	jne    c00154da <opcodeFault(regs*, void*)+0x393>
c00154d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154d7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00154da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154dd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154e0:	8d 50 02             	lea    edx,[eax+0x2]
c00154e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154e9:	e9 58 02 00 00       	jmp    c0015746 <opcodeFault(regs*, void*)+0x5ff>
c00154ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f1:	8a 00                	mov    al,BYTE PTR [eax]
c00154f3:	3c 0f                	cmp    al,0xf
c00154f5:	0f 85 76 01 00 00    	jne    c0015671 <opcodeFault(regs*, void*)+0x52a>
c00154fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154fe:	40                   	inc    eax
c00154ff:	8a 00                	mov    al,BYTE PTR [eax]
c0015501:	3c c7                	cmp    al,0xc7
c0015503:	0f 85 68 01 00 00    	jne    c0015671 <opcodeFault(regs*, void*)+0x52a>
c0015509:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001550c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015512:	8d 50 01             	lea    edx,[eax+0x1]
c0015515:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015518:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001551b:	8d 45 ba             	lea    eax,[ebp-0x46]
c001551e:	50                   	push   eax
c001551f:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015522:	50                   	push   eax
c0015523:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015526:	50                   	push   eax
c0015527:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001552a:	e8 d5 45 00 00       	call   c0019b04 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001552f:	83 c4 10             	add    esp,0x10
c0015532:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015535:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015538:	83 f0 01             	xor    eax,0x1
c001553b:	84 c0                	test   al,al
c001553d:	0f 84 2e 01 00 00    	je     c0015671 <opcodeFault(regs*, void*)+0x52a>
c0015543:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015546:	3c 01                	cmp    al,0x1
c0015548:	0f 85 23 01 00 00    	jne    c0015671 <opcodeFault(regs*, void*)+0x52a>
c001554e:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015551:	83 f0 01             	xor    eax,0x1
c0015554:	84 c0                	test   al,al
c0015556:	0f 84 15 01 00 00    	je     c0015671 <opcodeFault(regs*, void*)+0x52a>
c001555c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001555f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015562:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015565:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001556c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001556f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015572:	89 c2                	mov    edx,eax
c0015574:	b8 00 00 00 00       	mov    eax,0x0
c0015579:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001557c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001557f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015582:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015585:	ba 00 00 00 00       	mov    edx,0x0
c001558a:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001558d:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015590:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015593:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015596:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015599:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00155a0:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00155a3:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00155a6:	89 c2                	mov    edx,eax
c00155a8:	b8 00 00 00 00       	mov    eax,0x0
c00155ad:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00155b0:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00155b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155b9:	ba 00 00 00 00       	mov    edx,0x0
c00155be:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00155c1:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00155c4:	e8 6e 86 00 00       	call   c001dc37 <lockScheduler()>
c00155c9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00155cc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00155cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d1:	89 c1                	mov    ecx,eax
c00155d3:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00155d6:	89 cb                	mov    ebx,ecx
c00155d8:	89 d0                	mov    eax,edx
c00155da:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00155dd:	89 c6                	mov    esi,eax
c00155df:	89 f0                	mov    eax,esi
c00155e1:	09 d8                	or     eax,ebx
c00155e3:	85 c0                	test   eax,eax
c00155e5:	75 21                	jne    c0015608 <opcodeFault(regs*, void*)+0x4c1>
c00155e7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00155ea:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00155ed:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00155f0:	89 01                	mov    DWORD PTR [ecx],eax
c00155f2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00155f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00155fb:	83 c8 40             	or     eax,0x40
c00155fe:	89 c2                	mov    edx,eax
c0015600:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015603:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015606:	eb 3e                	jmp    c0015646 <opcodeFault(regs*, void*)+0x4ff>
c0015608:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001560b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001560e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015610:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015613:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015616:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001561f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015622:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015625:	89 d0                	mov    eax,edx
c0015627:	31 d2                	xor    edx,edx
c0015629:	89 c3                	mov    ebx,eax
c001562b:	89 d6                	mov    esi,edx
c001562d:	89 da                	mov    edx,ebx
c001562f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015632:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015635:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015638:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001563b:	83 e0 bf             	and    eax,0xffffffbf
c001563e:	89 c2                	mov    edx,eax
c0015640:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015643:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015646:	e8 ee 85 00 00       	call   c001dc39 <unlockScheduler()>
c001564b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015651:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015654:	01 c2                	add    edx,eax
c0015656:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015659:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001565c:	83 ec 0c             	sub    esp,0xc
c001565f:	68 66 ae 02 c0       	push   0xc002ae66
c0015664:	e8 2b d7 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0015669:	83 c4 10             	add    esp,0x10
c001566c:	e9 d5 00 00 00       	jmp    c0015746 <opcodeFault(regs*, void*)+0x5ff>
c0015671:	83 ec 0c             	sub    esp,0xc
c0015674:	68 79 ae 02 c0       	push   0xc002ae79
c0015679:	e8 16 d7 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001567e:	83 c4 10             	add    esp,0x10
c0015681:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015684:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015687:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001568a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001568d:	c1 e0 04             	shl    eax,0x4
c0015690:	01 d0                	add    eax,edx
c0015692:	83 c0 03             	add    eax,0x3
c0015695:	8a 00                	mov    al,BYTE PTR [eax]
c0015697:	0f b6 d8             	movzx  ebx,al
c001569a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001569d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00156a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00156a6:	c1 e0 04             	shl    eax,0x4
c00156a9:	01 d0                	add    eax,edx
c00156ab:	83 c0 02             	add    eax,0x2
c00156ae:	8a 00                	mov    al,BYTE PTR [eax]
c00156b0:	0f b6 c8             	movzx  ecx,al
c00156b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00156b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156bc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00156bf:	c1 e0 04             	shl    eax,0x4
c00156c2:	01 d0                	add    eax,edx
c00156c4:	40                   	inc    eax
c00156c5:	8a 00                	mov    al,BYTE PTR [eax]
c00156c7:	0f b6 d0             	movzx  edx,al
c00156ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156cd:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00156d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00156d6:	c1 e0 04             	shl    eax,0x4
c00156d9:	01 f0                	add    eax,esi
c00156db:	8a 00                	mov    al,BYTE PTR [eax]
c00156dd:	0f b6 c0             	movzx  eax,al
c00156e0:	83 ec 0c             	sub    esp,0xc
c00156e3:	53                   	push   ebx
c00156e4:	51                   	push   ecx
c00156e5:	52                   	push   edx
c00156e6:	50                   	push   eax
c00156e7:	68 8c ae 02 c0       	push   0xc002ae8c
c00156ec:	e8 a3 d6 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00156f1:	83 c4 20             	add    esp,0x20
c00156f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156fa:	83 c0 03             	add    eax,0x3
c00156fd:	8a 00                	mov    al,BYTE PTR [eax]
c00156ff:	0f b6 d8             	movzx  ebx,al
c0015702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015705:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015708:	83 c0 02             	add    eax,0x2
c001570b:	8a 00                	mov    al,BYTE PTR [eax]
c001570d:	0f b6 c8             	movzx  ecx,al
c0015710:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015713:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015716:	40                   	inc    eax
c0015717:	8a 00                	mov    al,BYTE PTR [eax]
c0015719:	0f b6 d0             	movzx  edx,al
c001571c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001571f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015722:	8a 00                	mov    al,BYTE PTR [eax]
c0015724:	0f b6 c0             	movzx  eax,al
c0015727:	83 ec 0c             	sub    esp,0xc
c001572a:	53                   	push   ebx
c001572b:	51                   	push   ecx
c001572c:	52                   	push   edx
c001572d:	50                   	push   eax
c001572e:	68 b4 ae 02 c0       	push   0xc002aeb4
c0015733:	e8 5c d6 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0015738:	83 c4 20             	add    esp,0x20
c001573b:	83 ec 0c             	sub    esp,0xc
c001573e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015741:	e8 c4 f4 ff ff       	call   c0014c0a <displayDebugInfo(regs*)>
c0015746:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015749:	5b                   	pop    ebx
c001574a:	5e                   	pop    esi
c001574b:	5d                   	pop    ebp
c001574c:	c3                   	ret    

c001574d <displayProgramFault(char const*)>:
c001574d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015752:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015755:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001575b:	85 c0                	test   eax,eax
c001575d:	74 15                	je     c0015774 <displayProgramFault(char const*)+0x27>
c001575f:	83 ec 0c             	sub    esp,0xc
c0015762:	6a 04                	push   0x4
c0015764:	6a 0f                	push   0xf
c0015766:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001576a:	50                   	push   eax
c001576b:	e8 5a b6 ff ff       	call   c0010dca <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015770:	83 c4 1c             	add    esp,0x1c
c0015773:	c3                   	ret    
c0015774:	c3                   	ret    

c0015775 <setupInterruptController()>:
c0015775:	55                   	push   ebp
c0015776:	89 e5                	mov    ebp,esp
c0015778:	53                   	push   ebx
c0015779:	83 ec 24             	sub    esp,0x24
c001577c:	b8 00 00 00 00       	mov    eax,0x0
c0015781:	85 c0                	test   eax,eax
c0015783:	0f 95 c0             	setne  al
c0015786:	84 c0                	test   al,al
c0015788:	74 5b                	je     c00157e5 <setupInterruptController()+0x70>
c001578a:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015791:	83 ec 0c             	sub    esp,0xc
c0015794:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015797:	e8 a4 a0 ff ff       	call   c000f840 <malloc>
c001579c:	83 c4 10             	add    esp,0x10
c001579f:	89 c3                	mov    ebx,eax
c00157a1:	83 ec 0c             	sub    esp,0xc
c00157a4:	53                   	push   ebx
c00157a5:	e8 12 00 01 00       	call   c00257bc <APIC::APIC()>
c00157aa:	83 c4 10             	add    esp,0x10
c00157ad:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00157b0:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00157b3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00157b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00157b8:	83 c0 08             	add    eax,0x8
c00157bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00157bd:	6a 00                	push   0x0
c00157bf:	6a 00                	push   0x0
c00157c1:	6a 00                	push   0x0
c00157c3:	52                   	push   edx
c00157c4:	ff d0                	call   eax
c00157c6:	83 c4 10             	add    esp,0x10
c00157c9:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00157ce:	83 ec 08             	sub    esp,0x8
c00157d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00157d4:	50                   	push   eax
c00157d5:	e8 e0 e9 ff ff       	call   c00141ba <Device::addChild(Device*)>
c00157da:	83 c4 10             	add    esp,0x10
c00157dd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00157e0:	e9 6b 03 00 00       	jmp    c0015b50 <setupInterruptController()+0x3db>
c00157e5:	a0 c0 0b 03 c0       	mov    al,ds:0xc0030bc0
c00157ea:	0f b6 c0             	movzx  eax,al
c00157ed:	83 ec 08             	sub    esp,0x8
c00157f0:	50                   	push   eax
c00157f1:	68 d9 ae 02 c0       	push   0xc002aed9
c00157f6:	e8 99 d5 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00157fb:	83 c4 10             	add    esp,0x10
c00157fe:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0015803:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015809:	83 e0 01             	and    eax,0x1
c001580c:	84 c0                	test   al,al
c001580e:	0f 95 c0             	setne  al
c0015811:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015814:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001581b:	83 ec 0c             	sub    esp,0xc
c001581e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015821:	e8 1a a0 ff ff       	call   c000f840 <malloc>
c0015826:	83 c4 10             	add    esp,0x10
c0015829:	89 c3                	mov    ebx,eax
c001582b:	83 ec 0c             	sub    esp,0xc
c001582e:	53                   	push   ebx
c001582f:	e8 e0 04 01 00       	call   c0025d14 <PIC::PIC()>
c0015834:	83 c4 10             	add    esp,0x10
c0015837:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001583a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001583d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015840:	8b 00                	mov    eax,DWORD PTR [eax]
c0015842:	83 c0 08             	add    eax,0x8
c0015845:	8b 00                	mov    eax,DWORD PTR [eax]
c0015847:	6a 00                	push   0x0
c0015849:	6a 00                	push   0x0
c001584b:	6a 00                	push   0x0
c001584d:	52                   	push   edx
c001584e:	ff d0                	call   eax
c0015850:	83 c4 10             	add    esp,0x10
c0015853:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015857:	74 73                	je     c00158cc <setupInterruptController()+0x157>
c0015859:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001585c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001585f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015861:	83 c0 0c             	add    eax,0xc
c0015864:	8b 00                	mov    eax,DWORD PTR [eax]
c0015866:	6a 00                	push   0x0
c0015868:	6a 00                	push   0x0
c001586a:	6a 00                	push   0x0
c001586c:	52                   	push   edx
c001586d:	ff d0                	call   eax
c001586f:	83 c4 10             	add    esp,0x10
c0015872:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015876:	74 15                	je     c001588d <setupInterruptController()+0x118>
c0015878:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001587b:	8b 00                	mov    eax,DWORD PTR [eax]
c001587d:	83 c0 04             	add    eax,0x4
c0015880:	8b 00                	mov    eax,DWORD PTR [eax]
c0015882:	83 ec 0c             	sub    esp,0xc
c0015885:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015888:	ff d0                	call   eax
c001588a:	83 c4 10             	add    esp,0x10
c001588d:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015894:	83 ec 0c             	sub    esp,0xc
c0015897:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001589a:	e8 a1 9f ff ff       	call   c000f840 <malloc>
c001589f:	83 c4 10             	add    esp,0x10
c00158a2:	89 c3                	mov    ebx,eax
c00158a4:	83 ec 0c             	sub    esp,0xc
c00158a7:	53                   	push   ebx
c00158a8:	e8 0f ff 00 00       	call   c00257bc <APIC::APIC()>
c00158ad:	83 c4 10             	add    esp,0x10
c00158b0:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00158b3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00158b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00158bb:	83 c0 08             	add    eax,0x8
c00158be:	8b 00                	mov    eax,DWORD PTR [eax]
c00158c0:	6a 00                	push   0x0
c00158c2:	6a 00                	push   0x0
c00158c4:	6a 00                	push   0x0
c00158c6:	52                   	push   edx
c00158c7:	ff d0                	call   eax
c00158c9:	83 c4 10             	add    esp,0x10
c00158cc:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00158d1:	83 ec 08             	sub    esp,0x8
c00158d4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158d7:	50                   	push   eax
c00158d8:	e8 dd e8 ff ff       	call   c00141ba <Device::addChild(Device*)>
c00158dd:	83 c4 10             	add    esp,0x10
c00158e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00158e5:	83 c0 24             	add    eax,0x24
c00158e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00158ea:	6a 00                	push   0x0
c00158ec:	68 28 51 01 c0       	push   0xc0015128
c00158f1:	6a 00                	push   0x0
c00158f3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158f6:	ff d0                	call   eax
c00158f8:	83 c4 10             	add    esp,0x10
c00158fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015900:	83 c0 24             	add    eax,0x24
c0015903:	8b 00                	mov    eax,DWORD PTR [eax]
c0015905:	6a 00                	push   0x0
c0015907:	68 28 51 01 c0       	push   0xc0015128
c001590c:	6a 01                	push   0x1
c001590e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015911:	ff d0                	call   eax
c0015913:	83 c4 10             	add    esp,0x10
c0015916:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015919:	8b 00                	mov    eax,DWORD PTR [eax]
c001591b:	83 c0 24             	add    eax,0x24
c001591e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015920:	6a 00                	push   0x0
c0015922:	68 67 4a 01 c0       	push   0xc0014a67
c0015927:	6a 02                	push   0x2
c0015929:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001592c:	ff d0                	call   eax
c001592e:	83 c4 10             	add    esp,0x10
c0015931:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015934:	8b 00                	mov    eax,DWORD PTR [eax]
c0015936:	83 c0 24             	add    eax,0x24
c0015939:	8b 00                	mov    eax,DWORD PTR [eax]
c001593b:	6a 00                	push   0x0
c001593d:	68 28 51 01 c0       	push   0xc0015128
c0015942:	6a 03                	push   0x3
c0015944:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015947:	ff d0                	call   eax
c0015949:	83 c4 10             	add    esp,0x10
c001594c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001594f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015951:	83 c0 24             	add    eax,0x24
c0015954:	8b 00                	mov    eax,DWORD PTR [eax]
c0015956:	6a 00                	push   0x0
c0015958:	68 28 51 01 c0       	push   0xc0015128
c001595d:	6a 04                	push   0x4
c001595f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015962:	ff d0                	call   eax
c0015964:	83 c4 10             	add    esp,0x10
c0015967:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001596a:	8b 00                	mov    eax,DWORD PTR [eax]
c001596c:	83 c0 24             	add    eax,0x24
c001596f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015971:	6a 00                	push   0x0
c0015973:	68 28 51 01 c0       	push   0xc0015128
c0015978:	6a 05                	push   0x5
c001597a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001597d:	ff d0                	call   eax
c001597f:	83 c4 10             	add    esp,0x10
c0015982:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015985:	8b 00                	mov    eax,DWORD PTR [eax]
c0015987:	83 c0 24             	add    eax,0x24
c001598a:	8b 00                	mov    eax,DWORD PTR [eax]
c001598c:	6a 00                	push   0x0
c001598e:	68 47 51 01 c0       	push   0xc0015147
c0015993:	6a 06                	push   0x6
c0015995:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015998:	ff d0                	call   eax
c001599a:	83 c4 10             	add    esp,0x10
c001599d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00159a2:	83 c0 24             	add    eax,0x24
c00159a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00159a7:	6a 00                	push   0x0
c00159a9:	68 99 50 01 c0       	push   0xc0015099
c00159ae:	6a 07                	push   0x7
c00159b0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159b3:	ff d0                	call   eax
c00159b5:	83 c4 10             	add    esp,0x10
c00159b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00159bd:	83 c0 24             	add    eax,0x24
c00159c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c2:	6a 00                	push   0x0
c00159c4:	68 82 48 01 c0       	push   0xc0014882
c00159c9:	6a 08                	push   0x8
c00159cb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159ce:	ff d0                	call   eax
c00159d0:	83 c4 10             	add    esp,0x10
c00159d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00159d8:	83 c0 24             	add    eax,0x24
c00159db:	8b 00                	mov    eax,DWORD PTR [eax]
c00159dd:	6a 00                	push   0x0
c00159df:	68 28 51 01 c0       	push   0xc0015128
c00159e4:	6a 09                	push   0x9
c00159e6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159e9:	ff d0                	call   eax
c00159eb:	83 c4 10             	add    esp,0x10
c00159ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f3:	83 c0 24             	add    eax,0x24
c00159f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f8:	6a 00                	push   0x0
c00159fa:	68 28 51 01 c0       	push   0xc0015128
c00159ff:	6a 0a                	push   0xa
c0015a01:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a04:	ff d0                	call   eax
c0015a06:	83 c4 10             	add    esp,0x10
c0015a09:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a0e:	83 c0 24             	add    eax,0x24
c0015a11:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a13:	6a 00                	push   0x0
c0015a15:	68 28 51 01 c0       	push   0xc0015128
c0015a1a:	6a 0b                	push   0xb
c0015a1c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a1f:	ff d0                	call   eax
c0015a21:	83 c4 10             	add    esp,0x10
c0015a24:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a27:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a29:	83 c0 24             	add    eax,0x24
c0015a2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a2e:	6a 00                	push   0x0
c0015a30:	68 28 51 01 c0       	push   0xc0015128
c0015a35:	6a 0c                	push   0xc
c0015a37:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a3a:	ff d0                	call   eax
c0015a3c:	83 c4 10             	add    esp,0x10
c0015a3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a42:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a44:	83 c0 24             	add    eax,0x24
c0015a47:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a49:	6a 00                	push   0x0
c0015a4b:	68 c8 50 01 c0       	push   0xc00150c8
c0015a50:	6a 0d                	push   0xd
c0015a52:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a55:	ff d0                	call   eax
c0015a57:	83 c4 10             	add    esp,0x10
c0015a5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a5f:	83 c0 24             	add    eax,0x24
c0015a62:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a64:	6a 00                	push   0x0
c0015a66:	68 01 51 01 c0       	push   0xc0015101
c0015a6b:	6a 0e                	push   0xe
c0015a6d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a70:	ff d0                	call   eax
c0015a72:	83 c4 10             	add    esp,0x10
c0015a75:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a78:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7a:	83 c0 24             	add    eax,0x24
c0015a7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7f:	6a 00                	push   0x0
c0015a81:	68 28 51 01 c0       	push   0xc0015128
c0015a86:	6a 0f                	push   0xf
c0015a88:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a8b:	ff d0                	call   eax
c0015a8d:	83 c4 10             	add    esp,0x10
c0015a90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a93:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a95:	83 c0 24             	add    eax,0x24
c0015a98:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a9a:	6a 00                	push   0x0
c0015a9c:	68 28 51 01 c0       	push   0xc0015128
c0015aa1:	6a 10                	push   0x10
c0015aa3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aa6:	ff d0                	call   eax
c0015aa8:	83 c4 10             	add    esp,0x10
c0015aab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aae:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab0:	83 c0 24             	add    eax,0x24
c0015ab3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab5:	6a 00                	push   0x0
c0015ab7:	68 28 51 01 c0       	push   0xc0015128
c0015abc:	6a 11                	push   0x11
c0015abe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ac1:	ff d0                	call   eax
c0015ac3:	83 c4 10             	add    esp,0x10
c0015ac6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015acb:	83 c0 24             	add    eax,0x24
c0015ace:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad0:	6a 00                	push   0x0
c0015ad2:	68 28 51 01 c0       	push   0xc0015128
c0015ad7:	6a 12                	push   0x12
c0015ad9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015adc:	ff d0                	call   eax
c0015ade:	83 c4 10             	add    esp,0x10
c0015ae1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ae4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae6:	83 c0 24             	add    eax,0x24
c0015ae9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aeb:	6a 00                	push   0x0
c0015aed:	68 28 51 01 c0       	push   0xc0015128
c0015af2:	6a 13                	push   0x13
c0015af4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015af7:	ff d0                	call   eax
c0015af9:	83 c4 10             	add    esp,0x10
c0015afc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b01:	83 c0 24             	add    eax,0x24
c0015b04:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b06:	6a 00                	push   0x0
c0015b08:	68 28 51 01 c0       	push   0xc0015128
c0015b0d:	6a 14                	push   0x14
c0015b0f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b12:	ff d0                	call   eax
c0015b14:	83 c4 10             	add    esp,0x10
c0015b17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1c:	83 c0 24             	add    eax,0x24
c0015b1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b21:	6a 00                	push   0x0
c0015b23:	68 28 51 01 c0       	push   0xc0015128
c0015b28:	6a 1e                	push   0x1e
c0015b2a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b2d:	ff d0                	call   eax
c0015b2f:	83 c4 10             	add    esp,0x10
c0015b32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b35:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b37:	83 c0 24             	add    eax,0x24
c0015b3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3c:	6a 00                	push   0x0
c0015b3e:	68 c7 c5 01 c0       	push   0xc001c5c7
c0015b43:	6a 60                	push   0x60
c0015b45:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b48:	ff d0                	call   eax
c0015b4a:	83 c4 10             	add    esp,0x10
c0015b4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b50:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015b53:	c9                   	leave  
c0015b54:	c3                   	ret    
c0015b55:	90                   	nop

c0015b56 <InterruptController::convertLegacyIRQNumber(int)>:
c0015b56:	55                   	push   ebp
c0015b57:	89 e5                	mov    ebp,esp
c0015b59:	83 ec 08             	sub    esp,0x8
c0015b5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b5f:	83 ec 0c             	sub    esp,0xc
c0015b62:	50                   	push   eax
c0015b63:	e8 3e e9 ff ff       	call   c00144a6 <Device::getName()>
c0015b68:	83 c4 10             	add    esp,0x10
c0015b6b:	8a 00                	mov    al,BYTE PTR [eax]
c0015b6d:	3c 41                	cmp    al,0x41
c0015b6f:	0f 94 c0             	sete   al
c0015b72:	84 c0                	test   al,al
c0015b74:	74 28                	je     c0015b9e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015b76:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015b7a:	7f 12                	jg     c0015b8e <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015b7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015b7f:	05 80 d4 02 c0       	add    eax,0xc002d480
c0015b84:	8a 00                	mov    al,BYTE PTR [eax]
c0015b86:	0f b6 c0             	movzx  eax,al
c0015b89:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015b8c:	eb 10                	jmp    c0015b9e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015b8e:	83 ec 0c             	sub    esp,0xc
c0015b91:	68 c0 ab 02 c0       	push   0xc002abc0
c0015b96:	e8 a2 48 00 00       	call   c001a43d <Krnl::panic(char const*)>
c0015b9b:	83 c4 10             	add    esp,0x10
c0015b9e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ba1:	c9                   	leave  
c0015ba2:	c3                   	ret    
c0015ba3:	90                   	nop

c0015ba4 <startGUI(void*)>:
c0015ba4:	55                   	push   ebp
c0015ba5:	89 e5                	mov    ebp,esp
c0015ba7:	53                   	push   ebx
c0015ba8:	83 ec 04             	sub    esp,0x4
c0015bab:	e8 89 80 00 00       	call   c001dc39 <unlockScheduler()>
c0015bb0:	8b 1d 28 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e228
c0015bb6:	83 ec 08             	sub    esp,0x8
c0015bb9:	6a 01                	push   0x1
c0015bbb:	68 40 af 02 c0       	push   0xc002af40
c0015bc0:	e8 ab 79 00 00       	call   c001d570 <Thr::loadDLL(char const*, bool)>
c0015bc5:	83 c4 10             	add    esp,0x10
c0015bc8:	83 ec 08             	sub    esp,0x8
c0015bcb:	53                   	push   ebx
c0015bcc:	50                   	push   eax
c0015bcd:	e8 ed 7b 00 00       	call   c001d7bf <Thr::executeDLL(unsigned long, void*)>
c0015bd2:	83 c4 10             	add    esp,0x10
c0015bd5:	8b 1d 28 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e228
c0015bdb:	83 ec 08             	sub    esp,0x8
c0015bde:	6a 01                	push   0x1
c0015be0:	68 5a af 02 c0       	push   0xc002af5a
c0015be5:	e8 86 79 00 00       	call   c001d570 <Thr::loadDLL(char const*, bool)>
c0015bea:	83 c4 10             	add    esp,0x10
c0015bed:	83 ec 08             	sub    esp,0x8
c0015bf0:	53                   	push   ebx
c0015bf1:	50                   	push   eax
c0015bf2:	e8 c8 7b 00 00       	call   c001d7bf <Thr::executeDLL(unsigned long, void*)>
c0015bf7:	83 c4 10             	add    esp,0x10
c0015bfa:	90                   	nop
c0015bfb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015bfe:	c9                   	leave  
c0015bff:	c3                   	ret    

c0015c00 <startGUIVESA(void*)>:
c0015c00:	55                   	push   ebp
c0015c01:	89 e5                	mov    ebp,esp
c0015c03:	53                   	push   ebx
c0015c04:	83 ec 04             	sub    esp,0x4
c0015c07:	e8 2d 80 00 00       	call   c001dc39 <unlockScheduler()>
c0015c0c:	8b 1d 28 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e228
c0015c12:	83 ec 08             	sub    esp,0x8
c0015c15:	6a 01                	push   0x1
c0015c17:	68 74 af 02 c0       	push   0xc002af74
c0015c1c:	e8 4f 79 00 00       	call   c001d570 <Thr::loadDLL(char const*, bool)>
c0015c21:	83 c4 10             	add    esp,0x10
c0015c24:	83 ec 08             	sub    esp,0x8
c0015c27:	53                   	push   ebx
c0015c28:	50                   	push   eax
c0015c29:	e8 91 7b 00 00       	call   c001d7bf <Thr::executeDLL(unsigned long, void*)>
c0015c2e:	83 c4 10             	add    esp,0x10
c0015c31:	8b 1d 28 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e228
c0015c37:	83 ec 08             	sub    esp,0x8
c0015c3a:	6a 01                	push   0x1
c0015c3c:	68 5a af 02 c0       	push   0xc002af5a
c0015c41:	e8 2a 79 00 00       	call   c001d570 <Thr::loadDLL(char const*, bool)>
c0015c46:	83 c4 10             	add    esp,0x10
c0015c49:	83 ec 08             	sub    esp,0x8
c0015c4c:	53                   	push   ebx
c0015c4d:	50                   	push   eax
c0015c4e:	e8 6c 7b 00 00       	call   c001d7bf <Thr::executeDLL(unsigned long, void*)>
c0015c53:	83 c4 10             	add    esp,0x10
c0015c56:	90                   	nop
c0015c57:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c5a:	c9                   	leave  
c0015c5b:	c3                   	ret    

c0015c5c <sendKeyToTerminal(unsigned char)>:
c0015c5c:	55                   	push   ebp
c0015c5d:	89 e5                	mov    ebp,esp
c0015c5f:	83 ec 28             	sub    esp,0x28
c0015c62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c65:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015c68:	a1 04 e3 02 c0       	mov    eax,ds:0xc002e304
c0015c6d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015c71:	83 ec 08             	sub    esp,0x8
c0015c74:	52                   	push   edx
c0015c75:	50                   	push   eax
c0015c76:	e8 8b b6 ff ff       	call   c0011306 <VgaText::receiveKey(unsigned char)>
c0015c7b:	83 c4 10             	add    esp,0x10
c0015c7e:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015c82:	75 41                	jne    c0015cc5 <sendKeyToTerminal(unsigned char)+0x69>
c0015c84:	e8 d5 7f 00 00       	call   c001dc5e <lockStuff()>
c0015c89:	a1 e0 e3 02 c0       	mov    eax,ds:0xc002e3e0
c0015c8e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015c91:	c7 05 e0 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3e0,0x0
c0015c9b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015c9f:	74 1f                	je     c0015cc0 <sendKeyToTerminal(unsigned char)+0x64>
c0015ca1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ca4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015ca7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015caa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015cad:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015cb0:	83 ec 0c             	sub    esp,0xc
c0015cb3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015cb6:	e8 93 85 00 00       	call   c001e24e <unblockTask(ThreadControlBlock*)>
c0015cbb:	83 c4 10             	add    esp,0x10
c0015cbe:	eb db                	jmp    c0015c9b <sendKeyToTerminal(unsigned char)+0x3f>
c0015cc0:	e8 32 83 00 00       	call   c001dff7 <unlockStuff()>
c0015cc5:	90                   	nop
c0015cc6:	c9                   	leave  
c0015cc7:	c3                   	ret    

c0015cc8 <sendKeyboardToken(KeyboardToken)>:
c0015cc8:	55                   	push   ebp
c0015cc9:	89 e5                	mov    ebp,esp
c0015ccb:	83 ec 18             	sub    esp,0x18
c0015cce:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015cd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cd4:	0f b7 c0             	movzx  eax,ax
c0015cd7:	83 f2 01             	xor    edx,0x1
c0015cda:	88 90 00 e4 02 c0    	mov    BYTE PTR [eax-0x3ffd1c00],dl
c0015ce0:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0015ce5:	85 c0                	test   eax,eax
c0015ce7:	74 24                	je     c0015d0d <sendKeyboardToken(KeyboardToken)+0x45>
c0015ce9:	8b 0d e8 e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e3e8
c0015cef:	83 ec 04             	sub    esp,0x4
c0015cf2:	68 00 e4 02 c0       	push   0xc002e400
c0015cf7:	83 ec 08             	sub    esp,0x8
c0015cfa:	89 e2                	mov    edx,esp
c0015cfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cff:	89 02                	mov    DWORD PTR [edx],eax
c0015d01:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d04:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015d08:	ff d1                	call   ecx
c0015d0a:	83 c4 10             	add    esp,0x10
c0015d0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d10:	66 3d 03 02          	cmp    ax,0x203
c0015d14:	75 07                	jne    c0015d1d <sendKeyboardToken(KeyboardToken)+0x55>
c0015d16:	a0 00 e5 02 c0       	mov    al,ds:0xc002e500
c0015d1b:	84 c0                	test   al,al
c0015d1d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015d21:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015d24:	a0 08 e8 02 c0       	mov    al,ds:0xc002e808
c0015d29:	38 c2                	cmp    dl,al
c0015d2b:	74 1c                	je     c0015d49 <sendKeyboardToken(KeyboardToken)+0x81>
c0015d2d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015d30:	a2 08 e8 02 c0       	mov    ds:0xc002e808,al
c0015d35:	a0 08 e8 02 c0       	mov    al,ds:0xc002e808
c0015d3a:	0f b6 c0             	movzx  eax,al
c0015d3d:	83 ec 0c             	sub    esp,0xc
c0015d40:	50                   	push   eax
c0015d41:	e8 20 a8 ff ff       	call   c0010566 <setTerminalScrollLock(bool)>
c0015d46:	83 c4 10             	add    esp,0x10
c0015d49:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015d4c:	84 c0                	test   al,al
c0015d4e:	0f 84 ae 00 00 00    	je     c0015e02 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015d54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d57:	66 3d 10 03          	cmp    ax,0x310
c0015d5b:	75 06                	jne    c0015d63 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015d5d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015d63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d66:	66 3d 11 03          	cmp    ax,0x311
c0015d6a:	75 06                	jne    c0015d72 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015d6c:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015d72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d75:	66 3d 12 03          	cmp    ax,0x312
c0015d79:	75 06                	jne    c0015d81 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015d7b:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015d81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d84:	66 3d 13 03          	cmp    ax,0x313
c0015d88:	75 06                	jne    c0015d90 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015d8a:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015d90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d93:	66 3d 14 03          	cmp    ax,0x314
c0015d97:	75 06                	jne    c0015d9f <sendKeyboardToken(KeyboardToken)+0xd7>
c0015d99:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015d9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015da2:	66 3d 15 03          	cmp    ax,0x315
c0015da6:	75 06                	jne    c0015dae <sendKeyboardToken(KeyboardToken)+0xe6>
c0015da8:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015dae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015db1:	66 3d 16 03          	cmp    ax,0x316
c0015db5:	75 06                	jne    c0015dbd <sendKeyboardToken(KeyboardToken)+0xf5>
c0015db7:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015dbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dc0:	66 3d 17 03          	cmp    ax,0x317
c0015dc4:	75 06                	jne    c0015dcc <sendKeyboardToken(KeyboardToken)+0x104>
c0015dc6:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015dcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dcf:	66 3d 18 03          	cmp    ax,0x318
c0015dd3:	75 06                	jne    c0015ddb <sendKeyboardToken(KeyboardToken)+0x113>
c0015dd5:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015ddb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dde:	66 3d 19 03          	cmp    ax,0x319
c0015de2:	75 06                	jne    c0015dea <sendKeyboardToken(KeyboardToken)+0x122>
c0015de4:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015dea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ded:	66 3d 1a 03          	cmp    ax,0x31a
c0015df1:	0f 85 c9 00 00 00    	jne    c0015ec0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015df7:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015dfd:	e9 be 00 00 00       	jmp    c0015ec0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015e02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e05:	66 3d 10 03          	cmp    ax,0x310
c0015e09:	75 0a                	jne    c0015e15 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015e0b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015e11:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e18:	66 3d 11 03          	cmp    ax,0x311
c0015e1c:	75 0a                	jne    c0015e28 <sendKeyboardToken(KeyboardToken)+0x160>
c0015e1e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015e24:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e2b:	66 3d 12 03          	cmp    ax,0x312
c0015e2f:	75 0a                	jne    c0015e3b <sendKeyboardToken(KeyboardToken)+0x173>
c0015e31:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015e37:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e3e:	66 3d 13 03          	cmp    ax,0x313
c0015e42:	75 0a                	jne    c0015e4e <sendKeyboardToken(KeyboardToken)+0x186>
c0015e44:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015e4a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e51:	66 3d 14 03          	cmp    ax,0x314
c0015e55:	75 0a                	jne    c0015e61 <sendKeyboardToken(KeyboardToken)+0x199>
c0015e57:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015e5d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e64:	66 3d 15 03          	cmp    ax,0x315
c0015e68:	75 0a                	jne    c0015e74 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015e6a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015e70:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e77:	66 3d 16 03          	cmp    ax,0x316
c0015e7b:	75 0a                	jne    c0015e87 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015e7d:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015e83:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e8a:	66 3d 17 03          	cmp    ax,0x317
c0015e8e:	75 0a                	jne    c0015e9a <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015e90:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015e96:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e9d:	66 3d 18 03          	cmp    ax,0x318
c0015ea1:	75 0a                	jne    c0015ead <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015ea3:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015ea9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ead:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb0:	66 3d 19 03          	cmp    ax,0x319
c0015eb4:	75 0a                	jne    c0015ec0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015eb6:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015ebc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ec0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec3:	66 3d 00 02          	cmp    ax,0x200
c0015ec7:	75 2c                	jne    c0015ef5 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015ec9:	a0 00 e8 02 c0       	mov    al,ds:0xc002e800
c0015ece:	83 f0 01             	xor    eax,0x1
c0015ed1:	84 c0                	test   al,al
c0015ed3:	74 20                	je     c0015ef5 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015ed5:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0015eda:	6a 01                	push   0x1
c0015edc:	6a 00                	push   0x0
c0015ede:	68 a4 5b 01 c0       	push   0xc0015ba4
c0015ee3:	50                   	push   eax
c0015ee4:	e8 7f 7e 00 00       	call   c001dd68 <Process::createThread(void (*)(void*), void*, int)>
c0015ee9:	83 c4 10             	add    esp,0x10
c0015eec:	c6 05 00 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e800,0x1
c0015ef3:	eb 33                	jmp    c0015f28 <sendKeyboardToken(KeyboardToken)+0x260>
c0015ef5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ef8:	66 3d 01 02          	cmp    ax,0x201
c0015efc:	75 2a                	jne    c0015f28 <sendKeyboardToken(KeyboardToken)+0x260>
c0015efe:	a0 00 e8 02 c0       	mov    al,ds:0xc002e800
c0015f03:	83 f0 01             	xor    eax,0x1
c0015f06:	84 c0                	test   al,al
c0015f08:	74 1e                	je     c0015f28 <sendKeyboardToken(KeyboardToken)+0x260>
c0015f0a:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0015f0f:	6a 01                	push   0x1
c0015f11:	6a 00                	push   0x0
c0015f13:	68 00 5c 01 c0       	push   0xc0015c00
c0015f18:	50                   	push   eax
c0015f19:	e8 4a 7e 00 00       	call   c001dd68 <Process::createThread(void (*)(void*), void*, int)>
c0015f1e:	83 c4 10             	add    esp,0x10
c0015f21:	c6 05 00 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e800,0x1
c0015f28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f2b:	66 3d 1d 03          	cmp    ax,0x31d
c0015f2f:	75 06                	jne    c0015f37 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015f31:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015f37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f3a:	66 3d 1c 03          	cmp    ax,0x31c
c0015f3e:	75 06                	jne    c0015f46 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015f40:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015f46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f49:	66 3d 1b 03          	cmp    ax,0x31b
c0015f4d:	75 06                	jne    c0015f55 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015f4f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015f55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f58:	66 3d 1e 03          	cmp    ax,0x31e
c0015f5c:	75 06                	jne    c0015f64 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015f5e:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015f64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f67:	66 3d 1f 03          	cmp    ax,0x31f
c0015f6b:	75 06                	jne    c0015f73 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015f6d:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015f73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f76:	66 3d 1a 03          	cmp    ax,0x31a
c0015f7a:	75 06                	jne    c0015f82 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015f7c:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015f82:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015f86:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015f89:	83 f0 01             	xor    eax,0x1
c0015f8c:	84 c0                	test   al,al
c0015f8e:	74 77                	je     c0016007 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015f90:	a0 01 e5 02 c0       	mov    al,ds:0xc002e501
c0015f95:	84 c0                	test   al,al
c0015f97:	74 41                	je     c0015fda <sendKeyboardToken(KeyboardToken)+0x312>
c0015f99:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015f9d:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015fa1:	74 2b                	je     c0015fce <sendKeyboardToken(KeyboardToken)+0x306>
c0015fa3:	8b 15 04 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e804
c0015fa9:	89 d0                	mov    eax,edx
c0015fab:	c1 e0 02             	shl    eax,0x2
c0015fae:	01 d0                	add    eax,edx
c0015fb0:	01 c0                	add    eax,eax
c0015fb2:	a3 04 e8 02 c0       	mov    ds:0xc002e804,eax
c0015fb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fba:	0f b7 c0             	movzx  eax,ax
c0015fbd:	8d 50 d0             	lea    edx,[eax-0x30]
c0015fc0:	a1 04 e8 02 c0       	mov    eax,ds:0xc002e804
c0015fc5:	01 d0                	add    eax,edx
c0015fc7:	a3 04 e8 02 c0       	mov    ds:0xc002e804,eax
c0015fcc:	eb 6d                	jmp    c001603b <sendKeyboardToken(KeyboardToken)+0x373>
c0015fce:	c7 05 04 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e804,0x0
c0015fd8:	eb 61                	jmp    c001603b <sendKeyboardToken(KeyboardToken)+0x373>
c0015fda:	a1 04 e8 02 c0       	mov    eax,ds:0xc002e804
c0015fdf:	85 c0                	test   eax,eax
c0015fe1:	74 18                	je     c0015ffb <sendKeyboardToken(KeyboardToken)+0x333>
c0015fe3:	a1 04 e8 02 c0       	mov    eax,ds:0xc002e804
c0015fe8:	0f b6 c0             	movzx  eax,al
c0015feb:	83 ec 0c             	sub    esp,0xc
c0015fee:	50                   	push   eax
c0015fef:	e8 68 fc ff ff       	call   c0015c5c <sendKeyToTerminal(unsigned char)>
c0015ff4:	83 c4 10             	add    esp,0x10
c0015ff7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015ffb:	c7 05 04 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e804,0x0
c0016005:	eb 34                	jmp    c001603b <sendKeyboardToken(KeyboardToken)+0x373>
c0016007:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001600a:	66 3d 01 01          	cmp    ax,0x101
c001600e:	75 2b                	jne    c001603b <sendKeyboardToken(KeyboardToken)+0x373>
c0016010:	a1 04 e8 02 c0       	mov    eax,ds:0xc002e804
c0016015:	85 c0                	test   eax,eax
c0016017:	74 18                	je     c0016031 <sendKeyboardToken(KeyboardToken)+0x369>
c0016019:	a1 04 e8 02 c0       	mov    eax,ds:0xc002e804
c001601e:	0f b6 c0             	movzx  eax,al
c0016021:	83 ec 0c             	sub    esp,0xc
c0016024:	50                   	push   eax
c0016025:	e8 32 fc ff ff       	call   c0015c5c <sendKeyToTerminal(unsigned char)>
c001602a:	83 c4 10             	add    esp,0x10
c001602d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016031:	c7 05 04 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e804,0x0
c001603b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001603e:	83 f0 01             	xor    eax,0x1
c0016041:	84 c0                	test   al,al
c0016043:	74 4c                	je     c0016091 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016045:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016048:	83 f0 01             	xor    eax,0x1
c001604b:	84 c0                	test   al,al
c001604d:	74 42                	je     c0016091 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001604f:	a0 00 e5 02 c0       	mov    al,ds:0xc002e500
c0016054:	83 f0 01             	xor    eax,0x1
c0016057:	84 c0                	test   al,al
c0016059:	74 36                	je     c0016091 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001605b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001605e:	66 83 f8 1f          	cmp    ax,0x1f
c0016062:	76 09                	jbe    c001606d <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016064:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016067:	66 83 f8 7e          	cmp    ax,0x7e
c001606b:	76 12                	jbe    c001607f <sendKeyboardToken(KeyboardToken)+0x3b7>
c001606d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016070:	66 83 f8 0a          	cmp    ax,0xa
c0016074:	74 09                	je     c001607f <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016076:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016079:	66 83 f8 08          	cmp    ax,0x8
c001607d:	75 12                	jne    c0016091 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001607f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016082:	0f b6 c0             	movzx  eax,al
c0016085:	83 ec 0c             	sub    esp,0xc
c0016088:	50                   	push   eax
c0016089:	e8 ce fb ff ff       	call   c0015c5c <sendKeyToTerminal(unsigned char)>
c001608e:	83 c4 10             	add    esp,0x10
c0016091:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016094:	83 f0 01             	xor    eax,0x1
c0016097:	84 c0                	test   al,al
c0016099:	74 4f                	je     c00160ea <sendKeyboardToken(KeyboardToken)+0x422>
c001609b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001609e:	83 f0 01             	xor    eax,0x1
c00160a1:	84 c0                	test   al,al
c00160a3:	74 45                	je     c00160ea <sendKeyboardToken(KeyboardToken)+0x422>
c00160a5:	a0 00 e5 02 c0       	mov    al,ds:0xc002e500
c00160aa:	84 c0                	test   al,al
c00160ac:	74 3c                	je     c00160ea <sendKeyboardToken(KeyboardToken)+0x422>
c00160ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b1:	66 83 f8 3f          	cmp    ax,0x3f
c00160b5:	76 33                	jbe    c00160ea <sendKeyboardToken(KeyboardToken)+0x422>
c00160b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ba:	66 83 f8 7f          	cmp    ax,0x7f
c00160be:	77 2a                	ja     c00160ea <sendKeyboardToken(KeyboardToken)+0x422>
c00160c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c3:	88 c2                	mov    dl,al
c00160c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c8:	66 83 f8 5f          	cmp    ax,0x5f
c00160cc:	76 04                	jbe    c00160d2 <sendKeyboardToken(KeyboardToken)+0x40a>
c00160ce:	b0 20                	mov    al,0x20
c00160d0:	eb 02                	jmp    c00160d4 <sendKeyboardToken(KeyboardToken)+0x40c>
c00160d2:	b0 00                	mov    al,0x0
c00160d4:	29 c2                	sub    edx,eax
c00160d6:	88 d0                	mov    al,dl
c00160d8:	83 e8 40             	sub    eax,0x40
c00160db:	0f b6 c0             	movzx  eax,al
c00160de:	83 ec 0c             	sub    esp,0xc
c00160e1:	50                   	push   eax
c00160e2:	e8 75 fb ff ff       	call   c0015c5c <sendKeyToTerminal(unsigned char)>
c00160e7:	83 c4 10             	add    esp,0x10
c00160ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ed:	66 3d 00 03          	cmp    ax,0x300
c00160f1:	75 0f                	jne    c0016102 <sendKeyboardToken(KeyboardToken)+0x43a>
c00160f3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00160f6:	83 f0 01             	xor    eax,0x1
c00160f9:	84 c0                	test   al,al
c00160fb:	74 05                	je     c0016102 <sendKeyboardToken(KeyboardToken)+0x43a>
c00160fd:	e8 99 ac ff ff       	call   c0010d9b <doTerminalCycle()>
c0016102:	90                   	nop
c0016103:	c9                   	leave  
c0016104:	c3                   	ret    

c0016105 <clearInternalKeybuffer(VgaText*)>:
c0016105:	55                   	push   ebp
c0016106:	89 e5                	mov    ebp,esp
c0016108:	83 ec 08             	sub    esp,0x8
c001610b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001610e:	05 34 11 00 00       	add    eax,0x1134
c0016113:	83 ec 0c             	sub    esp,0xc
c0016116:	50                   	push   eax
c0016117:	e8 78 a6 fe ff       	call   c0000794 <strlen>
c001611c:	83 c4 10             	add    esp,0x10
c001611f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016122:	81 c2 34 11 00 00    	add    edx,0x1134
c0016128:	83 ec 04             	sub    esp,0x4
c001612b:	50                   	push   eax
c001612c:	6a 00                	push   0x0
c001612e:	52                   	push   edx
c001612f:	e8 44 a6 fe ff       	call   c0000778 <memset>
c0016134:	83 c4 10             	add    esp,0x10
c0016137:	90                   	nop
c0016138:	c9                   	leave  
c0016139:	c3                   	ret    

c001613a <readKeyboard(VgaText*, char*, unsigned long)>:
c001613a:	55                   	push   ebp
c001613b:	89 e5                	mov    ebp,esp
c001613d:	83 ec 18             	sub    esp,0x18
c0016140:	fb                   	sti    
c0016141:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016148:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001614c:	0f 84 8a 00 00 00    	je     c00161dc <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0016152:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016155:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001615b:	84 c0                	test   al,al
c001615d:	75 11                	jne    c0016170 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c001615f:	e8 d3 7a 00 00       	call   c001dc37 <lockScheduler()>
c0016164:	e8 09 7e 00 00       	call   c001df72 <schedule()>
c0016169:	e8 cb 7a 00 00       	call   c001dc39 <unlockScheduler()>
c001616e:	eb e2                	jmp    c0016152 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0016170:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016173:	8d 50 01             	lea    edx,[eax+0x1]
c0016176:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016179:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001617c:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0016182:	88 10                	mov    BYTE PTR [eax],dl
c0016184:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016187:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001618d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0016190:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016193:	05 34 11 00 00       	add    eax,0x1134
c0016198:	83 ec 0c             	sub    esp,0xc
c001619b:	50                   	push   eax
c001619c:	e8 f3 a5 fe ff       	call   c0000794 <strlen>
c00161a1:	83 c4 10             	add    esp,0x10
c00161a4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00161a7:	81 c2 34 11 00 00    	add    edx,0x1134
c00161ad:	8d 4a 01             	lea    ecx,[edx+0x1]
c00161b0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00161b3:	81 c2 34 11 00 00    	add    edx,0x1134
c00161b9:	83 ec 04             	sub    esp,0x4
c00161bc:	50                   	push   eax
c00161bd:	51                   	push   ecx
c00161be:	52                   	push   edx
c00161bf:	e8 b8 a4 fe ff       	call   c000067c <memmove>
c00161c4:	83 c4 10             	add    esp,0x10
c00161c7:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00161ca:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00161cd:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00161d1:	0f 85 71 ff ff ff    	jne    c0016148 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00161d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00161da:	eb 03                	jmp    c00161df <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c00161dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00161df:	c9                   	leave  
c00161e0:	c3                   	ret    
c00161e1:	90                   	nop

c00161e2 <Keyboard::Keyboard(char const*)>:
c00161e2:	83 ec 0c             	sub    esp,0xc
c00161e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161e9:	83 ec 08             	sub    esp,0x8
c00161ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161f0:	50                   	push   eax
c00161f1:	e8 b4 e1 ff ff       	call   c00143aa <Device::Device(char const*)>
c00161f6:	83 c4 10             	add    esp,0x10
c00161f9:	ba 98 af 02 c0       	mov    edx,0xc002af98
c00161fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016202:	89 10                	mov    DWORD PTR [eax],edx
c0016204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016208:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016212:	c6 05 e4 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e3e4,0x1
c0016219:	90                   	nop
c001621a:	83 c4 0c             	add    esp,0xc
c001621d:	c3                   	ret    

c001621e <Keyboard::~Keyboard()>:
c001621e:	83 ec 0c             	sub    esp,0xc
c0016221:	ba 98 af 02 c0       	mov    edx,0xc002af98
c0016226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001622a:	89 10                	mov    DWORD PTR [eax],edx
c001622c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016230:	83 ec 0c             	sub    esp,0xc
c0016233:	50                   	push   eax
c0016234:	e8 53 de ff ff       	call   c001408c <Device::~Device()>
c0016239:	83 c4 10             	add    esp,0x10
c001623c:	90                   	nop
c001623d:	83 c4 0c             	add    esp,0xc
c0016240:	c3                   	ret    
c0016241:	90                   	nop

c0016242 <Keyboard::~Keyboard()>:
c0016242:	83 ec 0c             	sub    esp,0xc
c0016245:	83 ec 0c             	sub    esp,0xc
c0016248:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001624c:	e8 cd ff ff ff       	call   c001621e <Keyboard::~Keyboard()>
c0016251:	83 c4 10             	add    esp,0x10
c0016254:	83 ec 08             	sub    esp,0x8
c0016257:	68 5c 01 00 00       	push   0x15c
c001625c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016260:	e8 4f ca ff ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0016265:	83 c4 10             	add    esp,0x10
c0016268:	83 c4 0c             	add    esp,0xc
c001626b:	c3                   	ret    

c001626c <LogicalDisk::close(int, int, void*)>:
c001626c:	83 c8 ff             	or     eax,0xffffffff
c001626f:	c3                   	ret    

c0016270 <LogicalDisk::~LogicalDisk()>:
c0016270:	83 ec 0c             	sub    esp,0xc
c0016273:	ba 48 b0 02 c0       	mov    edx,0xc002b048
c0016278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001627c:	89 10                	mov    DWORD PTR [eax],edx
c001627e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016282:	83 ec 0c             	sub    esp,0xc
c0016285:	50                   	push   eax
c0016286:	e8 01 de ff ff       	call   c001408c <Device::~Device()>
c001628b:	83 c4 10             	add    esp,0x10
c001628e:	90                   	nop
c001628f:	83 c4 0c             	add    esp,0xc
c0016292:	c3                   	ret    
c0016293:	90                   	nop

c0016294 <LogicalDisk::~LogicalDisk()>:
c0016294:	83 ec 0c             	sub    esp,0xc
c0016297:	83 ec 0c             	sub    esp,0xc
c001629a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001629e:	e8 cd ff ff ff       	call   c0016270 <LogicalDisk::~LogicalDisk()>
c00162a3:	83 c4 10             	add    esp,0x10
c00162a6:	83 ec 08             	sub    esp,0x8
c00162a9:	68 74 01 00 00       	push   0x174
c00162ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162b2:	e8 fd c9 ff ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c00162b7:	83 c4 10             	add    esp,0x10
c00162ba:	83 c4 0c             	add    esp,0xc
c00162bd:	c3                   	ret    

c00162be <LogicalDisk::open(int, int, void*)>:
c00162be:	83 ec 18             	sub    esp,0x18
c00162c1:	68 c4 af 02 c0       	push   0xc002afc4
c00162c6:	e8 72 41 00 00       	call   c001a43d <Krnl::panic(char const*)>
c00162cb:	83 c8 ff             	or     eax,0xffffffff
c00162ce:	83 c4 1c             	add    esp,0x1c
c00162d1:	c3                   	ret    

c00162d2 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00162d2:	53                   	push   ebx
c00162d3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00162d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00162db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162df:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00162e5:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00162eb:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00162f1:	77 10                	ja     c0016303 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00162f3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00162f9:	89 d3                	mov    ebx,edx
c00162fb:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016301:	72 05                	jb     c0016308 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016303:	83 c8 ff             	or     eax,0xffffffff
c0016306:	89 c2                	mov    edx,eax
c0016308:	5b                   	pop    ebx
c0016309:	c3                   	ret    

c001630a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001630a:	56                   	push   esi
c001630b:	83 c8 ff             	or     eax,0xffffffff
c001630e:	53                   	push   ebx
c001630f:	89 c2                	mov    edx,eax
c0016311:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016315:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016319:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001631d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016323:	77 27                	ja     c001634c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016325:	89 d8                	mov    eax,ebx
c0016327:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001632d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016333:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016338:	89 c2                	mov    edx,eax
c001633a:	73 10                	jae    c001634c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001633c:	89 c8                	mov    eax,ecx
c001633e:	89 da                	mov    edx,ebx
c0016340:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016346:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001634c:	5b                   	pop    ebx
c001634d:	5e                   	pop    esi
c001634e:	c3                   	ret    
c001634f:	90                   	nop

c0016350 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016350:	83 ec 1c             	sub    esp,0x1c
c0016353:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016357:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001635b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001635f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016363:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016367:	89 04 24             	mov    DWORD PTR [esp],eax
c001636a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001636e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016372:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016376:	83 ec 08             	sub    esp,0x8
c0016379:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001637d:	50                   	push   eax
c001637e:	e8 27 e0 ff ff       	call   c00143aa <Device::Device(char const*)>
c0016383:	83 c4 10             	add    esp,0x10
c0016386:	ba 48 b0 02 c0       	mov    edx,0xc002b048
c001638b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001638f:	89 10                	mov    DWORD PTR [eax],edx
c0016391:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016395:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001639c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163a0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00163a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163ab:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00163b5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00163b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163c1:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00163c7:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00163cd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00163d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00163d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00163d8:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00163de:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00163e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163e8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00163ec:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00163f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163f6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016400:	90                   	nop
c0016401:	83 c4 1c             	add    esp,0x1c
c0016404:	c3                   	ret    
c0016405:	90                   	nop

c0016406 <LogicalDisk::assignDriveLetter()>:
c0016406:	55                   	push   ebp
c0016407:	57                   	push   edi
c0016408:	56                   	push   esi
c0016409:	53                   	push   ebx
c001640a:	83 ec 14             	sub    esp,0x14
c001640d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016411:	8b 3d 20 e8 02 c0    	mov    edi,DWORD PTR ds:0xc002e820
c0016417:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001641d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016421:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016427:	8b 3d 24 e8 02 c0    	mov    edi,DWORD PTR ds:0xc002e824
c001642d:	3c 01                	cmp    al,0x1
c001642f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016433:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016437:	19 c0                	sbb    eax,eax
c0016439:	83 e0 02             	and    eax,0x2
c001643c:	83 c0 41             	add    eax,0x41
c001643f:	0f be e8             	movsx  ebp,al
c0016442:	3c 43                	cmp    al,0x43
c0016444:	75 10                	jne    c0016456 <LogicalDisk::assignDriveLetter()+0x50>
c0016446:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001644d:	75 5d                	jne    c00164ac <LogicalDisk::assignDriveLetter()+0xa6>
c001644f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016454:	75 56                	jne    c00164ac <LogicalDisk::assignDriveLetter()+0xa6>
c0016456:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016459:	ba 01 00 00 00       	mov    edx,0x1
c001645e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016462:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016466:	d3 e2                	shl    edx,cl
c0016468:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001646c:	89 d7                	mov    edi,edx
c001646e:	89 d6                	mov    esi,edx
c0016470:	c1 ff 1f             	sar    edi,0x1f
c0016473:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016477:	21 f9                	and    ecx,edi
c0016479:	09 d1                	or     ecx,edx
c001647b:	75 2f                	jne    c00164ac <LogicalDisk::assignDriveLetter()+0xa6>
c001647d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016481:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016485:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001648b:	09 f2                	or     edx,esi
c001648d:	89 15 20 e8 02 c0    	mov    DWORD PTR ds:0xc002e820,edx
c0016493:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016497:	09 fa                	or     edx,edi
c0016499:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001649d:	89 15 24 e8 02 c0    	mov    DWORD PTR ds:0xc002e824,edx
c00164a3:	89 1c bd 40 e8 02 c0 	mov    DWORD PTR [edi*4-0x3ffd17c0],ebx
c00164aa:	eb 08                	jmp    c00164b4 <LogicalDisk::assignDriveLetter()+0xae>
c00164ac:	45                   	inc    ebp
c00164ad:	40                   	inc    eax
c00164ae:	3c 5b                	cmp    al,0x5b
c00164b0:	75 90                	jne    c0016442 <LogicalDisk::assignDriveLetter()+0x3c>
c00164b2:	31 c0                	xor    eax,eax
c00164b4:	83 c4 14             	add    esp,0x14
c00164b7:	5b                   	pop    ebx
c00164b8:	5e                   	pop    esi
c00164b9:	5f                   	pop    edi
c00164ba:	5d                   	pop    ebp
c00164bb:	c3                   	ret    

c00164bc <LogicalDisk::mount()>:
c00164bc:	56                   	push   esi
c00164bd:	53                   	push   ebx
c00164be:	51                   	push   ecx
c00164bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00164c3:	8b 1d b0 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3b0
c00164c9:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00164d3:	85 db                	test   ebx,ebx
c00164d5:	74 50                	je     c0016527 <LogicalDisk::mount()+0x6b>
c00164d7:	e8 46 77 00 00       	call   c001dc22 <getIRQNestingLevel()>
c00164dc:	52                   	push   edx
c00164dd:	52                   	push   edx
c00164de:	50                   	push   eax
c00164df:	68 e8 af 02 c0       	push   0xc002afe8
c00164e4:	e8 ab c8 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00164e9:	83 c4 0c             	add    esp,0xc
c00164ec:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00164f3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00164f5:	83 e8 41             	sub    eax,0x41
c00164f8:	50                   	push   eax
c00164f9:	56                   	push   esi
c00164fa:	53                   	push   ebx
c00164fb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00164fe:	83 c4 10             	add    esp,0x10
c0016501:	84 c0                	test   al,al
c0016503:	74 08                	je     c001650d <LogicalDisk::mount()+0x51>
c0016505:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001650b:	eb 1c                	jmp    c0016529 <LogicalDisk::mount()+0x6d>
c001650d:	e8 10 77 00 00       	call   c001dc22 <getIRQNestingLevel()>
c0016512:	51                   	push   ecx
c0016513:	51                   	push   ecx
c0016514:	50                   	push   eax
c0016515:	68 03 b0 02 c0       	push   0xc002b003
c001651a:	e8 75 c8 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001651f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016522:	83 c4 10             	add    esp,0x10
c0016525:	eb ac                	jmp    c00164d3 <LogicalDisk::mount()+0x17>
c0016527:	31 c0                	xor    eax,eax
c0016529:	5a                   	pop    edx
c001652a:	5b                   	pop    ebx
c001652b:	5e                   	pop    esi
c001652c:	c3                   	ret    
c001652d:	90                   	nop

c001652e <LogicalDisk::unmount()>:
c001652e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016532:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001653c:	c3                   	ret    
c001653d:	90                   	nop

c001653e <LogicalDisk::eject()>:
c001653e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016542:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016548:	8b 10                	mov    edx,DWORD PTR [eax]
c001654a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001654e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016551:	90                   	nop

c0016552 <LogicalDisk::unassignDriveLetter()>:
c0016552:	57                   	push   edi
c0016553:	56                   	push   esi
c0016554:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016558:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001655f:	84 c9                	test   cl,cl
c0016561:	75 0f                	jne    c0016572 <LogicalDisk::unassignDriveLetter()+0x20>
c0016563:	c7 44 24 0c 1e b0 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b01e
c001656b:	5e                   	pop    esi
c001656c:	5f                   	pop    edi
c001656d:	e9 cb 3e 00 00       	jmp    c001a43d <Krnl::panic(char const*)>
c0016572:	83 e9 41             	sub    ecx,0x41
c0016575:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001657c:	b8 01 00 00 00       	mov    eax,0x1
c0016581:	c7 04 8d 40 e8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd17c0],0x0
c001658c:	d3 e0                	shl    eax,cl
c001658e:	89 c7                	mov    edi,eax
c0016590:	f7 d0                	not    eax
c0016592:	c1 ff 1f             	sar    edi,0x1f
c0016595:	21 05 20 e8 02 c0    	and    DWORD PTR ds:0xc002e820,eax
c001659b:	89 fe                	mov    esi,edi
c001659d:	f7 d6                	not    esi
c001659f:	21 35 24 e8 02 c0    	and    DWORD PTR ds:0xc002e824,esi
c00165a5:	5e                   	pop    esi
c00165a6:	5f                   	pop    edi
c00165a7:	c3                   	ret    

c00165a8 <LogicalDisk::read(unsigned long long, int, void*)>:
c00165a8:	57                   	push   edi
c00165a9:	56                   	push   esi
c00165aa:	53                   	push   ebx
c00165ab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00165af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00165b3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00165b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165bb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00165c1:	77 41                	ja     c0016604 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00165c3:	99                   	cdq    
c00165c4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00165ca:	01 c8                	add    eax,ecx
c00165cc:	11 da                	adc    edx,ebx
c00165ce:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00165d4:	19 d7                	sbb    edi,edx
c00165d6:	72 33                	jb     c001660b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00165d8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00165de:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00165e4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00165e8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00165ec:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00165f2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00165f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00165fc:	5b                   	pop    ebx
c00165fd:	5e                   	pop    esi
c00165fe:	5f                   	pop    edi
c00165ff:	e9 b0 0a 00 00       	jmp    c00170b4 <VCache::read(unsigned long long, int, void*)>
c0016604:	b8 05 00 00 00       	mov    eax,0x5
c0016609:	eb 05                	jmp    c0016610 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001660b:	b8 07 00 00 00       	mov    eax,0x7
c0016610:	5b                   	pop    ebx
c0016611:	5e                   	pop    esi
c0016612:	5f                   	pop    edi
c0016613:	c3                   	ret    

c0016614 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016614:	57                   	push   edi
c0016615:	56                   	push   esi
c0016616:	53                   	push   ebx
c0016617:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001661b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001661f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016623:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016627:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001662d:	77 41                	ja     c0016670 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001662f:	99                   	cdq    
c0016630:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016636:	01 c8                	add    eax,ecx
c0016638:	11 da                	adc    edx,ebx
c001663a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016640:	19 d7                	sbb    edi,edx
c0016642:	72 33                	jb     c0016677 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016644:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001664a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016650:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016654:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016658:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001665e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016664:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016668:	5b                   	pop    ebx
c0016669:	5e                   	pop    esi
c001666a:	5f                   	pop    edi
c001666b:	e9 4e 09 00 00       	jmp    c0016fbe <VCache::write(unsigned long long, int, void*)>
c0016670:	b8 05 00 00 00       	mov    eax,0x5
c0016675:	eb 05                	jmp    c001667c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016677:	b8 07 00 00 00       	mov    eax,0x7
c001667c:	5b                   	pop    ebx
c001667d:	5e                   	pop    esi
c001667e:	5f                   	pop    edi
c001667f:	c3                   	ret    

c0016680 <Mouse::Mouse(char const*)>:
c0016680:	83 ec 0c             	sub    esp,0xc
c0016683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016687:	83 ec 08             	sub    esp,0x8
c001668a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001668e:	50                   	push   eax
c001668f:	e8 16 dd ff ff       	call   c00143aa <Device::Device(char const*)>
c0016694:	83 c4 10             	add    esp,0x10
c0016697:	ba 74 b0 02 c0       	mov    edx,0xc002b074
c001669c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166a0:	89 10                	mov    DWORD PTR [eax],edx
c00166a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166a6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00166b0:	90                   	nop
c00166b1:	83 c4 0c             	add    esp,0xc
c00166b4:	c3                   	ret    
c00166b5:	90                   	nop

c00166b6 <Mouse::~Mouse()>:
c00166b6:	83 ec 0c             	sub    esp,0xc
c00166b9:	ba 74 b0 02 c0       	mov    edx,0xc002b074
c00166be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166c2:	89 10                	mov    DWORD PTR [eax],edx
c00166c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166c8:	83 ec 0c             	sub    esp,0xc
c00166cb:	50                   	push   eax
c00166cc:	e8 bb d9 ff ff       	call   c001408c <Device::~Device()>
c00166d1:	83 c4 10             	add    esp,0x10
c00166d4:	90                   	nop
c00166d5:	83 c4 0c             	add    esp,0xc
c00166d8:	c3                   	ret    
c00166d9:	90                   	nop

c00166da <Mouse::~Mouse()>:
c00166da:	83 ec 0c             	sub    esp,0xc
c00166dd:	83 ec 0c             	sub    esp,0xc
c00166e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166e4:	e8 cd ff ff ff       	call   c00166b6 <Mouse::~Mouse()>
c00166e9:	83 c4 10             	add    esp,0x10
c00166ec:	83 ec 08             	sub    esp,0x8
c00166ef:	68 58 01 00 00       	push   0x158
c00166f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166f8:	e8 b7 c5 ff ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c00166fd:	83 c4 10             	add    esp,0x10
c0016700:	83 c4 0c             	add    esp,0xc
c0016703:	c3                   	ret    

c0016704 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016704:	55                   	push   ebp
c0016705:	57                   	push   edi
c0016706:	56                   	push   esi
c0016707:	53                   	push   ebx
c0016708:	81 ec 28 01 00 00    	sub    esp,0x128
c001670e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016715:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001671c:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016723:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001672a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001672e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016732:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016739:	e8 68 dd ff ff       	call   c00144a6 <Device::getName()>
c001673e:	5a                   	pop    edx
c001673f:	59                   	pop    ecx
c0016740:	50                   	push   eax
c0016741:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016745:	55                   	push   ebp
c0016746:	e8 e9 a0 fe ff       	call   c0000834 <strcpy>
c001674b:	5b                   	pop    ebx
c001674c:	58                   	pop    eax
c001674d:	68 98 b0 02 c0       	push   0xc002b098
c0016752:	55                   	push   ebp
c0016753:	e8 1c a2 fe ff       	call   c0000974 <strcat>
c0016758:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001675f:	e8 dc 90 ff ff       	call   c000f840 <malloc>
c0016764:	83 c4 0c             	add    esp,0xc
c0016767:	89 c3                	mov    ebx,eax
c0016769:	57                   	push   edi
c001676a:	56                   	push   esi
c001676b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001676f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016773:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001677a:	55                   	push   ebp
c001677b:	50                   	push   eax
c001677c:	e8 cf fb ff ff       	call   c0016350 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016781:	83 c4 14             	add    esp,0x14
c0016784:	53                   	push   ebx
c0016785:	e8 7c fc ff ff       	call   c0016406 <LogicalDisk::assignDriveLetter()>
c001678a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001678d:	89 c6                	mov    esi,eax
c001678f:	e8 28 fd ff ff       	call   c00164bc <LogicalDisk::mount()>
c0016794:	58                   	pop    eax
c0016795:	5a                   	pop    edx
c0016796:	53                   	push   ebx
c0016797:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001679e:	e8 17 da ff ff       	call   c00141ba <Device::addChild(Device*)>
c00167a3:	59                   	pop    ecx
c00167a4:	89 f0                	mov    eax,esi
c00167a6:	5b                   	pop    ebx
c00167a7:	0f be f0             	movsx  esi,al
c00167aa:	56                   	push   esi
c00167ab:	68 a3 b0 02 c0       	push   0xc002b0a3
c00167b0:	e8 df c5 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00167b5:	81 c4 2c 01 00 00    	add    esp,0x12c
c00167bb:	5b                   	pop    ebx
c00167bc:	5e                   	pop    esi
c00167bd:	5f                   	pop    edi
c00167be:	5d                   	pop    ebp
c00167bf:	c3                   	ret    

c00167c0 <createPartitionsForDisk(PhysicalDisk*)>:
c00167c0:	55                   	push   ebp
c00167c1:	57                   	push   edi
c00167c2:	56                   	push   esi
c00167c3:	53                   	push   ebx
c00167c4:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00167ca:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00167d1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00167d7:	3d 00 02 00 00       	cmp    eax,0x200
c00167dc:	74 27                	je     c0016805 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00167de:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00167e4:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00167ea:	83 ec 10             	sub    esp,0x10
c00167ed:	0f a4 f7 0a          	shld   edi,esi,0xa
c00167f1:	99                   	cdq    
c00167f2:	c1 e6 0a             	shl    esi,0xa
c00167f5:	52                   	push   edx
c00167f6:	89 fd                	mov    ebp,edi
c00167f8:	50                   	push   eax
c00167f9:	55                   	push   ebp
c00167fa:	56                   	push   esi
c00167fb:	e8 3c 00 01 00       	call   c002683c <__udivdi3>
c0016800:	e9 b1 00 00 00       	jmp    c00168b6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016805:	83 ec 0c             	sub    esp,0xc
c0016808:	8b 03                	mov    eax,DWORD PTR [ebx]
c001680a:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001680e:	56                   	push   esi
c001680f:	6a 01                	push   0x1
c0016811:	6a 00                	push   0x0
c0016813:	6a 00                	push   0x0
c0016815:	53                   	push   ebx
c0016816:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016819:	83 c4 20             	add    esp,0x20
c001681c:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016824:	75 0a                	jne    c0016830 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016826:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001682e:	74 2c                	je     c001685c <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016830:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016836:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001683c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016842:	83 ec 10             	sub    esp,0x10
c0016845:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016849:	89 f7                	mov    edi,esi
c001684b:	c1 e0 0a             	shl    eax,0xa
c001684e:	c1 ff 1f             	sar    edi,0x1f
c0016851:	57                   	push   edi
c0016852:	56                   	push   esi
c0016853:	52                   	push   edx
c0016854:	50                   	push   eax
c0016855:	e8 e2 ff 00 00       	call   c002683c <__udivdi3>
c001685a:	eb 5a                	jmp    c00168b6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001685c:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016863:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001686a:	83 e1 7f             	and    ecx,0x7f
c001686d:	83 e0 7f             	and    eax,0x7f
c0016870:	01 c1                	add    ecx,eax
c0016872:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016879:	83 e0 7f             	and    eax,0x7f
c001687c:	01 c1                	add    ecx,eax
c001687e:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016885:	83 e0 7f             	and    eax,0x7f
c0016888:	00 c1                	add    cl,al
c001688a:	74 41                	je     c00168cd <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001688c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016892:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016898:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001689e:	83 ec 10             	sub    esp,0x10
c00168a1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00168a5:	89 f7                	mov    edi,esi
c00168a7:	c1 e0 0a             	shl    eax,0xa
c00168aa:	c1 ff 1f             	sar    edi,0x1f
c00168ad:	57                   	push   edi
c00168ae:	56                   	push   esi
c00168af:	52                   	push   edx
c00168b0:	50                   	push   eax
c00168b1:	e8 86 ff 00 00       	call   c002683c <__udivdi3>
c00168b6:	83 c4 14             	add    esp,0x14
c00168b9:	52                   	push   edx
c00168ba:	50                   	push   eax
c00168bb:	6a 00                	push   0x0
c00168bd:	6a 00                	push   0x0
c00168bf:	53                   	push   ebx
c00168c0:	e8 3f fe ff ff       	call   c0016704 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00168c5:	83 c4 20             	add    esp,0x20
c00168c8:	e9 79 01 00 00       	jmp    c0016a46 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00168cd:	89 f0                	mov    eax,esi
c00168cf:	31 f6                	xor    esi,esi
c00168d1:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00168d8:	75 02                	jne    c00168dc <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00168da:	89 f1                	mov    ecx,esi
c00168dc:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00168e3:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00168ea:	c1 e2 08             	shl    edx,0x8
c00168ed:	c1 e7 10             	shl    edi,0x10
c00168f0:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00168f8:	09 fa                	or     edx,edi
c00168fa:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016902:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016909:	83 c0 10             	add    eax,0x10
c001690c:	09 fa                	or     edx,edi
c001690e:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016915:	c1 e7 18             	shl    edi,0x18
c0016918:	09 fa                	or     edx,edi
c001691a:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016921:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016925:	c1 e7 10             	shl    edi,0x10
c0016928:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001692f:	c1 e2 08             	shl    edx,0x8
c0016932:	09 fa                	or     edx,edi
c0016934:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001693b:	09 fa                	or     edx,edi
c001693d:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016944:	c1 e7 18             	shl    edi,0x18
c0016947:	09 fa                	or     edx,edi
c0016949:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001694d:	46                   	inc    esi
c001694e:	83 fe 04             	cmp    esi,0x4
c0016951:	0f 85 7a ff ff ff    	jne    c00168d1 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001695b:	83 f0 01             	xor    eax,0x1
c001695e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016962:	75 57                	jne    c00169bb <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016964:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016968:	83 f0 01             	xor    eax,0x1
c001696b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001696f:	75 4a                	jne    c00169bb <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016971:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016975:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001697d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016985:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001698b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016991:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016997:	0f a4 c2 0a          	shld   edx,eax,0xa
c001699b:	89 f7                	mov    edi,esi
c001699d:	c1 e0 0a             	shl    eax,0xa
c00169a0:	c1 ff 1f             	sar    edi,0x1f
c00169a3:	57                   	push   edi
c00169a4:	56                   	push   esi
c00169a5:	52                   	push   edx
c00169a6:	50                   	push   eax
c00169a7:	e8 90 fe 00 00       	call   c002683c <__udivdi3>
c00169ac:	83 c4 10             	add    esp,0x10
c00169af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00169b3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00169b7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00169bb:	84 c9                	test   cl,cl
c00169bd:	74 53                	je     c0016a12 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00169bf:	0f b6 c9             	movzx  ecx,cl
c00169c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00169ca:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00169ce:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00169d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00169d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00169da:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00169de:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00169e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00169e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00169ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00169ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00169f2:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00169f6:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00169fa:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00169fe:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016a02:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016a06:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016a0a:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016a0e:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016a12:	31 ed                	xor    ebp,ebp
c0016a14:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016a18:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016a1c:	89 f8                	mov    eax,edi
c0016a1e:	09 f0                	or     eax,esi
c0016a20:	74 1e                	je     c0016a40 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016a22:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016a26:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016a2a:	89 d1                	mov    ecx,edx
c0016a2c:	09 c1                	or     ecx,eax
c0016a2e:	74 10                	je     c0016a40 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016a30:	83 ec 0c             	sub    esp,0xc
c0016a33:	57                   	push   edi
c0016a34:	56                   	push   esi
c0016a35:	52                   	push   edx
c0016a36:	50                   	push   eax
c0016a37:	53                   	push   ebx
c0016a38:	e8 c7 fc ff ff       	call   c0016704 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a3d:	83 c4 20             	add    esp,0x20
c0016a40:	45                   	inc    ebp
c0016a41:	83 fd 04             	cmp    ebp,0x4
c0016a44:	75 ce                	jne    c0016a14 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016a46:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016a4c:	5b                   	pop    ebx
c0016a4d:	5e                   	pop    esi
c0016a4e:	5f                   	pop    edi
c0016a4f:	5d                   	pop    ebp
c0016a50:	c3                   	ret    
c0016a51:	90                   	nop

c0016a52 <Serial::Serial(char const*)>:
c0016a52:	83 ec 0c             	sub    esp,0xc
c0016a55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a59:	83 ec 08             	sub    esp,0x8
c0016a5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a60:	50                   	push   eax
c0016a61:	e8 44 d9 ff ff       	call   c00143aa <Device::Device(char const*)>
c0016a66:	83 c4 10             	add    esp,0x10
c0016a69:	ba d0 b0 02 c0       	mov    edx,0xc002b0d0
c0016a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a72:	89 10                	mov    DWORD PTR [eax],edx
c0016a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a78:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016a82:	90                   	nop
c0016a83:	83 c4 0c             	add    esp,0xc
c0016a86:	c3                   	ret    
c0016a87:	90                   	nop

c0016a88 <Serial::~Serial()>:
c0016a88:	83 ec 0c             	sub    esp,0xc
c0016a8b:	ba d0 b0 02 c0       	mov    edx,0xc002b0d0
c0016a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a94:	89 10                	mov    DWORD PTR [eax],edx
c0016a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a9a:	83 ec 0c             	sub    esp,0xc
c0016a9d:	50                   	push   eax
c0016a9e:	e8 e9 d5 ff ff       	call   c001408c <Device::~Device()>
c0016aa3:	83 c4 10             	add    esp,0x10
c0016aa6:	90                   	nop
c0016aa7:	83 c4 0c             	add    esp,0xc
c0016aaa:	c3                   	ret    
c0016aab:	90                   	nop

c0016aac <Serial::~Serial()>:
c0016aac:	83 ec 0c             	sub    esp,0xc
c0016aaf:	83 ec 0c             	sub    esp,0xc
c0016ab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ab6:	e8 cd ff ff ff       	call   c0016a88 <Serial::~Serial()>
c0016abb:	83 c4 10             	add    esp,0x10
c0016abe:	83 ec 08             	sub    esp,0x8
c0016ac1:	68 58 01 00 00       	push   0x158
c0016ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016aca:	e8 e5 c1 ff ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0016acf:	83 c4 10             	add    esp,0x10
c0016ad2:	83 c4 0c             	add    esp,0xc
c0016ad5:	c3                   	ret    

c0016ad6 <Timer::Timer(char const*)>:
c0016ad6:	83 ec 0c             	sub    esp,0xc
c0016ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016add:	83 ec 08             	sub    esp,0x8
c0016ae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ae4:	50                   	push   eax
c0016ae5:	e8 c0 d8 ff ff       	call   c00143aa <Device::Device(char const*)>
c0016aea:	83 c4 10             	add    esp,0x10
c0016aed:	ba 14 b1 02 c0       	mov    edx,0xc002b114
c0016af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016af6:	89 10                	mov    DWORD PTR [eax],edx
c0016af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016afc:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016b06:	90                   	nop
c0016b07:	83 c4 0c             	add    esp,0xc
c0016b0a:	c3                   	ret    
c0016b0b:	90                   	nop

c0016b0c <Timer::~Timer()>:
c0016b0c:	83 ec 0c             	sub    esp,0xc
c0016b0f:	ba 14 b1 02 c0       	mov    edx,0xc002b114
c0016b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b18:	89 10                	mov    DWORD PTR [eax],edx
c0016b1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b1e:	83 ec 0c             	sub    esp,0xc
c0016b21:	50                   	push   eax
c0016b22:	e8 65 d5 ff ff       	call   c001408c <Device::~Device()>
c0016b27:	83 c4 10             	add    esp,0x10
c0016b2a:	90                   	nop
c0016b2b:	83 c4 0c             	add    esp,0xc
c0016b2e:	c3                   	ret    
c0016b2f:	90                   	nop

c0016b30 <Timer::~Timer()>:
c0016b30:	83 ec 0c             	sub    esp,0xc
c0016b33:	83 ec 0c             	sub    esp,0xc
c0016b36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b3a:	e8 cd ff ff ff       	call   c0016b0c <Timer::~Timer()>
c0016b3f:	83 c4 10             	add    esp,0x10
c0016b42:	83 ec 08             	sub    esp,0x8
c0016b45:	68 5c 01 00 00       	push   0x15c
c0016b4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b4e:	e8 61 c1 ff ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0016b53:	83 c4 10             	add    esp,0x10
c0016b56:	83 c4 0c             	add    esp,0xc
c0016b59:	c3                   	ret    

c0016b5a <Timer::read()>:
c0016b5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b5e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016b64:	c3                   	ret    

c0016b65 <timerHandler(unsigned long long)>:
c0016b65:	55                   	push   ebp
c0016b66:	57                   	push   edi
c0016b67:	56                   	push   esi
c0016b68:	53                   	push   ebx
c0016b69:	83 ec 0c             	sub    esp,0xc
c0016b6c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016b70:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016b74:	01 35 b0 e8 02 c0    	add    DWORD PTR ds:0xc002e8b0,esi
c0016b7a:	11 3d b4 e8 02 c0    	adc    DWORD PTR ds:0xc002e8b4,edi
c0016b80:	80 3d 2d e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e22d,0x0
c0016b87:	0f 84 07 01 00 00    	je     c0016c94 <timerHandler(unsigned long long)+0x12f>
c0016b8d:	e8 cc 70 00 00       	call   c001dc5e <lockStuff()>
c0016b92:	83 ec 0c             	sub    esp,0xc
c0016b95:	68 7c 17 03 c0       	push   0xc003177c
c0016b9a:	e8 0f 1d 01 00       	call   c00288ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016b9f:	c7 04 24 7c 17 03 c0 	mov    DWORD PTR [esp],0xc003177c
c0016ba6:	89 c3                	mov    ebx,eax
c0016ba8:	e8 09 1d 01 00       	call   c00288b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016bad:	83 c4 10             	add    esp,0x10
c0016bb0:	84 c0                	test   al,al
c0016bb2:	74 60                	je     c0016c14 <timerHandler(unsigned long long)+0xaf>
c0016bb4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016bba:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016bbd:	85 c0                	test   eax,eax
c0016bbf:	0f 85 91 00 00 00    	jne    c0016c56 <timerHandler(unsigned long long)+0xf1>
c0016bc5:	e9 be 00 00 00       	jmp    c0016c88 <timerHandler(unsigned long long)+0x123>
c0016bca:	83 ec 0c             	sub    esp,0xc
c0016bcd:	55                   	push   ebp
c0016bce:	e8 7b 76 00 00       	call   c001e24e <unblockTask(ThreadControlBlock*)>
c0016bd3:	83 c4 10             	add    esp,0x10
c0016bd6:	39 eb                	cmp    ebx,ebp
c0016bd8:	75 12                	jne    c0016bec <timerHandler(unsigned long long)+0x87>
c0016bda:	83 ec 0c             	sub    esp,0xc
c0016bdd:	68 7c 17 03 c0       	push   0xc003177c
c0016be2:	e8 c7 1c 01 00       	call   c00288ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016be7:	89 c3                	mov    ebx,eax
c0016be9:	83 c4 10             	add    esp,0x10
c0016bec:	83 ec 0c             	sub    esp,0xc
c0016bef:	68 7c 17 03 c0       	push   0xc003177c
c0016bf4:	e8 bd 1c 01 00       	call   c00288b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016bf9:	83 c4 10             	add    esp,0x10
c0016bfc:	84 c0                	test   al,al
c0016bfe:	75 b4                	jne    c0016bb4 <timerHandler(unsigned long long)+0x4f>
c0016c00:	83 ec 0c             	sub    esp,0xc
c0016c03:	68 7c 17 03 c0       	push   0xc003177c
c0016c08:	e8 a1 1c 01 00       	call   c00288ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c0d:	83 c4 10             	add    esp,0x10
c0016c10:	39 d8                	cmp    eax,ebx
c0016c12:	74 a0                	je     c0016bb4 <timerHandler(unsigned long long)+0x4f>
c0016c14:	83 ec 0c             	sub    esp,0xc
c0016c17:	68 7c 17 03 c0       	push   0xc003177c
c0016c1c:	e8 8d 1c 01 00       	call   c00288ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c21:	c7 04 24 7c 17 03 c0 	mov    DWORD PTR [esp],0xc003177c
c0016c28:	89 c5                	mov    ebp,eax
c0016c2a:	e8 a3 1c 01 00       	call   c00288d2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016c2f:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016c32:	83 c4 10             	add    esp,0x10
c0016c35:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016c38:	39 15 b0 e8 02 c0    	cmp    DWORD PTR ds:0xc002e8b0,edx
c0016c3e:	a1 b4 e8 02 c0       	mov    eax,ds:0xc002e8b4
c0016c43:	19 c8                	sbb    eax,ecx
c0016c45:	73 83                	jae    c0016bca <timerHandler(unsigned long long)+0x65>
c0016c47:	50                   	push   eax
c0016c48:	50                   	push   eax
c0016c49:	55                   	push   ebp
c0016c4a:	68 7c 17 03 c0       	push   0xc003177c
c0016c4f:	e8 2c 1d 01 00       	call   c0028980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016c54:	eb 93                	jmp    c0016be9 <timerHandler(unsigned long long)+0x84>
c0016c56:	80 3d 2c e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e22c,0x0
c0016c5d:	74 29                	je     c0016c88 <timerHandler(unsigned long long)+0x123>
c0016c5f:	39 c6                	cmp    esi,eax
c0016c61:	bb 00 00 00 00       	mov    ebx,0x0
c0016c66:	19 df                	sbb    edi,ebx
c0016c68:	72 19                	jb     c0016c83 <timerHandler(unsigned long long)+0x11e>
c0016c6a:	e8 c8 6f 00 00       	call   c001dc37 <lockScheduler()>
c0016c6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c74:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016c77:	e8 f6 72 00 00       	call   c001df72 <schedule()>
c0016c7c:	e8 b8 6f 00 00       	call   c001dc39 <unlockScheduler()>
c0016c81:	eb 05                	jmp    c0016c88 <timerHandler(unsigned long long)+0x123>
c0016c83:	29 f0                	sub    eax,esi
c0016c85:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016c88:	83 c4 0c             	add    esp,0xc
c0016c8b:	5b                   	pop    ebx
c0016c8c:	5e                   	pop    esi
c0016c8d:	5f                   	pop    edi
c0016c8e:	5d                   	pop    ebp
c0016c8f:	e9 63 73 00 00       	jmp    c001dff7 <unlockStuff()>
c0016c94:	83 c4 0c             	add    esp,0xc
c0016c97:	5b                   	pop    ebx
c0016c98:	5e                   	pop    esi
c0016c99:	5f                   	pop    edi
c0016c9a:	5d                   	pop    ebp
c0016c9b:	c3                   	ret    

c0016c9c <setupTimer(int)>:
c0016c9c:	57                   	push   edi
c0016c9d:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0016ca2:	56                   	push   esi
c0016ca3:	53                   	push   ebx
c0016ca4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016ca8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016cae:	83 ec 0c             	sub    esp,0xc
c0016cb1:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016cb7:	e8 ea d7 ff ff       	call   c00144a6 <Device::getName()>
c0016cbc:	83 c4 10             	add    esp,0x10
c0016cbf:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016cc2:	0f 85 8d 00 00 00    	jne    c0016d55 <setupTimer(int)+0xb9>
c0016cc8:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0016ccd:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016cd4:	74 7f                	je     c0016d55 <setupTimer(int)+0xb9>
c0016cd6:	83 ec 0c             	sub    esp,0xc
c0016cd9:	68 5c 01 00 00       	push   0x15c
c0016cde:	e8 5d 8b ff ff       	call   c000f840 <malloc>
c0016ce3:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ce6:	89 c3                	mov    ebx,eax
c0016ce8:	e8 31 f7 00 00       	call   c002641e <PIT::PIT()>
c0016ced:	59                   	pop    ecx
c0016cee:	5f                   	pop    edi
c0016cef:	53                   	push   ebx
c0016cf0:	ff 35 28 e2 02 c0    	push   DWORD PTR ds:0xc002e228
c0016cf6:	e8 bf d4 ff ff       	call   c00141ba <Device::addChild(Device*)>
c0016cfb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016cfd:	6a 00                	push   0x0
c0016cff:	6a 00                	push   0x0
c0016d01:	56                   	push   esi
c0016d02:	53                   	push   ebx
c0016d03:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016d06:	83 c4 14             	add    esp,0x14
c0016d09:	68 60 01 00 00       	push   0x160
c0016d0e:	e8 2d 8b ff ff       	call   c000f840 <malloc>
c0016d13:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d16:	89 c7                	mov    edi,eax
c0016d18:	e8 b1 f5 00 00       	call   c00262ce <APICTimer::APICTimer()>
c0016d1d:	6a 00                	push   0x0
c0016d1f:	6a 00                	push   0x0
c0016d21:	56                   	push   esi
c0016d22:	57                   	push   edi
c0016d23:	e8 a8 f4 00 00       	call   c00261d0 <APICTimer::open(int, int, void*)>
c0016d28:	83 c4 20             	add    esp,0x20
c0016d2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d2d:	6a 00                	push   0x0
c0016d2f:	6a 00                	push   0x0
c0016d31:	6a 00                	push   0x0
c0016d33:	53                   	push   ebx
c0016d34:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d37:	58                   	pop    eax
c0016d38:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0016d3d:	5a                   	pop    edx
c0016d3e:	57                   	push   edi
c0016d3f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016d45:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016d4b:	e8 6a d4 ff ff       	call   c00141ba <Device::addChild(Device*)>
c0016d50:	83 c4 10             	add    esp,0x10
c0016d53:	eb 33                	jmp    c0016d88 <setupTimer(int)+0xec>
c0016d55:	83 ec 0c             	sub    esp,0xc
c0016d58:	68 5c 01 00 00       	push   0x15c
c0016d5d:	e8 de 8a ff ff       	call   c000f840 <malloc>
c0016d62:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d65:	89 c3                	mov    ebx,eax
c0016d67:	e8 b2 f6 00 00       	call   c002641e <PIT::PIT()>
c0016d6c:	58                   	pop    eax
c0016d6d:	5a                   	pop    edx
c0016d6e:	53                   	push   ebx
c0016d6f:	ff 35 28 e2 02 c0    	push   DWORD PTR ds:0xc002e228
c0016d75:	e8 40 d4 ff ff       	call   c00141ba <Device::addChild(Device*)>
c0016d7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d7c:	6a 00                	push   0x0
c0016d7e:	6a 00                	push   0x0
c0016d80:	56                   	push   esi
c0016d81:	53                   	push   ebx
c0016d82:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016d85:	83 c4 20             	add    esp,0x20
c0016d88:	89 d8                	mov    eax,ebx
c0016d8a:	5b                   	pop    ebx
c0016d8b:	5e                   	pop    esi
c0016d8c:	5f                   	pop    edi
c0016d8d:	c3                   	ret    

c0016d8e <VCache::VCache(PhysicalDisk*)>:
c0016d8e:	53                   	push   ebx
c0016d8f:	83 ec 18             	sub    esp,0x18
c0016d92:	ba 44 b1 02 c0       	mov    edx,0xc002b144
c0016d97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d9b:	89 10                	mov    DWORD PTR [eax],edx
c0016d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016da1:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016da8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dac:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016db7:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016dbe:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016dc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dc9:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016dd0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ddb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016de2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016de6:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016dea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dee:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016df5:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016dfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e00:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016e04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e08:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016e0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e10:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e18:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016e1f:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016e27:	83 ec 0c             	sub    esp,0xc
c0016e2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e2e:	e8 0d 8a ff ff       	call   c000f840 <malloc>
c0016e33:	83 c4 10             	add    esp,0x10
c0016e36:	89 c3                	mov    ebx,eax
c0016e38:	83 ec 0c             	sub    esp,0xc
c0016e3b:	53                   	push   ebx
c0016e3c:	e8 15 6f 00 00       	call   c001dd56 <Mutex::Mutex()>
c0016e41:	83 c4 10             	add    esp,0x10
c0016e44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e48:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016e4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e4f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016e53:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016e56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e5a:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016e61:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016e65:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016e6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e6f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016e72:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016e76:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016e7c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e82:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016e86:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016e89:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016e8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e90:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016e94:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016e98:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016e9e:	05 00 01 00 00       	add    eax,0x100
c0016ea3:	c1 e0 04             	shl    eax,0x4
c0016ea6:	83 ec 0c             	sub    esp,0xc
c0016ea9:	50                   	push   eax
c0016eaa:	e8 91 89 ff ff       	call   c000f840 <malloc>
c0016eaf:	83 c4 10             	add    esp,0x10
c0016eb2:	89 c2                	mov    edx,eax
c0016eb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eb8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016ebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ebf:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016ec6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eca:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016ece:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ed2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016ed8:	c1 e0 07             	shl    eax,0x7
c0016edb:	83 ec 0c             	sub    esp,0xc
c0016ede:	50                   	push   eax
c0016edf:	e8 5c 89 ff ff       	call   c000f840 <malloc>
c0016ee4:	83 c4 10             	add    esp,0x10
c0016ee7:	89 c2                	mov    edx,eax
c0016ee9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eed:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016ef0:	90                   	nop
c0016ef1:	83 c4 18             	add    esp,0x18
c0016ef4:	5b                   	pop    ebx
c0016ef5:	c3                   	ret    

c0016ef6 <VCache::invalidateReadBuffer()>:
c0016ef6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016efa:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016f00:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016f04:	c3                   	ret    
c0016f05:	90                   	nop

c0016f06 <VCache::writeWriteBuffer()>:
c0016f06:	53                   	push   ebx
c0016f07:	83 ec 14             	sub    esp,0x14
c0016f0a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016f0e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f11:	8b 10                	mov    edx,DWORD PTR [eax]
c0016f13:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016f16:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f19:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016f1c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016f1f:	50                   	push   eax
c0016f20:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016f23:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016f2a:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016f31:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016f35:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016f3c:	83 c4 28             	add    esp,0x28
c0016f3f:	5b                   	pop    ebx
c0016f40:	c3                   	ret    
c0016f41:	90                   	nop

c0016f42 <VCache::~VCache()>:
c0016f42:	83 ec 0c             	sub    esp,0xc
c0016f45:	ba 44 b1 02 c0       	mov    edx,0xc002b144
c0016f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f4e:	89 10                	mov    DWORD PTR [eax],edx
c0016f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f54:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016f57:	84 c0                	test   al,al
c0016f59:	74 0f                	je     c0016f6a <VCache::~VCache()+0x28>
c0016f5b:	83 ec 0c             	sub    esp,0xc
c0016f5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f62:	e8 9f ff ff ff       	call   c0016f06 <VCache::writeWriteBuffer()>
c0016f67:	83 c4 10             	add    esp,0x10
c0016f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f6e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016f71:	83 ec 0c             	sub    esp,0xc
c0016f74:	50                   	push   eax
c0016f75:	e8 d6 88 ff ff       	call   c000f850 <free>
c0016f7a:	83 c4 10             	add    esp,0x10
c0016f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f81:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016f84:	83 ec 0c             	sub    esp,0xc
c0016f87:	50                   	push   eax
c0016f88:	e8 c3 88 ff ff       	call   c000f850 <free>
c0016f8d:	83 c4 10             	add    esp,0x10
c0016f90:	90                   	nop
c0016f91:	83 c4 0c             	add    esp,0xc
c0016f94:	c3                   	ret    
c0016f95:	90                   	nop

c0016f96 <VCache::~VCache()>:
c0016f96:	83 ec 0c             	sub    esp,0xc
c0016f99:	83 ec 0c             	sub    esp,0xc
c0016f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016fa0:	e8 9d ff ff ff       	call   c0016f42 <VCache::~VCache()>
c0016fa5:	83 c4 10             	add    esp,0x10
c0016fa8:	83 ec 08             	sub    esp,0x8
c0016fab:	6a 44                	push   0x44
c0016fad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016fb1:	e8 fe bc ff ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0016fb6:	83 c4 10             	add    esp,0x10
c0016fb9:	83 c4 0c             	add    esp,0xc
c0016fbc:	c3                   	ret    
c0016fbd:	90                   	nop

c0016fbe <VCache::write(unsigned long long, int, void*)>:
c0016fbe:	55                   	push   ebp
c0016fbf:	57                   	push   edi
c0016fc0:	56                   	push   esi
c0016fc1:	53                   	push   ebx
c0016fc2:	83 ec 28             	sub    esp,0x28
c0016fc5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016fc9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016fcd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016fd1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016fd5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016fd8:	e8 db 71 00 00       	call   c001e1b8 <Semaphore::acquire()>
c0016fdd:	83 c4 10             	add    esp,0x10
c0016fe0:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016fe4:	74 0c                	je     c0016ff2 <VCache::write(unsigned long long, int, void*)+0x34>
c0016fe6:	83 ec 0c             	sub    esp,0xc
c0016fe9:	53                   	push   ebx
c0016fea:	e8 07 ff ff ff       	call   c0016ef6 <VCache::invalidateReadBuffer()>
c0016fef:	83 c4 10             	add    esp,0x10
c0016ff2:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016ff6:	74 66                	je     c001705e <VCache::write(unsigned long long, int, void*)+0xa0>
c0016ff8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016ffb:	99                   	cdq    
c0016ffc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017000:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017003:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017006:	89 c1                	mov    ecx,eax
c0017008:	89 d0                	mov    eax,edx
c001700a:	31 f1                	xor    ecx,esi
c001700c:	31 f8                	xor    eax,edi
c001700e:	89 ca                	mov    edx,ecx
c0017010:	09 c2                	or     edx,eax
c0017012:	75 3e                	jne    c0017052 <VCache::write(unsigned long long, int, void*)+0x94>
c0017014:	83 fd 01             	cmp    ebp,0x1
c0017017:	75 39                	jne    c0017052 <VCache::write(unsigned long long, int, void*)+0x94>
c0017019:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001701c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017022:	51                   	push   ecx
c0017023:	50                   	push   eax
c0017024:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017028:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001702c:	0f af c8             	imul   ecx,eax
c001702f:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0017032:	51                   	push   ecx
c0017033:	e8 0c 97 fe ff       	call   c0000744 <memcpy>
c0017038:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001703b:	83 c4 10             	add    esp,0x10
c001703e:	40                   	inc    eax
c001703f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017042:	83 c0 80             	add    eax,0xffffff80
c0017045:	75 57                	jne    c001709e <VCache::write(unsigned long long, int, void*)+0xe0>
c0017047:	83 ec 0c             	sub    esp,0xc
c001704a:	53                   	push   ebx
c001704b:	e8 b6 fe ff ff       	call   c0016f06 <VCache::writeWriteBuffer()>
c0017050:	eb 34                	jmp    c0017086 <VCache::write(unsigned long long, int, void*)+0xc8>
c0017052:	83 ec 0c             	sub    esp,0xc
c0017055:	53                   	push   ebx
c0017056:	e8 ab fe ff ff       	call   c0016f06 <VCache::writeWriteBuffer()>
c001705b:	83 c4 10             	add    esp,0x10
c001705e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017061:	83 fd 7f             	cmp    ebp,0x7f
c0017064:	7f 25                	jg     c001708b <VCache::write(unsigned long long, int, void*)+0xcd>
c0017066:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0017069:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001706c:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001706f:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0017073:	52                   	push   edx
c0017074:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001707a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001707e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017081:	e8 be 96 fe ff       	call   c0000744 <memcpy>
c0017086:	83 c4 10             	add    esp,0x10
c0017089:	eb 13                	jmp    c001709e <VCache::write(unsigned long long, int, void*)+0xe0>
c001708b:	83 ec 0c             	sub    esp,0xc
c001708e:	8b 10                	mov    edx,DWORD PTR [eax]
c0017090:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017094:	55                   	push   ebp
c0017095:	57                   	push   edi
c0017096:	56                   	push   esi
c0017097:	50                   	push   eax
c0017098:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001709b:	83 c4 20             	add    esp,0x20
c001709e:	83 ec 0c             	sub    esp,0xc
c00170a1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00170a4:	e8 bd 76 00 00       	call   c001e766 <Semaphore::release()>
c00170a9:	83 c4 2c             	add    esp,0x2c
c00170ac:	31 c0                	xor    eax,eax
c00170ae:	5b                   	pop    ebx
c00170af:	5e                   	pop    esi
c00170b0:	5f                   	pop    edi
c00170b1:	5d                   	pop    ebp
c00170b2:	c3                   	ret    
c00170b3:	90                   	nop

c00170b4 <VCache::read(unsigned long long, int, void*)>:
c00170b4:	55                   	push   ebp
c00170b5:	57                   	push   edi
c00170b6:	56                   	push   esi
c00170b7:	53                   	push   ebx
c00170b8:	83 ec 28             	sub    esp,0x28
c00170bb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00170bf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00170c3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00170c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170cb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00170cf:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00170d3:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00170d7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00170da:	e8 d9 70 00 00       	call   c001e1b8 <Semaphore::acquire()>
c00170df:	83 c4 10             	add    esp,0x10
c00170e2:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00170e6:	74 0c                	je     c00170f4 <VCache::read(unsigned long long, int, void*)+0x40>
c00170e8:	83 ec 0c             	sub    esp,0xc
c00170eb:	53                   	push   ebx
c00170ec:	e8 15 fe ff ff       	call   c0016f06 <VCache::writeWriteBuffer()>
c00170f1:	83 c4 10             	add    esp,0x10
c00170f4:	83 fe 01             	cmp    esi,0x1
c00170f7:	0f 85 80 00 00 00    	jne    c001717d <VCache::read(unsigned long long, int, void*)+0xc9>
c00170fd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017100:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017107:	75 74                	jne    c001717d <VCache::read(unsigned long long, int, void*)+0xc9>
c0017109:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001710c:	89 d1                	mov    ecx,edx
c001710e:	f7 d9                	neg    ecx
c0017110:	89 cf                	mov    edi,ecx
c0017112:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017116:	c1 ff 1f             	sar    edi,0x1f
c0017119:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001711c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017120:	89 ce                	mov    esi,ecx
c0017122:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017126:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c001712a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001712e:	89 cf                	mov    edi,ecx
c0017130:	74 0a                	je     c001713c <VCache::read(unsigned long long, int, void*)+0x88>
c0017132:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017135:	75 05                	jne    c001713c <VCache::read(unsigned long long, int, void*)+0x88>
c0017137:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c001713a:	74 1c                	je     c0017158 <VCache::read(unsigned long long, int, void*)+0xa4>
c001713c:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017140:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0017143:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0017146:	83 ec 0c             	sub    esp,0xc
c0017149:	8b 08                	mov    ecx,DWORD PTR [eax]
c001714b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001714e:	52                   	push   edx
c001714f:	57                   	push   edi
c0017150:	56                   	push   esi
c0017151:	50                   	push   eax
c0017152:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017155:	83 c4 20             	add    esp,0x20
c0017158:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001715b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017161:	50                   	push   eax
c0017162:	52                   	push   edx
c0017163:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017166:	48                   	dec    eax
c0017167:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c001716b:	0f af c2             	imul   eax,edx
c001716e:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017171:	50                   	push   eax
c0017172:	55                   	push   ebp
c0017173:	e8 cc 95 fe ff       	call   c0000744 <memcpy>
c0017178:	83 c4 10             	add    esp,0x10
c001717b:	eb 21                	jmp    c001719e <VCache::read(unsigned long long, int, void*)+0xea>
c001717d:	83 ec 0c             	sub    esp,0xc
c0017180:	53                   	push   ebx
c0017181:	e8 70 fd ff ff       	call   c0016ef6 <VCache::invalidateReadBuffer()>
c0017186:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017189:	8b 10                	mov    edx,DWORD PTR [eax]
c001718b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001718e:	56                   	push   esi
c001718f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017193:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017197:	50                   	push   eax
c0017198:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001719b:	83 c4 20             	add    esp,0x20
c001719e:	83 ec 0c             	sub    esp,0xc
c00171a1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00171a4:	e8 bd 75 00 00       	call   c001e766 <Semaphore::release()>
c00171a9:	83 c4 2c             	add    esp,0x2c
c00171ac:	31 c0                	xor    eax,eax
c00171ae:	5b                   	pop    ebx
c00171af:	5e                   	pop    esi
c00171b0:	5f                   	pop    edi
c00171b1:	5d                   	pop    ebp
c00171b2:	c3                   	ret    
c00171b3:	90                   	nop

c00171b4 <Video::putrect(int, int, int, int, unsigned int)>:
c00171b4:	55                   	push   ebp
c00171b5:	57                   	push   edi
c00171b6:	56                   	push   esi
c00171b7:	53                   	push   ebx
c00171b8:	83 ec 1c             	sub    esp,0x1c
c00171bb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00171bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00171c3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00171c7:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00171cb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00171cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171d3:	01 df                	add    edi,ebx
c00171d5:	39 fb                	cmp    ebx,edi
c00171d7:	7d 1f                	jge    c00171f8 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00171d9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00171dd:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00171e1:	7d 12                	jge    c00171f5 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00171e3:	8b 16                	mov    edx,DWORD PTR [esi]
c00171e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00171e9:	53                   	push   ebx
c00171ea:	55                   	push   ebp
c00171eb:	45                   	inc    ebp
c00171ec:	56                   	push   esi
c00171ed:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00171f0:	83 c4 10             	add    esp,0x10
c00171f3:	eb e8                	jmp    c00171dd <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00171f5:	43                   	inc    ebx
c00171f6:	eb dd                	jmp    c00171d5 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00171f8:	83 c4 1c             	add    esp,0x1c
c00171fb:	5b                   	pop    ebx
c00171fc:	5e                   	pop    esi
c00171fd:	5f                   	pop    edi
c00171fe:	5d                   	pop    ebp
c00171ff:	c3                   	ret    

c0017200 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017200:	55                   	push   ebp
c0017201:	57                   	push   edi
c0017202:	31 ff                	xor    edi,edi
c0017204:	56                   	push   esi
c0017205:	53                   	push   ebx
c0017206:	83 ec 1c             	sub    esp,0x1c
c0017209:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001720d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017211:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017218:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001721d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017221:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017225:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017229:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001722c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017230:	01 f9                	add    ecx,edi
c0017232:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017236:	7d 2f                	jge    c0017267 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017238:	31 f6                	xor    esi,esi
c001723a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001723e:	01 f2                	add    edx,esi
c0017240:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017244:	7d 1a                	jge    c0017260 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017246:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017249:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001724c:	46                   	inc    esi
c001724d:	51                   	push   ecx
c001724e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017252:	52                   	push   edx
c0017253:	55                   	push   ebp
c0017254:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017257:	83 c4 10             	add    esp,0x10
c001725a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001725e:	eb da                	jmp    c001723a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017260:	47                   	inc    edi
c0017261:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017265:	eb c5                	jmp    c001722c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017267:	83 c4 1c             	add    esp,0x1c
c001726a:	5b                   	pop    ebx
c001726b:	5e                   	pop    esi
c001726c:	5f                   	pop    edi
c001726d:	5d                   	pop    ebp
c001726e:	c3                   	ret    
c001726f:	90                   	nop

c0017270 <Video::blit(unsigned int*, int, int, int, int)>:
c0017270:	55                   	push   ebp
c0017271:	57                   	push   edi
c0017272:	56                   	push   esi
c0017273:	53                   	push   ebx
c0017274:	83 ec 1c             	sub    esp,0x1c
c0017277:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001727b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001727f:	85 c0                	test   eax,eax
c0017281:	79 02                	jns    c0017285 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017283:	31 c0                	xor    eax,eax
c0017285:	c1 e0 02             	shl    eax,0x2
c0017288:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001728c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017290:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017294:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017298:	39 d8                	cmp    eax,ebx
c001729a:	7e 49                	jle    c00172e5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001729c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00172a2:	7c 41                	jl     c00172e5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00172a4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00172a8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00172ac:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00172b0:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00172b4:	39 f9                	cmp    ecx,edi
c00172b6:	7e 22                	jle    c00172da <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00172b8:	83 c5 04             	add    ebp,0x4
c00172bb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00172c1:	7c 14                	jl     c00172d7 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00172c3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00172c5:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00172c8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00172cc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00172d0:	56                   	push   esi
c00172d1:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00172d4:	83 c4 10             	add    esp,0x10
c00172d7:	47                   	inc    edi
c00172d8:	eb d2                	jmp    c00172ac <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00172da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00172de:	43                   	inc    ebx
c00172df:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00172e3:	eb ab                	jmp    c0017290 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00172e5:	83 c4 1c             	add    esp,0x1c
c00172e8:	5b                   	pop    ebx
c00172e9:	5e                   	pop    esi
c00172ea:	5f                   	pop    edi
c00172eb:	5d                   	pop    ebp
c00172ec:	c3                   	ret    
c00172ed:	90                   	nop

c00172ee <Video::clearScreen(unsigned int)>:
c00172ee:	57                   	push   edi
c00172ef:	56                   	push   esi
c00172f0:	53                   	push   ebx
c00172f1:	31 db                	xor    ebx,ebx
c00172f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00172f7:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00172fd:	7e 1f                	jle    c001731e <Video::clearScreen(unsigned int)+0x30>
c00172ff:	31 ff                	xor    edi,edi
c0017301:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017307:	7e 12                	jle    c001731b <Video::clearScreen(unsigned int)+0x2d>
c0017309:	8b 06                	mov    eax,DWORD PTR [esi]
c001730b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001730f:	53                   	push   ebx
c0017310:	57                   	push   edi
c0017311:	47                   	inc    edi
c0017312:	56                   	push   esi
c0017313:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017316:	83 c4 10             	add    esp,0x10
c0017319:	eb e6                	jmp    c0017301 <Video::clearScreen(unsigned int)+0x13>
c001731b:	43                   	inc    ebx
c001731c:	eb d9                	jmp    c00172f7 <Video::clearScreen(unsigned int)+0x9>
c001731e:	5b                   	pop    ebx
c001731f:	5e                   	pop    esi
c0017320:	5f                   	pop    edi
c0017321:	c3                   	ret    

c0017322 <Video::putpixel(int, int, unsigned int)>:
c0017322:	c7 44 24 04 4c b1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b14c
c001732a:	e9 0e 31 00 00       	jmp    c001a43d <Krnl::panic(char const*)>
c001732f:	90                   	nop

c0017330 <Video::Video(char const*)>:
c0017330:	83 ec 0c             	sub    esp,0xc
c0017333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017337:	83 ec 08             	sub    esp,0x8
c001733a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001733e:	50                   	push   eax
c001733f:	e8 66 d0 ff ff       	call   c00143aa <Device::Device(char const*)>
c0017344:	83 c4 10             	add    esp,0x10
c0017347:	ba d0 b1 02 c0       	mov    edx,0xc002b1d0
c001734c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017350:	89 10                	mov    DWORD PTR [eax],edx
c0017352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017356:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017360:	90                   	nop
c0017361:	83 c4 0c             	add    esp,0xc
c0017364:	c3                   	ret    
c0017365:	90                   	nop

c0017366 <Video::~Video()>:
c0017366:	83 ec 0c             	sub    esp,0xc
c0017369:	ba d0 b1 02 c0       	mov    edx,0xc002b1d0
c001736e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017372:	89 10                	mov    DWORD PTR [eax],edx
c0017374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017378:	83 ec 0c             	sub    esp,0xc
c001737b:	50                   	push   eax
c001737c:	e8 0b cd ff ff       	call   c001408c <Device::~Device()>
c0017381:	83 c4 10             	add    esp,0x10
c0017384:	90                   	nop
c0017385:	83 c4 0c             	add    esp,0xc
c0017388:	c3                   	ret    
c0017389:	90                   	nop

c001738a <Video::~Video()>:
c001738a:	83 ec 0c             	sub    esp,0xc
c001738d:	83 ec 0c             	sub    esp,0xc
c0017390:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017394:	e8 cd ff ff ff       	call   c0017366 <Video::~Video()>
c0017399:	83 c4 10             	add    esp,0x10
c001739c:	83 ec 08             	sub    esp,0x8
c001739f:	68 64 01 00 00       	push   0x164
c00173a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173a8:	e8 07 b9 ff ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c00173ad:	83 c4 10             	add    esp,0x10
c00173b0:	83 c4 0c             	add    esp,0xc
c00173b3:	c3                   	ret    

c00173b4 <Video::isMonochrome()>:
c00173b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173b8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00173be:	c3                   	ret    
c00173bf:	90                   	nop

c00173c0 <Video::getWidth()>:
c00173c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173c4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00173ca:	c3                   	ret    
c00173cb:	90                   	nop

c00173cc <Video::getHeight()>:
c00173cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173d0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00173d6:	c3                   	ret    
c00173d7:	90                   	nop

c00173d8 <Video::drawCursor(int, int, unsigned char*, int)>:
c00173d8:	55                   	push   ebp
c00173d9:	57                   	push   edi
c00173da:	56                   	push   esi
c00173db:	53                   	push   ebx
c00173dc:	83 ec 2c             	sub    esp,0x2c
c00173df:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00173e3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00173e7:	83 f8 01             	cmp    eax,0x1
c00173ea:	19 c9                	sbb    ecx,ecx
c00173ec:	31 db                	xor    ebx,ebx
c00173ee:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00173f2:	89 cd                	mov    ebp,ecx
c00173f4:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00173fc:	f7 d5                	not    ebp
c00173fe:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017404:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017408:	01 d8                	add    eax,ebx
c001740a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001740e:	56                   	push   esi
c001740f:	e8 b8 ff ff ff       	call   c00173cc <Video::getHeight()>
c0017414:	59                   	pop    ecx
c0017415:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017419:	7e 70                	jle    c001748b <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001741b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001741f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017423:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017426:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001742a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001742e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017435:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017439:	89 f8                	mov    eax,edi
c001743b:	83 c0 20             	add    eax,0x20
c001743e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017442:	56                   	push   esi
c0017443:	e8 78 ff ff ff       	call   c00173c0 <Video::getWidth()>
c0017448:	5a                   	pop    edx
c0017449:	39 c7                	cmp    edi,eax
c001744b:	7d 34                	jge    c0017481 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001744d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017452:	74 05                	je     c0017459 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017454:	8b 06                	mov    eax,DWORD PTR [esi]
c0017456:	55                   	push   ebp
c0017457:	eb 0d                	jmp    c0017466 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017459:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001745e:	74 12                	je     c0017472 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017460:	8b 06                	mov    eax,DWORD PTR [esi]
c0017462:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017466:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001746a:	57                   	push   edi
c001746b:	56                   	push   esi
c001746c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001746f:	83 c4 10             	add    esp,0x10
c0017472:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017476:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001747a:	47                   	inc    edi
c001747b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001747f:	75 c1                	jne    c0017442 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017481:	43                   	inc    ebx
c0017482:	83 fb 20             	cmp    ebx,0x20
c0017485:	0f 85 79 ff ff ff    	jne    c0017404 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001748b:	83 c4 2c             	add    esp,0x2c
c001748e:	5b                   	pop    ebx
c001748f:	5e                   	pop    esi
c0017490:	5f                   	pop    edi
c0017491:	5d                   	pop    ebp
c0017492:	c3                   	ret    
c0017493:	90                   	nop

c0017494 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017494:	55                   	push   ebp
c0017495:	57                   	push   edi
c0017496:	56                   	push   esi
c0017497:	53                   	push   ebx
c0017498:	83 ec 28             	sub    esp,0x28
c001749b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001749f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00174a3:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00174a7:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00174ab:	c1 e7 08             	shl    edi,0x8
c00174ae:	01 c7                	add    edi,eax
c00174b0:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00174b4:	c1 e0 08             	shl    eax,0x8
c00174b7:	01 d0                	add    eax,edx
c00174b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174c1:	0f af c7             	imul   eax,edi
c00174c4:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00174cb:	50                   	push   eax
c00174cc:	e8 6f 83 ff ff       	call   c000f840 <malloc>
c00174d1:	83 c4 10             	add    esp,0x10
c00174d4:	89 c5                	mov    ebp,eax
c00174d6:	85 c0                	test   eax,eax
c00174d8:	75 15                	jne    c00174ef <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00174da:	83 ec 0c             	sub    esp,0xc
c00174dd:	68 6d b1 02 c0       	push   0xc002b16d
c00174e2:	e8 ad b8 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00174e7:	83 c4 10             	add    esp,0x10
c00174ea:	e9 1c 01 00 00       	jmp    c001760b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00174ef:	be 12 00 00 00       	mov    esi,0x12
c00174f4:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00174f8:	74 11                	je     c001750b <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00174fa:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00174fe:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017502:	c1 fe 03             	sar    esi,0x3
c0017505:	0f af f0             	imul   esi,eax
c0017508:	83 c6 12             	add    esi,0x12
c001750b:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001750f:	74 04                	je     c0017515 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017511:	85 ff                	test   edi,edi
c0017513:	75 12                	jne    c0017527 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017515:	83 ec 0c             	sub    esp,0xc
c0017518:	68 84 b1 02 c0       	push   0xc002b184
c001751d:	e8 72 b8 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0017522:	e9 ce 00 00 00       	jmp    c00175f5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017527:	52                   	push   edx
c0017528:	52                   	push   edx
c0017529:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001752d:	50                   	push   eax
c001752e:	68 99 b1 02 c0       	push   0xc002b199
c0017533:	e8 5c b8 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0017538:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001753c:	83 c4 10             	add    esp,0x10
c001753f:	80 fa 02             	cmp    dl,0x2
c0017542:	0f 85 98 00 00 00    	jne    c00175e0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017548:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001754d:	75 10                	jne    c001755f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001754f:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017553:	75 0a                	jne    c001755f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017555:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017558:	83 e8 18             	sub    eax,0x18
c001755b:	a8 f7                	test   al,0xf7
c001755d:	74 0a                	je     c0017569 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001755f:	83 ec 0c             	sub    esp,0xc
c0017562:	68 a6 b1 02 c0       	push   0xc002b1a6
c0017567:	eb 7f                	jmp    c00175e8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017569:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017571:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017579:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001757d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017585:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017589:	75 0c                	jne    c0017597 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001758b:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017590:	c1 e0 18             	shl    eax,0x18
c0017593:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017597:	41                   	inc    ecx
c0017598:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c001759d:	c1 e2 10             	shl    edx,0x10
c00175a0:	89 d0                	mov    eax,edx
c00175a2:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00175a7:	c1 e2 08             	shl    edx,0x8
c00175aa:	09 c2                	or     edx,eax
c00175ac:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00175b0:	09 c2                	or     edx,eax
c00175b2:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00175b6:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00175ba:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00175be:	c1 f8 03             	sar    eax,0x3
c00175c1:	01 c6                	add    esi,eax
c00175c3:	89 c8                	mov    eax,ecx
c00175c5:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00175c9:	39 c7                	cmp    edi,eax
c00175cb:	7f b0                	jg     c001757d <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00175cd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00175d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00175d5:	39 14 24             	cmp    DWORD PTR [esp],edx
c00175d8:	7e 22                	jle    c00175fc <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00175da:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00175de:	eb 99                	jmp    c0017579 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00175e0:	50                   	push   eax
c00175e1:	50                   	push   eax
c00175e2:	52                   	push   edx
c00175e3:	68 b4 b1 02 c0       	push   0xc002b1b4
c00175e8:	e8 a7 b7 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00175ed:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00175f0:	e8 5b 82 ff ff       	call   c000f850 <free>
c00175f5:	83 c4 10             	add    esp,0x10
c00175f8:	31 ed                	xor    ebp,ebp
c00175fa:	eb 0f                	jmp    c001760b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00175fc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017600:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017603:	89 38                	mov    DWORD PTR [eax],edi
c0017605:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017609:	89 08                	mov    DWORD PTR [eax],ecx
c001760b:	83 c4 1c             	add    esp,0x1c
c001760e:	89 e8                	mov    eax,ebp
c0017610:	5b                   	pop    ebx
c0017611:	5e                   	pop    esi
c0017612:	5f                   	pop    edi
c0017613:	5d                   	pop    ebp
c0017614:	c3                   	ret    
c0017615:	90                   	nop

c0017616 <Video::putTGA(int, int, unsigned char*, int)>:
c0017616:	55                   	push   ebp
c0017617:	57                   	push   edi
c0017618:	56                   	push   esi
c0017619:	53                   	push   ebx
c001761a:	83 ec 28             	sub    esp,0x28
c001761d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017621:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017625:	50                   	push   eax
c0017626:	8d 44 24 18          	lea    eax,[esp+0x18]
c001762a:	50                   	push   eax
c001762b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001762f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017633:	56                   	push   esi
c0017634:	e8 5b fe ff ff       	call   c0017494 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017639:	83 c4 20             	add    esp,0x20
c001763c:	85 c0                	test   eax,eax
c001763e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017642:	74 35                	je     c0017679 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017644:	89 c7                	mov    edi,eax
c0017646:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001764a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001764e:	39 d8                	cmp    eax,ebx
c0017650:	7e 27                	jle    c0017679 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017652:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017656:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001765a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001765e:	39 e8                	cmp    eax,ebp
c0017660:	7e 14                	jle    c0017676 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017662:	8b 06                	mov    eax,DWORD PTR [esi]
c0017664:	83 c7 04             	add    edi,0x4
c0017667:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001766a:	53                   	push   ebx
c001766b:	55                   	push   ebp
c001766c:	45                   	inc    ebp
c001766d:	56                   	push   esi
c001766e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017671:	83 c4 10             	add    esp,0x10
c0017674:	eb e0                	jmp    c0017656 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017676:	43                   	inc    ebx
c0017677:	eb cd                	jmp    c0017646 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017679:	83 c4 1c             	add    esp,0x1c
c001767c:	5b                   	pop    ebx
c001767d:	5e                   	pop    esi
c001767e:	5f                   	pop    edi
c001767f:	5d                   	pop    ebp
c0017680:	c3                   	ret    
c0017681:	90                   	nop

c0017682 <ACPI::close(int, int, void*)>:
c0017682:	83 ec 1c             	sub    esp,0x1c
c0017685:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001768d:	74 0a                	je     c0017699 <ACPI::close(int, int, void*)+0x17>
c001768f:	b8 00 00 00 00       	mov    eax,0x0
c0017694:	e9 9a 00 00 00       	jmp    c0017733 <ACPI::close(int, int, void*)+0xb1>
c0017699:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001769e:	75 37                	jne    c00176d7 <ACPI::close(int, int, void*)+0x55>
c00176a0:	83 ec 0c             	sub    esp,0xc
c00176a3:	68 10 b2 02 c0       	push   0xc002b210
c00176a8:	e8 e7 b6 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00176ad:	83 c4 10             	add    esp,0x10
c00176b0:	a1 e8 08 03 c0       	mov    eax,ds:0xc00308e8
c00176b5:	85 c0                	test   eax,eax
c00176b7:	74 07                	je     c00176c0 <ACPI::close(int, int, void*)+0x3e>
c00176b9:	a1 e8 08 03 c0       	mov    eax,ds:0xc00308e8
c00176be:	ff d0                	call   eax
c00176c0:	83 ec 0c             	sub    esp,0xc
c00176c3:	68 34 b3 02 c0       	push   0xc002b334
c00176c8:	e8 70 2d 00 00       	call   c001a43d <Krnl::panic(char const*)>
c00176cd:	83 c4 10             	add    esp,0x10
c00176d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00176d5:	eb 5c                	jmp    c0017733 <ACPI::close(int, int, void*)+0xb1>
c00176d7:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00176dc:	75 50                	jne    c001772e <ACPI::close(int, int, void*)+0xac>
c00176de:	a1 e4 08 03 c0       	mov    eax,ds:0xc00308e4
c00176e3:	85 c0                	test   eax,eax
c00176e5:	74 07                	je     c00176ee <ACPI::close(int, int, void*)+0x6c>
c00176e7:	a1 e4 08 03 c0       	mov    eax,ds:0xc00308e4
c00176ec:	ff d0                	call   eax
c00176ee:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00176f3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00176f8:	83 e0 02             	and    eax,0x2
c00176fb:	74 1c                	je     c0017719 <ACPI::close(int, int, void*)+0x97>
c00176fd:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017704:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017708:	89 c2                	mov    edx,eax
c001770a:	ec                   	in     al,dx
c001770b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001770f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017713:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017717:	eb da                	jmp    c00176f3 <ACPI::close(int, int, void*)+0x71>
c0017719:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017720:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017725:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017729:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001772d:	ee                   	out    dx,al
c001772e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017733:	83 c4 1c             	add    esp,0x1c
c0017736:	c3                   	ret    

c0017737 <findRSDP()>:
c0017737:	83 ec 1c             	sub    esp,0x1c
c001773a:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001773f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017745:	83 e0 04             	and    eax,0x4
c0017748:	84 c0                	test   al,al
c001774a:	75 07                	jne    c0017753 <findRSDP()+0x1c>
c001774c:	b8 00 00 00 00       	mov    eax,0x0
c0017751:	eb 6a                	jmp    c00177bd <findRSDP()+0x86>
c0017753:	a1 74 e2 02 c0       	mov    eax,ds:0xc002e274
c0017758:	3d ff 07 00 00       	cmp    eax,0x7ff
c001775d:	7f 1b                	jg     c001777a <findRSDP()+0x43>
c001775f:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0017764:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001776a:	83 e2 fb             	and    edx,0xfffffffb
c001776d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017773:	b8 00 00 00 00       	mov    eax,0x0
c0017778:	eb 43                	jmp    c00177bd <findRSDP()+0x86>
c001777a:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017782:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001778a:	77 2c                	ja     c00177b8 <findRSDP()+0x81>
c001778c:	83 ec 04             	sub    esp,0x4
c001778f:	6a 08                	push   0x8
c0017791:	68 1d b2 02 c0       	push   0xc002b21d
c0017796:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001779a:	e8 a1 8e fe ff       	call   c0000640 <memcmp>
c001779f:	83 c4 10             	add    esp,0x10
c00177a2:	85 c0                	test   eax,eax
c00177a4:	0f 94 c0             	sete   al
c00177a7:	84 c0                	test   al,al
c00177a9:	74 06                	je     c00177b1 <findRSDP()+0x7a>
c00177ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00177af:	eb 0c                	jmp    c00177bd <findRSDP()+0x86>
c00177b1:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00177b6:	eb ca                	jmp    c0017782 <findRSDP()+0x4b>
c00177b8:	b8 00 00 00 00       	mov    eax,0x0
c00177bd:	83 c4 1c             	add    esp,0x1c
c00177c0:	c3                   	ret    

c00177c1 <loadACPITables(unsigned char*)>:
c00177c1:	56                   	push   esi
c00177c2:	53                   	push   ebx
c00177c3:	83 ec 44             	sub    esp,0x44
c00177c6:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00177cb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00177d1:	83 e0 04             	and    eax,0x4
c00177d4:	84 c0                	test   al,al
c00177d6:	0f 84 05 02 00 00    	je     c00179e1 <loadACPITables(unsigned char*)+0x220>
c00177dc:	a0 00 0b 03 c0       	mov    al,ds:0xc0030b00
c00177e1:	84 c0                	test   al,al
c00177e3:	74 75                	je     c001785a <loadACPITables(unsigned char*)+0x99>
c00177e5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00177e9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00177ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00177f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00177f4:	83 e8 24             	sub    eax,0x24
c00177f7:	c1 e8 03             	shr    eax,0x3
c00177fa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00177fe:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017806:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001780a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001780e:	0f 8d b2 00 00 00    	jge    c00178c6 <loadACPITables(unsigned char*)+0x105>
c0017814:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017818:	83 c0 24             	add    eax,0x24
c001781b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001781f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017823:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017827:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001782b:	c1 e0 03             	shl    eax,0x3
c001782e:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017832:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017836:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017839:	8b 00                	mov    eax,DWORD PTR [eax]
c001783b:	89 c1                	mov    ecx,eax
c001783d:	a1 ec 08 03 c0       	mov    eax,ds:0xc00308ec
c0017842:	8d 50 01             	lea    edx,[eax+0x1]
c0017845:	89 15 ec 08 03 c0    	mov    DWORD PTR ds:0xc00308ec,edx
c001784b:	89 ca                	mov    edx,ecx
c001784d:	89 14 c5 04 09 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf6fc],edx
c0017854:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017858:	eb ac                	jmp    c0017806 <loadACPITables(unsigned char*)+0x45>
c001785a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001785e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017862:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017866:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017869:	83 e8 24             	sub    eax,0x24
c001786c:	c1 e8 02             	shr    eax,0x2
c001786f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017873:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c001787b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001787f:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017883:	7d 41                	jge    c00178c6 <loadACPITables(unsigned char*)+0x105>
c0017885:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017889:	83 c0 24             	add    eax,0x24
c001788c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017890:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017894:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017898:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001789c:	c1 e0 02             	shl    eax,0x2
c001789f:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00178a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00178a7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00178a9:	a1 ec 08 03 c0       	mov    eax,ds:0xc00308ec
c00178ae:	8d 50 01             	lea    edx,[eax+0x1]
c00178b1:	89 15 ec 08 03 c0    	mov    DWORD PTR ds:0xc00308ec,edx
c00178b7:	89 ca                	mov    edx,ecx
c00178b9:	89 14 c5 04 09 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf6fc],edx
c00178c0:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00178c4:	eb b5                	jmp    c001787b <loadACPITables(unsigned char*)+0xba>
c00178c6:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00178ce:	a1 ec 08 03 c0       	mov    eax,ds:0xc00308ec
c00178d3:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c00178d7:	0f 8d 05 01 00 00    	jge    c00179e2 <loadACPITables(unsigned char*)+0x221>
c00178dd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178e1:	8b 04 c5 04 09 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf6fc]
c00178e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00178ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00178f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178f8:	25 ff 0f 00 00       	and    eax,0xfff
c00178fd:	89 c6                	mov    esi,eax
c00178ff:	e8 da a4 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0017904:	89 c3                	mov    ebx,eax
c0017906:	83 ec 0c             	sub    esp,0xc
c0017909:	6a 01                	push   0x1
c001790b:	e8 27 a2 ff ff       	call   c0011b37 <Virt::allocateKernelVirtualPages(int)>
c0017910:	83 c4 10             	add    esp,0x10
c0017913:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017917:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001791d:	83 ec 0c             	sub    esp,0xc
c0017920:	6a 01                	push   0x1
c0017922:	6a 01                	push   0x1
c0017924:	50                   	push   eax
c0017925:	52                   	push   edx
c0017926:	53                   	push   ebx
c0017927:	e8 c8 ab ff ff       	call   c00124f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001792c:	83 c4 20             	add    esp,0x20
c001792f:	09 f0                	or     eax,esi
c0017931:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017935:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017939:	c1 e0 03             	shl    eax,0x3
c001793c:	05 00 09 03 c0       	add    eax,0xc0030900
c0017941:	83 ec 04             	sub    esp,0x4
c0017944:	6a 04                	push   0x4
c0017946:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001794a:	50                   	push   eax
c001794b:	e8 f4 8d fe ff       	call   c0000744 <memcpy>
c0017950:	83 c4 10             	add    esp,0x10
c0017953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017957:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001795a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001795e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017962:	05 00 10 00 00       	add    eax,0x1000
c0017967:	c1 e8 0c             	shr    eax,0xc
c001796a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001796e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017972:	89 04 24             	mov    DWORD PTR [esp],eax
c0017975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017979:	25 ff 0f 00 00       	and    eax,0xfff
c001797e:	89 c6                	mov    esi,eax
c0017980:	e8 59 a4 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0017985:	89 c3                	mov    ebx,eax
c0017987:	83 ec 0c             	sub    esp,0xc
c001798a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001798e:	e8 a4 a1 ff ff       	call   c0011b37 <Virt::allocateKernelVirtualPages(int)>
c0017993:	83 c4 10             	add    esp,0x10
c0017996:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001799a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00179a0:	83 ec 0c             	sub    esp,0xc
c00179a3:	6a 01                	push   0x1
c00179a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00179a9:	50                   	push   eax
c00179aa:	52                   	push   edx
c00179ab:	53                   	push   ebx
c00179ac:	e8 43 ab ff ff       	call   c00124f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00179b1:	83 c4 20             	add    esp,0x20
c00179b4:	09 f0                	or     eax,esi
c00179b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00179ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00179bd:	83 ec 0c             	sub    esp,0xc
c00179c0:	50                   	push   eax
c00179c1:	e8 d3 a4 ff ff       	call   c0011e99 <Virt::freeKernelVirtualPages(unsigned long)>
c00179c6:	83 c4 10             	add    esp,0x10
c00179c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00179d1:	89 14 c5 04 09 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf6fc],edx
c00179d8:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00179dc:	e9 ed fe ff ff       	jmp    c00178ce <loadACPITables(unsigned char*)+0x10d>
c00179e1:	90                   	nop
c00179e2:	83 c4 44             	add    esp,0x44
c00179e5:	5b                   	pop    ebx
c00179e6:	5e                   	pop    esi
c00179e7:	c3                   	ret    

c00179e8 <findRSDT(unsigned char*)>:
c00179e8:	56                   	push   esi
c00179e9:	53                   	push   ebx
c00179ea:	83 ec 44             	sub    esp,0x44
c00179ed:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00179f2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179f8:	83 e0 04             	and    eax,0x4
c00179fb:	84 c0                	test   al,al
c00179fd:	75 0a                	jne    c0017a09 <findRSDT(unsigned char*)+0x21>
c00179ff:	b8 00 00 00 00       	mov    eax,0x0
c0017a04:	e9 f7 00 00 00       	jmp    c0017b00 <findRSDT(unsigned char*)+0x118>
c0017a09:	83 ec 04             	sub    esp,0x4
c0017a0c:	6a 24                	push   0x24
c0017a0e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017a12:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017a16:	50                   	push   eax
c0017a17:	e8 28 8d fe ff       	call   c0000744 <memcpy>
c0017a1c:	83 c4 10             	add    esp,0x10
c0017a1f:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017a23:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017a27:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017a2f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a33:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a37:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017a3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a3f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017a43:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a47:	25 ff 0f 00 00       	and    eax,0xfff
c0017a4c:	89 c6                	mov    esi,eax
c0017a4e:	e8 8b a3 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0017a53:	89 c3                	mov    ebx,eax
c0017a55:	83 ec 0c             	sub    esp,0xc
c0017a58:	6a 02                	push   0x2
c0017a5a:	e8 d8 a0 ff ff       	call   c0011b37 <Virt::allocateKernelVirtualPages(int)>
c0017a5f:	83 c4 10             	add    esp,0x10
c0017a62:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017a66:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017a6c:	83 ec 0c             	sub    esp,0xc
c0017a6f:	6a 01                	push   0x1
c0017a71:	6a 02                	push   0x2
c0017a73:	50                   	push   eax
c0017a74:	52                   	push   edx
c0017a75:	53                   	push   ebx
c0017a76:	e8 79 aa ff ff       	call   c00124f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017a7b:	83 c4 20             	add    esp,0x20
c0017a7e:	09 f0                	or     eax,esi
c0017a80:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017a84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a88:	25 ff 0f 00 00       	and    eax,0xfff
c0017a8d:	89 c6                	mov    esi,eax
c0017a8f:	e8 4a a3 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0017a94:	89 c3                	mov    ebx,eax
c0017a96:	83 ec 0c             	sub    esp,0xc
c0017a99:	6a 02                	push   0x2
c0017a9b:	e8 97 a0 ff ff       	call   c0011b37 <Virt::allocateKernelVirtualPages(int)>
c0017aa0:	83 c4 10             	add    esp,0x10
c0017aa3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017aa7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017aad:	83 ec 0c             	sub    esp,0xc
c0017ab0:	6a 01                	push   0x1
c0017ab2:	6a 02                	push   0x2
c0017ab4:	50                   	push   eax
c0017ab5:	52                   	push   edx
c0017ab6:	53                   	push   ebx
c0017ab7:	e8 38 aa ff ff       	call   c00124f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017abc:	83 c4 20             	add    esp,0x20
c0017abf:	09 f0                	or     eax,esi
c0017ac1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017ac5:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017aca:	75 11                	jne    c0017add <findRSDT(unsigned char*)+0xf5>
c0017acc:	c6 05 00 0b 03 c0 00 	mov    BYTE PTR ds:0xc0030b00,0x0
c0017ad3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ad7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017adb:	eb 1f                	jmp    c0017afc <findRSDT(unsigned char*)+0x114>
c0017add:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017ae2:	75 11                	jne    c0017af5 <findRSDT(unsigned char*)+0x10d>
c0017ae4:	c6 05 00 0b 03 c0 01 	mov    BYTE PTR ds:0xc0030b00,0x1
c0017aeb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017aef:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017af3:	eb 07                	jmp    c0017afc <findRSDT(unsigned char*)+0x114>
c0017af5:	b8 00 00 00 00       	mov    eax,0x0
c0017afa:	eb 04                	jmp    c0017b00 <findRSDT(unsigned char*)+0x118>
c0017afc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017b00:	83 c4 44             	add    esp,0x44
c0017b03:	5b                   	pop    ebx
c0017b04:	5e                   	pop    esi
c0017b05:	c3                   	ret    

c0017b06 <findDataTable(unsigned char*, char*)>:
c0017b06:	83 ec 1c             	sub    esp,0x1c
c0017b09:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0017b0e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b14:	83 e0 04             	and    eax,0x4
c0017b17:	84 c0                	test   al,al
c0017b19:	75 07                	jne    c0017b22 <findDataTable(unsigned char*, char*)+0x1c>
c0017b1b:	b8 00 00 00 00       	mov    eax,0x0
c0017b20:	eb 7c                	jmp    c0017b9e <findDataTable(unsigned char*, char*)+0x98>
c0017b22:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017b2a:	a1 ec 08 03 c0       	mov    eax,ds:0xc00308ec
c0017b2f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017b33:	7d 3a                	jge    c0017b6f <findDataTable(unsigned char*, char*)+0x69>
c0017b35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b39:	c1 e0 03             	shl    eax,0x3
c0017b3c:	05 00 09 03 c0       	add    eax,0xc0030900
c0017b41:	83 ec 04             	sub    esp,0x4
c0017b44:	6a 04                	push   0x4
c0017b46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b4a:	50                   	push   eax
c0017b4b:	e8 f0 8a fe ff       	call   c0000640 <memcmp>
c0017b50:	83 c4 10             	add    esp,0x10
c0017b53:	85 c0                	test   eax,eax
c0017b55:	0f 94 c0             	sete   al
c0017b58:	84 c0                	test   al,al
c0017b5a:	74 0d                	je     c0017b69 <findDataTable(unsigned char*, char*)+0x63>
c0017b5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b60:	8b 04 c5 04 09 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf6fc]
c0017b67:	eb 35                	jmp    c0017b9e <findDataTable(unsigned char*, char*)+0x98>
c0017b69:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017b6d:	eb bb                	jmp    c0017b2a <findDataTable(unsigned char*, char*)+0x24>
c0017b6f:	a0 00 0b 03 c0       	mov    al,ds:0xc0030b00
c0017b74:	84 c0                	test   al,al
c0017b76:	74 07                	je     c0017b7f <findDataTable(unsigned char*, char*)+0x79>
c0017b78:	b8 58 00 00 00       	mov    eax,0x58
c0017b7d:	eb 05                	jmp    c0017b84 <findDataTable(unsigned char*, char*)+0x7e>
c0017b7f:	b8 52 00 00 00       	mov    eax,0x52
c0017b84:	83 ec 04             	sub    esp,0x4
c0017b87:	50                   	push   eax
c0017b88:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b8c:	68 58 b3 02 c0       	push   0xc002b358
c0017b91:	e8 fe b1 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0017b96:	83 c4 10             	add    esp,0x10
c0017b99:	b8 00 00 00 00       	mov    eax,0x0
c0017b9e:	83 c4 1c             	add    esp,0x1c
c0017ba1:	c3                   	ret    

c0017ba2 <scanMADT()>:
c0017ba2:	53                   	push   ebx
c0017ba3:	83 ec 38             	sub    esp,0x38
c0017ba6:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0017bab:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017bb1:	83 e0 04             	and    eax,0x4
c0017bb4:	84 c0                	test   al,al
c0017bb6:	0f 84 63 04 00 00    	je     c001801f <scanMADT()+0x47d>
c0017bbc:	e8 76 fb ff ff       	call   c0017737 <findRSDP()>
c0017bc1:	a3 0c 0b 03 c0       	mov    ds:0xc0030b0c,eax
c0017bc6:	a1 0c 0b 03 c0       	mov    eax,ds:0xc0030b0c
c0017bcb:	85 c0                	test   eax,eax
c0017bcd:	75 19                	jne    c0017be8 <scanMADT()+0x46>
c0017bcf:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0017bd4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017bda:	83 e2 fb             	and    edx,0xfffffffb
c0017bdd:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017be3:	e9 3b 04 00 00       	jmp    c0018023 <scanMADT()+0x481>
c0017be8:	a1 0c 0b 03 c0       	mov    eax,ds:0xc0030b0c
c0017bed:	83 ec 0c             	sub    esp,0xc
c0017bf0:	50                   	push   eax
c0017bf1:	e8 f2 fd ff ff       	call   c00179e8 <findRSDT(unsigned char*)>
c0017bf6:	83 c4 10             	add    esp,0x10
c0017bf9:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c0017bfe:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c0017c03:	85 c0                	test   eax,eax
c0017c05:	75 19                	jne    c0017c20 <scanMADT()+0x7e>
c0017c07:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0017c0c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017c12:	83 e2 fb             	and    edx,0xfffffffb
c0017c15:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017c1b:	e9 03 04 00 00       	jmp    c0018023 <scanMADT()+0x481>
c0017c20:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c0017c25:	83 ec 0c             	sub    esp,0xc
c0017c28:	50                   	push   eax
c0017c29:	e8 93 fb ff ff       	call   c00177c1 <loadACPITables(unsigned char*)>
c0017c2e:	83 c4 10             	add    esp,0x10
c0017c31:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c0017c36:	83 ec 08             	sub    esp,0x8
c0017c39:	68 26 b2 02 c0       	push   0xc002b226
c0017c3e:	50                   	push   eax
c0017c3f:	e8 c2 fe ff ff       	call   c0017b06 <findDataTable(unsigned char*, char*)>
c0017c44:	83 c4 10             	add    esp,0x10
c0017c47:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017c4b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017c50:	75 19                	jne    c0017c6b <scanMADT()+0xc9>
c0017c52:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0017c57:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017c5d:	83 e2 fe             	and    edx,0xfffffffe
c0017c60:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017c66:	e9 b8 03 00 00       	jmp    c0018023 <scanMADT()+0x481>
c0017c6b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017c73:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c7a:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017c7e:	0f 87 9f 03 00 00    	ja     c0018023 <scanMADT()+0x481>
c0017c84:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017c8c:	0f 87 91 03 00 00    	ja     c0018023 <scanMADT()+0x481>
c0017c92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c96:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017c9a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c9e:	8d 50 01             	lea    edx,[eax+0x1]
c0017ca1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ca5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ca9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017cad:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017cb1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cb5:	8d 50 01             	lea    edx,[eax+0x1]
c0017cb8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017cbc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cc0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017cc4:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017cc8:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017ccd:	0f 86 4f 03 00 00    	jbe    c0018022 <scanMADT()+0x480>
c0017cd3:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017cd8:	75 57                	jne    c0017d31 <scanMADT()+0x18f>
c0017cda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cde:	8d 50 01             	lea    edx,[eax+0x1]
c0017ce1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ce5:	8a 15 00 0d 03 c0    	mov    dl,BYTE PTR ds:0xc0030d00
c0017ceb:	0f b6 d2             	movzx  edx,dl
c0017cee:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017cf2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017cf6:	88 82 40 0d 03 c0    	mov    BYTE PTR [edx-0x3ffcf2c0],al
c0017cfc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d00:	8d 50 01             	lea    edx,[eax+0x1]
c0017d03:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d07:	8a 15 00 0d 03 c0    	mov    dl,BYTE PTR ds:0xc0030d00
c0017d0d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017d10:	88 0d 00 0d 03 c0    	mov    BYTE PTR ds:0xc0030d00,cl
c0017d16:	0f b6 d2             	movzx  edx,dl
c0017d19:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017d1d:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017d21:	88 82 20 0d 03 c0    	mov    BYTE PTR [edx-0x3ffcf2e0],al
c0017d27:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017d2c:	e9 da 02 00 00       	jmp    c001800b <scanMADT()+0x469>
c0017d31:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017d36:	0f 85 14 01 00 00    	jne    c0017e50 <scanMADT()+0x2ae>
c0017d3c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d40:	8d 50 01             	lea    edx,[eax+0x1]
c0017d43:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d47:	8a 15 c0 0b 03 c0    	mov    dl,BYTE PTR ds:0xc0030bc0
c0017d4d:	0f b6 d2             	movzx  edx,dl
c0017d50:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017d54:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017d58:	88 82 e0 0b 03 c0    	mov    BYTE PTR [edx-0x3ffcf420],al
c0017d5e:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017d62:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d6a:	01 d0                	add    eax,edx
c0017d6c:	83 c0 2c             	add    eax,0x2c
c0017d6f:	8a 00                	mov    al,BYTE PTR [eax]
c0017d71:	0f b6 d0             	movzx  edx,al
c0017d74:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d78:	8d 48 01             	lea    ecx,[eax+0x1]
c0017d7b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d7f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017d83:	0f b6 c0             	movzx  eax,al
c0017d86:	c1 e0 08             	shl    eax,0x8
c0017d89:	89 d1                	mov    ecx,edx
c0017d8b:	09 c1                	or     ecx,eax
c0017d8d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d91:	8d 50 02             	lea    edx,[eax+0x2]
c0017d94:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d98:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017d9c:	0f b6 c0             	movzx  eax,al
c0017d9f:	c1 e0 10             	shl    eax,0x10
c0017da2:	09 c1                	or     ecx,eax
c0017da4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017da8:	8d 50 03             	lea    edx,[eax+0x3]
c0017dab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017daf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017db3:	0f b6 c0             	movzx  eax,al
c0017db6:	c1 e0 18             	shl    eax,0x18
c0017db9:	09 c1                	or     ecx,eax
c0017dbb:	89 ca                	mov    edx,ecx
c0017dbd:	a0 c0 0b 03 c0       	mov    al,ds:0xc0030bc0
c0017dc2:	0f b6 c0             	movzx  eax,al
c0017dc5:	89 14 85 00 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf400],edx
c0017dcc:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017dd1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017dd5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dd9:	01 d0                	add    eax,edx
c0017ddb:	83 c0 2c             	add    eax,0x2c
c0017dde:	8a 00                	mov    al,BYTE PTR [eax]
c0017de0:	0f b6 d0             	movzx  edx,al
c0017de3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017de7:	8d 48 01             	lea    ecx,[eax+0x1]
c0017dea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017dee:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017df2:	0f b6 c0             	movzx  eax,al
c0017df5:	c1 e0 08             	shl    eax,0x8
c0017df8:	89 d1                	mov    ecx,edx
c0017dfa:	09 c1                	or     ecx,eax
c0017dfc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e00:	8d 50 02             	lea    edx,[eax+0x2]
c0017e03:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e07:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e0b:	0f b6 c0             	movzx  eax,al
c0017e0e:	c1 e0 10             	shl    eax,0x10
c0017e11:	09 c1                	or     ecx,eax
c0017e13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e17:	8d 50 03             	lea    edx,[eax+0x3]
c0017e1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e1e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e22:	0f b6 c0             	movzx  eax,al
c0017e25:	c1 e0 18             	shl    eax,0x18
c0017e28:	09 c1                	or     ecx,eax
c0017e2a:	89 ca                	mov    edx,ecx
c0017e2c:	a0 c0 0b 03 c0       	mov    al,ds:0xc0030bc0
c0017e31:	0f b6 c0             	movzx  eax,al
c0017e34:	89 14 85 80 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf380],edx
c0017e3b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e40:	a0 c0 0b 03 c0       	mov    al,ds:0xc0030bc0
c0017e45:	40                   	inc    eax
c0017e46:	a2 c0 0b 03 c0       	mov    ds:0xc0030bc0,al
c0017e4b:	e9 bb 01 00 00       	jmp    c001800b <scanMADT()+0x469>
c0017e50:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017e55:	0f 85 e9 00 00 00    	jne    c0017f44 <scanMADT()+0x3a2>
c0017e5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e5f:	8d 50 01             	lea    edx,[eax+0x1]
c0017e62:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e66:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e6a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e6e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017e72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e76:	8d 50 01             	lea    edx,[eax+0x1]
c0017e79:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e7d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e81:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e85:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017e89:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e8d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e91:	01 d0                	add    eax,edx
c0017e93:	83 c0 2c             	add    eax,0x2c
c0017e96:	8a 00                	mov    al,BYTE PTR [eax]
c0017e98:	0f b6 d0             	movzx  edx,al
c0017e9b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e9f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ea2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ea6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017eaa:	0f b6 c0             	movzx  eax,al
c0017ead:	c1 e0 08             	shl    eax,0x8
c0017eb0:	89 d1                	mov    ecx,edx
c0017eb2:	09 c1                	or     ecx,eax
c0017eb4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eb8:	8d 50 02             	lea    edx,[eax+0x2]
c0017ebb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ebf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ec3:	0f b6 c0             	movzx  eax,al
c0017ec6:	c1 e0 10             	shl    eax,0x10
c0017ec9:	09 c1                	or     ecx,eax
c0017ecb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ecf:	8d 50 03             	lea    edx,[eax+0x3]
c0017ed2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ed6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017eda:	0f b6 c0             	movzx  eax,al
c0017edd:	c1 e0 18             	shl    eax,0x18
c0017ee0:	09 c8                	or     eax,ecx
c0017ee2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017ee6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017eeb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017eef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ef3:	01 d0                	add    eax,edx
c0017ef5:	83 c0 2c             	add    eax,0x2c
c0017ef8:	8a 00                	mov    al,BYTE PTR [eax]
c0017efa:	0f b6 c0             	movzx  eax,al
c0017efd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017f01:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017f04:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f08:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017f0c:	0f b6 d2             	movzx  edx,dl
c0017f0f:	c1 e2 08             	shl    edx,0x8
c0017f12:	09 d0                	or     eax,edx
c0017f14:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017f19:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017f1e:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017f23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f27:	88 90 80 d4 02 c0    	mov    BYTE PTR [eax-0x3ffd2b80],dl
c0017f2d:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017f32:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017f37:	66 89 84 12 a0 0b 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf460],ax
c0017f3f:	e9 c7 00 00 00       	jmp    c001800b <scanMADT()+0x469>
c0017f44:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017f49:	0f 85 b0 00 00 00    	jne    c0017fff <scanMADT()+0x45d>
c0017f4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f53:	8d 50 01             	lea    edx,[eax+0x1]
c0017f56:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f5a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f5e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f62:	0f b6 c0             	movzx  eax,al
c0017f65:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017f69:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f6d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f71:	01 d0                	add    eax,edx
c0017f73:	83 c0 2c             	add    eax,0x2c
c0017f76:	8a 00                	mov    al,BYTE PTR [eax]
c0017f78:	0f b6 d0             	movzx  edx,al
c0017f7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f7f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f86:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f8a:	0f b6 c0             	movzx  eax,al
c0017f8d:	c1 e0 08             	shl    eax,0x8
c0017f90:	09 d0                	or     eax,edx
c0017f92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017f96:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017f9b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f9f:	8d 50 01             	lea    edx,[eax+0x1]
c0017fa2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fa6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017faa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fae:	0f b6 c0             	movzx  eax,al
c0017fb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017fb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fb9:	c1 e0 08             	shl    eax,0x8
c0017fbc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017fc0:	89 c1                	mov    ecx,eax
c0017fc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017fc6:	c1 e0 18             	shl    eax,0x18
c0017fc9:	89 c3                	mov    ebx,eax
c0017fcb:	a1 10 0b 03 c0       	mov    eax,ds:0xc0030b10
c0017fd0:	8d 50 01             	lea    edx,[eax+0x1]
c0017fd3:	89 15 10 0b 03 c0    	mov    DWORD PTR ds:0xc0030b10,edx
c0017fd9:	09 d9                	or     ecx,ebx
c0017fdb:	89 ca                	mov    edx,ecx
c0017fdd:	89 14 85 20 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf4e0],edx
c0017fe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017fe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ff0:	68 88 b3 02 c0       	push   0xc002b388
c0017ff5:	e8 9a ad ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0017ffa:	83 c4 10             	add    esp,0x10
c0017ffd:	eb 0c                	jmp    c001800b <scanMADT()+0x469>
c0017fff:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018004:	75 05                	jne    c001800b <scanMADT()+0x469>
c0018006:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001800b:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018010:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018014:	01 d0                	add    eax,edx
c0018016:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001801a:	e9 54 fc ff ff       	jmp    c0017c73 <scanMADT()+0xd1>
c001801f:	90                   	nop
c0018020:	eb 01                	jmp    c0018023 <scanMADT()+0x481>
c0018022:	90                   	nop
c0018023:	83 c4 38             	add    esp,0x38
c0018026:	5b                   	pop    ebx
c0018027:	c3                   	ret    

c0018028 <ACPI::ACPI()>:
c0018028:	83 ec 0c             	sub    esp,0xc
c001802b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001802f:	83 ec 08             	sub    esp,0x8
c0018032:	68 2b b2 02 c0       	push   0xc002b22b
c0018037:	50                   	push   eax
c0018038:	e8 6d c3 ff ff       	call   c00143aa <Device::Device(char const*)>
c001803d:	83 c4 10             	add    esp,0x10
c0018040:	ba fc b3 02 c0       	mov    edx,0xc002b3fc
c0018045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018049:	89 10                	mov    DWORD PTR [eax],edx
c001804b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001804f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001805a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0018064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018068:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018076:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001807d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018081:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018088:	e8 15 fb ff ff       	call   c0017ba2 <scanMADT()>
c001808d:	90                   	nop
c001808e:	83 c4 0c             	add    esp,0xc
c0018091:	c3                   	ret    

c0018092 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018092:	83 ec 2c             	sub    esp,0x2c
c0018095:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018099:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001809d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00180a1:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00180a5:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00180aa:	88 d0                	mov    al,dl
c00180ac:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00180b0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00180b5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00180bd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00180c1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00180c7:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00180cb:	0f 8d 97 00 00 00    	jge    c0018168 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00180d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00180d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00180d9:	83 c2 2a             	add    edx,0x2a
c00180dc:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00180e0:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00180e5:	75 78                	jne    c001815f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00180e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00180eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00180ef:	83 c2 2a             	add    edx,0x2a
c00180f2:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00180f6:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00180fa:	75 63                	jne    c001815f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00180fc:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018101:	74 3a                	je     c001813d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018103:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018107:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001810b:	83 c2 2a             	add    edx,0x2a
c001810e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018112:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018116:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018119:	39 c2                	cmp    edx,eax
c001811b:	74 10                	je     c001812d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001811d:	83 ec 0c             	sub    esp,0xc
c0018120:	68 c4 b3 02 c0       	push   0xc002b3c4
c0018125:	e8 13 23 00 00       	call   c001a43d <Krnl::panic(char const*)>
c001812a:	83 c4 10             	add    esp,0x10
c001812d:	83 ec 0c             	sub    esp,0xc
c0018130:	68 30 b2 02 c0       	push   0xc002b230
c0018135:	e8 03 23 00 00       	call   c001a43d <Krnl::panic(char const*)>
c001813a:	83 c4 10             	add    esp,0x10
c001813d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018141:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018145:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018149:	83 c2 2a             	add    edx,0x2a
c001814c:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018150:	8b 02                	mov    eax,DWORD PTR [edx]
c0018152:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018155:	89 01                	mov    DWORD PTR [ecx],eax
c0018157:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001815a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001815f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018163:	e9 55 ff ff ff       	jmp    c00180bd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018168:	90                   	nop
c0018169:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001816d:	83 c4 2c             	add    esp,0x2c
c0018170:	c2 04 00             	ret    0x4
c0018173:	90                   	nop

c0018174 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018174:	83 ec 1c             	sub    esp,0x1c
c0018177:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001817b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001817f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018183:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018188:	88 c8                	mov    al,cl
c001818a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001818e:	88 d0                	mov    al,dl
c0018190:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018194:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018198:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001819e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181a2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00181a5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00181a9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00181ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181b1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00181b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181bb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00181be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181c2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00181c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181cb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00181d1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00181d5:	8d 48 01             	lea    ecx,[eax+0x1]
c00181d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181dc:	83 c2 2a             	add    edx,0x2a
c00181df:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00181e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181e7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00181ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181f1:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00181f4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00181f8:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00181fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018200:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018206:	8d 50 01             	lea    edx,[eax+0x1]
c0018209:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001820d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018213:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018217:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001821d:	3d 00 02 00 00       	cmp    eax,0x200
c0018222:	75 10                	jne    c0018234 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018224:	83 ec 0c             	sub    esp,0xc
c0018227:	68 3f b2 02 c0       	push   0xc002b23f
c001822c:	e8 0c 22 00 00       	call   c001a43d <Krnl::panic(char const*)>
c0018231:	83 c4 10             	add    esp,0x10
c0018234:	90                   	nop
c0018235:	83 c4 1c             	add    esp,0x1c
c0018238:	c3                   	ret    
c0018239:	90                   	nop

c001823a <ACPI::setScreenBrightnessLevel(void*, int)>:
c001823a:	b8 00 00 00 00       	mov    eax,0x0
c001823f:	c3                   	ret    

c0018240 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018240:	83 ec 1c             	sub    esp,0x1c
c0018243:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018247:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001824a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001824e:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0018253:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018258:	83 ec 08             	sub    esp,0x8
c001825b:	52                   	push   edx
c001825c:	50                   	push   eax
c001825d:	e8 f6 6b ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c0018262:	83 c4 10             	add    esp,0x10
c0018265:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018269:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001826e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018273:	83 ec 04             	sub    esp,0x4
c0018276:	6a 01                	push   0x1
c0018278:	52                   	push   edx
c0018279:	50                   	push   eax
c001827a:	e8 ef 6c ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c001827f:	83 c4 10             	add    esp,0x10
c0018282:	90                   	nop
c0018283:	83 c4 1c             	add    esp,0x1c
c0018286:	c3                   	ret    
c0018287:	90                   	nop

c0018288 <ACPI::open(int, int, void*)>:
c0018288:	53                   	push   ebx
c0018289:	83 ec 28             	sub    esp,0x28
c001828c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018290:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018297:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001829b:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00182a2:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00182a7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00182ad:	83 e0 04             	and    eax,0x4
c00182b0:	84 c0                	test   al,al
c00182b2:	74 47                	je     c00182fb <ACPI::open(int, int, void*)+0x73>
c00182b4:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c00182b9:	83 ec 08             	sub    esp,0x8
c00182bc:	68 5c b2 02 c0       	push   0xc002b25c
c00182c1:	50                   	push   eax
c00182c2:	e8 3f f8 ff ff       	call   c0017b06 <findDataTable(unsigned char*, char*)>
c00182c7:	83 c4 10             	add    esp,0x10
c00182ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00182ce:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00182d3:	74 26                	je     c00182fb <ACPI::open(int, int, void*)+0x73>
c00182d5:	83 ec 0c             	sub    esp,0xc
c00182d8:	68 61 b2 02 c0       	push   0xc002b261
c00182dd:	e8 b2 aa ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00182e2:	83 c4 10             	add    esp,0x10
c00182e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182e9:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00182f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182f4:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00182fb:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018303:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018307:	8a 00                	mov    al,BYTE PTR [eax]
c0018309:	3c 01                	cmp    al,0x1
c001830b:	75 28                	jne    c0018335 <ACPI::open(int, int, void*)+0xad>
c001830d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018311:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018318:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001831c:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018323:	83 ec 0c             	sub    esp,0xc
c0018326:	68 72 b2 02 c0       	push   0xc002b272
c001832b:	e8 64 aa ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0018330:	83 c4 10             	add    esp,0x10
c0018333:	eb 25                	jmp    c001835a <ACPI::open(int, int, void*)+0xd2>
c0018335:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018339:	8a 00                	mov    al,BYTE PTR [eax]
c001833b:	3c 02                	cmp    al,0x2
c001833d:	75 1b                	jne    c001835a <ACPI::open(int, int, void*)+0xd2>
c001833f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018343:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001834a:	83 ec 0c             	sub    esp,0xc
c001834d:	68 7a b2 02 c0       	push   0xc002b27a
c0018352:	e8 3d aa ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0018357:	83 c4 10             	add    esp,0x10
c001835a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001835e:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018364:	83 f0 01             	xor    eax,0x1
c0018367:	84 c0                	test   al,al
c0018369:	74 6a                	je     c00183d5 <ACPI::open(int, int, void*)+0x14d>
c001836b:	83 ec 0c             	sub    esp,0xc
c001836e:	68 82 b2 02 c0       	push   0xc002b282
c0018373:	e8 1c aa ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0018378:	83 c4 10             	add    esp,0x10
c001837b:	e8 d0 7d fe ff       	call   c0000150 <manualPCIProbe>
c0018380:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018384:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0018389:	75 28                	jne    c00183b3 <ACPI::open(int, int, void*)+0x12b>
c001838b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001838f:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018396:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001839a:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00183a1:	83 ec 0c             	sub    esp,0xc
c00183a4:	68 90 b2 02 c0       	push   0xc002b290
c00183a9:	e8 e6 a9 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00183ae:	83 c4 10             	add    esp,0x10
c00183b1:	eb 22                	jmp    c00183d5 <ACPI::open(int, int, void*)+0x14d>
c00183b3:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00183b8:	75 1b                	jne    c00183d5 <ACPI::open(int, int, void*)+0x14d>
c00183ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183be:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00183c5:	83 ec 0c             	sub    esp,0xc
c00183c8:	68 9a b2 02 c0       	push   0xc002b29a
c00183cd:	e8 c2 a9 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00183d2:	83 c4 10             	add    esp,0x10
c00183d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183d9:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00183df:	84 c0                	test   al,al
c00183e1:	74 13                	je     c00183f6 <ACPI::open(int, int, void*)+0x16e>
c00183e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183e7:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00183ed:	83 f0 01             	xor    eax,0x1
c00183f0:	0f b6 c0             	movzx  eax,al
c00183f3:	40                   	inc    eax
c00183f4:	eb 05                	jmp    c00183fb <ACPI::open(int, int, void*)+0x173>
c00183f6:	b8 00 00 00 00       	mov    eax,0x0
c00183fb:	83 ec 08             	sub    esp,0x8
c00183fe:	50                   	push   eax
c00183ff:	68 a4 b2 02 c0       	push   0xc002b2a4
c0018404:	e8 8b a9 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0018409:	83 c4 10             	add    esp,0x10
c001840c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018410:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018416:	84 c0                	test   al,al
c0018418:	74 67                	je     c0018481 <ACPI::open(int, int, void*)+0x1f9>
c001841a:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018422:	83 ec 0c             	sub    esp,0xc
c0018425:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018429:	e8 12 74 ff ff       	call   c000f840 <malloc>
c001842e:	83 c4 10             	add    esp,0x10
c0018431:	89 c3                	mov    ebx,eax
c0018433:	83 ec 0c             	sub    esp,0xc
c0018436:	53                   	push   ebx
c0018437:	e8 2c a3 00 00       	call   c0022768 <PCI::PCI()>
c001843c:	83 c4 10             	add    esp,0x10
c001843f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018443:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018447:	83 ec 08             	sub    esp,0x8
c001844a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001844e:	50                   	push   eax
c001844f:	e8 66 bd ff ff       	call   c00141ba <Device::addChild(Device*)>
c0018454:	83 c4 10             	add    esp,0x10
c0018457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001845b:	8b 00                	mov    eax,DWORD PTR [eax]
c001845d:	83 c0 08             	add    eax,0x8
c0018460:	8b 00                	mov    eax,DWORD PTR [eax]
c0018462:	6a 00                	push   0x0
c0018464:	6a 00                	push   0x0
c0018466:	6a 00                	push   0x0
c0018468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001846c:	ff d0                	call   eax
c001846e:	83 c4 10             	add    esp,0x10
c0018471:	83 ec 0c             	sub    esp,0xc
c0018474:	68 ad b2 02 c0       	push   0xc002b2ad
c0018479:	e8 16 a9 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001847e:	83 c4 10             	add    esp,0x10
c0018481:	e8 ef 98 ff ff       	call   c0011d75 <Virt::swappingSetup()>
c0018486:	83 ec 0c             	sub    esp,0xc
c0018489:	68 b8 b2 02 c0       	push   0xc002b2b8
c001848e:	e8 80 46 00 00       	call   c001cb13 <Thr::loadKernelSymbolTable(char const*)>
c0018493:	83 c4 10             	add    esp,0x10
c0018496:	8b 1d 28 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e228
c001849c:	83 ec 08             	sub    esp,0x8
c001849f:	6a 01                	push   0x1
c00184a1:	68 d6 b2 02 c0       	push   0xc002b2d6
c00184a6:	e8 c5 50 00 00       	call   c001d570 <Thr::loadDLL(char const*, bool)>
c00184ab:	83 c4 10             	add    esp,0x10
c00184ae:	83 ec 08             	sub    esp,0x8
c00184b1:	53                   	push   ebx
c00184b2:	50                   	push   eax
c00184b3:	e8 07 53 00 00       	call   c001d7bf <Thr::executeDLL(unsigned long, void*)>
c00184b8:	83 c4 10             	add    esp,0x10
c00184bb:	8b 1d 28 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e228
c00184c1:	83 ec 08             	sub    esp,0x8
c00184c4:	6a 01                	push   0x1
c00184c6:	68 f3 b2 02 c0       	push   0xc002b2f3
c00184cb:	e8 a0 50 00 00       	call   c001d570 <Thr::loadDLL(char const*, bool)>
c00184d0:	83 c4 10             	add    esp,0x10
c00184d3:	83 ec 08             	sub    esp,0x8
c00184d6:	53                   	push   ebx
c00184d7:	50                   	push   eax
c00184d8:	e8 e2 52 00 00       	call   c001d7bf <Thr::executeDLL(unsigned long, void*)>
c00184dd:	83 c4 10             	add    esp,0x10
c00184e0:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00184e5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00184eb:	83 e0 04             	and    eax,0x4
c00184ee:	84 c0                	test   al,al
c00184f0:	0f 84 d2 00 00 00    	je     c00185c8 <ACPI::open(int, int, void*)+0x340>
c00184f6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00184fd:	83 ec 0c             	sub    esp,0xc
c0018500:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018504:	e8 37 73 ff ff       	call   c000f840 <malloc>
c0018509:	83 c4 10             	add    esp,0x10
c001850c:	89 c3                	mov    ebx,eax
c001850e:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c0018513:	83 ec 04             	sub    esp,0x4
c0018516:	50                   	push   eax
c0018517:	68 10 b3 02 c0       	push   0xc002b310
c001851c:	53                   	push   ebx
c001851d:	e8 ca ad ff ff       	call   c00132ec <File::File(char const*, Process*)>
c0018522:	83 c4 10             	add    esp,0x10
c0018525:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018529:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001852e:	74 17                	je     c0018547 <ACPI::open(int, int, void*)+0x2bf>
c0018530:	83 ec 0c             	sub    esp,0xc
c0018533:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018537:	e8 82 b0 ff ff       	call   c00135be <File::exists()>
c001853c:	83 c4 10             	add    esp,0x10
c001853f:	84 c0                	test   al,al
c0018541:	74 04                	je     c0018547 <ACPI::open(int, int, void*)+0x2bf>
c0018543:	b0 01                	mov    al,0x1
c0018545:	eb 02                	jmp    c0018549 <ACPI::open(int, int, void*)+0x2c1>
c0018547:	b0 00                	mov    al,0x0
c0018549:	84 c0                	test   al,al
c001854b:	74 22                	je     c001856f <ACPI::open(int, int, void*)+0x2e7>
c001854d:	83 ec 08             	sub    esp,0x8
c0018550:	6a 01                	push   0x1
c0018552:	68 10 b3 02 c0       	push   0xc002b310
c0018557:	e8 14 50 00 00       	call   c001d570 <Thr::loadDLL(char const*, bool)>
c001855c:	83 c4 10             	add    esp,0x10
c001855f:	83 ec 08             	sub    esp,0x8
c0018562:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018566:	50                   	push   eax
c0018567:	e8 53 52 00 00       	call   c001d7bf <Thr::executeDLL(unsigned long, void*)>
c001856c:	83 c4 10             	add    esp,0x10
c001856f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018574:	74 1e                	je     c0018594 <ACPI::open(int, int, void*)+0x30c>
c0018576:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001857b:	74 17                	je     c0018594 <ACPI::open(int, int, void*)+0x30c>
c001857d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018581:	8b 00                	mov    eax,DWORD PTR [eax]
c0018583:	83 c0 08             	add    eax,0x8
c0018586:	8b 00                	mov    eax,DWORD PTR [eax]
c0018588:	83 ec 0c             	sub    esp,0xc
c001858b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001858f:	ff d0                	call   eax
c0018591:	83 c4 10             	add    esp,0x10
c0018594:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c0018599:	83 ec 08             	sub    esp,0x8
c001859c:	68 2d b3 02 c0       	push   0xc002b32d
c00185a1:	50                   	push   eax
c00185a2:	e8 5f f5 ff ff       	call   c0017b06 <findDataTable(unsigned char*, char*)>
c00185a7:	83 c4 10             	add    esp,0x10
c00185aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00185ae:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00185b3:	74 13                	je     c00185c8 <ACPI::open(int, int, void*)+0x340>
c00185b5:	83 ec 08             	sub    esp,0x8
c00185b8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00185bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00185c0:	e8 7b fc ff ff       	call   c0018240 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00185c5:	83 c4 10             	add    esp,0x10
c00185c8:	b8 00 00 00 00       	mov    eax,0x0
c00185cd:	83 c4 28             	add    esp,0x28
c00185d0:	5b                   	pop    ebx
c00185d1:	c3                   	ret    

c00185d2 <ACPI::sleep()>:
c00185d2:	83 ec 0c             	sub    esp,0xc
c00185d5:	a1 e0 08 03 c0       	mov    eax,ds:0xc00308e0
c00185da:	85 c0                	test   eax,eax
c00185dc:	74 07                	je     c00185e5 <ACPI::sleep()+0x13>
c00185de:	a1 e0 08 03 c0       	mov    eax,ds:0xc00308e0
c00185e3:	ff d0                	call   eax
c00185e5:	90                   	nop
c00185e6:	83 c4 0c             	add    esp,0xc
c00185e9:	c3                   	ret    

c00185ea <CPU::close(int, int, void*)>:
c00185ea:	31 c0                	xor    eax,eax
c00185ec:	c3                   	ret    
c00185ed:	90                   	nop

c00185ee <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00185ee:	55                   	push   ebp
c00185ef:	57                   	push   edi
c00185f0:	56                   	push   esi
c00185f1:	53                   	push   ebx
c00185f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00185f6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00185fa:	89 ce                	mov    esi,ecx
c00185fc:	89 d5                	mov    ebp,edx
c00185fe:	80 f9 04             	cmp    cl,0x4
c0018601:	75 28                	jne    c001862b <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018603:	8d 42 f9             	lea    eax,[edx-0x7]
c0018606:	3c 03                	cmp    al,0x3
c0018608:	0f 86 63 01 00 00    	jbe    c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001860e:	80 fa 03             	cmp    dl,0x3
c0018611:	0f 84 5a 01 00 00    	je     c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018617:	8d 7a f2             	lea    edi,[edx-0xe]
c001861a:	b8 50 d6 02 c0       	mov    eax,0xc002d650
c001861f:	89 fb                	mov    ebx,edi
c0018621:	80 fb 01             	cmp    bl,0x1
c0018624:	77 4e                	ja     c0018674 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018626:	e9 52 01 00 00       	jmp    c001877d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001862b:	80 f9 05             	cmp    cl,0x5
c001862e:	75 4d                	jne    c001867d <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018630:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c0018635:	80 fa 03             	cmp    dl,0x3
c0018638:	0f 86 3f 01 00 00    	jbe    c001877d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001863e:	8d 7a fa             	lea    edi,[edx-0x6]
c0018641:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c0018646:	89 fb                	mov    ebx,edi
c0018648:	80 fb 01             	cmp    bl,0x1
c001864b:	0f 86 2c 01 00 00    	jbe    c001877d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018651:	b8 80 d6 02 c0       	mov    eax,0xc002d680
c0018656:	80 fa 08             	cmp    dl,0x8
c0018659:	0f 84 1e 01 00 00    	je     c001877d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001865f:	89 d7                	mov    edi,edx
c0018661:	b8 90 d6 02 c0       	mov    eax,0xc002d690
c0018666:	83 e7 fb             	and    edi,0xfffffffb
c0018669:	89 fb                	mov    ebx,edi
c001866b:	80 fb 09             	cmp    bl,0x9
c001866e:	0f 84 09 01 00 00    	je     c001877d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018674:	31 c0                	xor    eax,eax
c0018676:	89 eb                	mov    ebx,ebp
c0018678:	0f b6 fb             	movzx  edi,bl
c001867b:	eb 30                	jmp    c00186ad <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001867d:	31 c0                	xor    eax,eax
c001867f:	80 f9 06             	cmp    cl,0x6
c0018682:	75 f2                	jne    c0018676 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018684:	80 fa 0a             	cmp    dl,0xa
c0018687:	77 ed                	ja     c0018676 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018689:	bf de 05 00 00       	mov    edi,0x5de
c001868e:	0f a3 d7             	bt     edi,edx
c0018691:	73 e3                	jae    c0018676 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018693:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0018698:	e9 e0 00 00 00       	jmp    c001877d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001869d:	39 c7                	cmp    edi,eax
c001869f:	0f 84 d3 00 00 00    	je     c0018778 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00186a5:	40                   	inc    eax
c00186a6:	3d d0 00 00 00       	cmp    eax,0xd0
c00186ab:	74 09                	je     c00186b6 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00186ad:	89 f3                	mov    ebx,esi
c00186af:	80 fb 0f             	cmp    bl,0xf
c00186b2:	75 f1                	jne    c00186a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00186b4:	eb e7                	jmp    c001869d <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00186b6:	80 f9 10             	cmp    cl,0x10
c00186b9:	75 14                	jne    c00186cf <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00186bb:	8d 42 fc             	lea    eax,[edx-0x4]
c00186be:	83 e0 fb             	and    eax,0xfffffffb
c00186c1:	3c 02                	cmp    al,0x2
c00186c3:	76 34                	jbe    c00186f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00186c5:	b8 12 b7 02 c0       	mov    eax,0xc002b712
c00186ca:	80 fa 02             	cmp    dl,0x2
c00186cd:	eb 24                	jmp    c00186f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00186cf:	80 f9 11             	cmp    cl,0x11
c00186d2:	75 13                	jne    c00186e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00186d4:	b8 12 b7 02 c0       	mov    eax,0xc002b712
c00186d9:	80 fa 03             	cmp    dl,0x3
c00186dc:	0f 85 9b 00 00 00    	jne    c001877d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186e2:	e9 91 00 00 00       	jmp    c0018778 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00186e7:	80 f9 12             	cmp    cl,0x12
c00186ea:	75 14                	jne    c0018700 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00186ec:	b8 12 b7 02 c0       	mov    eax,0xc002b712
c00186f1:	fe ca                	dec    dl
c00186f3:	0f 85 84 00 00 00    	jne    c001877d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186f9:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c00186fe:	eb 7d                	jmp    c001877d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018700:	80 f9 14             	cmp    cl,0x14
c0018703:	75 12                	jne    c0018717 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018705:	4a                   	dec    edx
c0018706:	b8 12 b7 02 c0       	mov    eax,0xc002b712
c001870b:	80 fa 01             	cmp    dl,0x1
c001870e:	77 6d                	ja     c001877d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018710:	b8 d0 d6 02 c0       	mov    eax,0xc002d6d0
c0018715:	eb 66                	jmp    c001877d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018717:	80 f9 15             	cmp    cl,0x15
c001871a:	75 31                	jne    c001874d <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001871c:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c0018721:	80 fa 01             	cmp    dl,0x1
c0018724:	74 57                	je     c001877d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018726:	b8 12 b7 02 c0       	mov    eax,0xc002b712
c001872b:	80 fa 13             	cmp    dl,0x13
c001872e:	76 0c                	jbe    c001873c <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018730:	80 fa 30             	cmp    dl,0x30
c0018733:	75 48                	jne    c001877d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018735:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c001873a:	eb 41                	jmp    c001877d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001873c:	b9 04 00 09 00       	mov    ecx,0x90004
c0018741:	0f a3 d1             	bt     ecx,edx
c0018744:	73 37                	jae    c001877d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018746:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c001874b:	eb 30                	jmp    c001877d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001874d:	b8 12 b7 02 c0       	mov    eax,0xc002b712
c0018752:	80 f9 16             	cmp    cl,0x16
c0018755:	75 26                	jne    c001877d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018757:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c001875c:	84 d2                	test   dl,dl
c001875e:	74 1d                	je     c001877d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018760:	b8 12 b7 02 c0       	mov    eax,0xc002b712
c0018765:	80 fa 30             	cmp    dl,0x30
c0018768:	75 13                	jne    c001877d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001876a:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c001876f:	eb 0c                	jmp    c001877d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018771:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c0018776:	eb 05                	jmp    c001877d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018778:	b8 b0 d6 02 c0       	mov    eax,0xc002d6b0
c001877d:	5b                   	pop    ebx
c001877e:	5e                   	pop    esi
c001877f:	5f                   	pop    edi
c0018780:	5d                   	pop    ebp
c0018781:	c3                   	ret    

c0018782 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018782:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018786:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001878a:	80 f9 04             	cmp    cl,0x4
c001878d:	75 6b                	jne    c00187fa <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001878f:	b8 a0 d4 02 c0       	mov    eax,0xc002d4a0
c0018794:	80 fa 01             	cmp    dl,0x1
c0018797:	0f 86 92 02 00 00    	jbe    c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001879d:	b8 b0 d4 02 c0       	mov    eax,0xc002d4b0
c00187a2:	80 fa 02             	cmp    dl,0x2
c00187a5:	0f 84 84 02 00 00    	je     c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187ab:	b8 c0 d4 02 c0       	mov    eax,0xc002d4c0
c00187b0:	80 fa 03             	cmp    dl,0x3
c00187b3:	0f 84 76 02 00 00    	je     c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187b9:	b8 d0 d4 02 c0       	mov    eax,0xc002d4d0
c00187be:	80 fa 04             	cmp    dl,0x4
c00187c1:	0f 84 68 02 00 00    	je     c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187c7:	b8 e0 d4 02 c0       	mov    eax,0xc002d4e0
c00187cc:	80 fa 05             	cmp    dl,0x5
c00187cf:	0f 84 5a 02 00 00    	je     c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187d5:	b8 c0 d4 02 c0       	mov    eax,0xc002d4c0
c00187da:	80 fa 07             	cmp    dl,0x7
c00187dd:	0f 84 4c 02 00 00    	je     c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187e3:	83 ea 08             	sub    edx,0x8
c00187e6:	b8 12 b7 02 c0       	mov    eax,0xc002b712
c00187eb:	80 fa 01             	cmp    dl,0x1
c00187ee:	0f 87 3b 02 00 00    	ja     c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187f4:	b8 f0 d4 02 c0       	mov    eax,0xc002d4f0
c00187f9:	c3                   	ret    
c00187fa:	80 f9 05             	cmp    cl,0x5
c00187fd:	75 45                	jne    c0018844 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00187ff:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018802:	b8 00 d5 02 c0       	mov    eax,0xc002d500
c0018807:	80 f9 02             	cmp    cl,0x2
c001880a:	0f 86 1f 02 00 00    	jbe    c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018810:	80 fa 04             	cmp    dl,0x4
c0018813:	0f 84 f3 01 00 00    	je     c0018a0c <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018819:	80 fa 07             	cmp    dl,0x7
c001881c:	0f 84 0d 02 00 00    	je     c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018822:	b8 10 d5 02 c0       	mov    eax,0xc002d510
c0018827:	80 fa 08             	cmp    dl,0x8
c001882a:	0f 84 ff 01 00 00    	je     c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018830:	b8 12 b7 02 c0       	mov    eax,0xc002b712
c0018835:	80 fa 09             	cmp    dl,0x9
c0018838:	0f 85 f1 01 00 00    	jne    c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001883e:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c0018843:	c3                   	ret    
c0018844:	80 f9 06             	cmp    cl,0x6
c0018847:	0f 85 85 01 00 00    	jne    c00189d2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001884d:	b8 30 d5 02 c0       	mov    eax,0xc002d530
c0018852:	80 fa 01             	cmp    dl,0x1
c0018855:	0f 84 d4 01 00 00    	je     c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001885b:	8d 42 fb             	lea    eax,[edx-0x5]
c001885e:	3c 01                	cmp    al,0x1
c0018860:	0f 86 ac 01 00 00    	jbe    c0018a12 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018866:	80 fa 03             	cmp    dl,0x3
c0018869:	0f 84 a3 01 00 00    	je     c0018a12 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001886f:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018872:	b8 50 d5 02 c0       	mov    eax,0xc002d550
c0018877:	80 f9 01             	cmp    cl,0x1
c001887a:	0f 86 af 01 00 00    	jbe    c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018880:	80 fa 09             	cmp    dl,0x9
c0018883:	0f 84 8f 01 00 00    	je     c0018a18 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018889:	8d 4a f6             	lea    ecx,[edx-0xa]
c001888c:	80 f9 01             	cmp    cl,0x1
c001888f:	0f 86 9a 01 00 00    	jbe    c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018895:	b8 60 d5 02 c0       	mov    eax,0xc002d560
c001889a:	80 fa 0d             	cmp    dl,0xd
c001889d:	0f 84 8c 01 00 00    	je     c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188a3:	b8 70 d5 02 c0       	mov    eax,0xc002d570
c00188a8:	80 fa 0e             	cmp    dl,0xe
c00188ab:	0f 84 7e 01 00 00    	je     c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188b1:	b8 80 d5 02 c0       	mov    eax,0xc002d580
c00188b6:	80 fa 0f             	cmp    dl,0xf
c00188b9:	0f 84 70 01 00 00    	je     c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188bf:	b8 60 d5 02 c0       	mov    eax,0xc002d560
c00188c4:	80 fa 15             	cmp    dl,0x15
c00188c7:	0f 84 62 01 00 00    	je     c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188cd:	8d 4a ea             	lea    ecx,[edx-0x16]
c00188d0:	b8 80 d5 02 c0       	mov    eax,0xc002d580
c00188d5:	80 f9 01             	cmp    cl,0x1
c00188d8:	0f 86 51 01 00 00    	jbe    c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188de:	80 fa 1a             	cmp    dl,0x1a
c00188e1:	0f 84 37 01 00 00    	je     c0018a1e <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00188e7:	80 fa 1c             	cmp    dl,0x1c
c00188ea:	0f 84 34 01 00 00    	je     c0018a24 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00188f0:	80 fa 1d             	cmp    dl,0x1d
c00188f3:	0f 84 36 01 00 00    	je     c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188f9:	b8 b0 d5 02 c0       	mov    eax,0xc002d5b0
c00188fe:	80 fa 25             	cmp    dl,0x25
c0018901:	0f 84 28 01 00 00    	je     c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018907:	8d 4a da             	lea    ecx,[edx-0x26]
c001890a:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c001890f:	80 f9 01             	cmp    cl,0x1
c0018912:	0f 86 17 01 00 00    	jbe    c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018918:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c001891d:	80 fa 2a             	cmp    dl,0x2a
c0018920:	0f 84 09 01 00 00    	je     c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018926:	b8 b0 d5 02 c0       	mov    eax,0xc002d5b0
c001892b:	80 fa 2c             	cmp    dl,0x2c
c001892e:	0f 84 fb 00 00 00    	je     c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018934:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c0018939:	80 fa 2d             	cmp    dl,0x2d
c001893c:	0f 84 ed 00 00 00    	je     c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018942:	b8 90 d5 02 c0       	mov    eax,0xc002d590
c0018947:	80 fa 2e             	cmp    dl,0x2e
c001894a:	0f 84 df 00 00 00    	je     c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018950:	b8 b0 d5 02 c0       	mov    eax,0xc002d5b0
c0018955:	80 fa 2f             	cmp    dl,0x2f
c0018958:	0f 84 d1 00 00 00    	je     c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001895e:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018961:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c0018966:	80 f9 01             	cmp    cl,0x1
c0018969:	0f 86 c0 00 00 00    	jbe    c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001896f:	b8 d0 d5 02 c0       	mov    eax,0xc002d5d0
c0018974:	80 fa 37             	cmp    dl,0x37
c0018977:	0f 84 b2 00 00 00    	je     c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001897d:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c0018982:	80 fa 3a             	cmp    dl,0x3a
c0018985:	0f 84 a4 00 00 00    	je     c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001898b:	b8 f0 d5 02 c0       	mov    eax,0xc002d5f0
c0018990:	80 fa 3c             	cmp    dl,0x3c
c0018993:	0f 84 96 00 00 00    	je     c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018999:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c001899e:	80 fa 3d             	cmp    dl,0x3d
c00189a1:	0f 84 88 00 00 00    	je     c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a7:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c00189ac:	80 fa 3e             	cmp    dl,0x3e
c00189af:	74 7e                	je     c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b1:	8d 42 bb             	lea    eax,[edx-0x45]
c00189b4:	3c 01                	cmp    al,0x1
c00189b6:	76 72                	jbe    c0018a2a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00189b8:	80 fa 3f             	cmp    dl,0x3f
c00189bb:	74 6d                	je     c0018a2a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00189bd:	80 fa 4a             	cmp    dl,0x4a
c00189c0:	74 0a                	je     c00189cc <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00189c2:	b8 12 b7 02 c0       	mov    eax,0xc002b712
c00189c7:	80 fa 4d             	cmp    dl,0x4d
c00189ca:	75 63                	jne    c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189cc:	b8 d0 d5 02 c0       	mov    eax,0xc002d5d0
c00189d1:	c3                   	ret    
c00189d2:	b8 12 b7 02 c0       	mov    eax,0xc002b712
c00189d7:	80 f9 0b             	cmp    cl,0xb
c00189da:	75 0a                	jne    c00189e6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00189dc:	fe ca                	dec    dl
c00189de:	75 4f                	jne    c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e0:	b8 10 d6 02 c0       	mov    eax,0xc002d610
c00189e5:	c3                   	ret    
c00189e6:	80 f9 0f             	cmp    cl,0xf
c00189e9:	75 44                	jne    c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189eb:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c00189f0:	80 fa 02             	cmp    dl,0x2
c00189f3:	76 3a                	jbe    c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189f5:	8d 42 fd             	lea    eax,[edx-0x3]
c00189f8:	3c 01                	cmp    al,0x1
c00189fa:	76 0a                	jbe    c0018a06 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00189fc:	b8 12 b7 02 c0       	mov    eax,0xc002b712
c0018a01:	80 fa 06             	cmp    dl,0x6
c0018a04:	75 29                	jne    c0018a2f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a06:	b8 30 d6 02 c0       	mov    eax,0xc002d630
c0018a0b:	c3                   	ret    
c0018a0c:	b8 10 d5 02 c0       	mov    eax,0xc002d510
c0018a11:	c3                   	ret    
c0018a12:	b8 40 d5 02 c0       	mov    eax,0xc002d540
c0018a17:	c3                   	ret    
c0018a18:	b8 60 d5 02 c0       	mov    eax,0xc002d560
c0018a1d:	c3                   	ret    
c0018a1e:	b8 90 d5 02 c0       	mov    eax,0xc002d590
c0018a23:	c3                   	ret    
c0018a24:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c0018a29:	c3                   	ret    
c0018a2a:	b8 f0 d5 02 c0       	mov    eax,0xc002d5f0
c0018a2f:	c3                   	ret    

c0018a30 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018a30:	60                   	pusha  
c0018a31:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018a35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a39:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a3d:	9c                   	pushf  
c0018a3e:	fa                   	cli    
c0018a3f:	0f 09                	wbinvd 
c0018a41:	0f 30                	wrmsr  
c0018a43:	9d                   	popf   
c0018a44:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018a48:	89 02                	mov    DWORD PTR [edx],eax
c0018a4a:	61                   	popa   
c0018a4b:	c3                   	ret    

c0018a4c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018a4c:	60                   	pusha  
c0018a4d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018a51:	9c                   	pushf  
c0018a52:	fa                   	cli    
c0018a53:	0f 09                	wbinvd 
c0018a55:	31 c0                	xor    eax,eax
c0018a57:	31 d2                	xor    edx,edx
c0018a59:	0f 32                	rdmsr  
c0018a5b:	9d                   	popf   
c0018a5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018a60:	89 02                	mov    DWORD PTR [edx],eax
c0018a62:	61                   	popa   
c0018a63:	c3                   	ret    

c0018a64 <CPU::AMD_K6_writeback(int, int, int)>:
c0018a64:	56                   	push   esi
c0018a65:	53                   	push   ebx
c0018a66:	83 ec 10             	sub    esp,0x10
c0018a69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a6d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018a72:	75 5d                	jne    c0018ad1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018a74:	83 f8 08             	cmp    eax,0x8
c0018a77:	75 09                	jne    c0018a82 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018a79:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018a7e:	7e 13                	jle    c0018a93 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018a80:	eb 30                	jmp    c0018ab2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018a82:	83 f8 06             	cmp    eax,0x6
c0018a85:	7c 4a                	jl     c0018ad1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018a87:	83 f8 07             	cmp    eax,0x7
c0018a8a:	7e 07                	jle    c0018a93 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018a8c:	83 f8 09             	cmp    eax,0x9
c0018a8f:	74 21                	je     c0018ab2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018a91:	eb 3e                	jmp    c0018ad1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018a93:	89 e6                	mov    esi,esp
c0018a95:	8b 1d 68 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e268
c0018a9b:	56                   	push   esi
c0018a9c:	c1 eb 15             	shr    ebx,0x15
c0018a9f:	68 82 00 00 c0       	push   0xc0000082
c0018aa4:	83 e3 7e             	and    ebx,0x7e
c0018aa7:	e8 a0 ff ff ff       	call   c0018a4c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018aac:	56                   	push   esi
c0018aad:	6a 00                	push   0x0
c0018aaf:	53                   	push   ebx
c0018ab0:	eb 12                	jmp    c0018ac4 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018ab2:	89 e3                	mov    ebx,esp
c0018ab4:	53                   	push   ebx
c0018ab5:	68 82 00 00 c0       	push   0xc0000082
c0018aba:	e8 8d ff ff ff       	call   c0018a4c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018abf:	53                   	push   ebx
c0018ac0:	6a 00                	push   0x0
c0018ac2:	6a 00                	push   0x0
c0018ac4:	68 82 00 00 c0       	push   0xc0000082
c0018ac9:	e8 62 ff ff ff       	call   c0018a30 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018ace:	83 c4 18             	add    esp,0x18
c0018ad1:	83 c4 10             	add    esp,0x10
c0018ad4:	5b                   	pop    ebx
c0018ad5:	5e                   	pop    esi
c0018ad6:	c3                   	ret    
c0018ad7:	90                   	nop

c0018ad8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018ad8:	55                   	push   ebp
c0018ad9:	57                   	push   edi
c0018ada:	56                   	push   esi
c0018adb:	53                   	push   ebx
c0018adc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ae0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018ae4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018ae8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018aec:	39 05 40 d7 02 c0    	cmp    DWORD PTR ds:0xc002d740,eax
c0018af2:	75 23                	jne    c0018b17 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018af4:	a1 6c 0d 03 c0       	mov    eax,ds:0xc0030d6c
c0018af9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018afd:	89 06                	mov    DWORD PTR [esi],eax
c0018aff:	a1 68 0d 03 c0       	mov    eax,ds:0xc0030d68
c0018b04:	89 07                	mov    DWORD PTR [edi],eax
c0018b06:	a1 64 0d 03 c0       	mov    eax,ds:0xc0030d64
c0018b0b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018b0e:	a1 60 0d 03 c0       	mov    eax,ds:0xc0030d60
c0018b13:	89 02                	mov    DWORD PTR [edx],eax
c0018b15:	eb 3f                	jmp    c0018b56 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018b17:	31 c9                	xor    ecx,ecx
c0018b19:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b1d:	0f a2                	cpuid  
c0018b1f:	89 06                	mov    DWORD PTR [esi],eax
c0018b21:	89 1f                	mov    DWORD PTR [edi],ebx
c0018b23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018b27:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018b2a:	89 10                	mov    DWORD PTR [eax],edx
c0018b2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b30:	a3 40 d7 02 c0       	mov    ds:0xc002d740,eax
c0018b35:	8b 06                	mov    eax,DWORD PTR [esi]
c0018b37:	a3 6c 0d 03 c0       	mov    ds:0xc0030d6c,eax
c0018b3c:	8b 07                	mov    eax,DWORD PTR [edi]
c0018b3e:	a3 68 0d 03 c0       	mov    ds:0xc0030d68,eax
c0018b43:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018b46:	a3 64 0d 03 c0       	mov    ds:0xc0030d64,eax
c0018b4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018b4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b51:	a3 60 0d 03 c0       	mov    ds:0xc0030d60,eax
c0018b56:	5b                   	pop    ebx
c0018b57:	5e                   	pop    esi
c0018b58:	5f                   	pop    edi
c0018b59:	5d                   	pop    ebp
c0018b5a:	c3                   	ret    
c0018b5b:	90                   	nop

c0018b5c <CPU::cpuidCheckEDX(unsigned int)>:
c0018b5c:	83 ec 10             	sub    esp,0x10
c0018b5f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b63:	50                   	push   eax
c0018b64:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b68:	50                   	push   eax
c0018b69:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b6d:	50                   	push   eax
c0018b6e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b72:	50                   	push   eax
c0018b73:	6a 01                	push   0x1
c0018b75:	e8 5e ff ff ff       	call   c0018ad8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b7e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018b82:	0f 95 c0             	setne  al
c0018b85:	83 c4 24             	add    esp,0x24
c0018b88:	c3                   	ret    
c0018b89:	90                   	nop

c0018b8a <CPU::cpuidCheckECX(unsigned int)>:
c0018b8a:	83 ec 10             	sub    esp,0x10
c0018b8d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b91:	50                   	push   eax
c0018b92:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b96:	50                   	push   eax
c0018b97:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b9b:	50                   	push   eax
c0018b9c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ba0:	50                   	push   eax
c0018ba1:	6a 01                	push   0x1
c0018ba3:	e8 30 ff ff ff       	call   c0018ad8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ba8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bac:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018bb0:	0f 95 c0             	setne  al
c0018bb3:	83 c4 24             	add    esp,0x24
c0018bb6:	c3                   	ret    
c0018bb7:	90                   	nop

c0018bb8 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018bb8:	83 ec 10             	sub    esp,0x10
c0018bbb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bbf:	50                   	push   eax
c0018bc0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bc4:	50                   	push   eax
c0018bc5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bc9:	50                   	push   eax
c0018bca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bce:	50                   	push   eax
c0018bcf:	6a 07                	push   0x7
c0018bd1:	e8 02 ff ff ff       	call   c0018ad8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018bd6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bda:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018bde:	0f 95 c0             	setne  al
c0018be1:	83 c4 24             	add    esp,0x24
c0018be4:	c3                   	ret    
c0018be5:	90                   	nop

c0018be6 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018be6:	83 ec 10             	sub    esp,0x10
c0018be9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bed:	50                   	push   eax
c0018bee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bf2:	50                   	push   eax
c0018bf3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bf7:	50                   	push   eax
c0018bf8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bfc:	50                   	push   eax
c0018bfd:	6a 07                	push   0x7
c0018bff:	e8 d4 fe ff ff       	call   c0018ad8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c08:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018c0c:	0f 95 c0             	setne  al
c0018c0f:	83 c4 24             	add    esp,0x24
c0018c12:	c3                   	ret    
c0018c13:	90                   	nop

c0018c14 <CPU::CPU()>:
c0018c14:	83 ec 0c             	sub    esp,0xc
c0018c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c1b:	83 ec 08             	sub    esp,0x8
c0018c1e:	68 12 b7 02 c0       	push   0xc002b712
c0018c23:	50                   	push   eax
c0018c24:	e8 81 b7 ff ff       	call   c00143aa <Device::Device(char const*)>
c0018c29:	83 c4 10             	add    esp,0x10
c0018c2c:	ba ec b7 02 c0       	mov    edx,0xc002b7ec
c0018c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c35:	89 10                	mov    DWORD PTR [eax],edx
c0018c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c3b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018c45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c49:	05 78 01 00 00       	add    eax,0x178
c0018c4e:	83 ec 0c             	sub    esp,0xc
c0018c51:	50                   	push   eax
c0018c52:	e8 01 64 ff ff       	call   c000f058 <GDT::GDT()>
c0018c57:	83 c4 10             	add    esp,0x10
c0018c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c5e:	05 7c 09 00 00       	add    eax,0x97c
c0018c63:	83 ec 0c             	sub    esp,0xc
c0018c66:	50                   	push   eax
c0018c67:	e8 4e 66 ff ff       	call   c000f2ba <IDT::IDT()>
c0018c6c:	83 c4 10             	add    esp,0x10
c0018c6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c73:	05 7c 11 00 00       	add    eax,0x117c
c0018c78:	83 ec 0c             	sub    esp,0xc
c0018c7b:	50                   	push   eax
c0018c7c:	e8 e7 87 ff ff       	call   c0011468 <TSS::TSS()>
c0018c81:	83 c4 10             	add    esp,0x10
c0018c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c88:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c93:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018c9d:	90                   	nop
c0018c9e:	83 c4 0c             	add    esp,0xc
c0018ca1:	c3                   	ret    

c0018ca2 <CPU::displayFeatures()>:
c0018ca2:	53                   	push   ebx
c0018ca3:	83 ec 10             	sub    esp,0x10
c0018ca6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018caa:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018cb0:	68 20 b4 02 c0       	push   0xc002b420
c0018cb5:	e8 da a0 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0018cba:	59                   	pop    ecx
c0018cbb:	58                   	pop    eax
c0018cbc:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018cc2:	50                   	push   eax
c0018cc3:	68 31 b4 02 c0       	push   0xc002b431
c0018cc8:	e8 c7 a0 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0018ccd:	58                   	pop    eax
c0018cce:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018cd4:	5a                   	pop    edx
c0018cd5:	c1 e8 0e             	shr    eax,0xe
c0018cd8:	0f b6 c0             	movzx  eax,al
c0018cdb:	50                   	push   eax
c0018cdc:	68 42 b4 02 c0       	push   0xc002b442
c0018ce1:	e8 ae a0 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0018ce6:	59                   	pop    ecx
c0018ce7:	58                   	pop    eax
c0018ce8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018cee:	66 c1 e8 06          	shr    ax,0x6
c0018cf2:	0f b6 c0             	movzx  eax,al
c0018cf5:	50                   	push   eax
c0018cf6:	68 53 b4 02 c0       	push   0xc002b453
c0018cfb:	e8 94 a0 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0018d00:	c7 04 24 00 b9 02 c0 	mov    DWORD PTR [esp],0xc002b900
c0018d07:	e8 88 a0 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0018d0c:	83 c4 10             	add    esp,0x10
c0018d0f:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c0018d14:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018d1b:	74 05                	je     c0018d22 <CPU::displayFeatures()+0x80>
c0018d1d:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c0018d22:	52                   	push   edx
c0018d23:	52                   	push   edx
c0018d24:	50                   	push   eax
c0018d25:	68 64 b4 02 c0       	push   0xc002b464
c0018d2a:	e8 65 a0 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0018d2f:	83 c4 10             	add    esp,0x10
c0018d32:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c0018d37:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018d3e:	78 05                	js     c0018d45 <CPU::displayFeatures()+0xa3>
c0018d40:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c0018d45:	51                   	push   ecx
c0018d46:	51                   	push   ecx
c0018d47:	50                   	push   eax
c0018d48:	68 7b b4 02 c0       	push   0xc002b47b
c0018d4d:	e8 42 a0 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0018d52:	83 c4 10             	add    esp,0x10
c0018d55:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c0018d5a:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018d61:	75 05                	jne    c0018d68 <CPU::displayFeatures()+0xc6>
c0018d63:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c0018d68:	52                   	push   edx
c0018d69:	52                   	push   edx
c0018d6a:	50                   	push   eax
c0018d6b:	68 92 b4 02 c0       	push   0xc002b492
c0018d70:	e8 1f a0 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0018d75:	83 c4 10             	add    esp,0x10
c0018d78:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c0018d7d:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018d84:	75 05                	jne    c0018d8b <CPU::displayFeatures()+0xe9>
c0018d86:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c0018d8b:	51                   	push   ecx
c0018d8c:	51                   	push   ecx
c0018d8d:	50                   	push   eax
c0018d8e:	68 a9 b4 02 c0       	push   0xc002b4a9
c0018d93:	e8 fc 9f ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0018d98:	83 c4 10             	add    esp,0x10
c0018d9b:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c0018da0:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018da7:	75 05                	jne    c0018dae <CPU::displayFeatures()+0x10c>
c0018da9:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c0018dae:	52                   	push   edx
c0018daf:	52                   	push   edx
c0018db0:	50                   	push   eax
c0018db1:	68 c0 b4 02 c0       	push   0xc002b4c0
c0018db6:	e8 d9 9f ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0018dbb:	83 c4 10             	add    esp,0x10
c0018dbe:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c0018dc3:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018dca:	75 05                	jne    c0018dd1 <CPU::displayFeatures()+0x12f>
c0018dcc:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c0018dd1:	51                   	push   ecx
c0018dd2:	51                   	push   ecx
c0018dd3:	50                   	push   eax
c0018dd4:	68 d7 b4 02 c0       	push   0xc002b4d7
c0018dd9:	e8 b6 9f ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0018dde:	83 c4 10             	add    esp,0x10
c0018de1:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c0018de6:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018ded:	75 05                	jne    c0018df4 <CPU::displayFeatures()+0x152>
c0018def:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c0018df4:	52                   	push   edx
c0018df5:	52                   	push   edx
c0018df6:	50                   	push   eax
c0018df7:	68 ee b4 02 c0       	push   0xc002b4ee
c0018dfc:	e8 93 9f ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0018e01:	83 c4 10             	add    esp,0x10
c0018e04:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c0018e09:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018e10:	75 05                	jne    c0018e17 <CPU::displayFeatures()+0x175>
c0018e12:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c0018e17:	51                   	push   ecx
c0018e18:	51                   	push   ecx
c0018e19:	50                   	push   eax
c0018e1a:	68 05 b5 02 c0       	push   0xc002b505
c0018e1f:	e8 70 9f ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0018e24:	83 c4 10             	add    esp,0x10
c0018e27:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c0018e2c:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018e33:	75 05                	jne    c0018e3a <CPU::displayFeatures()+0x198>
c0018e35:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c0018e3a:	52                   	push   edx
c0018e3b:	52                   	push   edx
c0018e3c:	50                   	push   eax
c0018e3d:	68 1c b5 02 c0       	push   0xc002b51c
c0018e42:	e8 4d 9f ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0018e47:	83 c4 10             	add    esp,0x10
c0018e4a:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c0018e4f:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018e56:	75 05                	jne    c0018e5d <CPU::displayFeatures()+0x1bb>
c0018e58:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c0018e5d:	51                   	push   ecx
c0018e5e:	51                   	push   ecx
c0018e5f:	50                   	push   eax
c0018e60:	68 33 b5 02 c0       	push   0xc002b533
c0018e65:	e8 2a 9f ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0018e6a:	83 c4 10             	add    esp,0x10
c0018e6d:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c0018e72:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018e79:	75 05                	jne    c0018e80 <CPU::displayFeatures()+0x1de>
c0018e7b:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c0018e80:	52                   	push   edx
c0018e81:	52                   	push   edx
c0018e82:	50                   	push   eax
c0018e83:	68 4a b5 02 c0       	push   0xc002b54a
c0018e88:	e8 07 9f ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0018e8d:	83 c4 10             	add    esp,0x10
c0018e90:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c0018e95:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018e9c:	75 05                	jne    c0018ea3 <CPU::displayFeatures()+0x201>
c0018e9e:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c0018ea3:	51                   	push   ecx
c0018ea4:	51                   	push   ecx
c0018ea5:	50                   	push   eax
c0018ea6:	68 61 b5 02 c0       	push   0xc002b561
c0018eab:	e8 e4 9e ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0018eb0:	83 c4 10             	add    esp,0x10
c0018eb3:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c0018eb8:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018ebf:	75 05                	jne    c0018ec6 <CPU::displayFeatures()+0x224>
c0018ec1:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c0018ec6:	52                   	push   edx
c0018ec7:	52                   	push   edx
c0018ec8:	50                   	push   eax
c0018ec9:	68 78 b5 02 c0       	push   0xc002b578
c0018ece:	e8 c1 9e ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0018ed3:	83 c4 10             	add    esp,0x10
c0018ed6:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c0018edb:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018ee2:	78 05                	js     c0018ee9 <CPU::displayFeatures()+0x247>
c0018ee4:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c0018ee9:	51                   	push   ecx
c0018eea:	51                   	push   ecx
c0018eeb:	50                   	push   eax
c0018eec:	68 8f b5 02 c0       	push   0xc002b58f
c0018ef1:	e8 9e 9e ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0018ef6:	83 c4 10             	add    esp,0x10
c0018ef9:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c0018efe:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018f05:	75 05                	jne    c0018f0c <CPU::displayFeatures()+0x26a>
c0018f07:	b8 96 9e 02 c0       	mov    eax,0xc0029e96
c0018f0c:	52                   	push   edx
c0018f0d:	52                   	push   edx
c0018f0e:	50                   	push   eax
c0018f0f:	68 a6 b5 02 c0       	push   0xc002b5a6
c0018f14:	e8 7b 9e ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0018f19:	83 c4 18             	add    esp,0x18
c0018f1c:	5b                   	pop    ebx
c0018f1d:	c3                   	ret    

c0018f1e <CPU::detectFeatures()>:
c0018f1e:	55                   	push   ebp
c0018f1f:	57                   	push   edi
c0018f20:	56                   	push   esi
c0018f21:	53                   	push   ebx
c0018f22:	83 ec 50             	sub    esp,0x50
c0018f25:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018f29:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018f33:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018f3a:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018f40:	6a 0d                	push   0xd
c0018f42:	6a 00                	push   0x0
c0018f44:	57                   	push   edi
c0018f45:	e8 2e 78 fe ff       	call   c0000778 <memset>
c0018f4a:	83 c4 10             	add    esp,0x10
c0018f4d:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0018f52:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018f59:	0f 84 20 09 00 00    	je     c001987f <CPU::detectFeatures()+0x961>
c0018f5f:	83 ec 0c             	sub    esp,0xc
c0018f62:	6a 10                	push   0x10
c0018f64:	e8 f3 fb ff ff       	call   c0018b5c <CPU::cpuidCheckEDX(unsigned int)>
c0018f69:	83 e0 01             	and    eax,0x1
c0018f6c:	8d 14 00             	lea    edx,[eax+eax*1]
c0018f6f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f75:	83 e0 fd             	and    eax,0xfffffffd
c0018f78:	09 d0                	or     eax,edx
c0018f7a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f80:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018f87:	e8 d0 fb ff ff       	call   c0018b5c <CPU::cpuidCheckEDX(unsigned int)>
c0018f8c:	83 e0 01             	and    eax,0x1
c0018f8f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018f96:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f9c:	83 e0 fb             	and    eax,0xfffffffb
c0018f9f:	09 d0                	or     eax,edx
c0018fa1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018fa7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018fae:	e8 a9 fb ff ff       	call   c0018b5c <CPU::cpuidCheckEDX(unsigned int)>
c0018fb3:	83 e0 01             	and    eax,0x1
c0018fb6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018fbd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018fc3:	83 e0 f7             	and    eax,0xfffffff7
c0018fc6:	09 d0                	or     eax,edx
c0018fc8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018fce:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018fd5:	e8 82 fb ff ff       	call   c0018b5c <CPU::cpuidCheckEDX(unsigned int)>
c0018fda:	83 e0 01             	and    eax,0x1
c0018fdd:	c1 e0 04             	shl    eax,0x4
c0018fe0:	88 c2                	mov    dl,al
c0018fe2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018fe8:	83 e0 ef             	and    eax,0xffffffef
c0018feb:	09 d0                	or     eax,edx
c0018fed:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ff3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018ffa:	e8 5d fb ff ff       	call   c0018b5c <CPU::cpuidCheckEDX(unsigned int)>
c0018fff:	83 e0 01             	and    eax,0x1
c0019002:	c1 e0 05             	shl    eax,0x5
c0019005:	88 c2                	mov    dl,al
c0019007:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001900d:	83 e0 df             	and    eax,0xffffffdf
c0019010:	09 d0                	or     eax,edx
c0019012:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019018:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001901f:	e8 38 fb ff ff       	call   c0018b5c <CPU::cpuidCheckEDX(unsigned int)>
c0019024:	83 e0 01             	and    eax,0x1
c0019027:	8d 14 00             	lea    edx,[eax+eax*1]
c001902a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019030:	83 e0 fd             	and    eax,0xfffffffd
c0019033:	09 d0                	or     eax,edx
c0019035:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001903b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019042:	e8 15 fb ff ff       	call   c0018b5c <CPU::cpuidCheckEDX(unsigned int)>
c0019047:	83 e0 01             	and    eax,0x1
c001904a:	c1 e0 06             	shl    eax,0x6
c001904d:	88 c2                	mov    dl,al
c001904f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019055:	83 e0 bf             	and    eax,0xffffffbf
c0019058:	09 d0                	or     eax,edx
c001905a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019060:	58                   	pop    eax
c0019061:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019065:	56                   	push   esi
c0019066:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001906a:	55                   	push   ebp
c001906b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001906f:	50                   	push   eax
c0019070:	8d 54 24 28          	lea    edx,[esp+0x28]
c0019074:	52                   	push   edx
c0019075:	6a 00                	push   0x0
c0019077:	e8 5c fa ff ff       	call   c0018ad8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001907c:	83 c4 1c             	add    esp,0x1c
c001907f:	6a 04                	push   0x4
c0019081:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019085:	50                   	push   eax
c0019086:	57                   	push   edi
c0019087:	e8 b8 76 fe ff       	call   c0000744 <memcpy>
c001908c:	83 c4 0c             	add    esp,0xc
c001908f:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0019095:	6a 04                	push   0x4
c0019097:	56                   	push   esi
c0019098:	50                   	push   eax
c0019099:	e8 a6 76 fe ff       	call   c0000744 <memcpy>
c001909e:	83 c4 0c             	add    esp,0xc
c00190a1:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00190a7:	6a 04                	push   0x4
c00190a9:	55                   	push   ebp
c00190aa:	50                   	push   eax
c00190ab:	e8 94 76 fe ff       	call   c0000744 <memcpy>
c00190b0:	58                   	pop    eax
c00190b1:	5a                   	pop    edx
c00190b2:	68 bd b5 02 c0       	push   0xc002b5bd
c00190b7:	57                   	push   edi
c00190b8:	e8 03 78 fe ff       	call   c00008c0 <strcmp>
c00190bd:	83 c4 10             	add    esp,0x10
c00190c0:	85 c0                	test   eax,eax
c00190c2:	75 0f                	jne    c00190d3 <CPU::detectFeatures()+0x1b5>
c00190c4:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00190ce:	e9 22 02 00 00       	jmp    c00192f5 <CPU::detectFeatures()+0x3d7>
c00190d3:	50                   	push   eax
c00190d4:	50                   	push   eax
c00190d5:	68 ca b5 02 c0       	push   0xc002b5ca
c00190da:	57                   	push   edi
c00190db:	e8 e0 77 fe ff       	call   c00008c0 <strcmp>
c00190e0:	83 c4 10             	add    esp,0x10
c00190e3:	85 c0                	test   eax,eax
c00190e5:	74 dd                	je     c00190c4 <CPU::detectFeatures()+0x1a6>
c00190e7:	51                   	push   ecx
c00190e8:	51                   	push   ecx
c00190e9:	68 d7 b5 02 c0       	push   0xc002b5d7
c00190ee:	57                   	push   edi
c00190ef:	e8 cc 77 fe ff       	call   c00008c0 <strcmp>
c00190f4:	83 c4 10             	add    esp,0x10
c00190f7:	85 c0                	test   eax,eax
c00190f9:	74 2a                	je     c0019125 <CPU::detectFeatures()+0x207>
c00190fb:	52                   	push   edx
c00190fc:	52                   	push   edx
c00190fd:	68 e4 b5 02 c0       	push   0xc002b5e4
c0019102:	57                   	push   edi
c0019103:	e8 b8 77 fe ff       	call   c00008c0 <strcmp>
c0019108:	83 c4 10             	add    esp,0x10
c001910b:	85 c0                	test   eax,eax
c001910d:	74 16                	je     c0019125 <CPU::detectFeatures()+0x207>
c001910f:	50                   	push   eax
c0019110:	50                   	push   eax
c0019111:	68 f1 b5 02 c0       	push   0xc002b5f1
c0019116:	57                   	push   edi
c0019117:	e8 a4 77 fe ff       	call   c00008c0 <strcmp>
c001911c:	83 c4 10             	add    esp,0x10
c001911f:	85 c0                	test   eax,eax
c0019121:	74 48                	je     c001916b <CPU::detectFeatures()+0x24d>
c0019123:	eb 0f                	jmp    c0019134 <CPU::detectFeatures()+0x216>
c0019125:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001912f:	e9 c1 01 00 00       	jmp    c00192f5 <CPU::detectFeatures()+0x3d7>
c0019134:	50                   	push   eax
c0019135:	50                   	push   eax
c0019136:	68 fe b5 02 c0       	push   0xc002b5fe
c001913b:	57                   	push   edi
c001913c:	e8 7f 77 fe ff       	call   c00008c0 <strcmp>
c0019141:	83 c4 10             	add    esp,0x10
c0019144:	85 c0                	test   eax,eax
c0019146:	74 23                	je     c001916b <CPU::detectFeatures()+0x24d>
c0019148:	50                   	push   eax
c0019149:	50                   	push   eax
c001914a:	68 0b b6 02 c0       	push   0xc002b60b
c001914f:	57                   	push   edi
c0019150:	e8 6b 77 fe ff       	call   c00008c0 <strcmp>
c0019155:	83 c4 10             	add    esp,0x10
c0019158:	85 c0                	test   eax,eax
c001915a:	75 1e                	jne    c001917a <CPU::detectFeatures()+0x25c>
c001915c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019166:	e9 8a 01 00 00       	jmp    c00192f5 <CPU::detectFeatures()+0x3d7>
c001916b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0019175:	e9 7b 01 00 00       	jmp    c00192f5 <CPU::detectFeatures()+0x3d7>
c001917a:	50                   	push   eax
c001917b:	50                   	push   eax
c001917c:	68 18 b6 02 c0       	push   0xc002b618
c0019181:	57                   	push   edi
c0019182:	e8 39 77 fe ff       	call   c00008c0 <strcmp>
c0019187:	83 c4 10             	add    esp,0x10
c001918a:	85 c0                	test   eax,eax
c001918c:	75 0f                	jne    c001919d <CPU::detectFeatures()+0x27f>
c001918e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019198:	e9 58 01 00 00       	jmp    c00192f5 <CPU::detectFeatures()+0x3d7>
c001919d:	50                   	push   eax
c001919e:	50                   	push   eax
c001919f:	68 d7 b5 02 c0       	push   0xc002b5d7
c00191a4:	57                   	push   edi
c00191a5:	e8 16 77 fe ff       	call   c00008c0 <strcmp>
c00191aa:	83 c4 10             	add    esp,0x10
c00191ad:	85 c0                	test   eax,eax
c00191af:	75 0f                	jne    c00191c0 <CPU::detectFeatures()+0x2a2>
c00191b1:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00191bb:	e9 35 01 00 00       	jmp    c00192f5 <CPU::detectFeatures()+0x3d7>
c00191c0:	50                   	push   eax
c00191c1:	50                   	push   eax
c00191c2:	68 25 b6 02 c0       	push   0xc002b625
c00191c7:	57                   	push   edi
c00191c8:	e8 f3 76 fe ff       	call   c00008c0 <strcmp>
c00191cd:	83 c4 10             	add    esp,0x10
c00191d0:	85 c0                	test   eax,eax
c00191d2:	75 0f                	jne    c00191e3 <CPU::detectFeatures()+0x2c5>
c00191d4:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00191de:	e9 12 01 00 00       	jmp    c00192f5 <CPU::detectFeatures()+0x3d7>
c00191e3:	51                   	push   ecx
c00191e4:	51                   	push   ecx
c00191e5:	68 32 b6 02 c0       	push   0xc002b632
c00191ea:	57                   	push   edi
c00191eb:	e8 d0 76 fe ff       	call   c00008c0 <strcmp>
c00191f0:	83 c4 10             	add    esp,0x10
c00191f3:	85 c0                	test   eax,eax
c00191f5:	75 0f                	jne    c0019206 <CPU::detectFeatures()+0x2e8>
c00191f7:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019201:	e9 ef 00 00 00       	jmp    c00192f5 <CPU::detectFeatures()+0x3d7>
c0019206:	52                   	push   edx
c0019207:	52                   	push   edx
c0019208:	68 3f b6 02 c0       	push   0xc002b63f
c001920d:	57                   	push   edi
c001920e:	e8 ad 76 fe ff       	call   c00008c0 <strcmp>
c0019213:	83 c4 10             	add    esp,0x10
c0019216:	85 c0                	test   eax,eax
c0019218:	75 0f                	jne    c0019229 <CPU::detectFeatures()+0x30b>
c001921a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019224:	e9 cc 00 00 00       	jmp    c00192f5 <CPU::detectFeatures()+0x3d7>
c0019229:	50                   	push   eax
c001922a:	50                   	push   eax
c001922b:	68 4c b6 02 c0       	push   0xc002b64c
c0019230:	57                   	push   edi
c0019231:	e8 8a 76 fe ff       	call   c00008c0 <strcmp>
c0019236:	83 c4 10             	add    esp,0x10
c0019239:	85 c0                	test   eax,eax
c001923b:	75 0f                	jne    c001924c <CPU::detectFeatures()+0x32e>
c001923d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019247:	e9 a9 00 00 00       	jmp    c00192f5 <CPU::detectFeatures()+0x3d7>
c001924c:	50                   	push   eax
c001924d:	50                   	push   eax
c001924e:	68 59 b6 02 c0       	push   0xc002b659
c0019253:	57                   	push   edi
c0019254:	e8 67 76 fe ff       	call   c00008c0 <strcmp>
c0019259:	83 c4 10             	add    esp,0x10
c001925c:	85 c0                	test   eax,eax
c001925e:	75 0f                	jne    c001926f <CPU::detectFeatures()+0x351>
c0019260:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001926a:	e9 86 00 00 00       	jmp    c00192f5 <CPU::detectFeatures()+0x3d7>
c001926f:	50                   	push   eax
c0019270:	50                   	push   eax
c0019271:	68 66 b6 02 c0       	push   0xc002b666
c0019276:	57                   	push   edi
c0019277:	e8 44 76 fe ff       	call   c00008c0 <strcmp>
c001927c:	83 c4 10             	add    esp,0x10
c001927f:	85 c0                	test   eax,eax
c0019281:	75 0c                	jne    c001928f <CPU::detectFeatures()+0x371>
c0019283:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001928d:	eb 66                	jmp    c00192f5 <CPU::detectFeatures()+0x3d7>
c001928f:	50                   	push   eax
c0019290:	50                   	push   eax
c0019291:	68 73 b6 02 c0       	push   0xc002b673
c0019296:	57                   	push   edi
c0019297:	e8 24 76 fe ff       	call   c00008c0 <strcmp>
c001929c:	83 c4 10             	add    esp,0x10
c001929f:	85 c0                	test   eax,eax
c00192a1:	75 0c                	jne    c00192af <CPU::detectFeatures()+0x391>
c00192a3:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00192ad:	eb 46                	jmp    c00192f5 <CPU::detectFeatures()+0x3d7>
c00192af:	50                   	push   eax
c00192b0:	50                   	push   eax
c00192b1:	68 80 b6 02 c0       	push   0xc002b680
c00192b6:	57                   	push   edi
c00192b7:	e8 04 76 fe ff       	call   c00008c0 <strcmp>
c00192bc:	83 c4 10             	add    esp,0x10
c00192bf:	85 c0                	test   eax,eax
c00192c1:	74 e0                	je     c00192a3 <CPU::detectFeatures()+0x385>
c00192c3:	50                   	push   eax
c00192c4:	50                   	push   eax
c00192c5:	68 8d b6 02 c0       	push   0xc002b68d
c00192ca:	57                   	push   edi
c00192cb:	e8 f0 75 fe ff       	call   c00008c0 <strcmp>
c00192d0:	83 c4 10             	add    esp,0x10
c00192d3:	85 c0                	test   eax,eax
c00192d5:	74 cc                	je     c00192a3 <CPU::detectFeatures()+0x385>
c00192d7:	51                   	push   ecx
c00192d8:	51                   	push   ecx
c00192d9:	68 9a b6 02 c0       	push   0xc002b69a
c00192de:	57                   	push   edi
c00192df:	e8 dc 75 fe ff       	call   c00008c0 <strcmp>
c00192e4:	83 c4 10             	add    esp,0x10
c00192e7:	85 c0                	test   eax,eax
c00192e9:	74 b8                	je     c00192a3 <CPU::detectFeatures()+0x385>
c00192eb:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00192f5:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00192fa:	0f 86 be 00 00 00    	jbe    c00193be <CPU::detectFeatures()+0x4a0>
c0019300:	83 ec 0c             	sub    esp,0xc
c0019303:	68 80 00 00 00       	push   0x80
c0019308:	e8 ab f8 ff ff       	call   c0018bb8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001930d:	83 e0 01             	and    eax,0x1
c0019310:	c1 e0 06             	shl    eax,0x6
c0019313:	88 c2                	mov    dl,al
c0019315:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001931b:	83 e0 bf             	and    eax,0xffffffbf
c001931e:	09 d0                	or     eax,edx
c0019320:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019326:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001932d:	e8 86 f8 ff ff       	call   c0018bb8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019332:	83 e0 01             	and    eax,0x1
c0019335:	c1 e0 04             	shl    eax,0x4
c0019338:	88 c2                	mov    dl,al
c001933a:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019340:	83 e0 ef             	and    eax,0xffffffef
c0019343:	09 d0                	or     eax,edx
c0019345:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001934b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019352:	e8 61 f8 ff ff       	call   c0018bb8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019357:	c1 e0 07             	shl    eax,0x7
c001935a:	88 c2                	mov    dl,al
c001935c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019362:	83 e0 7f             	and    eax,0x7f
c0019365:	09 d0                	or     eax,edx
c0019367:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001936d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019374:	e8 6d f8 ff ff       	call   c0018be6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019379:	83 e0 01             	and    eax,0x1
c001937c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019383:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019389:	83 e0 f7             	and    eax,0xfffffff7
c001938c:	09 d0                	or     eax,edx
c001938e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019394:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001939b:	e8 46 f8 ff ff       	call   c0018be6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00193a0:	83 c4 10             	add    esp,0x10
c00193a3:	83 e0 01             	and    eax,0x1
c00193a6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00193ad:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00193b3:	83 e0 fb             	and    eax,0xfffffffb
c00193b6:	09 d0                	or     eax,edx
c00193b8:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00193be:	83 ec 0c             	sub    esp,0xc
c00193c1:	56                   	push   esi
c00193c2:	55                   	push   ebp
c00193c3:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00193c7:	57                   	push   edi
c00193c8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00193cc:	50                   	push   eax
c00193cd:	6a 01                	push   0x1
c00193cf:	e8 04 f7 ff ff       	call   c0018ad8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00193d4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00193d8:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00193de:	88 ca                	mov    dl,cl
c00193e0:	83 e0 f0             	and    eax,0xfffffff0
c00193e3:	83 e2 0f             	and    edx,0xf
c00193e6:	09 d0                	or     eax,edx
c00193e8:	88 ca                	mov    dl,cl
c00193ea:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00193f0:	c0 ea 04             	shr    dl,0x4
c00193f3:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00193f7:	0f b6 c2             	movzx  eax,dl
c00193fa:	83 c4 20             	add    esp,0x20
c00193fd:	c1 e0 06             	shl    eax,0x6
c0019400:	89 c5                	mov    ebp,eax
c0019402:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019408:	66 25 3f c0          	and    ax,0xc03f
c001940c:	09 e8                	or     eax,ebp
c001940e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019415:	89 c8                	mov    eax,ecx
c0019417:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001941d:	c1 e8 08             	shr    eax,0x8
c0019420:	83 e2 3f             	and    edx,0x3f
c0019423:	83 e0 0f             	and    eax,0xf
c0019426:	89 c5                	mov    ebp,eax
c0019428:	c1 e5 06             	shl    ebp,0x6
c001942b:	09 d5                	or     ebp,edx
c001942d:	89 ea                	mov    edx,ebp
c001942f:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019435:	88 c2                	mov    dl,al
c0019437:	c0 ea 02             	shr    dl,0x2
c001943a:	89 d5                	mov    ebp,edx
c001943c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019442:	83 e2 c0             	and    edx,0xffffffc0
c0019445:	09 d5                	or     ebp,edx
c0019447:	89 ea                	mov    edx,ebp
c0019449:	89 cd                	mov    ebp,ecx
c001944b:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019451:	c1 ed 0c             	shr    ebp,0xc
c0019454:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001945a:	83 e5 03             	and    ebp,0x3
c001945d:	83 e2 cf             	and    edx,0xffffffcf
c0019460:	c1 e5 04             	shl    ebp,0x4
c0019463:	09 d5                	or     ebp,edx
c0019465:	3c 06                	cmp    al,0x6
c0019467:	89 ea                	mov    edx,ebp
c0019469:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001946f:	74 04                	je     c0019475 <CPU::detectFeatures()+0x557>
c0019471:	3c 0f                	cmp    al,0xf
c0019473:	75 5c                	jne    c00194d1 <CPU::detectFeatures()+0x5b3>
c0019475:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019479:	89 cd                	mov    ebp,ecx
c001947b:	c1 ed 10             	shr    ebp,0x10
c001947e:	c1 e5 04             	shl    ebp,0x4
c0019481:	09 ea                	or     edx,ebp
c0019483:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019489:	0f b6 d2             	movzx  edx,dl
c001948c:	66 81 e5 3f c0       	and    bp,0xc03f
c0019491:	c1 e2 06             	shl    edx,0x6
c0019494:	09 ea                	or     edx,ebp
c0019496:	3c 0f                	cmp    al,0xf
c0019498:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001949f:	75 30                	jne    c00194d1 <CPU::detectFeatures()+0x5b3>
c00194a1:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00194a7:	c1 e9 14             	shr    ecx,0x14
c00194aa:	83 e0 3f             	and    eax,0x3f
c00194ad:	83 c1 0f             	add    ecx,0xf
c00194b0:	88 ca                	mov    dl,cl
c00194b2:	c0 e9 02             	shr    cl,0x2
c00194b5:	c1 e2 06             	shl    edx,0x6
c00194b8:	09 d0                	or     eax,edx
c00194ba:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00194c0:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00194c6:	83 e0 c0             	and    eax,0xffffffc0
c00194c9:	09 c1                	or     ecx,eax
c00194cb:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00194d1:	83 ec 0c             	sub    esp,0xc
c00194d4:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00194db:	56                   	push   esi
c00194dc:	8d 44 24 28          	lea    eax,[esp+0x28]
c00194e0:	50                   	push   eax
c00194e1:	57                   	push   edi
c00194e2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00194e6:	55                   	push   ebp
c00194e7:	68 00 00 00 80       	push   0x80000000
c00194ec:	e8 e7 f5 ff ff       	call   c0018ad8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00194f1:	83 c4 20             	add    esp,0x20
c00194f4:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00194fc:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019500:	76 1e                	jbe    c0019520 <CPU::detectFeatures()+0x602>
c0019502:	83 ec 0c             	sub    esp,0xc
c0019505:	56                   	push   esi
c0019506:	50                   	push   eax
c0019507:	57                   	push   edi
c0019508:	55                   	push   ebp
c0019509:	68 01 00 00 80       	push   0x80000001
c001950e:	e8 c5 f5 ff ff       	call   c0018ad8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019513:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001951d:	83 c4 20             	add    esp,0x20
c0019520:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019526:	83 f8 01             	cmp    eax,0x1
c0019529:	75 6f                	jne    c001959a <CPU::detectFeatures()+0x67c>
c001952b:	51                   	push   ecx
c001952c:	51                   	push   ecx
c001952d:	68 a6 b6 02 c0       	push   0xc002b6a6
c0019532:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019536:	56                   	push   esi
c0019537:	e8 f8 72 fe ff       	call   c0000834 <strcpy>
c001953c:	5f                   	pop    edi
c001953d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019543:	5d                   	pop    ebp
c0019544:	66 c1 e8 06          	shr    ax,0x6
c0019548:	0f b6 c0             	movzx  eax,al
c001954b:	50                   	push   eax
c001954c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019552:	c1 e8 0e             	shr    eax,0xe
c0019555:	0f b6 c0             	movzx  eax,al
c0019558:	50                   	push   eax
c0019559:	e8 24 f2 ff ff       	call   c0018782 <CPU::lookupIntelName(unsigned char, unsigned char)>
c001955e:	5a                   	pop    edx
c001955f:	59                   	pop    ecx
c0019560:	50                   	push   eax
c0019561:	56                   	push   esi
c0019562:	e8 0d 74 fe ff       	call   c0000974 <strcat>
c0019567:	5f                   	pop    edi
c0019568:	5d                   	pop    ebp
c0019569:	56                   	push   esi
c001956a:	53                   	push   ebx
c001956b:	e8 2c ae ff ff       	call   c001439c <Device::setName(char const*)>
c0019570:	58                   	pop    eax
c0019571:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019577:	5a                   	pop    edx
c0019578:	68 ad b6 02 c0       	push   0xc002b6ad
c001957d:	50                   	push   eax
c001957e:	e8 3d 73 fe ff       	call   c00008c0 <strcmp>
c0019583:	83 c4 10             	add    esp,0x10
c0019586:	85 c0                	test   eax,eax
c0019588:	0f 85 71 03 00 00    	jne    c00198ff <CPU::detectFeatures()+0x9e1>
c001958e:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019595:	e9 65 03 00 00       	jmp    c00198ff <CPU::detectFeatures()+0x9e1>
c001959a:	83 f8 02             	cmp    eax,0x2
c001959d:	0f 85 b5 00 00 00    	jne    c0019658 <CPU::detectFeatures()+0x73a>
c00195a3:	57                   	push   edi
c00195a4:	57                   	push   edi
c00195a5:	68 bf b6 02 c0       	push   0xc002b6bf
c00195aa:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00195ae:	56                   	push   esi
c00195af:	e8 80 72 fe ff       	call   c0000834 <strcpy>
c00195b4:	5d                   	pop    ebp
c00195b5:	58                   	pop    eax
c00195b6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195bc:	66 c1 e8 06          	shr    ax,0x6
c00195c0:	0f b6 c0             	movzx  eax,al
c00195c3:	50                   	push   eax
c00195c4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195ca:	c1 e8 0e             	shr    eax,0xe
c00195cd:	0f b6 c0             	movzx  eax,al
c00195d0:	50                   	push   eax
c00195d1:	e8 18 f0 ff ff       	call   c00185ee <CPU::lookupAMDName(unsigned char, unsigned char)>
c00195d6:	5a                   	pop    edx
c00195d7:	59                   	pop    ecx
c00195d8:	50                   	push   eax
c00195d9:	56                   	push   esi
c00195da:	e8 95 73 fe ff       	call   c0000974 <strcat>
c00195df:	5f                   	pop    edi
c00195e0:	5d                   	pop    ebp
c00195e1:	56                   	push   esi
c00195e2:	53                   	push   ebx
c00195e3:	e8 b4 ad ff ff       	call   c001439c <Device::setName(char const*)>
c00195e8:	58                   	pop    eax
c00195e9:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00195ef:	5a                   	pop    edx
c00195f0:	68 c4 b6 02 c0       	push   0xc002b6c4
c00195f5:	50                   	push   eax
c00195f6:	e8 c5 72 fe ff       	call   c00008c0 <strcmp>
c00195fb:	83 c4 10             	add    esp,0x10
c00195fe:	85 c0                	test   eax,eax
c0019600:	75 20                	jne    c0019622 <CPU::detectFeatures()+0x704>
c0019602:	8b 15 28 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e228
c0019608:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001960e:	a8 01                	test   al,0x1
c0019610:	74 10                	je     c0019622 <CPU::detectFeatures()+0x704>
c0019612:	83 e0 fe             	and    eax,0xfffffffe
c0019615:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001961b:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019622:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019628:	c1 e8 0e             	shr    eax,0xe
c001962b:	3c 05                	cmp    al,0x5
c001962d:	0f 85 cc 02 00 00    	jne    c00198ff <CPU::detectFeatures()+0x9e1>
c0019633:	56                   	push   esi
c0019634:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001963a:	83 e0 0f             	and    eax,0xf
c001963d:	50                   	push   eax
c001963e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019644:	66 c1 e8 06          	shr    ax,0x6
c0019648:	0f b6 c0             	movzx  eax,al
c001964b:	50                   	push   eax
c001964c:	6a 05                	push   0x5
c001964e:	e8 11 f4 ff ff       	call   c0018a64 <CPU::AMD_K6_writeback(int, int, int)>
c0019653:	e9 1f 02 00 00       	jmp    c0019877 <CPU::detectFeatures()+0x959>
c0019658:	8d 50 fd             	lea    edx,[eax-0x3]
c001965b:	83 fa 01             	cmp    edx,0x1
c001965e:	76 09                	jbe    c0019669 <CPU::detectFeatures()+0x74b>
c0019660:	83 f8 06             	cmp    eax,0x6
c0019663:	0f 85 91 01 00 00    	jne    c00197fa <CPU::detectFeatures()+0x8dc>
c0019669:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001966f:	c1 ea 0e             	shr    edx,0xe
c0019672:	80 fa 05             	cmp    dl,0x5
c0019675:	75 7b                	jne    c00196f2 <CPU::detectFeatures()+0x7d4>
c0019677:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001967d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019682:	66 81 fa 00 01       	cmp    dx,0x100
c0019687:	75 0c                	jne    c0019695 <CPU::detectFeatures()+0x777>
c0019689:	51                   	push   ecx
c001968a:	51                   	push   ecx
c001968b:	68 cb b6 02 c0       	push   0xc002b6cb
c0019690:	e9 dc 01 00 00       	jmp    c0019871 <CPU::detectFeatures()+0x953>
c0019695:	66 81 fa 00 02       	cmp    dx,0x200
c001969a:	75 0c                	jne    c00196a8 <CPU::detectFeatures()+0x78a>
c001969c:	52                   	push   edx
c001969d:	52                   	push   edx
c001969e:	68 de b6 02 c0       	push   0xc002b6de
c00196a3:	e9 c9 01 00 00       	jmp    c0019871 <CPU::detectFeatures()+0x953>
c00196a8:	66 81 fa 40 02       	cmp    dx,0x240
c00196ad:	75 0c                	jne    c00196bb <CPU::detectFeatures()+0x79d>
c00196af:	50                   	push   eax
c00196b0:	50                   	push   eax
c00196b1:	68 f0 b6 02 c0       	push   0xc002b6f0
c00196b6:	e9 b6 01 00 00       	jmp    c0019871 <CPU::detectFeatures()+0x953>
c00196bb:	83 f8 06             	cmp    eax,0x6
c00196be:	75 0c                	jne    c00196cc <CPU::detectFeatures()+0x7ae>
c00196c0:	50                   	push   eax
c00196c1:	50                   	push   eax
c00196c2:	68 02 b7 02 c0       	push   0xc002b702
c00196c7:	e9 a5 01 00 00       	jmp    c0019871 <CPU::detectFeatures()+0x953>
c00196cc:	83 f8 04             	cmp    eax,0x4
c00196cf:	75 0c                	jne    c00196dd <CPU::detectFeatures()+0x7bf>
c00196d1:	50                   	push   eax
c00196d2:	50                   	push   eax
c00196d3:	68 0e b7 02 c0       	push   0xc002b70e
c00196d8:	e9 94 01 00 00       	jmp    c0019871 <CPU::detectFeatures()+0x953>
c00196dd:	83 f8 03             	cmp    eax,0x3
c00196e0:	0f 85 19 02 00 00    	jne    c00198ff <CPU::detectFeatures()+0x9e1>
c00196e6:	50                   	push   eax
c00196e7:	50                   	push   eax
c00196e8:	68 16 b7 02 c0       	push   0xc002b716
c00196ed:	e9 7f 01 00 00       	jmp    c0019871 <CPU::detectFeatures()+0x953>
c00196f2:	80 fa 06             	cmp    dl,0x6
c00196f5:	0f 85 db 00 00 00    	jne    c00197d6 <CPU::detectFeatures()+0x8b8>
c00196fb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019701:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019706:	66 81 fa 80 01       	cmp    dx,0x180
c001970b:	75 0c                	jne    c0019719 <CPU::detectFeatures()+0x7fb>
c001970d:	50                   	push   eax
c001970e:	50                   	push   eax
c001970f:	68 21 b7 02 c0       	push   0xc002b721
c0019714:	e9 58 01 00 00       	jmp    c0019871 <CPU::detectFeatures()+0x953>
c0019719:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001971f:	66 f7 c1 80 ff       	test   cx,0xff80
c0019724:	75 0c                	jne    c0019732 <CPU::detectFeatures()+0x814>
c0019726:	50                   	push   eax
c0019727:	50                   	push   eax
c0019728:	68 31 b7 02 c0       	push   0xc002b731
c001972d:	e9 3f 01 00 00       	jmp    c0019871 <CPU::detectFeatures()+0x953>
c0019732:	66 81 fa 40 02       	cmp    dx,0x240
c0019737:	75 0c                	jne    c0019745 <CPU::detectFeatures()+0x827>
c0019739:	55                   	push   ebp
c001973a:	55                   	push   ebp
c001973b:	68 38 b7 02 c0       	push   0xc002b738
c0019740:	e9 2c 01 00 00       	jmp    c0019871 <CPU::detectFeatures()+0x953>
c0019745:	66 81 fa 80 02       	cmp    dx,0x280
c001974a:	75 0c                	jne    c0019758 <CPU::detectFeatures()+0x83a>
c001974c:	57                   	push   edi
c001974d:	57                   	push   edi
c001974e:	68 41 b7 02 c0       	push   0xc002b741
c0019753:	e9 19 01 00 00       	jmp    c0019871 <CPU::detectFeatures()+0x953>
c0019758:	66 81 fa 40 03       	cmp    dx,0x340
c001975d:	74 ed                	je     c001974c <CPU::detectFeatures()+0x82e>
c001975f:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019764:	75 0c                	jne    c0019772 <CPU::detectFeatures()+0x854>
c0019766:	56                   	push   esi
c0019767:	56                   	push   esi
c0019768:	68 48 b7 02 c0       	push   0xc002b748
c001976d:	e9 ff 00 00 00       	jmp    c0019871 <CPU::detectFeatures()+0x953>
c0019772:	83 f8 06             	cmp    eax,0x6
c0019775:	0f 84 45 ff ff ff    	je     c00196c0 <CPU::detectFeatures()+0x7a2>
c001977b:	83 f8 04             	cmp    eax,0x4
c001977e:	0f 84 4d ff ff ff    	je     c00196d1 <CPU::detectFeatures()+0x7b3>
c0019784:	83 f8 03             	cmp    eax,0x3
c0019787:	0f 85 72 01 00 00    	jne    c00198ff <CPU::detectFeatures()+0x9e1>
c001978d:	51                   	push   ecx
c001978e:	51                   	push   ecx
c001978f:	68 51 b7 02 c0       	push   0xc002b751
c0019794:	53                   	push   ebx
c0019795:	e8 02 ac ff ff       	call   c001439c <Device::setName(char const*)>
c001979a:	b1 c1                	mov    cl,0xc1
c001979c:	88 c8                	mov    al,cl
c001979e:	e6 22                	out    0x22,al
c00197a0:	e4 23                	in     al,0x23
c00197a2:	88 c2                	mov    dl,al
c00197a4:	88 c8                	mov    al,cl
c00197a6:	e6 22                	out    0x22,al
c00197a8:	88 d0                	mov    al,dl
c00197aa:	83 c8 10             	or     eax,0x10
c00197ad:	e6 23                	out    0x23,al
c00197af:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00197b6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00197b9:	89 d0                	mov    eax,edx
c00197bb:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00197c1:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00197c5:	40                   	inc    eax
c00197c6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00197cc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00197d1:	e9 a1 00 00 00       	jmp    c0019877 <CPU::detectFeatures()+0x959>
c00197d6:	83 f8 06             	cmp    eax,0x6
c00197d9:	0f 84 e1 fe ff ff    	je     c00196c0 <CPU::detectFeatures()+0x7a2>
c00197df:	83 f8 04             	cmp    eax,0x4
c00197e2:	0f 84 e9 fe ff ff    	je     c00196d1 <CPU::detectFeatures()+0x7b3>
c00197e8:	83 f8 03             	cmp    eax,0x3
c00197eb:	0f 85 0e 01 00 00    	jne    c00198ff <CPU::detectFeatures()+0x9e1>
c00197f1:	52                   	push   edx
c00197f2:	52                   	push   edx
c00197f3:	68 5c b7 02 c0       	push   0xc002b75c
c00197f8:	eb 77                	jmp    c0019871 <CPU::detectFeatures()+0x953>
c00197fa:	83 f8 07             	cmp    eax,0x7
c00197fd:	75 09                	jne    c0019808 <CPU::detectFeatures()+0x8ea>
c00197ff:	50                   	push   eax
c0019800:	50                   	push   eax
c0019801:	68 66 b7 02 c0       	push   0xc002b766
c0019806:	eb 69                	jmp    c0019871 <CPU::detectFeatures()+0x953>
c0019808:	83 f8 0a             	cmp    eax,0xa
c001980b:	75 09                	jne    c0019816 <CPU::detectFeatures()+0x8f8>
c001980d:	50                   	push   eax
c001980e:	50                   	push   eax
c001980f:	68 71 b7 02 c0       	push   0xc002b771
c0019814:	eb 5b                	jmp    c0019871 <CPU::detectFeatures()+0x953>
c0019816:	83 f8 0b             	cmp    eax,0xb
c0019819:	75 09                	jne    c0019824 <CPU::detectFeatures()+0x906>
c001981b:	50                   	push   eax
c001981c:	50                   	push   eax
c001981d:	68 79 b7 02 c0       	push   0xc002b779
c0019822:	eb 4d                	jmp    c0019871 <CPU::detectFeatures()+0x953>
c0019824:	83 f8 08             	cmp    eax,0x8
c0019827:	75 09                	jne    c0019832 <CPU::detectFeatures()+0x914>
c0019829:	50                   	push   eax
c001982a:	50                   	push   eax
c001982b:	68 82 b7 02 c0       	push   0xc002b782
c0019830:	eb 3f                	jmp    c0019871 <CPU::detectFeatures()+0x953>
c0019832:	83 f8 09             	cmp    eax,0x9
c0019835:	75 09                	jne    c0019840 <CPU::detectFeatures()+0x922>
c0019837:	50                   	push   eax
c0019838:	50                   	push   eax
c0019839:	68 8a b7 02 c0       	push   0xc002b78a
c001983e:	eb 31                	jmp    c0019871 <CPU::detectFeatures()+0x953>
c0019840:	83 f8 05             	cmp    eax,0x5
c0019843:	75 09                	jne    c001984e <CPU::detectFeatures()+0x930>
c0019845:	50                   	push   eax
c0019846:	50                   	push   eax
c0019847:	68 92 b7 02 c0       	push   0xc002b792
c001984c:	eb 23                	jmp    c0019871 <CPU::detectFeatures()+0x953>
c001984e:	83 f8 0c             	cmp    eax,0xc
c0019851:	75 09                	jne    c001985c <CPU::detectFeatures()+0x93e>
c0019853:	55                   	push   ebp
c0019854:	55                   	push   ebp
c0019855:	68 a0 b7 02 c0       	push   0xc002b7a0
c001985a:	eb 15                	jmp    c0019871 <CPU::detectFeatures()+0x953>
c001985c:	83 f8 0d             	cmp    eax,0xd
c001985f:	75 09                	jne    c001986a <CPU::detectFeatures()+0x94c>
c0019861:	57                   	push   edi
c0019862:	57                   	push   edi
c0019863:	68 ab b7 02 c0       	push   0xc002b7ab
c0019868:	eb 07                	jmp    c0019871 <CPU::detectFeatures()+0x953>
c001986a:	56                   	push   esi
c001986b:	56                   	push   esi
c001986c:	68 bf b7 02 c0       	push   0xc002b7bf
c0019871:	53                   	push   ebx
c0019872:	e8 25 ab ff ff       	call   c001439c <Device::setName(char const*)>
c0019877:	83 c4 10             	add    esp,0x10
c001987a:	e9 80 00 00 00       	jmp    c00198ff <CPU::detectFeatures()+0x9e1>
c001987f:	51                   	push   ecx
c0019880:	51                   	push   ecx
c0019881:	68 0b b6 02 c0       	push   0xc002b60b
c0019886:	57                   	push   edi
c0019887:	e8 a8 6f fe ff       	call   c0000834 <strcpy>
c001988c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019896:	e8 13 6a fe ff       	call   c00002ae <is486>
c001989b:	83 c4 10             	add    esp,0x10
c001989e:	85 c0                	test   eax,eax
c00198a0:	74 2b                	je     c00198cd <CPU::detectFeatures()+0x9af>
c00198a2:	52                   	push   edx
c00198a3:	52                   	push   edx
c00198a4:	68 cb b7 02 c0       	push   0xc002b7cb
c00198a9:	53                   	push   ebx
c00198aa:	e8 ed aa ff ff       	call   c001439c <Device::setName(char const*)>
c00198af:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00198b6:	0f 20 c0             	mov    eax,cr0
c00198b9:	83 e0 14             	and    eax,0x14
c00198bc:	83 c4 10             	add    esp,0x10
c00198bf:	83 f8 04             	cmp    eax,0x4
c00198c2:	75 1f                	jne    c00198e3 <CPU::detectFeatures()+0x9c5>
c00198c4:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00198cb:	eb 32                	jmp    c00198ff <CPU::detectFeatures()+0x9e1>
c00198cd:	50                   	push   eax
c00198ce:	50                   	push   eax
c00198cf:	68 d6 b7 02 c0       	push   0xc002b7d6
c00198d4:	53                   	push   ebx
c00198d5:	e8 c2 aa ff ff       	call   c001439c <Device::setName(char const*)>
c00198da:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00198e1:	eb d3                	jmp    c00198b6 <CPU::detectFeatures()+0x998>
c00198e3:	e8 a1 69 fe ff       	call   c0000289 <hasLegacyFPU>
c00198e8:	83 e0 01             	and    eax,0x1
c00198eb:	8d 14 00             	lea    edx,[eax+eax*1]
c00198ee:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00198f4:	83 e0 fd             	and    eax,0xfffffffd
c00198f7:	09 d0                	or     eax,edx
c00198f9:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00198ff:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019906:	83 c4 4c             	add    esp,0x4c
c0019909:	5b                   	pop    ebx
c001990a:	5e                   	pop    esi
c001990b:	5f                   	pop    edi
c001990c:	5d                   	pop    ebp
c001990d:	c3                   	ret    

c001990e <CPU::setupSMEP()>:
c001990e:	0f 20 e0             	mov    eax,cr4
c0019911:	0d 00 00 10 00       	or     eax,0x100000
c0019916:	0f 22 e0             	mov    cr4,eax
c0019919:	c3                   	ret    

c001991a <CPU::setupUMIP()>:
c001991a:	0f 20 e0             	mov    eax,cr4
c001991d:	80 cc 08             	or     ah,0x8
c0019920:	0f 22 e0             	mov    cr4,eax
c0019923:	c3                   	ret    

c0019924 <CPU::setupTSC()>:
c0019924:	0f 20 e0             	mov    eax,cr4
c0019927:	83 c8 04             	or     eax,0x4
c001992a:	0f 22 e0             	mov    cr4,eax
c001992d:	c3                   	ret    

c001992e <CPU::setupLargePages()>:
c001992e:	0f 20 e0             	mov    eax,cr4
c0019931:	83 c8 10             	or     eax,0x10
c0019934:	0f 22 e0             	mov    cr4,eax
c0019937:	c3                   	ret    

c0019938 <CPU::setupPAT()>:
c0019938:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001993d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019944:	74 2c                	je     c0019972 <CPU::setupPAT()+0x3a>
c0019946:	53                   	push   ebx
c0019947:	83 ec 10             	sub    esp,0x10
c001994a:	68 77 02 00 00       	push   0x277
c001994f:	50                   	push   eax
c0019950:	e8 93 54 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019955:	83 e2 f8             	and    edx,0xfffffff8
c0019958:	83 ca 01             	or     edx,0x1
c001995b:	52                   	push   edx
c001995c:	50                   	push   eax
c001995d:	68 77 02 00 00       	push   0x277
c0019962:	ff 35 28 e2 02 c0    	push   DWORD PTR ds:0xc002e228
c0019968:	e8 a7 54 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c001996d:	83 c4 28             	add    esp,0x28
c0019970:	5b                   	pop    ebx
c0019971:	c3                   	ret    
c0019972:	c3                   	ret    
c0019973:	90                   	nop

c0019974 <CPU::setupMTRR()>:
c0019974:	c3                   	ret    
c0019975:	90                   	nop

c0019976 <CPU::setupGlobalPages()>:
c0019976:	0f 20 e0             	mov    eax,cr4
c0019979:	0c 80                	or     al,0x80
c001997b:	0f 22 e0             	mov    cr4,eax
c001997e:	c3                   	ret    
c001997f:	90                   	nop

c0019980 <CPU::allowUsermodeDataAccess()>:
c0019980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019984:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001998b:	74 03                	je     c0019990 <CPU::allowUsermodeDataAccess()+0x10>
c001998d:	0f 01 cb             	stac   
c0019990:	c3                   	ret    
c0019991:	90                   	nop

c0019992 <CPU::prohibitUsermodeDataAccess()>:
c0019992:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019996:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001999d:	74 03                	je     c00199a2 <CPU::prohibitUsermodeDataAccess()+0x10>
c001999f:	0f 01 ca             	clac   
c00199a2:	c3                   	ret    
c00199a3:	90                   	nop

c00199a4 <CPU::setupSMAP()>:
c00199a4:	0f 20 e0             	mov    eax,cr4
c00199a7:	0d 00 00 20 00       	or     eax,0x200000
c00199ac:	0f 22 e0             	mov    cr4,eax
c00199af:	eb e1                	jmp    c0019992 <CPU::prohibitUsermodeDataAccess()>
c00199b1:	90                   	nop

c00199b2 <CPU::setupFeatures()>:
c00199b2:	83 ec 0c             	sub    esp,0xc
c00199b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00199b9:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00199c0:	74 07                	je     c00199c9 <CPU::setupFeatures()+0x17>
c00199c2:	52                   	push   edx
c00199c3:	e8 46 ff ff ff       	call   c001990e <CPU::setupSMEP()>
c00199c8:	58                   	pop    eax
c00199c9:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00199d0:	74 07                	je     c00199d9 <CPU::setupFeatures()+0x27>
c00199d2:	52                   	push   edx
c00199d3:	e8 cc ff ff ff       	call   c00199a4 <CPU::setupSMAP()>
c00199d8:	58                   	pop    eax
c00199d9:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00199e0:	74 07                	je     c00199e9 <CPU::setupFeatures()+0x37>
c00199e2:	52                   	push   edx
c00199e3:	e8 32 ff ff ff       	call   c001991a <CPU::setupUMIP()>
c00199e8:	58                   	pop    eax
c00199e9:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00199f0:	74 07                	je     c00199f9 <CPU::setupFeatures()+0x47>
c00199f2:	52                   	push   edx
c00199f3:	e8 2c ff ff ff       	call   c0019924 <CPU::setupTSC()>
c00199f8:	58                   	pop    eax
c00199f9:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019a00:	74 07                	je     c0019a09 <CPU::setupFeatures()+0x57>
c0019a02:	52                   	push   edx
c0019a03:	e8 26 ff ff ff       	call   c001992e <CPU::setupLargePages()>
c0019a08:	59                   	pop    ecx
c0019a09:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019a10:	74 07                	je     c0019a19 <CPU::setupFeatures()+0x67>
c0019a12:	52                   	push   edx
c0019a13:	e8 5e ff ff ff       	call   c0019976 <CPU::setupGlobalPages()>
c0019a18:	58                   	pop    eax
c0019a19:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019a20:	74 0c                	je     c0019a2e <CPU::setupFeatures()+0x7c>
c0019a22:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019a26:	83 c4 0c             	add    esp,0xc
c0019a29:	e9 0a ff ff ff       	jmp    c0019938 <CPU::setupPAT()>
c0019a2e:	83 c4 0c             	add    esp,0xc
c0019a31:	c3                   	ret    

c0019a32 <CPU::open(int, int, void*)>:
c0019a32:	57                   	push   edi
c0019a33:	56                   	push   esi
c0019a34:	53                   	push   ebx
c0019a35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019a39:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019a3d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019a43:	83 ec 0c             	sub    esp,0xc
c0019a46:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019a4c:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019a52:	50                   	push   eax
c0019a53:	e8 7c 56 ff ff       	call   c000f0d4 <GDT::setup()>
c0019a58:	83 c4 0c             	add    esp,0xc
c0019a5b:	6a 00                	push   0x0
c0019a5d:	68 ef be ad de       	push   0xdeadbeef
c0019a62:	57                   	push   edi
c0019a63:	e8 40 7a ff ff       	call   c00114a8 <TSS::setup(unsigned long, unsigned long)>
c0019a68:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019a6b:	e8 18 7a ff ff       	call   c0011488 <TSS::flush()>
c0019a70:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a79:	e8 b2 58 ff ff       	call   c000f330 <IDT::setup()>
c0019a7e:	b8 00 04 00 00       	mov    eax,0x400
c0019a83:	0f 23 f8             	mov    db7,eax
c0019a86:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019a90:	e8 48 64 ff ff       	call   c000fedd <Phys::allocatePage()>
c0019a95:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019a9b:	89 30                	mov    DWORD PTR [eax],esi
c0019a9d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019aa3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019aa6:	58                   	pop    eax
c0019aa7:	5a                   	pop    edx
c0019aa8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019aae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ab2:	e8 21 8a ff ff       	call   c00124d8 <VAS::setCPUSpecific(unsigned long)>
c0019ab7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019aba:	e8 5f f4 ff ff       	call   c0018f1e <CPU::detectFeatures()>
c0019abf:	e8 b1 bc ff ff       	call   c0015775 <setupInterruptController()>
c0019ac4:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019aca:	a1 40 e2 02 c0       	mov    eax,ds:0xc002e240
c0019acf:	83 e0 10             	and    eax,0x10
c0019ad2:	83 f8 01             	cmp    eax,0x1
c0019ad5:	19 c0                	sbb    eax,eax
c0019ad7:	83 e0 46             	and    eax,0x46
c0019ada:	83 c0 1e             	add    eax,0x1e
c0019add:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ae0:	e8 b7 d1 ff ff       	call   c0016c9c <setupTimer(int)>
c0019ae5:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019aeb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019aee:	e8 bf fe ff ff       	call   c00199b2 <CPU::setupFeatures()>
c0019af3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019af6:	e8 a7 f1 ff ff       	call   c0018ca2 <CPU::displayFeatures()>
c0019afb:	83 c4 10             	add    esp,0x10
c0019afe:	31 c0                	xor    eax,eax
c0019b00:	5b                   	pop    ebx
c0019b01:	5e                   	pop    esi
c0019b02:	5f                   	pop    edi
c0019b03:	c3                   	ret    

c0019b04 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019b04:	57                   	push   edi
c0019b05:	56                   	push   esi
c0019b06:	53                   	push   ebx
c0019b07:	51                   	push   ecx
c0019b08:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019b0c:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019b0f:	0f 02 c0             	lar    eax,ax
c0019b12:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019b15:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019b19:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019b1c:	88 ca                	mov    dl,cl
c0019b1e:	c0 ea 06             	shr    dl,0x6
c0019b21:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019b25:	89 ca                	mov    edx,ecx
c0019b27:	66 c1 ea 03          	shr    dx,0x3
c0019b2b:	83 e2 07             	and    edx,0x7
c0019b2e:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019b33:	88 17                	mov    BYTE PTR [edi],dl
c0019b35:	0f 84 a6 01 00 00    	je     c0019ce1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019b3b:	83 e1 07             	and    ecx,0x7
c0019b3e:	80 f9 04             	cmp    cl,0x4
c0019b41:	0f 84 98 00 00 00    	je     c0019bdf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019b47:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019b4c:	0f 95 c0             	setne  al
c0019b4f:	80 f9 05             	cmp    cl,0x5
c0019b52:	0f 95 c2             	setne  dl
c0019b55:	08 c2                	or     dl,al
c0019b57:	74 79                	je     c0019bd2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019b59:	84 c9                	test   cl,cl
c0019b5b:	75 05                	jne    c0019b62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019b5d:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019b60:	eb 3c                	jmp    c0019b9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b62:	80 f9 01             	cmp    cl,0x1
c0019b65:	75 05                	jne    c0019b6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019b67:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019b6a:	eb 32                	jmp    c0019b9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b6c:	80 f9 02             	cmp    cl,0x2
c0019b6f:	75 05                	jne    c0019b76 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019b71:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019b74:	eb 28                	jmp    c0019b9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b76:	31 c0                	xor    eax,eax
c0019b78:	80 f9 03             	cmp    cl,0x3
c0019b7b:	75 05                	jne    c0019b82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019b7d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019b80:	eb 1c                	jmp    c0019b9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b82:	80 f9 05             	cmp    cl,0x5
c0019b85:	75 05                	jne    c0019b8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019b87:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019b8a:	eb 12                	jmp    c0019b9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b8c:	80 f9 06             	cmp    cl,0x6
c0019b8f:	75 05                	jne    c0019b96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019b91:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019b94:	eb 08                	jmp    c0019b9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b96:	80 f9 07             	cmp    cl,0x7
c0019b99:	75 03                	jne    c0019b9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b9b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019b9e:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019ba3:	75 10                	jne    c0019bb5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019ba5:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019ba9:	b9 03 00 00 00       	mov    ecx,0x3
c0019bae:	01 d0                	add    eax,edx
c0019bb0:	e9 37 01 00 00       	jmp    c0019cec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019bb5:	b9 02 00 00 00       	mov    ecx,0x2
c0019bba:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019bbf:	0f 85 27 01 00 00    	jne    c0019cec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019bc5:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019bc8:	b9 06 00 00 00       	mov    ecx,0x6
c0019bcd:	e9 1a 01 00 00       	jmp    c0019cec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019bd2:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019bd5:	b9 06 00 00 00       	mov    ecx,0x6
c0019bda:	e9 0f 01 00 00       	jmp    c0019cee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019bdf:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019be2:	88 ca                	mov    dl,cl
c0019be4:	c0 ea 06             	shr    dl,0x6
c0019be7:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019beb:	89 ca                	mov    edx,ecx
c0019bed:	66 c1 ea 03          	shr    dx,0x3
c0019bf1:	83 e2 07             	and    edx,0x7
c0019bf4:	80 e1 07             	and    cl,0x7
c0019bf7:	75 05                	jne    c0019bfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019bf9:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019bfc:	eb 4c                	jmp    c0019c4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bfe:	80 f9 01             	cmp    cl,0x1
c0019c01:	75 05                	jne    c0019c08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019c03:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019c06:	eb 42                	jmp    c0019c4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c08:	80 f9 02             	cmp    cl,0x2
c0019c0b:	75 05                	jne    c0019c12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019c0d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019c10:	eb 38                	jmp    c0019c4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c12:	80 f9 03             	cmp    cl,0x3
c0019c15:	75 05                	jne    c0019c1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019c17:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019c1a:	eb 2e                	jmp    c0019c4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c1c:	80 f9 04             	cmp    cl,0x4
c0019c1f:	75 12                	jne    c0019c33 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019c21:	f6 c4 60             	test   ah,0x60
c0019c24:	75 08                	jne    c0019c2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019c26:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019c29:	8d 78 14             	lea    edi,[eax+0x14]
c0019c2c:	eb 1c                	jmp    c0019c4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c2e:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019c31:	eb 17                	jmp    c0019c4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c33:	80 f9 05             	cmp    cl,0x5
c0019c36:	75 05                	jne    c0019c3d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019c38:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019c3b:	eb 0d                	jmp    c0019c4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c3d:	80 f9 06             	cmp    cl,0x6
c0019c40:	75 05                	jne    c0019c47 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019c42:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019c45:	eb 03                	jmp    c0019c4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c47:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019c4a:	84 d2                	test   dl,dl
c0019c4c:	75 05                	jne    c0019c53 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019c4e:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019c51:	eb 3c                	jmp    c0019c8f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c53:	80 fa 01             	cmp    dl,0x1
c0019c56:	75 05                	jne    c0019c5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019c58:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019c5b:	eb 32                	jmp    c0019c8f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c5d:	80 fa 02             	cmp    dl,0x2
c0019c60:	75 05                	jne    c0019c67 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019c62:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019c65:	eb 28                	jmp    c0019c8f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c67:	80 fa 03             	cmp    dl,0x3
c0019c6a:	75 05                	jne    c0019c71 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019c6c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019c6f:	eb 1e                	jmp    c0019c8f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c71:	31 c0                	xor    eax,eax
c0019c73:	80 fa 04             	cmp    dl,0x4
c0019c76:	74 17                	je     c0019c8f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c78:	80 fa 05             	cmp    dl,0x5
c0019c7b:	75 05                	jne    c0019c82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019c7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019c80:	eb 0d                	jmp    c0019c8f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c82:	80 fa 06             	cmp    dl,0x6
c0019c85:	75 05                	jne    c0019c8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019c87:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019c8a:	eb 03                	jmp    c0019c8f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c8c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019c8f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019c94:	0f 94 c2             	sete   dl
c0019c97:	80 f9 05             	cmp    cl,0x5
c0019c9a:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019c9e:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019ca3:	d3 e0                	shl    eax,cl
c0019ca5:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019ca9:	74 0a                	je     c0019cb5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019cab:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019cae:	b9 07 00 00 00       	mov    ecx,0x7
c0019cb3:	eb 37                	jmp    c0019cec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019cb5:	01 f8                	add    eax,edi
c0019cb7:	b9 03 00 00 00       	mov    ecx,0x3
c0019cbc:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019cc1:	74 2b                	je     c0019cee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019cc3:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019cc8:	75 0d                	jne    c0019cd7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019cca:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019cce:	01 c8                	add    eax,ecx
c0019cd0:	b9 04 00 00 00       	mov    ecx,0x4
c0019cd5:	eb 17                	jmp    c0019cee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019cd7:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019cda:	b9 07 00 00 00       	mov    ecx,0x7
c0019cdf:	eb 0d                	jmp    c0019cee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ce1:	b9 02 00 00 00       	mov    ecx,0x2
c0019ce6:	b2 01                	mov    dl,0x1
c0019ce8:	31 c0                	xor    eax,eax
c0019cea:	eb 02                	jmp    c0019cee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019cec:	31 d2                	xor    edx,edx
c0019cee:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019cf2:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019cf4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019cf8:	88 11                	mov    BYTE PTR [ecx],dl
c0019cfa:	5a                   	pop    edx
c0019cfb:	5b                   	pop    ebx
c0019cfc:	5e                   	pop    esi
c0019cfd:	5f                   	pop    edi
c0019cfe:	c3                   	ret    

c0019cff <Krnl::smpEntry()>:
c0019cff:	eb fe                	jmp    c0019cff <Krnl::smpEntry()>

c0019d01 <Krnl::startCPU(int)>:
c0019d01:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0019d06:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019d0d:	0f 84 36 01 00 00    	je     c0019e49 <Krnl::startCPU(int)+0x148>
c0019d13:	53                   	push   ebx
c0019d14:	83 ec 08             	sub    esp,0x8
c0019d17:	e8 1b 3f 00 00       	call   c001dc37 <lockScheduler()>
c0019d1c:	52                   	push   edx
c0019d1d:	52                   	push   edx
c0019d1e:	6a 1b                	push   0x1b
c0019d20:	ff 35 28 e2 02 c0    	push   DWORD PTR ds:0xc002e228
c0019d26:	e8 bd 50 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019d2b:	59                   	pop    ecx
c0019d2c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019d31:	89 c3                	mov    ebx,eax
c0019d33:	58                   	pop    eax
c0019d34:	53                   	push   ebx
c0019d35:	68 10 b8 02 c0       	push   0xc002b810
c0019d3a:	e8 55 90 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0019d3f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d4d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d57:	c1 e0 18             	shl    eax,0x18
c0019d5a:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019d60:	83 c4 10             	add    esp,0x10
c0019d63:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019d69:	09 c2                	or     edx,eax
c0019d6b:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019d71:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019d77:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019d7d:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019d83:	80 cd c5             	or     ch,0xc5
c0019d86:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019d8c:	f3 90                	pause  
c0019d8e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019d90:	0f ba e1 0c          	bt     ecx,0xc
c0019d94:	72 f6                	jb     c0019d8c <Krnl::startCPU(int)+0x8b>
c0019d96:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019d9c:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019da2:	09 c1                	or     ecx,eax
c0019da4:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019daa:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019db0:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019db6:	80 cd 85             	or     ch,0x85
c0019db9:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019dbf:	f3 90                	pause  
c0019dc1:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019dc3:	0f ba e1 0c          	bt     ecx,0xc
c0019dc7:	72 f6                	jb     c0019dbf <Krnl::startCPU(int)+0xbe>
c0019dc9:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019dd3:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019dd9:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019ddf:	09 c1                	or     ecx,eax
c0019de1:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019de7:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019ded:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019df3:	81 c9 02 06 00 00    	or     ecx,0x602
c0019df9:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019dff:	f3 90                	pause  
c0019e01:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019e03:	0f ba e1 0c          	bt     ecx,0xc
c0019e07:	72 f6                	jb     c0019dff <Krnl::startCPU(int)+0xfe>
c0019e09:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e13:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019e19:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019e1f:	09 c8                	or     eax,ecx
c0019e21:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019e27:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019e2d:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019e32:	0d 02 06 00 00       	or     eax,0x602
c0019e37:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019e3d:	f3 90                	pause  
c0019e3f:	8b 02                	mov    eax,DWORD PTR [edx]
c0019e41:	0f ba e0 0c          	bt     eax,0xc
c0019e45:	72 f6                	jb     c0019e3d <Krnl::startCPU(int)+0x13c>
c0019e47:	eb fe                	jmp    c0019e47 <Krnl::startCPU(int)+0x146>
c0019e49:	c3                   	ret    

c0019e4a <Krnl::startCPUs()>:
c0019e4a:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0019e4f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019e55:	88 c2                	mov    dl,al
c0019e57:	83 e2 0a             	and    edx,0xa
c0019e5a:	80 fa 0a             	cmp    dl,0xa
c0019e5d:	75 09                	jne    c0019e68 <Krnl::startCPUs()+0x1e>
c0019e5f:	a8 01                	test   al,0x1
c0019e61:	74 05                	je     c0019e68 <Krnl::startCPUs()+0x1e>
c0019e63:	e9 33 63 fe ff       	jmp    c000019b <prepareTramp>
c0019e68:	c3                   	ret    
c0019e69:	90                   	nop

c0019e6a <EnvVarContainer::getEnv(char const*)>:
c0019e6a:	57                   	push   edi
c0019e6b:	56                   	push   esi
c0019e6c:	53                   	push   ebx
c0019e6d:	31 db                	xor    ebx,ebx
c0019e6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e73:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019e75:	7e 2b                	jle    c0019ea2 <EnvVarContainer::getEnv(char const*)+0x38>
c0019e77:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019e7e:	50                   	push   eax
c0019e7f:	50                   	push   eax
c0019e80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019e83:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019e86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019e8a:	e8 31 6a fe ff       	call   c00008c0 <strcmp>
c0019e8f:	83 c4 10             	add    esp,0x10
c0019e92:	85 c0                	test   eax,eax
c0019e94:	75 09                	jne    c0019e9f <EnvVarContainer::getEnv(char const*)+0x35>
c0019e96:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019e99:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019e9d:	eb 05                	jmp    c0019ea4 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019e9f:	43                   	inc    ebx
c0019ea0:	eb d1                	jmp    c0019e73 <EnvVarContainer::getEnv(char const*)+0x9>
c0019ea2:	31 c0                	xor    eax,eax
c0019ea4:	5b                   	pop    ebx
c0019ea5:	5e                   	pop    esi
c0019ea6:	5f                   	pop    edi
c0019ea7:	c3                   	ret    

c0019ea8 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019ea8:	57                   	push   edi
c0019ea9:	56                   	push   esi
c0019eaa:	53                   	push   ebx
c0019eab:	83 ec 1c             	sub    esp,0x1c
c0019eae:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019eb2:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019eb6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019eba:	57                   	push   edi
c0019ebb:	e8 d4 68 fe ff       	call   c0000794 <strlen>
c0019ec0:	40                   	inc    eax
c0019ec1:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ec4:	e8 77 59 ff ff       	call   c000f840 <malloc>
c0019ec9:	89 34 24             	mov    DWORD PTR [esp],esi
c0019ecc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019ed0:	e8 bf 68 fe ff       	call   c0000794 <strlen>
c0019ed5:	40                   	inc    eax
c0019ed6:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ed9:	e8 62 59 ff ff       	call   c000f840 <malloc>
c0019ede:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019ee1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ee5:	e8 aa 68 fe ff       	call   c0000794 <strlen>
c0019eea:	83 c4 0c             	add    esp,0xc
c0019eed:	40                   	inc    eax
c0019eee:	50                   	push   eax
c0019eef:	6a 00                	push   0x0
c0019ef1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019ef5:	e8 7e 68 fe ff       	call   c0000778 <memset>
c0019efa:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019efd:	e8 92 68 fe ff       	call   c0000794 <strlen>
c0019f02:	83 c4 0c             	add    esp,0xc
c0019f05:	40                   	inc    eax
c0019f06:	50                   	push   eax
c0019f07:	57                   	push   edi
c0019f08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019f0c:	e8 33 68 fe ff       	call   c0000744 <memcpy>
c0019f11:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f14:	e8 7b 68 fe ff       	call   c0000794 <strlen>
c0019f19:	83 c4 0c             	add    esp,0xc
c0019f1c:	40                   	inc    eax
c0019f1d:	50                   	push   eax
c0019f1e:	6a 00                	push   0x0
c0019f20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f24:	e8 4f 68 fe ff       	call   c0000778 <memset>
c0019f29:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f2c:	e8 63 68 fe ff       	call   c0000794 <strlen>
c0019f31:	83 c4 0c             	add    esp,0xc
c0019f34:	40                   	inc    eax
c0019f35:	50                   	push   eax
c0019f36:	56                   	push   esi
c0019f37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f3b:	e8 04 68 fe ff       	call   c0000744 <memcpy>
c0019f40:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f42:	40                   	inc    eax
c0019f43:	89 03                	mov    DWORD PTR [ebx],eax
c0019f45:	c1 e0 03             	shl    eax,0x3
c0019f48:	5a                   	pop    edx
c0019f49:	59                   	pop    ecx
c0019f4a:	50                   	push   eax
c0019f4b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0019f4e:	e8 d9 58 ff ff       	call   c000f82c <realloc>
c0019f53:	83 c4 0c             	add    esp,0xc
c0019f56:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019f59:	6a 08                	push   0x8
c0019f5b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019f5f:	52                   	push   edx
c0019f60:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019f62:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019f66:	50                   	push   eax
c0019f67:	e8 d8 67 fe ff       	call   c0000744 <memcpy>
c0019f6c:	83 c4 20             	add    esp,0x20
c0019f6f:	5b                   	pop    ebx
c0019f70:	5e                   	pop    esi
c0019f71:	5f                   	pop    edi
c0019f72:	c3                   	ret    
c0019f73:	90                   	nop

c0019f74 <EnvVarContainer::deleteEnv(char const*)>:
c0019f74:	c3                   	ret    
c0019f75:	90                   	nop

c0019f76 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019f76:	55                   	push   ebp
c0019f77:	57                   	push   edi
c0019f78:	56                   	push   esi
c0019f79:	53                   	push   ebx
c0019f7a:	81 ec 38 01 00 00    	sub    esp,0x138
c0019f80:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c0019f87:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c0019f8e:	68 14 01 00 00       	push   0x114
c0019f93:	e8 a8 58 ff ff       	call   c000f840 <malloc>
c0019f98:	83 c4 0c             	add    esp,0xc
c0019f9b:	89 c7                	mov    edi,eax
c0019f9d:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0019fa0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019fa7:	50                   	push   eax
c0019fa8:	e8 3f 93 ff ff       	call   c00132ec <File::File(char const*, Process*)>
c0019fad:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019fb0:	e8 09 96 ff ff       	call   c00135be <File::exists()>
c0019fb5:	83 c4 10             	add    esp,0x10
c0019fb8:	84 c0                	test   al,al
c0019fba:	75 31                	jne    c0019fed <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019fbc:	51                   	push   ecx
c0019fbd:	51                   	push   ecx
c0019fbe:	6a 12                	push   0x12
c0019fc0:	57                   	push   edi
c0019fc1:	e8 8a 93 ff ff       	call   c0013350 <File::open(FileOpenMode)>
c0019fc6:	8b 07                	mov    eax,DWORD PTR [edi]
c0019fc8:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0019fcb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019fce:	e8 c1 67 fe ff       	call   c0000794 <strlen>
c0019fd3:	5a                   	pop    edx
c0019fd4:	31 d2                	xor    edx,edx
c0019fd6:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019fda:	51                   	push   ecx
c0019fdb:	55                   	push   ebp
c0019fdc:	52                   	push   edx
c0019fdd:	50                   	push   eax
c0019fde:	57                   	push   edi
c0019fdf:	ff d3                	call   ebx
c0019fe1:	83 c4 14             	add    esp,0x14
c0019fe4:	57                   	push   edi
c0019fe5:	e8 c4 93 ff ff       	call   c00133ae <File::close()>
c0019fea:	83 c4 10             	add    esp,0x10
c0019fed:	31 db                	xor    ebx,ebx
c0019fef:	50                   	push   eax
c0019ff0:	31 ed                	xor    ebp,ebp
c0019ff2:	68 00 01 00 00       	push   0x100
c0019ff7:	6a 00                	push   0x0
c0019ff9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019ffd:	50                   	push   eax
c0019ffe:	e8 75 67 fe ff       	call   c0000778 <memset>
c001a003:	58                   	pop    eax
c001a004:	5a                   	pop    edx
c001a005:	6a 01                	push   0x1
c001a007:	57                   	push   edi
c001a008:	e8 43 93 ff ff       	call   c0013350 <File::open(FileOpenMode)>
c001a00d:	83 c4 10             	add    esp,0x10
c001a010:	83 ec 0c             	sub    esp,0xc
c001a013:	8b 07                	mov    eax,DWORD PTR [edi]
c001a015:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a019:	51                   	push   ecx
c001a01a:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a01e:	52                   	push   edx
c001a01f:	6a 00                	push   0x0
c001a021:	6a 01                	push   0x1
c001a023:	57                   	push   edi
c001a024:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a027:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a02b:	83 c4 20             	add    esp,0x20
c001a02e:	3c 0d                	cmp    al,0xd
c001a030:	0f 84 12 01 00 00    	je     c001a148 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a036:	85 db                	test   ebx,ebx
c001a038:	0f 84 fd 00 00 00    	je     c001a13b <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a03e:	3c 0a                	cmp    al,0xa
c001a040:	74 13                	je     c001a055 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a042:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a047:	74 0c                	je     c001a055 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a049:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a04f:	0f 8e e6 00 00 00    	jle    c001a13b <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a055:	83 ec 0c             	sub    esp,0xc
c001a058:	8d 53 01             	lea    edx,[ebx+0x1]
c001a05b:	29 dd                	sub    ebp,ebx
c001a05d:	52                   	push   edx
c001a05e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a062:	e8 d9 57 ff ff       	call   c000f840 <malloc>
c001a067:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a06a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a06e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a071:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a075:	e8 c6 57 ff ff       	call   c000f840 <malloc>
c001a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a07e:	83 c4 0c             	add    esp,0xc
c001a081:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a085:	52                   	push   edx
c001a086:	6a 00                	push   0x0
c001a088:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a08c:	e8 e7 66 fe ff       	call   c0000778 <memset>
c001a091:	83 c4 0c             	add    esp,0xc
c001a094:	53                   	push   ebx
c001a095:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a099:	55                   	push   ebp
c001a09a:	01 eb                	add    ebx,ebp
c001a09c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a0a0:	e8 9f 66 fe ff       	call   c0000744 <memcpy>
c001a0a5:	83 c4 0c             	add    esp,0xc
c001a0a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a0ac:	51                   	push   ecx
c001a0ad:	6a 00                	push   0x0
c001a0af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a0b3:	e8 c0 66 fe ff       	call   c0000778 <memset>
c001a0b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0bb:	e8 d4 66 fe ff       	call   c0000794 <strlen>
c001a0c0:	83 c4 0c             	add    esp,0xc
c001a0c3:	50                   	push   eax
c001a0c4:	53                   	push   ebx
c001a0c5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a0c9:	e8 76 66 fe ff       	call   c0000744 <memcpy>
c001a0ce:	5b                   	pop    ebx
c001a0cf:	58                   	pop    eax
c001a0d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a0d4:	68 21 b8 02 c0       	push   0xc002b821
c001a0d9:	e8 b6 8c ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001a0de:	8b 06                	mov    eax,DWORD PTR [esi]
c001a0e0:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a0e3:	40                   	inc    eax
c001a0e4:	83 c4 10             	add    esp,0x10
c001a0e7:	89 06                	mov    DWORD PTR [esi],eax
c001a0e9:	85 d2                	test   edx,edx
c001a0eb:	75 0c                	jne    c001a0f9 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a0ed:	83 ec 0c             	sub    esp,0xc
c001a0f0:	6a 08                	push   0x8
c001a0f2:	e8 49 57 ff ff       	call   c000f840 <malloc>
c001a0f7:	eb 0c                	jmp    c001a105 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a0f9:	c1 e0 03             	shl    eax,0x3
c001a0fc:	51                   	push   ecx
c001a0fd:	51                   	push   ecx
c001a0fe:	50                   	push   eax
c001a0ff:	52                   	push   edx
c001a100:	e8 27 57 ff ff       	call   c000f82c <realloc>
c001a105:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a108:	83 c4 10             	add    esp,0x10
c001a10b:	31 db                	xor    ebx,ebx
c001a10d:	52                   	push   edx
c001a10e:	6a 08                	push   0x8
c001a110:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a114:	50                   	push   eax
c001a115:	8b 16                	mov    edx,DWORD PTR [esi]
c001a117:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a11a:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a11e:	50                   	push   eax
c001a11f:	e8 20 66 fe ff       	call   c0000744 <memcpy>
c001a124:	83 c4 0c             	add    esp,0xc
c001a127:	68 00 01 00 00       	push   0x100
c001a12c:	6a 00                	push   0x0
c001a12e:	55                   	push   ebp
c001a12f:	31 ed                	xor    ebp,ebp
c001a131:	e8 42 66 fe ff       	call   c0000778 <memset>
c001a136:	83 c4 10             	add    esp,0x10
c001a139:	eb 0d                	jmp    c001a148 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a13b:	3c 3d                	cmp    al,0x3d
c001a13d:	74 07                	je     c001a146 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a13f:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a143:	45                   	inc    ebp
c001a144:	eb 02                	jmp    c001a148 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a146:	89 eb                	mov    ebx,ebp
c001a148:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a14d:	0f 85 bd fe ff ff    	jne    c001a010 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a153:	50                   	push   eax
c001a154:	50                   	push   eax
c001a155:	ff 36                	push   DWORD PTR [esi]
c001a157:	68 2f b8 02 c0       	push   0xc002b82f
c001a15c:	e8 33 8c ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001a161:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a167:	5b                   	pop    ebx
c001a168:	5e                   	pop    esi
c001a169:	5f                   	pop    edi
c001a16a:	5d                   	pop    ebp
c001a16b:	c3                   	ret    

c001a16c <EnvVarContainer::__loadSystem()>:
c001a16c:	83 ec 10             	sub    esp,0x10
c001a16f:	68 60 d7 02 c0       	push   0xc002d760
c001a174:	68 5a b8 02 c0       	push   0xc002b85a
c001a179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a17d:	e8 f4 fd ff ff       	call   c0019f76 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a182:	83 c4 1c             	add    esp,0x1c
c001a185:	c3                   	ret    

c001a186 <EnvVarContainer::__loadUser()>:
c001a186:	c3                   	ret    
c001a187:	90                   	nop

c001a188 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a18c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a19a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a19d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a1a8:	90                   	nop
c001a1a9:	c3                   	ret    

c001a1aa <EnvVarContainer::~EnvVarContainer()>:
c001a1aa:	83 ec 0c             	sub    esp,0xc
c001a1ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a1b4:	85 c0                	test   eax,eax
c001a1b6:	74 1d                	je     c001a1d5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a1b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001a1be:	85 c0                	test   eax,eax
c001a1c0:	74 13                	je     c001a1d5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a1c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a1c9:	83 ec 0c             	sub    esp,0xc
c001a1cc:	50                   	push   eax
c001a1cd:	e8 7e 56 ff ff       	call   c000f850 <free>
c001a1d2:	83 c4 10             	add    esp,0x10
c001a1d5:	90                   	nop
c001a1d6:	83 c4 0c             	add    esp,0xc
c001a1d9:	c3                   	ret    

c001a1da <Krnl::getEnv(Process*, char const*)>:
c001a1da:	53                   	push   ebx
c001a1db:	83 ec 08             	sub    esp,0x8
c001a1de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1e2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a1e6:	39 05 94 17 03 c0    	cmp    DWORD PTR ds:0xc0031794,eax
c001a1ec:	74 04                	je     c001a1f2 <Krnl::getEnv(Process*, char const*)+0x18>
c001a1ee:	85 c0                	test   eax,eax
c001a1f0:	75 0b                	jne    c001a1fd <Krnl::getEnv(Process*, char const*)+0x23>
c001a1f2:	a1 74 0d 03 c0       	mov    eax,ds:0xc0030d74
c001a1f7:	85 c0                	test   eax,eax
c001a1f9:	75 19                	jne    c001a214 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a1fb:	eb 27                	jmp    c001a224 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a1fd:	52                   	push   edx
c001a1fe:	52                   	push   edx
c001a1ff:	53                   	push   ebx
c001a200:	ff b0 3a 1b 00 00    	push   DWORD PTR [eax+0x1b3a]
c001a206:	e8 5f fc ff ff       	call   c0019e6a <EnvVarContainer::getEnv(char const*)>
c001a20b:	83 c4 10             	add    esp,0x10
c001a20e:	85 c0                	test   eax,eax
c001a210:	75 28                	jne    c001a23a <Krnl::getEnv(Process*, char const*)+0x60>
c001a212:	eb de                	jmp    c001a1f2 <Krnl::getEnv(Process*, char const*)+0x18>
c001a214:	52                   	push   edx
c001a215:	52                   	push   edx
c001a216:	53                   	push   ebx
c001a217:	50                   	push   eax
c001a218:	e8 4d fc ff ff       	call   c0019e6a <EnvVarContainer::getEnv(char const*)>
c001a21d:	83 c4 10             	add    esp,0x10
c001a220:	85 c0                	test   eax,eax
c001a222:	75 16                	jne    c001a23a <Krnl::getEnv(Process*, char const*)+0x60>
c001a224:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a228:	a1 78 0d 03 c0       	mov    eax,ds:0xc0030d78
c001a22d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a231:	83 c4 08             	add    esp,0x8
c001a234:	5b                   	pop    ebx
c001a235:	e9 30 fc ff ff       	jmp    c0019e6a <EnvVarContainer::getEnv(char const*)>
c001a23a:	83 c4 08             	add    esp,0x8
c001a23d:	5b                   	pop    ebx
c001a23e:	c3                   	ret    

c001a23f <Krnl::setEnvSystem(char const*, char const*)>:
c001a23f:	83 ec 10             	sub    esp,0x10
c001a242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a246:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a24a:	ff 35 78 0d 03 c0    	push   DWORD PTR ds:0xc0030d78
c001a250:	e8 53 fc ff ff       	call   c0019ea8 <EnvVarContainer::setEnv(char const*, char const*)>
c001a255:	83 c4 1c             	add    esp,0x1c
c001a258:	c3                   	ret    

c001a259 <Krnl::setEnvUser(char const*, char const*)>:
c001a259:	a1 74 0d 03 c0       	mov    eax,ds:0xc0030d74
c001a25e:	85 c0                	test   eax,eax
c001a260:	74 15                	je     c001a277 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a262:	83 ec 10             	sub    esp,0x10
c001a265:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a269:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a26d:	50                   	push   eax
c001a26e:	e8 35 fc ff ff       	call   c0019ea8 <EnvVarContainer::setEnv(char const*, char const*)>
c001a273:	83 c4 1c             	add    esp,0x1c
c001a276:	c3                   	ret    
c001a277:	c3                   	ret    

c001a278 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a278:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a27c:	8b 80 3a 1b 00 00    	mov    eax,DWORD PTR [eax+0x1b3a]
c001a282:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a286:	e9 1d fc ff ff       	jmp    c0019ea8 <EnvVarContainer::setEnv(char const*, char const*)>

c001a28b <Krnl::deleteEnvSystem(char const*)>:
c001a28b:	c3                   	ret    

c001a28c <Krnl::deleteEnvUser(char const*)>:
c001a28c:	c3                   	ret    

c001a28d <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a28d:	c3                   	ret    

c001a28e <Krnl::newProcessEnv(Process*)>:
c001a28e:	83 ec 28             	sub    esp,0x28
c001a291:	6a 0c                	push   0xc
c001a293:	e8 a8 55 ff ff       	call   c000f840 <malloc>
c001a298:	5a                   	pop    edx
c001a299:	59                   	pop    ecx
c001a29a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a29e:	50                   	push   eax
c001a29f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a2a3:	e8 e0 fe ff ff       	call   c001a188 <EnvVarContainer::EnvVarContainer(Process*)>
c001a2a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2ac:	83 c4 2c             	add    esp,0x2c
c001a2af:	c3                   	ret    

c001a2b0 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a2b0:	56                   	push   esi
c001a2b1:	53                   	push   ebx
c001a2b2:	83 ec 10             	sub    esp,0x10
c001a2b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2b9:	8b b0 3a 1b 00 00    	mov    esi,DWORD PTR [eax+0x1b3a]
c001a2bf:	6a 0c                	push   0xc
c001a2c1:	e8 7a 55 ff ff       	call   c000f840 <malloc>
c001a2c6:	89 c3                	mov    ebx,eax
c001a2c8:	58                   	pop    eax
c001a2c9:	5a                   	pop    edx
c001a2ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2ce:	53                   	push   ebx
c001a2cf:	e8 b4 fe ff ff       	call   c001a188 <EnvVarContainer::EnvVarContainer(Process*)>
c001a2d4:	8b 06                	mov    eax,DWORD PTR [esi]
c001a2d6:	89 03                	mov    DWORD PTR [ebx],eax
c001a2d8:	c1 e0 03             	shl    eax,0x3
c001a2db:	89 04 24             	mov    DWORD PTR [esp],eax
c001a2de:	e8 5d 55 ff ff       	call   c000f840 <malloc>
c001a2e3:	83 c4 0c             	add    esp,0xc
c001a2e6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a2e9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a2eb:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a2f2:	52                   	push   edx
c001a2f3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a2f6:	50                   	push   eax
c001a2f7:	e8 48 64 fe ff       	call   c0000744 <memcpy>
c001a2fc:	89 d8                	mov    eax,ebx
c001a2fe:	83 c4 14             	add    esp,0x14
c001a301:	5b                   	pop    ebx
c001a302:	5e                   	pop    esi
c001a303:	c3                   	ret    

c001a304 <Krnl::loadSystemEnv()>:
c001a304:	53                   	push   ebx
c001a305:	83 ec 14             	sub    esp,0x14
c001a308:	6a 0c                	push   0xc
c001a30a:	e8 31 55 ff ff       	call   c000f840 <malloc>
c001a30f:	89 c3                	mov    ebx,eax
c001a311:	58                   	pop    eax
c001a312:	5a                   	pop    edx
c001a313:	ff 35 94 17 03 c0    	push   DWORD PTR ds:0xc0031794
c001a319:	53                   	push   ebx
c001a31a:	e8 69 fe ff ff       	call   c001a188 <EnvVarContainer::EnvVarContainer(Process*)>
c001a31f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a322:	89 1d 78 0d 03 c0    	mov    DWORD PTR ds:0xc0030d78,ebx
c001a328:	e8 3f fe ff ff       	call   c001a16c <EnvVarContainer::__loadSystem()>
c001a32d:	83 c4 18             	add    esp,0x18
c001a330:	5b                   	pop    ebx
c001a331:	c3                   	ret    

c001a332 <Krnl::loadUserEnv()>:
c001a332:	53                   	push   ebx
c001a333:	83 ec 14             	sub    esp,0x14
c001a336:	6a 0c                	push   0xc
c001a338:	e8 03 55 ff ff       	call   c000f840 <malloc>
c001a33d:	89 c3                	mov    ebx,eax
c001a33f:	58                   	pop    eax
c001a340:	5a                   	pop    edx
c001a341:	ff 35 94 17 03 c0    	push   DWORD PTR ds:0xc0031794
c001a347:	53                   	push   ebx
c001a348:	e8 3b fe ff ff       	call   c001a188 <EnvVarContainer::EnvVarContainer(Process*)>
c001a34d:	89 1d 74 0d 03 c0    	mov    DWORD PTR ds:0xc0030d74,ebx
c001a353:	83 c4 18             	add    esp,0x18
c001a356:	5b                   	pop    ebx
c001a357:	c3                   	ret    

c001a358 <Krnl::flushEnv()>:
c001a358:	c3                   	ret    

c001a359 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a359:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a35d:	8b 15 74 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030d74
c001a363:	8b 88 3a 1b 00 00    	mov    ecx,DWORD PTR [eax+0x1b3a]
c001a369:	a1 78 0d 03 c0       	mov    eax,ds:0xc0030d78
c001a36e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a370:	03 01                	add    eax,DWORD PTR [ecx]
c001a372:	85 d2                	test   edx,edx
c001a374:	74 02                	je     c001a378 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a376:	03 02                	add    eax,DWORD PTR [edx]
c001a378:	c3                   	ret    

c001a379 <Krnl::getProcessEnvPair(Process*, int)>:
c001a379:	57                   	push   edi
c001a37a:	8b 0d 74 0d 03 c0    	mov    ecx,DWORD PTR ds:0xc0030d74
c001a380:	56                   	push   esi
c001a381:	85 c9                	test   ecx,ecx
c001a383:	53                   	push   ebx
c001a384:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a388:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a38c:	8b 97 3a 1b 00 00    	mov    edx,DWORD PTR [edi+0x1b3a]
c001a392:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a396:	8b 02                	mov    eax,DWORD PTR [edx]
c001a398:	75 47                	jne    c001a3e1 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a39a:	39 c3                	cmp    ebx,eax
c001a39c:	7c 47                	jl     c001a3e5 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a39e:	8b 15 78 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030d78
c001a3a4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a3a6:	01 c1                	add    ecx,eax
c001a3a8:	39 d9                	cmp    ecx,ebx
c001a3aa:	7e 6c                	jle    c001a418 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a3ac:	51                   	push   ecx
c001a3ad:	89 d9                	mov    ecx,ebx
c001a3af:	29 c1                	sub    ecx,eax
c001a3b1:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a3b4:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a3b8:	53                   	push   ebx
c001a3b9:	68 7c b8 02 c0       	push   0xc002b87c
c001a3be:	e8 d1 89 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001a3c3:	8b 87 3a 1b 00 00    	mov    eax,DWORD PTR [edi+0x1b3a]
c001a3c9:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a3cb:	a1 78 0d 03 c0       	mov    eax,ds:0xc0030d78
c001a3d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a3d3:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a3d7:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a3da:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a3dd:	89 06                	mov    DWORD PTR [esi],eax
c001a3df:	eb 51                	jmp    c001a432 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a3e1:	39 c3                	cmp    ebx,eax
c001a3e3:	7d 05                	jge    c001a3ea <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a3e5:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a3e8:	eb 20                	jmp    c001a40a <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a3ea:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a3ec:	8d 14 07             	lea    edx,[edi+eax*1]
c001a3ef:	39 da                	cmp    edx,ebx
c001a3f1:	7e 04                	jle    c001a3f7 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a3f3:	29 c3                	sub    ebx,eax
c001a3f5:	eb 10                	jmp    c001a407 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a3f7:	8b 0d 78 0d 03 c0    	mov    ecx,DWORD PTR ds:0xc0030d78
c001a3fd:	03 11                	add    edx,DWORD PTR [ecx]
c001a3ff:	39 da                	cmp    edx,ebx
c001a401:	7e 15                	jle    c001a418 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a403:	29 c3                	sub    ebx,eax
c001a405:	29 fb                	sub    ebx,edi
c001a407:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a40a:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a40e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a411:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a414:	89 06                	mov    DWORD PTR [esi],eax
c001a416:	eb 1d                	jmp    c001a435 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a418:	83 ec 0c             	sub    esp,0xc
c001a41b:	68 90 b8 02 c0       	push   0xc002b890
c001a420:	e8 18 00 00 00       	call   c001a43d <Krnl::panic(char const*)>
c001a425:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a42b:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a432:	83 c4 10             	add    esp,0x10
c001a435:	89 f0                	mov    eax,esi
c001a437:	5b                   	pop    ebx
c001a438:	5e                   	pop    esi
c001a439:	5f                   	pop    edi
c001a43a:	c2 04 00             	ret    0x4

c001a43d <Krnl::panic(char const*)>:
c001a43d:	55                   	push   ebp
c001a43e:	89 e5                	mov    ebp,esp
c001a440:	53                   	push   ebx
c001a441:	83 ec 0c             	sub    esp,0xc
c001a444:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a447:	fa                   	cli    
c001a448:	c6 05 84 0d 03 c0 01 	mov    BYTE PTR ds:0xc0030d84,0x1
c001a44f:	53                   	push   ebx
c001a450:	c6 05 64 d1 02 c0 00 	mov    BYTE PTR ds:0xc002d164,0x0
c001a457:	68 aa b8 02 c0       	push   0xc002b8aa
c001a45c:	e8 33 89 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001a461:	58                   	pop    eax
c001a462:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a467:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a46d:	e8 77 68 ff ff       	call   c0010ce9 <setActiveTerminal(VgaText*)>
c001a472:	83 c4 0c             	add    esp,0xc
c001a475:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a47a:	6a 01                	push   0x1
c001a47c:	6a 0f                	push   0xf
c001a47e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a484:	e8 91 62 ff ff       	call   c001071a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a489:	58                   	pop    eax
c001a48a:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a48f:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a495:	e8 f0 6a ff ff       	call   c0010f8a <VgaText::clearScreen()>
c001a49a:	58                   	pop    eax
c001a49b:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a4a0:	5a                   	pop    edx
c001a4a1:	68 c3 b8 02 c0       	push   0xc002b8c3
c001a4a6:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a4ac:	e8 57 6c ff ff       	call   c0011108 <VgaText::puts(char const*)>
c001a4b1:	59                   	pop    ecx
c001a4b2:	58                   	pop    eax
c001a4b3:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a4b8:	68 68 b9 02 c0       	push   0xc002b968
c001a4bd:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a4c3:	e8 40 6c ff ff       	call   c0011108 <VgaText::puts(char const*)>
c001a4c8:	58                   	pop    eax
c001a4c9:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a4ce:	5a                   	pop    edx
c001a4cf:	68 df b8 02 c0       	push   0xc002b8df
c001a4d4:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a4da:	e8 29 6c ff ff       	call   c0011108 <VgaText::puts(char const*)>
c001a4df:	59                   	pop    ecx
c001a4e0:	58                   	pop    eax
c001a4e1:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a4e6:	53                   	push   ebx
c001a4e7:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a4ed:	e8 16 6c ff ff       	call   c0011108 <VgaText::puts(char const*)>
c001a4f2:	58                   	pop    eax
c001a4f3:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a4f8:	5a                   	pop    edx
c001a4f9:	68 ff b8 02 c0       	push   0xc002b8ff
c001a4fe:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a504:	e8 ff 6b ff ff       	call   c0011108 <VgaText::puts(char const*)>
c001a509:	a1 80 0d 03 c0       	mov    eax,ds:0xc0030d80
c001a50e:	83 c4 10             	add    esp,0x10
c001a511:	85 c0                	test   eax,eax
c001a513:	74 02                	je     c001a517 <Krnl::panic(char const*)+0xda>
c001a515:	ff d0                	call   eax
c001a517:	83 ec 0c             	sub    esp,0xc
c001a51a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a51d:	e8 fd 2f 00 00       	call   c001d51f <Thr::getDriverNameFromAddress(unsigned long)>
c001a522:	83 c4 10             	add    esp,0x10
c001a525:	89 c3                	mov    ebx,eax
c001a527:	85 c0                	test   eax,eax
c001a529:	0f 84 50 02 00 00    	je     c001a77f <Krnl::panic(char const*)+0x342>
c001a52f:	83 ec 08             	sub    esp,0x8
c001a532:	8b 15 94 17 03 c0    	mov    edx,DWORD PTR ds:0xc0031794
c001a538:	68 a4 b9 02 c0       	push   0xc002b9a4
c001a53d:	ff b2 26 19 00 00    	push   DWORD PTR [edx+0x1926]
c001a543:	e8 c0 6b ff ff       	call   c0011108 <VgaText::puts(char const*)>
c001a548:	58                   	pop    eax
c001a549:	5a                   	pop    edx
c001a54a:	8b 15 94 17 03 c0    	mov    edx,DWORD PTR ds:0xc0031794
c001a550:	68 df b8 02 c0       	push   0xc002b8df
c001a555:	ff b2 26 19 00 00    	push   DWORD PTR [edx+0x1926]
c001a55b:	e8 a8 6b ff ff       	call   c0011108 <VgaText::puts(char const*)>
c001a560:	59                   	pop    ecx
c001a561:	58                   	pop    eax
c001a562:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a567:	53                   	push   ebx
c001a568:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a56e:	e8 95 6b ff ff       	call   c0011108 <VgaText::puts(char const*)>
c001a573:	83 c4 10             	add    esp,0x10
c001a576:	83 ec 08             	sub    esp,0x8
c001a579:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a57e:	68 fe b8 02 c0       	push   0xc002b8fe
c001a583:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a589:	e8 7a 6b ff ff       	call   c0011108 <VgaText::puts(char const*)>
c001a58e:	58                   	pop    eax
c001a58f:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a594:	5a                   	pop    edx
c001a595:	68 fc b9 02 c0       	push   0xc002b9fc
c001a59a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5a0:	e8 63 6b ff ff       	call   c0011108 <VgaText::puts(char const*)>
c001a5a5:	59                   	pop    ecx
c001a5a6:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a5ab:	5b                   	pop    ebx
c001a5ac:	68 3c ba 02 c0       	push   0xc002ba3c
c001a5b1:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5b7:	e8 4c 6b ff ff       	call   c0011108 <VgaText::puts(char const*)>
c001a5bc:	58                   	pop    eax
c001a5bd:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a5c2:	5a                   	pop    edx
c001a5c3:	68 ea b8 02 c0       	push   0xc002b8ea
c001a5c8:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5ce:	e8 35 6b ff ff       	call   c0011108 <VgaText::puts(char const*)>
c001a5d3:	59                   	pop    ecx
c001a5d4:	5b                   	pop    ebx
c001a5d5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a5d8:	68 02 b9 02 c0       	push   0xc002b902
c001a5dd:	e8 b2 87 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001a5e2:	58                   	pop    eax
c001a5e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a5e6:	5a                   	pop    edx
c001a5e7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a5ea:	68 0b b9 02 c0       	push   0xc002b90b
c001a5ef:	e8 a0 87 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001a5f4:	59                   	pop    ecx
c001a5f5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a5f8:	5b                   	pop    ebx
c001a5f9:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5fb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a5fe:	68 14 b9 02 c0       	push   0xc002b914
c001a603:	e8 8c 87 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001a608:	58                   	pop    eax
c001a609:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a60e:	5a                   	pop    edx
c001a60f:	68 80 ba 02 c0       	push   0xc002ba80
c001a614:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a61a:	e8 e9 6a ff ff       	call   c0011108 <VgaText::puts(char const*)>
c001a61f:	59                   	pop    ecx
c001a620:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a625:	5b                   	pop    ebx
c001a626:	68 1d b9 02 c0       	push   0xc002b91d
c001a62b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a631:	e8 d2 6a ff ff       	call   c0011108 <VgaText::puts(char const*)>
c001a636:	0f 20 c0             	mov    eax,cr0
c001a639:	5a                   	pop    edx
c001a63a:	59                   	pop    ecx
c001a63b:	50                   	push   eax
c001a63c:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a641:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a647:	e8 e2 6a ff ff       	call   c001112e <VgaText::putx(unsigned int)>
c001a64c:	5b                   	pop    ebx
c001a64d:	58                   	pop    eax
c001a64e:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a653:	68 27 b9 02 c0       	push   0xc002b927
c001a658:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a65e:	e8 a5 6a ff ff       	call   c0011108 <VgaText::puts(char const*)>
c001a663:	0f 20 d0             	mov    eax,cr2
c001a666:	5a                   	pop    edx
c001a667:	59                   	pop    ecx
c001a668:	50                   	push   eax
c001a669:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a66e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a674:	e8 b5 6a ff ff       	call   c001112e <VgaText::putx(unsigned int)>
c001a679:	5b                   	pop    ebx
c001a67a:	58                   	pop    eax
c001a67b:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a680:	68 31 b9 02 c0       	push   0xc002b931
c001a685:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a68b:	e8 78 6a ff ff       	call   c0011108 <VgaText::puts(char const*)>
c001a690:	0f 20 d8             	mov    eax,cr3
c001a693:	5a                   	pop    edx
c001a694:	59                   	pop    ecx
c001a695:	50                   	push   eax
c001a696:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a69b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6a1:	e8 88 6a ff ff       	call   c001112e <VgaText::putx(unsigned int)>
c001a6a6:	5b                   	pop    ebx
c001a6a7:	58                   	pop    eax
c001a6a8:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a6ad:	68 44 b9 02 c0       	push   0xc002b944
c001a6b2:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6b8:	e8 4b 6a ff ff       	call   c0011108 <VgaText::puts(char const*)>
c001a6bd:	0f 20 e0             	mov    eax,cr4
c001a6c0:	5a                   	pop    edx
c001a6c1:	59                   	pop    ecx
c001a6c2:	50                   	push   eax
c001a6c3:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a6c8:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6ce:	e8 5b 6a ff ff       	call   c001112e <VgaText::putx(unsigned int)>
c001a6d3:	5b                   	pop    ebx
c001a6d4:	58                   	pop    eax
c001a6d5:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a6da:	68 4e b9 02 c0       	push   0xc002b94e
c001a6df:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6e5:	e8 1e 6a ff ff       	call   c0011108 <VgaText::puts(char const*)>
c001a6ea:	5a                   	pop    edx
c001a6eb:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a6f0:	59                   	pop    ecx
c001a6f1:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a6f7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a6fa:	50                   	push   eax
c001a6fb:	e8 2e 6a ff ff       	call   c001112e <VgaText::putx(unsigned int)>
c001a700:	5b                   	pop    ebx
c001a701:	58                   	pop    eax
c001a702:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a707:	68 65 b9 02 c0       	push   0xc002b965
c001a70c:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a712:	e8 f1 69 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c001a717:	5a                   	pop    edx
c001a718:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a71d:	59                   	pop    ecx
c001a71e:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a724:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a727:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a72a:	50                   	push   eax
c001a72b:	e8 fe 69 ff ff       	call   c001112e <VgaText::putx(unsigned int)>
c001a730:	5b                   	pop    ebx
c001a731:	58                   	pop    eax
c001a732:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a737:	68 65 b9 02 c0       	push   0xc002b965
c001a73c:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a742:	e8 c1 69 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c001a747:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a74c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a74f:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a755:	8b 12                	mov    edx,DWORD PTR [edx]
c001a757:	59                   	pop    ecx
c001a758:	5b                   	pop    ebx
c001a759:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a75c:	50                   	push   eax
c001a75d:	e8 cc 69 ff ff       	call   c001112e <VgaText::putx(unsigned int)>
c001a762:	83 c4 10             	add    esp,0x10
c001a765:	b2 fe                	mov    dl,0xfe
c001a767:	e4 60                	in     al,0x60
c001a769:	3c 1c                	cmp    al,0x1c
c001a76b:	74 04                	je     c001a771 <Krnl::panic(char const*)+0x334>
c001a76d:	3c 5a                	cmp    al,0x5a
c001a76f:	75 f6                	jne    c001a767 <Krnl::panic(char const*)+0x32a>
c001a771:	e4 64                	in     al,0x64
c001a773:	a8 02                	test   al,0x2
c001a775:	75 fa                	jne    c001a771 <Krnl::panic(char const*)+0x334>
c001a777:	88 d0                	mov    al,dl
c001a779:	e6 64                	out    0x64,al
c001a77b:	fa                   	cli    
c001a77c:	f4                   	hlt    
c001a77d:	eb e8                	jmp    c001a767 <Krnl::panic(char const*)+0x32a>
c001a77f:	50                   	push   eax
c001a780:	50                   	push   eax
c001a781:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a786:	68 d0 b9 02 c0       	push   0xc002b9d0
c001a78b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a791:	e8 72 69 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c001a796:	58                   	pop    eax
c001a797:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a79c:	5a                   	pop    edx
c001a79d:	68 df b8 02 c0       	push   0xc002b8df
c001a7a2:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7a8:	e8 5b 69 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c001a7ad:	59                   	pop    ecx
c001a7ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a7b3:	5b                   	pop    ebx
c001a7b4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a7b7:	83 c0 0c             	add    eax,0xc
c001a7ba:	50                   	push   eax
c001a7bb:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001a7c0:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7c6:	e8 3d 69 ff ff       	call   c0011108 <VgaText::puts(char const*)>
c001a7cb:	83 c4 10             	add    esp,0x10
c001a7ce:	e9 a3 fd ff ff       	jmp    c001a576 <Krnl::panic(char const*)+0x139>

c001a7d3 <Net::switchEndian16(unsigned short)>:
c001a7d3:	83 ec 04             	sub    esp,0x4
c001a7d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7da:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a7de:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a7e2:	c1 f8 08             	sar    eax,0x8
c001a7e5:	89 c2                	mov    edx,eax
c001a7e7:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a7eb:	c1 e0 08             	shl    eax,0x8
c001a7ee:	09 d0                	or     eax,edx
c001a7f0:	83 c4 04             	add    esp,0x4
c001a7f3:	c3                   	ret    

c001a7f4 <Net::switchEndian32(unsigned int)>:
c001a7f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7f8:	c1 e8 18             	shr    eax,0x18
c001a7fb:	89 c2                	mov    edx,eax
c001a7fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a801:	c1 e0 08             	shl    eax,0x8
c001a804:	25 00 00 ff 00       	and    eax,0xff0000
c001a809:	09 c2                	or     edx,eax
c001a80b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a80f:	c1 e8 08             	shr    eax,0x8
c001a812:	25 00 ff 00 00       	and    eax,0xff00
c001a817:	09 c2                	or     edx,eax
c001a819:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a81d:	c1 e0 18             	shl    eax,0x18
c001a820:	09 d0                	or     eax,edx
c001a822:	c3                   	ret    

c001a823 <Net::crc32Calc(unsigned char*, int)>:
c001a823:	83 ec 10             	sub    esp,0x10
c001a826:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a82b:	75 07                	jne    c001a834 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a82d:	b8 00 00 00 00       	mov    eax,0x0
c001a832:	eb 7c                	jmp    c001a8b0 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a834:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a839:	7f 07                	jg     c001a842 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a83b:	b8 00 00 00 00       	mov    eax,0x0
c001a840:	eb 6e                	jmp    c001a8b0 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a842:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a84a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a852:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a856:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a85a:	7d 4e                	jge    c001a8aa <Net::crc32Calc(unsigned char*, int)+0x87>
c001a85c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a864:	01 d0                	add    eax,edx
c001a866:	8a 00                	mov    al,BYTE PTR [eax]
c001a868:	0f b6 c0             	movzx  eax,al
c001a86b:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a86f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a877:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a87c:	7f 26                	jg     c001a8a4 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a87e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a882:	83 e0 01             	and    eax,0x1
c001a885:	74 0d                	je     c001a894 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a887:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a88b:	d1 e8                	shr    eax,1
c001a88d:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a892:	eb 06                	jmp    c001a89a <Net::crc32Calc(unsigned char*, int)+0x77>
c001a894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a898:	d1 e8                	shr    eax,1
c001a89a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a89e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a8a2:	eb d3                	jmp    c001a877 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a8a4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a8a8:	eb a8                	jmp    c001a852 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a8aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8ae:	f7 d0                	not    eax
c001a8b0:	83 c4 10             	add    esp,0x10
c001a8b3:	c3                   	ret    

c001a8b4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a8b4:	83 ec 1c             	sub    esp,0x1c
c001a8b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a8bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a8bf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a8c7:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a8cc:	7f 14                	jg     c001a8e2 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a8ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a8d2:	8d 50 01             	lea    edx,[eax+0x1]
c001a8d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a8d9:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a8dc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a8e0:	eb e5                	jmp    c001a8c7 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001a8e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a8e6:	8d 50 01             	lea    edx,[eax+0x1]
c001a8e9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a8ed:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a8f0:	83 ec 04             	sub    esp,0x4
c001a8f3:	6a 06                	push   0x6
c001a8f5:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a8f9:	50                   	push   eax
c001a8fa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a8fe:	e8 41 5e fe ff       	call   c0000744 <memcpy>
c001a903:	83 c4 10             	add    esp,0x10
c001a906:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a90b:	83 ec 04             	sub    esp,0x4
c001a90e:	6a 06                	push   0x6
c001a910:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a914:	50                   	push   eax
c001a915:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a919:	e8 26 5e fe ff       	call   c0000744 <memcpy>
c001a91e:	83 c4 10             	add    esp,0x10
c001a921:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a926:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a92a:	0f b7 c0             	movzx  eax,ax
c001a92d:	c1 f8 08             	sar    eax,0x8
c001a930:	89 c1                	mov    ecx,eax
c001a932:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a936:	8d 50 01             	lea    edx,[eax+0x1]
c001a939:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a93d:	88 ca                	mov    dl,cl
c001a93f:	88 10                	mov    BYTE PTR [eax],dl
c001a941:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a945:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a949:	8d 48 01             	lea    ecx,[eax+0x1]
c001a94c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001a950:	88 10                	mov    BYTE PTR [eax],dl
c001a952:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a95a:	83 ec 04             	sub    esp,0x4
c001a95d:	52                   	push   edx
c001a95e:	50                   	push   eax
c001a95f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a963:	e8 dc 5d fe ff       	call   c0000744 <memcpy>
c001a968:	83 c4 10             	add    esp,0x10
c001a96b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a96f:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001a973:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a977:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001a97b:	83 ec 08             	sub    esp,0x8
c001a97e:	50                   	push   eax
c001a97f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a983:	e8 9b fe ff ff       	call   c001a823 <Net::crc32Calc(unsigned char*, int)>
c001a988:	83 c4 10             	add    esp,0x10
c001a98b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a98f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a993:	c1 e8 18             	shr    eax,0x18
c001a996:	89 c1                	mov    ecx,eax
c001a998:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a99c:	8d 50 01             	lea    edx,[eax+0x1]
c001a99f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a9a3:	88 ca                	mov    dl,cl
c001a9a5:	88 10                	mov    BYTE PTR [eax],dl
c001a9a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9ab:	c1 e8 10             	shr    eax,0x10
c001a9ae:	89 c1                	mov    ecx,eax
c001a9b0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9b4:	8d 50 01             	lea    edx,[eax+0x1]
c001a9b7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a9bb:	88 ca                	mov    dl,cl
c001a9bd:	88 10                	mov    BYTE PTR [eax],dl
c001a9bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9c3:	c1 e8 08             	shr    eax,0x8
c001a9c6:	89 c1                	mov    ecx,eax
c001a9c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9cc:	8d 50 01             	lea    edx,[eax+0x1]
c001a9cf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a9d3:	88 ca                	mov    dl,cl
c001a9d5:	88 10                	mov    BYTE PTR [eax],dl
c001a9d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9db:	8d 50 01             	lea    edx,[eax+0x1]
c001a9de:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a9e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a9e6:	88 10                	mov    BYTE PTR [eax],dl
c001a9e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a9ec:	83 c4 1c             	add    esp,0x1c
c001a9ef:	c3                   	ret    

c001a9f0 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a9f0:	83 ec 2c             	sub    esp,0x2c
c001a9f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a9f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a9fb:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001aa00:	83 ec 04             	sub    esp,0x4
c001aa03:	6a 06                	push   0x6
c001aa05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aa09:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aa0d:	83 c0 0e             	add    eax,0xe
c001aa10:	50                   	push   eax
c001aa11:	e8 2e 5d fe ff       	call   c0000744 <memcpy>
c001aa16:	83 c4 10             	add    esp,0x10
c001aa19:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001aa1e:	83 ec 04             	sub    esp,0x4
c001aa21:	6a 06                	push   0x6
c001aa23:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aa27:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aa2b:	83 c0 08             	add    eax,0x8
c001aa2e:	50                   	push   eax
c001aa2f:	e8 10 5d fe ff       	call   c0000744 <memcpy>
c001aa34:	83 c4 10             	add    esp,0x10
c001aa37:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001aa3c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa40:	8d 50 01             	lea    edx,[eax+0x1]
c001aa43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aa47:	8a 00                	mov    al,BYTE PTR [eax]
c001aa49:	0f b6 c0             	movzx  eax,al
c001aa4c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001aa51:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa55:	8d 50 01             	lea    edx,[eax+0x1]
c001aa58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aa5c:	8a 00                	mov    al,BYTE PTR [eax]
c001aa5e:	0f b6 c0             	movzx  eax,al
c001aa61:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001aa66:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001aa6b:	c1 e0 08             	shl    eax,0x8
c001aa6e:	89 c2                	mov    edx,eax
c001aa70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aa74:	09 d0                	or     eax,edx
c001aa76:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aa7a:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001aa7e:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001aa83:	75 3a                	jne    c001aabf <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001aa85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aa89:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aa8c:	66 3d dc 05          	cmp    ax,0x5dc
c001aa90:	77 10                	ja     c001aaa2 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001aa92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aa96:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aa99:	0f b7 c0             	movzx  eax,ax
c001aa9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001aaa0:	eb 1d                	jmp    c001aabf <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001aaa2:	83 ec 0c             	sub    esp,0xc
c001aaa5:	68 a8 ba 02 c0       	push   0xc002baa8
c001aaaa:	e8 e5 82 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001aaaf:	83 c4 10             	add    esp,0x10
c001aab2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aab6:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001aaba:	e9 c0 00 00 00       	jmp    c001ab7f <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001aabf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001aac3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aac7:	8b 00                	mov    eax,DWORD PTR [eax]
c001aac9:	83 ec 04             	sub    esp,0x4
c001aacc:	52                   	push   edx
c001aacd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aad1:	50                   	push   eax
c001aad2:	e8 6d 5c fe ff       	call   c0000744 <memcpy>
c001aad7:	83 c4 10             	add    esp,0x10
c001aada:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aade:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001aae2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aae6:	8d 50 01             	lea    edx,[eax+0x1]
c001aae9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aaed:	8a 00                	mov    al,BYTE PTR [eax]
c001aaef:	0f b6 c0             	movzx  eax,al
c001aaf2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aaf6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aafa:	8d 50 01             	lea    edx,[eax+0x1]
c001aafd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab01:	8a 00                	mov    al,BYTE PTR [eax]
c001ab03:	0f b6 c0             	movzx  eax,al
c001ab06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ab0a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab0e:	8d 50 01             	lea    edx,[eax+0x1]
c001ab11:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab15:	8a 00                	mov    al,BYTE PTR [eax]
c001ab17:	0f b6 c0             	movzx  eax,al
c001ab1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab1e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab22:	8d 50 01             	lea    edx,[eax+0x1]
c001ab25:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab29:	8a 00                	mov    al,BYTE PTR [eax]
c001ab2b:	0f b6 c0             	movzx  eax,al
c001ab2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab36:	c1 e0 18             	shl    eax,0x18
c001ab39:	89 c2                	mov    edx,eax
c001ab3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab3f:	c1 e0 10             	shl    eax,0x10
c001ab42:	09 c2                	or     edx,eax
c001ab44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab48:	c1 e0 08             	shl    eax,0x8
c001ab4b:	09 d0                	or     eax,edx
c001ab4d:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ab51:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab55:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab59:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ab5d:	83 e8 04             	sub    eax,0x4
c001ab60:	83 ec 08             	sub    esp,0x8
c001ab63:	50                   	push   eax
c001ab64:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ab68:	e8 b6 fc ff ff       	call   c001a823 <Net::crc32Calc(unsigned char*, int)>
c001ab6d:	83 c4 10             	add    esp,0x10
c001ab70:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ab74:	0f 94 c2             	sete   dl
c001ab77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ab7b:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ab7e:	90                   	nop
c001ab7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ab83:	83 c4 2c             	add    esp,0x2c
c001ab86:	c2 04 00             	ret    0x4

c001ab89 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ab89:	55                   	push   ebp
c001ab8a:	57                   	push   edi
c001ab8b:	56                   	push   esi
c001ab8c:	53                   	push   ebx
c001ab8d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ab93:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ab9a:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ab9c:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ab9f:	80 fb 40             	cmp    bl,0x40
c001aba2:	75 1b                	jne    c001abbf <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001aba4:	8a 16                	mov    dl,BYTE PTR [esi]
c001aba6:	84 d2                	test   dl,dl
c001aba8:	0f 84 f1 00 00 00    	je     c001ac9f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001abae:	8d 46 01             	lea    eax,[esi+0x1]
c001abb1:	80 fa 3a             	cmp    dl,0x3a
c001abb4:	74 04                	je     c001abba <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001abb6:	89 c6                	mov    esi,eax
c001abb8:	eb ea                	jmp    c001aba4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001abba:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001abbd:	89 c6                	mov    esi,eax
c001abbf:	50                   	push   eax
c001abc0:	6a 40                	push   0x40
c001abc2:	6a 00                	push   0x0
c001abc4:	8d 44 24 24          	lea    eax,[esp+0x24]
c001abc8:	50                   	push   eax
c001abc9:	e8 aa 5b fe ff       	call   c0000778 <memset>
c001abce:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001abd5:	31 c0                	xor    eax,eax
c001abd7:	83 c4 10             	add    esp,0x10
c001abda:	8a 0f                	mov    cl,BYTE PTR [edi]
c001abdc:	84 c9                	test   cl,cl
c001abde:	0f 84 bb 00 00 00    	je     c001ac9f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001abe4:	3d c7 00 00 00       	cmp    eax,0xc7
c001abe9:	0f 8f b0 00 00 00    	jg     c001ac9f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001abef:	80 f9 0a             	cmp    cl,0xa
c001abf2:	0f 85 98 00 00 00    	jne    c001ac90 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001abf8:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001abfd:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ac01:	a8 df                	test   al,0xdf
c001ac03:	0f 94 c1             	sete   cl
c001ac06:	3c 23                	cmp    al,0x23
c001ac08:	0f 94 c2             	sete   dl
c001ac0b:	08 d1                	or     cl,dl
c001ac0d:	75 4a                	jne    c001ac59 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac0f:	8d 50 f7             	lea    edx,[eax-0x9]
c001ac12:	80 fa 01             	cmp    dl,0x1
c001ac15:	76 42                	jbe    c001ac59 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac17:	3c 5b                	cmp    al,0x5b
c001ac19:	75 42                	jne    c001ac5d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ac1b:	80 fb 40             	cmp    bl,0x40
c001ac1e:	75 39                	jne    c001ac59 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac20:	83 ec 0c             	sub    esp,0xc
c001ac23:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ac27:	52                   	push   edx
c001ac28:	e8 67 5b fe ff       	call   c0000794 <strlen>
c001ac2d:	83 c4 10             	add    esp,0x10
c001ac30:	83 f8 3f             	cmp    eax,0x3f
c001ac33:	77 6a                	ja     c001ac9f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac35:	50                   	push   eax
c001ac36:	50                   	push   eax
c001ac37:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ac3b:	52                   	push   edx
c001ac3c:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac40:	52                   	push   edx
c001ac41:	e8 ee 5b fe ff       	call   c0000834 <strcpy>
c001ac46:	58                   	pop    eax
c001ac47:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac4b:	52                   	push   edx
c001ac4c:	e8 43 5b fe ff       	call   c0000794 <strlen>
c001ac51:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ac56:	83 c4 10             	add    esp,0x10
c001ac59:	31 d2                	xor    edx,edx
c001ac5b:	eb 3a                	jmp    c001ac97 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ac5d:	80 fb 40             	cmp    bl,0x40
c001ac60:	74 06                	je     c001ac68 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ac62:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ac66:	eb 20                	jmp    c001ac88 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ac68:	50                   	push   eax
c001ac69:	50                   	push   eax
c001ac6a:	55                   	push   ebp
c001ac6b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ac6f:	50                   	push   eax
c001ac70:	e8 4b 5c fe ff       	call   c00008c0 <strcmp>
c001ac75:	83 c4 10             	add    esp,0x10
c001ac78:	85 c0                	test   eax,eax
c001ac7a:	75 dd                	jne    c001ac59 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac7c:	eb e4                	jmp    c001ac62 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ac7e:	8d 50 01             	lea    edx,[eax+0x1]
c001ac81:	80 f9 3d             	cmp    cl,0x3d
c001ac84:	74 1d                	je     c001aca3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ac86:	89 d0                	mov    eax,edx
c001ac88:	8a 08                	mov    cl,BYTE PTR [eax]
c001ac8a:	84 c9                	test   cl,cl
c001ac8c:	75 f0                	jne    c001ac7e <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ac8e:	eb 0f                	jmp    c001ac9f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac90:	8d 50 01             	lea    edx,[eax+0x1]
c001ac93:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ac97:	47                   	inc    edi
c001ac98:	89 d0                	mov    eax,edx
c001ac9a:	e9 3b ff ff ff       	jmp    c001abda <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ac9f:	31 c0                	xor    eax,eax
c001aca1:	eb 33                	jmp    c001acd6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001aca3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aca7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001acaa:	50                   	push   eax
c001acab:	50                   	push   eax
c001acac:	8d 44 24 60          	lea    eax,[esp+0x60]
c001acb0:	50                   	push   eax
c001acb1:	56                   	push   esi
c001acb2:	e8 09 5c fe ff       	call   c00008c0 <strcmp>
c001acb7:	83 c4 10             	add    esp,0x10
c001acba:	85 c0                	test   eax,eax
c001acbc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001acc0:	75 97                	jne    c001ac59 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acc2:	51                   	push   ecx
c001acc3:	51                   	push   ecx
c001acc4:	52                   	push   edx
c001acc5:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001accc:	e8 63 5b fe ff       	call   c0000834 <strcpy>
c001acd1:	83 c4 10             	add    esp,0x10
c001acd4:	b0 01                	mov    al,0x1
c001acd6:	81 c4 2c 01 00 00    	add    esp,0x12c
c001acdc:	5b                   	pop    ebx
c001acdd:	5e                   	pop    esi
c001acde:	5f                   	pop    edi
c001acdf:	5d                   	pop    ebp
c001ace0:	c3                   	ret    

c001ace1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ace1:	57                   	push   edi
c001ace2:	56                   	push   esi
c001ace3:	53                   	push   ebx
c001ace4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001acea:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001acf1:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001acf8:	53                   	push   ebx
c001acf9:	e8 96 5a fe ff       	call   c0000794 <strlen>
c001acfe:	89 34 24             	mov    DWORD PTR [esp],esi
c001ad01:	89 c7                	mov    edi,eax
c001ad03:	e8 8c 5a fe ff       	call   c0000794 <strlen>
c001ad08:	83 c4 10             	add    esp,0x10
c001ad0b:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ad0f:	3d ff 00 00 00       	cmp    eax,0xff
c001ad14:	0f 87 d3 00 00 00    	ja     c001aded <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ad1a:	57                   	push   edi
c001ad1b:	57                   	push   edi
c001ad1c:	56                   	push   esi
c001ad1d:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ad21:	56                   	push   esi
c001ad22:	e8 0d 5b fe ff       	call   c0000834 <strcpy>
c001ad27:	58                   	pop    eax
c001ad28:	5a                   	pop    edx
c001ad29:	68 08 c0 02 c0       	push   0xc002c008
c001ad2e:	56                   	push   esi
c001ad2f:	e8 40 5c fe ff       	call   c0000974 <strcat>
c001ad34:	59                   	pop    ecx
c001ad35:	5f                   	pop    edi
c001ad36:	53                   	push   ebx
c001ad37:	56                   	push   esi
c001ad38:	e8 37 5c fe ff       	call   c0000974 <strcat>
c001ad3d:	58                   	pop    eax
c001ad3e:	5a                   	pop    edx
c001ad3f:	68 f4 ba 02 c0       	push   0xc002baf4
c001ad44:	56                   	push   esi
c001ad45:	e8 2a 5c fe ff       	call   c0000974 <strcat>
c001ad4a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ad51:	e8 ea 4a ff ff       	call   c000f840 <malloc>
c001ad56:	83 c4 0c             	add    esp,0xc
c001ad59:	89 c3                	mov    ebx,eax
c001ad5b:	ff 35 94 17 03 c0    	push   DWORD PTR ds:0xc0031794
c001ad61:	56                   	push   esi
c001ad62:	50                   	push   eax
c001ad63:	e8 84 85 ff ff       	call   c00132ec <File::File(char const*, Process*)>
c001ad68:	83 c4 10             	add    esp,0x10
c001ad6b:	85 db                	test   ebx,ebx
c001ad6d:	74 7e                	je     c001aded <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ad6f:	51                   	push   ecx
c001ad70:	51                   	push   ecx
c001ad71:	6a 01                	push   0x1
c001ad73:	53                   	push   ebx
c001ad74:	e8 d7 85 ff ff       	call   c0013350 <File::open(FileOpenMode)>
c001ad79:	83 c4 10             	add    esp,0x10
c001ad7c:	85 c0                	test   eax,eax
c001ad7e:	74 08                	je     c001ad88 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001ad80:	83 ec 0c             	sub    esp,0xc
c001ad83:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad85:	53                   	push   ebx
c001ad86:	eb 5f                	jmp    c001ade7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001ad88:	52                   	push   edx
c001ad89:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ad8d:	50                   	push   eax
c001ad8e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ad92:	50                   	push   eax
c001ad93:	53                   	push   ebx
c001ad94:	e8 63 88 ff ff       	call   c00135fc <File::stat(unsigned long long*, bool*)>
c001ad99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ad9d:	83 c4 10             	add    esp,0x10
c001ada0:	89 c1                	mov    ecx,eax
c001ada2:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001ada6:	74 31                	je     c001add9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ada8:	83 ec 0c             	sub    esp,0xc
c001adab:	50                   	push   eax
c001adac:	e8 8f 4a ff ff       	call   c000f840 <malloc>
c001adb1:	89 c6                	mov    esi,eax
c001adb3:	58                   	pop    eax
c001adb4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adb6:	8d 54 24 20          	lea    edx,[esp+0x20]
c001adba:	52                   	push   edx
c001adbb:	56                   	push   esi
c001adbc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001adc0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001adc4:	53                   	push   ebx
c001adc5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001adc8:	83 c4 20             	add    esp,0x20
c001adcb:	85 c0                	test   eax,eax
c001adcd:	75 0a                	jne    c001add9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001adcf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001add3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001add7:	74 18                	je     c001adf1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001add9:	83 ec 0c             	sub    esp,0xc
c001addc:	53                   	push   ebx
c001addd:	e8 cc 85 ff ff       	call   c00133ae <File::close()>
c001ade2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ade4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ade7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001adea:	83 c4 10             	add    esp,0x10
c001aded:	31 c0                	xor    eax,eax
c001adef:	eb 3b                	jmp    c001ae2c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001adf1:	83 ec 0c             	sub    esp,0xc
c001adf4:	53                   	push   ebx
c001adf5:	e8 b4 85 ff ff       	call   c00133ae <File::close()>
c001adfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adfc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001adff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae02:	83 c4 0c             	add    esp,0xc
c001ae05:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ae0c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ae13:	56                   	push   esi
c001ae14:	e8 70 fd ff ff       	call   c001ab89 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001ae19:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae1c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ae20:	e8 2b 4a ff ff       	call   c000f850 <free>
c001ae25:	83 c4 10             	add    esp,0x10
c001ae28:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ae2c:	81 c4 20 01 00 00    	add    esp,0x120
c001ae32:	5b                   	pop    ebx
c001ae33:	5e                   	pop    esi
c001ae34:	5f                   	pop    edi
c001ae35:	c3                   	ret    

c001ae36 <Reg::getLine(char*, char*, char*)>:
c001ae36:	57                   	push   edi
c001ae37:	56                   	push   esi
c001ae38:	53                   	push   ebx
c001ae39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae3d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ae41:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ae45:	57                   	push   edi
c001ae46:	56                   	push   esi
c001ae47:	53                   	push   ebx
c001ae48:	68 f9 ba 02 c0       	push   0xc002baf9
c001ae4d:	e8 8f fe ff ff       	call   c001ace1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ae52:	83 c4 10             	add    esp,0x10
c001ae55:	84 c0                	test   al,al
c001ae57:	75 10                	jne    c001ae69 <Reg::getLine(char*, char*, char*)+0x33>
c001ae59:	57                   	push   edi
c001ae5a:	56                   	push   esi
c001ae5b:	53                   	push   ebx
c001ae5c:	68 1e bb 02 c0       	push   0xc002bb1e
c001ae61:	e8 7b fe ff ff       	call   c001ace1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ae66:	83 c4 10             	add    esp,0x10
c001ae69:	5b                   	pop    ebx
c001ae6a:	5e                   	pop    esi
c001ae6b:	5f                   	pop    edi
c001ae6c:	c3                   	ret    

c001ae6d <Reg::readInt(char*, char*, int*)>:
c001ae6d:	55                   	push   ebp
c001ae6e:	57                   	push   edi
c001ae6f:	56                   	push   esi
c001ae70:	53                   	push   ebx
c001ae71:	81 ec f0 00 00 00    	sub    esp,0xf0
c001ae77:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001ae7b:	57                   	push   edi
c001ae7c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ae83:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ae8a:	e8 a7 ff ff ff       	call   c001ae36 <Reg::getLine(char*, char*, char*)>
c001ae8f:	83 c4 10             	add    esp,0x10
c001ae92:	84 c0                	test   al,al
c001ae94:	0f 84 b3 00 00 00    	je     c001af4d <Reg::readInt(char*, char*, int*)+0xe0>
c001ae9a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001ae9e:	80 fa 2b             	cmp    dl,0x2b
c001aea1:	74 0c                	je     c001aeaf <Reg::readInt(char*, char*, int*)+0x42>
c001aea3:	80 fa 2d             	cmp    dl,0x2d
c001aea6:	75 0e                	jne    c001aeb6 <Reg::readInt(char*, char*, int*)+0x49>
c001aea8:	ba 01 00 00 00       	mov    edx,0x1
c001aead:	eb 0b                	jmp    c001aeba <Reg::readInt(char*, char*, int*)+0x4d>
c001aeaf:	ba 01 00 00 00       	mov    edx,0x1
c001aeb4:	eb 02                	jmp    c001aeb8 <Reg::readInt(char*, char*, int*)+0x4b>
c001aeb6:	31 d2                	xor    edx,edx
c001aeb8:	31 c0                	xor    eax,eax
c001aeba:	be 0a 00 00 00       	mov    esi,0xa
c001aebf:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001aec4:	75 20                	jne    c001aee6 <Reg::readInt(char*, char*, int*)+0x79>
c001aec6:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001aeca:	80 f9 78             	cmp    cl,0x78
c001aecd:	75 0a                	jne    c001aed9 <Reg::readInt(char*, char*, int*)+0x6c>
c001aecf:	83 c2 02             	add    edx,0x2
c001aed2:	be 10 00 00 00       	mov    esi,0x10
c001aed7:	eb 0d                	jmp    c001aee6 <Reg::readInt(char*, char*, int*)+0x79>
c001aed9:	80 f9 62             	cmp    cl,0x62
c001aedc:	75 08                	jne    c001aee6 <Reg::readInt(char*, char*, int*)+0x79>
c001aede:	83 c2 02             	add    edx,0x2
c001aee1:	be 02 00 00 00       	mov    esi,0x2
c001aee6:	01 d7                	add    edi,edx
c001aee8:	31 d2                	xor    edx,edx
c001aeea:	8a 1f                	mov    bl,BYTE PTR [edi]
c001aeec:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001aef0:	80 fb 0d             	cmp    bl,0xd
c001aef3:	0f 94 c3             	sete   bl
c001aef6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001aefb:	0f 94 c1             	sete   cl
c001aefe:	08 cb                	or     bl,cl
c001af00:	75 3a                	jne    c001af3c <Reg::readInt(char*, char*, int*)+0xcf>
c001af02:	0f af d6             	imul   edx,esi
c001af05:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001af0a:	83 fe 10             	cmp    esi,0x10
c001af0d:	75 26                	jne    c001af35 <Reg::readInt(char*, char*, int*)+0xc8>
c001af0f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001af13:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001af16:	89 e9                	mov    ecx,ebp
c001af18:	80 f9 05             	cmp    cl,0x5
c001af1b:	77 06                	ja     c001af23 <Reg::readInt(char*, char*, int*)+0xb6>
c001af1d:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001af21:	eb 16                	jmp    c001af39 <Reg::readInt(char*, char*, int*)+0xcc>
c001af23:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001af27:	83 e9 61             	sub    ecx,0x61
c001af2a:	80 f9 05             	cmp    cl,0x5
c001af2d:	77 06                	ja     c001af35 <Reg::readInt(char*, char*, int*)+0xc8>
c001af2f:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001af33:	eb 04                	jmp    c001af39 <Reg::readInt(char*, char*, int*)+0xcc>
c001af35:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001af39:	47                   	inc    edi
c001af3a:	eb ae                	jmp    c001aeea <Reg::readInt(char*, char*, int*)+0x7d>
c001af3c:	84 c0                	test   al,al
c001af3e:	74 02                	je     c001af42 <Reg::readInt(char*, char*, int*)+0xd5>
c001af40:	f7 da                	neg    edx
c001af42:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001af49:	89 10                	mov    DWORD PTR [eax],edx
c001af4b:	88 d8                	mov    al,bl
c001af4d:	81 c4 ec 00 00 00    	add    esp,0xec
c001af53:	5b                   	pop    ebx
c001af54:	5e                   	pop    esi
c001af55:	5f                   	pop    edi
c001af56:	5d                   	pop    ebp
c001af57:	c3                   	ret    

c001af58 <Reg::readString(char*, char*, char*, int)>:
c001af58:	57                   	push   edi
c001af59:	56                   	push   esi
c001af5a:	53                   	push   ebx
c001af5b:	81 ec d4 00 00 00    	sub    esp,0xd4
c001af61:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001af68:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001af6c:	57                   	push   edi
c001af6d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001af74:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001af7b:	e8 b6 fe ff ff       	call   c001ae36 <Reg::getLine(char*, char*, char*)>
c001af80:	83 c4 10             	add    esp,0x10
c001af83:	89 c6                	mov    esi,eax
c001af85:	84 c0                	test   al,al
c001af87:	74 44                	je     c001afcd <Reg::readString(char*, char*, char*, int)+0x75>
c001af89:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001af90:	31 c0                	xor    eax,eax
c001af92:	4a                   	dec    edx
c001af93:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001af96:	84 c9                	test   cl,cl
c001af98:	74 0f                	je     c001afa9 <Reg::readString(char*, char*, char*, int)+0x51>
c001af9a:	39 c2                	cmp    edx,eax
c001af9c:	7e 0b                	jle    c001afa9 <Reg::readString(char*, char*, char*, int)+0x51>
c001af9e:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001afa1:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001afa6:	40                   	inc    eax
c001afa7:	eb ea                	jmp    c001af93 <Reg::readString(char*, char*, char*, int)+0x3b>
c001afa9:	83 ec 0c             	sub    esp,0xc
c001afac:	53                   	push   ebx
c001afad:	e8 e2 57 fe ff       	call   c0000794 <strlen>
c001afb2:	83 c4 10             	add    esp,0x10
c001afb5:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001afba:	75 11                	jne    c001afcd <Reg::readString(char*, char*, char*, int)+0x75>
c001afbc:	83 ec 0c             	sub    esp,0xc
c001afbf:	53                   	push   ebx
c001afc0:	e8 cf 57 fe ff       	call   c0000794 <strlen>
c001afc5:	83 c4 10             	add    esp,0x10
c001afc8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001afcd:	81 c4 d0 00 00 00    	add    esp,0xd0
c001afd3:	89 f0                	mov    eax,esi
c001afd5:	5b                   	pop    ebx
c001afd6:	5e                   	pop    esi
c001afd7:	5f                   	pop    edi
c001afd8:	c3                   	ret    

c001afd9 <Reg::readBool(char*, char*, bool*)>:
c001afd9:	83 ec 20             	sub    esp,0x20
c001afdc:	8d 44 24 10          	lea    eax,[esp+0x10]
c001afe0:	50                   	push   eax
c001afe1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afe5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afe9:	e8 7f fe ff ff       	call   c001ae6d <Reg::readInt(char*, char*, int*)>
c001afee:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001aff3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001aff7:	0f 95 02             	setne  BYTE PTR [edx]
c001affa:	83 c4 2c             	add    esp,0x2c
c001affd:	c3                   	ret    

c001affe <Reg::readBoolWithDefault(char*, char*, bool)>:
c001affe:	53                   	push   ebx
c001afff:	83 ec 1c             	sub    esp,0x1c
c001b002:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b006:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b00a:	50                   	push   eax
c001b00b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b00f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b013:	e8 c1 ff ff ff       	call   c001afd9 <Reg::readBool(char*, char*, bool*)>
c001b018:	83 c4 10             	add    esp,0x10
c001b01b:	84 c0                	test   al,al
c001b01d:	74 04                	je     c001b023 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b01f:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b023:	88 d8                	mov    al,bl
c001b025:	83 c4 18             	add    esp,0x18
c001b028:	5b                   	pop    ebx
c001b029:	c3                   	ret    

c001b02a <Reg::readIntWithDefault(char*, char*, int)>:
c001b02a:	53                   	push   ebx
c001b02b:	83 ec 1c             	sub    esp,0x1c
c001b02e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b032:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b036:	50                   	push   eax
c001b037:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b03b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b03f:	e8 29 fe ff ff       	call   c001ae6d <Reg::readInt(char*, char*, int*)>
c001b044:	83 c4 10             	add    esp,0x10
c001b047:	84 c0                	test   al,al
c001b049:	74 04                	je     c001b04f <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b04b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b04f:	89 d8                	mov    eax,ebx
c001b051:	83 c4 18             	add    esp,0x18
c001b054:	5b                   	pop    ebx
c001b055:	c3                   	ret    

c001b056 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b056:	57                   	push   edi
c001b057:	56                   	push   esi
c001b058:	53                   	push   ebx
c001b059:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b05d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b061:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b065:	56                   	push   esi
c001b066:	53                   	push   ebx
c001b067:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b06b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b06f:	e8 e4 fe ff ff       	call   c001af58 <Reg::readString(char*, char*, char*, int)>
c001b074:	83 c4 10             	add    esp,0x10
c001b077:	84 c0                	test   al,al
c001b079:	75 1b                	jne    c001b096 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b07b:	50                   	push   eax
c001b07c:	56                   	push   esi
c001b07d:	4e                   	dec    esi
c001b07e:	6a 00                	push   0x0
c001b080:	53                   	push   ebx
c001b081:	e8 f2 56 fe ff       	call   c0000778 <memset>
c001b086:	83 c4 0c             	add    esp,0xc
c001b089:	56                   	push   esi
c001b08a:	57                   	push   edi
c001b08b:	53                   	push   ebx
c001b08c:	89 fb                	mov    ebx,edi
c001b08e:	e8 b1 56 fe ff       	call   c0000744 <memcpy>
c001b093:	83 c4 10             	add    esp,0x10
c001b096:	89 d8                	mov    eax,ebx
c001b098:	5b                   	pop    ebx
c001b099:	5e                   	pop    esi
c001b09a:	5f                   	pop    edi
c001b09b:	c3                   	ret    

c001b09c <Sys::eject(regs*)>:
c001b09c:	83 ec 0c             	sub    esp,0xc
c001b09f:	83 ca ff             	or     edx,0xffffffff
c001b0a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0a6:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b0a9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b0ae:	83 e9 41             	sub    ecx,0x41
c001b0b1:	83 f9 19             	cmp    ecx,0x19
c001b0b4:	77 18                	ja     c001b0ce <Sys::eject(regs*)+0x32>
c001b0b6:	8b 0c 8d 40 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17c0]
c001b0bd:	85 c9                	test   ecx,ecx
c001b0bf:	74 0d                	je     c001b0ce <Sys::eject(regs*)+0x32>
c001b0c1:	83 ec 0c             	sub    esp,0xc
c001b0c4:	51                   	push   ecx
c001b0c5:	e8 74 b4 ff ff       	call   c001653e <LogicalDisk::eject()>
c001b0ca:	83 c4 10             	add    esp,0x10
c001b0cd:	99                   	cdq    
c001b0ce:	83 c4 0c             	add    esp,0xc
c001b0d1:	c3                   	ret    

c001b0d2 <Sys::exit(regs*)>:
c001b0d2:	83 ec 18             	sub    esp,0x18
c001b0d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0d9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b0dc:	e8 99 35 00 00       	call   c001e67a <terminateTask(int)>
c001b0e1:	83 c8 ff             	or     eax,0xffffffff
c001b0e4:	83 c4 1c             	add    esp,0x1c
c001b0e7:	89 c2                	mov    edx,eax
c001b0e9:	c3                   	ret    

c001b0ea <Sys::getCwd(regs*)>:
c001b0ea:	83 ec 10             	sub    esp,0x10
c001b0ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b0f1:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b0f4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b0f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0fc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b0ff:	e8 ea 7f ff ff       	call   c00130ee <Fs::getcwd(Process*, char*, int)>
c001b104:	83 c4 1c             	add    esp,0x1c
c001b107:	99                   	cdq    
c001b108:	c3                   	ret    

c001b109 <Sys::getPID(regs*)>:
c001b109:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b10e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b111:	8b 00                	mov    eax,DWORD PTR [eax]
c001b113:	99                   	cdq    
c001b114:	c3                   	ret    

c001b115 <Sys::getRAMData(regs*)>:
c001b115:	8b 0d 74 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e274
c001b11b:	6b 05 70 e2 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e270,0x64
c001b122:	99                   	cdq    
c001b123:	f7 f9                	idiv   ecx
c001b125:	c1 e0 18             	shl    eax,0x18
c001b128:	09 c8                	or     eax,ecx
c001b12a:	99                   	cdq    
c001b12b:	c3                   	ret    

c001b12c <Sys::loadDLL(regs*)>:
c001b12c:	56                   	push   esi
c001b12d:	53                   	push   ebx
c001b12e:	31 d2                	xor    edx,edx
c001b130:	51                   	push   ecx
c001b131:	b8 01 00 00 00       	mov    eax,0x1
c001b136:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b13a:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b13e:	0f 84 8c 00 00 00    	je     c001b1d0 <Sys::loadDLL(regs*)+0xa4>
c001b144:	83 ec 0c             	sub    esp,0xc
c001b147:	68 14 01 00 00       	push   0x114
c001b14c:	e8 ef 46 ff ff       	call   c000f840 <malloc>
c001b151:	83 c4 0c             	add    esp,0xc
c001b154:	89 c3                	mov    ebx,eax
c001b156:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b15b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b15e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b161:	53                   	push   ebx
c001b162:	e8 85 81 ff ff       	call   c00132ec <File::File(char const*, Process*)>
c001b167:	83 c4 10             	add    esp,0x10
c001b16a:	31 d2                	xor    edx,edx
c001b16c:	b8 02 00 00 00       	mov    eax,0x2
c001b171:	85 db                	test   ebx,ebx
c001b173:	74 5b                	je     c001b1d0 <Sys::loadDLL(regs*)+0xa4>
c001b175:	83 ec 0c             	sub    esp,0xc
c001b178:	53                   	push   ebx
c001b179:	e8 40 84 ff ff       	call   c00135be <File::exists()>
c001b17e:	83 c4 10             	add    esp,0x10
c001b181:	84 c0                	test   al,al
c001b183:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b185:	75 11                	jne    c001b198 <Sys::loadDLL(regs*)+0x6c>
c001b187:	83 ec 0c             	sub    esp,0xc
c001b18a:	53                   	push   ebx
c001b18b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b18e:	83 c4 10             	add    esp,0x10
c001b191:	b8 03 00 00 00       	mov    eax,0x3
c001b196:	eb 36                	jmp    c001b1ce <Sys::loadDLL(regs*)+0xa2>
c001b198:	83 ec 0c             	sub    esp,0xc
c001b19b:	53                   	push   ebx
c001b19c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b19f:	58                   	pop    eax
c001b1a0:	5a                   	pop    edx
c001b1a1:	6a 00                	push   0x0
c001b1a3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b1a6:	e8 c5 23 00 00       	call   c001d570 <Thr::loadDLL(char const*, bool)>
c001b1ab:	83 c4 10             	add    esp,0x10
c001b1ae:	89 c1                	mov    ecx,eax
c001b1b0:	31 d2                	xor    edx,edx
c001b1b2:	b8 04 00 00 00       	mov    eax,0x4
c001b1b7:	85 c9                	test   ecx,ecx
c001b1b9:	74 15                	je     c001b1d0 <Sys::loadDLL(regs*)+0xa4>
c001b1bb:	53                   	push   ebx
c001b1bc:	53                   	push   ebx
c001b1bd:	ff 35 28 e2 02 c0    	push   DWORD PTR ds:0xc002e228
c001b1c3:	51                   	push   ecx
c001b1c4:	e8 f6 25 00 00       	call   c001d7bf <Thr::executeDLL(unsigned long, void*)>
c001b1c9:	83 c4 10             	add    esp,0x10
c001b1cc:	31 c0                	xor    eax,eax
c001b1ce:	31 d2                	xor    edx,edx
c001b1d0:	59                   	pop    ecx
c001b1d1:	5b                   	pop    ebx
c001b1d2:	5e                   	pop    esi
c001b1d3:	c3                   	ret    

c001b1d4 <Sys::read(regs*)>:
c001b1d4:	57                   	push   edi
c001b1d5:	56                   	push   esi
c001b1d6:	53                   	push   ebx
c001b1d7:	83 ec 10             	sub    esp,0x10
c001b1da:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b1de:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b1e1:	83 f8 02             	cmp    eax,0x2
c001b1e4:	77 10                	ja     c001b1f6 <Sys::read(regs*)+0x22>
c001b1e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1eb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1ee:	8b 88 26 19 00 00    	mov    ecx,DWORD PTR [eax+0x1926]
c001b1f4:	eb 0e                	jmp    c001b204 <Sys::read(regs*)+0x30>
c001b1f6:	83 ec 0c             	sub    esp,0xc
c001b1f9:	50                   	push   eax
c001b1fa:	e8 e2 67 ff ff       	call   c00119e1 <getFromFileDescriptor(int)>
c001b1ff:	83 c4 10             	add    esp,0x10
c001b202:	89 c1                	mov    ecx,eax
c001b204:	83 c8 ff             	or     eax,0xffffffff
c001b207:	85 c9                	test   ecx,ecx
c001b209:	89 c2                	mov    edx,eax
c001b20b:	74 28                	je     c001b235 <Sys::read(regs*)+0x61>
c001b20d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b215:	31 ff                	xor    edi,edi
c001b217:	83 ec 0c             	sub    esp,0xc
c001b21a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b21c:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b220:	52                   	push   edx
c001b221:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b224:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b227:	57                   	push   edi
c001b228:	56                   	push   esi
c001b229:	51                   	push   ecx
c001b22a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b22d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b231:	83 c4 20             	add    esp,0x20
c001b234:	99                   	cdq    
c001b235:	83 c4 10             	add    esp,0x10
c001b238:	5b                   	pop    ebx
c001b239:	5e                   	pop    esi
c001b23a:	5f                   	pop    edi
c001b23b:	c3                   	ret    

c001b23c <Sys::sbrk(regs*)>:
c001b23c:	56                   	push   esi
c001b23d:	53                   	push   ebx
c001b23e:	50                   	push   eax
c001b23f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b244:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b248:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b24b:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b24e:	8b 88 32 19 00 00    	mov    ecx,DWORD PTR [eax+0x1932]
c001b254:	85 db                	test   ebx,ebx
c001b256:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b259:	74 02                	je     c001b25d <Sys::sbrk(regs*)+0x21>
c001b25b:	79 06                	jns    c001b263 <Sys::sbrk(regs*)+0x27>
c001b25d:	89 f0                	mov    eax,esi
c001b25f:	31 d2                	xor    edx,edx
c001b261:	eb 2a                	jmp    c001b28d <Sys::sbrk(regs*)+0x51>
c001b263:	83 c8 ff             	or     eax,0xffffffff
c001b266:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b26c:	89 c2                	mov    edx,eax
c001b26e:	77 1d                	ja     c001b28d <Sys::sbrk(regs*)+0x51>
c001b270:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b276:	50                   	push   eax
c001b277:	c1 ea 0c             	shr    edx,0xc
c001b27a:	68 07 0c 00 00       	push   0xc07
c001b27f:	52                   	push   edx
c001b280:	51                   	push   ecx
c001b281:	e8 7a 70 ff ff       	call   c0012300 <VAS::allocatePages(int, int)>
c001b286:	89 f0                	mov    eax,esi
c001b288:	31 d2                	xor    edx,edx
c001b28a:	83 c4 10             	add    esp,0x10
c001b28d:	59                   	pop    ecx
c001b28e:	5b                   	pop    ebx
c001b28f:	5e                   	pop    esi
c001b290:	c3                   	ret    

c001b291 <Sys::setCwd(regs*)>:
c001b291:	83 ec 14             	sub    esp,0x14
c001b294:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b298:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b29b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2a0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2a3:	e8 b5 83 ff ff       	call   c001365d <Fs::setcwd(Process*, char*)>
c001b2a8:	83 c4 1c             	add    esp,0x1c
c001b2ab:	99                   	cdq    
c001b2ac:	c3                   	ret    

c001b2ad <Sys::setTime(regs*)>:
c001b2ad:	55                   	push   ebp
c001b2ae:	31 d2                	xor    edx,edx
c001b2b0:	57                   	push   edi
c001b2b1:	bf 18 00 00 00       	mov    edi,0x18
c001b2b6:	56                   	push   esi
c001b2b7:	53                   	push   ebx
c001b2b8:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b2bd:	83 ec 30             	sub    esp,0x30
c001b2c0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b2c4:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b2c7:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b2ca:	f7 f3                	div    ebx
c001b2cc:	89 d6                	mov    esi,edx
c001b2ce:	31 d2                	xor    edx,edx
c001b2d0:	f7 f3                	div    ebx
c001b2d2:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b2d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b2d9:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b2de:	31 d2                	xor    edx,edx
c001b2e0:	f7 f3                	div    ebx
c001b2e2:	31 d2                	xor    edx,edx
c001b2e4:	bb 0c 00 00 00       	mov    ebx,0xc
c001b2e9:	f7 f7                	div    edi
c001b2eb:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b2ee:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b2f2:	0f b7 cd             	movzx  ecx,bp
c001b2f5:	56                   	push   esi
c001b2f6:	89 c7                	mov    edi,eax
c001b2f8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b2fc:	c1 e6 10             	shl    esi,0x10
c001b2ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b303:	83 e7 1f             	and    edi,0x1f
c001b306:	51                   	push   ecx
c001b307:	47                   	inc    edi
c001b308:	c1 e8 05             	shr    eax,0x5
c001b30b:	31 d2                	xor    edx,edx
c001b30d:	f7 f3                	div    ebx
c001b30f:	31 db                	xor    ebx,ebx
c001b311:	52                   	push   edx
c001b312:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b316:	57                   	push   edi
c001b317:	68 39 bb 02 c0       	push   0xc002bb39
c001b31c:	e8 73 7a ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001b321:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b325:	89 f8                	mov    eax,edi
c001b327:	31 c9                	xor    ecx,ecx
c001b329:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b32d:	88 c1                	mov    cl,al
c001b32f:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b335:	88 d5                	mov    ch,dl
c001b337:	c1 e0 10             	shl    eax,0x10
c001b33a:	0f b7 d1             	movzx  edx,cx
c001b33d:	09 c2                	or     edx,eax
c001b33f:	89 d8                	mov    eax,ebx
c001b341:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b346:	09 f0                	or     eax,esi
c001b348:	89 c3                	mov    ebx,eax
c001b34a:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b34e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b352:	83 c4 18             	add    esp,0x18
c001b355:	53                   	push   ebx
c001b356:	52                   	push   edx
c001b357:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b35b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b35f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b363:	e8 0f 8a ff ff       	call   c0013d77 <datetimeToSeconds(datetime_t)>
c001b368:	83 c4 0c             	add    esp,0xc
c001b36b:	52                   	push   edx
c001b36c:	50                   	push   eax
c001b36d:	56                   	push   esi
c001b36e:	e8 8b 8b ff ff       	call   c0013efe <secondsToDatetime(unsigned long long)>
c001b373:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b377:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b37b:	51                   	push   ecx
c001b37c:	89 d6                	mov    esi,edx
c001b37e:	51                   	push   ecx
c001b37f:	c1 ee 10             	shr    esi,0x10
c001b382:	89 f3                	mov    ebx,esi
c001b384:	0f b6 f3             	movzx  esi,bl
c001b387:	56                   	push   esi
c001b388:	0f b6 f6             	movzx  esi,dh
c001b38b:	0f b6 d2             	movzx  edx,dl
c001b38e:	56                   	push   esi
c001b38f:	52                   	push   edx
c001b390:	89 c2                	mov    edx,eax
c001b392:	c1 ea 10             	shr    edx,0x10
c001b395:	52                   	push   edx
c001b396:	0f b6 d4             	movzx  edx,ah
c001b399:	0f b6 c0             	movzx  eax,al
c001b39c:	52                   	push   edx
c001b39d:	50                   	push   eax
c001b39e:	68 55 bb 02 c0       	push   0xc002bb55
c001b3a3:	e8 ec 79 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001b3a8:	83 c4 2c             	add    esp,0x2c
c001b3ab:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001b3b0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b3b4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b3b8:	53                   	push   ebx
c001b3b9:	51                   	push   ecx
c001b3ba:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b3c0:	e8 d9 8a ff ff       	call   c0013e9e <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b3c5:	83 f0 01             	xor    eax,0x1
c001b3c8:	31 d2                	xor    edx,edx
c001b3ca:	0f b6 c0             	movzx  eax,al
c001b3cd:	83 c4 3c             	add    esp,0x3c
c001b3d0:	5b                   	pop    ebx
c001b3d1:	5e                   	pop    esi
c001b3d2:	5f                   	pop    edi
c001b3d3:	5d                   	pop    ebp
c001b3d4:	c3                   	ret    

c001b3d5 <Sys::timezone(regs*)>:
c001b3d5:	53                   	push   ebx
c001b3d6:	83 ec 08             	sub    esp,0x8
c001b3d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b3dd:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b3e1:	75 17                	jne    c001b3fa <Sys::timezone(regs*)+0x25>
c001b3e3:	83 ec 0c             	sub    esp,0xc
c001b3e6:	68 71 bb 02 c0       	push   0xc002bb71
c001b3eb:	e8 a4 79 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001b3f0:	83 c8 ff             	or     eax,0xffffffff
c001b3f3:	83 c4 10             	add    esp,0x10
c001b3f6:	89 c2                	mov    edx,eax
c001b3f8:	eb 20                	jmp    c001b41a <Sys::timezone(regs*)+0x45>
c001b3fa:	83 ec 0c             	sub    esp,0xc
c001b3fd:	68 a9 bb 02 c0       	push   0xc002bba9
c001b402:	e8 8d 79 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001b407:	58                   	pop    eax
c001b408:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b40b:	e8 f0 87 ff ff       	call   c0013c00 <User::loadClockSettings(int)>
c001b410:	83 c4 10             	add    esp,0x10
c001b413:	b8 01 00 00 00       	mov    eax,0x1
c001b418:	31 d2                	xor    edx,edx
c001b41a:	83 c4 08             	add    esp,0x8
c001b41d:	5b                   	pop    ebx
c001b41e:	c3                   	ret    

c001b41f <Sys::write(regs*)>:
c001b41f:	57                   	push   edi
c001b420:	56                   	push   esi
c001b421:	53                   	push   ebx
c001b422:	83 ec 10             	sub    esp,0x10
c001b425:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b429:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b42c:	83 f8 02             	cmp    eax,0x2
c001b42f:	77 10                	ja     c001b441 <Sys::write(regs*)+0x22>
c001b431:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b436:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b439:	8b 88 26 19 00 00    	mov    ecx,DWORD PTR [eax+0x1926]
c001b43f:	eb 0e                	jmp    c001b44f <Sys::write(regs*)+0x30>
c001b441:	83 ec 0c             	sub    esp,0xc
c001b444:	50                   	push   eax
c001b445:	e8 97 65 ff ff       	call   c00119e1 <getFromFileDescriptor(int)>
c001b44a:	83 c4 10             	add    esp,0x10
c001b44d:	89 c1                	mov    ecx,eax
c001b44f:	83 c8 ff             	or     eax,0xffffffff
c001b452:	85 c9                	test   ecx,ecx
c001b454:	89 c2                	mov    edx,eax
c001b456:	74 28                	je     c001b480 <Sys::write(regs*)+0x61>
c001b458:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b460:	31 ff                	xor    edi,edi
c001b462:	83 ec 0c             	sub    esp,0xc
c001b465:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b467:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b46b:	52                   	push   edx
c001b46c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b46f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b472:	57                   	push   edi
c001b473:	56                   	push   esi
c001b474:	51                   	push   ecx
c001b475:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b478:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b47c:	83 c4 20             	add    esp,0x20
c001b47f:	99                   	cdq    
c001b480:	83 c4 10             	add    esp,0x10
c001b483:	5b                   	pop    ebx
c001b484:	5e                   	pop    esi
c001b485:	5f                   	pop    edi
c001b486:	c3                   	ret    

c001b487 <Sys::wsbe(regs*)>:
c001b487:	57                   	push   edi
c001b488:	b9 0b 00 00 00       	mov    ecx,0xb
c001b48d:	56                   	push   esi
c001b48e:	be e8 bb 02 c0       	mov    esi,0xc002bbe8
c001b493:	53                   	push   ebx
c001b494:	83 ec 30             	sub    esp,0x30
c001b497:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b49b:	fc                   	cld    
c001b49c:	83 ec 0c             	sub    esp,0xc
c001b49f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b4a1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b4a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4aa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4ad:	8b b0 26 19 00 00    	mov    esi,DWORD PTR [eax+0x1926]
c001b4b3:	8b 06                	mov    eax,DWORD PTR [esi]
c001b4b5:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b4b8:	57                   	push   edi
c001b4b9:	e8 d6 52 fe ff       	call   c0000794 <strlen>
c001b4be:	5a                   	pop    edx
c001b4bf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b4c3:	52                   	push   edx
c001b4c4:	31 d2                	xor    edx,edx
c001b4c6:	57                   	push   edi
c001b4c7:	52                   	push   edx
c001b4c8:	50                   	push   eax
c001b4c9:	56                   	push   esi
c001b4ca:	ff d3                	call   ebx
c001b4cc:	83 c4 14             	add    esp,0x14
c001b4cf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b4d3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b4d6:	e8 9f 31 00 00       	call   c001e67a <terminateTask(int)>
c001b4db:	83 c4 40             	add    esp,0x40
c001b4de:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b4e3:	5b                   	pop    ebx
c001b4e4:	31 d2                	xor    edx,edx
c001b4e6:	5e                   	pop    esi
c001b4e7:	5f                   	pop    edi
c001b4e8:	c3                   	ret    

c001b4e9 <Sys::yield(regs*)>:
c001b4e9:	57                   	push   edi
c001b4ea:	56                   	push   esi
c001b4eb:	53                   	push   ebx
c001b4ec:	e8 46 27 00 00       	call   c001dc37 <lockScheduler()>
c001b4f1:	e8 7c 2a 00 00       	call   c001df72 <schedule()>
c001b4f6:	e8 3e 27 00 00       	call   c001dc39 <unlockScheduler()>
c001b4fb:	8b 35 b0 e8 02 c0    	mov    esi,DWORD PTR ds:0xc002e8b0
c001b501:	8b 3d b4 e8 02 c0    	mov    edi,DWORD PTR ds:0xc002e8b4
c001b507:	89 f0                	mov    eax,esi
c001b509:	89 fb                	mov    ebx,edi
c001b50b:	89 f1                	mov    ecx,esi
c001b50d:	c1 e0 07             	shl    eax,0x7
c001b510:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b514:	25 80 30 0f 00       	and    eax,0xf3080
c001b519:	c1 eb 17             	shr    ebx,0x17
c001b51c:	31 c8                	xor    eax,ecx
c001b51e:	89 da                	mov    edx,ebx
c001b520:	5b                   	pop    ebx
c001b521:	5e                   	pop    esi
c001b522:	5f                   	pop    edi
c001b523:	c3                   	ret    

c001b524 <sysCallSeekDir(regs*)>:
c001b524:	31 c0                	xor    eax,eax
c001b526:	31 d2                	xor    edx,edx
c001b528:	c3                   	ret    

c001b529 <sysCallTellDir(regs*)>:
c001b529:	31 c0                	xor    eax,eax
c001b52b:	31 d2                	xor    edx,edx
c001b52d:	c3                   	ret    

c001b52e <sysCallVerify(regs*)>:
c001b52e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b532:	31 d2                	xor    edx,edx
c001b534:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b537:	c3                   	ret    

c001b538 <sysFormatDisk(regs*)>:
c001b538:	56                   	push   esi
c001b539:	53                   	push   ebx
c001b53a:	53                   	push   ebx
c001b53b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b53f:	8b 1d b0 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3b0
c001b545:	eb 25                	jmp    c001b56c <sysFormatDisk(regs*)+0x34>
c001b547:	83 ec 0c             	sub    esp,0xc
c001b54a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b54d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b54f:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b552:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b555:	50                   	push   eax
c001b556:	ff 34 85 40 e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd17c0]
c001b55d:	53                   	push   ebx
c001b55e:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b561:	83 c4 20             	add    esp,0x20
c001b564:	83 f8 08             	cmp    eax,0x8
c001b567:	75 12                	jne    c001b57b <sysFormatDisk(regs*)+0x43>
c001b569:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b56c:	85 db                	test   ebx,ebx
c001b56e:	75 d7                	jne    c001b547 <sysFormatDisk(regs*)+0xf>
c001b570:	59                   	pop    ecx
c001b571:	b8 03 00 00 00       	mov    eax,0x3
c001b576:	31 d2                	xor    edx,edx
c001b578:	5b                   	pop    ebx
c001b579:	5e                   	pop    esi
c001b57a:	c3                   	ret    
c001b57b:	85 c0                	test   eax,eax
c001b57d:	74 1b                	je     c001b59a <sysFormatDisk(regs*)+0x62>
c001b57f:	83 f8 09             	cmp    eax,0x9
c001b582:	74 0b                	je     c001b58f <sysFormatDisk(regs*)+0x57>
c001b584:	59                   	pop    ecx
c001b585:	b8 02 00 00 00       	mov    eax,0x2
c001b58a:	31 d2                	xor    edx,edx
c001b58c:	5b                   	pop    ebx
c001b58d:	5e                   	pop    esi
c001b58e:	c3                   	ret    
c001b58f:	59                   	pop    ecx
c001b590:	b8 01 00 00 00       	mov    eax,0x1
c001b595:	31 d2                	xor    edx,edx
c001b597:	5b                   	pop    ebx
c001b598:	5e                   	pop    esi
c001b599:	c3                   	ret    
c001b59a:	59                   	pop    ecx
c001b59b:	31 c0                	xor    eax,eax
c001b59d:	31 d2                	xor    edx,edx
c001b59f:	5b                   	pop    ebx
c001b5a0:	5e                   	pop    esi
c001b5a1:	c3                   	ret    

c001b5a2 <sysSetDiskVolumeLabel(regs*)>:
c001b5a2:	56                   	push   esi
c001b5a3:	53                   	push   ebx
c001b5a4:	53                   	push   ebx
c001b5a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b5a9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b5ac:	83 f8 19             	cmp    eax,0x19
c001b5af:	77 29                	ja     c001b5da <sysSetDiskVolumeLabel(regs*)+0x38>
c001b5b1:	8b 0c 85 40 e8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd17c0]
c001b5b8:	85 c9                	test   ecx,ecx
c001b5ba:	74 1e                	je     c001b5da <sysSetDiskVolumeLabel(regs*)+0x38>
c001b5bc:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b5bf:	85 d2                	test   edx,edx
c001b5c1:	74 17                	je     c001b5da <sysSetDiskVolumeLabel(regs*)+0x38>
c001b5c3:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b5c9:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b5cb:	52                   	push   edx
c001b5cc:	50                   	push   eax
c001b5cd:	51                   	push   ecx
c001b5ce:	53                   	push   ebx
c001b5cf:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b5d2:	83 c4 10             	add    esp,0x10
c001b5d5:	99                   	cdq    
c001b5d6:	59                   	pop    ecx
c001b5d7:	5b                   	pop    ebx
c001b5d8:	5e                   	pop    esi
c001b5d9:	c3                   	ret    
c001b5da:	59                   	pop    ecx
c001b5db:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b5e0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5e5:	5b                   	pop    ebx
c001b5e6:	5e                   	pop    esi
c001b5e7:	c3                   	ret    

c001b5e8 <sysGetDiskVolumeLabel(regs*)>:
c001b5e8:	57                   	push   edi
c001b5e9:	56                   	push   esi
c001b5ea:	53                   	push   ebx
c001b5eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5ef:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b5f2:	83 fa 19             	cmp    edx,0x19
c001b5f5:	77 34                	ja     c001b62b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b5f7:	8b 0c 95 40 e8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd17c0]
c001b5fe:	85 c9                	test   ecx,ecx
c001b600:	74 29                	je     c001b62b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b602:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b605:	85 db                	test   ebx,ebx
c001b607:	74 22                	je     c001b62b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b609:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b60c:	85 c0                	test   eax,eax
c001b60e:	74 1b                	je     c001b62b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b610:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b616:	83 ec 0c             	sub    esp,0xc
c001b619:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b61b:	50                   	push   eax
c001b61c:	53                   	push   ebx
c001b61d:	52                   	push   edx
c001b61e:	51                   	push   ecx
c001b61f:	56                   	push   esi
c001b620:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b623:	83 c4 20             	add    esp,0x20
c001b626:	99                   	cdq    
c001b627:	5b                   	pop    ebx
c001b628:	5e                   	pop    esi
c001b629:	5f                   	pop    edi
c001b62a:	c3                   	ret    
c001b62b:	5b                   	pop    ebx
c001b62c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b631:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b636:	5e                   	pop    esi
c001b637:	5f                   	pop    edi
c001b638:	c3                   	ret    

c001b639 <sysShutdown(regs*)>:
c001b639:	83 ec 0c             	sub    esp,0xc
c001b63c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b640:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b643:	85 c0                	test   eax,eax
c001b645:	74 18                	je     c001b65f <sysShutdown(regs*)+0x26>
c001b647:	83 f8 01             	cmp    eax,0x1
c001b64a:	74 38                	je     c001b684 <sysShutdown(regs*)+0x4b>
c001b64c:	83 f8 02             	cmp    eax,0x2
c001b64f:	74 24                	je     c001b675 <sysShutdown(regs*)+0x3c>
c001b651:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b656:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b65b:	83 c4 0c             	add    esp,0xc
c001b65e:	c3                   	ret    
c001b65f:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001b664:	8b 10                	mov    edx,DWORD PTR [eax]
c001b666:	6a 00                	push   0x0
c001b668:	6a 00                	push   0x0
c001b66a:	6a 00                	push   0x0
c001b66c:	50                   	push   eax
c001b66d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b670:	83 c4 10             	add    esp,0x10
c001b673:	eb dc                	jmp    c001b651 <sysShutdown(regs*)+0x18>
c001b675:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001b67a:	8b 10                	mov    edx,DWORD PTR [eax]
c001b67c:	6a 00                	push   0x0
c001b67e:	6a 00                	push   0x0
c001b680:	6a 01                	push   0x1
c001b682:	eb e8                	jmp    c001b66c <sysShutdown(regs*)+0x33>
c001b684:	a1 e0 08 03 c0       	mov    eax,ds:0xc00308e0
c001b689:	85 c0                	test   eax,eax
c001b68b:	74 02                	je     c001b68f <sysShutdown(regs*)+0x56>
c001b68d:	ff d0                	call   eax
c001b68f:	31 c0                	xor    eax,eax
c001b691:	31 d2                	xor    edx,edx
c001b693:	83 c4 0c             	add    esp,0xc
c001b696:	c3                   	ret    

c001b697 <sysCallRealpath(regs*)>:
c001b697:	83 ec 0c             	sub    esp,0xc
c001b69a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b69e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b6a1:	85 d2                	test   edx,edx
c001b6a3:	74 07                	je     c001b6ac <sysCallRealpath(regs*)+0x15>
c001b6a5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b6a8:	85 c0                	test   eax,eax
c001b6aa:	75 0b                	jne    c001b6b7 <sysCallRealpath(regs*)+0x20>
c001b6ac:	b8 01 00 00 00       	mov    eax,0x1
c001b6b1:	31 d2                	xor    edx,edx
c001b6b3:	83 c4 0c             	add    esp,0xc
c001b6b6:	c3                   	ret    
c001b6b7:	51                   	push   ecx
c001b6b8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b6be:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b6c1:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b6c7:	51                   	push   ecx
c001b6c8:	52                   	push   edx
c001b6c9:	50                   	push   eax
c001b6ca:	e8 73 7a ff ff       	call   c0013142 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b6cf:	83 c4 10             	add    esp,0x10
c001b6d2:	31 c0                	xor    eax,eax
c001b6d4:	31 d2                	xor    edx,edx
c001b6d6:	83 c4 0c             	add    esp,0xc
c001b6d9:	c3                   	ret    

c001b6da <sysCallGetArgc(regs*)>:
c001b6da:	83 ec 14             	sub    esp,0x14
c001b6dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6e2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6e5:	ff b0 36 19 00 00    	push   DWORD PTR [eax+0x1936]
c001b6eb:	68 14 bc 02 c0       	push   0xc002bc14
c001b6f0:	e8 9f 76 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001b6f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6fa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6fd:	8b 80 36 19 00 00    	mov    eax,DWORD PTR [eax+0x1936]
c001b703:	83 c4 1c             	add    esp,0x1c
c001b706:	99                   	cdq    
c001b707:	c3                   	ret    

c001b708 <sysCallReadDir(regs*)>:
c001b708:	53                   	push   ebx
c001b709:	83 ec 18             	sub    esp,0x18
c001b70c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b710:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b713:	83 f8 02             	cmp    eax,0x2
c001b716:	76 53                	jbe    c001b76b <sysCallReadDir(regs*)+0x63>
c001b718:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b71b:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b721:	77 4f                	ja     c001b772 <sysCallReadDir(regs*)+0x6a>
c001b723:	83 ec 0c             	sub    esp,0xc
c001b726:	50                   	push   eax
c001b727:	e8 b5 62 ff ff       	call   c00119e1 <getFromFileDescriptor(int)>
c001b72c:	83 c4 10             	add    esp,0x10
c001b72f:	85 c0                	test   eax,eax
c001b731:	74 50                	je     c001b783 <sysCallReadDir(regs*)+0x7b>
c001b733:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b73b:	83 ec 0c             	sub    esp,0xc
c001b73e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b740:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b744:	51                   	push   ecx
c001b745:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b748:	6a 00                	push   0x0
c001b74a:	68 10 01 00 00       	push   0x110
c001b74f:	50                   	push   eax
c001b750:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b753:	83 c4 20             	add    esp,0x20
c001b756:	85 c0                	test   eax,eax
c001b758:	74 38                	je     c001b792 <sysCallReadDir(regs*)+0x8a>
c001b75a:	83 f8 07             	cmp    eax,0x7
c001b75d:	74 0c                	je     c001b76b <sysCallReadDir(regs*)+0x63>
c001b75f:	b8 02 00 00 00       	mov    eax,0x2
c001b764:	31 d2                	xor    edx,edx
c001b766:	83 c4 18             	add    esp,0x18
c001b769:	5b                   	pop    ebx
c001b76a:	c3                   	ret    
c001b76b:	b8 01 00 00 00       	mov    eax,0x1
c001b770:	eb f2                	jmp    c001b764 <sysCallReadDir(regs*)+0x5c>
c001b772:	83 ec 08             	sub    esp,0x8
c001b775:	52                   	push   edx
c001b776:	68 2c bd 02 c0       	push   0xc002bd2c
c001b77b:	e8 14 76 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001b780:	83 c4 10             	add    esp,0x10
c001b783:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b788:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b78d:	83 c4 18             	add    esp,0x18
c001b790:	5b                   	pop    ebx
c001b791:	c3                   	ret    
c001b792:	31 c0                	xor    eax,eax
c001b794:	eb ce                	jmp    c001b764 <sysCallReadDir(regs*)+0x5c>

c001b796 <sysCallIsATTY(regs*)>:
c001b796:	83 ec 0c             	sub    esp,0xc
c001b799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b79d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b7a0:	83 f8 02             	cmp    eax,0x2
c001b7a3:	76 07                	jbe    c001b7ac <sysCallIsATTY(regs*)+0x16>
c001b7a5:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b7aa:	75 26                	jne    c001b7d2 <sysCallIsATTY(regs*)+0x3c>
c001b7ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b7b4:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001b7ba:	85 c0                	test   eax,eax
c001b7bc:	74 24                	je     c001b7e2 <sysCallIsATTY(regs*)+0x4c>
c001b7be:	83 ec 0c             	sub    esp,0xc
c001b7c1:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7c3:	50                   	push   eax
c001b7c4:	ff 12                	call   DWORD PTR [edx]
c001b7c6:	31 d2                	xor    edx,edx
c001b7c8:	0f b6 c0             	movzx  eax,al
c001b7cb:	83 c4 10             	add    esp,0x10
c001b7ce:	83 c4 0c             	add    esp,0xc
c001b7d1:	c3                   	ret    
c001b7d2:	83 ec 0c             	sub    esp,0xc
c001b7d5:	50                   	push   eax
c001b7d6:	e8 06 62 ff ff       	call   c00119e1 <getFromFileDescriptor(int)>
c001b7db:	83 c4 10             	add    esp,0x10
c001b7de:	85 c0                	test   eax,eax
c001b7e0:	75 dc                	jne    c001b7be <sysCallIsATTY(regs*)+0x28>
c001b7e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b7e7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7ec:	83 c4 0c             	add    esp,0xc
c001b7ef:	c3                   	ret    

c001b7f0 <sysCallSeek(regs*)>:
c001b7f0:	53                   	push   ebx
c001b7f1:	83 ec 08             	sub    esp,0x8
c001b7f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b7f8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b7fb:	83 f8 02             	cmp    eax,0x2
c001b7fe:	76 4a                	jbe    c001b84a <sysCallSeek(regs*)+0x5a>
c001b800:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b805:	77 32                	ja     c001b839 <sysCallSeek(regs*)+0x49>
c001b807:	83 ec 0c             	sub    esp,0xc
c001b80a:	50                   	push   eax
c001b80b:	e8 d1 61 ff ff       	call   c00119e1 <getFromFileDescriptor(int)>
c001b810:	83 c4 0c             	add    esp,0xc
c001b813:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b816:	31 db                	xor    ebx,ebx
c001b818:	53                   	push   ebx
c001b819:	51                   	push   ecx
c001b81a:	50                   	push   eax
c001b81b:	e8 ee 7b ff ff       	call   c001340e <File::seek(unsigned long long)>
c001b820:	83 c4 10             	add    esp,0x10
c001b823:	85 c0                	test   eax,eax
c001b825:	0f 95 c0             	setne  al
c001b828:	31 d2                	xor    edx,edx
c001b82a:	0f b6 c0             	movzx  eax,al
c001b82d:	f7 d8                	neg    eax
c001b82f:	83 d2 00             	adc    edx,0x0
c001b832:	83 c4 08             	add    esp,0x8
c001b835:	f7 da                	neg    edx
c001b837:	5b                   	pop    ebx
c001b838:	c3                   	ret    
c001b839:	83 ec 08             	sub    esp,0x8
c001b83c:	50                   	push   eax
c001b83d:	68 1f bc 02 c0       	push   0xc002bc1f
c001b842:	e8 4d 75 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001b847:	83 c4 10             	add    esp,0x10
c001b84a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b84f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b854:	83 c4 08             	add    esp,0x8
c001b857:	5b                   	pop    ebx
c001b858:	c3                   	ret    

c001b859 <sysCallTell(regs*)>:
c001b859:	53                   	push   ebx
c001b85a:	83 ec 08             	sub    esp,0x8
c001b85d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b861:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b864:	83 f8 02             	cmp    eax,0x2
c001b867:	76 5e                	jbe    c001b8c7 <sysCallTell(regs*)+0x6e>
c001b869:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b86e:	77 2d                	ja     c001b89d <sysCallTell(regs*)+0x44>
c001b870:	83 ec 0c             	sub    esp,0xc
c001b873:	50                   	push   eax
c001b874:	e8 68 61 ff ff       	call   c00119e1 <getFromFileDescriptor(int)>
c001b879:	5a                   	pop    edx
c001b87a:	59                   	pop    ecx
c001b87b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b87e:	50                   	push   eax
c001b87f:	e8 e0 7b ff ff       	call   c0013464 <File::tell(unsigned long long*)>
c001b884:	83 c4 10             	add    esp,0x10
c001b887:	85 c0                	test   eax,eax
c001b889:	0f 95 c0             	setne  al
c001b88c:	31 d2                	xor    edx,edx
c001b88e:	0f b6 c0             	movzx  eax,al
c001b891:	f7 d8                	neg    eax
c001b893:	83 d2 00             	adc    edx,0x0
c001b896:	83 c4 08             	add    esp,0x8
c001b899:	f7 da                	neg    edx
c001b89b:	5b                   	pop    ebx
c001b89c:	c3                   	ret    
c001b89d:	83 ec 08             	sub    esp,0x8
c001b8a0:	50                   	push   eax
c001b8a1:	68 39 bc 02 c0       	push   0xc002bc39
c001b8a6:	e8 e9 74 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001b8ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b8ae:	83 c4 10             	add    esp,0x10
c001b8b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b8b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b8be:	31 d2                	xor    edx,edx
c001b8c0:	31 c0                	xor    eax,eax
c001b8c2:	83 c4 08             	add    esp,0x8
c001b8c5:	5b                   	pop    ebx
c001b8c6:	c3                   	ret    
c001b8c7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8cc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8d1:	83 c4 08             	add    esp,0x8
c001b8d4:	5b                   	pop    ebx
c001b8d5:	c3                   	ret    

c001b8d6 <sysCallSize(regs*)>:
c001b8d6:	53                   	push   ebx
c001b8d7:	83 ec 18             	sub    esp,0x18
c001b8da:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b8de:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b8e1:	83 f8 02             	cmp    eax,0x2
c001b8e4:	76 64                	jbe    c001b94a <sysCallSize(regs*)+0x74>
c001b8e6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b8eb:	77 33                	ja     c001b920 <sysCallSize(regs*)+0x4a>
c001b8ed:	83 ec 0c             	sub    esp,0xc
c001b8f0:	50                   	push   eax
c001b8f1:	e8 eb 60 ff ff       	call   c00119e1 <getFromFileDescriptor(int)>
c001b8f6:	83 c4 0c             	add    esp,0xc
c001b8f9:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b8fd:	52                   	push   edx
c001b8fe:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b901:	50                   	push   eax
c001b902:	e8 f5 7c ff ff       	call   c00135fc <File::stat(unsigned long long*, bool*)>
c001b907:	83 c4 10             	add    esp,0x10
c001b90a:	85 c0                	test   eax,eax
c001b90c:	0f 95 c0             	setne  al
c001b90f:	31 d2                	xor    edx,edx
c001b911:	0f b6 c0             	movzx  eax,al
c001b914:	f7 d8                	neg    eax
c001b916:	83 d2 00             	adc    edx,0x0
c001b919:	83 c4 18             	add    esp,0x18
c001b91c:	f7 da                	neg    edx
c001b91e:	5b                   	pop    ebx
c001b91f:	c3                   	ret    
c001b920:	83 ec 08             	sub    esp,0x8
c001b923:	50                   	push   eax
c001b924:	68 53 bc 02 c0       	push   0xc002bc53
c001b929:	e8 66 74 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001b92e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b931:	83 c4 10             	add    esp,0x10
c001b934:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b93a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b941:	31 d2                	xor    edx,edx
c001b943:	31 c0                	xor    eax,eax
c001b945:	83 c4 18             	add    esp,0x18
c001b948:	5b                   	pop    ebx
c001b949:	c3                   	ret    
c001b94a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b94f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b954:	83 c4 18             	add    esp,0x18
c001b957:	5b                   	pop    ebx
c001b958:	c3                   	ret    

c001b959 <sysCallSizeFromFilename(regs*)>:
c001b959:	57                   	push   edi
c001b95a:	56                   	push   esi
c001b95b:	53                   	push   ebx
c001b95c:	83 ec 20             	sub    esp,0x20
c001b95f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b963:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001b966:	83 fb 02             	cmp    ebx,0x2
c001b969:	0f 86 99 00 00 00    	jbe    c001ba08 <sysCallSizeFromFilename(regs*)+0xaf>
c001b96f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b975:	77 65                	ja     c001b9dc <sysCallSizeFromFilename(regs*)+0x83>
c001b977:	83 ec 0c             	sub    esp,0xc
c001b97a:	68 14 01 00 00       	push   0x114
c001b97f:	e8 bc 3e ff ff       	call   c000f840 <malloc>
c001b984:	83 c4 0c             	add    esp,0xc
c001b987:	89 c6                	mov    esi,eax
c001b989:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b98e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b991:	53                   	push   ebx
c001b992:	56                   	push   esi
c001b993:	e8 54 79 ff ff       	call   c00132ec <File::File(char const*, Process*)>
c001b998:	83 c4 0c             	add    esp,0xc
c001b99b:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b99f:	50                   	push   eax
c001b9a0:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001b9a3:	56                   	push   esi
c001b9a4:	e8 53 7c ff ff       	call   c00135fc <File::stat(unsigned long long*, bool*)>
c001b9a9:	83 c4 10             	add    esp,0x10
c001b9ac:	85 f6                	test   esi,esi
c001b9ae:	74 14                	je     c001b9c4 <sysCallSizeFromFilename(regs*)+0x6b>
c001b9b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9b4:	8b 16                	mov    edx,DWORD PTR [esi]
c001b9b6:	83 ec 0c             	sub    esp,0xc
c001b9b9:	56                   	push   esi
c001b9ba:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b9bd:	83 c4 10             	add    esp,0x10
c001b9c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9c4:	85 c0                	test   eax,eax
c001b9c6:	0f 95 c0             	setne  al
c001b9c9:	31 d2                	xor    edx,edx
c001b9cb:	0f b6 c0             	movzx  eax,al
c001b9ce:	f7 d8                	neg    eax
c001b9d0:	83 d2 00             	adc    edx,0x0
c001b9d3:	83 c4 20             	add    esp,0x20
c001b9d6:	f7 da                	neg    edx
c001b9d8:	5b                   	pop    ebx
c001b9d9:	5e                   	pop    esi
c001b9da:	5f                   	pop    edi
c001b9db:	c3                   	ret    
c001b9dc:	83 ec 08             	sub    esp,0x8
c001b9df:	53                   	push   ebx
c001b9e0:	68 53 bc 02 c0       	push   0xc002bc53
c001b9e5:	e8 aa 73 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001b9ea:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001b9ed:	83 c4 10             	add    esp,0x10
c001b9f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b9f6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b9fd:	31 d2                	xor    edx,edx
c001b9ff:	83 c4 20             	add    esp,0x20
c001ba02:	31 c0                	xor    eax,eax
c001ba04:	5b                   	pop    ebx
c001ba05:	5e                   	pop    esi
c001ba06:	5f                   	pop    edi
c001ba07:	c3                   	ret    
c001ba08:	83 c4 20             	add    esp,0x20
c001ba0b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba10:	5b                   	pop    ebx
c001ba11:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba16:	5e                   	pop    esi
c001ba17:	5f                   	pop    edi
c001ba18:	c3                   	ret    

c001ba19 <sysCallClose(regs*)>:
c001ba19:	53                   	push   ebx
c001ba1a:	83 ec 08             	sub    esp,0x8
c001ba1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba21:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba24:	83 f8 02             	cmp    eax,0x2
c001ba27:	76 50                	jbe    c001ba79 <sysCallClose(regs*)+0x60>
c001ba29:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ba2e:	74 58                	je     c001ba88 <sysCallClose(regs*)+0x6f>
c001ba30:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba35:	74 60                	je     c001ba97 <sysCallClose(regs*)+0x7e>
c001ba37:	77 2f                	ja     c001ba68 <sysCallClose(regs*)+0x4f>
c001ba39:	83 ec 0c             	sub    esp,0xc
c001ba3c:	50                   	push   eax
c001ba3d:	e8 9f 5f ff ff       	call   c00119e1 <getFromFileDescriptor(int)>
c001ba42:	89 c3                	mov    ebx,eax
c001ba44:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba47:	e8 62 79 ff ff       	call   c00133ae <File::close()>
c001ba4c:	83 c4 10             	add    esp,0x10
c001ba4f:	85 db                	test   ebx,ebx
c001ba51:	74 0c                	je     c001ba5f <sysCallClose(regs*)+0x46>
c001ba53:	83 ec 0c             	sub    esp,0xc
c001ba56:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ba58:	53                   	push   ebx
c001ba59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ba5c:	83 c4 10             	add    esp,0x10
c001ba5f:	31 c0                	xor    eax,eax
c001ba61:	31 d2                	xor    edx,edx
c001ba63:	83 c4 08             	add    esp,0x8
c001ba66:	5b                   	pop    ebx
c001ba67:	c3                   	ret    
c001ba68:	83 ec 08             	sub    esp,0x8
c001ba6b:	50                   	push   eax
c001ba6c:	68 50 bd 02 c0       	push   0xc002bd50
c001ba71:	e8 1e 73 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001ba76:	83 c4 10             	add    esp,0x10
c001ba79:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba7e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba83:	83 c4 08             	add    esp,0x8
c001ba86:	5b                   	pop    ebx
c001ba87:	c3                   	ret    
c001ba88:	83 ec 0c             	sub    esp,0xc
c001ba8b:	68 6e bc 02 c0       	push   0xc002bc6e
c001ba90:	e8 ff 72 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001ba95:	eb c5                	jmp    c001ba5c <sysCallClose(regs*)+0x43>
c001ba97:	83 ec 0c             	sub    esp,0xc
c001ba9a:	68 7c bc 02 c0       	push   0xc002bc7c
c001ba9f:	eb ef                	jmp    c001ba90 <sysCallClose(regs*)+0x77>

c001baa1 <sysCallOpenDir(regs*)>:
c001baa1:	56                   	push   esi
c001baa2:	53                   	push   ebx
c001baa3:	53                   	push   ebx
c001baa4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001baa8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001baab:	85 f6                	test   esi,esi
c001baad:	74 59                	je     c001bb08 <sysCallOpenDir(regs*)+0x67>
c001baaf:	83 ec 0c             	sub    esp,0xc
c001bab2:	68 14 01 00 00       	push   0x114
c001bab7:	e8 84 3d ff ff       	call   c000f840 <malloc>
c001babc:	83 c4 0c             	add    esp,0xc
c001babf:	89 c6                	mov    esi,eax
c001bac1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bac6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bac9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bacc:	56                   	push   esi
c001bacd:	e8 c6 7c ff ff       	call   c0013798 <Directory::Directory(char const*, Process*)>
c001bad2:	83 c4 10             	add    esp,0x10
c001bad5:	85 f6                	test   esi,esi
c001bad7:	74 2f                	je     c001bb08 <sysCallOpenDir(regs*)+0x67>
c001bad9:	83 ec 0c             	sub    esp,0xc
c001badc:	56                   	push   esi
c001badd:	e8 1a 7d ff ff       	call   c00137fc <Directory::open()>
c001bae2:	83 c4 10             	add    esp,0x10
c001bae5:	85 c0                	test   eax,eax
c001bae7:	75 1f                	jne    c001bb08 <sysCallOpenDir(regs*)+0x67>
c001bae9:	83 ec 0c             	sub    esp,0xc
c001baec:	56                   	push   esi
c001baed:	e8 fa 5b ff ff       	call   c00116ec <UnixFile::getFileDescriptor()>
c001baf2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001baf5:	83 c4 10             	add    esp,0x10
c001baf8:	89 02                	mov    DWORD PTR [edx],eax
c001bafa:	c1 f8 1f             	sar    eax,0x1f
c001bafd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bb00:	31 c0                	xor    eax,eax
c001bb02:	59                   	pop    ecx
c001bb03:	31 d2                	xor    edx,edx
c001bb05:	5b                   	pop    ebx
c001bb06:	5e                   	pop    esi
c001bb07:	c3                   	ret    
c001bb08:	59                   	pop    ecx
c001bb09:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb0e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb13:	5b                   	pop    ebx
c001bb14:	5e                   	pop    esi
c001bb15:	c3                   	ret    

c001bb16 <sysCallCloseDir(regs*)>:
c001bb16:	53                   	push   ebx
c001bb17:	83 ec 08             	sub    esp,0x8
c001bb1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb1e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb21:	83 f8 02             	cmp    eax,0x2
c001bb24:	76 47                	jbe    c001bb6d <sysCallCloseDir(regs*)+0x57>
c001bb26:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb2b:	77 2f                	ja     c001bb5c <sysCallCloseDir(regs*)+0x46>
c001bb2d:	83 ec 0c             	sub    esp,0xc
c001bb30:	50                   	push   eax
c001bb31:	e8 ab 5e ff ff       	call   c00119e1 <getFromFileDescriptor(int)>
c001bb36:	89 c3                	mov    ebx,eax
c001bb38:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb3b:	e8 18 7d ff ff       	call   c0013858 <Directory::close()>
c001bb40:	83 c4 10             	add    esp,0x10
c001bb43:	85 db                	test   ebx,ebx
c001bb45:	74 0c                	je     c001bb53 <sysCallCloseDir(regs*)+0x3d>
c001bb47:	83 ec 0c             	sub    esp,0xc
c001bb4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb4c:	53                   	push   ebx
c001bb4d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb50:	83 c4 10             	add    esp,0x10
c001bb53:	31 c0                	xor    eax,eax
c001bb55:	31 d2                	xor    edx,edx
c001bb57:	83 c4 08             	add    esp,0x8
c001bb5a:	5b                   	pop    ebx
c001bb5b:	c3                   	ret    
c001bb5c:	83 ec 08             	sub    esp,0x8
c001bb5f:	50                   	push   eax
c001bb60:	68 78 bd 02 c0       	push   0xc002bd78
c001bb65:	e8 2a 72 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001bb6a:	83 c4 10             	add    esp,0x10
c001bb6d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb72:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb77:	83 c4 08             	add    esp,0x8
c001bb7a:	5b                   	pop    ebx
c001bb7b:	c3                   	ret    

c001bb7c <sysCallMakeDir(regs*)>:
c001bb7c:	56                   	push   esi
c001bb7d:	53                   	push   ebx
c001bb7e:	83 ec 10             	sub    esp,0x10
c001bb81:	68 14 01 00 00       	push   0x114
c001bb86:	e8 b5 3c ff ff       	call   c000f840 <malloc>
c001bb8b:	83 c4 0c             	add    esp,0xc
c001bb8e:	89 c3                	mov    ebx,eax
c001bb90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb95:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bb9c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bb9f:	53                   	push   ebx
c001bba0:	e8 f3 7b ff ff       	call   c0013798 <Directory::Directory(char const*, Process*)>
c001bba5:	83 c4 10             	add    esp,0x10
c001bba8:	85 db                	test   ebx,ebx
c001bbaa:	74 32                	je     c001bbde <sysCallMakeDir(regs*)+0x62>
c001bbac:	83 ec 0c             	sub    esp,0xc
c001bbaf:	53                   	push   ebx
c001bbb0:	e8 27 7e ff ff       	call   c00139dc <Directory::create()>
c001bbb5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbb8:	89 c6                	mov    esi,eax
c001bbba:	e8 99 7c ff ff       	call   c0013858 <Directory::close()>
c001bbbf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bbc1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbc4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bbc7:	83 c4 10             	add    esp,0x10
c001bbca:	31 c0                	xor    eax,eax
c001bbcc:	59                   	pop    ecx
c001bbcd:	85 f6                	test   esi,esi
c001bbcf:	5b                   	pop    ebx
c001bbd0:	0f 95 c0             	setne  al
c001bbd3:	5e                   	pop    esi
c001bbd4:	31 d2                	xor    edx,edx
c001bbd6:	f7 d8                	neg    eax
c001bbd8:	83 d2 00             	adc    edx,0x0
c001bbdb:	f7 da                	neg    edx
c001bbdd:	c3                   	ret    
c001bbde:	59                   	pop    ecx
c001bbdf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbe4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbe9:	5b                   	pop    ebx
c001bbea:	5e                   	pop    esi
c001bbeb:	c3                   	ret    

c001bbec <sysCallWait(regs*)>:
c001bbec:	83 ec 10             	sub    esp,0x10
c001bbef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bbf3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bbf6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bbf9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bbfc:	e8 ec 24 00 00       	call   c001e0ed <waitTask(int, int*, int)>
c001bc01:	83 c4 1c             	add    esp,0x1c
c001bc04:	99                   	cdq    
c001bc05:	c3                   	ret    

c001bc06 <sysCallNotImpl(regs*)>:
c001bc06:	83 ec 18             	sub    esp,0x18
c001bc09:	68 8a bc 02 c0       	push   0xc002bc8a
c001bc0e:	e8 2a e8 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001bc13:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc18:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc1d:	83 c4 1c             	add    esp,0x1c
c001bc20:	c3                   	ret    

c001bc21 <sysPanic(regs*)>:
c001bc21:	83 ec 18             	sub    esp,0x18
c001bc24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc28:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc2b:	e8 0d e8 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001bc30:	c7 04 24 a4 bc 02 c0 	mov    DWORD PTR [esp],0xc002bca4
c001bc37:	e8 01 e8 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001bc3c:	b8 01 00 00 00       	mov    eax,0x1
c001bc41:	31 d2                	xor    edx,edx
c001bc43:	83 c4 1c             	add    esp,0x1c
c001bc46:	c3                   	ret    

c001bc47 <sysCallRmdir(regs*)>:
c001bc47:	56                   	push   esi
c001bc48:	53                   	push   ebx
c001bc49:	83 ec 20             	sub    esp,0x20
c001bc4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bc50:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bc53:	68 14 01 00 00       	push   0x114
c001bc58:	e8 e3 3b ff ff       	call   c000f840 <malloc>
c001bc5d:	83 c4 0c             	add    esp,0xc
c001bc60:	89 c3                	mov    ebx,eax
c001bc62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc67:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc6a:	56                   	push   esi
c001bc6b:	53                   	push   ebx
c001bc6c:	e8 7b 76 ff ff       	call   c00132ec <File::File(char const*, Process*)>
c001bc71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc74:	e8 4f 78 ff ff       	call   c00134c8 <File::unlink()>
c001bc79:	83 c4 10             	add    esp,0x10
c001bc7c:	85 db                	test   ebx,ebx
c001bc7e:	74 14                	je     c001bc94 <sysCallRmdir(regs*)+0x4d>
c001bc80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc84:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bc86:	83 ec 0c             	sub    esp,0xc
c001bc89:	53                   	push   ebx
c001bc8a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bc8d:	83 c4 10             	add    esp,0x10
c001bc90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc94:	85 c0                	test   eax,eax
c001bc96:	0f 95 c0             	setne  al
c001bc99:	31 d2                	xor    edx,edx
c001bc9b:	0f b6 c0             	movzx  eax,al
c001bc9e:	f7 d8                	neg    eax
c001bca0:	83 d2 00             	adc    edx,0x0
c001bca3:	83 c4 14             	add    esp,0x14
c001bca6:	f7 da                	neg    edx
c001bca8:	5b                   	pop    ebx
c001bca9:	5e                   	pop    esi
c001bcaa:	c3                   	ret    

c001bcab <sysCallUnlink(regs*)>:
c001bcab:	56                   	push   esi
c001bcac:	53                   	push   ebx
c001bcad:	83 ec 20             	sub    esp,0x20
c001bcb0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bcb4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bcb7:	68 14 01 00 00       	push   0x114
c001bcbc:	e8 7f 3b ff ff       	call   c000f840 <malloc>
c001bcc1:	83 c4 0c             	add    esp,0xc
c001bcc4:	89 c3                	mov    ebx,eax
c001bcc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bccb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcce:	56                   	push   esi
c001bccf:	53                   	push   ebx
c001bcd0:	e8 17 76 ff ff       	call   c00132ec <File::File(char const*, Process*)>
c001bcd5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bcd8:	e8 eb 77 ff ff       	call   c00134c8 <File::unlink()>
c001bcdd:	83 c4 10             	add    esp,0x10
c001bce0:	85 db                	test   ebx,ebx
c001bce2:	74 14                	je     c001bcf8 <sysCallUnlink(regs*)+0x4d>
c001bce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bce8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bcea:	83 ec 0c             	sub    esp,0xc
c001bced:	53                   	push   ebx
c001bcee:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bcf1:	83 c4 10             	add    esp,0x10
c001bcf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bcf8:	85 c0                	test   eax,eax
c001bcfa:	0f 95 c0             	setne  al
c001bcfd:	31 d2                	xor    edx,edx
c001bcff:	0f b6 c0             	movzx  eax,al
c001bd02:	f7 d8                	neg    eax
c001bd04:	83 d2 00             	adc    edx,0x0
c001bd07:	83 c4 14             	add    esp,0x14
c001bd0a:	f7 da                	neg    edx
c001bd0c:	5b                   	pop    ebx
c001bd0d:	5e                   	pop    esi
c001bd0e:	c3                   	ret    

c001bd0f <sysCallGetArgv(regs*)>:
c001bd0f:	83 ec 0c             	sub    esp,0xc
c001bd12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bd16:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bd19:	85 c0                	test   eax,eax
c001bd1b:	78 2b                	js     c001bd48 <sysCallGetArgv(regs*)+0x39>
c001bd1d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bd23:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bd26:	3b 81 36 19 00 00    	cmp    eax,DWORD PTR [ecx+0x1936]
c001bd2c:	7d 1a                	jge    c001bd48 <sysCallGetArgv(regs*)+0x39>
c001bd2e:	8b 84 81 3a 19 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x193a]
c001bd35:	85 c0                	test   eax,eax
c001bd37:	74 17                	je     c001bd50 <sysCallGetArgv(regs*)+0x41>
c001bd39:	83 ec 08             	sub    esp,0x8
c001bd3c:	50                   	push   eax
c001bd3d:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bd40:	e8 ef 4a fe ff       	call   c0000834 <strcpy>
c001bd45:	83 c4 10             	add    esp,0x10
c001bd48:	31 c0                	xor    eax,eax
c001bd4a:	31 d2                	xor    edx,edx
c001bd4c:	83 c4 0c             	add    esp,0xc
c001bd4f:	c3                   	ret    
c001bd50:	b8 01 00 00 00       	mov    eax,0x1
c001bd55:	31 d2                	xor    edx,edx
c001bd57:	83 c4 0c             	add    esp,0xc
c001bd5a:	c3                   	ret    

c001bd5b <sysCallTTYName(regs*)>:
c001bd5b:	56                   	push   esi
c001bd5c:	53                   	push   ebx
c001bd5d:	53                   	push   ebx
c001bd5e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bd62:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bd65:	85 c0                	test   eax,eax
c001bd67:	74 5f                	je     c001bdc8 <sysCallTTYName(regs*)+0x6d>
c001bd69:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bd6c:	83 f8 02             	cmp    eax,0x2
c001bd6f:	77 3e                	ja     c001bdaf <sysCallTTYName(regs*)+0x54>
c001bd71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd76:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bd79:	8b 98 26 19 00 00    	mov    ebx,DWORD PTR [eax+0x1926]
c001bd7f:	85 db                	test   ebx,ebx
c001bd81:	74 45                	je     c001bdc8 <sysCallTTYName(regs*)+0x6d>
c001bd83:	83 ec 0c             	sub    esp,0xc
c001bd86:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd88:	53                   	push   ebx
c001bd89:	ff 10                	call   DWORD PTR [eax]
c001bd8b:	83 c4 10             	add    esp,0x10
c001bd8e:	84 c0                	test   al,al
c001bd90:	74 41                	je     c001bdd3 <sysCallTTYName(regs*)+0x78>
c001bd92:	83 ec 08             	sub    esp,0x8
c001bd95:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bd9b:	53                   	push   ebx
c001bd9c:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bd9f:	e8 90 4a fe ff       	call   c0000834 <strcpy>
c001bda4:	83 c4 10             	add    esp,0x10
c001bda7:	31 c0                	xor    eax,eax
c001bda9:	59                   	pop    ecx
c001bdaa:	31 d2                	xor    edx,edx
c001bdac:	5b                   	pop    ebx
c001bdad:	5e                   	pop    esi
c001bdae:	c3                   	ret    
c001bdaf:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bdb4:	74 bb                	je     c001bd71 <sysCallTTYName(regs*)+0x16>
c001bdb6:	83 ec 0c             	sub    esp,0xc
c001bdb9:	50                   	push   eax
c001bdba:	e8 22 5c ff ff       	call   c00119e1 <getFromFileDescriptor(int)>
c001bdbf:	83 c4 10             	add    esp,0x10
c001bdc2:	89 c3                	mov    ebx,eax
c001bdc4:	85 db                	test   ebx,ebx
c001bdc6:	75 bb                	jne    c001bd83 <sysCallTTYName(regs*)+0x28>
c001bdc8:	59                   	pop    ecx
c001bdc9:	b8 01 00 00 00       	mov    eax,0x1
c001bdce:	31 d2                	xor    edx,edx
c001bdd0:	5b                   	pop    ebx
c001bdd1:	5e                   	pop    esi
c001bdd2:	c3                   	ret    
c001bdd3:	59                   	pop    ecx
c001bdd4:	b8 02 00 00 00       	mov    eax,0x2
c001bdd9:	31 d2                	xor    edx,edx
c001bddb:	5b                   	pop    ebx
c001bddc:	5e                   	pop    esi
c001bddd:	c3                   	ret    

c001bdde <sysCallUSleep(regs*)>:
c001bdde:	83 ec 14             	sub    esp,0x14
c001bde1:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bde6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bdea:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bdf1:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bdf4:	01 ca                	add    edx,ecx
c001bdf6:	52                   	push   edx
c001bdf7:	50                   	push   eax
c001bdf8:	e8 89 23 00 00       	call   c001e186 <nanoSleep(unsigned long long)>
c001bdfd:	31 c0                	xor    eax,eax
c001bdff:	31 d2                	xor    edx,edx
c001be01:	83 c4 1c             	add    esp,0x1c
c001be04:	c3                   	ret    

c001be05 <sysCallSpawn(regs*)>:
c001be05:	56                   	push   esi
c001be06:	53                   	push   ebx
c001be07:	53                   	push   ebx
c001be08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be0c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001be0f:	85 f6                	test   esi,esi
c001be11:	75 08                	jne    c001be1b <sysCallSpawn(regs*)+0x16>
c001be13:	59                   	pop    ecx
c001be14:	31 c0                	xor    eax,eax
c001be16:	31 d2                	xor    edx,edx
c001be18:	5b                   	pop    ebx
c001be19:	5e                   	pop    esi
c001be1a:	c3                   	ret    
c001be1b:	83 ec 0c             	sub    esp,0xc
c001be1e:	68 3f 1b 00 00       	push   0x1b3f
c001be23:	e8 18 3a ff ff       	call   c000f840 <malloc>
c001be28:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001be2b:	89 c6                	mov    esi,eax
c001be2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be32:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be35:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be38:	56                   	push   esi
c001be39:	e8 44 1a 00 00       	call   c001d882 <Process::Process(char const*, Process*, char**)>
c001be3e:	83 c4 20             	add    esp,0x20
c001be41:	80 be 3e 1b 00 00 00 	cmp    BYTE PTR [esi+0x1b3e],0x0
c001be48:	75 c9                	jne    c001be13 <sysCallSpawn(regs*)+0xe>
c001be4a:	83 ec 0c             	sub    esp,0xc
c001be4d:	56                   	push   esi
c001be4e:	e8 f9 1f 00 00       	call   c001de4c <Process::createUserThread()>
c001be53:	8b 06                	mov    eax,DWORD PTR [esi]
c001be55:	83 c4 10             	add    esp,0x10
c001be58:	99                   	cdq    
c001be59:	59                   	pop    ecx
c001be5a:	5b                   	pop    ebx
c001be5b:	5e                   	pop    esi
c001be5c:	c3                   	ret    

c001be5d <sysCallGetEnv(regs*)>:
c001be5d:	55                   	push   ebp
c001be5e:	57                   	push   edi
c001be5f:	56                   	push   esi
c001be60:	53                   	push   ebx
c001be61:	83 ec 28             	sub    esp,0x28
c001be64:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001be68:	68 b3 bc 02 c0       	push   0xc002bcb3
c001be6d:	e8 22 6f ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001be72:	5f                   	pop    edi
c001be73:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001be76:	5d                   	pop    ebp
c001be77:	53                   	push   ebx
c001be78:	68 f9 bf 02 c0       	push   0xc002bff9
c001be7d:	e8 12 6f ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001be82:	58                   	pop    eax
c001be83:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001be86:	5a                   	pop    edx
c001be87:	57                   	push   edi
c001be88:	68 bc bc 02 c0       	push   0xc002bcbc
c001be8d:	e8 02 6f ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001be92:	59                   	pop    ecx
c001be93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be98:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be9b:	e8 b9 e4 ff ff       	call   c001a359 <Krnl::getProcessTotalEnvCount(Process*)>
c001bea0:	5a                   	pop    edx
c001bea1:	89 c5                	mov    ebp,eax
c001bea3:	59                   	pop    ecx
c001bea4:	50                   	push   eax
c001bea5:	68 c6 bc 02 c0       	push   0xc002bcc6
c001beaa:	e8 e5 6e ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001beaf:	83 c4 10             	add    esp,0x10
c001beb2:	39 ef                	cmp    edi,ebp
c001beb4:	7c 15                	jl     c001becb <sysCallGetEnv(regs*)+0x6e>
c001beb6:	85 db                	test   ebx,ebx
c001beb8:	75 0c                	jne    c001bec6 <sysCallGetEnv(regs*)+0x69>
c001beba:	83 c4 1c             	add    esp,0x1c
c001bebd:	31 c0                	xor    eax,eax
c001bebf:	5b                   	pop    ebx
c001bec0:	31 d2                	xor    edx,edx
c001bec2:	5e                   	pop    esi
c001bec3:	5f                   	pop    edi
c001bec4:	5d                   	pop    ebp
c001bec5:	c3                   	ret    
c001bec6:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bec9:	eb ef                	jmp    c001beba <sysCallGetEnv(regs*)+0x5d>
c001becb:	83 ec 0c             	sub    esp,0xc
c001bece:	68 d2 bc 02 c0       	push   0xc002bcd2
c001bed3:	e8 bc 6e ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001bed8:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bedc:	83 c4 0c             	add    esp,0xc
c001bedf:	57                   	push   edi
c001bee0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bee6:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bee9:	50                   	push   eax
c001beea:	e8 8a e4 ff ff       	call   c001a379 <Krnl::getProcessEnvPair(Process*, int)>
c001beef:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001bef3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bef7:	68 78 c0 02 c0       	push   0xc002c078
c001befc:	e8 93 6e ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001bf01:	83 c4 10             	add    esp,0x10
c001bf04:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001bf07:	85 f6                	test   esi,esi
c001bf09:	75 47                	jne    c001bf52 <sysCallGetEnv(regs*)+0xf5>
c001bf0b:	83 ec 0c             	sub    esp,0xc
c001bf0e:	55                   	push   ebp
c001bf0f:	e8 80 48 fe ff       	call   c0000794 <strlen>
c001bf14:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bf17:	89 c3                	mov    ebx,eax
c001bf19:	e8 76 48 fe ff       	call   c0000794 <strlen>
c001bf1e:	5a                   	pop    edx
c001bf1f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bf23:	59                   	pop    ecx
c001bf24:	50                   	push   eax
c001bf25:	68 d5 bc 02 c0       	push   0xc002bcd5
c001bf2a:	e8 65 6e ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001bf2f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bf32:	e8 5d 48 fe ff       	call   c0000794 <strlen>
c001bf37:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bf3a:	89 c3                	mov    ebx,eax
c001bf3c:	e8 53 48 fe ff       	call   c0000794 <strlen>
c001bf41:	83 c4 10             	add    esp,0x10
c001bf44:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bf48:	83 c4 1c             	add    esp,0x1c
c001bf4b:	31 d2                	xor    edx,edx
c001bf4d:	5b                   	pop    ebx
c001bf4e:	5e                   	pop    esi
c001bf4f:	5f                   	pop    edi
c001bf50:	5d                   	pop    ebp
c001bf51:	c3                   	ret    
c001bf52:	83 ec 0c             	sub    esp,0xc
c001bf55:	68 92 c0 02 c0       	push   0xc002c092
c001bf5a:	e8 35 6e ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001bf5f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bf62:	58                   	pop    eax
c001bf63:	5a                   	pop    edx
c001bf64:	55                   	push   ebp
c001bf65:	53                   	push   ebx
c001bf66:	e8 c9 48 fe ff       	call   c0000834 <strcpy>
c001bf6b:	59                   	pop    ecx
c001bf6c:	5e                   	pop    esi
c001bf6d:	68 df bc 02 c0       	push   0xc002bcdf
c001bf72:	53                   	push   ebx
c001bf73:	e8 fc 49 fe ff       	call   c0000974 <strcat>
c001bf78:	5d                   	pop    ebp
c001bf79:	58                   	pop    eax
c001bf7a:	57                   	push   edi
c001bf7b:	53                   	push   ebx
c001bf7c:	e8 f3 49 fe ff       	call   c0000974 <strcat>
c001bf81:	c7 04 24 ac c0 02 c0 	mov    DWORD PTR [esp],0xc002c0ac
c001bf88:	e8 07 6e ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001bf8d:	83 c4 10             	add    esp,0x10
c001bf90:	e9 25 ff ff ff       	jmp    c001beba <sysCallGetEnv(regs*)+0x5d>

c001bf95 <sysAppSettings(regs*)>:
c001bf95:	53                   	push   ebx
c001bf96:	83 ec 08             	sub    esp,0x8
c001bf99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf9d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bfa0:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001bfa6:	25 e0 1f 00 00       	and    eax,0x1fe0
c001bfab:	66 3d c0 09          	cmp    ax,0x9c0
c001bfaf:	75 2f                	jne    c001bfe0 <sysAppSettings(regs*)+0x4b>
c001bfb1:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001bfb7:	83 e0 1f             	and    eax,0x1f
c001bfba:	3c 01                	cmp    al,0x1
c001bfbc:	74 2e                	je     c001bfec <sysAppSettings(regs*)+0x57>
c001bfbe:	3c 07                	cmp    al,0x7
c001bfc0:	0f 84 bd 00 00 00    	je     c001c083 <sysAppSettings(regs*)+0xee>
c001bfc6:	84 c0                	test   al,al
c001bfc8:	0f 84 dc 00 00 00    	je     c001c0aa <sysAppSettings(regs*)+0x115>
c001bfce:	3c 08                	cmp    al,0x8
c001bfd0:	74 6d                	je     c001c03f <sysAppSettings(regs*)+0xaa>
c001bfd2:	0f b6 c0             	movzx  eax,al
c001bfd5:	83 c4 08             	add    esp,0x8
c001bfd8:	05 e8 03 00 00       	add    eax,0x3e8
c001bfdd:	5b                   	pop    ebx
c001bfde:	99                   	cdq    
c001bfdf:	c3                   	ret    
c001bfe0:	b8 01 00 00 00       	mov    eax,0x1
c001bfe5:	31 d2                	xor    edx,edx
c001bfe7:	83 c4 08             	add    esp,0x8
c001bfea:	5b                   	pop    ebx
c001bfeb:	c3                   	ret    
c001bfec:	51                   	push   ecx
c001bfed:	68 00 01 00 00       	push   0x100
c001bff2:	6a 00                	push   0x0
c001bff4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bff9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bffc:	83 c0 0c             	add    eax,0xc
c001bfff:	50                   	push   eax
c001c000:	e8 73 47 fe ff       	call   c0000778 <memset>
c001c005:	83 c4 0c             	add    esp,0xc
c001c008:	68 ff 00 00 00       	push   0xff
c001c00d:	53                   	push   ebx
c001c00e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c013:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c016:	83 c0 0c             	add    eax,0xc
c001c019:	50                   	push   eax
c001c01a:	e8 25 47 fe ff       	call   c0000744 <memcpy>
c001c01f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c024:	5b                   	pop    ebx
c001c025:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c028:	5a                   	pop    edx
c001c029:	8d 50 0c             	lea    edx,[eax+0xc]
c001c02c:	52                   	push   edx
c001c02d:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c033:	e8 24 4b ff ff       	call   c0010b5c <VgaText::setTitle(char*)>
c001c038:	83 c4 10             	add    esp,0x10
c001c03b:	31 c0                	xor    eax,eax
c001c03d:	eb a6                	jmp    c001bfe5 <sysAppSettings(regs*)+0x50>
c001c03f:	83 ec 08             	sub    esp,0x8
c001c042:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c048:	83 e0 0f             	and    eax,0xf
c001c04b:	50                   	push   eax
c001c04c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c051:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c054:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c05a:	e8 ed 4a ff ff       	call   c0010b4c <VgaText::setTitleColour(VgaColour)>
c001c05f:	58                   	pop    eax
c001c060:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c066:	5a                   	pop    edx
c001c067:	c1 e8 04             	shr    eax,0x4
c001c06a:	83 e0 0f             	and    eax,0xf
c001c06d:	50                   	push   eax
c001c06e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c073:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c076:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c07c:	e8 bb 4a ff ff       	call   c0010b3c <VgaText::setTitleTextColour(VgaColour)>
c001c081:	eb b5                	jmp    c001c038 <sysAppSettings(regs*)+0xa3>
c001c083:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c088:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c08b:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001c091:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c097:	c0 e8 06             	shr    al,0x6
c001c09a:	83 e0 01             	and    eax,0x1
c001c09d:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c0a3:	31 c0                	xor    eax,eax
c001c0a5:	e9 3b ff ff ff       	jmp    c001bfe5 <sysAppSettings(regs*)+0x50>
c001c0aa:	b8 02 00 00 00       	mov    eax,0x2
c001c0af:	e9 31 ff ff ff       	jmp    c001bfe5 <sysAppSettings(regs*)+0x50>

c001c0b4 <sysSetFatAttrib(regs*)>:
c001c0b4:	57                   	push   edi
c001c0b5:	56                   	push   esi
c001c0b6:	53                   	push   ebx
c001c0b7:	83 ec 1c             	sub    esp,0x1c
c001c0ba:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c0be:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c0c1:	68 14 01 00 00       	push   0x114
c001c0c6:	e8 75 37 ff ff       	call   c000f840 <malloc>
c001c0cb:	83 c4 0c             	add    esp,0xc
c001c0ce:	89 c3                	mov    ebx,eax
c001c0d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0d5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0d8:	57                   	push   edi
c001c0d9:	53                   	push   ebx
c001c0da:	e8 0d 72 ff ff       	call   c00132ec <File::File(char const*, Process*)>
c001c0df:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c0e2:	83 c4 0c             	add    esp,0xc
c001c0e5:	0f b6 d4             	movzx  edx,ah
c001c0e8:	0f b6 c0             	movzx  eax,al
c001c0eb:	52                   	push   edx
c001c0ec:	50                   	push   eax
c001c0ed:	53                   	push   ebx
c001c0ee:	e8 6f 74 ff ff       	call   c0013562 <File::chfatattr(unsigned char, unsigned char)>
c001c0f3:	83 c4 10             	add    esp,0x10
c001c0f6:	85 db                	test   ebx,ebx
c001c0f8:	74 14                	je     c001c10e <sysSetFatAttrib(regs*)+0x5a>
c001c0fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0fe:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c100:	83 ec 0c             	sub    esp,0xc
c001c103:	53                   	push   ebx
c001c104:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c107:	83 c4 10             	add    esp,0x10
c001c10a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c10e:	85 c0                	test   eax,eax
c001c110:	0f 95 c0             	setne  al
c001c113:	31 d2                	xor    edx,edx
c001c115:	0f b6 c0             	movzx  eax,al
c001c118:	f7 d8                	neg    eax
c001c11a:	83 d2 00             	adc    edx,0x0
c001c11d:	83 c4 10             	add    esp,0x10
c001c120:	f7 da                	neg    edx
c001c122:	5b                   	pop    ebx
c001c123:	5e                   	pop    esi
c001c124:	5f                   	pop    edi
c001c125:	c3                   	ret    

c001c126 <sysPipe(regs*)>:
c001c126:	57                   	push   edi
c001c127:	56                   	push   esi
c001c128:	53                   	push   ebx
c001c129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c12d:	83 ec 0c             	sub    esp,0xc
c001c130:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c133:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c136:	6a 20                	push   0x20
c001c138:	e8 03 37 ff ff       	call   c000f840 <malloc>
c001c13d:	89 c3                	mov    ebx,eax
c001c13f:	58                   	pop    eax
c001c140:	5a                   	pop    edx
c001c141:	68 00 50 00 00       	push   0x5000
c001c146:	53                   	push   ebx
c001c147:	e8 40 43 ff ff       	call   c001048c <Pipe::Pipe(int)>
c001c14c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c14f:	e8 98 55 ff ff       	call   c00116ec <UnixFile::getFileDescriptor()>
c001c154:	89 07                	mov    DWORD PTR [edi],eax
c001c156:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c159:	e8 8e 55 ff ff       	call   c00116ec <UnixFile::getFileDescriptor()>
c001c15e:	83 c4 10             	add    esp,0x10
c001c161:	89 06                	mov    DWORD PTR [esi],eax
c001c163:	31 d2                	xor    edx,edx
c001c165:	5b                   	pop    ebx
c001c166:	31 c0                	xor    eax,eax
c001c168:	5e                   	pop    esi
c001c169:	5f                   	pop    edi
c001c16a:	c3                   	ret    

c001c16b <sysGetUnixTime(regs*)>:
c001c16b:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001c170:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c176:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c17a:	e9 57 7b ff ff       	jmp    c0013cd6 <Clock::timeInSecondsLocal()>

c001c17f <string_ends_with(char const*, char const*)>:
c001c17f:	57                   	push   edi
c001c180:	56                   	push   esi
c001c181:	53                   	push   ebx
c001c182:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c186:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c18a:	83 ec 0c             	sub    esp,0xc
c001c18d:	53                   	push   ebx
c001c18e:	e8 01 46 fe ff       	call   c0000794 <strlen>
c001c193:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c196:	89 c6                	mov    esi,eax
c001c198:	e8 f7 45 fe ff       	call   c0000794 <strlen>
c001c19d:	83 c4 10             	add    esp,0x10
c001c1a0:	39 c6                	cmp    esi,eax
c001c1a2:	7d 06                	jge    c001c1aa <string_ends_with(char const*, char const*)+0x2b>
c001c1a4:	5b                   	pop    ebx
c001c1a5:	31 c0                	xor    eax,eax
c001c1a7:	5e                   	pop    esi
c001c1a8:	5f                   	pop    edi
c001c1a9:	c3                   	ret    
c001c1aa:	83 ec 08             	sub    esp,0x8
c001c1ad:	29 c6                	sub    esi,eax
c001c1af:	57                   	push   edi
c001c1b0:	01 f3                	add    ebx,esi
c001c1b2:	53                   	push   ebx
c001c1b3:	e8 08 47 fe ff       	call   c00008c0 <strcmp>
c001c1b8:	83 c4 10             	add    esp,0x10
c001c1bb:	85 c0                	test   eax,eax
c001c1bd:	5b                   	pop    ebx
c001c1be:	0f 94 c0             	sete   al
c001c1c1:	5e                   	pop    esi
c001c1c2:	0f b6 c0             	movzx  eax,al
c001c1c5:	5f                   	pop    edi
c001c1c6:	c3                   	ret    

c001c1c7 <sysCallOpen(regs*)>:
c001c1c7:	56                   	push   esi
c001c1c8:	53                   	push   ebx
c001c1c9:	81 ec 04 01 00 00    	sub    esp,0x104
c001c1cf:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c1d6:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c1d9:	85 c9                	test   ecx,ecx
c001c1db:	0f 84 b3 00 00 00    	je     c001c294 <sysCallOpen(regs*)+0xcd>
c001c1e1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c1e4:	85 c0                	test   eax,eax
c001c1e6:	0f 84 a8 00 00 00    	je     c001c294 <sysCallOpen(regs*)+0xcd>
c001c1ec:	52                   	push   edx
c001c1ed:	68 e1 bc 02 c0       	push   0xc002bce1
c001c1f2:	50                   	push   eax
c001c1f3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c1f7:	56                   	push   esi
c001c1f8:	e8 45 6f ff ff       	call   c0013142 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c1fd:	89 34 24             	mov    DWORD PTR [esp],esi
c001c200:	e8 8f 45 fe ff       	call   c0000794 <strlen>
c001c205:	83 c4 10             	add    esp,0x10
c001c208:	48                   	dec    eax
c001c209:	74 1d                	je     c001c228 <sysCallOpen(regs*)+0x61>
c001c20b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c20e:	eb 0f                	jmp    c001c21f <sysCallOpen(regs*)+0x58>
c001c210:	80 fa 3a             	cmp    dl,0x3a
c001c213:	74 0f                	je     c001c224 <sysCallOpen(regs*)+0x5d>
c001c215:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c219:	48                   	dec    eax
c001c21a:	74 0c                	je     c001c228 <sysCallOpen(regs*)+0x61>
c001c21c:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c21f:	80 fa 2e             	cmp    dl,0x2e
c001c222:	75 ec                	jne    c001c210 <sysCallOpen(regs*)+0x49>
c001c224:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c228:	83 ec 08             	sub    esp,0x8
c001c22b:	68 e5 bc 02 c0       	push   0xc002bce5
c001c230:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c233:	e8 47 ff ff ff       	call   c001c17f <string_ends_with(char const*, char const*)>
c001c238:	83 c4 10             	add    esp,0x10
c001c23b:	85 c0                	test   eax,eax
c001c23d:	75 17                	jne    c001c256 <sysCallOpen(regs*)+0x8f>
c001c23f:	83 ec 08             	sub    esp,0x8
c001c242:	68 06 bd 02 c0       	push   0xc002bd06
c001c247:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c24a:	e8 30 ff ff ff       	call   c001c17f <string_ends_with(char const*, char const*)>
c001c24f:	83 c4 10             	add    esp,0x10
c001c252:	85 c0                	test   eax,eax
c001c254:	74 51                	je     c001c2a7 <sysCallOpen(regs*)+0xe0>
c001c256:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c259:	83 ec 08             	sub    esp,0x8
c001c25c:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c262:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c269:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c26c:	ff 30                	push   DWORD PTR [eax]
c001c26e:	68 ea bc 02 c0       	push   0xc002bcea
c001c273:	e8 1c 6b ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001c278:	c7 04 24 f9 bc 02 c0 	mov    DWORD PTR [esp],0xc002bcf9
c001c27f:	e8 10 6b ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001c284:	83 c4 10             	add    esp,0x10
c001c287:	81 c4 04 01 00 00    	add    esp,0x104
c001c28d:	31 c0                	xor    eax,eax
c001c28f:	31 d2                	xor    edx,edx
c001c291:	5b                   	pop    ebx
c001c292:	5e                   	pop    esi
c001c293:	c3                   	ret    
c001c294:	81 c4 04 01 00 00    	add    esp,0x104
c001c29a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c29f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c2a4:	5b                   	pop    ebx
c001c2a5:	5e                   	pop    esi
c001c2a6:	c3                   	ret    
c001c2a7:	83 ec 08             	sub    esp,0x8
c001c2aa:	68 e6 bc 02 c0       	push   0xc002bce6
c001c2af:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2b2:	e8 09 46 fe ff       	call   c00008c0 <strcmp>
c001c2b7:	83 c4 10             	add    esp,0x10
c001c2ba:	85 c0                	test   eax,eax
c001c2bc:	74 98                	je     c001c256 <sysCallOpen(regs*)+0x8f>
c001c2be:	83 ec 08             	sub    esp,0x8
c001c2c1:	68 e5 bc 02 c0       	push   0xc002bce5
c001c2c6:	56                   	push   esi
c001c2c7:	e8 b3 fe ff ff       	call   c001c17f <string_ends_with(char const*, char const*)>
c001c2cc:	83 c4 10             	add    esp,0x10
c001c2cf:	85 c0                	test   eax,eax
c001c2d1:	75 83                	jne    c001c256 <sysCallOpen(regs*)+0x8f>
c001c2d3:	83 ec 08             	sub    esp,0x8
c001c2d6:	68 0b bd 02 c0       	push   0xc002bd0b
c001c2db:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2de:	e8 9c fe ff ff       	call   c001c17f <string_ends_with(char const*, char const*)>
c001c2e3:	83 c4 10             	add    esp,0x10
c001c2e6:	85 c0                	test   eax,eax
c001c2e8:	0f 85 d9 00 00 00    	jne    c001c3c7 <sysCallOpen(regs*)+0x200>
c001c2ee:	83 ec 08             	sub    esp,0x8
c001c2f1:	68 10 bd 02 c0       	push   0xc002bd10
c001c2f6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2f9:	e8 81 fe ff ff       	call   c001c17f <string_ends_with(char const*, char const*)>
c001c2fe:	83 c4 10             	add    esp,0x10
c001c301:	85 c0                	test   eax,eax
c001c303:	0f 85 be 00 00 00    	jne    c001c3c7 <sysCallOpen(regs*)+0x200>
c001c309:	83 ec 08             	sub    esp,0x8
c001c30c:	68 0c bd 02 c0       	push   0xc002bd0c
c001c311:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c314:	e8 a7 45 fe ff       	call   c00008c0 <strcmp>
c001c319:	83 c4 10             	add    esp,0x10
c001c31c:	85 c0                	test   eax,eax
c001c31e:	0f 84 a3 00 00 00    	je     c001c3c7 <sysCallOpen(regs*)+0x200>
c001c324:	83 ec 08             	sub    esp,0x8
c001c327:	68 0b bd 02 c0       	push   0xc002bd0b
c001c32c:	56                   	push   esi
c001c32d:	e8 4d fe ff ff       	call   c001c17f <string_ends_with(char const*, char const*)>
c001c332:	83 c4 10             	add    esp,0x10
c001c335:	85 c0                	test   eax,eax
c001c337:	0f 85 8a 00 00 00    	jne    c001c3c7 <sysCallOpen(regs*)+0x200>
c001c33d:	83 ec 0c             	sub    esp,0xc
c001c340:	68 14 01 00 00       	push   0x114
c001c345:	e8 f6 34 ff ff       	call   c000f840 <malloc>
c001c34a:	83 c4 0c             	add    esp,0xc
c001c34d:	89 c6                	mov    esi,eax
c001c34f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c354:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c357:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c35a:	56                   	push   esi
c001c35b:	e8 8c 6f ff ff       	call   c00132ec <File::File(char const*, Process*)>
c001c360:	83 c4 10             	add    esp,0x10
c001c363:	85 f6                	test   esi,esi
c001c365:	0f 84 29 ff ff ff    	je     c001c294 <sysCallOpen(regs*)+0xcd>
c001c36b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c36e:	0f b6 c2             	movzx  eax,dl
c001c371:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c374:	89 d0                	mov    eax,edx
c001c376:	83 e0 01             	and    eax,0x1
c001c379:	f6 c2 02             	test   dl,0x2
c001c37c:	74 03                	je     c001c381 <sysCallOpen(regs*)+0x1ba>
c001c37e:	83 c8 02             	or     eax,0x2
c001c381:	f6 c2 04             	test   dl,0x4
c001c384:	74 03                	je     c001c389 <sysCallOpen(regs*)+0x1c2>
c001c386:	83 c8 04             	or     eax,0x4
c001c389:	f6 c2 08             	test   dl,0x8
c001c38c:	74 03                	je     c001c391 <sysCallOpen(regs*)+0x1ca>
c001c38e:	83 c8 0a             	or     eax,0xa
c001c391:	83 e2 10             	and    edx,0x10
c001c394:	74 03                	je     c001c399 <sysCallOpen(regs*)+0x1d2>
c001c396:	83 c8 12             	or     eax,0x12
c001c399:	83 ec 08             	sub    esp,0x8
c001c39c:	50                   	push   eax
c001c39d:	56                   	push   esi
c001c39e:	e8 ad 6f ff ff       	call   c0013350 <File::open(FileOpenMode)>
c001c3a3:	83 c4 10             	add    esp,0x10
c001c3a6:	85 c0                	test   eax,eax
c001c3a8:	0f 85 e6 fe ff ff    	jne    c001c294 <sysCallOpen(regs*)+0xcd>
c001c3ae:	83 ec 0c             	sub    esp,0xc
c001c3b1:	56                   	push   esi
c001c3b2:	e8 35 53 ff ff       	call   c00116ec <UnixFile::getFileDescriptor()>
c001c3b7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c3ba:	89 02                	mov    DWORD PTR [edx],eax
c001c3bc:	c1 f8 1f             	sar    eax,0x1f
c001c3bf:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c3c2:	e9 bd fe ff ff       	jmp    c001c284 <sysCallOpen(regs*)+0xbd>
c001c3c7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c3ca:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c3d0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c3d7:	e9 ab fe ff ff       	jmp    c001c287 <sysCallOpen(regs*)+0xc0>

c001c3dc <Sys::loadSyscalls()>:
c001c3dc:	c7 05 a0 0d 03 c0 e9 b4 01 c0 	mov    DWORD PTR ds:0xc0030da0,0xc001b4e9
c001c3e6:	c7 05 a4 0d 03 c0 d2 b0 01 c0 	mov    DWORD PTR ds:0xc0030da4,0xc001b0d2
c001c3f0:	c7 05 a8 0d 03 c0 3c b2 01 c0 	mov    DWORD PTR ds:0xc0030da8,0xc001b23c
c001c3fa:	c7 05 ac 0d 03 c0 1f b4 01 c0 	mov    DWORD PTR ds:0xc0030dac,0xc001b41f
c001c404:	c7 05 b0 0d 03 c0 d4 b1 01 c0 	mov    DWORD PTR ds:0xc0030db0,0xc001b1d4
c001c40e:	c7 05 b4 0d 03 c0 09 b1 01 c0 	mov    DWORD PTR ds:0xc0030db4,0xc001b109
c001c418:	c7 05 b8 0d 03 c0 ea b0 01 c0 	mov    DWORD PTR ds:0xc0030db8,0xc001b0ea
c001c422:	c7 05 bc 0d 03 c0 91 b2 01 c0 	mov    DWORD PTR ds:0xc0030dbc,0xc001b291
c001c42c:	c7 05 c4 0d 03 c0 19 ba 01 c0 	mov    DWORD PTR ds:0xc0030dc4,0xc001ba19
c001c436:	c7 05 c0 0d 03 c0 c7 c1 01 c0 	mov    DWORD PTR ds:0xc0030dc0,0xc001c1c7
c001c440:	c7 05 c8 0d 03 c0 a1 ba 01 c0 	mov    DWORD PTR ds:0xc0030dc8,0xc001baa1
c001c44a:	c7 05 cc 0d 03 c0 08 b7 01 c0 	mov    DWORD PTR ds:0xc0030dcc,0xc001b708
c001c454:	c7 05 d0 0d 03 c0 24 b5 01 c0 	mov    DWORD PTR ds:0xc0030dd0,0xc001b524
c001c45e:	c7 05 d4 0d 03 c0 29 b5 01 c0 	mov    DWORD PTR ds:0xc0030dd4,0xc001b529
c001c468:	c7 05 d8 0d 03 c0 7c bb 01 c0 	mov    DWORD PTR ds:0xc0030dd8,0xc001bb7c
c001c472:	c7 05 dc 0d 03 c0 16 bb 01 c0 	mov    DWORD PTR ds:0xc0030ddc,0xc001bb16
c001c47c:	c7 05 e0 0d 03 c0 f0 b7 01 c0 	mov    DWORD PTR ds:0xc0030de0,0xc001b7f0
c001c486:	c7 05 e4 0d 03 c0 59 b8 01 c0 	mov    DWORD PTR ds:0xc0030de4,0xc001b859
c001c490:	c7 05 e8 0d 03 c0 d6 b8 01 c0 	mov    DWORD PTR ds:0xc0030de8,0xc001b8d6
c001c49a:	c7 05 ec 0d 03 c0 2e b5 01 c0 	mov    DWORD PTR ds:0xc0030dec,0xc001b52e
c001c4a4:	c7 05 f0 0d 03 c0 ec bb 01 c0 	mov    DWORD PTR ds:0xc0030df0,0xc001bbec
c001c4ae:	c7 05 f4 0d 03 c0 06 bc 01 c0 	mov    DWORD PTR ds:0xc0030df4,0xc001bc06
c001c4b8:	c7 05 f8 0d 03 c0 06 bc 01 c0 	mov    DWORD PTR ds:0xc0030df8,0xc001bc06
c001c4c2:	c7 05 fc 0d 03 c0 47 bc 01 c0 	mov    DWORD PTR ds:0xc0030dfc,0xc001bc47
c001c4cc:	c7 05 00 0e 03 c0 ab bc 01 c0 	mov    DWORD PTR ds:0xc0030e00,0xc001bcab
c001c4d6:	c7 05 04 0e 03 c0 da b6 01 c0 	mov    DWORD PTR ds:0xc0030e04,0xc001b6da
c001c4e0:	c7 05 08 0e 03 c0 0f bd 01 c0 	mov    DWORD PTR ds:0xc0030e08,0xc001bd0f
c001c4ea:	c7 05 0c 0e 03 c0 97 b6 01 c0 	mov    DWORD PTR ds:0xc0030e0c,0xc001b697
c001c4f4:	c7 05 10 0e 03 c0 5b bd 01 c0 	mov    DWORD PTR ds:0xc0030e10,0xc001bd5b
c001c4fe:	c7 05 14 0e 03 c0 96 b7 01 c0 	mov    DWORD PTR ds:0xc0030e14,0xc001b796
c001c508:	c7 05 18 0e 03 c0 de bd 01 c0 	mov    DWORD PTR ds:0xc0030e18,0xc001bdde
c001c512:	c7 05 1c 0e 03 c0 59 b9 01 c0 	mov    DWORD PTR ds:0xc0030e1c,0xc001b959
c001c51c:	c7 05 20 0e 03 c0 05 be 01 c0 	mov    DWORD PTR ds:0xc0030e20,0xc001be05
c001c526:	c7 05 24 0e 03 c0 5d be 01 c0 	mov    DWORD PTR ds:0xc0030e24,0xc001be5d
c001c530:	c7 05 28 0e 03 c0 95 bf 01 c0 	mov    DWORD PTR ds:0xc0030e28,0xc001bf95
c001c53a:	c7 05 2c 0e 03 c0 38 b5 01 c0 	mov    DWORD PTR ds:0xc0030e2c,0xc001b538
c001c544:	c7 05 30 0e 03 c0 a2 b5 01 c0 	mov    DWORD PTR ds:0xc0030e30,0xc001b5a2
c001c54e:	c7 05 34 0e 03 c0 e8 b5 01 c0 	mov    DWORD PTR ds:0xc0030e34,0xc001b5e8
c001c558:	c7 05 38 0e 03 c0 b4 c0 01 c0 	mov    DWORD PTR ds:0xc0030e38,0xc001c0b4
c001c562:	c7 05 3c 0e 03 c0 21 bc 01 c0 	mov    DWORD PTR ds:0xc0030e3c,0xc001bc21
c001c56c:	c7 05 40 0e 03 c0 39 b6 01 c0 	mov    DWORD PTR ds:0xc0030e40,0xc001b639
c001c576:	c7 05 44 0e 03 c0 26 c1 01 c0 	mov    DWORD PTR ds:0xc0030e44,0xc001c126
c001c580:	c7 05 48 0e 03 c0 6b c1 01 c0 	mov    DWORD PTR ds:0xc0030e48,0xc001c16b
c001c58a:	c7 05 4c 0e 03 c0 2c b1 01 c0 	mov    DWORD PTR ds:0xc0030e4c,0xc001b12c
c001c594:	c7 05 50 0e 03 c0 ad b2 01 c0 	mov    DWORD PTR ds:0xc0030e50,0xc001b2ad
c001c59e:	c7 05 54 0e 03 c0 d5 b3 01 c0 	mov    DWORD PTR ds:0xc0030e54,0xc001b3d5
c001c5a8:	c7 05 58 0e 03 c0 9c b0 01 c0 	mov    DWORD PTR ds:0xc0030e58,0xc001b09c
c001c5b2:	c7 05 5c 0e 03 c0 87 b4 01 c0 	mov    DWORD PTR ds:0xc0030e5c,0xc001b487
c001c5bc:	c7 05 60 0e 03 c0 15 b1 01 c0 	mov    DWORD PTR ds:0xc0030e60,0xc001b115
c001c5c6:	c3                   	ret    

c001c5c7 <Sys::systemCall(regs*, void*)>:
c001c5c7:	53                   	push   ebx
c001c5c8:	83 ec 08             	sub    esp,0x8
c001c5cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c5cf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c5d2:	83 f8 7f             	cmp    eax,0x7f
c001c5d5:	77 16                	ja     c001c5ed <Sys::systemCall(regs*, void*)+0x26>
c001c5d7:	8b 14 85 a0 0d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf260]
c001c5de:	85 d2                	test   edx,edx
c001c5e0:	74 0b                	je     c001c5ed <Sys::systemCall(regs*, void*)+0x26>
c001c5e2:	83 ec 0c             	sub    esp,0xc
c001c5e5:	53                   	push   ebx
c001c5e6:	ff d2                	call   edx
c001c5e8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c5eb:	eb 0d                	jmp    c001c5fa <Sys::systemCall(regs*, void*)+0x33>
c001c5ed:	52                   	push   edx
c001c5ee:	52                   	push   edx
c001c5ef:	50                   	push   eax
c001c5f0:	68 15 bd 02 c0       	push   0xc002bd15
c001c5f5:	e8 9a 67 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001c5fa:	83 c4 10             	add    esp,0x10
c001c5fd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c602:	31 d2                	xor    edx,edx
c001c604:	83 c4 08             	add    esp,0x8
c001c607:	5b                   	pop    ebx
c001c608:	c3                   	ret    

c001c609 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c609:	55                   	push   ebp
c001c60a:	57                   	push   edi
c001c60b:	56                   	push   esi
c001c60c:	53                   	push   ebx
c001c60d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c613:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c61a:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c621:	85 c0                	test   eax,eax
c001c623:	0f 95 c1             	setne  cl
c001c626:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c62e:	0f 94 c2             	sete   dl
c001c631:	84 d1                	test   cl,dl
c001c633:	74 23                	je     c001c658 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c635:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c63b:	74 1b                	je     c001c658 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c63d:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c643:	89 da                	mov    edx,ebx
c001c645:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c64b:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c651:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c658:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c65f:	05 ff 0f 00 00       	add    eax,0xfff
c001c664:	83 ec 0c             	sub    esp,0xc
c001c667:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c66b:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c671:	c1 e8 0c             	shr    eax,0xc
c001c674:	89 ef                	mov    edi,ebp
c001c676:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c67a:	c1 ef 0c             	shr    edi,0xc
c001c67d:	6a 01                	push   0x1
c001c67f:	e8 b3 54 ff ff       	call   c0011b37 <Virt::allocateKernelVirtualPages(int)>
c001c684:	89 c6                	mov    esi,eax
c001c686:	58                   	pop    eax
c001c687:	5a                   	pop    edx
c001c688:	57                   	push   edi
c001c689:	68 9b bd 02 c0       	push   0xc002bd9b
c001c68e:	e8 01 67 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001c693:	59                   	pop    ecx
c001c694:	58                   	pop    eax
c001c695:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c699:	68 ad bd 02 c0       	push   0xc002bdad
c001c69e:	e8 f1 66 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001c6a3:	83 c4 10             	add    esp,0x10
c001c6a6:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c6ac:	0f 86 24 01 00 00    	jbe    c001c7d6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c6b2:	c1 e7 0c             	shl    edi,0xc
c001c6b5:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c6b8:	89 df                	mov    edi,ebx
c001c6ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c6be:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c6c5:	01 dd                	add    ebp,ebx
c001c6c7:	29 fd                	sub    ebp,edi
c001c6c9:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c6cd:	0f 84 01 01 00 00    	je     c001c7d4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c6d3:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c6d9:	76 05                	jbe    c001c6e0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c6db:	bd 00 10 00 00       	mov    ebp,0x1000
c001c6e0:	83 ec 0c             	sub    esp,0xc
c001c6e3:	31 d2                	xor    edx,edx
c001c6e5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c6ec:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c6ee:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c6f2:	50                   	push   eax
c001c6f3:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c6f7:	50                   	push   eax
c001c6f8:	52                   	push   edx
c001c6f9:	55                   	push   ebp
c001c6fa:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c701:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c704:	83 c4 20             	add    esp,0x20
c001c707:	85 c0                	test   eax,eax
c001c709:	74 0a                	je     c001c715 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c70b:	53                   	push   ebx
c001c70c:	53                   	push   ebx
c001c70d:	50                   	push   eax
c001c70e:	68 bf bd 02 c0       	push   0xc002bdbf
c001c713:	eb 0f                	jmp    c001c724 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c715:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c719:	74 20                	je     c001c73b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c71b:	51                   	push   ecx
c001c71c:	51                   	push   ecx
c001c71d:	6a 00                	push   0x0
c001c71f:	68 ea bd 02 c0       	push   0xc002bdea
c001c724:	e8 6b 66 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001c729:	89 34 24             	mov    DWORD PTR [esp],esi
c001c72c:	e8 68 57 ff ff       	call   c0011e99 <Virt::freeKernelVirtualPages(unsigned long)>
c001c731:	83 c4 10             	add    esp,0x10
c001c734:	31 c0                	xor    eax,eax
c001c736:	e9 55 01 00 00       	jmp    c001c890 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c73b:	e8 f7 14 00 00       	call   c001dc37 <lockScheduler()>
c001c740:	e8 98 37 ff ff       	call   c000fedd <Phys::allocatePage()>
c001c745:	6a 07                	push   0x7
c001c747:	89 c5                	mov    ebp,eax
c001c749:	56                   	push   esi
c001c74a:	50                   	push   eax
c001c74b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c750:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c753:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c759:	e8 a2 5a ff ff       	call   c0012200 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c75e:	83 c4 0c             	add    esp,0xc
c001c761:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c768:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c76e:	6a 00                	push   0x0
c001c770:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c775:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c778:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c77e:	e8 e7 58 ff ff       	call   c001206a <VAS::mapOtherVASIn(bool, VAS*)>
c001c783:	58                   	pop    eax
c001c784:	5a                   	pop    edx
c001c785:	68 07 0c 00 00       	push   0xc07
c001c78a:	57                   	push   edi
c001c78b:	81 c7 00 10 00 00    	add    edi,0x1000
c001c791:	55                   	push   ebp
c001c792:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c799:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c79f:	6a 00                	push   0x0
c001c7a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7a9:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c7af:	e8 06 5e ff ff       	call   c00125ba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c7b4:	83 c4 1c             	add    esp,0x1c
c001c7b7:	68 00 10 00 00       	push   0x1000
c001c7bc:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c7c0:	50                   	push   eax
c001c7c1:	56                   	push   esi
c001c7c2:	e8 7d 3f fe ff       	call   c0000744 <memcpy>
c001c7c7:	e8 6d 14 00 00       	call   c001dc39 <unlockScheduler()>
c001c7cc:	83 c4 10             	add    esp,0x10
c001c7cf:	e9 ea fe ff ff       	jmp    c001c6be <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c7d4:	89 fb                	mov    ebx,edi
c001c7d6:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c7de:	0f 86 9e 00 00 00    	jbe    c001c882 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c7e4:	e8 4e 14 00 00       	call   c001dc37 <lockScheduler()>
c001c7e9:	51                   	push   ecx
c001c7ea:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c7f1:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c7f7:	6a 00                	push   0x0
c001c7f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7fe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c801:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c807:	e8 5e 58 ff ff       	call   c001206a <VAS::mapOtherVASIn(bool, VAS*)>
c001c80c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c810:	c1 e7 0c             	shl    edi,0xc
c001c813:	01 df                	add    edi,ebx
c001c815:	83 c4 10             	add    esp,0x10
c001c818:	39 fb                	cmp    ebx,edi
c001c81a:	74 61                	je     c001c87d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c81c:	e8 bc 36 ff ff       	call   c000fedd <Phys::allocatePage()>
c001c821:	6a 07                	push   0x7
c001c823:	89 c5                	mov    ebp,eax
c001c825:	56                   	push   esi
c001c826:	50                   	push   eax
c001c827:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c82c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c82f:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c835:	e8 c6 59 ff ff       	call   c0012200 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c83a:	58                   	pop    eax
c001c83b:	5a                   	pop    edx
c001c83c:	68 07 0c 00 00       	push   0xc07
c001c841:	53                   	push   ebx
c001c842:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c848:	55                   	push   ebp
c001c849:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c850:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c856:	6a 00                	push   0x0
c001c858:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c85d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c860:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c866:	e8 4f 5d ff ff       	call   c00125ba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c86b:	83 c4 1c             	add    esp,0x1c
c001c86e:	68 00 10 00 00       	push   0x1000
c001c873:	6a 00                	push   0x0
c001c875:	56                   	push   esi
c001c876:	e8 fd 3e fe ff       	call   c0000778 <memset>
c001c87b:	eb 98                	jmp    c001c815 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001c87d:	e8 b7 13 00 00       	call   c001dc39 <unlockScheduler()>
c001c882:	83 ec 0c             	sub    esp,0xc
c001c885:	56                   	push   esi
c001c886:	e8 0e 56 ff ff       	call   c0011e99 <Virt::freeKernelVirtualPages(unsigned long)>
c001c88b:	83 c4 10             	add    esp,0x10
c001c88e:	b0 01                	mov    al,0x1
c001c890:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c896:	5b                   	pop    ebx
c001c897:	5e                   	pop    esi
c001c898:	5f                   	pop    edi
c001c899:	5d                   	pop    ebp
c001c89a:	c3                   	ret    

c001c89b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c89b:	55                   	push   ebp
c001c89c:	57                   	push   edi
c001c89d:	56                   	push   esi
c001c89e:	53                   	push   ebx
c001c89f:	83 ec 48             	sub    esp,0x48
c001c8a2:	68 14 01 00 00       	push   0x114
c001c8a7:	e8 94 2f ff ff       	call   c000f840 <malloc>
c001c8ac:	83 c4 0c             	add    esp,0xc
c001c8af:	89 c6                	mov    esi,eax
c001c8b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c8b5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c8b9:	50                   	push   eax
c001c8ba:	e8 2d 6a ff ff       	call   c00132ec <File::File(char const*, Process*)>
c001c8bf:	58                   	pop    eax
c001c8c0:	5a                   	pop    edx
c001c8c1:	6a 01                	push   0x1
c001c8c3:	56                   	push   esi
c001c8c4:	e8 87 6a ff ff       	call   c0013350 <File::open(FileOpenMode)>
c001c8c9:	83 c4 10             	add    esp,0x10
c001c8cc:	85 c0                	test   eax,eax
c001c8ce:	0f 85 47 01 00 00    	jne    c001ca1b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c8d4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c8dc:	83 ec 0c             	sub    esp,0xc
c001c8df:	6a 34                	push   0x34
c001c8e1:	e8 5a 2f ff ff       	call   c000f840 <malloc>
c001c8e6:	89 c3                	mov    ebx,eax
c001c8e8:	58                   	pop    eax
c001c8e9:	8b 06                	mov    eax,DWORD PTR [esi]
c001c8eb:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c8ef:	57                   	push   edi
c001c8f0:	53                   	push   ebx
c001c8f1:	6a 00                	push   0x0
c001c8f3:	6a 34                	push   0x34
c001c8f5:	56                   	push   esi
c001c8f6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c8f9:	83 c4 20             	add    esp,0x20
c001c8fc:	85 c0                	test   eax,eax
c001c8fe:	0f 85 17 01 00 00    	jne    c001ca1b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c904:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c90a:	0f 85 0b 01 00 00    	jne    c001ca1b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c910:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c913:	85 c0                	test   eax,eax
c001c915:	0f 84 00 01 00 00    	je     c001ca1b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c91b:	31 d2                	xor    edx,edx
c001c91d:	55                   	push   ebp
c001c91e:	52                   	push   edx
c001c91f:	50                   	push   eax
c001c920:	56                   	push   esi
c001c921:	e8 e8 6a ff ff       	call   c001340e <File::seek(unsigned long long)>
c001c926:	83 c4 10             	add    esp,0x10
c001c929:	85 c0                	test   eax,eax
c001c92b:	0f 85 ea 00 00 00    	jne    c001ca1b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c931:	83 ec 0c             	sub    esp,0xc
c001c934:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c937:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c93b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c93f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c943:	0f af c2             	imul   eax,edx
c001c946:	50                   	push   eax
c001c947:	e8 f4 2e ff ff       	call   c000f840 <malloc>
c001c94c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c94e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c952:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c955:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c959:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c95d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c961:	0f af c2             	imul   eax,edx
c001c964:	99                   	cdq    
c001c965:	52                   	push   edx
c001c966:	50                   	push   eax
c001c967:	56                   	push   esi
c001c968:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c96b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c96e:	83 c4 20             	add    esp,0x20
c001c971:	85 c0                	test   eax,eax
c001c973:	0f 84 a2 00 00 00    	je     c001ca1b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c979:	31 d2                	xor    edx,edx
c001c97b:	51                   	push   ecx
c001c97c:	52                   	push   edx
c001c97d:	50                   	push   eax
c001c97e:	56                   	push   esi
c001c97f:	e8 8a 6a ff ff       	call   c001340e <File::seek(unsigned long long)>
c001c984:	83 c4 10             	add    esp,0x10
c001c987:	85 c0                	test   eax,eax
c001c989:	0f 85 8c 00 00 00    	jne    c001ca1b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c98f:	83 ec 0c             	sub    esp,0xc
c001c992:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c996:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c99a:	31 ed                	xor    ebp,ebp
c001c99c:	0f af c2             	imul   eax,edx
c001c99f:	50                   	push   eax
c001c9a0:	e8 9b 2e ff ff       	call   c000f840 <malloc>
c001c9a5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c9a7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c9ab:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9b2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c9b6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c9ba:	0f af c2             	imul   eax,edx
c001c9bd:	99                   	cdq    
c001c9be:	52                   	push   edx
c001c9bf:	50                   	push   eax
c001c9c0:	56                   	push   esi
c001c9c1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9c4:	83 c4 20             	add    esp,0x20
c001c9c7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c9cf:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c9d3:	0f 86 80 00 00 00    	jbe    c001ca59 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c9d9:	0f b7 fd             	movzx  edi,bp
c001c9dc:	c1 e7 05             	shl    edi,0x5
c001c9df:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c9e3:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c9e6:	75 6b                	jne    c001ca53 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c9e8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c9eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c9ef:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c9f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c9f6:	52                   	push   edx
c001c9f7:	31 d2                	xor    edx,edx
c001c9f9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c9fc:	52                   	push   edx
c001c9fd:	50                   	push   eax
c001c9fe:	56                   	push   esi
c001c9ff:	e8 0a 6a ff ff       	call   c001340e <File::seek(unsigned long long)>
c001ca04:	83 c4 10             	add    esp,0x10
c001ca07:	85 c0                	test   eax,eax
c001ca09:	74 17                	je     c001ca22 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001ca0b:	83 ec 0c             	sub    esp,0xc
c001ca0e:	68 16 be 02 c0       	push   0xc002be16
c001ca13:	e8 7c 63 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001ca18:	83 c4 10             	add    esp,0x10
c001ca1b:	31 c0                	xor    eax,eax
c001ca1d:	e9 87 00 00 00       	jmp    c001caa9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001ca22:	83 ec 0c             	sub    esp,0xc
c001ca25:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ca28:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001ca2b:	50                   	push   eax
c001ca2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ca30:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca34:	56                   	push   esi
c001ca35:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001ca39:	e8 cb fb ff ff       	call   c001c609 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001ca3e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ca42:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001ca46:	83 c4 20             	add    esp,0x20
c001ca49:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ca4d:	73 04                	jae    c001ca53 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ca4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ca53:	45                   	inc    ebp
c001ca54:	e9 76 ff ff ff       	jmp    c001c9cf <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001ca59:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001ca5d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ca61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca65:	89 91 2e 19 00 00    	mov    DWORD PTR [ecx+0x192e],edx
c001ca6b:	83 ec 0c             	sub    esp,0xc
c001ca6e:	8b 91 32 19 00 00    	mov    edx,DWORD PTR [ecx+0x1932]
c001ca74:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ca79:	05 00 10 00 00       	add    eax,0x1000
c001ca7e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ca81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca85:	e8 c6 2d ff ff       	call   c000f850 <free>
c001ca8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca8d:	e8 be 2d ff ff       	call   c000f850 <free>
c001ca92:	58                   	pop    eax
c001ca93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ca97:	e8 b4 2d ff ff       	call   c000f850 <free>
c001ca9c:	89 34 24             	mov    DWORD PTR [esp],esi
c001ca9f:	e8 0a 69 ff ff       	call   c00133ae <File::close()>
c001caa4:	83 c4 10             	add    esp,0x10
c001caa7:	b0 01                	mov    al,0x1
c001caa9:	83 c4 3c             	add    esp,0x3c
c001caac:	5b                   	pop    ebx
c001caad:	5e                   	pop    esi
c001caae:	5f                   	pop    edi
c001caaf:	5d                   	pop    ebp
c001cab0:	c3                   	ret    

c001cab1 <Thr::runtimeReferenceHelper()>:
c001cab1:	83 ec 18             	sub    esp,0x18
c001cab4:	68 1e be 02 c0       	push   0xc002be1e
c001cab9:	e8 d6 62 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001cabe:	fa                   	cli    
c001cabf:	83 c4 10             	add    esp,0x10
c001cac2:	eb fe                	jmp    c001cac2 <Thr::runtimeReferenceHelper()+0x11>

c001cac4 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cac4:	57                   	push   edi
c001cac5:	56                   	push   esi
c001cac6:	53                   	push   ebx
c001cac7:	31 db                	xor    ebx,ebx
c001cac9:	39 1d 40 17 03 c0    	cmp    DWORD PTR ds:0xc0031740,ebx
c001cacf:	7e 3c                	jle    c001cb0d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cad1:	8b 34 9d c0 16 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce940]
c001cad8:	31 ff                	xor    edi,edi
c001cada:	39 3c 9d c0 15 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcea40],edi
c001cae1:	7e 27                	jle    c001cb0a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cae3:	50                   	push   eax
c001cae4:	50                   	push   eax
c001cae5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cae9:	8b 06                	mov    eax,DWORD PTR [esi]
c001caeb:	03 04 9d 40 16 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce9c0]
c001caf2:	50                   	push   eax
c001caf3:	e8 c8 3d fe ff       	call   c00008c0 <strcmp>
c001caf8:	83 c4 10             	add    esp,0x10
c001cafb:	85 c0                	test   eax,eax
c001cafd:	75 05                	jne    c001cb04 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001caff:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cb02:	eb 0b                	jmp    c001cb0f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cb04:	83 c6 10             	add    esi,0x10
c001cb07:	47                   	inc    edi
c001cb08:	eb d0                	jmp    c001cada <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cb0a:	43                   	inc    ebx
c001cb0b:	eb bc                	jmp    c001cac9 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cb0d:	31 c0                	xor    eax,eax
c001cb0f:	5b                   	pop    ebx
c001cb10:	5e                   	pop    esi
c001cb11:	5f                   	pop    edi
c001cb12:	c3                   	ret    

c001cb13 <Thr::loadKernelSymbolTable(char const*)>:
c001cb13:	55                   	push   ebp
c001cb14:	57                   	push   edi
c001cb15:	56                   	push   esi
c001cb16:	53                   	push   ebx
c001cb17:	83 ec 68             	sub    esp,0x68
c001cb1a:	8b 35 94 17 03 c0    	mov    esi,DWORD PTR ds:0xc0031794
c001cb20:	68 14 01 00 00       	push   0x114
c001cb25:	e8 16 2d ff ff       	call   c000f840 <malloc>
c001cb2a:	83 c4 0c             	add    esp,0xc
c001cb2d:	89 c3                	mov    ebx,eax
c001cb2f:	56                   	push   esi
c001cb30:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cb34:	50                   	push   eax
c001cb35:	e8 b2 67 ff ff       	call   c00132ec <File::File(char const*, Process*)>
c001cb3a:	5e                   	pop    esi
c001cb3b:	5f                   	pop    edi
c001cb3c:	6a 01                	push   0x1
c001cb3e:	53                   	push   ebx
c001cb3f:	e8 0c 68 ff ff       	call   c0013350 <File::open(FileOpenMode)>
c001cb44:	83 c4 10             	add    esp,0x10
c001cb47:	85 c0                	test   eax,eax
c001cb49:	74 0a                	je     c001cb55 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cb4b:	83 ec 0c             	sub    esp,0xc
c001cb4e:	68 40 be 02 c0       	push   0xc002be40
c001cb53:	eb 34                	jmp    c001cb89 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cb55:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cb5d:	83 ec 0c             	sub    esp,0xc
c001cb60:	6a 34                	push   0x34
c001cb62:	e8 d9 2c ff ff       	call   c000f840 <malloc>
c001cb67:	59                   	pop    ecx
c001cb68:	89 c7                	mov    edi,eax
c001cb6a:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cb6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb70:	56                   	push   esi
c001cb71:	57                   	push   edi
c001cb72:	6a 00                	push   0x0
c001cb74:	6a 34                	push   0x34
c001cb76:	53                   	push   ebx
c001cb77:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb7a:	83 c4 20             	add    esp,0x20
c001cb7d:	85 c0                	test   eax,eax
c001cb7f:	74 17                	je     c001cb98 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cb81:	83 ec 0c             	sub    esp,0xc
c001cb84:	68 57 be 02 c0       	push   0xc002be57
c001cb89:	e8 af d8 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001cb8e:	83 c4 10             	add    esp,0x10
c001cb91:	31 c0                	xor    eax,eax
c001cb93:	e9 31 02 00 00       	jmp    c001cdc9 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cb98:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cb9e:	75 e1                	jne    c001cb81 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cba0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cba3:	85 c0                	test   eax,eax
c001cba5:	74 da                	je     c001cb81 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cba7:	52                   	push   edx
c001cba8:	31 d2                	xor    edx,edx
c001cbaa:	52                   	push   edx
c001cbab:	50                   	push   eax
c001cbac:	53                   	push   ebx
c001cbad:	e8 5c 68 ff ff       	call   c001340e <File::seek(unsigned long long)>
c001cbb2:	83 c4 10             	add    esp,0x10
c001cbb5:	85 c0                	test   eax,eax
c001cbb7:	75 c8                	jne    c001cb81 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cbb9:	83 ec 0c             	sub    esp,0xc
c001cbbc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cbc0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cbc4:	31 ed                	xor    ebp,ebp
c001cbc6:	0f af c2             	imul   eax,edx
c001cbc9:	50                   	push   eax
c001cbca:	e8 71 2c ff ff       	call   c000f840 <malloc>
c001cbcf:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cbd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbd5:	89 34 24             	mov    DWORD PTR [esp],esi
c001cbd8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cbdc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cbe0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cbe4:	0f af c2             	imul   eax,edx
c001cbe7:	99                   	cdq    
c001cbe8:	52                   	push   edx
c001cbe9:	50                   	push   eax
c001cbea:	53                   	push   ebx
c001cbeb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbee:	83 c4 20             	add    esp,0x20
c001cbf1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cbf9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cc01:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cc09:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cc11:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cc15:	0f 86 aa 00 00 00    	jbe    c001ccc5 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cc1b:	0f b7 f5             	movzx  esi,bp
c001cc1e:	6b f6 28             	imul   esi,esi,0x28
c001cc21:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cc25:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cc28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc2c:	50                   	push   eax
c001cc2d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cc31:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cc35:	8b 16                	mov    edx,DWORD PTR [esi]
c001cc37:	6b c0 28             	imul   eax,eax,0x28
c001cc3a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cc3e:	89 d0                	mov    eax,edx
c001cc40:	31 d2                	xor    edx,edx
c001cc42:	52                   	push   edx
c001cc43:	50                   	push   eax
c001cc44:	53                   	push   ebx
c001cc45:	e8 c4 67 ff ff       	call   c001340e <File::seek(unsigned long long)>
c001cc4a:	83 c4 0c             	add    esp,0xc
c001cc4d:	6a 20                	push   0x20
c001cc4f:	6a 00                	push   0x0
c001cc51:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cc55:	52                   	push   edx
c001cc56:	e8 1d 3b fe ff       	call   c0000778 <memset>
c001cc5b:	58                   	pop    eax
c001cc5c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc5e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cc62:	51                   	push   ecx
c001cc63:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cc67:	52                   	push   edx
c001cc68:	6a 00                	push   0x0
c001cc6a:	6a 1f                	push   0x1f
c001cc6c:	53                   	push   ebx
c001cc6d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cc70:	83 c4 18             	add    esp,0x18
c001cc73:	68 6e be 02 c0       	push   0xc002be6e
c001cc78:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cc7c:	52                   	push   edx
c001cc7d:	e8 3e 3c fe ff       	call   c00008c0 <strcmp>
c001cc82:	83 c4 10             	add    esp,0x10
c001cc85:	85 c0                	test   eax,eax
c001cc87:	75 0f                	jne    c001cc98 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cc89:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cc8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cc90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc98:	50                   	push   eax
c001cc99:	50                   	push   eax
c001cc9a:	68 76 be 02 c0       	push   0xc002be76
c001cc9f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cca3:	50                   	push   eax
c001cca4:	e8 17 3c fe ff       	call   c00008c0 <strcmp>
c001cca9:	83 c4 10             	add    esp,0x10
c001ccac:	85 c0                	test   eax,eax
c001ccae:	75 0f                	jne    c001ccbf <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ccb0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ccb3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ccb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ccbf:	45                   	inc    ebp
c001ccc0:	e9 4c ff ff ff       	jmp    c001cc11 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ccc5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ccca:	75 10                	jne    c001ccdc <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cccc:	83 ec 0c             	sub    esp,0xc
c001cccf:	68 7e be 02 c0       	push   0xc002be7e
c001ccd4:	e8 64 d7 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001ccd9:	83 c4 10             	add    esp,0x10
c001ccdc:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cce1:	75 10                	jne    c001ccf3 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cce3:	83 ec 0c             	sub    esp,0xc
c001cce6:	68 7e be 02 c0       	push   0xc002be7e
c001cceb:	e8 4d d7 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001ccf0:	83 c4 10             	add    esp,0x10
c001ccf3:	31 d2                	xor    edx,edx
c001ccf5:	50                   	push   eax
c001ccf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccfa:	52                   	push   edx
c001ccfb:	50                   	push   eax
c001ccfc:	53                   	push   ebx
c001ccfd:	e8 0c 67 ff ff       	call   c001340e <File::seek(unsigned long long)>
c001cd02:	5a                   	pop    edx
c001cd03:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cd07:	e8 34 2b ff ff       	call   c000f840 <malloc>
c001cd0c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cd10:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cd14:	31 c9                	xor    ecx,ecx
c001cd16:	5e                   	pop    esi
c001cd17:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd19:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cd1d:	55                   	push   ebp
c001cd1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd22:	51                   	push   ecx
c001cd23:	52                   	push   edx
c001cd24:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cd28:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cd2c:	53                   	push   ebx
c001cd2d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd30:	83 c4 14             	add    esp,0x14
c001cd33:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cd37:	e8 04 2b ff ff       	call   c000f840 <malloc>
c001cd3c:	89 c6                	mov    esi,eax
c001cd3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd40:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd43:	56                   	push   esi
c001cd44:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd48:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cd4c:	51                   	push   ecx
c001cd4d:	52                   	push   edx
c001cd4e:	53                   	push   ebx
c001cd4f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd52:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd56:	8b 15 40 17 03 c0    	mov    edx,DWORD PTR ds:0xc0031740
c001cd5c:	83 c4 1c             	add    esp,0x1c
c001cd5f:	c1 e8 04             	shr    eax,0x4
c001cd62:	89 04 95 c0 15 03 c0 	mov    DWORD PTR [edx*4-0x3ffcea40],eax
c001cd69:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cd6d:	31 d2                	xor    edx,edx
c001cd6f:	52                   	push   edx
c001cd70:	50                   	push   eax
c001cd71:	53                   	push   ebx
c001cd72:	e8 97 66 ff ff       	call   c001340e <File::seek(unsigned long long)>
c001cd77:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cd79:	31 d2                	xor    edx,edx
c001cd7b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd7e:	56                   	push   esi
c001cd7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cd83:	52                   	push   edx
c001cd84:	50                   	push   eax
c001cd85:	53                   	push   ebx
c001cd86:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd89:	83 c4 14             	add    esp,0x14
c001cd8c:	53                   	push   ebx
c001cd8d:	e8 1c 66 ff ff       	call   c00133ae <File::close()>
c001cd92:	5d                   	pop    ebp
c001cd93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd97:	e8 b4 2a ff ff       	call   c000f850 <free>
c001cd9c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cd9f:	e8 ac 2a ff ff       	call   c000f850 <free>
c001cda4:	a1 40 17 03 c0       	mov    eax,ds:0xc0031740
c001cda9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cdad:	8d 50 01             	lea    edx,[eax+0x1]
c001cdb0:	89 0c 85 c0 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce940],ecx
c001cdb7:	89 34 85 40 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce9c0],esi
c001cdbe:	89 15 40 17 03 c0    	mov    DWORD PTR ds:0xc0031740,edx
c001cdc4:	83 c4 10             	add    esp,0x10
c001cdc7:	b0 01                	mov    al,0x1
c001cdc9:	83 c4 5c             	add    esp,0x5c
c001cdcc:	5b                   	pop    ebx
c001cdcd:	5e                   	pop    esi
c001cdce:	5f                   	pop    edi
c001cdcf:	5d                   	pop    ebp
c001cdd0:	c3                   	ret    

c001cdd1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cdd1:	55                   	push   ebp
c001cdd2:	57                   	push   edi
c001cdd3:	56                   	push   esi
c001cdd4:	53                   	push   ebx
c001cdd5:	81 ec 68 03 00 00    	sub    esp,0x368
c001cddb:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cde2:	8b 1d 94 17 03 c0    	mov    ebx,DWORD PTR ds:0xc0031794
c001cde8:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cdec:	68 14 01 00 00       	push   0x114
c001cdf1:	e8 4a 2a ff ff       	call   c000f840 <malloc>
c001cdf6:	83 c4 0c             	add    esp,0xc
c001cdf9:	89 c5                	mov    ebp,eax
c001cdfb:	53                   	push   ebx
c001cdfc:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001ce03:	50                   	push   eax
c001ce04:	e8 e3 64 ff ff       	call   c00132ec <File::File(char const*, Process*)>
c001ce09:	5e                   	pop    esi
c001ce0a:	5f                   	pop    edi
c001ce0b:	6a 01                	push   0x1
c001ce0d:	55                   	push   ebp
c001ce0e:	e8 3d 65 ff ff       	call   c0013350 <File::open(FileOpenMode)>
c001ce13:	83 c4 10             	add    esp,0x10
c001ce16:	85 c0                	test   eax,eax
c001ce18:	0f 85 8d 06 00 00    	jne    c001d4ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ce1e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ce26:	83 ec 0c             	sub    esp,0xc
c001ce29:	6a 34                	push   0x34
c001ce2b:	e8 10 2a ff ff       	call   c000f840 <malloc>
c001ce30:	5b                   	pop    ebx
c001ce31:	89 c7                	mov    edi,eax
c001ce33:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001ce37:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ce3a:	53                   	push   ebx
c001ce3b:	57                   	push   edi
c001ce3c:	6a 00                	push   0x0
c001ce3e:	6a 34                	push   0x34
c001ce40:	55                   	push   ebp
c001ce41:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce44:	83 c4 20             	add    esp,0x20
c001ce47:	85 c0                	test   eax,eax
c001ce49:	0f 85 5c 06 00 00    	jne    c001d4ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ce4f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ce55:	0f 85 50 06 00 00    	jne    c001d4ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ce5b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ce5e:	85 c0                	test   eax,eax
c001ce60:	0f 84 45 06 00 00    	je     c001d4ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ce66:	31 d2                	xor    edx,edx
c001ce68:	51                   	push   ecx
c001ce69:	52                   	push   edx
c001ce6a:	50                   	push   eax
c001ce6b:	55                   	push   ebp
c001ce6c:	e8 9d 65 ff ff       	call   c001340e <File::seek(unsigned long long)>
c001ce71:	83 c4 10             	add    esp,0x10
c001ce74:	85 c0                	test   eax,eax
c001ce76:	0f 85 2f 06 00 00    	jne    c001d4ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ce7c:	83 ec 0c             	sub    esp,0xc
c001ce7f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001ce82:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce86:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ce8a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce8e:	0f af c2             	imul   eax,edx
c001ce91:	50                   	push   eax
c001ce92:	e8 a9 29 ff ff       	call   c000f840 <malloc>
c001ce97:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ce9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cea1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cea5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cea9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cead:	0f af c2             	imul   eax,edx
c001ceb0:	99                   	cdq    
c001ceb1:	52                   	push   edx
c001ceb2:	50                   	push   eax
c001ceb3:	55                   	push   ebp
c001ceb4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ceb7:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001ceba:	83 c4 20             	add    esp,0x20
c001cebd:	85 c0                	test   eax,eax
c001cebf:	0f 84 e6 05 00 00    	je     c001d4ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cec5:	52                   	push   edx
c001cec6:	31 d2                	xor    edx,edx
c001cec8:	52                   	push   edx
c001cec9:	50                   	push   eax
c001ceca:	55                   	push   ebp
c001cecb:	e8 3e 65 ff ff       	call   c001340e <File::seek(unsigned long long)>
c001ced0:	83 c4 10             	add    esp,0x10
c001ced3:	85 c0                	test   eax,eax
c001ced5:	0f 85 d0 05 00 00    	jne    c001d4ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cedb:	83 ec 0c             	sub    esp,0xc
c001cede:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cee2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cee6:	31 f6                	xor    esi,esi
c001cee8:	0f af c2             	imul   eax,edx
c001ceeb:	50                   	push   eax
c001ceec:	e8 4f 29 ff ff       	call   c000f840 <malloc>
c001cef1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cef4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cef8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cefb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ceff:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cf03:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cf07:	0f af c2             	imul   eax,edx
c001cf0a:	99                   	cdq    
c001cf0b:	52                   	push   edx
c001cf0c:	50                   	push   eax
c001cf0d:	55                   	push   ebp
c001cf0e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf11:	83 c4 20             	add    esp,0x20
c001cf14:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cf18:	0f 86 8a 00 00 00    	jbe    c001cfa8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cf1e:	0f b7 de             	movzx  ebx,si
c001cf21:	c1 e3 05             	shl    ebx,0x5
c001cf24:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cf28:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cf2b:	75 75                	jne    c001cfa2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cf2d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cf30:	31 d2                	xor    edx,edx
c001cf32:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cf36:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cf39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cf3d:	50                   	push   eax
c001cf3e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001cf41:	52                   	push   edx
c001cf42:	50                   	push   eax
c001cf43:	55                   	push   ebp
c001cf44:	e8 c5 64 ff ff       	call   c001340e <File::seek(unsigned long long)>
c001cf49:	83 c4 10             	add    esp,0x10
c001cf4c:	85 c0                	test   eax,eax
c001cf4e:	0f 85 57 05 00 00    	jne    c001d4ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf54:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001cf5b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf5e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001cf62:	31 d2                	xor    edx,edx
c001cf64:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001cf68:	83 ec 0c             	sub    esp,0xc
c001cf6b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf6f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf76:	50                   	push   eax
c001cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf7f:	52                   	push   edx
c001cf80:	50                   	push   eax
c001cf81:	55                   	push   ebp
c001cf82:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf85:	83 c4 1c             	add    esp,0x1c
c001cf88:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cf8b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001cf8e:	50                   	push   eax
c001cf8f:	6a 00                	push   0x0
c001cf91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf95:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001cf99:	50                   	push   eax
c001cf9a:	e8 d9 37 fe ff       	call   c0000778 <memset>
c001cf9f:	83 c4 10             	add    esp,0x10
c001cfa2:	46                   	inc    esi
c001cfa3:	e9 6c ff ff ff       	jmp    c001cf14 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001cfa8:	53                   	push   ebx
c001cfa9:	31 db                	xor    ebx,ebx
c001cfab:	68 00 01 00 00       	push   0x100
c001cfb0:	6a 00                	push   0x0
c001cfb2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cfb6:	50                   	push   eax
c001cfb7:	e8 bc 37 fe ff       	call   c0000778 <memset>
c001cfbc:	83 c4 0c             	add    esp,0xc
c001cfbf:	68 00 01 00 00       	push   0x100
c001cfc4:	6a 00                	push   0x0
c001cfc6:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001cfcd:	50                   	push   eax
c001cfce:	e8 a5 37 fe ff       	call   c0000778 <memset>
c001cfd3:	83 c4 10             	add    esp,0x10
c001cfd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cfde:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cfe6:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001cfee:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cff6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cffe:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d002:	0f 86 30 01 00 00    	jbe    c001d138 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d008:	0f b7 f3             	movzx  esi,bx
c001d00b:	6b f6 28             	imul   esi,esi,0x28
c001d00e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d012:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d015:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d019:	52                   	push   edx
c001d01a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d01e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d022:	8b 06                	mov    eax,DWORD PTR [esi]
c001d024:	6b d2 28             	imul   edx,edx,0x28
c001d027:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d02b:	31 d2                	xor    edx,edx
c001d02d:	52                   	push   edx
c001d02e:	50                   	push   eax
c001d02f:	55                   	push   ebp
c001d030:	e8 d9 63 ff ff       	call   c001340e <File::seek(unsigned long long)>
c001d035:	83 c4 0c             	add    esp,0xc
c001d038:	6a 20                	push   0x20
c001d03a:	6a 00                	push   0x0
c001d03c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d043:	51                   	push   ecx
c001d044:	e8 2f 37 fe ff       	call   c0000778 <memset>
c001d049:	59                   	pop    ecx
c001d04a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d04d:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d051:	52                   	push   edx
c001d052:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d059:	51                   	push   ecx
c001d05a:	6a 00                	push   0x0
c001d05c:	6a 1f                	push   0x1f
c001d05e:	55                   	push   ebp
c001d05f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d062:	83 c4 1c             	add    esp,0x1c
c001d065:	6a 09                	push   0x9
c001d067:	68 98 be 02 c0       	push   0xc002be98
c001d06c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d073:	51                   	push   ecx
c001d074:	e8 c7 35 fe ff       	call   c0000640 <memcmp>
c001d079:	83 c4 10             	add    esp,0x10
c001d07c:	85 c0                	test   eax,eax
c001d07e:	75 21                	jne    c001d0a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d080:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d084:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d088:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d08c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d090:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d093:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d09a:	89 d0                	mov    eax,edx
c001d09c:	40                   	inc    eax
c001d09d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0a1:	50                   	push   eax
c001d0a2:	6a 09                	push   0x9
c001d0a4:	68 a2 be 02 c0       	push   0xc002bea2
c001d0a9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0b0:	50                   	push   eax
c001d0b1:	e8 8a 35 fe ff       	call   c0000640 <memcmp>
c001d0b6:	83 c4 10             	add    esp,0x10
c001d0b9:	85 c0                	test   eax,eax
c001d0bb:	75 21                	jne    c001d0de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d0bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d0c5:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d0c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d0cd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d0d0:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d0d7:	89 d0                	mov    eax,edx
c001d0d9:	40                   	inc    eax
c001d0da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0de:	50                   	push   eax
c001d0df:	50                   	push   eax
c001d0e0:	68 6e be 02 c0       	push   0xc002be6e
c001d0e5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0ec:	50                   	push   eax
c001d0ed:	e8 ce 37 fe ff       	call   c00008c0 <strcmp>
c001d0f2:	83 c4 10             	add    esp,0x10
c001d0f5:	85 c0                	test   eax,eax
c001d0f7:	75 0f                	jne    c001d108 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d0f9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d0fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d100:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d104:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d108:	50                   	push   eax
c001d109:	50                   	push   eax
c001d10a:	68 76 be 02 c0       	push   0xc002be76
c001d10f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d116:	50                   	push   eax
c001d117:	e8 a4 37 fe ff       	call   c00008c0 <strcmp>
c001d11c:	83 c4 10             	add    esp,0x10
c001d11f:	85 c0                	test   eax,eax
c001d121:	75 0f                	jne    c001d132 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d123:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d126:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d12a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d12e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d132:	43                   	inc    ebx
c001d133:	e9 c6 fe ff ff       	jmp    c001cffe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d138:	31 d2                	xor    edx,edx
c001d13a:	50                   	push   eax
c001d13b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d13f:	52                   	push   edx
c001d140:	50                   	push   eax
c001d141:	55                   	push   ebp
c001d142:	e8 c7 62 ff ff       	call   c001340e <File::seek(unsigned long long)>
c001d147:	58                   	pop    eax
c001d148:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d14c:	e8 ef 26 ff ff       	call   c000f840 <malloc>
c001d151:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d154:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d158:	31 d2                	xor    edx,edx
c001d15a:	58                   	pop    eax
c001d15b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d15f:	53                   	push   ebx
c001d160:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d164:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d168:	52                   	push   edx
c001d169:	50                   	push   eax
c001d16a:	55                   	push   ebp
c001d16b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d16e:	83 c4 14             	add    esp,0x14
c001d171:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d175:	e8 c6 26 ff ff       	call   c000f840 <malloc>
c001d17a:	31 d2                	xor    edx,edx
c001d17c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d180:	83 c4 0c             	add    esp,0xc
c001d183:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d187:	52                   	push   edx
c001d188:	50                   	push   eax
c001d189:	55                   	push   ebp
c001d18a:	e8 7f 62 ff ff       	call   c001340e <File::seek(unsigned long long)>
c001d18f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d192:	31 d2                	xor    edx,edx
c001d194:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d197:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d19b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d19f:	52                   	push   edx
c001d1a0:	50                   	push   eax
c001d1a1:	55                   	push   ebp
c001d1a2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1a5:	83 c4 20             	add    esp,0x20
c001d1a8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d1b0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d1b4:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d1b8:	0f 84 f1 02 00 00    	je     c001d4af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d1be:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d1c5:	31 d2                	xor    edx,edx
c001d1c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1cb:	c1 e8 03             	shr    eax,0x3
c001d1ce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d1d2:	51                   	push   ecx
c001d1d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1d7:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d1db:	52                   	push   edx
c001d1dc:	50                   	push   eax
c001d1dd:	55                   	push   ebp
c001d1de:	e8 2b 62 ff ff       	call   c001340e <File::seek(unsigned long long)>
c001d1e3:	5b                   	pop    ebx
c001d1e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1e8:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d1ef:	e8 4c 26 ff ff       	call   c000f840 <malloc>
c001d1f4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d1f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d1fb:	31 d2                	xor    edx,edx
c001d1fd:	5e                   	pop    esi
c001d1fe:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d202:	50                   	push   eax
c001d203:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d207:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d20b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d212:	52                   	push   edx
c001d213:	50                   	push   eax
c001d214:	55                   	push   ebp
c001d215:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d218:	83 c4 20             	add    esp,0x20
c001d21b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d223:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d227:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d22b:	0f 8d 62 02 00 00    	jge    c001d493 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d231:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d235:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d239:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d23e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d241:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d245:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d249:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d24d:	89 d8                	mov    eax,ebx
c001d24f:	c1 e8 08             	shr    eax,0x8
c001d252:	89 c6                	mov    esi,eax
c001d254:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d258:	c1 e6 04             	shl    esi,0x4
c001d25b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d25f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d262:	85 d2                	test   edx,edx
c001d264:	0f 85 bf 00 00 00    	jne    c001d329 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d26a:	83 ec 0c             	sub    esp,0xc
c001d26d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d271:	03 06                	add    eax,DWORD PTR [esi]
c001d273:	50                   	push   eax
c001d274:	e8 4b f8 ff ff       	call   c001cac4 <Thr::getAddressOfKernelSymbol(char const*)>
c001d279:	83 c4 10             	add    esp,0x10
c001d27c:	89 c2                	mov    edx,eax
c001d27e:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d283:	85 c0                	test   eax,eax
c001d285:	0f 85 9e 00 00 00    	jne    c001d329 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d28b:	83 ec 0c             	sub    esp,0xc
c001d28e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d292:	03 06                	add    eax,DWORD PTR [esi]
c001d294:	50                   	push   eax
c001d295:	e8 5b 12 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d29a:	83 c4 10             	add    esp,0x10
c001d29d:	89 c2                	mov    edx,eax
c001d29f:	85 c0                	test   eax,eax
c001d2a1:	0f 85 82 00 00 00    	jne    c001d329 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d2a7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d2ab:	50                   	push   eax
c001d2ac:	50                   	push   eax
c001d2ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2b1:	03 06                	add    eax,DWORD PTR [esi]
c001d2b3:	50                   	push   eax
c001d2b4:	68 ac be 02 c0       	push   0xc002beac
c001d2b9:	e8 d6 5a ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001d2be:	58                   	pop    eax
c001d2bf:	5a                   	pop    edx
c001d2c0:	68 c6 be 02 c0       	push   0xc002bec6
c001d2c5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2cc:	50                   	push   eax
c001d2cd:	e8 62 35 fe ff       	call   c0000834 <strcpy>
c001d2d2:	59                   	pop    ecx
c001d2d3:	58                   	pop    eax
c001d2d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2d8:	03 06                	add    eax,DWORD PTR [esi]
c001d2da:	50                   	push   eax
c001d2db:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2e2:	50                   	push   eax
c001d2e3:	e8 8c 36 fe ff       	call   c0000974 <strcat>
c001d2e8:	58                   	pop    eax
c001d2e9:	5a                   	pop    edx
c001d2ea:	68 5c bf 02 c0       	push   0xc002bf5c
c001d2ef:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2f6:	50                   	push   eax
c001d2f7:	e8 78 36 fe ff       	call   c0000974 <strcat>
c001d2fc:	83 c4 10             	add    esp,0x10
c001d2ff:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d304:	0f 84 43 01 00 00    	je     c001d44d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d30a:	83 ec 0c             	sub    esp,0xc
c001d30d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d314:	50                   	push   eax
c001d315:	e8 23 d1 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001d31a:	83 c4 10             	add    esp,0x10
c001d31d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d321:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d325:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d329:	80 fb 01             	cmp    bl,0x1
c001d32c:	75 7d                	jne    c001d3ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d32e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d335:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d339:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d33d:	01 ce                	add    esi,ecx
c001d33f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d345:	0f 94 c0             	sete   al
c001d348:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d34e:	0f 94 c3             	sete   bl
c001d351:	09 c3                	or     ebx,eax
c001d353:	8b 06                	mov    eax,DWORD PTR [esi]
c001d355:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d35a:	74 36                	je     c001d392 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d35c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d35f:	84 db                	test   bl,bl
c001d361:	75 0a                	jne    c001d36d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d363:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d367:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d36b:	76 37                	jbe    c001d3a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d36d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d371:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d376:	0f 84 d1 00 00 00    	je     c001d44d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d37c:	83 ec 0c             	sub    esp,0xc
c001d37f:	68 dd be 02 c0       	push   0xc002bedd
c001d384:	e8 b4 d0 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001d389:	83 c4 10             	add    esp,0x10
c001d38c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d390:	eb 12                	jmp    c001d3a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d392:	01 c1                	add    ecx,eax
c001d394:	84 db                	test   bl,bl
c001d396:	75 0c                	jne    c001d3a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d398:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d39c:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d3a0:	77 02                	ja     c001d3a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d3a2:	01 d1                	add    ecx,edx
c001d3a4:	89 0e                	mov    DWORD PTR [esi],ecx
c001d3a6:	e9 df 00 00 00       	jmp    c001d48a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d3ab:	80 fb 02             	cmp    bl,0x2
c001d3ae:	75 71                	jne    c001d421 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d3b0:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d3b7:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d3bb:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d3bf:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d3c5:	74 15                	je     c001d3dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d3c7:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d3cd:	74 0d                	je     c001d3dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d3cf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3d3:	83 e8 04             	sub    eax,0x4
c001d3d6:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d3da:	76 1f                	jbe    c001d3fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d3dc:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d3e0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d3e5:	74 66                	je     c001d44d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d3e7:	83 ec 0c             	sub    esp,0xc
c001d3ea:	68 f9 be 02 c0       	push   0xc002bef9
c001d3ef:	e8 49 d0 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001d3f4:	83 c4 10             	add    esp,0x10
c001d3f7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d3fb:	8b 06                	mov    eax,DWORD PTR [esi]
c001d3fd:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d402:	74 13                	je     c001d417 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d404:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d408:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d40f:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d413:	01 c8                	add    eax,ecx
c001d415:	eb 04                	jmp    c001d41b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d417:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d41b:	01 c2                	add    edx,eax
c001d41d:	89 16                	mov    DWORD PTR [esi],edx
c001d41f:	eb 69                	jmp    c001d48a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d421:	0f b6 db             	movzx  ebx,bl
c001d424:	50                   	push   eax
c001d425:	50                   	push   eax
c001d426:	53                   	push   ebx
c001d427:	68 15 bf 02 c0       	push   0xc002bf15
c001d42c:	e8 63 59 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001d431:	83 c4 10             	add    esp,0x10
c001d434:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d439:	74 12                	je     c001d44d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d43b:	83 ec 0c             	sub    esp,0xc
c001d43e:	68 20 bf 02 c0       	push   0xc002bf20
c001d443:	e8 f5 cf ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001d448:	83 c4 10             	add    esp,0x10
c001d44b:	eb 3d                	jmp    c001d48a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d44d:	83 ec 0c             	sub    esp,0xc
c001d450:	55                   	push   ebp
c001d451:	e8 58 5f ff ff       	call   c00133ae <File::close()>
c001d456:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d459:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d45c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d45f:	59                   	pop    ecx
c001d460:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d464:	e8 e7 23 ff ff       	call   c000f850 <free>
c001d469:	5b                   	pop    ebx
c001d46a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d46e:	e8 dd 23 ff ff       	call   c000f850 <free>
c001d473:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d476:	e8 d5 23 ff ff       	call   c000f850 <free>
c001d47b:	5e                   	pop    esi
c001d47c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d480:	e8 cb 23 ff ff       	call   c000f850 <free>
c001d485:	83 c4 10             	add    esp,0x10
c001d488:	eb 21                	jmp    c001d4ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d48a:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d48e:	e9 90 fd ff ff       	jmp    c001d223 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d493:	83 ec 0c             	sub    esp,0xc
c001d496:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d49a:	e8 b1 23 ff ff       	call   c000f850 <free>
c001d49f:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d4a3:	83 c4 10             	add    esp,0x10
c001d4a6:	e9 05 fd ff ff       	jmp    c001d1b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d4ab:	31 c0                	xor    eax,eax
c001d4ad:	eb 33                	jmp    c001d4e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d4af:	83 ec 0c             	sub    esp,0xc
c001d4b2:	55                   	push   ebp
c001d4b3:	e8 f6 5e ff ff       	call   c00133ae <File::close()>
c001d4b8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d4bb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d4be:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d4c1:	58                   	pop    eax
c001d4c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d4c6:	e8 85 23 ff ff       	call   c000f850 <free>
c001d4cb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d4ce:	e8 7d 23 ff ff       	call   c000f850 <free>
c001d4d3:	5a                   	pop    edx
c001d4d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4d8:	e8 73 23 ff ff       	call   c000f850 <free>
c001d4dd:	83 c4 10             	add    esp,0x10
c001d4e0:	b0 01                	mov    al,0x1
c001d4e2:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d4e8:	5b                   	pop    ebx
c001d4e9:	5e                   	pop    esi
c001d4ea:	5f                   	pop    edi
c001d4eb:	5d                   	pop    ebp
c001d4ec:	c3                   	ret    

c001d4ed <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d4ed:	56                   	push   esi
c001d4ee:	31 d2                	xor    edx,edx
c001d4f0:	53                   	push   ebx
c001d4f1:	8b 1d a0 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030fa0
c001d4f7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d4fb:	39 d3                	cmp    ebx,edx
c001d4fd:	7e 1b                	jle    c001d51a <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d4ff:	8b 04 95 c0 11 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcee40]
c001d506:	39 c8                	cmp    eax,ecx
c001d508:	77 0d                	ja     c001d517 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d50a:	8b 34 95 c0 0f 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf040]
c001d511:	01 c6                	add    esi,eax
c001d513:	39 ce                	cmp    esi,ecx
c001d515:	77 05                	ja     c001d51c <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d517:	42                   	inc    edx
c001d518:	eb e1                	jmp    c001d4fb <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d51a:	31 c0                	xor    eax,eax
c001d51c:	5b                   	pop    ebx
c001d51d:	5e                   	pop    esi
c001d51e:	c3                   	ret    

c001d51f <Thr::getDriverNameFromAddress(unsigned long)>:
c001d51f:	53                   	push   ebx
c001d520:	31 c0                	xor    eax,eax
c001d522:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d526:	8b 1d a0 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030fa0
c001d52c:	39 c3                	cmp    ebx,eax
c001d52e:	7e 22                	jle    c001d552 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d530:	8b 14 85 c0 11 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcee40]
c001d537:	39 ca                	cmp    edx,ecx
c001d539:	77 14                	ja     c001d54f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d53b:	03 14 85 c0 0f 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf040]
c001d542:	39 ca                	cmp    edx,ecx
c001d544:	76 09                	jbe    c001d54f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d546:	8b 04 85 c0 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcec40]
c001d54d:	eb 05                	jmp    c001d554 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d54f:	40                   	inc    eax
c001d550:	eb da                	jmp    c001d52c <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d552:	31 c0                	xor    eax,eax
c001d554:	5b                   	pop    ebx
c001d555:	c3                   	ret    

c001d556 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d556:	53                   	push   ebx
c001d557:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d55b:	53                   	push   ebx
c001d55c:	e8 8c ff ff ff       	call   c001d4ed <Thr::getDriverBaseFromAddress(unsigned long)>
c001d561:	5a                   	pop    edx
c001d562:	31 d2                	xor    edx,edx
c001d564:	85 c0                	test   eax,eax
c001d566:	74 04                	je     c001d56c <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d568:	89 da                	mov    edx,ebx
c001d56a:	29 c2                	sub    edx,eax
c001d56c:	89 d0                	mov    eax,edx
c001d56e:	5b                   	pop    ebx
c001d56f:	c3                   	ret    

c001d570 <Thr::loadDLL(char const*, bool)>:
c001d570:	55                   	push   ebp
c001d571:	57                   	push   edi
c001d572:	56                   	push   esi
c001d573:	53                   	push   ebx
c001d574:	81 ec 34 01 00 00    	sub    esp,0x134
c001d57a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d581:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d588:	56                   	push   esi
c001d589:	68 38 bf 02 c0       	push   0xc002bf38
c001d58e:	e8 01 58 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001d593:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d59a:	e8 a1 22 ff ff       	call   c000f840 <malloc>
c001d59f:	83 c4 0c             	add    esp,0xc
c001d5a2:	89 c3                	mov    ebx,eax
c001d5a4:	ff 35 94 17 03 c0    	push   DWORD PTR ds:0xc0031794
c001d5aa:	56                   	push   esi
c001d5ab:	50                   	push   eax
c001d5ac:	e8 3b 5d ff ff       	call   c00132ec <File::File(char const*, Process*)>
c001d5b1:	83 c4 10             	add    esp,0x10
c001d5b4:	85 db                	test   ebx,ebx
c001d5b6:	75 3c                	jne    c001d5f4 <Thr::loadDLL(char const*, bool)+0x84>
c001d5b8:	89 e8                	mov    eax,ebp
c001d5ba:	84 c0                	test   al,al
c001d5bc:	0f 84 f0 01 00 00    	je     c001d7b2 <Thr::loadDLL(char const*, bool)+0x242>
c001d5c2:	50                   	push   eax
c001d5c3:	50                   	push   eax
c001d5c4:	68 49 bf 02 c0       	push   0xc002bf49
c001d5c9:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d5cd:	57                   	push   edi
c001d5ce:	e8 61 32 fe ff       	call   c0000834 <strcpy>
c001d5d3:	58                   	pop    eax
c001d5d4:	5a                   	pop    edx
c001d5d5:	56                   	push   esi
c001d5d6:	57                   	push   edi
c001d5d7:	e8 98 33 fe ff       	call   c0000974 <strcat>
c001d5dc:	59                   	pop    ecx
c001d5dd:	58                   	pop    eax
c001d5de:	68 5c bf 02 c0       	push   0xc002bf5c
c001d5e3:	57                   	push   edi
c001d5e4:	e8 8b 33 fe ff       	call   c0000974 <strcat>
c001d5e9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d5ec:	e8 4c ce ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001d5f1:	83 c4 10             	add    esp,0x10
c001d5f4:	50                   	push   eax
c001d5f5:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d5f9:	50                   	push   eax
c001d5fa:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d5fe:	50                   	push   eax
c001d5ff:	53                   	push   ebx
c001d600:	e8 f7 5f ff ff       	call   c00135fc <File::stat(unsigned long long*, bool*)>
c001d605:	83 c4 10             	add    esp,0x10
c001d608:	85 db                	test   ebx,ebx
c001d60a:	74 0c                	je     c001d618 <Thr::loadDLL(char const*, bool)+0xa8>
c001d60c:	83 ec 0c             	sub    esp,0xc
c001d60f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d611:	53                   	push   ebx
c001d612:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d615:	83 c4 10             	add    esp,0x10
c001d618:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d61d:	75 0a                	jne    c001d629 <Thr::loadDLL(char const*, bool)+0xb9>
c001d61f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d623:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d627:	75 3c                	jne    c001d665 <Thr::loadDLL(char const*, bool)+0xf5>
c001d629:	89 e8                	mov    eax,ebp
c001d62b:	84 c0                	test   al,al
c001d62d:	0f 84 67 01 00 00    	je     c001d79a <Thr::loadDLL(char const*, bool)+0x22a>
c001d633:	50                   	push   eax
c001d634:	50                   	push   eax
c001d635:	68 49 bf 02 c0       	push   0xc002bf49
c001d63a:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d63e:	53                   	push   ebx
c001d63f:	e8 f0 31 fe ff       	call   c0000834 <strcpy>
c001d644:	58                   	pop    eax
c001d645:	5a                   	pop    edx
c001d646:	56                   	push   esi
c001d647:	53                   	push   ebx
c001d648:	e8 27 33 fe ff       	call   c0000974 <strcat>
c001d64d:	59                   	pop    ecx
c001d64e:	5f                   	pop    edi
c001d64f:	68 5c bf 02 c0       	push   0xc002bf5c
c001d654:	53                   	push   ebx
c001d655:	e8 1a 33 fe ff       	call   c0000974 <strcat>
c001d65a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d65d:	e8 db cd ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001d662:	83 c4 10             	add    esp,0x10
c001d665:	e8 74 47 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c001d66a:	51                   	push   ecx
c001d66b:	68 03 08 00 00       	push   0x803
c001d670:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d674:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d678:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d67e:	83 d3 00             	adc    ebx,0x0
c001d681:	89 ca                	mov    edx,ecx
c001d683:	89 d1                	mov    ecx,edx
c001d685:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d689:	51                   	push   ecx
c001d68a:	50                   	push   eax
c001d68b:	e8 70 4c ff ff       	call   c0012300 <VAS::allocatePages(int, int)>
c001d690:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d694:	89 c3                	mov    ebx,eax
c001d696:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d69a:	05 ff 0f 00 00       	add    eax,0xfff
c001d69f:	83 d2 00             	adc    edx,0x0
c001d6a2:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d6a6:	c1 ea 0c             	shr    edx,0xc
c001d6a9:	52                   	push   edx
c001d6aa:	50                   	push   eax
c001d6ab:	53                   	push   ebx
c001d6ac:	68 5e bf 02 c0       	push   0xc002bf5e
c001d6b1:	e8 de 56 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001d6b6:	83 c4 14             	add    esp,0x14
c001d6b9:	56                   	push   esi
c001d6ba:	e8 d5 30 fe ff       	call   c0000794 <strlen>
c001d6bf:	8b 3d a0 0f 03 c0    	mov    edi,DWORD PTR ds:0xc0030fa0
c001d6c5:	40                   	inc    eax
c001d6c6:	89 04 24             	mov    DWORD PTR [esp],eax
c001d6c9:	e8 72 21 ff ff       	call   c000f840 <malloc>
c001d6ce:	89 04 bd c0 13 03 c0 	mov    DWORD PTR [edi*4-0x3ffcec40],eax
c001d6d5:	5f                   	pop    edi
c001d6d6:	58                   	pop    eax
c001d6d7:	a1 a0 0f 03 c0       	mov    eax,ds:0xc0030fa0
c001d6dc:	56                   	push   esi
c001d6dd:	ff 34 85 c0 13 03 c0 	push   DWORD PTR [eax*4-0x3ffcec40]
c001d6e4:	e8 4b 31 fe ff       	call   c0000834 <strcpy>
c001d6e9:	a1 a0 0f 03 c0       	mov    eax,ds:0xc0030fa0
c001d6ee:	8d 50 01             	lea    edx,[eax+0x1]
c001d6f1:	89 1c 85 c0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee40],ebx
c001d6f8:	89 15 a0 0f 03 c0    	mov    DWORD PTR ds:0xc0030fa0,edx
c001d6fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d702:	83 c4 0c             	add    esp,0xc
c001d705:	89 14 85 c0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf040],edx
c001d70c:	6a 01                	push   0x1
c001d70e:	53                   	push   ebx
c001d70f:	56                   	push   esi
c001d710:	e8 bc f6 ff ff       	call   c001cdd1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d715:	83 c4 10             	add    esp,0x10
c001d718:	89 c7                	mov    edi,eax
c001d71a:	84 c0                	test   al,al
c001d71c:	0f 85 8c 00 00 00    	jne    c001d7ae <Thr::loadDLL(char const*, bool)+0x23e>
c001d722:	89 e8                	mov    eax,ebp
c001d724:	84 c0                	test   al,al
c001d726:	74 76                	je     c001d79e <Thr::loadDLL(char const*, bool)+0x22e>
c001d728:	83 ec 0c             	sub    esp,0xc
c001d72b:	68 82 bf 02 c0       	push   0xc002bf82
c001d730:	e8 08 cd ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001d735:	83 c4 10             	add    esp,0x10
c001d738:	eb 64                	jmp    c001d79e <Thr::loadDLL(char const*, bool)+0x22e>
c001d73a:	e8 9f 46 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c001d73f:	89 f5                	mov    ebp,esi
c001d741:	c1 e5 0c             	shl    ebp,0xc
c001d744:	52                   	push   edx
c001d745:	01 dd                	add    ebp,ebx
c001d747:	52                   	push   edx
c001d748:	55                   	push   ebp
c001d749:	50                   	push   eax
c001d74a:	e8 2b 47 ff ff       	call   c0011e7a <VAS::getPageTableEntry(unsigned long)>
c001d74f:	83 c4 10             	add    esp,0x10
c001d752:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d755:	75 0c                	jne    c001d763 <Thr::loadDLL(char const*, bool)+0x1f3>
c001d757:	83 ec 0c             	sub    esp,0xc
c001d75a:	55                   	push   ebp
c001d75b:	e8 f3 26 ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c001d760:	83 c4 10             	add    esp,0x10
c001d763:	46                   	inc    esi
c001d764:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d768:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d76c:	05 ff 0f 00 00       	add    eax,0xfff
c001d771:	83 d2 00             	adc    edx,0x0
c001d774:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d778:	c1 ea 0c             	shr    edx,0xc
c001d77b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d77f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d783:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d787:	ba 00 00 00 00       	mov    edx,0x0
c001d78c:	89 d0                	mov    eax,edx
c001d78e:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d792:	72 a6                	jb     c001d73a <Thr::loadDLL(char const*, bool)+0x1ca>
c001d794:	89 f8                	mov    eax,edi
c001d796:	84 c0                	test   al,al
c001d798:	75 18                	jne    c001d7b2 <Thr::loadDLL(char const*, bool)+0x242>
c001d79a:	31 db                	xor    ebx,ebx
c001d79c:	eb 14                	jmp    c001d7b2 <Thr::loadDLL(char const*, bool)+0x242>
c001d79e:	83 ec 0c             	sub    esp,0xc
c001d7a1:	68 a1 bf 02 c0       	push   0xc002bfa1
c001d7a6:	e8 92 cc ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001d7ab:	83 c4 10             	add    esp,0x10
c001d7ae:	31 f6                	xor    esi,esi
c001d7b0:	eb b2                	jmp    c001d764 <Thr::loadDLL(char const*, bool)+0x1f4>
c001d7b2:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d7b8:	89 d8                	mov    eax,ebx
c001d7ba:	5b                   	pop    ebx
c001d7bb:	5e                   	pop    esi
c001d7bc:	5f                   	pop    edi
c001d7bd:	5d                   	pop    ebp
c001d7be:	c3                   	ret    

c001d7bf <Thr::executeDLL(unsigned long, void*)>:
c001d7bf:	56                   	push   esi
c001d7c0:	53                   	push   ebx
c001d7c1:	52                   	push   edx
c001d7c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d7c6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d7ca:	85 db                	test   ebx,ebx
c001d7cc:	75 10                	jne    c001d7de <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d7ce:	83 ec 0c             	sub    esp,0xc
c001d7d1:	68 bd bf 02 c0       	push   0xc002bfbd
c001d7d6:	e8 62 cc ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001d7db:	83 c4 10             	add    esp,0x10
c001d7de:	50                   	push   eax
c001d7df:	50                   	push   eax
c001d7e0:	53                   	push   ebx
c001d7e1:	68 e7 bf 02 c0       	push   0xc002bfe7
c001d7e6:	e8 a9 55 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001d7eb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d7ef:	89 d8                	mov    eax,ebx
c001d7f1:	83 c4 14             	add    esp,0x14
c001d7f4:	5b                   	pop    ebx
c001d7f5:	5e                   	pop    esi
c001d7f6:	ff e0                	jmp    eax

c001d7f8 <changeTSS>:
c001d7f8:	83 ec 14             	sub    esp,0x14
c001d7fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d800:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d803:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d808:	c1 e2 15             	shl    edx,0x15
c001d80b:	29 d0                	sub    eax,edx
c001d80d:	50                   	push   eax
c001d80e:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001d813:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d819:	05 7c 11 00 00       	add    eax,0x117c
c001d81e:	50                   	push   eax
c001d81f:	e8 52 3c ff ff       	call   c0011476 <TSS::setESP(unsigned long)>
c001d824:	83 c4 1c             	add    esp,0x1c
c001d827:	c3                   	ret    

c001d828 <Process::addArgs(char**)>:
c001d828:	57                   	push   edi
c001d829:	56                   	push   esi
c001d82a:	53                   	push   ebx
c001d82b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d82f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d833:	c7 86 36 19 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1936],0x0
c001d83d:	85 ff                	test   edi,edi
c001d83f:	74 3d                	je     c001d87e <Process::addArgs(char**)+0x56>
c001d841:	8b 07                	mov    eax,DWORD PTR [edi]
c001d843:	85 c0                	test   eax,eax
c001d845:	74 37                	je     c001d87e <Process::addArgs(char**)+0x56>
c001d847:	31 db                	xor    ebx,ebx
c001d849:	83 ec 0c             	sub    esp,0xc
c001d84c:	50                   	push   eax
c001d84d:	e8 42 2f fe ff       	call   c0000794 <strlen>
c001d852:	40                   	inc    eax
c001d853:	89 04 24             	mov    DWORD PTR [esp],eax
c001d856:	e8 e5 1f ff ff       	call   c000f840 <malloc>
c001d85b:	89 84 9e 3a 19 00 00 	mov    DWORD PTR [esi+ebx*4+0x193a],eax
c001d862:	5a                   	pop    edx
c001d863:	59                   	pop    ecx
c001d864:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d867:	43                   	inc    ebx
c001d868:	50                   	push   eax
c001d869:	e8 c6 2f fe ff       	call   c0000834 <strcpy>
c001d86e:	ff 86 36 19 00 00    	inc    DWORD PTR [esi+0x1936]
c001d874:	83 c4 10             	add    esp,0x10
c001d877:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d87a:	85 c0                	test   eax,eax
c001d87c:	75 cb                	jne    c001d849 <Process::addArgs(char**)+0x21>
c001d87e:	5b                   	pop    ebx
c001d87f:	5e                   	pop    esi
c001d880:	5f                   	pop    edi
c001d881:	c3                   	ret    

c001d882 <Process::Process(char const*, Process*, char**)>:
c001d882:	56                   	push   esi
c001d883:	53                   	push   ebx
c001d884:	83 ec 14             	sub    esp,0x14
c001d887:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d88b:	05 0c 02 00 00       	add    eax,0x20c
c001d890:	bb 07 00 00 00       	mov    ebx,0x7
c001d895:	89 c6                	mov    esi,eax
c001d897:	85 db                	test   ebx,ebx
c001d899:	78 15                	js     c001d8b0 <Process::Process(char const*, Process*, char**)+0x2e>
c001d89b:	83 ec 0c             	sub    esp,0xc
c001d89e:	56                   	push   esi
c001d89f:	e8 4e b2 00 00       	call   c0028af2 <ThreadControlBlock::ThreadControlBlock()>
c001d8a4:	83 c4 10             	add    esp,0x10
c001d8a7:	81 c6 e3 02 00 00    	add    esi,0x2e3
c001d8ad:	4b                   	dec    ebx
c001d8ae:	eb e7                	jmp    c001d897 <Process::Process(char const*, Process*, char**)+0x15>
c001d8b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8b4:	c6 80 3e 1b 00 00 00 	mov    BYTE PTR [eax+0x1b3e],0x0
c001d8bb:	83 ec 0c             	sub    esp,0xc
c001d8be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8c2:	e8 c7 c9 ff ff       	call   c001a28e <Krnl::newProcessEnv(Process*)>
c001d8c7:	83 c4 10             	add    esp,0x10
c001d8ca:	89 c2                	mov    edx,eax
c001d8cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8d0:	89 90 3a 1b 00 00    	mov    DWORD PTR [eax+0x1b3a],edx
c001d8d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8da:	66 c7 80 24 19 00 00 00 00 	mov    WORD PTR [eax+0x1924],0x0
c001d8e3:	a1 b0 d7 02 c0       	mov    eax,ds:0xc002d7b0
c001d8e8:	8d 50 01             	lea    edx,[eax+0x1]
c001d8eb:	89 15 b0 d7 02 c0    	mov    DWORD PTR ds:0xc002d7b0,edx
c001d8f1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d8f5:	89 02                	mov    DWORD PTR [edx],eax
c001d8f7:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d8ff:	83 ec 0c             	sub    esp,0xc
c001d902:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d906:	e8 35 1f ff ff       	call   c000f840 <malloc>
c001d90b:	83 c4 10             	add    esp,0x10
c001d90e:	89 c3                	mov    ebx,eax
c001d910:	83 ec 08             	sub    esp,0x8
c001d913:	6a 00                	push   0x0
c001d915:	53                   	push   ebx
c001d916:	e8 8d 4d ff ff       	call   c00126a8 <VAS::VAS(bool)>
c001d91b:	83 c4 10             	add    esp,0x10
c001d91e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d922:	89 98 32 19 00 00    	mov    DWORD PTR [eax+0x1932],ebx
c001d928:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d92c:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001d936:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d93a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d93e:	89 90 2a 19 00 00    	mov    DWORD PTR [eax+0x192a],edx
c001d944:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d948:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001d94e:	85 c0                	test   eax,eax
c001d950:	74 42                	je     c001d994 <Process::Process(char const*, Process*, char**)+0x112>
c001d952:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d956:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001d95c:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001d962:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d966:	89 90 26 19 00 00    	mov    DWORD PTR [eax+0x1926],edx
c001d96c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d970:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001d976:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d97c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d980:	05 0c 01 00 00       	add    eax,0x10c
c001d985:	83 ec 08             	sub    esp,0x8
c001d988:	52                   	push   edx
c001d989:	50                   	push   eax
c001d98a:	e8 a5 2e fe ff       	call   c0000834 <strcpy>
c001d98f:	83 c4 10             	add    esp,0x10
c001d992:	eb 63                	jmp    c001d9f7 <Process::Process(char const*, Process*, char**)+0x175>
c001d994:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001d99c:	83 ec 0c             	sub    esp,0xc
c001d99f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d9a3:	e8 98 1e ff ff       	call   c000f840 <malloc>
c001d9a8:	83 c4 10             	add    esp,0x10
c001d9ab:	89 c3                	mov    ebx,eax
c001d9ad:	83 ec 08             	sub    esp,0x8
c001d9b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d9b4:	53                   	push   ebx
c001d9b5:	e8 ba 37 ff ff       	call   c0011174 <VgaText::VgaText(char const*)>
c001d9ba:	83 c4 10             	add    esp,0x10
c001d9bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9c1:	89 98 26 19 00 00    	mov    DWORD PTR [eax+0x1926],ebx
c001d9c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9cb:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001d9d1:	83 ec 0c             	sub    esp,0xc
c001d9d4:	50                   	push   eax
c001d9d5:	e8 8d 2b ff ff       	call   c0010567 <addToTerminalCycle(VgaText*)>
c001d9da:	83 c4 10             	add    esp,0x10
c001d9dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9e1:	05 0c 01 00 00       	add    eax,0x10c
c001d9e6:	83 ec 08             	sub    esp,0x8
c001d9e9:	68 06 c0 02 c0       	push   0xc002c006
c001d9ee:	50                   	push   eax
c001d9ef:	e8 40 2e fe ff       	call   c0000834 <strcpy>
c001d9f4:	83 c4 10             	add    esp,0x10
c001d9f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9fb:	83 c0 0c             	add    eax,0xc
c001d9fe:	83 ec 08             	sub    esp,0x8
c001da01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da05:	50                   	push   eax
c001da06:	e8 29 2e fe ff       	call   c0000834 <strcpy>
c001da0b:	83 c4 10             	add    esp,0x10
c001da0e:	83 ec 08             	sub    esp,0x8
c001da11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001da15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da19:	e8 0a fe ff ff       	call   c001d828 <Process::addArgs(char**)>
c001da1e:	83 c4 10             	add    esp,0x10
c001da21:	83 ec 08             	sub    esp,0x8
c001da24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da2c:	e8 6a ee ff ff       	call   c001c89b <Thr::loadProgramIntoMemory(Process*, char const*)>
c001da31:	83 c4 10             	add    esp,0x10
c001da34:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001da38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001da3c:	83 f0 01             	xor    eax,0x1
c001da3f:	88 c2                	mov    dl,al
c001da41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da45:	88 90 3e 1b 00 00    	mov    BYTE PTR [eax+0x1b3e],dl
c001da4b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001da50:	83 ec 08             	sub    esp,0x8
c001da53:	50                   	push   eax
c001da54:	68 04 c1 02 c0       	push   0xc002c104
c001da59:	e8 36 53 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001da5e:	83 c4 10             	add    esp,0x10
c001da61:	90                   	nop
c001da62:	83 c4 14             	add    esp,0x14
c001da65:	5b                   	pop    ebx
c001da66:	5e                   	pop    esi
c001da67:	c3                   	ret    

c001da68 <Process::Process(bool, char const*, Process*, char**)>:
c001da68:	56                   	push   esi
c001da69:	53                   	push   ebx
c001da6a:	83 ec 24             	sub    esp,0x24
c001da6d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001da71:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001da75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da79:	05 0c 02 00 00       	add    eax,0x20c
c001da7e:	bb 07 00 00 00       	mov    ebx,0x7
c001da83:	89 c6                	mov    esi,eax
c001da85:	85 db                	test   ebx,ebx
c001da87:	78 15                	js     c001da9e <Process::Process(bool, char const*, Process*, char**)+0x36>
c001da89:	83 ec 0c             	sub    esp,0xc
c001da8c:	56                   	push   esi
c001da8d:	e8 60 b0 00 00       	call   c0028af2 <ThreadControlBlock::ThreadControlBlock()>
c001da92:	83 c4 10             	add    esp,0x10
c001da95:	81 c6 e3 02 00 00    	add    esi,0x2e3
c001da9b:	4b                   	dec    ebx
c001da9c:	eb e7                	jmp    c001da85 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001da9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001daa2:	c6 80 3e 1b 00 00 00 	mov    BYTE PTR [eax+0x1b3e],0x0
c001daa9:	83 ec 0c             	sub    esp,0xc
c001daac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dab0:	e8 d9 c7 ff ff       	call   c001a28e <Krnl::newProcessEnv(Process*)>
c001dab5:	83 c4 10             	add    esp,0x10
c001dab8:	89 c2                	mov    edx,eax
c001daba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dabe:	89 90 3a 1b 00 00    	mov    DWORD PTR [eax+0x1b3a],edx
c001dac4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dac8:	66 c7 80 24 19 00 00 00 00 	mov    WORD PTR [eax+0x1924],0x0
c001dad1:	a1 b0 d7 02 c0       	mov    eax,ds:0xc002d7b0
c001dad6:	8d 50 01             	lea    edx,[eax+0x1]
c001dad9:	89 15 b0 d7 02 c0    	mov    DWORD PTR ds:0xc002d7b0,edx
c001dadf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dae3:	89 02                	mov    DWORD PTR [edx],eax
c001dae5:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001daed:	83 ec 0c             	sub    esp,0xc
c001daf0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001daf4:	e8 47 1d ff ff       	call   c000f840 <malloc>
c001daf9:	83 c4 10             	add    esp,0x10
c001dafc:	89 c3                	mov    ebx,eax
c001dafe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001db03:	83 ec 08             	sub    esp,0x8
c001db06:	50                   	push   eax
c001db07:	53                   	push   ebx
c001db08:	e8 9b 4b ff ff       	call   c00126a8 <VAS::VAS(bool)>
c001db0d:	83 c4 10             	add    esp,0x10
c001db10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db14:	89 98 32 19 00 00    	mov    DWORD PTR [eax+0x1932],ebx
c001db1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db1e:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001db28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db2c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001db30:	89 90 2a 19 00 00    	mov    DWORD PTR [eax+0x192a],edx
c001db36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db3a:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001db40:	85 c0                	test   eax,eax
c001db42:	74 42                	je     c001db86 <Process::Process(bool, char const*, Process*, char**)+0x11e>
c001db44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db48:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001db4e:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001db54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db58:	89 90 26 19 00 00    	mov    DWORD PTR [eax+0x1926],edx
c001db5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db62:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001db68:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db72:	05 0c 01 00 00       	add    eax,0x10c
c001db77:	83 ec 08             	sub    esp,0x8
c001db7a:	52                   	push   edx
c001db7b:	50                   	push   eax
c001db7c:	e8 b3 2c fe ff       	call   c0000834 <strcpy>
c001db81:	83 c4 10             	add    esp,0x10
c001db84:	eb 63                	jmp    c001dbe9 <Process::Process(bool, char const*, Process*, char**)+0x181>
c001db86:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001db8e:	83 ec 0c             	sub    esp,0xc
c001db91:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001db95:	e8 a6 1c ff ff       	call   c000f840 <malloc>
c001db9a:	83 c4 10             	add    esp,0x10
c001db9d:	89 c3                	mov    ebx,eax
c001db9f:	83 ec 08             	sub    esp,0x8
c001dba2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dba6:	53                   	push   ebx
c001dba7:	e8 c8 35 ff ff       	call   c0011174 <VgaText::VgaText(char const*)>
c001dbac:	83 c4 10             	add    esp,0x10
c001dbaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbb3:	89 98 26 19 00 00    	mov    DWORD PTR [eax+0x1926],ebx
c001dbb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbbd:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001dbc3:	83 ec 0c             	sub    esp,0xc
c001dbc6:	50                   	push   eax
c001dbc7:	e8 9b 29 ff ff       	call   c0010567 <addToTerminalCycle(VgaText*)>
c001dbcc:	83 c4 10             	add    esp,0x10
c001dbcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbd3:	05 0c 01 00 00       	add    eax,0x10c
c001dbd8:	83 ec 08             	sub    esp,0x8
c001dbdb:	68 06 c0 02 c0       	push   0xc002c006
c001dbe0:	50                   	push   eax
c001dbe1:	e8 4e 2c fe ff       	call   c0000834 <strcpy>
c001dbe6:	83 c4 10             	add    esp,0x10
c001dbe9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbed:	83 c0 0c             	add    eax,0xc
c001dbf0:	83 ec 08             	sub    esp,0x8
c001dbf3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dbf7:	50                   	push   eax
c001dbf8:	e8 37 2c fe ff       	call   c0000834 <strcpy>
c001dbfd:	83 c4 10             	add    esp,0x10
c001dc00:	83 ec 08             	sub    esp,0x8
c001dc03:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dc07:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc0b:	e8 18 fc ff ff       	call   c001d828 <Process::addArgs(char**)>
c001dc10:	83 c4 10             	add    esp,0x10
c001dc13:	90                   	nop
c001dc14:	83 c4 24             	add    esp,0x24
c001dc17:	5b                   	pop    ebx
c001dc18:	5e                   	pop    esi
c001dc19:	c3                   	ret    

c001dc1a <disableIRQs()>:
c001dc1a:	fa                   	cli    
c001dc1b:	ff 05 6c 17 03 c0    	inc    DWORD PTR ds:0xc003176c
c001dc21:	c3                   	ret    

c001dc22 <getIRQNestingLevel()>:
c001dc22:	a1 6c 17 03 c0       	mov    eax,ds:0xc003176c
c001dc27:	c3                   	ret    

c001dc28 <enableIRQs()>:
c001dc28:	a1 6c 17 03 c0       	mov    eax,ds:0xc003176c
c001dc2d:	48                   	dec    eax
c001dc2e:	a3 6c 17 03 c0       	mov    ds:0xc003176c,eax
c001dc33:	75 01                	jne    c001dc36 <enableIRQs()+0xe>
c001dc35:	fb                   	sti    
c001dc36:	c3                   	ret    

c001dc37 <lockScheduler()>:
c001dc37:	eb e1                	jmp    c001dc1a <disableIRQs()>

c001dc39 <unlockScheduler()>:
c001dc39:	eb ed                	jmp    c001dc28 <enableIRQs()>

c001dc3b <userModeEntryPoint(void*)>:
c001dc3b:	83 ec 0c             	sub    esp,0xc
c001dc3e:	e8 f6 ff ff ff       	call   c001dc39 <unlockScheduler()>
c001dc43:	fb                   	sti    
c001dc44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc49:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dc4c:	8b 80 2e 19 00 00    	mov    eax,DWORD PTR [eax+0x192e]
c001dc52:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dc56:	83 c4 0c             	add    esp,0xc
c001dc59:	e9 cc 26 fe ff       	jmp    c000032a <goToUsermode>

c001dc5e <lockStuff()>:
c001dc5e:	e8 b7 ff ff ff       	call   c001dc1a <disableIRQs()>
c001dc63:	ff 05 68 17 03 c0    	inc    DWORD PTR ds:0xc0031768
c001dc69:	c3                   	ret    

c001dc6a <taskStartupFunction>:
c001dc6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc6f:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001dc72:	c3                   	ret    

c001dc73 <updateTimeUsed()>:
c001dc73:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001dc78:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dc7e:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dc85:	74 50                	je     c001dcd7 <updateTimeUsed()+0x64>
c001dc87:	57                   	push   edi
c001dc88:	56                   	push   esi
c001dc89:	53                   	push   ebx
c001dc8a:	0f 31                	rdtsc  
c001dc8c:	89 c1                	mov    ecx,eax
c001dc8e:	a3 a8 17 03 c0       	mov    ds:0xc00317a8,eax
c001dc93:	2b 0d 98 17 03 c0    	sub    ecx,DWORD PTR ds:0xc0031798
c001dc99:	89 d3                	mov    ebx,edx
c001dc9b:	89 0d a0 17 03 c0    	mov    DWORD PTR ds:0xc00317a0,ecx
c001dca1:	1b 1d 9c 17 03 c0    	sbb    ebx,DWORD PTR ds:0xc003179c
c001dca7:	a3 98 17 03 c0       	mov    ds:0xc0031798,eax
c001dcac:	89 1d a4 17 03 c0    	mov    DWORD PTR ds:0xc00317a4,ebx
c001dcb2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcb7:	89 15 ac 17 03 c0    	mov    DWORD PTR ds:0xc00317ac,edx
c001dcbd:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001dcc0:	89 15 9c 17 03 c0    	mov    DWORD PTR ds:0xc003179c,edx
c001dcc6:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001dcc9:	01 f1                	add    ecx,esi
c001dccb:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001dcce:	11 fb                	adc    ebx,edi
c001dcd0:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001dcd3:	5b                   	pop    ebx
c001dcd4:	5e                   	pop    esi
c001dcd5:	5f                   	pop    edi
c001dcd6:	c3                   	ret    
c001dcd7:	c3                   	ret    

c001dcd8 <switchToThread(ThreadControlBlock*)>:
c001dcd8:	53                   	push   ebx
c001dcd9:	83 ec 08             	sub    esp,0x8
c001dcdc:	a1 68 17 03 c0       	mov    eax,ds:0xc0031768
c001dce1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dce5:	85 c0                	test   eax,eax
c001dce7:	75 30                	jne    c001dd19 <switchToThread(ThreadControlBlock*)+0x41>
c001dce9:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001dcec:	3c ff                	cmp    al,0xff
c001dcee:	74 25                	je     c001dd15 <switchToThread(ThreadControlBlock*)+0x3d>
c001dcf0:	0f b6 d0             	movzx  edx,al
c001dcf3:	b8 84 03 00 00       	mov    eax,0x384
c001dcf8:	29 d0                	sub    eax,edx
c001dcfa:	c1 e0 10             	shl    eax,0x10
c001dcfd:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001dd00:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001dd03:	e8 6b ff ff ff       	call   c001dc73 <updateTimeUsed()>
c001dd08:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001dd0c:	83 c4 08             	add    esp,0x8
c001dd0f:	5b                   	pop    ebx
c001dd10:	e9 4d 26 fe ff       	jmp    c0000362 <switchToThreadASM>
c001dd15:	31 c0                	xor    eax,eax
c001dd17:	eb e7                	jmp    c001dd00 <switchToThread(ThreadControlBlock*)+0x28>
c001dd19:	c7 05 64 17 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031764,0x1
c001dd23:	83 c4 08             	add    esp,0x8
c001dd26:	5b                   	pop    ebx
c001dd27:	c3                   	ret    

c001dd28 <Semaphore::Semaphore(int)>:
c001dd28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dd30:	89 10                	mov    DWORD PTR [eax],edx
c001dd32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd36:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dd3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd41:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dd48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd4c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dd53:	90                   	nop
c001dd54:	c3                   	ret    
c001dd55:	90                   	nop

c001dd56 <Mutex::Mutex()>:
c001dd56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd5a:	6a 01                	push   0x1
c001dd5c:	50                   	push   eax
c001dd5d:	e8 c6 ff ff ff       	call   c001dd28 <Semaphore::Semaphore(int)>
c001dd62:	83 c4 08             	add    esp,0x8
c001dd65:	90                   	nop
c001dd66:	c3                   	ret    
c001dd67:	90                   	nop

c001dd68 <Process::createThread(void (*)(void*), void*, int)>:
c001dd68:	55                   	push   ebp
c001dd69:	31 c9                	xor    ecx,ecx
c001dd6b:	57                   	push   edi
c001dd6c:	56                   	push   esi
c001dd6d:	53                   	push   ebx
c001dd6e:	83 ec 1c             	sub    esp,0x1c
c001dd71:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dd75:	66 8b b3 24 19 00 00 	mov    si,WORD PTR [ebx+0x1924]
c001dd7c:	89 f2                	mov    edx,esi
c001dd7e:	0f b7 c2             	movzx  eax,dx
c001dd81:	83 e2 01             	and    edx,0x1
c001dd84:	74 14                	je     c001dd9a <Process::createThread(void (*)(void*), void*, int)+0x32>
c001dd86:	d1 f8                	sar    eax,1
c001dd88:	41                   	inc    ecx
c001dd89:	89 c2                	mov    edx,eax
c001dd8b:	83 f9 10             	cmp    ecx,0x10
c001dd8e:	75 ee                	jne    c001dd7e <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dd90:	83 c4 1c             	add    esp,0x1c
c001dd93:	31 c0                	xor    eax,eax
c001dd95:	5b                   	pop    ebx
c001dd96:	5e                   	pop    esi
c001dd97:	5f                   	pop    edi
c001dd98:	5d                   	pop    ebp
c001dd99:	c3                   	ret    
c001dd9a:	83 ec 08             	sub    esp,0x8
c001dd9d:	b8 01 00 00 00       	mov    eax,0x1
c001dda2:	d3 e0                	shl    eax,cl
c001dda4:	09 c6                	or     esi,eax
c001dda6:	8b 83 32 19 00 00    	mov    eax,DWORD PTR [ebx+0x1932]
c001ddac:	66 89 b3 24 19 00 00 	mov    WORD PTR [ebx+0x1924],si
c001ddb3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001ddb6:	8d 04 89             	lea    eax,[ecx+ecx*4]
c001ddb9:	8d 04 c1             	lea    eax,[ecx+eax*8]
c001ddbc:	8d 34 c0             	lea    esi,[eax+eax*8]
c001ddbf:	01 f6                	add    esi,esi
c001ddc1:	01 ce                	add    esi,ecx
c001ddc3:	8d 04 33             	lea    eax,[ebx+esi*1]
c001ddc6:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001ddcc:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001ddd2:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001ddd6:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dddc:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001dde2:	89 ca                	mov    edx,ecx
c001dde4:	f7 da                	neg    edx
c001dde6:	c1 e2 15             	shl    edx,0x15
c001dde9:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001ddef:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001ddf5:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001ddf9:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001de03:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001de09:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001de0d:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001de13:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001de1d:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001de27:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001de2e:	50                   	push   eax
c001de2f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001de33:	68 88 17 03 c0       	push   0xc0031788
c001de38:	e8 43 ab 00 00       	call   c0028980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de3d:	83 c4 10             	add    esp,0x10
c001de40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de44:	83 c4 1c             	add    esp,0x1c
c001de47:	5b                   	pop    ebx
c001de48:	5e                   	pop    esi
c001de49:	5f                   	pop    edi
c001de4a:	5d                   	pop    ebp
c001de4b:	c3                   	ret    

c001de4c <Process::createUserThread()>:
c001de4c:	83 ec 0c             	sub    esp,0xc
c001de4f:	68 80 00 00 00       	push   0x80
c001de54:	6a 00                	push   0x0
c001de56:	68 3b dc 01 c0       	push   0xc001dc3b
c001de5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de5f:	e8 04 ff ff ff       	call   c001dd68 <Process::createThread(void (*)(void*), void*, int)>
c001de64:	83 c4 1c             	add    esp,0x1c
c001de67:	c3                   	ret    

c001de68 <setupMultitasking(void (*)())>:
c001de68:	56                   	push   esi
c001de69:	53                   	push   ebx
c001de6a:	53                   	push   ebx
c001de6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001de6f:	eb 10                	jmp    c001de81 <setupMultitasking(void (*)())+0x19>
c001de71:	83 ec 0c             	sub    esp,0xc
c001de74:	68 88 17 03 c0       	push   0xc0031788
c001de79:	e8 54 aa 00 00       	call   c00288d2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001de7e:	83 c4 10             	add    esp,0x10
c001de81:	83 ec 0c             	sub    esp,0xc
c001de84:	68 88 17 03 c0       	push   0xc0031788
c001de89:	e8 28 aa 00 00       	call   c00288b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001de8e:	83 c4 10             	add    esp,0x10
c001de91:	84 c0                	test   al,al
c001de93:	74 dc                	je     c001de71 <setupMultitasking(void (*)())+0x9>
c001de95:	83 ec 0c             	sub    esp,0xc
c001de98:	68 3f 1b 00 00       	push   0x1b3f
c001de9d:	e8 9e 19 ff ff       	call   c000f840 <malloc>
c001dea2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dea9:	89 c3                	mov    ebx,eax
c001deab:	6a 00                	push   0x0
c001dead:	68 0a c0 02 c0       	push   0xc002c00a
c001deb2:	6a 01                	push   0x1
c001deb4:	50                   	push   eax
c001deb5:	e8 ae fb ff ff       	call   c001da68 <Process::Process(bool, char const*, Process*, char**)>
c001deba:	83 c4 18             	add    esp,0x18
c001debd:	89 1d 94 17 03 c0    	mov    DWORD PTR ds:0xc0031794,ebx
c001dec3:	ff b3 26 19 00 00    	push   DWORD PTR [ebx+0x1926]
c001dec9:	68 2c c1 02 c0       	push   0xc002c12c
c001dece:	e8 c1 4e ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001ded3:	58                   	pop    eax
c001ded4:	ff b3 26 19 00 00    	push   DWORD PTR [ebx+0x1926]
c001deda:	e8 0a 2e ff ff       	call   c0010ce9 <setActiveTerminal(VgaText*)>
c001dedf:	66 83 8b 24 19 00 00 01 	or     WORD PTR [ebx+0x1924],0x1
c001dee7:	8b 83 32 19 00 00    	mov    eax,DWORD PTR [ebx+0x1932]
c001deed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001def0:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001defa:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001df00:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001df06:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001df10:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001df1a:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001df24:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001df2a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001df30:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001df3a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001df40:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001df4a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001df50:	5a                   	pop    edx
c001df51:	59                   	pop    ecx
c001df52:	68 06 c0 02 c0       	push   0xc002c006
c001df57:	50                   	push   eax
c001df58:	e8 d7 28 fe ff       	call   c0000834 <strcpy>
c001df5d:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001df64:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001df68:	83 c4 14             	add    esp,0x14
c001df6b:	5b                   	pop    ebx
c001df6c:	5e                   	pop    esi
c001df6d:	e9 e2 23 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001df72 <schedule()>:
c001df72:	a1 68 17 03 c0       	mov    eax,ds:0xc0031768
c001df77:	85 c0                	test   eax,eax
c001df79:	74 0b                	je     c001df86 <schedule()+0x14>
c001df7b:	c7 05 64 17 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031764,0x1
c001df85:	c3                   	ret    
c001df86:	53                   	push   ebx
c001df87:	83 ec 14             	sub    esp,0x14
c001df8a:	68 88 17 03 c0       	push   0xc0031788
c001df8f:	e8 22 a9 00 00       	call   c00288b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001df94:	83 c4 10             	add    esp,0x10
c001df97:	84 c0                	test   al,al
c001df99:	75 38                	jne    c001dfd3 <schedule()+0x61>
c001df9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dfa0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dfa3:	4a                   	dec    edx
c001dfa4:	74 32                	je     c001dfd8 <schedule()+0x66>
c001dfa6:	83 ec 0c             	sub    esp,0xc
c001dfa9:	68 88 17 03 c0       	push   0xc0031788
c001dfae:	e8 fb a8 00 00       	call   c00288ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dfb3:	c7 04 24 88 17 03 c0 	mov    DWORD PTR [esp],0xc0031788
c001dfba:	89 c3                	mov    ebx,eax
c001dfbc:	e8 11 a9 00 00       	call   c00288d2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dfc1:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001dfc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dfcb:	e8 08 fd ff ff       	call   c001dcd8 <switchToThread(ThreadControlBlock*)>
c001dfd0:	83 c4 10             	add    esp,0x10
c001dfd3:	83 c4 08             	add    esp,0x8
c001dfd6:	5b                   	pop    ebx
c001dfd7:	c3                   	ret    
c001dfd8:	83 ec 08             	sub    esp,0x8
c001dfdb:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001dfe2:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dfe8:	68 88 17 03 c0       	push   0xc0031788
c001dfed:	e8 8e a9 00 00       	call   c0028980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dff2:	83 c4 10             	add    esp,0x10
c001dff5:	eb af                	jmp    c001dfa6 <schedule()+0x34>

c001dff7 <unlockStuff()>:
c001dff7:	a1 68 17 03 c0       	mov    eax,ds:0xc0031768
c001dffc:	48                   	dec    eax
c001dffd:	a3 68 17 03 c0       	mov    ds:0xc0031768,eax
c001e002:	75 09                	jne    c001e00d <unlockStuff()+0x16>
c001e004:	a1 64 17 03 c0       	mov    eax,ds:0xc0031764
c001e009:	85 c0                	test   eax,eax
c001e00b:	75 05                	jne    c001e012 <unlockStuff()+0x1b>
c001e00d:	e9 16 fc ff ff       	jmp    c001dc28 <enableIRQs()>
c001e012:	83 ec 0c             	sub    esp,0xc
c001e015:	c7 05 64 17 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031764,0x0
c001e01f:	e8 4e ff ff ff       	call   c001df72 <schedule()>
c001e024:	83 c4 0c             	add    esp,0xc
c001e027:	e9 fc fb ff ff       	jmp    c001dc28 <enableIRQs()>

c001e02c <Semaphore::tryAcquire()>:
c001e02c:	83 ec 0c             	sub    esp,0xc
c001e02f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e033:	e8 26 fc ff ff       	call   c001dc5e <lockStuff()>
c001e038:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e03b:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e03d:	7c 0b                	jl     c001e04a <Semaphore::tryAcquire()+0x1e>
c001e03f:	e8 b3 ff ff ff       	call   c001dff7 <unlockStuff()>
c001e044:	31 c0                	xor    eax,eax
c001e046:	83 c4 0c             	add    esp,0xc
c001e049:	c3                   	ret    
c001e04a:	42                   	inc    edx
c001e04b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e04e:	e8 a4 ff ff ff       	call   c001dff7 <unlockStuff()>
c001e053:	b0 01                	mov    al,0x1
c001e055:	83 c4 0c             	add    esp,0xc
c001e058:	c3                   	ret    
c001e059:	90                   	nop

c001e05a <Semaphore::assertLocked(char const*)>:
c001e05a:	83 ec 0c             	sub    esp,0xc
c001e05d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e061:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e065:	e8 f4 fb ff ff       	call   c001dc5e <lockStuff()>
c001e06a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e06c:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e06f:	7c 05                	jl     c001e076 <Semaphore::assertLocked(char const*)+0x1c>
c001e071:	83 c4 0c             	add    esp,0xc
c001e074:	eb 81                	jmp    c001dff7 <unlockStuff()>
c001e076:	83 ec 0c             	sub    esp,0xc
c001e079:	52                   	push   edx
c001e07a:	e8 be c3 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001e07f:	83 c4 10             	add    esp,0x10
c001e082:	83 c4 0c             	add    esp,0xc
c001e085:	e9 6d ff ff ff       	jmp    c001dff7 <unlockStuff()>

c001e08a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e08a:	83 ec 0c             	sub    esp,0xc
c001e08d:	e8 90 fb ff ff       	call   c001dc22 <getIRQNestingLevel()>
c001e092:	83 ec 08             	sub    esp,0x8
c001e095:	50                   	push   eax
c001e096:	68 60 c1 02 c0       	push   0xc002c160
c001e09b:	e8 f4 4c ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001e0a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e0a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0a9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e0ac:	e8 c1 fe ff ff       	call   c001df72 <schedule()>
c001e0b1:	e8 83 fb ff ff       	call   c001dc39 <unlockScheduler()>
c001e0b6:	e8 67 fb ff ff       	call   c001dc22 <getIRQNestingLevel()>
c001e0bb:	5a                   	pop    edx
c001e0bc:	59                   	pop    ecx
c001e0bd:	50                   	push   eax
c001e0be:	68 94 c1 02 c0       	push   0xc002c194
c001e0c3:	e8 cc 4c ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001e0c8:	83 c4 1c             	add    esp,0x1c
c001e0cb:	c3                   	ret    

c001e0cc <blockTask(TaskState)>:
c001e0cc:	83 ec 0c             	sub    esp,0xc
c001e0cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e0d3:	e8 5f fb ff ff       	call   c001dc37 <lockScheduler()>
c001e0d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0dd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e0e0:	e8 8d fe ff ff       	call   c001df72 <schedule()>
c001e0e5:	83 c4 0c             	add    esp,0xc
c001e0e8:	e9 4c fb ff ff       	jmp    c001dc39 <unlockScheduler()>

c001e0ed <waitTask(int, int*, int)>:
c001e0ed:	83 ec 18             	sub    esp,0x18
c001e0f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e0f9:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e0fc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e100:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e105:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e108:	6a 07                	push   0x7
c001e10a:	e8 bd ff ff ff       	call   c001e0cc <blockTask(TaskState)>
c001e10f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e114:	83 c4 10             	add    esp,0x10
c001e117:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e11a:	85 d2                	test   edx,edx
c001e11c:	74 0a                	je     c001e128 <waitTask(int, int*, int)+0x3b>
c001e11e:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e121:	89 02                	mov    DWORD PTR [edx],eax
c001e123:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e128:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e12b:	83 c4 0c             	add    esp,0xc
c001e12e:	c3                   	ret    

c001e12f <nanoSleepUntil(unsigned long long)>:
c001e12f:	83 ec 0c             	sub    esp,0xc
c001e132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e136:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e13a:	3b 05 b0 e8 02 c0    	cmp    eax,DWORD PTR ds:0xc002e8b0
c001e140:	89 d1                	mov    ecx,edx
c001e142:	1b 0d b4 e8 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e8b4
c001e148:	73 04                	jae    c001e14e <nanoSleepUntil(unsigned long long)+0x1f>
c001e14a:	83 c4 0c             	add    esp,0xc
c001e14d:	c3                   	ret    
c001e14e:	e8 0b fb ff ff       	call   c001dc5e <lockStuff()>
c001e153:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e159:	83 ec 08             	sub    esp,0x8
c001e15c:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e15f:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e162:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e168:	68 7c 17 03 c0       	push   0xc003177c
c001e16d:	e8 0e a8 00 00       	call   c0028980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e172:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e179:	e8 4e ff ff ff       	call   c001e0cc <blockTask(TaskState)>
c001e17e:	83 c4 1c             	add    esp,0x1c
c001e181:	e9 71 fe ff ff       	jmp    c001dff7 <unlockStuff()>

c001e186 <nanoSleep(unsigned long long)>:
c001e186:	a1 b0 e8 02 c0       	mov    eax,ds:0xc002e8b0
c001e18b:	8b 15 b4 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e8b4
c001e191:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e195:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e199:	eb 94                	jmp    c001e12f <nanoSleepUntil(unsigned long long)>

c001e19b <sleep(unsigned long long)>:
c001e19b:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e1a3:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e1a8:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e1ac:	01 ca                	add    edx,ecx
c001e1ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e1b2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e1b6:	eb ce                	jmp    c001e186 <nanoSleep(unsigned long long)>

c001e1b8 <Semaphore::acquire()>:
c001e1b8:	83 ec 0c             	sub    esp,0xc
c001e1bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1bf:	e8 9a fa ff ff       	call   c001dc5e <lockStuff()>
c001e1c4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e1c7:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e1c9:	7d 0c                	jge    c001e1d7 <Semaphore::acquire()+0x1f>
c001e1cb:	42                   	inc    edx
c001e1cc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e1cf:	83 c4 0c             	add    esp,0xc
c001e1d2:	e9 20 fe ff ff       	jmp    c001dff7 <unlockStuff()>
c001e1d7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e1dd:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e1e4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e1e7:	85 d2                	test   edx,edx
c001e1e9:	74 2a                	je     c001e215 <Semaphore::acquire()+0x5d>
c001e1eb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e1ee:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e1f4:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e1f7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e1fd:	83 ec 0c             	sub    esp,0xc
c001e200:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e203:	6a 05                	push   0x5
c001e205:	e8 c2 fe ff ff       	call   c001e0cc <blockTask(TaskState)>
c001e20a:	83 c4 10             	add    esp,0x10
c001e20d:	83 c4 0c             	add    esp,0xc
c001e210:	e9 e2 fd ff ff       	jmp    c001dff7 <unlockStuff()>
c001e215:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e21b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e21e:	eb d7                	jmp    c001e1f7 <Semaphore::acquire()+0x3f>

c001e220 <taskReturned>:
c001e220:	83 ec 18             	sub    esp,0x18
c001e223:	68 c8 c1 02 c0       	push   0xc002c1c8
c001e228:	e8 10 c2 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001e22d:	83 c4 10             	add    esp,0x10
c001e230:	83 ec 0c             	sub    esp,0xc
c001e233:	6a 02                	push   0x2
c001e235:	e8 92 fe ff ff       	call   c001e0cc <blockTask(TaskState)>
c001e23a:	e8 f8 f9 ff ff       	call   c001dc37 <lockScheduler()>
c001e23f:	e8 2e fd ff ff       	call   c001df72 <schedule()>
c001e244:	e8 f0 f9 ff ff       	call   c001dc39 <unlockScheduler()>
c001e249:	83 c4 10             	add    esp,0x10
c001e24c:	eb e2                	jmp    c001e230 <taskReturned+0x10>

c001e24e <unblockTask(ThreadControlBlock*)>:
c001e24e:	53                   	push   ebx
c001e24f:	83 ec 08             	sub    esp,0x8
c001e252:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e256:	e8 dc f9 ff ff       	call   c001dc37 <lockScheduler()>
c001e25b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e25e:	85 c0                	test   eax,eax
c001e260:	74 5c                	je     c001e2be <unblockTask(ThreadControlBlock*)+0x70>
c001e262:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e265:	48                   	dec    eax
c001e266:	74 31                	je     c001e299 <unblockTask(ThreadControlBlock*)+0x4b>
c001e268:	83 ec 0c             	sub    esp,0xc
c001e26b:	68 88 17 03 c0       	push   0xc0031788
c001e270:	e8 39 a6 00 00       	call   c00288ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e275:	83 c4 10             	add    esp,0x10
c001e278:	85 c0                	test   eax,eax
c001e27a:	75 17                	jne    c001e293 <unblockTask(ThreadControlBlock*)+0x45>
c001e27c:	eb 65                	jmp    c001e2e3 <unblockTask(ThreadControlBlock*)+0x95>
c001e27e:	83 ec 08             	sub    esp,0x8
c001e281:	50                   	push   eax
c001e282:	68 88 17 03 c0       	push   0xc0031788
c001e287:	e8 fc a8 00 00       	call   c0028b88 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e28c:	83 c4 10             	add    esp,0x10
c001e28f:	85 c0                	test   eax,eax
c001e291:	74 50                	je     c001e2e3 <unblockTask(ThreadControlBlock*)+0x95>
c001e293:	39 c3                	cmp    ebx,eax
c001e295:	75 e7                	jne    c001e27e <unblockTask(ThreadControlBlock*)+0x30>
c001e297:	eb 1c                	jmp    c001e2b5 <unblockTask(ThreadControlBlock*)+0x67>
c001e299:	83 ec 0c             	sub    esp,0xc
c001e29c:	68 b8 c2 02 c0       	push   0xc002c2b8
c001e2a1:	e8 ee 4a ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001e2a6:	c7 04 24 44 c2 02 c0 	mov    DWORD PTR [esp],0xc002c244
c001e2ad:	e8 e2 4a ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001e2b2:	83 c4 10             	add    esp,0x10
c001e2b5:	83 c4 08             	add    esp,0x8
c001e2b8:	5b                   	pop    ebx
c001e2b9:	e9 7b f9 ff ff       	jmp    c001dc39 <unlockScheduler()>
c001e2be:	83 ec 0c             	sub    esp,0xc
c001e2c1:	68 fc c1 02 c0       	push   0xc002c1fc
c001e2c6:	e8 c9 4a ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001e2cb:	c7 04 24 44 c2 02 c0 	mov    DWORD PTR [esp],0xc002c244
c001e2d2:	e8 bd 4a ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001e2d7:	83 c4 10             	add    esp,0x10
c001e2da:	83 c4 08             	add    esp,0x8
c001e2dd:	5b                   	pop    ebx
c001e2de:	e9 56 f9 ff ff       	jmp    c001dc39 <unlockScheduler()>
c001e2e3:	83 ec 08             	sub    esp,0x8
c001e2e6:	53                   	push   ebx
c001e2e7:	68 88 17 03 c0       	push   0xc0031788
c001e2ec:	e8 8f a6 00 00       	call   c0028980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e2f1:	83 c4 10             	add    esp,0x10
c001e2f4:	83 c4 08             	add    esp,0x8
c001e2f7:	5b                   	pop    ebx
c001e2f8:	e9 3c f9 ff ff       	jmp    c001dc39 <unlockScheduler()>

c001e2fd <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e2fd:	55                   	push   ebp
c001e2fe:	57                   	push   edi
c001e2ff:	56                   	push   esi
c001e300:	53                   	push   ebx
c001e301:	83 ec 1c             	sub    esp,0x1c
c001e304:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e308:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e30b:	8b b8 36 19 00 00    	mov    edi,DWORD PTR [eax+0x1936]
c001e311:	85 ff                	test   edi,edi
c001e313:	7e 20                	jle    c001e335 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e315:	31 f6                	xor    esi,esi
c001e317:	83 ec 0c             	sub    esp,0xc
c001e31a:	ff b4 b0 3a 19 00 00 	push   DWORD PTR [eax+esi*4+0x193a]
c001e321:	46                   	inc    esi
c001e322:	e8 29 15 ff ff       	call   c000f850 <free>
c001e327:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e32a:	83 c4 10             	add    esp,0x10
c001e32d:	39 b0 36 19 00 00    	cmp    DWORD PTR [eax+0x1936],esi
c001e333:	7f e2                	jg     c001e317 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e335:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001e33f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e344:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e347:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e34a:	d3 c0                	rol    eax,cl
c001e34c:	66 21 82 24 19 00 00 	and    WORD PTR [edx+0x1924],ax
c001e353:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e356:	89 f7                	mov    edi,esi
c001e358:	66 83 be 24 19 00 00 00 	cmp    WORD PTR [esi+0x1924],0x0
c001e360:	0f 85 75 01 00 00    	jne    c001e4db <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001e366:	8b ae 3a 1b 00 00    	mov    ebp,DWORD PTR [esi+0x1b3a]
c001e36c:	85 ed                	test   ebp,ebp
c001e36e:	74 1b                	je     c001e38b <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e370:	83 ec 0c             	sub    esp,0xc
c001e373:	55                   	push   ebp
c001e374:	e8 31 be ff ff       	call   c001a1aa <EnvVarContainer::~EnvVarContainer()>
c001e379:	59                   	pop    ecx
c001e37a:	5e                   	pop    esi
c001e37b:	6a 0c                	push   0xc
c001e37d:	55                   	push   ebp
c001e37e:	e8 31 49 ff ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c001e383:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e386:	83 c4 10             	add    esp,0x10
c001e389:	89 f7                	mov    edi,esi
c001e38b:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e391:	85 c0                	test   eax,eax
c001e393:	0f 84 ab 00 00 00    	je     c001e444 <cleanupTerminatedTask(ThreadControlBlock*)+0x147>
c001e399:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e39c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e3a0:	31 c9                	xor    ecx,ecx
c001e3a2:	eb 10                	jmp    c001e3b4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e3a4:	41                   	inc    ecx
c001e3a5:	83 f9 10             	cmp    ecx,0x10
c001e3a8:	0f 84 96 00 00 00    	je     c001e444 <cleanupTerminatedTask(ThreadControlBlock*)+0x147>
c001e3ae:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e3b4:	0f b7 90 24 19 00 00 	movzx  edx,WORD PTR [eax+0x1924]
c001e3bb:	d3 fa                	sar    edx,cl
c001e3bd:	83 e2 01             	and    edx,0x1
c001e3c0:	74 e2                	je     c001e3a4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e3c2:	8d 14 89             	lea    edx,[ecx+ecx*4]
c001e3c5:	8d 14 d1             	lea    edx,[ecx+edx*8]
c001e3c8:	8d 14 d2             	lea    edx,[edx+edx*8]
c001e3cb:	01 d2                	add    edx,edx
c001e3cd:	01 ca                	add    edx,ecx
c001e3cf:	01 d0                	add    eax,edx
c001e3d1:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e3d7:	83 fd 07             	cmp    ebp,0x7
c001e3da:	75 c8                	jne    c001e3a4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e3dc:	05 40 02 00 00       	add    eax,0x240
c001e3e1:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e3e4:	83 fd ff             	cmp    ebp,0xffffffff
c001e3e7:	0f 8c 08 01 00 00    	jl     c001e4f5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c001e3ed:	0f 84 b9 01 00 00    	je     c001e5ac <cleanupTerminatedTask(ThreadControlBlock*)+0x2af>
c001e3f3:	85 ed                	test   ebp,ebp
c001e3f5:	0f 84 a0 01 00 00    	je     c001e59b <cleanupTerminatedTask(ThreadControlBlock*)+0x29e>
c001e3fb:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e3fd:	75 a5                	jne    c001e3a4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e3ff:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e405:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e409:	01 d0                	add    eax,edx
c001e40b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e40f:	83 ec 0c             	sub    esp,0xc
c001e412:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e418:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e41b:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001e421:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e428:	50                   	push   eax
c001e429:	e8 20 fe ff ff       	call   c001e24e <unblockTask(ThreadControlBlock*)>
c001e42e:	83 c4 10             	add    esp,0x10
c001e431:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e434:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e438:	89 f7                	mov    edi,esi
c001e43a:	41                   	inc    ecx
c001e43b:	83 f9 10             	cmp    ecx,0x10
c001e43e:	0f 85 6a ff ff ff    	jne    c001e3ae <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e444:	8b 86 26 19 00 00    	mov    eax,DWORD PTR [esi+0x1926]
c001e44a:	85 c0                	test   eax,eax
c001e44c:	74 5d                	je     c001e4ab <cleanupTerminatedTask(ThreadControlBlock*)+0x1ae>
c001e44e:	8b 96 2a 19 00 00    	mov    edx,DWORD PTR [esi+0x192a]
c001e454:	3b 82 26 19 00 00    	cmp    eax,DWORD PTR [edx+0x1926]
c001e45a:	74 4f                	je     c001e4ab <cleanupTerminatedTask(ThreadControlBlock*)+0x1ae>
c001e45c:	83 ec 0c             	sub    esp,0xc
c001e45f:	68 88 17 03 c0       	push   0xc0031788
c001e464:	e8 45 a4 00 00       	call   c00288ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e469:	c7 04 24 88 17 03 c0 	mov    DWORD PTR [esp],0xc0031788
c001e470:	89 c7                	mov    edi,eax
c001e472:	e8 3f a4 00 00       	call   c00288b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e477:	83 c4 10             	add    esp,0x10
c001e47a:	84 c0                	test   al,al
c001e47c:	0f 84 e4 00 00 00    	je     c001e566 <cleanupTerminatedTask(ThreadControlBlock*)+0x269>
c001e482:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e485:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001e48b:	85 d2                	test   edx,edx
c001e48d:	74 0f                	je     c001e49e <cleanupTerminatedTask(ThreadControlBlock*)+0x1a1>
c001e48f:	83 ec 0c             	sub    esp,0xc
c001e492:	8b 02                	mov    eax,DWORD PTR [edx]
c001e494:	52                   	push   edx
c001e495:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e498:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e49b:	83 c4 10             	add    esp,0x10
c001e49e:	c7 80 26 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1926],0x0
c001e4a8:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e4ab:	8b 9f 32 19 00 00    	mov    ebx,DWORD PTR [edi+0x1932]
c001e4b1:	85 db                	test   ebx,ebx
c001e4b3:	74 16                	je     c001e4cb <cleanupTerminatedTask(ThreadControlBlock*)+0x1ce>
c001e4b5:	83 ec 0c             	sub    esp,0xc
c001e4b8:	53                   	push   ebx
c001e4b9:	e8 d6 3b ff ff       	call   c0012094 <VAS::~VAS()>
c001e4be:	58                   	pop    eax
c001e4bf:	5a                   	pop    edx
c001e4c0:	6a 14                	push   0x14
c001e4c2:	53                   	push   ebx
c001e4c3:	e8 ec 47 ff ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c001e4c8:	83 c4 10             	add    esp,0x10
c001e4cb:	83 ec 0c             	sub    esp,0xc
c001e4ce:	68 11 c0 02 c0       	push   0xc002c011
c001e4d3:	e8 bc 48 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001e4d8:	83 c4 10             	add    esp,0x10
c001e4db:	83 ec 08             	sub    esp,0x8
c001e4de:	68 3f 1b 00 00       	push   0x1b3f
c001e4e3:	68 1f c0 02 c0       	push   0xc002c01f
c001e4e8:	e8 a7 48 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001e4ed:	83 c4 2c             	add    esp,0x2c
c001e4f0:	5b                   	pop    ebx
c001e4f1:	5e                   	pop    esi
c001e4f2:	5f                   	pop    edi
c001e4f3:	5d                   	pop    ebp
c001e4f4:	c3                   	ret    
c001e4f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e4f9:	83 ec 0c             	sub    esp,0xc
c001e4fc:	68 fc c2 02 c0       	push   0xc002c2fc
c001e501:	e8 37 bf ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001e506:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e509:	83 c4 10             	add    esp,0x10
c001e50c:	89 f7                	mov    edi,esi
c001e50e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e512:	e9 8d fe ff ff       	jmp    c001e3a4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e517:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001e51d:	39 82 26 19 00 00    	cmp    DWORD PTR [edx+0x1926],eax
c001e523:	75 1c                	jne    c001e541 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e525:	83 ec 0c             	sub    esp,0xc
c001e528:	68 64 c3 02 c0       	push   0xc002c364
c001e52d:	e8 62 48 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001e532:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e539:	e8 8e fb ff ff       	call   c001e0cc <blockTask(TaskState)>
c001e53e:	83 c4 10             	add    esp,0x10
c001e541:	83 ec 08             	sub    esp,0x8
c001e544:	56                   	push   esi
c001e545:	68 88 17 03 c0       	push   0xc0031788
c001e54a:	e8 31 a4 00 00       	call   c0028980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e54f:	c7 04 24 88 17 03 c0 	mov    DWORD PTR [esp],0xc0031788
c001e556:	e8 53 a3 00 00       	call   c00288ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e55b:	83 c4 10             	add    esp,0x10
c001e55e:	39 f8                	cmp    eax,edi
c001e560:	0f 84 1c ff ff ff    	je     c001e482 <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c001e566:	83 ec 0c             	sub    esp,0xc
c001e569:	68 88 17 03 c0       	push   0xc0031788
c001e56e:	e8 3b a3 00 00       	call   c00288ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e573:	c7 04 24 88 17 03 c0 	mov    DWORD PTR [esp],0xc0031788
c001e57a:	89 c6                	mov    esi,eax
c001e57c:	e8 51 a3 00 00       	call   c00288d2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e581:	83 c4 10             	add    esp,0x10
c001e584:	39 f3                	cmp    ebx,esi
c001e586:	74 b9                	je     c001e541 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e588:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e58b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e58e:	39 82 2a 19 00 00    	cmp    DWORD PTR [edx+0x192a],eax
c001e594:	75 ab                	jne    c001e541 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e596:	e9 7c ff ff ff       	jmp    c001e517 <cleanupTerminatedTask(ThreadControlBlock*)+0x21a>
c001e59b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e59f:	83 ec 0c             	sub    esp,0xc
c001e5a2:	68 30 c3 02 c0       	push   0xc002c330
c001e5a7:	e9 55 ff ff ff       	jmp    c001e501 <cleanupTerminatedTask(ThreadControlBlock*)+0x204>
c001e5ac:	8b 36                	mov    esi,DWORD PTR [esi]
c001e5ae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5b2:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e5b5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5b8:	8b b8 2a 19 00 00    	mov    edi,DWORD PTR [eax+0x192a]
c001e5be:	01 d7                	add    edi,edx
c001e5c0:	89 f8                	mov    eax,edi
c001e5c2:	e9 44 fe ff ff       	jmp    c001e40b <cleanupTerminatedTask(ThreadControlBlock*)+0x10e>

c001e5c7 <cleanerTaskFunction(void*)>:
c001e5c7:	53                   	push   ebx
c001e5c8:	83 ec 08             	sub    esp,0x8
c001e5cb:	e8 69 f6 ff ff       	call   c001dc39 <unlockScheduler()>
c001e5d0:	e8 62 f6 ff ff       	call   c001dc37 <lockScheduler()>
c001e5d5:	80 3d 4c 17 03 c0 00 	cmp    BYTE PTR ds:0xc003174c,0x0
c001e5dc:	0f 85 8e 00 00 00    	jne    c001e670 <cleanerTaskFunction(void*)+0xa9>
c001e5e2:	83 ec 0c             	sub    esp,0xc
c001e5e5:	6a 02                	push   0x2
c001e5e7:	e8 9e fa ff ff       	call   c001e08a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e5ec:	83 c4 10             	add    esp,0x10
c001e5ef:	c6 05 4c 17 03 c0 00 	mov    BYTE PTR ds:0xc003174c,0x0
c001e5f6:	e8 63 f6 ff ff       	call   c001dc5e <lockStuff()>
c001e5fb:	e8 37 f6 ff ff       	call   c001dc37 <lockScheduler()>
c001e600:	83 ec 0c             	sub    esp,0xc
c001e603:	68 70 17 03 c0       	push   0xc0031770
c001e608:	e8 a9 a2 00 00       	call   c00288b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e60d:	83 c4 10             	add    esp,0x10
c001e610:	84 c0                	test   al,al
c001e612:	75 40                	jne    c001e654 <cleanerTaskFunction(void*)+0x8d>
c001e614:	83 ec 0c             	sub    esp,0xc
c001e617:	68 70 17 03 c0       	push   0xc0031770
c001e61c:	e8 8d a2 00 00       	call   c00288ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e621:	c7 04 24 70 17 03 c0 	mov    DWORD PTR [esp],0xc0031770
c001e628:	89 c3                	mov    ebx,eax
c001e62a:	e8 a3 a2 00 00       	call   c00288d2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e62f:	c7 04 24 35 c0 02 c0 	mov    DWORD PTR [esp],0xc002c035
c001e636:	e8 59 47 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001e63b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e63e:	e8 ba fc ff ff       	call   c001e2fd <cleanupTerminatedTask(ThreadControlBlock*)>
c001e643:	c7 04 24 4e c0 02 c0 	mov    DWORD PTR [esp],0xc002c04e
c001e64a:	e8 45 47 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001e64f:	83 c4 10             	add    esp,0x10
c001e652:	eb ac                	jmp    c001e600 <cleanerTaskFunction(void*)+0x39>
c001e654:	e8 e0 f5 ff ff       	call   c001dc39 <unlockScheduler()>
c001e659:	e8 99 f9 ff ff       	call   c001dff7 <unlockStuff()>
c001e65e:	e8 d4 f5 ff ff       	call   c001dc37 <lockScheduler()>
c001e663:	80 3d 4c 17 03 c0 00 	cmp    BYTE PTR ds:0xc003174c,0x0
c001e66a:	0f 84 72 ff ff ff    	je     c001e5e2 <cleanerTaskFunction(void*)+0x1b>
c001e670:	e8 c4 f5 ff ff       	call   c001dc39 <unlockScheduler()>
c001e675:	e9 75 ff ff ff       	jmp    c001e5ef <cleanerTaskFunction(void*)+0x28>

c001e67a <terminateTask(int)>:
c001e67a:	83 ec 14             	sub    esp,0x14
c001e67d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e682:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e685:	83 c0 0c             	add    eax,0xc
c001e688:	50                   	push   eax
c001e689:	68 8c c3 02 c0       	push   0xc002c38c
c001e68e:	e8 01 47 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001e693:	e8 c6 f5 ff ff       	call   c001dc5e <lockStuff()>
c001e698:	e8 9a f5 ff ff       	call   c001dc37 <lockScheduler()>
c001e69d:	c7 04 24 61 c0 02 c0 	mov    DWORD PTR [esp],0xc002c061
c001e6a4:	e8 eb 46 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001e6a9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e6ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6b2:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e6b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6ba:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e6bd:	5a                   	pop    edx
c001e6be:	59                   	pop    ecx
c001e6bf:	50                   	push   eax
c001e6c0:	68 70 17 03 c0       	push   0xc0031770
c001e6c5:	e8 b6 a2 00 00       	call   c0028980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e6ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6cf:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e6d6:	c7 04 24 7b c0 02 c0 	mov    DWORD PTR [esp],0xc002c07b
c001e6dd:	e8 b2 46 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001e6e2:	83 c4 10             	add    esp,0x10
c001e6e5:	a1 48 17 03 c0       	mov    eax,ds:0xc0031748
c001e6ea:	85 c0                	test   eax,eax
c001e6ec:	74 5a                	je     c001e748 <terminateTask(int)+0xce>
c001e6ee:	83 ec 0c             	sub    esp,0xc
c001e6f1:	68 95 c0 02 c0       	push   0xc002c095
c001e6f6:	e8 99 46 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001e6fb:	58                   	pop    eax
c001e6fc:	c6 05 4c 17 03 c0 01 	mov    BYTE PTR ds:0xc003174c,0x1
c001e703:	ff 35 48 17 03 c0    	push   DWORD PTR ds:0xc0031748
c001e709:	e8 40 fb ff ff       	call   c001e24e <unblockTask(ThreadControlBlock*)>
c001e70e:	c7 04 24 af c0 02 c0 	mov    DWORD PTR [esp],0xc002c0af
c001e715:	e8 7a 46 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001e71a:	83 c4 10             	add    esp,0x10
c001e71d:	e8 17 f5 ff ff       	call   c001dc39 <unlockScheduler()>
c001e722:	e8 d0 f8 ff ff       	call   c001dff7 <unlockStuff()>
c001e727:	83 ec 0c             	sub    esp,0xc
c001e72a:	68 e7 c0 02 c0       	push   0xc002c0e7
c001e72f:	e8 60 46 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001e734:	83 c4 10             	add    esp,0x10
c001e737:	e8 fb f4 ff ff       	call   c001dc37 <lockScheduler()>
c001e73c:	e8 31 f8 ff ff       	call   c001df72 <schedule()>
c001e741:	e8 f3 f4 ff ff       	call   c001dc39 <unlockScheduler()>
c001e746:	eb ef                	jmp    c001e737 <terminateTask(int)+0xbd>
c001e748:	83 ec 0c             	sub    esp,0xc
c001e74b:	68 c9 c0 02 c0       	push   0xc002c0c9
c001e750:	e8 3f 46 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001e755:	83 c4 10             	add    esp,0x10
c001e758:	eb c3                	jmp    c001e71d <terminateTask(int)+0xa3>

c001e75a <Thr::terminateFromIRQ(int)>:
c001e75a:	83 ec 18             	sub    esp,0x18
c001e75d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e761:	e8 14 ff ff ff       	call   c001e67a <terminateTask(int)>

c001e766 <Semaphore::release()>:
c001e766:	83 ec 0c             	sub    esp,0xc
c001e769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e76d:	e8 ec f4 ff ff       	call   c001dc5e <lockStuff()>
c001e772:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e775:	85 d2                	test   edx,edx
c001e777:	74 1a                	je     c001e793 <Semaphore::release()+0x2d>
c001e779:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e77c:	83 ec 0c             	sub    esp,0xc
c001e77f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e782:	52                   	push   edx
c001e783:	e8 c6 fa ff ff       	call   c001e24e <unblockTask(ThreadControlBlock*)>
c001e788:	83 c4 10             	add    esp,0x10
c001e78b:	83 c4 0c             	add    esp,0xc
c001e78e:	e9 64 f8 ff ff       	jmp    c001dff7 <unlockStuff()>
c001e793:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e796:	83 c4 0c             	add    esp,0xc
c001e799:	e9 59 f8 ff ff       	jmp    c001dff7 <unlockStuff()>

c001e79e <__static_initialization_and_destruction_0(int, int)>:
c001e79e:	83 ec 0c             	sub    esp,0xc
c001e7a1:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e7a6:	0f 85 88 00 00 00    	jne    c001e834 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e7ac:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e7b4:	75 7e                	jne    c001e834 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e7b6:	83 ec 0c             	sub    esp,0xc
c001e7b9:	68 88 17 03 c0       	push   0xc0031788
c001e7be:	e8 6d a3 00 00       	call   c0028b30 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e7c3:	83 c4 10             	add    esp,0x10
c001e7c6:	83 ec 04             	sub    esp,0x4
c001e7c9:	68 44 d1 02 c0       	push   0xc002d144
c001e7ce:	68 88 17 03 c0       	push   0xc0031788
c001e7d3:	68 f0 8a 02 c0       	push   0xc0028af0
c001e7d8:	e8 51 44 ff ff       	call   c0012c2e <__cxa_atexit>
c001e7dd:	83 c4 10             	add    esp,0x10
c001e7e0:	83 ec 0c             	sub    esp,0xc
c001e7e3:	68 7c 17 03 c0       	push   0xc003177c
c001e7e8:	e8 43 a3 00 00       	call   c0028b30 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e7ed:	83 c4 10             	add    esp,0x10
c001e7f0:	83 ec 04             	sub    esp,0x4
c001e7f3:	68 44 d1 02 c0       	push   0xc002d144
c001e7f8:	68 7c 17 03 c0       	push   0xc003177c
c001e7fd:	68 f0 8a 02 c0       	push   0xc0028af0
c001e802:	e8 27 44 ff ff       	call   c0012c2e <__cxa_atexit>
c001e807:	83 c4 10             	add    esp,0x10
c001e80a:	83 ec 0c             	sub    esp,0xc
c001e80d:	68 70 17 03 c0       	push   0xc0031770
c001e812:	e8 19 a3 00 00       	call   c0028b30 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e817:	83 c4 10             	add    esp,0x10
c001e81a:	83 ec 04             	sub    esp,0x4
c001e81d:	68 44 d1 02 c0       	push   0xc002d144
c001e822:	68 70 17 03 c0       	push   0xc0031770
c001e827:	68 f0 8a 02 c0       	push   0xc0028af0
c001e82c:	e8 fd 43 ff ff       	call   c0012c2e <__cxa_atexit>
c001e831:	83 c4 10             	add    esp,0x10
c001e834:	90                   	nop
c001e835:	83 c4 0c             	add    esp,0xc
c001e838:	c3                   	ret    

c001e839 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e839:	83 ec 0c             	sub    esp,0xc
c001e83c:	83 ec 08             	sub    esp,0x8
c001e83f:	68 ff ff 00 00       	push   0xffff
c001e844:	6a 01                	push   0x1
c001e846:	e8 53 ff ff ff       	call   c001e79e <__static_initialization_and_destruction_0(int, int)>
c001e84b:	83 c4 10             	add    esp,0x10
c001e84e:	83 c4 0c             	add    esp,0xc
c001e851:	c3                   	ret    

c001e852 <Vm::inbv(unsigned short)>:
c001e852:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e856:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e85b:	75 06                	jne    c001e863 <Vm::inbv(unsigned short)+0x11>
c001e85d:	a0 cc 17 03 c0       	mov    al,ds:0xc00317cc
c001e862:	c3                   	ret    
c001e863:	ec                   	in     al,dx
c001e864:	c3                   	ret    

c001e865 <Vm::outbv(unsigned short, unsigned char)>:
c001e865:	53                   	push   ebx
c001e866:	83 ec 08             	sub    esp,0x8
c001e869:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e86d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e871:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e876:	75 38                	jne    c001e8b0 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e878:	0f b6 c3             	movzx  eax,bl
c001e87b:	51                   	push   ecx
c001e87c:	51                   	push   ecx
c001e87d:	50                   	push   eax
c001e87e:	68 ab c3 02 c0       	push   0xc002c3ab
c001e883:	e8 0c 45 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001e888:	8b 15 cc 17 03 c0    	mov    edx,DWORD PTR ds:0xc00317cc
c001e88e:	83 c4 10             	add    esp,0x10
c001e891:	8d 42 01             	lea    eax,[edx+0x1]
c001e894:	88 9a e0 17 03 c0    	mov    BYTE PTR [edx-0x3ffce820],bl
c001e89a:	a3 cc 17 03 c0       	mov    ds:0xc00317cc,eax
c001e89f:	83 f8 20             	cmp    eax,0x20
c001e8a2:	75 0f                	jne    c001e8b3 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e8a4:	c7 05 cc 17 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00317cc,0x1f
c001e8ae:	eb 03                	jmp    c001e8b3 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e8b0:	88 d8                	mov    al,bl
c001e8b2:	ee                   	out    dx,al
c001e8b3:	83 c4 08             	add    esp,0x8
c001e8b6:	5b                   	pop    ebx
c001e8b7:	c3                   	ret    

c001e8b8 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e8b8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8bd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8c2:	c1 e0 04             	shl    eax,0x4
c001e8c5:	01 d0                	add    eax,edx
c001e8c7:	c3                   	ret    

c001e8c8 <Vm::getSegment(unsigned int)>:
c001e8c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8cc:	c1 e8 10             	shr    eax,0x10
c001e8cf:	c3                   	ret    

c001e8d0 <Vm::getOffset(unsigned int)>:
c001e8d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8d4:	c3                   	ret    

c001e8d5 <Vm::mainloop2()>:
c001e8d5:	83 ec 0c             	sub    esp,0xc
c001e8d8:	e8 5a f3 ff ff       	call   c001dc37 <lockScheduler()>
c001e8dd:	83 ec 0c             	sub    esp,0xc
c001e8e0:	c6 05 c5 17 03 c0 01 	mov    BYTE PTR ds:0xc00317c5,0x1
c001e8e7:	6a 02                	push   0x2
c001e8e9:	e8 9c f7 ff ff       	call   c001e08a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e8ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8f3:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e8f7:	52                   	push   edx
c001e8f8:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e8fc:	52                   	push   edx
c001e8fd:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e901:	52                   	push   edx
c001e902:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e906:	50                   	push   eax
c001e907:	e8 ee 19 fe ff       	call   c00002fa <goToVM86>
c001e90c:	83 c4 2c             	add    esp,0x2c
c001e90f:	c3                   	ret    

c001e910 <Vm::mainVm8086Loop(void*)>:
c001e910:	83 ec 0c             	sub    esp,0xc
c001e913:	e8 21 f3 ff ff       	call   c001dc39 <unlockScheduler()>
c001e918:	83 c4 0c             	add    esp,0xc
c001e91b:	eb b8                	jmp    c001e8d5 <Vm::mainloop2()>

c001e91d <Vm::mainloop3(unsigned long)>:
c001e91d:	53                   	push   ebx
c001e91e:	83 ec 08             	sub    esp,0x8
c001e921:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e925:	e8 0d f3 ff ff       	call   c001dc37 <lockScheduler()>
c001e92a:	83 ec 0c             	sub    esp,0xc
c001e92d:	89 1d c0 17 03 c0    	mov    DWORD PTR ds:0xc00317c0,ebx
c001e933:	6a 02                	push   0x2
c001e935:	c6 05 c4 17 03 c0 01 	mov    BYTE PTR ds:0xc00317c4,0x1
c001e93c:	e8 49 f7 ff ff       	call   c001e08a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e941:	83 c4 18             	add    esp,0x18
c001e944:	5b                   	pop    ebx
c001e945:	eb 8e                	jmp    c001e8d5 <Vm::mainloop2()>

c001e947 <Vm::initialise8086()>:
c001e947:	83 ec 0c             	sub    esp,0xc
c001e94a:	68 80 00 00 00       	push   0x80
c001e94f:	6a 00                	push   0x0
c001e951:	68 10 e9 01 c0       	push   0xc001e910
c001e956:	ff 35 94 17 03 c0    	push   DWORD PTR ds:0xc0031794
c001e95c:	e8 07 f4 ff ff       	call   c001dd68 <Process::createThread(void (*)(void*), void*, int)>
c001e961:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e968:	a3 c8 17 03 c0       	mov    ds:0xc00317c8,eax
c001e96d:	68 00 01 00 00       	push   0x100
c001e972:	a1 94 17 03 c0       	mov    eax,ds:0xc0031794
c001e977:	6a 00                	push   0x0
c001e979:	6a 00                	push   0x0
c001e97b:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001e981:	e8 6e 3b ff ff       	call   c00124f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e986:	83 c4 2c             	add    esp,0x2c
c001e989:	c3                   	ret    

c001e98a <Vm::finish8086()>:
c001e98a:	53                   	push   ebx
c001e98b:	83 ec 08             	sub    esp,0x8
c001e98e:	e8 a4 f2 ff ff       	call   c001dc37 <lockScheduler()>
c001e993:	80 3d c4 17 03 c0 00 	cmp    BYTE PTR ds:0xc00317c4,0x0
c001e99a:	75 0c                	jne    c001e9a8 <Vm::finish8086()+0x1e>
c001e99c:	e8 d1 f5 ff ff       	call   c001df72 <schedule()>
c001e9a1:	e8 93 f2 ff ff       	call   c001dc39 <unlockScheduler()>
c001e9a6:	eb e6                	jmp    c001e98e <Vm::finish8086()+0x4>
c001e9a8:	83 ec 0c             	sub    esp,0xc
c001e9ab:	8b 1d c0 17 03 c0    	mov    ebx,DWORD PTR ds:0xc00317c0
c001e9b1:	ff 35 c8 17 03 c0    	push   DWORD PTR ds:0xc00317c8
c001e9b7:	c6 05 c4 17 03 c0 00 	mov    BYTE PTR ds:0xc00317c4,0x0
c001e9be:	e8 8b f8 ff ff       	call   c001e24e <unblockTask(ThreadControlBlock*)>
c001e9c3:	e8 71 f2 ff ff       	call   c001dc39 <unlockScheduler()>
c001e9c8:	89 d8                	mov    eax,ebx
c001e9ca:	83 c4 18             	add    esp,0x18
c001e9cd:	5b                   	pop    ebx
c001e9ce:	c3                   	ret    

c001e9cf <Vm::getOutput8086(unsigned char*)>:
c001e9cf:	83 ec 10             	sub    esp,0x10
c001e9d2:	ff 35 cc 17 03 c0    	push   DWORD PTR ds:0xc00317cc
c001e9d8:	68 e0 17 03 c0       	push   0xc00317e0
c001e9dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9e1:	e8 5e 1d fe ff       	call   c0000744 <memcpy>
c001e9e6:	a1 cc 17 03 c0       	mov    eax,ds:0xc00317cc
c001e9eb:	c7 05 cc 17 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00317cc,0x0
c001e9f5:	83 c4 1c             	add    esp,0x1c
c001e9f8:	c3                   	ret    

c001e9f9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e9f9:	55                   	push   ebp
c001e9fa:	57                   	push   edi
c001e9fb:	56                   	push   esi
c001e9fc:	53                   	push   ebx
c001e9fd:	83 ec 2c             	sub    esp,0x2c
c001ea00:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ea04:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ea08:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ea0c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ea10:	e8 22 f2 ff ff       	call   c001dc37 <lockScheduler()>
c001ea15:	a0 c5 17 03 c0       	mov    al,ds:0xc00317c5
c001ea1a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ea1e:	84 c0                	test   al,al
c001ea20:	75 0c                	jne    c001ea2e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ea22:	e8 4b f5 ff ff       	call   c001df72 <schedule()>
c001ea27:	e8 0d f2 ff ff       	call   c001dc39 <unlockScheduler()>
c001ea2c:	eb e2                	jmp    c001ea10 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ea2e:	a1 c8 17 03 c0       	mov    eax,ds:0xc00317c8
c001ea33:	c7 05 cc 17 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00317cc,0x0
c001ea3d:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ea41:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ea45:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ea49:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ea4d:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ea51:	50                   	push   eax
c001ea52:	6a 20                	push   0x20
c001ea54:	6a 00                	push   0x0
c001ea56:	68 e0 17 03 c0       	push   0xc00317e0
c001ea5b:	e8 18 1d fe ff       	call   c0000778 <memset>
c001ea60:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ea67:	e8 d4 0d ff ff       	call   c000f840 <malloc>
c001ea6c:	83 c4 0c             	add    esp,0xc
c001ea6f:	89 c7                	mov    edi,eax
c001ea71:	ff 35 94 17 03 c0    	push   DWORD PTR ds:0xc0031794
c001ea77:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ea7b:	50                   	push   eax
c001ea7c:	e8 6b 48 ff ff       	call   c00132ec <File::File(char const*, Process*)>
c001ea81:	83 c4 10             	add    esp,0x10
c001ea84:	85 ff                	test   edi,edi
c001ea86:	75 0a                	jne    c001ea92 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ea88:	83 ec 0c             	sub    esp,0xc
c001ea8b:	68 c7 c3 02 c0       	push   0xc002c3c7
c001ea90:	eb 27                	jmp    c001eab9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ea92:	50                   	push   eax
c001ea93:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ea97:	50                   	push   eax
c001ea98:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ea9c:	50                   	push   eax
c001ea9d:	57                   	push   edi
c001ea9e:	e8 59 4b ff ff       	call   c00135fc <File::stat(unsigned long long*, bool*)>
c001eaa3:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001eaa8:	83 c4 10             	add    esp,0x10
c001eaab:	89 e8                	mov    eax,ebp
c001eaad:	84 c0                	test   al,al
c001eaaf:	74 19                	je     c001eaca <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001eab1:	83 ec 0c             	sub    esp,0xc
c001eab4:	68 db c3 02 c0       	push   0xc002c3db
c001eab9:	e8 7f b9 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001eabe:	31 ed                	xor    ebp,ebp
c001eac0:	e8 74 f1 ff ff       	call   c001dc39 <unlockScheduler()>
c001eac5:	83 c4 10             	add    esp,0x10
c001eac8:	eb 75                	jmp    c001eb3f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001eaca:	50                   	push   eax
c001eacb:	50                   	push   eax
c001eacc:	6a 01                	push   0x1
c001eace:	57                   	push   edi
c001eacf:	e8 7c 48 ff ff       	call   c0013350 <File::open(FileOpenMode)>
c001ead4:	83 c4 10             	add    esp,0x10
c001ead7:	85 c0                	test   eax,eax
c001ead9:	74 17                	je     c001eaf2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001eadb:	83 ec 0c             	sub    esp,0xc
c001eade:	68 f4 c3 02 c0       	push   0xc002c3f4
c001eae3:	e8 55 b9 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001eae8:	e8 4c f1 ff ff       	call   c001dc39 <unlockScheduler()>
c001eaed:	83 c4 10             	add    esp,0x10
c001eaf0:	eb 4d                	jmp    c001eb3f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001eaf2:	0f b7 f6             	movzx  esi,si
c001eaf5:	50                   	push   eax
c001eaf6:	0f b7 db             	movzx  ebx,bx
c001eaf9:	50                   	push   eax
c001eafa:	56                   	push   esi
c001eafb:	53                   	push   ebx
c001eafc:	e8 b7 fd ff ff       	call   c001e8b8 <Vm::realToLinear(unsigned short, unsigned short)>
c001eb01:	5a                   	pop    edx
c001eb02:	8b 17                	mov    edx,DWORD PTR [edi]
c001eb04:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001eb08:	51                   	push   ecx
c001eb09:	50                   	push   eax
c001eb0a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eb0e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eb12:	57                   	push   edi
c001eb13:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001eb16:	83 c4 14             	add    esp,0x14
c001eb19:	57                   	push   edi
c001eb1a:	e8 8f 48 ff ff       	call   c00133ae <File::close()>
c001eb1f:	c6 05 c5 17 03 c0 00 	mov    BYTE PTR ds:0xc00317c5,0x0
c001eb26:	e8 0e f1 ff ff       	call   c001dc39 <unlockScheduler()>
c001eb2b:	59                   	pop    ecx
c001eb2c:	ff 35 c8 17 03 c0    	push   DWORD PTR ds:0xc00317c8
c001eb32:	e8 17 f7 ff ff       	call   c001e24e <unblockTask(ThreadControlBlock*)>
c001eb37:	83 c4 10             	add    esp,0x10
c001eb3a:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001eb3f:	83 c4 2c             	add    esp,0x2c
c001eb42:	89 e8                	mov    eax,ebp
c001eb44:	5b                   	pop    ebx
c001eb45:	5e                   	pop    esi
c001eb46:	5f                   	pop    edi
c001eb47:	5d                   	pop    ebp
c001eb48:	c3                   	ret    

c001eb49 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001eb49:	57                   	push   edi
c001eb4a:	56                   	push   esi
c001eb4b:	53                   	push   ebx
c001eb4c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eb50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb54:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eb58:	83 e8 06             	sub    eax,0x6
c001eb5b:	0f b7 c0             	movzx  eax,ax
c001eb5e:	50                   	push   eax
c001eb5f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001eb64:	50                   	push   eax
c001eb65:	e8 4e fd ff ff       	call   c001e8b8 <Vm::realToLinear(unsigned short, unsigned short)>
c001eb6a:	5a                   	pop    edx
c001eb6b:	5e                   	pop    esi
c001eb6c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001eb6f:	8d 56 fa             	lea    edx,[esi-0x6]
c001eb72:	81 e2 ff ff 00 00    	and    edx,0xffff
c001eb78:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001eb7b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001eb7e:	83 c2 02             	add    edx,0x2
c001eb81:	66 89 10             	mov    WORD PTR [eax],dx
c001eb84:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001eb87:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001eb8b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001eb8e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001eb92:	89 d6                	mov    esi,edx
c001eb94:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001eb9a:	66 81 e6 ff fd       	and    si,0xfdff
c001eb9f:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001eba3:	74 07                	je     c001ebac <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001eba5:	89 d6                	mov    esi,edx
c001eba7:	66 81 ce 00 02       	or     si,0x200
c001ebac:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ebb0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ebb5:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ebb9:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ebc1:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ebc4:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ebcc:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ebcf:	5b                   	pop    ebx
c001ebd0:	5e                   	pop    esi
c001ebd1:	5f                   	pop    edi
c001ebd2:	c3                   	ret    

c001ebd3 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ebd3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ebd8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ebdd:	c1 e0 04             	shl    eax,0x4
c001ebe0:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ebe3:	c3                   	ret    

c001ebe4 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ebe4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ebe9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ebee:	c1 e0 04             	shl    eax,0x4
c001ebf1:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ebf5:	c3                   	ret    

c001ebf6 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ebf6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ebfb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec00:	c1 e0 04             	shl    eax,0x4
c001ec03:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ec06:	c3                   	ret    

c001ec07 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ec07:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec0c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec11:	c1 e0 04             	shl    eax,0x4
c001ec14:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec18:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ec1b:	c3                   	ret    

c001ec1c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ec1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec21:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec26:	c1 e0 04             	shl    eax,0x4
c001ec29:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec2d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ec31:	c3                   	ret    

c001ec32 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ec32:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec37:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec3c:	c1 e0 04             	shl    eax,0x4
c001ec3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec43:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ec46:	c3                   	ret    

c001ec47 <Vm::faultHandler(regs*)>:
c001ec47:	55                   	push   ebp
c001ec48:	57                   	push   edi
c001ec49:	56                   	push   esi
c001ec4a:	53                   	push   ebx
c001ec4b:	83 ec 1c             	sub    esp,0x1c
c001ec4e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ec52:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ec55:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ec58:	0f b7 c1             	movzx  eax,cx
c001ec5b:	50                   	push   eax
c001ec5c:	0f b7 c3             	movzx  eax,bx
c001ec5f:	c1 e3 04             	shl    ebx,0x4
c001ec62:	50                   	push   eax
c001ec63:	e8 50 fc ff ff       	call   c001e8b8 <Vm::realToLinear(unsigned short, unsigned short)>
c001ec68:	5a                   	pop    edx
c001ec69:	89 c5                	mov    ebp,eax
c001ec6b:	5e                   	pop    esi
c001ec6c:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ec70:	50                   	push   eax
c001ec71:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ec75:	50                   	push   eax
c001ec76:	e8 3d fc ff ff       	call   c001e8b8 <Vm::realToLinear(unsigned short, unsigned short)>
c001ec7b:	01 cb                	add    ebx,ecx
c001ec7d:	89 c6                	mov    esi,eax
c001ec7f:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ec83:	50                   	push   eax
c001ec84:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ec88:	50                   	push   eax
c001ec89:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ec8d:	50                   	push   eax
c001ec8e:	55                   	push   ebp
c001ec8f:	53                   	push   ebx
c001ec90:	b3 06                	mov    bl,0x6
c001ec92:	68 0d c4 02 c0       	push   0xc002c40d
c001ec97:	e8 f8 40 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001ec9c:	83 c4 20             	add    esp,0x20
c001ec9f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001eca4:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001eca9:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ecad:	3c 9d                	cmp    al,0x9d
c001ecaf:	0f 84 d7 02 00 00    	je     c001ef8c <Vm::faultHandler(regs*)+0x345>
c001ecb5:	0f 87 a3 00 00 00    	ja     c001ed5e <Vm::faultHandler(regs*)+0x117>
c001ecbb:	3c 66                	cmp    al,0x66
c001ecbd:	0f 84 15 02 00 00    	je     c001eed8 <Vm::faultHandler(regs*)+0x291>
c001ecc3:	77 5f                	ja     c001ed24 <Vm::faultHandler(regs*)+0xdd>
c001ecc5:	3c 36                	cmp    al,0x36
c001ecc7:	0f 84 f1 01 00 00    	je     c001eebe <Vm::faultHandler(regs*)+0x277>
c001eccd:	77 28                	ja     c001ecf7 <Vm::faultHandler(regs*)+0xb0>
c001eccf:	3c 26                	cmp    al,0x26
c001ecd1:	0f 84 99 01 00 00    	je     c001ee70 <Vm::faultHandler(regs*)+0x229>
c001ecd7:	3c 2e                	cmp    al,0x2e
c001ecd9:	0f 85 3b 07 00 00    	jne    c001f41a <Vm::faultHandler(regs*)+0x7d3>
c001ecdf:	83 ec 0c             	sub    esp,0xc
c001ece2:	31 db                	xor    ebx,ebx
c001ece4:	68 22 c4 02 c0       	push   0xc002c422
c001ece9:	e8 a6 40 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001ecee:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ecf1:	83 c4 10             	add    esp,0x10
c001ecf4:	45                   	inc    ebp
c001ecf5:	eb b2                	jmp    c001eca9 <Vm::faultHandler(regs*)+0x62>
c001ecf7:	3c 64                	cmp    al,0x64
c001ecf9:	0f 84 8b 01 00 00    	je     c001ee8a <Vm::faultHandler(regs*)+0x243>
c001ecff:	0f 87 9f 01 00 00    	ja     c001eea4 <Vm::faultHandler(regs*)+0x25d>
c001ed05:	3c 3e                	cmp    al,0x3e
c001ed07:	0f 85 0d 07 00 00    	jne    c001f41a <Vm::faultHandler(regs*)+0x7d3>
c001ed0d:	83 ec 0c             	sub    esp,0xc
c001ed10:	b3 01                	mov    bl,0x1
c001ed12:	68 26 c4 02 c0       	push   0xc002c426
c001ed17:	e8 78 40 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001ed1c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ed1f:	83 c4 10             	add    esp,0x10
c001ed22:	eb d0                	jmp    c001ecf4 <Vm::faultHandler(regs*)+0xad>
c001ed24:	3c 6d                	cmp    al,0x6d
c001ed26:	0f 84 af 03 00 00    	je     c001f0db <Vm::faultHandler(regs*)+0x494>
c001ed2c:	77 15                	ja     c001ed43 <Vm::faultHandler(regs*)+0xfc>
c001ed2e:	3c 67                	cmp    al,0x67
c001ed30:	0f 84 bf 01 00 00    	je     c001eef5 <Vm::faultHandler(regs*)+0x2ae>
c001ed36:	3c 6c                	cmp    al,0x6c
c001ed38:	0f 84 3f 03 00 00    	je     c001f07d <Vm::faultHandler(regs*)+0x436>
c001ed3e:	e9 d7 06 00 00       	jmp    c001f41a <Vm::faultHandler(regs*)+0x7d3>
c001ed43:	3c 6f                	cmp    al,0x6f
c001ed45:	0f 84 a4 04 00 00    	je     c001f1ef <Vm::faultHandler(regs*)+0x5a8>
c001ed4b:	0f 82 11 04 00 00    	jb     c001f162 <Vm::faultHandler(regs*)+0x51b>
c001ed51:	3c 9c                	cmp    al,0x9c
c001ed53:	0f 84 ba 01 00 00    	je     c001ef13 <Vm::faultHandler(regs*)+0x2cc>
c001ed59:	e9 bc 06 00 00       	jmp    c001f41a <Vm::faultHandler(regs*)+0x7d3>
c001ed5e:	3c ec                	cmp    al,0xec
c001ed60:	0f 84 24 06 00 00    	je     c001f38a <Vm::faultHandler(regs*)+0x743>
c001ed66:	0f 87 93 00 00 00    	ja     c001edff <Vm::faultHandler(regs*)+0x1b8>
c001ed6c:	3c e4                	cmp    al,0xe4
c001ed6e:	0f 84 5c 05 00 00    	je     c001f2d0 <Vm::faultHandler(regs*)+0x689>
c001ed74:	77 6a                	ja     c001ede0 <Vm::faultHandler(regs*)+0x199>
c001ed76:	3c cd                	cmp    al,0xcd
c001ed78:	0f 84 7e 02 00 00    	je     c001effc <Vm::faultHandler(regs*)+0x3b5>
c001ed7e:	3c cf                	cmp    al,0xcf
c001ed80:	0f 85 94 06 00 00    	jne    c001f41a <Vm::faultHandler(regs*)+0x7d3>
c001ed86:	83 ec 0c             	sub    esp,0xc
c001ed89:	68 6a c4 02 c0       	push   0xc002c46a
c001ed8e:	e8 01 40 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001ed93:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001ed96:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001ed99:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ed9d:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001eda0:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001eda4:	0d 00 02 02 00       	or     eax,0x20200
c001eda9:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001edac:	56                   	push   esi
c001edad:	53                   	push   ebx
c001edae:	52                   	push   edx
c001edaf:	68 70 c4 02 c0       	push   0xc002c470
c001edb4:	e8 db 3f ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001edb9:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001edbd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001edc3:	66 c1 e8 09          	shr    ax,0x9
c001edc7:	83 e0 01             	and    eax,0x1
c001edca:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001edcd:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001edd0:	83 c0 06             	add    eax,0x6
c001edd3:	25 ff ff 00 00       	and    eax,0xffff
c001edd8:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001eddb:	e9 95 02 00 00       	jmp    c001f075 <Vm::faultHandler(regs*)+0x42e>
c001ede0:	3c e6                	cmp    al,0xe6
c001ede2:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001ede6:	0f 84 4e 05 00 00    	je     c001f33a <Vm::faultHandler(regs*)+0x6f3>
c001edec:	0f 82 0a 05 00 00    	jb     c001f2fc <Vm::faultHandler(regs*)+0x6b5>
c001edf2:	3c e7                	cmp    al,0xe7
c001edf4:	0f 84 69 05 00 00    	je     c001f363 <Vm::faultHandler(regs*)+0x71c>
c001edfa:	e9 1b 06 00 00       	jmp    c001f41a <Vm::faultHandler(regs*)+0x7d3>
c001edff:	3c ef                	cmp    al,0xef
c001ee01:	0f 84 e6 05 00 00    	je     c001f3ed <Vm::faultHandler(regs*)+0x7a6>
c001ee07:	77 37                	ja     c001ee40 <Vm::faultHandler(regs*)+0x1f9>
c001ee09:	3c ed                	cmp    al,0xed
c001ee0b:	0f 84 a3 05 00 00    	je     c001f3b4 <Vm::faultHandler(regs*)+0x76d>
c001ee11:	3c ee                	cmp    al,0xee
c001ee13:	0f 85 01 06 00 00    	jne    c001f41a <Vm::faultHandler(regs*)+0x7d3>
c001ee19:	52                   	push   edx
c001ee1a:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ee1d:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ee20:	68 0b c5 02 c0       	push   0xc002c50b
c001ee25:	e8 6a 3f ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001ee2a:	59                   	pop    ecx
c001ee2b:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001ee2f:	5b                   	pop    ebx
c001ee30:	50                   	push   eax
c001ee31:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ee35:	50                   	push   eax
c001ee36:	e8 2a fa ff ff       	call   c001e865 <Vm::outbv(unsigned short, unsigned char)>
c001ee3b:	e9 a5 05 00 00       	jmp    c001f3e5 <Vm::faultHandler(regs*)+0x79e>
c001ee40:	3c fa                	cmp    al,0xfa
c001ee42:	0f 84 f7 01 00 00    	je     c001f03f <Vm::faultHandler(regs*)+0x3f8>
c001ee48:	3c fb                	cmp    al,0xfb
c001ee4a:	0f 84 0a 02 00 00    	je     c001f05a <Vm::faultHandler(regs*)+0x413>
c001ee50:	3c f3                	cmp    al,0xf3
c001ee52:	0f 85 c2 05 00 00    	jne    c001f41a <Vm::faultHandler(regs*)+0x7d3>
c001ee58:	83 ec 0c             	sub    esp,0xc
c001ee5b:	68 43 c4 02 c0       	push   0xc002c443
c001ee60:	e8 2f 3f ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001ee65:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee68:	83 c4 10             	add    esp,0x10
c001ee6b:	e9 84 fe ff ff       	jmp    c001ecf4 <Vm::faultHandler(regs*)+0xad>
c001ee70:	83 ec 0c             	sub    esp,0xc
c001ee73:	b3 02                	mov    bl,0x2
c001ee75:	68 1e c4 02 c0       	push   0xc002c41e
c001ee7a:	e8 15 3f ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001ee7f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee82:	83 c4 10             	add    esp,0x10
c001ee85:	e9 6a fe ff ff       	jmp    c001ecf4 <Vm::faultHandler(regs*)+0xad>
c001ee8a:	83 ec 0c             	sub    esp,0xc
c001ee8d:	b3 03                	mov    bl,0x3
c001ee8f:	68 2a c4 02 c0       	push   0xc002c42a
c001ee94:	e8 fb 3e ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001ee99:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee9c:	83 c4 10             	add    esp,0x10
c001ee9f:	e9 50 fe ff ff       	jmp    c001ecf4 <Vm::faultHandler(regs*)+0xad>
c001eea4:	83 ec 0c             	sub    esp,0xc
c001eea7:	b3 04                	mov    bl,0x4
c001eea9:	68 2e c4 02 c0       	push   0xc002c42e
c001eeae:	e8 e1 3e ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001eeb3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eeb6:	83 c4 10             	add    esp,0x10
c001eeb9:	e9 36 fe ff ff       	jmp    c001ecf4 <Vm::faultHandler(regs*)+0xad>
c001eebe:	83 ec 0c             	sub    esp,0xc
c001eec1:	b3 05                	mov    bl,0x5
c001eec3:	68 32 c4 02 c0       	push   0xc002c432
c001eec8:	e8 c7 3e ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001eecd:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eed0:	83 c4 10             	add    esp,0x10
c001eed3:	e9 1c fe ff ff       	jmp    c001ecf4 <Vm::faultHandler(regs*)+0xad>
c001eed8:	83 ec 0c             	sub    esp,0xc
c001eedb:	68 36 c4 02 c0       	push   0xc002c436
c001eee0:	e8 af 3e ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001eee5:	83 c4 10             	add    esp,0x10
c001eee8:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eeeb:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001eef0:	e9 ff fd ff ff       	jmp    c001ecf4 <Vm::faultHandler(regs*)+0xad>
c001eef5:	50                   	push   eax
c001eef6:	50                   	push   eax
c001eef7:	6a 01                	push   0x1
c001eef9:	68 3b c4 02 c0       	push   0xc002c43b
c001eefe:	e8 91 3e ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001ef03:	83 c4 10             	add    esp,0x10
c001ef06:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef09:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001ef0e:	e9 e1 fd ff ff       	jmp    c001ecf4 <Vm::faultHandler(regs*)+0xad>
c001ef13:	83 ec 0c             	sub    esp,0xc
c001ef16:	68 49 c4 02 c0       	push   0xc002c449
c001ef1b:	e8 74 3e ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001ef20:	83 c4 10             	add    esp,0x10
c001ef23:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001ef26:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ef2b:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001ef2e:	74 2f                	je     c001ef5f <Vm::faultHandler(regs*)+0x318>
c001ef30:	83 ea 04             	sub    edx,0x4
c001ef33:	25 ff 0d 00 00       	and    eax,0xdff
c001ef38:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ef3e:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001ef41:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001ef44:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef4a:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001ef4e:	0f 84 bf 04 00 00    	je     c001f413 <Vm::faultHandler(regs*)+0x7cc>
c001ef54:	80 cc 02             	or     ah,0x2
c001ef57:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001ef5a:	e9 b4 04 00 00       	jmp    c001f413 <Vm::faultHandler(regs*)+0x7cc>
c001ef5f:	83 ea 02             	sub    edx,0x2
c001ef62:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ef68:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001ef6b:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001ef6f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef75:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001ef79:	74 05                	je     c001ef80 <Vm::faultHandler(regs*)+0x339>
c001ef7b:	80 cc 02             	or     ah,0x2
c001ef7e:	eb 03                	jmp    c001ef83 <Vm::faultHandler(regs*)+0x33c>
c001ef80:	80 e4 fd             	and    ah,0xfd
c001ef83:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001ef87:	e9 87 04 00 00       	jmp    c001f413 <Vm::faultHandler(regs*)+0x7cc>
c001ef8c:	83 ec 0c             	sub    esp,0xc
c001ef8f:	68 50 c4 02 c0       	push   0xc002c450
c001ef94:	e8 fb 3d ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001ef99:	83 c4 10             	add    esp,0x10
c001ef9c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001efa1:	74 28                	je     c001efcb <Vm::faultHandler(regs*)+0x384>
c001efa3:	8b 06                	mov    eax,DWORD PTR [esi]
c001efa5:	25 ff 0d 00 00       	and    eax,0xdff
c001efaa:	0d 00 02 02 00       	or     eax,0x20200
c001efaf:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001efb2:	8b 06                	mov    eax,DWORD PTR [esi]
c001efb4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001efba:	c1 e8 09             	shr    eax,0x9
c001efbd:	83 e0 01             	and    eax,0x1
c001efc0:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001efc3:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001efc6:	83 c0 04             	add    eax,0x4
c001efc9:	eb 24                	jmp    c001efef <Vm::faultHandler(regs*)+0x3a8>
c001efcb:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001efce:	0d 00 02 02 00       	or     eax,0x20200
c001efd3:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001efd6:	66 8b 06             	mov    ax,WORD PTR [esi]
c001efd9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001efdf:	66 c1 e8 09          	shr    ax,0x9
c001efe3:	83 e0 01             	and    eax,0x1
c001efe6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001efe9:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001efec:	83 c0 02             	add    eax,0x2
c001efef:	25 ff ff 00 00       	and    eax,0xffff
c001eff4:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001eff7:	e9 17 04 00 00       	jmp    c001f413 <Vm::faultHandler(regs*)+0x7cc>
c001effc:	53                   	push   ebx
c001effd:	53                   	push   ebx
c001effe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f002:	50                   	push   eax
c001f003:	68 56 c4 02 c0       	push   0xc002c456
c001f008:	e8 87 3d ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001f00d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f011:	83 c4 10             	add    esp,0x10
c001f014:	3c ee                	cmp    al,0xee
c001f016:	75 10                	jne    c001f028 <Vm::faultHandler(regs*)+0x3e1>
c001f018:	83 ec 0c             	sub    esp,0xc
c001f01b:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f01e:	e8 fa f8 ff ff       	call   c001e91d <Vm::mainloop3(unsigned long)>
c001f023:	e9 c0 03 00 00       	jmp    c001f3e8 <Vm::faultHandler(regs*)+0x7a1>
c001f028:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f02c:	83 ec 0c             	sub    esp,0xc
c001f02f:	53                   	push   ebx
c001f030:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f034:	53                   	push   ebx
c001f035:	55                   	push   ebp
c001f036:	50                   	push   eax
c001f037:	57                   	push   edi
c001f038:	e8 0c fb ff ff       	call   c001eb49 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f03d:	eb 36                	jmp    c001f075 <Vm::faultHandler(regs*)+0x42e>
c001f03f:	83 ec 0c             	sub    esp,0xc
c001f042:	68 60 c4 02 c0       	push   0xc002c460
c001f047:	e8 48 3d ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001f04c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f051:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f055:	e9 8b 03 00 00       	jmp    c001f3e5 <Vm::faultHandler(regs*)+0x79e>
c001f05a:	83 ec 0c             	sub    esp,0xc
c001f05d:	68 65 c4 02 c0       	push   0xc002c465
c001f062:	e8 2d 3d ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001f067:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f06c:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f070:	e9 70 03 00 00       	jmp    c001f3e5 <Vm::faultHandler(regs*)+0x79e>
c001f075:	83 c4 20             	add    esp,0x20
c001f078:	e9 99 03 00 00       	jmp    c001f416 <Vm::faultHandler(regs*)+0x7cf>
c001f07d:	83 ec 0c             	sub    esp,0xc
c001f080:	68 a3 c4 02 c0       	push   0xc002c4a3
c001f085:	e8 0a 3d ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001f08a:	83 c4 10             	add    esp,0x10
c001f08d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f090:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f095:	74 0d                	je     c001f0a4 <Vm::faultHandler(regs*)+0x45d>
c001f097:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f09e:	0f 87 9e 01 00 00    	ja     c001f242 <Vm::faultHandler(regs*)+0x5fb>
c001f0a4:	83 ec 0c             	sub    esp,0xc
c001f0a7:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f0ab:	0f b7 db             	movzx  ebx,bx
c001f0ae:	50                   	push   eax
c001f0af:	e8 9e f7 ff ff       	call   c001e852 <Vm::inbv(unsigned short)>
c001f0b4:	83 c4 0c             	add    esp,0xc
c001f0b7:	0f b6 c0             	movzx  eax,al
c001f0ba:	50                   	push   eax
c001f0bb:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f0bf:	50                   	push   eax
c001f0c0:	53                   	push   ebx
c001f0c1:	e8 41 fb ff ff       	call   c001ec07 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f0c6:	83 c4 10             	add    esp,0x10
c001f0c9:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f0cc:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f0d0:	74 03                	je     c001f0d5 <Vm::faultHandler(regs*)+0x48e>
c001f0d2:	48                   	dec    eax
c001f0d3:	eb 01                	jmp    c001f0d6 <Vm::faultHandler(regs*)+0x48f>
c001f0d5:	40                   	inc    eax
c001f0d6:	0f b7 c0             	movzx  eax,ax
c001f0d9:	eb 7f                	jmp    c001f15a <Vm::faultHandler(regs*)+0x513>
c001f0db:	83 ec 0c             	sub    esp,0xc
c001f0de:	68 d5 c4 02 c0       	push   0xc002c4d5
c001f0e3:	e8 ac 3c ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001f0e8:	83 c4 10             	add    esp,0x10
c001f0eb:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f0ee:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f0f3:	74 0d                	je     c001f102 <Vm::faultHandler(regs*)+0x4bb>
c001f0f5:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f0fc:	0f 87 40 01 00 00    	ja     c001f242 <Vm::faultHandler(regs*)+0x5fb>
c001f102:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f105:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f109:	0f b7 db             	movzx  ebx,bx
c001f10c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f111:	74 20                	je     c001f133 <Vm::faultHandler(regs*)+0x4ec>
c001f113:	ed                   	in     eax,dx
c001f114:	51                   	push   ecx
c001f115:	50                   	push   eax
c001f116:	56                   	push   esi
c001f117:	53                   	push   ebx
c001f118:	e8 15 fb ff ff       	call   c001ec32 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f11d:	83 c4 10             	add    esp,0x10
c001f120:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f123:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f127:	74 05                	je     c001f12e <Vm::faultHandler(regs*)+0x4e7>
c001f129:	83 e8 04             	sub    eax,0x4
c001f12c:	eb 27                	jmp    c001f155 <Vm::faultHandler(regs*)+0x50e>
c001f12e:	83 c0 04             	add    eax,0x4
c001f131:	eb 22                	jmp    c001f155 <Vm::faultHandler(regs*)+0x50e>
c001f133:	66 ed                	in     ax,dx
c001f135:	0f b7 c0             	movzx  eax,ax
c001f138:	52                   	push   edx
c001f139:	50                   	push   eax
c001f13a:	56                   	push   esi
c001f13b:	53                   	push   ebx
c001f13c:	e8 db fa ff ff       	call   c001ec1c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f141:	83 c4 10             	add    esp,0x10
c001f144:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f147:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f14b:	74 05                	je     c001f152 <Vm::faultHandler(regs*)+0x50b>
c001f14d:	83 e8 02             	sub    eax,0x2
c001f150:	eb 03                	jmp    c001f155 <Vm::faultHandler(regs*)+0x50e>
c001f152:	83 c0 02             	add    eax,0x2
c001f155:	25 ff ff 00 00       	and    eax,0xffff
c001f15a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f15d:	e9 b1 02 00 00       	jmp    c001f413 <Vm::faultHandler(regs*)+0x7cc>
c001f162:	83 ec 0c             	sub    esp,0xc
c001f165:	4b                   	dec    ebx
c001f166:	68 db c4 02 c0       	push   0xc002c4db
c001f16b:	e8 24 3c ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001f170:	83 c4 10             	add    esp,0x10
c001f173:	80 fb 05             	cmp    bl,0x5
c001f176:	77 0a                	ja     c001f182 <Vm::faultHandler(regs*)+0x53b>
c001f178:	0f b6 db             	movzx  ebx,bl
c001f17b:	ff 24 9d 4c c5 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3ab4]
c001f182:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f186:	eb 1b                	jmp    c001f1a3 <Vm::faultHandler(regs*)+0x55c>
c001f188:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f18c:	eb 15                	jmp    c001f1a3 <Vm::faultHandler(regs*)+0x55c>
c001f18e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f192:	eb 0f                	jmp    c001f1a3 <Vm::faultHandler(regs*)+0x55c>
c001f194:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f198:	eb 09                	jmp    c001f1a3 <Vm::faultHandler(regs*)+0x55c>
c001f19a:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f19d:	eb 04                	jmp    c001f1a3 <Vm::faultHandler(regs*)+0x55c>
c001f19f:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f1a3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f1a8:	74 0d                	je     c001f1b7 <Vm::faultHandler(regs*)+0x570>
c001f1aa:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f1b1:	0f 87 8b 00 00 00    	ja     c001f242 <Vm::faultHandler(regs*)+0x5fb>
c001f1b7:	53                   	push   ebx
c001f1b8:	53                   	push   ebx
c001f1b9:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f1bd:	52                   	push   edx
c001f1be:	50                   	push   eax
c001f1bf:	e8 0f fa ff ff       	call   c001ebd3 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f1c4:	5e                   	pop    esi
c001f1c5:	0f b6 c0             	movzx  eax,al
c001f1c8:	5d                   	pop    ebp
c001f1c9:	50                   	push   eax
c001f1ca:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f1ce:	50                   	push   eax
c001f1cf:	e8 91 f6 ff ff       	call   c001e865 <Vm::outbv(unsigned short, unsigned char)>
c001f1d4:	83 c4 10             	add    esp,0x10
c001f1d7:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f1da:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f1de:	74 03                	je     c001f1e3 <Vm::faultHandler(regs*)+0x59c>
c001f1e0:	48                   	dec    eax
c001f1e1:	eb 01                	jmp    c001f1e4 <Vm::faultHandler(regs*)+0x59d>
c001f1e3:	40                   	inc    eax
c001f1e4:	0f b7 c0             	movzx  eax,ax
c001f1e7:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f1ea:	e9 24 02 00 00       	jmp    c001f413 <Vm::faultHandler(regs*)+0x7cc>
c001f1ef:	83 ec 0c             	sub    esp,0xc
c001f1f2:	4b                   	dec    ebx
c001f1f3:	68 db c4 02 c0       	push   0xc002c4db
c001f1f8:	e8 97 3b ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001f1fd:	83 c4 10             	add    esp,0x10
c001f200:	80 fb 05             	cmp    bl,0x5
c001f203:	77 0a                	ja     c001f20f <Vm::faultHandler(regs*)+0x5c8>
c001f205:	0f b6 db             	movzx  ebx,bl
c001f208:	ff 24 9d 64 c5 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3a9c]
c001f20f:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f213:	eb 1b                	jmp    c001f230 <Vm::faultHandler(regs*)+0x5e9>
c001f215:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f219:	eb 15                	jmp    c001f230 <Vm::faultHandler(regs*)+0x5e9>
c001f21b:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f21f:	eb 0f                	jmp    c001f230 <Vm::faultHandler(regs*)+0x5e9>
c001f221:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f225:	eb 09                	jmp    c001f230 <Vm::faultHandler(regs*)+0x5e9>
c001f227:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f22a:	eb 04                	jmp    c001f230 <Vm::faultHandler(regs*)+0x5e9>
c001f22c:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f230:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f233:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f238:	74 39                	je     c001f273 <Vm::faultHandler(regs*)+0x62c>
c001f23a:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f240:	76 31                	jbe    c001f273 <Vm::faultHandler(regs*)+0x62c>
c001f242:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f246:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f24a:	51                   	push   ecx
c001f24b:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f24f:	51                   	push   ecx
c001f250:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f254:	51                   	push   ecx
c001f255:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f259:	51                   	push   ecx
c001f25a:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f25e:	52                   	push   edx
c001f25f:	50                   	push   eax
c001f260:	50                   	push   eax
c001f261:	68 a8 c4 02 c0       	push   0xc002c4a8
c001f266:	e8 29 3b ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001f26b:	83 c4 20             	add    esp,0x20
c001f26e:	e9 fb 01 00 00       	jmp    c001f46e <Vm::faultHandler(regs*)+0x827>
c001f273:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f276:	0f b7 d3             	movzx  edx,bx
c001f279:	81 e6 00 04 00 00    	and    esi,0x400
c001f27f:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f282:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f287:	74 1d                	je     c001f2a6 <Vm::faultHandler(regs*)+0x65f>
c001f289:	51                   	push   ecx
c001f28a:	51                   	push   ecx
c001f28b:	52                   	push   edx
c001f28c:	50                   	push   eax
c001f28d:	e8 64 f9 ff ff       	call   c001ebf6 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f292:	83 c4 10             	add    esp,0x10
c001f295:	89 ea                	mov    edx,ebp
c001f297:	ef                   	out    dx,eax
c001f298:	85 f6                	test   esi,esi
c001f29a:	74 05                	je     c001f2a1 <Vm::faultHandler(regs*)+0x65a>
c001f29c:	83 eb 04             	sub    ebx,0x4
c001f29f:	eb 21                	jmp    c001f2c2 <Vm::faultHandler(regs*)+0x67b>
c001f2a1:	83 c3 04             	add    ebx,0x4
c001f2a4:	eb 1c                	jmp    c001f2c2 <Vm::faultHandler(regs*)+0x67b>
c001f2a6:	51                   	push   ecx
c001f2a7:	51                   	push   ecx
c001f2a8:	52                   	push   edx
c001f2a9:	50                   	push   eax
c001f2aa:	e8 35 f9 ff ff       	call   c001ebe4 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f2af:	83 c4 10             	add    esp,0x10
c001f2b2:	89 ea                	mov    edx,ebp
c001f2b4:	66 ef                	out    dx,ax
c001f2b6:	85 f6                	test   esi,esi
c001f2b8:	74 05                	je     c001f2bf <Vm::faultHandler(regs*)+0x678>
c001f2ba:	83 eb 02             	sub    ebx,0x2
c001f2bd:	eb 03                	jmp    c001f2c2 <Vm::faultHandler(regs*)+0x67b>
c001f2bf:	83 c3 02             	add    ebx,0x2
c001f2c2:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f2c8:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f2cb:	e9 43 01 00 00       	jmp    c001f413 <Vm::faultHandler(regs*)+0x7cc>
c001f2d0:	53                   	push   ebx
c001f2d1:	53                   	push   ebx
c001f2d2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2d6:	50                   	push   eax
c001f2d7:	68 e1 c4 02 c0       	push   0xc002c4e1
c001f2dc:	e8 b3 3a ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001f2e1:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f2e8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2ec:	89 04 24             	mov    DWORD PTR [esp],eax
c001f2ef:	e8 5e f5 ff ff       	call   c001e852 <Vm::inbv(unsigned short)>
c001f2f4:	0f b6 c0             	movzx  eax,al
c001f2f7:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f2fa:	eb 5e                	jmp    c001f35a <Vm::faultHandler(regs*)+0x713>
c001f2fc:	51                   	push   ecx
c001f2fd:	51                   	push   ecx
c001f2fe:	53                   	push   ebx
c001f2ff:	68 e7 c4 02 c0       	push   0xc002c4e7
c001f304:	e8 8b 3a ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001f309:	83 c4 10             	add    esp,0x10
c001f30c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f311:	74 07                	je     c001f31a <Vm::faultHandler(regs*)+0x6d3>
c001f313:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f317:	ed                   	in     eax,dx
c001f318:	eb 14                	jmp    c001f32e <Vm::faultHandler(regs*)+0x6e7>
c001f31a:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f31d:	66 31 db             	xor    bx,bx
c001f320:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f323:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f327:	66 ed                	in     ax,dx
c001f329:	0f b7 c0             	movzx  eax,ax
c001f32c:	09 d8                	or     eax,ebx
c001f32e:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f331:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f335:	e9 dc 00 00 00       	jmp    c001f416 <Vm::faultHandler(regs*)+0x7cf>
c001f33a:	50                   	push   eax
c001f33b:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f33e:	53                   	push   ebx
c001f33f:	68 ed c4 02 c0       	push   0xc002c4ed
c001f344:	e8 4b 3a ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001f349:	58                   	pop    eax
c001f34a:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f34e:	5a                   	pop    edx
c001f34f:	50                   	push   eax
c001f350:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f354:	50                   	push   eax
c001f355:	e8 0b f5 ff ff       	call   c001e865 <Vm::outbv(unsigned short, unsigned char)>
c001f35a:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f35e:	e9 85 00 00 00       	jmp    c001f3e8 <Vm::faultHandler(regs*)+0x7a1>
c001f363:	50                   	push   eax
c001f364:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f367:	53                   	push   ebx
c001f368:	68 f6 c4 02 c0       	push   0xc002c4f6
c001f36d:	e8 22 3a ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001f372:	83 c4 10             	add    esp,0x10
c001f375:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f379:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f37e:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f381:	74 03                	je     c001f386 <Vm::faultHandler(regs*)+0x73f>
c001f383:	ef                   	out    dx,eax
c001f384:	eb ab                	jmp    c001f331 <Vm::faultHandler(regs*)+0x6ea>
c001f386:	66 ef                	out    dx,ax
c001f388:	eb a7                	jmp    c001f331 <Vm::faultHandler(regs*)+0x6ea>
c001f38a:	55                   	push   ebp
c001f38b:	55                   	push   ebp
c001f38c:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f38f:	68 ff c4 02 c0       	push   0xc002c4ff
c001f394:	e8 fb 39 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001f399:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f3a0:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f3a4:	89 04 24             	mov    DWORD PTR [esp],eax
c001f3a7:	e8 a6 f4 ff ff       	call   c001e852 <Vm::inbv(unsigned short)>
c001f3ac:	0f b6 c0             	movzx  eax,al
c001f3af:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f3b2:	eb 31                	jmp    c001f3e5 <Vm::faultHandler(regs*)+0x79e>
c001f3b4:	56                   	push   esi
c001f3b5:	56                   	push   esi
c001f3b6:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f3b9:	68 05 c5 02 c0       	push   0xc002c505
c001f3be:	e8 d1 39 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001f3c3:	83 c4 10             	add    esp,0x10
c001f3c6:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f3c9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f3ce:	74 03                	je     c001f3d3 <Vm::faultHandler(regs*)+0x78c>
c001f3d0:	ed                   	in     eax,dx
c001f3d1:	eb 0d                	jmp    c001f3e0 <Vm::faultHandler(regs*)+0x799>
c001f3d3:	66 ed                	in     ax,dx
c001f3d5:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f3d8:	0f b7 c0             	movzx  eax,ax
c001f3db:	66 31 d2             	xor    dx,dx
c001f3de:	09 d0                	or     eax,edx
c001f3e0:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f3e3:	eb 2e                	jmp    c001f413 <Vm::faultHandler(regs*)+0x7cc>
c001f3e5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f3e8:	83 c4 10             	add    esp,0x10
c001f3eb:	eb 29                	jmp    c001f416 <Vm::faultHandler(regs*)+0x7cf>
c001f3ed:	50                   	push   eax
c001f3ee:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f3f1:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f3f4:	68 14 c5 02 c0       	push   0xc002c514
c001f3f9:	e8 96 39 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001f3fe:	83 c4 10             	add    esp,0x10
c001f401:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f404:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f409:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f40c:	74 03                	je     c001f411 <Vm::faultHandler(regs*)+0x7ca>
c001f40e:	ef                   	out    dx,eax
c001f40f:	eb 02                	jmp    c001f413 <Vm::faultHandler(regs*)+0x7cc>
c001f411:	66 ef                	out    dx,ax
c001f413:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f416:	b0 01                	mov    al,0x1
c001f418:	eb 56                	jmp    c001f470 <Vm::faultHandler(regs*)+0x829>
c001f41a:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f41e:	51                   	push   ecx
c001f41f:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f423:	51                   	push   ecx
c001f424:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f428:	51                   	push   ecx
c001f429:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f42d:	51                   	push   ecx
c001f42e:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f432:	52                   	push   edx
c001f433:	50                   	push   eax
c001f434:	50                   	push   eax
c001f435:	68 1d c5 02 c0       	push   0xc002c51d
c001f43a:	e8 55 39 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c001f43f:	83 c4 20             	add    esp,0x20
c001f442:	83 ec 0c             	sub    esp,0xc
c001f445:	6a 60                	push   0x60
c001f447:	e8 06 f4 ff ff       	call   c001e852 <Vm::inbv(unsigned short)>
c001f44c:	83 c4 10             	add    esp,0x10
c001f44f:	3c 1c                	cmp    al,0x1c
c001f451:	74 04                	je     c001f457 <Vm::faultHandler(regs*)+0x810>
c001f453:	3c 5a                	cmp    al,0x5a
c001f455:	75 eb                	jne    c001f442 <Vm::faultHandler(regs*)+0x7fb>
c001f457:	3c 1c                	cmp    al,0x1c
c001f459:	74 04                	je     c001f45f <Vm::faultHandler(regs*)+0x818>
c001f45b:	3c 5a                	cmp    al,0x5a
c001f45d:	75 0f                	jne    c001f46e <Vm::faultHandler(regs*)+0x827>
c001f45f:	83 ec 0c             	sub    esp,0xc
c001f462:	6a 60                	push   0x60
c001f464:	e8 e9 f3 ff ff       	call   c001e852 <Vm::inbv(unsigned short)>
c001f469:	83 c4 10             	add    esp,0x10
c001f46c:	eb e9                	jmp    c001f457 <Vm::faultHandler(regs*)+0x810>
c001f46e:	31 c0                	xor    eax,eax
c001f470:	83 c4 1c             	add    esp,0x1c
c001f473:	5b                   	pop    ebx
c001f474:	5e                   	pop    esi
c001f475:	5f                   	pop    edi
c001f476:	5d                   	pop    ebp
c001f477:	c3                   	ret    

c001f478 <Vm::x87Save(void*)>:
c001f478:	83 ec 10             	sub    esp,0x10
c001f47b:	6a 48                	push   0x48
c001f47d:	68 00 18 03 c0       	push   0xc0031800
c001f482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f486:	e8 b9 12 fe ff       	call   c0000744 <memcpy>
c001f48b:	83 c4 1c             	add    esp,0x1c
c001f48e:	c3                   	ret    

c001f48f <Vm::x87Load(void*)>:
c001f48f:	83 ec 10             	sub    esp,0x10
c001f492:	6a 48                	push   0x48
c001f494:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f498:	68 00 18 03 c0       	push   0xc0031800
c001f49d:	e8 a2 12 fe ff       	call   c0000744 <memcpy>
c001f4a2:	83 c4 1c             	add    esp,0x1c
c001f4a5:	c3                   	ret    

c001f4a6 <Vm::fpuInternalTo32(unsigned long long)>:
c001f4a6:	57                   	push   edi
c001f4a7:	56                   	push   esi
c001f4a8:	53                   	push   ebx
c001f4a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4b1:	89 d6                	mov    esi,edx
c001f4b3:	89 d7                	mov    edi,edx
c001f4b5:	89 c1                	mov    ecx,eax
c001f4b7:	c1 ef 14             	shr    edi,0x14
c001f4ba:	89 d3                	mov    ebx,edx
c001f4bc:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f4c2:	31 d2                	xor    edx,edx
c001f4c4:	89 f8                	mov    eax,edi
c001f4c6:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f4cc:	bf ff 00 00 00       	mov    edi,0xff
c001f4d1:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f4d6:	83 d2 ff             	adc    edx,0xffffffff
c001f4d9:	39 c7                	cmp    edi,eax
c001f4db:	bf 00 00 00 00       	mov    edi,0x0
c001f4e0:	19 d7                	sbb    edi,edx
c001f4e2:	72 15                	jb     c001f4f9 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f4e4:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f4e8:	c1 e0 17             	shl    eax,0x17
c001f4eb:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f4f1:	09 f1                	or     ecx,esi
c001f4f3:	09 c1                	or     ecx,eax
c001f4f5:	89 cf                	mov    edi,ecx
c001f4f7:	eb 02                	jmp    c001f4fb <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f4f9:	31 ff                	xor    edi,edi
c001f4fb:	89 f8                	mov    eax,edi
c001f4fd:	5b                   	pop    ebx
c001f4fe:	5e                   	pop    esi
c001f4ff:	5f                   	pop    edi
c001f500:	c3                   	ret    

c001f501 <Vm::fpuInternalTo64(unsigned long long)>:
c001f501:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f505:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f509:	c3                   	ret    

c001f50a <Vm::fpu32ToInternal(unsigned int)>:
c001f50a:	57                   	push   edi
c001f50b:	31 ff                	xor    edi,edi
c001f50d:	56                   	push   esi
c001f50e:	53                   	push   ebx
c001f50f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f513:	89 cb                	mov    ebx,ecx
c001f515:	89 ce                	mov    esi,ecx
c001f517:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f51d:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f523:	c1 e9 17             	shr    ecx,0x17
c001f526:	89 f0                	mov    eax,esi
c001f528:	0f b6 d1             	movzx  edx,cl
c001f52b:	81 c2 80 03 00 00    	add    edx,0x380
c001f531:	89 d1                	mov    ecx,edx
c001f533:	89 fa                	mov    edx,edi
c001f535:	c1 e1 14             	shl    ecx,0x14
c001f538:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f53c:	c1 e0 1d             	shl    eax,0x1d
c001f53f:	89 d7                	mov    edi,edx
c001f541:	89 c6                	mov    esi,eax
c001f543:	89 ca                	mov    edx,ecx
c001f545:	89 f0                	mov    eax,esi
c001f547:	09 fa                	or     edx,edi
c001f549:	09 da                	or     edx,ebx
c001f54b:	5b                   	pop    ebx
c001f54c:	5e                   	pop    esi
c001f54d:	5f                   	pop    edi
c001f54e:	c3                   	ret    

c001f54f <Vm::fpu64ToInternal(unsigned long long)>:
c001f54f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f553:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f557:	c3                   	ret    

c001f558 <Vm::fpuFloatToLong(unsigned long long)>:
c001f558:	57                   	push   edi
c001f559:	31 c0                	xor    eax,eax
c001f55b:	56                   	push   esi
c001f55c:	31 d2                	xor    edx,edx
c001f55e:	53                   	push   ebx
c001f55f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f563:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f567:	89 d9                	mov    ecx,ebx
c001f569:	c1 e9 14             	shr    ecx,0x14
c001f56c:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f572:	89 cf                	mov    edi,ecx
c001f574:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f57a:	78 33                	js     c001f5af <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f57c:	89 d9                	mov    ecx,ebx
c001f57e:	89 f0                	mov    eax,esi
c001f580:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f586:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f58c:	89 ca                	mov    edx,ecx
c001f58e:	b9 34 00 00 00       	mov    ecx,0x34
c001f593:	29 f9                	sub    ecx,edi
c001f595:	0f ad d0             	shrd   eax,edx,cl
c001f598:	d3 fa                	sar    edx,cl
c001f59a:	f6 c1 20             	test   cl,0x20
c001f59d:	74 05                	je     c001f5a4 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f59f:	89 d0                	mov    eax,edx
c001f5a1:	c1 fa 1f             	sar    edx,0x1f
c001f5a4:	85 db                	test   ebx,ebx
c001f5a6:	79 07                	jns    c001f5af <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f5a8:	f7 d8                	neg    eax
c001f5aa:	83 d2 00             	adc    edx,0x0
c001f5ad:	f7 da                	neg    edx
c001f5af:	5b                   	pop    ebx
c001f5b0:	5e                   	pop    esi
c001f5b1:	5f                   	pop    edi
c001f5b2:	c3                   	ret    

c001f5b3 <Vm::fpuULongToFloat(unsigned long long)>:
c001f5b3:	57                   	push   edi
c001f5b4:	31 c9                	xor    ecx,ecx
c001f5b6:	56                   	push   esi
c001f5b7:	53                   	push   ebx
c001f5b8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f5bc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f5c0:	0f ba e7 14          	bt     edi,0x14
c001f5c4:	72 07                	jb     c001f5cd <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f5c6:	01 f6                	add    esi,esi
c001f5c8:	11 ff                	adc    edi,edi
c001f5ca:	41                   	inc    ecx
c001f5cb:	eb f3                	jmp    c001f5c0 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f5cd:	89 fa                	mov    edx,edi
c001f5cf:	89 f0                	mov    eax,esi
c001f5d1:	bb 33 04 00 00       	mov    ebx,0x433
c001f5d6:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f5dc:	29 cb                	sub    ebx,ecx
c001f5de:	89 d9                	mov    ecx,ebx
c001f5e0:	5b                   	pop    ebx
c001f5e1:	c1 e1 14             	shl    ecx,0x14
c001f5e4:	5e                   	pop    esi
c001f5e5:	09 ca                	or     edx,ecx
c001f5e7:	5f                   	pop    edi
c001f5e8:	c3                   	ret    

c001f5e9 <Vm::fpuLongToFloat(long long)>:
c001f5e9:	56                   	push   esi
c001f5ea:	31 c0                	xor    eax,eax
c001f5ec:	53                   	push   ebx
c001f5ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f5f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f5f5:	39 c8                	cmp    eax,ecx
c001f5f7:	19 d8                	sbb    eax,ebx
c001f5f9:	7d 04                	jge    c001f5ff <Vm::fpuLongToFloat(long long)+0x16>
c001f5fb:	31 f6                	xor    esi,esi
c001f5fd:	eb 0c                	jmp    c001f60b <Vm::fpuLongToFloat(long long)+0x22>
c001f5ff:	f7 d9                	neg    ecx
c001f601:	be 01 00 00 00       	mov    esi,0x1
c001f606:	83 d3 00             	adc    ebx,0x0
c001f609:	f7 db                	neg    ebx
c001f60b:	31 c0                	xor    eax,eax
c001f60d:	0f ba e3 14          	bt     ebx,0x14
c001f611:	72 07                	jb     c001f61a <Vm::fpuLongToFloat(long long)+0x31>
c001f613:	01 c9                	add    ecx,ecx
c001f615:	11 db                	adc    ebx,ebx
c001f617:	40                   	inc    eax
c001f618:	eb f3                	jmp    c001f60d <Vm::fpuLongToFloat(long long)+0x24>
c001f61a:	ba 33 04 00 00       	mov    edx,0x433
c001f61f:	29 c2                	sub    edx,eax
c001f621:	89 c8                	mov    eax,ecx
c001f623:	c1 e2 14             	shl    edx,0x14
c001f626:	89 d9                	mov    ecx,ebx
c001f628:	89 f3                	mov    ebx,esi
c001f62a:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f630:	09 ca                	or     edx,ecx
c001f632:	84 db                	test   bl,bl
c001f634:	74 06                	je     c001f63c <Vm::fpuLongToFloat(long long)+0x53>
c001f636:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f63c:	5b                   	pop    ebx
c001f63d:	5e                   	pop    esi
c001f63e:	c3                   	ret    

c001f63f <Vm::fpuGet0()>:
c001f63f:	31 c0                	xor    eax,eax
c001f641:	31 d2                	xor    edx,edx
c001f643:	c3                   	ret    

c001f644 <Vm::fpuGet1()>:
c001f644:	b8 01 00 00 00       	mov    eax,0x1
c001f649:	31 d2                	xor    edx,edx
c001f64b:	c3                   	ret    

c001f64c <Vm::fpuGetPi()>:
c001f64c:	b8 03 00 00 00       	mov    eax,0x3
c001f651:	31 d2                	xor    edx,edx
c001f653:	c3                   	ret    

c001f654 <Vm::fpuGetLog2E()>:
c001f654:	83 ec 18             	sub    esp,0x18
c001f657:	68 7c c5 02 c0       	push   0xc002c57c
c001f65c:	e8 dc ad ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001f661:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f666:	31 d2                	xor    edx,edx
c001f668:	83 c4 1c             	add    esp,0x1c
c001f66b:	c3                   	ret    

c001f66c <Vm::fpuGetLogE2()>:
c001f66c:	83 ec 18             	sub    esp,0x18
c001f66f:	68 88 c5 02 c0       	push   0xc002c588
c001f674:	e8 c4 ad ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001f679:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f67e:	31 d2                	xor    edx,edx
c001f680:	83 c4 1c             	add    esp,0x1c
c001f683:	c3                   	ret    

c001f684 <Vm::fpuGetLog210()>:
c001f684:	83 ec 18             	sub    esp,0x18
c001f687:	68 94 c5 02 c0       	push   0xc002c594
c001f68c:	e8 ac ad ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001f691:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f696:	31 d2                	xor    edx,edx
c001f698:	83 c4 1c             	add    esp,0x1c
c001f69b:	c3                   	ret    

c001f69c <Vm::fpuGetLog102()>:
c001f69c:	83 ec 18             	sub    esp,0x18
c001f69f:	68 a1 c5 02 c0       	push   0xc002c5a1
c001f6a4:	e8 94 ad ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001f6a9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6ae:	31 d2                	xor    edx,edx
c001f6b0:	83 c4 1c             	add    esp,0x1c
c001f6b3:	c3                   	ret    

c001f6b4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f6b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6b8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f6bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f6c0:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f6c4:	0f 92 c0             	setb   al
c001f6c7:	c3                   	ret    

c001f6c8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f6c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f6cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6d0:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f6d4:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f6d8:	09 c2                	or     edx,eax
c001f6da:	0f 94 c0             	sete   al
c001f6dd:	c3                   	ret    

c001f6de <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f6de:	57                   	push   edi
c001f6df:	56                   	push   esi
c001f6e0:	53                   	push   ebx
c001f6e1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6e5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f6e9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f6ed:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f6f1:	57                   	push   edi
c001f6f2:	56                   	push   esi
c001f6f3:	53                   	push   ebx
c001f6f4:	51                   	push   ecx
c001f6f5:	e8 ce ff ff ff       	call   c001f6c8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f6fa:	83 c4 10             	add    esp,0x10
c001f6fd:	88 c2                	mov    dl,al
c001f6ff:	31 c0                	xor    eax,eax
c001f701:	84 d2                	test   dl,dl
c001f703:	75 0c                	jne    c001f711 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f705:	57                   	push   edi
c001f706:	56                   	push   esi
c001f707:	53                   	push   ebx
c001f708:	51                   	push   ecx
c001f709:	e8 a6 ff ff ff       	call   c001f6b4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f70e:	83 c4 10             	add    esp,0x10
c001f711:	83 e0 01             	and    eax,0x1
c001f714:	5b                   	pop    ebx
c001f715:	88 c1                	mov    cl,al
c001f717:	83 e2 01             	and    edx,0x1
c001f71a:	a0 01 18 03 c0       	mov    al,ds:0xc0031801
c001f71f:	c1 e2 06             	shl    edx,0x6
c001f722:	83 e0 ba             	and    eax,0xffffffba
c001f725:	5e                   	pop    esi
c001f726:	09 c8                	or     eax,ecx
c001f728:	5f                   	pop    edi
c001f729:	09 d0                	or     eax,edx
c001f72b:	a2 01 18 03 c0       	mov    ds:0xc0031801,al
c001f730:	c3                   	ret    

c001f731 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f731:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f735:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f739:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f73d:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f741:	c3                   	ret    

c001f742 <Vm::fpuAbs(unsigned long long)>:
c001f742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f74a:	c3                   	ret    

c001f74b <Vm::fpuChs(unsigned long long)>:
c001f74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f74f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f753:	f7 d8                	neg    eax
c001f755:	83 d2 00             	adc    edx,0x0
c001f758:	f7 da                	neg    edx
c001f75a:	c3                   	ret    

c001f75b <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f75b:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f75f:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f764:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f768:	eb c7                	jmp    c001f731 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f76a <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f76a:	53                   	push   ebx
c001f76b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f76f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f773:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f777:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f77b:	0f af ca             	imul   ecx,edx
c001f77e:	0f af d8             	imul   ebx,eax
c001f781:	f7 e2                	mul    edx
c001f783:	01 d9                	add    ecx,ebx
c001f785:	5b                   	pop    ebx
c001f786:	01 ca                	add    edx,ecx
c001f788:	c3                   	ret    

c001f789 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f789:	83 ec 0c             	sub    esp,0xc
c001f78c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f794:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f798:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f79c:	e8 9b 70 00 00       	call   c002683c <__udivdi3>
c001f7a1:	83 c4 1c             	add    esp,0x1c
c001f7a4:	c3                   	ret    

c001f7a5 <Vm::fpuSquare(unsigned long long)>:
c001f7a5:	50                   	push   eax
c001f7a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f7ae:	52                   	push   edx
c001f7af:	50                   	push   eax
c001f7b0:	52                   	push   edx
c001f7b1:	50                   	push   eax
c001f7b2:	e8 b3 ff ff ff       	call   c001f76a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f7b7:	83 c4 14             	add    esp,0x14
c001f7ba:	c3                   	ret    

c001f7bb <Vm::fpuGetReg(int)>:
c001f7bb:	83 ec 0c             	sub    esp,0xc
c001f7be:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f7c3:	76 10                	jbe    c001f7d5 <Vm::fpuGetReg(int)+0x1a>
c001f7c5:	83 ec 0c             	sub    esp,0xc
c001f7c8:	68 ae c5 02 c0       	push   0xc002c5ae
c001f7cd:	e8 6b ac ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001f7d2:	83 c4 10             	add    esp,0x10
c001f7d5:	a0 01 18 03 c0       	mov    al,ds:0xc0031801
c001f7da:	b9 08 00 00 00       	mov    ecx,0x8
c001f7df:	c0 e8 03             	shr    al,0x3
c001f7e2:	83 e0 07             	and    eax,0x7
c001f7e5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f7e9:	99                   	cdq    
c001f7ea:	f7 f9                	idiv   ecx
c001f7ec:	8b 04 d5 04 18 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce7fc]
c001f7f3:	8b 14 d5 08 18 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce7f8]
c001f7fa:	83 c4 0c             	add    esp,0xc
c001f7fd:	c3                   	ret    

c001f7fe <Vm::fpuSetReg(int, unsigned long long)>:
c001f7fe:	57                   	push   edi
c001f7ff:	56                   	push   esi
c001f800:	52                   	push   edx
c001f801:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f805:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f809:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f80e:	76 10                	jbe    c001f820 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f810:	83 ec 0c             	sub    esp,0xc
c001f813:	68 c1 c5 02 c0       	push   0xc002c5c1
c001f818:	e8 20 ac ff ff       	call   c001a43d <Krnl::panic(char const*)>
c001f81d:	83 c4 10             	add    esp,0x10
c001f820:	a0 01 18 03 c0       	mov    al,ds:0xc0031801
c001f825:	b9 08 00 00 00       	mov    ecx,0x8
c001f82a:	c0 e8 03             	shr    al,0x3
c001f82d:	83 e0 07             	and    eax,0x7
c001f830:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f834:	99                   	cdq    
c001f835:	f7 f9                	idiv   ecx
c001f837:	89 34 d5 04 18 03 c0 	mov    DWORD PTR [edx*8-0x3ffce7fc],esi
c001f83e:	89 3c d5 08 18 03 c0 	mov    DWORD PTR [edx*8-0x3ffce7f8],edi
c001f845:	58                   	pop    eax
c001f846:	5e                   	pop    esi
c001f847:	5f                   	pop    edi
c001f848:	c3                   	ret    

c001f849 <Vm::fpuPush(unsigned long long)>:
c001f849:	a0 01 18 03 c0       	mov    al,ds:0xc0031801
c001f84e:	c0 e8 03             	shr    al,0x3
c001f851:	83 e0 07             	and    eax,0x7
c001f854:	83 c0 07             	add    eax,0x7
c001f857:	88 c2                	mov    dl,al
c001f859:	83 e0 07             	and    eax,0x7
c001f85c:	83 e2 07             	and    edx,0x7
c001f85f:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f866:	8a 15 01 18 03 c0    	mov    dl,BYTE PTR ds:0xc0031801
c001f86c:	83 e2 c7             	and    edx,0xffffffc7
c001f86f:	09 ca                	or     edx,ecx
c001f871:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f875:	88 15 01 18 03 c0    	mov    BYTE PTR ds:0xc0031801,dl
c001f87b:	89 0c c5 08 18 03 c0 	mov    DWORD PTR [eax*8-0x3ffce7f8],ecx
c001f882:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f886:	89 14 c5 04 18 03 c0 	mov    DWORD PTR [eax*8-0x3ffce7fc],edx
c001f88d:	a1 44 18 03 c0       	mov    eax,ds:0xc0031844
c001f892:	83 f8 08             	cmp    eax,0x8
c001f895:	75 08                	jne    c001f89f <Vm::fpuPush(unsigned long long)+0x56>
c001f897:	80 0d 00 18 03 c0 40 	or     BYTE PTR ds:0xc0031800,0x40
c001f89e:	c3                   	ret    
c001f89f:	40                   	inc    eax
c001f8a0:	a3 44 18 03 c0       	mov    ds:0xc0031844,eax
c001f8a5:	c3                   	ret    

c001f8a6 <Vm::fpuPop()>:
c001f8a6:	8a 0d 01 18 03 c0    	mov    cl,BYTE PTR ds:0xc0031801
c001f8ac:	53                   	push   ebx
c001f8ad:	c0 e9 03             	shr    cl,0x3
c001f8b0:	8a 1d 01 18 03 c0    	mov    bl,BYTE PTR ds:0xc0031801
c001f8b6:	83 e1 07             	and    ecx,0x7
c001f8b9:	83 e3 c7             	and    ebx,0xffffffc7
c001f8bc:	8b 04 cd 04 18 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce7fc]
c001f8c3:	8b 14 cd 08 18 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce7f8]
c001f8ca:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f8d1:	83 e1 38             	and    ecx,0x38
c001f8d4:	09 d9                	or     ecx,ebx
c001f8d6:	88 0d 01 18 03 c0    	mov    BYTE PTR ds:0xc0031801,cl
c001f8dc:	8b 0d 44 18 03 c0    	mov    ecx,DWORD PTR ds:0xc0031844
c001f8e2:	85 c9                	test   ecx,ecx
c001f8e4:	74 09                	je     c001f8ef <Vm::fpuPop()+0x49>
c001f8e6:	49                   	dec    ecx
c001f8e7:	89 0d 44 18 03 c0    	mov    DWORD PTR ds:0xc0031844,ecx
c001f8ed:	eb 07                	jmp    c001f8f6 <Vm::fpuPop()+0x50>
c001f8ef:	80 0d 00 18 03 c0 40 	or     BYTE PTR ds:0xc0031800,0x40
c001f8f6:	5b                   	pop    ebx
c001f8f7:	c3                   	ret    

c001f8f8 <Vm::x87Handler(regs*)>:
c001f8f8:	55                   	push   ebp
c001f8f9:	57                   	push   edi
c001f8fa:	56                   	push   esi
c001f8fb:	53                   	push   ebx
c001f8fc:	83 ec 1c             	sub    esp,0x1c
c001f8ff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f903:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f908:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f90b:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f913:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f917:	50                   	push   eax
c001f918:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f91c:	50                   	push   eax
c001f91d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f921:	50                   	push   eax
c001f922:	53                   	push   ebx
c001f923:	e8 dc a1 ff ff       	call   c0019b04 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f928:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f92b:	83 c4 10             	add    esp,0x10
c001f92e:	89 c6                	mov    esi,eax
c001f930:	80 fa d9             	cmp    dl,0xd9
c001f933:	0f 85 52 01 00 00    	jne    c001fa8b <Vm::x87Handler(regs*)+0x193>
c001f939:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f93d:	8d 50 20             	lea    edx,[eax+0x20]
c001f940:	80 fa 0e             	cmp    dl,0xe
c001f943:	0f 87 86 00 00 00    	ja     c001f9cf <Vm::x87Handler(regs*)+0xd7>
c001f949:	0f b6 d2             	movzx  edx,dl
c001f94c:	ff 24 95 d4 c5 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3a2c]
c001f953:	e8 e7 fc ff ff       	call   c001f63f <Vm::fpuGet0()>
c001f958:	eb 05                	jmp    c001f95f <Vm::x87Handler(regs*)+0x67>
c001f95a:	e8 e5 fc ff ff       	call   c001f644 <Vm::fpuGet1()>
c001f95f:	57                   	push   edi
c001f960:	57                   	push   edi
c001f961:	52                   	push   edx
c001f962:	50                   	push   eax
c001f963:	e8 e1 fe ff ff       	call   c001f849 <Vm::fpuPush(unsigned long long)>
c001f968:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f96c:	83 c4 10             	add    esp,0x10
c001f96f:	b0 01                	mov    al,0x1
c001f971:	e9 e3 09 00 00       	jmp    c0020359 <Vm::x87Handler(regs*)+0xa61>
c001f976:	83 ec 0c             	sub    esp,0xc
c001f979:	6a 00                	push   0x0
c001f97b:	e8 3b fe ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001f980:	59                   	pop    ecx
c001f981:	5e                   	pop    esi
c001f982:	52                   	push   edx
c001f983:	50                   	push   eax
c001f984:	e8 c2 fd ff ff       	call   c001f74b <Vm::fpuChs(unsigned long long)>
c001f989:	eb 13                	jmp    c001f99e <Vm::x87Handler(regs*)+0xa6>
c001f98b:	83 ec 0c             	sub    esp,0xc
c001f98e:	6a 00                	push   0x0
c001f990:	e8 26 fe ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001f995:	5f                   	pop    edi
c001f996:	5d                   	pop    ebp
c001f997:	52                   	push   edx
c001f998:	50                   	push   eax
c001f999:	e8 a4 fd ff ff       	call   c001f742 <Vm::fpuAbs(unsigned long long)>
c001f99e:	83 c4 0c             	add    esp,0xc
c001f9a1:	52                   	push   edx
c001f9a2:	50                   	push   eax
c001f9a3:	6a 00                	push   0x0
c001f9a5:	e8 54 fe ff ff       	call   c001f7fe <Vm::fpuSetReg(int, unsigned long long)>
c001f9aa:	eb bc                	jmp    c001f968 <Vm::x87Handler(regs*)+0x70>
c001f9ac:	e8 d3 fc ff ff       	call   c001f684 <Vm::fpuGetLog210()>
c001f9b1:	eb ac                	jmp    c001f95f <Vm::x87Handler(regs*)+0x67>
c001f9b3:	e8 9c fc ff ff       	call   c001f654 <Vm::fpuGetLog2E()>
c001f9b8:	eb a5                	jmp    c001f95f <Vm::x87Handler(regs*)+0x67>
c001f9ba:	e8 8d fc ff ff       	call   c001f64c <Vm::fpuGetPi()>
c001f9bf:	eb 9e                	jmp    c001f95f <Vm::x87Handler(regs*)+0x67>
c001f9c1:	e8 d6 fc ff ff       	call   c001f69c <Vm::fpuGetLog102()>
c001f9c6:	eb 97                	jmp    c001f95f <Vm::x87Handler(regs*)+0x67>
c001f9c8:	e8 9f fc ff ff       	call   c001f66c <Vm::fpuGetLogE2()>
c001f9cd:	eb 90                	jmp    c001f95f <Vm::x87Handler(regs*)+0x67>
c001f9cf:	8d 50 40             	lea    edx,[eax+0x40]
c001f9d2:	80 fa 07             	cmp    dl,0x7
c001f9d5:	77 15                	ja     c001f9ec <Vm::x87Handler(regs*)+0xf4>
c001f9d7:	83 ec 0c             	sub    esp,0xc
c001f9da:	2d c0 00 00 00       	sub    eax,0xc0
c001f9df:	50                   	push   eax
c001f9e0:	e8 d6 fd ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001f9e5:	59                   	pop    ecx
c001f9e6:	5e                   	pop    esi
c001f9e7:	e9 75 ff ff ff       	jmp    c001f961 <Vm::x87Handler(regs*)+0x69>
c001f9ec:	8d 50 38             	lea    edx,[eax+0x38]
c001f9ef:	80 fa 07             	cmp    dl,0x7
c001f9f2:	77 3c                	ja     c001fa30 <Vm::x87Handler(regs*)+0x138>
c001f9f4:	83 ec 0c             	sub    esp,0xc
c001f9f7:	2d c8 00 00 00       	sub    eax,0xc8
c001f9fc:	50                   	push   eax
c001f9fd:	e8 b9 fd ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fa02:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa09:	89 c6                	mov    esi,eax
c001fa0b:	89 d7                	mov    edi,edx
c001fa0d:	e8 a9 fd ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fa12:	83 c4 0c             	add    esp,0xc
c001fa15:	52                   	push   edx
c001fa16:	50                   	push   eax
c001fa17:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa1b:	2d c8 00 00 00       	sub    eax,0xc8
c001fa20:	50                   	push   eax
c001fa21:	e8 d8 fd ff ff       	call   c001f7fe <Vm::fpuSetReg(int, unsigned long long)>
c001fa26:	83 c4 0c             	add    esp,0xc
c001fa29:	57                   	push   edi
c001fa2a:	56                   	push   esi
c001fa2b:	e9 73 ff ff ff       	jmp    c001f9a3 <Vm::x87Handler(regs*)+0xab>
c001fa30:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fa34:	84 d2                	test   dl,dl
c001fa36:	75 0f                	jne    c001fa47 <Vm::x87Handler(regs*)+0x14f>
c001fa38:	83 ec 0c             	sub    esp,0xc
c001fa3b:	ff 36                	push   DWORD PTR [esi]
c001fa3d:	e8 c8 fa ff ff       	call   c001f50a <Vm::fpu32ToInternal(unsigned int)>
c001fa42:	e9 bf 00 00 00       	jmp    c001fb06 <Vm::x87Handler(regs*)+0x20e>
c001fa47:	80 fa 03             	cmp    dl,0x3
c001fa4a:	75 13                	jne    c001fa5f <Vm::x87Handler(regs*)+0x167>
c001fa4c:	e8 55 fe ff ff       	call   c001f8a6 <Vm::fpuPop()>
c001fa51:	55                   	push   ebp
c001fa52:	55                   	push   ebp
c001fa53:	52                   	push   edx
c001fa54:	50                   	push   eax
c001fa55:	e8 4c fa ff ff       	call   c001f4a6 <Vm::fpuInternalTo32(unsigned long long)>
c001fa5a:	e9 88 00 00 00       	jmp    c001fae7 <Vm::x87Handler(regs*)+0x1ef>
c001fa5f:	80 fa 05             	cmp    dl,0x5
c001fa62:	75 0e                	jne    c001fa72 <Vm::x87Handler(regs*)+0x17a>
c001fa64:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fa67:	66 a3 02 18 03 c0    	mov    ds:0xc0031802,ax
c001fa6d:	e9 df 00 00 00       	jmp    c001fb51 <Vm::x87Handler(regs*)+0x259>
c001fa72:	31 c0                	xor    eax,eax
c001fa74:	80 fa 07             	cmp    dl,0x7
c001fa77:	0f 85 dc 08 00 00    	jne    c0020359 <Vm::x87Handler(regs*)+0xa61>
c001fa7d:	66 a1 02 18 03 c0    	mov    ax,ds:0xc0031802
c001fa83:	66 89 06             	mov    WORD PTR [esi],ax
c001fa86:	e9 c6 00 00 00       	jmp    c001fb51 <Vm::x87Handler(regs*)+0x259>
c001fa8b:	80 fa d8             	cmp    dl,0xd8
c001fa8e:	0f 84 c9 00 00 00    	je     c001fb5d <Vm::x87Handler(regs*)+0x265>
c001fa94:	80 fa dc             	cmp    dl,0xdc
c001fa97:	0f 84 0d 02 00 00    	je     c001fcaa <Vm::x87Handler(regs*)+0x3b2>
c001fa9d:	80 fa de             	cmp    dl,0xde
c001faa0:	0f 84 cd 02 00 00    	je     c001fd73 <Vm::x87Handler(regs*)+0x47b>
c001faa6:	80 fa dd             	cmp    dl,0xdd
c001faa9:	0f 84 5f 04 00 00    	je     c001ff0e <Vm::x87Handler(regs*)+0x616>
c001faaf:	80 fa da             	cmp    dl,0xda
c001fab2:	0f 84 24 05 00 00    	je     c001ffdc <Vm::x87Handler(regs*)+0x6e4>
c001fab8:	80 fa df             	cmp    dl,0xdf
c001fabb:	0f 84 68 05 00 00    	je     c0020029 <Vm::x87Handler(regs*)+0x731>
c001fac1:	31 c0                	xor    eax,eax
c001fac3:	80 fa db             	cmp    dl,0xdb
c001fac6:	0f 85 8d 08 00 00    	jne    c0020359 <Vm::x87Handler(regs*)+0xa61>
c001facc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fad0:	80 fa 03             	cmp    dl,0x3
c001fad3:	0f 85 70 06 00 00    	jne    c0020149 <Vm::x87Handler(regs*)+0x851>
c001fad9:	e8 c8 fd ff ff       	call   c001f8a6 <Vm::fpuPop()>
c001fade:	55                   	push   ebp
c001fadf:	55                   	push   ebp
c001fae0:	52                   	push   edx
c001fae1:	50                   	push   eax
c001fae2:	e8 71 fa ff ff       	call   c001f558 <Vm::fpuFloatToLong(unsigned long long)>
c001fae7:	83 c4 10             	add    esp,0x10
c001faea:	89 06                	mov    DWORD PTR [esi],eax
c001faec:	eb 63                	jmp    c001fb51 <Vm::x87Handler(regs*)+0x259>
c001faee:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001faf2:	84 d2                	test   dl,dl
c001faf4:	0f 85 e6 05 00 00    	jne    c00200e0 <Vm::x87Handler(regs*)+0x7e8>
c001fafa:	57                   	push   edi
c001fafb:	57                   	push   edi
c001fafc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001faff:	ff 36                	push   DWORD PTR [esi]
c001fb01:	e8 49 fa ff ff       	call   c001f54f <Vm::fpu64ToInternal(unsigned long long)>
c001fb06:	5e                   	pop    esi
c001fb07:	5f                   	pop    edi
c001fb08:	52                   	push   edx
c001fb09:	50                   	push   eax
c001fb0a:	e8 3a fd ff ff       	call   c001f849 <Vm::fpuPush(unsigned long long)>
c001fb0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fb13:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb16:	e9 51 fe ff ff       	jmp    c001f96c <Vm::x87Handler(regs*)+0x74>
c001fb1b:	80 fa 03             	cmp    dl,0x3
c001fb1e:	0f 85 d7 06 00 00    	jne    c00201fb <Vm::x87Handler(regs*)+0x903>
c001fb24:	57                   	push   edi
c001fb25:	57                   	push   edi
c001fb26:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb29:	ff 36                	push   DWORD PTR [esi]
c001fb2b:	e8 1f fa ff ff       	call   c001f54f <Vm::fpu64ToInternal(unsigned long long)>
c001fb30:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb37:	89 c6                	mov    esi,eax
c001fb39:	89 d7                	mov    edi,edx
c001fb3b:	e8 7b fc ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fb40:	57                   	push   edi
c001fb41:	56                   	push   esi
c001fb42:	52                   	push   edx
c001fb43:	50                   	push   eax
c001fb44:	e8 95 fb ff ff       	call   c001f6de <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fb49:	83 c4 20             	add    esp,0x20
c001fb4c:	e8 55 fd ff ff       	call   c001f8a6 <Vm::fpuPop()>
c001fb51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb55:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb58:	e9 12 fe ff ff       	jmp    c001f96f <Vm::x87Handler(regs*)+0x77>
c001fb5d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb61:	8d 50 40             	lea    edx,[eax+0x40]
c001fb64:	80 fa 07             	cmp    dl,0x7
c001fb67:	77 29                	ja     c001fb92 <Vm::x87Handler(regs*)+0x29a>
c001fb69:	83 ec 0c             	sub    esp,0xc
c001fb6c:	2d c0 00 00 00       	sub    eax,0xc0
c001fb71:	50                   	push   eax
c001fb72:	e8 44 fc ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fb77:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb7e:	89 c6                	mov    esi,eax
c001fb80:	89 d7                	mov    edi,edx
c001fb82:	e8 34 fc ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fb87:	57                   	push   edi
c001fb88:	56                   	push   esi
c001fb89:	52                   	push   edx
c001fb8a:	50                   	push   eax
c001fb8b:	e8 a1 fb ff ff       	call   c001f731 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fb90:	eb 2f                	jmp    c001fbc1 <Vm::x87Handler(regs*)+0x2c9>
c001fb92:	8d 50 38             	lea    edx,[eax+0x38]
c001fb95:	80 fa 07             	cmp    dl,0x7
c001fb98:	77 2f                	ja     c001fbc9 <Vm::x87Handler(regs*)+0x2d1>
c001fb9a:	83 ec 0c             	sub    esp,0xc
c001fb9d:	2d c8 00 00 00       	sub    eax,0xc8
c001fba2:	50                   	push   eax
c001fba3:	e8 13 fc ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fba8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbaf:	89 c6                	mov    esi,eax
c001fbb1:	89 d7                	mov    edi,edx
c001fbb3:	e8 03 fc ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fbb8:	57                   	push   edi
c001fbb9:	56                   	push   esi
c001fbba:	52                   	push   edx
c001fbbb:	50                   	push   eax
c001fbbc:	e8 a9 fb ff ff       	call   c001f76a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fbc1:	83 c4 1c             	add    esp,0x1c
c001fbc4:	e9 d8 fd ff ff       	jmp    c001f9a1 <Vm::x87Handler(regs*)+0xa9>
c001fbc9:	8d 50 30             	lea    edx,[eax+0x30]
c001fbcc:	80 fa 07             	cmp    dl,0x7
c001fbcf:	77 0d                	ja     c001fbde <Vm::x87Handler(regs*)+0x2e6>
c001fbd1:	83 ec 0c             	sub    esp,0xc
c001fbd4:	2d d0 00 00 00       	sub    eax,0xd0
c001fbd9:	e9 99 03 00 00       	jmp    c001ff77 <Vm::x87Handler(regs*)+0x67f>
c001fbde:	8d 50 28             	lea    edx,[eax+0x28]
c001fbe1:	80 fa 07             	cmp    dl,0x7
c001fbe4:	77 0d                	ja     c001fbf3 <Vm::x87Handler(regs*)+0x2fb>
c001fbe6:	83 ec 0c             	sub    esp,0xc
c001fbe9:	2d d8 00 00 00       	sub    eax,0xd8
c001fbee:	e9 c0 03 00 00       	jmp    c001ffb3 <Vm::x87Handler(regs*)+0x6bb>
c001fbf3:	8d 50 20             	lea    edx,[eax+0x20]
c001fbf6:	80 fa 07             	cmp    dl,0x7
c001fbf9:	77 1b                	ja     c001fc16 <Vm::x87Handler(regs*)+0x31e>
c001fbfb:	83 ec 0c             	sub    esp,0xc
c001fbfe:	2d e0 00 00 00       	sub    eax,0xe0
c001fc03:	50                   	push   eax
c001fc04:	e8 b2 fb ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fc09:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc10:	89 c6                	mov    esi,eax
c001fc12:	89 d7                	mov    edi,edx
c001fc14:	eb 22                	jmp    c001fc38 <Vm::x87Handler(regs*)+0x340>
c001fc16:	8d 50 18             	lea    edx,[eax+0x18]
c001fc19:	80 fa 07             	cmp    dl,0x7
c001fc1c:	77 2d                	ja     c001fc4b <Vm::x87Handler(regs*)+0x353>
c001fc1e:	83 ec 0c             	sub    esp,0xc
c001fc21:	6a 00                	push   0x0
c001fc23:	e8 93 fb ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fc28:	89 c6                	mov    esi,eax
c001fc2a:	89 d7                	mov    edi,edx
c001fc2c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc30:	2d e8 00 00 00       	sub    eax,0xe8
c001fc35:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc38:	e8 7e fb ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fc3d:	57                   	push   edi
c001fc3e:	56                   	push   esi
c001fc3f:	52                   	push   edx
c001fc40:	50                   	push   eax
c001fc41:	e8 15 fb ff ff       	call   c001f75b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc46:	e9 76 ff ff ff       	jmp    c001fbc1 <Vm::x87Handler(regs*)+0x2c9>
c001fc4b:	8d 50 10             	lea    edx,[eax+0x10]
c001fc4e:	80 fa 07             	cmp    dl,0x7
c001fc51:	77 1b                	ja     c001fc6e <Vm::x87Handler(regs*)+0x376>
c001fc53:	83 ec 0c             	sub    esp,0xc
c001fc56:	2d f0 00 00 00       	sub    eax,0xf0
c001fc5b:	50                   	push   eax
c001fc5c:	e8 5a fb ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fc61:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc68:	89 c6                	mov    esi,eax
c001fc6a:	89 d7                	mov    edi,edx
c001fc6c:	eb 22                	jmp    c001fc90 <Vm::x87Handler(regs*)+0x398>
c001fc6e:	3c f7                	cmp    al,0xf7
c001fc70:	0f 86 d1 03 00 00    	jbe    c0020047 <Vm::x87Handler(regs*)+0x74f>
c001fc76:	83 ec 0c             	sub    esp,0xc
c001fc79:	6a 00                	push   0x0
c001fc7b:	e8 3b fb ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fc80:	89 c6                	mov    esi,eax
c001fc82:	89 d7                	mov    edi,edx
c001fc84:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc88:	2d f8 00 00 00       	sub    eax,0xf8
c001fc8d:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc90:	e8 26 fb ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fc95:	57                   	push   edi
c001fc96:	56                   	push   esi
c001fc97:	52                   	push   edx
c001fc98:	50                   	push   eax
c001fc99:	e8 eb fa ff ff       	call   c001f789 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fc9e:	83 c4 1c             	add    esp,0x1c
c001fca1:	52                   	push   edx
c001fca2:	50                   	push   eax
c001fca3:	6a 00                	push   0x0
c001fca5:	e9 51 02 00 00       	jmp    c001fefb <Vm::x87Handler(regs*)+0x603>
c001fcaa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcae:	8d 50 40             	lea    edx,[eax+0x40]
c001fcb1:	80 fa 07             	cmp    dl,0x7
c001fcb4:	77 37                	ja     c001fced <Vm::x87Handler(regs*)+0x3f5>
c001fcb6:	83 ec 0c             	sub    esp,0xc
c001fcb9:	2d c0 00 00 00       	sub    eax,0xc0
c001fcbe:	50                   	push   eax
c001fcbf:	e8 f7 fa ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fcc4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fccb:	89 c6                	mov    esi,eax
c001fccd:	89 d7                	mov    edi,edx
c001fccf:	e8 e7 fa ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fcd4:	57                   	push   edi
c001fcd5:	56                   	push   esi
c001fcd6:	52                   	push   edx
c001fcd7:	50                   	push   eax
c001fcd8:	e8 54 fa ff ff       	call   c001f731 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fcdd:	83 c4 1c             	add    esp,0x1c
c001fce0:	52                   	push   edx
c001fce1:	50                   	push   eax
c001fce2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fce6:	2d c0 00 00 00       	sub    eax,0xc0
c001fceb:	eb 3d                	jmp    c001fd2a <Vm::x87Handler(regs*)+0x432>
c001fced:	8d 50 38             	lea    edx,[eax+0x38]
c001fcf0:	80 fa 07             	cmp    dl,0x7
c001fcf3:	77 3b                	ja     c001fd30 <Vm::x87Handler(regs*)+0x438>
c001fcf5:	83 ec 0c             	sub    esp,0xc
c001fcf8:	2d c8 00 00 00       	sub    eax,0xc8
c001fcfd:	50                   	push   eax
c001fcfe:	e8 b8 fa ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fd03:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd0a:	89 c6                	mov    esi,eax
c001fd0c:	89 d7                	mov    edi,edx
c001fd0e:	e8 a8 fa ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fd13:	57                   	push   edi
c001fd14:	56                   	push   esi
c001fd15:	52                   	push   edx
c001fd16:	50                   	push   eax
c001fd17:	e8 4e fa ff ff       	call   c001f76a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd1c:	83 c4 1c             	add    esp,0x1c
c001fd1f:	52                   	push   edx
c001fd20:	50                   	push   eax
c001fd21:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd25:	2d c8 00 00 00       	sub    eax,0xc8
c001fd2a:	50                   	push   eax
c001fd2b:	e9 75 fc ff ff       	jmp    c001f9a5 <Vm::x87Handler(regs*)+0xad>
c001fd30:	83 c0 18             	add    eax,0x18
c001fd33:	3c 07                	cmp    al,0x7
c001fd35:	0f 87 3b 04 00 00    	ja     c0020176 <Vm::x87Handler(regs*)+0x87e>
c001fd3b:	83 ec 0c             	sub    esp,0xc
c001fd3e:	6a 00                	push   0x0
c001fd40:	e8 76 fa ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fd45:	89 c6                	mov    esi,eax
c001fd47:	89 d7                	mov    edi,edx
c001fd49:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd4d:	2d e8 00 00 00       	sub    eax,0xe8
c001fd52:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd55:	e8 61 fa ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fd5a:	57                   	push   edi
c001fd5b:	56                   	push   esi
c001fd5c:	52                   	push   edx
c001fd5d:	50                   	push   eax
c001fd5e:	e8 f8 f9 ff ff       	call   c001f75b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fd63:	83 c4 1c             	add    esp,0x1c
c001fd66:	52                   	push   edx
c001fd67:	50                   	push   eax
c001fd68:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd6c:	2d e8 00 00 00       	sub    eax,0xe8
c001fd71:	eb b7                	jmp    c001fd2a <Vm::x87Handler(regs*)+0x432>
c001fd73:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd77:	8d 50 40             	lea    edx,[eax+0x40]
c001fd7a:	80 fa 07             	cmp    dl,0x7
c001fd7d:	77 3a                	ja     c001fdb9 <Vm::x87Handler(regs*)+0x4c1>
c001fd7f:	83 ec 0c             	sub    esp,0xc
c001fd82:	2d c0 00 00 00       	sub    eax,0xc0
c001fd87:	50                   	push   eax
c001fd88:	e8 2e fa ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fd8d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd94:	89 c6                	mov    esi,eax
c001fd96:	89 d7                	mov    edi,edx
c001fd98:	e8 1e fa ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fd9d:	57                   	push   edi
c001fd9e:	56                   	push   esi
c001fd9f:	52                   	push   edx
c001fda0:	50                   	push   eax
c001fda1:	e8 8b f9 ff ff       	call   c001f731 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fda6:	83 c4 1c             	add    esp,0x1c
c001fda9:	52                   	push   edx
c001fdaa:	50                   	push   eax
c001fdab:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdaf:	2d c0 00 00 00       	sub    eax,0xc0
c001fdb4:	e9 9e 01 00 00       	jmp    c001ff57 <Vm::x87Handler(regs*)+0x65f>
c001fdb9:	8d 50 20             	lea    edx,[eax+0x20]
c001fdbc:	80 fa 07             	cmp    dl,0x7
c001fdbf:	77 3a                	ja     c001fdfb <Vm::x87Handler(regs*)+0x503>
c001fdc1:	83 ec 0c             	sub    esp,0xc
c001fdc4:	2d e0 00 00 00       	sub    eax,0xe0
c001fdc9:	50                   	push   eax
c001fdca:	e8 ec f9 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fdcf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdd6:	89 c6                	mov    esi,eax
c001fdd8:	89 d7                	mov    edi,edx
c001fdda:	e8 dc f9 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fddf:	57                   	push   edi
c001fde0:	56                   	push   esi
c001fde1:	52                   	push   edx
c001fde2:	50                   	push   eax
c001fde3:	e8 73 f9 ff ff       	call   c001f75b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fde8:	83 c4 1c             	add    esp,0x1c
c001fdeb:	52                   	push   edx
c001fdec:	50                   	push   eax
c001fded:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdf1:	2d e0 00 00 00       	sub    eax,0xe0
c001fdf6:	e9 5c 01 00 00       	jmp    c001ff57 <Vm::x87Handler(regs*)+0x65f>
c001fdfb:	8d 50 18             	lea    edx,[eax+0x18]
c001fdfe:	80 fa 07             	cmp    dl,0x7
c001fe01:	77 3b                	ja     c001fe3e <Vm::x87Handler(regs*)+0x546>
c001fe03:	83 ec 0c             	sub    esp,0xc
c001fe06:	6a 00                	push   0x0
c001fe08:	e8 ae f9 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fe0d:	89 c6                	mov    esi,eax
c001fe0f:	89 d7                	mov    edi,edx
c001fe11:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe15:	2d e8 00 00 00       	sub    eax,0xe8
c001fe1a:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe1d:	e8 99 f9 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fe22:	57                   	push   edi
c001fe23:	56                   	push   esi
c001fe24:	52                   	push   edx
c001fe25:	50                   	push   eax
c001fe26:	e8 30 f9 ff ff       	call   c001f75b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe2b:	83 c4 1c             	add    esp,0x1c
c001fe2e:	52                   	push   edx
c001fe2f:	50                   	push   eax
c001fe30:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe34:	2d e8 00 00 00       	sub    eax,0xe8
c001fe39:	e9 19 01 00 00       	jmp    c001ff57 <Vm::x87Handler(regs*)+0x65f>
c001fe3e:	8d 50 38             	lea    edx,[eax+0x38]
c001fe41:	80 fa 07             	cmp    dl,0x7
c001fe44:	77 37                	ja     c001fe7d <Vm::x87Handler(regs*)+0x585>
c001fe46:	83 ec 0c             	sub    esp,0xc
c001fe49:	2d c8 00 00 00       	sub    eax,0xc8
c001fe4e:	50                   	push   eax
c001fe4f:	e8 67 f9 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fe54:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe5b:	89 c6                	mov    esi,eax
c001fe5d:	89 d7                	mov    edi,edx
c001fe5f:	e8 57 f9 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fe64:	57                   	push   edi
c001fe65:	56                   	push   esi
c001fe66:	52                   	push   edx
c001fe67:	50                   	push   eax
c001fe68:	e8 fd f8 ff ff       	call   c001f76a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe6d:	83 c4 1c             	add    esp,0x1c
c001fe70:	52                   	push   edx
c001fe71:	50                   	push   eax
c001fe72:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe76:	2d c8 00 00 00       	sub    eax,0xc8
c001fe7b:	eb 7d                	jmp    c001fefa <Vm::x87Handler(regs*)+0x602>
c001fe7d:	3c f7                	cmp    al,0xf7
c001fe7f:	76 38                	jbe    c001feb9 <Vm::x87Handler(regs*)+0x5c1>
c001fe81:	83 ec 0c             	sub    esp,0xc
c001fe84:	6a 00                	push   0x0
c001fe86:	e8 30 f9 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fe8b:	89 c6                	mov    esi,eax
c001fe8d:	89 d7                	mov    edi,edx
c001fe8f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe93:	2d f8 00 00 00       	sub    eax,0xf8
c001fe98:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe9b:	e8 1b f9 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fea0:	57                   	push   edi
c001fea1:	56                   	push   esi
c001fea2:	52                   	push   edx
c001fea3:	50                   	push   eax
c001fea4:	e8 e0 f8 ff ff       	call   c001f789 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fea9:	83 c4 1c             	add    esp,0x1c
c001feac:	52                   	push   edx
c001fead:	50                   	push   eax
c001feae:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feb2:	2d f8 00 00 00       	sub    eax,0xf8
c001feb7:	eb 41                	jmp    c001fefa <Vm::x87Handler(regs*)+0x602>
c001feb9:	8d 50 10             	lea    edx,[eax+0x10]
c001febc:	80 fa 07             	cmp    dl,0x7
c001febf:	0f 87 5a 01 00 00    	ja     c002001f <Vm::x87Handler(regs*)+0x727>
c001fec5:	83 ec 0c             	sub    esp,0xc
c001fec8:	2d f0 00 00 00       	sub    eax,0xf0
c001fecd:	50                   	push   eax
c001fece:	e8 e8 f8 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fed3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001feda:	89 c6                	mov    esi,eax
c001fedc:	89 d7                	mov    edi,edx
c001fede:	e8 d8 f8 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fee3:	57                   	push   edi
c001fee4:	56                   	push   esi
c001fee5:	52                   	push   edx
c001fee6:	50                   	push   eax
c001fee7:	e8 9d f8 ff ff       	call   c001f789 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001feec:	83 c4 1c             	add    esp,0x1c
c001feef:	52                   	push   edx
c001fef0:	50                   	push   eax
c001fef1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fef5:	2d f0 00 00 00       	sub    eax,0xf0
c001fefa:	50                   	push   eax
c001fefb:	e8 fe f8 ff ff       	call   c001f7fe <Vm::fpuSetReg(int, unsigned long long)>
c001ff00:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ff04:	e8 9d f9 ff ff       	call   c001f8a6 <Vm::fpuPop()>
c001ff09:	e9 5e fa ff ff       	jmp    c001f96c <Vm::x87Handler(regs*)+0x74>
c001ff0e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff12:	8d 50 30             	lea    edx,[eax+0x30]
c001ff15:	80 fa 07             	cmp    dl,0x7
c001ff18:	77 1d                	ja     c001ff37 <Vm::x87Handler(regs*)+0x63f>
c001ff1a:	83 ec 0c             	sub    esp,0xc
c001ff1d:	6a 00                	push   0x0
c001ff1f:	e8 97 f8 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001ff24:	83 c4 0c             	add    esp,0xc
c001ff27:	52                   	push   edx
c001ff28:	50                   	push   eax
c001ff29:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff2d:	2d d0 00 00 00       	sub    eax,0xd0
c001ff32:	e9 f3 fd ff ff       	jmp    c001fd2a <Vm::x87Handler(regs*)+0x432>
c001ff37:	8d 50 28             	lea    edx,[eax+0x28]
c001ff3a:	80 fa 07             	cmp    dl,0x7
c001ff3d:	77 28                	ja     c001ff67 <Vm::x87Handler(regs*)+0x66f>
c001ff3f:	83 ec 0c             	sub    esp,0xc
c001ff42:	6a 00                	push   0x0
c001ff44:	e8 72 f8 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001ff49:	83 c4 0c             	add    esp,0xc
c001ff4c:	52                   	push   edx
c001ff4d:	50                   	push   eax
c001ff4e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff52:	2d d8 00 00 00       	sub    eax,0xd8
c001ff57:	50                   	push   eax
c001ff58:	e8 a1 f8 ff ff       	call   c001f7fe <Vm::fpuSetReg(int, unsigned long long)>
c001ff5d:	e8 44 f9 ff ff       	call   c001f8a6 <Vm::fpuPop()>
c001ff62:	e9 01 fa ff ff       	jmp    c001f968 <Vm::x87Handler(regs*)+0x70>
c001ff67:	8d 50 20             	lea    edx,[eax+0x20]
c001ff6a:	80 fa 07             	cmp    dl,0x7
c001ff6d:	77 30                	ja     c001ff9f <Vm::x87Handler(regs*)+0x6a7>
c001ff6f:	83 ec 0c             	sub    esp,0xc
c001ff72:	2d e0 00 00 00       	sub    eax,0xe0
c001ff77:	50                   	push   eax
c001ff78:	e8 3e f8 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001ff7d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff84:	89 c6                	mov    esi,eax
c001ff86:	89 d7                	mov    edi,edx
c001ff88:	e8 2e f8 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001ff8d:	57                   	push   edi
c001ff8e:	56                   	push   esi
c001ff8f:	52                   	push   edx
c001ff90:	50                   	push   eax
c001ff91:	e8 48 f7 ff ff       	call   c001f6de <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ff96:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ff9a:	e9 54 02 00 00       	jmp    c00201f3 <Vm::x87Handler(regs*)+0x8fb>
c001ff9f:	8d 50 18             	lea    edx,[eax+0x18]
c001ffa2:	80 fa 07             	cmp    dl,0x7
c001ffa5:	0f 87 43 fb ff ff    	ja     c001faee <Vm::x87Handler(regs*)+0x1f6>
c001ffab:	83 ec 0c             	sub    esp,0xc
c001ffae:	2d e8 00 00 00       	sub    eax,0xe8
c001ffb3:	50                   	push   eax
c001ffb4:	e8 02 f8 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001ffb9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffc0:	89 c6                	mov    esi,eax
c001ffc2:	89 d7                	mov    edi,edx
c001ffc4:	e8 f2 f7 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001ffc9:	57                   	push   edi
c001ffca:	56                   	push   esi
c001ffcb:	52                   	push   edx
c001ffcc:	50                   	push   eax
c001ffcd:	e8 0c f7 ff ff       	call   c001f6de <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ffd2:	83 c4 20             	add    esp,0x20
c001ffd5:	e8 cc f8 ff ff       	call   c001f8a6 <Vm::fpuPop()>
c001ffda:	eb 62                	jmp    c002003e <Vm::x87Handler(regs*)+0x746>
c001ffdc:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001ffe0:	0f 85 0f 01 00 00    	jne    c00200f5 <Vm::x87Handler(regs*)+0x7fd>
c001ffe6:	83 ec 0c             	sub    esp,0xc
c001ffe9:	6a 01                	push   0x1
c001ffeb:	e8 cb f7 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c001fff0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fff7:	89 c6                	mov    esi,eax
c001fff9:	89 d7                	mov    edi,edx
c001fffb:	e8 bb f7 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c0020000:	57                   	push   edi
c0020001:	56                   	push   esi
c0020002:	52                   	push   edx
c0020003:	50                   	push   eax
c0020004:	e8 d5 f6 ff ff       	call   c001f6de <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020009:	83 c4 20             	add    esp,0x20
c002000c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020010:	e8 91 f8 ff ff       	call   c001f8a6 <Vm::fpuPop()>
c0020015:	e8 8c f8 ff ff       	call   c001f8a6 <Vm::fpuPop()>
c002001a:	e9 50 f9 ff ff       	jmp    c001f96f <Vm::x87Handler(regs*)+0x77>
c002001f:	3c d9                	cmp    al,0xd9
c0020021:	0f 85 b5 02 00 00    	jne    c00202dc <Vm::x87Handler(regs*)+0x9e4>
c0020027:	eb bd                	jmp    c001ffe6 <Vm::x87Handler(regs*)+0x6ee>
c0020029:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c002002d:	0f 85 ea 02 00 00    	jne    c002031d <Vm::x87Handler(regs*)+0xa25>
c0020033:	0f b7 05 00 18 03 c0 	movzx  eax,WORD PTR ds:0xc0031800
c002003a:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c002003e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020042:	e9 28 f9 ff ff       	jmp    c001f96f <Vm::x87Handler(regs*)+0x77>
c0020047:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002004b:	84 d2                	test   dl,dl
c002004d:	75 0f                	jne    c002005e <Vm::x87Handler(regs*)+0x766>
c002004f:	83 ec 0c             	sub    esp,0xc
c0020052:	ff 36                	push   DWORD PTR [esi]
c0020054:	e8 b1 f4 ff ff       	call   c001f50a <Vm::fpu32ToInternal(unsigned int)>
c0020059:	e9 2c 01 00 00       	jmp    c002018a <Vm::x87Handler(regs*)+0x892>
c002005e:	80 fa 01             	cmp    dl,0x1
c0020061:	75 0f                	jne    c0020072 <Vm::x87Handler(regs*)+0x77a>
c0020063:	83 ec 0c             	sub    esp,0xc
c0020066:	ff 36                	push   DWORD PTR [esi]
c0020068:	e8 9d f4 ff ff       	call   c001f50a <Vm::fpu32ToInternal(unsigned int)>
c002006d:	e9 81 02 00 00       	jmp    c00202f3 <Vm::x87Handler(regs*)+0x9fb>
c0020072:	80 fa 04             	cmp    dl,0x4
c0020075:	75 0f                	jne    c0020086 <Vm::x87Handler(regs*)+0x78e>
c0020077:	83 ec 0c             	sub    esp,0xc
c002007a:	ff 36                	push   DWORD PTR [esi]
c002007c:	e8 89 f4 ff ff       	call   c001f50a <Vm::fpu32ToInternal(unsigned int)>
c0020081:	e9 86 01 00 00       	jmp    c002020c <Vm::x87Handler(regs*)+0x914>
c0020086:	80 fa 05             	cmp    dl,0x5
c0020089:	75 1b                	jne    c00200a6 <Vm::x87Handler(regs*)+0x7ae>
c002008b:	83 ec 0c             	sub    esp,0xc
c002008e:	6a 00                	push   0x0
c0020090:	e8 26 f7 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c0020095:	89 c7                	mov    edi,eax
c0020097:	89 d5                	mov    ebp,edx
c0020099:	58                   	pop    eax
c002009a:	ff 36                	push   DWORD PTR [esi]
c002009c:	e8 69 f4 ff ff       	call   c001f50a <Vm::fpu32ToInternal(unsigned int)>
c00200a1:	e9 a3 01 00 00       	jmp    c0020249 <Vm::x87Handler(regs*)+0x951>
c00200a6:	80 fa 06             	cmp    dl,0x6
c00200a9:	75 0f                	jne    c00200ba <Vm::x87Handler(regs*)+0x7c2>
c00200ab:	83 ec 0c             	sub    esp,0xc
c00200ae:	ff 36                	push   DWORD PTR [esi]
c00200b0:	e8 55 f4 ff ff       	call   c001f50a <Vm::fpu32ToInternal(unsigned int)>
c00200b5:	e9 ae 01 00 00       	jmp    c0020268 <Vm::x87Handler(regs*)+0x970>
c00200ba:	31 c0                	xor    eax,eax
c00200bc:	80 fa 07             	cmp    dl,0x7
c00200bf:	0f 85 94 02 00 00    	jne    c0020359 <Vm::x87Handler(regs*)+0xa61>
c00200c5:	83 ec 0c             	sub    esp,0xc
c00200c8:	6a 00                	push   0x0
c00200ca:	e8 ec f6 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c00200cf:	89 c7                	mov    edi,eax
c00200d1:	89 d5                	mov    ebp,edx
c00200d3:	58                   	pop    eax
c00200d4:	ff 36                	push   DWORD PTR [esi]
c00200d6:	e8 2f f4 ff ff       	call   c001f50a <Vm::fpu32ToInternal(unsigned int)>
c00200db:	e9 cb 01 00 00       	jmp    c00202ab <Vm::x87Handler(regs*)+0x9b3>
c00200e0:	80 fa 03             	cmp    dl,0x3
c00200e3:	0f 85 d3 01 00 00    	jne    c00202bc <Vm::x87Handler(regs*)+0x9c4>
c00200e9:	e8 b8 f7 ff ff       	call   c001f8a6 <Vm::fpuPop()>
c00200ee:	51                   	push   ecx
c00200ef:	51                   	push   ecx
c00200f0:	e9 de 01 00 00       	jmp    c00202d3 <Vm::x87Handler(regs*)+0x9db>
c00200f5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00200f9:	80 fa 01             	cmp    dl,0x1
c00200fc:	75 09                	jne    c0020107 <Vm::x87Handler(regs*)+0x80f>
c00200fe:	57                   	push   edi
c00200ff:	57                   	push   edi
c0020100:	8b 06                	mov    eax,DWORD PTR [esi]
c0020102:	e9 e3 01 00 00       	jmp    c00202ea <Vm::x87Handler(regs*)+0x9f2>
c0020107:	80 fa 04             	cmp    dl,0x4
c002010a:	75 12                	jne    c002011e <Vm::x87Handler(regs*)+0x826>
c002010c:	31 d2                	xor    edx,edx
c002010e:	51                   	push   ecx
c002010f:	51                   	push   ecx
c0020110:	8b 06                	mov    eax,DWORD PTR [esi]
c0020112:	52                   	push   edx
c0020113:	50                   	push   eax
c0020114:	e8 d0 f4 ff ff       	call   c001f5e9 <Vm::fpuLongToFloat(long long)>
c0020119:	e9 ee 00 00 00       	jmp    c002020c <Vm::x87Handler(regs*)+0x914>
c002011e:	31 c0                	xor    eax,eax
c0020120:	80 fa 07             	cmp    dl,0x7
c0020123:	0f 85 30 02 00 00    	jne    c0020359 <Vm::x87Handler(regs*)+0xa61>
c0020129:	83 ec 0c             	sub    esp,0xc
c002012c:	6a 00                	push   0x0
c002012e:	e8 88 f6 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c0020133:	89 c7                	mov    edi,eax
c0020135:	89 d5                	mov    ebp,edx
c0020137:	58                   	pop    eax
c0020138:	8b 06                	mov    eax,DWORD PTR [esi]
c002013a:	5a                   	pop    edx
c002013b:	31 d2                	xor    edx,edx
c002013d:	52                   	push   edx
c002013e:	50                   	push   eax
c002013f:	e8 a5 f4 ff ff       	call   c001f5e9 <Vm::fpuLongToFloat(long long)>
c0020144:	e9 62 01 00 00       	jmp    c00202ab <Vm::x87Handler(regs*)+0x9b3>
c0020149:	84 d2                	test   dl,dl
c002014b:	75 0d                	jne    c002015a <Vm::x87Handler(regs*)+0x862>
c002014d:	31 d2                	xor    edx,edx
c002014f:	55                   	push   ebp
c0020150:	55                   	push   ebp
c0020151:	8b 06                	mov    eax,DWORD PTR [esi]
c0020153:	52                   	push   edx
c0020154:	50                   	push   eax
c0020155:	e9 d3 01 00 00       	jmp    c002032d <Vm::x87Handler(regs*)+0xa35>
c002015a:	31 c0                	xor    eax,eax
c002015c:	80 fa 02             	cmp    dl,0x2
c002015f:	0f 85 f4 01 00 00    	jne    c0020359 <Vm::x87Handler(regs*)+0xa61>
c0020165:	83 ec 0c             	sub    esp,0xc
c0020168:	6a 00                	push   0x0
c002016a:	e8 4c f6 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c002016f:	59                   	pop    ecx
c0020170:	5f                   	pop    edi
c0020171:	e9 6a f9 ff ff       	jmp    c001fae0 <Vm::x87Handler(regs*)+0x1e8>
c0020176:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002017a:	84 d2                	test   dl,dl
c002017c:	75 2a                	jne    c00201a8 <Vm::x87Handler(regs*)+0x8b0>
c002017e:	50                   	push   eax
c002017f:	50                   	push   eax
c0020180:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020183:	ff 36                	push   DWORD PTR [esi]
c0020185:	e8 c5 f3 ff ff       	call   c001f54f <Vm::fpu64ToInternal(unsigned long long)>
c002018a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020191:	89 c6                	mov    esi,eax
c0020193:	89 d7                	mov    edi,edx
c0020195:	e8 21 f6 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c002019a:	57                   	push   edi
c002019b:	56                   	push   esi
c002019c:	52                   	push   edx
c002019d:	50                   	push   eax
c002019e:	e8 8e f5 ff ff       	call   c001f731 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00201a3:	e9 64 01 00 00       	jmp    c002030c <Vm::x87Handler(regs*)+0xa14>
c00201a8:	80 fa 01             	cmp    dl,0x1
c00201ab:	75 11                	jne    c00201be <Vm::x87Handler(regs*)+0x8c6>
c00201ad:	50                   	push   eax
c00201ae:	50                   	push   eax
c00201af:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00201b2:	ff 36                	push   DWORD PTR [esi]
c00201b4:	e8 96 f3 ff ff       	call   c001f54f <Vm::fpu64ToInternal(unsigned long long)>
c00201b9:	e9 35 01 00 00       	jmp    c00202f3 <Vm::x87Handler(regs*)+0x9fb>
c00201be:	80 fa 02             	cmp    dl,0x2
c00201c1:	0f 85 54 f9 ff ff    	jne    c001fb1b <Vm::x87Handler(regs*)+0x223>
c00201c7:	55                   	push   ebp
c00201c8:	55                   	push   ebp
c00201c9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00201cc:	ff 36                	push   DWORD PTR [esi]
c00201ce:	e8 7c f3 ff ff       	call   c001f54f <Vm::fpu64ToInternal(unsigned long long)>
c00201d3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201da:	89 c6                	mov    esi,eax
c00201dc:	89 d7                	mov    edi,edx
c00201de:	e8 d8 f5 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c00201e3:	57                   	push   edi
c00201e4:	56                   	push   esi
c00201e5:	52                   	push   edx
c00201e6:	50                   	push   eax
c00201e7:	e8 f2 f4 ff ff       	call   c001f6de <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00201f0:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00201f3:	83 c4 20             	add    esp,0x20
c00201f6:	e9 74 f7 ff ff       	jmp    c001f96f <Vm::x87Handler(regs*)+0x77>
c00201fb:	80 fa 04             	cmp    dl,0x4
c00201fe:	75 2a                	jne    c002022a <Vm::x87Handler(regs*)+0x932>
c0020200:	51                   	push   ecx
c0020201:	51                   	push   ecx
c0020202:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020205:	ff 36                	push   DWORD PTR [esi]
c0020207:	e8 43 f3 ff ff       	call   c001f54f <Vm::fpu64ToInternal(unsigned long long)>
c002020c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020213:	89 c6                	mov    esi,eax
c0020215:	89 d7                	mov    edi,edx
c0020217:	e8 9f f5 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c002021c:	57                   	push   edi
c002021d:	56                   	push   esi
c002021e:	52                   	push   edx
c002021f:	50                   	push   eax
c0020220:	e8 36 f5 ff ff       	call   c001f75b <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020225:	e9 e2 00 00 00       	jmp    c002030c <Vm::x87Handler(regs*)+0xa14>
c002022a:	80 fa 05             	cmp    dl,0x5
c002022d:	75 28                	jne    c0020257 <Vm::x87Handler(regs*)+0x95f>
c002022f:	83 ec 0c             	sub    esp,0xc
c0020232:	6a 00                	push   0x0
c0020234:	e8 82 f5 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c0020239:	89 c7                	mov    edi,eax
c002023b:	89 d5                	mov    ebp,edx
c002023d:	58                   	pop    eax
c002023e:	5a                   	pop    edx
c002023f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020242:	ff 36                	push   DWORD PTR [esi]
c0020244:	e8 06 f3 ff ff       	call   c001f54f <Vm::fpu64ToInternal(unsigned long long)>
c0020249:	83 c4 10             	add    esp,0x10
c002024c:	55                   	push   ebp
c002024d:	57                   	push   edi
c002024e:	52                   	push   edx
c002024f:	50                   	push   eax
c0020250:	e8 06 f5 ff ff       	call   c001f75b <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020255:	eb 60                	jmp    c00202b7 <Vm::x87Handler(regs*)+0x9bf>
c0020257:	80 fa 06             	cmp    dl,0x6
c002025a:	75 2a                	jne    c0020286 <Vm::x87Handler(regs*)+0x98e>
c002025c:	51                   	push   ecx
c002025d:	51                   	push   ecx
c002025e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020261:	ff 36                	push   DWORD PTR [esi]
c0020263:	e8 e7 f2 ff ff       	call   c001f54f <Vm::fpu64ToInternal(unsigned long long)>
c0020268:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002026f:	89 c6                	mov    esi,eax
c0020271:	89 d7                	mov    edi,edx
c0020273:	e8 43 f5 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c0020278:	57                   	push   edi
c0020279:	56                   	push   esi
c002027a:	52                   	push   edx
c002027b:	50                   	push   eax
c002027c:	e8 08 f5 ff ff       	call   c001f789 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020281:	e9 86 00 00 00       	jmp    c002030c <Vm::x87Handler(regs*)+0xa14>
c0020286:	31 c0                	xor    eax,eax
c0020288:	80 fa 07             	cmp    dl,0x7
c002028b:	0f 85 c8 00 00 00    	jne    c0020359 <Vm::x87Handler(regs*)+0xa61>
c0020291:	83 ec 0c             	sub    esp,0xc
c0020294:	6a 00                	push   0x0
c0020296:	e8 20 f5 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c002029b:	89 c7                	mov    edi,eax
c002029d:	89 d5                	mov    ebp,edx
c002029f:	58                   	pop    eax
c00202a0:	5a                   	pop    edx
c00202a1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202a4:	ff 36                	push   DWORD PTR [esi]
c00202a6:	e8 a4 f2 ff ff       	call   c001f54f <Vm::fpu64ToInternal(unsigned long long)>
c00202ab:	83 c4 10             	add    esp,0x10
c00202ae:	55                   	push   ebp
c00202af:	57                   	push   edi
c00202b0:	52                   	push   edx
c00202b1:	50                   	push   eax
c00202b2:	e8 d2 f4 ff ff       	call   c001f789 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00202b7:	83 c4 0c             	add    esp,0xc
c00202ba:	eb 53                	jmp    c002030f <Vm::x87Handler(regs*)+0xa17>
c00202bc:	31 c0                	xor    eax,eax
c00202be:	80 fa 02             	cmp    dl,0x2
c00202c1:	0f 85 92 00 00 00    	jne    c0020359 <Vm::x87Handler(regs*)+0xa61>
c00202c7:	83 ec 0c             	sub    esp,0xc
c00202ca:	6a 00                	push   0x0
c00202cc:	e8 ea f4 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c00202d1:	59                   	pop    ecx
c00202d2:	5f                   	pop    edi
c00202d3:	52                   	push   edx
c00202d4:	50                   	push   eax
c00202d5:	e8 27 f2 ff ff       	call   c001f501 <Vm::fpuInternalTo64(unsigned long long)>
c00202da:	eb 70                	jmp    c002034c <Vm::x87Handler(regs*)+0xa54>
c00202dc:	31 c0                	xor    eax,eax
c00202de:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c00202e3:	75 74                	jne    c0020359 <Vm::x87Handler(regs*)+0xa61>
c00202e5:	50                   	push   eax
c00202e6:	50                   	push   eax
c00202e7:	0f b7 06             	movzx  eax,WORD PTR [esi]
c00202ea:	31 d2                	xor    edx,edx
c00202ec:	52                   	push   edx
c00202ed:	50                   	push   eax
c00202ee:	e8 f6 f2 ff ff       	call   c001f5e9 <Vm::fpuLongToFloat(long long)>
c00202f3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202fa:	89 c6                	mov    esi,eax
c00202fc:	89 d7                	mov    edi,edx
c00202fe:	e8 b8 f4 ff ff       	call   c001f7bb <Vm::fpuGetReg(int)>
c0020303:	57                   	push   edi
c0020304:	56                   	push   esi
c0020305:	52                   	push   edx
c0020306:	50                   	push   eax
c0020307:	e8 5e f4 ff ff       	call   c001f76a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002030c:	83 c4 1c             	add    esp,0x1c
c002030f:	52                   	push   edx
c0020310:	50                   	push   eax
c0020311:	6a 00                	push   0x0
c0020313:	e8 e6 f4 ff ff       	call   c001f7fe <Vm::fpuSetReg(int, unsigned long long)>
c0020318:	e9 f2 f7 ff ff       	jmp    c001fb0f <Vm::x87Handler(regs*)+0x217>
c002031d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020321:	80 fa 05             	cmp    dl,0x5
c0020324:	75 11                	jne    c0020337 <Vm::x87Handler(regs*)+0xa3f>
c0020326:	55                   	push   ebp
c0020327:	55                   	push   ebp
c0020328:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002032b:	ff 36                	push   DWORD PTR [esi]
c002032d:	e8 81 f2 ff ff       	call   c001f5b3 <Vm::fpuULongToFloat(unsigned long long)>
c0020332:	e9 cf f7 ff ff       	jmp    c001fb06 <Vm::x87Handler(regs*)+0x20e>
c0020337:	31 c0                	xor    eax,eax
c0020339:	80 fa 07             	cmp    dl,0x7
c002033c:	75 1b                	jne    c0020359 <Vm::x87Handler(regs*)+0xa61>
c002033e:	e8 63 f5 ff ff       	call   c001f8a6 <Vm::fpuPop()>
c0020343:	51                   	push   ecx
c0020344:	51                   	push   ecx
c0020345:	52                   	push   edx
c0020346:	50                   	push   eax
c0020347:	e8 0c f2 ff ff       	call   c001f558 <Vm::fpuFloatToLong(unsigned long long)>
c002034c:	83 c4 10             	add    esp,0x10
c002034f:	89 06                	mov    DWORD PTR [esi],eax
c0020351:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020354:	e9 f8 f7 ff ff       	jmp    c001fb51 <Vm::x87Handler(regs*)+0x259>
c0020359:	83 c4 1c             	add    esp,0x1c
c002035c:	5b                   	pop    ebx
c002035d:	5e                   	pop    esi
c002035e:	5f                   	pop    edi
c002035f:	5d                   	pop    ebp
c0020360:	c3                   	ret    

c0020361 <__static_initialization_and_destruction_0(int, int)>:
c0020361:	83 ec 0c             	sub    esp,0xc
c0020364:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020369:	75 1a                	jne    c0020385 <__static_initialization_and_destruction_0(int, int)+0x24>
c002036b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020373:	75 10                	jne    c0020385 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020375:	83 ec 0c             	sub    esp,0xc
c0020378:	68 00 18 03 c0       	push   0xc0031800
c002037d:	e8 0e 88 00 00       	call   c0028b90 <Vm::_FPUState::_FPUState()>
c0020382:	83 c4 10             	add    esp,0x10
c0020385:	90                   	nop
c0020386:	83 c4 0c             	add    esp,0xc
c0020389:	c3                   	ret    

c002038a <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c002038a:	83 ec 0c             	sub    esp,0xc
c002038d:	83 ec 08             	sub    esp,0x8
c0020390:	68 ff ff 00 00       	push   0xffff
c0020395:	6a 01                	push   0x1
c0020397:	e8 c5 ff ff ff       	call   c0020361 <__static_initialization_and_destruction_0(int, int)>
c002039c:	83 c4 10             	add    esp,0x10
c002039f:	83 c4 0c             	add    esp,0xc
c00203a2:	c3                   	ret    
c00203a3:	90                   	nop

c00203a4 <FAT::getName()>:
c00203a4:	b8 10 c6 02 c0       	mov    eax,0xc002c610
c00203a9:	c3                   	ret    

c00203aa <FAT::tell(void*, unsigned long long*)>:
c00203aa:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00203af:	75 06                	jne    c00203b7 <FAT::tell(void*, unsigned long long*)+0xd>
c00203b1:	b8 04 00 00 00       	mov    eax,0x4
c00203b6:	c3                   	ret    
c00203b7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00203bc:	75 06                	jne    c00203c4 <FAT::tell(void*, unsigned long long*)+0x1a>
c00203be:	b8 04 00 00 00       	mov    eax,0x4
c00203c3:	c3                   	ret    
c00203c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00203c8:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00203cb:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00203ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00203d2:	89 01                	mov    DWORD PTR [ecx],eax
c00203d4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00203d7:	b8 00 00 00 00       	mov    eax,0x0
c00203dc:	c3                   	ret    
c00203dd:	90                   	nop

c00203de <FAT::stat(void*, unsigned long long*)>:
c00203de:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00203e3:	75 06                	jne    c00203eb <FAT::stat(void*, unsigned long long*)+0xd>
c00203e5:	b8 04 00 00 00       	mov    eax,0x4
c00203ea:	c3                   	ret    
c00203eb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00203f0:	75 06                	jne    c00203f8 <FAT::stat(void*, unsigned long long*)+0x1a>
c00203f2:	b8 04 00 00 00       	mov    eax,0x4
c00203f7:	c3                   	ret    
c00203f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00203fc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00203ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020402:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020406:	89 01                	mov    DWORD PTR [ecx],eax
c0020408:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002040b:	b8 00 00 00 00       	mov    eax,0x0
c0020410:	c3                   	ret    
c0020411:	90                   	nop

c0020412 <FAT::~FAT()>:
c0020412:	83 ec 0c             	sub    esp,0xc
c0020415:	ba 94 c6 02 c0       	mov    edx,0xc002c694
c002041a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002041e:	89 10                	mov    DWORD PTR [eax],edx
c0020420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020424:	83 ec 0c             	sub    esp,0xc
c0020427:	50                   	push   eax
c0020428:	e8 8f 2c ff ff       	call   c00130bc <Filesystem::~Filesystem()>
c002042d:	83 c4 10             	add    esp,0x10
c0020430:	90                   	nop
c0020431:	83 c4 0c             	add    esp,0xc
c0020434:	c3                   	ret    
c0020435:	90                   	nop

c0020436 <FAT::~FAT()>:
c0020436:	83 ec 0c             	sub    esp,0xc
c0020439:	83 ec 0c             	sub    esp,0xc
c002043c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020440:	e8 cd ff ff ff       	call   c0020412 <FAT::~FAT()>
c0020445:	83 c4 10             	add    esp,0x10
c0020448:	83 ec 08             	sub    esp,0x8
c002044b:	6a 08                	push   0x8
c002044d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020451:	e8 5e 28 ff ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0020456:	83 c4 10             	add    esp,0x10
c0020459:	83 c4 0c             	add    esp,0xc
c002045c:	c3                   	ret    
c002045d:	90                   	nop

c002045e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c002045e:	83 ec 1c             	sub    esp,0x1c
c0020461:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020468:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002046d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020471:	8b 04 85 80 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce780]
c0020478:	83 f8 ff             	cmp    eax,0xffffffff
c002047b:	75 34                	jne    c00204b1 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c002047d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020481:	88 c2                	mov    dl,al
c0020483:	a1 60 18 03 c0       	mov    eax,ds:0xc0031860
c0020488:	01 d0                	add    eax,edx
c002048a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002048e:	8b 15 60 18 03 c0    	mov    edx,DWORD PTR ds:0xc0031860
c0020494:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020498:	89 14 85 80 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce780],edx
c002049f:	a1 60 18 03 c0       	mov    eax,ds:0xc0031860
c00204a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00204a8:	89 14 85 00 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce700],edx
c00204af:	eb 17                	jmp    c00204c8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00204b1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00204b5:	88 c2                	mov    dl,al
c00204b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204bb:	8b 04 85 80 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce780]
c00204c2:	01 d0                	add    eax,edx
c00204c4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00204c8:	83 ec 04             	sub    esp,0x4
c00204cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00204cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00204d3:	8d 44 24 15          	lea    eax,[esp+0x15]
c00204d7:	50                   	push   eax
c00204d8:	e8 5b 68 fe ff       	call   c0006d38 <f_getlabel>
c00204dd:	83 c4 10             	add    esp,0x10
c00204e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00204e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00204e9:	75 07                	jne    c00204f2 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00204eb:	b8 00 00 00 00       	mov    eax,0x0
c00204f0:	eb 05                	jmp    c00204f7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00204f2:	b8 01 00 00 00       	mov    eax,0x1
c00204f7:	83 c4 1c             	add    esp,0x1c
c00204fa:	c3                   	ret    
c00204fb:	90                   	nop

c00204fc <FAT::setlabel(LogicalDisk*, int, char*)>:
c00204fc:	57                   	push   edi
c00204fd:	83 ec 58             	sub    esp,0x58
c0020500:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020508:	8d 54 24 10          	lea    edx,[esp+0x10]
c002050c:	b9 0f 00 00 00       	mov    ecx,0xf
c0020511:	b8 00 00 00 00       	mov    eax,0x0
c0020516:	fc                   	cld    
c0020517:	89 d7                	mov    edi,edx
c0020519:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002051b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002051f:	8b 04 85 80 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce780]
c0020526:	83 f8 ff             	cmp    eax,0xffffffff
c0020529:	75 34                	jne    c002055f <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002052b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002052f:	88 c2                	mov    dl,al
c0020531:	a1 60 18 03 c0       	mov    eax,ds:0xc0031860
c0020536:	01 d0                	add    eax,edx
c0020538:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002053c:	8b 15 60 18 03 c0    	mov    edx,DWORD PTR ds:0xc0031860
c0020542:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020546:	89 14 85 80 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce780],edx
c002054d:	a1 60 18 03 c0       	mov    eax,ds:0xc0031860
c0020552:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020556:	89 14 85 00 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce700],edx
c002055d:	eb 17                	jmp    c0020576 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c002055f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020563:	88 c2                	mov    dl,al
c0020565:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020569:	8b 04 85 80 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce780]
c0020570:	01 d0                	add    eax,edx
c0020572:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020576:	83 ec 08             	sub    esp,0x8
c0020579:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002057d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020581:	50                   	push   eax
c0020582:	e8 ed 03 fe ff       	call   c0000974 <strcat>
c0020587:	83 c4 10             	add    esp,0x10
c002058a:	83 ec 0c             	sub    esp,0xc
c002058d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020591:	50                   	push   eax
c0020592:	e8 8f 69 fe ff       	call   c0006f26 <f_setlabel>
c0020597:	83 c4 10             	add    esp,0x10
c002059a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002059e:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00205a3:	75 07                	jne    c00205ac <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00205a5:	b8 00 00 00 00       	mov    eax,0x0
c00205aa:	eb 05                	jmp    c00205b1 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00205ac:	b8 01 00 00 00       	mov    eax,0x1
c00205b1:	83 c4 58             	add    esp,0x58
c00205b4:	5f                   	pop    edi
c00205b5:	c3                   	ret    

c00205b6 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00205b6:	83 ec 2c             	sub    esp,0x2c
c00205b9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00205c1:	83 ec 08             	sub    esp,0x8
c00205c4:	68 34 c6 02 c0       	push   0xc002c634
c00205c9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00205cd:	e8 ee 02 fe ff       	call   c00008c0 <strcmp>
c00205d2:	83 c4 10             	add    esp,0x10
c00205d5:	85 c0                	test   eax,eax
c00205d7:	0f 94 c0             	sete   al
c00205da:	84 c0                	test   al,al
c00205dc:	74 0d                	je     c00205eb <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c00205de:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00205e6:	e9 a6 00 00 00       	jmp    c0020691 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00205eb:	83 ec 08             	sub    esp,0x8
c00205ee:	68 26 c6 02 c0       	push   0xc002c626
c00205f3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00205f7:	e8 c4 02 fe ff       	call   c00008c0 <strcmp>
c00205fc:	83 c4 10             	add    esp,0x10
c00205ff:	85 c0                	test   eax,eax
c0020601:	0f 94 c0             	sete   al
c0020604:	84 c0                	test   al,al
c0020606:	74 0a                	je     c0020612 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020608:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020610:	eb 7f                	jmp    c0020691 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020612:	83 ec 08             	sub    esp,0x8
c0020615:	68 2c c6 02 c0       	push   0xc002c62c
c002061a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002061e:	e8 9d 02 fe ff       	call   c00008c0 <strcmp>
c0020623:	83 c4 10             	add    esp,0x10
c0020626:	85 c0                	test   eax,eax
c0020628:	0f 94 c0             	sete   al
c002062b:	84 c0                	test   al,al
c002062d:	74 0a                	je     c0020639 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c002062f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020637:	eb 58                	jmp    c0020691 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020639:	83 ec 08             	sub    esp,0x8
c002063c:	68 ec 92 02 c0       	push   0xc00292ec
c0020641:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020645:	e8 76 02 fe ff       	call   c00008c0 <strcmp>
c002064a:	83 c4 10             	add    esp,0x10
c002064d:	85 c0                	test   eax,eax
c002064f:	0f 94 c0             	sete   al
c0020652:	84 c0                	test   al,al
c0020654:	74 0a                	je     c0020660 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020656:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c002065e:	eb 31                	jmp    c0020691 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020660:	83 ec 08             	sub    esp,0x8
c0020663:	68 32 c6 02 c0       	push   0xc002c632
c0020668:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002066c:	e8 4f 02 fe ff       	call   c00008c0 <strcmp>
c0020671:	83 c4 10             	add    esp,0x10
c0020674:	85 c0                	test   eax,eax
c0020676:	0f 94 c0             	sete   al
c0020679:	84 c0                	test   al,al
c002067b:	74 0a                	je     c0020687 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002067d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020685:	eb 0a                	jmp    c0020691 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020687:	b8 08 00 00 00       	mov    eax,0x8
c002068c:	e9 04 01 00 00       	jmp    c0020795 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020691:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020698:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002069d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206a1:	8b 04 85 80 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce780]
c00206a8:	83 f8 ff             	cmp    eax,0xffffffff
c00206ab:	75 34                	jne    c00206e1 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00206ad:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00206b1:	88 c2                	mov    dl,al
c00206b3:	a1 60 18 03 c0       	mov    eax,ds:0xc0031860
c00206b8:	01 d0                	add    eax,edx
c00206ba:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00206be:	8b 15 60 18 03 c0    	mov    edx,DWORD PTR ds:0xc0031860
c00206c4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206c8:	89 14 85 80 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce780],edx
c00206cf:	a1 60 18 03 c0       	mov    eax,ds:0xc0031860
c00206d4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00206d8:	89 14 85 00 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce700],edx
c00206df:	eb 17                	jmp    c00206f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00206e1:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00206e5:	88 c2                	mov    dl,al
c00206e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206eb:	8b 04 85 80 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce780]
c00206f2:	01 d0                	add    eax,edx
c00206f4:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00206f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00206fc:	88 04 24             	mov    BYTE PTR [esp],al
c00206ff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020703:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020707:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002070f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020714:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002071c:	83 ec 0c             	sub    esp,0xc
c002071f:	68 00 20 00 00       	push   0x2000
c0020724:	e8 17 f1 fe ff       	call   c000f840 <malloc>
c0020729:	83 c4 10             	add    esp,0x10
c002072c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020730:	68 00 20 00 00       	push   0x2000
c0020735:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020739:	8d 44 24 08          	lea    eax,[esp+0x8]
c002073d:	50                   	push   eax
c002073e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020742:	50                   	push   eax
c0020743:	e8 29 6c fe ff       	call   c0007371 <f_mkfs>
c0020748:	83 c4 10             	add    esp,0x10
c002074b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002074f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020754:	75 07                	jne    c002075d <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020756:	b8 00 00 00 00       	mov    eax,0x0
c002075b:	eb 38                	jmp    c0020795 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002075d:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020762:	75 17                	jne    c002077b <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020764:	83 ec 0c             	sub    esp,0xc
c0020767:	68 64 c6 02 c0       	push   0xc002c664
c002076c:	e8 23 26 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0020771:	83 c4 10             	add    esp,0x10
c0020774:	b8 09 00 00 00       	mov    eax,0x9
c0020779:	eb 1a                	jmp    c0020795 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002077b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002077f:	83 ec 08             	sub    esp,0x8
c0020782:	50                   	push   eax
c0020783:	68 38 c6 02 c0       	push   0xc002c638
c0020788:	e8 07 26 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c002078d:	83 c4 10             	add    esp,0x10
c0020790:	b8 01 00 00 00       	mov    eax,0x1
c0020795:	83 c4 2c             	add    esp,0x2c
c0020798:	c3                   	ret    
c0020799:	90                   	nop

c002079a <FAT::tryMount(LogicalDisk*, int)>:
c002079a:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00207a0:	a1 60 18 03 c0       	mov    eax,ds:0xc0031860
c00207a5:	83 f8 14             	cmp    eax,0x14
c00207a8:	75 17                	jne    c00207c1 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00207aa:	83 ec 0c             	sub    esp,0xc
c00207ad:	68 4a c6 02 c0       	push   0xc002c64a
c00207b2:	e8 86 9c ff ff       	call   c001a43d <Krnl::panic(char const*)>
c00207b7:	83 c4 10             	add    esp,0x10
c00207ba:	b0 00                	mov    al,0x0
c00207bc:	e9 d7 01 00 00       	jmp    c0020998 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00207c1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00207c8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00207ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00207d4:	3d 00 02 00 00       	cmp    eax,0x200
c00207d9:	74 07                	je     c00207e2 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00207db:	b0 00                	mov    al,0x0
c00207dd:	e9 b6 01 00 00       	jmp    c0020998 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00207e2:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00207ea:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00207f1:	8b 04 85 80 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce780]
c00207f8:	83 f8 ff             	cmp    eax,0xffffffff
c00207fb:	74 07                	je     c0020804 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00207fd:	b0 01                	mov    al,0x1
c00207ff:	e9 94 01 00 00       	jmp    c0020998 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020804:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c002080e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020816:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002081d:	88 c2                	mov    dl,al
c002081f:	a1 60 18 03 c0       	mov    eax,ds:0xc0031860
c0020824:	01 d0                	add    eax,edx
c0020826:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c002082d:	8b 15 60 18 03 c0    	mov    edx,DWORD PTR ds:0xc0031860
c0020833:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002083a:	89 14 85 80 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce780],edx
c0020841:	a1 60 18 03 c0       	mov    eax,ds:0xc0031860
c0020846:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c002084d:	89 14 85 00 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce700],edx
c0020854:	83 ec 0c             	sub    esp,0xc
c0020857:	68 54 02 00 00       	push   0x254
c002085c:	e8 df ef fe ff       	call   c000f840 <malloc>
c0020861:	83 c4 10             	add    esp,0x10
c0020864:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c002086b:	83 ec 04             	sub    esp,0x4
c002086e:	6a 00                	push   0x0
c0020870:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020877:	50                   	push   eax
c0020878:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002087f:	e8 ab 46 fe ff       	call   c0004f2f <f_mount>
c0020884:	83 c4 10             	add    esp,0x10
c0020887:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002088e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020896:	74 19                	je     c00208b1 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020898:	83 ec 0c             	sub    esp,0xc
c002089b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00208a2:	e8 b9 ef fe ff       	call   c000f860 <rfree>
c00208a7:	83 c4 10             	add    esp,0x10
c00208aa:	b0 00                	mov    al,0x0
c00208ac:	e9 e7 00 00 00       	jmp    c0020998 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00208b1:	83 ec 04             	sub    esp,0x4
c00208b4:	68 00 01 00 00       	push   0x100
c00208b9:	6a 00                	push   0x0
c00208bb:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00208c2:	50                   	push   eax
c00208c3:	e8 b0 fe fd ff       	call   c0000778 <memset>
c00208c8:	83 c4 10             	add    esp,0x10
c00208cb:	83 ec 08             	sub    esp,0x8
c00208ce:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00208d5:	50                   	push   eax
c00208d6:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00208dd:	50                   	push   eax
c00208de:	e8 91 00 fe ff       	call   c0000974 <strcat>
c00208e3:	83 c4 10             	add    esp,0x10
c00208e6:	83 ec 08             	sub    esp,0x8
c00208e9:	68 58 c6 02 c0       	push   0xc002c658
c00208ee:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00208f5:	50                   	push   eax
c00208f6:	e8 79 00 fe ff       	call   c0000974 <strcat>
c00208fb:	83 c4 10             	add    esp,0x10
c00208fe:	83 ec 04             	sub    esp,0x4
c0020901:	6a 01                	push   0x1
c0020903:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c002090a:	50                   	push   eax
c002090b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002090f:	50                   	push   eax
c0020910:	e8 7c 46 fe ff       	call   c0004f91 <f_open>
c0020915:	83 c4 10             	add    esp,0x10
c0020918:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002091f:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020926:	85 c0                	test   eax,eax
c0020928:	74 0a                	je     c0020934 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c002092a:	78 2d                	js     c0020959 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002092c:	83 e8 04             	sub    eax,0x4
c002092f:	83 f8 01             	cmp    eax,0x1
c0020932:	77 25                	ja     c0020959 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020934:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c002093c:	83 ec 0c             	sub    esp,0xc
c002093f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020943:	50                   	push   eax
c0020944:	e8 9a 51 fe ff       	call   c0005ae3 <f_close>
c0020949:	83 c4 10             	add    esp,0x10
c002094c:	90                   	nop
c002094d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020955:	74 3a                	je     c0020991 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020957:	eb 2d                	jmp    c0020986 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020959:	83 ec 0c             	sub    esp,0xc
c002095c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020963:	e8 f8 ee fe ff       	call   c000f860 <rfree>
c0020968:	83 c4 10             	add    esp,0x10
c002096b:	83 ec 04             	sub    esp,0x4
c002096e:	6a 00                	push   0x0
c0020970:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020977:	50                   	push   eax
c0020978:	6a 00                	push   0x0
c002097a:	e8 b0 45 fe ff       	call   c0004f2f <f_mount>
c002097f:	83 c4 10             	add    esp,0x10
c0020982:	b0 00                	mov    al,0x0
c0020984:	eb 12                	jmp    c0020998 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020986:	a1 60 18 03 c0       	mov    eax,ds:0xc0031860
c002098b:	40                   	inc    eax
c002098c:	a3 60 18 03 c0       	mov    ds:0xc0031860,eax
c0020991:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020998:	81 c4 6c 03 00 00    	add    esp,0x36c
c002099e:	c3                   	ret    
c002099f:	90                   	nop

c00209a0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00209a0:	81 ec 3c 02 00 00    	sub    esp,0x23c
c00209a6:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c00209ae:	74 0a                	je     c00209ba <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c00209b0:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c00209b8:	75 0a                	jne    c00209c4 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c00209ba:	b8 04 00 00 00       	mov    eax,0x4
c00209bf:	e9 db 00 00 00       	jmp    c0020a9f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00209c4:	83 ec 08             	sub    esp,0x8
c00209c7:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00209ce:	50                   	push   eax
c00209cf:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c00209d6:	e8 12 57 fe ff       	call   c00060ed <f_readdir>
c00209db:	83 c4 10             	add    esp,0x10
c00209de:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c00209e5:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00209eb:	83 ec 0c             	sub    esp,0xc
c00209ee:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00209f5:	83 c0 1a             	add    eax,0x1a
c00209f8:	50                   	push   eax
c00209f9:	e8 96 fd fd ff       	call   c0000794 <strlen>
c00209fe:	83 c4 10             	add    esp,0x10
c0020a01:	ba 00 00 00 00       	mov    edx,0x0
c0020a06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020a0a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020a0e:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020a15:	0f b6 c0             	movzx  eax,al
c0020a18:	83 e0 10             	and    eax,0x10
c0020a1b:	74 07                	je     c0020a24 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020a1d:	b8 02 00 00 00       	mov    eax,0x2
c0020a22:	eb 05                	jmp    c0020a29 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020a24:	b8 01 00 00 00       	mov    eax,0x1
c0020a29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a2d:	83 ec 08             	sub    esp,0x8
c0020a30:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020a37:	83 c0 1a             	add    eax,0x1a
c0020a3a:	50                   	push   eax
c0020a3b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a3f:	83 c0 10             	add    eax,0x10
c0020a42:	50                   	push   eax
c0020a43:	e8 ec fd fd ff       	call   c0000834 <strcpy>
c0020a48:	83 c4 10             	add    esp,0x10
c0020a4b:	83 ec 04             	sub    esp,0x4
c0020a4e:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020a55:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020a59:	50                   	push   eax
c0020a5a:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020a61:	e8 de fc fd ff       	call   c0000744 <memcpy>
c0020a66:	83 c4 10             	add    esp,0x10
c0020a69:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020a70:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020a76:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020a7d:	84 c0                	test   al,al
c0020a7f:	75 07                	jne    c0020a88 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020a81:	b8 07 00 00 00       	mov    eax,0x7
c0020a86:	eb 17                	jmp    c0020a9f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020a88:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020a8f:	85 c0                	test   eax,eax
c0020a91:	75 07                	jne    c0020a9a <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020a93:	b8 00 00 00 00       	mov    eax,0x0
c0020a98:	eb 05                	jmp    c0020a9f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020a9a:	b8 01 00 00 00       	mov    eax,0x1
c0020a9f:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020aa5:	c3                   	ret    

c0020aa6 <FAT::read(void*, unsigned long, void*, int*)>:
c0020aa6:	83 ec 1c             	sub    esp,0x1c
c0020aa9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020aae:	74 07                	je     c0020ab7 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020ab0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020ab5:	75 07                	jne    c0020abe <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020ab7:	b8 04 00 00 00       	mov    eax,0x4
c0020abc:	eb 3d                	jmp    c0020afb <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020abe:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ac2:	50                   	push   eax
c0020ac3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020ac7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020acb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020acf:	e8 f9 48 fe ff       	call   c00053cd <f_read>
c0020ad4:	83 c4 10             	add    esp,0x10
c0020ad7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020adb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020adf:	89 c2                	mov    edx,eax
c0020ae1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020ae5:	89 10                	mov    DWORD PTR [eax],edx
c0020ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020aeb:	85 c0                	test   eax,eax
c0020aed:	75 07                	jne    c0020af6 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020aef:	b8 00 00 00 00       	mov    eax,0x0
c0020af4:	eb 05                	jmp    c0020afb <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020af6:	b8 01 00 00 00       	mov    eax,0x1
c0020afb:	83 c4 1c             	add    esp,0x1c
c0020afe:	c3                   	ret    
c0020aff:	90                   	nop

c0020b00 <FAT::write(void*, unsigned long, void*, int*)>:
c0020b00:	83 ec 1c             	sub    esp,0x1c
c0020b03:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020b08:	74 07                	je     c0020b11 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020b0a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020b0f:	75 07                	jne    c0020b18 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020b11:	b8 04 00 00 00       	mov    eax,0x4
c0020b16:	eb 3d                	jmp    c0020b55 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020b18:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b1c:	50                   	push   eax
c0020b1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020b21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020b25:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b29:	e8 1f 4b fe ff       	call   c000564d <f_write>
c0020b2e:	83 c4 10             	add    esp,0x10
c0020b31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b39:	89 c2                	mov    edx,eax
c0020b3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020b3f:	89 10                	mov    DWORD PTR [eax],edx
c0020b41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b45:	85 c0                	test   eax,eax
c0020b47:	75 07                	jne    c0020b50 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020b49:	b8 00 00 00 00       	mov    eax,0x0
c0020b4e:	eb 05                	jmp    c0020b55 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020b50:	b8 01 00 00 00       	mov    eax,0x1
c0020b55:	83 c4 1c             	add    esp,0x1c
c0020b58:	c3                   	ret    
c0020b59:	90                   	nop

c0020b5a <FAT::close(void*)>:
c0020b5a:	83 ec 1c             	sub    esp,0x1c
c0020b5d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020b62:	75 07                	jne    c0020b6b <FAT::close(void*)+0x11>
c0020b64:	b8 04 00 00 00       	mov    eax,0x4
c0020b69:	eb 36                	jmp    c0020ba1 <FAT::close(void*)+0x47>
c0020b6b:	83 ec 0c             	sub    esp,0xc
c0020b6e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b72:	e8 6c 4f fe ff       	call   c0005ae3 <f_close>
c0020b77:	83 c4 10             	add    esp,0x10
c0020b7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b7e:	83 ec 0c             	sub    esp,0xc
c0020b81:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b85:	e8 c6 ec fe ff       	call   c000f850 <free>
c0020b8a:	83 c4 10             	add    esp,0x10
c0020b8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b91:	85 c0                	test   eax,eax
c0020b93:	75 07                	jne    c0020b9c <FAT::close(void*)+0x42>
c0020b95:	b8 00 00 00 00       	mov    eax,0x0
c0020b9a:	eb 05                	jmp    c0020ba1 <FAT::close(void*)+0x47>
c0020b9c:	b8 01 00 00 00       	mov    eax,0x1
c0020ba1:	83 c4 1c             	add    esp,0x1c
c0020ba4:	c3                   	ret    
c0020ba5:	90                   	nop

c0020ba6 <FAT::closeDir(void*)>:
c0020ba6:	83 ec 1c             	sub    esp,0x1c
c0020ba9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020bae:	75 07                	jne    c0020bb7 <FAT::closeDir(void*)+0x11>
c0020bb0:	b8 04 00 00 00       	mov    eax,0x4
c0020bb5:	eb 36                	jmp    c0020bed <FAT::closeDir(void*)+0x47>
c0020bb7:	83 ec 0c             	sub    esp,0xc
c0020bba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020bbe:	e8 08 55 fe ff       	call   c00060cb <f_closedir>
c0020bc3:	83 c4 10             	add    esp,0x10
c0020bc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020bca:	83 ec 0c             	sub    esp,0xc
c0020bcd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020bd1:	e8 7a ec fe ff       	call   c000f850 <free>
c0020bd6:	83 c4 10             	add    esp,0x10
c0020bd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020bdd:	85 c0                	test   eax,eax
c0020bdf:	75 07                	jne    c0020be8 <FAT::closeDir(void*)+0x42>
c0020be1:	b8 00 00 00 00       	mov    eax,0x0
c0020be6:	eb 05                	jmp    c0020bed <FAT::closeDir(void*)+0x47>
c0020be8:	b8 01 00 00 00       	mov    eax,0x1
c0020bed:	83 c4 1c             	add    esp,0x1c
c0020bf0:	c3                   	ret    
c0020bf1:	90                   	nop

c0020bf2 <FAT::seek(void*, unsigned long long)>:
c0020bf2:	83 ec 2c             	sub    esp,0x2c
c0020bf5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020bf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020bfd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020c01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c05:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020c0a:	75 07                	jne    c0020c13 <FAT::seek(void*, unsigned long long)+0x21>
c0020c0c:	b8 04 00 00 00       	mov    eax,0x4
c0020c11:	eb 2f                	jmp    c0020c42 <FAT::seek(void*, unsigned long long)+0x50>
c0020c13:	83 ec 04             	sub    esp,0x4
c0020c16:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020c1a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020c1e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020c22:	e8 eb 4e fe ff       	call   c0005b12 <f_lseek>
c0020c27:	83 c4 10             	add    esp,0x10
c0020c2a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020c2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020c32:	85 c0                	test   eax,eax
c0020c34:	75 07                	jne    c0020c3d <FAT::seek(void*, unsigned long long)+0x4b>
c0020c36:	b8 00 00 00 00       	mov    eax,0x0
c0020c3b:	eb 05                	jmp    c0020c42 <FAT::seek(void*, unsigned long long)+0x50>
c0020c3d:	b8 01 00 00 00       	mov    eax,0x1
c0020c42:	83 c4 2c             	add    esp,0x2c
c0020c45:	c3                   	ret    

c0020c46 <fatWrapperReadDisk>:
c0020c46:	83 ec 1c             	sub    esp,0x1c
c0020c49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020c4d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020c51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c55:	89 04 24             	mov    DWORD PTR [esp],eax
c0020c58:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020c5c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020c60:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020c65:	8b 04 85 40 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17c0]
c0020c6c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020c70:	83 ec 0c             	sub    esp,0xc
c0020c73:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c77:	52                   	push   edx
c0020c78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020c7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020c80:	50                   	push   eax
c0020c81:	e8 22 59 ff ff       	call   c00165a8 <LogicalDisk::read(unsigned long long, int, void*)>
c0020c86:	83 c4 20             	add    esp,0x20
c0020c89:	83 c4 1c             	add    esp,0x1c
c0020c8c:	c3                   	ret    

c0020c8d <fatWrapperWriteDisk>:
c0020c8d:	83 ec 1c             	sub    esp,0x1c
c0020c90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020c94:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020c98:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0020c9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020ca3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020ca7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020cac:	8b 04 85 40 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17c0]
c0020cb3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020cb7:	83 ec 0c             	sub    esp,0xc
c0020cba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cbe:	52                   	push   edx
c0020cbf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020cc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020cc7:	50                   	push   eax
c0020cc8:	e8 47 59 ff ff       	call   c0016614 <LogicalDisk::write(unsigned long long, int, void*)>
c0020ccd:	83 c4 20             	add    esp,0x20
c0020cd0:	83 c4 1c             	add    esp,0x1c
c0020cd3:	c3                   	ret    

c0020cd4 <fatWrapperIoctl>:
c0020cd4:	53                   	push   ebx
c0020cd5:	83 ec 28             	sub    esp,0x28
c0020cd8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020cdc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020ce0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020ce4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020ce8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020ced:	75 31                	jne    c0020d20 <fatWrapperIoctl+0x4c>
c0020cef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020cf3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020cf7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020cfc:	8b 04 85 40 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17c0]
c0020d03:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020d09:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020d0f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020d13:	66 89 02             	mov    WORD PTR [edx],ax
c0020d16:	b8 00 00 00 00       	mov    eax,0x0
c0020d1b:	e9 b2 00 00 00       	jmp    c0020dd2 <fatWrapperIoctl+0xfe>
c0020d20:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020d25:	75 6a                	jne    c0020d91 <fatWrapperIoctl+0xbd>
c0020d27:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d2b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020d2f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d34:	8b 04 85 40 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17c0]
c0020d3b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020d41:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020d47:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020d4d:	89 c8                	mov    eax,ecx
c0020d4f:	89 da                	mov    edx,ebx
c0020d51:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020d55:	c1 e0 0a             	shl    eax,0xa
c0020d58:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020d5d:	8b 0c 8d 40 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17c0]
c0020d64:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020d6a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020d70:	89 cb                	mov    ebx,ecx
c0020d72:	c1 fb 1f             	sar    ebx,0x1f
c0020d75:	53                   	push   ebx
c0020d76:	51                   	push   ecx
c0020d77:	52                   	push   edx
c0020d78:	50                   	push   eax
c0020d79:	e8 be 5a 00 00       	call   c002683c <__udivdi3>
c0020d7e:	83 c4 10             	add    esp,0x10
c0020d81:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020d85:	89 01                	mov    DWORD PTR [ecx],eax
c0020d87:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020d8a:	b8 00 00 00 00       	mov    eax,0x0
c0020d8f:	eb 41                	jmp    c0020dd2 <fatWrapperIoctl+0xfe>
c0020d91:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020d96:	75 07                	jne    c0020d9f <fatWrapperIoctl+0xcb>
c0020d98:	b8 00 00 00 00       	mov    eax,0x0
c0020d9d:	eb 33                	jmp    c0020dd2 <fatWrapperIoctl+0xfe>
c0020d9f:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020da4:	75 19                	jne    c0020dbf <fatWrapperIoctl+0xeb>
c0020da6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020daa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020dae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020db2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020db8:	b8 00 00 00 00       	mov    eax,0x0
c0020dbd:	eb 13                	jmp    c0020dd2 <fatWrapperIoctl+0xfe>
c0020dbf:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020dc4:	75 07                	jne    c0020dcd <fatWrapperIoctl+0xf9>
c0020dc6:	b8 00 00 00 00       	mov    eax,0x0
c0020dcb:	eb 05                	jmp    c0020dd2 <fatWrapperIoctl+0xfe>
c0020dcd:	b8 04 00 00 00       	mov    eax,0x4
c0020dd2:	83 c4 28             	add    esp,0x28
c0020dd5:	5b                   	pop    ebx
c0020dd6:	c3                   	ret    
c0020dd7:	90                   	nop

c0020dd8 <FAT::FAT()>:
c0020dd8:	83 ec 1c             	sub    esp,0x1c
c0020ddb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ddf:	83 ec 0c             	sub    esp,0xc
c0020de2:	50                   	push   eax
c0020de3:	e8 b0 22 ff ff       	call   c0013098 <Filesystem::Filesystem()>
c0020de8:	83 c4 10             	add    esp,0x10
c0020deb:	ba 94 c6 02 c0       	mov    edx,0xc002c694
c0020df0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020df4:	89 10                	mov    DWORD PTR [eax],edx
c0020df6:	c7 05 60 18 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031860,0x0
c0020e00:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020e08:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020e0d:	7f 15                	jg     c0020e24 <FAT::FAT()+0x4c>
c0020e0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e13:	c7 04 85 80 18 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce780],0xffffffff
c0020e1e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020e22:	eb e4                	jmp    c0020e08 <FAT::FAT()+0x30>
c0020e24:	90                   	nop
c0020e25:	83 c4 1c             	add    esp,0x1c
c0020e28:	c3                   	ret    
c0020e29:	90                   	nop

c0020e2a <FAT::fixFilepath(char*)>:
c0020e2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e2e:	8a 00                	mov    al,BYTE PTR [eax]
c0020e30:	3c 40                	cmp    al,0x40
c0020e32:	7e 2c                	jle    c0020e60 <FAT::fixFilepath(char*)+0x36>
c0020e34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e38:	8a 00                	mov    al,BYTE PTR [eax]
c0020e3a:	83 e8 41             	sub    eax,0x41
c0020e3d:	88 c2                	mov    dl,al
c0020e3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e43:	88 10                	mov    BYTE PTR [eax],dl
c0020e45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e49:	8a 00                	mov    al,BYTE PTR [eax]
c0020e4b:	0f be c0             	movsx  eax,al
c0020e4e:	8b 04 85 80 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce780]
c0020e55:	83 c0 30             	add    eax,0x30
c0020e58:	88 c2                	mov    dl,al
c0020e5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e5e:	88 10                	mov    BYTE PTR [eax],dl
c0020e60:	90                   	nop
c0020e61:	c3                   	ret    

c0020e62 <FAT::open(char const*, void**, FileOpenMode)>:
c0020e62:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020e68:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020e70:	74 0a                	je     c0020e7c <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020e72:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020e7a:	75 0a                	jne    c0020e86 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020e7c:	b8 04 00 00 00       	mov    eax,0x4
c0020e81:	e9 fd 00 00 00       	jmp    c0020f83 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020e86:	83 ec 08             	sub    esp,0x8
c0020e89:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020e90:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020e94:	50                   	push   eax
c0020e95:	e8 9a f9 fd ff       	call   c0000834 <strcpy>
c0020e9a:	83 c4 10             	add    esp,0x10
c0020e9d:	83 ec 08             	sub    esp,0x8
c0020ea0:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020ea4:	50                   	push   eax
c0020ea5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020eac:	e8 79 ff ff ff       	call   c0020e2a <FAT::fixFilepath(char*)>
c0020eb1:	83 c4 10             	add    esp,0x10
c0020eb4:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020ebc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ec3:	83 e0 01             	and    eax,0x1
c0020ec6:	74 08                	je     c0020ed0 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020ec8:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020ed0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ed7:	83 e0 04             	and    eax,0x4
c0020eda:	74 10                	je     c0020eec <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020edc:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020ee4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020eec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ef3:	83 e0 02             	and    eax,0x2
c0020ef6:	74 08                	je     c0020f00 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020ef8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020f00:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f07:	83 e0 08             	and    eax,0x8
c0020f0a:	74 08                	je     c0020f14 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020f0c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020f14:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f1b:	83 e0 10             	and    eax,0x10
c0020f1e:	74 08                	je     c0020f28 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020f20:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020f28:	83 ec 0c             	sub    esp,0xc
c0020f2b:	68 50 02 00 00       	push   0x250
c0020f30:	e8 0b e9 fe ff       	call   c000f840 <malloc>
c0020f35:	83 c4 10             	add    esp,0x10
c0020f38:	89 c2                	mov    edx,eax
c0020f3a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020f41:	89 10                	mov    DWORD PTR [eax],edx
c0020f43:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020f4b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020f52:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f54:	83 ec 04             	sub    esp,0x4
c0020f57:	52                   	push   edx
c0020f58:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020f5c:	52                   	push   edx
c0020f5d:	50                   	push   eax
c0020f5e:	e8 2e 40 fe ff       	call   c0004f91 <f_open>
c0020f63:	83 c4 10             	add    esp,0x10
c0020f66:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020f6d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020f75:	74 07                	je     c0020f7e <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020f77:	b8 01 00 00 00       	mov    eax,0x1
c0020f7c:	eb 05                	jmp    c0020f83 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020f7e:	b8 00 00 00 00       	mov    eax,0x0
c0020f83:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020f89:	c3                   	ret    

c0020f8a <FAT::openDir(char const*, void**)>:
c0020f8a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020f90:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020f98:	74 0a                	je     c0020fa4 <FAT::openDir(char const*, void**)+0x1a>
c0020f9a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020fa2:	75 07                	jne    c0020fab <FAT::openDir(char const*, void**)+0x21>
c0020fa4:	b8 04 00 00 00       	mov    eax,0x4
c0020fa9:	eb 7d                	jmp    c0021028 <FAT::openDir(char const*, void**)+0x9e>
c0020fab:	83 ec 08             	sub    esp,0x8
c0020fae:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fb5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020fb9:	50                   	push   eax
c0020fba:	e8 75 f8 fd ff       	call   c0000834 <strcpy>
c0020fbf:	83 c4 10             	add    esp,0x10
c0020fc2:	83 ec 08             	sub    esp,0x8
c0020fc5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020fc9:	50                   	push   eax
c0020fca:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fd1:	e8 54 fe ff ff       	call   c0020e2a <FAT::fixFilepath(char*)>
c0020fd6:	83 c4 10             	add    esp,0x10
c0020fd9:	83 ec 0c             	sub    esp,0xc
c0020fdc:	6a 4c                	push   0x4c
c0020fde:	e8 5d e8 fe ff       	call   c000f840 <malloc>
c0020fe3:	83 c4 10             	add    esp,0x10
c0020fe6:	89 c2                	mov    edx,eax
c0020fe8:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020fef:	89 10                	mov    DWORD PTR [eax],edx
c0020ff1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020ff8:	8b 00                	mov    eax,DWORD PTR [eax]
c0020ffa:	83 ec 08             	sub    esp,0x8
c0020ffd:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021001:	52                   	push   edx
c0021002:	50                   	push   eax
c0021003:	e8 c1 4f fe ff       	call   c0005fc9 <f_opendir>
c0021008:	83 c4 10             	add    esp,0x10
c002100b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021012:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002101a:	74 07                	je     c0021023 <FAT::openDir(char const*, void**)+0x99>
c002101c:	b8 01 00 00 00       	mov    eax,0x1
c0021021:	eb 05                	jmp    c0021028 <FAT::openDir(char const*, void**)+0x9e>
c0021023:	b8 00 00 00 00       	mov    eax,0x0
c0021028:	81 c4 1c 01 00 00    	add    esp,0x11c
c002102e:	c3                   	ret    
c002102f:	90                   	nop

c0021030 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021030:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021036:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002103e:	75 0a                	jne    c002104a <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021040:	b8 04 00 00 00       	mov    eax,0x4
c0021045:	e9 c9 00 00 00       	jmp    c0021113 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002104a:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021052:	75 0a                	jne    c002105e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021054:	b8 04 00 00 00       	mov    eax,0x4
c0021059:	e9 b5 00 00 00       	jmp    c0021113 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002105e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021066:	75 0a                	jne    c0021072 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021068:	b8 04 00 00 00       	mov    eax,0x4
c002106d:	e9 a1 00 00 00       	jmp    c0021113 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021072:	83 ec 08             	sub    esp,0x8
c0021075:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002107c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021083:	50                   	push   eax
c0021084:	e8 ab f7 fd ff       	call   c0000834 <strcpy>
c0021089:	83 c4 10             	add    esp,0x10
c002108c:	83 ec 08             	sub    esp,0x8
c002108f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021096:	50                   	push   eax
c0021097:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002109e:	e8 87 fd ff ff       	call   c0020e2a <FAT::fixFilepath(char*)>
c00210a3:	83 c4 10             	add    esp,0x10
c00210a6:	83 ec 08             	sub    esp,0x8
c00210a9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00210ad:	50                   	push   eax
c00210ae:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00210b5:	50                   	push   eax
c00210b6:	e8 cd 50 fe ff       	call   c0006188 <f_stat>
c00210bb:	83 c4 10             	add    esp,0x10
c00210be:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00210c5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00210cc:	85 c0                	test   eax,eax
c00210ce:	74 07                	je     c00210d7 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00210d0:	83 f8 04             	cmp    eax,0x4
c00210d3:	74 32                	je     c0021107 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00210d5:	eb 37                	jmp    c002110e <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00210d7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00210db:	0f b6 c0             	movzx  eax,al
c00210de:	83 e0 10             	and    eax,0x10
c00210e1:	0f 95 c2             	setne  dl
c00210e4:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00210eb:	88 10                	mov    BYTE PTR [eax],dl
c00210ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00210f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00210f4:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00210fb:	89 01                	mov    DWORD PTR [ecx],eax
c00210fd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021100:	b8 00 00 00 00       	mov    eax,0x0
c0021105:	eb 0c                	jmp    c0021113 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021107:	b8 02 00 00 00       	mov    eax,0x2
c002110c:	eb 05                	jmp    c0021113 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002110e:	b8 01 00 00 00       	mov    eax,0x1
c0021113:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021119:	c3                   	ret    

c002111a <FAT::unlink(char const*)>:
c002111a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021120:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021128:	75 07                	jne    c0021131 <FAT::unlink(char const*)+0x17>
c002112a:	b8 04 00 00 00       	mov    eax,0x4
c002112f:	eb 5c                	jmp    c002118d <FAT::unlink(char const*)+0x73>
c0021131:	83 ec 08             	sub    esp,0x8
c0021134:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002113b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002113f:	50                   	push   eax
c0021140:	e8 ef f6 fd ff       	call   c0000834 <strcpy>
c0021145:	83 c4 10             	add    esp,0x10
c0021148:	83 ec 08             	sub    esp,0x8
c002114b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002114f:	50                   	push   eax
c0021150:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021157:	e8 ce fc ff ff       	call   c0020e2a <FAT::fixFilepath(char*)>
c002115c:	83 c4 10             	add    esp,0x10
c002115f:	83 ec 0c             	sub    esp,0xc
c0021162:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021166:	50                   	push   eax
c0021167:	e8 6e 53 fe ff       	call   c00064da <f_unlink>
c002116c:	83 c4 10             	add    esp,0x10
c002116f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021176:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002117d:	85 c0                	test   eax,eax
c002117f:	75 07                	jne    c0021188 <FAT::unlink(char const*)+0x6e>
c0021181:	b8 00 00 00 00       	mov    eax,0x0
c0021186:	eb 05                	jmp    c002118d <FAT::unlink(char const*)+0x73>
c0021188:	b8 01 00 00 00       	mov    eax,0x1
c002118d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021193:	c3                   	ret    

c0021194 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021194:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002119a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00211a1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00211a8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00211ac:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00211b0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00211b8:	75 0a                	jne    c00211c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00211ba:	b8 04 00 00 00       	mov    eax,0x4
c00211bf:	e9 1c 01 00 00       	jmp    c00212e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00211c4:	83 ec 08             	sub    esp,0x8
c00211c7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00211ce:	8d 44 24 24          	lea    eax,[esp+0x24]
c00211d2:	50                   	push   eax
c00211d3:	e8 5c f6 fd ff       	call   c0000834 <strcpy>
c00211d8:	83 c4 10             	add    esp,0x10
c00211db:	83 ec 08             	sub    esp,0x8
c00211de:	8d 44 24 20          	lea    eax,[esp+0x20]
c00211e2:	50                   	push   eax
c00211e3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00211ea:	e8 3b fc ff ff       	call   c0020e2a <FAT::fixFilepath(char*)>
c00211ef:	83 c4 10             	add    esp,0x10
c00211f2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00211fa:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021202:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021207:	83 e0 01             	and    eax,0x1
c002120a:	74 08                	je     c0021214 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002120c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021214:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021219:	83 e0 02             	and    eax,0x2
c002121c:	74 08                	je     c0021226 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c002121e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021226:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002122b:	83 e0 04             	and    eax,0x4
c002122e:	74 08                	je     c0021238 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021230:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021238:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002123d:	83 e0 08             	and    eax,0x8
c0021240:	74 08                	je     c002124a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021242:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002124a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002124f:	83 e0 01             	and    eax,0x1
c0021252:	74 08                	je     c002125c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021254:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002125c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021261:	83 e0 02             	and    eax,0x2
c0021264:	74 08                	je     c002126e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021266:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002126e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021273:	83 e0 04             	and    eax,0x4
c0021276:	74 08                	je     c0021280 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021278:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021280:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021285:	83 e0 08             	and    eax,0x8
c0021288:	74 08                	je     c0021292 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c002128a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021292:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021299:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00212a0:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00212a8:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00212b0:	83 ec 04             	sub    esp,0x4
c00212b3:	52                   	push   edx
c00212b4:	50                   	push   eax
c00212b5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00212b9:	50                   	push   eax
c00212ba:	e8 bd 58 fe ff       	call   c0006b7c <f_chmod>
c00212bf:	83 c4 10             	add    esp,0x10
c00212c2:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00212c9:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00212d0:	85 c0                	test   eax,eax
c00212d2:	75 07                	jne    c00212db <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00212d4:	b8 00 00 00 00       	mov    eax,0x0
c00212d9:	eb 05                	jmp    c00212e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00212db:	b8 01 00 00 00       	mov    eax,0x1
c00212e0:	81 c4 2c 01 00 00    	add    esp,0x12c
c00212e6:	c3                   	ret    
c00212e7:	90                   	nop

c00212e8 <FAT::rename(char const*, char const*)>:
c00212e8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00212ee:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00212f6:	74 0a                	je     c0021302 <FAT::rename(char const*, char const*)+0x1a>
c00212f8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021300:	75 0a                	jne    c002130c <FAT::rename(char const*, char const*)+0x24>
c0021302:	b8 04 00 00 00       	mov    eax,0x4
c0021307:	e9 98 00 00 00       	jmp    c00213a4 <FAT::rename(char const*, char const*)+0xbc>
c002130c:	83 ec 08             	sub    esp,0x8
c002130f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021316:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002131d:	50                   	push   eax
c002131e:	e8 11 f5 fd ff       	call   c0000834 <strcpy>
c0021323:	83 c4 10             	add    esp,0x10
c0021326:	83 ec 08             	sub    esp,0x8
c0021329:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021330:	50                   	push   eax
c0021331:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021338:	e8 ed fa ff ff       	call   c0020e2a <FAT::fixFilepath(char*)>
c002133d:	83 c4 10             	add    esp,0x10
c0021340:	83 ec 08             	sub    esp,0x8
c0021343:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002134a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002134e:	50                   	push   eax
c002134f:	e8 e0 f4 fd ff       	call   c0000834 <strcpy>
c0021354:	83 c4 10             	add    esp,0x10
c0021357:	83 ec 08             	sub    esp,0x8
c002135a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002135e:	50                   	push   eax
c002135f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021366:	e8 bf fa ff ff       	call   c0020e2a <FAT::fixFilepath(char*)>
c002136b:	83 c4 10             	add    esp,0x10
c002136e:	83 ec 08             	sub    esp,0x8
c0021371:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021375:	50                   	push   eax
c0021376:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002137d:	50                   	push   eax
c002137e:	e8 06 55 fe ff       	call   c0006889 <f_rename>
c0021383:	83 c4 10             	add    esp,0x10
c0021386:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002138d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021394:	85 c0                	test   eax,eax
c0021396:	75 07                	jne    c002139f <FAT::rename(char const*, char const*)+0xb7>
c0021398:	b8 00 00 00 00       	mov    eax,0x0
c002139d:	eb 05                	jmp    c00213a4 <FAT::rename(char const*, char const*)+0xbc>
c002139f:	b8 01 00 00 00       	mov    eax,0x1
c00213a4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00213aa:	c3                   	ret    
c00213ab:	90                   	nop

c00213ac <FAT::mkdir(char const*)>:
c00213ac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00213b2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00213ba:	75 07                	jne    c00213c3 <FAT::mkdir(char const*)+0x17>
c00213bc:	b8 04 00 00 00       	mov    eax,0x4
c00213c1:	eb 5c                	jmp    c002141f <FAT::mkdir(char const*)+0x73>
c00213c3:	83 ec 08             	sub    esp,0x8
c00213c6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00213cd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00213d1:	50                   	push   eax
c00213d2:	e8 5d f4 fd ff       	call   c0000834 <strcpy>
c00213d7:	83 c4 10             	add    esp,0x10
c00213da:	83 ec 08             	sub    esp,0x8
c00213dd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00213e1:	50                   	push   eax
c00213e2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00213e9:	e8 3c fa ff ff       	call   c0020e2a <FAT::fixFilepath(char*)>
c00213ee:	83 c4 10             	add    esp,0x10
c00213f1:	83 ec 0c             	sub    esp,0xc
c00213f4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00213f8:	50                   	push   eax
c00213f9:	e8 5f 52 fe ff       	call   c000665d <f_mkdir>
c00213fe:	83 c4 10             	add    esp,0x10
c0021401:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021408:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002140f:	85 c0                	test   eax,eax
c0021411:	75 07                	jne    c002141a <FAT::mkdir(char const*)+0x6e>
c0021413:	b8 00 00 00 00       	mov    eax,0x0
c0021418:	eb 05                	jmp    c002141f <FAT::mkdir(char const*)+0x73>
c002141a:	b8 01 00 00 00       	mov    eax,0x1
c002141f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021425:	c3                   	ret    

c0021426 <FAT::exists(char const*)>:
c0021426:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002142c:	83 ec 08             	sub    esp,0x8
c002142f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021436:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002143a:	50                   	push   eax
c002143b:	e8 f4 f3 fd ff       	call   c0000834 <strcpy>
c0021440:	83 c4 10             	add    esp,0x10
c0021443:	83 ec 08             	sub    esp,0x8
c0021446:	8d 44 24 08          	lea    eax,[esp+0x8]
c002144a:	50                   	push   eax
c002144b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021452:	e8 d3 f9 ff ff       	call   c0020e2a <FAT::fixFilepath(char*)>
c0021457:	83 c4 10             	add    esp,0x10
c002145a:	83 ec 08             	sub    esp,0x8
c002145d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021464:	50                   	push   eax
c0021465:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021469:	50                   	push   eax
c002146a:	e8 19 4d fe ff       	call   c0006188 <f_stat>
c002146f:	83 c4 10             	add    esp,0x10
c0021472:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021479:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021480:	85 c0                	test   eax,eax
c0021482:	75 04                	jne    c0021488 <FAT::exists(char const*)+0x62>
c0021484:	b0 01                	mov    al,0x1
c0021486:	eb 02                	jmp    c002148a <FAT::exists(char const*)+0x64>
c0021488:	b0 00                	mov    al,0x0
c002148a:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021490:	c3                   	ret    
c0021491:	90                   	nop

c0021492 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021492:	b8 08 00 00 00       	mov    eax,0x8
c0021497:	c3                   	ret    

c0021498 <ISO9660::seek(void*, unsigned long long)>:
c0021498:	53                   	push   ebx
c0021499:	b8 04 00 00 00       	mov    eax,0x4
c002149e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00214a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00214a6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00214aa:	85 d2                	test   edx,edx
c00214ac:	74 17                	je     c00214c5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00214ae:	89 c8                	mov    eax,ecx
c00214b0:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00214b3:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00214b6:	b8 01 00 00 00       	mov    eax,0x1
c00214bb:	73 08                	jae    c00214c5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00214bd:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00214c0:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00214c3:	31 c0                	xor    eax,eax
c00214c5:	5b                   	pop    ebx
c00214c6:	c3                   	ret    
c00214c7:	90                   	nop

c00214c8 <ISO9660::tell(void*, unsigned long long*)>:
c00214c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00214cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00214d0:	85 d2                	test   edx,edx
c00214d2:	74 12                	je     c00214e6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00214d4:	85 c0                	test   eax,eax
c00214d6:	74 0e                	je     c00214e6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00214d8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00214db:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00214de:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00214e1:	89 10                	mov    DWORD PTR [eax],edx
c00214e3:	31 c0                	xor    eax,eax
c00214e5:	c3                   	ret    
c00214e6:	b8 04 00 00 00       	mov    eax,0x4
c00214eb:	c3                   	ret    

c00214ec <ISO9660::getName()>:
c00214ec:	b8 f0 c6 02 c0       	mov    eax,0xc002c6f0
c00214f1:	c3                   	ret    

c00214f2 <ISO9660::stat(void*, unsigned long long*)>:
c00214f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00214f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00214fa:	85 d2                	test   edx,edx
c00214fc:	74 12                	je     c0021510 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00214fe:	85 c0                	test   eax,eax
c0021500:	74 0e                	je     c0021510 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021502:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021505:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021508:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002150b:	89 10                	mov    DWORD PTR [eax],edx
c002150d:	31 c0                	xor    eax,eax
c002150f:	c3                   	ret    
c0021510:	b8 04 00 00 00       	mov    eax,0x4
c0021515:	c3                   	ret    

c0021516 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021516:	b8 01 00 00 00       	mov    eax,0x1
c002151b:	c3                   	ret    

c002151c <ISO9660::unlink(char const*)>:
c002151c:	b8 01 00 00 00       	mov    eax,0x1
c0021521:	c3                   	ret    

c0021522 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021522:	b8 01 00 00 00       	mov    eax,0x1
c0021527:	c3                   	ret    

c0021528 <ISO9660::rename(char const*, char const*)>:
c0021528:	b8 01 00 00 00       	mov    eax,0x1
c002152d:	c3                   	ret    

c002152e <ISO9660::mkdir(char const*)>:
c002152e:	b8 01 00 00 00       	mov    eax,0x1
c0021533:	c3                   	ret    

c0021534 <ISO9660::close(void*)>:
c0021534:	83 ec 0c             	sub    esp,0xc
c0021537:	b8 04 00 00 00       	mov    eax,0x4
c002153c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021540:	85 d2                	test   edx,edx
c0021542:	74 0e                	je     c0021552 <ISO9660::close(void*)+0x1e>
c0021544:	83 ec 0c             	sub    esp,0xc
c0021547:	52                   	push   edx
c0021548:	e8 03 e3 fe ff       	call   c000f850 <free>
c002154d:	83 c4 10             	add    esp,0x10
c0021550:	31 c0                	xor    eax,eax
c0021552:	83 c4 0c             	add    esp,0xc
c0021555:	c3                   	ret    

c0021556 <ISO9660::closeDir(void*)>:
c0021556:	83 ec 0c             	sub    esp,0xc
c0021559:	b8 04 00 00 00       	mov    eax,0x4
c002155e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021562:	85 d2                	test   edx,edx
c0021564:	74 0e                	je     c0021574 <ISO9660::closeDir(void*)+0x1e>
c0021566:	83 ec 0c             	sub    esp,0xc
c0021569:	52                   	push   edx
c002156a:	e8 e1 e2 fe ff       	call   c000f850 <free>
c002156f:	83 c4 10             	add    esp,0x10
c0021572:	31 c0                	xor    eax,eax
c0021574:	83 c4 0c             	add    esp,0xc
c0021577:	c3                   	ret    

c0021578 <ISO9660::~ISO9660()>:
c0021578:	83 ec 0c             	sub    esp,0xc
c002157b:	ba 54 c7 02 c0       	mov    edx,0xc002c754
c0021580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021584:	89 10                	mov    DWORD PTR [eax],edx
c0021586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002158a:	83 ec 0c             	sub    esp,0xc
c002158d:	50                   	push   eax
c002158e:	e8 29 1b ff ff       	call   c00130bc <Filesystem::~Filesystem()>
c0021593:	83 c4 10             	add    esp,0x10
c0021596:	90                   	nop
c0021597:	83 c4 0c             	add    esp,0xc
c002159a:	c3                   	ret    
c002159b:	90                   	nop

c002159c <ISO9660::~ISO9660()>:
c002159c:	83 ec 0c             	sub    esp,0xc
c002159f:	83 ec 0c             	sub    esp,0xc
c00215a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215a6:	e8 cd ff ff ff       	call   c0021578 <ISO9660::~ISO9660()>
c00215ab:	83 c4 10             	add    esp,0x10
c00215ae:	83 ec 08             	sub    esp,0x8
c00215b1:	6a 08                	push   0x8
c00215b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215b7:	e8 f8 16 ff ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c00215bc:	83 c4 10             	add    esp,0x10
c00215bf:	83 c4 0c             	add    esp,0xc
c00215c2:	c3                   	ret    

c00215c3 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00215c3:	55                   	push   ebp
c00215c4:	31 c9                	xor    ecx,ecx
c00215c6:	57                   	push   edi
c00215c7:	56                   	push   esi
c00215c8:	53                   	push   ebx
c00215c9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00215cd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00215d1:	89 eb                	mov    ebx,ebp
c00215d3:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00215d7:	39 ce                	cmp    esi,ecx
c00215d9:	7e 17                	jle    c00215f2 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00215db:	31 d2                	xor    edx,edx
c00215dd:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00215e1:	7d 13                	jge    c00215f6 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00215e3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00215e7:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00215ea:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00215ed:	75 0d                	jne    c00215fc <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00215ef:	42                   	inc    edx
c00215f0:	eb eb                	jmp    c00215dd <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00215f2:	31 c0                	xor    eax,eax
c00215f4:	eb 0a                	jmp    c0021600 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00215f6:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00215fa:	eb 04                	jmp    c0021600 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00215fc:	41                   	inc    ecx
c00215fd:	43                   	inc    ebx
c00215fe:	eb d7                	jmp    c00215d7 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021600:	5b                   	pop    ebx
c0021601:	5e                   	pop    esi
c0021602:	5f                   	pop    edi
c0021603:	5d                   	pop    ebp
c0021604:	c3                   	ret    

c0021605 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021605:	56                   	push   esi
c0021606:	53                   	push   ebx
c0021607:	52                   	push   edx
c0021608:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002160c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021610:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021614:	39 0d 60 19 03 c0    	cmp    DWORD PTR ds:0xc0031960,ecx
c002161a:	75 08                	jne    c0021624 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c002161c:	38 05 b4 d7 02 c0    	cmp    BYTE PTR ds:0xc002d7b4,al
c0021622:	74 2b                	je     c002164f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021624:	83 ec 0c             	sub    esp,0xc
c0021627:	a2 b4 d7 02 c0       	mov    ds:0xc002d7b4,al
c002162c:	68 80 19 03 c0       	push   0xc0031980
c0021631:	0f be c0             	movsx  eax,al
c0021634:	6a 01                	push   0x1
c0021636:	89 0d 60 19 03 c0    	mov    DWORD PTR ds:0xc0031960,ecx
c002163c:	31 db                	xor    ebx,ebx
c002163e:	53                   	push   ebx
c002163f:	51                   	push   ecx
c0021640:	ff 34 85 3c e7 02 c0 	push   DWORD PTR [eax*4-0x3ffd18c4]
c0021647:	e8 5c 4f ff ff       	call   c00165a8 <LogicalDisk::read(unsigned long long, int, void*)>
c002164c:	83 c4 20             	add    esp,0x20
c002164f:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021657:	c7 44 24 14 80 19 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031980
c002165f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021663:	58                   	pop    eax
c0021664:	5b                   	pop    ebx
c0021665:	5e                   	pop    esi
c0021666:	e9 d9 f0 fd ff       	jmp    c0000744 <memcpy>
c002166b:	90                   	nop

c002166c <ISO9660::tryMount(LogicalDisk*, int)>:
c002166c:	81 ec 10 08 00 00    	sub    esp,0x810
c0021672:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021679:	83 c0 41             	add    eax,0x41
c002167c:	0f be c0             	movsx  eax,al
c002167f:	50                   	push   eax
c0021680:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021684:	50                   	push   eax
c0021685:	6a 10                	push   0x10
c0021687:	e8 79 ff ff ff       	call   c0021605 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002168c:	83 c4 10             	add    esp,0x10
c002168f:	31 c0                	xor    eax,eax
c0021691:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021696:	75 1d                	jne    c00216b5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021698:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002169d:	75 16                	jne    c00216b5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002169f:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00216a4:	75 0f                	jne    c00216b5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00216a6:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00216ab:	75 08                	jne    c00216b5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00216ad:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00216b2:	0f 94 c0             	sete   al
c00216b5:	81 c4 0c 08 00 00    	add    esp,0x80c
c00216bb:	c3                   	ret    

c00216bc <ISO9660::read(void*, unsigned long, void*, int*)>:
c00216bc:	55                   	push   ebp
c00216bd:	57                   	push   edi
c00216be:	56                   	push   esi
c00216bf:	53                   	push   ebx
c00216c0:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00216c6:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00216cd:	85 ed                	test   ebp,ebp
c00216cf:	0f 84 d6 01 00 00    	je     c00218ab <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00216d5:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00216dd:	0f 84 c8 01 00 00    	je     c00218ab <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00216e3:	b8 01 00 00 00       	mov    eax,0x1
c00216e8:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00216ec:	0f 85 be 01 00 00    	jne    c00218b0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00216f2:	31 d2                	xor    edx,edx
c00216f4:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00216fb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00216fe:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021701:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021705:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021708:	89 04 24             	mov    DWORD PTR [esp],eax
c002170b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002170f:	01 f0                	add    eax,esi
c0021711:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021714:	11 fa                	adc    edx,edi
c0021716:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002171a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002171e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021722:	19 d1                	sbb    ecx,edx
c0021724:	72 0a                	jb     c0021730 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021726:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002172a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002172e:	eb 13                	jmp    c0021743 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021730:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021734:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021738:	29 f0                	sub    eax,esi
c002173a:	19 fa                	sbb    edx,edi
c002173c:	89 04 24             	mov    DWORD PTR [esp],eax
c002173f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021743:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021746:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021749:	0f a4 c2 0b          	shld   edx,eax,0xb
c002174d:	51                   	push   ecx
c002174e:	c1 e0 0b             	shl    eax,0xb
c0021751:	01 c6                	add    esi,eax
c0021753:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021757:	11 d7                	adc    edi,edx
c0021759:	50                   	push   eax
c002175a:	89 fa                	mov    edx,edi
c002175c:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021760:	89 f0                	mov    eax,esi
c0021762:	53                   	push   ebx
c0021763:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021767:	50                   	push   eax
c0021768:	e8 98 fe ff ff       	call   c0021605 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002176d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021771:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021774:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0021778:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002177e:	83 c4 10             	add    esp,0x10
c0021781:	b8 00 08 00 00       	mov    eax,0x800
c0021786:	29 d0                	sub    eax,edx
c0021788:	39 c1                	cmp    ecx,eax
c002178a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002178e:	83 d9 00             	sbb    ecx,0x0
c0021791:	7d 1c                	jge    c00217af <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021793:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021798:	75 12                	jne    c00217ac <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c002179a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00217a1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00217a7:	e9 fb 00 00 00       	jmp    c00218a7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c00217ac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00217af:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c00217b2:	31 d2                	xor    edx,edx
c00217b4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00217b8:	39 c2                	cmp    edx,eax
c00217ba:	7d 14                	jge    c00217d0 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c00217bc:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00217c3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217c7:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00217ca:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00217cd:	42                   	inc    edx
c00217ce:	eb e8                	jmp    c00217b8 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c00217d0:	89 c3                	mov    ebx,eax
c00217d2:	85 c0                	test   eax,eax
c00217d4:	79 02                	jns    c00217d8 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c00217d6:	31 db                	xor    ebx,ebx
c00217d8:	99                   	cdq    
c00217d9:	01 c3                	add    ebx,eax
c00217db:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c00217e2:	01 c6                	add    esi,eax
c00217e4:	11 d7                	adc    edi,edx
c00217e6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00217ea:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00217ee:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00217f1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00217f5:	29 c6                	sub    esi,eax
c00217f7:	19 d7                	sbb    edi,edx
c00217f9:	89 34 24             	mov    DWORD PTR [esp],esi
c00217fc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021800:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021805:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021808:	b8 00 00 00 00       	mov    eax,0x0
c002180d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021811:	7d 3e                	jge    c0021851 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021813:	52                   	push   edx
c0021814:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021818:	50                   	push   eax
c0021819:	53                   	push   ebx
c002181a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002181e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021822:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021826:	50                   	push   eax
c0021827:	e8 d9 fd ff ff       	call   c0021605 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002182c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021834:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021839:	81 c3 00 08 00 00    	add    ebx,0x800
c002183f:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021847:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c002184c:	83 c4 10             	add    esp,0x10
c002184f:	eb af                	jmp    c0021800 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021851:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021855:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021858:	74 32                	je     c002188c <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c002185a:	50                   	push   eax
c002185b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002185f:	50                   	push   eax
c0021860:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021864:	50                   	push   eax
c0021865:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021869:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002186d:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021871:	56                   	push   esi
c0021872:	e8 8e fd ff ff       	call   c0021605 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021877:	83 c4 0c             	add    esp,0xc
c002187a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c002187e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021882:	50                   	push   eax
c0021883:	53                   	push   ebx
c0021884:	e8 bb ee fd ff       	call   c0000744 <memcpy>
c0021889:	83 c4 10             	add    esp,0x10
c002188c:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021893:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021897:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002189b:	89 38                	mov    DWORD PTR [eax],edi
c002189d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218a1:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00218a4:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00218a7:	31 c0                	xor    eax,eax
c00218a9:	eb 05                	jmp    c00218b0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00218ab:	b8 04 00 00 00       	mov    eax,0x4
c00218b0:	81 c4 2c 08 00 00    	add    esp,0x82c
c00218b6:	5b                   	pop    ebx
c00218b7:	5e                   	pop    esi
c00218b8:	5f                   	pop    edi
c00218b9:	5d                   	pop    ebp
c00218ba:	c3                   	ret    
c00218bb:	90                   	nop

c00218bc <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00218bc:	55                   	push   ebp
c00218bd:	57                   	push   edi
c00218be:	56                   	push   esi
c00218bf:	53                   	push   ebx
c00218c0:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00218c6:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c00218cd:	85 f6                	test   esi,esi
c00218cf:	0f 84 64 02 00 00    	je     c0021b39 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00218d5:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00218dd:	0f 84 56 02 00 00    	je     c0021b39 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00218e3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00218e6:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c00218e9:	75 0a                	jne    c00218f5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00218eb:	b8 07 00 00 00       	mov    eax,0x7
c00218f0:	e9 49 02 00 00       	jmp    c0021b3e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c00218f5:	50                   	push   eax
c00218f6:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00218fa:	50                   	push   eax
c00218fb:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021902:	53                   	push   ebx
c0021903:	8b 06                	mov    eax,DWORD PTR [esi]
c0021905:	c1 e0 0b             	shl    eax,0xb
c0021908:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c002190b:	c1 e8 0b             	shr    eax,0xb
c002190e:	50                   	push   eax
c002190f:	e8 f1 fc ff ff       	call   c0021605 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021914:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021917:	83 c4 10             	add    esp,0x10
c002191a:	89 c1                	mov    ecx,eax
c002191c:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c002191f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021925:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021928:	84 db                	test   bl,bl
c002192a:	0f 85 90 00 00 00    	jne    c00219c0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021930:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021936:	81 e7 ff 07 00 00    	and    edi,0x7ff
c002193c:	29 c7                	sub    edi,eax
c002193e:	89 fb                	mov    ebx,edi
c0021940:	c1 fb 1f             	sar    ebx,0x1f
c0021943:	01 f8                	add    eax,edi
c0021945:	11 da                	adc    edx,ebx
c0021947:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002194b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002194f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021952:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021955:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021958:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002195b:	89 04 24             	mov    DWORD PTR [esp],eax
c002195e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021962:	89 d8                	mov    eax,ebx
c0021964:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021967:	ba 00 00 00 00       	mov    edx,0x0
c002196c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021970:	b8 00 00 00 00       	mov    eax,0x0
c0021975:	73 0b                	jae    c0021982 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021977:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002197a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002197e:	29 f8                	sub    eax,edi
c0021980:	19 da                	sbb    edx,ebx
c0021982:	89 d3                	mov    ebx,edx
c0021984:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021987:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c002198a:	09 c3                	or     ebx,eax
c002198c:	0f 84 59 ff ff ff    	je     c00218eb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021992:	55                   	push   ebp
c0021993:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021997:	50                   	push   eax
c0021998:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002199f:	53                   	push   ebx
c00219a0:	8b 06                	mov    eax,DWORD PTR [esi]
c00219a2:	c1 e0 0b             	shl    eax,0xb
c00219a5:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c00219a9:	c1 e8 0b             	shr    eax,0xb
c00219ac:	50                   	push   eax
c00219ad:	e8 53 fc ff ff       	call   c0021605 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219b2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00219b5:	83 c4 10             	add    esp,0x10
c00219b8:	25 ff 07 00 00       	and    eax,0x7ff
c00219bd:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00219c0:	57                   	push   edi
c00219c1:	6a 28                	push   0x28
c00219c3:	6a 00                	push   0x0
c00219c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00219c9:	50                   	push   eax
c00219ca:	e8 a9 ed fd ff       	call   c0000778 <memset>
c00219cf:	31 d2                	xor    edx,edx
c00219d1:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00219d4:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00219da:	89 f8                	mov    eax,edi
c00219dc:	83 c0 21             	add    eax,0x21
c00219df:	83 d2 00             	adc    edx,0x0
c00219e2:	89 c7                	mov    edi,eax
c00219e4:	89 d5                	mov    ebp,edx
c00219e6:	83 c4 10             	add    esp,0x10
c00219e9:	31 c9                	xor    ecx,ecx
c00219eb:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c00219f2:	83 f9 28             	cmp    ecx,0x28
c00219f5:	88 04 24             	mov    BYTE PTR [esp],al
c00219f8:	0f 94 c2             	sete   dl
c00219fb:	88 d0                	mov    al,dl
c00219fd:	ba ff 07 00 00       	mov    edx,0x7ff
c0021a02:	39 fa                	cmp    edx,edi
c0021a04:	ba 00 00 00 00       	mov    edx,0x0
c0021a09:	19 ea                	sbb    edx,ebp
c0021a0b:	0f 92 c2             	setb   dl
c0021a0e:	09 c2                	or     edx,eax
c0021a10:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021a14:	0f 94 c0             	sete   al
c0021a17:	08 d0                	or     al,dl
c0021a19:	75 16                	jne    c0021a31 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021a1b:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021a1f:	74 10                	je     c0021a31 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021a21:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021a24:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021a28:	41                   	inc    ecx
c0021a29:	83 c7 01             	add    edi,0x1
c0021a2c:	83 d5 00             	adc    ebp,0x0
c0021a2f:	eb ba                	jmp    c00219eb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021a31:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021a38:	83 ec 0c             	sub    esp,0xc
c0021a3b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021a3f:	57                   	push   edi
c0021a40:	e8 4f ed fd ff       	call   c0000794 <strlen>
c0021a45:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021a4d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021a51:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021a58:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021a5b:	5a                   	pop    edx
c0021a5c:	25 ff 07 00 00       	and    eax,0x7ff
c0021a61:	01 c8                	add    eax,ecx
c0021a63:	59                   	pop    ecx
c0021a64:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021a6a:	83 e0 02             	and    eax,0x2
c0021a6d:	3c 01                	cmp    al,0x1
c0021a6f:	19 c0                	sbb    eax,eax
c0021a71:	83 c0 02             	add    eax,0x2
c0021a74:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021a78:	57                   	push   edi
c0021a79:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021a7d:	50                   	push   eax
c0021a7e:	e8 b1 ed fd ff       	call   c0000834 <strcpy>
c0021a83:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021a87:	83 c4 10             	add    esp,0x10
c0021a8a:	84 c0                	test   al,al
c0021a8c:	75 21                	jne    c0021aaf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021a8e:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021a96:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021a9e:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021aa6:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021aad:	eb 28                	jmp    c0021ad7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021aaf:	fe c8                	dec    al
c0021ab1:	75 24                	jne    c0021ad7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021ab3:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021abb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021ac3:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021acb:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021ad2:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021ad7:	0f b6 fb             	movzx  edi,bl
c0021ada:	31 db                	xor    ebx,ebx
c0021adc:	50                   	push   eax
c0021add:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021ae4:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021ae8:	50                   	push   eax
c0021ae9:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021af0:	e8 4f ec fd ff       	call   c0000744 <memcpy>
c0021af5:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021afc:	89 f9                	mov    ecx,edi
c0021afe:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021b04:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021b07:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021b0a:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021b0d:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021b10:	83 c4 10             	add    esp,0x10
c0021b13:	39 c7                	cmp    edi,eax
c0021b15:	89 df                	mov    edi,ebx
c0021b17:	19 d7                	sbb    edi,edx
c0021b19:	72 10                	jb     c0021b2b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021b1b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021b22:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021b29:	eb 0a                	jmp    c0021b35 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021b2b:	29 c8                	sub    eax,ecx
c0021b2d:	19 da                	sbb    edx,ebx
c0021b2f:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021b32:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021b35:	31 c0                	xor    eax,eax
c0021b37:	eb 05                	jmp    c0021b3e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021b39:	b8 04 00 00 00       	mov    eax,0x4
c0021b3e:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021b44:	5b                   	pop    ebx
c0021b45:	5e                   	pop    esi
c0021b46:	5f                   	pop    edi
c0021b47:	5d                   	pop    ebp
c0021b48:	c3                   	ret    

c0021b49 <readRoot(unsigned int*, unsigned int*, char)>:
c0021b49:	81 ec 40 08 00 00    	sub    esp,0x840
c0021b4f:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021b57:	50                   	push   eax
c0021b58:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021b5c:	50                   	push   eax
c0021b5d:	6a 10                	push   0x10
c0021b5f:	e8 a1 fa ff ff       	call   c0021605 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b64:	83 c4 0c             	add    esp,0xc
c0021b67:	6a 22                	push   0x22
c0021b69:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021b70:	50                   	push   eax
c0021b71:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021b75:	50                   	push   eax
c0021b76:	e8 c9 eb fd ff       	call   c0000744 <memcpy>
c0021b7b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021b82:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021b86:	89 10                	mov    DWORD PTR [eax],edx
c0021b88:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021b8f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021b93:	89 10                	mov    DWORD PTR [eax],edx
c0021b95:	b0 01                	mov    al,0x1
c0021b97:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021b9d:	c3                   	ret    

c0021b9e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021b9e:	55                   	push   ebp
c0021b9f:	57                   	push   edi
c0021ba0:	56                   	push   esi
c0021ba1:	53                   	push   ebx
c0021ba2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021ba8:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021baf:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021bb6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021bba:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021bbe:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021bc2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021bc6:	75 03                	jne    c0021bcb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021bc8:	83 c3 02             	add    ebx,0x2
c0021bcb:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021bce:	75 03                	jne    c0021bd3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021bd0:	43                   	inc    ebx
c0021bd1:	eb f8                	jmp    c0021bcb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021bd3:	51                   	push   ecx
c0021bd4:	68 00 01 00 00       	push   0x100
c0021bd9:	6a 00                	push   0x0
c0021bdb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021bdf:	50                   	push   eax
c0021be0:	e8 93 eb fd ff       	call   c0000778 <memset>
c0021be5:	83 c4 10             	add    esp,0x10
c0021be8:	31 d2                	xor    edx,edx
c0021bea:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021bed:	84 c0                	test   al,al
c0021bef:	74 21                	je     c0021c12 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021bf1:	3c 2f                	cmp    al,0x2f
c0021bf3:	75 0b                	jne    c0021c00 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021bf5:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021bf9:	bd 01 00 00 00       	mov    ebp,0x1
c0021bfe:	eb 14                	jmp    c0021c14 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021c00:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021c03:	80 f9 19             	cmp    cl,0x19
c0021c06:	77 03                	ja     c0021c0b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021c08:	83 e8 20             	sub    eax,0x20
c0021c0b:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021c0f:	42                   	inc    edx
c0021c10:	eb d8                	jmp    c0021bea <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021c12:	31 ed                	xor    ebp,ebp
c0021c14:	83 ec 0c             	sub    esp,0xc
c0021c17:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021c1e:	e8 1d dc fe ff       	call   c000f840 <malloc>
c0021c23:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021c2a:	89 c6                	mov    esi,eax
c0021c2c:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021c32:	c1 ef 0b             	shr    edi,0xb
c0021c35:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021c3c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021c40:	83 c4 10             	add    esp,0x10
c0021c43:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021c48:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021c4c:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021c53:	74 28                	je     c0021c7d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021c55:	52                   	push   edx
c0021c56:	57                   	push   edi
c0021c57:	50                   	push   eax
c0021c58:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021c5c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021c63:	e8 9d f9 ff ff       	call   c0021605 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021c6c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021c73:	05 00 08 00 00       	add    eax,0x800
c0021c78:	83 c4 10             	add    esp,0x10
c0021c7b:	eb cb                	jmp    c0021c48 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021c7d:	83 ec 0c             	sub    esp,0xc
c0021c80:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021c84:	57                   	push   edi
c0021c85:	e8 0a eb fd ff       	call   c0000794 <strlen>
c0021c8a:	50                   	push   eax
c0021c8b:	57                   	push   edi
c0021c8c:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021c93:	56                   	push   esi
c0021c94:	e8 2a f9 ff ff       	call   c00215c3 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021c99:	83 c4 20             	add    esp,0x20
c0021c9c:	85 c0                	test   eax,eax
c0021c9e:	75 13                	jne    c0021cb3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021ca0:	83 ec 0c             	sub    esp,0xc
c0021ca3:	56                   	push   esi
c0021ca4:	e8 a7 db fe ff       	call   c000f850 <free>
c0021ca9:	83 c4 10             	add    esp,0x10
c0021cac:	31 c0                	xor    eax,eax
c0021cae:	e9 b3 00 00 00       	jmp    c0021d66 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021cb3:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021cb7:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021cbb:	c1 e7 08             	shl    edi,0x8
c0021cbe:	c1 e2 10             	shl    edx,0x10
c0021cc1:	09 d7                	or     edi,edx
c0021cc3:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021cc7:	09 d7                	or     edi,edx
c0021cc9:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021ccd:	c1 e2 18             	shl    edx,0x18
c0021cd0:	09 d7                	or     edi,edx
c0021cd2:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021cd6:	89 d1                	mov    ecx,edx
c0021cd8:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021cdc:	c1 e1 08             	shl    ecx,0x8
c0021cdf:	c1 e2 10             	shl    edx,0x10
c0021ce2:	09 ca                	or     edx,ecx
c0021ce4:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021ce8:	09 ca                	or     edx,ecx
c0021cea:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021cee:	c1 e1 18             	shl    ecx,0x18
c0021cf1:	09 ca                	or     edx,ecx
c0021cf3:	89 e9                	mov    ecx,ebp
c0021cf5:	84 c9                	test   cl,cl
c0021cf7:	74 3c                	je     c0021d35 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021cf9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021cfd:	83 ec 0c             	sub    esp,0xc
c0021d00:	56                   	push   esi
c0021d01:	e8 4a db fe ff       	call   c000f850 <free>
c0021d06:	83 c4 0c             	add    esp,0xc
c0021d09:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d10:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021d15:	50                   	push   eax
c0021d16:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d1d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d24:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021d28:	52                   	push   edx
c0021d29:	57                   	push   edi
c0021d2a:	53                   	push   ebx
c0021d2b:	e8 6e fe ff ff       	call   c0021b9e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021d30:	83 c4 20             	add    esp,0x20
c0021d33:	eb 31                	jmp    c0021d66 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021d35:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021d38:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021d3f:	d0 e8                	shr    al,1
c0021d41:	89 3b                	mov    DWORD PTR [ebx],edi
c0021d43:	83 e0 01             	and    eax,0x1
c0021d46:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021d4d:	83 ec 0c             	sub    esp,0xc
c0021d50:	89 13                	mov    DWORD PTR [ebx],edx
c0021d52:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021d59:	89 03                	mov    DWORD PTR [ebx],eax
c0021d5b:	56                   	push   esi
c0021d5c:	e8 ef da fe ff       	call   c000f850 <free>
c0021d61:	83 c4 10             	add    esp,0x10
c0021d64:	b0 01                	mov    al,0x1
c0021d66:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021d6c:	5b                   	pop    ebx
c0021d6d:	5e                   	pop    esi
c0021d6e:	5f                   	pop    edi
c0021d6f:	5d                   	pop    ebp
c0021d70:	c3                   	ret    

c0021d71 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021d71:	55                   	push   ebp
c0021d72:	57                   	push   edi
c0021d73:	56                   	push   esi
c0021d74:	53                   	push   ebx
c0021d75:	83 ec 20             	sub    esp,0x20
c0021d78:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021d7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021d80:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021d84:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021d8c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021d94:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021d99:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021d9f:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021da5:	57                   	push   edi
c0021da6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021daa:	50                   	push   eax
c0021dab:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021daf:	50                   	push   eax
c0021db0:	e8 94 fd ff ff       	call   c0021b49 <readRoot(unsigned int*, unsigned int*, char)>
c0021db5:	5a                   	pop    edx
c0021db6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021dba:	e8 d5 e9 fd ff       	call   c0000794 <strlen>
c0021dbf:	83 c4 10             	add    esp,0x10
c0021dc2:	83 f8 03             	cmp    eax,0x3
c0021dc5:	77 17                	ja     c0021dde <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021dc7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021dcb:	89 03                	mov    DWORD PTR [ebx],eax
c0021dcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021dd1:	89 06                	mov    DWORD PTR [esi],eax
c0021dd3:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021dda:	b0 01                	mov    al,0x1
c0021ddc:	eb 19                	jmp    c0021df7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021dde:	50                   	push   eax
c0021ddf:	55                   	push   ebp
c0021de0:	57                   	push   edi
c0021de1:	56                   	push   esi
c0021de2:	53                   	push   ebx
c0021de3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021de7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021deb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021def:	e8 aa fd ff ff       	call   c0021b9e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021df4:	83 c4 20             	add    esp,0x20
c0021df7:	83 c4 1c             	add    esp,0x1c
c0021dfa:	5b                   	pop    ebx
c0021dfb:	5e                   	pop    esi
c0021dfc:	5f                   	pop    edi
c0021dfd:	5d                   	pop    ebp
c0021dfe:	c3                   	ret    
c0021dff:	90                   	nop

c0021e00 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021e00:	57                   	push   edi
c0021e01:	56                   	push   esi
c0021e02:	53                   	push   ebx
c0021e03:	83 ec 10             	sub    esp,0x10
c0021e06:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021e0a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021e0e:	85 ff                	test   edi,edi
c0021e10:	0f 84 9d 00 00 00    	je     c0021eb3 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021e16:	85 f6                	test   esi,esi
c0021e18:	0f 84 95 00 00 00    	je     c0021eb3 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021e1e:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021e23:	74 17                	je     c0021e3c <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021e25:	83 ec 0c             	sub    esp,0xc
c0021e28:	68 0b c7 02 c0       	push   0xc002c70b
c0021e2d:	e8 62 0f ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0021e32:	83 c4 10             	add    esp,0x10
c0021e35:	b8 03 00 00 00       	mov    eax,0x3
c0021e3a:	eb 7c                	jmp    c0021eb8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021e3c:	83 ec 0c             	sub    esp,0xc
c0021e3f:	6a 1c                	push   0x1c
c0021e41:	e8 fa d9 fe ff       	call   c000f840 <malloc>
c0021e46:	89 07                	mov    DWORD PTR [edi],eax
c0021e48:	89 c3                	mov    ebx,eax
c0021e4a:	58                   	pop    eax
c0021e4b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021e4f:	50                   	push   eax
c0021e50:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021e53:	50                   	push   eax
c0021e54:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e58:	50                   	push   eax
c0021e59:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e5d:	50                   	push   eax
c0021e5e:	56                   	push   esi
c0021e5f:	e8 0d ff ff ff       	call   c0021d71 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021e64:	83 c4 20             	add    esp,0x20
c0021e67:	84 c0                	test   al,al
c0021e69:	74 07                	je     c0021e72 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021e6b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021e70:	74 0b                	je     c0021e7d <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021e72:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021e76:	b8 01 00 00 00       	mov    eax,0x1
c0021e7b:	eb 3b                	jmp    c0021eb8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021e7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e81:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021e85:	89 03                	mov    DWORD PTR [ebx],eax
c0021e87:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021e8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e92:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021e99:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021ea0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021ea3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021eaa:	8a 06                	mov    al,BYTE PTR [esi]
c0021eac:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021eaf:	31 c0                	xor    eax,eax
c0021eb1:	eb 05                	jmp    c0021eb8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021eb3:	b8 04 00 00 00       	mov    eax,0x4
c0021eb8:	83 c4 10             	add    esp,0x10
c0021ebb:	5b                   	pop    ebx
c0021ebc:	5e                   	pop    esi
c0021ebd:	5f                   	pop    edi
c0021ebe:	c3                   	ret    
c0021ebf:	90                   	nop

c0021ec0 <ISO9660::exists(char const*)>:
c0021ec0:	83 ec 28             	sub    esp,0x28
c0021ec3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021ec7:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021ecb:	52                   	push   edx
c0021ecc:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021ecf:	52                   	push   edx
c0021ed0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021ed4:	52                   	push   edx
c0021ed5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021ed9:	52                   	push   edx
c0021eda:	50                   	push   eax
c0021edb:	e8 91 fe ff ff       	call   c0021d71 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021ee0:	83 c4 3c             	add    esp,0x3c
c0021ee3:	c3                   	ret    

c0021ee4 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021ee4:	56                   	push   esi
c0021ee5:	53                   	push   ebx
c0021ee6:	83 ec 14             	sub    esp,0x14
c0021ee9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021eed:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021ef1:	85 db                	test   ebx,ebx
c0021ef3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021ef7:	0f 94 c2             	sete   dl
c0021efa:	85 f6                	test   esi,esi
c0021efc:	0f 94 c0             	sete   al
c0021eff:	08 c2                	or     dl,al
c0021f01:	75 68                	jne    c0021f6b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021f03:	85 c9                	test   ecx,ecx
c0021f05:	74 64                	je     c0021f6b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021f07:	83 ec 0c             	sub    esp,0xc
c0021f0a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021f0d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f11:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021f17:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f1e:	50                   	push   eax
c0021f1f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021f22:	50                   	push   eax
c0021f23:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f27:	50                   	push   eax
c0021f28:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f2c:	50                   	push   eax
c0021f2d:	51                   	push   ecx
c0021f2e:	e8 3e fe ff ff       	call   c0021d71 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021f33:	83 c4 20             	add    esp,0x20
c0021f36:	ba 01 00 00 00       	mov    edx,0x1
c0021f3b:	84 c0                	test   al,al
c0021f3d:	74 31                	je     c0021f70 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021f3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f43:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f4a:	89 03                	mov    DWORD PTR [ebx],eax
c0021f4c:	ba 00 00 00 00       	mov    edx,0x0
c0021f51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f55:	85 c0                	test   eax,eax
c0021f57:	0f 95 06             	setne  BYTE PTR [esi]
c0021f5a:	74 14                	je     c0021f70 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021f5c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021f62:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f69:	eb 05                	jmp    c0021f70 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021f6b:	ba 04 00 00 00       	mov    edx,0x4
c0021f70:	83 c4 14             	add    esp,0x14
c0021f73:	89 d0                	mov    eax,edx
c0021f75:	5b                   	pop    ebx
c0021f76:	5e                   	pop    esi
c0021f77:	c3                   	ret    

c0021f78 <ISO9660::openDir(char const*, void**)>:
c0021f78:	57                   	push   edi
c0021f79:	56                   	push   esi
c0021f7a:	53                   	push   ebx
c0021f7b:	83 ec 10             	sub    esp,0x10
c0021f7e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021f82:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021f86:	85 ff                	test   edi,edi
c0021f88:	0f 84 95 00 00 00    	je     c0022023 <ISO9660::openDir(char const*, void**)+0xab>
c0021f8e:	85 f6                	test   esi,esi
c0021f90:	0f 84 8d 00 00 00    	je     c0022023 <ISO9660::openDir(char const*, void**)+0xab>
c0021f96:	83 ec 0c             	sub    esp,0xc
c0021f99:	6a 1c                	push   0x1c
c0021f9b:	e8 a0 d8 fe ff       	call   c000f840 <malloc>
c0021fa0:	89 07                	mov    DWORD PTR [edi],eax
c0021fa2:	89 c3                	mov    ebx,eax
c0021fa4:	59                   	pop    ecx
c0021fa5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021fa9:	50                   	push   eax
c0021faa:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021fad:	50                   	push   eax
c0021fae:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fb2:	50                   	push   eax
c0021fb3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fb7:	50                   	push   eax
c0021fb8:	56                   	push   esi
c0021fb9:	e8 b3 fd ff ff       	call   c0021d71 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021fbe:	83 c4 20             	add    esp,0x20
c0021fc1:	84 c0                	test   al,al
c0021fc3:	74 07                	je     c0021fcc <ISO9660::openDir(char const*, void**)+0x54>
c0021fc5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021fca:	75 21                	jne    c0021fed <ISO9660::openDir(char const*, void**)+0x75>
c0021fcc:	0f b6 c0             	movzx  eax,al
c0021fcf:	52                   	push   edx
c0021fd0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021fd4:	50                   	push   eax
c0021fd5:	68 31 c7 02 c0       	push   0xc002c731
c0021fda:	e8 b5 0d ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0021fdf:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021fe3:	83 c4 10             	add    esp,0x10
c0021fe6:	b8 01 00 00 00       	mov    eax,0x1
c0021feb:	eb 3b                	jmp    c0022028 <ISO9660::openDir(char const*, void**)+0xb0>
c0021fed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ff1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021ff5:	89 03                	mov    DWORD PTR [ebx],eax
c0021ff7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022002:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022009:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022010:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022013:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002201a:	8a 06                	mov    al,BYTE PTR [esi]
c002201c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002201f:	31 c0                	xor    eax,eax
c0022021:	eb 05                	jmp    c0022028 <ISO9660::openDir(char const*, void**)+0xb0>
c0022023:	b8 04 00 00 00       	mov    eax,0x4
c0022028:	83 c4 10             	add    esp,0x10
c002202b:	5b                   	pop    ebx
c002202c:	5e                   	pop    esi
c002202d:	5f                   	pop    edi
c002202e:	c3                   	ret    
c002202f:	90                   	nop

c0022030 <ISO9660::ISO9660()>:
c0022030:	83 ec 0c             	sub    esp,0xc
c0022033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022037:	83 ec 0c             	sub    esp,0xc
c002203a:	50                   	push   eax
c002203b:	e8 58 10 ff ff       	call   c0013098 <Filesystem::Filesystem()>
c0022040:	83 c4 10             	add    esp,0x10
c0022043:	ba 54 c7 02 c0       	mov    edx,0xc002c754
c0022048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002204c:	89 10                	mov    DWORD PTR [eax],edx
c002204e:	90                   	nop
c002204f:	83 c4 0c             	add    esp,0xc
c0022052:	c3                   	ret    
c0022053:	90                   	nop

c0022054 <SoundChannel::~SoundChannel()>:
c0022054:	83 ec 0c             	sub    esp,0xc
c0022057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002205b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002205e:	83 ec 0c             	sub    esp,0xc
c0022061:	50                   	push   eax
c0022062:	e8 e9 d7 fe ff       	call   c000f850 <free>
c0022067:	83 c4 10             	add    esp,0x10
c002206a:	90                   	nop
c002206b:	83 c4 0c             	add    esp,0xc
c002206e:	c3                   	ret    
c002206f:	90                   	nop

c0022070 <SoundChannel::setSpeed(float)>:
c0022070:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022074:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022078:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002207b:	c3                   	ret    

c002207c <SoundChannel::getSpeed()>:
c002207c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022080:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022083:	c3                   	ret    

c0022084 <SoundChannel::setVolume(int)>:
c0022084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022088:	83 f8 64             	cmp    eax,0x64
c002208b:	7e 05                	jle    c0022092 <SoundChannel::setVolume(int)+0xe>
c002208d:	b8 64 00 00 00       	mov    eax,0x64
c0022092:	85 c0                	test   eax,eax
c0022094:	79 02                	jns    c0022098 <SoundChannel::setVolume(int)+0x14>
c0022096:	31 c0                	xor    eax,eax
c0022098:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002209c:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c002209f:	c3                   	ret    

c00220a0 <SoundChannel::getVolume()>:
c00220a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220a4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00220a7:	c3                   	ret    

c00220a8 <SoundChannel::pause()>:
c00220a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220ac:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00220b0:	c3                   	ret    
c00220b1:	90                   	nop

c00220b2 <SoundChannel::SoundChannel(int, int, int, int)>:
c00220b2:	83 ec 1c             	sub    esp,0x1c
c00220b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00220b9:	e8 ea ff ff ff       	call   c00220a8 <SoundChannel::pause()>
c00220be:	83 c4 04             	add    esp,0x4
c00220c1:	6a 50                	push   0x50
c00220c3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00220c7:	e8 b8 ff ff ff       	call   c0022084 <SoundChannel::setVolume(int)>
c00220cc:	83 c4 08             	add    esp,0x8
c00220cf:	a1 cc c7 02 c0       	mov    eax,ds:0xc002c7cc
c00220d4:	50                   	push   eax
c00220d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00220d9:	e8 92 ff ff ff       	call   c0022070 <SoundChannel::setSpeed(float)>
c00220de:	83 c4 08             	add    esp,0x8
c00220e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220e5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00220e9:	89 10                	mov    DWORD PTR [eax],edx
c00220eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220ef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00220f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00220f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220fa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00220fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022101:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022106:	75 23                	jne    c002212b <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022108:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002210c:	8b 10                	mov    edx,DWORD PTR [eax]
c002210e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022112:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022115:	0f af c2             	imul   eax,edx
c0022118:	85 c0                	test   eax,eax
c002211a:	79 03                	jns    c002211f <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c002211c:	83 c0 03             	add    eax,0x3
c002211f:	c1 f8 02             	sar    eax,0x2
c0022122:	05 a0 0f 00 00       	add    eax,0xfa0
c0022127:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002212b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002212f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022133:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022136:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002213a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022141:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022145:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002214c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022150:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022153:	c1 e0 02             	shl    eax,0x2
c0022156:	83 ec 0c             	sub    esp,0xc
c0022159:	50                   	push   eax
c002215a:	e8 e1 d6 fe ff       	call   c000f840 <malloc>
c002215f:	83 c4 10             	add    esp,0x10
c0022162:	89 c2                	mov    edx,eax
c0022164:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022168:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002216b:	83 ec 04             	sub    esp,0x4
c002216e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022172:	50                   	push   eax
c0022173:	6a 01                	push   0x1
c0022175:	6a 04                	push   0x4
c0022177:	e8 23 6a fe ff       	call   c0008b9f <src_new>
c002217c:	83 c4 10             	add    esp,0x10
c002217f:	89 c2                	mov    edx,eax
c0022181:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022185:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002218c:	85 c0                	test   eax,eax
c002218e:	74 10                	je     c00221a0 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022190:	83 ec 0c             	sub    esp,0xc
c0022193:	68 b0 c7 02 c0       	push   0xc002c7b0
c0022198:	e8 a0 82 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c002219d:	83 c4 10             	add    esp,0x10
c00221a0:	a0 80 25 03 c0       	mov    al,ds:0xc0032580
c00221a5:	83 f0 01             	xor    eax,0x1
c00221a8:	84 c0                	test   al,al
c00221aa:	74 57                	je     c0022203 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00221ac:	a1 d0 c7 02 c0       	mov    eax,ds:0xc002c7d0
c00221b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221b5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00221bd:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00221c5:	7f 35                	jg     c00221fc <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00221c7:	83 ec 0c             	sub    esp,0xc
c00221ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00221ce:	e8 94 4f 00 00       	call   c0027167 <__floatsisf>
c00221d3:	83 c4 10             	add    esp,0x10
c00221d6:	8b 15 d0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7d0
c00221dc:	83 ec 08             	sub    esp,0x8
c00221df:	52                   	push   edx
c00221e0:	50                   	push   eax
c00221e1:	e8 93 4b 00 00       	call   c0026d79 <__mulsf3>
c00221e6:	83 c4 10             	add    esp,0x10
c00221e9:	89 c2                	mov    edx,eax
c00221eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00221ef:	89 14 85 80 21 03 c0 	mov    DWORD PTR [eax*4-0x3ffcde80],edx
c00221f6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00221fa:	eb c1                	jmp    c00221bd <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00221fc:	c6 05 80 25 03 c0 01 	mov    BYTE PTR ds:0xc0032580,0x1
c0022203:	90                   	nop
c0022204:	83 c4 1c             	add    esp,0x1c
c0022207:	c3                   	ret    

c0022208 <SoundChannel::play()>:
c0022208:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002220c:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022210:	c3                   	ret    
c0022211:	90                   	nop

c0022212 <SoundChannel::paused()>:
c0022212:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022216:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022219:	c3                   	ret    

c002221a <SoundChannel::getSampleRate()>:
c002221a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002221e:	8b 00                	mov    eax,DWORD PTR [eax]
c0022220:	c3                   	ret    
c0022221:	90                   	nop

c0022222 <SoundChannel::getBits()>:
c0022222:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022226:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022229:	c3                   	ret    

c002222a <SoundChannel::getBufferUsed()>:
c002222a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002222e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022231:	c3                   	ret    

c0022232 <SoundChannel::getBufferSize()>:
c0022232:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022236:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022239:	c3                   	ret    

c002223a <SoundChannel::unbuffer(float*, int, int)>:
c002223a:	56                   	push   esi
c002223b:	53                   	push   ebx
c002223c:	83 ec 40             	sub    esp,0x40
c002223f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022243:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022246:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002224a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002224d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022251:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022255:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022259:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002225d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022261:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022265:	e8 fd 4e 00 00       	call   c0027167 <__floatsisf>
c002226a:	5a                   	pop    edx
c002226b:	89 c6                	mov    esi,eax
c002226d:	ff 33                	push   DWORD PTR [ebx]
c002226f:	e8 f3 4e 00 00       	call   c0027167 <__floatsisf>
c0022274:	59                   	pop    ecx
c0022275:	5a                   	pop    edx
c0022276:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022279:	50                   	push   eax
c002227a:	e8 fa 4a 00 00       	call   c0026d79 <__mulsf3>
c002227f:	59                   	pop    ecx
c0022280:	5a                   	pop    edx
c0022281:	50                   	push   eax
c0022282:	56                   	push   esi
c0022283:	e8 b4 4c 00 00       	call   c0026f3c <__divsf3>
c0022288:	89 04 24             	mov    DWORD PTR [esp],eax
c002228b:	e8 a7 61 00 00       	call   c0028437 <__extendsfdf2>
c0022290:	59                   	pop    ecx
c0022291:	5e                   	pop    esi
c0022292:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022296:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002229a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00222a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00222a6:	50                   	push   eax
c00222a7:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00222aa:	e8 e5 64 fe ff       	call   c0008794 <src_process>
c00222af:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00222b3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00222b6:	83 c4 0c             	add    esp,0xc
c00222b9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00222bc:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00222bf:	29 d0                	sub    eax,edx
c00222c1:	c1 e0 02             	shl    eax,0x2
c00222c4:	50                   	push   eax
c00222c5:	8d 04 91             	lea    eax,[ecx+edx*4]
c00222c8:	50                   	push   eax
c00222c9:	51                   	push   ecx
c00222ca:	e8 ad e3 fd ff       	call   c000067c <memmove>
c00222cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00222d3:	83 c4 44             	add    esp,0x44
c00222d6:	5b                   	pop    ebx
c00222d7:	5e                   	pop    esi
c00222d8:	c3                   	ret    
c00222d9:	90                   	nop

c00222da <SoundChannel::buffer8(unsigned char*, int)>:
c00222da:	55                   	push   ebp
c00222db:	57                   	push   edi
c00222dc:	56                   	push   esi
c00222dd:	53                   	push   ebx
c00222de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00222e2:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00222e6:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00222e9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00222ed:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00222f0:	74 7a                	je     c002236c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00222f2:	85 ff                	test   edi,edi
c00222f4:	7e 76                	jle    c002236c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00222f6:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00222fa:	8d 70 01             	lea    esi,[eax+0x1]
c00222fd:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022300:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022303:	8b 1c 9d 80 21 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcde80]
c002230a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002230d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022310:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022313:	74 5e                	je     c0022373 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022315:	83 ff 01             	cmp    edi,0x1
c0022318:	74 4b                	je     c0022365 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002231a:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002231e:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022321:	8d 70 01             	lea    esi,[eax+0x1]
c0022324:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022327:	8b 1c 9d 80 21 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcde80]
c002232e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022331:	b8 02 00 00 00       	mov    eax,0x2
c0022336:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022339:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002233c:	75 23                	jne    c0022361 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002233e:	eb 27                	jmp    c0022367 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022340:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022345:	8d 71 01             	lea    esi,[ecx+0x1]
c0022348:	40                   	inc    eax
c0022349:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002234c:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002234f:	8b 1c 9d 80 21 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcde80]
c0022356:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022359:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002235c:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002235f:	74 06                	je     c0022367 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022361:	39 c7                	cmp    edi,eax
c0022363:	75 db                	jne    c0022340 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022365:	89 f8                	mov    eax,edi
c0022367:	5b                   	pop    ebx
c0022368:	5e                   	pop    esi
c0022369:	5f                   	pop    edi
c002236a:	5d                   	pop    ebp
c002236b:	c3                   	ret    
c002236c:	5b                   	pop    ebx
c002236d:	31 c0                	xor    eax,eax
c002236f:	5e                   	pop    esi
c0022370:	5f                   	pop    edi
c0022371:	5d                   	pop    ebp
c0022372:	c3                   	ret    
c0022373:	b8 01 00 00 00       	mov    eax,0x1
c0022378:	eb ed                	jmp    c0022367 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002237a <SoundDevice::SoundDevice(char const*)>:
c002237a:	83 ec 1c             	sub    esp,0x1c
c002237d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022381:	83 ec 08             	sub    esp,0x8
c0022384:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022388:	50                   	push   eax
c0022389:	e8 1c 20 ff ff       	call   c00143aa <Device::Device(char const*)>
c002238e:	83 c4 10             	add    esp,0x10
c0022391:	ba dc c7 02 c0       	mov    edx,0xc002c7dc
c0022396:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002239a:	89 10                	mov    DWORD PTR [eax],edx
c002239c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223a0:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00223aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223ae:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00223b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00223c0:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00223c5:	7f 19                	jg     c00223e0 <SoundDevice::SoundDevice(char const*)+0x66>
c00223c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00223cf:	83 c2 54             	add    edx,0x54
c00223d2:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00223da:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00223de:	eb e0                	jmp    c00223c0 <SoundDevice::SoundDevice(char const*)+0x46>
c00223e0:	90                   	nop
c00223e1:	83 c4 1c             	add    esp,0x1c
c00223e4:	c3                   	ret    
c00223e5:	90                   	nop

c00223e6 <SoundDevice::~SoundDevice()>:
c00223e6:	53                   	push   ebx
c00223e7:	83 ec 18             	sub    esp,0x18
c00223ea:	ba dc c7 02 c0       	mov    edx,0xc002c7dc
c00223ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223f3:	89 10                	mov    DWORD PTR [eax],edx
c00223f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00223fd:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022402:	7f 46                	jg     c002244a <SoundDevice::~SoundDevice()+0x64>
c0022404:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022408:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002240c:	83 c2 54             	add    edx,0x54
c002240f:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022413:	85 c0                	test   eax,eax
c0022415:	74 2d                	je     c0022444 <SoundDevice::~SoundDevice()+0x5e>
c0022417:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002241b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002241f:	83 c2 54             	add    edx,0x54
c0022422:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022426:	85 db                	test   ebx,ebx
c0022428:	74 1a                	je     c0022444 <SoundDevice::~SoundDevice()+0x5e>
c002242a:	83 ec 0c             	sub    esp,0xc
c002242d:	53                   	push   ebx
c002242e:	e8 21 fc ff ff       	call   c0022054 <SoundChannel::~SoundChannel()>
c0022433:	83 c4 10             	add    esp,0x10
c0022436:	83 ec 08             	sub    esp,0x8
c0022439:	6a 2c                	push   0x2c
c002243b:	53                   	push   ebx
c002243c:	e8 73 08 ff ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0022441:	83 c4 10             	add    esp,0x10
c0022444:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022448:	eb b3                	jmp    c00223fd <SoundDevice::~SoundDevice()+0x17>
c002244a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002244e:	83 ec 0c             	sub    esp,0xc
c0022451:	50                   	push   eax
c0022452:	e8 35 1c ff ff       	call   c001408c <Device::~Device()>
c0022457:	83 c4 10             	add    esp,0x10
c002245a:	90                   	nop
c002245b:	83 c4 18             	add    esp,0x18
c002245e:	5b                   	pop    ebx
c002245f:	c3                   	ret    

c0022460 <SoundDevice::~SoundDevice()>:
c0022460:	83 ec 0c             	sub    esp,0xc
c0022463:	83 ec 0c             	sub    esp,0xc
c0022466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002246a:	e8 77 ff ff ff       	call   c00223e6 <SoundDevice::~SoundDevice()>
c002246f:	83 c4 10             	add    esp,0x10
c0022472:	83 ec 08             	sub    esp,0x8
c0022475:	68 e4 01 00 00       	push   0x1e4
c002247a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002247e:	e8 31 08 ff ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0022483:	83 c4 10             	add    esp,0x10
c0022486:	83 c4 0c             	add    esp,0xc
c0022489:	c3                   	ret    

c002248a <SoundDevice::getFreeChannelNum()>:
c002248a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002248e:	31 c0                	xor    eax,eax
c0022490:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022498:	74 09                	je     c00224a3 <SoundDevice::getFreeChannelNum()+0x19>
c002249a:	40                   	inc    eax
c002249b:	83 f8 20             	cmp    eax,0x20
c002249e:	75 f0                	jne    c0022490 <SoundDevice::getFreeChannelNum()+0x6>
c00224a0:	83 c8 ff             	or     eax,0xffffffff
c00224a3:	c3                   	ret    

c00224a4 <SoundDevice::addChannel(SoundChannel*)>:
c00224a4:	56                   	push   esi
c00224a5:	53                   	push   ebx
c00224a6:	51                   	push   ecx
c00224a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00224ab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00224af:	53                   	push   ebx
c00224b0:	e8 d5 ff ff ff       	call   c002248a <SoundDevice::getFreeChannelNum()>
c00224b5:	5a                   	pop    edx
c00224b6:	83 f8 ff             	cmp    eax,0xffffffff
c00224b9:	74 51                	je     c002250c <SoundDevice::addChannel(SoundChannel*)+0x68>
c00224bb:	85 f6                	test   esi,esi
c00224bd:	74 4d                	je     c002250c <SoundDevice::addChannel(SoundChannel*)+0x68>
c00224bf:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00224c6:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00224cd:	75 30                	jne    c00224ff <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00224cf:	83 ec 0c             	sub    esp,0xc
c00224d2:	56                   	push   esi
c00224d3:	e8 42 fd ff ff       	call   c002221a <SoundChannel::getSampleRate()>
c00224d8:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00224de:	89 34 24             	mov    DWORD PTR [esp],esi
c00224e1:	e8 3c fd ff ff       	call   c0022222 <SoundChannel::getBits()>
c00224e6:	83 c4 0c             	add    esp,0xc
c00224e9:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00224ef:	8b 13                	mov    edx,DWORD PTR [ebx]
c00224f1:	50                   	push   eax
c00224f2:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00224f8:	53                   	push   ebx
c00224f9:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00224fc:	83 c4 10             	add    esp,0x10
c00224ff:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022505:	b8 01 00 00 00       	mov    eax,0x1
c002250a:	eb 03                	jmp    c002250f <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002250c:	83 c8 ff             	or     eax,0xffffffff
c002250f:	5a                   	pop    edx
c0022510:	5b                   	pop    ebx
c0022511:	5e                   	pop    esi
c0022512:	c3                   	ret    
c0022513:	90                   	nop

c0022514 <SoundDevice::removeChannel(int)>:
c0022514:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022518:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002251c:	83 fa 1f             	cmp    edx,0x1f
c002251f:	77 23                	ja     c0022544 <SoundDevice::removeChannel(int)+0x30>
c0022521:	8d 14 90             	lea    edx,[eax+edx*4]
c0022524:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002252b:	74 17                	je     c0022544 <SoundDevice::removeChannel(int)+0x30>
c002252d:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022537:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002253d:	75 05                	jne    c0022544 <SoundDevice::removeChannel(int)+0x30>
c002253f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022541:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022544:	c3                   	ret    
c0022545:	90                   	nop

c0022546 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022546:	57                   	push   edi
c0022547:	56                   	push   esi
c0022548:	53                   	push   ebx
c0022549:	31 db                	xor    ebx,ebx
c002254b:	83 ec 10             	sub    esp,0x10
c002254e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022552:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022556:	0f 8d cb 00 00 00    	jge    c0022627 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002255c:	83 ec 0c             	sub    esp,0xc
c002255f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022563:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022566:	e8 cc 5e 00 00       	call   c0028437 <__extendsfdf2>
c002256b:	83 c4 10             	add    esp,0x10
c002256e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022572:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022576:	68 00 00 f0 3f       	push   0x3ff00000
c002257b:	6a 00                	push   0x0
c002257d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022581:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022585:	e8 39 4e 00 00       	call   c00273c3 <__adddf3>
c002258a:	83 c4 10             	add    esp,0x10
c002258d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022591:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022595:	68 00 00 e0 3f       	push   0x3fe00000
c002259a:	6a 00                	push   0x0
c002259c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225a4:	e8 97 54 00 00       	call   c0027a40 <__muldf3>
c00225a9:	83 c4 10             	add    esp,0x10
c00225ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00225b4:	68 00 00 60 40       	push   0x40600000
c00225b9:	6a 00                	push   0x0
c00225bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225c3:	e8 78 54 00 00       	call   c0027a40 <__muldf3>
c00225c8:	59                   	pop    ecx
c00225c9:	5f                   	pop    edi
c00225ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00225ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00225d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225da:	e8 34 5d 00 00       	call   c0028313 <__truncdfsf2>
c00225df:	5a                   	pop    edx
c00225e0:	89 c7                	mov    edi,eax
c00225e2:	59                   	pop    ecx
c00225e3:	68 00 00 fe 42       	push   0x42fe0000
c00225e8:	50                   	push   eax
c00225e9:	e8 cf 4d 00 00       	call   c00273bd <__gesf2>
c00225ee:	83 c4 10             	add    esp,0x10
c00225f1:	85 c0                	test   eax,eax
c00225f3:	78 06                	js     c00225fb <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00225f5:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00225f9:	eb 26                	jmp    c0022621 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00225fb:	50                   	push   eax
c00225fc:	50                   	push   eax
c00225fd:	6a 00                	push   0x0
c00225ff:	57                   	push   edi
c0022600:	e8 bc 4d 00 00       	call   c00273c1 <__lesf2>
c0022605:	83 c4 10             	add    esp,0x10
c0022608:	85 c0                	test   eax,eax
c002260a:	7f 06                	jg     c0022612 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002260c:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022610:	eb 0f                	jmp    c0022621 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022612:	83 ec 0c             	sub    esp,0xc
c0022615:	57                   	push   edi
c0022616:	e8 b1 5e 00 00       	call   c00284cc <lrintf>
c002261b:	83 c4 10             	add    esp,0x10
c002261e:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022621:	43                   	inc    ebx
c0022622:	e9 2b ff ff ff       	jmp    c0022552 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022627:	83 c4 10             	add    esp,0x10
c002262a:	5b                   	pop    ebx
c002262b:	5e                   	pop    esi
c002262c:	5f                   	pop    edi
c002262d:	c3                   	ret    

c002262e <SoundDevice::getAudio(int, float*, float*)>:
c002262e:	55                   	push   ebp
c002262f:	57                   	push   edi
c0022630:	56                   	push   esi
c0022631:	53                   	push   ebx
c0022632:	31 db                	xor    ebx,ebx
c0022634:	83 ec 20             	sub    esp,0x20
c0022637:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002263b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002263f:	c1 e0 02             	shl    eax,0x2
c0022642:	50                   	push   eax
c0022643:	6a 00                	push   0x0
c0022645:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022649:	e8 2a e1 fd ff       	call   c0000778 <memset>
c002264e:	83 c4 10             	add    esp,0x10
c0022651:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022655:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c002265c:	85 c0                	test   eax,eax
c002265e:	0f 84 d7 00 00 00    	je     c002273b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022664:	83 ec 0c             	sub    esp,0xc
c0022667:	50                   	push   eax
c0022668:	e8 a5 fb ff ff       	call   c0022212 <SoundChannel::paused()>
c002266d:	83 c4 10             	add    esp,0x10
c0022670:	84 c0                	test   al,al
c0022672:	0f 85 c3 00 00 00    	jne    c002273b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022678:	83 ec 0c             	sub    esp,0xc
c002267b:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022682:	e8 19 fa ff ff       	call   c00220a0 <SoundChannel::getVolume()>
c0022687:	83 c4 10             	add    esp,0x10
c002268a:	85 c0                	test   eax,eax
c002268c:	0f 84 a9 00 00 00    	je     c002273b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022692:	83 ec 0c             	sub    esp,0xc
c0022695:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002269c:	e8 ff f9 ff ff       	call   c00220a0 <SoundChannel::getVolume()>
c00226a1:	83 ec 0c             	sub    esp,0xc
c00226a4:	50                   	push   eax
c00226a5:	e8 bd 4a 00 00       	call   c0027167 <__floatsisf>
c00226aa:	59                   	pop    ecx
c00226ab:	5d                   	pop    ebp
c00226ac:	31 ed                	xor    ebp,ebp
c00226ae:	68 00 00 c8 42       	push   0x42c80000
c00226b3:	50                   	push   eax
c00226b4:	e8 83 48 00 00       	call   c0026f3c <__divsf3>
c00226b9:	83 c4 10             	add    esp,0x10
c00226bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00226c0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00226c4:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00226ca:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00226ce:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00226d5:	e8 60 fb ff ff       	call   c002223a <SoundChannel::unbuffer(float*, int, int)>
c00226da:	83 c4 20             	add    esp,0x20
c00226dd:	89 c1                	mov    ecx,eax
c00226df:	39 cd                	cmp    ebp,ecx
c00226e1:	7d 52                	jge    c0022735 <SoundDevice::getAudio(int, float*, float*)+0x107>
c00226e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00226e7:	50                   	push   eax
c00226e8:	50                   	push   eax
c00226e9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00226ed:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00226f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00226f4:	e8 80 46 00 00       	call   c0026d79 <__mulsf3>
c00226f9:	5a                   	pop    edx
c00226fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00226fe:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022704:	e8 5e 4a 00 00       	call   c0027167 <__floatsisf>
c0022709:	59                   	pop    ecx
c002270a:	5a                   	pop    edx
c002270b:	50                   	push   eax
c002270c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022710:	e8 27 48 00 00       	call   c0026f3c <__divsf3>
c0022715:	59                   	pop    ecx
c0022716:	5a                   	pop    edx
c0022717:	50                   	push   eax
c0022718:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002271c:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002271f:	e8 32 43 00 00       	call   c0026a56 <__addsf3>
c0022724:	83 c4 10             	add    esp,0x10
c0022727:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002272b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002272f:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022732:	45                   	inc    ebp
c0022733:	eb aa                	jmp    c00226df <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022735:	39 cf                	cmp    edi,ecx
c0022737:	7e 02                	jle    c002273b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022739:	89 cf                	mov    edi,ecx
c002273b:	43                   	inc    ebx
c002273c:	83 fb 20             	cmp    ebx,0x20
c002273f:	0f 85 10 ff ff ff    	jne    c0022655 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022745:	83 c4 1c             	add    esp,0x1c
c0022748:	89 f8                	mov    eax,edi
c002274a:	5b                   	pop    ebx
c002274b:	5e                   	pop    esi
c002274c:	5f                   	pop    edi
c002274d:	5d                   	pop    ebp
c002274e:	c3                   	ret    
c002274f:	90                   	nop

c0022750 <PCI::open(int, int, void*)>:
c0022750:	83 ec 18             	sub    esp,0x18
c0022753:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022757:	8b 10                	mov    edx,DWORD PTR [eax]
c0022759:	50                   	push   eax
c002275a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002275d:	31 c0                	xor    eax,eax
c002275f:	83 c4 1c             	add    esp,0x1c
c0022762:	c3                   	ret    
c0022763:	90                   	nop

c0022764 <PCI::close(int, int, void*)>:
c0022764:	31 c0                	xor    eax,eax
c0022766:	c3                   	ret    
c0022767:	90                   	nop

c0022768 <PCI::PCI()>:
c0022768:	83 ec 0c             	sub    esp,0xc
c002276b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002276f:	83 ec 08             	sub    esp,0x8
c0022772:	68 0c c8 02 c0       	push   0xc002c80c
c0022777:	50                   	push   eax
c0022778:	e8 b1 12 ff ff       	call   c0013a2e <Bus::Bus(char const*)>
c002277d:	83 c4 10             	add    esp,0x10
c0022780:	ba 78 c8 02 c0       	mov    edx,0xc002c878
c0022785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022789:	89 10                	mov    DWORD PTR [eax],edx
c002278b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002278f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022795:	0f b6 d0             	movzx  edx,al
c0022798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002279c:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00227a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227a7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00227ad:	0f b6 d0             	movzx  edx,al
c00227b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227b4:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00227b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227bd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00227c3:	8d 50 01             	lea    edx,[eax+0x1]
c00227c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00227ca:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00227d0:	0f b6 d0             	movzx  edx,al
c00227d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227d7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00227db:	83 c9 c0             	or     ecx,0xffffffc0
c00227de:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00227e2:	90                   	nop
c00227e3:	83 c4 0c             	add    esp,0xc
c00227e6:	c3                   	ret    
c00227e7:	90                   	nop

c00227e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00227e8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00227ec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00227f1:	89 ca                	mov    edx,ecx
c00227f3:	c1 e0 10             	shl    eax,0x10
c00227f6:	81 e2 fc 00 00 00    	and    edx,0xfc
c00227fc:	09 d0                	or     eax,edx
c00227fe:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022803:	c1 e2 08             	shl    edx,0x8
c0022806:	09 d0                	or     eax,edx
c0022808:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c002280d:	c1 e2 0b             	shl    edx,0xb
c0022810:	09 d0                	or     eax,edx
c0022812:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022817:	0d 00 00 00 80       	or     eax,0x80000000
c002281c:	ef                   	out    dx,eax
c002281d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022822:	ed                   	in     eax,dx
c0022823:	83 e1 02             	and    ecx,0x2
c0022826:	0f b6 c9             	movzx  ecx,cl
c0022829:	c1 e1 03             	shl    ecx,0x3
c002282c:	d3 e8                	shr    eax,cl
c002282e:	c3                   	ret    
c002282f:	90                   	nop

c0022830 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022830:	6a 00                	push   0x0
c0022832:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022837:	50                   	push   eax
c0022838:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002283d:	50                   	push   eax
c002283e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022843:	50                   	push   eax
c0022844:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022848:	e8 9b ff ff ff       	call   c00227e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002284d:	83 c4 14             	add    esp,0x14
c0022850:	c3                   	ret    
c0022851:	90                   	nop

c0022852 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022852:	6a 0e                	push   0xe
c0022854:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022859:	50                   	push   eax
c002285a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002285f:	50                   	push   eax
c0022860:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022865:	50                   	push   eax
c0022866:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002286a:	e8 79 ff ff ff       	call   c00227e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002286f:	83 c4 14             	add    esp,0x14
c0022872:	0f b6 c0             	movzx  eax,al
c0022875:	c3                   	ret    

c0022876 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022876:	55                   	push   ebp
c0022877:	57                   	push   edi
c0022878:	56                   	push   esi
c0022879:	53                   	push   ebx
c002287a:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002287f:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022884:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022889:	6a 0a                	push   0xa
c002288b:	56                   	push   esi
c002288c:	55                   	push   ebp
c002288d:	57                   	push   edi
c002288e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022892:	e8 51 ff ff ff       	call   c00227e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022897:	6a 0a                	push   0xa
c0022899:	89 c3                	mov    ebx,eax
c002289b:	56                   	push   esi
c002289c:	0f b6 db             	movzx  ebx,bl
c002289f:	55                   	push   ebp
c00228a0:	57                   	push   edi
c00228a1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00228a5:	e8 3e ff ff ff       	call   c00227e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228aa:	83 c4 28             	add    esp,0x28
c00228ad:	25 00 ff 00 00       	and    eax,0xff00
c00228b2:	09 d8                	or     eax,ebx
c00228b4:	5b                   	pop    ebx
c00228b5:	5e                   	pop    esi
c00228b6:	5f                   	pop    edi
c00228b7:	5d                   	pop    ebp
c00228b8:	c3                   	ret    
c00228b9:	90                   	nop

c00228ba <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00228ba:	6a 08                	push   0x8
c00228bc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228c1:	50                   	push   eax
c00228c2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228c7:	50                   	push   eax
c00228c8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228cd:	50                   	push   eax
c00228ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228d2:	e8 11 ff ff ff       	call   c00227e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228d7:	83 c4 14             	add    esp,0x14
c00228da:	0f b6 c4             	movzx  eax,ah
c00228dd:	c3                   	ret    

c00228de <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00228de:	6a 08                	push   0x8
c00228e0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228e5:	50                   	push   eax
c00228e6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228eb:	50                   	push   eax
c00228ec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228f1:	50                   	push   eax
c00228f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228f6:	e8 ed fe ff ff       	call   c00227e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228fb:	83 c4 14             	add    esp,0x14
c00228fe:	c3                   	ret    
c00228ff:	90                   	nop

c0022900 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022900:	6a 3c                	push   0x3c
c0022902:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022907:	50                   	push   eax
c0022908:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002290d:	50                   	push   eax
c002290e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022913:	50                   	push   eax
c0022914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022918:	e8 cb fe ff ff       	call   c00227e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002291d:	83 c4 14             	add    esp,0x14
c0022920:	c3                   	ret    
c0022921:	90                   	nop

c0022922 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022922:	6a 18                	push   0x18
c0022924:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022929:	50                   	push   eax
c002292a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002292f:	50                   	push   eax
c0022930:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022935:	50                   	push   eax
c0022936:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002293a:	e8 a9 fe ff ff       	call   c00227e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002293f:	83 c4 14             	add    esp,0x14
c0022942:	0f b6 c4             	movzx  eax,ah
c0022945:	c3                   	ret    

c0022946 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022946:	55                   	push   ebp
c0022947:	57                   	push   edi
c0022948:	56                   	push   esi
c0022949:	53                   	push   ebx
c002294a:	50                   	push   eax
c002294b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002294f:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022954:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022959:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c002295e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022965:	8d 43 12             	lea    eax,[ebx+0x12]
c0022968:	83 c3 10             	add    ebx,0x10
c002296b:	0f b6 c0             	movzx  eax,al
c002296e:	0f b6 db             	movzx  ebx,bl
c0022971:	50                   	push   eax
c0022972:	51                   	push   ecx
c0022973:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022977:	57                   	push   edi
c0022978:	55                   	push   ebp
c0022979:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002297d:	e8 66 fe ff ff       	call   c00227e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022982:	53                   	push   ebx
c0022983:	89 c6                	mov    esi,eax
c0022985:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022989:	c1 e6 10             	shl    esi,0x10
c002298c:	51                   	push   ecx
c002298d:	57                   	push   edi
c002298e:	55                   	push   ebp
c002298f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022993:	e8 50 fe ff ff       	call   c00227e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022998:	83 c4 2c             	add    esp,0x2c
c002299b:	0f b7 c0             	movzx  eax,ax
c002299e:	5b                   	pop    ebx
c002299f:	09 f0                	or     eax,esi
c00229a1:	5e                   	pop    esi
c00229a2:	5f                   	pop    edi
c00229a3:	5d                   	pop    ebp
c00229a4:	c3                   	ret    
c00229a5:	90                   	nop

c00229a6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00229a6:	53                   	push   ebx
c00229a7:	ba f8 0c 00 00       	mov    edx,0xcf8
c00229ac:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00229b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00229b5:	c1 e1 10             	shl    ecx,0x10
c00229b8:	25 fc 00 00 00       	and    eax,0xfc
c00229bd:	09 c1                	or     ecx,eax
c00229bf:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229c4:	c1 e0 08             	shl    eax,0x8
c00229c7:	09 c1                	or     ecx,eax
c00229c9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00229ce:	c1 e0 0b             	shl    eax,0xb
c00229d1:	09 c1                	or     ecx,eax
c00229d3:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00229d9:	89 c8                	mov    eax,ecx
c00229db:	ef                   	out    dx,eax
c00229dc:	ba fc 0c 00 00       	mov    edx,0xcfc
c00229e1:	ed                   	in     eax,dx
c00229e2:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00229e7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00229ec:	74 0a                	je     c00229f8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c00229ee:	0f b7 d8             	movzx  ebx,ax
c00229f1:	89 d0                	mov    eax,edx
c00229f3:	c1 e0 10             	shl    eax,0x10
c00229f6:	eb 05                	jmp    c00229fd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c00229f8:	66 31 c0             	xor    ax,ax
c00229fb:	89 d3                	mov    ebx,edx
c00229fd:	09 c3                	or     ebx,eax
c00229ff:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a04:	89 c8                	mov    eax,ecx
c0022a06:	ef                   	out    dx,eax
c0022a07:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a0c:	89 d8                	mov    eax,ebx
c0022a0e:	ef                   	out    dx,eax
c0022a0f:	5b                   	pop    ebx
c0022a10:	c3                   	ret    
c0022a11:	90                   	nop

c0022a12 <PCI::checkBus(unsigned char)>:
c0022a12:	56                   	push   esi
c0022a13:	53                   	push   ebx
c0022a14:	31 db                	xor    ebx,ebx
c0022a16:	51                   	push   ecx
c0022a17:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022a1c:	52                   	push   edx
c0022a1d:	53                   	push   ebx
c0022a1e:	43                   	inc    ebx
c0022a1f:	56                   	push   esi
c0022a20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a24:	e8 2b 03 00 00       	call   c0022d54 <PCI::checkDevice(unsigned char, unsigned char)>
c0022a29:	83 c4 10             	add    esp,0x10
c0022a2c:	83 fb 20             	cmp    ebx,0x20
c0022a2f:	75 eb                	jne    c0022a1c <PCI::checkBus(unsigned char)+0xa>
c0022a31:	58                   	pop    eax
c0022a32:	5b                   	pop    ebx
c0022a33:	5e                   	pop    esi
c0022a34:	c3                   	ret    
c0022a35:	90                   	nop

c0022a36 <PCI::foundDevice(PCIDeviceInfo)>:
c0022a36:	55                   	push   ebp
c0022a37:	57                   	push   edi
c0022a38:	56                   	push   esi
c0022a39:	53                   	push   ebx
c0022a3a:	83 ec 1c             	sub    esp,0x1c
c0022a3d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022a41:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022a47:	0f 84 52 01 00 00    	je     c0022b9f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022a4d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022a51:	66 81 f9 06 04       	cmp    cx,0x406
c0022a56:	75 2c                	jne    c0022a84 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022a58:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022a5d:	50                   	push   eax
c0022a5e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022a63:	50                   	push   eax
c0022a64:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022a69:	50                   	push   eax
c0022a6a:	56                   	push   esi
c0022a6b:	e8 b2 fe ff ff       	call   c0022922 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022a70:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022a74:	0f b6 c0             	movzx  eax,al
c0022a77:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022a7b:	83 c4 2c             	add    esp,0x2c
c0022a7e:	5b                   	pop    ebx
c0022a7f:	5e                   	pop    esi
c0022a80:	5f                   	pop    edi
c0022a81:	5d                   	pop    ebp
c0022a82:	eb 8e                	jmp    c0022a12 <PCI::checkBus(unsigned char)>
c0022a84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022a88:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022a8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a92:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022a96:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022a9a:	88 d3                	mov    bl,dl
c0022a9c:	85 c0                	test   eax,eax
c0022a9e:	74 33                	je     c0022ad3 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022aa0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022aa3:	85 d2                	test   edx,edx
c0022aa5:	74 28                	je     c0022acf <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022aa7:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022aad:	31 ef                	xor    edi,ebp
c0022aaf:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022ab5:	75 18                	jne    c0022acf <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022ab7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022abb:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022ac1:	75 0c                	jne    c0022acf <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022ac3:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022ac9:	0f 84 d0 00 00 00    	je     c0022b9f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022acf:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ad1:	eb c9                	jmp    c0022a9c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022ad3:	66 81 f9 01 06       	cmp    cx,0x601
c0022ad8:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022adc:	75 19                	jne    c0022af7 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022ade:	83 ec 0c             	sub    esp,0xc
c0022ae1:	68 64 01 00 00       	push   0x164
c0022ae6:	e8 55 cd fe ff       	call   c000f840 <malloc>
c0022aeb:	89 c5                	mov    ebp,eax
c0022aed:	89 04 24             	mov    DWORD PTR [esp],eax
c0022af0:	e8 95 0f 00 00       	call   c0023a8a <SATABus::SATABus()>
c0022af5:	eb 1e                	jmp    c0022b15 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022af7:	66 81 f9 01 01       	cmp    cx,0x101
c0022afc:	75 60                	jne    c0022b5e <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022afe:	83 ec 0c             	sub    esp,0xc
c0022b01:	68 70 02 00 00       	push   0x270
c0022b06:	e8 35 cd fe ff       	call   c000f840 <malloc>
c0022b0b:	89 c5                	mov    ebp,eax
c0022b0d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b10:	e8 03 03 00 00       	call   c0022e18 <IDE::IDE()>
c0022b15:	58                   	pop    eax
c0022b16:	5a                   	pop    edx
c0022b17:	55                   	push   ebp
c0022b18:	56                   	push   esi
c0022b19:	e8 9c 16 ff ff       	call   c00141ba <Device::addChild(Device*)>
c0022b1e:	83 ec 1c             	sub    esp,0x1c
c0022b21:	b9 09 00 00 00       	mov    ecx,0x9
c0022b26:	fc                   	cld    
c0022b27:	89 e7                	mov    edi,esp
c0022b29:	89 de                	mov    esi,ebx
c0022b2b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022b2d:	55                   	push   ebp
c0022b2e:	e8 91 15 ff ff       	call   c00140c4 <Device::preOpenPCI(PCIDeviceInfo)>
c0022b33:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022b36:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022b3a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022b42:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022b4a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022b52:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b55:	83 c4 4c             	add    esp,0x4c
c0022b58:	5b                   	pop    ebx
c0022b59:	5e                   	pop    esi
c0022b5a:	5f                   	pop    edi
c0022b5b:	5d                   	pop    ebp
c0022b5c:	ff e0                	jmp    eax
c0022b5e:	83 ec 0c             	sub    esp,0xc
c0022b61:	68 58 01 00 00       	push   0x158
c0022b66:	e8 d5 cc fe ff       	call   c000f840 <malloc>
c0022b6b:	89 c5                	mov    ebp,eax
c0022b6d:	58                   	pop    eax
c0022b6e:	5a                   	pop    edx
c0022b6f:	68 14 c8 02 c0       	push   0xc002c814
c0022b74:	55                   	push   ebp
c0022b75:	e8 36 19 ff ff       	call   c00144b0 <DriverlessDevice::DriverlessDevice(char const*)>
c0022b7a:	59                   	pop    ecx
c0022b7b:	5f                   	pop    edi
c0022b7c:	55                   	push   ebp
c0022b7d:	56                   	push   esi
c0022b7e:	e8 37 16 ff ff       	call   c00141ba <Device::addChild(Device*)>
c0022b83:	b9 09 00 00 00       	mov    ecx,0x9
c0022b88:	fc                   	cld    
c0022b89:	89 df                	mov    edi,ebx
c0022b8b:	89 de                	mov    esi,ebx
c0022b8d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022b8f:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022b93:	83 c4 2c             	add    esp,0x2c
c0022b96:	5b                   	pop    ebx
c0022b97:	5e                   	pop    esi
c0022b98:	5f                   	pop    edi
c0022b99:	5d                   	pop    ebp
c0022b9a:	e9 25 15 ff ff       	jmp    c00140c4 <Device::preOpenPCI(PCIDeviceInfo)>
c0022b9f:	83 c4 1c             	add    esp,0x1c
c0022ba2:	5b                   	pop    ebx
c0022ba3:	5e                   	pop    esi
c0022ba4:	5f                   	pop    edi
c0022ba5:	5d                   	pop    ebp
c0022ba6:	c3                   	ret    
c0022ba7:	90                   	nop

c0022ba8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022ba8:	55                   	push   ebp
c0022ba9:	57                   	push   edi
c0022baa:	56                   	push   esi
c0022bab:	53                   	push   ebx
c0022bac:	83 ec 5c             	sub    esp,0x5c
c0022baf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022bb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022bb7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022bbb:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022bc0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022bc4:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022bc8:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022bcd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022bd1:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022bd6:	6a 0c                	push   0xc
c0022bd8:	55                   	push   ebp
c0022bd9:	53                   	push   ebx
c0022bda:	57                   	push   edi
c0022bdb:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022be2:	e8 01 fc ff ff       	call   c00227e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022be7:	55                   	push   ebp
c0022be8:	53                   	push   ebx
c0022be9:	57                   	push   edi
c0022bea:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022bf1:	e8 80 fc ff ff       	call   c0022876 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022bf6:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022bfb:	83 c4 24             	add    esp,0x24
c0022bfe:	55                   	push   ebp
c0022bff:	53                   	push   ebx
c0022c00:	57                   	push   edi
c0022c01:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022c05:	e8 f6 fc ff ff       	call   c0022900 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022c0a:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022c0e:	6a 3c                	push   0x3c
c0022c10:	55                   	push   ebp
c0022c11:	53                   	push   ebx
c0022c12:	57                   	push   edi
c0022c13:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022c1a:	e8 c9 fb ff ff       	call   c00227e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c1f:	0f b6 c4             	movzx  eax,ah
c0022c22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022c26:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022c2a:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022c2e:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0022c33:	83 c4 24             	add    esp,0x24
c0022c36:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022c3c:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022c43:	74 6c                	je     c0022cb1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022c45:	31 f6                	xor    esi,esi
c0022c47:	8b 15 28 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e228
c0022c4d:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022c53:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022c59:	7e 56                	jle    c0022cb1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022c5b:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022c5e:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022c65:	39 cb                	cmp    ebx,ecx
c0022c67:	75 45                	jne    c0022cae <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022c69:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022c70:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022c74:	75 38                	jne    c0022cae <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022c76:	83 ec 0c             	sub    esp,0xc
c0022c79:	68 2e c8 02 c0       	push   0xc002c82e
c0022c7e:	e8 11 01 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0022c83:	8b 15 28 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e228
c0022c89:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022c8f:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022c97:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022c9b:	52                   	push   edx
c0022c9c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022ca0:	53                   	push   ebx
c0022ca1:	68 53 c8 02 c0       	push   0xc002c853
c0022ca6:	e8 e9 00 ff ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0022cab:	83 c4 20             	add    esp,0x20
c0022cae:	46                   	inc    esi
c0022caf:	eb 96                	jmp    c0022c47 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022cb1:	31 d2                	xor    edx,edx
c0022cb3:	83 ec 0c             	sub    esp,0xc
c0022cb6:	55                   	push   ebp
c0022cb7:	53                   	push   ebx
c0022cb8:	57                   	push   edi
c0022cb9:	52                   	push   edx
c0022cba:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022cbe:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022cc5:	e8 7c fc ff ff       	call   c0022946 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cca:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022cce:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022cd2:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022cd6:	42                   	inc    edx
c0022cd7:	83 c4 20             	add    esp,0x20
c0022cda:	83 fa 06             	cmp    edx,0x6
c0022cdd:	75 d4                	jne    c0022cb3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022cdf:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022ce3:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022ce7:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022ceb:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022cef:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022cf3:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022cf7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022cfc:	86 e0                	xchg   al,ah
c0022cfe:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022d03:	55                   	push   ebp
c0022d04:	53                   	push   ebx
c0022d05:	57                   	push   edi
c0022d06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022d0a:	e8 ab fb ff ff       	call   c00228ba <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022d0f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022d13:	55                   	push   ebp
c0022d14:	53                   	push   ebx
c0022d15:	57                   	push   edi
c0022d16:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022d1d:	e8 0e fb ff ff       	call   c0022830 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022d22:	83 ec 0c             	sub    esp,0xc
c0022d25:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022d2a:	b9 09 00 00 00       	mov    ecx,0x9
c0022d2f:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022d33:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022d37:	fc                   	cld    
c0022d38:	89 e7                	mov    edi,esp
c0022d3a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d3c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022d43:	e8 ee fc ff ff       	call   c0022a36 <PCI::foundDevice(PCIDeviceInfo)>
c0022d48:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022d4e:	5b                   	pop    ebx
c0022d4f:	5e                   	pop    esi
c0022d50:	5f                   	pop    edi
c0022d51:	5d                   	pop    ebp
c0022d52:	c3                   	ret    
c0022d53:	90                   	nop

c0022d54 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022d54:	55                   	push   ebp
c0022d55:	57                   	push   edi
c0022d56:	56                   	push   esi
c0022d57:	53                   	push   ebx
c0022d58:	83 ec 0c             	sub    esp,0xc
c0022d5b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022d5f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022d64:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022d69:	6a 00                	push   0x0
c0022d6b:	56                   	push   esi
c0022d6c:	57                   	push   edi
c0022d6d:	55                   	push   ebp
c0022d6e:	e8 bd fa ff ff       	call   c0022830 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022d73:	6a 00                	push   0x0
c0022d75:	56                   	push   esi
c0022d76:	57                   	push   edi
c0022d77:	55                   	push   ebp
c0022d78:	e8 2b fe ff ff       	call   c0022ba8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022d7d:	83 c4 20             	add    esp,0x20
c0022d80:	6a 00                	push   0x0
c0022d82:	56                   	push   esi
c0022d83:	57                   	push   edi
c0022d84:	55                   	push   ebp
c0022d85:	e8 c8 fa ff ff       	call   c0022852 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022d8a:	83 c4 10             	add    esp,0x10
c0022d8d:	84 c0                	test   al,al
c0022d8f:	79 27                	jns    c0022db8 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022d91:	bb 01 00 00 00       	mov    ebx,0x1
c0022d96:	53                   	push   ebx
c0022d97:	56                   	push   esi
c0022d98:	57                   	push   edi
c0022d99:	55                   	push   ebp
c0022d9a:	e8 91 fa ff ff       	call   c0022830 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022d9f:	83 c4 10             	add    esp,0x10
c0022da2:	66 40                	inc    ax
c0022da4:	74 0c                	je     c0022db2 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022da6:	53                   	push   ebx
c0022da7:	56                   	push   esi
c0022da8:	57                   	push   edi
c0022da9:	55                   	push   ebp
c0022daa:	e8 f9 fd ff ff       	call   c0022ba8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022daf:	83 c4 10             	add    esp,0x10
c0022db2:	43                   	inc    ebx
c0022db3:	83 fb 08             	cmp    ebx,0x8
c0022db6:	75 de                	jne    c0022d96 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022db8:	83 c4 0c             	add    esp,0xc
c0022dbb:	5b                   	pop    ebx
c0022dbc:	5e                   	pop    esi
c0022dbd:	5f                   	pop    edi
c0022dbe:	5d                   	pop    ebp
c0022dbf:	c3                   	ret    

c0022dc0 <PCI::detect()>:
c0022dc0:	56                   	push   esi
c0022dc1:	53                   	push   ebx
c0022dc2:	53                   	push   ebx
c0022dc3:	31 db                	xor    ebx,ebx
c0022dc5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022dc9:	6a 00                	push   0x0
c0022dcb:	6a 00                	push   0x0
c0022dcd:	6a 00                	push   0x0
c0022dcf:	56                   	push   esi
c0022dd0:	e8 7d fa ff ff       	call   c0022852 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022dd5:	83 c4 10             	add    esp,0x10
c0022dd8:	a8 80                	test   al,0x80
c0022dda:	75 21                	jne    c0022dfd <PCI::detect()+0x3d>
c0022ddc:	51                   	push   ecx
c0022ddd:	51                   	push   ecx
c0022dde:	6a 00                	push   0x0
c0022de0:	56                   	push   esi
c0022de1:	e8 2c fc ff ff       	call   c0022a12 <PCI::checkBus(unsigned char)>
c0022de6:	83 c4 10             	add    esp,0x10
c0022de9:	eb 24                	jmp    c0022e0f <PCI::detect()+0x4f>
c0022deb:	52                   	push   edx
c0022dec:	52                   	push   edx
c0022ded:	53                   	push   ebx
c0022dee:	43                   	inc    ebx
c0022def:	56                   	push   esi
c0022df0:	e8 1d fc ff ff       	call   c0022a12 <PCI::checkBus(unsigned char)>
c0022df5:	83 c4 10             	add    esp,0x10
c0022df8:	83 fb 08             	cmp    ebx,0x8
c0022dfb:	74 12                	je     c0022e0f <PCI::detect()+0x4f>
c0022dfd:	53                   	push   ebx
c0022dfe:	6a 00                	push   0x0
c0022e00:	6a 00                	push   0x0
c0022e02:	56                   	push   esi
c0022e03:	e8 28 fa ff ff       	call   c0022830 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e08:	83 c4 10             	add    esp,0x10
c0022e0b:	66 40                	inc    ax
c0022e0d:	74 dc                	je     c0022deb <PCI::detect()+0x2b>
c0022e0f:	58                   	pop    eax
c0022e10:	5b                   	pop    ebx
c0022e11:	5e                   	pop    esi
c0022e12:	c3                   	ret    
c0022e13:	90                   	nop

c0022e14 <IDE::close(int, int, void*)>:
c0022e14:	83 c8 ff             	or     eax,0xffffffff
c0022e17:	c3                   	ret    

c0022e18 <IDE::IDE()>:
c0022e18:	83 ec 0c             	sub    esp,0xc
c0022e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e1f:	83 ec 08             	sub    esp,0x8
c0022e22:	68 9c c8 02 c0       	push   0xc002c89c
c0022e27:	50                   	push   eax
c0022e28:	e8 19 17 ff ff       	call   c0014546 <HardDiskController::HardDiskController(char const*)>
c0022e2d:	83 c4 10             	add    esp,0x10
c0022e30:	ba dc ca 02 c0       	mov    edx,0xc002cadc
c0022e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e39:	89 10                	mov    DWORD PTR [eax],edx
c0022e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e3f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022e46:	90                   	nop
c0022e47:	83 c4 0c             	add    esp,0xc
c0022e4a:	c3                   	ret    
c0022e4b:	90                   	nop

c0022e4c <IDE::prepareInterrupt(unsigned char)>:
c0022e4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022e51:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022e55:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022e5d:	c3                   	ret    

c0022e5e <selectDrive(unsigned char, unsigned char)>:
c0022e5e:	c3                   	ret    
c0022e5f:	90                   	nop

c0022e60 <IDE::getBase(unsigned char)>:
c0022e60:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022e65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e69:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022e71:	c3                   	ret    

c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022e72:	55                   	push   ebp
c0022e73:	57                   	push   edi
c0022e74:	56                   	push   esi
c0022e75:	53                   	push   ebx
c0022e76:	83 ec 1c             	sub    esp,0x1c
c0022e79:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022e7d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022e81:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022e84:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022e88:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022e8c:	80 f9 03             	cmp    cl,0x3
c0022e8f:	77 51                	ja     c0022ee2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022e91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022e95:	0f b6 f2             	movzx  esi,dl
c0022e98:	0f b6 db             	movzx  ebx,bl
c0022e9b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022e9e:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022ea2:	83 ca 80             	or     edx,0xffffff80
c0022ea5:	0f b6 d2             	movzx  edx,dl
c0022ea8:	52                   	push   edx
c0022ea9:	6a 0c                	push   0xc
c0022eab:	56                   	push   esi
c0022eac:	57                   	push   edi
c0022ead:	e8 c0 ff ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022eb2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022eb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022ebb:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022ebf:	ee                   	out    dx,al
c0022ec0:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022ec5:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022ec9:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022ecd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022ed1:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022ed9:	83 c4 2c             	add    esp,0x2c
c0022edc:	5b                   	pop    ebx
c0022edd:	5e                   	pop    esi
c0022ede:	5f                   	pop    edi
c0022edf:	5d                   	pop    ebp
c0022ee0:	eb 90                	jmp    c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022ee2:	80 fb 07             	cmp    bl,0x7
c0022ee5:	77 12                	ja     c0022ef9 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022ee7:	0f b6 d2             	movzx  edx,dl
c0022eea:	0f b6 db             	movzx  ebx,bl
c0022eed:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022ef5:	89 da                	mov    edx,ebx
c0022ef7:	eb 2f                	jmp    c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022ef9:	80 fb 0d             	cmp    bl,0xd
c0022efc:	77 13                	ja     c0022f11 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022efe:	0f b6 d2             	movzx  edx,dl
c0022f01:	0f b6 db             	movzx  ebx,bl
c0022f04:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022f0b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022f0f:	eb 17                	jmp    c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022f11:	80 fb 15             	cmp    bl,0x15
c0022f14:	77 13                	ja     c0022f29 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022f16:	0f b6 d2             	movzx  edx,dl
c0022f19:	0f b6 db             	movzx  ebx,bl
c0022f1c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022f24:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022f28:	ee                   	out    dx,al
c0022f29:	83 c4 1c             	add    esp,0x1c
c0022f2c:	5b                   	pop    ebx
c0022f2d:	5e                   	pop    esi
c0022f2e:	5f                   	pop    edi
c0022f2f:	5d                   	pop    ebp
c0022f30:	c3                   	ret    
c0022f31:	90                   	nop

c0022f32 <IDE::read(unsigned char, unsigned char)>:
c0022f32:	55                   	push   ebp
c0022f33:	57                   	push   edi
c0022f34:	56                   	push   esi
c0022f35:	53                   	push   ebx
c0022f36:	83 ec 1c             	sub    esp,0x1c
c0022f39:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022f3d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022f41:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022f44:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022f48:	3c 03                	cmp    al,0x3
c0022f4a:	77 43                	ja     c0022f8f <IDE::read(unsigned char, unsigned char)+0x5d>
c0022f4c:	0f b6 f2             	movzx  esi,dl
c0022f4f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022f52:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022f56:	83 c8 80             	or     eax,0xffffff80
c0022f59:	0f b6 c0             	movzx  eax,al
c0022f5c:	50                   	push   eax
c0022f5d:	6a 0c                	push   0xc
c0022f5f:	56                   	push   esi
c0022f60:	57                   	push   edi
c0022f61:	e8 0c ff ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f66:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022f6b:	0f b6 c3             	movzx  eax,bl
c0022f6e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022f72:	ec                   	in     al,dx
c0022f73:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022f77:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022f7c:	52                   	push   edx
c0022f7d:	6a 0c                	push   0xc
c0022f7f:	56                   	push   esi
c0022f80:	57                   	push   edi
c0022f81:	e8 ec fe ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f86:	83 c4 20             	add    esp,0x20
c0022f89:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022f8d:	eb 49                	jmp    c0022fd8 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022f8f:	80 fb 07             	cmp    bl,0x7
c0022f92:	77 12                	ja     c0022fa6 <IDE::read(unsigned char, unsigned char)+0x74>
c0022f94:	0f b6 d2             	movzx  edx,dl
c0022f97:	0f b6 c3             	movzx  eax,bl
c0022f9a:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022fa2:	89 c2                	mov    edx,eax
c0022fa4:	eb 31                	jmp    c0022fd7 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022fa6:	80 fb 0d             	cmp    bl,0xd
c0022fa9:	77 13                	ja     c0022fbe <IDE::read(unsigned char, unsigned char)+0x8c>
c0022fab:	0f b6 d2             	movzx  edx,dl
c0022fae:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022fb5:	0f b6 d3             	movzx  edx,bl
c0022fb8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022fbc:	eb 19                	jmp    c0022fd7 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022fbe:	31 c0                	xor    eax,eax
c0022fc0:	80 fb 15             	cmp    bl,0x15
c0022fc3:	77 13                	ja     c0022fd8 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022fc5:	0f b6 d2             	movzx  edx,dl
c0022fc8:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022fd0:	0f b6 d3             	movzx  edx,bl
c0022fd3:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0022fd7:	ec                   	in     al,dx
c0022fd8:	83 c4 1c             	add    esp,0x1c
c0022fdb:	5b                   	pop    ebx
c0022fdc:	5e                   	pop    esi
c0022fdd:	5f                   	pop    edi
c0022fde:	5d                   	pop    ebp
c0022fdf:	c3                   	ret    

c0022fe0 <IDE::waitInterrupt(unsigned char)>:
c0022fe0:	55                   	push   ebp
c0022fe1:	57                   	push   edi
c0022fe2:	56                   	push   esi
c0022fe3:	53                   	push   ebx
c0022fe4:	31 db                	xor    ebx,ebx
c0022fe6:	83 ec 0c             	sub    esp,0xc
c0022fe9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022fed:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022ff2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0022ffa:	89 e8                	mov    eax,ebp
c0022ffc:	84 c0                	test   al,al
c0022ffe:	75 34                	jne    c0023034 <IDE::waitInterrupt(unsigned char)+0x54>
c0023000:	52                   	push   edx
c0023001:	6a 0c                	push   0xc
c0023003:	56                   	push   esi
c0023004:	57                   	push   edi
c0023005:	e8 28 ff ff ff       	call   c0022f32 <IDE::read(unsigned char, unsigned char)>
c002300a:	83 c4 10             	add    esp,0x10
c002300d:	a8 01                	test   al,0x1
c002300f:	75 2b                	jne    c002303c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023011:	f6 c3 04             	test   bl,0x4
c0023014:	75 16                	jne    c002302c <IDE::waitInterrupt(unsigned char)+0x4c>
c0023016:	83 fb 32             	cmp    ebx,0x32
c0023019:	7e 11                	jle    c002302c <IDE::waitInterrupt(unsigned char)+0x4c>
c002301b:	50                   	push   eax
c002301c:	50                   	push   eax
c002301d:	6a 00                	push   0x0
c002301f:	68 80 96 98 00       	push   0x989680
c0023024:	e8 5d b1 ff ff       	call   c001e186 <nanoSleep(unsigned long long)>
c0023029:	83 c4 10             	add    esp,0x10
c002302c:	83 fb 3c             	cmp    ebx,0x3c
c002302f:	74 0b                	je     c002303c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023031:	43                   	inc    ebx
c0023032:	eb be                	jmp    c0022ff2 <IDE::waitInterrupt(unsigned char)+0x12>
c0023034:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002303c:	83 c4 0c             	add    esp,0xc
c002303f:	89 e8                	mov    eax,ebp
c0023041:	5b                   	pop    ebx
c0023042:	5e                   	pop    esi
c0023043:	5f                   	pop    edi
c0023044:	5d                   	pop    ebp
c0023045:	c3                   	ret    

c0023046 <ideChannel0IRQHandler(regs*, void*)>:
c0023046:	83 ec 10             	sub    esp,0x10
c0023049:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002304d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023054:	6a 07                	push   0x7
c0023056:	6a 00                	push   0x0
c0023058:	50                   	push   eax
c0023059:	e8 d4 fe ff ff       	call   c0022f32 <IDE::read(unsigned char, unsigned char)>
c002305e:	83 c4 1c             	add    esp,0x1c
c0023061:	c3                   	ret    

c0023062 <ideChannel1IRQHandler(regs*, void*)>:
c0023062:	83 ec 10             	sub    esp,0x10
c0023065:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023069:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023070:	6a 07                	push   0x7
c0023072:	6a 01                	push   0x1
c0023074:	50                   	push   eax
c0023075:	e8 b8 fe ff ff       	call   c0022f32 <IDE::read(unsigned char, unsigned char)>
c002307a:	83 c4 1c             	add    esp,0x1c
c002307d:	c3                   	ret    

c002307e <IDE::enableIRQs(unsigned char, bool)>:
c002307e:	57                   	push   edi
c002307f:	56                   	push   esi
c0023080:	be 04 00 00 00       	mov    esi,0x4
c0023085:	53                   	push   ebx
c0023086:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002308b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002308f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023094:	0f 94 c0             	sete   al
c0023097:	d1 e0                	shl    eax,1
c0023099:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00230a0:	0f b6 c0             	movzx  eax,al
c00230a3:	50                   	push   eax
c00230a4:	6a 0c                	push   0xc
c00230a6:	57                   	push   edi
c00230a7:	53                   	push   ebx
c00230a8:	e8 c5 fd ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230ad:	83 c4 10             	add    esp,0x10
c00230b0:	50                   	push   eax
c00230b1:	6a 0c                	push   0xc
c00230b3:	57                   	push   edi
c00230b4:	53                   	push   ebx
c00230b5:	e8 78 fe ff ff       	call   c0022f32 <IDE::read(unsigned char, unsigned char)>
c00230ba:	83 c4 10             	add    esp,0x10
c00230bd:	4e                   	dec    esi
c00230be:	75 f0                	jne    c00230b0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00230c0:	5b                   	pop    ebx
c00230c1:	5e                   	pop    esi
c00230c2:	5f                   	pop    edi
c00230c3:	c3                   	ret    

c00230c4 <IDE::open(int, int, void*)>:
c00230c4:	55                   	push   ebp
c00230c5:	57                   	push   edi
c00230c6:	56                   	push   esi
c00230c7:	53                   	push   ebx
c00230c8:	83 ec 1c             	sub    esp,0x1c
c00230cb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00230cf:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00230d8:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00230e1:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00230e8:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00230ef:	0f 85 b0 02 00 00    	jne    c00233a5 <IDE::open(int, int, void*)+0x2e1>
c00230f5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00230fb:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00230ff:	83 e0 7f             	and    eax,0x7f
c0023102:	3c 05                	cmp    al,0x5
c0023104:	74 04                	je     c002310a <IDE::open(int, int, void*)+0x46>
c0023106:	3c 0f                	cmp    al,0xf
c0023108:	75 32                	jne    c002313c <IDE::open(int, int, void*)+0x78>
c002310a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023110:	83 e0 fc             	and    eax,0xfffffffc
c0023113:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002311a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023120:	83 e0 fc             	and    eax,0xfffffffc
c0023123:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002312a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023130:	83 e0 fc             	and    eax,0xfffffffc
c0023133:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002313a:	eb 14                	jmp    c0023150 <IDE::open(int, int, void*)+0x8c>
c002313c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023146:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023150:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023157:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002315e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023162:	89 c6                	mov    esi,eax
c0023164:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023169:	c1 e6 10             	shl    esi,0x10
c002316c:	89 e8                	mov    eax,ebp
c002316e:	89 fa                	mov    edx,edi
c0023170:	c1 e0 0b             	shl    eax,0xb
c0023173:	09 f0                	or     eax,esi
c0023175:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002317c:	c1 e6 08             	shl    esi,0x8
c002317f:	09 c6                	or     esi,eax
c0023181:	89 f0                	mov    eax,esi
c0023183:	0d 08 00 00 80       	or     eax,0x80000008
c0023188:	ef                   	out    dx,eax
c0023189:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002318e:	89 ca                	mov    edx,ecx
c0023190:	ed                   	in     eax,dx
c0023191:	c1 e8 10             	shr    eax,0x10
c0023194:	3d ff ff 00 00       	cmp    eax,0xffff
c0023199:	0f 84 f5 00 00 00    	je     c0023294 <IDE::open(int, int, void*)+0x1d0>
c002319f:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00231a5:	89 fa                	mov    edx,edi
c00231a7:	89 f0                	mov    eax,esi
c00231a9:	ef                   	out    dx,eax
c00231aa:	b0 fe                	mov    al,0xfe
c00231ac:	89 ca                	mov    edx,ecx
c00231ae:	ee                   	out    dx,al
c00231af:	89 f0                	mov    eax,esi
c00231b1:	89 fa                	mov    edx,edi
c00231b3:	ef                   	out    dx,eax
c00231b4:	89 ca                	mov    edx,ecx
c00231b6:	ed                   	in     eax,dx
c00231b7:	3c fe                	cmp    al,0xfe
c00231b9:	0f 85 a9 00 00 00    	jne    c0023268 <IDE::open(int, int, void*)+0x1a4>
c00231bf:	8b 15 28 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e228
c00231c5:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00231cc:	74 33                	je     c0023201 <IDE::open(int, int, void*)+0x13d>
c00231ce:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00231d4:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00231d8:	40                   	inc    eax
c00231d9:	83 ec 0c             	sub    esp,0xc
c00231dc:	0f b6 c0             	movzx  eax,al
c00231df:	50                   	push   eax
c00231e0:	55                   	push   ebp
c00231e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00231e5:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00231eb:	51                   	push   ecx
c00231ec:	e8 a1 4e ff ff       	call   c0018092 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00231f1:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00231f6:	83 c4 1c             	add    esp,0x1c
c00231f9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00231ff:	eb 0a                	jmp    c002320b <IDE::open(int, int, void*)+0x147>
c0023201:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002320b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023212:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023219:	c1 e1 10             	shl    ecx,0x10
c002321c:	c1 e0 08             	shl    eax,0x8
c002321f:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023224:	09 c1                	or     ecx,eax
c0023226:	89 fa                	mov    edx,edi
c0023228:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002322f:	c1 e0 0b             	shl    eax,0xb
c0023232:	09 c1                	or     ecx,eax
c0023234:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002323a:	89 c8                	mov    eax,ecx
c002323c:	ef                   	out    dx,eax
c002323d:	be fc 0c 00 00       	mov    esi,0xcfc
c0023242:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023248:	89 f2                	mov    edx,esi
c002324a:	ee                   	out    dx,al
c002324b:	89 c8                	mov    eax,ecx
c002324d:	89 fa                	mov    edx,edi
c002324f:	ef                   	out    dx,eax
c0023250:	89 f2                	mov    edx,esi
c0023252:	ed                   	in     eax,dx
c0023253:	0f b6 c0             	movzx  eax,al
c0023256:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002325c:	74 46                	je     c00232a4 <IDE::open(int, int, void*)+0x1e0>
c002325e:	83 ec 0c             	sub    esp,0xc
c0023261:	68 b4 c8 02 c0       	push   0xc002c8b4
c0023266:	eb 34                	jmp    c002329c <IDE::open(int, int, void*)+0x1d8>
c0023268:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023271:	75 17                	jne    c002328a <IDE::open(int, int, void*)+0x1c6>
c0023273:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023278:	74 07                	je     c0023281 <IDE::open(int, int, void*)+0x1bd>
c002327a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002327f:	75 09                	jne    c002328a <IDE::open(int, int, void*)+0x1c6>
c0023281:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023288:	eb 1a                	jmp    c00232a4 <IDE::open(int, int, void*)+0x1e0>
c002328a:	83 ec 0c             	sub    esp,0xc
c002328d:	68 bc c8 02 c0       	push   0xc002c8bc
c0023292:	eb 08                	jmp    c002329c <IDE::open(int, int, void*)+0x1d8>
c0023294:	83 ec 0c             	sub    esp,0xc
c0023297:	68 ed c8 02 c0       	push   0xc002c8ed
c002329c:	e8 9c 71 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c00232a1:	83 c4 10             	add    esp,0x10
c00232a4:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00232ab:	79 1a                	jns    c00232c7 <IDE::open(int, int, void*)+0x203>
c00232ad:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00232b3:	83 e0 fc             	and    eax,0xfffffffc
c00232b6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00232bd:	83 c0 08             	add    eax,0x8
c00232c0:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00232c7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00232cd:	89 c2                	mov    edx,eax
c00232cf:	83 e2 0f             	and    edx,0xf
c00232d2:	66 83 fa 08          	cmp    dx,0x8
c00232d6:	75 0a                	jne    c00232e2 <IDE::open(int, int, void*)+0x21e>
c00232d8:	83 e8 02             	sub    eax,0x2
c00232db:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00232e2:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00232e8:	89 c2                	mov    edx,eax
c00232ea:	83 e2 0f             	and    edx,0xf
c00232ed:	66 83 fa 08          	cmp    dx,0x8
c00232f1:	75 0a                	jne    c00232fd <IDE::open(int, int, void*)+0x239>
c00232f3:	83 e8 02             	sub    eax,0x2
c00232f6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00232fd:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023304:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002330b:	89 d0                	mov    eax,edx
c002330d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023310:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023314:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023318:	8d 4a 01             	lea    ecx,[edx+0x1]
c002331b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023320:	0f b6 c9             	movzx  ecx,cl
c0023323:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002332a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002332d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023331:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023335:	8d 50 02             	lea    edx,[eax+0x2]
c0023338:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002333d:	0f b6 d2             	movzx  edx,dl
c0023340:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023346:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023349:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002334d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023351:	8d 48 03             	lea    ecx,[eax+0x3]
c0023354:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023359:	0f b6 c9             	movzx  ecx,cl
c002335c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023362:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023365:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023369:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002336d:	8d 50 04             	lea    edx,[eax+0x4]
c0023370:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023376:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002337b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023382:	66 85 f6             	test   si,si
c0023385:	74 3e                	je     c00233c5 <IDE::open(int, int, void*)+0x301>
c0023387:	0f b6 d2             	movzx  edx,dl
c002338a:	83 c0 05             	add    eax,0x5
c002338d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023390:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023394:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023398:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002339e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00233a3:	eb 20                	jmp    c00233c5 <IDE::open(int, int, void*)+0x301>
c00233a5:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00233af:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00233b9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00233c0:	e9 02 ff ff ff       	jmp    c00232c7 <IDE::open(int, int, void*)+0x203>
c00233c5:	52                   	push   edx
c00233c6:	52                   	push   edx
c00233c7:	6a 00                	push   0x0
c00233c9:	53                   	push   ebx
c00233ca:	e8 7d fa ff ff       	call   c0022e4c <IDE::prepareInterrupt(unsigned char)>
c00233cf:	59                   	pop    ecx
c00233d0:	5e                   	pop    esi
c00233d1:	6a 01                	push   0x1
c00233d3:	53                   	push   ebx
c00233d4:	e8 73 fa ff ff       	call   c0022e4c <IDE::prepareInterrupt(unsigned char)>
c00233d9:	83 c4 0c             	add    esp,0xc
c00233dc:	6a 00                	push   0x0
c00233de:	6a 00                	push   0x0
c00233e0:	53                   	push   ebx
c00233e1:	e8 98 fc ff ff       	call   c002307e <IDE::enableIRQs(unsigned char, bool)>
c00233e6:	83 c4 0c             	add    esp,0xc
c00233e9:	6a 00                	push   0x0
c00233eb:	6a 01                	push   0x1
c00233ed:	53                   	push   ebx
c00233ee:	e8 8b fc ff ff       	call   c002307e <IDE::enableIRQs(unsigned char, bool)>
c00233f3:	83 c4 10             	add    esp,0x10
c00233f6:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00233fd:	74 40                	je     c002343f <IDE::open(int, int, void*)+0x37b>
c00233ff:	83 ec 0c             	sub    esp,0xc
c0023402:	68 17 c9 02 c0       	push   0xc002c917
c0023407:	e8 88 f9 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c002340c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002340f:	6a 01                	push   0x1
c0023411:	68 46 30 02 c0       	push   0xc0023046
c0023416:	6a 0e                	push   0xe
c0023418:	53                   	push   ebx
c0023419:	e8 20 0d ff ff       	call   c001413e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002341e:	83 c4 14             	add    esp,0x14
c0023421:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023427:	53                   	push   ebx
c0023428:	6a 01                	push   0x1
c002342a:	68 62 30 02 c0       	push   0xc0023062
c002342f:	6a 0f                	push   0xf
c0023431:	53                   	push   ebx
c0023432:	e8 07 0d ff ff       	call   c001413e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023437:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002343d:	eb 4a                	jmp    c0023489 <IDE::open(int, int, void*)+0x3c5>
c002343f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023449:	50                   	push   eax
c002344a:	6a 0f                	push   0xf
c002344c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023452:	68 33 c9 02 c0       	push   0xc002c933
c0023457:	e8 38 f9 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c002345c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002345f:	6a 00                	push   0x0
c0023461:	68 46 30 02 c0       	push   0xc0023046
c0023466:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002346c:	53                   	push   ebx
c002346d:	e8 cc 0c ff ff       	call   c001413e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023472:	83 c4 14             	add    esp,0x14
c0023475:	53                   	push   ebx
c0023476:	6a 00                	push   0x0
c0023478:	68 62 30 02 c0       	push   0xc0023062
c002347d:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023483:	53                   	push   ebx
c0023484:	e8 b5 0c ff ff       	call   c001413e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023489:	8b 03                	mov    eax,DWORD PTR [ebx]
c002348b:	83 c4 20             	add    esp,0x20
c002348e:	83 ec 0c             	sub    esp,0xc
c0023491:	53                   	push   ebx
c0023492:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023495:	83 c4 0c             	add    esp,0xc
c0023498:	6a 07                	push   0x7
c002349a:	6a 00                	push   0x0
c002349c:	53                   	push   ebx
c002349d:	e8 90 fa ff ff       	call   c0022f32 <IDE::read(unsigned char, unsigned char)>
c00234a2:	83 c4 0c             	add    esp,0xc
c00234a5:	6a 07                	push   0x7
c00234a7:	6a 01                	push   0x1
c00234a9:	53                   	push   ebx
c00234aa:	e8 83 fa ff ff       	call   c0022f32 <IDE::read(unsigned char, unsigned char)>
c00234af:	83 c4 0c             	add    esp,0xc
c00234b2:	6a 01                	push   0x1
c00234b4:	6a 00                	push   0x0
c00234b6:	53                   	push   ebx
c00234b7:	e8 c2 fb ff ff       	call   c002307e <IDE::enableIRQs(unsigned char, bool)>
c00234bc:	83 c4 0c             	add    esp,0xc
c00234bf:	6a 01                	push   0x1
c00234c1:	6a 01                	push   0x1
c00234c3:	53                   	push   ebx
c00234c4:	e8 b5 fb ff ff       	call   c002307e <IDE::enableIRQs(unsigned char, bool)>
c00234c9:	83 c4 2c             	add    esp,0x2c
c00234cc:	31 c0                	xor    eax,eax
c00234ce:	5b                   	pop    ebx
c00234cf:	5e                   	pop    esi
c00234d0:	5f                   	pop    edi
c00234d1:	5d                   	pop    ebp
c00234d2:	c3                   	ret    
c00234d3:	90                   	nop

c00234d4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00234d4:	55                   	push   ebp
c00234d5:	57                   	push   edi
c00234d6:	56                   	push   esi
c00234d7:	53                   	push   ebx
c00234d8:	83 ec 1c             	sub    esp,0x1c
c00234db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00234df:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00234e3:	8d 50 f8             	lea    edx,[eax-0x8]
c00234e6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00234ea:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00234ee:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00234f2:	80 fa 03             	cmp    dl,0x3
c00234f5:	77 5d                	ja     c0023554 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00234f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00234fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00234ff:	0f b6 db             	movzx  ebx,bl
c0023502:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023505:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023509:	83 ca 80             	or     edx,0xffffff80
c002350c:	0f b6 d2             	movzx  edx,dl
c002350f:	52                   	push   edx
c0023510:	6a 0c                	push   0xc
c0023512:	53                   	push   ebx
c0023513:	56                   	push   esi
c0023514:	e8 59 f9 ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023519:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002351e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023522:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023526:	0f b6 c0             	movzx  eax,al
c0023529:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002352d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002352f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023534:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023538:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002353c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023540:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023548:	83 c4 2c             	add    esp,0x2c
c002354b:	5b                   	pop    ebx
c002354c:	5e                   	pop    esi
c002354d:	5f                   	pop    edi
c002354e:	5d                   	pop    ebp
c002354f:	e9 1e f9 ff ff       	jmp    c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023554:	3c 07                	cmp    al,0x7
c0023556:	77 10                	ja     c0023568 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023558:	0f b6 db             	movzx  ebx,bl
c002355b:	0f b6 d0             	movzx  edx,al
c002355e:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023566:	eb 2d                	jmp    c0023595 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023568:	3c 0d                	cmp    al,0xd
c002356a:	77 13                	ja     c002357f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002356c:	0f b6 db             	movzx  ebx,bl
c002356f:	0f b6 c0             	movzx  eax,al
c0023572:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023579:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002357d:	eb 16                	jmp    c0023595 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002357f:	3c 15                	cmp    al,0x15
c0023581:	77 14                	ja     c0023597 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023583:	0f b6 db             	movzx  ebx,bl
c0023586:	0f b6 c0             	movzx  eax,al
c0023589:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023591:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023595:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023597:	83 c4 1c             	add    esp,0x1c
c002359a:	5b                   	pop    ebx
c002359b:	5e                   	pop    esi
c002359c:	5f                   	pop    edi
c002359d:	5d                   	pop    ebp
c002359e:	c3                   	ret    
c002359f:	90                   	nop

c00235a0 <IDE::detect()>:
c00235a0:	55                   	push   ebp
c00235a1:	57                   	push   edi
c00235a2:	56                   	push   esi
c00235a3:	53                   	push   ebx
c00235a4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00235aa:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00235b1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00235b8:	0f 85 be 02 00 00    	jne    c002387c <IDE::detect()+0x2dc>
c00235be:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00235c5:	31 f6                	xor    esi,esi
c00235c7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00235cf:	31 ed                	xor    ebp,ebp
c00235d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235d5:	c1 e0 06             	shl    eax,0x6
c00235d8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00235e0:	89 e8                	mov    eax,ebp
c00235e2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00235e6:	c1 e0 04             	shl    eax,0x4
c00235e9:	83 c8 a0             	or     eax,0xffffffa0
c00235ec:	0f b6 c0             	movzx  eax,al
c00235ef:	50                   	push   eax
c00235f0:	6a 06                	push   0x6
c00235f2:	56                   	push   esi
c00235f3:	53                   	push   ebx
c00235f4:	e8 79 f8 ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235f9:	83 c4 0c             	add    esp,0xc
c00235fc:	6a 0c                	push   0xc
c00235fe:	56                   	push   esi
c00235ff:	53                   	push   ebx
c0023600:	e8 2d f9 ff ff       	call   c0022f32 <IDE::read(unsigned char, unsigned char)>
c0023605:	83 c4 0c             	add    esp,0xc
c0023608:	6a 0c                	push   0xc
c002360a:	56                   	push   esi
c002360b:	53                   	push   ebx
c002360c:	e8 21 f9 ff ff       	call   c0022f32 <IDE::read(unsigned char, unsigned char)>
c0023611:	83 c4 0c             	add    esp,0xc
c0023614:	6a 0c                	push   0xc
c0023616:	56                   	push   esi
c0023617:	53                   	push   ebx
c0023618:	e8 15 f9 ff ff       	call   c0022f32 <IDE::read(unsigned char, unsigned char)>
c002361d:	83 c4 0c             	add    esp,0xc
c0023620:	6a 0c                	push   0xc
c0023622:	56                   	push   esi
c0023623:	53                   	push   ebx
c0023624:	e8 09 f9 ff ff       	call   c0022f32 <IDE::read(unsigned char, unsigned char)>
c0023629:	68 ec 00 00 00       	push   0xec
c002362e:	6a 07                	push   0x7
c0023630:	56                   	push   esi
c0023631:	53                   	push   ebx
c0023632:	e8 3b f8 ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023637:	83 c4 1c             	add    esp,0x1c
c002363a:	6a 0c                	push   0xc
c002363c:	56                   	push   esi
c002363d:	53                   	push   ebx
c002363e:	e8 ef f8 ff ff       	call   c0022f32 <IDE::read(unsigned char, unsigned char)>
c0023643:	83 c4 0c             	add    esp,0xc
c0023646:	6a 0c                	push   0xc
c0023648:	56                   	push   esi
c0023649:	53                   	push   ebx
c002364a:	e8 e3 f8 ff ff       	call   c0022f32 <IDE::read(unsigned char, unsigned char)>
c002364f:	83 c4 0c             	add    esp,0xc
c0023652:	6a 0c                	push   0xc
c0023654:	56                   	push   esi
c0023655:	53                   	push   ebx
c0023656:	e8 d7 f8 ff ff       	call   c0022f32 <IDE::read(unsigned char, unsigned char)>
c002365b:	83 c4 0c             	add    esp,0xc
c002365e:	6a 0c                	push   0xc
c0023660:	56                   	push   esi
c0023661:	53                   	push   ebx
c0023662:	e8 cb f8 ff ff       	call   c0022f32 <IDE::read(unsigned char, unsigned char)>
c0023667:	83 c4 0c             	add    esp,0xc
c002366a:	6a 0c                	push   0xc
c002366c:	56                   	push   esi
c002366d:	53                   	push   ebx
c002366e:	e8 bf f8 ff ff       	call   c0022f32 <IDE::read(unsigned char, unsigned char)>
c0023673:	83 c4 10             	add    esp,0x10
c0023676:	84 c0                	test   al,al
c0023678:	0f 84 8b 01 00 00    	je     c0023809 <IDE::detect()+0x269>
c002367e:	31 ff                	xor    edi,edi
c0023680:	50                   	push   eax
c0023681:	6a 0c                	push   0xc
c0023683:	56                   	push   esi
c0023684:	53                   	push   ebx
c0023685:	e8 a8 f8 ff ff       	call   c0022f32 <IDE::read(unsigned char, unsigned char)>
c002368a:	83 c4 10             	add    esp,0x10
c002368d:	a8 01                	test   al,0x1
c002368f:	0f 85 8e 01 00 00    	jne    c0023823 <IDE::detect()+0x283>
c0023695:	84 c0                	test   al,al
c0023697:	78 04                	js     c002369d <IDE::detect()+0xfd>
c0023699:	a8 08                	test   al,0x8
c002369b:	75 27                	jne    c00236c4 <IDE::detect()+0x124>
c002369d:	47                   	inc    edi
c002369e:	81 ff 17 01 00 00    	cmp    edi,0x117
c00236a4:	7e da                	jle    c0023680 <IDE::detect()+0xe0>
c00236a6:	50                   	push   eax
c00236a7:	50                   	push   eax
c00236a8:	6a 00                	push   0x0
c00236aa:	68 40 4b 4c 00       	push   0x4c4b40
c00236af:	e8 d2 aa ff ff       	call   c001e186 <nanoSleep(unsigned long long)>
c00236b4:	83 c4 10             	add    esp,0x10
c00236b7:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00236bd:	75 c1                	jne    c0023680 <IDE::detect()+0xe0>
c00236bf:	e9 5f 01 00 00       	jmp    c0023823 <IDE::detect()+0x283>
c00236c4:	31 c9                	xor    ecx,ecx
c00236c6:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00236ca:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00236ce:	83 ec 0c             	sub    esp,0xc
c00236d1:	68 80 00 00 00       	push   0x80
c00236d6:	57                   	push   edi
c00236d7:	6a 00                	push   0x0
c00236d9:	56                   	push   esi
c00236da:	53                   	push   ebx
c00236db:	e8 f4 fd ff ff       	call   c00234d4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00236e0:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00236e5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00236e9:	89 d1                	mov    ecx,edx
c00236eb:	c1 e0 06             	shl    eax,0x6
c00236ee:	01 d8                	add    eax,ebx
c00236f0:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00236f7:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00236fe:	89 f2                	mov    edx,esi
c0023700:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023706:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002370a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023710:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023714:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002371b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023723:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002372a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023732:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023738:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002373f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023745:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023749:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002374d:	83 c4 20             	add    esp,0x20
c0023750:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023753:	83 c0 02             	add    eax,0x2
c0023756:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002375c:	83 c7 02             	add    edi,0x2
c002375f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023762:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023768:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002376c:	75 e2                	jne    c0023750 <IDE::detect()+0x1b0>
c002376e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023772:	c1 e0 06             	shl    eax,0x6
c0023775:	01 d8                	add    eax,ebx
c0023777:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002377d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023784:	66 c1 ea 09          	shr    dx,0x9
c0023788:	83 e2 01             	and    edx,0x1
c002378b:	84 c9                	test   cl,cl
c002378d:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023793:	75 2f                	jne    c00237c4 <IDE::detect()+0x224>
c0023795:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002379b:	85 c0                	test   eax,eax
c002379d:	74 66                	je     c0023805 <IDE::detect()+0x265>
c002379f:	50                   	push   eax
c00237a0:	55                   	push   ebp
c00237a1:	56                   	push   esi
c00237a2:	68 4f c9 02 c0       	push   0xc002c94f
c00237a7:	e8 e8 f5 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00237ac:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00237b3:	e8 88 c0 fe ff       	call   c000f840 <malloc>
c00237b8:	89 c7                	mov    edi,eax
c00237ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00237bd:	e8 78 06 00 00       	call   c0023e3a <ATA::ATA()>
c00237c2:	eb 28                	jmp    c00237ec <IDE::detect()+0x24c>
c00237c4:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00237ca:	55                   	push   ebp
c00237cb:	56                   	push   esi
c00237cc:	68 7e c9 02 c0       	push   0xc002c97e
c00237d1:	e8 be f5 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00237d6:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00237dd:	e8 5e c0 fe ff       	call   c000f840 <malloc>
c00237e2:	89 c7                	mov    edi,eax
c00237e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00237e7:	e8 8e 0c 00 00       	call   c002447a <ATAPI::ATAPI()>
c00237ec:	5a                   	pop    edx
c00237ed:	59                   	pop    ecx
c00237ee:	57                   	push   edi
c00237ef:	53                   	push   ebx
c00237f0:	e8 c5 09 ff ff       	call   c00141ba <Device::addChild(Device*)>
c00237f5:	8b 07                	mov    eax,DWORD PTR [edi]
c00237f7:	53                   	push   ebx
c00237f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00237fc:	6a 00                	push   0x0
c00237fe:	57                   	push   edi
c00237ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023802:	83 c4 20             	add    esp,0x20
c0023805:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023809:	4d                   	dec    ebp
c002380a:	74 0a                	je     c0023816 <IDE::detect()+0x276>
c002380c:	bd 01 00 00 00       	mov    ebp,0x1
c0023811:	e9 bb fd ff ff       	jmp    c00235d1 <IDE::detect()+0x31>
c0023816:	4e                   	dec    esi
c0023817:	74 63                	je     c002387c <IDE::detect()+0x2dc>
c0023819:	be 01 00 00 00       	mov    esi,0x1
c002381e:	e9 ac fd ff ff       	jmp    c00235cf <IDE::detect()+0x2f>
c0023823:	50                   	push   eax
c0023824:	6a 04                	push   0x4
c0023826:	56                   	push   esi
c0023827:	53                   	push   ebx
c0023828:	e8 05 f7 ff ff       	call   c0022f32 <IDE::read(unsigned char, unsigned char)>
c002382d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023831:	83 c4 0c             	add    esp,0xc
c0023834:	6a 05                	push   0x5
c0023836:	56                   	push   esi
c0023837:	53                   	push   ebx
c0023838:	e8 f5 f6 ff ff       	call   c0022f32 <IDE::read(unsigned char, unsigned char)>
c002383d:	83 c4 10             	add    esp,0x10
c0023840:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023844:	80 fa 14             	cmp    dl,0x14
c0023847:	75 04                	jne    c002384d <IDE::detect()+0x2ad>
c0023849:	3c eb                	cmp    al,0xeb
c002384b:	eb 07                	jmp    c0023854 <IDE::detect()+0x2b4>
c002384d:	3c 96                	cmp    al,0x96
c002384f:	75 b8                	jne    c0023809 <IDE::detect()+0x269>
c0023851:	80 fa 69             	cmp    dl,0x69
c0023854:	75 b3                	jne    c0023809 <IDE::detect()+0x269>
c0023856:	68 a1 00 00 00       	push   0xa1
c002385b:	6a 07                	push   0x7
c002385d:	56                   	push   esi
c002385e:	53                   	push   ebx
c002385f:	e8 0e f6 ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023864:	5f                   	pop    edi
c0023865:	58                   	pop    eax
c0023866:	6a 00                	push   0x0
c0023868:	68 40 42 0f 00       	push   0xf4240
c002386d:	e8 14 a9 ff ff       	call   c001e186 <nanoSleep(unsigned long long)>
c0023872:	83 c4 10             	add    esp,0x10
c0023875:	b1 01                	mov    cl,0x1
c0023877:	e9 4a fe ff ff       	jmp    c00236c6 <IDE::detect()+0x126>
c002387c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023882:	5b                   	pop    ebx
c0023883:	5e                   	pop    esi
c0023884:	5f                   	pop    edi
c0023885:	5d                   	pop    ebp
c0023886:	c3                   	ret    
c0023887:	90                   	nop

c0023888 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023888:	55                   	push   ebp
c0023889:	57                   	push   edi
c002388a:	56                   	push   esi
c002388b:	53                   	push   ebx
c002388c:	83 ec 1c             	sub    esp,0x1c
c002388f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023893:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023897:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002389b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c002389f:	88 c3                	mov    bl,al
c00238a1:	84 c0                	test   al,al
c00238a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00238a7:	0f 84 67 01 00 00    	je     c0023a14 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00238ad:	83 ec 0c             	sub    esp,0xc
c00238b0:	68 af c9 02 c0       	push   0xc002c9af
c00238b5:	e8 da f4 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00238ba:	83 c4 10             	add    esp,0x10
c00238bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00238c1:	3c 01                	cmp    al,0x1
c00238c3:	75 17                	jne    c00238dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00238c5:	83 ec 0c             	sub    esp,0xc
c00238c8:	b3 13                	mov    bl,0x13
c00238ca:	68 bb c9 02 c0       	push   0xc002c9bb
c00238cf:	e8 c0 f4 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00238d4:	83 c4 10             	add    esp,0x10
c00238d7:	e9 25 01 00 00       	jmp    c0023a01 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00238dc:	3c 02                	cmp    al,0x2
c00238de:	0f 85 ef 00 00 00    	jne    c00239d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c00238e4:	d1 e6                	shl    esi,1
c00238e6:	09 ee                	or     esi,ebp
c00238e8:	52                   	push   edx
c00238e9:	89 f0                	mov    eax,esi
c00238eb:	6a 01                	push   0x1
c00238ed:	0f b6 f0             	movzx  esi,al
c00238f0:	c1 e6 06             	shl    esi,0x6
c00238f3:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00238fb:	50                   	push   eax
c00238fc:	57                   	push   edi
c00238fd:	e8 30 f6 ff ff       	call   c0022f32 <IDE::read(unsigned char, unsigned char)>
c0023902:	83 c4 10             	add    esp,0x10
c0023905:	89 c6                	mov    esi,eax
c0023907:	a8 01                	test   al,0x1
c0023909:	74 12                	je     c002391d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c002390b:	83 ec 0c             	sub    esp,0xc
c002390e:	b3 07                	mov    bl,0x7
c0023910:	68 d0 c9 02 c0       	push   0xc002c9d0
c0023915:	e8 7a f4 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c002391a:	83 c4 10             	add    esp,0x10
c002391d:	f7 c6 02 00 00 00    	test   esi,0x2
c0023923:	74 12                	je     c0023937 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023925:	83 ec 0c             	sub    esp,0xc
c0023928:	b3 03                	mov    bl,0x3
c002392a:	68 ee c9 02 c0       	push   0xc002c9ee
c002392f:	e8 60 f4 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0023934:	83 c4 10             	add    esp,0x10
c0023937:	f7 c6 04 00 00 00    	test   esi,0x4
c002393d:	74 12                	je     c0023951 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c002393f:	83 ec 0c             	sub    esp,0xc
c0023942:	b3 14                	mov    bl,0x14
c0023944:	68 0e ca 02 c0       	push   0xc002ca0e
c0023949:	e8 46 f4 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c002394e:	83 c4 10             	add    esp,0x10
c0023951:	f7 c6 08 00 00 00    	test   esi,0x8
c0023957:	74 12                	je     c002396b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023959:	83 ec 0c             	sub    esp,0xc
c002395c:	b3 03                	mov    bl,0x3
c002395e:	68 ee c9 02 c0       	push   0xc002c9ee
c0023963:	e8 2c f4 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0023968:	83 c4 10             	add    esp,0x10
c002396b:	f7 c6 10 00 00 00    	test   esi,0x10
c0023971:	74 12                	je     c0023985 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023973:	83 ec 0c             	sub    esp,0xc
c0023976:	b3 15                	mov    bl,0x15
c0023978:	68 26 ca 02 c0       	push   0xc002ca26
c002397d:	e8 12 f4 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0023982:	83 c4 10             	add    esp,0x10
c0023985:	f7 c6 20 00 00 00    	test   esi,0x20
c002398b:	74 12                	je     c002399f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c002398d:	83 ec 0c             	sub    esp,0xc
c0023990:	b3 03                	mov    bl,0x3
c0023992:	68 ee c9 02 c0       	push   0xc002c9ee
c0023997:	e8 f8 f3 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c002399c:	83 c4 10             	add    esp,0x10
c002399f:	f7 c6 40 00 00 00    	test   esi,0x40
c00239a5:	74 12                	je     c00239b9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00239a7:	83 ec 0c             	sub    esp,0xc
c00239aa:	b3 16                	mov    bl,0x16
c00239ac:	68 40 ca 02 c0       	push   0xc002ca40
c00239b1:	e8 de f3 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00239b6:	83 c4 10             	add    esp,0x10
c00239b9:	89 f0                	mov    eax,esi
c00239bb:	84 c0                	test   al,al
c00239bd:	79 42                	jns    c0023a01 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00239bf:	83 ec 0c             	sub    esp,0xc
c00239c2:	b3 0d                	mov    bl,0xd
c00239c4:	68 61 ca 02 c0       	push   0xc002ca61
c00239c9:	e8 c6 f3 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00239ce:	83 c4 10             	add    esp,0x10
c00239d1:	eb 2e                	jmp    c0023a01 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00239d3:	3c 03                	cmp    al,0x3
c00239d5:	75 14                	jne    c00239eb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c00239d7:	83 ec 0c             	sub    esp,0xc
c00239da:	b3 17                	mov    bl,0x17
c00239dc:	68 75 ca 02 c0       	push   0xc002ca75
c00239e1:	e8 ae f3 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00239e6:	83 c4 10             	add    esp,0x10
c00239e9:	eb 16                	jmp    c0023a01 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00239eb:	3c 04                	cmp    al,0x4
c00239ed:	75 12                	jne    c0023a01 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00239ef:	83 ec 0c             	sub    esp,0xc
c00239f2:	b3 08                	mov    bl,0x8
c00239f4:	68 8b ca 02 c0       	push   0xc002ca8b
c00239f9:	e8 96 f3 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00239fe:	83 c4 10             	add    esp,0x10
c0023a01:	50                   	push   eax
c0023a02:	50                   	push   eax
c0023a03:	0f b6 c3             	movzx  eax,bl
c0023a06:	50                   	push   eax
c0023a07:	68 a3 ca 02 c0       	push   0xc002caa3
c0023a0c:	e8 83 f3 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0023a11:	83 c4 10             	add    esp,0x10
c0023a14:	83 c4 1c             	add    esp,0x1c
c0023a17:	88 d8                	mov    al,bl
c0023a19:	5b                   	pop    ebx
c0023a1a:	5e                   	pop    esi
c0023a1b:	5f                   	pop    edi
c0023a1c:	5d                   	pop    ebp
c0023a1d:	c3                   	ret    

c0023a1e <IDE::polling(unsigned char, unsigned int)>:
c0023a1e:	57                   	push   edi
c0023a1f:	56                   	push   esi
c0023a20:	53                   	push   ebx
c0023a21:	bb 04 00 00 00       	mov    ebx,0x4
c0023a26:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023a2a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023a2f:	52                   	push   edx
c0023a30:	6a 0c                	push   0xc
c0023a32:	56                   	push   esi
c0023a33:	57                   	push   edi
c0023a34:	e8 f9 f4 ff ff       	call   c0022f32 <IDE::read(unsigned char, unsigned char)>
c0023a39:	83 c4 10             	add    esp,0x10
c0023a3c:	4b                   	dec    ebx
c0023a3d:	75 f0                	jne    c0023a2f <IDE::polling(unsigned char, unsigned int)+0x11>
c0023a3f:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023a44:	50                   	push   eax
c0023a45:	6a 0c                	push   0xc
c0023a47:	56                   	push   esi
c0023a48:	57                   	push   edi
c0023a49:	e8 e4 f4 ff ff       	call   c0022f32 <IDE::read(unsigned char, unsigned char)>
c0023a4e:	83 c4 10             	add    esp,0x10
c0023a51:	a8 01                	test   al,0x1
c0023a53:	74 12                	je     c0023a67 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023a55:	83 ec 0c             	sub    esp,0xc
c0023a58:	68 bd ca 02 c0       	push   0xc002cabd
c0023a5d:	e8 32 f3 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0023a62:	83 c4 10             	add    esp,0x10
c0023a65:	eb 17                	jmp    c0023a7e <IDE::polling(unsigned char, unsigned int)+0x60>
c0023a67:	a8 20                	test   al,0x20
c0023a69:	75 0f                	jne    c0023a7a <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023a6b:	4b                   	dec    ebx
c0023a6c:	74 10                	je     c0023a7e <IDE::polling(unsigned char, unsigned int)+0x60>
c0023a6e:	84 c0                	test   al,al
c0023a70:	78 d2                	js     c0023a44 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023a72:	a8 08                	test   al,0x8
c0023a74:	74 ce                	je     c0023a44 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023a76:	31 c0                	xor    eax,eax
c0023a78:	eb 06                	jmp    c0023a80 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023a7a:	b0 01                	mov    al,0x1
c0023a7c:	eb 02                	jmp    c0023a80 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023a7e:	b0 02                	mov    al,0x2
c0023a80:	5b                   	pop    ebx
c0023a81:	5e                   	pop    esi
c0023a82:	5f                   	pop    edi
c0023a83:	c3                   	ret    

c0023a84 <SATABus::close(int, int, void*)>:
c0023a84:	31 c0                	xor    eax,eax
c0023a86:	c3                   	ret    
c0023a87:	90                   	nop

c0023a88 <SATABus::detect()>:
c0023a88:	c3                   	ret    
c0023a89:	90                   	nop

c0023a8a <SATABus::SATABus()>:
c0023a8a:	83 ec 0c             	sub    esp,0xc
c0023a8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a91:	83 ec 08             	sub    esp,0x8
c0023a94:	68 00 cb 02 c0       	push   0xc002cb00
c0023a99:	50                   	push   eax
c0023a9a:	e8 a7 0a ff ff       	call   c0014546 <HardDiskController::HardDiskController(char const*)>
c0023a9f:	83 c4 10             	add    esp,0x10
c0023aa2:	ba bc cb 02 c0       	mov    edx,0xc002cbbc
c0023aa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023aab:	89 10                	mov    DWORD PTR [eax],edx
c0023aad:	83 ec 0c             	sub    esp,0xc
c0023ab0:	6a 50                	push   0x50
c0023ab2:	e8 07 c5 fe ff       	call   c000ffbe <Phys::allocateContiguousPages(int)>
c0023ab7:	83 c4 10             	add    esp,0x10
c0023aba:	89 c2                	mov    edx,eax
c0023abc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ac0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023ac6:	83 ec 0c             	sub    esp,0xc
c0023ac9:	6a 50                	push   0x50
c0023acb:	e8 67 e0 fe ff       	call   c0011b37 <Virt::allocateKernelVirtualPages(int)>
c0023ad0:	83 c4 10             	add    esp,0x10
c0023ad3:	89 c2                	mov    edx,eax
c0023ad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ad9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023adf:	e8 fa e2 fe ff       	call   c0011dde <Virt::getAKernelVAS()>
c0023ae4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023ae8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023aee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023af2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023af8:	83 ec 0c             	sub    esp,0xc
c0023afb:	6a 03                	push   0x3
c0023afd:	6a 50                	push   0x50
c0023aff:	51                   	push   ecx
c0023b00:	52                   	push   edx
c0023b01:	50                   	push   eax
c0023b02:	e8 ed e9 fe ff       	call   c00124f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023b07:	83 c4 20             	add    esp,0x20
c0023b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b0e:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b18:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023b1e:	83 ec 04             	sub    esp,0x4
c0023b21:	52                   	push   edx
c0023b22:	50                   	push   eax
c0023b23:	68 24 cb 02 c0       	push   0xc002cb24
c0023b28:	e8 67 f2 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0023b2d:	83 c4 10             	add    esp,0x10
c0023b30:	90                   	nop
c0023b31:	83 c4 0c             	add    esp,0xc
c0023b34:	c3                   	ret    
c0023b35:	90                   	nop

c0023b36 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023b36:	83 ec 0c             	sub    esp,0xc
c0023b39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023b3d:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023b40:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023b43:	09 c2                	or     edx,eax
c0023b45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b49:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023b4f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023b51:	31 c0                	xor    eax,eax
c0023b53:	c1 e9 08             	shr    ecx,0x8
c0023b56:	83 e1 0f             	and    ecx,0xf
c0023b59:	39 c8                	cmp    eax,ecx
c0023b5b:	74 0a                	je     c0023b67 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023b5d:	f6 c2 01             	test   dl,0x1
c0023b60:	74 18                	je     c0023b7a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023b62:	d1 ea                	shr    edx,1
c0023b64:	40                   	inc    eax
c0023b65:	eb f2                	jmp    c0023b59 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023b67:	83 ec 0c             	sub    esp,0xc
c0023b6a:	68 48 cb 02 c0       	push   0xc002cb48
c0023b6f:	e8 c9 68 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c0023b74:	83 c4 10             	add    esp,0x10
c0023b77:	83 c8 ff             	or     eax,0xffffffff
c0023b7a:	83 c4 0c             	add    esp,0xc
c0023b7d:	c3                   	ret    

c0023b7e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023b7e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023b82:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023b85:	89 c2                	mov    edx,eax
c0023b87:	c1 ea 08             	shr    edx,0x8
c0023b8a:	83 e2 0f             	and    edx,0xf
c0023b8d:	fe ca                	dec    dl
c0023b8f:	75 31                	jne    c0023bc2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023b91:	83 e0 0f             	and    eax,0xf
c0023b94:	3c 03                	cmp    al,0x3
c0023b96:	75 2a                	jne    c0023bc2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023b98:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023b9b:	b8 02 00 00 00       	mov    eax,0x2
c0023ba0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023ba6:	74 1c                	je     c0023bc4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023ba8:	b8 04 00 00 00       	mov    eax,0x4
c0023bad:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023bb3:	74 0f                	je     c0023bc4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023bb5:	31 c0                	xor    eax,eax
c0023bb7:	83 fa 03             	cmp    edx,0x3
c0023bba:	0f 94 c0             	sete   al
c0023bbd:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023bc1:	c3                   	ret    
c0023bc2:	31 c0                	xor    eax,eax
c0023bc4:	c3                   	ret    
c0023bc5:	90                   	nop

c0023bc6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023bc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023bca:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023bcd:	0f ba e2 0f          	bt     edx,0xf
c0023bd1:	72 f7                	jb     c0023bca <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023bd3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023bd6:	83 ca 10             	or     edx,0x10
c0023bd9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023bdc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023bdf:	83 ca 01             	or     edx,0x1
c0023be2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023be5:	c3                   	ret    

c0023be6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023be6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023bea:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023bed:	83 e2 fe             	and    edx,0xfffffffe
c0023bf0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023bf3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023bf6:	83 e2 ef             	and    edx,0xffffffef
c0023bf9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023bfc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023bff:	0f ba e2 0e          	bt     edx,0xe
c0023c03:	72 f7                	jb     c0023bfc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023c05:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c08:	0f ba e2 0f          	bt     edx,0xf
c0023c0c:	72 ee                	jb     c0023bfc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023c0e:	c3                   	ret    
c0023c0f:	90                   	nop

c0023c10 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023c10:	55                   	push   ebp
c0023c11:	57                   	push   edi
c0023c12:	56                   	push   esi
c0023c13:	53                   	push   ebx
c0023c14:	83 ec 1c             	sub    esp,0x1c
c0023c17:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023c1b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023c1f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023c23:	53                   	push   ebx
c0023c24:	89 fd                	mov    ebp,edi
c0023c26:	56                   	push   esi
c0023c27:	c1 e5 0a             	shl    ebp,0xa
c0023c2a:	e8 b7 ff ff ff       	call   c0023be6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023c2f:	83 ec 0c             	sub    esp,0xc
c0023c32:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023c38:	01 e8                	add    eax,ebp
c0023c3a:	89 03                	mov    DWORD PTR [ebx],eax
c0023c3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023c3e:	68 00 04 00 00       	push   0x400
c0023c43:	6a 00                	push   0x0
c0023c45:	50                   	push   eax
c0023c46:	e8 2d cb fd ff       	call   c0000778 <memset>
c0023c4b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023c51:	89 fa                	mov    edx,edi
c0023c53:	01 e8                	add    eax,ebp
c0023c55:	c1 e7 0d             	shl    edi,0xd
c0023c58:	89 03                	mov    DWORD PTR [ebx],eax
c0023c5a:	c1 e2 08             	shl    edx,0x8
c0023c5d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023c64:	81 c2 00 80 00 00    	add    edx,0x8000
c0023c6a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023c6e:	89 d0                	mov    eax,edx
c0023c70:	83 c4 1c             	add    esp,0x1c
c0023c73:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023c79:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023c7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023c7f:	68 00 01 00 00       	push   0x100
c0023c84:	6a 00                	push   0x0
c0023c86:	50                   	push   eax
c0023c87:	e8 ec ca fd ff       	call   c0000778 <memset>
c0023c8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023c90:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023c96:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023c9c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023ca0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023ca3:	83 c4 10             	add    esp,0x10
c0023ca6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023cad:	31 ff                	xor    edi,edi
c0023caf:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023cb5:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023cbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023cbf:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023cc5:	83 c5 20             	add    ebp,0x20
c0023cc8:	01 f8                	add    eax,edi
c0023cca:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023ccd:	52                   	push   edx
c0023cce:	68 00 01 00 00       	push   0x100
c0023cd3:	6a 00                	push   0x0
c0023cd5:	50                   	push   eax
c0023cd6:	e8 9d ca fd ff       	call   c0000778 <memset>
c0023cdb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023cdf:	83 c4 10             	add    esp,0x10
c0023ce2:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023ce8:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023cef:	01 f8                	add    eax,edi
c0023cf1:	81 c7 00 01 00 00    	add    edi,0x100
c0023cf7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023cfa:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023d00:	75 b3                	jne    c0023cb5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023d02:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023d06:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023d0a:	83 c4 1c             	add    esp,0x1c
c0023d0d:	5b                   	pop    ebx
c0023d0e:	5e                   	pop    esi
c0023d0f:	5f                   	pop    edi
c0023d10:	5d                   	pop    ebp
c0023d11:	e9 b0 fe ff ff       	jmp    c0023bc6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023d16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023d16:	55                   	push   ebp
c0023d17:	57                   	push   edi
c0023d18:	56                   	push   esi
c0023d19:	53                   	push   ebx
c0023d1a:	31 db                	xor    ebx,ebx
c0023d1c:	83 ec 0c             	sub    esp,0xc
c0023d1f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023d23:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023d27:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023d2a:	f7 c7 01 00 00 00    	test   edi,0x1
c0023d30:	0f 84 aa 00 00 00    	je     c0023de0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023d36:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023d3a:	89 d8                	mov    eax,ebx
c0023d3c:	c1 e0 07             	shl    eax,0x7
c0023d3f:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023d46:	55                   	push   ebp
c0023d47:	56                   	push   esi
c0023d48:	e8 31 fe ff ff       	call   c0023b7e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023d4d:	5a                   	pop    edx
c0023d4e:	83 f8 01             	cmp    eax,0x1
c0023d51:	59                   	pop    ecx
c0023d52:	75 30                	jne    c0023d84 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023d54:	50                   	push   eax
c0023d55:	50                   	push   eax
c0023d56:	53                   	push   ebx
c0023d57:	68 6d cb 02 c0       	push   0xc002cb6d
c0023d5c:	e8 33 f0 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0023d61:	83 c4 0c             	add    esp,0xc
c0023d64:	53                   	push   ebx
c0023d65:	55                   	push   ebp
c0023d66:	56                   	push   esi
c0023d67:	e8 a4 fe ff ff       	call   c0023c10 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023d6c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023d73:	e8 c8 ba fe ff       	call   c000f840 <malloc>
c0023d78:	89 c5                	mov    ebp,eax
c0023d7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0023d7d:	e8 60 0d 00 00       	call   c0024ae2 <SATA::SATA()>
c0023d82:	eb 33                	jmp    c0023db7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023d84:	83 f8 04             	cmp    eax,0x4
c0023d87:	75 47                	jne    c0023dd0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023d89:	50                   	push   eax
c0023d8a:	50                   	push   eax
c0023d8b:	53                   	push   ebx
c0023d8c:	68 84 cb 02 c0       	push   0xc002cb84
c0023d91:	e8 fe ef fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0023d96:	83 c4 0c             	add    esp,0xc
c0023d99:	53                   	push   ebx
c0023d9a:	55                   	push   ebp
c0023d9b:	56                   	push   esi
c0023d9c:	e8 6f fe ff ff       	call   c0023c10 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023da1:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023da8:	e8 93 ba fe ff       	call   c000f840 <malloc>
c0023dad:	89 c5                	mov    ebp,eax
c0023daf:	89 04 24             	mov    DWORD PTR [esp],eax
c0023db2:	e8 d7 10 00 00       	call   c0024e8e <SATAPI::SATAPI()>
c0023db7:	5a                   	pop    edx
c0023db8:	59                   	pop    ecx
c0023db9:	55                   	push   ebp
c0023dba:	56                   	push   esi
c0023dbb:	e8 fa 03 ff ff       	call   c00141ba <Device::addChild(Device*)>
c0023dc0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023dc3:	56                   	push   esi
c0023dc4:	6a 00                	push   0x0
c0023dc6:	53                   	push   ebx
c0023dc7:	55                   	push   ebp
c0023dc8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023dcb:	83 c4 20             	add    esp,0x20
c0023dce:	eb 10                	jmp    c0023de0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023dd0:	50                   	push   eax
c0023dd1:	50                   	push   eax
c0023dd2:	53                   	push   ebx
c0023dd3:	68 9d cb 02 c0       	push   0xc002cb9d
c0023dd8:	e8 b7 ef fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0023ddd:	83 c4 10             	add    esp,0x10
c0023de0:	d1 ef                	shr    edi,1
c0023de2:	43                   	inc    ebx
c0023de3:	83 fb 20             	cmp    ebx,0x20
c0023de6:	0f 85 3e ff ff ff    	jne    c0023d2a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023dec:	83 c4 0c             	add    esp,0xc
c0023def:	5b                   	pop    ebx
c0023df0:	5e                   	pop    esi
c0023df1:	5f                   	pop    edi
c0023df2:	5d                   	pop    ebp
c0023df3:	c3                   	ret    

c0023df4 <SATABus::open(int, int, void*)>:
c0023df4:	83 ec 14             	sub    esp,0x14
c0023df7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023dfb:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023e01:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023e07:	52                   	push   edx
c0023e08:	50                   	push   eax
c0023e09:	e8 08 ff ff ff       	call   c0023d16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023e0e:	31 c0                	xor    eax,eax
c0023e10:	83 c4 1c             	add    esp,0x1c
c0023e13:	c3                   	ret    

c0023e14 <ATA::close(int, int, void*)>:
c0023e14:	83 ec 0c             	sub    esp,0xc
c0023e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e1b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023e21:	85 c0                	test   eax,eax
c0023e23:	74 0c                	je     c0023e31 <ATA::close(int, int, void*)+0x1d>
c0023e25:	83 ec 0c             	sub    esp,0xc
c0023e28:	8b 10                	mov    edx,DWORD PTR [eax]
c0023e2a:	50                   	push   eax
c0023e2b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023e2e:	83 c4 10             	add    esp,0x10
c0023e31:	31 c0                	xor    eax,eax
c0023e33:	83 c4 0c             	add    esp,0xc
c0023e36:	c3                   	ret    
c0023e37:	90                   	nop

c0023e38 <ATA::powerSaving(PowerSavingLevel)>:
c0023e38:	c3                   	ret    
c0023e39:	90                   	nop

c0023e3a <ATA::ATA()>:
c0023e3a:	83 ec 0c             	sub    esp,0xc
c0023e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e41:	83 ec 04             	sub    esp,0x4
c0023e44:	68 00 02 00 00       	push   0x200
c0023e49:	68 85 cc 02 c0       	push   0xc002cc85
c0023e4e:	50                   	push   eax
c0023e4f:	e8 8a 07 ff ff       	call   c00145de <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023e54:	83 c4 10             	add    esp,0x10
c0023e57:	ba 08 cc 02 c0       	mov    edx,0xc002cc08
c0023e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e60:	89 10                	mov    DWORD PTR [eax],edx
c0023e62:	90                   	nop
c0023e63:	83 c4 0c             	add    esp,0xc
c0023e66:	c3                   	ret    
c0023e67:	90                   	nop

c0023e68 <ATA::flush(bool)>:
c0023e68:	53                   	push   ebx
c0023e69:	83 ec 08             	sub    esp,0x8
c0023e6c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023e71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023e75:	19 c0                	sbb    eax,eax
c0023e77:	83 e0 fd             	and    eax,0xfffffffd
c0023e7a:	05 ea 00 00 00       	add    eax,0xea
c0023e7f:	50                   	push   eax
c0023e80:	6a 07                	push   0x7
c0023e82:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e89:	50                   	push   eax
c0023e8a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e90:	e8 dd ef ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e95:	83 c4 0c             	add    esp,0xc
c0023e98:	6a 00                	push   0x0
c0023e9a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ea1:	50                   	push   eax
c0023ea2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ea8:	e8 71 fb ff ff       	call   c0023a1e <IDE::polling(unsigned char, unsigned int)>
c0023ead:	83 c4 18             	add    esp,0x18
c0023eb0:	5b                   	pop    ebx
c0023eb1:	c3                   	ret    

c0023eb2 <ATA::readyForCommand()>:
c0023eb2:	56                   	push   esi
c0023eb3:	53                   	push   ebx
c0023eb4:	31 db                	xor    ebx,ebx
c0023eb6:	50                   	push   eax
c0023eb7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023ebb:	50                   	push   eax
c0023ebc:	6a 0c                	push   0xc
c0023ebe:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023ec5:	50                   	push   eax
c0023ec6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023ecc:	e8 61 f0 ff ff       	call   c0022f32 <IDE::read(unsigned char, unsigned char)>
c0023ed1:	83 c4 10             	add    esp,0x10
c0023ed4:	a8 88                	test   al,0x88
c0023ed6:	74 23                	je     c0023efb <ATA::readyForCommand()+0x49>
c0023ed8:	43                   	inc    ebx
c0023ed9:	83 fb 63             	cmp    ebx,0x63
c0023edc:	7e dd                	jle    c0023ebb <ATA::readyForCommand()+0x9>
c0023ede:	51                   	push   ecx
c0023edf:	51                   	push   ecx
c0023ee0:	6a 00                	push   0x0
c0023ee2:	68 40 42 0f 00       	push   0xf4240
c0023ee7:	e8 9a a2 ff ff       	call   c001e186 <nanoSleep(unsigned long long)>
c0023eec:	83 c4 10             	add    esp,0x10
c0023eef:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023ef5:	75 c4                	jne    c0023ebb <ATA::readyForCommand()+0x9>
c0023ef7:	31 c0                	xor    eax,eax
c0023ef9:	eb 02                	jmp    c0023efd <ATA::readyForCommand()+0x4b>
c0023efb:	b0 01                	mov    al,0x1
c0023efd:	5a                   	pop    edx
c0023efe:	5b                   	pop    ebx
c0023eff:	5e                   	pop    esi
c0023f00:	c3                   	ret    
c0023f01:	90                   	nop

c0023f02 <ATA::access(unsigned long long, int, void*, bool)>:
c0023f02:	55                   	push   ebp
c0023f03:	57                   	push   edi
c0023f04:	56                   	push   esi
c0023f05:	53                   	push   ebx
c0023f06:	83 ec 2c             	sub    esp,0x2c
c0023f09:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023f0d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023f11:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023f15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023f19:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023f1d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023f21:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023f25:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023f2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023f2f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023f35:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023f39:	c1 e0 06             	shl    eax,0x6
c0023f3c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023f44:	74 5d                	je     c0023fa3 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023f46:	89 fa                	mov    edx,edi
c0023f48:	89 f0                	mov    eax,esi
c0023f4a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023f4e:	c1 ea 1c             	shr    edx,0x1c
c0023f51:	89 d1                	mov    ecx,edx
c0023f53:	09 c1                	or     ecx,eax
c0023f55:	74 25                	je     c0023f7c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023f57:	31 ed                	xor    ebp,ebp
c0023f59:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023f60:	89 fa                	mov    edx,edi
c0023f62:	89 f0                	mov    eax,esi
c0023f64:	0f ad d0             	shrd   eax,edx,cl
c0023f67:	d3 ea                	shr    edx,cl
c0023f69:	f6 c1 20             	test   cl,0x20
c0023f6c:	74 02                	je     c0023f70 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023f6e:	89 d0                	mov    eax,edx
c0023f70:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023f74:	45                   	inc    ebp
c0023f75:	83 fd 06             	cmp    ebp,0x6
c0023f78:	75 df                	jne    c0023f59 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023f7a:	eb 76                	jmp    c0023ff2 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023f7c:	89 f0                	mov    eax,esi
c0023f7e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023f83:	89 fa                	mov    edx,edi
c0023f85:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023f8c:	0f ac d0 10          	shrd   eax,edx,0x10
c0023f90:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023f95:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023f99:	c1 ee 18             	shr    esi,0x18
c0023f9c:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023fa1:	eb 56                	jmp    c0023ff9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023fa3:	6a 00                	push   0x0
c0023fa5:	6a 3f                	push   0x3f
c0023fa7:	57                   	push   edi
c0023fa8:	56                   	push   esi
c0023fa9:	e8 8e 29 00 00       	call   c002693c <__umoddi3>
c0023fae:	83 c4 10             	add    esp,0x10
c0023fb1:	40                   	inc    eax
c0023fb2:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023fb6:	6a 00                	push   0x0
c0023fb8:	68 f0 03 00 00       	push   0x3f0
c0023fbd:	57                   	push   edi
c0023fbe:	56                   	push   esi
c0023fbf:	e8 78 28 00 00       	call   c002683c <__udivdi3>
c0023fc4:	83 c4 10             	add    esp,0x10
c0023fc7:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023fcc:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023fd3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023fd8:	6a 00                	push   0x0
c0023fda:	6a 3f                	push   0x3f
c0023fdc:	57                   	push   edi
c0023fdd:	56                   	push   esi
c0023fde:	e8 59 28 00 00       	call   c002683c <__udivdi3>
c0023fe3:	83 c4 10             	add    esp,0x10
c0023fe6:	89 c6                	mov    esi,eax
c0023fe8:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023fed:	83 e6 0f             	and    esi,0xf
c0023ff0:	eb 07                	jmp    c0023ff9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023ff2:	31 f6                	xor    esi,esi
c0023ff4:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023ff9:	bf 01 00 00 00       	mov    edi,0x1
c0023ffe:	50                   	push   eax
c0023fff:	6a 00                	push   0x0
c0024001:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024008:	50                   	push   eax
c0024009:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002400d:	e8 6c f0 ff ff       	call   c002307e <IDE::enableIRQs(unsigned char, bool)>
c0024012:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024015:	e8 98 fe ff ff       	call   c0023eb2 <ATA::readyForCommand()>
c002401a:	83 c4 10             	add    esp,0x10
c002401d:	84 c0                	test   al,al
c002401f:	0f 84 5a 02 00 00    	je     c002427f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024025:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002402b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024031:	c1 e0 04             	shl    eax,0x4
c0024034:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002403b:	09 c6                	or     esi,eax
c002403d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024042:	75 05                	jne    c0024049 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024044:	83 ce a0             	or     esi,0xffffffa0
c0024047:	eb 03                	jmp    c002404c <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024049:	83 ce e0             	or     esi,0xffffffe0
c002404c:	89 f0                	mov    eax,esi
c002404e:	0f b6 f0             	movzx  esi,al
c0024051:	56                   	push   esi
c0024052:	6a 06                	push   0x6
c0024054:	51                   	push   ecx
c0024055:	52                   	push   edx
c0024056:	e8 17 ee ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002405b:	83 c4 10             	add    esp,0x10
c002405e:	6a 00                	push   0x0
c0024060:	6a 01                	push   0x1
c0024062:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024069:	50                   	push   eax
c002406a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024070:	e8 fd ed ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024075:	83 c4 10             	add    esp,0x10
c0024078:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002407d:	75 6e                	jne    c00240ed <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002407f:	6a 00                	push   0x0
c0024081:	6a 08                	push   0x8
c0024083:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002408a:	50                   	push   eax
c002408b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024091:	e8 dc ed ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024096:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002409b:	50                   	push   eax
c002409c:	6a 09                	push   0x9
c002409e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240a5:	50                   	push   eax
c00240a6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240ac:	e8 c1 ed ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240b1:	83 c4 20             	add    esp,0x20
c00240b4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00240b9:	50                   	push   eax
c00240ba:	6a 0a                	push   0xa
c00240bc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240c3:	50                   	push   eax
c00240c4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240ca:	e8 a3 ed ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240cf:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00240d4:	50                   	push   eax
c00240d5:	6a 0b                	push   0xb
c00240d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240de:	50                   	push   eax
c00240df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240e5:	e8 88 ed ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240ea:	83 c4 20             	add    esp,0x20
c00240ed:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00240f2:	50                   	push   eax
c00240f3:	6a 02                	push   0x2
c00240f5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240fc:	50                   	push   eax
c00240fd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024103:	e8 6a ed ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024108:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002410d:	50                   	push   eax
c002410e:	6a 03                	push   0x3
c0024110:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024117:	50                   	push   eax
c0024118:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002411e:	e8 4f ed ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024123:	83 c4 20             	add    esp,0x20
c0024126:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002412b:	50                   	push   eax
c002412c:	6a 04                	push   0x4
c002412e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024135:	50                   	push   eax
c0024136:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002413c:	e8 31 ed ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024141:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024146:	50                   	push   eax
c0024147:	6a 05                	push   0x5
c0024149:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024150:	50                   	push   eax
c0024151:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024157:	e8 16 ed ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002415c:	83 c4 20             	add    esp,0x20
c002415f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024164:	0f 94 c0             	sete   al
c0024167:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002416c:	74 09                	je     c0024177 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002416e:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024175:	eb 07                	jmp    c002417e <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024177:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002417e:	0f b6 c0             	movzx  eax,al
c0024181:	50                   	push   eax
c0024182:	6a 07                	push   0x7
c0024184:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002418b:	50                   	push   eax
c002418c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024192:	e8 db ec ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024197:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002419b:	83 c4 10             	add    esp,0x10
c002419e:	85 f6                	test   esi,esi
c00241a0:	0f 84 ba 00 00 00    	je     c0024260 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00241a6:	50                   	push   eax
c00241a7:	6a 01                	push   0x1
c00241a9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241b0:	50                   	push   eax
c00241b1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241b7:	e8 62 f8 ff ff       	call   c0023a1e <IDE::polling(unsigned char, unsigned int)>
c00241bc:	83 c4 10             	add    esp,0x10
c00241bf:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00241c5:	84 c0                	test   al,al
c00241c7:	74 2c                	je     c00241f5 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00241c9:	0f b6 f8             	movzx  edi,al
c00241cc:	0f b6 d2             	movzx  edx,dl
c00241cf:	57                   	push   edi
c00241d0:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00241d7:	50                   	push   eax
c00241d8:	52                   	push   edx
c00241d9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241df:	e8 a4 f6 ff ff       	call   c0023888 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00241e4:	c7 04 24 e0 cb 02 c0 	mov    DWORD PTR [esp],0xc002cbe0
c00241eb:	e8 a4 eb fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00241f0:	e9 87 00 00 00       	jmp    c002427c <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c00241f5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00241fa:	74 33                	je     c002422f <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c00241fc:	31 ed                	xor    ebp,ebp
c00241fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024202:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024206:	50                   	push   eax
c0024207:	50                   	push   eax
c0024208:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002420f:	50                   	push   eax
c0024210:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024216:	e8 45 ec ff ff       	call   c0022e60 <IDE::getBase(unsigned char)>
c002421b:	89 c2                	mov    edx,eax
c002421d:	89 f8                	mov    eax,edi
c002421f:	66 ef                	out    dx,ax
c0024221:	45                   	inc    ebp
c0024222:	83 c4 10             	add    esp,0x10
c0024225:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002422b:	75 d1                	jne    c00241fe <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c002422d:	eb 23                	jmp    c0024252 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c002422f:	0f b6 d2             	movzx  edx,dl
c0024232:	51                   	push   ecx
c0024233:	51                   	push   ecx
c0024234:	52                   	push   edx
c0024235:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002423b:	e8 20 ec ff ff       	call   c0022e60 <IDE::getBase(unsigned char)>
c0024240:	b9 00 01 00 00       	mov    ecx,0x100
c0024245:	89 c2                	mov    edx,eax
c0024247:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002424b:	fc                   	cld    
c002424c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002424f:	83 c4 10             	add    esp,0x10
c0024252:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002425a:	4e                   	dec    esi
c002425b:	e9 3e ff ff ff       	jmp    c002419e <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024260:	31 ff                	xor    edi,edi
c0024262:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024267:	74 16                	je     c002427f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024269:	50                   	push   eax
c002426a:	50                   	push   eax
c002426b:	31 c0                	xor    eax,eax
c002426d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024272:	0f 94 c0             	sete   al
c0024275:	50                   	push   eax
c0024276:	53                   	push   ebx
c0024277:	e8 ec fb ff ff       	call   c0023e68 <ATA::flush(bool)>
c002427c:	83 c4 10             	add    esp,0x10
c002427f:	83 c4 2c             	add    esp,0x2c
c0024282:	89 f8                	mov    eax,edi
c0024284:	5b                   	pop    ebx
c0024285:	5e                   	pop    esi
c0024286:	5f                   	pop    edi
c0024287:	5d                   	pop    ebp
c0024288:	c3                   	ret    
c0024289:	90                   	nop

c002428a <ATA::read(unsigned long long, int, void*)>:
c002428a:	57                   	push   edi
c002428b:	b8 04 00 00 00       	mov    eax,0x4
c0024290:	56                   	push   esi
c0024291:	53                   	push   ebx
c0024292:	83 ec 10             	sub    esp,0x10
c0024295:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024299:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002429d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00242a0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00242a4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00242a8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00242ae:	77 3b                	ja     c00242eb <ATA::read(unsigned long long, int, void*)+0x61>
c00242b0:	b8 06 00 00 00       	mov    eax,0x6
c00242b5:	85 d2                	test   edx,edx
c00242b7:	74 32                	je     c00242eb <ATA::read(unsigned long long, int, void*)+0x61>
c00242b9:	50                   	push   eax
c00242ba:	50                   	push   eax
c00242bb:	6a 00                	push   0x0
c00242bd:	52                   	push   edx
c00242be:	53                   	push   ebx
c00242bf:	57                   	push   edi
c00242c0:	56                   	push   esi
c00242c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00242c5:	e8 38 fc ff ff       	call   c0023f02 <ATA::access(unsigned long long, int, void*, bool)>
c00242ca:	83 c4 20             	add    esp,0x20
c00242cd:	85 c0                	test   eax,eax
c00242cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00242d3:	75 11                	jne    c00242e6 <ATA::read(unsigned long long, int, void*)+0x5c>
c00242d5:	01 1d 88 25 03 c0    	add    DWORD PTR ds:0xc0032588,ebx
c00242db:	e8 ac c6 fe ff       	call   c001098c <VgaText::updateDiskUsage()>
c00242e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00242e4:	eb 05                	jmp    c00242eb <ATA::read(unsigned long long, int, void*)+0x61>
c00242e6:	b8 01 00 00 00       	mov    eax,0x1
c00242eb:	83 c4 10             	add    esp,0x10
c00242ee:	5b                   	pop    ebx
c00242ef:	5e                   	pop    esi
c00242f0:	5f                   	pop    edi
c00242f1:	c3                   	ret    

c00242f2 <ATA::write(unsigned long long, int, void*)>:
c00242f2:	57                   	push   edi
c00242f3:	b8 04 00 00 00       	mov    eax,0x4
c00242f8:	56                   	push   esi
c00242f9:	53                   	push   ebx
c00242fa:	83 ec 10             	sub    esp,0x10
c00242fd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024301:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024305:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024308:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002430c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024310:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024316:	77 3b                	ja     c0024353 <ATA::write(unsigned long long, int, void*)+0x61>
c0024318:	b8 06 00 00 00       	mov    eax,0x6
c002431d:	85 d2                	test   edx,edx
c002431f:	74 32                	je     c0024353 <ATA::write(unsigned long long, int, void*)+0x61>
c0024321:	50                   	push   eax
c0024322:	50                   	push   eax
c0024323:	6a 01                	push   0x1
c0024325:	52                   	push   edx
c0024326:	53                   	push   ebx
c0024327:	57                   	push   edi
c0024328:	56                   	push   esi
c0024329:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002432d:	e8 d0 fb ff ff       	call   c0023f02 <ATA::access(unsigned long long, int, void*, bool)>
c0024332:	83 c4 20             	add    esp,0x20
c0024335:	85 c0                	test   eax,eax
c0024337:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002433b:	75 11                	jne    c002434e <ATA::write(unsigned long long, int, void*)+0x5c>
c002433d:	01 1d 84 25 03 c0    	add    DWORD PTR ds:0xc0032584,ebx
c0024343:	e8 44 c6 fe ff       	call   c001098c <VgaText::updateDiskUsage()>
c0024348:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002434c:	eb 05                	jmp    c0024353 <ATA::write(unsigned long long, int, void*)+0x61>
c002434e:	b8 01 00 00 00       	mov    eax,0x1
c0024353:	83 c4 10             	add    esp,0x10
c0024356:	5b                   	pop    ebx
c0024357:	5e                   	pop    esi
c0024358:	5f                   	pop    edi
c0024359:	c3                   	ret    

c002435a <ATA::detectCHS()>:
c002435a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002435e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024364:	c1 e0 06             	shl    eax,0x6
c0024367:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002436d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024377:	c7 44 24 04 eb cb 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cbeb
c002437f:	e9 b9 60 ff ff       	jmp    c001a43d <Krnl::panic(char const*)>

c0024384 <ATA::open(int, int, void*)>:
c0024384:	53                   	push   ebx
c0024385:	83 ec 08             	sub    esp,0x8
c0024388:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002438c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024390:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024394:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002439a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00243a0:	c1 e0 06             	shl    eax,0x6
c00243a3:	01 d0                	add    eax,edx
c00243a5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00243ac:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00243b2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00243b9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00243c3:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00243c9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00243d0:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00243d7:	75 0c                	jne    c00243e5 <ATA::open(int, int, void*)+0x61>
c00243d9:	83 ec 0c             	sub    esp,0xc
c00243dc:	53                   	push   ebx
c00243dd:	e8 78 ff ff ff       	call   c002435a <ATA::detectCHS()>
c00243e2:	83 c4 10             	add    esp,0x10
c00243e5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00243eb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00243f1:	c1 e0 06             	shl    eax,0x6
c00243f4:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00243fb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024405:	d1 e8                	shr    eax,1
c0024407:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002440d:	6a 04                	push   0x4
c002440f:	6a 0c                	push   0xc
c0024411:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024418:	50                   	push   eax
c0024419:	52                   	push   edx
c002441a:	e8 53 ea ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002441f:	90                   	nop
c0024420:	90                   	nop
c0024421:	6a 00                	push   0x0
c0024423:	6a 0c                	push   0xc
c0024425:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002442c:	50                   	push   eax
c002442d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024433:	e8 3a ea ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024438:	83 c4 14             	add    esp,0x14
c002443b:	53                   	push   ebx
c002443c:	e8 05 02 ff ff       	call   c0014646 <PhysicalDisk::startCache()>
c0024441:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024444:	e8 77 23 ff ff       	call   c00167c0 <createPartitionsForDisk(PhysicalDisk*)>
c0024449:	31 c0                	xor    eax,eax
c002444b:	83 c4 18             	add    esp,0x18
c002444e:	5b                   	pop    ebx
c002444f:	c3                   	ret    

c0024450 <ATAPI::write(unsigned long long, int, void*)>:
c0024450:	b8 03 00 00 00       	mov    eax,0x3
c0024455:	c3                   	ret    

c0024456 <ATAPI::close(int, int, void*)>:
c0024456:	83 ec 0c             	sub    esp,0xc
c0024459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002445d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024463:	85 c0                	test   eax,eax
c0024465:	74 0c                	je     c0024473 <ATAPI::close(int, int, void*)+0x1d>
c0024467:	83 ec 0c             	sub    esp,0xc
c002446a:	8b 10                	mov    edx,DWORD PTR [eax]
c002446c:	50                   	push   eax
c002446d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024470:	83 c4 10             	add    esp,0x10
c0024473:	31 c0                	xor    eax,eax
c0024475:	83 c4 0c             	add    esp,0xc
c0024478:	c3                   	ret    
c0024479:	90                   	nop

c002447a <ATAPI::ATAPI()>:
c002447a:	83 ec 0c             	sub    esp,0xc
c002447d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024481:	83 ec 04             	sub    esp,0x4
c0024484:	68 00 08 00 00       	push   0x800
c0024489:	68 25 cd 02 c0       	push   0xc002cd25
c002448e:	50                   	push   eax
c002448f:	e8 4a 01 ff ff       	call   c00145de <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024494:	83 c4 10             	add    esp,0x10
c0024497:	ba 40 cc 02 c0       	mov    edx,0xc002cc40
c002449c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244a0:	89 10                	mov    DWORD PTR [eax],edx
c00244a2:	90                   	nop
c00244a3:	83 c4 0c             	add    esp,0xc
c00244a6:	c3                   	ret    
c00244a7:	90                   	nop

c00244a8 <ATAPI::readyForCommand()>:
c00244a8:	56                   	push   esi
c00244a9:	53                   	push   ebx
c00244aa:	31 db                	xor    ebx,ebx
c00244ac:	50                   	push   eax
c00244ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00244b1:	50                   	push   eax
c00244b2:	6a 0c                	push   0xc
c00244b4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00244bb:	50                   	push   eax
c00244bc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00244c2:	e8 6b ea ff ff       	call   c0022f32 <IDE::read(unsigned char, unsigned char)>
c00244c7:	83 c4 10             	add    esp,0x10
c00244ca:	a8 88                	test   al,0x88
c00244cc:	74 23                	je     c00244f1 <ATAPI::readyForCommand()+0x49>
c00244ce:	43                   	inc    ebx
c00244cf:	83 fb 63             	cmp    ebx,0x63
c00244d2:	7e dd                	jle    c00244b1 <ATAPI::readyForCommand()+0x9>
c00244d4:	51                   	push   ecx
c00244d5:	51                   	push   ecx
c00244d6:	6a 00                	push   0x0
c00244d8:	68 40 42 0f 00       	push   0xf4240
c00244dd:	e8 a4 9c ff ff       	call   c001e186 <nanoSleep(unsigned long long)>
c00244e2:	83 c4 10             	add    esp,0x10
c00244e5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00244eb:	75 c4                	jne    c00244b1 <ATAPI::readyForCommand()+0x9>
c00244ed:	31 c0                	xor    eax,eax
c00244ef:	eb 02                	jmp    c00244f3 <ATAPI::readyForCommand()+0x4b>
c00244f1:	b0 01                	mov    al,0x1
c00244f3:	5a                   	pop    edx
c00244f4:	5b                   	pop    ebx
c00244f5:	5e                   	pop    esi
c00244f6:	c3                   	ret    
c00244f7:	90                   	nop

c00244f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00244f8:	55                   	push   ebp
c00244f9:	57                   	push   edi
c00244fa:	56                   	push   esi
c00244fb:	53                   	push   ebx
c00244fc:	83 ec 20             	sub    esp,0x20
c00244ff:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024503:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024507:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002450b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002450f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024513:	6a 01                	push   0x1
c0024515:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002451c:	50                   	push   eax
c002451d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024523:	e8 56 eb ff ff       	call   c002307e <IDE::enableIRQs(unsigned char, bool)>
c0024528:	5e                   	pop    esi
c0024529:	58                   	pop    eax
c002452a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024531:	50                   	push   eax
c0024532:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024538:	e8 0f e9 ff ff       	call   c0022e4c <IDE::prepareInterrupt(unsigned char)>
c002453d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024540:	e8 63 ff ff ff       	call   c00244a8 <ATAPI::readyForCommand()>
c0024545:	83 c4 10             	add    esp,0x10
c0024548:	84 c0                	test   al,al
c002454a:	75 0a                	jne    c0024556 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002454c:	bb 01 00 00 00       	mov    ebx,0x1
c0024551:	e9 57 02 00 00       	jmp    c00247ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024556:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002455c:	c1 e0 04             	shl    eax,0x4
c002455f:	0f b6 c0             	movzx  eax,al
c0024562:	50                   	push   eax
c0024563:	6a 06                	push   0x6
c0024565:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002456c:	50                   	push   eax
c002456d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024573:	e8 fa e8 ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024578:	6a 00                	push   0x0
c002457a:	6a 01                	push   0x1
c002457c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024583:	50                   	push   eax
c0024584:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002458a:	e8 e3 e8 ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002458f:	83 c4 20             	add    esp,0x20
c0024592:	0f b6 c3             	movzx  eax,bl
c0024595:	0f b6 df             	movzx  ebx,bh
c0024598:	50                   	push   eax
c0024599:	6a 04                	push   0x4
c002459b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245a2:	50                   	push   eax
c00245a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245a9:	e8 c4 e8 ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245ae:	53                   	push   ebx
c00245af:	6a 05                	push   0x5
c00245b1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245b8:	50                   	push   eax
c00245b9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245bf:	e8 ae e8 ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245c4:	83 c4 20             	add    esp,0x20
c00245c7:	68 a0 00 00 00       	push   0xa0
c00245cc:	6a 07                	push   0x7
c00245ce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245d5:	50                   	push   eax
c00245d6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245dc:	e8 91 e8 ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245e1:	83 c4 0c             	add    esp,0xc
c00245e4:	6a 01                	push   0x1
c00245e6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245ed:	50                   	push   eax
c00245ee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245f4:	e8 25 f4 ff ff       	call   c0023a1e <IDE::polling(unsigned char, unsigned int)>
c00245f9:	83 c4 10             	add    esp,0x10
c00245fc:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024602:	84 c0                	test   al,al
c0024604:	74 23                	je     c0024629 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024606:	0f b6 d8             	movzx  ebx,al
c0024609:	0f b6 d2             	movzx  edx,dl
c002460c:	53                   	push   ebx
c002460d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024614:	50                   	push   eax
c0024615:	52                   	push   edx
c0024616:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002461c:	e8 67 f2 ff ff       	call   c0023888 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024621:	83 c4 10             	add    esp,0x10
c0024624:	e9 84 01 00 00       	jmp    c00247ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024629:	0f b6 d2             	movzx  edx,dl
c002462c:	53                   	push   ebx
c002462d:	53                   	push   ebx
c002462e:	52                   	push   edx
c002462f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024635:	e8 26 e8 ff ff       	call   c0022e60 <IDE::getBase(unsigned char)>
c002463a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002463e:	b9 06 00 00 00       	mov    ecx,0x6
c0024643:	89 c2                	mov    edx,eax
c0024645:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024648:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002464c:	83 c4 10             	add    esp,0x10
c002464f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024655:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002465c:	85 db                	test   ebx,ebx
c002465e:	0f 84 ec 00 00 00    	je     c0024750 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024664:	51                   	push   ecx
c0024665:	51                   	push   ecx
c0024666:	52                   	push   edx
c0024667:	50                   	push   eax
c0024668:	e8 73 e9 ff ff       	call   c0022fe0 <IDE::waitInterrupt(unsigned char)>
c002466d:	83 c4 10             	add    esp,0x10
c0024670:	84 c0                	test   al,al
c0024672:	0f 84 d4 fe ff ff    	je     c002454c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024678:	56                   	push   esi
c0024679:	56                   	push   esi
c002467a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024681:	50                   	push   eax
c0024682:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024688:	e8 bf e7 ff ff       	call   c0022e4c <IDE::prepareInterrupt(unsigned char)>
c002468d:	83 c4 0c             	add    esp,0xc
c0024690:	6a 04                	push   0x4
c0024692:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024699:	50                   	push   eax
c002469a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246a0:	e8 8d e8 ff ff       	call   c0022f32 <IDE::read(unsigned char, unsigned char)>
c00246a5:	83 c4 0c             	add    esp,0xc
c00246a8:	89 c6                	mov    esi,eax
c00246aa:	6a 05                	push   0x5
c00246ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246b3:	50                   	push   eax
c00246b4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246ba:	e8 73 e8 ff ff       	call   c0022f32 <IDE::read(unsigned char, unsigned char)>
c00246bf:	89 f1                	mov    ecx,esi
c00246c1:	0f b6 c0             	movzx  eax,al
c00246c4:	0f b6 f1             	movzx  esi,cl
c00246c7:	c1 e0 08             	shl    eax,0x8
c00246ca:	09 c6                	or     esi,eax
c00246cc:	d1 fe                	sar    esi,1
c00246ce:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00246d2:	83 c4 10             	add    esp,0x10
c00246d5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00246da:	74 41                	je     c002471d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00246dc:	31 c9                	xor    ecx,ecx
c00246de:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00246e4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00246eb:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00246ef:	75 0a                	jne    c00246fb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00246f1:	01 c9                	add    ecx,ecx
c00246f3:	01 cd                	add    ebp,ecx
c00246f5:	4b                   	dec    ebx
c00246f6:	e9 54 ff ff ff       	jmp    c002464f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00246fb:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024700:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024704:	51                   	push   ecx
c0024705:	51                   	push   ecx
c0024706:	52                   	push   edx
c0024707:	50                   	push   eax
c0024708:	e8 53 e7 ff ff       	call   c0022e60 <IDE::getBase(unsigned char)>
c002470d:	89 c2                	mov    edx,eax
c002470f:	89 f0                	mov    eax,esi
c0024711:	66 ef                	out    dx,ax
c0024713:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024717:	83 c4 10             	add    esp,0x10
c002471a:	41                   	inc    ecx
c002471b:	eb c1                	jmp    c00246de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002471d:	31 f6                	xor    esi,esi
c002471f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024725:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002472c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024730:	75 06                	jne    c0024738 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024732:	01 f6                	add    esi,esi
c0024734:	01 f5                	add    ebp,esi
c0024736:	eb bd                	jmp    c00246f5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024738:	51                   	push   ecx
c0024739:	51                   	push   ecx
c002473a:	52                   	push   edx
c002473b:	50                   	push   eax
c002473c:	e8 1f e7 ff ff       	call   c0022e60 <IDE::getBase(unsigned char)>
c0024741:	89 c2                	mov    edx,eax
c0024743:	66 ed                	in     ax,dx
c0024745:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002474a:	83 c4 10             	add    esp,0x10
c002474d:	46                   	inc    esi
c002474e:	eb cf                	jmp    c002471f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024750:	51                   	push   ecx
c0024751:	51                   	push   ecx
c0024752:	52                   	push   edx
c0024753:	50                   	push   eax
c0024754:	e8 87 e8 ff ff       	call   c0022fe0 <IDE::waitInterrupt(unsigned char)>
c0024759:	83 c4 10             	add    esp,0x10
c002475c:	84 c0                	test   al,al
c002475e:	0f 84 e8 fd ff ff    	je     c002454c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024764:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024769:	52                   	push   edx
c002476a:	52                   	push   edx
c002476b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024772:	50                   	push   eax
c0024773:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024779:	e8 ce e6 ff ff       	call   c0022e4c <IDE::prepareInterrupt(unsigned char)>
c002477e:	83 c4 10             	add    esp,0x10
c0024781:	50                   	push   eax
c0024782:	50                   	push   eax
c0024783:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002478a:	50                   	push   eax
c002478b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024791:	e8 ca e6 ff ff       	call   c0022e60 <IDE::getBase(unsigned char)>
c0024796:	8d 50 07             	lea    edx,[eax+0x7]
c0024799:	ec                   	in     al,dx
c002479a:	83 c4 10             	add    esp,0x10
c002479d:	a8 88                	test   al,0x88
c002479f:	74 0a                	je     c00247ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00247a1:	4b                   	dec    ebx
c00247a2:	75 dd                	jne    c0024781 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00247a4:	bb 02 00 00 00       	mov    ebx,0x2
c00247a9:	eb 02                	jmp    c00247ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00247ab:	31 db                	xor    ebx,ebx
c00247ad:	83 c4 1c             	add    esp,0x1c
c00247b0:	89 d8                	mov    eax,ebx
c00247b2:	5b                   	pop    ebx
c00247b3:	5e                   	pop    esi
c00247b4:	5f                   	pop    edi
c00247b5:	5d                   	pop    ebp
c00247b6:	c3                   	ret    
c00247b7:	90                   	nop

c00247b8 <ATAPI::diskRemoved()>:
c00247b8:	83 ec 18             	sub    esp,0x18
c00247bb:	68 31 cd 02 c0       	push   0xc002cd31
c00247c0:	e8 cf e5 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00247c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00247c9:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00247d0:	83 c4 1c             	add    esp,0x1c
c00247d3:	c3                   	ret    

c00247d4 <ATAPI::eject()>:
c00247d4:	57                   	push   edi
c00247d5:	b9 03 00 00 00       	mov    ecx,0x3
c00247da:	53                   	push   ebx
c00247db:	83 ec 14             	sub    esp,0x14
c00247de:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00247e2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00247e6:	fc                   	cld    
c00247e7:	31 c0                	xor    eax,eax
c00247e9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00247eb:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00247f0:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00247f5:	50                   	push   eax
c00247f6:	50                   	push   eax
c00247f7:	6a 00                	push   0x0
c00247f9:	6a 00                	push   0x0
c00247fb:	6a 00                	push   0x0
c00247fd:	6a 02                	push   0x2
c00247ff:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024803:	50                   	push   eax
c0024804:	53                   	push   ebx
c0024805:	e8 ee fc ff ff       	call   c00244f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002480a:	83 c4 14             	add    esp,0x14
c002480d:	53                   	push   ebx
c002480e:	e8 a5 ff ff ff       	call   c00247b8 <ATAPI::diskRemoved()>
c0024813:	83 c4 24             	add    esp,0x24
c0024816:	31 c0                	xor    eax,eax
c0024818:	5b                   	pop    ebx
c0024819:	5f                   	pop    edi
c002481a:	c3                   	ret    
c002481b:	90                   	nop

c002481c <ATAPI::diskInserted()>:
c002481c:	53                   	push   ebx
c002481d:	83 ec 14             	sub    esp,0x14
c0024820:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024824:	68 48 cd 02 c0       	push   0xc002cd48
c0024829:	e8 66 e5 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c002482e:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024835:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024838:	e8 09 fe fe ff       	call   c0014646 <PhysicalDisk::startCache()>
c002483d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024841:	83 c4 18             	add    esp,0x18
c0024844:	5b                   	pop    ebx
c0024845:	e9 76 1f ff ff       	jmp    c00167c0 <createPartitionsForDisk(PhysicalDisk*)>

c002484a <ATAPI::detectMedia()>:
c002484a:	56                   	push   esi
c002484b:	53                   	push   ebx
c002484c:	83 ec 28             	sub    esp,0x28
c002484f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024853:	6a 0c                	push   0xc
c0024855:	6a 00                	push   0x0
c0024857:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002485b:	56                   	push   esi
c002485c:	e8 17 bf fd ff       	call   c0000778 <memset>
c0024861:	58                   	pop    eax
c0024862:	5a                   	pop    edx
c0024863:	6a 00                	push   0x0
c0024865:	6a 00                	push   0x0
c0024867:	6a 00                	push   0x0
c0024869:	6a 00                	push   0x0
c002486b:	56                   	push   esi
c002486c:	53                   	push   ebx
c002486d:	e8 86 fc ff ff       	call   c00244f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024872:	83 c4 1c             	add    esp,0x1c
c0024875:	6a 0c                	push   0xc
c0024877:	6a 00                	push   0x0
c0024879:	56                   	push   esi
c002487a:	e8 f9 be fd ff       	call   c0000778 <memset>
c002487f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024884:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024889:	59                   	pop    ecx
c002488a:	58                   	pop    eax
c002488b:	6a 01                	push   0x1
c002488d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024891:	50                   	push   eax
c0024892:	6a 00                	push   0x0
c0024894:	6a 12                	push   0x12
c0024896:	56                   	push   esi
c0024897:	53                   	push   ebx
c0024898:	e8 5b fc ff ff       	call   c00244f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002489d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00248a1:	83 c4 20             	add    esp,0x20
c00248a4:	83 e0 7f             	and    eax,0x7f
c00248a7:	3c 70                	cmp    al,0x70
c00248a9:	74 15                	je     c00248c0 <ATAPI::detectMedia()+0x76>
c00248ab:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00248b2:	75 0c                	jne    c00248c0 <ATAPI::detectMedia()+0x76>
c00248b4:	83 ec 0c             	sub    esp,0xc
c00248b7:	53                   	push   ebx
c00248b8:	e8 5f ff ff ff       	call   c002481c <ATAPI::diskInserted()>
c00248bd:	83 c4 10             	add    esp,0x10
c00248c0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00248c4:	83 e0 0f             	and    eax,0xf
c00248c7:	3c 02                	cmp    al,0x2
c00248c9:	75 1b                	jne    c00248e6 <ATAPI::detectMedia()+0x9c>
c00248cb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00248d0:	75 2d                	jne    c00248ff <ATAPI::detectMedia()+0xb5>
c00248d2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00248d9:	74 24                	je     c00248ff <ATAPI::detectMedia()+0xb5>
c00248db:	83 ec 0c             	sub    esp,0xc
c00248de:	53                   	push   ebx
c00248df:	e8 d4 fe ff ff       	call   c00247b8 <ATAPI::diskRemoved()>
c00248e4:	eb 16                	jmp    c00248fc <ATAPI::detectMedia()+0xb2>
c00248e6:	84 c0                	test   al,al
c00248e8:	75 15                	jne    c00248ff <ATAPI::detectMedia()+0xb5>
c00248ea:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00248f1:	75 0c                	jne    c00248ff <ATAPI::detectMedia()+0xb5>
c00248f3:	83 ec 0c             	sub    esp,0xc
c00248f6:	53                   	push   ebx
c00248f7:	e8 20 ff ff ff       	call   c002481c <ATAPI::diskInserted()>
c00248fc:	83 c4 10             	add    esp,0x10
c00248ff:	83 c4 24             	add    esp,0x24
c0024902:	5b                   	pop    ebx
c0024903:	5e                   	pop    esi
c0024904:	c3                   	ret    
c0024905:	90                   	nop

c0024906 <ATAPI::open(int, int, void*)>:
c0024906:	53                   	push   ebx
c0024907:	83 ec 08             	sub    esp,0x8
c002490a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002490e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024912:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024916:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002491c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024922:	c1 e0 06             	shl    eax,0x6
c0024925:	01 d0                	add    eax,edx
c0024927:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002492e:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024934:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002493b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024945:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002494b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024952:	6a 04                	push   0x4
c0024954:	6a 0c                	push   0xc
c0024956:	51                   	push   ecx
c0024957:	52                   	push   edx
c0024958:	e8 15 e5 ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002495d:	90                   	nop
c002495e:	90                   	nop
c002495f:	6a 00                	push   0x0
c0024961:	6a 0c                	push   0xc
c0024963:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002496a:	50                   	push   eax
c002496b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024971:	e8 fc e4 ff ff       	call   c0022e72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024976:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002497d:	83 c4 14             	add    esp,0x14
c0024980:	53                   	push   ebx
c0024981:	e8 c4 fe ff ff       	call   c002484a <ATAPI::detectMedia()>
c0024986:	31 c0                	xor    eax,eax
c0024988:	83 c4 18             	add    esp,0x18
c002498b:	5b                   	pop    ebx
c002498c:	c3                   	ret    
c002498d:	90                   	nop

c002498e <ATAPI::read(unsigned long long, int, void*)>:
c002498e:	55                   	push   ebp
c002498f:	57                   	push   edi
c0024990:	56                   	push   esi
c0024991:	53                   	push   ebx
c0024992:	83 ec 1c             	sub    esp,0x1c
c0024995:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024999:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002499d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00249a1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00249a8:	74 41                	je     c00249eb <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00249aa:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00249ae:	b9 03 00 00 00       	mov    ecx,0x3
c00249b3:	fc                   	cld    
c00249b4:	31 c0                	xor    eax,eax
c00249b6:	86 fb                	xchg   bl,bh
c00249b8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00249ba:	c1 c3 10             	rol    ebx,0x10
c00249bd:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00249c2:	89 e8                	mov    eax,ebp
c00249c4:	86 fb                	xchg   bl,bh
c00249c6:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00249ca:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00249ce:	50                   	push   eax
c00249cf:	50                   	push   eax
c00249d0:	55                   	push   ebp
c00249d1:	c1 e5 0b             	shl    ebp,0xb
c00249d4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00249d8:	6a 00                	push   0x0
c00249da:	55                   	push   ebp
c00249db:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00249df:	50                   	push   eax
c00249e0:	56                   	push   esi
c00249e1:	e8 12 fb ff ff       	call   c00244f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249e6:	83 c4 20             	add    esp,0x20
c00249e9:	eb 1a                	jmp    c0024a05 <ATAPI::read(unsigned long long, int, void*)+0x77>
c00249eb:	83 ec 0c             	sub    esp,0xc
c00249ee:	56                   	push   esi
c00249ef:	e8 56 fe ff ff       	call   c002484a <ATAPI::detectMedia()>
c00249f4:	83 c4 10             	add    esp,0x10
c00249f7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00249fe:	75 aa                	jne    c00249aa <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024a00:	b8 02 00 00 00       	mov    eax,0x2
c0024a05:	83 c4 1c             	add    esp,0x1c
c0024a08:	5b                   	pop    ebx
c0024a09:	5e                   	pop    esi
c0024a0a:	5f                   	pop    edi
c0024a0b:	5d                   	pop    ebp
c0024a0c:	c3                   	ret    
c0024a0d:	90                   	nop

c0024a0e <SATA::close(int, int, void*)>:
c0024a0e:	83 ec 0c             	sub    esp,0xc
c0024a11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a15:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024a1b:	85 c0                	test   eax,eax
c0024a1d:	74 0c                	je     c0024a2b <SATA::close(int, int, void*)+0x1d>
c0024a1f:	83 ec 0c             	sub    esp,0xc
c0024a22:	8b 10                	mov    edx,DWORD PTR [eax]
c0024a24:	50                   	push   eax
c0024a25:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024a28:	83 c4 10             	add    esp,0x10
c0024a2b:	31 c0                	xor    eax,eax
c0024a2d:	83 c4 0c             	add    esp,0xc
c0024a30:	c3                   	ret    
c0024a31:	90                   	nop

c0024a32 <SATA::powerSaving(PowerSavingLevel)>:
c0024a32:	c3                   	ret    
c0024a33:	90                   	nop

c0024a34 <SATA::open(int, int, void*)>:
c0024a34:	56                   	push   esi
c0024a35:	53                   	push   ebx
c0024a36:	50                   	push   eax
c0024a37:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024a3f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024a49:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024a4f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024a59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024a5d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024a67:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024a6d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024a74:	e8 64 b4 fe ff       	call   c000fedd <Phys::allocatePage()>
c0024a79:	89 c6                	mov    esi,eax
c0024a7b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024a81:	81 c6 00 10 00 00    	add    esi,0x1000
c0024a87:	e8 51 b4 fe ff       	call   c000fedd <Phys::allocatePage()>
c0024a8c:	39 c6                	cmp    esi,eax
c0024a8e:	74 10                	je     c0024aa0 <SATA::open(int, int, void*)+0x6c>
c0024a90:	83 ec 0c             	sub    esp,0xc
c0024a93:	68 70 cc 02 c0       	push   0xc002cc70
c0024a98:	e8 a0 59 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c0024a9d:	83 c4 10             	add    esp,0x10
c0024aa0:	83 ec 0c             	sub    esp,0xc
c0024aa3:	6a 02                	push   0x2
c0024aa5:	e8 8d d0 fe ff       	call   c0011b37 <Virt::allocateKernelVirtualPages(int)>
c0024aaa:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024ab0:	e8 29 d3 fe ff       	call   c0011dde <Virt::getAKernelVAS()>
c0024ab5:	6a 03                	push   0x3
c0024ab7:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024abd:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024ac3:	50                   	push   eax
c0024ac4:	e8 37 d7 fe ff       	call   c0012200 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024ac9:	83 c4 14             	add    esp,0x14
c0024acc:	53                   	push   ebx
c0024acd:	e8 74 fb fe ff       	call   c0014646 <PhysicalDisk::startCache()>
c0024ad2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024ad5:	e8 e6 1c ff ff       	call   c00167c0 <createPartitionsForDisk(PhysicalDisk*)>
c0024ada:	83 c4 14             	add    esp,0x14
c0024add:	31 c0                	xor    eax,eax
c0024adf:	5b                   	pop    ebx
c0024ae0:	5e                   	pop    esi
c0024ae1:	c3                   	ret    

c0024ae2 <SATA::SATA()>:
c0024ae2:	83 ec 0c             	sub    esp,0xc
c0024ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ae9:	83 ec 04             	sub    esp,0x4
c0024aec:	68 00 02 00 00       	push   0x200
c0024af1:	68 84 cc 02 c0       	push   0xc002cc84
c0024af6:	50                   	push   eax
c0024af7:	e8 e2 fa fe ff       	call   c00145de <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024afc:	83 c4 10             	add    esp,0x10
c0024aff:	ba f4 cc 02 c0       	mov    edx,0xc002ccf4
c0024b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b08:	89 10                	mov    DWORD PTR [eax],edx
c0024b0a:	90                   	nop
c0024b0b:	83 c4 0c             	add    esp,0xc
c0024b0e:	c3                   	ret    
c0024b0f:	90                   	nop

c0024b10 <SATA::access(unsigned long long, int, void*, bool)>:
c0024b10:	55                   	push   ebp
c0024b11:	57                   	push   edi
c0024b12:	56                   	push   esi
c0024b13:	53                   	push   ebx
c0024b14:	83 ec 2c             	sub    esp,0x2c
c0024b17:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024b1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024b1f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024b23:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024b27:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024b2b:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024b30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024b34:	7e 10                	jle    c0024b46 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024b36:	83 ec 0c             	sub    esp,0xc
c0024b39:	68 94 cc 02 c0       	push   0xc002cc94
c0024b3e:	e8 fa 58 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c0024b43:	83 c4 10             	add    esp,0x10
c0024b46:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024b4c:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024b52:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024b58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024b5c:	89 f0                	mov    eax,esi
c0024b5e:	c1 e0 07             	shl    eax,0x7
c0024b61:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024b65:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024b6f:	53                   	push   ebx
c0024b70:	8d 46 02             	lea    eax,[esi+0x2]
c0024b73:	53                   	push   ebx
c0024b74:	c1 e0 07             	shl    eax,0x7
c0024b77:	bb 01 00 00 00       	mov    ebx,0x1
c0024b7c:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024b80:	50                   	push   eax
c0024b81:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024b87:	e8 aa ef ff ff       	call   c0023b36 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024b8c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024b90:	83 c4 10             	add    esp,0x10
c0024b93:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024b98:	0f 84 ce 01 00 00    	je     c0024d6c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024b9e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024ba2:	c1 e0 09             	shl    eax,0x9
c0024ba5:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024baa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024bae:	74 17                	je     c0024bc7 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024bb0:	51                   	push   ecx
c0024bb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024bb5:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024bb9:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024bbf:	e8 80 bb fd ff       	call   c0000744 <memcpy>
c0024bc4:	83 c4 10             	add    esp,0x10
c0024bc7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024bcd:	8d 46 02             	lea    eax,[esi+0x2]
c0024bd0:	c1 e0 07             	shl    eax,0x7
c0024bd3:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024bd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0024bd9:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024bdf:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024be5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024be9:	c1 e1 05             	shl    ecx,0x5
c0024bec:	01 c8                	add    eax,ecx
c0024bee:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024bf2:	8a 18                	mov    bl,BYTE PTR [eax]
c0024bf4:	83 e1 01             	and    ecx,0x1
c0024bf7:	83 e3 bf             	and    ebx,0xffffffbf
c0024bfa:	c1 e1 06             	shl    ecx,0x6
c0024bfd:	09 d9                	or     ecx,ebx
c0024bff:	88 08                	mov    BYTE PTR [eax],cl
c0024c01:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024c03:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024c09:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024c0f:	89 08                	mov    DWORD PTR [eax],ecx
c0024c11:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024c17:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024c1d:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024c23:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024c26:	52                   	push   edx
c0024c27:	68 90 00 00 00       	push   0x90
c0024c2c:	6a 00                	push   0x0
c0024c2e:	53                   	push   ebx
c0024c2f:	e8 44 bb fd ff       	call   c0000778 <memset>
c0024c34:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024c3a:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024c3e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024c44:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024c48:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024c4c:	83 c4 10             	add    esp,0x10
c0024c4f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024c52:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024c58:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024c5e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024c63:	09 c8                	or     eax,ecx
c0024c65:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024c6b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024c6e:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024c75:	66 25 00 7f          	and    ax,0x7f00
c0024c79:	66 0d 27 80          	or     ax,0x8027
c0024c7d:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024c82:	66 89 03             	mov    WORD PTR [ebx],ax
c0024c85:	19 c0                	sbb    eax,eax
c0024c87:	83 e0 f0             	and    eax,0xfffffff0
c0024c8a:	83 c0 35             	add    eax,0x35
c0024c8d:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024c90:	89 f8                	mov    eax,edi
c0024c92:	c1 e8 10             	shr    eax,0x10
c0024c95:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024c98:	89 f8                	mov    eax,edi
c0024c9a:	c1 e8 18             	shr    eax,0x18
c0024c9d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024ca0:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024ca4:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024ca7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024cab:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024cae:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024cb2:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024cb6:	89 f3                	mov    ebx,esi
c0024cb8:	31 c0                	xor    eax,eax
c0024cba:	c1 e3 07             	shl    ebx,0x7
c0024cbd:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024cc1:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024cc7:	80 e1 88             	and    cl,0x88
c0024cca:	74 0a                	je     c0024cd6 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024ccc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024cd1:	74 0a                	je     c0024cdd <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024cd3:	40                   	inc    eax
c0024cd4:	eb eb                	jmp    c0024cc1 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024cd6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024cdb:	75 0a                	jne    c0024ce7 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024cdd:	83 ec 0c             	sub    esp,0xc
c0024ce0:	68 cd cc 02 c0       	push   0xc002cccd
c0024ce5:	eb 56                	jmp    c0024d3d <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024ce7:	b8 01 00 00 00       	mov    eax,0x1
c0024cec:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024cf0:	c1 e6 07             	shl    esi,0x7
c0024cf3:	d3 e0                	shl    eax,cl
c0024cf5:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024cf9:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024cff:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024d05:	85 c8                	test   eax,ecx
c0024d07:	74 20                	je     c0024d29 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024d09:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024d0f:	0f ba e1 1e          	bt     ecx,0x1e
c0024d13:	73 ea                	jae    c0024cff <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024d15:	83 ec 0c             	sub    esp,0xc
c0024d18:	31 db                	xor    ebx,ebx
c0024d1a:	68 db cc 02 c0       	push   0xc002ccdb
c0024d1f:	e8 19 57 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c0024d24:	83 c4 10             	add    esp,0x10
c0024d27:	eb 43                	jmp    c0024d6c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d29:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024d2f:	0f ba e0 1e          	bt     eax,0x1e
c0024d33:	73 17                	jae    c0024d4c <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024d35:	83 ec 0c             	sub    esp,0xc
c0024d38:	68 db cc 02 c0       	push   0xc002ccdb
c0024d3d:	e8 fb 56 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c0024d42:	bb 01 00 00 00       	mov    ebx,0x1
c0024d47:	83 c4 10             	add    esp,0x10
c0024d4a:	eb 20                	jmp    c0024d6c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d4c:	31 db                	xor    ebx,ebx
c0024d4e:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024d53:	75 17                	jne    c0024d6c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d55:	50                   	push   eax
c0024d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d5a:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024d60:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024d64:	e8 db b9 fd ff       	call   c0000744 <memcpy>
c0024d69:	83 c4 10             	add    esp,0x10
c0024d6c:	83 c4 2c             	add    esp,0x2c
c0024d6f:	89 d8                	mov    eax,ebx
c0024d71:	5b                   	pop    ebx
c0024d72:	5e                   	pop    esi
c0024d73:	5f                   	pop    edi
c0024d74:	5d                   	pop    ebp
c0024d75:	c3                   	ret    

c0024d76 <SATA::read(unsigned long long, int, void*)>:
c0024d76:	57                   	push   edi
c0024d77:	b8 04 00 00 00       	mov    eax,0x4
c0024d7c:	56                   	push   esi
c0024d7d:	53                   	push   ebx
c0024d7e:	83 ec 10             	sub    esp,0x10
c0024d81:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024d85:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024d89:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024d8c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024d90:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024d94:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024d9a:	77 3b                	ja     c0024dd7 <SATA::read(unsigned long long, int, void*)+0x61>
c0024d9c:	b8 06 00 00 00       	mov    eax,0x6
c0024da1:	85 d2                	test   edx,edx
c0024da3:	74 32                	je     c0024dd7 <SATA::read(unsigned long long, int, void*)+0x61>
c0024da5:	50                   	push   eax
c0024da6:	50                   	push   eax
c0024da7:	6a 00                	push   0x0
c0024da9:	52                   	push   edx
c0024daa:	53                   	push   ebx
c0024dab:	57                   	push   edi
c0024dac:	56                   	push   esi
c0024dad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024db1:	e8 5a fd ff ff       	call   c0024b10 <SATA::access(unsigned long long, int, void*, bool)>
c0024db6:	83 c4 20             	add    esp,0x20
c0024db9:	85 c0                	test   eax,eax
c0024dbb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024dbf:	75 11                	jne    c0024dd2 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024dc1:	01 1d 88 25 03 c0    	add    DWORD PTR ds:0xc0032588,ebx
c0024dc7:	e8 c0 bb fe ff       	call   c001098c <VgaText::updateDiskUsage()>
c0024dcc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024dd0:	eb 05                	jmp    c0024dd7 <SATA::read(unsigned long long, int, void*)+0x61>
c0024dd2:	b8 01 00 00 00       	mov    eax,0x1
c0024dd7:	83 c4 10             	add    esp,0x10
c0024dda:	5b                   	pop    ebx
c0024ddb:	5e                   	pop    esi
c0024ddc:	5f                   	pop    edi
c0024ddd:	c3                   	ret    

c0024dde <SATA::write(unsigned long long, int, void*)>:
c0024dde:	55                   	push   ebp
c0024ddf:	b8 04 00 00 00       	mov    eax,0x4
c0024de4:	57                   	push   edi
c0024de5:	56                   	push   esi
c0024de6:	53                   	push   ebx
c0024de7:	83 ec 1c             	sub    esp,0x1c
c0024dea:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024dee:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024df2:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024df5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024df9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024dfd:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024e03:	77 56                	ja     c0024e5b <SATA::write(unsigned long long, int, void*)+0x7d>
c0024e05:	b8 06 00 00 00       	mov    eax,0x6
c0024e0a:	85 ff                	test   edi,edi
c0024e0c:	74 4d                	je     c0024e5b <SATA::write(unsigned long long, int, void*)+0x7d>
c0024e0e:	89 ee                	mov    esi,ebp
c0024e10:	c1 e6 09             	shl    esi,0x9
c0024e13:	01 fe                	add    esi,edi
c0024e15:	89 c8                	mov    eax,ecx
c0024e17:	89 da                	mov    edx,ebx
c0024e19:	83 c0 01             	add    eax,0x1
c0024e1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024e20:	83 d2 00             	adc    edx,0x0
c0024e23:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024e27:	50                   	push   eax
c0024e28:	50                   	push   eax
c0024e29:	6a 01                	push   0x1
c0024e2b:	57                   	push   edi
c0024e2c:	81 c7 00 02 00 00    	add    edi,0x200
c0024e32:	6a 01                	push   0x1
c0024e34:	53                   	push   ebx
c0024e35:	51                   	push   ecx
c0024e36:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024e3a:	e8 d1 fc ff ff       	call   c0024b10 <SATA::access(unsigned long long, int, void*, bool)>
c0024e3f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024e43:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024e47:	83 c4 20             	add    esp,0x20
c0024e4a:	39 f7                	cmp    edi,esi
c0024e4c:	75 c7                	jne    c0024e15 <SATA::write(unsigned long long, int, void*)+0x37>
c0024e4e:	01 2d 84 25 03 c0    	add    DWORD PTR ds:0xc0032584,ebp
c0024e54:	e8 33 bb fe ff       	call   c001098c <VgaText::updateDiskUsage()>
c0024e59:	31 c0                	xor    eax,eax
c0024e5b:	83 c4 1c             	add    esp,0x1c
c0024e5e:	5b                   	pop    ebx
c0024e5f:	5e                   	pop    esi
c0024e60:	5f                   	pop    edi
c0024e61:	5d                   	pop    ebp
c0024e62:	c3                   	ret    
c0024e63:	90                   	nop

c0024e64 <SATAPI::write(unsigned long long, int, void*)>:
c0024e64:	b8 03 00 00 00       	mov    eax,0x3
c0024e69:	c3                   	ret    

c0024e6a <SATAPI::close(int, int, void*)>:
c0024e6a:	83 ec 0c             	sub    esp,0xc
c0024e6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e71:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024e77:	85 c0                	test   eax,eax
c0024e79:	74 0c                	je     c0024e87 <SATAPI::close(int, int, void*)+0x1d>
c0024e7b:	83 ec 0c             	sub    esp,0xc
c0024e7e:	8b 10                	mov    edx,DWORD PTR [eax]
c0024e80:	50                   	push   eax
c0024e81:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024e84:	83 c4 10             	add    esp,0x10
c0024e87:	31 c0                	xor    eax,eax
c0024e89:	83 c4 0c             	add    esp,0xc
c0024e8c:	c3                   	ret    
c0024e8d:	90                   	nop

c0024e8e <SATAPI::SATAPI()>:
c0024e8e:	83 ec 0c             	sub    esp,0xc
c0024e91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e95:	83 ec 04             	sub    esp,0x4
c0024e98:	68 00 08 00 00       	push   0x800
c0024e9d:	68 24 cd 02 c0       	push   0xc002cd24
c0024ea2:	50                   	push   eax
c0024ea3:	e8 36 f7 fe ff       	call   c00145de <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024ea8:	83 c4 10             	add    esp,0x10
c0024eab:	ba d0 cd 02 c0       	mov    edx,0xc002cdd0
c0024eb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024eb4:	89 10                	mov    DWORD PTR [eax],edx
c0024eb6:	90                   	nop
c0024eb7:	83 c4 0c             	add    esp,0xc
c0024eba:	c3                   	ret    
c0024ebb:	90                   	nop

c0024ebc <SATAPI::diskRemoved()>:
c0024ebc:	83 ec 18             	sub    esp,0x18
c0024ebf:	68 30 cd 02 c0       	push   0xc002cd30
c0024ec4:	e8 cb de fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0024ec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ecd:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024ed4:	83 c4 1c             	add    esp,0x1c
c0024ed7:	c3                   	ret    

c0024ed8 <SATAPI::diskInserted()>:
c0024ed8:	53                   	push   ebx
c0024ed9:	83 ec 14             	sub    esp,0x14
c0024edc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024ee0:	68 47 cd 02 c0       	push   0xc002cd47
c0024ee5:	e8 aa de fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0024eea:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024ef1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024ef4:	e8 4d f7 fe ff       	call   c0014646 <PhysicalDisk::startCache()>
c0024ef9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024efd:	83 c4 18             	add    esp,0x18
c0024f00:	5b                   	pop    ebx
c0024f01:	e9 ba 18 ff ff       	jmp    c00167c0 <createPartitionsForDisk(PhysicalDisk*)>

c0024f06 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024f06:	55                   	push   ebp
c0024f07:	57                   	push   edi
c0024f08:	56                   	push   esi
c0024f09:	53                   	push   ebx
c0024f0a:	83 ec 24             	sub    esp,0x24
c0024f0d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024f11:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024f15:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0024f1b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024f1f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024f23:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0024f29:	8d 5f 02             	lea    ebx,[edi+0x2]
c0024f2c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024f32:	c1 e3 07             	shl    ebx,0x7
c0024f35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024f39:	89 f8                	mov    eax,edi
c0024f3b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0024f3f:	c1 e0 07             	shl    eax,0x7
c0024f42:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024f46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024f4a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024f54:	53                   	push   ebx
c0024f55:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0024f5b:	e8 d6 eb ff ff       	call   c0023b36 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024f60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024f64:	83 c4 10             	add    esp,0x10
c0024f67:	b8 01 00 00 00       	mov    eax,0x1
c0024f6c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0024f71:	0f 84 8a 01 00 00    	je     c0025101 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0024f77:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024f7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024f7f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024f85:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024f8b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0024f8f:	c1 e1 05             	shl    ecx,0x5
c0024f92:	01 c8                	add    eax,ecx
c0024f94:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024f96:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024f9c:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024fa2:	89 08                	mov    DWORD PTR [eax],ecx
c0024fa4:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024faa:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024fb0:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024fb6:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024fb9:	52                   	push   edx
c0024fba:	68 90 00 00 00       	push   0x90
c0024fbf:	6a 00                	push   0x0
c0024fc1:	53                   	push   ebx
c0024fc2:	e8 b1 b7 fd ff       	call   c0000778 <memset>
c0024fc7:	83 c4 0c             	add    esp,0xc
c0024fca:	8d 43 40             	lea    eax,[ebx+0x40]
c0024fcd:	6a 0c                	push   0xc
c0024fcf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024fd3:	50                   	push   eax
c0024fd4:	e8 6b b7 fd ff       	call   c0000744 <memcpy>
c0024fd9:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0024fdf:	89 ea                	mov    edx,ebp
c0024fe1:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024fe7:	c1 ea 18             	shr    edx,0x18
c0024fea:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024fee:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024ff1:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024ff4:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024ff8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024ffe:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025004:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025009:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c002500d:	09 c8                	or     eax,ecx
c002500f:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025013:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025019:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002501c:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025023:	66 25 00 7f          	and    ax,0x7f00
c0025027:	66 0d 27 80          	or     ax,0x8027
c002502b:	66 89 03             	mov    WORD PTR [ebx],ax
c002502e:	89 e8                	mov    eax,ebp
c0025030:	c1 e8 10             	shr    eax,0x10
c0025033:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025036:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002503a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002503d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025041:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025044:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025048:	83 c4 10             	add    esp,0x10
c002504b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002504f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025053:	31 c0                	xor    eax,eax
c0025055:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002505b:	80 e1 88             	and    cl,0x88
c002505e:	74 0a                	je     c002506a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0025060:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025065:	74 0a                	je     c0025071 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025067:	40                   	inc    eax
c0025068:	eb eb                	jmp    c0025055 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c002506a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002506f:	75 0f                	jne    c0025080 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0025071:	83 ec 0c             	sub    esp,0xc
c0025074:	68 cd cc 02 c0       	push   0xc002cccd
c0025079:	e8 bf 53 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c002507e:	eb 3a                	jmp    c00250ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0025080:	b8 01 00 00 00       	mov    eax,0x1
c0025085:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0025089:	c1 e7 07             	shl    edi,0x7
c002508c:	d3 e0                	shl    eax,cl
c002508e:	03 3c 24             	add    edi,DWORD PTR [esp]
c0025091:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0025097:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c002509d:	85 d0                	test   eax,edx
c002509f:	74 23                	je     c00250c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00250a1:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c00250a7:	0f ba e2 1e          	bt     edx,0x1e
c00250ab:	73 ea                	jae    c0025097 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c00250ad:	83 ec 0c             	sub    esp,0xc
c00250b0:	68 5f cd 02 c0       	push   0xc002cd5f
c00250b5:	e8 da dc fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00250ba:	83 c4 10             	add    esp,0x10
c00250bd:	b8 01 00 00 00       	mov    eax,0x1
c00250c2:	eb 3d                	jmp    c0025101 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00250c4:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00250ca:	0f ba e0 1e          	bt     eax,0x1e
c00250ce:	73 0a                	jae    c00250da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c00250d0:	83 ec 0c             	sub    esp,0xc
c00250d3:	68 72 cd 02 c0       	push   0xc002cd72
c00250d8:	eb db                	jmp    c00250b5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c00250da:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00250df:	74 1e                	je     c00250ff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00250e1:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00250e6:	74 17                	je     c00250ff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00250e8:	50                   	push   eax
c00250e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00250ed:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c00250f3:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00250f7:	e8 48 b6 fd ff       	call   c0000744 <memcpy>
c00250fc:	83 c4 10             	add    esp,0x10
c00250ff:	31 c0                	xor    eax,eax
c0025101:	83 c4 1c             	add    esp,0x1c
c0025104:	5b                   	pop    ebx
c0025105:	5e                   	pop    esi
c0025106:	5f                   	pop    edi
c0025107:	5d                   	pop    ebp
c0025108:	c3                   	ret    
c0025109:	90                   	nop

c002510a <SATAPI::eject()>:
c002510a:	57                   	push   edi
c002510b:	b9 03 00 00 00       	mov    ecx,0x3
c0025110:	53                   	push   ebx
c0025111:	83 ec 14             	sub    esp,0x14
c0025114:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025118:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002511c:	fc                   	cld    
c002511d:	31 c0                	xor    eax,eax
c002511f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025121:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025126:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002512b:	50                   	push   eax
c002512c:	6a 00                	push   0x0
c002512e:	6a 00                	push   0x0
c0025130:	6a 00                	push   0x0
c0025132:	6a 00                	push   0x0
c0025134:	6a 02                	push   0x2
c0025136:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002513a:	50                   	push   eax
c002513b:	53                   	push   ebx
c002513c:	e8 c5 fd ff ff       	call   c0024f06 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025141:	83 c4 14             	add    esp,0x14
c0025144:	53                   	push   ebx
c0025145:	e8 72 fd ff ff       	call   c0024ebc <SATAPI::diskRemoved()>
c002514a:	83 c4 24             	add    esp,0x24
c002514d:	31 c0                	xor    eax,eax
c002514f:	5b                   	pop    ebx
c0025150:	5f                   	pop    edi
c0025151:	c3                   	ret    

c0025152 <SATAPI::detectMedia()>:
c0025152:	56                   	push   esi
c0025153:	53                   	push   ebx
c0025154:	83 ec 28             	sub    esp,0x28
c0025157:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002515b:	6a 0c                	push   0xc
c002515d:	6a 00                	push   0x0
c002515f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025163:	56                   	push   esi
c0025164:	e8 0f b6 fd ff       	call   c0000778 <memset>
c0025169:	83 c4 0c             	add    esp,0xc
c002516c:	6a 00                	push   0x0
c002516e:	6a 00                	push   0x0
c0025170:	6a 00                	push   0x0
c0025172:	6a 00                	push   0x0
c0025174:	6a 00                	push   0x0
c0025176:	56                   	push   esi
c0025177:	53                   	push   ebx
c0025178:	e8 89 fd ff ff       	call   c0024f06 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002517d:	83 c4 1c             	add    esp,0x1c
c0025180:	6a 0c                	push   0xc
c0025182:	6a 00                	push   0x0
c0025184:	56                   	push   esi
c0025185:	e8 ee b5 fd ff       	call   c0000778 <memset>
c002518a:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002518f:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025194:	83 c4 0c             	add    esp,0xc
c0025197:	6a 01                	push   0x1
c0025199:	8d 44 24 16          	lea    eax,[esp+0x16]
c002519d:	50                   	push   eax
c002519e:	6a 00                	push   0x0
c00251a0:	6a 00                	push   0x0
c00251a2:	6a 12                	push   0x12
c00251a4:	56                   	push   esi
c00251a5:	53                   	push   ebx
c00251a6:	e8 5b fd ff ff       	call   c0024f06 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00251ab:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00251af:	83 c4 20             	add    esp,0x20
c00251b2:	83 e0 7f             	and    eax,0x7f
c00251b5:	3c 70                	cmp    al,0x70
c00251b7:	74 15                	je     c00251ce <SATAPI::detectMedia()+0x7c>
c00251b9:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00251c0:	75 0c                	jne    c00251ce <SATAPI::detectMedia()+0x7c>
c00251c2:	83 ec 0c             	sub    esp,0xc
c00251c5:	53                   	push   ebx
c00251c6:	e8 0d fd ff ff       	call   c0024ed8 <SATAPI::diskInserted()>
c00251cb:	83 c4 10             	add    esp,0x10
c00251ce:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00251d2:	83 e0 0f             	and    eax,0xf
c00251d5:	3c 02                	cmp    al,0x2
c00251d7:	75 1b                	jne    c00251f4 <SATAPI::detectMedia()+0xa2>
c00251d9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00251de:	75 2d                	jne    c002520d <SATAPI::detectMedia()+0xbb>
c00251e0:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00251e7:	74 24                	je     c002520d <SATAPI::detectMedia()+0xbb>
c00251e9:	83 ec 0c             	sub    esp,0xc
c00251ec:	53                   	push   ebx
c00251ed:	e8 ca fc ff ff       	call   c0024ebc <SATAPI::diskRemoved()>
c00251f2:	eb 16                	jmp    c002520a <SATAPI::detectMedia()+0xb8>
c00251f4:	84 c0                	test   al,al
c00251f6:	75 15                	jne    c002520d <SATAPI::detectMedia()+0xbb>
c00251f8:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00251ff:	75 0c                	jne    c002520d <SATAPI::detectMedia()+0xbb>
c0025201:	83 ec 0c             	sub    esp,0xc
c0025204:	53                   	push   ebx
c0025205:	e8 ce fc ff ff       	call   c0024ed8 <SATAPI::diskInserted()>
c002520a:	83 c4 10             	add    esp,0x10
c002520d:	83 c4 24             	add    esp,0x24
c0025210:	5b                   	pop    ebx
c0025211:	5e                   	pop    esi
c0025212:	c3                   	ret    
c0025213:	90                   	nop

c0025214 <SATAPI::open(int, int, void*)>:
c0025214:	56                   	push   esi
c0025215:	53                   	push   ebx
c0025216:	50                   	push   eax
c0025217:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002521b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002521f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025229:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002522f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025239:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002523d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025247:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002524d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025254:	e8 84 ac fe ff       	call   c000fedd <Phys::allocatePage()>
c0025259:	89 c6                	mov    esi,eax
c002525b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025261:	81 c6 00 10 00 00    	add    esi,0x1000
c0025267:	e8 71 ac fe ff       	call   c000fedd <Phys::allocatePage()>
c002526c:	39 c6                	cmp    esi,eax
c002526e:	74 10                	je     c0025280 <SATAPI::open(int, int, void*)+0x6c>
c0025270:	83 ec 0c             	sub    esp,0xc
c0025273:	68 87 cd 02 c0       	push   0xc002cd87
c0025278:	e8 c0 51 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c002527d:	83 c4 10             	add    esp,0x10
c0025280:	83 ec 0c             	sub    esp,0xc
c0025283:	6a 02                	push   0x2
c0025285:	e8 ad c8 fe ff       	call   c0011b37 <Virt::allocateKernelVirtualPages(int)>
c002528a:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025290:	e8 49 cb fe ff       	call   c0011dde <Virt::getAKernelVAS()>
c0025295:	6a 03                	push   0x3
c0025297:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002529d:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00252a3:	50                   	push   eax
c00252a4:	e8 57 cf fe ff       	call   c0012200 <VAS::mapPage(unsigned long, unsigned long, int)>
c00252a9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00252b0:	83 c4 14             	add    esp,0x14
c00252b3:	53                   	push   ebx
c00252b4:	e8 99 fe ff ff       	call   c0025152 <SATAPI::detectMedia()>
c00252b9:	83 c4 14             	add    esp,0x14
c00252bc:	31 c0                	xor    eax,eax
c00252be:	5b                   	pop    ebx
c00252bf:	5e                   	pop    esi
c00252c0:	c3                   	ret    
c00252c1:	90                   	nop

c00252c2 <SATAPI::read(unsigned long long, int, void*)>:
c00252c2:	55                   	push   ebp
c00252c3:	57                   	push   edi
c00252c4:	56                   	push   esi
c00252c5:	53                   	push   ebx
c00252c6:	83 ec 1c             	sub    esp,0x1c
c00252c9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00252cd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00252d1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00252d5:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00252dc:	74 19                	je     c00252f7 <SATAPI::read(unsigned long long, int, void*)+0x35>
c00252de:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00252e3:	7e 2e                	jle    c0025313 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00252e5:	83 ec 0c             	sub    esp,0xc
c00252e8:	68 9d cd 02 c0       	push   0xc002cd9d
c00252ed:	e8 4b 51 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c00252f2:	83 c4 10             	add    esp,0x10
c00252f5:	eb 1c                	jmp    c0025313 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00252f7:	83 ec 0c             	sub    esp,0xc
c00252fa:	55                   	push   ebp
c00252fb:	e8 52 fe ff ff       	call   c0025152 <SATAPI::detectMedia()>
c0025300:	83 c4 10             	add    esp,0x10
c0025303:	b8 02 00 00 00       	mov    eax,0x2
c0025308:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002530f:	75 cd                	jne    c00252de <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025311:	eb 49                	jmp    c002535c <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025313:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025317:	b9 03 00 00 00       	mov    ecx,0x3
c002531c:	fc                   	cld    
c002531d:	31 c0                	xor    eax,eax
c002531f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025321:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025326:	89 d8                	mov    eax,ebx
c0025328:	86 e0                	xchg   al,ah
c002532a:	c1 c0 10             	rol    eax,0x10
c002532d:	86 e0                	xchg   al,ah
c002532f:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025333:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025337:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002533b:	50                   	push   eax
c002533c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025340:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025344:	56                   	push   esi
c0025345:	53                   	push   ebx
c0025346:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002534a:	c1 e0 0b             	shl    eax,0xb
c002534d:	50                   	push   eax
c002534e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025352:	50                   	push   eax
c0025353:	55                   	push   ebp
c0025354:	e8 ad fb ff ff       	call   c0024f06 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025359:	83 c4 20             	add    esp,0x20
c002535c:	83 c4 1c             	add    esp,0x1c
c002535f:	5b                   	pop    ebx
c0025360:	5e                   	pop    esi
c0025361:	5f                   	pop    edi
c0025362:	5d                   	pop    ebp
c0025363:	c3                   	ret    

c0025364 <AVX::open(int, int, void*)>:
c0025364:	83 ec 0c             	sub    esp,0xc
c0025367:	e8 3c 11 00 00       	call   c00264a8 <avxInit>
c002536c:	b8 00 00 00 00       	mov    eax,0x0
c0025371:	83 c4 0c             	add    esp,0xc
c0025374:	c3                   	ret    
c0025375:	90                   	nop

c0025376 <AVX::close(int, int, void*)>:
c0025376:	83 ec 0c             	sub    esp,0xc
c0025379:	e8 2b 11 00 00       	call   c00264a9 <avxClose>
c002537e:	b8 00 00 00 00       	mov    eax,0x0
c0025383:	83 c4 0c             	add    esp,0xc
c0025386:	c3                   	ret    
c0025387:	90                   	nop

c0025388 <AVX::available()>:
c0025388:	83 ec 0c             	sub    esp,0xc
c002538b:	e8 10 11 00 00       	call   c00264a0 <avxDetect>
c0025390:	85 c0                	test   eax,eax
c0025392:	0f 95 c0             	setne  al
c0025395:	83 c4 0c             	add    esp,0xc
c0025398:	c3                   	ret    
c0025399:	90                   	nop

c002539a <AVX::save(void*)>:
c002539a:	83 ec 0c             	sub    esp,0xc
c002539d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253a1:	83 ec 0c             	sub    esp,0xc
c00253a4:	50                   	push   eax
c00253a5:	e8 fc 10 00 00       	call   c00264a6 <avxSave>
c00253aa:	83 c4 10             	add    esp,0x10
c00253ad:	90                   	nop
c00253ae:	83 c4 0c             	add    esp,0xc
c00253b1:	c3                   	ret    

c00253b2 <AVX::load(void*)>:
c00253b2:	83 ec 0c             	sub    esp,0xc
c00253b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253b9:	83 ec 0c             	sub    esp,0xc
c00253bc:	50                   	push   eax
c00253bd:	e8 e5 10 00 00       	call   c00264a7 <avxLoad>
c00253c2:	83 c4 10             	add    esp,0x10
c00253c5:	90                   	nop
c00253c6:	83 c4 0c             	add    esp,0xc
c00253c9:	c3                   	ret    

c00253ca <AVX::AVX()>:
c00253ca:	83 ec 0c             	sub    esp,0xc
c00253cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253d1:	83 ec 08             	sub    esp,0x8
c00253d4:	68 00 ce 02 c0       	push   0xc002ce00
c00253d9:	50                   	push   eax
c00253da:	e8 dd f2 fe ff       	call   c00146bc <FPU::FPU(char const*)>
c00253df:	83 c4 10             	add    esp,0x10
c00253e2:	ba 10 ce 02 c0       	mov    edx,0xc002ce10
c00253e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253eb:	89 10                	mov    DWORD PTR [eax],edx
c00253ed:	90                   	nop
c00253ee:	83 c4 0c             	add    esp,0xc
c00253f1:	c3                   	ret    

c00253f2 <MMX::available()>:
c00253f2:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00253f7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00253fd:	83 e0 20             	and    eax,0x20
c0025400:	84 c0                	test   al,al
c0025402:	0f 95 c0             	setne  al
c0025405:	c3                   	ret    

c0025406 <MMX::open(int, int, void*)>:
c0025406:	83 ec 0c             	sub    esp,0xc
c0025409:	e8 1e 11 00 00       	call   c002652c <x87Init>
c002540e:	b8 00 00 00 00       	mov    eax,0x0
c0025413:	83 c4 0c             	add    esp,0xc
c0025416:	c3                   	ret    
c0025417:	90                   	nop

c0025418 <MMX::close(int, int, void*)>:
c0025418:	83 ec 0c             	sub    esp,0xc
c002541b:	e8 26 11 00 00       	call   c0026546 <x87Close>
c0025420:	b8 00 00 00 00       	mov    eax,0x0
c0025425:	83 c4 0c             	add    esp,0xc
c0025428:	c3                   	ret    
c0025429:	90                   	nop

c002542a <MMX::save(void*)>:
c002542a:	83 ec 0c             	sub    esp,0xc
c002542d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025431:	83 ec 0c             	sub    esp,0xc
c0025434:	50                   	push   eax
c0025435:	e8 e7 10 00 00       	call   c0026521 <x87Save>
c002543a:	83 c4 10             	add    esp,0x10
c002543d:	90                   	nop
c002543e:	83 c4 0c             	add    esp,0xc
c0025441:	c3                   	ret    

c0025442 <MMX::load(void*)>:
c0025442:	83 ec 0c             	sub    esp,0xc
c0025445:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025449:	83 ec 0c             	sub    esp,0xc
c002544c:	50                   	push   eax
c002544d:	e8 d5 10 00 00       	call   c0026527 <x87Load>
c0025452:	83 c4 10             	add    esp,0x10
c0025455:	90                   	nop
c0025456:	83 c4 0c             	add    esp,0xc
c0025459:	c3                   	ret    

c002545a <MMX::MMX()>:
c002545a:	83 ec 0c             	sub    esp,0xc
c002545d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025461:	83 ec 08             	sub    esp,0x8
c0025464:	68 40 ce 02 c0       	push   0xc002ce40
c0025469:	50                   	push   eax
c002546a:	e8 4d f2 fe ff       	call   c00146bc <FPU::FPU(char const*)>
c002546f:	83 c4 10             	add    esp,0x10
c0025472:	ba 50 ce 02 c0       	mov    edx,0xc002ce50
c0025477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002547b:	89 10                	mov    DWORD PTR [eax],edx
c002547d:	90                   	nop
c002547e:	83 c4 0c             	add    esp,0xc
c0025481:	c3                   	ret    

c0025482 <SSE::open(int, int, void*)>:
c0025482:	83 ec 0c             	sub    esp,0xc
c0025485:	e8 5a 10 00 00       	call   c00264e4 <sseInit>
c002548a:	b8 00 00 00 00       	mov    eax,0x0
c002548f:	83 c4 0c             	add    esp,0xc
c0025492:	c3                   	ret    
c0025493:	90                   	nop

c0025494 <SSE::close(int, int, void*)>:
c0025494:	83 ec 0c             	sub    esp,0xc
c0025497:	e8 58 10 00 00       	call   c00264f4 <sseClose>
c002549c:	b8 00 00 00 00       	mov    eax,0x0
c00254a1:	83 c4 0c             	add    esp,0xc
c00254a4:	c3                   	ret    
c00254a5:	90                   	nop

c00254a6 <SSE::available()>:
c00254a6:	83 ec 1c             	sub    esp,0x1c
c00254a9:	e8 12 10 00 00       	call   c00264c0 <absolutelyNoChanceInHell>
c00254ae:	85 c0                	test   eax,eax
c00254b0:	0f 95 c0             	setne  al
c00254b3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00254b7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00254bb:	83 c4 1c             	add    esp,0x1c
c00254be:	c3                   	ret    
c00254bf:	90                   	nop

c00254c0 <SSE::save(void*)>:
c00254c0:	83 ec 0c             	sub    esp,0xc
c00254c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254c7:	83 ec 0c             	sub    esp,0xc
c00254ca:	50                   	push   eax
c00254cb:	e8 08 10 00 00       	call   c00264d8 <sseSave>
c00254d0:	83 c4 10             	add    esp,0x10
c00254d3:	90                   	nop
c00254d4:	83 c4 0c             	add    esp,0xc
c00254d7:	c3                   	ret    

c00254d8 <SSE::load(void*)>:
c00254d8:	83 ec 0c             	sub    esp,0xc
c00254db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254df:	83 ec 0c             	sub    esp,0xc
c00254e2:	50                   	push   eax
c00254e3:	e8 f6 0f 00 00       	call   c00264de <sseLoad>
c00254e8:	83 c4 10             	add    esp,0x10
c00254eb:	90                   	nop
c00254ec:	83 c4 0c             	add    esp,0xc
c00254ef:	c3                   	ret    

c00254f0 <SSE::SSE()>:
c00254f0:	83 ec 0c             	sub    esp,0xc
c00254f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254f7:	83 ec 08             	sub    esp,0x8
c00254fa:	68 80 ce 02 c0       	push   0xc002ce80
c00254ff:	50                   	push   eax
c0025500:	e8 b7 f1 fe ff       	call   c00146bc <FPU::FPU(char const*)>
c0025505:	83 c4 10             	add    esp,0x10
c0025508:	ba 90 ce 02 c0       	mov    edx,0xc002ce90
c002550d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025511:	89 10                	mov    DWORD PTR [eax],edx
c0025513:	90                   	nop
c0025514:	83 c4 0c             	add    esp,0xc
c0025517:	c3                   	ret    

c0025518 <x87::open(int, int, void*)>:
c0025518:	83 ec 0c             	sub    esp,0xc
c002551b:	e8 0c 10 00 00       	call   c002652c <x87Init>
c0025520:	b8 00 00 00 00       	mov    eax,0x0
c0025525:	83 c4 0c             	add    esp,0xc
c0025528:	c3                   	ret    
c0025529:	90                   	nop

c002552a <x87::close(int, int, void*)>:
c002552a:	83 ec 0c             	sub    esp,0xc
c002552d:	e8 14 10 00 00       	call   c0026546 <x87Close>
c0025532:	b8 00 00 00 00       	mov    eax,0x0
c0025537:	83 c4 0c             	add    esp,0xc
c002553a:	c3                   	ret    
c002553b:	90                   	nop

c002553c <x87::available()>:
c002553c:	83 ec 0c             	sub    esp,0xc
c002553f:	e8 c2 0f 00 00       	call   c0026506 <x87Detect>
c0025544:	85 c0                	test   eax,eax
c0025546:	0f 95 c0             	setne  al
c0025549:	83 c4 0c             	add    esp,0xc
c002554c:	c3                   	ret    
c002554d:	90                   	nop

c002554e <x87::save(void*)>:
c002554e:	83 ec 0c             	sub    esp,0xc
c0025551:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025555:	83 ec 0c             	sub    esp,0xc
c0025558:	50                   	push   eax
c0025559:	e8 c3 0f 00 00       	call   c0026521 <x87Save>
c002555e:	83 c4 10             	add    esp,0x10
c0025561:	90                   	nop
c0025562:	83 c4 0c             	add    esp,0xc
c0025565:	c3                   	ret    

c0025566 <x87::load(void*)>:
c0025566:	83 ec 0c             	sub    esp,0xc
c0025569:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002556d:	83 ec 0c             	sub    esp,0xc
c0025570:	50                   	push   eax
c0025571:	e8 b1 0f 00 00       	call   c0026527 <x87Load>
c0025576:	83 c4 10             	add    esp,0x10
c0025579:	90                   	nop
c002557a:	83 c4 0c             	add    esp,0xc
c002557d:	c3                   	ret    

c002557e <x87::x87()>:
c002557e:	83 ec 0c             	sub    esp,0xc
c0025581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025585:	83 ec 08             	sub    esp,0x8
c0025588:	68 c0 ce 02 c0       	push   0xc002cec0
c002558d:	50                   	push   eax
c002558e:	e8 29 f1 fe ff       	call   c00146bc <FPU::FPU(char const*)>
c0025593:	83 c4 10             	add    esp,0x10
c0025596:	ba d0 ce 02 c0       	mov    edx,0xc002ced0
c002559b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002559f:	89 10                	mov    DWORD PTR [eax],edx
c00255a1:	90                   	nop
c00255a2:	83 c4 0c             	add    esp,0xc
c00255a5:	c3                   	ret    

c00255a6 <APIC::disable()>:
c00255a6:	90                   	nop
c00255a7:	c3                   	ret    

c00255a8 <APIC::close(int, int, void*)>:
c00255a8:	55                   	push   ebp
c00255a9:	89 e5                	mov    ebp,esp
c00255ab:	83 ec 08             	sub    esp,0x8
c00255ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00255b3:	83 c0 3c             	add    eax,0x3c
c00255b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00255b8:	83 ec 0c             	sub    esp,0xc
c00255bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00255be:	ff d0                	call   eax
c00255c0:	83 c4 10             	add    esp,0x10
c00255c3:	b8 00 00 00 00       	mov    eax,0x0
c00255c8:	c9                   	leave  
c00255c9:	c3                   	ret    

c00255ca <IOAPIC::close(int, int, void*)>:
c00255ca:	b8 00 00 00 00       	mov    eax,0x0
c00255cf:	c3                   	ret    

c00255d0 <APIC::io_wait()>:
c00255d0:	eb 00                	jmp    c00255d2 <APIC::io_wait()+0x2>
c00255d2:	eb 00                	jmp    c00255d4 <APIC::io_wait()+0x4>
c00255d4:	90                   	nop
c00255d5:	c3                   	ret    

c00255d6 <APIC::getBase()>:
c00255d6:	55                   	push   ebp
c00255d7:	89 e5                	mov    ebp,esp
c00255d9:	83 ec 18             	sub    esp,0x18
c00255dc:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00255e1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00255e7:	83 e0 08             	and    eax,0x8
c00255ea:	84 c0                	test   al,al
c00255ec:	75 07                	jne    c00255f5 <APIC::getBase()+0x1f>
c00255ee:	b8 00 00 00 00       	mov    eax,0x0
c00255f3:	eb 21                	jmp    c0025616 <APIC::getBase()+0x40>
c00255f5:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00255fa:	83 ec 08             	sub    esp,0x8
c00255fd:	6a 1b                	push   0x1b
c00255ff:	50                   	push   eax
c0025600:	e8 e3 97 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0025605:	83 c4 10             	add    esp,0x10
c0025608:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002560b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002560e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025611:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025616:	c9                   	leave  
c0025617:	c3                   	ret    

c0025618 <APIC::eoi(unsigned char)>:
c0025618:	55                   	push   ebp
c0025619:	89 e5                	mov    ebp,esp
c002561b:	83 ec 28             	sub    esp,0x28
c002561e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025621:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025624:	83 ec 0c             	sub    esp,0xc
c0025627:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002562a:	e8 a7 ff ff ff       	call   c00255d6 <APIC::getBase()>
c002562f:	83 c4 10             	add    esp,0x10
c0025632:	05 b0 00 00 00       	add    eax,0xb0
c0025637:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002563a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002563d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025643:	90                   	nop
c0025644:	c9                   	leave  
c0025645:	c3                   	ret    

c0025646 <APIC::open(int, int, void*)>:
c0025646:	55                   	push   ebp
c0025647:	89 e5                	mov    ebp,esp
c0025649:	57                   	push   edi
c002564a:	56                   	push   esi
c002564b:	53                   	push   ebx
c002564c:	83 ec 2c             	sub    esp,0x2c
c002564f:	83 ec 0c             	sub    esp,0xc
c0025652:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025655:	e8 7c ff ff ff       	call   c00255d6 <APIC::getBase()>
c002565a:	83 c4 10             	add    esp,0x10
c002565d:	89 c2                	mov    edx,eax
c002565f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025662:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025668:	0f b6 f8             	movzx  edi,al
c002566b:	89 d0                	mov    eax,edx
c002566d:	ba 00 00 00 00       	mov    edx,0x0
c0025672:	89 c1                	mov    ecx,eax
c0025674:	80 e5 ff             	and    ch,0xff
c0025677:	89 cb                	mov    ebx,ecx
c0025679:	0f b6 f2             	movzx  esi,dl
c002567c:	89 d8                	mov    eax,ebx
c002567e:	89 f2                	mov    edx,esi
c0025680:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025683:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025686:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002568a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002568e:	83 e0 00             	and    eax,0x0
c0025691:	09 d0                	or     eax,edx
c0025693:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025697:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002569a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00256a0:	8d 50 01             	lea    edx,[eax+0x1]
c00256a3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00256a6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00256ac:	0f b6 d0             	movzx  edx,al
c00256af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256b2:	83 c2 08             	add    edx,0x8
c00256b5:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00256b9:	0f b6 c9             	movzx  ecx,cl
c00256bc:	81 c9 00 00 01 00    	or     ecx,0x10000
c00256c2:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00256c6:	83 ec 0c             	sub    esp,0xc
c00256c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256cc:	e8 05 ff ff ff       	call   c00255d6 <APIC::getBase()>
c00256d1:	83 c4 10             	add    esp,0x10
c00256d4:	05 f0 00 00 00       	add    eax,0xf0
c00256d9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00256dc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00256df:	8b 00                	mov    eax,DWORD PTR [eax]
c00256e1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00256e4:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00256eb:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00256f2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00256f5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00256f8:	89 10                	mov    DWORD PTR [eax],edx
c00256fa:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025701:	a1 10 0b 03 c0       	mov    eax,ds:0xc0030b10
c0025706:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025709:	7d 7c                	jge    c0025787 <APIC::open(int, int, void*)+0x141>
c002570b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002570e:	8b 04 85 20 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf4e0]
c0025715:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025718:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002571b:	8b 04 85 20 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf4e0]
c0025722:	c1 e8 08             	shr    eax,0x8
c0025725:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025729:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002572c:	8b 04 85 20 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf4e0]
c0025733:	c1 e8 18             	shr    eax,0x18
c0025736:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025739:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002573d:	75 40                	jne    c002577f <APIC::open(int, int, void*)+0x139>
c002573f:	83 ec 0c             	sub    esp,0xc
c0025742:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025745:	e8 8c fe ff ff       	call   c00255d6 <APIC::getBase()>
c002574a:	83 c4 10             	add    esp,0x10
c002574d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025751:	75 07                	jne    c002575a <APIC::open(int, int, void*)+0x114>
c0025753:	ba 60 03 00 00       	mov    edx,0x360
c0025758:	eb 05                	jmp    c002575f <APIC::open(int, int, void*)+0x119>
c002575a:	ba 50 03 00 00       	mov    edx,0x350
c002575f:	01 d0                	add    eax,edx
c0025761:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025764:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025767:	8b 00                	mov    eax,DWORD PTR [eax]
c0025769:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002576c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025773:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025777:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002577a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002577d:	89 10                	mov    DWORD PTR [eax],edx
c002577f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025782:	e9 7a ff ff ff       	jmp    c0025701 <APIC::open(int, int, void*)+0xbb>
c0025787:	b8 00 00 00 00       	mov    eax,0x0
c002578c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002578f:	5b                   	pop    ebx
c0025790:	5e                   	pop    esi
c0025791:	5f                   	pop    edi
c0025792:	5d                   	pop    ebp
c0025793:	c3                   	ret    

c0025794 <IOAPIC::IOAPIC()>:
c0025794:	83 ec 0c             	sub    esp,0xc
c0025797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002579b:	83 ec 08             	sub    esp,0x8
c002579e:	68 00 cf 02 c0       	push   0xc002cf00
c00257a3:	50                   	push   eax
c00257a4:	e8 01 ec fe ff       	call   c00143aa <Device::Device(char const*)>
c00257a9:	83 c4 10             	add    esp,0x10
c00257ac:	ba 28 d0 02 c0       	mov    edx,0xc002d028
c00257b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257b5:	89 10                	mov    DWORD PTR [eax],edx
c00257b7:	90                   	nop
c00257b8:	83 c4 0c             	add    esp,0xc
c00257bb:	c3                   	ret    

c00257bc <APIC::APIC()>:
c00257bc:	53                   	push   ebx
c00257bd:	83 ec 18             	sub    esp,0x18
c00257c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00257c4:	83 ec 08             	sub    esp,0x8
c00257c7:	68 08 cf 02 c0       	push   0xc002cf08
c00257cc:	50                   	push   eax
c00257cd:	e8 44 f3 fe ff       	call   c0014b16 <InterruptController::InterruptController(char const*)>
c00257d2:	83 c4 10             	add    esp,0x10
c00257d5:	ba e0 cf 02 c0       	mov    edx,0xc002cfe0
c00257da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00257de:	89 10                	mov    DWORD PTR [eax],edx
c00257e0:	a0 e0 25 03 c0       	mov    al,ds:0xc00325e0
c00257e5:	83 f0 01             	xor    eax,0x1
c00257e8:	84 c0                	test   al,al
c00257ea:	0f 84 a1 00 00 00    	je     c0025891 <APIC::APIC()+0xd5>
c00257f0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00257f5:	a0 c0 0b 03 c0       	mov    al,ds:0xc0030bc0
c00257fa:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00257fe:	0f 83 86 00 00 00    	jae    c002588a <APIC::APIC()+0xce>
c0025804:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002580c:	83 ec 0c             	sub    esp,0xc
c002580f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025813:	e8 28 a0 fe ff       	call   c000f840 <malloc>
c0025818:	83 c4 10             	add    esp,0x10
c002581b:	89 c3                	mov    ebx,eax
c002581d:	83 ec 0c             	sub    esp,0xc
c0025820:	53                   	push   ebx
c0025821:	e8 6e ff ff ff       	call   c0025794 <IOAPIC::IOAPIC()>
c0025826:	83 c4 10             	add    esp,0x10
c0025829:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002582d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025832:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025836:	89 14 85 c0 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcda40],edx
c002583d:	a1 a0 25 03 c0       	mov    eax,ds:0xc00325a0
c0025842:	40                   	inc    eax
c0025843:	a3 a0 25 03 c0       	mov    ds:0xc00325a0,eax
c0025848:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c002584d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025853:	83 ec 08             	sub    esp,0x8
c0025856:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002585a:	50                   	push   eax
c002585b:	e8 5a e9 fe ff       	call   c00141ba <Device::addChild(Device*)>
c0025860:	83 c4 10             	add    esp,0x10
c0025863:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025867:	8b 00                	mov    eax,DWORD PTR [eax]
c0025869:	83 c0 08             	add    eax,0x8
c002586c:	8b 00                	mov    eax,DWORD PTR [eax]
c002586e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025873:	6a 00                	push   0x0
c0025875:	6a 00                	push   0x0
c0025877:	52                   	push   edx
c0025878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002587c:	ff d0                	call   eax
c002587e:	83 c4 10             	add    esp,0x10
c0025881:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025885:	e9 6b ff ff ff       	jmp    c00257f5 <APIC::APIC()+0x39>
c002588a:	c6 05 e0 25 03 c0 01 	mov    BYTE PTR ds:0xc00325e0,0x1
c0025891:	90                   	nop
c0025892:	83 c4 18             	add    esp,0x18
c0025895:	5b                   	pop    ebx
c0025896:	c3                   	ret    
c0025897:	90                   	nop

c0025898 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025898:	55                   	push   ebp
c0025899:	89 e5                	mov    ebp,esp
c002589b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002589e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00258a4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00258a7:	72 1d                	jb     c00258c6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00258a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258ac:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00258b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258b5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00258bb:	01 d0                	add    eax,edx
c00258bd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00258c0:	73 04                	jae    c00258c6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00258c2:	b0 01                	mov    al,0x1
c00258c4:	eb 02                	jmp    c00258c8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00258c6:	b0 00                	mov    al,0x0
c00258c8:	5d                   	pop    ebp
c00258c9:	c3                   	ret    

c00258ca <IOAPIC::read(int)>:
c00258ca:	55                   	push   ebp
c00258cb:	89 e5                	mov    ebp,esp
c00258cd:	83 ec 10             	sub    esp,0x10
c00258d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258d3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00258d9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00258dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258df:	0f b6 d0             	movzx  edx,al
c00258e2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00258e5:	89 10                	mov    DWORD PTR [eax],edx
c00258e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00258ea:	83 c0 10             	add    eax,0x10
c00258ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00258ef:	c9                   	leave  
c00258f0:	c3                   	ret    
c00258f1:	90                   	nop

c00258f2 <IOAPIC::open(int, int, void*)>:
c00258f2:	55                   	push   ebp
c00258f3:	89 e5                	mov    ebp,esp
c00258f5:	57                   	push   edi
c00258f6:	56                   	push   esi
c00258f7:	53                   	push   ebx
c00258f8:	83 ec 0c             	sub    esp,0xc
c00258fb:	83 ec 0c             	sub    esp,0xc
c00258fe:	68 33 cf 02 c0       	push   0xc002cf33
c0025903:	e8 8c d4 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0025908:	83 c4 10             	add    esp,0x10
c002590b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002590e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025911:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025917:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002591a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025920:	8b 14 85 00 0c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf400]
c0025927:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002592a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025930:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025933:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025939:	8b 14 85 80 0c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf380]
c0025940:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025943:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025949:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002594c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025952:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025955:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002595b:	0f b6 f8             	movzx  edi,al
c002595e:	89 d0                	mov    eax,edx
c0025960:	ba 00 00 00 00       	mov    edx,0x0
c0025965:	89 c1                	mov    ecx,eax
c0025967:	80 e5 ff             	and    ch,0xff
c002596a:	89 cb                	mov    ebx,ecx
c002596c:	0f b6 f2             	movzx  esi,dl
c002596f:	89 d8                	mov    eax,ebx
c0025971:	89 f2                	mov    edx,esi
c0025973:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025976:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025979:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002597d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025981:	83 e0 00             	and    eax,0x0
c0025984:	09 d0                	or     eax,edx
c0025986:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002598a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002598d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025993:	8d 50 01             	lea    edx,[eax+0x1]
c0025996:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025999:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002599f:	0f b6 d0             	movzx  edx,al
c00259a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259a5:	83 c2 08             	add    edx,0x8
c00259a8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00259ac:	0f b6 c9             	movzx  ecx,cl
c00259af:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00259b5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00259b9:	83 ec 08             	sub    esp,0x8
c00259bc:	6a 01                	push   0x1
c00259be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259c1:	e8 04 ff ff ff       	call   c00258ca <IOAPIC::read(int)>
c00259c6:	83 c4 10             	add    esp,0x10
c00259c9:	c1 f8 10             	sar    eax,0x10
c00259cc:	0f b6 c0             	movzx  eax,al
c00259cf:	8d 50 01             	lea    edx,[eax+0x1]
c00259d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259d5:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00259db:	b8 00 00 00 00       	mov    eax,0x0
c00259e0:	8d 65 f4             	lea    esp,[ebp-0xc]
c00259e3:	5b                   	pop    ebx
c00259e4:	5e                   	pop    esi
c00259e5:	5f                   	pop    edi
c00259e6:	5d                   	pop    ebp
c00259e7:	c3                   	ret    

c00259e8 <IOAPIC::write(int, int)>:
c00259e8:	55                   	push   ebp
c00259e9:	89 e5                	mov    ebp,esp
c00259eb:	83 ec 10             	sub    esp,0x10
c00259ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259f1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00259f7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00259fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259fd:	0f b6 d0             	movzx  edx,al
c0025a00:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a03:	89 10                	mov    DWORD PTR [eax],edx
c0025a05:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a08:	8d 50 10             	lea    edx,[eax+0x10]
c0025a0b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025a0e:	89 02                	mov    DWORD PTR [edx],eax
c0025a10:	90                   	nop
c0025a11:	c9                   	leave  
c0025a12:	c3                   	ret    
c0025a13:	90                   	nop

c0025a14 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025a14:	55                   	push   ebp
c0025a15:	89 e5                	mov    ebp,esp
c0025a17:	53                   	push   ebx
c0025a18:	83 ec 2c             	sub    esp,0x2c
c0025a1b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a1e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025a21:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025a24:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025a27:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025a2a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025a2d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025a30:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025a33:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025a36:	88 d8                	mov    al,bl
c0025a38:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025a3b:	88 c8                	mov    al,cl
c0025a3d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025a40:	88 d0                	mov    al,dl
c0025a42:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025a45:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025a49:	83 c0 08             	add    eax,0x8
c0025a4c:	01 c0                	add    eax,eax
c0025a4e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025a51:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025a55:	83 c0 08             	add    eax,0x8
c0025a58:	01 c0                	add    eax,eax
c0025a5a:	40                   	inc    eax
c0025a5b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025a5e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025a61:	50                   	push   eax
c0025a62:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a65:	e8 60 fe ff ff       	call   c00258ca <IOAPIC::read(int)>
c0025a6a:	83 c4 08             	add    esp,0x8
c0025a6d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025a70:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025a77:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025a7a:	c1 e0 18             	shl    eax,0x18
c0025a7d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025a80:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025a83:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025a86:	52                   	push   edx
c0025a87:	50                   	push   eax
c0025a88:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a8b:	e8 58 ff ff ff       	call   c00259e8 <IOAPIC::write(int, int)>
c0025a90:	83 c4 0c             	add    esp,0xc
c0025a93:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025a96:	50                   	push   eax
c0025a97:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a9a:	e8 2b fe ff ff       	call   c00258ca <IOAPIC::read(int)>
c0025a9f:	83 c4 08             	add    esp,0x8
c0025aa2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025aa5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025aac:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025ab3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025aba:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025abe:	74 09                	je     c0025ac9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025ac0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025ac7:	eb 07                	jmp    c0025ad0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025ac9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025ad0:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025ad4:	74 09                	je     c0025adf <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025ad6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025add:	eb 07                	jmp    c0025ae6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025adf:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025ae6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025aed:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025af1:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025af4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025af7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025afa:	52                   	push   edx
c0025afb:	50                   	push   eax
c0025afc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025aff:	e8 e4 fe ff ff       	call   c00259e8 <IOAPIC::write(int, int)>
c0025b04:	83 c4 0c             	add    esp,0xc
c0025b07:	90                   	nop
c0025b08:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025b0b:	c9                   	leave  
c0025b0c:	c3                   	ret    
c0025b0d:	90                   	nop

c0025b0e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025b0e:	55                   	push   ebp
c0025b0f:	89 e5                	mov    ebp,esp
c0025b11:	57                   	push   edi
c0025b12:	56                   	push   esi
c0025b13:	53                   	push   ebx
c0025b14:	83 ec 2c             	sub    esp,0x2c
c0025b17:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025b1a:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025b1d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025b21:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025b25:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025b29:	74 5a                	je     c0025b85 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025b2b:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025b2f:	7f 44                	jg     c0025b75 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025b31:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b34:	05 80 d4 02 c0       	add    eax,0xc002d480
c0025b39:	8a 00                	mov    al,BYTE PTR [eax]
c0025b3b:	0f b6 c0             	movzx  eax,al
c0025b3e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025b41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b44:	66 8b 84 00 a0 0b 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf460]
c0025b4c:	0f b7 c0             	movzx  eax,ax
c0025b4f:	83 e0 02             	and    eax,0x2
c0025b52:	85 c0                	test   eax,eax
c0025b54:	74 04                	je     c0025b5a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025b56:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025b5a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b5d:	66 8b 84 00 a0 0b 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf460]
c0025b65:	0f b7 c0             	movzx  eax,ax
c0025b68:	83 e0 08             	and    eax,0x8
c0025b6b:	85 c0                	test   eax,eax
c0025b6d:	74 16                	je     c0025b85 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025b6f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025b73:	eb 10                	jmp    c0025b85 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025b75:	83 ec 0c             	sub    esp,0xc
c0025b78:	68 44 cf 02 c0       	push   0xc002cf44
c0025b7d:	e8 bb 48 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c0025b82:	83 c4 10             	add    esp,0x10
c0025b85:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025b89:	a1 a0 25 03 c0       	mov    eax,ds:0xc00325a0
c0025b8e:	83 ec 08             	sub    esp,0x8
c0025b91:	50                   	push   eax
c0025b92:	68 7c cf 02 c0       	push   0xc002cf7c
c0025b97:	e8 f8 d1 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0025b9c:	83 c4 10             	add    esp,0x10
c0025b9f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025ba6:	a1 a0 25 03 c0       	mov    eax,ds:0xc00325a0
c0025bab:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025bae:	7d 67                	jge    c0025c17 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025bb0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025bb3:	8b 04 85 c0 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcda40]
c0025bba:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025bbd:	83 ec 08             	sub    esp,0x8
c0025bc0:	52                   	push   edx
c0025bc1:	50                   	push   eax
c0025bc2:	e8 d1 fc ff ff       	call   c0025898 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025bc7:	83 c4 10             	add    esp,0x10
c0025bca:	84 c0                	test   al,al
c0025bcc:	74 44                	je     c0025c12 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025bce:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025bd1:	8b 1c 85 c0 25 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcda40]
c0025bd8:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025bdc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025bdf:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025be3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025be6:	83 c0 20             	add    eax,0x20
c0025be9:	0f b6 f0             	movzx  esi,al
c0025bec:	b8 00 00 00 00       	mov    eax,0x0
c0025bf1:	99                   	cdq    
c0025bf2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025bf5:	0f b6 c9             	movzx  ecx,cl
c0025bf8:	83 ec 04             	sub    esp,0x4
c0025bfb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025bfe:	57                   	push   edi
c0025bff:	56                   	push   esi
c0025c00:	52                   	push   edx
c0025c01:	50                   	push   eax
c0025c02:	51                   	push   ecx
c0025c03:	53                   	push   ebx
c0025c04:	e8 0b fe ff ff       	call   c0025a14 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025c09:	83 c4 20             	add    esp,0x20
c0025c0c:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025c10:	eb 05                	jmp    c0025c17 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025c12:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025c15:	eb 8f                	jmp    c0025ba6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025c17:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025c1a:	83 f0 01             	xor    eax,0x1
c0025c1d:	84 c0                	test   al,al
c0025c1f:	74 10                	je     c0025c31 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025c21:	83 ec 0c             	sub    esp,0xc
c0025c24:	68 93 cf 02 c0       	push   0xc002cf93
c0025c29:	e8 0f 48 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c0025c2e:	83 c4 10             	add    esp,0x10
c0025c31:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025c35:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025c3c:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025c40:	7f 65                	jg     c0025ca7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025c42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025c48:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025c4f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025c52:	01 ca                	add    edx,ecx
c0025c54:	83 c2 54             	add    edx,0x54
c0025c57:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025c5b:	85 c0                	test   eax,eax
c0025c5d:	75 43                	jne    c0025ca2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025c5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c62:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025c65:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025c6c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025c6f:	01 ca                	add    edx,ecx
c0025c71:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025c74:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025c77:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025c7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c7e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025c81:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025c88:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025c8b:	01 ca                	add    edx,ecx
c0025c8d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025c93:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025c96:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025c9a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c9d:	83 e8 20             	sub    eax,0x20
c0025ca0:	eb 1a                	jmp    c0025cbc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025ca2:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025ca5:	eb 95                	jmp    c0025c3c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025ca7:	83 ec 0c             	sub    esp,0xc
c0025caa:	68 a0 cf 02 c0       	push   0xc002cfa0
c0025caf:	e8 89 47 ff ff       	call   c001a43d <Krnl::panic(char const*)>
c0025cb4:	83 c4 10             	add    esp,0x10
c0025cb7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025cbc:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025cbf:	5b                   	pop    ebx
c0025cc0:	5e                   	pop    esi
c0025cc1:	5f                   	pop    edi
c0025cc2:	5d                   	pop    ebp
c0025cc3:	c3                   	ret    

c0025cc4 <PIC::disable()>:
c0025cc4:	55                   	push   ebp
c0025cc5:	89 e5                	mov    ebp,esp
c0025cc7:	83 ec 10             	sub    esp,0x10
c0025cca:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025cd0:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025cd4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025cd7:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025cdb:	ee                   	out    dx,al
c0025cdc:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025ce2:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025ce6:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025ce9:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025ced:	ee                   	out    dx,al
c0025cee:	90                   	nop
c0025cef:	c9                   	leave  
c0025cf0:	c3                   	ret    
c0025cf1:	90                   	nop

c0025cf2 <PIC::close(int, int, void*)>:
c0025cf2:	55                   	push   ebp
c0025cf3:	89 e5                	mov    ebp,esp
c0025cf5:	83 ec 08             	sub    esp,0x8
c0025cf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025cfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0025cfd:	83 c0 3c             	add    eax,0x3c
c0025d00:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d02:	83 ec 0c             	sub    esp,0xc
c0025d05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d08:	ff d0                	call   eax
c0025d0a:	83 c4 10             	add    esp,0x10
c0025d0d:	b8 00 00 00 00       	mov    eax,0x0
c0025d12:	c9                   	leave  
c0025d13:	c3                   	ret    

c0025d14 <PIC::PIC()>:
c0025d14:	83 ec 0c             	sub    esp,0xc
c0025d17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d1b:	83 ec 08             	sub    esp,0x8
c0025d1e:	68 4c d0 02 c0       	push   0xc002d04c
c0025d23:	50                   	push   eax
c0025d24:	e8 ed ed fe ff       	call   c0014b16 <InterruptController::InterruptController(char const*)>
c0025d29:	83 c4 10             	add    esp,0x10
c0025d2c:	ba 78 d0 02 c0       	mov    edx,0xc002d078
c0025d31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d35:	89 10                	mov    DWORD PTR [eax],edx
c0025d37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d3b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d41:	0f b6 d0             	movzx  edx,al
c0025d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d48:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d53:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d59:	0f b6 d0             	movzx  edx,al
c0025d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d60:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025d65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d69:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d6f:	8d 50 01             	lea    edx,[eax+0x1]
c0025d72:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025d76:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025d7c:	0f b6 d0             	movzx  edx,al
c0025d7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d83:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025d87:	83 e1 3f             	and    ecx,0x3f
c0025d8a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d92:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d98:	0f b6 d0             	movzx  edx,al
c0025d9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d9f:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025daa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025db0:	0f b6 d0             	movzx  edx,al
c0025db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025db7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025dbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dc0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025dc6:	8d 50 01             	lea    edx,[eax+0x1]
c0025dc9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025dcd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025dd3:	0f b6 d0             	movzx  edx,al
c0025dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dda:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025dde:	83 e1 3f             	and    ecx,0x3f
c0025de1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025de5:	90                   	nop
c0025de6:	83 c4 0c             	add    esp,0xc
c0025de9:	c3                   	ret    

c0025dea <PIC::ioWait()>:
c0025dea:	eb 00                	jmp    c0025dec <PIC::ioWait()+0x2>
c0025dec:	eb 00                	jmp    c0025dee <PIC::ioWait()+0x4>
c0025dee:	90                   	nop
c0025def:	c3                   	ret    

c0025df0 <PIC::getIRQReg(int)>:
c0025df0:	55                   	push   ebp
c0025df1:	89 e5                	mov    ebp,esp
c0025df3:	83 ec 10             	sub    esp,0x10
c0025df6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025df9:	0f b6 c0             	movzx  eax,al
c0025dfc:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025e02:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025e05:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025e08:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025e0c:	ee                   	out    dx,al
c0025e0d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e10:	0f b6 c0             	movzx  eax,al
c0025e13:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025e19:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025e1c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025e1f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025e23:	ee                   	out    dx,al
c0025e24:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025e2a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025e2e:	89 c2                	mov    edx,eax
c0025e30:	ec                   	in     al,dx
c0025e31:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025e34:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e37:	0f b6 c0             	movzx  eax,al
c0025e3a:	c1 e0 08             	shl    eax,0x8
c0025e3d:	89 c1                	mov    ecx,eax
c0025e3f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025e45:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025e49:	89 c2                	mov    edx,eax
c0025e4b:	ec                   	in     al,dx
c0025e4c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025e4f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025e52:	0f b6 c0             	movzx  eax,al
c0025e55:	09 c8                	or     eax,ecx
c0025e57:	c9                   	leave  
c0025e58:	c3                   	ret    
c0025e59:	90                   	nop

c0025e5a <PIC::eoi(unsigned char)>:
c0025e5a:	55                   	push   ebp
c0025e5b:	89 e5                	mov    ebp,esp
c0025e5d:	83 ec 14             	sub    esp,0x14
c0025e60:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e63:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025e66:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025e6a:	75 1e                	jne    c0025e8a <PIC::eoi(unsigned char)+0x30>
c0025e6c:	6a 0b                	push   0xb
c0025e6e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e71:	e8 7a ff ff ff       	call   c0025df0 <PIC::getIRQReg(int)>
c0025e76:	83 c4 08             	add    esp,0x8
c0025e79:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025e7d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025e81:	25 80 00 00 00       	and    eax,0x80
c0025e86:	85 c0                	test   eax,eax
c0025e88:	74 5f                	je     c0025ee9 <PIC::eoi(unsigned char)+0x8f>
c0025e8a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025e8e:	75 2d                	jne    c0025ebd <PIC::eoi(unsigned char)+0x63>
c0025e90:	6a 0b                	push   0xb
c0025e92:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e95:	e8 56 ff ff ff       	call   c0025df0 <PIC::getIRQReg(int)>
c0025e9a:	83 c4 08             	add    esp,0x8
c0025e9d:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025ea1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025ea4:	66 85 c0             	test   ax,ax
c0025ea7:	78 14                	js     c0025ebd <PIC::eoi(unsigned char)+0x63>
c0025ea9:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025eaf:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025eb3:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025eb6:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025eba:	ee                   	out    dx,al
c0025ebb:	eb 2d                	jmp    c0025eea <PIC::eoi(unsigned char)+0x90>
c0025ebd:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025ec1:	76 12                	jbe    c0025ed5 <PIC::eoi(unsigned char)+0x7b>
c0025ec3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025ec9:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025ecd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025ed0:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025ed4:	ee                   	out    dx,al
c0025ed5:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025edb:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025edf:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025ee2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025ee6:	ee                   	out    dx,al
c0025ee7:	eb 01                	jmp    c0025eea <PIC::eoi(unsigned char)+0x90>
c0025ee9:	90                   	nop
c0025eea:	c9                   	leave  
c0025eeb:	c3                   	ret    

c0025eec <PIC::remap()>:
c0025eec:	55                   	push   ebp
c0025eed:	89 e5                	mov    ebp,esp
c0025eef:	83 ec 48             	sub    esp,0x48
c0025ef2:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025ef9:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025f00:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025f06:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025f09:	89 c2                	mov    edx,eax
c0025f0b:	ec                   	in     al,dx
c0025f0c:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025f0f:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025f12:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025f15:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025f1b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025f1e:	89 c2                	mov    edx,eax
c0025f20:	ec                   	in     al,dx
c0025f21:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025f24:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025f27:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025f2a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025f30:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025f34:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025f37:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025f3a:	ee                   	out    dx,al
c0025f3b:	83 ec 0c             	sub    esp,0xc
c0025f3e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f41:	e8 a4 fe ff ff       	call   c0025dea <PIC::ioWait()>
c0025f46:	83 c4 10             	add    esp,0x10
c0025f49:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025f4f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025f53:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025f56:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025f59:	ee                   	out    dx,al
c0025f5a:	83 ec 0c             	sub    esp,0xc
c0025f5d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f60:	e8 85 fe ff ff       	call   c0025dea <PIC::ioWait()>
c0025f65:	83 c4 10             	add    esp,0x10
c0025f68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025f6b:	0f b6 c0             	movzx  eax,al
c0025f6e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025f74:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025f77:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025f7a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025f7d:	ee                   	out    dx,al
c0025f7e:	83 ec 0c             	sub    esp,0xc
c0025f81:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f84:	e8 61 fe ff ff       	call   c0025dea <PIC::ioWait()>
c0025f89:	83 c4 10             	add    esp,0x10
c0025f8c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025f8f:	0f b6 c0             	movzx  eax,al
c0025f92:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025f98:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025f9b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025f9e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025fa1:	ee                   	out    dx,al
c0025fa2:	83 ec 0c             	sub    esp,0xc
c0025fa5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fa8:	e8 3d fe ff ff       	call   c0025dea <PIC::ioWait()>
c0025fad:	83 c4 10             	add    esp,0x10
c0025fb0:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025fb6:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025fba:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025fbd:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025fc0:	ee                   	out    dx,al
c0025fc1:	83 ec 0c             	sub    esp,0xc
c0025fc4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fc7:	e8 1e fe ff ff       	call   c0025dea <PIC::ioWait()>
c0025fcc:	83 c4 10             	add    esp,0x10
c0025fcf:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025fd5:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025fd9:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025fdc:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025fdf:	ee                   	out    dx,al
c0025fe0:	83 ec 0c             	sub    esp,0xc
c0025fe3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fe6:	e8 ff fd ff ff       	call   c0025dea <PIC::ioWait()>
c0025feb:	83 c4 10             	add    esp,0x10
c0025fee:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025ff4:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025ff8:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025ffb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025ffe:	ee                   	out    dx,al
c0025fff:	83 ec 0c             	sub    esp,0xc
c0026002:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026005:	e8 e0 fd ff ff       	call   c0025dea <PIC::ioWait()>
c002600a:	83 c4 10             	add    esp,0x10
c002600d:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026013:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026017:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002601a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002601d:	ee                   	out    dx,al
c002601e:	83 ec 0c             	sub    esp,0xc
c0026021:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026024:	e8 c1 fd ff ff       	call   c0025dea <PIC::ioWait()>
c0026029:	83 c4 10             	add    esp,0x10
c002602c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026030:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026036:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026039:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002603c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002603f:	ee                   	out    dx,al
c0026040:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026044:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002604a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002604d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026050:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026053:	ee                   	out    dx,al
c0026054:	90                   	nop
c0026055:	c9                   	leave  
c0026056:	c3                   	ret    
c0026057:	90                   	nop

c0026058 <PIC::open(int, int, void*)>:
c0026058:	55                   	push   ebp
c0026059:	89 e5                	mov    ebp,esp
c002605b:	83 ec 18             	sub    esp,0x18
c002605e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026064:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026068:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002606b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002606f:	ee                   	out    dx,al
c0026070:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026076:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002607a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002607d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026081:	ee                   	out    dx,al
c0026082:	83 ec 0c             	sub    esp,0xc
c0026085:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026088:	e8 5f fe ff ff       	call   c0025eec <PIC::remap()>
c002608d:	83 c4 10             	add    esp,0x10
c0026090:	b8 00 00 00 00       	mov    eax,0x0
c0026095:	c9                   	leave  
c0026096:	c3                   	ret    
c0026097:	90                   	nop

c0026098 <APICTimer::close(int, int, void*)>:
c0026098:	b8 00 00 00 00       	mov    eax,0x0
c002609d:	c3                   	ret    

c002609e <apicTimerHandler(regs*, void*)>:
c002609e:	83 ec 0c             	sub    esp,0xc
c00260a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00260a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00260a7:	99                   	cdq    
c00260a8:	52                   	push   edx
c00260a9:	50                   	push   eax
c00260aa:	6a 00                	push   0x0
c00260ac:	68 00 ca 9a 3b       	push   0x3b9aca00
c00260b1:	e8 86 07 00 00       	call   c002683c <__udivdi3>
c00260b6:	83 c4 10             	add    esp,0x10
c00260b9:	83 ec 08             	sub    esp,0x8
c00260bc:	52                   	push   edx
c00260bd:	50                   	push   eax
c00260be:	e8 a2 0a ff ff       	call   c0016b65 <timerHandler(unsigned long long)>
c00260c3:	83 c4 10             	add    esp,0x10
c00260c6:	90                   	nop
c00260c7:	83 c4 0c             	add    esp,0xc
c00260ca:	c3                   	ret    
c00260cb:	90                   	nop

c00260cc <APICTimer::write(int)>:
c00260cc:	53                   	push   ebx
c00260cd:	83 ec 28             	sub    esp,0x28
c00260d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00260d4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00260d8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00260de:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00260e3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00260e9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00260ef:	83 ec 0c             	sub    esp,0xc
c00260f2:	50                   	push   eax
c00260f3:	e8 de f4 ff ff       	call   c00255d6 <APIC::getBase()>
c00260f8:	83 c4 10             	add    esp,0x10
c00260fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00260ff:	a1 b0 e8 02 c0       	mov    eax,ds:0xc002e8b0
c0026104:	8b 15 b4 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e8b4
c002610a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002610e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026112:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026116:	05 e0 03 00 00       	add    eax,0x3e0
c002611b:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026121:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026125:	05 80 03 00 00       	add    eax,0x380
c002612a:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026130:	fb                   	sti    
c0026131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026135:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026139:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002613e:	83 d2 00             	adc    edx,0x0
c0026141:	89 c1                	mov    ecx,eax
c0026143:	89 d3                	mov    ebx,edx
c0026145:	a1 b0 e8 02 c0       	mov    eax,ds:0xc002e8b0
c002614a:	8b 15 b4 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e8b4
c0026150:	39 c8                	cmp    eax,ecx
c0026152:	89 d0                	mov    eax,edx
c0026154:	19 d8                	sbb    eax,ebx
c0026156:	73 02                	jae    c002615a <APICTimer::write(int)+0x8e>
c0026158:	eb d7                	jmp    c0026131 <APICTimer::write(int)+0x65>
c002615a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002615e:	05 20 03 00 00       	add    eax,0x320
c0026163:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026169:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002616d:	05 90 03 00 00       	add    eax,0x390
c0026172:	8b 00                	mov    eax,DWORD PTR [eax]
c0026174:	f7 d0                	not    eax
c0026176:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002617a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002617e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026182:	ba 00 00 00 00       	mov    edx,0x0
c0026187:	f7 f3                	div    ebx
c0026189:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002618d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026191:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026197:	0d 00 00 02 00       	or     eax,0x20000
c002619c:	89 c2                	mov    edx,eax
c002619e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261a2:	05 20 03 00 00       	add    eax,0x320
c00261a7:	89 10                	mov    DWORD PTR [eax],edx
c00261a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261ad:	05 e0 03 00 00       	add    eax,0x3e0
c00261b2:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00261b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261bc:	05 80 03 00 00       	add    eax,0x380
c00261c1:	89 c2                	mov    edx,eax
c00261c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00261c7:	89 02                	mov    DWORD PTR [edx],eax
c00261c9:	90                   	nop
c00261ca:	83 c4 28             	add    esp,0x28
c00261cd:	5b                   	pop    ebx
c00261ce:	c3                   	ret    
c00261cf:	90                   	nop

c00261d0 <APICTimer::open(int, int, void*)>:
c00261d0:	57                   	push   edi
c00261d1:	56                   	push   esi
c00261d2:	53                   	push   ebx
c00261d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00261d9:	83 c0 24             	add    eax,0x24
c00261dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00261de:	83 ec 08             	sub    esp,0x8
c00261e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00261e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00261e9:	ff d0                	call   eax
c00261eb:	83 c4 10             	add    esp,0x10
c00261ee:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00261f3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00261f9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00261ff:	83 ec 0c             	sub    esp,0xc
c0026202:	50                   	push   eax
c0026203:	e8 ce f3 ff ff       	call   c00255d6 <APIC::getBase()>
c0026208:	83 c4 10             	add    esp,0x10
c002620b:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026215:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002621b:	0f b6 f8             	movzx  edi,al
c002621e:	89 d0                	mov    eax,edx
c0026220:	ba 00 00 00 00       	mov    edx,0x0
c0026225:	89 c1                	mov    ecx,eax
c0026227:	80 e5 ff             	and    ch,0xff
c002622a:	89 cb                	mov    ebx,ecx
c002622c:	0f b6 f2             	movzx  esi,dl
c002622f:	89 d8                	mov    eax,ebx
c0026231:	89 f2                	mov    edx,esi
c0026233:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026237:	8d 5f 08             	lea    ebx,[edi+0x8]
c002623a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002623e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026242:	83 e0 00             	and    eax,0x0
c0026245:	09 d0                	or     eax,edx
c0026247:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002624b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002624f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026255:	8d 50 01             	lea    edx,[eax+0x1]
c0026258:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002625c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026262:	0f b6 d0             	movzx  edx,al
c0026265:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026269:	83 c2 08             	add    edx,0x8
c002626c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026270:	0f b6 c9             	movzx  ecx,cl
c0026273:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026279:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002627d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026281:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026285:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002628b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002628f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026293:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026299:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002629d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00262a3:	83 ec 0c             	sub    esp,0xc
c00262a6:	51                   	push   ecx
c00262a7:	6a 01                	push   0x1
c00262a9:	68 9e 60 02 c0       	push   0xc002609e
c00262ae:	52                   	push   edx
c00262af:	50                   	push   eax
c00262b0:	e8 89 de fe ff       	call   c001413e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00262b5:	83 c4 20             	add    esp,0x20
c00262b8:	89 c2                	mov    edx,eax
c00262ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262be:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00262c4:	b8 00 00 00 00       	mov    eax,0x0
c00262c9:	5b                   	pop    ebx
c00262ca:	5e                   	pop    esi
c00262cb:	5f                   	pop    edi
c00262cc:	c3                   	ret    
c00262cd:	90                   	nop

c00262ce <APICTimer::APICTimer()>:
c00262ce:	83 ec 0c             	sub    esp,0xc
c00262d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262d5:	83 ec 08             	sub    esp,0x8
c00262d8:	68 b8 d0 02 c0       	push   0xc002d0b8
c00262dd:	50                   	push   eax
c00262de:	e8 f3 07 ff ff       	call   c0016ad6 <Timer::Timer(char const*)>
c00262e3:	83 c4 10             	add    esp,0x10
c00262e6:	ba cc d0 02 c0       	mov    edx,0xc002d0cc
c00262eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262ef:	89 10                	mov    DWORD PTR [eax],edx
c00262f1:	90                   	nop
c00262f2:	83 c4 0c             	add    esp,0xc
c00262f5:	c3                   	ret    

c00262f6 <PIT::write(int)>:
c00262f6:	83 ec 10             	sub    esp,0x10
c00262f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00262fd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026301:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026307:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002630b:	a3 e4 25 03 c0       	mov    ds:0xc00325e4,eax
c0026310:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026315:	99                   	cdq    
c0026316:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002631a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002631e:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026325:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002632a:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002632e:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026333:	ee                   	out    dx,al
c0026334:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026338:	0f b6 c0             	movzx  eax,al
c002633b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026342:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026346:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002634a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002634f:	ee                   	out    dx,al
c0026350:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026354:	c1 f8 08             	sar    eax,0x8
c0026357:	0f b6 c0             	movzx  eax,al
c002635a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026361:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026365:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026369:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002636e:	ee                   	out    dx,al
c002636f:	90                   	nop
c0026370:	83 c4 10             	add    esp,0x10
c0026373:	c3                   	ret    

c0026374 <pitHandler(regs*, void*)>:
c0026374:	83 ec 0c             	sub    esp,0xc
c0026377:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c002637c:	99                   	cdq    
c002637d:	52                   	push   edx
c002637e:	50                   	push   eax
c002637f:	6a 00                	push   0x0
c0026381:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026386:	e8 b1 04 00 00       	call   c002683c <__udivdi3>
c002638b:	83 c4 10             	add    esp,0x10
c002638e:	83 ec 08             	sub    esp,0x8
c0026391:	52                   	push   edx
c0026392:	50                   	push   eax
c0026393:	e8 cd 07 ff ff       	call   c0016b65 <timerHandler(unsigned long long)>
c0026398:	83 c4 10             	add    esp,0x10
c002639b:	90                   	nop
c002639c:	83 c4 0c             	add    esp,0xc
c002639f:	c3                   	ret    

c00263a0 <PIT::open(int, int, void*)>:
c00263a0:	83 ec 0c             	sub    esp,0xc
c00263a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00263a9:	83 c0 24             	add    eax,0x24
c00263ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00263ae:	83 ec 08             	sub    esp,0x8
c00263b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263b9:	ff d0                	call   eax
c00263bb:	83 c4 10             	add    esp,0x10
c00263be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263c2:	83 ec 0c             	sub    esp,0xc
c00263c5:	6a 00                	push   0x0
c00263c7:	6a 01                	push   0x1
c00263c9:	68 74 63 02 c0       	push   0xc0026374
c00263ce:	6a 00                	push   0x0
c00263d0:	50                   	push   eax
c00263d1:	e8 68 dd fe ff       	call   c001413e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00263d6:	83 c4 20             	add    esp,0x20
c00263d9:	89 c2                	mov    edx,eax
c00263db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263df:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00263e5:	b8 00 00 00 00       	mov    eax,0x0
c00263ea:	83 c4 0c             	add    esp,0xc
c00263ed:	c3                   	ret    

c00263ee <PIT::close(int, int, void*)>:
c00263ee:	83 ec 0c             	sub    esp,0xc
c00263f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263f5:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00263ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026403:	6a 01                	push   0x1
c0026405:	68 74 63 02 c0       	push   0xc0026374
c002640a:	6a 00                	push   0x0
c002640c:	50                   	push   eax
c002640d:	e8 6a dd fe ff       	call   c001417c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026412:	83 c4 10             	add    esp,0x10
c0026415:	b8 00 00 00 00       	mov    eax,0x0
c002641a:	83 c4 0c             	add    esp,0xc
c002641d:	c3                   	ret    

c002641e <PIT::PIT()>:
c002641e:	83 ec 0c             	sub    esp,0xc
c0026421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026425:	83 ec 08             	sub    esp,0x8
c0026428:	68 f4 d0 02 c0       	push   0xc002d0f4
c002642d:	50                   	push   eax
c002642e:	e8 a3 06 ff ff       	call   c0016ad6 <Timer::Timer(char const*)>
c0026433:	83 c4 10             	add    esp,0x10
c0026436:	ba 1c d1 02 c0       	mov    edx,0xc002d11c
c002643b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002643f:	89 10                	mov    DWORD PTR [eax],edx
c0026441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026445:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002644b:	0f b6 d0             	movzx  edx,al
c002644e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026452:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002645d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026463:	0f b6 d0             	movzx  edx,al
c0026466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002646a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002646f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026473:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026479:	8d 50 01             	lea    edx,[eax+0x1]
c002647c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026480:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026486:	0f b6 d0             	movzx  edx,al
c0026489:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002648d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026491:	83 e1 3f             	and    ecx,0x3f
c0026494:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026498:	90                   	nop
c0026499:	83 c4 0c             	add    esp,0xc
c002649c:	c3                   	ret    
c002649d:	66 90                	xchg   ax,ax
c002649f:	90                   	nop

c00264a0 <avxDetect>:
c00264a0:	b8 00 00 00 00       	mov    eax,0x0
c00264a5:	c3                   	ret    

c00264a6 <avxSave>:
c00264a6:	c3                   	ret    

c00264a7 <avxLoad>:
c00264a7:	c3                   	ret    

c00264a8 <avxInit>:
c00264a8:	c3                   	ret    

c00264a9 <avxClose>:
c00264a9:	c3                   	ret    

c00264aa <wouldSheSayYes>:
c00264aa:	c3                   	ret    
c00264ab:	49                   	dec    ecx
c00264ac:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00264b0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00264b4:	75 20                	jne    c00264d6 <sseDetect.noSSE+0x1>
c00264b6:	4e                   	dec    esi
c00264b7:	79 61                	jns    c002651a <x87Detect+0x14>
c00264b9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00264be:	66 90                	xchg   ax,ax

c00264c0 <absolutelyNoChanceInHell>:
c00264c0:	b8 01 00 00 00       	mov    eax,0x1
c00264c5:	0f a2                	cpuid  
c00264c7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00264cd:	74 06                	je     c00264d5 <sseDetect.noSSE>
c00264cf:	b8 01 00 00 00       	mov    eax,0x1
c00264d4:	c3                   	ret    

c00264d5 <sseDetect.noSSE>:
c00264d5:	31 c0                	xor    eax,eax
c00264d7:	c3                   	ret    

c00264d8 <sseSave>:
c00264d8:	0f ae 44 24 08       	fxsave [esp+0x8]
c00264dd:	c3                   	ret    

c00264de <sseLoad>:
c00264de:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c00264e3:	c3                   	ret    

c00264e4 <sseInit>:
c00264e4:	e8 43 00 00 00       	call   c002652c <x87Init>
c00264e9:	0f 20 e0             	mov    eax,cr4
c00264ec:	66 0d 00 06          	or     ax,0x600
c00264f0:	0f 22 e0             	mov    cr4,eax
c00264f3:	c3                   	ret    

c00264f4 <sseClose>:
c00264f4:	c3                   	ret    
c00264f5:	66 90                	xchg   ax,ax
c00264f7:	66 90                	xchg   ax,ax
c00264f9:	66 90                	xchg   ax,ax
c00264fb:	66 90                	xchg   ax,ax
c00264fd:	66 90                	xchg   ax,ax
c00264ff:	90                   	nop

c0026500 <value_37F>:
c0026500:	7f 03                	jg     c0026505 <value_37A+0x1>

c0026502 <value_37E>:
c0026502:	7e 03                	jle    c0026507 <x87Detect+0x1>

c0026504 <value_37A>:
c0026504:	7a 03                	jp     c0026509 <x87Detect+0x3>

c0026506 <x87Detect>:
c0026506:	b8 01 00 00 00       	mov    eax,0x1
c002650b:	0f a2                	cpuid  
c002650d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026513:	74 06                	je     c002651b <x87Detect.nox87>
c0026515:	b8 01 00 00 00       	mov    eax,0x1
c002651a:	c3                   	ret    

c002651b <x87Detect.nox87>:
c002651b:	b8 00 00 00 00       	mov    eax,0x0
c0026520:	c3                   	ret    

c0026521 <x87Save>:
c0026521:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026526:	c3                   	ret    

c0026527 <x87Load>:
c0026527:	dd 64 24 08          	frstor [esp+0x8]
c002652b:	c3                   	ret    

c002652c <x87Init>:
c002652c:	9b db e3             	finit  
c002652f:	0f 20 c0             	mov    eax,cr0
c0026532:	66 25 fb ff          	and    ax,0xfffb
c0026536:	66 0d 22 00          	or     ax,0x22
c002653a:	0f 22 c0             	mov    cr0,eax
c002653d:	0f 06                	clts   
c002653f:	d9 2d 04 65 02 c0    	fldcw  WORD PTR ds:0xc0026504
c0026545:	c3                   	ret    

c0026546 <x87Close>:
c0026546:	c3                   	ret    
c0026547:	90                   	nop

c0026548 <__do_global_ctors_aux>:
c0026548:	a1 8c 90 02 c0       	mov    eax,ds:0xc002908c
c002654d:	83 f8 ff             	cmp    eax,0xffffffff
c0026550:	74 1a                	je     c002656c <__do_global_ctors_aux+0x24>
c0026552:	55                   	push   ebp
c0026553:	89 e5                	mov    ebp,esp
c0026555:	53                   	push   ebx
c0026556:	52                   	push   edx
c0026557:	bb 8c 90 02 c0       	mov    ebx,0xc002908c
c002655c:	ff d0                	call   eax
c002655e:	83 eb 04             	sub    ebx,0x4
c0026561:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026563:	83 f8 ff             	cmp    eax,0xffffffff
c0026566:	75 f4                	jne    c002655c <__do_global_ctors_aux+0x14>
c0026568:	58                   	pop    eax
c0026569:	5b                   	pop    ebx
c002656a:	5d                   	pop    ebp
c002656b:	c3                   	ret    
c002656c:	c3                   	ret    
c002656d:	66 90                	xchg   ax,ax
c002656f:	90                   	nop

c0026570 <__divdi3>:
c0026570:	55                   	push   ebp
c0026571:	57                   	push   edi
c0026572:	56                   	push   esi
c0026573:	53                   	push   ebx
c0026574:	83 ec 1c             	sub    esp,0x1c
c0026577:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002657b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002657f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026582:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026586:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002658a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002658e:	85 db                	test   ebx,ebx
c0026590:	0f 88 8e 00 00 00    	js     c0026624 <__divdi3+0xb4>
c0026596:	89 dd                	mov    ebp,ebx
c0026598:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00265a0:	89 d3                	mov    ebx,edx
c00265a2:	85 d2                	test   edx,edx
c00265a4:	79 0d                	jns    c00265b3 <__divdi3+0x43>
c00265a6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00265aa:	f7 d8                	neg    eax
c00265ac:	83 d2 00             	adc    edx,0x0
c00265af:	f7 da                	neg    edx
c00265b1:	89 d3                	mov    ebx,edx
c00265b3:	89 c7                	mov    edi,eax
c00265b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00265b8:	85 db                	test   ebx,ebx
c00265ba:	75 48                	jne    c0026604 <__divdi3+0x94>
c00265bc:	39 ef                	cmp    edi,ebp
c00265be:	76 24                	jbe    c00265e4 <__divdi3+0x74>
c00265c0:	89 ea                	mov    edx,ebp
c00265c2:	f7 f7                	div    edi
c00265c4:	89 c1                	mov    ecx,eax
c00265c6:	31 f6                	xor    esi,esi
c00265c8:	89 c8                	mov    eax,ecx
c00265ca:	89 f2                	mov    edx,esi
c00265cc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00265d0:	85 c9                	test   ecx,ecx
c00265d2:	74 07                	je     c00265db <__divdi3+0x6b>
c00265d4:	f7 d8                	neg    eax
c00265d6:	83 d2 00             	adc    edx,0x0
c00265d9:	f7 da                	neg    edx
c00265db:	83 c4 1c             	add    esp,0x1c
c00265de:	5b                   	pop    ebx
c00265df:	5e                   	pop    esi
c00265e0:	5f                   	pop    edi
c00265e1:	5d                   	pop    ebp
c00265e2:	c3                   	ret    
c00265e3:	90                   	nop
c00265e4:	85 ff                	test   edi,edi
c00265e6:	75 0b                	jne    c00265f3 <__divdi3+0x83>
c00265e8:	b8 01 00 00 00       	mov    eax,0x1
c00265ed:	31 d2                	xor    edx,edx
c00265ef:	f7 f3                	div    ebx
c00265f1:	89 c7                	mov    edi,eax
c00265f3:	31 d2                	xor    edx,edx
c00265f5:	89 e8                	mov    eax,ebp
c00265f7:	f7 f7                	div    edi
c00265f9:	89 c6                	mov    esi,eax
c00265fb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00265fe:	f7 f7                	div    edi
c0026600:	89 c1                	mov    ecx,eax
c0026602:	eb c4                	jmp    c00265c8 <__divdi3+0x58>
c0026604:	39 eb                	cmp    ebx,ebp
c0026606:	77 3c                	ja     c0026644 <__divdi3+0xd4>
c0026608:	0f bd f3             	bsr    esi,ebx
c002660b:	83 f6 1f             	xor    esi,0x1f
c002660e:	75 40                	jne    c0026650 <__divdi3+0xe0>
c0026610:	39 eb                	cmp    ebx,ebp
c0026612:	72 09                	jb     c002661d <__divdi3+0xad>
c0026614:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026617:	0f 87 97 00 00 00    	ja     c00266b4 <__divdi3+0x144>
c002661d:	b9 01 00 00 00       	mov    ecx,0x1
c0026622:	eb a4                	jmp    c00265c8 <__divdi3+0x58>
c0026624:	f7 d9                	neg    ecx
c0026626:	83 d3 00             	adc    ebx,0x0
c0026629:	f7 db                	neg    ebx
c002662b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002662e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026632:	89 dd                	mov    ebp,ebx
c0026634:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002663c:	e9 5f ff ff ff       	jmp    c00265a0 <__divdi3+0x30>
c0026641:	8d 76 00             	lea    esi,[esi+0x0]
c0026644:	31 f6                	xor    esi,esi
c0026646:	31 c9                	xor    ecx,ecx
c0026648:	e9 7b ff ff ff       	jmp    c00265c8 <__divdi3+0x58>
c002664d:	8d 76 00             	lea    esi,[esi+0x0]
c0026650:	b8 20 00 00 00       	mov    eax,0x20
c0026655:	29 f0                	sub    eax,esi
c0026657:	89 f1                	mov    ecx,esi
c0026659:	d3 e3                	shl    ebx,cl
c002665b:	89 fa                	mov    edx,edi
c002665d:	88 c1                	mov    cl,al
c002665f:	d3 ea                	shr    edx,cl
c0026661:	09 da                	or     edx,ebx
c0026663:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026667:	89 f1                	mov    ecx,esi
c0026669:	d3 e7                	shl    edi,cl
c002666b:	89 eb                	mov    ebx,ebp
c002666d:	88 c1                	mov    cl,al
c002666f:	d3 eb                	shr    ebx,cl
c0026671:	89 f1                	mov    ecx,esi
c0026673:	d3 e5                	shl    ebp,cl
c0026675:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026678:	88 c1                	mov    cl,al
c002667a:	d3 ea                	shr    edx,cl
c002667c:	09 d5                	or     ebp,edx
c002667e:	89 e8                	mov    eax,ebp
c0026680:	89 da                	mov    edx,ebx
c0026682:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026686:	89 d3                	mov    ebx,edx
c0026688:	89 c5                	mov    ebp,eax
c002668a:	f7 e7                	mul    edi
c002668c:	39 d3                	cmp    ebx,edx
c002668e:	72 18                	jb     c00266a8 <__divdi3+0x138>
c0026690:	74 0a                	je     c002669c <__divdi3+0x12c>
c0026692:	89 e9                	mov    ecx,ebp
c0026694:	31 f6                	xor    esi,esi
c0026696:	e9 2d ff ff ff       	jmp    c00265c8 <__divdi3+0x58>
c002669b:	90                   	nop
c002669c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002669f:	89 f1                	mov    ecx,esi
c00266a1:	d3 e7                	shl    edi,cl
c00266a3:	39 c7                	cmp    edi,eax
c00266a5:	73 eb                	jae    c0026692 <__divdi3+0x122>
c00266a7:	90                   	nop
c00266a8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00266ab:	31 f6                	xor    esi,esi
c00266ad:	e9 16 ff ff ff       	jmp    c00265c8 <__divdi3+0x58>
c00266b2:	66 90                	xchg   ax,ax
c00266b4:	31 c9                	xor    ecx,ecx
c00266b6:	e9 0d ff ff ff       	jmp    c00265c8 <__divdi3+0x58>
c00266bb:	90                   	nop

c00266bc <__moddi3>:
c00266bc:	55                   	push   ebp
c00266bd:	57                   	push   edi
c00266be:	56                   	push   esi
c00266bf:	53                   	push   ebx
c00266c0:	83 ec 2c             	sub    esp,0x2c
c00266c3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00266c7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00266cb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00266cf:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00266d3:	85 db                	test   ebx,ebx
c00266d5:	0f 88 85 00 00 00    	js     c0026760 <__moddi3+0xa4>
c00266db:	89 de                	mov    esi,ebx
c00266dd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00266e5:	89 d7                	mov    edi,edx
c00266e7:	85 d2                	test   edx,edx
c00266e9:	79 09                	jns    c00266f4 <__moddi3+0x38>
c00266eb:	f7 d8                	neg    eax
c00266ed:	83 d2 00             	adc    edx,0x0
c00266f0:	f7 da                	neg    edx
c00266f2:	89 d7                	mov    edi,edx
c00266f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00266f8:	89 cd                	mov    ebp,ecx
c00266fa:	85 ff                	test   edi,edi
c00266fc:	75 52                	jne    c0026750 <__moddi3+0x94>
c00266fe:	89 c3                	mov    ebx,eax
c0026700:	39 f0                	cmp    eax,esi
c0026702:	76 24                	jbe    c0026728 <__moddi3+0x6c>
c0026704:	89 c8                	mov    eax,ecx
c0026706:	89 f2                	mov    edx,esi
c0026708:	f7 f3                	div    ebx
c002670a:	89 d6                	mov    esi,edx
c002670c:	89 f0                	mov    eax,esi
c002670e:	31 d2                	xor    edx,edx
c0026710:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026714:	85 c9                	test   ecx,ecx
c0026716:	74 07                	je     c002671f <__moddi3+0x63>
c0026718:	f7 d8                	neg    eax
c002671a:	83 d2 00             	adc    edx,0x0
c002671d:	f7 da                	neg    edx
c002671f:	83 c4 2c             	add    esp,0x2c
c0026722:	5b                   	pop    ebx
c0026723:	5e                   	pop    esi
c0026724:	5f                   	pop    edi
c0026725:	5d                   	pop    ebp
c0026726:	c3                   	ret    
c0026727:	90                   	nop
c0026728:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002672c:	85 db                	test   ebx,ebx
c002672e:	75 0d                	jne    c002673d <__moddi3+0x81>
c0026730:	b8 01 00 00 00       	mov    eax,0x1
c0026735:	31 d2                	xor    edx,edx
c0026737:	f7 f7                	div    edi
c0026739:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002673d:	89 f0                	mov    eax,esi
c002673f:	31 d2                	xor    edx,edx
c0026741:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026745:	f7 f7                	div    edi
c0026747:	89 e8                	mov    eax,ebp
c0026749:	f7 f7                	div    edi
c002674b:	89 d6                	mov    esi,edx
c002674d:	eb bd                	jmp    c002670c <__moddi3+0x50>
c002674f:	90                   	nop
c0026750:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026754:	39 f7                	cmp    edi,esi
c0026756:	76 20                	jbe    c0026778 <__moddi3+0xbc>
c0026758:	89 c8                	mov    eax,ecx
c002675a:	89 f2                	mov    edx,esi
c002675c:	eb b2                	jmp    c0026710 <__moddi3+0x54>
c002675e:	66 90                	xchg   ax,ax
c0026760:	f7 d9                	neg    ecx
c0026762:	83 d3 00             	adc    ebx,0x0
c0026765:	f7 db                	neg    ebx
c0026767:	89 de                	mov    esi,ebx
c0026769:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026771:	e9 6f ff ff ff       	jmp    c00266e5 <__moddi3+0x29>
c0026776:	66 90                	xchg   ax,ax
c0026778:	0f bd c7             	bsr    eax,edi
c002677b:	83 f0 1f             	xor    eax,0x1f
c002677e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026782:	75 24                	jne    c00267a8 <__moddi3+0xec>
c0026784:	39 f7                	cmp    edi,esi
c0026786:	72 06                	jb     c002678e <__moddi3+0xd2>
c0026788:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002678c:	77 0c                	ja     c002679a <__moddi3+0xde>
c002678e:	89 e9                	mov    ecx,ebp
c0026790:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026794:	19 fe                	sbb    esi,edi
c0026796:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002679a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002679e:	89 f2                	mov    edx,esi
c00267a0:	e9 6b ff ff ff       	jmp    c0026710 <__moddi3+0x54>
c00267a5:	8d 76 00             	lea    esi,[esi+0x0]
c00267a8:	b8 20 00 00 00       	mov    eax,0x20
c00267ad:	89 c2                	mov    edx,eax
c00267af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00267b3:	29 da                	sub    edx,ebx
c00267b5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00267b9:	88 d9                	mov    cl,bl
c00267bb:	d3 e7                	shl    edi,cl
c00267bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00267c1:	88 d1                	mov    cl,dl
c00267c3:	d3 e8                	shr    eax,cl
c00267c5:	09 c7                	or     edi,eax
c00267c7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00267cb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00267cf:	89 d8                	mov    eax,ebx
c00267d1:	88 d9                	mov    cl,bl
c00267d3:	d3 e7                	shl    edi,cl
c00267d5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00267d9:	89 f3                	mov    ebx,esi
c00267db:	88 d1                	mov    cl,dl
c00267dd:	d3 eb                	shr    ebx,cl
c00267df:	89 c7                	mov    edi,eax
c00267e1:	88 c1                	mov    cl,al
c00267e3:	d3 e6                	shl    esi,cl
c00267e5:	89 e8                	mov    eax,ebp
c00267e7:	88 d1                	mov    cl,dl
c00267e9:	d3 e8                	shr    eax,cl
c00267eb:	09 f0                	or     eax,esi
c00267ed:	89 f9                	mov    ecx,edi
c00267ef:	d3 e5                	shl    ebp,cl
c00267f1:	89 da                	mov    edx,ebx
c00267f3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00267f7:	89 d3                	mov    ebx,edx
c00267f9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00267fd:	89 c6                	mov    esi,eax
c00267ff:	89 d1                	mov    ecx,edx
c0026801:	39 d3                	cmp    ebx,edx
c0026803:	72 27                	jb     c002682c <__moddi3+0x170>
c0026805:	74 21                	je     c0026828 <__moddi3+0x16c>
c0026807:	29 f5                	sub    ebp,esi
c0026809:	19 cb                	sbb    ebx,ecx
c002680b:	89 de                	mov    esi,ebx
c002680d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026811:	d3 e6                	shl    esi,cl
c0026813:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026817:	89 f9                	mov    ecx,edi
c0026819:	d3 ed                	shr    ebp,cl
c002681b:	09 ee                	or     esi,ebp
c002681d:	89 f0                	mov    eax,esi
c002681f:	d3 eb                	shr    ebx,cl
c0026821:	89 da                	mov    edx,ebx
c0026823:	e9 e8 fe ff ff       	jmp    c0026710 <__moddi3+0x54>
c0026828:	39 c5                	cmp    ebp,eax
c002682a:	73 db                	jae    c0026807 <__moddi3+0x14b>
c002682c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026830:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026834:	89 d1                	mov    ecx,edx
c0026836:	89 c6                	mov    esi,eax
c0026838:	eb cd                	jmp    c0026807 <__moddi3+0x14b>
c002683a:	66 90                	xchg   ax,ax

c002683c <__udivdi3>:
c002683c:	55                   	push   ebp
c002683d:	57                   	push   edi
c002683e:	56                   	push   esi
c002683f:	53                   	push   ebx
c0026840:	83 ec 1c             	sub    esp,0x1c
c0026843:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026847:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002684b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002684f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026853:	85 d2                	test   edx,edx
c0026855:	75 41                	jne    c0026898 <__udivdi3+0x5c>
c0026857:	39 f7                	cmp    edi,esi
c0026859:	76 15                	jbe    c0026870 <__udivdi3+0x34>
c002685b:	89 e8                	mov    eax,ebp
c002685d:	89 f2                	mov    edx,esi
c002685f:	f7 f7                	div    edi
c0026861:	31 db                	xor    ebx,ebx
c0026863:	89 da                	mov    edx,ebx
c0026865:	83 c4 1c             	add    esp,0x1c
c0026868:	5b                   	pop    ebx
c0026869:	5e                   	pop    esi
c002686a:	5f                   	pop    edi
c002686b:	5d                   	pop    ebp
c002686c:	c3                   	ret    
c002686d:	8d 76 00             	lea    esi,[esi+0x0]
c0026870:	89 f9                	mov    ecx,edi
c0026872:	85 ff                	test   edi,edi
c0026874:	75 0b                	jne    c0026881 <__udivdi3+0x45>
c0026876:	b8 01 00 00 00       	mov    eax,0x1
c002687b:	31 d2                	xor    edx,edx
c002687d:	f7 f7                	div    edi
c002687f:	89 c1                	mov    ecx,eax
c0026881:	31 d2                	xor    edx,edx
c0026883:	89 f0                	mov    eax,esi
c0026885:	f7 f1                	div    ecx
c0026887:	89 c3                	mov    ebx,eax
c0026889:	89 e8                	mov    eax,ebp
c002688b:	f7 f1                	div    ecx
c002688d:	89 da                	mov    edx,ebx
c002688f:	83 c4 1c             	add    esp,0x1c
c0026892:	5b                   	pop    ebx
c0026893:	5e                   	pop    esi
c0026894:	5f                   	pop    edi
c0026895:	5d                   	pop    ebp
c0026896:	c3                   	ret    
c0026897:	90                   	nop
c0026898:	39 f2                	cmp    edx,esi
c002689a:	77 1c                	ja     c00268b8 <__udivdi3+0x7c>
c002689c:	0f bd da             	bsr    ebx,edx
c002689f:	83 f3 1f             	xor    ebx,0x1f
c00268a2:	75 24                	jne    c00268c8 <__udivdi3+0x8c>
c00268a4:	39 f2                	cmp    edx,esi
c00268a6:	72 08                	jb     c00268b0 <__udivdi3+0x74>
c00268a8:	39 ef                	cmp    edi,ebp
c00268aa:	0f 87 84 00 00 00    	ja     c0026934 <__udivdi3+0xf8>
c00268b0:	b8 01 00 00 00       	mov    eax,0x1
c00268b5:	eb ac                	jmp    c0026863 <__udivdi3+0x27>
c00268b7:	90                   	nop
c00268b8:	31 db                	xor    ebx,ebx
c00268ba:	31 c0                	xor    eax,eax
c00268bc:	89 da                	mov    edx,ebx
c00268be:	83 c4 1c             	add    esp,0x1c
c00268c1:	5b                   	pop    ebx
c00268c2:	5e                   	pop    esi
c00268c3:	5f                   	pop    edi
c00268c4:	5d                   	pop    ebp
c00268c5:	c3                   	ret    
c00268c6:	66 90                	xchg   ax,ax
c00268c8:	b8 20 00 00 00       	mov    eax,0x20
c00268cd:	29 d8                	sub    eax,ebx
c00268cf:	88 d9                	mov    cl,bl
c00268d1:	d3 e2                	shl    edx,cl
c00268d3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00268d7:	89 fa                	mov    edx,edi
c00268d9:	88 c1                	mov    cl,al
c00268db:	d3 ea                	shr    edx,cl
c00268dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00268e1:	09 d1                	or     ecx,edx
c00268e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00268e7:	88 d9                	mov    cl,bl
c00268e9:	d3 e7                	shl    edi,cl
c00268eb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00268ef:	89 f7                	mov    edi,esi
c00268f1:	88 c1                	mov    cl,al
c00268f3:	d3 ef                	shr    edi,cl
c00268f5:	88 d9                	mov    cl,bl
c00268f7:	d3 e6                	shl    esi,cl
c00268f9:	89 ea                	mov    edx,ebp
c00268fb:	88 c1                	mov    cl,al
c00268fd:	d3 ea                	shr    edx,cl
c00268ff:	09 d6                	or     esi,edx
c0026901:	89 f0                	mov    eax,esi
c0026903:	89 fa                	mov    edx,edi
c0026905:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026909:	89 d7                	mov    edi,edx
c002690b:	89 c6                	mov    esi,eax
c002690d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026911:	39 d7                	cmp    edi,edx
c0026913:	72 13                	jb     c0026928 <__udivdi3+0xec>
c0026915:	74 09                	je     c0026920 <__udivdi3+0xe4>
c0026917:	89 f0                	mov    eax,esi
c0026919:	31 db                	xor    ebx,ebx
c002691b:	e9 43 ff ff ff       	jmp    c0026863 <__udivdi3+0x27>
c0026920:	88 d9                	mov    cl,bl
c0026922:	d3 e5                	shl    ebp,cl
c0026924:	39 c5                	cmp    ebp,eax
c0026926:	73 ef                	jae    c0026917 <__udivdi3+0xdb>
c0026928:	8d 46 ff             	lea    eax,[esi-0x1]
c002692b:	31 db                	xor    ebx,ebx
c002692d:	e9 31 ff ff ff       	jmp    c0026863 <__udivdi3+0x27>
c0026932:	66 90                	xchg   ax,ax
c0026934:	31 c0                	xor    eax,eax
c0026936:	e9 28 ff ff ff       	jmp    c0026863 <__udivdi3+0x27>
c002693b:	90                   	nop

c002693c <__umoddi3>:
c002693c:	55                   	push   ebp
c002693d:	57                   	push   edi
c002693e:	56                   	push   esi
c002693f:	53                   	push   ebx
c0026940:	83 ec 1c             	sub    esp,0x1c
c0026943:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026947:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002694b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002694f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026953:	89 da                	mov    edx,ebx
c0026955:	85 c0                	test   eax,eax
c0026957:	75 37                	jne    c0026990 <__umoddi3+0x54>
c0026959:	39 df                	cmp    edi,ebx
c002695b:	76 13                	jbe    c0026970 <__umoddi3+0x34>
c002695d:	89 f0                	mov    eax,esi
c002695f:	f7 f7                	div    edi
c0026961:	89 d0                	mov    eax,edx
c0026963:	31 d2                	xor    edx,edx
c0026965:	83 c4 1c             	add    esp,0x1c
c0026968:	5b                   	pop    ebx
c0026969:	5e                   	pop    esi
c002696a:	5f                   	pop    edi
c002696b:	5d                   	pop    ebp
c002696c:	c3                   	ret    
c002696d:	8d 76 00             	lea    esi,[esi+0x0]
c0026970:	89 fd                	mov    ebp,edi
c0026972:	85 ff                	test   edi,edi
c0026974:	75 0b                	jne    c0026981 <__umoddi3+0x45>
c0026976:	b8 01 00 00 00       	mov    eax,0x1
c002697b:	31 d2                	xor    edx,edx
c002697d:	f7 f7                	div    edi
c002697f:	89 c5                	mov    ebp,eax
c0026981:	89 d8                	mov    eax,ebx
c0026983:	31 d2                	xor    edx,edx
c0026985:	f7 f5                	div    ebp
c0026987:	89 f0                	mov    eax,esi
c0026989:	f7 f5                	div    ebp
c002698b:	89 d0                	mov    eax,edx
c002698d:	eb d4                	jmp    c0026963 <__umoddi3+0x27>
c002698f:	90                   	nop
c0026990:	89 f1                	mov    ecx,esi
c0026992:	39 d8                	cmp    eax,ebx
c0026994:	76 0a                	jbe    c00269a0 <__umoddi3+0x64>
c0026996:	89 f0                	mov    eax,esi
c0026998:	83 c4 1c             	add    esp,0x1c
c002699b:	5b                   	pop    ebx
c002699c:	5e                   	pop    esi
c002699d:	5f                   	pop    edi
c002699e:	5d                   	pop    ebp
c002699f:	c3                   	ret    
c00269a0:	0f bd e8             	bsr    ebp,eax
c00269a3:	83 f5 1f             	xor    ebp,0x1f
c00269a6:	75 1c                	jne    c00269c4 <__umoddi3+0x88>
c00269a8:	39 d8                	cmp    eax,ebx
c00269aa:	72 04                	jb     c00269b0 <__umoddi3+0x74>
c00269ac:	39 f7                	cmp    edi,esi
c00269ae:	77 08                	ja     c00269b8 <__umoddi3+0x7c>
c00269b0:	89 da                	mov    edx,ebx
c00269b2:	29 fe                	sub    esi,edi
c00269b4:	19 c2                	sbb    edx,eax
c00269b6:	89 f1                	mov    ecx,esi
c00269b8:	89 c8                	mov    eax,ecx
c00269ba:	83 c4 1c             	add    esp,0x1c
c00269bd:	5b                   	pop    ebx
c00269be:	5e                   	pop    esi
c00269bf:	5f                   	pop    edi
c00269c0:	5d                   	pop    ebp
c00269c1:	c3                   	ret    
c00269c2:	66 90                	xchg   ax,ax
c00269c4:	ba 20 00 00 00       	mov    edx,0x20
c00269c9:	29 ea                	sub    edx,ebp
c00269cb:	89 e9                	mov    ecx,ebp
c00269cd:	d3 e0                	shl    eax,cl
c00269cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00269d3:	89 f8                	mov    eax,edi
c00269d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00269d9:	88 d1                	mov    cl,dl
c00269db:	d3 e8                	shr    eax,cl
c00269dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00269e1:	09 c1                	or     ecx,eax
c00269e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00269e7:	89 e9                	mov    ecx,ebp
c00269e9:	d3 e7                	shl    edi,cl
c00269eb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00269ef:	89 d8                	mov    eax,ebx
c00269f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00269f5:	88 d1                	mov    cl,dl
c00269f7:	d3 e8                	shr    eax,cl
c00269f9:	89 c7                	mov    edi,eax
c00269fb:	89 e9                	mov    ecx,ebp
c00269fd:	d3 e3                	shl    ebx,cl
c00269ff:	89 f0                	mov    eax,esi
c0026a01:	88 d1                	mov    cl,dl
c0026a03:	d3 e8                	shr    eax,cl
c0026a05:	09 d8                	or     eax,ebx
c0026a07:	89 e9                	mov    ecx,ebp
c0026a09:	d3 e6                	shl    esi,cl
c0026a0b:	89 f3                	mov    ebx,esi
c0026a0d:	89 fa                	mov    edx,edi
c0026a0f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026a13:	89 d1                	mov    ecx,edx
c0026a15:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a19:	89 c6                	mov    esi,eax
c0026a1b:	89 d7                	mov    edi,edx
c0026a1d:	39 d1                	cmp    ecx,edx
c0026a1f:	72 27                	jb     c0026a48 <__umoddi3+0x10c>
c0026a21:	74 21                	je     c0026a44 <__umoddi3+0x108>
c0026a23:	89 ca                	mov    edx,ecx
c0026a25:	29 f3                	sub    ebx,esi
c0026a27:	19 fa                	sbb    edx,edi
c0026a29:	89 d0                	mov    eax,edx
c0026a2b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026a2f:	d3 e0                	shl    eax,cl
c0026a31:	89 e9                	mov    ecx,ebp
c0026a33:	d3 eb                	shr    ebx,cl
c0026a35:	09 d8                	or     eax,ebx
c0026a37:	d3 ea                	shr    edx,cl
c0026a39:	83 c4 1c             	add    esp,0x1c
c0026a3c:	5b                   	pop    ebx
c0026a3d:	5e                   	pop    esi
c0026a3e:	5f                   	pop    edi
c0026a3f:	5d                   	pop    ebp
c0026a40:	c3                   	ret    
c0026a41:	8d 76 00             	lea    esi,[esi+0x0]
c0026a44:	39 c3                	cmp    ebx,eax
c0026a46:	73 db                	jae    c0026a23 <__umoddi3+0xe7>
c0026a48:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026a4c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026a50:	89 d7                	mov    edi,edx
c0026a52:	89 c6                	mov    esi,eax
c0026a54:	eb cd                	jmp    c0026a23 <__umoddi3+0xe7>

c0026a56 <__addsf3>:
c0026a56:	55                   	push   ebp
c0026a57:	89 e5                	mov    ebp,esp
c0026a59:	57                   	push   edi
c0026a5a:	56                   	push   esi
c0026a5b:	53                   	push   ebx
c0026a5c:	83 ec 08             	sub    esp,0x8
c0026a5f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026a62:	89 fa                	mov    edx,edi
c0026a64:	89 f8                	mov    eax,edi
c0026a66:	c1 f8 17             	sar    eax,0x17
c0026a69:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026a6c:	c1 e2 08             	shl    edx,0x8
c0026a6f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026a75:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026a78:	89 de                	mov    esi,ebx
c0026a7a:	c1 fe 17             	sar    esi,0x17
c0026a7d:	c1 e3 08             	shl    ebx,0x8
c0026a80:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026a86:	31 f0                	xor    eax,esi
c0026a88:	0f 88 3b 01 00 00    	js     c0026bc9 <__addsf3+0x173>
c0026a8e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026a91:	29 f1                	sub    ecx,esi
c0026a93:	85 c9                	test   ecx,ecx
c0026a95:	7e 54                	jle    c0026aeb <__addsf3+0x95>
c0026a97:	89 f0                	mov    eax,esi
c0026a99:	84 c0                	test   al,al
c0026a9b:	75 10                	jne    c0026aad <__addsf3+0x57>
c0026a9d:	85 db                	test   ebx,ebx
c0026a9f:	0f 84 aa 02 00 00    	je     c0026d4f <__addsf3+0x2f9>
c0026aa5:	49                   	dec    ecx
c0026aa6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026aa9:	74 38                	je     c0026ae3 <__addsf3+0x8d>
c0026aab:	eb 13                	jmp    c0026ac0 <__addsf3+0x6a>
c0026aad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ab0:	f7 d0                	not    eax
c0026ab2:	84 c0                	test   al,al
c0026ab4:	0f 84 95 02 00 00    	je     c0026d4f <__addsf3+0x2f9>
c0026aba:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026ac0:	83 f9 1f             	cmp    ecx,0x1f
c0026ac3:	0f 8f 86 02 00 00    	jg     c0026d4f <__addsf3+0x2f9>
c0026ac9:	89 de                	mov    esi,ebx
c0026acb:	d3 ee                	shr    esi,cl
c0026acd:	b8 20 00 00 00       	mov    eax,0x20
c0026ad2:	29 c8                	sub    eax,ecx
c0026ad4:	89 c1                	mov    ecx,eax
c0026ad6:	d3 e3                	shl    ebx,cl
c0026ad8:	31 c0                	xor    eax,eax
c0026ada:	85 db                	test   ebx,ebx
c0026adc:	0f 95 c0             	setne  al
c0026adf:	09 f0                	or     eax,esi
c0026ae1:	01 d0                	add    eax,edx
c0026ae3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ae6:	e9 b6 00 00 00       	jmp    c0026ba1 <__addsf3+0x14b>
c0026aeb:	74 5c                	je     c0026b49 <__addsf3+0xf3>
c0026aed:	89 f1                	mov    ecx,esi
c0026aef:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026af2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026af5:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026af9:	75 14                	jne    c0026b0f <__addsf3+0xb9>
c0026afb:	85 d2                	test   edx,edx
c0026afd:	0f 84 4c 02 00 00    	je     c0026d4f <__addsf3+0x2f9>
c0026b03:	49                   	dec    ecx
c0026b04:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026b07:	0f 84 94 00 00 00    	je     c0026ba1 <__addsf3+0x14b>
c0026b0d:	eb 12                	jmp    c0026b21 <__addsf3+0xcb>
c0026b0f:	89 f0                	mov    eax,esi
c0026b11:	f7 d0                	not    eax
c0026b13:	84 c0                	test   al,al
c0026b15:	0f 84 34 02 00 00    	je     c0026d4f <__addsf3+0x2f9>
c0026b1b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b21:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b24:	83 f9 1f             	cmp    ecx,0x1f
c0026b27:	0f 8f 22 02 00 00    	jg     c0026d4f <__addsf3+0x2f9>
c0026b2d:	89 d7                	mov    edi,edx
c0026b2f:	d3 ef                	shr    edi,cl
c0026b31:	b8 20 00 00 00       	mov    eax,0x20
c0026b36:	29 c8                	sub    eax,ecx
c0026b38:	89 c1                	mov    ecx,eax
c0026b3a:	d3 e2                	shl    edx,cl
c0026b3c:	31 c0                	xor    eax,eax
c0026b3e:	85 d2                	test   edx,edx
c0026b40:	0f 95 c0             	setne  al
c0026b43:	09 f8                	or     eax,edi
c0026b45:	01 d8                	add    eax,ebx
c0026b47:	eb 58                	jmp    c0026ba1 <__addsf3+0x14b>
c0026b49:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026b4c:	8d 70 01             	lea    esi,[eax+0x1]
c0026b4f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026b55:	75 32                	jne    c0026b89 <__addsf3+0x133>
c0026b57:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026b5b:	75 1f                	jne    c0026b7c <__addsf3+0x126>
c0026b5d:	85 d2                	test   edx,edx
c0026b5f:	0f 84 e0 01 00 00    	je     c0026d45 <__addsf3+0x2ef>
c0026b65:	85 db                	test   ebx,ebx
c0026b67:	0f 84 e2 01 00 00    	je     c0026d4f <__addsf3+0x2f9>
c0026b6d:	89 d0                	mov    eax,edx
c0026b6f:	01 d8                	add    eax,ebx
c0026b71:	0f 89 a9 01 00 00    	jns    c0026d20 <__addsf3+0x2ca>
c0026b77:	e9 9d 01 00 00       	jmp    c0026d19 <__addsf3+0x2c3>
c0026b7c:	85 d2                	test   edx,edx
c0026b7e:	0f 85 cb 01 00 00    	jne    c0026d4f <__addsf3+0x2f9>
c0026b84:	e9 bc 01 00 00       	jmp    c0026d45 <__addsf3+0x2ef>
c0026b89:	31 c0                	xor    eax,eax
c0026b8b:	89 f1                	mov    ecx,esi
c0026b8d:	f7 d1                	not    ecx
c0026b8f:	84 c9                	test   cl,cl
c0026b91:	0f 84 90 01 00 00    	je     c0026d27 <__addsf3+0x2d1>
c0026b97:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026b9a:	d1 e8                	shr    eax,1
c0026b9c:	e9 86 01 00 00       	jmp    c0026d27 <__addsf3+0x2d1>
c0026ba1:	85 c0                	test   eax,eax
c0026ba3:	0f 89 7e 01 00 00    	jns    c0026d27 <__addsf3+0x2d1>
c0026ba9:	46                   	inc    esi
c0026baa:	89 f2                	mov    edx,esi
c0026bac:	f7 d2                	not    edx
c0026bae:	84 d2                	test   dl,dl
c0026bb0:	0f 84 6f 01 00 00    	je     c0026d25 <__addsf3+0x2cf>
c0026bb6:	89 c2                	mov    edx,eax
c0026bb8:	83 e2 01             	and    edx,0x1
c0026bbb:	d1 e8                	shr    eax,1
c0026bbd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026bc2:	09 d0                	or     eax,edx
c0026bc4:	e9 5e 01 00 00       	jmp    c0026d27 <__addsf3+0x2d1>
c0026bc9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026bcd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026bd0:	89 f0                	mov    eax,esi
c0026bd2:	0f b6 c0             	movzx  eax,al
c0026bd5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026bd8:	29 c1                	sub    ecx,eax
c0026bda:	85 c9                	test   ecx,ecx
c0026bdc:	7e 55                	jle    c0026c33 <__addsf3+0x1dd>
c0026bde:	85 c0                	test   eax,eax
c0026be0:	75 11                	jne    c0026bf3 <__addsf3+0x19d>
c0026be2:	85 db                	test   ebx,ebx
c0026be4:	0f 84 65 01 00 00    	je     c0026d4f <__addsf3+0x2f9>
c0026bea:	49                   	dec    ecx
c0026beb:	75 19                	jne    c0026c06 <__addsf3+0x1b0>
c0026bed:	89 d0                	mov    eax,edx
c0026bef:	29 d8                	sub    eax,ebx
c0026bf1:	eb 38                	jmp    c0026c2b <__addsf3+0x1d5>
c0026bf3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026bf6:	f7 d0                	not    eax
c0026bf8:	84 c0                	test   al,al
c0026bfa:	0f 84 4f 01 00 00    	je     c0026d4f <__addsf3+0x2f9>
c0026c00:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c06:	83 f9 1f             	cmp    ecx,0x1f
c0026c09:	0f 8f 40 01 00 00    	jg     c0026d4f <__addsf3+0x2f9>
c0026c0f:	89 de                	mov    esi,ebx
c0026c11:	d3 ee                	shr    esi,cl
c0026c13:	b8 20 00 00 00       	mov    eax,0x20
c0026c18:	29 c8                	sub    eax,ecx
c0026c1a:	89 c1                	mov    ecx,eax
c0026c1c:	d3 e3                	shl    ebx,cl
c0026c1e:	31 c0                	xor    eax,eax
c0026c20:	85 db                	test   ebx,ebx
c0026c22:	0f 95 c0             	setne  al
c0026c25:	09 f0                	or     eax,esi
c0026c27:	29 c2                	sub    edx,eax
c0026c29:	89 d0                	mov    eax,edx
c0026c2b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c2e:	e9 af 00 00 00       	jmp    c0026ce2 <__addsf3+0x28c>
c0026c33:	74 5c                	je     c0026c91 <__addsf3+0x23b>
c0026c35:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026c38:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c3b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026c3f:	75 14                	jne    c0026c55 <__addsf3+0x1ff>
c0026c41:	85 d2                	test   edx,edx
c0026c43:	0f 84 06 01 00 00    	je     c0026d4f <__addsf3+0x2f9>
c0026c49:	48                   	dec    eax
c0026c4a:	75 1b                	jne    c0026c67 <__addsf3+0x211>
c0026c4c:	89 d8                	mov    eax,ebx
c0026c4e:	29 d0                	sub    eax,edx
c0026c50:	e9 8d 00 00 00       	jmp    c0026ce2 <__addsf3+0x28c>
c0026c55:	89 f1                	mov    ecx,esi
c0026c57:	f7 d1                	not    ecx
c0026c59:	84 c9                	test   cl,cl
c0026c5b:	0f 84 ee 00 00 00    	je     c0026d4f <__addsf3+0x2f9>
c0026c61:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026c67:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c6a:	83 f8 1f             	cmp    eax,0x1f
c0026c6d:	0f 8f dc 00 00 00    	jg     c0026d4f <__addsf3+0x2f9>
c0026c73:	89 d7                	mov    edi,edx
c0026c75:	88 c1                	mov    cl,al
c0026c77:	d3 ef                	shr    edi,cl
c0026c79:	b9 20 00 00 00       	mov    ecx,0x20
c0026c7e:	29 c1                	sub    ecx,eax
c0026c80:	d3 e2                	shl    edx,cl
c0026c82:	31 c0                	xor    eax,eax
c0026c84:	85 d2                	test   edx,edx
c0026c86:	0f 95 c0             	setne  al
c0026c89:	09 f8                	or     eax,edi
c0026c8b:	29 c3                	sub    ebx,eax
c0026c8d:	89 d8                	mov    eax,ebx
c0026c8f:	eb 51                	jmp    c0026ce2 <__addsf3+0x28c>
c0026c91:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c94:	40                   	inc    eax
c0026c95:	a8 fe                	test   al,0xfe
c0026c97:	75 3d                	jne    c0026cd6 <__addsf3+0x280>
c0026c99:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026c9d:	0f 85 a7 00 00 00    	jne    c0026d4a <__addsf3+0x2f4>
c0026ca3:	85 d2                	test   edx,edx
c0026ca5:	75 12                	jne    c0026cb9 <__addsf3+0x263>
c0026ca7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026caa:	85 db                	test   ebx,ebx
c0026cac:	0f 85 9d 00 00 00    	jne    c0026d4f <__addsf3+0x2f9>
c0026cb2:	31 ff                	xor    edi,edi
c0026cb4:	e9 96 00 00 00       	jmp    c0026d4f <__addsf3+0x2f9>
c0026cb9:	85 db                	test   ebx,ebx
c0026cbb:	0f 84 8e 00 00 00    	je     c0026d4f <__addsf3+0x2f9>
c0026cc1:	89 d0                	mov    eax,edx
c0026cc3:	29 d8                	sub    eax,ebx
c0026cc5:	79 06                	jns    c0026ccd <__addsf3+0x277>
c0026cc7:	89 d8                	mov    eax,ebx
c0026cc9:	29 d0                	sub    eax,edx
c0026ccb:	eb 5a                	jmp    c0026d27 <__addsf3+0x2d1>
c0026ccd:	bf 00 00 00 00       	mov    edi,0x0
c0026cd2:	74 7b                	je     c0026d4f <__addsf3+0x2f9>
c0026cd4:	eb 4a                	jmp    c0026d20 <__addsf3+0x2ca>
c0026cd6:	89 d0                	mov    eax,edx
c0026cd8:	29 d8                	sub    eax,ebx
c0026cda:	79 12                	jns    c0026cee <__addsf3+0x298>
c0026cdc:	89 d8                	mov    eax,ebx
c0026cde:	29 d0                	sub    eax,edx
c0026ce0:	eb 09                	jmp    c0026ceb <__addsf3+0x295>
c0026ce2:	85 c0                	test   eax,eax
c0026ce4:	79 41                	jns    c0026d27 <__addsf3+0x2d1>
c0026ce6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ceb:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026cee:	31 f6                	xor    esi,esi
c0026cf0:	85 c0                	test   eax,eax
c0026cf2:	74 33                	je     c0026d27 <__addsf3+0x2d1>
c0026cf4:	0f bd c8             	bsr    ecx,eax
c0026cf7:	83 f1 1f             	xor    ecx,0x1f
c0026cfa:	d3 e0                	shl    eax,cl
c0026cfc:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026d00:	39 ca                	cmp    edx,ecx
c0026d02:	7f 10                	jg     c0026d14 <__addsf3+0x2be>
c0026d04:	29 d1                	sub    ecx,edx
c0026d06:	41                   	inc    ecx
c0026d07:	d3 e8                	shr    eax,cl
c0026d09:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d0c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026d12:	eb 13                	jmp    c0026d27 <__addsf3+0x2d1>
c0026d14:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d17:	29 ce                	sub    esi,ecx
c0026d19:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026d1e:	eb 07                	jmp    c0026d27 <__addsf3+0x2d1>
c0026d20:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d23:	eb 02                	jmp    c0026d27 <__addsf3+0x2d1>
c0026d25:	31 c0                	xor    eax,eax
c0026d27:	89 c2                	mov    edx,eax
c0026d29:	c1 ea 08             	shr    edx,0x8
c0026d2c:	a8 7f                	test   al,0x7f
c0026d2e:	0f 95 c1             	setne  cl
c0026d31:	09 d1                	or     ecx,edx
c0026d33:	83 e1 01             	and    ecx,0x1
c0026d36:	c1 e8 07             	shr    eax,0x7
c0026d39:	21 c8                	and    eax,ecx
c0026d3b:	c1 e6 17             	shl    esi,0x17
c0026d3e:	09 d6                	or     esi,edx
c0026d40:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026d43:	eb 0a                	jmp    c0026d4f <__addsf3+0x2f9>
c0026d45:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d48:	eb 05                	jmp    c0026d4f <__addsf3+0x2f9>
c0026d4a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026d4f:	89 f8                	mov    eax,edi
c0026d51:	5a                   	pop    edx
c0026d52:	59                   	pop    ecx
c0026d53:	5b                   	pop    ebx
c0026d54:	5e                   	pop    esi
c0026d55:	5f                   	pop    edi
c0026d56:	5d                   	pop    ebp
c0026d57:	c3                   	ret    

c0026d58 <__subsf3>:
c0026d58:	55                   	push   ebp
c0026d59:	89 e5                	mov    ebp,esp
c0026d5b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d5e:	05 00 00 00 80       	add    eax,0x80000000
c0026d63:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026d66:	5d                   	pop    ebp
c0026d67:	e9 ea fc ff ff       	jmp    c0026a56 <__addsf3>

c0026d6c <__negsf2>:
c0026d6c:	55                   	push   ebp
c0026d6d:	89 e5                	mov    ebp,esp
c0026d6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026d72:	05 00 00 00 80       	add    eax,0x80000000
c0026d77:	5d                   	pop    ebp
c0026d78:	c3                   	ret    

c0026d79 <__mulsf3>:
c0026d79:	55                   	push   ebp
c0026d7a:	89 e5                	mov    ebp,esp
c0026d7c:	57                   	push   edi
c0026d7d:	56                   	push   esi
c0026d7e:	53                   	push   ebx
c0026d7f:	83 ec 1c             	sub    esp,0x1c
c0026d82:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026d85:	89 f0                	mov    eax,esi
c0026d87:	89 f1                	mov    ecx,esi
c0026d89:	c1 f9 17             	sar    ecx,0x17
c0026d8c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026d8f:	c1 e0 08             	shl    eax,0x8
c0026d92:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026d97:	89 c1                	mov    ecx,eax
c0026d99:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d9c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026d9f:	89 c7                	mov    edi,eax
c0026da1:	c1 ff 17             	sar    edi,0x17
c0026da4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026da8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026dab:	89 f8                	mov    eax,edi
c0026dad:	0f b6 c0             	movzx  eax,al
c0026db0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026db3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026db7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026dba:	42                   	inc    edx
c0026dbb:	80 e2 fe             	and    dl,0xfe
c0026dbe:	75 7b                	jne    c0026e3b <__mulsf3+0xc2>
c0026dc0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026dc4:	74 54                	je     c0026e1a <__mulsf3+0xa1>
c0026dc6:	85 c9                	test   ecx,ecx
c0026dc8:	0f 85 64 01 00 00    	jne    c0026f32 <__mulsf3+0x1b9>
c0026dce:	8d 57 01             	lea    edx,[edi+0x1]
c0026dd1:	80 e2 fe             	and    dl,0xfe
c0026dd4:	75 1f                	jne    c0026df5 <__mulsf3+0x7c>
c0026dd6:	85 c0                	test   eax,eax
c0026dd8:	b8 00 00 00 00       	mov    eax,0x0
c0026ddd:	74 29                	je     c0026e08 <__mulsf3+0x8f>
c0026ddf:	53                   	push   ebx
c0026de0:	53                   	push   ebx
c0026de1:	50                   	push   eax
c0026de2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026de5:	e8 96 05 00 00       	call   c0027380 <__nesf2>
c0026dea:	83 c4 10             	add    esp,0x10
c0026ded:	85 c0                	test   eax,eax
c0026def:	0f 85 3a 01 00 00    	jne    c0026f2f <__mulsf3+0x1b6>
c0026df5:	85 ff                	test   edi,edi
c0026df7:	0f 89 35 01 00 00    	jns    c0026f32 <__mulsf3+0x1b9>
c0026dfd:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026e03:	e9 2a 01 00 00       	jmp    c0026f32 <__mulsf3+0x1b9>
c0026e08:	51                   	push   ecx
c0026e09:	51                   	push   ecx
c0026e0a:	50                   	push   eax
c0026e0b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e0e:	e8 6d 05 00 00       	call   c0027380 <__nesf2>
c0026e13:	83 c4 10             	add    esp,0x10
c0026e16:	85 c0                	test   eax,eax
c0026e18:	eb 15                	jmp    c0026e2f <__mulsf3+0xb6>
c0026e1a:	85 c9                	test   ecx,ecx
c0026e1c:	74 0b                	je     c0026e29 <__mulsf3+0xb0>
c0026e1e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026e21:	01 c9                	add    ecx,ecx
c0026e23:	78 16                	js     c0026e3b <__mulsf3+0xc2>
c0026e25:	89 d3                	mov    ebx,edx
c0026e27:	eb f5                	jmp    c0026e1e <__mulsf3+0xa5>
c0026e29:	89 f8                	mov    eax,edi
c0026e2b:	f7 d0                	not    eax
c0026e2d:	84 c0                	test   al,al
c0026e2f:	75 c4                	jne    c0026df5 <__mulsf3+0x7c>
c0026e31:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026e36:	e9 f7 00 00 00       	jmp    c0026f32 <__mulsf3+0x1b9>
c0026e3b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026e3e:	c1 e6 08             	shl    esi,0x8
c0026e41:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026e47:	8d 57 01             	lea    edx,[edi+0x1]
c0026e4a:	80 e2 fe             	and    dl,0xfe
c0026e4d:	75 63                	jne    c0026eb2 <__mulsf3+0x139>
c0026e4f:	85 c0                	test   eax,eax
c0026e51:	74 2f                	je     c0026e82 <__mulsf3+0x109>
c0026e53:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026e57:	0f 89 d2 00 00 00    	jns    c0026f2f <__mulsf3+0x1b6>
c0026e5d:	52                   	push   edx
c0026e5e:	52                   	push   edx
c0026e5f:	6a 00                	push   0x0
c0026e61:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e64:	e8 dc 04 00 00       	call   c0027345 <__eqsf2>
c0026e69:	83 c4 10             	add    esp,0x10
c0026e6c:	85 c0                	test   eax,eax
c0026e6e:	0f 85 bb 00 00 00    	jne    c0026f2f <__mulsf3+0x1b6>
c0026e74:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e77:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026e7d:	e9 b0 00 00 00       	jmp    c0026f32 <__mulsf3+0x1b9>
c0026e82:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026e85:	50                   	push   eax
c0026e86:	50                   	push   eax
c0026e87:	6a 00                	push   0x0
c0026e89:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e8c:	e8 b4 04 00 00       	call   c0027345 <__eqsf2>
c0026e91:	83 c4 10             	add    esp,0x10
c0026e94:	85 c0                	test   eax,eax
c0026e96:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026e99:	75 0c                	jne    c0026ea7 <__mulsf3+0x12e>
c0026e9b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026e9f:	0f 89 8a 00 00 00    	jns    c0026f2f <__mulsf3+0x1b6>
c0026ea5:	eb cd                	jmp    c0026e74 <__mulsf3+0xfb>
c0026ea7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026eaa:	01 f6                	add    esi,esi
c0026eac:	78 04                	js     c0026eb2 <__mulsf3+0x139>
c0026eae:	89 c3                	mov    ebx,eax
c0026eb0:	eb f5                	jmp    c0026ea7 <__mulsf3+0x12e>
c0026eb2:	89 c8                	mov    eax,ecx
c0026eb4:	0d 00 00 00 80       	or     eax,0x80000000
c0026eb9:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026ebf:	f7 e6                	mul    esi
c0026ec1:	85 c0                	test   eax,eax
c0026ec3:	0f 95 c0             	setne  al
c0026ec6:	0f b6 c0             	movzx  eax,al
c0026ec9:	09 c2                	or     edx,eax
c0026ecb:	78 03                	js     c0026ed0 <__mulsf3+0x157>
c0026ecd:	01 d2                	add    edx,edx
c0026ecf:	4b                   	dec    ebx
c0026ed0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026ed6:	7f 22                	jg     c0026efa <__mulsf3+0x181>
c0026ed8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026ede:	85 db                	test   ebx,ebx
c0026ee0:	7f 23                	jg     c0026f05 <__mulsf3+0x18c>
c0026ee2:	83 fb e9             	cmp    ebx,0xffffffe9
c0026ee5:	7c 1a                	jl     c0026f01 <__mulsf3+0x188>
c0026ee7:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026eed:	b9 01 00 00 00       	mov    ecx,0x1
c0026ef2:	29 d9                	sub    ecx,ebx
c0026ef4:	d3 ea                	shr    edx,cl
c0026ef6:	31 db                	xor    ebx,ebx
c0026ef8:	eb 0b                	jmp    c0026f05 <__mulsf3+0x18c>
c0026efa:	bb ff 00 00 00       	mov    ebx,0xff
c0026eff:	eb 02                	jmp    c0026f03 <__mulsf3+0x18a>
c0026f01:	31 db                	xor    ebx,ebx
c0026f03:	31 d2                	xor    edx,edx
c0026f05:	89 d0                	mov    eax,edx
c0026f07:	c1 e8 08             	shr    eax,0x8
c0026f0a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026f0d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026f13:	09 fb                	or     ebx,edi
c0026f15:	c1 e3 17             	shl    ebx,0x17
c0026f18:	09 c3                	or     ebx,eax
c0026f1a:	f6 c2 7f             	test   dl,0x7f
c0026f1d:	0f 95 c1             	setne  cl
c0026f20:	09 c8                	or     eax,ecx
c0026f22:	83 e0 01             	and    eax,0x1
c0026f25:	c1 ea 07             	shr    edx,0x7
c0026f28:	21 c2                	and    edx,eax
c0026f2a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026f2d:	eb 03                	jmp    c0026f32 <__mulsf3+0x1b9>
c0026f2f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026f32:	89 f0                	mov    eax,esi
c0026f34:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026f37:	5b                   	pop    ebx
c0026f38:	5e                   	pop    esi
c0026f39:	5f                   	pop    edi
c0026f3a:	5d                   	pop    ebp
c0026f3b:	c3                   	ret    

c0026f3c <__divsf3>:
c0026f3c:	55                   	push   ebp
c0026f3d:	89 e5                	mov    ebp,esp
c0026f3f:	57                   	push   edi
c0026f40:	56                   	push   esi
c0026f41:	53                   	push   ebx
c0026f42:	83 ec 1c             	sub    esp,0x1c
c0026f45:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026f48:	89 d8                	mov    eax,ebx
c0026f4a:	89 d9                	mov    ecx,ebx
c0026f4c:	c1 f9 17             	sar    ecx,0x17
c0026f4f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026f52:	c1 e0 08             	shl    eax,0x8
c0026f55:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f5a:	89 c1                	mov    ecx,eax
c0026f5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f5f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026f62:	89 c7                	mov    edi,eax
c0026f64:	c1 ff 17             	sar    edi,0x17
c0026f67:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026f6b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026f6e:	89 f8                	mov    eax,edi
c0026f70:	0f b6 c0             	movzx  eax,al
c0026f73:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026f76:	29 c6                	sub    esi,eax
c0026f78:	83 c6 7f             	add    esi,0x7f
c0026f7b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026f7e:	42                   	inc    edx
c0026f7f:	80 e2 fe             	and    dl,0xfe
c0026f82:	0f 85 9c 00 00 00    	jne    c0027024 <__divsf3+0xe8>
c0026f88:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026f8c:	74 33                	je     c0026fc1 <__divsf3+0x85>
c0026f8e:	85 c9                	test   ecx,ecx
c0026f90:	0f 85 c7 01 00 00    	jne    c002715d <__divsf3+0x221>
c0026f96:	8d 57 01             	lea    edx,[edi+0x1]
c0026f99:	80 e2 fe             	and    dl,0xfe
c0026f9c:	75 2f                	jne    c0026fcd <__divsf3+0x91>
c0026f9e:	85 c0                	test   eax,eax
c0026fa0:	74 2b                	je     c0026fcd <__divsf3+0x91>
c0026fa2:	51                   	push   ecx
c0026fa3:	51                   	push   ecx
c0026fa4:	6a 00                	push   0x0
c0026fa6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fa9:	e8 d2 03 00 00       	call   c0027380 <__nesf2>
c0026fae:	83 c4 10             	add    esp,0x10
c0026fb1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026fb4:	85 c0                	test   eax,eax
c0026fb6:	0f 85 a1 01 00 00    	jne    c002715d <__divsf3+0x221>
c0026fbc:	e9 92 01 00 00       	jmp    c0027153 <__divsf3+0x217>
c0026fc1:	85 c9                	test   ecx,ecx
c0026fc3:	75 1b                	jne    c0026fe0 <__divsf3+0xa4>
c0026fc5:	8d 57 01             	lea    edx,[edi+0x1]
c0026fc8:	80 e2 fe             	and    dl,0xfe
c0026fcb:	74 1e                	je     c0026feb <__divsf3+0xaf>
c0026fcd:	85 ff                	test   edi,edi
c0026fcf:	0f 89 88 01 00 00    	jns    c002715d <__divsf3+0x221>
c0026fd5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026fdb:	e9 7d 01 00 00       	jmp    c002715d <__divsf3+0x221>
c0026fe0:	8d 56 ff             	lea    edx,[esi-0x1]
c0026fe3:	01 c9                	add    ecx,ecx
c0026fe5:	78 3d                	js     c0027024 <__divsf3+0xe8>
c0026fe7:	89 d6                	mov    esi,edx
c0026fe9:	eb f5                	jmp    c0026fe0 <__divsf3+0xa4>
c0026feb:	85 c0                	test   eax,eax
c0026fed:	b8 00 00 00 00       	mov    eax,0x0
c0026ff2:	74 18                	je     c002700c <__divsf3+0xd0>
c0026ff4:	52                   	push   edx
c0026ff5:	52                   	push   edx
c0026ff6:	50                   	push   eax
c0026ff7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ffa:	e8 81 03 00 00       	call   c0027380 <__nesf2>
c0026fff:	83 c4 10             	add    esp,0x10
c0027002:	85 c0                	test   eax,eax
c0027004:	0f 85 50 01 00 00    	jne    c002715a <__divsf3+0x21e>
c002700a:	eb c1                	jmp    c0026fcd <__divsf3+0x91>
c002700c:	56                   	push   esi
c002700d:	56                   	push   esi
c002700e:	50                   	push   eax
c002700f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027012:	e8 69 03 00 00       	call   c0027380 <__nesf2>
c0027017:	83 c4 10             	add    esp,0x10
c002701a:	85 c0                	test   eax,eax
c002701c:	0f 84 31 01 00 00    	je     c0027153 <__divsf3+0x217>
c0027022:	eb a9                	jmp    c0026fcd <__divsf3+0x91>
c0027024:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027027:	c1 e3 08             	shl    ebx,0x8
c002702a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027030:	8d 57 01             	lea    edx,[edi+0x1]
c0027033:	80 e2 fe             	and    dl,0xfe
c0027036:	75 71                	jne    c00270a9 <__divsf3+0x16d>
c0027038:	85 c0                	test   eax,eax
c002703a:	ba 00 00 00 00       	mov    edx,0x0
c002703f:	74 2f                	je     c0027070 <__divsf3+0x134>
c0027041:	51                   	push   ecx
c0027042:	51                   	push   ecx
c0027043:	52                   	push   edx
c0027044:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027047:	e8 f9 02 00 00       	call   c0027345 <__eqsf2>
c002704c:	83 c4 10             	add    esp,0x10
c002704f:	85 c0                	test   eax,eax
c0027051:	0f 85 03 01 00 00    	jne    c002715a <__divsf3+0x21e>
c0027057:	31 d2                	xor    edx,edx
c0027059:	89 d3                	mov    ebx,edx
c002705b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002705e:	31 f8                	xor    eax,edi
c0027060:	0f 89 f7 00 00 00    	jns    c002715d <__divsf3+0x221>
c0027066:	bb 00 00 00 80       	mov    ebx,0x80000000
c002706b:	e9 ed 00 00 00       	jmp    c002715d <__divsf3+0x221>
c0027070:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027073:	50                   	push   eax
c0027074:	50                   	push   eax
c0027075:	52                   	push   edx
c0027076:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027079:	e8 c7 02 00 00       	call   c0027345 <__eqsf2>
c002707e:	83 c4 10             	add    esp,0x10
c0027081:	85 c0                	test   eax,eax
c0027083:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027086:	75 16                	jne    c002709e <__divsf3+0x162>
c0027088:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002708b:	31 fb                	xor    ebx,edi
c002708d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027093:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027099:	e9 bf 00 00 00       	jmp    c002715d <__divsf3+0x221>
c002709e:	8d 46 01             	lea    eax,[esi+0x1]
c00270a1:	01 db                	add    ebx,ebx
c00270a3:	78 04                	js     c00270a9 <__divsf3+0x16d>
c00270a5:	89 c6                	mov    esi,eax
c00270a7:	eb f5                	jmp    c002709e <__divsf3+0x162>
c00270a9:	89 c8                	mov    eax,ecx
c00270ab:	0d 00 00 00 80       	or     eax,0x80000000
c00270b0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00270b6:	31 d2                	xor    edx,edx
c00270b8:	39 d8                	cmp    eax,ebx
c00270ba:	72 07                	jb     c00270c3 <__divsf3+0x187>
c00270bc:	29 d8                	sub    eax,ebx
c00270be:	ba 01 00 00 00       	mov    edx,0x1
c00270c3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00270ca:	01 d2                	add    edx,edx
c00270cc:	89 c1                	mov    ecx,eax
c00270ce:	01 c0                	add    eax,eax
c00270d0:	85 c9                	test   ecx,ecx
c00270d2:	78 04                	js     c00270d8 <__divsf3+0x19c>
c00270d4:	39 c3                	cmp    ebx,eax
c00270d6:	77 05                	ja     c00270dd <__divsf3+0x1a1>
c00270d8:	29 d8                	sub    eax,ebx
c00270da:	83 ca 01             	or     edx,0x1
c00270dd:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00270e0:	75 e8                	jne    c00270ca <__divsf3+0x18e>
c00270e2:	85 c0                	test   eax,eax
c00270e4:	0f 95 c0             	setne  al
c00270e7:	0f b6 c0             	movzx  eax,al
c00270ea:	c1 e2 06             	shl    edx,0x6
c00270ed:	09 c2                	or     edx,eax
c00270ef:	78 03                	js     c00270f4 <__divsf3+0x1b8>
c00270f1:	01 d2                	add    edx,edx
c00270f3:	4e                   	dec    esi
c00270f4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00270fa:	7f 22                	jg     c002711e <__divsf3+0x1e2>
c00270fc:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027102:	85 f6                	test   esi,esi
c0027104:	7f 23                	jg     c0027129 <__divsf3+0x1ed>
c0027106:	83 fe e9             	cmp    esi,0xffffffe9
c0027109:	7c 1a                	jl     c0027125 <__divsf3+0x1e9>
c002710b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027111:	b9 01 00 00 00       	mov    ecx,0x1
c0027116:	29 f1                	sub    ecx,esi
c0027118:	d3 ea                	shr    edx,cl
c002711a:	31 f6                	xor    esi,esi
c002711c:	eb 0b                	jmp    c0027129 <__divsf3+0x1ed>
c002711e:	be ff 00 00 00       	mov    esi,0xff
c0027123:	eb 02                	jmp    c0027127 <__divsf3+0x1eb>
c0027125:	31 f6                	xor    esi,esi
c0027127:	31 d2                	xor    edx,edx
c0027129:	89 d0                	mov    eax,edx
c002712b:	c1 e8 08             	shr    eax,0x8
c002712e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027131:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027137:	09 fe                	or     esi,edi
c0027139:	c1 e6 17             	shl    esi,0x17
c002713c:	09 c6                	or     esi,eax
c002713e:	f6 c2 7f             	test   dl,0x7f
c0027141:	0f 95 c1             	setne  cl
c0027144:	09 c8                	or     eax,ecx
c0027146:	83 e0 01             	and    eax,0x1
c0027149:	c1 ea 07             	shr    edx,0x7
c002714c:	21 c2                	and    edx,eax
c002714e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027151:	eb 0a                	jmp    c002715d <__divsf3+0x221>
c0027153:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027158:	eb 03                	jmp    c002715d <__divsf3+0x221>
c002715a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002715d:	89 d8                	mov    eax,ebx
c002715f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027162:	5b                   	pop    ebx
c0027163:	5e                   	pop    esi
c0027164:	5f                   	pop    edi
c0027165:	5d                   	pop    ebp
c0027166:	c3                   	ret    

c0027167 <__floatsisf>:
c0027167:	55                   	push   ebp
c0027168:	89 e5                	mov    ebp,esp
c002716a:	53                   	push   ebx
c002716b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002716e:	85 d2                	test   edx,edx
c0027170:	7e 2b                	jle    c002719d <__floatsisf+0x36>
c0027172:	0f bd ca             	bsr    ecx,edx
c0027175:	83 f1 1f             	xor    ecx,0x1f
c0027178:	d3 e2                	shl    edx,cl
c002717a:	89 d0                	mov    eax,edx
c002717c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027181:	89 c3                	mov    ebx,eax
c0027183:	c1 eb 08             	shr    ebx,0x8
c0027186:	80 e2 7f             	and    dl,0x7f
c0027189:	0f 95 c2             	setne  dl
c002718c:	09 da                	or     edx,ebx
c002718e:	83 e2 01             	and    edx,0x1
c0027191:	c1 e8 07             	shr    eax,0x7
c0027194:	21 c2                	and    edx,eax
c0027196:	b8 9e 00 00 00       	mov    eax,0x9e
c002719b:	eb 32                	jmp    c00271cf <__floatsisf+0x68>
c002719d:	b8 00 00 00 00       	mov    eax,0x0
c00271a2:	74 34                	je     c00271d8 <__floatsisf+0x71>
c00271a4:	f7 da                	neg    edx
c00271a6:	0f bd ca             	bsr    ecx,edx
c00271a9:	83 f1 1f             	xor    ecx,0x1f
c00271ac:	d3 e2                	shl    edx,cl
c00271ae:	89 d0                	mov    eax,edx
c00271b0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00271b5:	89 c3                	mov    ebx,eax
c00271b7:	c1 eb 08             	shr    ebx,0x8
c00271ba:	80 e2 7f             	and    dl,0x7f
c00271bd:	0f 95 c2             	setne  dl
c00271c0:	09 da                	or     edx,ebx
c00271c2:	83 e2 01             	and    edx,0x1
c00271c5:	c1 e8 07             	shr    eax,0x7
c00271c8:	21 c2                	and    edx,eax
c00271ca:	b8 9e 01 00 00       	mov    eax,0x19e
c00271cf:	29 c8                	sub    eax,ecx
c00271d1:	c1 e0 17             	shl    eax,0x17
c00271d4:	09 d8                	or     eax,ebx
c00271d6:	01 d0                	add    eax,edx
c00271d8:	5b                   	pop    ebx
c00271d9:	5d                   	pop    ebp
c00271da:	c3                   	ret    

c00271db <__floatunsisf>:
c00271db:	55                   	push   ebp
c00271dc:	89 e5                	mov    ebp,esp
c00271de:	53                   	push   ebx
c00271df:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00271e2:	31 c0                	xor    eax,eax
c00271e4:	85 d2                	test   edx,edx
c00271e6:	74 32                	je     c002721a <__floatunsisf+0x3f>
c00271e8:	0f bd ca             	bsr    ecx,edx
c00271eb:	83 f1 1f             	xor    ecx,0x1f
c00271ee:	d3 e2                	shl    edx,cl
c00271f0:	89 d0                	mov    eax,edx
c00271f2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00271f7:	89 c3                	mov    ebx,eax
c00271f9:	c1 eb 08             	shr    ebx,0x8
c00271fc:	80 e2 7f             	and    dl,0x7f
c00271ff:	0f 95 c2             	setne  dl
c0027202:	09 da                	or     edx,ebx
c0027204:	83 e2 01             	and    edx,0x1
c0027207:	c1 e8 07             	shr    eax,0x7
c002720a:	21 c2                	and    edx,eax
c002720c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027211:	29 c8                	sub    eax,ecx
c0027213:	c1 e0 17             	shl    eax,0x17
c0027216:	09 d8                	or     eax,ebx
c0027218:	01 d0                	add    eax,edx
c002721a:	5b                   	pop    ebx
c002721b:	5d                   	pop    ebp
c002721c:	c3                   	ret    

c002721d <__fixsfsi>:
c002721d:	55                   	push   ebp
c002721e:	89 e5                	mov    ebp,esp
c0027220:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027223:	89 d1                	mov    ecx,edx
c0027225:	c1 e1 08             	shl    ecx,0x8
c0027228:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002722e:	c1 fa 17             	sar    edx,0x17
c0027231:	78 1c                	js     c002724f <__fixsfsi+0x32>
c0027233:	83 ea 7f             	sub    edx,0x7f
c0027236:	31 c0                	xor    eax,eax
c0027238:	83 fa 1e             	cmp    edx,0x1e
c002723b:	77 40                	ja     c002727d <__fixsfsi+0x60>
c002723d:	89 c8                	mov    eax,ecx
c002723f:	0d 00 00 00 80       	or     eax,0x80000000
c0027244:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027249:	29 d1                	sub    ecx,edx
c002724b:	d3 e8                	shr    eax,cl
c002724d:	eb 2e                	jmp    c002727d <__fixsfsi+0x60>
c002724f:	31 c0                	xor    eax,eax
c0027251:	81 c2 81 00 00 00    	add    edx,0x81
c0027257:	78 24                	js     c002727d <__fixsfsi+0x60>
c0027259:	83 fa 1e             	cmp    edx,0x1e
c002725c:	7e 09                	jle    c0027267 <__fixsfsi+0x4a>
c002725e:	83 fa 1f             	cmp    edx,0x1f
c0027261:	75 18                	jne    c002727b <__fixsfsi+0x5e>
c0027263:	85 c9                	test   ecx,ecx
c0027265:	75 14                	jne    c002727b <__fixsfsi+0x5e>
c0027267:	89 c8                	mov    eax,ecx
c0027269:	0d 00 00 00 80       	or     eax,0x80000000
c002726e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027273:	29 d1                	sub    ecx,edx
c0027275:	d3 e8                	shr    eax,cl
c0027277:	f7 d8                	neg    eax
c0027279:	eb 02                	jmp    c002727d <__fixsfsi+0x60>
c002727b:	31 c0                	xor    eax,eax
c002727d:	5d                   	pop    ebp
c002727e:	c3                   	ret    

c002727f <__fixunssfsi>:
c002727f:	55                   	push   ebp
c0027280:	89 e5                	mov    ebp,esp
c0027282:	53                   	push   ebx
c0027283:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027286:	89 d3                	mov    ebx,edx
c0027288:	c1 fb 17             	sar    ebx,0x17
c002728b:	83 eb 7f             	sub    ebx,0x7f
c002728e:	31 c0                	xor    eax,eax
c0027290:	83 fb 1f             	cmp    ebx,0x1f
c0027293:	77 18                	ja     c00272ad <__fixunssfsi+0x2e>
c0027295:	89 d0                	mov    eax,edx
c0027297:	c1 e0 08             	shl    eax,0x8
c002729a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002729f:	0d 00 00 00 80       	or     eax,0x80000000
c00272a4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00272a9:	29 d9                	sub    ecx,ebx
c00272ab:	d3 e8                	shr    eax,cl
c00272ad:	5b                   	pop    ebx
c00272ae:	5d                   	pop    ebp
c00272af:	c3                   	ret    

c00272b0 <__cmpsf2>:
c00272b0:	55                   	push   ebp
c00272b1:	89 e5                	mov    ebp,esp
c00272b3:	57                   	push   edi
c00272b4:	56                   	push   esi
c00272b5:	53                   	push   ebx
c00272b6:	83 ec 24             	sub    esp,0x24
c00272b9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272bc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00272bf:	e8 4f 10 00 00       	call   c0028313 <__truncdfsf2>
c00272c4:	5a                   	pop    edx
c00272c5:	59                   	pop    ecx
c00272c6:	89 c3                	mov    ebx,eax
c00272c8:	c1 e8 17             	shr    eax,0x17
c00272cb:	0f b6 f0             	movzx  esi,al
c00272ce:	89 d8                	mov    eax,ebx
c00272d0:	c1 e8 1f             	shr    eax,0x1f
c00272d3:	31 c6                	xor    esi,eax
c00272d5:	c1 e3 08             	shl    ebx,0x8
c00272d8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00272db:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00272de:	e8 30 10 00 00       	call   c0028313 <__truncdfsf2>
c00272e3:	83 c4 10             	add    esp,0x10
c00272e6:	89 c1                	mov    ecx,eax
c00272e8:	c1 e9 17             	shr    ecx,0x17
c00272eb:	0f b6 c9             	movzx  ecx,cl
c00272ee:	89 c7                	mov    edi,eax
c00272f0:	c1 ef 1f             	shr    edi,0x1f
c00272f3:	89 ca                	mov    edx,ecx
c00272f5:	31 fa                	xor    edx,edi
c00272f7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00272fa:	c1 e0 08             	shl    eax,0x8
c00272fd:	89 c2                	mov    edx,eax
c00272ff:	89 d8                	mov    eax,ebx
c0027301:	09 d0                	or     eax,edx
c0027303:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027308:	09 f0                	or     eax,esi
c002730a:	75 08                	jne    c0027314 <__cmpsf2+0x64>
c002730c:	31 c0                	xor    eax,eax
c002730e:	39 f9                	cmp    ecx,edi
c0027310:	75 0c                	jne    c002731e <__cmpsf2+0x6e>
c0027312:	eb 29                	jmp    c002733d <__cmpsf2+0x8d>
c0027314:	b8 01 00 00 00       	mov    eax,0x1
c0027319:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002731c:	7f 1f                	jg     c002733d <__cmpsf2+0x8d>
c002731e:	83 c8 ff             	or     eax,0xffffffff
c0027321:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027324:	7c 17                	jl     c002733d <__cmpsf2+0x8d>
c0027326:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002732c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027332:	b8 01 00 00 00       	mov    eax,0x1
c0027337:	39 d3                	cmp    ebx,edx
c0027339:	77 02                	ja     c002733d <__cmpsf2+0x8d>
c002733b:	19 c0                	sbb    eax,eax
c002733d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027340:	5b                   	pop    ebx
c0027341:	5e                   	pop    esi
c0027342:	5f                   	pop    edi
c0027343:	5d                   	pop    ebp
c0027344:	c3                   	ret    

c0027345 <__eqsf2>:
c0027345:	55                   	push   ebp
c0027346:	89 e5                	mov    ebp,esp
c0027348:	83 ec 24             	sub    esp,0x24
c002734b:	6a 01                	push   0x1
c002734d:	83 ec 0c             	sub    esp,0xc
c0027350:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027353:	e8 df 10 00 00       	call   c0028437 <__extendsfdf2>
c0027358:	83 c4 10             	add    esp,0x10
c002735b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002735e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027361:	52                   	push   edx
c0027362:	50                   	push   eax
c0027363:	50                   	push   eax
c0027364:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027367:	e8 cb 10 00 00       	call   c0028437 <__extendsfdf2>
c002736c:	59                   	pop    ecx
c002736d:	59                   	pop    ecx
c002736e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027371:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027374:	52                   	push   edx
c0027375:	50                   	push   eax
c0027376:	e8 35 ff ff ff       	call   c00272b0 <__cmpsf2>
c002737b:	83 c4 20             	add    esp,0x20
c002737e:	c9                   	leave  
c002737f:	c3                   	ret    

c0027380 <__nesf2>:
c0027380:	eb c3                	jmp    c0027345 <__eqsf2>

c0027382 <__gtsf2>:
c0027382:	55                   	push   ebp
c0027383:	89 e5                	mov    ebp,esp
c0027385:	83 ec 24             	sub    esp,0x24
c0027388:	6a ff                	push   0xffffffff
c002738a:	83 ec 0c             	sub    esp,0xc
c002738d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027390:	e8 a2 10 00 00       	call   c0028437 <__extendsfdf2>
c0027395:	83 c4 10             	add    esp,0x10
c0027398:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002739b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002739e:	52                   	push   edx
c002739f:	50                   	push   eax
c00273a0:	50                   	push   eax
c00273a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00273a4:	e8 8e 10 00 00       	call   c0028437 <__extendsfdf2>
c00273a9:	59                   	pop    ecx
c00273aa:	59                   	pop    ecx
c00273ab:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00273ae:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00273b1:	52                   	push   edx
c00273b2:	50                   	push   eax
c00273b3:	e8 f8 fe ff ff       	call   c00272b0 <__cmpsf2>
c00273b8:	83 c4 20             	add    esp,0x20
c00273bb:	c9                   	leave  
c00273bc:	c3                   	ret    

c00273bd <__gesf2>:
c00273bd:	eb c3                	jmp    c0027382 <__gtsf2>

c00273bf <__ltsf2>:
c00273bf:	eb 84                	jmp    c0027345 <__eqsf2>

c00273c1 <__lesf2>:
c00273c1:	eb 82                	jmp    c0027345 <__eqsf2>

c00273c3 <__adddf3>:
c00273c3:	55                   	push   ebp
c00273c4:	89 e5                	mov    ebp,esp
c00273c6:	57                   	push   edi
c00273c7:	56                   	push   esi
c00273c8:	53                   	push   ebx
c00273c9:	83 ec 24             	sub    esp,0x24
c00273cc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00273cf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00273d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00273d5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00273d8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00273db:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00273de:	89 c8                	mov    eax,ecx
c00273e0:	89 ce                	mov    esi,ecx
c00273e2:	c1 fe 14             	sar    esi,0x14
c00273e5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00273e8:	89 fb                	mov    ebx,edi
c00273ea:	89 fa                	mov    edx,edi
c00273ec:	c1 e2 0b             	shl    edx,0xb
c00273ef:	c1 e0 0b             	shl    eax,0xb
c00273f2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00273f7:	c1 eb 15             	shr    ebx,0x15
c00273fa:	09 d8                	or     eax,ebx
c00273fc:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00273ff:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027402:	c1 fe 14             	sar    esi,0x14
c0027405:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027408:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002740b:	89 f3                	mov    ebx,esi
c002740d:	c1 e3 0b             	shl    ebx,0xb
c0027410:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027413:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027416:	c1 e3 0b             	shl    ebx,0xb
c0027419:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002741f:	c1 ee 15             	shr    esi,0x15
c0027422:	09 f3                	or     ebx,esi
c0027424:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027427:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002742a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002742d:	0f 88 5f 02 00 00    	js     c0027692 <__adddf3+0x2cf>
c0027433:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027436:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027439:	85 db                	test   ebx,ebx
c002743b:	0f 8e c7 00 00 00    	jle    c0027508 <__adddf3+0x145>
c0027441:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027448:	75 1a                	jne    c0027464 <__adddf3+0xa1>
c002744a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002744d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027450:	0f 84 b2 05 00 00    	je     c0027a08 <__adddf3+0x645>
c0027456:	4b                   	dec    ebx
c0027457:	75 23                	jne    c002747c <__adddf3+0xb9>
c0027459:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002745c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002745f:	e9 99 00 00 00       	jmp    c00274fd <__adddf3+0x13a>
c0027464:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027467:	f7 d6                	not    esi
c0027469:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002746f:	0f 84 93 05 00 00    	je     c0027a08 <__adddf3+0x645>
c0027475:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002747c:	83 fb 1f             	cmp    ebx,0x1f
c002747f:	7e 42                	jle    c00274c3 <__adddf3+0x100>
c0027481:	83 fb 3f             	cmp    ebx,0x3f
c0027484:	0f 8f 7e 05 00 00    	jg     c0027a08 <__adddf3+0x645>
c002748a:	83 e3 1f             	and    ebx,0x1f
c002748d:	89 d9                	mov    ecx,ebx
c002748f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027492:	d3 ef                	shr    edi,cl
c0027494:	31 db                	xor    ebx,ebx
c0027496:	85 c9                	test   ecx,ecx
c0027498:	74 15                	je     c00274af <__adddf3+0xec>
c002749a:	be 20 00 00 00       	mov    esi,0x20
c002749f:	29 ce                	sub    esi,ecx
c00274a1:	89 f1                	mov    ecx,esi
c00274a3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274a6:	d3 e6                	shl    esi,cl
c00274a8:	31 db                	xor    ebx,ebx
c00274aa:	85 f6                	test   esi,esi
c00274ac:	0f 95 c3             	setne  bl
c00274af:	31 c9                	xor    ecx,ecx
c00274b1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00274b5:	0f 95 c1             	setne  cl
c00274b8:	09 cf                	or     edi,ecx
c00274ba:	09 fb                	or     ebx,edi
c00274bc:	01 da                	add    edx,ebx
c00274be:	83 d0 00             	adc    eax,0x0
c00274c1:	eb 3a                	jmp    c00274fd <__adddf3+0x13a>
c00274c3:	bf 20 00 00 00       	mov    edi,0x20
c00274c8:	29 df                	sub    edi,ebx
c00274ca:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00274cd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274d0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00274d3:	d3 e6                	shl    esi,cl
c00274d5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00274d8:	88 d9                	mov    cl,bl
c00274da:	d3 ef                	shr    edi,cl
c00274dc:	09 fe                	or     esi,edi
c00274de:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00274e1:	88 d9                	mov    cl,bl
c00274e3:	d3 ef                	shr    edi,cl
c00274e5:	89 fb                	mov    ebx,edi
c00274e7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00274ea:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00274ed:	d3 e7                	shl    edi,cl
c00274ef:	85 ff                	test   edi,edi
c00274f1:	0f 95 c1             	setne  cl
c00274f4:	0f b6 c9             	movzx  ecx,cl
c00274f7:	09 ce                	or     esi,ecx
c00274f9:	01 f2                	add    edx,esi
c00274fb:	11 d8                	adc    eax,ebx
c00274fd:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027500:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027503:	e9 52 01 00 00       	jmp    c002765a <__adddf3+0x297>
c0027508:	0f 84 d5 00 00 00    	je     c00275e3 <__adddf3+0x220>
c002750e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027511:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027514:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027517:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002751a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027521:	75 20                	jne    c0027543 <__adddf3+0x180>
c0027523:	89 d6                	mov    esi,edx
c0027525:	09 c6                	or     esi,eax
c0027527:	0f 84 db 04 00 00    	je     c0027a08 <__adddf3+0x645>
c002752d:	4b                   	dec    ebx
c002752e:	75 29                	jne    c0027559 <__adddf3+0x196>
c0027530:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027533:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027536:	01 d1                	add    ecx,edx
c0027538:	11 c6                	adc    esi,eax
c002753a:	89 f0                	mov    eax,esi
c002753c:	89 ca                	mov    edx,ecx
c002753e:	e9 17 01 00 00       	jmp    c002765a <__adddf3+0x297>
c0027543:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027546:	f7 d6                	not    esi
c0027548:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002754e:	0f 84 b4 04 00 00    	je     c0027a08 <__adddf3+0x645>
c0027554:	0d 00 00 00 80       	or     eax,0x80000000
c0027559:	83 fb 1f             	cmp    ebx,0x1f
c002755c:	7e 48                	jle    c00275a6 <__adddf3+0x1e3>
c002755e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027561:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027564:	83 fb 3f             	cmp    ebx,0x3f
c0027567:	0f 8f 9b 04 00 00    	jg     c0027a08 <__adddf3+0x645>
c002756d:	83 e3 1f             	and    ebx,0x1f
c0027570:	89 d9                	mov    ecx,ebx
c0027572:	89 c7                	mov    edi,eax
c0027574:	d3 ef                	shr    edi,cl
c0027576:	31 db                	xor    ebx,ebx
c0027578:	85 c9                	test   ecx,ecx
c002757a:	74 12                	je     c002758e <__adddf3+0x1cb>
c002757c:	be 20 00 00 00       	mov    esi,0x20
c0027581:	29 ce                	sub    esi,ecx
c0027583:	89 f1                	mov    ecx,esi
c0027585:	d3 e0                	shl    eax,cl
c0027587:	31 db                	xor    ebx,ebx
c0027589:	85 c0                	test   eax,eax
c002758b:	0f 95 c3             	setne  bl
c002758e:	31 c0                	xor    eax,eax
c0027590:	85 d2                	test   edx,edx
c0027592:	0f 95 c0             	setne  al
c0027595:	09 c7                	or     edi,eax
c0027597:	09 fb                	or     ebx,edi
c0027599:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002759c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002759f:	01 da                	add    edx,ebx
c00275a1:	83 d6 00             	adc    esi,0x0
c00275a4:	eb 39                	jmp    c00275df <__adddf3+0x21c>
c00275a6:	be 20 00 00 00       	mov    esi,0x20
c00275ab:	29 de                	sub    esi,ebx
c00275ad:	89 c7                	mov    edi,eax
c00275af:	89 f1                	mov    ecx,esi
c00275b1:	d3 e7                	shl    edi,cl
c00275b3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00275b6:	89 d7                	mov    edi,edx
c00275b8:	88 d9                	mov    cl,bl
c00275ba:	d3 ef                	shr    edi,cl
c00275bc:	89 f9                	mov    ecx,edi
c00275be:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00275c1:	09 cf                	or     edi,ecx
c00275c3:	88 d9                	mov    cl,bl
c00275c5:	d3 e8                	shr    eax,cl
c00275c7:	89 f1                	mov    ecx,esi
c00275c9:	d3 e2                	shl    edx,cl
c00275cb:	85 d2                	test   edx,edx
c00275cd:	0f 95 c2             	setne  dl
c00275d0:	0f b6 d2             	movzx  edx,dl
c00275d3:	09 d7                	or     edi,edx
c00275d5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275d8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00275db:	01 fa                	add    edx,edi
c00275dd:	11 c6                	adc    esi,eax
c00275df:	89 f0                	mov    eax,esi
c00275e1:	eb 77                	jmp    c002765a <__adddf3+0x297>
c00275e3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275e6:	46                   	inc    esi
c00275e7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00275ea:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00275f0:	75 41                	jne    c0027633 <__adddf3+0x270>
c00275f2:	89 d3                	mov    ebx,edx
c00275f4:	09 c3                	or     ebx,eax
c00275f6:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00275fd:	75 27                	jne    c0027626 <__adddf3+0x263>
c00275ff:	85 db                	test   ebx,ebx
c0027601:	0f 84 fb 03 00 00    	je     c0027a02 <__adddf3+0x63f>
c0027607:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002760a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002760d:	0f 84 f5 03 00 00    	je     c0027a08 <__adddf3+0x645>
c0027613:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027616:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027619:	85 c0                	test   eax,eax
c002761b:	0f 89 91 03 00 00    	jns    c00279b2 <__adddf3+0x5ef>
c0027621:	e9 85 03 00 00       	jmp    c00279ab <__adddf3+0x5e8>
c0027626:	85 db                	test   ebx,ebx
c0027628:	0f 85 da 03 00 00    	jne    c0027a08 <__adddf3+0x645>
c002762e:	e9 cf 03 00 00       	jmp    c0027a02 <__adddf3+0x63f>
c0027633:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027636:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027639:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002763c:	f7 d1                	not    ecx
c002763e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027644:	0f 84 70 03 00 00    	je     c00279ba <__adddf3+0x5f7>
c002764a:	d1 ea                	shr    edx,1
c002764c:	89 c1                	mov    ecx,eax
c002764e:	c1 e1 1f             	shl    ecx,0x1f
c0027651:	09 ca                	or     edx,ecx
c0027653:	d1 e8                	shr    eax,1
c0027655:	e9 6f 03 00 00       	jmp    c00279c9 <__adddf3+0x606>
c002765a:	85 c0                	test   eax,eax
c002765c:	0f 89 67 03 00 00    	jns    c00279c9 <__adddf3+0x606>
c0027662:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027665:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027668:	f7 d1                	not    ecx
c002766a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027670:	0f 84 44 03 00 00    	je     c00279ba <__adddf3+0x5f7>
c0027676:	89 d1                	mov    ecx,edx
c0027678:	d1 e9                	shr    ecx,1
c002767a:	83 e2 01             	and    edx,0x1
c002767d:	09 ca                	or     edx,ecx
c002767f:	89 c1                	mov    ecx,eax
c0027681:	c1 e1 1f             	shl    ecx,0x1f
c0027684:	09 ca                	or     edx,ecx
c0027686:	d1 e8                	shr    eax,1
c0027688:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002768d:	e9 37 03 00 00       	jmp    c00279c9 <__adddf3+0x606>
c0027692:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027695:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002769b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002769e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00276a1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00276a7:	29 de                	sub    esi,ebx
c00276a9:	85 f6                	test   esi,esi
c00276ab:	0f 8e bd 00 00 00    	jle    c002776e <__adddf3+0x3ab>
c00276b1:	85 db                	test   ebx,ebx
c00276b3:	75 17                	jne    c00276cc <__adddf3+0x309>
c00276b5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00276b8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00276bb:	0f 84 47 03 00 00    	je     c0027a08 <__adddf3+0x645>
c00276c1:	4e                   	dec    esi
c00276c2:	75 20                	jne    c00276e4 <__adddf3+0x321>
c00276c4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00276c7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00276ca:	eb 5b                	jmp    c0027727 <__adddf3+0x364>
c00276cc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00276cf:	f7 d3                	not    ebx
c00276d1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00276d7:	0f 84 2b 03 00 00    	je     c0027a08 <__adddf3+0x645>
c00276dd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00276e4:	83 fe 1f             	cmp    esi,0x1f
c00276e7:	7e 49                	jle    c0027732 <__adddf3+0x36f>
c00276e9:	83 fe 3f             	cmp    esi,0x3f
c00276ec:	0f 8f 16 03 00 00    	jg     c0027a08 <__adddf3+0x645>
c00276f2:	83 e6 1f             	and    esi,0x1f
c00276f5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00276f8:	89 f1                	mov    ecx,esi
c00276fa:	d3 ef                	shr    edi,cl
c00276fc:	31 db                	xor    ebx,ebx
c00276fe:	85 f6                	test   esi,esi
c0027700:	74 13                	je     c0027715 <__adddf3+0x352>
c0027702:	b9 20 00 00 00       	mov    ecx,0x20
c0027707:	29 f1                	sub    ecx,esi
c0027709:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002770c:	d3 e6                	shl    esi,cl
c002770e:	31 db                	xor    ebx,ebx
c0027710:	85 f6                	test   esi,esi
c0027712:	0f 95 c3             	setne  bl
c0027715:	31 c9                	xor    ecx,ecx
c0027717:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002771b:	0f 95 c1             	setne  cl
c002771e:	09 cf                	or     edi,ecx
c0027720:	09 fb                	or     ebx,edi
c0027722:	29 da                	sub    edx,ebx
c0027724:	83 d8 00             	sbb    eax,0x0
c0027727:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002772a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002772d:	e9 aa 01 00 00       	jmp    c00278dc <__adddf3+0x519>
c0027732:	bf 20 00 00 00       	mov    edi,0x20
c0027737:	29 f7                	sub    edi,esi
c0027739:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002773c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002773f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027742:	d3 e3                	shl    ebx,cl
c0027744:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027747:	89 f1                	mov    ecx,esi
c0027749:	d3 ef                	shr    edi,cl
c002774b:	09 fb                	or     ebx,edi
c002774d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027750:	89 f1                	mov    ecx,esi
c0027752:	d3 ef                	shr    edi,cl
c0027754:	89 fe                	mov    esi,edi
c0027756:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027759:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002775c:	d3 e7                	shl    edi,cl
c002775e:	85 ff                	test   edi,edi
c0027760:	0f 95 c1             	setne  cl
c0027763:	0f b6 c9             	movzx  ecx,cl
c0027766:	09 cb                	or     ebx,ecx
c0027768:	29 da                	sub    edx,ebx
c002776a:	19 f0                	sbb    eax,esi
c002776c:	eb b9                	jmp    c0027727 <__adddf3+0x364>
c002776e:	0f 84 cd 00 00 00    	je     c0027841 <__adddf3+0x47e>
c0027774:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027777:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002777a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002777d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027781:	75 1b                	jne    c002779e <__adddf3+0x3db>
c0027783:	89 d6                	mov    esi,edx
c0027785:	09 c6                	or     esi,eax
c0027787:	0f 84 7b 02 00 00    	je     c0027a08 <__adddf3+0x645>
c002778d:	4b                   	dec    ebx
c002778e:	75 24                	jne    c00277b4 <__adddf3+0x3f1>
c0027790:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027793:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027796:	29 d1                	sub    ecx,edx
c0027798:	19 c6                	sbb    esi,eax
c002779a:	89 ca                	mov    edx,ecx
c002779c:	eb 61                	jmp    c00277ff <__adddf3+0x43c>
c002779e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00277a1:	f7 d6                	not    esi
c00277a3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00277a9:	0f 84 59 02 00 00    	je     c0027a08 <__adddf3+0x645>
c00277af:	0d 00 00 00 80       	or     eax,0x80000000
c00277b4:	83 fb 1f             	cmp    ebx,0x1f
c00277b7:	7e 4d                	jle    c0027806 <__adddf3+0x443>
c00277b9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277bc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277bf:	83 fb 3f             	cmp    ebx,0x3f
c00277c2:	0f 8f 40 02 00 00    	jg     c0027a08 <__adddf3+0x645>
c00277c8:	83 e3 1f             	and    ebx,0x1f
c00277cb:	89 d9                	mov    ecx,ebx
c00277cd:	89 c7                	mov    edi,eax
c00277cf:	d3 ef                	shr    edi,cl
c00277d1:	31 db                	xor    ebx,ebx
c00277d3:	85 c9                	test   ecx,ecx
c00277d5:	74 12                	je     c00277e9 <__adddf3+0x426>
c00277d7:	be 20 00 00 00       	mov    esi,0x20
c00277dc:	29 ce                	sub    esi,ecx
c00277de:	89 f1                	mov    ecx,esi
c00277e0:	d3 e0                	shl    eax,cl
c00277e2:	31 db                	xor    ebx,ebx
c00277e4:	85 c0                	test   eax,eax
c00277e6:	0f 95 c3             	setne  bl
c00277e9:	31 c0                	xor    eax,eax
c00277eb:	85 d2                	test   edx,edx
c00277ed:	0f 95 c0             	setne  al
c00277f0:	09 c7                	or     edi,eax
c00277f2:	09 fb                	or     ebx,edi
c00277f4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277f7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00277fa:	29 da                	sub    edx,ebx
c00277fc:	83 de 00             	sbb    esi,0x0
c00277ff:	89 f0                	mov    eax,esi
c0027801:	e9 d6 00 00 00       	jmp    c00278dc <__adddf3+0x519>
c0027806:	be 20 00 00 00       	mov    esi,0x20
c002780b:	29 de                	sub    esi,ebx
c002780d:	89 c7                	mov    edi,eax
c002780f:	89 f1                	mov    ecx,esi
c0027811:	d3 e7                	shl    edi,cl
c0027813:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027816:	89 d7                	mov    edi,edx
c0027818:	88 d9                	mov    cl,bl
c002781a:	d3 ef                	shr    edi,cl
c002781c:	89 f9                	mov    ecx,edi
c002781e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027821:	09 cf                	or     edi,ecx
c0027823:	88 d9                	mov    cl,bl
c0027825:	d3 e8                	shr    eax,cl
c0027827:	89 f1                	mov    ecx,esi
c0027829:	d3 e2                	shl    edx,cl
c002782b:	85 d2                	test   edx,edx
c002782d:	0f 95 c2             	setne  dl
c0027830:	0f b6 d2             	movzx  edx,dl
c0027833:	09 d7                	or     edi,edx
c0027835:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027838:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002783b:	29 fa                	sub    edx,edi
c002783d:	19 c6                	sbb    esi,eax
c002783f:	eb be                	jmp    c00277ff <__adddf3+0x43c>
c0027841:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027844:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027847:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002784d:	75 6a                	jne    c00278b9 <__adddf3+0x4f6>
c002784f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027853:	75 58                	jne    c00278ad <__adddf3+0x4ea>
c0027855:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027858:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002785b:	89 d6                	mov    esi,edx
c002785d:	09 c6                	or     esi,eax
c002785f:	75 17                	jne    c0027878 <__adddf3+0x4b5>
c0027861:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027864:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027867:	85 db                	test   ebx,ebx
c0027869:	0f 85 99 01 00 00    	jne    c0027a08 <__adddf3+0x645>
c002786f:	31 ff                	xor    edi,edi
c0027871:	31 c9                	xor    ecx,ecx
c0027873:	e9 90 01 00 00       	jmp    c0027a08 <__adddf3+0x645>
c0027878:	85 db                	test   ebx,ebx
c002787a:	0f 84 88 01 00 00    	je     c0027a08 <__adddf3+0x645>
c0027880:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027883:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027886:	85 c0                	test   eax,eax
c0027888:	79 10                	jns    c002789a <__adddf3+0x4d7>
c002788a:	31 c9                	xor    ecx,ecx
c002788c:	f7 da                	neg    edx
c002788e:	0f 95 c1             	setne  cl
c0027891:	01 c8                	add    eax,ecx
c0027893:	f7 d8                	neg    eax
c0027895:	e9 2f 01 00 00       	jmp    c00279c9 <__adddf3+0x606>
c002789a:	31 ff                	xor    edi,edi
c002789c:	31 c9                	xor    ecx,ecx
c002789e:	89 c3                	mov    ebx,eax
c00278a0:	09 d3                	or     ebx,edx
c00278a2:	0f 84 60 01 00 00    	je     c0027a08 <__adddf3+0x645>
c00278a8:	e9 05 01 00 00       	jmp    c00279b2 <__adddf3+0x5ef>
c00278ad:	31 ff                	xor    edi,edi
c00278af:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00278b4:	e9 4f 01 00 00       	jmp    c0027a08 <__adddf3+0x645>
c00278b9:	89 c1                	mov    ecx,eax
c00278bb:	89 d0                	mov    eax,edx
c00278bd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00278c0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00278c3:	89 ca                	mov    edx,ecx
c00278c5:	85 c9                	test   ecx,ecx
c00278c7:	79 2c                	jns    c00278f5 <__adddf3+0x532>
c00278c9:	31 c9                	xor    ecx,ecx
c00278cb:	f7 d8                	neg    eax
c00278cd:	0f 95 c1             	setne  cl
c00278d0:	01 ca                	add    edx,ecx
c00278d2:	f7 da                	neg    edx
c00278d4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00278d7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00278da:	eb 19                	jmp    c00278f5 <__adddf3+0x532>
c00278dc:	85 c0                	test   eax,eax
c00278de:	0f 89 e5 00 00 00    	jns    c00279c9 <__adddf3+0x606>
c00278e4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00278e9:	89 c1                	mov    ecx,eax
c00278eb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00278ee:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00278f1:	89 d0                	mov    eax,edx
c00278f3:	89 ca                	mov    edx,ecx
c00278f5:	85 d2                	test   edx,edx
c00278f7:	74 59                	je     c0027952 <__adddf3+0x58f>
c00278f9:	0f bd da             	bsr    ebx,edx
c00278fc:	83 f3 1f             	xor    ebx,0x1f
c00278ff:	88 d9                	mov    cl,bl
c0027901:	d3 e2                	shl    edx,cl
c0027903:	bf 20 00 00 00       	mov    edi,0x20
c0027908:	89 f9                	mov    ecx,edi
c002790a:	29 d9                	sub    ecx,ebx
c002790c:	89 c6                	mov    esi,eax
c002790e:	d3 ee                	shr    esi,cl
c0027910:	09 d6                	or     esi,edx
c0027912:	88 d9                	mov    cl,bl
c0027914:	d3 e0                	shl    eax,cl
c0027916:	89 c2                	mov    edx,eax
c0027918:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002791b:	25 ff 07 00 00       	and    eax,0x7ff
c0027920:	39 d8                	cmp    eax,ebx
c0027922:	7f 22                	jg     c0027946 <__adddf3+0x583>
c0027924:	29 c3                	sub    ebx,eax
c0027926:	43                   	inc    ebx
c0027927:	88 d9                	mov    cl,bl
c0027929:	d3 ea                	shr    edx,cl
c002792b:	29 df                	sub    edi,ebx
c002792d:	89 f9                	mov    ecx,edi
c002792f:	89 f0                	mov    eax,esi
c0027931:	d3 e0                	shl    eax,cl
c0027933:	09 c2                	or     edx,eax
c0027935:	89 f0                	mov    eax,esi
c0027937:	88 d9                	mov    cl,bl
c0027939:	d3 e8                	shr    eax,cl
c002793b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002793e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027944:	eb 6f                	jmp    c00279b5 <__adddf3+0x5f2>
c0027946:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027949:	29 d8                	sub    eax,ebx
c002794b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002794e:	89 f0                	mov    eax,esi
c0027950:	eb 59                	jmp    c00279ab <__adddf3+0x5e8>
c0027952:	85 c0                	test   eax,eax
c0027954:	74 6a                	je     c00279c0 <__adddf3+0x5fd>
c0027956:	0f bd c8             	bsr    ecx,eax
c0027959:	83 f1 1f             	xor    ecx,0x1f
c002795c:	d3 e0                	shl    eax,cl
c002795e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027961:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027967:	83 c1 20             	add    ecx,0x20
c002796a:	39 cb                	cmp    ebx,ecx
c002796c:	7f 35                	jg     c00279a3 <__adddf3+0x5e0>
c002796e:	29 d9                	sub    ecx,ebx
c0027970:	8d 71 01             	lea    esi,[ecx+0x1]
c0027973:	83 fe 1f             	cmp    esi,0x1f
c0027976:	7e 09                	jle    c0027981 <__adddf3+0x5be>
c0027978:	83 e9 1f             	sub    ecx,0x1f
c002797b:	d3 e8                	shr    eax,cl
c002797d:	89 c3                	mov    ebx,eax
c002797f:	eb 11                	jmp    c0027992 <__adddf3+0x5cf>
c0027981:	b9 20 00 00 00       	mov    ecx,0x20
c0027986:	29 f1                	sub    ecx,esi
c0027988:	89 c3                	mov    ebx,eax
c002798a:	d3 e3                	shl    ebx,cl
c002798c:	89 f1                	mov    ecx,esi
c002798e:	d3 e8                	shr    eax,cl
c0027990:	89 c2                	mov    edx,eax
c0027992:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027995:	25 00 f8 ff ff       	and    eax,0xfffff800
c002799a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002799d:	89 d0                	mov    eax,edx
c002799f:	89 da                	mov    edx,ebx
c00279a1:	eb 26                	jmp    c00279c9 <__adddf3+0x606>
c00279a3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279a6:	29 cf                	sub    edi,ecx
c00279a8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00279ab:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00279b0:	eb 17                	jmp    c00279c9 <__adddf3+0x606>
c00279b2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279b5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00279b8:	eb 0f                	jmp    c00279c9 <__adddf3+0x606>
c00279ba:	31 d2                	xor    edx,edx
c00279bc:	31 c0                	xor    eax,eax
c00279be:	eb 09                	jmp    c00279c9 <__adddf3+0x606>
c00279c0:	89 c2                	mov    edx,eax
c00279c2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00279c9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00279cc:	c1 e1 14             	shl    ecx,0x14
c00279cf:	89 c3                	mov    ebx,eax
c00279d1:	c1 eb 0b             	shr    ebx,0xb
c00279d4:	09 d9                	or     ecx,ebx
c00279d6:	89 d3                	mov    ebx,edx
c00279d8:	c1 eb 0b             	shr    ebx,0xb
c00279db:	c1 e0 15             	shl    eax,0x15
c00279de:	09 d8                	or     eax,ebx
c00279e0:	89 c7                	mov    edi,eax
c00279e2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00279e8:	0f 95 c0             	setne  al
c00279eb:	89 c6                	mov    esi,eax
c00279ed:	09 f3                	or     ebx,esi
c00279ef:	83 e3 01             	and    ebx,0x1
c00279f2:	c1 ea 0a             	shr    edx,0xa
c00279f5:	21 da                	and    edx,ebx
c00279f7:	89 f8                	mov    eax,edi
c00279f9:	01 d0                	add    eax,edx
c00279fb:	83 d1 00             	adc    ecx,0x0
c00279fe:	89 c7                	mov    edi,eax
c0027a00:	eb 06                	jmp    c0027a08 <__adddf3+0x645>
c0027a02:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a05:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a08:	89 f8                	mov    eax,edi
c0027a0a:	89 ca                	mov    edx,ecx
c0027a0c:	83 c4 24             	add    esp,0x24
c0027a0f:	5b                   	pop    ebx
c0027a10:	5e                   	pop    esi
c0027a11:	5f                   	pop    edi
c0027a12:	5d                   	pop    ebp
c0027a13:	c3                   	ret    

c0027a14 <__subdf3>:
c0027a14:	55                   	push   ebp
c0027a15:	89 e5                	mov    ebp,esp
c0027a17:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027a1a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027a1d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027a23:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027a26:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027a29:	5d                   	pop    ebp
c0027a2a:	e9 94 f9 ff ff       	jmp    c00273c3 <__adddf3>

c0027a2f <__negdf2>:
c0027a2f:	55                   	push   ebp
c0027a30:	89 e5                	mov    ebp,esp
c0027a32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027a35:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027a38:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027a3e:	5d                   	pop    ebp
c0027a3f:	c3                   	ret    

c0027a40 <__muldf3>:
c0027a40:	55                   	push   ebp
c0027a41:	89 e5                	mov    ebp,esp
c0027a43:	57                   	push   edi
c0027a44:	56                   	push   esi
c0027a45:	53                   	push   ebx
c0027a46:	83 ec 24             	sub    esp,0x24
c0027a49:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027a4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027a4f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a52:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027a55:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027a58:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027a5b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a5e:	89 c8                	mov    eax,ecx
c0027a60:	c1 f8 14             	sar    eax,0x14
c0027a63:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027a66:	89 f8                	mov    eax,edi
c0027a68:	89 fb                	mov    ebx,edi
c0027a6a:	c1 e3 0b             	shl    ebx,0xb
c0027a6d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027a70:	c1 e1 0b             	shl    ecx,0xb
c0027a73:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027a79:	c1 e8 15             	shr    eax,0x15
c0027a7c:	09 c1                	or     ecx,eax
c0027a7e:	89 d6                	mov    esi,edx
c0027a80:	89 d0                	mov    eax,edx
c0027a82:	c1 f8 14             	sar    eax,0x14
c0027a85:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027a88:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027a8b:	89 c3                	mov    ebx,eax
c0027a8d:	c1 e3 0b             	shl    ebx,0xb
c0027a90:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027a93:	c1 e6 0b             	shl    esi,0xb
c0027a96:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027a9c:	c1 e8 15             	shr    eax,0x15
c0027a9f:	09 c6                	or     esi,eax
c0027aa1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027aa4:	25 ff 07 00 00       	and    eax,0x7ff
c0027aa9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027aac:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027aaf:	25 ff 07 00 00       	and    eax,0x7ff
c0027ab4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027ab7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027aba:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027abd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027ac4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ac7:	40                   	inc    eax
c0027ac8:	a9 fe 07 00 00       	test   eax,0x7fe
c0027acd:	0f 85 8d 00 00 00    	jne    c0027b60 <__muldf3+0x120>
c0027ad3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ad6:	09 c8                	or     eax,ecx
c0027ad8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027adc:	74 44                	je     c0027b22 <__muldf3+0xe2>
c0027ade:	85 c0                	test   eax,eax
c0027ae0:	0f 85 31 02 00 00    	jne    c0027d17 <__muldf3+0x2d7>
c0027ae6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ae9:	40                   	inc    eax
c0027aea:	a9 fe 07 00 00       	test   eax,0x7fe
c0027aef:	75 13                	jne    c0027b04 <__muldf3+0xc4>
c0027af1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027af4:	09 f1                	or     ecx,esi
c0027af6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027afa:	74 22                	je     c0027b1e <__muldf3+0xde>
c0027afc:	85 c9                	test   ecx,ecx
c0027afe:	0f 85 0d 02 00 00    	jne    c0027d11 <__muldf3+0x2d1>
c0027b04:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027b08:	0f 89 09 02 00 00    	jns    c0027d17 <__muldf3+0x2d7>
c0027b0e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b11:	05 00 00 00 80       	add    eax,0x80000000
c0027b16:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b19:	e9 f9 01 00 00       	jmp    c0027d17 <__muldf3+0x2d7>
c0027b1e:	85 c9                	test   ecx,ecx
c0027b20:	eb 2e                	jmp    c0027b50 <__muldf3+0x110>
c0027b22:	85 c0                	test   eax,eax
c0027b24:	74 20                	je     c0027b46 <__muldf3+0x106>
c0027b26:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027b29:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b2c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b2f:	c1 ef 1f             	shr    edi,0x1f
c0027b32:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027b35:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027b38:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027b3b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b3e:	09 f9                	or     ecx,edi
c0027b40:	78 1e                	js     c0027b60 <__muldf3+0x120>
c0027b42:	89 c3                	mov    ebx,eax
c0027b44:	eb e0                	jmp    c0027b26 <__muldf3+0xe6>
c0027b46:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b49:	f7 d0                	not    eax
c0027b4b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027b50:	75 b2                	jne    c0027b04 <__muldf3+0xc4>
c0027b52:	31 ff                	xor    edi,edi
c0027b54:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027b5b:	e9 b7 01 00 00       	jmp    c0027d17 <__muldf3+0x2d7>
c0027b60:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b63:	40                   	inc    eax
c0027b64:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b69:	75 57                	jne    c0027bc2 <__muldf3+0x182>
c0027b6b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027b6e:	09 f0                	or     eax,esi
c0027b70:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027b74:	74 23                	je     c0027b99 <__muldf3+0x159>
c0027b76:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027b7a:	0f 89 91 01 00 00    	jns    c0027d11 <__muldf3+0x2d1>
c0027b80:	85 c0                	test   eax,eax
c0027b82:	0f 85 89 01 00 00    	jne    c0027d11 <__muldf3+0x2d1>
c0027b88:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027b8b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027b91:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b94:	e9 7e 01 00 00       	jmp    c0027d17 <__muldf3+0x2d7>
c0027b99:	85 c0                	test   eax,eax
c0027b9b:	75 0c                	jne    c0027ba9 <__muldf3+0x169>
c0027b9d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027ba1:	0f 89 6a 01 00 00    	jns    c0027d11 <__muldf3+0x2d1>
c0027ba7:	eb df                	jmp    c0027b88 <__muldf3+0x148>
c0027ba9:	01 f6                	add    esi,esi
c0027bab:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027bae:	c1 ea 1f             	shr    edx,0x1f
c0027bb1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027bb4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027bb7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027bba:	09 d6                	or     esi,edx
c0027bbc:	78 04                	js     c0027bc2 <__muldf3+0x182>
c0027bbe:	89 c3                	mov    ebx,eax
c0027bc0:	eb e7                	jmp    c0027ba9 <__muldf3+0x169>
c0027bc2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027bc8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027bce:	89 c8                	mov    eax,ecx
c0027bd0:	f7 e6                	mul    esi
c0027bd2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027bd5:	89 c7                	mov    edi,eax
c0027bd7:	89 c8                	mov    eax,ecx
c0027bd9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027bdc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027bdf:	89 c1                	mov    ecx,eax
c0027be1:	89 f0                	mov    eax,esi
c0027be3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027be6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027be9:	89 c6                	mov    esi,eax
c0027beb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027bee:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027bf1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027bf4:	31 c0                	xor    eax,eax
c0027bf6:	01 f1                	add    ecx,esi
c0027bf8:	0f 92 c0             	setb   al
c0027bfb:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027bfe:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027c01:	83 d6 00             	adc    esi,0x0
c0027c04:	01 c7                	add    edi,eax
c0027c06:	83 d6 00             	adc    esi,0x0
c0027c09:	01 ca                	add    edx,ecx
c0027c0b:	0f 92 c1             	setb   cl
c0027c0e:	0f b6 c9             	movzx  ecx,cl
c0027c11:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027c14:	83 d6 00             	adc    esi,0x0
c0027c17:	01 cf                	add    edi,ecx
c0027c19:	83 d6 00             	adc    esi,0x0
c0027c1c:	31 c9                	xor    ecx,ecx
c0027c1e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027c21:	0f 95 c1             	setne  cl
c0027c24:	09 cf                	or     edi,ecx
c0027c26:	85 f6                	test   esi,esi
c0027c28:	78 0c                	js     c0027c36 <__muldf3+0x1f6>
c0027c2a:	01 f6                	add    esi,esi
c0027c2c:	89 f8                	mov    eax,edi
c0027c2e:	c1 e8 1f             	shr    eax,0x1f
c0027c31:	09 c6                	or     esi,eax
c0027c33:	01 ff                	add    edi,edi
c0027c35:	4b                   	dec    ebx
c0027c36:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027c3c:	0f 8f 85 00 00 00    	jg     c0027cc7 <__muldf3+0x287>
c0027c42:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027c48:	85 db                	test   ebx,ebx
c0027c4a:	0f 8f 84 00 00 00    	jg     c0027cd4 <__muldf3+0x294>
c0027c50:	83 fb cc             	cmp    ebx,0xffffffcc
c0027c53:	7c 79                	jl     c0027cce <__muldf3+0x28e>
c0027c55:	ba 01 00 00 00       	mov    edx,0x1
c0027c5a:	29 da                	sub    edx,ebx
c0027c5c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027c62:	83 fa 1f             	cmp    edx,0x1f
c0027c65:	7e 30                	jle    c0027c97 <__muldf3+0x257>
c0027c67:	83 fa 20             	cmp    edx,0x20
c0027c6a:	75 0b                	jne    c0027c77 <__muldf3+0x237>
c0027c6c:	31 c0                	xor    eax,eax
c0027c6e:	85 ff                	test   edi,edi
c0027c70:	0f 95 c0             	setne  al
c0027c73:	89 c7                	mov    edi,eax
c0027c75:	eb 1a                	jmp    c0027c91 <__muldf3+0x251>
c0027c77:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027c7a:	89 f0                	mov    eax,esi
c0027c7c:	d3 e0                	shl    eax,cl
c0027c7e:	09 f8                	or     eax,edi
c0027c80:	0f 95 c0             	setne  al
c0027c83:	0f b6 c0             	movzx  eax,al
c0027c86:	89 c7                	mov    edi,eax
c0027c88:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027c8d:	29 d9                	sub    ecx,ebx
c0027c8f:	d3 ee                	shr    esi,cl
c0027c91:	09 f7                	or     edi,esi
c0027c93:	31 db                	xor    ebx,ebx
c0027c95:	eb 3b                	jmp    c0027cd2 <__muldf3+0x292>
c0027c97:	83 c3 1f             	add    ebx,0x1f
c0027c9a:	89 f0                	mov    eax,esi
c0027c9c:	88 d9                	mov    cl,bl
c0027c9e:	d3 e0                	shl    eax,cl
c0027ca0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ca3:	89 f8                	mov    eax,edi
c0027ca5:	88 d1                	mov    cl,dl
c0027ca7:	d3 e8                	shr    eax,cl
c0027ca9:	89 c1                	mov    ecx,eax
c0027cab:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027cae:	09 c8                	or     eax,ecx
c0027cb0:	88 d9                	mov    cl,bl
c0027cb2:	d3 e7                	shl    edi,cl
c0027cb4:	31 db                	xor    ebx,ebx
c0027cb6:	85 ff                	test   edi,edi
c0027cb8:	0f 95 c3             	setne  bl
c0027cbb:	89 df                	mov    edi,ebx
c0027cbd:	09 c7                	or     edi,eax
c0027cbf:	88 d1                	mov    cl,dl
c0027cc1:	d3 ee                	shr    esi,cl
c0027cc3:	31 db                	xor    ebx,ebx
c0027cc5:	eb 0d                	jmp    c0027cd4 <__muldf3+0x294>
c0027cc7:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027ccc:	eb 02                	jmp    c0027cd0 <__muldf3+0x290>
c0027cce:	31 db                	xor    ebx,ebx
c0027cd0:	31 ff                	xor    edi,edi
c0027cd2:	31 f6                	xor    esi,esi
c0027cd4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027cd7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027cda:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027cdf:	09 c3                	or     ebx,eax
c0027ce1:	c1 e3 14             	shl    ebx,0x14
c0027ce4:	89 f0                	mov    eax,esi
c0027ce6:	c1 e8 0b             	shr    eax,0xb
c0027ce9:	09 c3                	or     ebx,eax
c0027ceb:	89 f8                	mov    eax,edi
c0027ced:	c1 e8 0b             	shr    eax,0xb
c0027cf0:	c1 e6 15             	shl    esi,0x15
c0027cf3:	09 c6                	or     esi,eax
c0027cf5:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027cfb:	0f 95 c1             	setne  cl
c0027cfe:	09 c8                	or     eax,ecx
c0027d00:	83 e0 01             	and    eax,0x1
c0027d03:	c1 ef 0a             	shr    edi,0xa
c0027d06:	21 c7                	and    edi,eax
c0027d08:	01 f7                	add    edi,esi
c0027d0a:	83 d3 00             	adc    ebx,0x0
c0027d0d:	89 da                	mov    edx,ebx
c0027d0f:	eb 03                	jmp    c0027d14 <__muldf3+0x2d4>
c0027d11:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027d14:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027d17:	89 f8                	mov    eax,edi
c0027d19:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027d1c:	83 c4 24             	add    esp,0x24
c0027d1f:	5b                   	pop    ebx
c0027d20:	5e                   	pop    esi
c0027d21:	5f                   	pop    edi
c0027d22:	5d                   	pop    ebp
c0027d23:	c3                   	ret    

c0027d24 <__divdf3>:
c0027d24:	55                   	push   ebp
c0027d25:	89 e5                	mov    ebp,esp
c0027d27:	57                   	push   edi
c0027d28:	56                   	push   esi
c0027d29:	53                   	push   ebx
c0027d2a:	83 ec 2c             	sub    esp,0x2c
c0027d2d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027d30:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027d33:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027d36:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027d39:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027d3c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027d3f:	89 ce                	mov    esi,ecx
c0027d41:	89 c8                	mov    eax,ecx
c0027d43:	c1 f8 14             	sar    eax,0x14
c0027d46:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027d49:	89 f8                	mov    eax,edi
c0027d4b:	89 fb                	mov    ebx,edi
c0027d4d:	c1 e3 0b             	shl    ebx,0xb
c0027d50:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027d53:	c1 e6 0b             	shl    esi,0xb
c0027d56:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027d5c:	c1 e8 15             	shr    eax,0x15
c0027d5f:	09 c6                	or     esi,eax
c0027d61:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027d64:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027d67:	89 c2                	mov    edx,eax
c0027d69:	c1 fa 14             	sar    edx,0x14
c0027d6c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027d6f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027d72:	89 de                	mov    esi,ebx
c0027d74:	c1 e6 0b             	shl    esi,0xb
c0027d77:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027d7a:	c1 e0 0b             	shl    eax,0xb
c0027d7d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027d82:	c1 eb 15             	shr    ebx,0x15
c0027d85:	09 d8                	or     eax,ebx
c0027d87:	89 c2                	mov    edx,eax
c0027d89:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d8c:	25 ff 07 00 00       	and    eax,0x7ff
c0027d91:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027d94:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027d97:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027d9d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027da0:	29 d8                	sub    eax,ebx
c0027da2:	05 ff 03 00 00       	add    eax,0x3ff
c0027da7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027daa:	46                   	inc    esi
c0027dab:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027db1:	0f 85 a5 00 00 00    	jne    c0027e5c <__divdf3+0x138>
c0027db7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027dba:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027dbd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027dc1:	74 2a                	je     c0027ded <__divdf3+0xc9>
c0027dc3:	85 f6                	test   esi,esi
c0027dc5:	0f 85 cc 02 00 00    	jne    c0028097 <__divdf3+0x373>
c0027dcb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027dce:	40                   	inc    eax
c0027dcf:	a9 fe 07 00 00       	test   eax,0x7fe
c0027dd4:	75 26                	jne    c0027dfc <__divdf3+0xd8>
c0027dd6:	85 db                	test   ebx,ebx
c0027dd8:	74 22                	je     c0027dfc <__divdf3+0xd8>
c0027dda:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027ddd:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027de0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027de3:	09 d0                	or     eax,edx
c0027de5:	0f 85 ac 02 00 00    	jne    c0028097 <__divdf3+0x373>
c0027deb:	eb 63                	jmp    c0027e50 <__divdf3+0x12c>
c0027ded:	85 f6                	test   esi,esi
c0027def:	75 22                	jne    c0027e13 <__divdf3+0xef>
c0027df1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027df4:	40                   	inc    eax
c0027df5:	a9 fe 07 00 00       	test   eax,0x7fe
c0027dfa:	74 36                	je     c0027e32 <__divdf3+0x10e>
c0027dfc:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027e00:	0f 89 91 02 00 00    	jns    c0028097 <__divdf3+0x373>
c0027e06:	89 f8                	mov    eax,edi
c0027e08:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027e0e:	e9 80 02 00 00       	jmp    c0028093 <__divdf3+0x36f>
c0027e13:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027e16:	01 f6                	add    esi,esi
c0027e18:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027e1b:	c1 ef 1f             	shr    edi,0x1f
c0027e1e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027e21:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027e24:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027e27:	09 f7                	or     edi,esi
c0027e29:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027e2c:	78 2e                	js     c0027e5c <__divdf3+0x138>
c0027e2e:	89 c8                	mov    eax,ecx
c0027e30:	eb e1                	jmp    c0027e13 <__divdf3+0xef>
c0027e32:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027e35:	09 d0                	or     eax,edx
c0027e37:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027e3b:	74 0f                	je     c0027e4c <__divdf3+0x128>
c0027e3d:	85 c0                	test   eax,eax
c0027e3f:	74 bb                	je     c0027dfc <__divdf3+0xd8>
c0027e41:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027e44:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027e47:	e9 4b 02 00 00       	jmp    c0028097 <__divdf3+0x373>
c0027e4c:	85 c0                	test   eax,eax
c0027e4e:	75 ac                	jne    c0027dfc <__divdf3+0xd8>
c0027e50:	31 ff                	xor    edi,edi
c0027e52:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027e57:	e9 3b 02 00 00       	jmp    c0028097 <__divdf3+0x373>
c0027e5c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027e5f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027e62:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027e68:	75 6b                	jne    c0027ed5 <__divdf3+0x1b1>
c0027e6a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e6d:	09 d6                	or     esi,edx
c0027e6f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027e73:	74 28                	je     c0027e9d <__divdf3+0x179>
c0027e75:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027e78:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027e7b:	85 f6                	test   esi,esi
c0027e7d:	0f 85 14 02 00 00    	jne    c0028097 <__divdf3+0x373>
c0027e83:	31 ff                	xor    edi,edi
c0027e85:	31 c9                	xor    ecx,ecx
c0027e87:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e8a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027e8d:	0f 89 04 02 00 00    	jns    c0028097 <__divdf3+0x373>
c0027e93:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027e98:	e9 fa 01 00 00       	jmp    c0028097 <__divdf3+0x373>
c0027e9d:	85 f6                	test   esi,esi
c0027e9f:	75 1b                	jne    c0027ebc <__divdf3+0x198>
c0027ea1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ea4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027ea7:	25 00 00 00 80       	and    eax,0x80000000
c0027eac:	31 c9                	xor    ecx,ecx
c0027eae:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027eb3:	89 cf                	mov    edi,ecx
c0027eb5:	89 c1                	mov    ecx,eax
c0027eb7:	e9 db 01 00 00       	jmp    c0028097 <__divdf3+0x373>
c0027ebc:	01 d2                	add    edx,edx
c0027ebe:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027ec1:	c1 eb 1f             	shr    ebx,0x1f
c0027ec4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ec7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027eca:	8d 48 01             	lea    ecx,[eax+0x1]
c0027ecd:	09 da                	or     edx,ebx
c0027ecf:	78 04                	js     c0027ed5 <__divdf3+0x1b1>
c0027ed1:	89 c8                	mov    eax,ecx
c0027ed3:	eb e7                	jmp    c0027ebc <__divdf3+0x198>
c0027ed5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027ed8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027ede:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027ee4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027ee7:	39 d6                	cmp    esi,edx
c0027ee9:	77 0d                	ja     c0027ef8 <__divdf3+0x1d4>
c0027eeb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027eee:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027ef1:	72 1b                	jb     c0027f0e <__divdf3+0x1ea>
c0027ef3:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027ef6:	75 16                	jne    c0027f0e <__divdf3+0x1ea>
c0027ef8:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027efb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027efe:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027f01:	83 de 00             	sbb    esi,0x0
c0027f04:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027f07:	ba 01 00 00 00       	mov    edx,0x1
c0027f0c:	eb 02                	jmp    c0027f10 <__divdf3+0x1ec>
c0027f0e:	31 d2                	xor    edx,edx
c0027f10:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027f17:	31 ff                	xor    edi,edi
c0027f19:	01 ff                	add    edi,edi
c0027f1b:	89 d1                	mov    ecx,edx
c0027f1d:	c1 e9 1f             	shr    ecx,0x1f
c0027f20:	09 cf                	or     edi,ecx
c0027f22:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027f25:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027f28:	89 da                	mov    edx,ebx
c0027f2a:	89 f3                	mov    ebx,esi
c0027f2c:	8d 34 36             	lea    esi,[esi+esi*1]
c0027f2f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027f32:	c1 e9 1f             	shr    ecx,0x1f
c0027f35:	09 ce                	or     esi,ecx
c0027f37:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027f3a:	01 c9                	add    ecx,ecx
c0027f3c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027f3f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027f42:	85 db                	test   ebx,ebx
c0027f44:	78 29                	js     c0027f6f <__divdf3+0x24b>
c0027f46:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027f49:	72 07                	jb     c0027f52 <__divdf3+0x22e>
c0027f4b:	75 3c                	jne    c0027f89 <__divdf3+0x265>
c0027f4d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027f50:	77 37                	ja     c0027f89 <__divdf3+0x265>
c0027f52:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027f55:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027f58:	31 d2                	xor    edx,edx
c0027f5a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027f5d:	0f 97 c2             	seta   dl
c0027f60:	29 d6                	sub    esi,edx
c0027f62:	89 d9                	mov    ecx,ebx
c0027f64:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027f67:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027f6a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027f6d:	eb 17                	jmp    c0027f86 <__divdf3+0x262>
c0027f6f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027f72:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027f75:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027f78:	0f 97 c1             	seta   cl
c0027f7b:	0f b6 c9             	movzx  ecx,cl
c0027f7e:	29 ce                	sub    esi,ecx
c0027f80:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027f83:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027f86:	83 ca 01             	or     edx,0x1
c0027f89:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027f8c:	75 8b                	jne    c0027f19 <__divdf3+0x1f5>
c0027f8e:	c1 e7 09             	shl    edi,0x9
c0027f91:	89 d1                	mov    ecx,edx
c0027f93:	c1 e9 17             	shr    ecx,0x17
c0027f96:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027f99:	09 f3                	or     ebx,esi
c0027f9b:	0f 95 c3             	setne  bl
c0027f9e:	0f b6 db             	movzx  ebx,bl
c0027fa1:	c1 e2 09             	shl    edx,0x9
c0027fa4:	09 d3                	or     ebx,edx
c0027fa6:	89 ca                	mov    edx,ecx
c0027fa8:	09 fa                	or     edx,edi
c0027faa:	78 0c                	js     c0027fb8 <__divdf3+0x294>
c0027fac:	01 d2                	add    edx,edx
c0027fae:	89 d9                	mov    ecx,ebx
c0027fb0:	c1 e9 1f             	shr    ecx,0x1f
c0027fb3:	09 ca                	or     edx,ecx
c0027fb5:	01 db                	add    ebx,ebx
c0027fb7:	48                   	dec    eax
c0027fb8:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027fbd:	0f 8f 83 00 00 00    	jg     c0028046 <__divdf3+0x322>
c0027fc3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027fc9:	85 c0                	test   eax,eax
c0027fcb:	0f 8f 82 00 00 00    	jg     c0028053 <__divdf3+0x32f>
c0027fd1:	83 f8 cc             	cmp    eax,0xffffffcc
c0027fd4:	7c 77                	jl     c002804d <__divdf3+0x329>
c0027fd6:	be 01 00 00 00       	mov    esi,0x1
c0027fdb:	29 c6                	sub    esi,eax
c0027fdd:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027fe3:	83 fe 1f             	cmp    esi,0x1f
c0027fe6:	7e 2f                	jle    c0028017 <__divdf3+0x2f3>
c0027fe8:	83 fe 20             	cmp    esi,0x20
c0027feb:	75 0a                	jne    c0027ff7 <__divdf3+0x2d3>
c0027fed:	85 db                	test   ebx,ebx
c0027fef:	0f 95 c3             	setne  bl
c0027ff2:	0f b6 db             	movzx  ebx,bl
c0027ff5:	eb 1a                	jmp    c0028011 <__divdf3+0x2ed>
c0027ff7:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027ffa:	89 d7                	mov    edi,edx
c0027ffc:	d3 e7                	shl    edi,cl
c0027ffe:	89 f9                	mov    ecx,edi
c0028000:	09 d9                	or     ecx,ebx
c0028002:	0f 95 c3             	setne  bl
c0028005:	0f b6 db             	movzx  ebx,bl
c0028008:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002800d:	29 c1                	sub    ecx,eax
c002800f:	d3 ea                	shr    edx,cl
c0028011:	09 d3                	or     ebx,edx
c0028013:	31 c0                	xor    eax,eax
c0028015:	eb 3a                	jmp    c0028051 <__divdf3+0x32d>
c0028017:	83 c0 1f             	add    eax,0x1f
c002801a:	89 d7                	mov    edi,edx
c002801c:	88 c1                	mov    cl,al
c002801e:	d3 e7                	shl    edi,cl
c0028020:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028023:	89 df                	mov    edi,ebx
c0028025:	89 f1                	mov    ecx,esi
c0028027:	d3 ef                	shr    edi,cl
c0028029:	89 f9                	mov    ecx,edi
c002802b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002802e:	09 cf                	or     edi,ecx
c0028030:	88 c1                	mov    cl,al
c0028032:	d3 e3                	shl    ebx,cl
c0028034:	85 db                	test   ebx,ebx
c0028036:	0f 95 c3             	setne  bl
c0028039:	0f b6 db             	movzx  ebx,bl
c002803c:	09 fb                	or     ebx,edi
c002803e:	89 f1                	mov    ecx,esi
c0028040:	d3 ea                	shr    edx,cl
c0028042:	31 c0                	xor    eax,eax
c0028044:	eb 0d                	jmp    c0028053 <__divdf3+0x32f>
c0028046:	b8 ff 07 00 00       	mov    eax,0x7ff
c002804b:	eb 02                	jmp    c002804f <__divdf3+0x32b>
c002804d:	31 c0                	xor    eax,eax
c002804f:	31 db                	xor    ebx,ebx
c0028051:	31 d2                	xor    edx,edx
c0028053:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028056:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028059:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002805f:	09 c8                	or     eax,ecx
c0028061:	c1 e0 14             	shl    eax,0x14
c0028064:	89 d1                	mov    ecx,edx
c0028066:	c1 e9 0b             	shr    ecx,0xb
c0028069:	09 c8                	or     eax,ecx
c002806b:	89 c6                	mov    esi,eax
c002806d:	89 d9                	mov    ecx,ebx
c002806f:	c1 e9 0b             	shr    ecx,0xb
c0028072:	c1 e2 15             	shl    edx,0x15
c0028075:	09 ca                	or     edx,ecx
c0028077:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002807d:	0f 95 c0             	setne  al
c0028080:	09 c1                	or     ecx,eax
c0028082:	83 e1 01             	and    ecx,0x1
c0028085:	c1 eb 0a             	shr    ebx,0xa
c0028088:	21 cb                	and    ebx,ecx
c002808a:	01 d3                	add    ebx,edx
c002808c:	89 d8                	mov    eax,ebx
c002808e:	83 d6 00             	adc    esi,0x0
c0028091:	89 f2                	mov    edx,esi
c0028093:	89 c7                	mov    edi,eax
c0028095:	89 d1                	mov    ecx,edx
c0028097:	89 f8                	mov    eax,edi
c0028099:	89 ca                	mov    edx,ecx
c002809b:	83 c4 2c             	add    esp,0x2c
c002809e:	5b                   	pop    ebx
c002809f:	5e                   	pop    esi
c00280a0:	5f                   	pop    edi
c00280a1:	5d                   	pop    ebp
c00280a2:	c3                   	ret    

c00280a3 <__floatsidf>:
c00280a3:	55                   	push   ebp
c00280a4:	89 e5                	mov    ebp,esp
c00280a6:	56                   	push   esi
c00280a7:	53                   	push   ebx
c00280a8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00280ab:	85 db                	test   ebx,ebx
c00280ad:	7e 15                	jle    c00280c4 <__floatsidf+0x21>
c00280af:	0f bd cb             	bsr    ecx,ebx
c00280b2:	83 f1 1f             	xor    ecx,0x1f
c00280b5:	d3 e3                	shl    ebx,cl
c00280b7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00280bd:	b8 1e 04 00 00       	mov    eax,0x41e
c00280c2:	eb 21                	jmp    c00280e5 <__floatsidf+0x42>
c00280c4:	b8 00 00 00 00       	mov    eax,0x0
c00280c9:	ba 00 00 00 00       	mov    edx,0x0
c00280ce:	74 2a                	je     c00280fa <__floatsidf+0x57>
c00280d0:	f7 db                	neg    ebx
c00280d2:	0f bd cb             	bsr    ecx,ebx
c00280d5:	83 f1 1f             	xor    ecx,0x1f
c00280d8:	d3 e3                	shl    ebx,cl
c00280da:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00280e0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00280e5:	29 c8                	sub    eax,ecx
c00280e7:	c1 e0 14             	shl    eax,0x14
c00280ea:	89 c1                	mov    ecx,eax
c00280ec:	89 de                	mov    esi,ebx
c00280ee:	c1 ee 0b             	shr    esi,0xb
c00280f1:	09 f1                	or     ecx,esi
c00280f3:	89 ca                	mov    edx,ecx
c00280f5:	c1 e3 15             	shl    ebx,0x15
c00280f8:	89 d8                	mov    eax,ebx
c00280fa:	5b                   	pop    ebx
c00280fb:	5e                   	pop    esi
c00280fc:	5d                   	pop    ebp
c00280fd:	c3                   	ret    

c00280fe <__floatunsidf>:
c00280fe:	55                   	push   ebp
c00280ff:	89 e5                	mov    ebp,esp
c0028101:	56                   	push   esi
c0028102:	53                   	push   ebx
c0028103:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028106:	85 db                	test   ebx,ebx
c0028108:	74 2a                	je     c0028134 <__floatunsidf+0x36>
c002810a:	0f bd cb             	bsr    ecx,ebx
c002810d:	83 f1 1f             	xor    ecx,0x1f
c0028110:	d3 e3                	shl    ebx,cl
c0028112:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028118:	b8 1e 04 00 00       	mov    eax,0x41e
c002811d:	29 c8                	sub    eax,ecx
c002811f:	c1 e0 14             	shl    eax,0x14
c0028122:	89 c1                	mov    ecx,eax
c0028124:	89 de                	mov    esi,ebx
c0028126:	c1 ee 0b             	shr    esi,0xb
c0028129:	09 f1                	or     ecx,esi
c002812b:	89 ca                	mov    edx,ecx
c002812d:	c1 e3 15             	shl    ebx,0x15
c0028130:	89 d8                	mov    eax,ebx
c0028132:	eb 04                	jmp    c0028138 <__floatunsidf+0x3a>
c0028134:	31 c0                	xor    eax,eax
c0028136:	31 d2                	xor    edx,edx
c0028138:	5b                   	pop    ebx
c0028139:	5e                   	pop    esi
c002813a:	5d                   	pop    ebp
c002813b:	c3                   	ret    

c002813c <__fixdfsi>:
c002813c:	55                   	push   ebp
c002813d:	89 e5                	mov    ebp,esp
c002813f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028142:	89 d1                	mov    ecx,edx
c0028144:	c1 e1 0b             	shl    ecx,0xb
c0028147:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002814d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028150:	c1 e8 15             	shr    eax,0x15
c0028153:	09 c1                	or     ecx,eax
c0028155:	c1 fa 14             	sar    edx,0x14
c0028158:	78 1f                	js     c0028179 <__fixdfsi+0x3d>
c002815a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028160:	31 c0                	xor    eax,eax
c0028162:	83 fa 1e             	cmp    edx,0x1e
c0028165:	77 40                	ja     c00281a7 <__fixdfsi+0x6b>
c0028167:	89 c8                	mov    eax,ecx
c0028169:	0d 00 00 00 80       	or     eax,0x80000000
c002816e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028173:	29 d1                	sub    ecx,edx
c0028175:	d3 e8                	shr    eax,cl
c0028177:	eb 2e                	jmp    c00281a7 <__fixdfsi+0x6b>
c0028179:	31 c0                	xor    eax,eax
c002817b:	81 c2 01 04 00 00    	add    edx,0x401
c0028181:	78 24                	js     c00281a7 <__fixdfsi+0x6b>
c0028183:	83 fa 1e             	cmp    edx,0x1e
c0028186:	7e 09                	jle    c0028191 <__fixdfsi+0x55>
c0028188:	83 fa 1f             	cmp    edx,0x1f
c002818b:	75 18                	jne    c00281a5 <__fixdfsi+0x69>
c002818d:	85 c9                	test   ecx,ecx
c002818f:	75 14                	jne    c00281a5 <__fixdfsi+0x69>
c0028191:	89 c8                	mov    eax,ecx
c0028193:	0d 00 00 00 80       	or     eax,0x80000000
c0028198:	b9 1f 00 00 00       	mov    ecx,0x1f
c002819d:	29 d1                	sub    ecx,edx
c002819f:	d3 e8                	shr    eax,cl
c00281a1:	f7 d8                	neg    eax
c00281a3:	eb 02                	jmp    c00281a7 <__fixdfsi+0x6b>
c00281a5:	31 c0                	xor    eax,eax
c00281a7:	5d                   	pop    ebp
c00281a8:	c3                   	ret    

c00281a9 <__fixunsdfsi>:
c00281a9:	55                   	push   ebp
c00281aa:	89 e5                	mov    ebp,esp
c00281ac:	53                   	push   ebx
c00281ad:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00281b0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00281b3:	89 d3                	mov    ebx,edx
c00281b5:	c1 fb 14             	sar    ebx,0x14
c00281b8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00281be:	31 c0                	xor    eax,eax
c00281c0:	83 fb 1f             	cmp    ebx,0x1f
c00281c3:	77 1d                	ja     c00281e2 <__fixunsdfsi+0x39>
c00281c5:	89 d0                	mov    eax,edx
c00281c7:	c1 e0 0b             	shl    eax,0xb
c00281ca:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00281cf:	c1 e9 15             	shr    ecx,0x15
c00281d2:	09 c8                	or     eax,ecx
c00281d4:	0d 00 00 00 80       	or     eax,0x80000000
c00281d9:	b9 1f 00 00 00       	mov    ecx,0x1f
c00281de:	29 d9                	sub    ecx,ebx
c00281e0:	d3 e8                	shr    eax,cl
c00281e2:	5b                   	pop    ebx
c00281e3:	5d                   	pop    ebp
c00281e4:	c3                   	ret    

c00281e5 <__cmpdf2>:
c00281e5:	55                   	push   ebp
c00281e6:	89 e5                	mov    ebp,esp
c00281e8:	57                   	push   edi
c00281e9:	56                   	push   esi
c00281ea:	53                   	push   ebx
c00281eb:	83 ec 0c             	sub    esp,0xc
c00281ee:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00281f1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00281f4:	89 ca                	mov    edx,ecx
c00281f6:	c1 ea 14             	shr    edx,0x14
c00281f9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00281ff:	89 cb                	mov    ebx,ecx
c0028201:	c1 fb 1f             	sar    ebx,0x1f
c0028204:	31 da                	xor    edx,ebx
c0028206:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028209:	89 df                	mov    edi,ebx
c002820b:	c1 e7 0b             	shl    edi,0xb
c002820e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028211:	c1 e1 0b             	shl    ecx,0xb
c0028214:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002821a:	c1 eb 15             	shr    ebx,0x15
c002821d:	09 d9                	or     ecx,ebx
c002821f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028222:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028225:	89 ce                	mov    esi,ecx
c0028227:	c1 ee 14             	shr    esi,0x14
c002822a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028230:	89 cb                	mov    ebx,ecx
c0028232:	c1 fb 1f             	sar    ebx,0x1f
c0028235:	31 de                	xor    esi,ebx
c0028237:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002823a:	89 df                	mov    edi,ebx
c002823c:	c1 e7 0b             	shl    edi,0xb
c002823f:	c1 e1 0b             	shl    ecx,0xb
c0028242:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028248:	c1 eb 15             	shr    ebx,0x15
c002824b:	09 d9                	or     ecx,ebx
c002824d:	89 d3                	mov    ebx,edx
c002824f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028255:	43                   	inc    ebx
c0028256:	83 fb 01             	cmp    ebx,0x1
c0028259:	77 08                	ja     c0028263 <__cmpdf2+0x7e>
c002825b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002825e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028261:	75 68                	jne    c00282cb <__cmpdf2+0xe6>
c0028263:	89 f3                	mov    ebx,esi
c0028265:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002826b:	43                   	inc    ebx
c002826c:	83 fb 01             	cmp    ebx,0x1
c002826f:	77 06                	ja     c0028277 <__cmpdf2+0x92>
c0028271:	89 fb                	mov    ebx,edi
c0028273:	09 cb                	or     ebx,ecx
c0028275:	75 54                	jne    c00282cb <__cmpdf2+0xe6>
c0028277:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002827a:	09 f8                	or     eax,edi
c002827c:	09 c8                	or     eax,ecx
c002827e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028281:	75 12                	jne    c0028295 <__cmpdf2+0xb0>
c0028283:	8d 42 01             	lea    eax,[edx+0x1]
c0028286:	83 f8 01             	cmp    eax,0x1
c0028289:	77 0a                	ja     c0028295 <__cmpdf2+0xb0>
c002828b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002828e:	31 c0                	xor    eax,eax
c0028290:	83 fb 01             	cmp    ebx,0x1
c0028293:	76 36                	jbe    c00282cb <__cmpdf2+0xe6>
c0028295:	b8 01 00 00 00       	mov    eax,0x1
c002829a:	39 f2                	cmp    edx,esi
c002829c:	7f 2d                	jg     c00282cb <__cmpdf2+0xe6>
c002829e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00282a3:	7c 26                	jl     c00282cb <__cmpdf2+0xe6>
c00282a5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00282a8:	77 07                	ja     c00282b1 <__cmpdf2+0xcc>
c00282aa:	72 16                	jb     c00282c2 <__cmpdf2+0xdd>
c00282ac:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00282af:	76 0a                	jbe    c00282bb <__cmpdf2+0xd6>
c00282b1:	89 d0                	mov    eax,edx
c00282b3:	c1 f8 1f             	sar    eax,0x1f
c00282b6:	83 c8 01             	or     eax,0x1
c00282b9:	eb 10                	jmp    c00282cb <__cmpdf2+0xe6>
c00282bb:	b8 00 00 00 00       	mov    eax,0x0
c00282c0:	73 09                	jae    c00282cb <__cmpdf2+0xe6>
c00282c2:	89 d0                	mov    eax,edx
c00282c4:	c1 f8 1f             	sar    eax,0x1f
c00282c7:	83 e0 02             	and    eax,0x2
c00282ca:	48                   	dec    eax
c00282cb:	83 c4 0c             	add    esp,0xc
c00282ce:	5b                   	pop    ebx
c00282cf:	5e                   	pop    esi
c00282d0:	5f                   	pop    edi
c00282d1:	5d                   	pop    ebp
c00282d2:	c3                   	ret    

c00282d3 <__eqdf2>:
c00282d3:	55                   	push   ebp
c00282d4:	89 e5                	mov    ebp,esp
c00282d6:	50                   	push   eax
c00282d7:	6a 01                	push   0x1
c00282d9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00282dc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00282df:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00282e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00282e5:	e8 fb fe ff ff       	call   c00281e5 <__cmpdf2>
c00282ea:	83 c4 18             	add    esp,0x18
c00282ed:	c9                   	leave  
c00282ee:	c3                   	ret    

c00282ef <__nedf2>:
c00282ef:	eb e2                	jmp    c00282d3 <__eqdf2>

c00282f1 <__gtdf2>:
c00282f1:	55                   	push   ebp
c00282f2:	89 e5                	mov    ebp,esp
c00282f4:	50                   	push   eax
c00282f5:	6a ff                	push   0xffffffff
c00282f7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00282fa:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00282fd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028300:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028303:	e8 dd fe ff ff       	call   c00281e5 <__cmpdf2>
c0028308:	83 c4 18             	add    esp,0x18
c002830b:	c9                   	leave  
c002830c:	c3                   	ret    

c002830d <__gedf2>:
c002830d:	eb e2                	jmp    c00282f1 <__gtdf2>

c002830f <__ltdf2>:
c002830f:	eb c2                	jmp    c00282d3 <__eqdf2>

c0028311 <__ledf2>:
c0028311:	eb c0                	jmp    c00282d3 <__eqdf2>

c0028313 <__truncdfsf2>:
c0028313:	55                   	push   ebp
c0028314:	89 e5                	mov    ebp,esp
c0028316:	57                   	push   edi
c0028317:	56                   	push   esi
c0028318:	53                   	push   ebx
c0028319:	83 ec 0c             	sub    esp,0xc
c002831c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002831f:	89 d1                	mov    ecx,edx
c0028321:	c1 f9 14             	sar    ecx,0x14
c0028324:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028327:	89 df                	mov    edi,ebx
c0028329:	c1 e7 0b             	shl    edi,0xb
c002832c:	89 d0                	mov    eax,edx
c002832e:	c1 e0 0b             	shl    eax,0xb
c0028331:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028336:	c1 eb 15             	shr    ebx,0x15
c0028339:	09 d8                	or     eax,ebx
c002833b:	89 cb                	mov    ebx,ecx
c002833d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028343:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028349:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002834f:	0f 86 9e 00 00 00    	jbe    c00283f3 <__truncdfsf2+0xe0>
c0028355:	85 db                	test   ebx,ebx
c0028357:	75 0a                	jne    c0028363 <__truncdfsf2+0x50>
c0028359:	c1 fa 17             	sar    edx,0x17
c002835c:	30 d2                	xor    dl,dl
c002835e:	e9 84 00 00 00       	jmp    c00283e7 <__truncdfsf2+0xd4>
c0028363:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028369:	83 fe 83             	cmp    esi,0xffffff83
c002836c:	7d 4b                	jge    c00283b9 <__truncdfsf2+0xa6>
c002836e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028373:	29 f1                	sub    ecx,esi
c0028375:	83 f9 1f             	cmp    ecx,0x1f
c0028378:	7f 6b                	jg     c00283e5 <__truncdfsf2+0xd2>
c002837a:	0d 00 00 00 80       	or     eax,0x80000000
c002837f:	89 c3                	mov    ebx,eax
c0028381:	d3 eb                	shr    ebx,cl
c0028383:	be 01 00 00 00       	mov    esi,0x1
c0028388:	d3 e6                	shl    esi,cl
c002838a:	4e                   	dec    esi
c002838b:	21 f0                	and    eax,esi
c002838d:	09 f8                	or     eax,edi
c002838f:	0f 95 c0             	setne  al
c0028392:	0f b6 c0             	movzx  eax,al
c0028395:	09 c3                	or     ebx,eax
c0028397:	89 d9                	mov    ecx,ebx
c0028399:	c1 e9 08             	shr    ecx,0x8
c002839c:	f6 c3 7f             	test   bl,0x7f
c002839f:	0f 95 c0             	setne  al
c00283a2:	09 c8                	or     eax,ecx
c00283a4:	83 e0 01             	and    eax,0x1
c00283a7:	c1 eb 07             	shr    ebx,0x7
c00283aa:	21 c3                	and    ebx,eax
c00283ac:	81 e2 00 00 00 80    	and    edx,0x80000000
c00283b2:	09 d1                	or     ecx,edx
c00283b4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00283b7:	eb 76                	jmp    c002842f <__truncdfsf2+0x11c>
c00283b9:	83 c6 80             	add    esi,0xffffff80
c00283bc:	7e 1d                	jle    c00283db <__truncdfsf2+0xc8>
c00283be:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00283c4:	75 0b                	jne    c00283d1 <__truncdfsf2+0xbe>
c00283c6:	09 f8                	or     eax,edi
c00283c8:	74 09                	je     c00283d3 <__truncdfsf2+0xc0>
c00283ca:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00283cf:	eb 02                	jmp    c00283d3 <__truncdfsf2+0xc0>
c00283d1:	31 c0                	xor    eax,eax
c00283d3:	c1 fa 17             	sar    edx,0x17
c00283d6:	80 ca ff             	or     dl,0xff
c00283d9:	eb 0e                	jmp    c00283e9 <__truncdfsf2+0xd6>
c00283db:	c1 fa 1f             	sar    edx,0x1f
c00283de:	c1 e2 08             	shl    edx,0x8
c00283e1:	09 ca                	or     edx,ecx
c00283e3:	eb 04                	jmp    c00283e9 <__truncdfsf2+0xd6>
c00283e5:	31 d2                	xor    edx,edx
c00283e7:	31 c0                	xor    eax,eax
c00283e9:	c1 e2 17             	shl    edx,0x17
c00283ec:	c1 e8 08             	shr    eax,0x8
c00283ef:	09 d0                	or     eax,edx
c00283f1:	eb 3c                	jmp    c002842f <__truncdfsf2+0x11c>
c00283f3:	81 e9 80 03 00 00    	sub    ecx,0x380
c00283f9:	89 ca                	mov    edx,ecx
c00283fb:	c1 fa 0b             	sar    edx,0xb
c00283fe:	c1 e2 08             	shl    edx,0x8
c0028401:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028404:	31 db                	xor    ebx,ebx
c0028406:	85 ff                	test   edi,edi
c0028408:	0f 95 c3             	setne  bl
c002840b:	09 d8                	or     eax,ebx
c002840d:	89 c3                	mov    ebx,eax
c002840f:	c1 eb 08             	shr    ebx,0x8
c0028412:	a8 7f                	test   al,0x7f
c0028414:	0f 95 c2             	setne  dl
c0028417:	89 d6                	mov    esi,edx
c0028419:	09 de                	or     esi,ebx
c002841b:	83 e6 01             	and    esi,0x1
c002841e:	c1 e8 07             	shr    eax,0x7
c0028421:	21 f0                	and    eax,esi
c0028423:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028426:	09 ca                	or     edx,ecx
c0028428:	c1 e2 17             	shl    edx,0x17
c002842b:	09 da                	or     edx,ebx
c002842d:	01 d0                	add    eax,edx
c002842f:	83 c4 0c             	add    esp,0xc
c0028432:	5b                   	pop    ebx
c0028433:	5e                   	pop    esi
c0028434:	5f                   	pop    edi
c0028435:	5d                   	pop    ebp
c0028436:	c3                   	ret    

c0028437 <__extendsfdf2>:
c0028437:	55                   	push   ebp
c0028438:	89 e5                	mov    ebp,esp
c002843a:	57                   	push   edi
c002843b:	56                   	push   esi
c002843c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002843f:	89 d1                	mov    ecx,edx
c0028441:	c1 f9 17             	sar    ecx,0x17
c0028444:	c1 e2 08             	shl    edx,0x8
c0028447:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002844d:	89 c8                	mov    eax,ecx
c002844f:	80 e4 f8             	and    ah,0xf8
c0028452:	8d 71 01             	lea    esi,[ecx+0x1]
c0028455:	81 e6 fe 00 00 00    	and    esi,0xfe
c002845b:	75 27                	jne    c0028484 <__extendsfdf2+0x4d>
c002845d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028463:	75 18                	jne    c002847d <__extendsfdf2+0x46>
c0028465:	85 d2                	test   edx,edx
c0028467:	74 20                	je     c0028489 <__extendsfdf2+0x52>
c0028469:	41                   	inc    ecx
c002846a:	01 d2                	add    edx,edx
c002846c:	79 fb                	jns    c0028469 <__extendsfdf2+0x32>
c002846e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028474:	29 c8                	sub    eax,ecx
c0028476:	05 81 03 00 00       	add    eax,0x381
c002847b:	eb 0c                	jmp    c0028489 <__extendsfdf2+0x52>
c002847d:	05 00 07 00 00       	add    eax,0x700
c0028482:	eb 05                	jmp    c0028489 <__extendsfdf2+0x52>
c0028484:	05 80 03 00 00       	add    eax,0x380
c0028489:	c1 e0 14             	shl    eax,0x14
c002848c:	89 c1                	mov    ecx,eax
c002848e:	89 d0                	mov    eax,edx
c0028490:	c1 e8 0b             	shr    eax,0xb
c0028493:	09 c1                	or     ecx,eax
c0028495:	c1 e2 15             	shl    edx,0x15
c0028498:	89 d0                	mov    eax,edx
c002849a:	89 ca                	mov    edx,ecx
c002849c:	5e                   	pop    esi
c002849d:	5f                   	pop    edi
c002849e:	5d                   	pop    ebp
c002849f:	c3                   	ret    

c00284a0 <fabs>:
c00284a0:	83 ec 0c             	sub    esp,0xc
c00284a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00284aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00284ae:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00284b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00284b7:	dd 04 24             	fld    QWORD PTR [esp]
c00284ba:	83 c4 0c             	add    esp,0xc
c00284bd:	c3                   	ret    
c00284be:	66 90                	xchg   ax,ax

c00284c0 <lrint>:
c00284c0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00284c4:	83 ec 04             	sub    esp,0x4
c00284c7:	db 1c 24             	fistp  DWORD PTR [esp]
c00284ca:	58                   	pop    eax
c00284cb:	c3                   	ret    

c00284cc <lrintf>:
c00284cc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00284d0:	83 ec 04             	sub    esp,0x4
c00284d3:	db 1c 24             	fistp  DWORD PTR [esp]
c00284d6:	58                   	pop    eax
c00284d7:	c3                   	ret    

Disassembly of section .init:

c00284d8 <_init>:
c00284d8:	55                   	push   ebp
c00284d9:	89 e5                	mov    ebp,esp
c00284db:	e8 38 7c fd ff       	call   c0000118 <frame_dummy>
c00284e0:	e8 63 e0 ff ff       	call   c0026548 <__do_global_ctors_aux>
c00284e5:	5d                   	pop    ebp
c00284e6:	c3                   	ret    

Disassembly of section .fini:

c00284e7 <_fini>:
c00284e7:	55                   	push   ebp
c00284e8:	89 e5                	mov    ebp,esp
c00284ea:	e8 b9 7b fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00284ef:	5d                   	pop    ebp
c00284f0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00284f2 <Computer::~Computer()>:
c00284f2:	83 ec 0c             	sub    esp,0xc
c00284f5:	ba 28 a0 02 c0       	mov    edx,0xc002a028
c00284fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284fe:	89 10                	mov    DWORD PTR [eax],edx
c0028500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028504:	83 ec 0c             	sub    esp,0xc
c0028507:	50                   	push   eax
c0028508:	e8 7f bb fe ff       	call   c001408c <Device::~Device()>
c002850d:	83 c4 10             	add    esp,0x10
c0028510:	90                   	nop
c0028511:	83 c4 0c             	add    esp,0xc
c0028514:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028516 <Computer::~Computer()>:
c0028516:	83 ec 0c             	sub    esp,0xc
c0028519:	83 ec 0c             	sub    esp,0xc
c002851c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028520:	e8 cd ff ff ff       	call   c00284f2 <Computer::~Computer()>
c0028525:	83 c4 10             	add    esp,0x10
c0028528:	83 ec 08             	sub    esp,0x8
c002852b:	68 ec 01 00 00       	push   0x1ec
c0028530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028534:	e8 7b a7 fe ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0028539:	83 c4 10             	add    esp,0x10
c002853c:	83 c4 0c             	add    esp,0xc
c002853f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028540 <idleCommon()>:
c0028540:	83 ec 0c             	sub    esp,0xc
c0028543:	e8 ef 56 ff ff       	call   c001dc37 <lockScheduler()>
c0028548:	e8 25 5a ff ff       	call   c001df72 <schedule()>
c002854d:	83 c4 0c             	add    esp,0xc
c0028550:	e9 e4 56 ff ff       	jmp    c001dc39 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028556 <LinkedList<UnixFile>::~LinkedList()>:
c0028556:	90                   	nop
c0028557:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028558 <LinkedList<UnixFile>::LinkedList()>:
c0028558:	83 ec 0c             	sub    esp,0xc
c002855b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002855f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028569:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028574:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002857b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002857f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028589:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028594:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002859b:	83 ec 0c             	sub    esp,0xc
c002859e:	68 f2 a2 02 c0       	push   0xc002a2f2
c00285a3:	e8 ec a7 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00285a8:	83 c4 10             	add    esp,0x10
c00285ab:	90                   	nop
c00285ac:	83 c4 0c             	add    esp,0xc
c00285af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00285b0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00285b0:	83 ec 0c             	sub    esp,0xc
c00285b3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00285b8:	75 10                	jne    c00285ca <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00285ba:	83 ec 0c             	sub    esp,0xc
c00285bd:	68 0c a3 02 c0       	push   0xc002a30c
c00285c2:	e8 76 1e ff ff       	call   c001a43d <Krnl::panic(char const*)>
c00285c7:	83 c4 10             	add    esp,0x10
c00285ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00285d0:	85 c0                	test   eax,eax
c00285d2:	74 34                	je     c0028608 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00285d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285db:	85 c0                	test   eax,eax
c00285dd:	74 29                	je     c0028608 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00285df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285e3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285ea:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00285ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285f5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00285f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028606:	eb 65                	jmp    c002866d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002860c:	8b 00                	mov    eax,DWORD PTR [eax]
c002860e:	85 c0                	test   eax,eax
c0028610:	75 4b                	jne    c002865d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028616:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028619:	85 c0                	test   eax,eax
c002861b:	75 40                	jne    c002865d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002861d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028621:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028625:	89 10                	mov    DWORD PTR [eax],edx
c0028627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002862b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002862f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028636:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028639:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028644:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028647:	85 c0                	test   eax,eax
c0028649:	74 22                	je     c002866d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002864b:	83 ec 0c             	sub    esp,0xc
c002864e:	68 2e a3 02 c0       	push   0xc002a32e
c0028653:	e8 e5 1d ff ff       	call   c001a43d <Krnl::panic(char const*)>
c0028658:	83 c4 10             	add    esp,0x10
c002865b:	eb 10                	jmp    c002866d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002865d:	83 ec 0c             	sub    esp,0xc
c0028660:	68 38 a3 02 c0       	push   0xc002a338
c0028665:	e8 d3 1d ff ff       	call   c001a43d <Krnl::panic(char const*)>
c002866a:	83 c4 10             	add    esp,0x10
c002866d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028671:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028674:	8d 50 01             	lea    edx,[eax+0x1]
c0028677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002867b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002867e:	90                   	nop
c002867f:	83 c4 0c             	add    esp,0xc
c0028682:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028684 <LinkedList<UnixFile>::getFirstElement()>:
c0028684:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028688:	8b 00                	mov    eax,DWORD PTR [eax]
c002868a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002868c <LinkedList<UnixFile>::removeFirst()>:
c002868c:	83 ec 0c             	sub    esp,0xc
c002868f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028693:	8b 00                	mov    eax,DWORD PTR [eax]
c0028695:	85 c0                	test   eax,eax
c0028697:	75 12                	jne    c00286ab <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028699:	83 ec 0c             	sub    esp,0xc
c002869c:	68 44 a3 02 c0       	push   0xc002a344
c00286a1:	e8 97 1d ff ff       	call   c001a43d <Krnl::panic(char const*)>
c00286a6:	83 c4 10             	add    esp,0x10
c00286a9:	eb 7e                	jmp    c0028729 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00286ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286b5:	85 c0                	test   eax,eax
c00286b7:	74 10                	je     c00286c9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00286b9:	83 ec 0c             	sub    esp,0xc
c00286bc:	68 8f a3 02 c0       	push   0xc002a38f
c00286c1:	e8 77 1d ff ff       	call   c001a43d <Krnl::panic(char const*)>
c00286c6:	83 c4 10             	add    esp,0x10
c00286c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00286cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286d2:	85 c0                	test   eax,eax
c00286d4:	75 33                	jne    c0028709 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00286d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00286eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286f2:	83 f8 01             	cmp    eax,0x1
c00286f5:	74 21                	je     c0028718 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00286f7:	83 ec 0c             	sub    esp,0xc
c00286fa:	68 68 a3 02 c0       	push   0xc002a368
c00286ff:	e8 39 1d ff ff       	call   c001a43d <Krnl::panic(char const*)>
c0028704:	83 c4 10             	add    esp,0x10
c0028707:	eb 0f                	jmp    c0028718 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002870d:	8b 00                	mov    eax,DWORD PTR [eax]
c002870f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028716:	89 10                	mov    DWORD PTR [eax],edx
c0028718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002871c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002871f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028726:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028729:	83 c4 0c             	add    esp,0xc
c002872c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002872e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002872e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028732:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028735:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028736 <DriverlessDevice::~DriverlessDevice()>:
c0028736:	ba 84 aa 02 c0       	mov    edx,0xc002aa84
c002873b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002873f:	89 10                	mov    DWORD PTR [eax],edx
c0028741:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028745:	50                   	push   eax
c0028746:	e8 41 b9 fe ff       	call   c001408c <Device::~Device()>
c002874b:	83 c4 04             	add    esp,0x4
c002874e:	90                   	nop
c002874f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028750 <DriverlessDevice::~DriverlessDevice()>:
c0028750:	83 ec 0c             	sub    esp,0xc
c0028753:	83 ec 0c             	sub    esp,0xc
c0028756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002875a:	e8 d7 ff ff ff       	call   c0028736 <DriverlessDevice::~DriverlessDevice()>
c002875f:	83 c4 10             	add    esp,0x10
c0028762:	83 ec 08             	sub    esp,0x8
c0028765:	68 58 01 00 00       	push   0x158
c002876a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002876e:	e8 41 a5 fe ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0028773:	83 c4 10             	add    esp,0x10
c0028776:	83 c4 0c             	add    esp,0xc
c0028779:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002877a <LinkedList<Device>::addElement(Device*)>:
c002877a:	83 ec 0c             	sub    esp,0xc
c002877d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028782:	75 10                	jne    c0028794 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028784:	83 ec 0c             	sub    esp,0xc
c0028787:	68 0c a3 02 c0       	push   0xc002a30c
c002878c:	e8 ac 1c ff ff       	call   c001a43d <Krnl::panic(char const*)>
c0028791:	83 c4 10             	add    esp,0x10
c0028794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028798:	8b 00                	mov    eax,DWORD PTR [eax]
c002879a:	85 c0                	test   eax,eax
c002879c:	74 3a                	je     c00287d8 <LinkedList<Device>::addElement(Device*)+0x5e>
c002879e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287a5:	85 c0                	test   eax,eax
c00287a7:	74 2f                	je     c00287d8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00287a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287b4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00287ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287c2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287cc:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00287d6:	eb 68                	jmp    c0028840 <LinkedList<Device>::addElement(Device*)+0xc6>
c00287d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00287de:	85 c0                	test   eax,eax
c00287e0:	75 4e                	jne    c0028830 <LinkedList<Device>::addElement(Device*)+0xb6>
c00287e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287e9:	85 c0                	test   eax,eax
c00287eb:	75 43                	jne    c0028830 <LinkedList<Device>::addElement(Device*)+0xb6>
c00287ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287f5:	89 10                	mov    DWORD PTR [eax],edx
c00287f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028806:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028809:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028817:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002881a:	85 c0                	test   eax,eax
c002881c:	74 22                	je     c0028840 <LinkedList<Device>::addElement(Device*)+0xc6>
c002881e:	83 ec 0c             	sub    esp,0xc
c0028821:	68 2e a3 02 c0       	push   0xc002a32e
c0028826:	e8 12 1c ff ff       	call   c001a43d <Krnl::panic(char const*)>
c002882b:	83 c4 10             	add    esp,0x10
c002882e:	eb 10                	jmp    c0028840 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028830:	83 ec 0c             	sub    esp,0xc
c0028833:	68 38 a3 02 c0       	push   0xc002a338
c0028838:	e8 00 1c ff ff       	call   c001a43d <Krnl::panic(char const*)>
c002883d:	83 c4 10             	add    esp,0x10
c0028840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028844:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028847:	8d 50 01             	lea    edx,[eax+0x1]
c002884a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028851:	90                   	nop
c0028852:	83 c4 0c             	add    esp,0xc
c0028855:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028856 <LinkedList<Device>::LinkedList()>:
c0028856:	83 ec 0c             	sub    esp,0xc
c0028859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028867:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002886e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028872:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028887:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002888e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028892:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028899:	83 ec 0c             	sub    esp,0xc
c002889c:	68 f2 a2 02 c0       	push   0xc002a2f2
c00288a1:	e8 ee a4 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c00288a6:	83 c4 10             	add    esp,0x10
c00288a9:	90                   	nop
c00288aa:	83 c4 0c             	add    esp,0xc
c00288ad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00288ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00288ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00288b4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00288b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00288b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00288bc:	85 c0                	test   eax,eax
c00288be:	75 0e                	jne    c00288ce <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00288c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288c7:	85 c0                	test   eax,eax
c00288c9:	75 03                	jne    c00288ce <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00288cb:	b0 01                	mov    al,0x1
c00288cd:	c3                   	ret    
c00288ce:	b0 00                	mov    al,0x0
c00288d0:	90                   	nop
c00288d1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00288d2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00288d2:	83 ec 0c             	sub    esp,0xc
c00288d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00288db:	85 c0                	test   eax,eax
c00288dd:	75 15                	jne    c00288f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00288df:	83 ec 0c             	sub    esp,0xc
c00288e2:	68 44 a3 02 c0       	push   0xc002a344
c00288e7:	e8 51 1b ff ff       	call   c001a43d <Krnl::panic(char const*)>
c00288ec:	83 c4 10             	add    esp,0x10
c00288ef:	e9 88 00 00 00       	jmp    c002897c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00288f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288fb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00288fe:	85 c0                	test   eax,eax
c0028900:	0f 95 c0             	setne  al
c0028903:	84 c0                	test   al,al
c0028905:	74 10                	je     c0028917 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028907:	83 ec 0c             	sub    esp,0xc
c002890a:	68 8f a3 02 c0       	push   0xc002a38f
c002890f:	e8 29 1b ff ff       	call   c001a43d <Krnl::panic(char const*)>
c0028914:	83 c4 10             	add    esp,0x10
c0028917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891b:	8b 00                	mov    eax,DWORD PTR [eax]
c002891d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028920:	85 c0                	test   eax,eax
c0028922:	0f 94 c0             	sete   al
c0028925:	84 c0                	test   al,al
c0028927:	74 33                	je     c002895c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002892d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028937:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002893e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028942:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028945:	83 f8 01             	cmp    eax,0x1
c0028948:	74 21                	je     c002896b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002894a:	83 ec 0c             	sub    esp,0xc
c002894d:	68 68 a3 02 c0       	push   0xc002a368
c0028952:	e8 e6 1a ff ff       	call   c001a43d <Krnl::panic(char const*)>
c0028957:	83 c4 10             	add    esp,0x10
c002895a:	eb 0f                	jmp    c002896b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002895c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028960:	8b 00                	mov    eax,DWORD PTR [eax]
c0028962:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028969:	89 10                	mov    DWORD PTR [eax],edx
c002896b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028972:	8d 50 ff             	lea    edx,[eax-0x1]
c0028975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028979:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002897c:	83 c4 0c             	add    esp,0xc
c002897f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028980:	83 ec 0c             	sub    esp,0xc
c0028983:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028988:	75 10                	jne    c002899a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002898a:	83 ec 0c             	sub    esp,0xc
c002898d:	68 0c a3 02 c0       	push   0xc002a30c
c0028992:	e8 a6 1a ff ff       	call   c001a43d <Krnl::panic(char const*)>
c0028997:	83 c4 10             	add    esp,0x10
c002899a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002899e:	8b 00                	mov    eax,DWORD PTR [eax]
c00289a0:	85 c0                	test   eax,eax
c00289a2:	74 34                	je     c00289d8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00289a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289ab:	85 c0                	test   eax,eax
c00289ad:	74 29                	je     c00289d8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00289af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289ba:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00289bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289c5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00289c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289cf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00289d6:	eb 65                	jmp    c0028a3d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00289d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00289de:	85 c0                	test   eax,eax
c00289e0:	75 4b                	jne    c0028a2d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00289e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289e9:	85 c0                	test   eax,eax
c00289eb:	75 40                	jne    c0028a2d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00289ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289f5:	89 10                	mov    DWORD PTR [eax],edx
c00289f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a09:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028a10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a17:	85 c0                	test   eax,eax
c0028a19:	74 22                	je     c0028a3d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028a1b:	83 ec 0c             	sub    esp,0xc
c0028a1e:	68 2e a3 02 c0       	push   0xc002a32e
c0028a23:	e8 15 1a ff ff       	call   c001a43d <Krnl::panic(char const*)>
c0028a28:	83 c4 10             	add    esp,0x10
c0028a2b:	eb 10                	jmp    c0028a3d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028a2d:	83 ec 0c             	sub    esp,0xc
c0028a30:	68 38 a3 02 c0       	push   0xc002a338
c0028a35:	e8 03 1a ff ff       	call   c001a43d <Krnl::panic(char const*)>
c0028a3a:	83 c4 10             	add    esp,0x10
c0028a3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a41:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a44:	8d 50 01             	lea    edx,[eax+0x1]
c0028a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a4b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a4e:	90                   	nop
c0028a4f:	83 c4 0c             	add    esp,0xc
c0028a52:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028a54 <ACPI::~ACPI()>:
c0028a54:	83 ec 0c             	sub    esp,0xc
c0028a57:	ba fc b3 02 c0       	mov    edx,0xc002b3fc
c0028a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a60:	89 10                	mov    DWORD PTR [eax],edx
c0028a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a66:	83 ec 0c             	sub    esp,0xc
c0028a69:	50                   	push   eax
c0028a6a:	e8 1d b6 fe ff       	call   c001408c <Device::~Device()>
c0028a6f:	83 c4 10             	add    esp,0x10
c0028a72:	90                   	nop
c0028a73:	83 c4 0c             	add    esp,0xc
c0028a76:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028a78 <ACPI::~ACPI()>:
c0028a78:	83 ec 0c             	sub    esp,0xc
c0028a7b:	83 ec 0c             	sub    esp,0xc
c0028a7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a82:	e8 cd ff ff ff       	call   c0028a54 <ACPI::~ACPI()>
c0028a87:	83 c4 10             	add    esp,0x10
c0028a8a:	83 ec 08             	sub    esp,0x8
c0028a8d:	68 68 12 00 00       	push   0x1268
c0028a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a96:	e8 19 a2 fe ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0028a9b:	83 c4 10             	add    esp,0x10
c0028a9e:	83 c4 0c             	add    esp,0xc
c0028aa1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028aa2 <CPU::~CPU()>:
c0028aa2:	83 ec 0c             	sub    esp,0xc
c0028aa5:	ba ec b7 02 c0       	mov    edx,0xc002b7ec
c0028aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aae:	89 10                	mov    DWORD PTR [eax],edx
c0028ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab4:	83 ec 0c             	sub    esp,0xc
c0028ab7:	50                   	push   eax
c0028ab8:	e8 cf b5 fe ff       	call   c001408c <Device::~Device()>
c0028abd:	83 c4 10             	add    esp,0x10
c0028ac0:	90                   	nop
c0028ac1:	83 c4 0c             	add    esp,0xc
c0028ac4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028ac6 <CPU::~CPU()>:
c0028ac6:	83 ec 0c             	sub    esp,0xc
c0028ac9:	83 ec 0c             	sub    esp,0xc
c0028acc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ad0:	e8 cd ff ff ff       	call   c0028aa2 <CPU::~CPU()>
c0028ad5:	83 c4 10             	add    esp,0x10
c0028ad8:	83 ec 08             	sub    esp,0x8
c0028adb:	68 98 11 00 00       	push   0x1198
c0028ae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ae4:	e8 cb a1 fe ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0028ae9:	83 c4 10             	add    esp,0x10
c0028aec:	83 c4 0c             	add    esp,0xc
c0028aef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028af0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028af0:	90                   	nop
c0028af1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028af2 <ThreadControlBlock::ThreadControlBlock()>:
c0028af2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028af6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028afd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b01:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028b08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b0c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028b13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b17:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028b1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b22:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028b26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b2a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028b2e:	90                   	nop
c0028b2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028b30 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028b30:	83 ec 0c             	sub    esp,0xc
c0028b33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b37:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b41:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b4c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b57:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b61:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b6c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b73:	83 ec 0c             	sub    esp,0xc
c0028b76:	68 f2 a2 02 c0       	push   0xc002a2f2
c0028b7b:	e8 14 a2 fe ff       	call   c0012d94 <Dbg::kprintf(char const*, ...)>
c0028b80:	83 c4 10             	add    esp,0x10
c0028b83:	90                   	nop
c0028b84:	83 c4 0c             	add    esp,0xc
c0028b87:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028b88 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028b88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b8c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b8f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028b90 <Vm::_FPUState::_FPUState()>:
c0028b90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b94:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028b9b:	90                   	nop
c0028b9c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028b9e <PCI::~PCI()>:
c0028b9e:	83 ec 0c             	sub    esp,0xc
c0028ba1:	ba 78 c8 02 c0       	mov    edx,0xc002c878
c0028ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028baa:	89 10                	mov    DWORD PTR [eax],edx
c0028bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb0:	83 ec 0c             	sub    esp,0xc
c0028bb3:	50                   	push   eax
c0028bb4:	e8 ab ae fe ff       	call   c0013a64 <Bus::~Bus()>
c0028bb9:	83 c4 10             	add    esp,0x10
c0028bbc:	90                   	nop
c0028bbd:	83 c4 0c             	add    esp,0xc
c0028bc0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028bc2 <PCI::~PCI()>:
c0028bc2:	83 ec 0c             	sub    esp,0xc
c0028bc5:	83 ec 0c             	sub    esp,0xc
c0028bc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bcc:	e8 cd ff ff ff       	call   c0028b9e <PCI::~PCI()>
c0028bd1:	83 c4 10             	add    esp,0x10
c0028bd4:	83 ec 08             	sub    esp,0x8
c0028bd7:	68 58 01 00 00       	push   0x158
c0028bdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028be0:	e8 cf a0 fe ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0028be5:	83 c4 10             	add    esp,0x10
c0028be8:	83 c4 0c             	add    esp,0xc
c0028beb:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028bec <IDE::~IDE()>:
c0028bec:	83 ec 0c             	sub    esp,0xc
c0028bef:	ba dc ca 02 c0       	mov    edx,0xc002cadc
c0028bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf8:	89 10                	mov    DWORD PTR [eax],edx
c0028bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bfe:	83 ec 0c             	sub    esp,0xc
c0028c01:	50                   	push   eax
c0028c02:	e8 75 b9 fe ff       	call   c001457c <HardDiskController::~HardDiskController()>
c0028c07:	83 c4 10             	add    esp,0x10
c0028c0a:	90                   	nop
c0028c0b:	83 c4 0c             	add    esp,0xc
c0028c0e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028c10 <IDE::~IDE()>:
c0028c10:	83 ec 0c             	sub    esp,0xc
c0028c13:	83 ec 0c             	sub    esp,0xc
c0028c16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c1a:	e8 cd ff ff ff       	call   c0028bec <IDE::~IDE()>
c0028c1f:	83 c4 10             	add    esp,0x10
c0028c22:	83 ec 08             	sub    esp,0x8
c0028c25:	68 70 02 00 00       	push   0x270
c0028c2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c2e:	e8 81 a0 fe ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0028c33:	83 c4 10             	add    esp,0x10
c0028c36:	83 c4 0c             	add    esp,0xc
c0028c39:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028c3a <SATABus::~SATABus()>:
c0028c3a:	83 ec 0c             	sub    esp,0xc
c0028c3d:	ba bc cb 02 c0       	mov    edx,0xc002cbbc
c0028c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c46:	89 10                	mov    DWORD PTR [eax],edx
c0028c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c4c:	83 ec 0c             	sub    esp,0xc
c0028c4f:	50                   	push   eax
c0028c50:	e8 27 b9 fe ff       	call   c001457c <HardDiskController::~HardDiskController()>
c0028c55:	83 c4 10             	add    esp,0x10
c0028c58:	90                   	nop
c0028c59:	83 c4 0c             	add    esp,0xc
c0028c5c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028c5e <SATABus::~SATABus()>:
c0028c5e:	83 ec 0c             	sub    esp,0xc
c0028c61:	83 ec 0c             	sub    esp,0xc
c0028c64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c68:	e8 cd ff ff ff       	call   c0028c3a <SATABus::~SATABus()>
c0028c6d:	83 c4 10             	add    esp,0x10
c0028c70:	83 ec 08             	sub    esp,0x8
c0028c73:	68 64 01 00 00       	push   0x164
c0028c78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c7c:	e8 33 a0 fe ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0028c81:	83 c4 10             	add    esp,0x10
c0028c84:	83 c4 0c             	add    esp,0xc
c0028c87:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028c88 <ATA::~ATA()>:
c0028c88:	83 ec 0c             	sub    esp,0xc
c0028c8b:	ba 08 cc 02 c0       	mov    edx,0xc002cc08
c0028c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c94:	89 10                	mov    DWORD PTR [eax],edx
c0028c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c9a:	83 ec 0c             	sub    esp,0xc
c0028c9d:	50                   	push   eax
c0028c9e:	e8 cb b9 fe ff       	call   c001466e <PhysicalDisk::~PhysicalDisk()>
c0028ca3:	83 c4 10             	add    esp,0x10
c0028ca6:	90                   	nop
c0028ca7:	83 c4 0c             	add    esp,0xc
c0028caa:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028cac <ATA::~ATA()>:
c0028cac:	83 ec 0c             	sub    esp,0xc
c0028caf:	83 ec 0c             	sub    esp,0xc
c0028cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cb6:	e8 cd ff ff ff       	call   c0028c88 <ATA::~ATA()>
c0028cbb:	83 c4 10             	add    esp,0x10
c0028cbe:	83 ec 08             	sub    esp,0x8
c0028cc1:	68 7c 01 00 00       	push   0x17c
c0028cc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cca:	e8 e5 9f fe ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0028ccf:	83 c4 10             	add    esp,0x10
c0028cd2:	83 c4 0c             	add    esp,0xc
c0028cd5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028cd6 <ATAPI::~ATAPI()>:
c0028cd6:	83 ec 0c             	sub    esp,0xc
c0028cd9:	ba 40 cc 02 c0       	mov    edx,0xc002cc40
c0028cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce2:	89 10                	mov    DWORD PTR [eax],edx
c0028ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce8:	83 ec 0c             	sub    esp,0xc
c0028ceb:	50                   	push   eax
c0028cec:	e8 7d b9 fe ff       	call   c001466e <PhysicalDisk::~PhysicalDisk()>
c0028cf1:	83 c4 10             	add    esp,0x10
c0028cf4:	90                   	nop
c0028cf5:	83 c4 0c             	add    esp,0xc
c0028cf8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028cfa <ATAPI::~ATAPI()>:
c0028cfa:	83 ec 0c             	sub    esp,0xc
c0028cfd:	83 ec 0c             	sub    esp,0xc
c0028d00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d04:	e8 cd ff ff ff       	call   c0028cd6 <ATAPI::~ATAPI()>
c0028d09:	83 c4 10             	add    esp,0x10
c0028d0c:	83 ec 08             	sub    esp,0x8
c0028d0f:	68 80 01 00 00       	push   0x180
c0028d14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d18:	e8 97 9f fe ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0028d1d:	83 c4 10             	add    esp,0x10
c0028d20:	83 c4 0c             	add    esp,0xc
c0028d23:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028d24 <SATA::~SATA()>:
c0028d24:	83 ec 0c             	sub    esp,0xc
c0028d27:	ba f4 cc 02 c0       	mov    edx,0xc002ccf4
c0028d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d30:	89 10                	mov    DWORD PTR [eax],edx
c0028d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d36:	83 ec 0c             	sub    esp,0xc
c0028d39:	50                   	push   eax
c0028d3a:	e8 2f b9 fe ff       	call   c001466e <PhysicalDisk::~PhysicalDisk()>
c0028d3f:	83 c4 10             	add    esp,0x10
c0028d42:	90                   	nop
c0028d43:	83 c4 0c             	add    esp,0xc
c0028d46:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028d48 <SATA::~SATA()>:
c0028d48:	83 ec 0c             	sub    esp,0xc
c0028d4b:	83 ec 0c             	sub    esp,0xc
c0028d4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d52:	e8 cd ff ff ff       	call   c0028d24 <SATA::~SATA()>
c0028d57:	83 c4 10             	add    esp,0x10
c0028d5a:	83 ec 08             	sub    esp,0x8
c0028d5d:	68 7c 01 00 00       	push   0x17c
c0028d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d66:	e8 49 9f fe ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0028d6b:	83 c4 10             	add    esp,0x10
c0028d6e:	83 c4 0c             	add    esp,0xc
c0028d71:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028d72 <SATAPI::~SATAPI()>:
c0028d72:	83 ec 0c             	sub    esp,0xc
c0028d75:	ba d0 cd 02 c0       	mov    edx,0xc002cdd0
c0028d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7e:	89 10                	mov    DWORD PTR [eax],edx
c0028d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d84:	83 ec 0c             	sub    esp,0xc
c0028d87:	50                   	push   eax
c0028d88:	e8 e1 b8 fe ff       	call   c001466e <PhysicalDisk::~PhysicalDisk()>
c0028d8d:	83 c4 10             	add    esp,0x10
c0028d90:	90                   	nop
c0028d91:	83 c4 0c             	add    esp,0xc
c0028d94:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028d96 <SATAPI::~SATAPI()>:
c0028d96:	83 ec 0c             	sub    esp,0xc
c0028d99:	83 ec 0c             	sub    esp,0xc
c0028d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028da0:	e8 cd ff ff ff       	call   c0028d72 <SATAPI::~SATAPI()>
c0028da5:	83 c4 10             	add    esp,0x10
c0028da8:	83 ec 08             	sub    esp,0x8
c0028dab:	68 80 01 00 00       	push   0x180
c0028db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028db4:	e8 fb 9e fe ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0028db9:	83 c4 10             	add    esp,0x10
c0028dbc:	83 c4 0c             	add    esp,0xc
c0028dbf:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028dc0 <AVX::~AVX()>:
c0028dc0:	83 ec 0c             	sub    esp,0xc
c0028dc3:	ba 10 ce 02 c0       	mov    edx,0xc002ce10
c0028dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dcc:	89 10                	mov    DWORD PTR [eax],edx
c0028dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dd2:	83 ec 0c             	sub    esp,0xc
c0028dd5:	50                   	push   eax
c0028dd6:	e8 17 b9 fe ff       	call   c00146f2 <FPU::~FPU()>
c0028ddb:	83 c4 10             	add    esp,0x10
c0028dde:	90                   	nop
c0028ddf:	83 c4 0c             	add    esp,0xc
c0028de2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028de4 <AVX::~AVX()>:
c0028de4:	83 ec 0c             	sub    esp,0xc
c0028de7:	83 ec 0c             	sub    esp,0xc
c0028dea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dee:	e8 cd ff ff ff       	call   c0028dc0 <AVX::~AVX()>
c0028df3:	83 c4 10             	add    esp,0x10
c0028df6:	83 ec 08             	sub    esp,0x8
c0028df9:	68 58 01 00 00       	push   0x158
c0028dfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e02:	e8 ad 9e fe ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0028e07:	83 c4 10             	add    esp,0x10
c0028e0a:	83 c4 0c             	add    esp,0xc
c0028e0d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028e0e <MMX::~MMX()>:
c0028e0e:	83 ec 0c             	sub    esp,0xc
c0028e11:	ba 50 ce 02 c0       	mov    edx,0xc002ce50
c0028e16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e1a:	89 10                	mov    DWORD PTR [eax],edx
c0028e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e20:	83 ec 0c             	sub    esp,0xc
c0028e23:	50                   	push   eax
c0028e24:	e8 c9 b8 fe ff       	call   c00146f2 <FPU::~FPU()>
c0028e29:	83 c4 10             	add    esp,0x10
c0028e2c:	90                   	nop
c0028e2d:	83 c4 0c             	add    esp,0xc
c0028e30:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028e32 <MMX::~MMX()>:
c0028e32:	83 ec 0c             	sub    esp,0xc
c0028e35:	83 ec 0c             	sub    esp,0xc
c0028e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e3c:	e8 cd ff ff ff       	call   c0028e0e <MMX::~MMX()>
c0028e41:	83 c4 10             	add    esp,0x10
c0028e44:	83 ec 08             	sub    esp,0x8
c0028e47:	68 58 01 00 00       	push   0x158
c0028e4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e50:	e8 5f 9e fe ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0028e55:	83 c4 10             	add    esp,0x10
c0028e58:	83 c4 0c             	add    esp,0xc
c0028e5b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028e5c <SSE::~SSE()>:
c0028e5c:	83 ec 0c             	sub    esp,0xc
c0028e5f:	ba 90 ce 02 c0       	mov    edx,0xc002ce90
c0028e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e68:	89 10                	mov    DWORD PTR [eax],edx
c0028e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e6e:	83 ec 0c             	sub    esp,0xc
c0028e71:	50                   	push   eax
c0028e72:	e8 7b b8 fe ff       	call   c00146f2 <FPU::~FPU()>
c0028e77:	83 c4 10             	add    esp,0x10
c0028e7a:	90                   	nop
c0028e7b:	83 c4 0c             	add    esp,0xc
c0028e7e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028e80 <SSE::~SSE()>:
c0028e80:	83 ec 0c             	sub    esp,0xc
c0028e83:	83 ec 0c             	sub    esp,0xc
c0028e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e8a:	e8 cd ff ff ff       	call   c0028e5c <SSE::~SSE()>
c0028e8f:	83 c4 10             	add    esp,0x10
c0028e92:	83 ec 08             	sub    esp,0x8
c0028e95:	68 58 01 00 00       	push   0x158
c0028e9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e9e:	e8 11 9e fe ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0028ea3:	83 c4 10             	add    esp,0x10
c0028ea6:	83 c4 0c             	add    esp,0xc
c0028ea9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028eaa <x87::~x87()>:
c0028eaa:	83 ec 0c             	sub    esp,0xc
c0028ead:	ba d0 ce 02 c0       	mov    edx,0xc002ced0
c0028eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb6:	89 10                	mov    DWORD PTR [eax],edx
c0028eb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ebc:	83 ec 0c             	sub    esp,0xc
c0028ebf:	50                   	push   eax
c0028ec0:	e8 2d b8 fe ff       	call   c00146f2 <FPU::~FPU()>
c0028ec5:	83 c4 10             	add    esp,0x10
c0028ec8:	90                   	nop
c0028ec9:	83 c4 0c             	add    esp,0xc
c0028ecc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028ece <x87::~x87()>:
c0028ece:	83 ec 0c             	sub    esp,0xc
c0028ed1:	83 ec 0c             	sub    esp,0xc
c0028ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed8:	e8 cd ff ff ff       	call   c0028eaa <x87::~x87()>
c0028edd:	83 c4 10             	add    esp,0x10
c0028ee0:	83 ec 08             	sub    esp,0x8
c0028ee3:	68 58 01 00 00       	push   0x158
c0028ee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eec:	e8 c3 9d fe ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0028ef1:	83 c4 10             	add    esp,0x10
c0028ef4:	83 c4 0c             	add    esp,0xc
c0028ef7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028ef8 <IOAPIC::~IOAPIC()>:
c0028ef8:	83 ec 0c             	sub    esp,0xc
c0028efb:	ba 28 d0 02 c0       	mov    edx,0xc002d028
c0028f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f04:	89 10                	mov    DWORD PTR [eax],edx
c0028f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f0a:	83 ec 0c             	sub    esp,0xc
c0028f0d:	50                   	push   eax
c0028f0e:	e8 79 b1 fe ff       	call   c001408c <Device::~Device()>
c0028f13:	83 c4 10             	add    esp,0x10
c0028f16:	90                   	nop
c0028f17:	83 c4 0c             	add    esp,0xc
c0028f1a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028f1c <IOAPIC::~IOAPIC()>:
c0028f1c:	83 ec 0c             	sub    esp,0xc
c0028f1f:	83 ec 0c             	sub    esp,0xc
c0028f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f26:	e8 cd ff ff ff       	call   c0028ef8 <IOAPIC::~IOAPIC()>
c0028f2b:	83 c4 10             	add    esp,0x10
c0028f2e:	83 ec 08             	sub    esp,0x8
c0028f31:	68 68 01 00 00       	push   0x168
c0028f36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f3a:	e8 75 9d fe ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0028f3f:	83 c4 10             	add    esp,0x10
c0028f42:	83 c4 0c             	add    esp,0xc
c0028f45:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028f46 <APIC::~APIC()>:
c0028f46:	83 ec 0c             	sub    esp,0xc
c0028f49:	ba e0 cf 02 c0       	mov    edx,0xc002cfe0
c0028f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f52:	89 10                	mov    DWORD PTR [eax],edx
c0028f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f58:	83 ec 0c             	sub    esp,0xc
c0028f5b:	50                   	push   eax
c0028f5c:	e8 5b bc fe ff       	call   c0014bbc <InterruptController::~InterruptController()>
c0028f61:	83 c4 10             	add    esp,0x10
c0028f64:	90                   	nop
c0028f65:	83 c4 0c             	add    esp,0xc
c0028f68:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028f6a <APIC::~APIC()>:
c0028f6a:	83 ec 0c             	sub    esp,0xc
c0028f6d:	83 ec 0c             	sub    esp,0xc
c0028f70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f74:	e8 cd ff ff ff       	call   c0028f46 <APIC::~APIC()>
c0028f79:	83 c4 10             	add    esp,0x10
c0028f7c:	83 ec 08             	sub    esp,0x8
c0028f7f:	68 58 21 00 00       	push   0x2158
c0028f84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f88:	e8 27 9d fe ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0028f8d:	83 c4 10             	add    esp,0x10
c0028f90:	83 c4 0c             	add    esp,0xc
c0028f93:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028f94 <PIC::~PIC()>:
c0028f94:	83 ec 0c             	sub    esp,0xc
c0028f97:	ba 78 d0 02 c0       	mov    edx,0xc002d078
c0028f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa0:	89 10                	mov    DWORD PTR [eax],edx
c0028fa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa6:	83 ec 0c             	sub    esp,0xc
c0028fa9:	50                   	push   eax
c0028faa:	e8 0d bc fe ff       	call   c0014bbc <InterruptController::~InterruptController()>
c0028faf:	83 c4 10             	add    esp,0x10
c0028fb2:	90                   	nop
c0028fb3:	83 c4 0c             	add    esp,0xc
c0028fb6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028fb8 <PIC::~PIC()>:
c0028fb8:	83 ec 0c             	sub    esp,0xc
c0028fbb:	83 ec 0c             	sub    esp,0xc
c0028fbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fc2:	e8 cd ff ff ff       	call   c0028f94 <PIC::~PIC()>
c0028fc7:	83 c4 10             	add    esp,0x10
c0028fca:	83 ec 08             	sub    esp,0x8
c0028fcd:	68 58 21 00 00       	push   0x2158
c0028fd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fd6:	e8 d9 9c fe ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0028fdb:	83 c4 10             	add    esp,0x10
c0028fde:	83 c4 0c             	add    esp,0xc
c0028fe1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028fe2 <APICTimer::~APICTimer()>:
c0028fe2:	83 ec 0c             	sub    esp,0xc
c0028fe5:	ba cc d0 02 c0       	mov    edx,0xc002d0cc
c0028fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fee:	89 10                	mov    DWORD PTR [eax],edx
c0028ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff4:	83 ec 0c             	sub    esp,0xc
c0028ff7:	50                   	push   eax
c0028ff8:	e8 0f db fe ff       	call   c0016b0c <Timer::~Timer()>
c0028ffd:	83 c4 10             	add    esp,0x10
c0029000:	90                   	nop
c0029001:	83 c4 0c             	add    esp,0xc
c0029004:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029006 <APICTimer::~APICTimer()>:
c0029006:	83 ec 0c             	sub    esp,0xc
c0029009:	83 ec 0c             	sub    esp,0xc
c002900c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029010:	e8 cd ff ff ff       	call   c0028fe2 <APICTimer::~APICTimer()>
c0029015:	83 c4 10             	add    esp,0x10
c0029018:	83 ec 08             	sub    esp,0x8
c002901b:	68 60 01 00 00       	push   0x160
c0029020:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029024:	e8 8b 9c fe ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0029029:	83 c4 10             	add    esp,0x10
c002902c:	83 c4 0c             	add    esp,0xc
c002902f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029030 <PIT::~PIT()>:
c0029030:	83 ec 0c             	sub    esp,0xc
c0029033:	ba 1c d1 02 c0       	mov    edx,0xc002d11c
c0029038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002903c:	89 10                	mov    DWORD PTR [eax],edx
c002903e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029042:	83 ec 0c             	sub    esp,0xc
c0029045:	50                   	push   eax
c0029046:	e8 c1 da fe ff       	call   c0016b0c <Timer::~Timer()>
c002904b:	83 c4 10             	add    esp,0x10
c002904e:	90                   	nop
c002904f:	83 c4 0c             	add    esp,0xc
c0029052:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029054 <PIT::~PIT()>:
c0029054:	83 ec 0c             	sub    esp,0xc
c0029057:	83 ec 0c             	sub    esp,0xc
c002905a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002905e:	e8 cd ff ff ff       	call   c0029030 <PIT::~PIT()>
c0029063:	83 c4 10             	add    esp,0x10
c0029066:	83 ec 08             	sub    esp,0x8
c0029069:	68 5c 01 00 00       	push   0x15c
c002906e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029072:	e8 3d 9c fe ff       	call   c0012cb4 <operator delete(void*, unsigned long)>
c0029077:	83 c4 10             	add    esp,0x10
c002907a:	83 c4 0c             	add    esp,0xc
c002907d:	c3                   	ret    
